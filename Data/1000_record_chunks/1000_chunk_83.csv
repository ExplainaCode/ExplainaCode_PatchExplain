record_number,buggy_code,fixed_code,code_similarity
82001,"@Override public void run(){
  try {
    Sctp.init();
    RTPConnectorUDPImpl rtpConnector=new RTPConnectorUDPImpl(connector);
    rtpConnector.addTarget(new SessionAddress(streamTarget.getDataAddress().getAddress(),streamTarget.getDataAddress().getPort()));
    dtlsControl.setConnector(rtpConnector);
    DtlsTransformEngine engine=(DtlsTransformEngine)dtlsControl.getTransformEngine();
    final DtlsPacketTransformer transformer=(DtlsPacketTransformer)engine.getRTPTransformer();
    sctpSocket=Sctp.createSocket(5000);
    sctpSocket.setNotificationListener(SctpConnection.this);
    sctpSocket.setDataCallback(SctpConnection.this);
    DatagramSocket iceUdpSocket=rtpConnector.getDataSocket();
    byte[] receiveBuffer=new byte[2035];
    DatagramPacket rcvPacket=new DatagramPacket(receiveBuffer,0,receiveBuffer.length);
    sctpSocket.setLink(new NetworkLink(){
      private final RawPacket rawPacket=new RawPacket();
      @Override public void onConnOut(      org.jitsi.sctp4j.SctpSocket s,      byte[] packet) throws IOException {
        rawPacket.setBuffer(packet);
        rawPacket.setLength(packet.length);
        transformer.transform(rawPacket);
      }
    }
);
    final int port=5000;
    sctpSocket.connect(port);
    while (true) {
      iceUdpSocket.receive(rcvPacket);
      RawPacket raw=new RawPacket(rcvPacket.getData(),rcvPacket.getOffset(),rcvPacket.getLength());
      raw=transformer.reverseTransform(raw);
      if (raw == null)       continue;
      sctpSocket.onConnIn(raw.getBuffer(),raw.getOffset(),raw.getLength());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    fireEvent(new JireconTaskEvent(JireconTaskEvent.Type.RECORDER_ABORTED));
  }
}","@Override public void run(){
  DatagramSocket iceUdpSocket=null;
  try {
    Sctp.init();
    RTPConnectorUDPImpl rtpConnector=new RTPConnectorUDPImpl(connector);
    rtpConnector.addTarget(new SessionAddress(streamTarget.getDataAddress().getAddress(),streamTarget.getDataAddress().getPort()));
    dtlsControl.setConnector(rtpConnector);
    DtlsTransformEngine engine=(DtlsTransformEngine)dtlsControl.getTransformEngine();
    final DtlsPacketTransformer transformer=(DtlsPacketTransformer)engine.getRTPTransformer();
    sctpSocket=Sctp.createSocket(5000);
    sctpSocket.setNotificationListener(SctpConnection.this);
    sctpSocket.setDataCallback(SctpConnection.this);
    iceUdpSocket=rtpConnector.getDataSocket();
    byte[] receiveBuffer=new byte[2035];
    DatagramPacket rcvPacket=new DatagramPacket(receiveBuffer,0,receiveBuffer.length);
    sctpSocket.setLink(new NetworkLink(){
      private final RawPacket rawPacket=new RawPacket();
      @Override public void onConnOut(      org.jitsi.sctp4j.SctpSocket s,      byte[] packet) throws IOException {
        rawPacket.setBuffer(packet);
        rawPacket.setLength(packet.length);
        transformer.transform(rawPacket);
      }
    }
);
    final int port=5000;
    sctpSocket.connect(port);
    while (!iceUdpSocket.isClosed()) {
      iceUdpSocket.receive(rcvPacket);
      RawPacket raw=new RawPacket(rcvPacket.getData(),rcvPacket.getOffset(),rcvPacket.getLength());
      raw=transformer.reverseTransform(raw);
      if (raw == null)       continue;
      sctpSocket.onConnIn(raw.getBuffer(),raw.getOffset(),raw.getLength());
    }
  }
 catch (  IOException e) {
    if (!iceUdpSocket.isClosed()) {
      e.printStackTrace();
      fireEvent(new JireconTaskEvent(JireconTaskEvent.Type.RECORDER_ABORTED));
    }
  }
}",0.964152566676226
82002,"/** 
 * Build SCTP connection with remote SCTP server.
 * @param connector
 * @param streamTarget
 */
public void connect(final StreamConnector connector,final MediaStreamTarget streamTarget){
  logger.debug(connector.getDataSocket().getLocalAddress().getHostName() + ""String_Node_Str"" + connector.getDataSocket().getLocalPort()+ ""String_Node_Str""+ streamTarget.getDataAddress().getHostName()+ ""String_Node_Str""+ streamTarget.getDataAddress().getPort());
  dtlsControl.start(MediaType.DATA);
  executorService.execute(new Runnable(){
    @Override public void run(){
      try {
        Sctp.init();
        RTPConnectorUDPImpl rtpConnector=new RTPConnectorUDPImpl(connector);
        rtpConnector.addTarget(new SessionAddress(streamTarget.getDataAddress().getAddress(),streamTarget.getDataAddress().getPort()));
        dtlsControl.setConnector(rtpConnector);
        DtlsTransformEngine engine=(DtlsTransformEngine)dtlsControl.getTransformEngine();
        final DtlsPacketTransformer transformer=(DtlsPacketTransformer)engine.getRTPTransformer();
        sctpSocket=Sctp.createSocket(5000);
        sctpSocket.setNotificationListener(SctpConnection.this);
        sctpSocket.setDataCallback(SctpConnection.this);
        DatagramSocket iceUdpSocket=rtpConnector.getDataSocket();
        byte[] receiveBuffer=new byte[2035];
        DatagramPacket rcvPacket=new DatagramPacket(receiveBuffer,0,receiveBuffer.length);
        sctpSocket.setLink(new NetworkLink(){
          private final RawPacket rawPacket=new RawPacket();
          @Override public void onConnOut(          org.jitsi.sctp4j.SctpSocket s,          byte[] packet) throws IOException {
            rawPacket.setBuffer(packet);
            rawPacket.setLength(packet.length);
            transformer.transform(rawPacket);
          }
        }
);
        final int port=5000;
        sctpSocket.connect(port);
        while (true) {
          iceUdpSocket.receive(rcvPacket);
          RawPacket raw=new RawPacket(rcvPacket.getData(),rcvPacket.getOffset(),rcvPacket.getLength());
          raw=transformer.reverseTransform(raw);
          if (raw == null)           continue;
          sctpSocket.onConnIn(raw.getBuffer(),raw.getOffset(),raw.getLength());
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        fireEvent(new JireconTaskEvent(JireconTaskEvent.Type.RECORDER_ABORTED));
      }
    }
  }
);
}","/** 
 * Build SCTP connection with remote SCTP server.
 * @param connector
 * @param streamTarget
 */
public void connect(final StreamConnector connector,final MediaStreamTarget streamTarget){
  logger.debug(connector.getDataSocket().getLocalAddress().getHostName() + ""String_Node_Str"" + connector.getDataSocket().getLocalPort()+ ""String_Node_Str""+ streamTarget.getDataAddress().getHostName()+ ""String_Node_Str""+ streamTarget.getDataAddress().getPort());
  dtlsControl.start(MediaType.DATA);
  executorService.execute(new Runnable(){
    @Override public void run(){
      DatagramSocket iceUdpSocket=null;
      try {
        Sctp.init();
        RTPConnectorUDPImpl rtpConnector=new RTPConnectorUDPImpl(connector);
        rtpConnector.addTarget(new SessionAddress(streamTarget.getDataAddress().getAddress(),streamTarget.getDataAddress().getPort()));
        dtlsControl.setConnector(rtpConnector);
        DtlsTransformEngine engine=(DtlsTransformEngine)dtlsControl.getTransformEngine();
        final DtlsPacketTransformer transformer=(DtlsPacketTransformer)engine.getRTPTransformer();
        sctpSocket=Sctp.createSocket(5000);
        sctpSocket.setNotificationListener(SctpConnection.this);
        sctpSocket.setDataCallback(SctpConnection.this);
        iceUdpSocket=rtpConnector.getDataSocket();
        byte[] receiveBuffer=new byte[2035];
        DatagramPacket rcvPacket=new DatagramPacket(receiveBuffer,0,receiveBuffer.length);
        sctpSocket.setLink(new NetworkLink(){
          private final RawPacket rawPacket=new RawPacket();
          @Override public void onConnOut(          org.jitsi.sctp4j.SctpSocket s,          byte[] packet) throws IOException {
            rawPacket.setBuffer(packet);
            rawPacket.setLength(packet.length);
            transformer.transform(rawPacket);
          }
        }
);
        final int port=5000;
        sctpSocket.connect(port);
        while (!iceUdpSocket.isClosed()) {
          iceUdpSocket.receive(rcvPacket);
          RawPacket raw=new RawPacket(rcvPacket.getData(),rcvPacket.getOffset(),rcvPacket.getLength());
          raw=transformer.reverseTransform(raw);
          if (raw == null)           continue;
          sctpSocket.onConnIn(raw.getBuffer(),raw.getOffset(),raw.getLength());
        }
      }
 catch (      IOException e) {
        if (!iceUdpSocket.isClosed()) {
          e.printStackTrace();
          fireEvent(new JireconTaskEvent(JireconTaskEvent.Type.RECORDER_ABORTED));
        }
      }
    }
  }
);
}",0.9622833843017328
82003,"/** 
 * Make the <tt>JireconRecorderImpl</tt> ready to start recording media streams.
 * @throws OperationFailedException if some operation failed and thepreparation is aborted.
 */
private void prepareRecorders() throws OperationFailedException {
  logger.info(""String_Node_Str"");
  for (  Entry<MediaType,RTPTranslator> e : rtpTranslators.entrySet()) {
    Recorder recorder=new RecorderRtpImpl(e.getValue());
    recorders.put(e.getKey(),recorder);
  }
}","/** 
 * Make the <tt>JireconRecorderImpl</tt> ready to start recording media streams.
 * @throws OperationFailedException if some operation failed and thepreparation is aborted.
 */
private void prepareRecorders() throws OperationFailedException {
  logger.info(""String_Node_Str"");
  for (  Entry<MediaType,RTPTranslator> e : rtpTranslators.entrySet()) {
    Recorder recorder=mediaService.createRecorder(e.getValue());
    recorders.put(e.getKey(),recorder);
  }
}",0.9674620390455532
82004,"/** 
 * This is actually the main part of method ""start"", in order to make the method ""start"" to be asynchronous.
 */
@Override public void run(){
  try {
    session.joinMUC(info.getMucJid(),info.getNickname());
    JingleIQ initIq=session.waitForInitPacket();
    transport.harvestLocalCandidates();
    Map<MediaType,Map<MediaFormat,Byte>> formatAndPTs=JinglePacketParser.getFormatAndDynamicPTs(initIq);
    Map<MediaType,Long> localSsrcs=recorder.getLocalSsrcs();
    Map<MediaType,IceUdpTransportPacketExtension> transportPEs=new HashMap<MediaType,IceUdpTransportPacketExtension>();
    transportPEs.put(MediaType.AUDIO,transport.getTransportPacketExt());
    transportPEs.put(MediaType.VIDEO,transport.getTransportPacketExt());
    Map<MediaType,DtlsFingerprintPacketExtension> fingerprintPEs=new HashMap<MediaType,DtlsFingerprintPacketExtension>();
    for (    MediaType mediaType : MediaType.values()) {
      if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)       continue;
      DtlsFingerprintPacketExtension fingerprintPE=new DtlsFingerprintPacketExtension();
      fingerprintPE.setHash(srtpControl.getLocalFingerprintHashFunction(mediaType));
      fingerprintPE.setFingerprint(srtpControl.getLocalFingerprintHashFunction(mediaType));
      fingerprintPE.setText(srtpControl.getLocalFingerprintHashFunction(mediaType));
      fingerprintPEs.put(mediaType,fingerprintPE);
    }
    session.sendAcceptPacket(formatAndPTs,localSsrcs,transportPEs,fingerprintPEs);
    session.waitForResultPacket();
    Map<MediaType,IceUdpTransportPacketExtension> remoteTransportPEs=JinglePacketParser.getTransportPacketExts(initIq);
    transport.harvestRemoteCandidates(remoteTransportPEs);
    transport.startConnectivityEstablishment();
    Map<MediaType,StreamConnector> streamConnectors=new HashMap<MediaType,StreamConnector>();
    Map<MediaType,MediaStreamTarget> mediaStreamTargets=new HashMap<MediaType,MediaStreamTarget>();
    for (    MediaType mediaType : MediaType.values()) {
      if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)       continue;
      StreamConnector streamConnector=transport.getStreamConnector(mediaType);
      streamConnectors.put(mediaType,streamConnector);
      MediaStreamTarget mediaStreamTarget=transport.getStreamTarget(mediaType);
      mediaStreamTargets.put(mediaType,mediaStreamTarget);
    }
    recorder.startRecording(formatAndPTs,streamConnectors,mediaStreamTargets);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fireEvent(new JireconEvent(info.getMucJid(),JireconEvent.Type.TASK_ABORTED));
  }
}","/** 
 * This is actually the main part of method ""start"", in order to make the method ""start"" to be asynchronous.
 */
@Override public void run(){
  try {
    session.joinMUC(info.getMucJid(),info.getNickname());
    JingleIQ initIq=session.waitForInitPacket();
    transport.harvestLocalCandidates();
    Map<MediaType,Map<MediaFormat,Byte>> formatAndPTs=JinglePacketParser.getFormatAndDynamicPTs(initIq);
    Map<MediaType,Long> localSsrcs=recorder.getLocalSsrcs();
    Map<MediaType,AbstractPacketExtension> transportPEs=new HashMap<MediaType,AbstractPacketExtension>();
    transportPEs.put(MediaType.AUDIO,transport.getTransportPacketExt(MediaType.AUDIO));
    transportPEs.put(MediaType.VIDEO,transport.getTransportPacketExt(MediaType.VIDEO));
    Map<MediaType,AbstractPacketExtension> fingerprintPEs=new HashMap<MediaType,AbstractPacketExtension>();
    fingerprintPEs.put(MediaType.AUDIO,srtpControl.getFingerprintPacketExt(MediaType.AUDIO));
    fingerprintPEs.put(MediaType.VIDEO,srtpControl.getFingerprintPacketExt(MediaType.VIDEO));
    session.sendAcceptPacket(formatAndPTs,localSsrcs,transportPEs,fingerprintPEs);
    session.waitForResultPacket();
    Map<MediaType,IceUdpTransportPacketExtension> remoteTransportPEs=JinglePacketParser.getTransportPacketExts(initIq);
    transport.harvestRemoteCandidates(remoteTransportPEs);
    transport.startConnectivityEstablishment();
    Map<MediaType,StreamConnector> streamConnectors=new HashMap<MediaType,StreamConnector>();
    Map<MediaType,MediaStreamTarget> mediaStreamTargets=new HashMap<MediaType,MediaStreamTarget>();
    for (    MediaType mediaType : MediaType.values()) {
      if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)       continue;
      StreamConnector streamConnector=transport.getStreamConnector(mediaType);
      streamConnectors.put(mediaType,streamConnector);
      MediaStreamTarget mediaStreamTarget=transport.getStreamTarget(mediaType);
      mediaStreamTargets.put(mediaType,mediaStreamTarget);
    }
    recorder.startRecording(formatAndPTs,streamConnectors,mediaStreamTargets);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fireEvent(new JireconEvent(info.getMucJid(),JireconEvent.Type.TASK_ABORTED));
  }
}",0.7890479153702551
82005,"/** 
 * {@inheritDoc}
 */
@Override public void handleEvent(JireconEvent evt){
  String mucJid=evt.getMucJid();
switch (evt.getType()) {
case TASK_ABORTED:
    stopJireconTask(mucJid,false);
  logger.info(""String_Node_Str"" + mucJid + ""String_Node_Str"");
fireEvent(evt);
break;
case TASK_FINISED:
stopJireconTask(mucJid,true);
logger.info(""String_Node_Str"" + mucJid + ""String_Node_Str"");
fireEvent(evt);
break;
default :
break;
}
}","/** 
 * {@inheritDoc}
 */
@Override public void handleEvent(JireconEvent evt){
  String mucJid=evt.getMucJid();
switch (evt.getType()) {
case TASK_ABORTED:
    stopJireconTask(mucJid,false);
  logger.info(""String_Node_Str"" + mucJid + ""String_Node_Str"");
fireEvent(evt);
break;
case TASK_FINISED:
stopJireconTask(mucJid,true);
logger.info(""String_Node_Str"" + mucJid + ""String_Node_Str"");
fireEvent(evt);
break;
case TASK_STARTED:
logger.info(""String_Node_Str"" + mucJid + ""String_Node_Str"");
fireEvent(evt);
break;
default :
break;
}
}",0.8764278296988577
82006,"private IQ createIqSet(RecordingSession session,String status,String rid){
  return createIqSet(session,status,rid,""String_Node_Str"");
}","private IQ createIqSet(RecordingSession session,String status,String rid){
  return createIqSet(session,status,rid,null);
}",0.9266409266409268
82007,"@Override public void handleEvent(JireconEvent evt){
  System.out.println(""String_Node_Str"" + evt.getMucJid() + ""String_Node_Str""+ evt.getType());
  final String mucJid=evt.getMucJid();
  RecordingSession session=null;
  for (  RecordingSession s : recordingSessions) {
    if (0 == mucJid.compareTo(s.getMucJid())) {
      session=s;
      break;
    }
  }
  if (null == session)   return;
  IQ notification=null;
  if (JireconEvent.Type.TASK_ABORTED == evt.getType()) {
    jirecon.stopJireconTask(evt.getMucJid(),false);
    recordingSessions.remove(session);
    notification=createIqSet(session,""String_Node_Str"",session.getRid());
  }
 else   if (JireconEvent.Type.TASK_FINISED == evt.getType()) {
    jirecon.stopJireconTask(evt.getMucJid(),true);
    recordingSessions.remove(session);
    notification=createIqSet(session,""String_Node_Str"",session.getRid());
  }
 else   if (JireconEvent.Type.TASK_STARTED == evt.getType()) {
    notification=createIqSet(session,""String_Node_Str"",session.getRid(),session.getOutputPath());
  }
  if (null != notification) {
    send(notification);
  }
}","@Override public void handleEvent(JireconEvent evt){
  System.out.println(""String_Node_Str"" + evt.getMucJid() + ""String_Node_Str""+ evt.getType());
  final String mucJid=evt.getMucJid();
  RecordingSession session=null;
synchronized (recordingSessions) {
    for (    RecordingSession s : recordingSessions) {
      if (0 == mucJid.compareTo(s.getMucJid())) {
        session=s;
        break;
      }
    }
    if (null == session)     return;
    IQ notification=null;
    if (JireconEvent.Type.TASK_ABORTED == evt.getType()) {
      jirecon.stopJireconTask(evt.getMucJid(),false);
      recordingSessions.remove(session);
      notification=createIqSet(session,""String_Node_Str"",session.getRid());
    }
 else     if (JireconEvent.Type.TASK_FINISED == evt.getType()) {
      jirecon.stopJireconTask(evt.getMucJid(),true);
      recordingSessions.remove(session);
      notification=createIqSet(session,""String_Node_Str"",session.getRid());
    }
 else     if (JireconEvent.Type.TASK_STARTED == evt.getType()) {
      notification=createIqSet(session,""String_Node_Str"",session.getRid(),session.getOutputPath());
    }
    if (null != notification) {
      send(notification);
    }
  }
}",0.8996933858957512
82008,"@Override public void preComponentStart(){
  System.out.println(""String_Node_Str"");
  if (isStarted) {
    return;
  }
  jirecon.addEventListener(this);
  try {
    jirecon.init(CONFIURATION_PATH);
  }
 catch (  OperationFailedException e) {
    e.printStackTrace();
    isStarted=false;
  }
  isStarted=true;
  System.out.println(""String_Node_Str"");
}","@Override public void preComponentStart(){
  if (isStarted) {
    return;
  }
  System.out.println(""String_Node_Str"");
  jirecon.addEventListener(this);
  try {
    jirecon.init(CONFIURATION_PATH);
  }
 catch (  OperationFailedException e) {
    e.printStackTrace();
    isStarted=false;
  }
  isStarted=true;
  System.out.println(""String_Node_Str"");
}",0.9005681818181818
82009,"/** 
 * As for <tt>JireconComponent</tt>, there are two kinds of ""result"" IQ (action=""notification""). The only difference between them is the attribute ""status"": <ol> <li> ""initiating"". Notify client the ""start"" command has been received.</li> <li> ""stopping"". Notify client the ""stop"" command has been received.</li> </ol> <p> <strong>Warning:</strong> These ""result"" IQs should be sent back to client immediately after receiving ""set"" IQ.
 * @param iq
 * @param status
 * @param rid
 * @return
 */
private IQ createIqResult(IQ iq,String status,String rid){
  Element record=docFactory.createElement(ELEMENT_NAME,NAMESPACE);
  docFactory.createAttribute(record,""String_Node_Str"",""String_Node_Str"");
  docFactory.createAttribute(record,""String_Node_Str"",status);
  docFactory.createAttribute(record,""String_Node_Str"",""String_Node_Str"");
  docFactory.createAttribute(record,""String_Node_Str"",""String_Node_Str"");
  docFactory.createAttribute(record,""String_Node_Str"",rid);
  IQ result=IQ.createResultIQ(iq);
  result.addExtension(new PacketExtension(record));
  return result;
}","/** 
 * As for <tt>JireconComponent</tt>, there are two kinds of ""result"" IQ (action=""notification""). The only difference between them is the attribute ""status"": <ol> <li> ""initiating"". Notify client the ""start"" command has been received.</li> <li> ""stopping"". Notify client the ""stop"" command has been received.</li> </ol> <p> <strong>Warning:</strong> These ""result"" IQs should be sent back to client immediately after receiving ""set"" IQ.
 * @param iq
 * @param status
 * @param rid
 * @return
 */
private IQ createIqResult(IQ iq,String status,String rid){
  IQ result=IQ.createResultIQ(iq);
  Element record=docFactory.createElement(ELEMENT_NAME,NAMESPACE);
  record.add(docFactory.createAttribute(record,""String_Node_Str"",status));
  record.add(docFactory.createAttribute(record,""String_Node_Str"",rid));
  result.setChildElement(record);
  return result;
}",0.7138429752066116
82010,"@Override protected IQ handleIQSet(IQ iq) throws Exception {
  System.out.println(""String_Node_Str"" + iq.toXML());
  Element element=iq.getChildElement();
  System.out.println(""String_Node_Str"" + element.getNamespace().getStringValue());
  System.out.println(""String_Node_Str"" + element.getName());
  for (int i=0; i < element.attributeCount(); i++) {
    final Attribute attr=element.attribute(i);
    System.out.println(attr.getName() + ""String_Node_Str"" + attr.getValue());
  }
  final String action=element.attribute(""String_Node_Str"").getValue();
  if (0 == ""String_Node_Str"".compareTo(action)) {
    startRecording(iq);
  }
 else   if (0 == ""String_Node_Str"".compareTo(action)) {
    stopRecording(iq);
  }
  return IQ.createResultIQ(iq);
}","@Override protected IQ handleIQSet(IQ iq) throws Exception {
  System.out.println(""String_Node_Str"" + iq.toXML());
  Element element=iq.getChildElement();
  final String action=element.attribute(""String_Node_Str"").getValue();
  IQ result=null;
  if (0 == ""String_Node_Str"".compareTo(action)) {
    result=startRecording(iq);
  }
 else   if (0 == ""String_Node_Str"".compareTo(action)) {
    result=stopRecording(iq);
  }
  return result;
}",0.3279797125950972
82011,"private void startRecording(IQ iq){
  final Element element=iq.getChildElement();
  String mucJid=element.attribute(""String_Node_Str"").getValue();
  mucJid=mucJid.split(""String_Node_Str"")[0];
  RecordingSession session=new RecordingSession(mucJid);
  recordingSessions.add(session);
  send(createIqResult(iq,""String_Node_Str"",session.getRid()));
  jirecon.startJireconTask(mucJid);
}","private IQ startRecording(IQ iq){
  final Element element=iq.getChildElement();
  String mucJid=element.attribute(""String_Node_Str"").getValue();
  mucJid=mucJid.split(""String_Node_Str"")[0];
  RecordingSession session=new RecordingSession(mucJid,iq.getFrom().toString());
synchronized (recordingSessions) {
    recordingSessions.add(session);
  }
  jirecon.startJireconTask(mucJid);
  return createIqResult(iq,""String_Node_Str"",session.getRid());
}",0.7180722891566265
82012,"public RecordingSession(String mucJid){
  this.rid=generateRid();
  this.mucJid=mucJid;
  this.outputPath=generateOutputPath();
}","public RecordingSession(String mucJid,String clientJid){
  this.rid=generateRid();
  this.mucJid=mucJid;
  this.clientJid=clientJid;
  this.outputPath=generateOutputPath();
}",0.8514851485148515
82013,"private void stopRecording(IQ iq){
  final Element element=iq.getChildElement();
  final String rid=element.attribute(""String_Node_Str"").getValue();
  RecordingSession session=null;
  for (  RecordingSession s : recordingSessions) {
    if (0 == rid.compareTo(s.getRid())) {
      session=s;
      break;
    }
  }
  if (null != session) {
    send(createIqResult(iq,""String_Node_Str"",rid));
    jirecon.stopJireconTask(session.getMucJid(),true);
  }
}","private IQ stopRecording(IQ iq){
  final Element element=iq.getChildElement();
  final String rid=element.attribute(""String_Node_Str"").getValue();
  RecordingSession session=null;
synchronized (recordingSessions) {
    for (    RecordingSession s : recordingSessions) {
      if (0 == rid.compareTo(s.getRid())) {
        session=s;
        break;
      }
    }
  }
  if (null != session) {
    jirecon.stopJireconTask(session.getMucJid(),true);
  }
  return createIqResult(iq,""String_Node_Str"",rid);
}",0.7756813417190775
82014,"/** 
 * Stop the <tt>JireconTask</tt>
 */
public void stop();","/** 
 * Stop the <tt>JireconTask</tt>.
 */
public void stop();",0.991869918699187
82015,"/** 
 * Get local candidates
 * @return List of <tt>LocalCandidate</tt>
 */
private List<LocalCandidate> getLocalCandidates(){
  List<LocalCandidate> candidates=new ArrayList<LocalCandidate>();
  for (  MediaType mediaType : MediaType.values()) {
    if (MediaType.AUDIO != mediaType && MediaType.VIDEO != mediaType) {
      continue;
    }
    IceMediaStream stream=getIceMediaStream(mediaType);
    for (    Component com : stream.getComponents()) {
      candidates.addAll(com.getLocalCandidates());
    }
  }
  return candidates;
}","/** 
 * Get local candidates of specified <tt>MediaType</tt>
 * @param mediaType
 * @return List of <tt>LocalCandidate</tt>
 */
private List<LocalCandidate> getLocalCandidates(MediaType mediaType){
  List<LocalCandidate> candidates=new ArrayList<LocalCandidate>();
  IceMediaStream stream=getIceMediaStream(mediaType);
  for (  Component com : stream.getComponents()) {
    candidates.addAll(com.getLocalCandidates());
  }
  return candidates;
}",0.7244897959183674
82016,"/** 
 * Create list of <tt>CandidatePacketExtension</tt>.
 * @return List of <tt>CandidatePacketExtension</tt>
 */
private List<CandidatePacketExtension> getLocalCandidatePacketExts(){
  List<CandidatePacketExtension> candidatePEs=new ArrayList<CandidatePacketExtension>();
  int id=1;
  for (  LocalCandidate candidate : getLocalCandidates()) {
    CandidatePacketExtension candidatePE=new CandidatePacketExtension();
    candidatePE.setComponent(candidate.getParentComponent().getComponentID());
    candidatePE.setFoundation(candidate.getFoundation());
    candidatePE.setGeneration(iceAgent.getGeneration());
    candidatePE.setID(String.valueOf(id++));
    candidatePE.setNetwork(0);
    candidatePE.setIP(candidate.getTransportAddress().getHostAddress());
    candidatePE.setPort(candidate.getTransportAddress().getPort());
    candidatePE.setPriority(candidate.getPriority());
    candidatePE.setProtocol(candidate.getTransport().toString());
    candidatePE.setType(CandidateType.valueOf(candidate.getType().toString()));
    candidatePEs.add(candidatePE);
  }
  return candidatePEs;
}","/** 
 * Create list of <tt>CandidatePacketExtension</tt> with specified <tt>MediaType</tt>.
 * @param mediaType
 * @return List of <tt>CandidatePacketExtension</tt>
 */
private List<CandidatePacketExtension> getLocalCandidatePacketExts(MediaType mediaType){
  List<CandidatePacketExtension> candidatePEs=new ArrayList<CandidatePacketExtension>();
  int id=1;
  for (  LocalCandidate candidate : getLocalCandidates(mediaType)) {
    CandidatePacketExtension candidatePE=new CandidatePacketExtension();
    candidatePE.setComponent(candidate.getParentComponent().getComponentID());
    candidatePE.setFoundation(candidate.getFoundation());
    candidatePE.setGeneration(iceAgent.getGeneration());
    candidatePE.setID(String.valueOf(id++));
    candidatePE.setNetwork(0);
    candidatePE.setIP(candidate.getTransportAddress().getHostAddress());
    candidatePE.setPort(candidate.getTransportAddress().getPort());
    candidatePE.setPriority(candidate.getPriority());
    candidatePE.setProtocol(candidate.getTransport().toString());
    candidatePE.setType(CandidateType.valueOf(candidate.getType().toString()));
    candidatePEs.add(candidatePE);
  }
  return candidatePEs;
}",0.925925925925926
82017,"/** 
 * {@inheritDoc}<p> <strong>Warning:</strong> This method will wait for the selected candidate pair which should be generated during establish ICE connectivity. However, sometimes selected pair can't be generated forever, in this case, this method will hang.
 */
@Override public StreamConnector getStreamConnector(MediaType mediaType) throws OperationFailedException {
  logger.info(""String_Node_Str"");
  if (streamConnectors.containsKey(mediaType))   return streamConnectors.get(mediaType);
  if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)   return null;
  int sumWaitTime=0;
  while (sumWaitTime <= MAX_WAIT_TIME) {
    try {
      if (IceProcessingState.TERMINATED == iceAgent.getState())       break;
      logger.info(""String_Node_Str"" + sumWaitTime + ""String_Node_Str"");
      sumWaitTime+=MIN_WAIT_TIME;
      TimeUnit.SECONDS.sleep(MIN_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (IceProcessingState.TERMINATED != iceAgent.getState()) {
    throw new OperationFailedException(""String_Node_Str"",OperationFailedException.GENERAL_ERROR);
  }
  StreamConnector streamConnector=null;
  IceMediaStream stream=getIceMediaStream(mediaType);
  if (null == stream) {
    throw new OperationFailedException(""String_Node_Str"",OperationFailedException.GENERAL_ERROR);
  }
  final CandidatePair rtpPair=stream.getComponent(Component.RTP).getSelectedPair();
  final CandidatePair rtcpPair=stream.getComponent(Component.RTCP).getSelectedPair();
  System.out.println(rtpPair);
  final DatagramSocket rtpSocket=rtpPair.getLocalCandidate().getDatagramSocket();
  final DatagramSocket rtcpSocket=rtcpPair.getLocalCandidate().getDatagramSocket();
  streamConnector=new DefaultStreamConnector(rtpSocket,rtcpSocket);
  streamConnectors.put(mediaType,streamConnector);
  return streamConnector;
}","/** 
 * {@inheritDoc}<p> <strong>Warning:</strong> This method will wait for the selected candidate pair which should be generated during establish ICE connectivity. However, sometimes selected pair can't be generated forever, in this case, this method will hang.
 */
@Override public StreamConnector getStreamConnector(MediaType mediaType) throws OperationFailedException {
  logger.info(""String_Node_Str"");
  if (streamConnectors.containsKey(mediaType))   return streamConnectors.get(mediaType);
  if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)   return null;
  int sumWaitTime=0;
  while (sumWaitTime <= MAX_WAIT_TIME) {
    try {
      if (IceProcessingState.TERMINATED == iceAgent.getState())       break;
      logger.info(""String_Node_Str"" + sumWaitTime + ""String_Node_Str"");
      sumWaitTime+=MIN_WAIT_TIME;
      TimeUnit.SECONDS.sleep(MIN_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (IceProcessingState.TERMINATED != iceAgent.getState()) {
    throw new OperationFailedException(""String_Node_Str"",OperationFailedException.GENERAL_ERROR);
  }
  StreamConnector streamConnector=null;
  IceMediaStream stream=getIceMediaStream(mediaType);
  if (null == stream) {
    throw new OperationFailedException(""String_Node_Str"",OperationFailedException.GENERAL_ERROR);
  }
  final CandidatePair rtpPair=stream.getComponent(Component.RTP).getSelectedPair();
  final CandidatePair rtcpPair=stream.getComponent(Component.RTCP).getSelectedPair();
  final DatagramSocket rtpSocket=rtpPair.getLocalCandidate().getDatagramSocket();
  final DatagramSocket rtcpSocket=rtcpPair.getLocalCandidate().getDatagramSocket();
  streamConnector=new DefaultStreamConnector(rtpSocket,rtcpSocket);
  streamConnectors.put(mediaType,streamConnector);
  return streamConnector;
}",0.8359099538920531
82018,"/** 
 * {@inheritDoc}
 */
@Override public AbstractPacketExtension getTransportPacketExt(MediaType mediaType){
  logger.info(""String_Node_Str"");
  IceUdpTransportPacketExtension transportPE=new IceUdpTransportPacketExtension();
  transportPE.setPassword(iceAgent.getLocalPassword());
  transportPE.setUfrag(iceAgent.getLocalUfrag());
  for (  CandidatePacketExtension candidatePE : getLocalCandidatePacketExts()) {
    transportPE.addCandidate(candidatePE);
  }
  return transportPE;
}","/** 
 * {@inheritDoc}
 */
@Override public AbstractPacketExtension getTransportPacketExt(MediaType mediaType){
  logger.info(""String_Node_Str"");
  IceUdpTransportPacketExtension transportPE=new IceUdpTransportPacketExtension();
  transportPE.setPassword(iceAgent.getLocalPassword());
  transportPE.setUfrag(iceAgent.getLocalUfrag());
  for (  CandidatePacketExtension candidatePE : getLocalCandidatePacketExts(mediaType)) {
    transportPE.addCandidate(candidatePE);
  }
  return transportPE;
}",0.9908069458631256
82019,"@Override public void init(String conferenceJid,XMPPConnection connection,String savingDir){
  logger.setLevelAll();
  logger.debug(this.getClass() + ""String_Node_Str"");
  transport=new JireconIceUdpTransportManagerImpl();
  srtpControl=new JireconDtlsControlManagerImpl();
  session=new JireconSessionImpl(connection,conferenceJid,savingDir);
  recorder=new JireconRecorderImpl(savingDir);
  updateState(JireconTaskState.INITIATED);
}","@Override public void init(String conferenceJid,XMPPConnection connection,String savingDir){
  logger.setLevelAll();
  logger.debug(this.getClass() + ""String_Node_Str"");
  new File(savingDir).mkdir();
  transport=new JireconIceUdpTransportManagerImpl();
  srtpControl=new JireconDtlsControlManagerImpl();
  JireconSessionInfo sessionInfo=new JireconSessionInfo();
  JireconRecorderInfo recorderInfo=new JireconRecorderInfo();
  session=new JireconSessionImpl(connection,conferenceJid,savingDir,sessionInfo,recorderInfo);
  recorder=new JireconRecorderImpl(savingDir,recorderInfo,sessionInfo);
  updateState(JireconTaskState.INITIATED);
}",0.7985074626865671
82020,"@Override public void start(){
  try {
    transport.harvestLocalCandidates();
    JireconSessionInfo sessionInfo=session.getSessionInfo();
    JireconRecorderInfo recorderInfo=recorder.getRecorderInfo();
    JingleIQ initIq=session.connect(sessionInfo,recorderInfo,transport,srtpControl);
    Map<MediaType,String> fingerprints=JinglePacketParser.getFingerprint(initIq);
    for (    Entry<MediaType,String> f : fingerprints.entrySet()) {
      srtpControl.addRemoteFingerprint(f.getKey(),f.getValue());
    }
    Map<MediaType,IceUdpTransportPacketExtension> transportPEs=JinglePacketParser.getTransportPacketExts(initIq);
    transport.harvestRemoteCandidates(transportPEs);
    transport.startConnectivityCheck();
    Map<MediaType,StreamConnector> streamConnectors=new HashMap<MediaType,StreamConnector>();
    Map<MediaType,MediaStreamTarget> mediaStreamTargets=new HashMap<MediaType,MediaStreamTarget>();
    for (    MediaType mediaType : MediaType.values()) {
      if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)       continue;
      StreamConnector streamConnector=transport.getStreamConnector(mediaType);
      streamConnectors.put(mediaType,streamConnector);
      MediaStreamTarget mediaStreamTarget=transport.getStreamTarget(mediaType);
      mediaStreamTargets.put(mediaType,mediaStreamTarget);
    }
    Map<MediaFormat,Byte> formatAndDynamicPTs=sessionInfo.getFormatAndPayloadTypes();
    recorder.startRecording(formatAndDynamicPTs,streamConnectors,mediaStreamTargets);
    session.writeMetaData();
  }
 catch (  BindException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  XMPPException e) {
    e.printStackTrace();
  }
catch (  OperationFailedException e) {
    e.printStackTrace();
  }
catch (  MediaException e) {
    e.printStackTrace();
  }
}","@Override public void start(){
  try {
    transport.harvestLocalCandidates();
    JireconSessionInfo sessionInfo=session.getSessionInfo();
    JireconRecorderInfo recorderInfo=recorder.getRecorderInfo();
    JingleIQ initIq=session.connect(sessionInfo,recorderInfo,transport,srtpControl);
    Map<MediaType,String> fingerprints=JinglePacketParser.getFingerprint(initIq);
    for (    Entry<MediaType,String> f : fingerprints.entrySet()) {
      srtpControl.addRemoteFingerprint(f.getKey(),f.getValue());
    }
    Map<MediaType,IceUdpTransportPacketExtension> transportPEs=JinglePacketParser.getTransportPacketExts(initIq);
    transport.harvestRemoteCandidates(transportPEs);
    transport.startConnectivityCheck();
    Map<MediaType,StreamConnector> streamConnectors=new HashMap<MediaType,StreamConnector>();
    Map<MediaType,MediaStreamTarget> mediaStreamTargets=new HashMap<MediaType,MediaStreamTarget>();
    for (    MediaType mediaType : MediaType.values()) {
      if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)       continue;
      StreamConnector streamConnector=transport.getStreamConnector(mediaType);
      streamConnectors.put(mediaType,streamConnector);
      MediaStreamTarget mediaStreamTarget=transport.getStreamTarget(mediaType);
      mediaStreamTargets.put(mediaType,mediaStreamTarget);
    }
    Map<MediaFormat,Byte> formatAndDynamicPTs=sessionInfo.getFormatAndPayloadTypes();
    recorder.startRecording(formatAndDynamicPTs,streamConnectors,mediaStreamTargets);
  }
 catch (  BindException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  XMPPException e) {
    e.printStackTrace();
  }
catch (  OperationFailedException e) {
    e.printStackTrace();
  }
catch (  MediaException e) {
    e.printStackTrace();
  }
}",0.9923341263547448
82021,"private void startRecordingStreams() throws IOException, MediaException, OperationFailedException {
  logger.info(""String_Node_Str"");
  if (!recorderInfo.readyTo(JireconRecorderEvent.START_RECORDING_STREAM)) {
    throw new OperationFailedException(""String_Node_Str"",OperationFailedException.GENERAL_ERROR);
  }
  for (  Entry<MediaType,Recorder> e : recorders.entrySet()) {
    e.getValue().start(""String_Node_Str"",SAVING_DIR);
  }
  updateState(JireconRecorderEvent.START_RECORDING_STREAM);
}","private void startRecordingStreams() throws IOException, MediaException, OperationFailedException {
  logger.info(""String_Node_Str"");
  if (!recorderInfo.readyTo(JireconRecorderEvent.START_RECORDING_STREAM)) {
    throw new OperationFailedException(""String_Node_Str"",OperationFailedException.GENERAL_ERROR);
  }
  RecorderEventHandler eventHandler=new JireconRecorderEventHandler(SAVING_DIR + ""String_Node_Str"");
  for (  Entry<MediaType,Recorder> e : recorders.entrySet()) {
    e.getValue().setEventHandler(eventHandler);
    e.getValue().start(e.getKey().toString(),SAVING_DIR);
  }
  updateState(JireconRecorderEvent.START_RECORDING_STREAM);
}",0.8273444347063978
82022,"@Override public synchronized boolean handleEvent(RecorderEvent evt){
  System.out.println(evt + ""String_Node_Str"" + evt.getAudioSsrc()+ ""String_Node_Str""+ evt.getSsrc()+ ""String_Node_Str""+ evt.getFilename());
  MediaType mediaType=evt.getMediaType();
  RecorderEvent.Type type=evt.getType();
  long duration=evt.getDuration();
  long ssrc=evt.getSsrc();
  if (RecorderEvent.Type.RECORDING_STARTED.equals(type)) {
    saveRecorderEvent(evt);
    return true;
  }
  if (RecorderEvent.Type.RECORDING_ENDED.equals(type)) {
    if (evt.getInstant() == -1 && duration != -1) {
      List<RecorderEvent> events=recorderEvents.get(mediaType);
      RecorderEvent start=null;
      for (      RecorderEvent e : events) {
        if (RecorderEvent.Type.RECORDING_STARTED.equals(e.getType()) && e.getSsrc() == ssrc) {
          start=e;
          break;
        }
      }
      if (start != null)       evt.setInstant(start.getInstant() + duration);
    }
    try {
      writeMetaData(evt);
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"",e);
      return false;
    }
  }
  return true;
}","@Override public synchronized boolean handleEvent(RecorderEvent event){
  System.out.println(event + ""String_Node_Str"" + event.getSsrc());
  RecorderEvent.Type type=event.getType();
  if (RecorderEvent.Type.SPEAKER_CHANGED.equals(type)) {
    System.out.println(""String_Node_Str"" + event.getAudioSsrc());
    long audioSsrc=event.getAudioSsrc();
    long videoSsrc=getAssociatedSsrc(audioSsrc,MediaType.AUDIO);
    if (videoSsrc < 0) {
      logger.fatal(""String_Node_Str"" + audioSsrc);
      return false;
    }
    event.setSsrc(videoSsrc);
  }
  return handler.handleEvent(event);
}",0.174170616113744
82023,"public JireconRecorderImpl(String SAVING_DIR){
  this.mediaService=LibJitsi.getMediaService();
  this.SAVING_DIR=SAVING_DIR;
  createMediaStreams();
}","public JireconRecorderImpl(String SAVING_DIR,JireconRecorderInfo recorderInfo,JireconSessionInfo sessionInfo){
  this.mediaService=LibJitsi.getMediaService();
  this.SAVING_DIR=SAVING_DIR;
  this.recorderInfo=recorderInfo;
  this.sessionInfo=sessionInfo;
  createMediaStreams();
}",0.6976744186046512
82024,"public JireconRecorderEventHandler(String filename) throws IOException {
  metaFile=new File(filename);
  if (!metaFile.createNewFile())   throw new IOException(""String_Node_Str"" + metaFile);
  if (!metaFile.canWrite())   throw new IOException(""String_Node_Str"" + metaFile);
}","public JireconRecorderEventHandler(String filename) throws IOException {
  handler=new RecorderEventHandlerJSONImpl(filename);
}",0.4851485148514851
82025,"public JireconSessionImpl(XMPPConnection connection,String conferenceJid,String SAVING_DIR){
  logger.setLevelDebug();
  this.SAVING_DIR=SAVING_DIR;
  ConfigurationService configuration=LibJitsi.getConfigurationService();
  this.NICK=configuration.getString(NICK_KEY);
  this.connection=connection;
  this.sessionInfo.setMucJid(conferenceJid);
  addPacketSendingListener();
  addPacketReceivingListener();
  JireconSessionPacketListener packetListener=new JireconSessionPacketListener(){
    @Override public void handlePacket(    Packet packet){
      if (Presence.class == packet.getClass())       handlePresencePacket((Presence)packet);
    }
  }
;
  addPacketListener(packetListener);
}","public JireconSessionImpl(XMPPConnection connection,String conferenceJid,String SAVING_DIR,JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo){
  logger.setLevelDebug();
  this.SAVING_DIR=SAVING_DIR;
  this.sessionInfo=sessionInfo;
  this.recorderInfo=recorderInfo;
  ConfigurationService configuration=LibJitsi.getConfigurationService();
  this.NICK=configuration.getString(NICK_KEY);
  this.connection=connection;
  this.sessionInfo.setMucJid(conferenceJid);
  addPacketSendingListener();
  addPacketReceivingListener();
  JireconSessionPacketListener packetListener=new JireconSessionPacketListener(){
    @Override public void handlePacket(    Packet packet){
      if (Presence.class == packet.getClass())       handlePresencePacket((Presence)packet);
    }
  }
;
  addPacketListener(packetListener);
}",0.913907284768212
82026,"public void testSessionAndRecorder(){
  task.start();
  try {
    Thread.sleep(20000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  task.stop();
}","public void testSessionAndRecorder(){
  task.start();
  try {
    Thread.sleep(60000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  task.stop();
}",0.994186046511628
82027,"@Override public void startJireconTask(String conferenceJid) throws XMPPException {
  logger.debug(this.getClass() + ""String_Node_Str"" + conferenceJid);
  if (jireconTasks.containsKey(conferenceJid)) {
    logger.info(""String_Node_Str"" + conferenceJid + ""String_Node_Str"");
    return;
  }
  JireconTask j=new JireconTaskImpl();
  jireconTasks.put(conferenceJid,j);
  j.addEventListener(this);
  j.init(configuration,conferenceJid,connection,mediaService);
  j.start();
}","@Override public void startJireconTask(String conferenceJid) throws XMPPException {
  logger.debug(this.getClass() + ""String_Node_Str"" + conferenceJid);
synchronized (jireconTasks) {
    if (jireconTasks.containsKey(conferenceJid)) {
      logger.info(""String_Node_Str"" + conferenceJid + ""String_Node_Str"");
      return;
    }
    JireconTask j=new JireconTaskImpl();
    jireconTasks.put(conferenceJid,j);
    j.addEventListener(this);
    j.init(configuration,conferenceJid,connection,mediaService);
    j.start();
  }
}",0.9175050301810864
82028,"@Override public void start(){
  try {
    transport.harvestLocalCandidates();
    JireconSessionInfo sessionInfo=session.getSessionInfo();
    JireconRecorderInfo recorderInfo=recorder.getRecorderInfo();
    JingleIQ initPacket=session.connect(sessionInfo,recorderInfo,transport,srtpControl);
    Map<MediaType,String> fingerprints=JinglePacketParser.getFingerprint(initPacket);
    for (    Entry<MediaType,String> f : fingerprints.entrySet()) {
      srtpControl.addRemoteFingerprint(f.getKey(),f.getValue());
    }
    Map<MediaType,IceUdpTransportPacketExtension> transportPEs=JinglePacketParser.getTransportPacketExts(initPacket);
    transport.harvestRemoteCandidates(transportPEs);
    transport.startConnectivityCheck();
    Map<MediaType,StreamConnector> streamConnectors=new HashMap<MediaType,StreamConnector>();
    Map<MediaType,MediaStreamTarget> mediaStreamTargets=new HashMap<MediaType,MediaStreamTarget>();
    for (    MediaType mediaType : MediaType.values()) {
      if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)       continue;
      StreamConnector streamConnector=transport.getStreamConnector(mediaType);
      streamConnectors.put(mediaType,streamConnector);
      MediaStreamTarget mediaStreamTarget=transport.getStreamTarget(mediaType);
      mediaStreamTargets.put(mediaType,mediaStreamTarget);
    }
    Map<MediaFormat,Byte> formatAndDynamicPTs=JinglePacketParser.getFormatAndDynamicPTs(initPacket);
    recorder.startRecording(formatAndDynamicPTs,streamConnectors,mediaStreamTargets);
  }
 catch (  BindException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  XMPPException e) {
    e.printStackTrace();
  }
catch (  OperationFailedException e) {
    e.printStackTrace();
  }
catch (  MediaException e) {
    e.printStackTrace();
  }
}","@Override public void start(){
  try {
    transport.harvestLocalCandidates();
    JireconSessionInfo sessionInfo=session.getSessionInfo();
    JireconRecorderInfo recorderInfo=recorder.getRecorderInfo();
    JingleIQ initIq=session.connect(sessionInfo,recorderInfo,transport,srtpControl);
    Map<MediaType,String> fingerprints=JinglePacketParser.getFingerprint(initIq);
    for (    Entry<MediaType,String> f : fingerprints.entrySet()) {
      srtpControl.addRemoteFingerprint(f.getKey(),f.getValue());
    }
    Map<MediaType,IceUdpTransportPacketExtension> transportPEs=JinglePacketParser.getTransportPacketExts(initIq);
    transport.harvestRemoteCandidates(transportPEs);
    transport.startConnectivityCheck();
    Map<MediaType,StreamConnector> streamConnectors=new HashMap<MediaType,StreamConnector>();
    Map<MediaType,MediaStreamTarget> mediaStreamTargets=new HashMap<MediaType,MediaStreamTarget>();
    for (    MediaType mediaType : MediaType.values()) {
      if (mediaType != MediaType.AUDIO && mediaType != MediaType.VIDEO)       continue;
      StreamConnector streamConnector=transport.getStreamConnector(mediaType);
      streamConnectors.put(mediaType,streamConnector);
      MediaStreamTarget mediaStreamTarget=transport.getStreamTarget(mediaType);
      mediaStreamTargets.put(mediaType,mediaStreamTarget);
    }
    Map<MediaFormat,Byte> formatAndDynamicPTs=JinglePacketParser.getFormatAndDynamicPTs(initIq);
    recorder.startRecording(formatAndDynamicPTs,streamConnectors,mediaStreamTargets);
  }
 catch (  BindException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  XMPPException e) {
    e.printStackTrace();
  }
catch (  OperationFailedException e) {
    e.printStackTrace();
  }
catch (  MediaException e) {
    e.printStackTrace();
  }
}",0.9915611814345991
82029,"@Override public void disconnect(Reason reason,String reasonText){
  try {
    sendByePacket(reason,reasonText);
  }
 catch (  OperationFailedException e) {
    e.printStackTrace();
  }
  try {
    leaveConference();
  }
 catch (  OperationFailedException e) {
    e.printStackTrace();
  }
}","@Override public void disconnect(Reason reason,String reasonText){
  try {
    sendByePacket(reason,reasonText);
  }
 catch (  OperationFailedException e) {
    e.printStackTrace();
  }
  try {
    leaveMUC();
  }
 catch (  OperationFailedException e) {
    e.printStackTrace();
  }
}",0.9808695652173912
82030,"private void sendAccpetPacket(JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo,JireconTransportManager transportManager,JireconSrtpControlManager srtpControlManager) throws OperationFailedException {
  logger.info(""String_Node_Str"");
  if (!sessionInfo.readyTo(JireconSessionEvent.SEND_SESSION_ACCEPT)) {
    throw new OperationFailedException(""String_Node_Str"",OperationFailedException.GENERAL_ERROR);
  }
  JingleIQ acceptPacket=createAcceptPacket(sessionInfo,recorderInfo,transportManager,srtpControlManager);
  connection.sendPacket(acceptPacket);
  updateState(JireconSessionEvent.SEND_SESSION_ACCEPT);
}","private void sendAccpetPacket(JingleIQ initIq,JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo,JireconTransportManager transportManager,JireconSrtpControlManager srtpControlManager) throws OperationFailedException {
  logger.info(""String_Node_Str"");
  if (!sessionInfo.readyTo(JireconSessionEvent.SEND_SESSION_ACCEPT)) {
    throw new OperationFailedException(""String_Node_Str"",OperationFailedException.GENERAL_ERROR);
  }
  JingleIQ acceptPacket=createAcceptPacket(initIq,sessionInfo,recorderInfo,transportManager,srtpControlManager);
  connection.sendPacket(acceptPacket);
  updateState(JireconSessionEvent.SEND_SESSION_ACCEPT);
}",0.981904012588513
82031,"private void handlePresencePacket(Presence p){
  PacketExtension packetExt=p.getExtension(MediaExtension.NAMESPACE);
  MUCUser userExt=(MUCUser)p.getExtension(""String_Node_Str"",""String_Node_Str"");
  String remoteJid=userExt.getItem().getJid();
  if (null != remoteJid && null != packetExt) {
    MediaExtension mediaExt=(MediaExtension)packetExt;
    for (    MediaType mediaType : MediaType.values()) {
      if (MediaType.AUDIO != mediaType && MediaType.VIDEO != mediaType) {
        continue;
      }
      MediaDirection direction=MediaDirection.parseString(mediaExt.getDirection(mediaType.toString()));
      String ssrc=mediaExt.getDirection(mediaType.toString());
      if (direction == MediaDirection.SENDONLY || direction == MediaDirection.SENDRECV) {
        sessionInfo.addRemoteSsrc(mediaType,remoteJid,ssrc);
      }
    }
  }
}","private void handlePresencePacket(Presence p){
  PacketExtension packetExt=p.getExtension(MediaExtension.NAMESPACE);
  MUCUser userExt=(MUCUser)p.getExtension(""String_Node_Str"",""String_Node_Str"");
  String remoteJid=userExt.getItem().getJid();
  if (null != remoteJid && null != packetExt) {
    MediaExtension mediaExt=(MediaExtension)packetExt;
    for (    MediaType mediaType : MediaType.values()) {
      if (MediaType.AUDIO != mediaType && MediaType.VIDEO != mediaType) {
        continue;
      }
      MediaDirection direction=MediaDirection.parseString(mediaExt.getDirection(mediaType.toString()));
      String ssrc=mediaExt.getSsrc(mediaType.toString());
      if (direction == MediaDirection.SENDONLY || direction == MediaDirection.SENDRECV) {
        sessionInfo.addRemoteSsrc(mediaType,remoteJid,ssrc);
      }
    }
  }
}",0.992248062015504
82032,"private JingleIQ createAcceptPacket(JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo,JireconTransportManager transportManager,JireconSrtpControlManager srtpControlManager){
  logger.info(""String_Node_Str"");
  final List<ContentPacketExtension> contents=new ArrayList<ContentPacketExtension>();
  for (  MediaType mediaType : MediaType.values()) {
    if (MediaType.AUDIO != mediaType && MediaType.VIDEO != mediaType) {
      continue;
    }
    contents.add(createContentPacketExtension(mediaType,sessionInfo,recorderInfo,transportManager,srtpControlManager));
  }
  JingleIQ acceptJiq=JinglePacketFactory.createSessionAccept(sessionInfo.getLocalJid(),sessionInfo.getRemoteJid(),sessionInfo.getSid(),contents);
  return acceptJiq;
}","private JingleIQ createAcceptPacket(JingleIQ initIq,JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo,JireconTransportManager transportManager,JireconSrtpControlManager srtpControlManager){
  logger.info(""String_Node_Str"");
  final List<ContentPacketExtension> contents=new ArrayList<ContentPacketExtension>();
  for (  MediaType mediaType : MediaType.values()) {
    if (MediaType.AUDIO != mediaType && MediaType.VIDEO != mediaType) {
      continue;
    }
    ContentPacketExtension initIqContent=JinglePacketParser.getContentPacketExt(initIq,mediaType);
    contents.add(createContentPacketExtension(mediaType,initIqContent,sessionInfo,recorderInfo,transportManager,srtpControlManager));
  }
  JingleIQ acceptJiq=JinglePacketFactory.createSessionAccept(sessionInfo.getLocalJid(),sessionInfo.getRemoteJid(),sessionInfo.getSid(),contents);
  return acceptJiq;
}",0.895871842267406
82033,"private ContentPacketExtension createContentPacketExtension(MediaType mediaType,JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo,JireconTransportManager transportManager,JireconSrtpControlManager srtpControlManager){
  logger.debug(this.getClass() + ""String_Node_Str"");
  IceUdpTransportPacketExtension transportPE=transportManager.getTransportPacketExt();
  String fingerprint=srtpControlManager.getLocalFingerprint(mediaType);
  String hash=srtpControlManager.getLocalFingerprintHashFunction(mediaType);
  DtlsFingerprintPacketExtension fingerprintPE=transportPE.getFirstChildOfType(DtlsFingerprintPacketExtension.class);
  if (fingerprintPE == null) {
    fingerprintPE=new DtlsFingerprintPacketExtension();
    transportPE.addChildExtension(fingerprintPE);
  }
  fingerprintPE.setFingerprint(fingerprint);
  fingerprintPE.setHash(hash);
  List<PayloadTypePacketExtension> payloadTypes=new ArrayList<PayloadTypePacketExtension>();
  for (  Map.Entry<MediaFormat,Byte> e : sessionInfo.getPayloadTypes(mediaType).entrySet()) {
    PayloadTypePacketExtension payloadType=new PayloadTypePacketExtension();
    payloadType.setId(e.getValue());
    payloadType.setName(e.getKey().getEncoding());
    if (e.getKey() instanceof AudioMediaFormat) {
      payloadType.setChannels(((AudioMediaFormat)e.getKey()).getChannels());
    }
    payloadType.setClockrate((int)e.getKey().getClockRate());
    for (    Map.Entry<String,String> en : e.getKey().getFormatParameters().entrySet()) {
      ParameterPacketExtension parameter=new ParameterPacketExtension();
      parameter.setName(en.getKey());
      parameter.setValue(en.getValue());
      payloadType.addParameter(parameter);
    }
    payloadTypes.add(payloadType);
  }
  RtpDescriptionPacketExtension description=new RtpDescriptionPacketExtension();
  description.setMedia(mediaType.toString());
  for (  PayloadTypePacketExtension p : payloadTypes) {
    description.addPayloadType(p);
  }
  SourcePacketExtension sourcePacketExtension=new SourcePacketExtension();
  description.setSsrc(recorderInfo.getLocalSsrc(mediaType).toString());
  sourcePacketExtension.setSSRC(recorderInfo.getLocalSsrc(mediaType));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",recorderInfo.getMsid(mediaType)));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",recorderInfo.getMsLabel()));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",recorderInfo.getLabel(mediaType)));
  description.addChildExtension(sourcePacketExtension);
  ContentPacketExtension content=new ContentPacketExtension();
  content.setCreator(CreatorEnum.responder);
  content.setName(description.getMedia());
  content.setSenders(SendersEnum.initiator);
  content.addChildExtension(description);
  content.addChildExtension(transportPE);
  return content;
}","private ContentPacketExtension createContentPacketExtension(MediaType mediaType,ContentPacketExtension initIqContent,JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo,JireconTransportManager transportManager,JireconSrtpControlManager srtpControlManager){
  logger.debug(this.getClass() + ""String_Node_Str"");
  IceUdpTransportPacketExtension transportPE=transportManager.getTransportPacketExt();
  String fingerprint=srtpControlManager.getLocalFingerprint(mediaType);
  String hash=srtpControlManager.getLocalFingerprintHashFunction(mediaType);
  DtlsFingerprintPacketExtension fingerprintPE=transportPE.getFirstChildOfType(DtlsFingerprintPacketExtension.class);
  if (fingerprintPE == null) {
    fingerprintPE=new DtlsFingerprintPacketExtension();
    transportPE.addChildExtension(fingerprintPE);
  }
  fingerprintPE.setFingerprint(fingerprint);
  fingerprintPE.setHash(hash);
  List<PayloadTypePacketExtension> payloadTypes=new ArrayList<PayloadTypePacketExtension>();
  for (  Map.Entry<MediaFormat,Byte> e : sessionInfo.getPayloadTypes(mediaType).entrySet()) {
    PayloadTypePacketExtension payloadType=new PayloadTypePacketExtension();
    payloadType.setId(e.getValue());
    payloadType.setName(e.getKey().getEncoding());
    if (e.getKey() instanceof AudioMediaFormat) {
      payloadType.setChannels(((AudioMediaFormat)e.getKey()).getChannels());
    }
    payloadType.setClockrate((int)e.getKey().getClockRate());
    for (    Map.Entry<String,String> en : e.getKey().getFormatParameters().entrySet()) {
      ParameterPacketExtension parameter=new ParameterPacketExtension();
      parameter.setName(en.getKey());
      parameter.setValue(en.getValue());
      payloadType.addParameter(parameter);
    }
    payloadTypes.add(payloadType);
  }
  RtpDescriptionPacketExtension description=new RtpDescriptionPacketExtension();
  description.setMedia(mediaType.toString());
  for (  PayloadTypePacketExtension p : payloadTypes) {
    description.addPayloadType(p);
  }
  SourcePacketExtension sourcePacketExtension=new SourcePacketExtension();
  description.setSsrc(recorderInfo.getLocalSsrc(mediaType).toString());
  sourcePacketExtension.setSSRC(recorderInfo.getLocalSsrc(mediaType));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",recorderInfo.getMsid(mediaType)));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",recorderInfo.getMsLabel()));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",recorderInfo.getLabel(mediaType)));
  description.addChildExtension(sourcePacketExtension);
  ContentPacketExtension content=new ContentPacketExtension();
  content.setCreator(CreatorEnum.responder);
  content.setName(initIqContent.getName());
  content.setSenders(SendersEnum.initiator);
  content.addChildExtension(description);
  content.addChildExtension(transportPE);
  return content;
}",0.9866163349347976
82034,"@Override public JingleIQ connect(JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo,JireconTransportManager transportManager,JireconSrtpControlManager srtpControlManager) throws XMPPException, OperationFailedException {
  joinConference();
  JingleIQ initPacket=waitForInitPacket();
  recordSessionInfo(initPacket);
  sendAck(initPacket);
  sendAccpetPacket(sessionInfo,recorderInfo,transportManager,srtpControlManager);
  waitForAckPacket();
  return initPacket;
}","@Override public JingleIQ connect(JireconSessionInfo sessionInfo,JireconRecorderInfo recorderInfo,JireconTransportManager transportManager,JireconSrtpControlManager srtpControlManager) throws XMPPException, OperationFailedException {
  joinMUC();
  JingleIQ initIq=waitForInitPacket();
  recordSessionInfo(initIq);
  sendAck(initIq);
  sendAccpetPacket(initIq,sessionInfo,recorderInfo,transportManager,srtpControlManager);
  waitForAckPacket();
  return initIq;
}",0.8768577494692145
82035,"public void updateState(JireconSessionEvent evt){
switch (evt) {
case JOIN_CONFERENCE:
    state=JireconSessionState.IN_CONFERENCE;
  break;
case LEAVE_CONFERENCE:
state=JireconSessionState.INIT;
break;
case SEND_SESSION_ACCEPT:
state=JireconSessionState.SENT_SESSION_ACCEPT;
break;
case SEND_SESSION_TERMINATE:
state=JireconSessionState.IN_CONFERENCE;
break;
case WAIT_SESSION_ACK:
state=JireconSessionState.CONNECTED;
break;
case WAIT_SESSION_INIT:
state=JireconSessionState.GOT_SESSION_INIT;
break;
}
}","public void updateState(JireconSessionEvent evt){
switch (evt) {
case JOIN_MUC:
    state=JireconSessionState.IN_CONFERENCE;
  break;
case LEAVE_MUC:
state=JireconSessionState.INIT;
break;
case SEND_SESSION_ACCEPT:
state=JireconSessionState.SENT_SESSION_ACCEPT;
break;
case SEND_SESSION_TERMINATE:
state=JireconSessionState.IN_CONFERENCE;
break;
case WAIT_SESSION_ACK:
state=JireconSessionState.CONNECTED;
break;
case WAIT_SESSION_INIT:
state=JireconSessionState.GOT_SESSION_INIT;
break;
}
}",0.9036144578313252
82036,"public boolean readyTo(JireconSessionEvent evt){
switch (evt) {
case JOIN_CONFERENCE:
    if (JireconSessionState.INIT != state)     return false;
  break;
case LEAVE_CONFERENCE:
if (JireconSessionState.IN_CONFERENCE != state) return false;
break;
case SEND_SESSION_ACCEPT:
if (JireconSessionState.GOT_SESSION_INIT != state) return false;
break;
case SEND_SESSION_TERMINATE:
if (JireconSessionState.CONNECTED != state) return false;
break;
case WAIT_SESSION_ACK:
if (JireconSessionState.SENT_SESSION_ACCEPT != state) return false;
break;
case WAIT_SESSION_INIT:
if (JireconSessionState.IN_CONFERENCE != state) return false;
break;
}
return true;
}","public boolean readyTo(JireconSessionEvent evt){
switch (evt) {
case JOIN_MUC:
    if (JireconSessionState.INIT != state)     return false;
  break;
case LEAVE_MUC:
if (JireconSessionState.IN_CONFERENCE != state) return false;
break;
case SEND_SESSION_ACCEPT:
if (JireconSessionState.GOT_SESSION_INIT != state) return false;
break;
case SEND_SESSION_TERMINATE:
if (JireconSessionState.CONNECTED != state) return false;
break;
case WAIT_SESSION_ACK:
if (JireconSessionState.SENT_SESSION_ACCEPT != state) return false;
break;
case WAIT_SESSION_INIT:
if (JireconSessionState.IN_CONFERENCE != state) return false;
break;
}
return true;
}",0.9796875
82037,"/** 
 * Join a JitsiMeet conference, prepare for building Jingle session.
 * @throws XMPPException
 */
@Override public void startSession(String conferenceJid) throws XMPPException {
  info.setConferenceJid(conferenceJid);
  LibJitsi.start();
  initiateIceAgent();
  joinConference();
}","/** 
 * Join a JitsiMeet conference, prepare for building Jingle session.
 * @throws XMPPException
 */
@Override public void startSession(String conferenceJid) throws XMPPException {
  info.setConferenceJid(conferenceJid);
  initiateIceAgent();
  joinConference();
}",0.8586956521739131
82038,"/** 
 * Leave this JitsiMeet conference
 */
@Override public void terminateSession(){
  closeSession();
  leaveConference();
  uninitiateIceAgent();
  LibJitsi.stop();
}","/** 
 * Leave this JitsiMeet conference
 */
@Override public void terminateSession(){
  closeSession();
  leaveConference();
  uninitiateIceAgent();
}",0.9404388714733544
82039,"/** 
 * Uninitialize JingleSessionManager, such as release some system resources. This method should be called at the end.
 * @return True if succeeded, false if failed.
 */
public boolean uninit();","/** 
 * Uninitialize JingleSessionManager, such as release some system resources. This method should be called at the end.
 * @return True if succeeded, false if failed.
 */
public void uninit();",0.9770992366412212
82040,"/** 
 * Initialize the manager. This method should be called before open any Jingle session.
 * @throws XMPPException Throws XMPPException if can't construct XMPPconnection.
 */
@Override public void init(JireconConfiguration configuration) throws XMPPException {
  final String xmppHost=configuration.getProperty(XMPP_HOST_KEY);
  final int xmppPort=Integer.valueOf(configuration.getProperty(XMPP_PORT_KEY));
  try {
    connect(xmppHost,xmppPort);
    login();
  }
 catch (  XMPPException e) {
    logger.fatal(e.getXMPPError() + ""String_Node_Str"");
    disconnect();
    throw e;
  }
  initiatePacketProviders();
  initiatePacketListeners();
}","/** 
 * Initialize the manager. This method should be called before open any Jingle session.
 * @throws XMPPException Throws XMPPException if can't construct XMPPconnection.
 */
@Override public void init(JireconConfiguration configuration) throws XMPPException {
  LibJitsi.start();
  final String xmppHost=configuration.getProperty(XMPP_HOST_KEY);
  final int xmppPort=Integer.valueOf(configuration.getProperty(XMPP_PORT_KEY));
  try {
    connect(xmppHost,xmppPort);
    login();
  }
 catch (  XMPPException e) {
    logger.fatal(e.getXMPPError() + ""String_Node_Str"");
    disconnect();
    throw e;
  }
  initiatePacketProviders();
  initiatePacketListeners();
}",0.9847560975609756
82041,"/** 
 * Uninitialize this Jingle session manager.
 */
@Override public boolean uninit(){
  if (sessions != null && sessions.isEmpty()) {
    for (    Map.Entry<String,JireconSession> e : sessions.entrySet()) {
      e.getValue().terminateSession();
    }
  }
  disconnect();
  return true;
}","/** 
 * Uninitialize this Jingle session manager.
 */
@Override public void uninit(){
  if (sessions != null && sessions.isEmpty()) {
    for (    Map.Entry<String,JireconSession> e : sessions.entrySet()) {
      e.getValue().terminateSession();
    }
  }
  disconnect();
  LibJitsi.stop();
}",0.9365351629502572
82042,"@Override public SessionInfo getSessionInfo(String conferenceJid){
  return sessions.get(conferenceJid).getSessionInfo();
}","@Override public SessionInfo getSessionInfo(String conferenceJid){
  final JireconSession session=sessions.get(conferenceJid);
  if (null != session) {
    return session.getSessionInfo();
  }
 else {
    return null;
  }
}",0.6705202312138728
82043,"/** 
 * Close an existed Jingle session with specified conference id.
 * @param conferenceJid
 * @return True if succeeded, false if failed.
 */
@Override public void closeJingleSession(String conferenceJid){
  if (null == sessions || !sessions.containsKey(conferenceJid))   return;
  JireconSession js=sessions.get(conferenceJid);
  sessions.remove(conferenceJid);
  js.terminateSession();
}","/** 
 * Close an existed Jingle session with specified conference id.
 * @param conferenceJid
 * @return True if succeeded, false if failed.
 */
@Override public void closeJingleSession(String conferenceJid){
  if (null == sessions || !sessions.containsKey(conferenceJid)) {
    return;
  }
  JireconSession js=sessions.remove(conferenceJid);
  if (null != js) {
    js.terminateSession();
  }
}",0.8589580686149937
82044,"public SpearalContextImpl(){
  this.classAliases=new HashMap<String,String>();
  this.typeInstantiators=new ArrayList<TypeInstantiator>();
  this.typeInstantiatorsCache=new CopyOnWriteValueMap<Type,TypeInstantiator>(true,new ValueProvider<Type,TypeInstantiator>(){
    @Override public TypeInstantiator createValue(    SpearalContext context,    Type key){
      securizer.checkDecodable(key);
      for (      TypeInstantiator instantiator : typeInstantiators) {
        if (instantiator.canInstantiate(key))         return instantiator;
      }
      throw new RuntimeException(""String_Node_Str"" + key);
    }
  }
);
  this.propertyInstantiators=new ArrayList<PropertyInstantiator>();
  this.propertyInstantiatorsCache=new CopyOnWriteValueMap<Property,PropertyInstantiator>(false,new ValueProvider<Property,PropertyInstantiator>(){
    @Override public PropertyInstantiator createValue(    SpearalContext context,    Property key){
      securizer.checkDecodable(key.getGenericType());
      for (      PropertyInstantiator instantiator : propertyInstantiators) {
        if (instantiator.canInstantiate(key))         return instantiator;
      }
      throw new RuntimeException(""String_Node_Str"" + key);
    }
  }
);
  this.converterProviders=new ArrayList<ConverterProvider>();
  this.convertersCache=new CopyOnWriteDualIdentityMap<Class<?>,Type,Converter<?>>(new DualIdentityMap.ValueProvider<Class<?>,Type,Converter<?>>(){
    @Override public Converter<?> createValue(    SpearalContext context,    Class<?> valueClass,    Type targetType){
      for (      ConverterProvider provider : converterProviders) {
        Converter<?> converter=provider.getConverter(valueClass,targetType);
        if (converter != null)         return converter;
      }
      throw new RuntimeException(""String_Node_Str"" + valueClass + ""String_Node_Str""+ targetType);
    }
  }
);
  this.coderProviders=new ArrayList<CoderProvider>();
  this.codersCache=new CopyOnWriteValueMap<Class<?>,Coder>(true,new ValueProvider<Class<?>,Coder>(){
    @Override public Coder createValue(    SpearalContext context,    Class<?> key){
      for (      CoderProvider provider : coderProviders) {
        Coder coder=provider.getCoder(key);
        if (coder != null)         return coder;
      }
      throw new RuntimeException(""String_Node_Str"" + key);
    }
  }
);
  this.propertyFactories=new ArrayList<PropertyFactory>();
}","public SpearalContextImpl(){
  this.classAliases=new HashMap<String,String>();
  this.typeInstantiators=new ArrayList<TypeInstantiator>();
  this.typeInstantiatorsCache=new CopyOnWriteValueMap<Type,TypeInstantiator>(true,new ValueProvider<Type,TypeInstantiator>(){
    @Override public TypeInstantiator createValue(    SpearalContext context,    Type key){
      for (      TypeInstantiator instantiator : typeInstantiators) {
        if (instantiator.canInstantiate(key))         return instantiator;
      }
      throw new RuntimeException(""String_Node_Str"" + key);
    }
  }
);
  this.propertyInstantiators=new ArrayList<PropertyInstantiator>();
  this.propertyInstantiatorsCache=new CopyOnWriteValueMap<Property,PropertyInstantiator>(false,new ValueProvider<Property,PropertyInstantiator>(){
    @Override public PropertyInstantiator createValue(    SpearalContext context,    Property key){
      for (      PropertyInstantiator instantiator : propertyInstantiators) {
        if (instantiator.canInstantiate(key))         return instantiator;
      }
      throw new RuntimeException(""String_Node_Str"" + key);
    }
  }
);
  this.converterProviders=new ArrayList<ConverterProvider>();
  this.convertersCache=new CopyOnWriteDualIdentityMap<Class<?>,Type,Converter<?>>(new DualIdentityMap.ValueProvider<Class<?>,Type,Converter<?>>(){
    @Override public Converter<?> createValue(    SpearalContext context,    Class<?> valueClass,    Type targetType){
      for (      ConverterProvider provider : converterProviders) {
        Converter<?> converter=provider.getConverter(valueClass,targetType);
        if (converter != null)         return converter;
      }
      throw new RuntimeException(""String_Node_Str"" + valueClass + ""String_Node_Str""+ targetType);
    }
  }
);
  this.coderProviders=new ArrayList<CoderProvider>();
  this.codersCache=new CopyOnWriteValueMap<Class<?>,Coder>(true,new ValueProvider<Class<?>,Coder>(){
    @Override public Coder createValue(    SpearalContext context,    Class<?> key){
      for (      CoderProvider provider : coderProviders) {
        Coder coder=provider.getCoder(key);
        if (coder != null)         return coder;
      }
      throw new RuntimeException(""String_Node_Str"" + key);
    }
  }
);
  this.propertyFactories=new ArrayList<PropertyFactory>();
}",0.9806998939554612
82045,"@Override public SpearalDateTime readDateTime(int parameterizedType) throws IOException {
  boolean date=((parameterizedType & 0x08) != 0);
  boolean time=((parameterizedType & 0x04) != 0);
  int year=0;
  int month=0;
  int day=0;
  int hours=0;
  int minutes=0;
  int seconds=0;
  int nanoseconds=0;
  if (date) {
    ensureAvailable(2);
    month=(buffer[position++] & 0xff);
    day=(buffer[position++] & 0xff);
    int length0=((month >>> 4) & 0x03);
    boolean inverse=((month & 0x80) != 0);
    month&=0x0f;
    ensureAvailable(length0 + 1);
    year=readUnsignedIntegerValue(length0);
    if (inverse)     year=-year;
    year+=2000;
  }
  if (time) {
    ensureAvailable(3);
    hours=(buffer[position++] & 0xff);
    minutes=(buffer[position++] & 0xff);
    seconds=(buffer[position++] & 0xff);
switch (parameterizedType & 0x03) {
case 1:
      nanoseconds=readUnsignedIntegerValue(hours >>> 5);
    break;
case 2:
  nanoseconds=readUnsignedIntegerValue(hours >>> 5) * 1000;
break;
case 3:
nanoseconds=readUnsignedIntegerValue(hours >>> 5) * 1000000;
break;
}
hours&=0x1f;
}
return new SpearalDateTime(year,month,day,hours,minutes,seconds,nanoseconds,date,time);
}","@Override public SpearalDateTime readDateTime(int parameterizedType) throws IOException {
  boolean date=((parameterizedType & 0x08) != 0);
  boolean time=((parameterizedType & 0x04) != 0);
  int year=0;
  int month=0;
  int day=0;
  int hours=0;
  int minutes=0;
  int seconds=0;
  int nanoseconds=0;
  if (date) {
    ensureAvailable(2);
    month=(buffer[position++] & 0xff);
    day=(buffer[position++] & 0xff);
    int length0=((month >>> 4) & 0x03);
    boolean inverse=((month & 0x80) != 0);
    month&=0x0f;
    ensureAvailable(length0 + 1);
    year=readUnsignedIntegerValue(length0);
    if (inverse)     year=-year;
    year+=2000;
  }
  if (time) {
    ensureAvailable(3);
    hours=(buffer[position++] & 0xff);
    minutes=(buffer[position++] & 0xff);
    seconds=(buffer[position++] & 0xff);
    int subsecondsType=(parameterizedType & 0x03);
    if (subsecondsType != 0) {
      int length0=(hours >>> 5);
      ensureAvailable(length0 + 1);
      nanoseconds=readUnsignedIntegerValue(length0);
      if (subsecondsType == 2)       nanoseconds*=1000;
 else       if (subsecondsType == 3)       nanoseconds*=1000000;
    }
    hours&=0x1f;
  }
  return new SpearalDateTime(year,month,day,hours,minutes,seconds,nanoseconds,date,time);
}",0.8102310231023102
82046,"@Override public void write(ExtendedSpearalEncoder encoder,Object holder) throws IOException, IllegalAccessException, InvocationTargetException {
  encoder.writeCollection((Collection<?>)(field != null ? field.get(holder) : getter.invoke(holder)));
}","@Override public void write(ExtendedSpearalEncoder encoder,Object holder) throws IOException, IllegalAccessException, InvocationTargetException {
  Collection<?> value=(Collection<?>)(field != null ? field.get(holder) : getter.invoke(holder));
  if (value == null)   encoder.writeNull();
 else   encoder.writeCollection(value);
}",0.7772020725388601
82047,"@Override public void write(ExtendedSpearalEncoder encoder,Object holder) throws IOException, IllegalAccessException, InvocationTargetException {
  encoder.writeMap((Map<?,?>)(field != null ? field.get(holder) : getter.invoke(holder)));
}","@Override public void write(ExtendedSpearalEncoder encoder,Object holder) throws IOException, IllegalAccessException, InvocationTargetException {
  Map<?,?> value=(Map<?,?>)(field != null ? field.get(holder) : getter.invoke(holder));
  if (value == null)   encoder.writeNull();
 else   encoder.writeMap(value);
}",0.6145454545454545
82048,"@Test public void test() throws IOException {
  encodeDecode(new ChildBean(),-1);
  encodeDecode(new ChildBean(-3,""String_Node_Str"",true,0.001),-1);
  ChildBean bean=new ChildBean(56,""String_Node_Str"",false,3.001);
  bean.getSimpleBeans().add(new SimpleBean(true,3,5.09,""String_Node_Str""));
  bean.getSimpleBeans().add(new SimpleBean(false,-5,-10.09,""String_Node_Str""));
  encodeDecode(bean,-1);
}","@Test public void test() throws IOException {
  encodeDecode(new ChildBean(),-1);
  encodeDecode(new ChildBean(-3,""String_Node_Str"",true,0.001),-1);
  ChildBean bean=new ChildBean(56,""String_Node_Str"",false,3.001);
  bean.setSimpleBeans(new HashSet<SimpleBean>());
  bean.getSimpleBeans().add(new SimpleBean(true,3,5.09,""String_Node_Str""));
  bean.getSimpleBeans().add(new SimpleBean(false,-5,-10.09,""String_Node_Str""));
  encodeDecode(bean,-1);
}",0.9407582938388626
82049,"@Before public void setUp() throws Exception {
}","@Before public void setUp() throws Exception {
  printStream=System.out;
}",0.7868852459016393
82050,"public ChildBean(int parentIntProperty,String parentStringProperty,boolean childBooleanProperty,double childDoubleProperty){
  super(parentIntProperty,parentStringProperty);
  this.childBooleanProperty=childBooleanProperty;
  this.childDoubleProperty=childDoubleProperty;
  this.simpleBeans=new HashSet<SimpleBean>();
}","public ChildBean(int parentIntProperty,String parentStringProperty,boolean childBooleanProperty,double childDoubleProperty){
  super(parentIntProperty,parentStringProperty);
  this.childBooleanProperty=childBooleanProperty;
  this.childDoubleProperty=childDoubleProperty;
}",0.9222972972972971
82051,"/** 
 * Returns true iff the config is valid. Checks if number of edges is integer and the beta control parameter is valid.
 * @return true if the parameter set is valid.
 */
public boolean isValid(){
  return !(edgesPerNewNode < 2 || edgesPerNewNode + 1 > getNumberOfNodes());
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isValid(){
  return super.isValid() && !(edgesPerNewNode < 2 || edgesPerNewNode + 1 > getNumberOfNodes());
}",0.5525114155251142
82052,"/** 
 * Tests if the config is valid
 * @return true if the configuration is valid.
 */
@Override public boolean isValid(){
  return super.isValid() && numberOfEdges <= 0.5 * getNumberOfNodes() * (getNumberOfNodes() - 1);
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isValid(){
  BigInteger maxNumberOfEdges=BigInteger.valueOf(getNumberOfNodes());
  maxNumberOfEdges=maxNumberOfEdges.multiply(maxNumberOfEdges.subtract(BigInteger.ONE));
  maxNumberOfEdges=maxNumberOfEdges.divide(BigInteger.valueOf(2));
  return super.isValid() && numberOfEdges > 0 && BigInteger.valueOf(numberOfEdges).compareTo(maxNumberOfEdges) < 1;
}",0.3184713375796178
82053,"/** 
 * Tests if the config is valid. TODO: Check if sufficient
 * @return true iff the config is valid.
 */
public boolean isValid(){
  return numberOfNodes >= 2;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isValid(){
  return numberOfNodes >= 2;
}",0.5680933852140078
82054,"/** 
 * Create a node with labels and properties.
 * @param database to create the node in.
 * @return created node.
 */
Node createNode(GraphDatabaseService database);","/** 
 * Create a node with labels and properties.
 * @param batchInserter to create the node in.
 * @return created node ID.
 */
long createNode(BatchInserter batchInserter);",0.8187134502923976
82055,"/** 
 * {@inheritDoc}
 */
@Override public Node createNode(GraphDatabaseService database){
  Node node=database.createNode(getPersonLabel());
  Pair<Label,String> genderAndName=getGenderAndName();
  node.addLabel(genderAndName.first());
  node.setProperty(NAME,genderAndName.second());
  return node;
}","/** 
 * {@inheritDoc}
 */
@Override public long createNode(BatchInserter batchInserter){
  Pair<Label,String> genderAndName=getGenderAndName();
  return batchInserter.createNode(Collections.<String,Object>singletonMap(NAME,genderAndName.second()),genderAndName.first());
}",0.4738675958188153
82056,"/** 
 * Create a relationship between two nodes with properties.
 * @param first  first node.
 * @param second second node.
 * @return created relationship.
 */
Relationship createRelationship(Node first,Node second);","/** 
 * Create a relationship between two nodes with properties.
 * @param first         first node ID.
 * @param second        second node ID.
 * @param batchInserter to use when creating relationship.
 * @return created relationship ID.
 */
long createRelationship(long first,long second,BatchInserter batchInserter);",0.5447761194029851
82057,"/** 
 * {@inheritDoc}
 */
@Override public Relationship createRelationship(Node first,Node second){
  return first.createRelationshipTo(second,FRIEND_OF);
}","/** 
 * {@inheritDoc}
 */
@Override public long createRelationship(long first,long second,BatchInserter batchInserter){
  return batchInserter.createRelationship(first,second,FRIEND_OF,Collections.EMPTY_MAP);
}",0.5519125683060109
82058,"public BarabasiAlbertRelationshipGenerator(BarabasiAlbertConfig configuration){
  super(configuration);
}","/** 
 * Create a new generator.
 * @param configuration of the generator.
 */
public BarabasiAlbertRelationshipGenerator(BarabasiAlbertConfig configuration){
  super(configuration);
}",0.7291666666666666
82059,"/** 
 * {@inheritDoc}<p/> Generates a network according to Barabasi-Albert preferential attachment model. Each newly added node has a probability weighted by the node degree to be attached. <p/> Since BA references (Newmann, Barabasi-Albert) do not define strict conditions on initial state of the model, completelly connected network is used to start up the algorithm
 */
@Override protected List<SameTypePair<Integer>> doGenerateEdges(){
  int edgesPerNewNode=getConfiguration().getEdgesPerNewNode();
  CompleteGraphRelationshipGenerator coreGenerator=new CompleteGraphRelationshipGenerator(new NumberOfNodesBasedConfig(edgesPerNewNode + 1));
  List<SameTypePair<Integer>> edges=coreGenerator.doGenerateEdges();
  System.out.println(edges);
  ArrayList<Integer> degrees=new ArrayList<>();
  for (int k=0; k < edgesPerNewNode + 1; ++k) {
    for (int l=0; l < edgesPerNewNode; ++l) {
      degrees.add(k);
    }
  }
  RandomIndexChoice randomIndexChoice=new RandomIndexChoice();
  for (int node=edgesPerNewNode + 1; node < getConfiguration().getNumberOfNodes(); ++node) {
    Set<Integer> omit=new HashSet<>();
    for (int edge=0; edge < edgesPerNewNode; ++edge) {
      while (true) {
        int target=randomIndexChoice.randomIndexChoice(degrees.size());
        if (omit.contains(degrees.get(target)))         continue;
        omit.add(degrees.get(target));
        edges.add(new UnorderedPair<>(degrees.get(target),node));
        degrees.add(node);
        break;
      }
    }
  }
  return edges;
}","/** 
 * {@inheritDoc}<p/>
 */
@Override protected List<SameTypePair<Integer>> doGenerateEdges(){
  int edgesPerNewNode=getConfiguration().getEdgesPerNewNode();
  int numberOfNodes=getConfiguration().getNumberOfNodes();
  List<SameTypePair<Integer>> edges=new CompleteGraphRelationshipGenerator(new NumberOfNodesBasedConfig(edgesPerNewNode + 1)).doGenerateEdges();
  List<Integer> degrees=new ArrayList<>(2 * (numberOfNodes * edgesPerNewNode - (edgesPerNewNode * (edgesPerNewNode - 1)) / 2));
  for (int k=0; k < edgesPerNewNode + 1; k++) {
    for (int l=0; l < edgesPerNewNode; l++) {
      degrees.add(k);
    }
  }
  Set<Integer> omit=new HashSet<>(edgesPerNewNode);
  for (int source=edgesPerNewNode + 1; source < numberOfNodes; source++) {
    omit.clear();
    for (int edge=0; edge < edgesPerNewNode; edge++) {
      while (true) {
        int target=degrees.get(random.nextInt(degrees.size()));
        if (omit.contains(target)) {
          continue;
        }
        omit.add(target);
        edges.add(new UnorderedPair<>(target,source));
        degrees.add(source);
        degrees.add(target);
        break;
      }
    }
  }
  return edges;
}",0.3907011623547056
82060,"@Test(timeout=10 * 1000) public void shouldGenerateRelationshipsForLargeGraphInAReasonableAmountOfTime(){
}","@Test(timeout=20 * 1000) public void shouldGenerateRelationshipsForLargeGraphInAReasonableAmountOfTime(){
}",0.9906542056074766
82061,"/** 
 * TODO: Accept set on the output? (since the graph is simple) <p/> This algorithm is implemented as recommended in <p/> Efficient generation of large random networks by Vladimir Batagelj and Ulrik Brandes <p/> PHYSICAL REVIEW E 71, 036113, 2005 <p/> and relies on excellent hashing performance of Java implementation of HashSet.
 * @return edge list
 */
protected List<SameTypePair<Integer>> doGenerateEdgesSimpler(){
  int numberOfNodes=getConfiguration().getNumberOfNodes();
  int numberOfEdges=getConfiguration().getNumberOfEdges();
  int origin;
  int target;
  RandomIndexChoice indexChoice=new RandomIndexChoice();
  HashSet<SameTypePair<Integer>> edges=new HashSet<>();
  for (int e=0; e < numberOfEdges; ++e) {
    while (true) {
      origin=indexChoice.randomIndexChoice(numberOfNodes);
      target=indexChoice.randomIndexChoice(numberOfNodes,origin);
      UnorderedPair<Integer> candidate=new UnorderedPair<>(origin,target);
      if (!edges.contains(candidate)) {
        edges.add(candidate);
        break;
      }
    }
  }
  return new ArrayList<>(edges);
}","/** 
 * This algorithm is implemented as recommended in <p/> Efficient generation of large random networks by Vladimir Batagelj and Ulrik Brandes <p/> PHYSICAL REVIEW E 71, 036113, 2005 <p/> and relies on excellent hashing performance of Java implementation of HashSet.
 * @return edge list
 */
private List<SameTypePair<Integer>> doGenerateEdgesSimpler(){
  int numberOfNodes=getConfiguration().getNumberOfNodes();
  int numberOfEdges=getConfiguration().getNumberOfEdges();
  HashSet<SameTypePair<Integer>> edges=new HashSet<>();
  while (edges.size() < numberOfEdges) {
    int origin=random.nextInt(numberOfNodes);
    int target=random.nextInt(numberOfNodes);
    if (target == origin) {
      continue;
    }
    edges.add(new UnorderedPair<>(origin,target));
  }
  return new ArrayList<>(edges);
}",0.6326963906581741
82062,"/** 
 * Improved implementation of Erdos-Renyi generator based on bijection from edge labels to edge realisations. Works very well for large number of nodes, but is slow with increasing number of edges. Best for denser networks, with a clear giant component. <p/> TODO: Remove the bijection iteration and optimise duplicity test? (effectivelly hashing)
 * @return edge list
 */
protected List<SameTypePair<Integer>> doGenerateEdgesFaster(){
  int numberOfNodes=getConfiguration().getNumberOfNodes();
  int numberOfEdges=getConfiguration().getNumberOfEdges();
  long maxEdges=numberOfNodes * (numberOfNodes - 1) / 2;
  LinkedList<SameTypePair<Integer>> edges=new LinkedList<>();
  PriorityQueue<Long> omitList=new PriorityQueue<>();
  RandomIndexChoice indexChoice=new RandomIndexChoice();
  for (int e=0; e < numberOfEdges; ++e) {
    long choice=indexChoice.randomIndexChoice(maxEdges,omitList);
    omitList.add(choice);
    UnorderedPair<Integer> edge=indexToEdgeBijection(choice,numberOfNodes);
    edges.add(edge);
  }
  return edges;
}","/** 
 * Improved implementation of Erdos-Renyi generator based on bijection from edge labels to edge realisations. Works very well for large number of nodes, but is slow with increasing number of edges. Best for denser networks, with a clear giant component. <p/> TODO: Remove the bijection iteration and optimise duplicity test? (effectivelly hashing)
 * @return edge list
 */
protected List<SameTypePair<Integer>> doGenerateEdgesFaster(){
  int numberOfNodes=getConfiguration().getNumberOfNodes();
  int numberOfEdges=getConfiguration().getNumberOfEdges();
  long maxEdges=numberOfNodes * (numberOfNodes - 1) / 2;
  List<SameTypePair<Integer>> edges=new LinkedList<>();
  PriorityQueue<Long> omitList=new PriorityQueue<>();
  RandomIndexChoice indexChoice=new RandomIndexChoice();
  for (int e=0; e < numberOfEdges; ++e) {
    long choice=indexChoice.randomIndexChoice(maxEdges,omitList);
    omitList.add(choice);
    UnorderedPair<Integer> edge=indexToEdgeBijection(choice,numberOfNodes);
    edges.add(edge);
  }
  return edges;
}",0.9971098265895952
82063,"/** 
 * The final algorithm has a switch from sparse ER graph to dense ER graph generator. The sparse algorithm is based on trial-correction method as suggested in the paper cited below. This is extremelly inefficient for nearly-complete graphs. The dense algorithm (written by myself) is based on careful avoiding edge indices in the selection. There might be some tweaks possible for this approach as well, as at the present stage a PriorityQueue is used and iterated over for the edge label avoidance. <p/> The switch allows to generate even complete graphs (eg. (V, E) = (20, 190) in a reasonable time. The switch is turned on to dense graph generator for the case when number of edges requested is a half of total possible edges to be generated.
 * @return list of edges in the network.
 */
protected List<SameTypePair<Integer>> doGenerateEdges(){
  if (4 * getConfiguration().getNumberOfEdges() > getConfiguration().getNumberOfNodes() * (getConfiguration().getNumberOfNodes() - 1)) {
    return doGenerateEdgesFaster();
  }
 else {
    return doGenerateEdgesSimpler();
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected List<SameTypePair<Integer>> doGenerateEdges(){
  long threshold=getConfiguration().getNumberOfEdges() * 4;
  long potentialEdges=getConfiguration().getNumberOfNodes() * (getConfiguration().getNumberOfNodes() - 1);
  return doGenerateEdgesSimpler();
}",0.2543604651162791
82064,"public ErdosRenyiRelationshipGenerator(ErdosRenyiConfig configuration){
  super(configuration);
}","/** 
 * Construct a new generator.
 * @param configuration of the generator.
 */
public ErdosRenyiRelationshipGenerator(ErdosRenyiConfig configuration){
  super(configuration);
}",0.7054545454545454
82065,"@Test(timeout=60 * 1000) @Ignore public void shouldGenerateRelationshipsForLargeGraphInAReasonableAmountOfTime(){
}","@Test(timeout=60 * 1000) public void shouldGenerateRelationshipsForLargeGraphInAReasonableAmountOfTime(){
}",0.963963963963964
82066,"/** 
 * Take string as input, and either return an instance or return null.
 * @param bics string in ""bigintcs:HHHHHH-HHHHHH-CCCCCC"" format
 * @return big integer string checksum objectOR  null if incorrect format, error parsing, etc.
 */
public static BigIntStringChecksum fromStringOrNull(String bics){
  BigIntStringChecksum ret;
  if (bics == null) {
    ret=null;
  }
 else   if (!startsWithPrefix(bics)) {
    ret=null;
  }
 else {
    try {
      ret=fromString(bics);
      if (ret.asBigInteger() == null) {
        throw new SecretShareException(""String_Node_Str"" + bics + ""String_Node_Str"");
      }
    }
 catch (    SecretShareException e) {
      ret=null;
    }
  }
  return ret;
}","/** 
 * Take string as input, and either return an instance or return null.
 * @param bics string in ""bigintcs:hhhhhh-hhhhhh-CCCCCC"" format
 * @return big integer string checksum objectOR  null if incorrect format, error parsing, etc.
 */
public static BigIntStringChecksum fromStringOrNull(String bics){
  BigIntStringChecksum ret;
  if (bics == null) {
    ret=null;
  }
 else   if (!startsWithPrefix(bics)) {
    ret=null;
  }
 else {
    try {
      ret=fromString(bics);
      if (ret.asBigInteger() == null) {
        throw new SecretShareException(""String_Node_Str"" + bics + ""String_Node_Str"");
      }
    }
 catch (    SecretShareException e) {
      ret=null;
    }
  }
  return ret;
}",0.9827338129496402
82067,"/** 
 * Utility to test if the input string can even -possibly- be a BigIntStringChecksum encoded. This is check is ""necessary, but not sufficient"" for the input string to parse correctly.
 * @param input the string to check
 * @return true if the string starts withBigIntStringChecksum.PREFIX_BIGINT_DASH_CHECKSUM false all other cases
 */
public static boolean startsWithPrefix(final String input){
  boolean ret=false;
  if (input != null) {
    ret=input.startsWith(PREFIX_BIGINT_DASH_CHECKSUM);
  }
 else {
    ret=false;
  }
  return ret;
}","/** 
 * Utility to test if the input string can even -possibly- be a BigIntStringChecksum encoded. This is check is ""necessary, but not sufficient"" for the input string to parse correctly.
 * @param input the string to check
 * @return true if the string starts with (case-insensitive)BigIntStringChecksum.PREFIX_BIGINT_DASH_CHECKSUM false all other cases
 */
public static boolean startsWithPrefix(final String input){
  boolean ret=false;
  if (input != null) {
    ret=input.toLowerCase().startsWith(PREFIX_BIGINT_DASH_CHECKSUM);
  }
 else {
    ret=false;
  }
  return ret;
}",0.9706666666666668
82068,"/** 
 * Take input string, and create the instance.
 * @param bics string in ""bigintcs:HHHHHH-HHHHHH-CCCCCC"" format
 * @return big integer string checksum object
 * @throws SecretShareException on error, such as null input, ORinput doesn't start with correct prefix OR string does not have 0-9a-f digits OR checksum doesn't match.
 */
public static BigIntStringChecksum fromString(String bics){
  boolean returnIsNegative=false;
  BigIntStringChecksum ret=null;
  if (bics == null) {
    createThrow(""String_Node_Str"",bics);
  }
  if (startsWithPrefix(bics)) {
    String noprefix=bics.substring(PREFIX_BIGINT_DASH_CHECKSUM.length());
    String noprefixnosign=noprefix;
    if (noprefixnosign.startsWith(""String_Node_Str"")) {
      returnIsNegative=true;
      noprefixnosign=noprefixnosign.substring(1);
    }
    String[] split=noprefixnosign.split(""String_Node_Str"");
    if (split.length <= 1) {
      createThrow(""String_Node_Str"",bics);
    }
 else {
      String asHex=""String_Node_Str"";
      if (returnIsNegative) {
        asHex=""String_Node_Str"";
      }
      for (int i=0, n=split.length - 1; i < n; i++) {
        asHex+=split[i];
      }
      String computedMd5sum=computeMd5ChecksumLimit6(asHex);
      String givenMd5sum=split[split.length - 1];
      if (computedMd5sum.equalsIgnoreCase(givenMd5sum)) {
        ret=new BigIntStringChecksum(asHex,computedMd5sum);
      }
 else {
        createThrow(""String_Node_Str"" + givenMd5sum + ""String_Node_Str""+ computedMd5sum+ ""String_Node_Str"",bics);
      }
    }
  }
 else {
    createThrow(""String_Node_Str"" + PREFIX_BIGINT_DASH_CHECKSUM + ""String_Node_Str"",bics);
  }
  ret.asBigInteger();
  return ret;
}","/** 
 * Take input string, and create the instance. As of version 1.3.2 forward, the case of the INPUT is not relevant. Note, however, that when the Checksum CCCCCC is computed, the hex hhhhhh- string is LOWER CASE.
 * @param bics string in ""bigintcs:hhhhhh-hhhhhh-CCCCCC"" format
 * @return big integer string checksum object
 * @throws SecretShareException on error, such as null input, ORinput doesn't start with correct prefix OR string does not have 0-9a-f digits OR checksum doesn't match.
 */
public static BigIntStringChecksum fromString(String bics){
  boolean returnIsNegative=false;
  BigIntStringChecksum ret=null;
  if (bics == null) {
    createThrow(""String_Node_Str"",bics);
  }
  if (startsWithPrefix(bics)) {
    String noprefix=bics.substring(PREFIX_BIGINT_DASH_CHECKSUM.length());
    String noprefixnosign=noprefix;
    if (noprefixnosign.startsWith(""String_Node_Str"")) {
      returnIsNegative=true;
      noprefixnosign=noprefixnosign.substring(1);
    }
    String[] split=noprefixnosign.split(""String_Node_Str"");
    if (split.length <= 1) {
      createThrow(""String_Node_Str"",bics);
    }
 else {
      String asHex=""String_Node_Str"";
      if (returnIsNegative) {
        asHex=""String_Node_Str"";
      }
      for (int i=0, n=split.length - 1; i < n; i++) {
        asHex+=split[i];
      }
      String computedMd5sum=computeMd5ChecksumLimit6(asHex);
      String givenMd5sum=split[split.length - 1];
      if (computedMd5sum.equalsIgnoreCase(givenMd5sum)) {
        ret=new BigIntStringChecksum(asHex,computedMd5sum);
      }
 else {
        createThrow(""String_Node_Str"" + givenMd5sum + ""String_Node_Str""+ computedMd5sum+ ""String_Node_Str"",bics);
      }
    }
  }
 else {
    createThrow(""String_Node_Str"" + PREFIX_BIGINT_DASH_CHECKSUM + ""String_Node_Str"",bics);
  }
  ret.asBigInteger();
  return ret;
}",0.946377638334284
82069,"/** 
 * Test from the documentation on the leading ""-"".
 */
@Test public void testLeadingDash(){
  final String sameValue=""String_Node_Str"";
  final String sameChecksum=""String_Node_Str"";
  BigInteger okNeg100=BigIntStringChecksum.fromString(""String_Node_Str"" + ""String_Node_Str"" + sameValue + sameChecksum).asBigInteger();
  Assert.assertEquals(""String_Node_Str"",new BigInteger(""String_Node_Str""),okNeg100);
  try {
    BigInteger failNeg100=BigIntStringChecksum.fromString(""String_Node_Str"" + ""String_Node_Str"" + sameValue + sameChecksum).asBigInteger();
    Assert.fail(""String_Node_Str"" + failNeg100);
  }
 catch (  SecretShareException e) {
  }
}","/** 
 * Test from the documentation on the leading ""-"". i.e. make sure the leading ""-"" is part of the checksum computation.
 */
@Test public void testLeadingDash(){
  final String sameValue=""String_Node_Str"";
  final String sameChecksum=""String_Node_Str"";
  BigInteger okNeg100=BigIntStringChecksum.fromString(""String_Node_Str"" + ""String_Node_Str"" + sameValue + sameChecksum).asBigInteger();
  Assert.assertEquals(""String_Node_Str"",new BigInteger(""String_Node_Str""),okNeg100);
  try {
    BigInteger failNeg100=BigIntStringChecksum.fromString(""String_Node_Str"" + ""String_Node_Str"" + sameValue + sameChecksum).asBigInteger();
    Assert.fail(""String_Node_Str"" + failNeg100);
  }
 catch (  SecretShareException e) {
  }
}",0.9503649635036496
82070,"@Override public void run(){
  _globalLock.lock();
  try {
    if (_lastCleanup + _cleanupDelay < System.currentTimeMillis()) {
      try {
        cleanupOldDirs();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e,_shard,_table);
      }
      _lastCleanup=System.currentTimeMillis();
    }
    Path path=_shardContext.getHdfsDirPath();
    Configuration configuration=_shardContext.getTableContext().getConfiguration();
    try {
      FileSystem fileSystem=path.getFileSystem(configuration);
      SortedSet<FileStatus> listStatus;
      while (true) {
        try {
          listStatus=sort(fileSystem.listStatus(path,new PathFilter(){
            @Override public boolean accept(            Path path){
              if (path != null && path.getName().endsWith(COMMIT)) {
                return true;
              }
              return false;
            }
          }
));
          break;
        }
 catch (        FileNotFoundException e) {
          LOG.warn(""String_Node_Str"");
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
      for (      FileStatus fileStatus : listStatus) {
        Path file=fileStatus.getPath();
        if (fileStatus.isDir() && file.getName().endsWith(COMMIT)) {
          Path inuse=new Path(file.getParent(),rename(file.getName(),INUSE));
          touch(fileSystem,new Path(file,INPROGRESS));
          if (fileSystem.rename(file,inuse)) {
            if (_testError != null) {
              _testError.run();
            }
            HdfsDirectory hdfsDirectory=new HdfsDirectory(configuration,inuse);
            try {
              if (DirectoryReader.indexExists(hdfsDirectory)) {
                IndexAction indexAction=getIndexAction(hdfsDirectory,fileSystem);
                _blurIndex.process(indexAction);
                return;
              }
 else {
                Path badindex=new Path(file.getParent(),rename(file.getName(),BADINDEX));
                if (fileSystem.rename(inuse,badindex)) {
                  LOG.error(""String_Node_Str"",inuse,badindex);
                }
 else {
                  LOG.fatal(""String_Node_Str"",inuse,badindex);
                }
              }
            }
  finally {
              hdfsDirectory.close();
            }
          }
 else {
            LOG.fatal(""String_Node_Str"",file);
          }
        }
      }
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e,_shard,_table);
    }
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
 finally {
    _globalLock.unlock();
  }
}","@Override public void run(){
  _globalLock.lock();
  try {
    if (_lastCleanup + _cleanupDelay < System.currentTimeMillis()) {
      try {
        cleanupOldDirs();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e,_shard,_table);
      }
      _lastCleanup=System.currentTimeMillis();
    }
    Path path=_shardContext.getHdfsDirPath();
    Configuration configuration=_shardContext.getTableContext().getConfiguration();
    try {
      FileSystem fileSystem=path.getFileSystem(configuration);
      SortedSet<FileStatus> listStatus=null;
      for (int i=0; i < MAX_ATTEMPTS; i++) {
        try {
          if (!fileSystem.exists(path)) {
            LOG.warn(""String_Node_Str"",path);
            return;
          }
          listStatus=sort(fileSystem.listStatus(path,new PathFilter(){
            @Override public boolean accept(            Path path){
              if (path != null && path.getName().endsWith(COMMIT)) {
                return true;
              }
              return false;
            }
          }
));
          break;
        }
 catch (        FileNotFoundException e) {
          LOG.warn(""String_Node_Str"");
        }
        try {
          Thread.sleep(100 * (i + 1));
        }
 catch (        InterruptedException e) {
          return;
        }
      }
      if (listStatus == null) {
        LOG.warn(""String_Node_Str"",path);
        return;
      }
      for (      FileStatus fileStatus : listStatus) {
        Path file=fileStatus.getPath();
        if (fileStatus.isDir() && file.getName().endsWith(COMMIT)) {
          Path inuse=new Path(file.getParent(),rename(file.getName(),INUSE));
          touch(fileSystem,new Path(file,INPROGRESS));
          if (fileSystem.rename(file,inuse)) {
            if (_testError != null) {
              _testError.run();
            }
            HdfsDirectory hdfsDirectory=new HdfsDirectory(configuration,inuse);
            try {
              if (DirectoryReader.indexExists(hdfsDirectory)) {
                IndexAction indexAction=getIndexAction(hdfsDirectory,fileSystem);
                _blurIndex.process(indexAction);
                return;
              }
 else {
                Path badindex=new Path(file.getParent(),rename(file.getName(),BADINDEX));
                if (fileSystem.rename(inuse,badindex)) {
                  LOG.error(""String_Node_Str"",inuse,badindex);
                }
 else {
                  LOG.fatal(""String_Node_Str"",inuse,badindex);
                }
              }
            }
  finally {
              hdfsDirectory.close();
            }
          }
 else {
            LOG.fatal(""String_Node_Str"",file);
          }
        }
      }
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e,_shard,_table);
    }
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
 finally {
    _globalLock.unlock();
  }
}",0.9409214092140922
82071,"private BlurIndex openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  TableContext tableContext=getTableContext(table);
  Path tablePath=tableContext.getTablePath();
  Path hdfsDirPath=new Path(tablePath,shard);
  BlurLockFactory lockFactory=new BlurLockFactory(_configuration,hdfsDirPath,_nodeName,BlurUtil.getPid());
  HdfsDirectory longTermStorage=new HdfsDirectory(_configuration,hdfsDirPath,_sequentialReadControl);
  longTermStorage.setLockFactory(lockFactory);
  boolean disableFast=tableContext.getBlurConfiguration().getBoolean(BLUR_TABLE_DISABLE_FAST_DIR,false);
  Directory directory=DirectoryUtil.getDirectory(_configuration,longTermStorage,disableFast,_hdfsKeyValueTimer,table,shard,false);
  ShardContext shardContext=ShardContext.create(tableContext,shard);
  TableDescriptor descriptor=tableContext.getDescriptor();
  boolean blockCacheEnabled=descriptor.isBlockCaching();
  if (blockCacheEnabled) {
    Set<String> blockCacheFileTypes=descriptor.getBlockCachingFileTypes();
    directory=_blockCacheDirectoryFactory.newDirectory(table,shard,directory,blockCacheFileTypes);
  }
  BlurIndex index=tableContext.newInstanceBlurIndex(shardContext,directory,_mergeScheduler,_searchExecutor,_indexCloser,_indexImporterTimer,_indexBulkTimer,_thriftCache);
  if (_clusterStatus.isReadOnly(true,_cluster,table)) {
    index=new BlurIndexReadOnly(index);
  }
  _filterCache.opening(table,shard,index);
  return index;
}","private BlurIndex openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  TableContext tableContext=getTableContext(table);
  Path tablePath=tableContext.getTablePath();
  Path hdfsDirPath=new Path(tablePath,shard);
  BlurLockFactory lockFactory=new BlurLockFactory(_configuration,hdfsDirPath,_nodeName,BlurUtil.getPid());
  HdfsDirectory longTermStorage=new HdfsDirectory(_configuration,hdfsDirPath,_sequentialReadControl);
  longTermStorage.setLockFactory(lockFactory);
  boolean disableFast=tableContext.getBlurConfiguration().getBoolean(BLUR_TABLE_DISABLE_FAST_DIR,false);
  Directory directory=DirectoryUtil.getDirectory(_configuration,longTermStorage,disableFast,_hdfsKeyValueTimer,table,shard,false);
  ShardContext shardContext=ShardContext.create(tableContext,shard);
  TableDescriptor descriptor=tableContext.getDescriptor();
  boolean blockCacheEnabled=descriptor.isBlockCaching();
  if (blockCacheEnabled) {
    Set<String> blockCacheFileTypes=descriptor.getBlockCachingFileTypes();
    directory=_blockCacheDirectoryFactory.newDirectory(table,shard,directory,blockCacheFileTypes);
  }
  BlurIndex index=tableContext.newInstanceBlurIndex(shardContext,directory,_mergeScheduler,_searchExecutor,_indexCloser,_indexImporterTimer,_indexBulkTimer,_thriftCache,_indexIdleWriterTimer,_maxWriterIdle);
  if (_clusterStatus.isReadOnly(true,_cluster,table)) {
    index=new BlurIndexReadOnly(index);
  }
  _filterCache.opening(table,shard,index);
  return index;
}",0.9876212780194044
82072,"public DistributedIndexServer(Configuration configuration,ZooKeeper zookeeper,ClusterStatus clusterStatus,BlurFilterCache filterCache,BlockCacheDirectoryFactory blockCacheDirectoryFactory,DistributedLayoutFactory distributedLayoutFactory,String cluster,String nodeName,long safeModeDelay,int shardOpenerThreadCount,int maxMergeThreads,int internalSearchThreads,int minimumNumberOfNodesBeforeExitingSafeMode,Timer hdfsKeyValueTimer,Timer indexImporterTimer,long smallMergeThreshold,Timer indexBulkTimer,ThriftCache thriftCache,SequentialReadControl sequentialReadControl) throws KeeperException, InterruptedException {
  super(clusterStatus,configuration,nodeName,cluster);
  _sequentialReadControl=sequentialReadControl;
  _indexImporterTimer=indexImporterTimer;
  _indexBulkTimer=indexBulkTimer;
  _hdfsKeyValueTimer=hdfsKeyValueTimer;
  _minimumNumberOfNodes=minimumNumberOfNodesBeforeExitingSafeMode;
  _running.set(true);
  _closer=Closer.create();
  _shardOpenerThreadCount=shardOpenerThreadCount;
  _zookeeper=zookeeper;
  _filterCache=filterCache;
  _safeModeDelay=safeModeDelay;
  _internalSearchThreads=internalSearchThreads;
  _blockCacheDirectoryFactory=blockCacheDirectoryFactory;
  _distributedLayoutFactory=distributedLayoutFactory;
  _thriftCache=thriftCache;
  _closer.register(_shardStateManager);
  BlurUtil.setupZookeeper(_zookeeper,_cluster);
  _openerService=Executors.newThreadPool(""String_Node_Str"",_shardOpenerThreadCount);
  _searchExecutor=Executors.newThreadPool(""String_Node_Str"",_internalSearchThreads);
  _closer.register(CloseableExecutorService.close(_openerService));
  _closer.register(CloseableExecutorService.close(_searchExecutor));
  _mergeScheduler=_closer.register(new SharedMergeScheduler(maxMergeThreads,smallMergeThreshold));
  _indexCloser=_closer.register(new BlurIndexCloser());
  _timerCacheFlush=setupFlushCacheTimer();
  _timerCacheFlush.start();
  String onlineShardsPath=ZookeeperPathConstants.getOnlineShardsPath(_cluster);
  String safemodePath=ZookeeperPathConstants.getSafemodePath(_cluster);
  int registerNodeTimeOut=_zookeeper.getSessionTimeout() / 1000 + 4;
  SafeMode safeMode=new SafeMode(_zookeeper,safemodePath,onlineShardsPath,TimeUnit.MILLISECONDS,_safeModeDelay,TimeUnit.SECONDS,registerNodeTimeOut,_minimumNumberOfNodes);
  safeMode.registerNode(getNodeName(),BlurUtil.getVersion().getBytes());
  _timerTableWarmer=setupTableWarmer();
  _timerTableWarmer.start();
  _watchOnlineShards=watchForShardServerChanges();
  _clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
synchronized (_warmupLock) {
        _warmupLock.notifyAll();
      }
    }
  }
);
  _clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
synchronized (_cleanupLock) {
        _cleanupLock.notifyAll();
      }
    }
  }
);
}","public DistributedIndexServer(Configuration configuration,ZooKeeper zookeeper,ClusterStatus clusterStatus,BlurFilterCache filterCache,BlockCacheDirectoryFactory blockCacheDirectoryFactory,DistributedLayoutFactory distributedLayoutFactory,String cluster,String nodeName,long safeModeDelay,int shardOpenerThreadCount,int maxMergeThreads,int internalSearchThreads,int minimumNumberOfNodesBeforeExitingSafeMode,Timer hdfsKeyValueTimer,Timer indexImporterTimer,long smallMergeThreshold,Timer indexBulkTimer,ThriftCache thriftCache,SequentialReadControl sequentialReadControl,Timer indexIdleWriterTimer,long maxWriterIdle) throws KeeperException, InterruptedException {
  super(clusterStatus,configuration,nodeName,cluster);
  _indexIdleWriterTimer=indexIdleWriterTimer;
  _maxWriterIdle=maxWriterIdle;
  _sequentialReadControl=sequentialReadControl;
  _indexImporterTimer=indexImporterTimer;
  _indexBulkTimer=indexBulkTimer;
  _hdfsKeyValueTimer=hdfsKeyValueTimer;
  _minimumNumberOfNodes=minimumNumberOfNodesBeforeExitingSafeMode;
  _running.set(true);
  _closer=Closer.create();
  _shardOpenerThreadCount=shardOpenerThreadCount;
  _zookeeper=zookeeper;
  _filterCache=filterCache;
  _safeModeDelay=safeModeDelay;
  _internalSearchThreads=internalSearchThreads;
  _blockCacheDirectoryFactory=blockCacheDirectoryFactory;
  _distributedLayoutFactory=distributedLayoutFactory;
  _thriftCache=thriftCache;
  _closer.register(_shardStateManager);
  BlurUtil.setupZookeeper(_zookeeper,_cluster);
  _openerService=Executors.newThreadPool(""String_Node_Str"",_shardOpenerThreadCount);
  _searchExecutor=Executors.newThreadPool(""String_Node_Str"",_internalSearchThreads);
  _closer.register(CloseableExecutorService.close(_openerService));
  _closer.register(CloseableExecutorService.close(_searchExecutor));
  _mergeScheduler=_closer.register(new SharedMergeScheduler(maxMergeThreads,smallMergeThreshold));
  _indexCloser=_closer.register(new BlurIndexCloser());
  _timerCacheFlush=setupFlushCacheTimer();
  _timerCacheFlush.start();
  String onlineShardsPath=ZookeeperPathConstants.getOnlineShardsPath(_cluster);
  String safemodePath=ZookeeperPathConstants.getSafemodePath(_cluster);
  int registerNodeTimeOut=_zookeeper.getSessionTimeout() / 1000 + 4;
  SafeMode safeMode=new SafeMode(_zookeeper,safemodePath,onlineShardsPath,TimeUnit.MILLISECONDS,_safeModeDelay,TimeUnit.SECONDS,registerNodeTimeOut,_minimumNumberOfNodes);
  safeMode.registerNode(getNodeName(),BlurUtil.getVersion().getBytes());
  _timerTableWarmer=setupTableWarmer();
  _timerTableWarmer.start();
  _watchOnlineShards=watchForShardServerChanges();
  _clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
synchronized (_warmupLock) {
        _warmupLock.notifyAll();
      }
    }
  }
);
  _clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
synchronized (_cleanupLock) {
        _cleanupLock.notifyAll();
      }
    }
  }
);
}",0.978716100240302
82073,"private Map<String,BlurIndex> openFromDisk() throws IOException {
  String table=_tableContext.getDescriptor().getName();
  Path tablePath=_tableContext.getTablePath();
  File tableFile=new File(tablePath.toUri());
  if (tableFile.isDirectory()) {
    Map<String,BlurIndex> shards=new ConcurrentHashMap<String,BlurIndex>();
    int shardCount=_tableContext.getDescriptor().getShardCount();
    for (int i=0; i < shardCount; i++) {
      Directory directory;
      String shardName=ShardUtil.getShardName(BlurConstants.SHARD_PREFIX,i);
      if (_ramDir) {
        directory=new RAMDirectory();
      }
 else {
        File file=new File(tableFile,shardName);
        file.mkdirs();
        directory=new MMapDirectory(file);
      }
      if (!DirectoryReader.indexExists(directory)) {
        new IndexWriter(directory,new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer())).close();
      }
      shards.put(shardName,openIndex(table,shardName,directory));
    }
    return shards;
  }
  throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
}","private Map<String,BlurIndex> openFromDisk() throws IOException {
  String table=_tableContext.getDescriptor().getName();
  Path tablePath=_tableContext.getTablePath();
  Configuration configuration=_tableContext.getConfiguration();
  FileSystem fileSystem=tablePath.getFileSystem(configuration);
  if (fileSystem.isDirectory(tablePath)) {
    Map<String,BlurIndex> shards=new ConcurrentHashMap<String,BlurIndex>();
    int shardCount=_tableContext.getDescriptor().getShardCount();
    for (int i=0; i < shardCount; i++) {
      String shardName=ShardUtil.getShardName(BlurConstants.SHARD_PREFIX,i);
      Path hdfsPath=new Path(tablePath,shardName);
      Directory directory=new HdfsDirectory(configuration,hdfsPath);
      BlurLockFactory lockFactory=new BlurLockFactory(configuration,hdfsPath,getNodeName(),BlurUtil.getPid());
      directory.setLockFactory(lockFactory);
      shards.put(shardName,openIndex(table,shardName,directory));
    }
    return shards;
  }
  throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
}",0.6341232227488152
82074,"private BlurIndex openIndex(String table,String shard,Directory dir) throws CorruptIndexException, IOException {
  ShardContext shardContext=ShardContext.create(_tableContext,shard);
  BlurIndexSimpleWriter index=new BlurIndexSimpleWriter(shardContext,dir,_mergeScheduler,_searchExecutor,_indexCloser,_timer,_bulkTimer,null);
  return index;
}","private BlurIndex openIndex(String table,String shard,Directory dir) throws CorruptIndexException, IOException {
  ShardContext shardContext=ShardContext.create(_tableContext,shard);
  BlurIndexSimpleWriter index=new BlurIndexSimpleWriter(shardContext,dir,_mergeScheduler,_searchExecutor,_indexCloser,_timer,_bulkTimer,null,_closerTimer,_maxWriterIdle);
  return index;
}",0.9607843137254902
82075,"public LocalIndexServer(TableDescriptor tableDescriptor,boolean ramDir) throws IOException {
  _timer=new Timer(""String_Node_Str"",true);
  _bulkTimer=new Timer(""String_Node_Str"",true);
  _closer=Closer.create();
  _tableContext=TableContext.create(tableDescriptor);
  _mergeScheduler=_closer.register(new SharedMergeScheduler(3,128 * 1000 * 1000));
  _searchExecutor=Executors.newCachedThreadPool();
  _closer.register(new CloseableExecutorService(_searchExecutor));
  _ramDir=ramDir;
  _indexCloser=_closer.register(new BlurIndexCloser());
  _closer.register(new Closeable(){
    @Override public void close() throws IOException {
      _timer.cancel();
      _timer.purge();
    }
  }
);
  getIndexes(_tableContext.getTable());
}","public LocalIndexServer(TableDescriptor tableDescriptor) throws IOException {
  _timer=new Timer(""String_Node_Str"",true);
  _bulkTimer=new Timer(""String_Node_Str"",true);
  _closerTimer=new Timer(""String_Node_Str"",true);
  _maxWriterIdle=TimeUnit.SECONDS.toMillis(30);
  _closer=Closer.create();
  _tableContext=TableContext.create(tableDescriptor);
  _mergeScheduler=_closer.register(new SharedMergeScheduler(3,128 * 1000 * 1000));
  _searchExecutor=Executors.newCachedThreadPool();
  _closer.register(new CloseableExecutorService(_searchExecutor));
  _indexCloser=_closer.register(new BlurIndexCloser());
  _closer.register(new Closeable(){
    @Override public void close() throws IOException {
      _timer.cancel();
      _timer.purge();
    }
  }
);
  getIndexes(_tableContext.getTable());
}",0.9142108709888672
82076,"public BlurIndex(ShardContext shardContext,Directory directory,SharedMergeScheduler mergeScheduler,ExecutorService searchExecutor,BlurIndexCloser indexCloser,Timer indexImporterTimer,Timer bulkIndexingTimer,ThriftCache thriftCache) throws IOException {
  _shardContext=shardContext;
}","public BlurIndex(ShardContext shardContext,Directory directory,SharedMergeScheduler mergeScheduler,ExecutorService searchExecutor,BlurIndexCloser indexCloser,Timer indexImporterTimer,Timer bulkIndexingTimer,ThriftCache thriftCache,Timer indexWriterTimer,long maxWriterIdle) throws IOException {
  _shardContext=shardContext;
}",0.9311475409836064
82077,"public BlurIndexReadOnly(BlurIndex blurIndex) throws IOException {
  super(null,null,null,null,null,null,null,null);
  _blurIndex=blurIndex;
}","public BlurIndexReadOnly(BlurIndex blurIndex) throws IOException {
  super(null,null,null,null,null,null,null,null,null,0);
  _blurIndex=blurIndex;
}",0.9759450171821306
82078,"public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration) throws Exception {
  Configuration config=BlurUtil.newHadoopConfiguration(configuration);
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int configBindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  int instanceBindPort=configBindPort + serverIndex;
  if (configBindPort == 0) {
    instanceBindPort=0;
  }
  TServerTransport serverTransport=ThriftServer.getTServerTransport(bindAddress,instanceBindPort,configuration);
  instanceBindPort=ThriftServer.getBindingPort(serverTransport);
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    String value=e.getValue();
    if (value == null || value.isEmpty()) {
      continue;
    }
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  final BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + instanceBindPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + instanceBindPort;
  configuration.set(BLUR_NODENAME,nodeName);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  final ZooKeeper zooKeeper=setupZookeeper(configuration,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration,config);
  BlurFilterCache filterCache=getFilterCache(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long requestCacheSize=configuration.getLong(BLUR_SHARD_REQUEST_CACHE_SIZE,10000000);
  final ThriftCache thriftCache=new ThriftCache(requestCacheSize);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  int minimumNumberOfNodesBeforeExitingSafeMode=configuration.getInt(BLUR_SHARD_SERVER_MINIMUM_BEFORE_SAFEMODE_EXIT,0);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_INTERNAL_SEARCH_THREAD_COUNT,16);
  final Timer hdfsKeyValueTimer=new Timer(""String_Node_Str"",true);
  final Timer indexImporterTimer=new Timer(""String_Node_Str"",true);
  final Timer indexBulkTimer=new Timer(""String_Node_Str"",true);
  final Timer indexIdleWriterTimer=new Timer(""String_Node_Str"",true);
  long smallMergeThreshold=configuration.getLong(BLUR_SHARD_SMALL_MERGE_THRESHOLD,128 * 1000 * 1000);
  long maxWriterIdle=configuration.getLong(BLUR_SHARD_INDEX_MAX_IDLE_TIME,30000);
  SequentialReadControl sequentialReadControl=new SequentialReadControl(configuration);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,maxMergeThreads,internalSearchThreads,minimumNumberOfNodesBeforeExitingSafeMode,hdfsKeyValueTimer,indexImporterTimer,smallMergeThreshold,indexBulkTimer,thriftCache,sequentialReadControl,indexIdleWriterTimer,maxWriterIdle);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int remoteFetchCount=configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,110);
  if (fetchCount + 1 <= remoteFetchCount) {
    LOG.warn(""String_Node_Str"" + BLUR_SHARD_FETCHCOUNT + ""String_Node_Str""+ fetchCount+ ""String_Node_Str""+ BLUR_CONTROLLER_REMOTE_FETCH_COUNT+ ""String_Node_Str""+ remoteFetchCount+ ""String_Node_Str"");
  }
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  int cacheSize=configuration.getInt(BLUR_SHARD_DEEP_PAGING_CACHE_SIZE,1000);
  DeepPagingCache deepPagingCache=new DeepPagingCache(cacheSize);
  MemoryAllocationWatcher memoryAllocationWatcher=new MemoryAllocationWatcher(){
    @Override public <T,E extends Exception>T run(    Watcher<T,E> w) throws E {
      return w.run();
    }
  }
;
  QueryStatusManager statusManager=new QueryStatusManager(statusCleanupTimerDelay);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,facetThreadCount,deepPagingCache,memoryAllocationWatcher,statusManager);
  File tmpPath=getTmpPath(configuration);
  int numberOfShardWorkerCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_WORKER_THREADS,16);
  int numberOfShardDriverCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_DRIVER_THREADS,16);
  String commandPath=configuration.get(BLUR_COMMAND_LIB_PATH,getCommandLibPath());
  if (commandPath != null) {
    LOG.info(""String_Node_Str"",commandPath);
  }
 else {
    LOG.info(""String_Node_Str"");
  }
  final ShardCommandManager commandManager=new ShardCommandManager(indexServer,tmpPath,commandPath,numberOfShardWorkerCommandThreads,numberOfShardDriverCommandThreads,Connection.DEFAULT_TIMEOUT,config,nodeName);
  clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
      thriftCache.clear();
    }
  }
);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setNodeName(nodeName);
  shardServer.setCommandManager(commandManager);
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration,config);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  List<ServerSecurityFilter> serverSecurity=getServerSecurityList(configuration,ServerSecurityFilterFactory.ServerType.SHARD);
  Iface iface=new ThriftCacheServer(configuration,shardServer,indexServer,thriftCache);
  iface=BlurUtil.wrapFilteredBlurServer(configuration,iface,true);
  iface=ServerSecurityUtil.applySecurity(iface,serverSecurity,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  iface=BlurUtil.lastChanceErrorHandling(iface,Iface.class);
  int configGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  int instanceGuiPort=configGuiPort + serverIndex;
  if (configGuiPort == 0) {
    instanceGuiPort=0;
  }
  StreamServer streamServer;
  int streamThreadCount=configuration.getInt(BLUR_STREAM_SERVER_THREADS,100);
  if (streamThreadCount > 0) {
    StreamProcessor streamProcessor=new StreamProcessor(indexServer,tmpPath,config);
    streamServer=new StreamServer(0,streamThreadCount,streamProcessor);
    streamServer.start();
    configuration.setInt(BLUR_STREAM_SERVER_RUNNING_PORT,streamServer.getPort());
    LOG.info(""String_Node_Str"",streamServer.getPort());
  }
 else {
    streamServer=null;
  }
  final HttpJettyServer httpServer;
  if (configGuiPort >= 0) {
    httpServer=new HttpJettyServer(HttpJettyServer.class,instanceGuiPort);
    int port=httpServer.getLocalPort();
    configuration.setInt(BLUR_HTTP_STATUS_RUNNING_PORT,port);
  }
 else {
    httpServer=null;
  }
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(serverTransport);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(configuration.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,BLUR_THRIFT_DEFAULT_MAX_FRAME_SIZE));
  server.setConfiguration(configuration);
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(streamServer,makeCloseable(hdfsKeyValueTimer),makeCloseable(indexImporterTimer),makeCloseable(indexBulkTimer),blockCacheDirectoryFactory,commandManager,traceStorage,server,shardServer,indexManager,statusManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}","public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration) throws Exception {
  Configuration config=BlurUtil.newHadoopConfiguration(configuration);
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int configBindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  int instanceBindPort=configBindPort + serverIndex;
  if (configBindPort == 0) {
    instanceBindPort=0;
  }
  TServerTransport serverTransport=ThriftServer.getTServerTransport(bindAddress,instanceBindPort,configuration);
  instanceBindPort=ThriftServer.getBindingPort(serverTransport);
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    String value=e.getValue();
    if (value == null || value.isEmpty()) {
      continue;
    }
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  final BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + instanceBindPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + instanceBindPort;
  configuration.set(BLUR_NODENAME,nodeName);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  final ZooKeeper zooKeeper=setupZookeeper(configuration,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration,config);
  BlurFilterCache filterCache=getFilterCache(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long requestCacheSize=configuration.getLong(BLUR_SHARD_REQUEST_CACHE_SIZE,10000000);
  final ThriftCache thriftCache=new ThriftCache(requestCacheSize);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  int minimumNumberOfNodesBeforeExitingSafeMode=configuration.getInt(BLUR_SHARD_SERVER_MINIMUM_BEFORE_SAFEMODE_EXIT,0);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_INTERNAL_SEARCH_THREAD_COUNT,16);
  final Timer hdfsKeyValueTimer=new Timer(""String_Node_Str"",true);
  final Timer indexImporterTimer=new Timer(""String_Node_Str"",true);
  final Timer indexBulkTimer=new Timer(""String_Node_Str"",true);
  final Timer indexIdleWriterTimer=new Timer(""String_Node_Str"",true);
  long smallMergeThreshold=configuration.getLong(BLUR_SHARD_SMALL_MERGE_THRESHOLD,128 * 1000 * 1000);
  long maxWriterIdle=configuration.getLong(BLUR_SHARD_INDEX_MAX_IDLE_TIME,30000);
  SequentialReadControl sequentialReadControl=new SequentialReadControl(configuration);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,maxMergeThreads,internalSearchThreads,minimumNumberOfNodesBeforeExitingSafeMode,hdfsKeyValueTimer,indexImporterTimer,smallMergeThreshold,indexBulkTimer,thriftCache,sequentialReadControl,indexIdleWriterTimer,maxWriterIdle);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int remoteFetchCount=configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,110);
  if (fetchCount + 1 <= remoteFetchCount) {
    LOG.warn(""String_Node_Str"" + BLUR_SHARD_FETCHCOUNT + ""String_Node_Str""+ fetchCount+ ""String_Node_Str""+ BLUR_CONTROLLER_REMOTE_FETCH_COUNT+ ""String_Node_Str""+ remoteFetchCount+ ""String_Node_Str"");
  }
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  int cacheSize=configuration.getInt(BLUR_SHARD_DEEP_PAGING_CACHE_SIZE,1000);
  DeepPagingCache deepPagingCache=new DeepPagingCache(cacheSize);
  MemoryAllocationWatcher memoryAllocationWatcher=new MemoryAllocationWatcher(){
    @Override public <T,E extends Exception>T run(    Watcher<T,E> w) throws E {
      return w.run();
    }
  }
;
  QueryStatusManager statusManager=new QueryStatusManager(statusCleanupTimerDelay);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,facetThreadCount,deepPagingCache,memoryAllocationWatcher,statusManager);
  File tmpPath=getTmpPath(configuration);
  int numberOfShardWorkerCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_WORKER_THREADS,16);
  int numberOfShardDriverCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_DRIVER_THREADS,16);
  String commandPath=configuration.get(BLUR_COMMAND_LIB_PATH,getCommandLibPath());
  if (commandPath != null) {
    LOG.info(""String_Node_Str"",commandPath);
  }
 else {
    LOG.info(""String_Node_Str"");
  }
  final ShardCommandManager commandManager=new ShardCommandManager(indexServer,tmpPath,commandPath,numberOfShardWorkerCommandThreads,numberOfShardDriverCommandThreads,Connection.DEFAULT_TIMEOUT,config,nodeName);
  clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
      thriftCache.clear();
    }
  }
);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setNodeName(nodeName);
  shardServer.setCommandManager(commandManager);
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration,config);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  List<ServerSecurityFilter> serverSecurity=getServerSecurityList(configuration,ServerSecurityFilterFactory.ServerType.SHARD);
  Iface iface=new ThriftCacheServer(configuration,shardServer,indexServer,thriftCache);
  iface=BlurUtil.wrapFilteredBlurServer(configuration,iface,true);
  iface=ServerSecurityUtil.applySecurity(iface,serverSecurity,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  iface=BlurUtil.lastChanceErrorHandling(iface,Iface.class);
  int configGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  int instanceGuiPort=configGuiPort + serverIndex;
  if (configGuiPort == 0) {
    instanceGuiPort=0;
  }
  StreamServer streamServer;
  int streamThreadCount=configuration.getInt(BLUR_STREAM_SERVER_THREADS,100);
  if (streamThreadCount > 0) {
    StreamProcessor streamProcessor=new StreamProcessor(indexServer,tmpPath);
    streamServer=new StreamServer(0,streamThreadCount,streamProcessor);
    streamServer.start();
    configuration.setInt(BLUR_STREAM_SERVER_RUNNING_PORT,streamServer.getPort());
    LOG.info(""String_Node_Str"",streamServer.getPort());
  }
 else {
    streamServer=null;
  }
  final HttpJettyServer httpServer;
  if (configGuiPort >= 0) {
    httpServer=new HttpJettyServer(HttpJettyServer.class,instanceGuiPort);
    int port=httpServer.getLocalPort();
    configuration.setInt(BLUR_HTTP_STATUS_RUNNING_PORT,port);
  }
 else {
    httpServer=null;
  }
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(serverTransport);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(configuration.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,BLUR_THRIFT_DEFAULT_MAX_FRAME_SIZE));
  server.setConfiguration(configuration);
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(streamServer,makeCloseable(hdfsKeyValueTimer),makeCloseable(indexImporterTimer),makeCloseable(indexBulkTimer),blockCacheDirectoryFactory,commandManager,traceStorage,server,shardServer,indexManager,statusManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}",0.9996697957450824
82079,"private boolean isEscaped(String text,int pos){
  if (pos == 0) {
    return false;
  }
  return text.charAt(pos) == '\\';
}","private boolean isEscaped(String text,int pos){
  if (pos <= 0) {
    return false;
  }
  return text.charAt(pos) == '\\';
}",0.9919354838709676
82080,"private HdfsDirectory getHdfsDirectory(Directory dir) throws IOException {
  if (dir instanceof HdfsDirectory) {
    return (HdfsDirectory)dir;
  }
 else   if (dir instanceof DirectoryDecorator) {
    DirectoryDecorator decorator=(DirectoryDecorator)dir;
    return getHdfsDirectory(decorator.getOriginalDirectory());
  }
 else {
    throw new IOException(""String_Node_Str"" + dir + ""String_Node_Str"");
  }
}","private HdfsDirectory getHdfsDirectory(Directory dir) throws IOException {
  if (dir instanceof HdfsDirectory) {
    return (HdfsDirectory)dir;
  }
 else   if (dir instanceof DirectoryDecorator) {
    DirectoryDecorator decorator=(DirectoryDecorator)dir;
    return getHdfsDirectory(decorator.getOriginalDirectory());
  }
 else   if (dir instanceof JoinDirectory) {
    JoinDirectory directory=(JoinDirectory)dir;
    return directory.getSymlinkDirectory();
  }
 else {
    throw new IOException(""String_Node_Str"" + dir + ""String_Node_Str"");
  }
}",0.8532494758909853
82081,"/** 
 * Adds document discover visibility rule to document.
 */
public abstract Iterable<IndexableField> addDiscoverVisiblity(String discover,Iterable<IndexableField> fields);","/** 
 * Adds document discover visibility rule to document.
 */
public abstract Iterable<? extends IndexableField> addDiscoverVisiblity(String discover,Iterable<? extends IndexableField> fields);",0.945945945945946
82082,"/** 
 * Adds a read mask to document. If a field has been masked the value can not be viewed, but if a search utilizes the tokens from the field the document can be found.
 */
public abstract Iterable<IndexableField> addReadMask(String fieldToMask,Iterable<IndexableField> fields);","/** 
 * Adds a read mask to document. If a field has been masked the value can not be viewed, but if a search utilizes the tokens from the field the document can be found.
 */
public abstract Iterable<? extends IndexableField> addReadMask(String fieldToMask,Iterable<? extends IndexableField> fields);",0.9656357388316152
82083,"protected Iterable<IndexableField> addField(Iterable<IndexableField> fields,IndexableField... fieldsToAdd){
  if (fields instanceof Document) {
    Document document=(Document)fields;
    if (fieldsToAdd != null) {
      for (      IndexableField field : fieldsToAdd) {
        document.add(field);
      }
    }
    return document;
  }
  List<IndexableField> list=new ArrayList<IndexableField>();
  for (  IndexableField indexableField : fields) {
    list.add(indexableField);
  }
  if (fieldsToAdd != null) {
    for (    IndexableField field : fieldsToAdd) {
      list.add(field);
    }
  }
  return list;
}","protected Iterable<? extends IndexableField> addField(Iterable<? extends IndexableField> fields,IndexableField... fieldsToAdd){
  if (fields instanceof Document) {
    Document document=(Document)fields;
    if (fieldsToAdd != null) {
      for (      IndexableField field : fieldsToAdd) {
        document.add(field);
      }
    }
    return document;
  }
  List<IndexableField> list=new ArrayList<IndexableField>();
  for (  IndexableField indexableField : fields) {
    list.add(indexableField);
  }
  if (fieldsToAdd != null) {
    for (    IndexableField field : fieldsToAdd) {
      list.add(field);
    }
  }
  return list;
}",0.9839486356340288
82084,"/** 
 * Adds document read visibility rule to document.
 */
public abstract Iterable<IndexableField> addReadVisiblity(String read,Iterable<IndexableField> fields);","/** 
 * Adds document read visibility rule to document.
 */
public abstract Iterable<? extends IndexableField> addReadVisiblity(String read,Iterable<? extends IndexableField> fields);",0.9421965317919077
82085,"/** 
 * This method should be called as the document is being added to the index writer.
 * @param fields
 * @return
 */
public abstract Iterable<IndexableField> lastStepBeforeIndexing(Iterable<IndexableField> fields);","/** 
 * This method should be called as the document is being added to the index writer.
 * @param fields
 * @return
 */
public abstract Iterable<? extends IndexableField> lastStepBeforeIndexing(Iterable<? extends IndexableField> fields);",0.956140350877193
82086,"private static Set<String> getFieldsToMask(Iterable<IndexableField> fields){
  Set<String> result=new HashSet<String>();
  for (  IndexableField field : fields) {
    if (field.name().equals(READ_MASK_FIELD)) {
      result.add(getFieldNameOnly(field.stringValue()));
    }
  }
  return result;
}","private static Set<String> getFieldsToMask(Iterable<? extends IndexableField> fields){
  Set<String> result=new HashSet<String>();
  for (  IndexableField field : fields) {
    if (field.name().equals(READ_MASK_FIELD)) {
      result.add(getFieldNameOnly(field.stringValue()));
    }
  }
  return result;
}",0.9833887043189368
82087,"@Override public Iterable<IndexableField> addReadMask(String fieldToMask,Iterable<IndexableField> fields){
  return addField(fields,new StoredField(READ_MASK_FIELD,fieldToMask));
}","@Override public Iterable<? extends IndexableField> addReadMask(String fieldToMask,Iterable<? extends IndexableField> fields){
  return addField(fields,new StoredField(READ_MASK_FIELD,fieldToMask));
}",0.9473684210526316
82088,"@Override public Iterable<IndexableField> addDiscoverVisiblity(String discover,Iterable<IndexableField> fields){
  return addField(fields,new DocumentVisiblityField(DISCOVER_FIELD,discover,Store.YES));
}","@Override public Iterable<? extends IndexableField> addDiscoverVisiblity(String discover,Iterable<? extends IndexableField> fields){
  return addField(fields,new DocumentVisiblityField(DISCOVER_FIELD,discover,Store.YES));
}",0.9530516431924884
82089,"@Override public Iterable<IndexableField> addReadVisiblity(String read,Iterable<IndexableField> fields){
  return addField(fields,new DocumentVisiblityField(READ_FIELD,read,Store.YES));
}","@Override public Iterable<? extends IndexableField> addReadVisiblity(String read,Iterable<? extends IndexableField> fields){
  return addField(fields,new DocumentVisiblityField(READ_FIELD,read,Store.YES));
}",0.949238578680203
82090,"public static Iterable<IndexableField> processFieldMasks(Iterable<IndexableField> fields){
  Set<String> fieldsToMask=getFieldsToMask(fields);
  if (fieldsToMask.isEmpty()) {
    return fields;
  }
  List<IndexableField> result=new ArrayList<IndexableField>();
  for (  IndexableField field : fields) {
    IndexableFieldType fieldType=field.fieldType();
    if (fieldsToMask.contains(field.name()) && fieldType.indexed()) {
      if (!isDocValue(field)) {
        if (isStoredField(field)) {
          result.add(field);
        }
 else {
          IndexableField mask=createMaskField(field);
          result.add(field);
          result.add(mask);
        }
      }
    }
 else {
      result.add(field);
    }
  }
  return result;
}","public static Iterable<? extends IndexableField> processFieldMasks(Iterable<? extends IndexableField> fields){
  Set<String> fieldsToMask=getFieldsToMask(fields);
  if (fieldsToMask.isEmpty()) {
    return fields;
  }
  List<IndexableField> result=new ArrayList<IndexableField>();
  for (  IndexableField field : fields) {
    IndexableFieldType fieldType=field.fieldType();
    if (fieldsToMask.contains(field.name()) && fieldType.indexed()) {
      if (!isDocValue(field)) {
        if (isStoredField(field)) {
          result.add(field);
        }
 else {
          IndexableField mask=createMaskField(field);
          result.add(field);
          result.add(mask);
        }
      }
    }
 else {
      result.add(field);
    }
  }
  return result;
}",0.9865951742627346
82091,"@Override public Iterable<IndexableField> lastStepBeforeIndexing(Iterable<IndexableField> fields){
  return processFieldMasks(fields);
}","@Override public Iterable<? extends IndexableField> lastStepBeforeIndexing(Iterable<? extends IndexableField> fields){
  return processFieldMasks(fields);
}",0.9315068493150684
82092,"private Iterable<? extends IndexableField> getDoc(int docId,String read,String discover,String field1,String field2){
  Document doc=new Document();
  doc.add(new StringField(""String_Node_Str"",Integer.toString(docId),Store.YES));
  AccessControlWriter writer=_accessControlFactory.getWriter();
  doc.add(new StringField(""String_Node_Str"",field1,Store.YES));
  doc.add(new StringField(""String_Node_Str"",field2,Store.YES));
  doc.add(new TextField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  Iterable<IndexableField> fields=doc;
  if (read != null) {
    fields=writer.addReadVisiblity(read,doc);
  }
  if (discover != null) {
    fields=writer.addDiscoverVisiblity(discover,fields);
  }
  return fields;
}","private Iterable<? extends IndexableField> getDoc(int docId,String read,String discover,String field1,String field2){
  Document doc=new Document();
  doc.add(new StringField(""String_Node_Str"",Integer.toString(docId),Store.YES));
  AccessControlWriter writer=_accessControlFactory.getWriter();
  doc.add(new StringField(""String_Node_Str"",field1,Store.YES));
  doc.add(new StringField(""String_Node_Str"",field2,Store.YES));
  doc.add(new TextField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  Iterable<? extends IndexableField> fields=doc;
  if (read != null) {
    fields=writer.addReadVisiblity(read,doc);
  }
  if (discover != null) {
    fields=writer.addDiscoverVisiblity(discover,fields);
  }
  return fields;
}",0.9930167597765364
82093,"private void addDoc(IndexWriter writer,AccessControlWriter accessControlWriter,String read,String discover,int doc,String... readMaskFields) throws IOException {
  Iterable<IndexableField> fields=getDoc(doc);
  fields=accessControlWriter.addReadVisiblity(read,fields);
  fields=accessControlWriter.addDiscoverVisiblity(discover,fields);
  if (readMaskFields != null) {
    for (    String readMaskField : readMaskFields) {
      fields=accessControlWriter.addReadMask(readMaskField,fields);
    }
  }
  writer.addDocument(accessControlWriter.lastStepBeforeIndexing(fields));
}","private void addDoc(IndexWriter writer,AccessControlWriter accessControlWriter,String read,String discover,int doc,String... readMaskFields) throws IOException {
  Iterable<? extends IndexableField> fields=getDoc(doc);
  fields=accessControlWriter.addReadVisiblity(read,fields);
  fields=accessControlWriter.addDiscoverVisiblity(discover,fields);
  if (readMaskFields != null) {
    for (    String readMaskField : readMaskFields) {
      fields=accessControlWriter.addReadMask(readMaskField,fields);
    }
  }
  writer.addDocument(accessControlWriter.lastStepBeforeIndexing(fields));
}",0.991394148020654
82094,"private List<Field> toList(Iterable<? extends Field> iterable){
  List<Field> fields=new ArrayList<Field>();
  for (  Field field : iterable) {
    fields.add(field);
  }
  return fields;
}","private List<Field> toList(Iterable<? extends IndexableField> iterable){
  List<Field> fields=new ArrayList<Field>();
  for (  IndexableField field : iterable) {
    fields.add((Field)field);
  }
  return fields;
}",0.9379652605459056
82095,"@Override public List<Field> getFields(String rowId,Record record) throws IOException {
  List<Field> fields=new ArrayList<Field>();
  String family=record.getFamily();
  if (family == null || family.isEmpty()) {
    family=BlurConstants.DEFAULT_FAMILY;
  }
  List<Column> columns=record.getColumns();
  addDefaultFields(fields,rowId,record);
  addFieldExistance(fields,record);
  Map<String,Integer> fieldCounts=new HashMap<String,Integer>();
  List<FieldTypeDefinition> postProcessingFieldTypes=new ArrayList<FieldTypeDefinition>();
  for (  Column column : columns) {
    String name=column.getName();
    String value=column.getValue();
    if (value == null || name == null) {
      continue;
    }
    FieldTypeDefinition fieldTypeDefinition=getFieldTypeDefinition(family,column);
    if (fieldTypeDefinition == null) {
      if (isStrict()) {
        LOG.error(""String_Node_Str"",family,column);
        throw new IOException(""String_Node_Str"" + family + ""String_Node_Str""+ column+ ""String_Node_Str"");
      }
      addColumnDefinition(family,name,null,getDefaultMissingFieldLessIndexing(),getDefaultMissingFieldType(),false,DEFAULT_MULTI_VALUE_FIELD_VALUE,getDefaultMissingFieldProps());
      fieldTypeDefinition=getFieldTypeDefinition(family,column);
    }
    if (fieldTypeDefinition.isPostProcessingSupported()) {
      postProcessingFieldTypes.add(fieldTypeDefinition);
    }
    String fieldName=fieldTypeDefinition.getFieldName();
    Integer count=fieldCounts.get(fieldName);
    if (count == null) {
      count=1;
    }
 else {
      count=count + 1;
    }
    fieldCounts.put(fieldName,count);
    getAndAddFields(fields,family,column,fieldTypeDefinition,count);
    Collection<String> subColumns=getSubColumns(family,column);
    if (subColumns != null) {
      for (      String subName : subColumns) {
        FieldTypeDefinition subFieldTypeDefinition=getFieldTypeDefinition(family,column,subName);
        fieldName=subFieldTypeDefinition.getFieldName();
        count=fieldCounts.get(fieldName);
        if (count == null) {
          count=1;
        }
 else {
          count=count + 1;
        }
        getAndAddFields(fields,family,column,subName,subFieldTypeDefinition,count);
      }
    }
  }
  if (!postProcessingFieldTypes.isEmpty()) {
    Collections.sort(postProcessingFieldTypes,POST_PROCESSING_COMPARATOR);
    Iterable<? extends Field> iterable=fields;
    for (    FieldTypeDefinition fieldTypeDefinition : postProcessingFieldTypes) {
      iterable=fieldTypeDefinition.executePostProcessing(iterable);
    }
    return toList(iterable);
  }
 else {
    return fields;
  }
}","@Override public List<Field> getFields(String rowId,Record record) throws IOException {
  List<Field> fields=new ArrayList<Field>();
  String family=record.getFamily();
  if (family == null || family.isEmpty()) {
    family=BlurConstants.DEFAULT_FAMILY;
  }
  List<Column> columns=record.getColumns();
  addDefaultFields(fields,rowId,record);
  addFieldExistance(fields,record);
  Map<String,Integer> fieldCounts=new HashMap<String,Integer>();
  List<FieldTypeDefinition> postProcessingFieldTypes=new ArrayList<FieldTypeDefinition>();
  for (  Column column : columns) {
    String name=column.getName();
    String value=column.getValue();
    if (value == null || name == null) {
      continue;
    }
    FieldTypeDefinition fieldTypeDefinition=getFieldTypeDefinition(family,column);
    if (fieldTypeDefinition == null) {
      if (isStrict()) {
        LOG.error(""String_Node_Str"",family,column);
        throw new IOException(""String_Node_Str"" + family + ""String_Node_Str""+ column+ ""String_Node_Str"");
      }
      addColumnDefinition(family,name,null,getDefaultMissingFieldLessIndexing(),getDefaultMissingFieldType(),false,DEFAULT_MULTI_VALUE_FIELD_VALUE,getDefaultMissingFieldProps());
      fieldTypeDefinition=getFieldTypeDefinition(family,column);
    }
    if (fieldTypeDefinition.isPostProcessingSupported()) {
      postProcessingFieldTypes.add(fieldTypeDefinition);
    }
    String fieldName=fieldTypeDefinition.getFieldName();
    Integer count=fieldCounts.get(fieldName);
    if (count == null) {
      count=1;
    }
 else {
      count=count + 1;
    }
    fieldCounts.put(fieldName,count);
    getAndAddFields(fields,family,column,fieldTypeDefinition,count);
    Collection<String> subColumns=getSubColumns(family,column);
    if (subColumns != null) {
      for (      String subName : subColumns) {
        FieldTypeDefinition subFieldTypeDefinition=getFieldTypeDefinition(family,column,subName);
        fieldName=subFieldTypeDefinition.getFieldName();
        count=fieldCounts.get(fieldName);
        if (count == null) {
          count=1;
        }
 else {
          count=count + 1;
        }
        getAndAddFields(fields,family,column,subName,subFieldTypeDefinition,count);
      }
    }
  }
  if (!postProcessingFieldTypes.isEmpty()) {
    Collections.sort(postProcessingFieldTypes,POST_PROCESSING_COMPARATOR);
    Iterable<? extends IndexableField> iterable=fields;
    for (    FieldTypeDefinition fieldTypeDefinition : postProcessingFieldTypes) {
      iterable=fieldTypeDefinition.executePostProcessing(iterable);
    }
    return toList(iterable);
  }
 else {
    return fields;
  }
}",0.9982814588504868
82096,"public Iterable<? extends Field> executePostProcessing(Iterable<? extends Field> fields){
  throw new RuntimeException(""String_Node_Str"");
}","public Iterable<? extends IndexableField> executePostProcessing(Iterable<? extends IndexableField> fields){
  throw new RuntimeException(""String_Node_Str"");
}",0.9395973154362416
82097,"@SuppressWarnings(""String_Node_Str"") @Override public Iterable<? extends Field> executePostProcessing(Iterable<? extends Field> fields){
  Iterable<IndexableField> doc=FilterAccessControlWriter.processFieldMasks((Iterable<IndexableField>)fields);
  return (Iterable<? extends Field>)doc;
}","@SuppressWarnings(""String_Node_Str"") @Override public Iterable<? extends IndexableField> executePostProcessing(Iterable<? extends IndexableField> fields){
  return FilterAccessControlWriter.processFieldMasks(fields);
}",0.7613412228796844
82098,"@Test public void testTermWalk() throws IOException, ParseException {
  SecureAtomicReader secureReader=getSecureReader();
  Fields fields=secureReader.fields();
  assertEquals(0,getTermCount(fields,""String_Node_Str""));
  assertEquals(0,getTermCount(fields,""String_Node_Str""));
  assertEquals(1,getTermCount(fields,""String_Node_Str""));
  secureReader.close();
}","@Test public void testTermWalk() throws IOException, ParseException {
  SecureAtomicReader secureReader=getSecureReader();
  Fields fields=secureReader.fields();
  assertEquals(0,getTermCount(fields,""String_Node_Str""));
  assertEquals(0,getTermWithSeekCount(fields,""String_Node_Str""));
  assertEquals(0,getTermCount(fields,""String_Node_Str""));
  assertEquals(0,getTermWithSeekCount(fields,""String_Node_Str""));
  assertEquals(1,getTermCount(fields,""String_Node_Str""));
  assertEquals(1,getTermWithSeekCount(fields,""String_Node_Str""));
  secureReader.close();
}",0.7847826086956522
82099,"@Override protected Analyzer getWrappedAnalyzer(String fieldName){
  FieldTypeDefinition fieldTypeDefinition;
  try {
    fieldTypeDefinition=getFieldTypeDefinition(fieldName);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (fieldTypeDefinition == null) {
    throw new RuntimeException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
  }
  return fieldTypeDefinition.getAnalyzerForIndex(fieldName);
}","@Override protected Analyzer getWrappedAnalyzer(String fieldName){
  FieldTypeDefinition fieldTypeDefinition;
  try {
    fieldTypeDefinition=getFieldTypeDefinition(getFieldNameRealNameIfReadMask(fieldName));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (fieldTypeDefinition == null) {
    throw new RuntimeException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
  }
  return fieldTypeDefinition.getAnalyzerForIndex(fieldName);
}",0.9443207126948776
82100,"public BaseFieldManager(String fieldLessField,final Analyzer defaultAnalyzerForQuerying,boolean strict,String defaultMissingFieldType,boolean defaultMissingFieldLessIndexing,Map<String,String> defaultMissingFieldProps,Configuration configuration) throws IOException {
  registerType(TextFieldTypeDefinition.class);
  registerType(StringFieldTypeDefinition.class);
  registerType(StoredFieldTypeDefinition.class);
  registerType(IntFieldTypeDefinition.class);
  registerType(LongFieldTypeDefinition.class);
  registerType(DoubleFieldTypeDefinition.class);
  registerType(FloatFieldTypeDefinition.class);
  registerType(DateFieldTypeDefinition.class);
  registerType(SpatialPointVectorStrategyFieldTypeDefinition.class);
  registerType(SpatialTermQueryPrefixTreeStrategyFieldTypeDefinition.class);
  registerType(SpatialRecursivePrefixTreeStrategyFieldTypeDefinition.class);
  registerType(AclReadFieldTypeDefinition.class);
  registerType(AclDiscoverFieldTypeDefinition.class);
  registerType(ReadMaskFieldTypeDefinition.class);
  _fieldLessField=fieldLessField;
  _strict=strict;
  _defaultMissingFieldLessIndexing=defaultMissingFieldLessIndexing;
  _defaultMissingFieldType=defaultMissingFieldType;
  _defaultMissingFieldProps=defaultMissingFieldProps;
  _configuration=configuration;
  _fieldLessFieldTypeDefinition=new FieldLessFieldTypeDefinition();
  _baseAnalyzerForQuery=new AnalyzerWrapper(){
    @Override protected Analyzer getWrappedAnalyzer(    String fieldName){
      if (isBuiltInField(fieldName)) {
        return _keywordAnalyzer;
      }
      FieldTypeDefinition fieldTypeDefinition;
      try {
        fieldTypeDefinition=getFieldTypeDefinition(fieldName);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (fieldTypeDefinition == null) {
        return defaultAnalyzerForQuerying;
      }
      return fieldTypeDefinition.getAnalyzerForQuery(fieldName);
    }
    @Override protected TokenStreamComponents wrapComponents(    String fieldName,    TokenStreamComponents components){
      return components;
    }
  }
;
  _baseAnalyzerForIndex=new AnalyzerWrapper(){
    @Override protected Analyzer getWrappedAnalyzer(    String fieldName){
      FieldTypeDefinition fieldTypeDefinition;
      try {
        fieldTypeDefinition=getFieldTypeDefinition(fieldName);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (fieldTypeDefinition == null) {
        throw new RuntimeException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
      }
      return fieldTypeDefinition.getAnalyzerForIndex(fieldName);
    }
    @Override protected TokenStreamComponents wrapComponents(    String fieldName,    TokenStreamComponents components){
      return components;
    }
  }
;
}","public BaseFieldManager(String fieldLessField,final Analyzer defaultAnalyzerForQuerying,boolean strict,String defaultMissingFieldType,boolean defaultMissingFieldLessIndexing,Map<String,String> defaultMissingFieldProps,Configuration configuration) throws IOException {
  registerType(TextFieldTypeDefinition.class);
  registerType(StringFieldTypeDefinition.class);
  registerType(StoredFieldTypeDefinition.class);
  registerType(IntFieldTypeDefinition.class);
  registerType(LongFieldTypeDefinition.class);
  registerType(DoubleFieldTypeDefinition.class);
  registerType(FloatFieldTypeDefinition.class);
  registerType(DateFieldTypeDefinition.class);
  registerType(SpatialPointVectorStrategyFieldTypeDefinition.class);
  registerType(SpatialTermQueryPrefixTreeStrategyFieldTypeDefinition.class);
  registerType(SpatialRecursivePrefixTreeStrategyFieldTypeDefinition.class);
  registerType(AclReadFieldTypeDefinition.class);
  registerType(AclDiscoverFieldTypeDefinition.class);
  registerType(ReadMaskFieldTypeDefinition.class);
  _fieldLessField=fieldLessField;
  _strict=strict;
  _defaultMissingFieldLessIndexing=defaultMissingFieldLessIndexing;
  _defaultMissingFieldType=defaultMissingFieldType;
  _defaultMissingFieldProps=defaultMissingFieldProps;
  _configuration=configuration;
  _fieldLessFieldTypeDefinition=new FieldLessFieldTypeDefinition();
  _baseAnalyzerForQuery=new AnalyzerWrapper(){
    @Override protected Analyzer getWrappedAnalyzer(    String fieldName){
      if (isBuiltInField(fieldName)) {
        return _keywordAnalyzer;
      }
      FieldTypeDefinition fieldTypeDefinition;
      try {
        fieldTypeDefinition=getFieldTypeDefinition(fieldName);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (fieldTypeDefinition == null) {
        return defaultAnalyzerForQuerying;
      }
      return fieldTypeDefinition.getAnalyzerForQuery(fieldName);
    }
    @Override protected TokenStreamComponents wrapComponents(    String fieldName,    TokenStreamComponents components){
      return components;
    }
  }
;
  _baseAnalyzerForIndex=new AnalyzerWrapper(){
    @Override protected Analyzer getWrappedAnalyzer(    String fieldName){
      FieldTypeDefinition fieldTypeDefinition;
      try {
        fieldTypeDefinition=getFieldTypeDefinition(getFieldNameRealNameIfReadMask(fieldName));
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (fieldTypeDefinition == null) {
        throw new RuntimeException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
      }
      return fieldTypeDefinition.getAnalyzerForIndex(fieldName);
    }
    @Override protected TokenStreamComponents wrapComponents(    String fieldName,    TokenStreamComponents components){
      return components;
    }
  }
;
}",0.9939220593493028
82101,"@SuppressWarnings(""String_Node_Str"") @Override public Iterable<? extends IndexableField> executePostProcessing(Iterable<? extends IndexableField> fields){
  return FilterAccessControlWriter.processFieldMasks(fields);
}","@Override public Iterable<? extends IndexableField> executePostProcessing(Iterable<? extends IndexableField> fields){
  return FilterAccessControlWriter.processFieldMasks(fields);
}",0.9072681704260652
82102,"@Override public Iterable<? extends Field> getFieldsForSubColumn(String family,Column column,String subName){
  return makeIterable(new StringField(INTERNAL_FIELDNAME,column.getValue(),Store.YES));
}","@Override public Iterable<? extends Field> getFieldsForSubColumn(String family,Column column,String subName){
  return makeIterable(new StringField(INTERNAL_FIELDNAME,family + ""String_Node_Str"" + column.getValue(),Store.YES));
}",0.9320843091334896
82103,"@Override public Iterable<? extends Field> getFieldsForColumn(String family,Column column){
  String name=getName(family,column.getName());
  List<Field> fields=new ArrayList<Field>();
  fields.add(new StoredField(name,column.getValue()));
  fields.add(new StringField(INTERNAL_FIELDNAME,column.getValue(),Store.YES));
  return fields;
}","@Override public Iterable<? extends Field> getFieldsForColumn(String family,Column column){
  String name=getName(family,column.getName());
  List<Field> fields=new ArrayList<Field>();
  fields.add(new StoredField(name,column.getValue()));
  fields.add(new StringField(INTERNAL_FIELDNAME,family + ""String_Node_Str"" + column.getValue(),Store.YES));
  return fields;
}",0.9587482219061166
82104,"private static boolean isValid(HdfsDirectory localDir,Directory remoteDir,String name) throws IOException {
  LastModified lastModified=(LastModified)remoteDir;
  long fileModified=lastModified.getFileModified(name);
  long fileLength=remoteDir.fileLength(name);
  if (localDir.fileExists(name)) {
    LOG.info(""String_Node_Str"",name);
    if (localDir.fileLength(name) == fileLength) {
      LOG.info(""String_Node_Str"",name);
      String lastModFile=name + LASTMOD;
      if (localDir.fileExists(lastModFile) && localDir.fileLength(lastModFile) != 8) {
        LOG.info(""String_Node_Str"",name);
        IndexInput input=localDir.openInput(lastModFile,IOContext.DEFAULT);
        long lastMod=input.readLong();
        if (lastMod == fileModified) {
          LOG.info(""String_Node_Str"",name);
          return true;
        }
 else {
          LOG.info(""String_Node_Str"",name);
        }
      }
 else {
        LOG.info(""String_Node_Str"",name);
      }
    }
 else {
      LOG.info(""String_Node_Str"",name);
    }
  }
 else {
    LOG.info(""String_Node_Str"",name);
  }
  return false;
}","private static boolean isValid(HdfsDirectory localDir,Directory remoteDir,String name) throws IOException {
  LastModified lastModified=(LastModified)remoteDir;
  long fileModified=lastModified.getFileModified(name);
  long fileLength=remoteDir.fileLength(name);
  if (localDir.fileExists(name)) {
    LOG.info(""String_Node_Str"",name);
    if (localDir.fileLength(name) == fileLength) {
      LOG.info(""String_Node_Str"",name);
      String lastModFile=name + LASTMOD;
      if (localDir.fileExists(lastModFile) && localDir.fileLength(lastModFile) == 8) {
        LOG.info(""String_Node_Str"",name);
        IndexInput input=localDir.openInput(lastModFile,IOContext.DEFAULT);
        long lastMod=input.readLong();
        if (lastMod == fileModified) {
          LOG.info(""String_Node_Str"",name);
          return true;
        }
 else {
          LOG.info(""String_Node_Str"",name);
        }
      }
 else {
        LOG.info(""String_Node_Str"",name);
      }
    }
 else {
      LOG.info(""String_Node_Str"",name);
    }
  }
 else {
    LOG.info(""String_Node_Str"",name);
  }
  return false;
}",0.999080036798528
82105,"private void customQueryCheck(String field){
  try {
    Boolean b=_fieldManager.checkSupportForCustomQuery(field);
    if (b != null && b) {
      throw new RuntimeException(""String_Node_Str"" + field + ""String_Node_Str""+ _fieldManager.getFieldTypeDefinition(field)+ ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","protected void customQueryCheck(String field){
  try {
    Boolean b=_fieldManager.checkSupportForCustomQuery(field);
    if (b != null && b) {
      throw new RuntimeException(""String_Node_Str"" + field + ""String_Node_Str""+ _fieldManager.getFieldTypeDefinition(field)+ ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9835616438356164
82106,"private Query addField(Query q,String field){
  _fieldNames.put(q,field);
  return q;
}","protected Query addField(Query q,String field){
  _fieldNames.put(q,field);
  return q;
}",0.9545454545454546
82107,"public BlurQueryParser(Version matchVersion,String f,Map<Query,String> fieldNames,FieldManager fieldManager){
  super(matchVersion,f,fieldManager.getAnalyzerForQuery());
  _fieldNames=fieldNames == null ? new HashMap<Query,String>() : fieldNames;
  _fieldManager=fieldManager;
  setAllowLeadingWildcard(true);
  setAutoGeneratePhraseQueries(true);
}","public BlurQueryParser(Version matchVersion,String f,Map<Query,String> fieldNames,FieldManager fieldManager){
  super(matchVersion,f,fieldManager.getAnalyzerForQuery());
  _fieldNames=fieldNames == null ? new HashMap<Query,String>() : fieldNames;
  _fieldManager=fieldManager;
  _allowLeadingWildcard=true;
  setAllowLeadingWildcard(_allowLeadingWildcard);
  setAutoGeneratePhraseQueries(true);
}",0.912751677852349
82108,"private String findFirstGroupName(Query query){
  if (query instanceof BooleanQuery) {
    BooleanQuery booleanQuery=(BooleanQuery)query;
    for (    BooleanClause clause : booleanQuery.clauses()) {
      return findFirstGroupName(clause.getQuery());
    }
    return null;
  }
 else   if (query instanceof SuperQuery) {
    SuperQuery sq=(SuperQuery)query;
    return findFirstGroupName(sq.getQuery());
  }
 else {
    String fieldName=_fieldNames.get(query);
    return getGroupName(fieldName);
  }
}","private String findFirstGroupName(Query query){
  if (query instanceof BooleanQuery) {
    BooleanQuery booleanQuery=(BooleanQuery)query;
    for (    BooleanClause clause : booleanQuery.clauses()) {
      String groupName=findFirstGroupName(clause.getQuery());
      if (groupName != null) {
        return groupName;
      }
    }
    return null;
  }
 else   if (query instanceof SuperQuery) {
    SuperQuery sq=(SuperQuery)query;
    return findFirstGroupName(sq.getQuery());
  }
 else {
    String fieldName=_fieldNames.get(query);
    return getGroupName(fieldName);
  }
}",0.9176688251618872
82109,"@Override protected Query newTermQuery(Term term){
  String resolvedField=_fieldManager.resolveField(term.field());
  try {
    Boolean b=_fieldManager.checkSupportForCustomQuery(resolvedField);
    if (b != null && b) {
      return _fieldManager.getCustomQuery(resolvedField,term.text());
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Query q;
  try {
    q=_fieldManager.getTermQueryIfNumeric(resolvedField,term.text());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (q != null) {
    return addField(q,resolvedField);
  }
  return addField(super.newTermQuery(new Term(resolvedField,term.text())),resolvedField);
}","@Override protected Query newTermQuery(Term term){
  String resolvedField=_fieldManager.resolveField(term.field());
  try {
    Boolean b=_fieldManager.checkSupportForCustomQuery(resolvedField);
    if (b != null && b) {
      return addField(_fieldManager.getCustomQuery(resolvedField,term.text()),resolvedField);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Query q;
  try {
    q=_fieldManager.getTermQueryIfNumeric(resolvedField,term.text());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (q != null) {
    return addField(q,resolvedField);
  }
  return addField(super.newTermQuery(new Term(resolvedField,term.text())),resolvedField);
}",0.982608695652174
82110,"public static List<String> terms(IndexReader reader,FieldTypeDefinition typeDef,String columnFamily,String columnName,String startWith,short size) throws IOException {
  if (startWith == null) {
    startWith=""String_Node_Str"";
  }
  Term term=getTerm(columnFamily,columnName,startWith);
  List<String> terms=new ArrayList<String>(size);
  AtomicReader areader=BlurUtil.getAtomicReader(reader);
  Terms termsAll=areader.terms(term.field());
  if (termsAll == null) {
    return terms;
  }
  TermsEnum termEnum=termsAll.iterator(null);
  SeekStatus status=termEnum.seekCeil(term.bytes());
  if (status == SeekStatus.END) {
    return terms;
  }
  BytesRef currentTermText=termEnum.term();
  do {
    terms.add(currentTermText.utf8ToString());
    String readTerm=typeDef.readTerm(currentTermText);
    if (readTerm != null)     terms.add(readTerm);
    if (terms.size() >= size) {
      return terms;
    }
  }
 while ((currentTermText=termEnum.next()) != null);
  return terms;
}","public static List<String> terms(IndexReader reader,FieldTypeDefinition typeDef,String columnFamily,String columnName,String startWith,short size) throws IOException {
  if (startWith == null) {
    startWith=""String_Node_Str"";
  }
  Term term=getTerm(columnFamily,columnName,startWith);
  List<String> terms=new ArrayList<String>(size);
  AtomicReader areader=BlurUtil.getAtomicReader(reader);
  Terms termsAll=areader.terms(term.field());
  if (termsAll == null) {
    return terms;
  }
  TermsEnum termEnum=termsAll.iterator(null);
  SeekStatus status=termEnum.seekCeil(term.bytes());
  if (status == SeekStatus.END) {
    return terms;
  }
  BytesRef currentTermText=termEnum.term();
  do {
    terms.add(convert(typeDef,currentTermText));
    if (terms.size() >= size) {
      return terms;
    }
  }
 while ((currentTermText=termEnum.next()) != null);
  return terms;
}",0.9352750809061487
82111,"public static BlurObject toBlurObject(Arguments arguments){
  if (arguments == null) {
    return null;
  }
  BlurObject blurObject=new BlurObject();
  Map<String,ValueObject> values=arguments.getValues();
  Set<Entry<String,ValueObject>> entrySet=values.entrySet();
  for (  Entry<String,ValueObject> e : entrySet) {
    blurObject.put(e.getKey(),toObject(e.getValue()));
  }
  return blurObject;
}","public static BlurObject toBlurObject(Arguments arguments){
  if (arguments == null) {
    return null;
  }
  BlurObject blurObject=new BlurObject();
  Map<String,ValueObject> values=arguments.getValues();
  Set<Entry<String,ValueObject>> entrySet=values.entrySet();
  for (  Entry<String,ValueObject> e : entrySet) {
    Object o=toObject(e.getValue());
    blurObject.put(e.getKey(),(Object)o);
  }
  return blurObject;
}",0.9197080291970804
82112,"public void initialize(BlurInputSplit blurInputSplit,Configuration configuration) throws IOException {
  if (_setup) {
    return;
  }
  _setup=true;
  _table=blurInputSplit.getTable();
  Path localCachePath=BlurInputFormat.getLocalCachePath(configuration);
  List<String> files=blurInputSplit.getDirectoryFiles();
  LOG.info(""String_Node_Str"",localCachePath);
  _directory=BlurInputFormat.getDirectory(configuration,_table.toString(),blurInputSplit.getDir(),files);
  SegmentInfos segmentInfos=new SegmentInfos();
  segmentInfos.read(_directory,blurInputSplit.getSegmentsName());
  SegmentInfoPerCommit commit=findSegmentInfoPerCommit(segmentInfos,blurInputSplit);
  SegmentInfo segmentInfo=commit.info;
  if (localCachePath != null) {
    _readingDirectory=copyFilesLocally(configuration,_directory,_table.toString(),blurInputSplit.getDir(),localCachePath,commit.files());
  }
 else {
    _readingDirectory=_directory;
  }
  Blur024Codec blur024Codec=new Blur024Codec();
  IOContext iocontext=IOContext.READ;
  String segmentName=segmentInfo.name;
  FieldInfos fieldInfos=blur024Codec.fieldInfosFormat().getFieldInfosReader().read(_readingDirectory,segmentName,iocontext);
  if (commit.getDelCount() > 0) {
    _liveDocs=blur024Codec.liveDocsFormat().readLiveDocs(_readingDirectory,commit,iocontext);
  }
  _fieldsReader=blur024Codec.storedFieldsFormat().fieldsReader(_readingDirectory,segmentInfo,fieldInfos,iocontext);
  _maxDoc=commit.info.getDocCount();
}","public void initialize(BlurInputSplit blurInputSplit,Configuration configuration) throws IOException {
  if (_setup) {
    return;
  }
  _setup=true;
  _table=blurInputSplit.getTable();
  Path localCachePath=BlurInputFormat.getLocalCachePath(configuration);
  List<String> files=blurInputSplit.getDirectoryFiles();
  LOG.info(""String_Node_Str"",localCachePath);
  _directory=BlurInputFormat.getDirectory(configuration,_table.toString(),blurInputSplit.getDir(),files);
  SegmentInfoPerCommit commit=segmentInfosRead(_directory,blurInputSplit.getSegmentsName(),blurInputSplit.getSegmentInfoName());
  SegmentInfo segmentInfo=commit.info;
  if (localCachePath != null) {
    _readingDirectory=copyFilesLocally(configuration,_directory,_table.toString(),blurInputSplit.getDir(),localCachePath,commit.files());
  }
 else {
    _readingDirectory=_directory;
  }
  Blur024Codec blur024Codec=new Blur024Codec();
  IOContext iocontext=IOContext.READ;
  String segmentName=segmentInfo.name;
  FieldInfos fieldInfos=blur024Codec.fieldInfosFormat().getFieldInfosReader().read(_readingDirectory,segmentName,iocontext);
  if (commit.getDelCount() > 0) {
    _liveDocs=blur024Codec.liveDocsFormat().readLiveDocs(_readingDirectory,commit,iocontext);
  }
  _fieldsReader=blur024Codec.storedFieldsFormat().fieldsReader(_readingDirectory,segmentInfo,fieldInfos,iocontext);
  _maxDoc=commit.info.getDocCount();
}",0.929172510518934
82113,"public boolean isRequired(){
  return ((defaultVal != null) && (!defaultVal.isEmpty()));
}","public boolean isRequired(){
  return required;
}",0.60431654676259
82114,"public Map<String,List<BlurProp>> parse() throws IOException {
  InputStream inputStream=BlurPropertyParser.class.getResourceAsStream(""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
  String line;
  String prevLine=null;
  String key=""String_Node_Str"";
  Map<String,List<BlurProp>> map=new HashMap<String,List<BlurProp>>();
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    if (line.equals(""String_Node_Str"")) {
      key=""String_Node_Str"";
    }
 else     if (line.equals(""String_Node_Str"")) {
      key=""String_Node_Str"";
    }
    if (!line.startsWith(""String_Node_Str"") && !line.isEmpty()) {
      String desc=getDesc(prevLine);
      String name=getName(line);
      String value=getValue(line);
      String type=getType(value);
      List<BlurProp> props=map.get(key);
      if (props == null) {
        props=Lists.newArrayList();
        map.put(key,props);
      }
      BlurProp p=new BlurProp();
      p.setName(name);
      p.setDefaultVal(value);
      p.setDescription(desc);
      p.setType(type);
      props.add(p);
    }
    prevLine=line;
  }
  return map;
}","public Map<String,List<BlurProp>> parse() throws IOException {
  InputStream inputStream=BlurPropertyParser.class.getResourceAsStream(""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
  String line;
  String prevLine=null;
  String key=""String_Node_Str"";
  Set<String> requiredProperties=getRequiredProperties();
  Map<String,List<BlurProp>> map=new HashMap<String,List<BlurProp>>();
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    if (line.equals(""String_Node_Str"")) {
      key=""String_Node_Str"";
    }
 else     if (line.equals(""String_Node_Str"")) {
      key=""String_Node_Str"";
    }
    if (!line.startsWith(""String_Node_Str"") && !line.isEmpty()) {
      String desc=getDesc(prevLine);
      String name=getName(line);
      String value=getValue(line);
      String type=getType(value);
      List<BlurProp> props=map.get(key);
      if (props == null) {
        props=Lists.newArrayList();
        map.put(key,props);
      }
      BlurProp p=new BlurProp();
      p.setName(name);
      p.setDefaultVal(value);
      p.setDescription(desc);
      p.setType(type);
      p.setRequired(requiredProperties.contains(name));
      props.add(p);
    }
    prevLine=line;
  }
  return map;
}",0.9528145695364238
82115,"@Override protected Query newWildcardQuery(Term t){
  if (""String_Node_Str"".equals(t.text())) {
    String fieldName=t.field();
    if (SUPER.equals(fieldName)) {
      return new MatchAllDocsQuery();
    }
 else {
      return new TermQuery(new Term(BlurConstants.FIELDS,fieldName));
    }
  }
  String resolvedField=_fieldManager.resolveField(t.field());
  try {
    Boolean b=_fieldManager.checkSupportForWildcardQuery(resolvedField);
    if (!(b == null || b)) {
      throw new RuntimeException(""String_Node_Str"" + resolvedField + ""String_Node_Str""+ _fieldManager.getFieldTypeDefinition(resolvedField)+ ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  customQueryCheck(resolvedField);
  return addField(super.newWildcardQuery(new Term(resolvedField,t.text())),resolvedField);
}","@Override protected Query newWildcardQuery(Term t){
  if (""String_Node_Str"".equals(t.text())) {
    String fieldName=t.field();
    if (SUPER.equals(fieldName)) {
      return addField(new MatchAllDocsQuery(),fieldName);
    }
 else {
      String resolvedField=_fieldManager.resolveField(t.field());
      return addField(new TermQuery(new Term(BlurConstants.FIELDS,fieldName)),resolvedField);
    }
  }
  String resolvedField=_fieldManager.resolveField(t.field());
  try {
    Boolean b=_fieldManager.checkSupportForWildcardQuery(resolvedField);
    if (!(b == null || b)) {
      throw new RuntimeException(""String_Node_Str"" + resolvedField + ""String_Node_Str""+ _fieldManager.getFieldTypeDefinition(resolvedField)+ ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  customQueryCheck(resolvedField);
  return addField(super.newWildcardQuery(new Term(resolvedField,t.text())),resolvedField);
}",0.9300225733634312
82116,"private boolean isSameGroupName(Query query,String groupName){
  if (query instanceof BooleanQuery) {
    BooleanQuery booleanQuery=(BooleanQuery)query;
    for (    BooleanClause clause : booleanQuery.clauses()) {
      if (!isSameGroupName(clause.getQuery(),groupName)) {
        return false;
      }
    }
    return true;
  }
 else {
    String fieldName=_fieldNames.get(query);
    String currentGroupName=getGroupName(fieldName);
    if (groupName.equals(currentGroupName)) {
      return true;
    }
    return false;
  }
}","private boolean isSameGroupName(Query query,String groupName){
  if (query instanceof BooleanQuery) {
    BooleanQuery booleanQuery=(BooleanQuery)query;
    for (    BooleanClause clause : booleanQuery.clauses()) {
      if (!isSameGroupName(clause.getQuery(),groupName)) {
        return false;
      }
    }
    return true;
  }
 else {
    String fieldName=_fieldNames.get(query);
    String currentGroupName=getGroupName(fieldName);
    if (groupName.equals(currentGroupName) || isSystemField(fieldName)) {
      return true;
    }
    return false;
  }
}",0.9743119266055046
82117,"@Override public void initialize(Configuration conf,Properties tbl) throws SerDeException {
  String table=tbl.getProperty(TABLE);
  nullCheck(TABLE,table);
  _family=tbl.getProperty(FAMILY);
  nullCheck(FAMILY,_family);
  BlurConfiguration configuration;
  try {
    configuration=new BlurConfiguration();
    String zkConnectionStr=tbl.getProperty(ZK);
    nullCheck(ZK,zkConnectionStr);
    configuration.set(ZK,zkConnectionStr);
  }
 catch (  IOException e) {
    throw new SerDeException(e);
  }
  Iface client=BlurClient.getClient(configuration);
  Schema schema;
  try {
    List<String> tableList=client.tableList();
    if (!tableList.contains(table)) {
      throw new SerDeException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    if (conf != null) {
      TableDescriptor tableDescriptor=client.describe(table);
      Map<String,String> tableProperties=tableDescriptor.getTableProperties();
      if (tableProperties != null) {
        String workingPath=tableProperties.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
        if (conf != null && workingPath != null) {
          if (!conf.getBoolean(BLUR_MR_UPDATE_DISABLED,false)) {
            conf.set(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH,workingPath);
          }
        }
      }
      BlurOutputFormat.setTableDescriptor(conf,tableDescriptor);
      conf.set(BLUR_CONTROLLER_CONNECTION_STR,getControllerConnectionStr(client));
    }
    schema=client.schema(table);
  }
 catch (  BlurException e) {
    throw new SerDeException(e);
  }
catch (  TException e) {
    throw new SerDeException(e);
  }
catch (  IOException e) {
    throw new SerDeException(e);
  }
  Map<String,ColumnDefinition> columns=schema.getFamilies().get(_family);
  if (columns == null) {
    throw new SerDeException(""String_Node_Str"" + _family + ""String_Node_Str""+ table+ ""String_Node_Str"");
  }
  _schema=new HashMap<String,ColumnDefinition>();
  for (  ColumnDefinition columnDefinition : columns.values()) {
    String subColumnName=columnDefinition.getSubColumnName();
    if (subColumnName == null) {
      _schema.put(columnDefinition.getColumnName(),columnDefinition);
    }
  }
  _columnNameResolver=new BlurColumnNameResolver(_schema.values());
  BlurObjectInspectorGenerator blurObjectInspectorGenerator=new BlurObjectInspectorGenerator(_schema.values(),_columnNameResolver);
  _objectInspector=blurObjectInspectorGenerator.getObjectInspector();
  _columnNames=blurObjectInspectorGenerator.getColumnNames();
  _columnTypes=blurObjectInspectorGenerator.getColumnTypes();
  _serializer=new BlurSerializer(_schema,_columnNameResolver);
}","@Override public void initialize(Configuration conf,Properties tbl) throws SerDeException {
  String table=tbl.getProperty(TABLE);
  nullCheck(TABLE,table);
  _family=tbl.getProperty(FAMILY);
  nullCheck(FAMILY,_family);
  BlurConfiguration configuration;
  String zkConnectionStr;
  try {
    configuration=new BlurConfiguration();
    zkConnectionStr=tbl.getProperty(ZK);
    nullCheck(ZK,zkConnectionStr);
    configuration.set(ZK,zkConnectionStr);
  }
 catch (  IOException e) {
    throw new SerDeException(e);
  }
  Iface client=BlurClient.getClient(configuration);
  Schema schema;
  try {
    List<String> tableList=client.tableList();
    if (!tableList.contains(table)) {
      LOG.warn(""String_Node_Str"",table,zkConnectionStr);
      _objectInspector=new NullStructSerDe.NullStructSerDeObjectInspector();
      return;
    }
    if (conf != null) {
      TableDescriptor tableDescriptor=client.describe(table);
      Map<String,String> tableProperties=tableDescriptor.getTableProperties();
      if (tableProperties != null) {
        String workingPath=tableProperties.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
        if (conf != null && workingPath != null) {
          if (!conf.getBoolean(BLUR_MR_UPDATE_DISABLED,false)) {
            conf.set(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH,workingPath);
          }
        }
      }
      BlurOutputFormat.setTableDescriptor(conf,tableDescriptor);
      conf.set(BLUR_CONTROLLER_CONNECTION_STR,getControllerConnectionStr(client));
    }
    schema=client.schema(table);
  }
 catch (  BlurException e) {
    throw new SerDeException(e);
  }
catch (  TException e) {
    throw new SerDeException(e);
  }
catch (  IOException e) {
    throw new SerDeException(e);
  }
  Map<String,ColumnDefinition> columns=schema.getFamilies().get(_family);
  if (columns == null) {
    throw new SerDeException(""String_Node_Str"" + _family + ""String_Node_Str""+ table+ ""String_Node_Str"");
  }
  _schema=new HashMap<String,ColumnDefinition>();
  for (  ColumnDefinition columnDefinition : columns.values()) {
    String subColumnName=columnDefinition.getSubColumnName();
    if (subColumnName == null) {
      _schema.put(columnDefinition.getColumnName(),columnDefinition);
    }
  }
  _columnNameResolver=new BlurColumnNameResolver(_schema.values());
  BlurObjectInspectorGenerator blurObjectInspectorGenerator=new BlurObjectInspectorGenerator(_schema.values(),_columnNameResolver);
  _objectInspector=blurObjectInspectorGenerator.getObjectInspector();
  _columnNames=blurObjectInspectorGenerator.getColumnNames();
  _columnTypes=blurObjectInspectorGenerator.getColumnTypes();
  _serializer=new BlurSerializer(_schema,_columnNameResolver);
}",0.9581132075471698
82118,"@Override protected void reduce(IndexKey key,Iterable<IndexValue> values,Context context) throws IOException, InterruptedException {
  if (key.getType() != TYPE.NEW_DATA_MARKER) {
    return;
  }
 else {
    BlurRecord prevBlurRecord=null;
    String prevRecordId=null;
    for (    IndexValue value : values) {
      BlurRecord br=value.getBlurRecord();
      if (br == null) {
        continue;
      }
      BlurRecord blurRecord=new BlurRecord(br);
      String recordId=blurRecord.getRecordId();
      if (prevRecordId == null || prevRecordId.equals(recordId)) {
        prevBlurRecord=blurRecord;
        prevRecordId=recordId;
      }
 else {
        context.write(new Text(blurRecord.getRowId()),toMutate(blurRecord));
      }
    }
    if (prevBlurRecord != null) {
      context.write(new Text(prevBlurRecord.getRowId()),toMutate(prevBlurRecord));
    }
  }
}","@Override protected void reduce(IndexKey key,Iterable<IndexValue> values,Context context) throws IOException, InterruptedException {
  if (key.getType() != TYPE.NEW_DATA_MARKER) {
    handleNoNewData(key,values);
  }
 else {
    handleNewData(key,values,context);
  }
}",0.367311072056239
82119,"@Override protected void setup(final Context context) throws IOException, InterruptedException {
  BlurOutputFormat.setProgressable(context);
  BlurOutputFormat.setGetCounter(new GetCounter(){
    @Override public Counter getCounter(    Enum<?> counterName){
      return context.getCounter(counterName);
    }
  }
);
}","@Override protected void setup(final Context context) throws IOException, InterruptedException {
  BlurOutputFormat.setProgressable(context);
  BlurOutputFormat.setGetCounter(new GetCounter(){
    @Override public Counter getCounter(    Enum<?> counterName){
      return context.getCounter(counterName);
    }
  }
);
  _newRecordsUpdate=context.getCounter(BLUR_UPDATE,NEW_RCORDS + SEP + UPDATE);
  _newRecordsNoUpdate=context.getCounter(BLUR_UPDATE,NEW_RCORDS + SEP + NO_UPDATE);
  _existingRecordsUpdate=context.getCounter(BLUR_UPDATE,EXISTING_RCORDS + SEP + UPDATE);
  _existingRecordsNoUpdate=context.getCounter(BLUR_UPDATE,EXISTING_RCORDS + SEP + NO_UPDATE);
  _ignoredExistingRows=context.getCounter(BLUR_UPDATE,IGNORED_EXISTING_ROWS);
  _debugRecordsWithSameRecordId=context.getCounter(BLUR_UPDATE_DEBUG,MULTIPLE_RECORD_W_SAME_RECORD_ID);
  _debugMarkerRecordsNoUpdate=context.getCounter(BLUR_UPDATE_DEBUG,MARKER_RECORDS + SEP + NO_UPDATE);
  _debugMarkerRecordsUpdate=context.getCounter(BLUR_UPDATE_DEBUG,MARKER_RECORDS + SEP + UPDATE);
  _debugIndexValues=context.getCounter(BLUR_UPDATE_DEBUG,INDEX_VALUES);
  _debugNullBlurRecords=context.getCounter(BLUR_UPDATE_DEBUG,NULL_BLUR_RECORDS);
}",0.4202898550724637
82120,"private void assignMapReduceWorkingPath(TableDescriptor tableDescriptor) throws IOException {
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  String mrIncWorkingPathStr=getProperty(tableProperties,BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
  if (mrIncWorkingPathStr == null) {
    mrIncWorkingPathStr=_configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
    if (mrIncWorkingPathStr == null) {
      LOG.info(""String_Node_Str"",tableDescriptor.getName());
      return;
    }
    mrIncWorkingPathStr=new Path(mrIncWorkingPathStr,tableDescriptor.getName()).toString();
    tableDescriptor.putToTableProperties(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH,mrIncWorkingPathStr);
  }
  Path mrIncWorkingPath=new Path(mrIncWorkingPathStr);
  FileSystem fileSystem=mrIncWorkingPath.getFileSystem(_config);
  Path newData=new Path(mrIncWorkingPath,NEW);
  Path tmpData=new Path(mrIncWorkingPath,TMP);
  Path inprogressData=new Path(mrIncWorkingPath,INPROGRESS);
  Path completeData=new Path(mrIncWorkingPath,COMPLETE);
  Path fileCache=new Path(mrIncWorkingPath,CACHE);
  String permission=getProperty(tableProperties,BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH_PERMISSION);
  FsPermission fsPermission;
  if (permission == null || permission.isEmpty()) {
    fsPermission=FsPermission.getDirDefault();
  }
 else {
    fsPermission=new FsPermission(permission);
  }
  fileSystem.mkdirs(mrIncWorkingPath,fsPermission);
  fileSystem.mkdirs(newData,fsPermission);
  fileSystem.mkdirs(tmpData,fsPermission);
  fileSystem.mkdirs(inprogressData,fsPermission);
  fileSystem.mkdirs(completeData,fsPermission);
  fileSystem.mkdirs(fileCache,fsPermission);
}","private void assignMapReduceWorkingPath(TableDescriptor tableDescriptor) throws IOException {
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  String mrIncWorkingPathStr=getProperty(tableProperties,BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
  if (mrIncWorkingPathStr == null) {
    mrIncWorkingPathStr=_configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
    if (mrIncWorkingPathStr == null) {
      LOG.info(""String_Node_Str"",tableDescriptor.getName());
      return;
    }
    mrIncWorkingPathStr=new Path(mrIncWorkingPathStr,tableDescriptor.getName()).toString();
    tableDescriptor.putToTableProperties(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH,mrIncWorkingPathStr);
  }
  Path mrIncWorkingPath=new Path(mrIncWorkingPathStr);
  FileSystem fileSystem=mrIncWorkingPath.getFileSystem(_config);
  Path newData=new Path(mrIncWorkingPath,NEW);
  Path tmpData=new Path(mrIncWorkingPath,TMP);
  Path inprogressData=new Path(mrIncWorkingPath,INPROGRESS);
  Path completeData=new Path(mrIncWorkingPath,COMPLETE);
  Path fileCache=new Path(mrIncWorkingPath,CACHE);
  String permission=getProperty(tableProperties,BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH_PERMISSION);
  FsPermission fsPermission;
  if (permission == null || permission.isEmpty()) {
    fileSystem.mkdirs(mrIncWorkingPath);
    fileSystem.mkdirs(newData);
    fileSystem.mkdirs(tmpData);
    fileSystem.mkdirs(inprogressData);
    fileSystem.mkdirs(completeData);
    fileSystem.mkdirs(fileCache);
  }
 else {
    fsPermission=new FsPermission(permission);
    fileSystem.mkdirs(mrIncWorkingPath,fsPermission);
    fileSystem.mkdirs(newData,fsPermission);
    fileSystem.mkdirs(tmpData,fsPermission);
    fileSystem.mkdirs(inprogressData,fsPermission);
    fileSystem.mkdirs(completeData,fsPermission);
    fileSystem.mkdirs(fileCache,fsPermission);
  }
}",0.7488713318284425
82121,"private String buffer(long number){
  String s=Long.toString(number);
  StringBuilder builder=new StringBuilder();
  for (int i=s.length(); i < 12; i++) {
    builder.append('0');
  }
  return builder.append(s).toString();
}","private static String buffer(long number){
  String s=Long.toString(number);
  StringBuilder builder=new StringBuilder();
  for (int i=s.length(); i < 12; i++) {
    builder.append('0');
  }
  return builder.append(s).toString();
}",0.9846153846153848
82122,"@Override public void close() throws IOException {
  if (!_isClosed) {
    _isClosed=true;
    if (_idleLogTimerTask != null) {
      _idleLogTimerTask.cancel();
    }
    if (_oldFileCleanerTimerTask != null) {
      _oldFileCleanerTimerTask.cancel();
    }
    if (_hdfsKeyValueTimer != null) {
      _hdfsKeyValueTimer.purge();
    }
    _writeLock.lock();
    try {
      if (isOpenForWriting()) {
        syncInternal();
        _output.close();
        _output=null;
      }
    }
  finally {
      _writeLock.unlock();
    }
  }
}","@Override public void close() throws IOException {
  if (!_isClosed) {
    _isClosed=true;
    if (_idleLogTimerTask != null) {
      _idleLogTimerTask.cancel();
    }
    if (_oldFileCleanerTimerTask != null) {
      _oldFileCleanerTimerTask.cancel();
    }
    if (_hdfsKeyValueTimer != null) {
      _hdfsKeyValueTimer.purge();
    }
    _writeLock.lock();
    try {
      if (isOpenForWriting()) {
        try {
          syncInternal();
        }
  finally {
          IOUtils.closeQuietly(_output);
          _output=null;
        }
      }
    }
  finally {
      _writeLock.unlock();
    }
  }
}",0.775438596491228
82123,"private void openWriter() throws IOException {
  if (_readOnly) {
    throw new IOException(""String_Node_Str"");
  }
  long nextSegment=_currentFileCounter.incrementAndGet();
  String name=buffer(nextSegment);
  _outputPath=new Path(_path,name);
  LOG.info(""String_Node_Str"",_outputPath);
  _output=_fileSystem.create(_outputPath,false);
  _output.write(MAGIC);
  _output.writeInt(VERSION);
  syncInternal();
}","private void openWriter() throws IOException {
  if (_readOnly) {
    throw new IOException(""String_Node_Str"");
  }
  _outputPath=getSegmentPath(_currentFileCounter.incrementAndGet());
  LOG.info(""String_Node_Str"",_outputPath);
  _output=_fileSystem.create(_outputPath,false);
  _output.write(MAGIC);
  _output.writeInt(VERSION);
  syncInternal();
}",0.8733509234828496
82124,"private void syncInternal() throws IOException {
  _output.flush();
  _output.sync();
  _lastWrite.set(System.currentTimeMillis());
}","private void syncInternal() throws IOException {
  validateNextSegmentHasNotStarted();
  _output.flush();
  _output.sync();
  _lastWrite.set(System.currentTimeMillis());
}",0.875
82125,"public void testTwoKeyStoreInstancesWritingAtTheSameTime() throws IOException {
  HdfsKeyValueStore store1=new HdfsKeyValueStore(false,_timer,_configuration,_path);
  listFiles();
  store1.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  listFiles();
  HdfsKeyValueStore store2=new HdfsKeyValueStore(false,_timer,_configuration,_path);
  listFiles();
  store2.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[1000]));
  listFiles();
  store1.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  listFiles();
  store2.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[1000]));
  listFiles();
  store1.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  listFiles();
  store2.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[1000]));
  listFiles();
  try {
    store1.sync();
    fail();
  }
 catch (  Exception e) {
  }
  store2.sync();
  store1.close();
  store2.close();
  HdfsKeyValueStore store3=new HdfsKeyValueStore(false,_timer,_configuration,_path);
  Iterable<Entry<BytesRef,BytesRef>> scan=store3.scan(null);
  for (  Entry<BytesRef,BytesRef> e : scan) {
    System.out.println(e.getValue().length);
  }
  store3.close();
}","@Test public void testTwoKeyStoreInstancesWritingAtTheSameTime() throws IOException {
  HdfsKeyValueStore store1=new HdfsKeyValueStore(false,_timer,_configuration,_path);
  listFiles();
  store1.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  listFiles();
  HdfsKeyValueStore store2=new HdfsKeyValueStore(false,_timer,_configuration,_path);
  listFiles();
  store2.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[1000]));
  listFiles();
  store1.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  listFiles();
  store2.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[1000]));
  listFiles();
  store1.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  listFiles();
  store2.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[1000]));
  listFiles();
  try {
    store1.sync();
    fail();
  }
 catch (  Exception e) {
  }
  store2.sync();
  try {
    store1.close();
    fail();
  }
 catch (  Exception e) {
  }
  store2.close();
  HdfsKeyValueStore store3=new HdfsKeyValueStore(false,_timer,_configuration,_path);
  Iterable<Entry<BytesRef,BytesRef>> scan=store3.scan(null);
  for (  Entry<BytesRef,BytesRef> e : scan) {
    System.out.println(e.getValue().length);
  }
  store3.close();
}",0.9754329440193314
82126,"private void assignMapReduceWorkingPath(TableDescriptor tableDescriptor) throws IOException {
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  String mrIncWorkingPathStr=null;
  if (tableProperties != null) {
    mrIncWorkingPathStr=tableProperties.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
  }
  if (mrIncWorkingPathStr == null) {
    mrIncWorkingPathStr=_configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
    if (mrIncWorkingPathStr == null) {
      LOG.info(""String_Node_Str"",tableDescriptor.getName());
      return;
    }
    mrIncWorkingPathStr=new Path(mrIncWorkingPathStr,tableDescriptor.getName()).toString();
    tableDescriptor.putToTableProperties(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH,mrIncWorkingPathStr);
  }
  Path mrIncWorkingPath=new Path(mrIncWorkingPathStr);
  Path newData=new Path(mrIncWorkingPath,NEW);
  Path tmpData=new Path(mrIncWorkingPath,TMP);
  Path inprogressData=new Path(mrIncWorkingPath,INPROGRESS);
  Path completeData=new Path(mrIncWorkingPath,COMPLETE);
  Path fileCache=new Path(mrIncWorkingPath,CACHE);
  FileSystem fileSystem=mrIncWorkingPath.getFileSystem(_config);
  fileSystem.mkdirs(newData);
  fileSystem.mkdirs(tmpData);
  fileSystem.mkdirs(inprogressData);
  fileSystem.mkdirs(completeData);
  fileSystem.mkdirs(fileCache);
}","private void assignMapReduceWorkingPath(TableDescriptor tableDescriptor) throws IOException {
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  String mrIncWorkingPathStr=getProperty(tableProperties,BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
  if (mrIncWorkingPathStr == null) {
    mrIncWorkingPathStr=_configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
    if (mrIncWorkingPathStr == null) {
      LOG.info(""String_Node_Str"",tableDescriptor.getName());
      return;
    }
    mrIncWorkingPathStr=new Path(mrIncWorkingPathStr,tableDescriptor.getName()).toString();
    tableDescriptor.putToTableProperties(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH,mrIncWorkingPathStr);
  }
  Path mrIncWorkingPath=new Path(mrIncWorkingPathStr);
  FileSystem fileSystem=mrIncWorkingPath.getFileSystem(_config);
  Path newData=new Path(mrIncWorkingPath,NEW);
  Path tmpData=new Path(mrIncWorkingPath,TMP);
  Path inprogressData=new Path(mrIncWorkingPath,INPROGRESS);
  Path completeData=new Path(mrIncWorkingPath,COMPLETE);
  Path fileCache=new Path(mrIncWorkingPath,CACHE);
  String permission=getProperty(tableProperties,BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH_PERMISSION);
  FsPermission fsPermission;
  if (permission == null || permission.isEmpty()) {
    fsPermission=FsPermission.getDirDefault();
  }
 else {
    fsPermission=new FsPermission(permission);
  }
  fileSystem.mkdirs(mrIncWorkingPath,fsPermission);
  fileSystem.mkdirs(newData,fsPermission);
  fileSystem.mkdirs(tmpData,fsPermission);
  fileSystem.mkdirs(inprogressData,fsPermission);
  fileSystem.mkdirs(completeData,fsPermission);
  fileSystem.mkdirs(fileCache,fsPermission);
}",0.7681063122923588
82127,"private void finishBulkJob(JobContext context,boolean apply) throws IOException {
  Configuration configuration=context.getConfiguration();
  String workingPathStr=configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
  Path workingPath=new Path(workingPathStr);
  Path tmpDir=new Path(workingPath,""String_Node_Str"");
  FileSystem fileSystem=tmpDir.getFileSystem(configuration);
  String loadId=configuration.get(BlurSerDe.BLUR_MR_LOAD_ID);
  Path loadPath=new Path(tmpDir,loadId);
  if (apply) {
    Path newDataPath=new Path(workingPath,""String_Node_Str"");
    Path dst=new Path(newDataPath,loadId);
    if (!fileSystem.rename(loadPath,dst)) {
      LOG.error(""String_Node_Str"" + loadPath + ""String_Node_Str""+ dst+ ""String_Node_Str"");
      throw new IOException(""String_Node_Str"" + loadPath + ""String_Node_Str""+ dst+ ""String_Node_Str"");
    }
    TableDescriptor tableDescriptor=BlurOutputFormat.getTableDescriptor(configuration);
    String connectionStr=configuration.get(BlurSerDe.BLUR_CONTROLLER_CONNECTION_STR);
    BulkTableUpdateCommand bulkTableUpdateCommand=new BulkTableUpdateCommand();
    bulkTableUpdateCommand.setAutoLoad(true);
    bulkTableUpdateCommand.setTable(tableDescriptor.getName());
    bulkTableUpdateCommand.setWaitForDataBeVisible(true);
    Configuration config=new Configuration(false);
    config.addResource(HDFS_SITE_XML);
    config.addResource(YARN_SITE_XML);
    config.addResource(MAPRED_SITE_XML);
    bulkTableUpdateCommand.addExtraConfig(config);
    if (bulkTableUpdateCommand.run(BlurClient.getClient(connectionStr)) != 0) {
      throw new IOException(""String_Node_Str"");
    }
  }
 else {
    fileSystem.delete(loadPath,true);
  }
}","private void finishBulkJob(JobContext context,final boolean apply) throws IOException {
  final Configuration configuration=context.getConfiguration();
  PrivilegedExceptionAction<Void> action=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      String workingPathStr=configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
      Path workingPath=new Path(workingPathStr);
      Path tmpDir=new Path(workingPath,""String_Node_Str"");
      FileSystem fileSystem=tmpDir.getFileSystem(configuration);
      String loadId=configuration.get(BlurSerDe.BLUR_MR_LOAD_ID);
      Path loadPath=new Path(tmpDir,loadId);
      if (apply) {
        Path newDataPath=new Path(workingPath,""String_Node_Str"");
        Path dst=new Path(newDataPath,loadId);
        if (!fileSystem.rename(loadPath,dst)) {
          LOG.error(""String_Node_Str"" + loadPath + ""String_Node_Str""+ dst+ ""String_Node_Str"");
          throw new IOException(""String_Node_Str"" + loadPath + ""String_Node_Str""+ dst+ ""String_Node_Str"");
        }
        TableDescriptor tableDescriptor=BlurOutputFormat.getTableDescriptor(configuration);
        String connectionStr=configuration.get(BlurSerDe.BLUR_CONTROLLER_CONNECTION_STR);
        BulkTableUpdateCommand bulkTableUpdateCommand=new BulkTableUpdateCommand();
        bulkTableUpdateCommand.setAutoLoad(true);
        bulkTableUpdateCommand.setTable(tableDescriptor.getName());
        bulkTableUpdateCommand.setWaitForDataBeVisible(true);
        Configuration config=new Configuration(false);
        config.addResource(HDFS_SITE_XML);
        config.addResource(YARN_SITE_XML);
        config.addResource(MAPRED_SITE_XML);
        bulkTableUpdateCommand.addExtraConfig(config);
        if (bulkTableUpdateCommand.run(BlurClient.getClient(connectionStr)) != 0) {
          throw new IOException(""String_Node_Str"");
        }
      }
 else {
        fileSystem.delete(loadPath,true);
      }
      return null;
    }
  }
;
  UserGroupInformation userGroupInformation=BlurHiveOutputFormat.getUGI(configuration);
  try {
    userGroupInformation.doAs(action);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}",0.8703274039700953
82128,"private org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter getMrWorkingPathWriter(final Configuration configuration) throws IOException {
  String workingPathStr=configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
  Path workingPath=new Path(workingPathStr);
  Path tmpDir=new Path(workingPath,""String_Node_Str"");
  final FileSystem fileSystem=tmpDir.getFileSystem(configuration);
  String loadId=configuration.get(BlurSerDe.BLUR_MR_LOAD_ID);
  final Path loadPath=new Path(tmpDir,loadId);
  String user=getBlurUser(configuration);
  UserGroupInformation proxyUser=UserGroupInformation.createProxyUser(user,UserGroupInformation.getLoginUser());
  try {
    return proxyUser.doAs(new PrivilegedExceptionAction<org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter>(){
      @Override public org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter run() throws Exception {
        final Writer writer=new SequenceFile.Writer(fileSystem,configuration,new Path(loadPath,UUID.randomUUID().toString()),Text.class,BlurRecord.class);
        return new org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter(){
          @Override public void write(          Writable w) throws IOException {
            BlurRecord blurRecord=(BlurRecord)w;
            String rowId=blurRecord.getRowId();
            writer.append(new Text(rowId),blurRecord);
          }
          @Override public void close(          boolean abort) throws IOException {
            writer.close();
          }
        }
;
      }
    }
);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}","private org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter getMrWorkingPathWriter(final Configuration configuration) throws IOException {
  PrivilegedExceptionAction<org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter> privilegedExceptionAction=new PrivilegedExceptionAction<org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter>(){
    @Override public org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter run() throws Exception {
      String workingPathStr=configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
      Path workingPath=new Path(workingPathStr);
      Path tmpDir=new Path(workingPath,""String_Node_Str"");
      FileSystem fileSystem=tmpDir.getFileSystem(configuration);
      String loadId=configuration.get(BlurSerDe.BLUR_MR_LOAD_ID);
      Path loadPath=new Path(tmpDir,loadId);
      final Writer writer=new SequenceFile.Writer(fileSystem,configuration,new Path(loadPath,UUID.randomUUID().toString()),Text.class,BlurRecord.class);
      return new org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter(){
        @Override public void write(        Writable w) throws IOException {
          BlurRecord blurRecord=(BlurRecord)w;
          String rowId=blurRecord.getRowId();
          writer.append(new Text(rowId),blurRecord);
        }
        @Override public void close(        boolean abort) throws IOException {
          writer.close();
        }
      }
;
    }
  }
;
  UserGroupInformation userGroupInformation=getUGI(configuration);
  try {
    return userGroupInformation.doAs(privilegedExceptionAction);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}",0.4411226357535082
82129,"@Override public org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter run() throws Exception {
  final Writer writer=new SequenceFile.Writer(fileSystem,configuration,new Path(loadPath,UUID.randomUUID().toString()),Text.class,BlurRecord.class);
  return new org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter(){
    @Override public void write(    Writable w) throws IOException {
      BlurRecord blurRecord=(BlurRecord)w;
      String rowId=blurRecord.getRowId();
      writer.append(new Text(rowId),blurRecord);
    }
    @Override public void close(    boolean abort) throws IOException {
      writer.close();
    }
  }
;
}","@Override public org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter run() throws Exception {
  String workingPathStr=configuration.get(BlurConstants.BLUR_BULK_UPDATE_WORKING_PATH);
  Path workingPath=new Path(workingPathStr);
  Path tmpDir=new Path(workingPath,""String_Node_Str"");
  FileSystem fileSystem=tmpDir.getFileSystem(configuration);
  String loadId=configuration.get(BlurSerDe.BLUR_MR_LOAD_ID);
  Path loadPath=new Path(tmpDir,loadId);
  final Writer writer=new SequenceFile.Writer(fileSystem,configuration,new Path(loadPath,UUID.randomUUID().toString()),Text.class,BlurRecord.class);
  return new org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter(){
    @Override public void write(    Writable w) throws IOException {
      BlurRecord blurRecord=(BlurRecord)w;
      String rowId=blurRecord.getRowId();
      writer.append(new Text(rowId),blurRecord);
    }
    @Override public void close(    boolean abort) throws IOException {
      writer.close();
    }
  }
;
}",0.7856272838002436
82130,"private static boolean isValid(HdfsDirectory localDir,Directory remoteDir,String name) throws IOException {
  LastModified lastModified=(LastModified)remoteDir;
  long fileModified=lastModified.getFileModified(name);
  long fileLength=remoteDir.fileLength(name);
  if (localDir.fileExists(name)) {
    LOG.info(""String_Node_Str"",name);
    if (localDir.fileLength(name) == fileLength) {
      LOG.info(""String_Node_Str"",name);
      if (localDir.fileExists(name + LASTMOD)) {
        LOG.info(""String_Node_Str"",name);
        IndexInput input=localDir.openInput(name + LASTMOD,IOContext.DEFAULT);
        long lastMod=input.readLong();
        if (lastMod == fileModified) {
          LOG.info(""String_Node_Str"",name);
          return true;
        }
 else {
          LOG.info(""String_Node_Str"",name);
        }
      }
 else {
        LOG.info(""String_Node_Str"",name);
      }
    }
 else {
      LOG.info(""String_Node_Str"",name);
    }
  }
 else {
    LOG.info(""String_Node_Str"",name);
  }
  return false;
}","private static boolean isValid(HdfsDirectory localDir,Directory remoteDir,String name) throws IOException {
  LastModified lastModified=(LastModified)remoteDir;
  long fileModified=lastModified.getFileModified(name);
  long fileLength=remoteDir.fileLength(name);
  if (localDir.fileExists(name)) {
    LOG.info(""String_Node_Str"",name);
    if (localDir.fileLength(name) == fileLength) {
      LOG.info(""String_Node_Str"",name);
      String lastModFile=name + LASTMOD;
      if (localDir.fileExists(lastModFile) && localDir.fileLength(lastModFile) != 8) {
        LOG.info(""String_Node_Str"",name);
        IndexInput input=localDir.openInput(lastModFile,IOContext.DEFAULT);
        long lastMod=input.readLong();
        if (lastMod == fileModified) {
          LOG.info(""String_Node_Str"",name);
          return true;
        }
 else {
          LOG.info(""String_Node_Str"",name);
        }
      }
 else {
        LOG.info(""String_Node_Str"",name);
      }
    }
 else {
      LOG.info(""String_Node_Str"",name);
    }
  }
 else {
    LOG.info(""String_Node_Str"",name);
  }
  return false;
}",0.9361296472831268
82131,"public void initialize(BlurInputSplit blurInputSplit,Configuration configuration) throws IOException {
  if (_setup) {
    return;
  }
  _setup=true;
  _table=blurInputSplit.getTable();
  Path localCachePath=BlurInputFormat.getLocalCachePath(configuration);
  LOG.info(""String_Node_Str"",localCachePath);
  _directory=BlurInputFormat.getDirectory(configuration,_table.toString(),blurInputSplit.getDir());
  SegmentInfos segmentInfos=new SegmentInfos();
  segmentInfos.read(_directory,blurInputSplit.getSegmentsName());
  SegmentInfoPerCommit commit=findSegmentInfoPerCommit(segmentInfos,blurInputSplit);
  SegmentInfo segmentInfo=commit.info;
  if (localCachePath != null) {
    _readingDirectory=copyFilesLocally(configuration,_directory,_table.toString(),blurInputSplit.getDir(),localCachePath,segmentInfo.files());
  }
 else {
    _readingDirectory=_directory;
  }
  Blur024Codec blur024Codec=new Blur024Codec();
  IOContext iocontext=IOContext.READ;
  String segmentName=segmentInfo.name;
  FieldInfos fieldInfos=blur024Codec.fieldInfosFormat().getFieldInfosReader().read(_readingDirectory,segmentName,iocontext);
  if (commit.getDelCount() > 0) {
    _liveDocs=blur024Codec.liveDocsFormat().readLiveDocs(_readingDirectory,commit,iocontext);
  }
  _fieldsReader=blur024Codec.storedFieldsFormat().fieldsReader(_readingDirectory,segmentInfo,fieldInfos,iocontext);
  _maxDoc=commit.info.getDocCount();
}","public void initialize(BlurInputSplit blurInputSplit,Configuration configuration) throws IOException {
  if (_setup) {
    return;
  }
  _setup=true;
  _table=blurInputSplit.getTable();
  Path localCachePath=BlurInputFormat.getLocalCachePath(configuration);
  LOG.info(""String_Node_Str"",localCachePath);
  _directory=BlurInputFormat.getDirectory(configuration,_table.toString(),blurInputSplit.getDir());
  SegmentInfos segmentInfos=new SegmentInfos();
  segmentInfos.read(_directory,blurInputSplit.getSegmentsName());
  SegmentInfoPerCommit commit=findSegmentInfoPerCommit(segmentInfos,blurInputSplit);
  SegmentInfo segmentInfo=commit.info;
  if (localCachePath != null) {
    _readingDirectory=copyFilesLocally(configuration,_directory,_table.toString(),blurInputSplit.getDir(),localCachePath,commit.files());
  }
 else {
    _readingDirectory=_directory;
  }
  Blur024Codec blur024Codec=new Blur024Codec();
  IOContext iocontext=IOContext.READ;
  String segmentName=segmentInfo.name;
  FieldInfos fieldInfos=blur024Codec.fieldInfosFormat().getFieldInfosReader().read(_readingDirectory,segmentName,iocontext);
  if (commit.getDelCount() > 0) {
    _liveDocs=blur024Codec.liveDocsFormat().readLiveDocs(_readingDirectory,commit,iocontext);
  }
  _fieldsReader=blur024Codec.storedFieldsFormat().fieldsReader(_readingDirectory,segmentInfo,fieldInfos,iocontext);
  _maxDoc=commit.info.getDocCount();
}",0.993930739021778
82132,"private static Directory copyFilesLocally(Configuration configuration,Directory dir,String table,Path shardDir,Path localCachePath,Set<String> files) throws IOException {
  LOG.info(""String_Node_Str"",shardDir);
  Path localShardPath=new Path(new Path(localCachePath,table),shardDir.getName());
  HdfsDirectory localDir=new HdfsDirectory(configuration,localShardPath);
  for (  String name : files) {
    if (!isValidFileToCache(name)) {
      continue;
    }
    LOG.info(""String_Node_Str"",name);
    if (!isValid(localDir,dir,name)) {
      LastModified lastModified=(LastModified)dir;
      long fileModified=lastModified.getFileModified(name);
      IndexInput input=dir.openInput(name,IOContext.READONCE);
      IndexOutput output=localDir.createOutput(name,IOContext.READONCE);
      output.copyBytes(input,input.length());
      output.close();
      IndexOutput lastMod=localDir.createOutput(name + LASTMOD,IOContext.DEFAULT);
      lastMod.writeLong(fileModified);
      lastMod.close();
    }
  }
  return localDir;
}","private static Directory copyFilesLocally(Configuration configuration,Directory dir,String table,Path shardDir,Path localCachePath,Collection<String> files) throws IOException {
  LOG.info(""String_Node_Str"",shardDir);
  Path localShardPath=new Path(new Path(localCachePath,table),shardDir.getName());
  HdfsDirectory localDir=new HdfsDirectory(configuration,localShardPath);
  for (  String name : files) {
    if (!isValidFileToCache(name)) {
      continue;
    }
    LOG.info(""String_Node_Str"",name);
    if (!isValid(localDir,dir,name)) {
      LastModified lastModified=(LastModified)dir;
      long fileModified=lastModified.getFileModified(name);
      IndexInput input=dir.openInput(name,IOContext.READONCE);
      IndexOutput output=localDir.createOutput(name,IOContext.READONCE);
      output.copyBytes(input,input.length());
      output.close();
      IndexOutput lastMod=localDir.createOutput(name + LASTMOD,IOContext.DEFAULT);
      lastMod.writeLong(fileModified);
      lastMod.close();
    }
  }
  return localDir;
}",0.9936862554638174
82133,"protected long getRowCount(IndexSearcherCloseable searcher) throws IOException {
  TopDocs topDocs=searcher.search(new TermQuery(BlurUtil.PRIME_DOC_TERM),1);
  return topDocs.totalHits;
}","protected long getRowCount(IndexSearcherCloseable searcher) throws IOException {
  TopDocs topDocs=searcher.search(new SuperQuery(new MatchAllDocsQuery(),ScoreType.CONSTANT,_tableContext.getDefaultPrimeDocTerm()),1);
  return topDocs.totalHits;
}",0.7159353348729792
82134,"public void close() throws IOException {
  flush();
  _writer.close();
  if (_countersSetup) {
    _recordRateCounter.close();
    _rowRateCounter.close();
  }
  if (_indexLocally) {
    if (_optimizeInFlight) {
      copyAndOptimizeInFlightDir();
    }
 else {
      copyDir();
    }
  }
  if (_countersSetup) {
    _copyRateCounter.close();
  }
}","public void close() throws IOException {
  flush();
  _writer.close(false);
  if (_countersSetup) {
    _recordRateCounter.close();
    _rowRateCounter.close();
  }
  if (_indexLocally) {
    if (_optimizeInFlight) {
      copyAndOptimizeInFlightDir();
    }
 else {
      copyDir();
    }
  }
  if (_countersSetup) {
    _copyRateCounter.close();
  }
}",0.992867332382311
82135,"@Override public void seek(long pos) throws IOException {
  ensureOpen();
  if (pos >= _fileLength) {
    _position=pos;
    return;
  }
  if (_position == pos) {
    return;
  }
  long oldBlockId=getBlockId();
  if (_blockPosition == _cacheBlockSize) {
    oldBlockId--;
  }
  _position=pos;
  long newBlockId=getBlockId(_position);
  if (newBlockId == oldBlockId) {
    _blockPosition=getBlockPosition();
  }
 else {
    releaseCache();
  }
}","@Override public void seek(long pos) throws IOException {
  ensureOpen();
  if (pos >= _fileLength) {
    _position=pos;
    releaseCache();
    return;
  }
  if (_position == pos) {
    return;
  }
  long oldBlockId=getBlockId();
  if (_blockPosition == _cacheBlockSize) {
    oldBlockId--;
  }
  _position=pos;
  long newBlockId=getBlockId(_position);
  if (newBlockId == oldBlockId) {
    _blockPosition=getBlockPosition();
  }
 else {
    releaseCache();
  }
}",0.9779735682819384
82136,"public HdfsDirectory(Configuration configuration,Path path,SequentialReadControl sequentialReadControl,Collection<String> filesToExpose) throws IOException {
  if (sequentialReadControl == null) {
    _sequentialReadControl=new SequentialReadControl(new BlurConfiguration());
  }
 else {
    _sequentialReadControl=sequentialReadControl;
  }
  _fileSystem=path.getFileSystem(configuration);
  _path=_fileSystem.makeQualified(path);
  if (_path.toUri().getScheme().equals(HDFS_SCHEMA)) {
    _asyncClosing=true;
  }
 else {
    _asyncClosing=false;
  }
  _fileSystem.mkdirs(path);
  setLockFactory(NoLockFactory.getNoLockFactory());
synchronized (_metricsGroupMap) {
    URI uri=_fileSystem.getUri();
    MetricsGroup metricsGroup=_metricsGroupMap.get(uri);
    if (metricsGroup == null) {
      String scope=uri.toString();
      metricsGroup=createNewMetricsGroup(scope);
      _metricsGroupMap.put(uri,metricsGroup);
    }
    _metricsGroup=metricsGroup;
  }
  _hostname=InetAddress.getLocalHost().getHostName();
  LOG.info(""String_Node_Str"",_hostname,_path);
  _reportOnBlockLocality=reportOnBlockLocality();
  TIMER.schedule(_reportOnBlockLocality,TimeUnit.SECONDS.toMillis(30),TimeUnit.SECONDS.toMillis(30));
  if (_useCache) {
    if (filesToExpose == null) {
      FileStatus[] listStatus=_fileSystem.listStatus(_path);
      for (      FileStatus fileStatus : listStatus) {
        addToCache(fileStatus);
      }
    }
 else {
      for (      String file : filesToExpose) {
        Path filePath=getPathOrSymlinkForDelete(file);
        try {
          FileStatus fileStatus=_fileSystem.getFileStatus(filePath);
          if (fileStatus != null) {
            addToCache(fileStatus);
          }
        }
 catch (        FileNotFoundException e) {
        }
      }
    }
  }
}","public HdfsDirectory(Configuration configuration,Path path,SequentialReadControl sequentialReadControl,Collection<String> filesToExpose) throws IOException {
  if (sequentialReadControl == null) {
    _sequentialReadControl=new SequentialReadControl(new BlurConfiguration());
  }
 else {
    _sequentialReadControl=sequentialReadControl;
  }
  _fileSystem=path.getFileSystem(configuration);
  _path=_fileSystem.makeQualified(path);
  if (_path.toUri().getScheme().equals(HDFS_SCHEMA)) {
    _asyncClosing=true;
  }
 else {
    _asyncClosing=false;
  }
  _fileSystem.mkdirs(path);
  setLockFactory(NoLockFactory.getNoLockFactory());
synchronized (_metricsGroupMap) {
    URI uri=_fileSystem.getUri();
    MetricsGroup metricsGroup=_metricsGroupMap.get(uri);
    if (metricsGroup == null) {
      String scope=uri.toString();
      metricsGroup=createNewMetricsGroup(scope);
      _metricsGroupMap.put(uri,metricsGroup);
    }
    _metricsGroup=metricsGroup;
  }
  _hostname=InetAddress.getLocalHost().getHostName();
  LOG.info(""String_Node_Str"",_hostname,_path);
  _reportOnBlockLocality=reportOnBlockLocality();
  TIMER.schedule(_reportOnBlockLocality,TimeUnit.SECONDS.toMillis(30),TimeUnit.SECONDS.toMillis(30));
  if (_useCache) {
    if (filesToExpose == null) {
      FileStatus[] listStatus=_fileSystem.listStatus(_path);
      for (      FileStatus fileStatus : listStatus) {
        addToCache(fileStatus);
      }
    }
 else {
      for (      String file : filesToExpose) {
        Path filePath=getPathOrSymlinkForDelete(file);
        try {
          FileStatus fileStatus=_fileSystem.getFileStatus(filePath);
          if (fileStatus != null) {
            addToCache(fileStatus);
          }
        }
 catch (        FileNotFoundException e) {
          LOG.info(""String_Node_Str"",file,filePath);
        }
      }
    }
  }
}",0.9853954257371176
82137,"public HdfsDirectory(Configuration configuration,Path path,SequentialReadControl sequentialReadControl,Collection<String> filesToExpose) throws IOException {
  if (sequentialReadControl == null) {
    _sequentialReadControl=new SequentialReadControl(new BlurConfiguration());
  }
 else {
    _sequentialReadControl=sequentialReadControl;
  }
  _fileSystem=path.getFileSystem(configuration);
  _path=_fileSystem.makeQualified(path);
  if (_path.toUri().getScheme().equals(HDFS_SCHEMA)) {
    _asyncClosing=true;
  }
 else {
    _asyncClosing=false;
  }
  _fileSystem.mkdirs(path);
  setLockFactory(NoLockFactory.getNoLockFactory());
synchronized (_metricsGroupMap) {
    URI uri=_fileSystem.getUri();
    MetricsGroup metricsGroup=_metricsGroupMap.get(uri);
    if (metricsGroup == null) {
      String scope=uri.toString();
      metricsGroup=createNewMetricsGroup(scope);
      _metricsGroupMap.put(uri,metricsGroup);
    }
    _metricsGroup=metricsGroup;
  }
  _hostname=InetAddress.getLocalHost().getHostName();
  LOG.info(""String_Node_Str"",_hostname,_path);
  _reportOnBlockLocality=reportOnBlockLocality();
  TIMER.schedule(_reportOnBlockLocality,TimeUnit.SECONDS.toMillis(30),TimeUnit.SECONDS.toMillis(30));
  if (_useCache) {
    if (filesToExpose == null) {
      FileStatus[] listStatus=_fileSystem.listStatus(_path);
      for (      FileStatus fileStatus : listStatus) {
        addToCache(fileStatus);
      }
    }
 else {
      for (      String file : filesToExpose) {
        Path filePath=getPath(file);
        try {
          FileStatus fileStatus=_fileSystem.getFileStatus(filePath);
          if (fileStatus != null) {
            addToCache(fileStatus);
          }
        }
 catch (        FileNotFoundException e) {
        }
      }
    }
  }
}","public HdfsDirectory(Configuration configuration,Path path,SequentialReadControl sequentialReadControl,Collection<String> filesToExpose) throws IOException {
  if (sequentialReadControl == null) {
    _sequentialReadControl=new SequentialReadControl(new BlurConfiguration());
  }
 else {
    _sequentialReadControl=sequentialReadControl;
  }
  _fileSystem=path.getFileSystem(configuration);
  _path=_fileSystem.makeQualified(path);
  if (_path.toUri().getScheme().equals(HDFS_SCHEMA)) {
    _asyncClosing=true;
  }
 else {
    _asyncClosing=false;
  }
  _fileSystem.mkdirs(path);
  setLockFactory(NoLockFactory.getNoLockFactory());
synchronized (_metricsGroupMap) {
    URI uri=_fileSystem.getUri();
    MetricsGroup metricsGroup=_metricsGroupMap.get(uri);
    if (metricsGroup == null) {
      String scope=uri.toString();
      metricsGroup=createNewMetricsGroup(scope);
      _metricsGroupMap.put(uri,metricsGroup);
    }
    _metricsGroup=metricsGroup;
  }
  _hostname=InetAddress.getLocalHost().getHostName();
  LOG.info(""String_Node_Str"",_hostname,_path);
  _reportOnBlockLocality=reportOnBlockLocality();
  TIMER.schedule(_reportOnBlockLocality,TimeUnit.SECONDS.toMillis(30),TimeUnit.SECONDS.toMillis(30));
  if (_useCache) {
    if (filesToExpose == null) {
      FileStatus[] listStatus=_fileSystem.listStatus(_path);
      for (      FileStatus fileStatus : listStatus) {
        addToCache(fileStatus);
      }
    }
 else {
      for (      String file : filesToExpose) {
        Path filePath=getPathOrSymlinkForDelete(file);
        try {
          FileStatus fileStatus=_fileSystem.getFileStatus(filePath);
          if (fileStatus != null) {
            addToCache(fileStatus);
          }
        }
 catch (        FileNotFoundException e) {
        }
      }
    }
  }
}",0.9949409780775716
82138,"public static Value toValue(Object o) throws BlurException {
  Value value=new Value();
  if (o == null) {
    value.setNullValue(true);
    return value;
  }
  if (o instanceof Long) {
    value.setLongValue((Long)o);
    return value;
  }
 else   if (o instanceof String) {
    value.setStringValue((String)o);
    return value;
  }
 else   if (o instanceof Integer) {
    value.setIntValue((Integer)o);
    return value;
  }
 else   if (o instanceof Boolean) {
    value.setBooleanValue((Boolean)o);
    return value;
  }
 else   if (o instanceof Short) {
    value.setShortValue((Short)o);
    return value;
  }
 else   if (o instanceof byte[]) {
    value.setBinaryValue((byte[])o);
    return value;
  }
 else   if (o instanceof Double) {
    value.setDoubleValue((Double)o);
    return value;
  }
 else   if (o instanceof Float) {
    value.setFloatValue((Float)o);
    return value;
  }
  throw new BException(""String_Node_Str"",o);
}","public static Value toValue(Object o) throws BlurException {
  Value value=new Value();
  if (o == null) {
    value.setNullValue(true);
    return value;
  }
  if (o instanceof Long) {
    value.setLongValue((Long)o);
    return value;
  }
 else   if (o instanceof String) {
    value.setStringValue((String)o);
    return value;
  }
 else   if (o instanceof Integer) {
    value.setIntValue((Integer)o);
    return value;
  }
 else   if (o instanceof Boolean) {
    value.setBooleanValue((Boolean)o);
    return value;
  }
 else   if (o instanceof Short) {
    value.setShortValue((Short)o);
    return value;
  }
 else   if (o instanceof byte[]) {
    value.setBinaryValue((byte[])o);
    return value;
  }
 else   if (o instanceof ByteBuffer) {
    ByteBuffer buff=(ByteBuffer)o;
    byte[] temp=new byte[buff.remaining()];
    buff.get(temp);
    value.setBinaryValue(temp);
    return value;
  }
 else   if (o instanceof Double) {
    value.setDoubleValue((Double)o);
    return value;
  }
 else   if (o instanceof Float) {
    value.setFloatValue((Float)o);
    return value;
  }
  throw new BException(""String_Node_Str"",o);
}",0.9074252651880425
82139,"protected long[] runReport() throws IOException {
  long total=0;
  long local=0;
  Collection<FSDataInputRandomAccess> values=_inputMap.values();
  for (  FSDataInputRandomAccess inputRandomAccess : values) {
    Path path=inputRandomAccess.getPath();
    long length=inputRandomAccess.length();
    BlockLocation[] blockLocations=_fileSystem.getFileBlockLocations(path,0,length);
    for (    BlockLocation blockLocation : blockLocations) {
      if (isLocal(blockLocation)) {
        local++;
      }
      total++;
    }
  }
  return new long[]{total,local};
}","protected long[] runReport() throws IOException {
  long total=0;
  long local=0;
  Collection<FSDataInputRandomAccess> values=_inputMap.values();
  for (  FSDataInputRandomAccess inputRandomAccess : values) {
    Path path=inputRandomAccess.getPath();
    long length=inputRandomAccess.length();
    FileStatus fileStatus=_fileSystem.getFileStatus(path);
    BlockLocation[] blockLocations=_fileSystem.getFileBlockLocations(fileStatus,0L,length);
    for (    BlockLocation blockLocation : blockLocations) {
      if (isLocal(blockLocation)) {
        local++;
      }
      total++;
    }
  }
  return new long[]{total,local};
}",0.8860971524288107
82140,"@Test public void testIndexImporterWithBadIndex() throws IOException {
  _fileSystem.delete(_path,true);
  _fileSystem.mkdirs(_path);
  _indexImporter.run();
  assertFalse(_fileSystem.exists(_path));
  assertFalse(_fileSystem.exists(_badRowIdsPath));
  assertTrue(_fileSystem.exists(_badIndexPath));
  validateIndex();
}","@Test public void testIndexImporterWithBadIndex() throws IOException {
  _commitWriter.close();
  _fileSystem.delete(_path,true);
  _fileSystem.mkdirs(_path);
  _indexImporter.run();
  assertFalse(_fileSystem.exists(_path));
  assertFalse(_fileSystem.exists(_badRowIdsPath));
  assertTrue(_fileSystem.exists(_badIndexPath));
  validateIndex();
}",0.962406015037594
82141,"@After public void tearDown() throws IOException {
  _timer.cancel();
  _timer.purge();
  IOUtils.closeQuietly(_commitWriter);
  IOUtils.closeQuietly(_mainWriter);
  IOUtils.closeQuietly(_indexImporter);
  _base.getFileSystem(_configuration).delete(_base,true);
}","@After public void tearDown() throws IOException {
  _timer.cancel();
  _timer.purge();
  IOUtils.closeQuietly(_mainWriter);
  IOUtils.closeQuietly(_indexImporter);
  _base.getFileSystem(_configuration).delete(_base,true);
}",0.9034907597535934
82142,"protected boolean isCopyFileAvailable(final String name) throws IOException {
  if (_useCache) {
    Boolean b=_copyFileMap.get(name);
    if (b != null) {
      return b;
    }
  }
  Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",name));
  try {
    FileStatus[] listStatus;
    int retryCount=0;
    while (true) {
      try {
        listStatus=_fileSystem.listStatus(_path,new PathFilter(){
          @Override public boolean accept(          Path path){
            String fileName=path.getName();
            return fileName.startsWith(name) && fileName.endsWith(COPY);
          }
        }
);
        break;
      }
 catch (      FileNotFoundException e) {
        LOG.debug(""String_Node_Str"",e);
        try {
          Thread.sleep(100 * (retryCount + 1));
        }
 catch (        InterruptedException ex) {
          throw e;
        }
      }
    }
    boolean exists;
    if (listStatus == null || listStatus.length == 0) {
      exists=false;
    }
 else {
      exists=true;
    }
    if (_useCache) {
      _copyFileMap.put(name,exists);
    }
    return exists;
  }
  finally {
    trace.done();
  }
}","protected boolean isCopyFileAvailable(final String name) throws IOException {
  if (_useCache) {
    Boolean b=_copyFileMap.get(name);
    if (b != null) {
      return b;
    }
  }
  Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",name));
  try {
    FileStatus[] listStatus;
    int retryCount=0;
    while (true) {
      try {
        listStatus=_fileSystem.listStatus(_path,new PathFilter(){
          @Override public boolean accept(          Path path){
            String fileName=path.getName();
            return fileName.startsWith(name) && fileName.endsWith(COPY);
          }
        }
);
        break;
      }
 catch (      FileNotFoundException e) {
        if (retryCount >= 5) {
          throw e;
        }
        LOG.debug(""String_Node_Str"",e);
        try {
          Thread.sleep(100 * (retryCount + 1));
        }
 catch (        InterruptedException ex) {
          throw e;
        }
        retryCount++;
      }
    }
    boolean exists;
    if (listStatus == null || listStatus.length == 0) {
      exists=false;
    }
 else {
      exists=true;
    }
    if (_useCache) {
      _copyFileMap.put(name,exists);
    }
    return exists;
  }
  finally {
    trace.done();
  }
}",0.9654591406908172
82143,"@BeforeClass public static void setupTest() throws Exception {
  GCWatcher.init(0.60);
  BlurOutputFormatTest.setupJavaHome();
  LocalFileSystem localFS=FileSystem.getLocal(new Configuration());
  File testDirectory=new File(TMPDIR,""String_Node_Str"").getAbsoluteFile();
  testDirectory.mkdirs();
  Path directory=new Path(testDirectory.getPath());
  FsPermission dirPermissions=localFS.getFileStatus(directory).getPermission();
  FsAction userAction=dirPermissions.getUserAction();
  FsAction groupAction=dirPermissions.getGroupAction();
  FsAction otherAction=dirPermissions.getOtherAction();
  StringBuilder builder=new StringBuilder();
  builder.append(userAction.ordinal());
  builder.append(groupAction.ordinal());
  builder.append(otherAction.ordinal());
  String dirPermissionNum=builder.toString();
  System.setProperty(""String_Node_Str"",dirPermissionNum);
  testDirectory.delete();
  miniCluster=new MiniCluster();
  miniCluster.startBlurCluster(new File(testDirectory,""String_Node_Str"").getAbsolutePath(),2,3,true,false);
  TEST_ROOT_DIR=new Path(miniCluster.getFileSystemUri().toString() + ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    fileSystem=TEST_ROOT_DIR.getFileSystem(conf);
  }
 catch (  IOException io) {
    throw new RuntimeException(""String_Node_Str"",io);
  }
  FileSystem.setDefaultUri(conf,miniCluster.getFileSystemUri());
  miniCluster.startMrMiniCluster();
  conf=miniCluster.getMRConfiguration();
  BufferStore.initNewBuffer(128,128 * 128);
}","@BeforeClass public static void setupTest() throws Exception {
  GCWatcher.init(0.60);
  JavaHome.checkJavaHome();
  LocalFileSystem localFS=FileSystem.getLocal(new Configuration());
  File testDirectory=new File(TMPDIR,""String_Node_Str"").getAbsoluteFile();
  testDirectory.mkdirs();
  Path directory=new Path(testDirectory.getPath());
  FsPermission dirPermissions=localFS.getFileStatus(directory).getPermission();
  FsAction userAction=dirPermissions.getUserAction();
  FsAction groupAction=dirPermissions.getGroupAction();
  FsAction otherAction=dirPermissions.getOtherAction();
  StringBuilder builder=new StringBuilder();
  builder.append(userAction.ordinal());
  builder.append(groupAction.ordinal());
  builder.append(otherAction.ordinal());
  String dirPermissionNum=builder.toString();
  System.setProperty(""String_Node_Str"",dirPermissionNum);
  testDirectory.delete();
  miniCluster=new MiniCluster();
  miniCluster.startBlurCluster(new File(testDirectory,""String_Node_Str"").getAbsolutePath(),2,3,true,false);
  TEST_ROOT_DIR=new Path(miniCluster.getFileSystemUri().toString() + ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    fileSystem=TEST_ROOT_DIR.getFileSystem(conf);
  }
 catch (  IOException io) {
    throw new RuntimeException(""String_Node_Str"",io);
  }
  FileSystem.setDefaultUri(conf,miniCluster.getFileSystemUri());
  miniCluster.startMrMiniCluster();
  conf=miniCluster.getMRConfiguration();
  BufferStore.initNewBuffer(128,128 * 128);
}",0.9867461895294898
82144,"private boolean addFieldTypeDefinition(String family,String columnName,String subColumnName,String fieldName,boolean fieldLessIndexed,String fieldType,boolean sortable,boolean multiValueField,Map<String,String> props) throws IOException {
  FieldTypeDefinition fieldTypeDefinition=getFieldTypeDefinition(fieldName);
  if (fieldTypeDefinition != null) {
    return false;
  }
  fieldTypeDefinition=newFieldTypeDefinition(fieldName,fieldLessIndexed,fieldType,sortable,multiValueField,props);
synchronized (_fieldNameToDefMap) {
    for (    String alternateFieldName : fieldTypeDefinition.getAlternateFieldNames()) {
      if (_fieldNameToDefMap.containsKey(alternateFieldName)) {
        throw new IllegalArgumentException(""String_Node_Str"" + alternateFieldName + ""String_Node_Str""+ fieldTypeDefinition+ ""String_Node_Str"");
      }
    }
    setFields(fieldTypeDefinition,family,columnName,subColumnName,fieldLessIndexed,fieldType,props);
    if (!tryToStore(fieldTypeDefinition,fieldName)) {
      return false;
    }
    registerFieldTypeDefinition(fieldName,fieldTypeDefinition);
  }
  return true;
}","private boolean addFieldTypeDefinition(String family,String columnName,String subColumnName,String fieldName,boolean fieldLessIndexed,String fieldType,boolean sortable,boolean multiValueField,Map<String,String> props) throws IOException {
  FieldTypeDefinition fieldTypeDefinition=getFieldTypeDefinition(fieldName);
  if (fieldTypeDefinition != null) {
    return false;
  }
  fieldTypeDefinition=newFieldTypeDefinition(fieldName,fieldLessIndexed,fieldType,sortable,multiValueField,props);
synchronized (_fieldNameToDefMap) {
    boolean alternateFieldNamesSharedAcrossInstances=fieldTypeDefinition.isAlternateFieldNamesSharedAcrossInstances();
    for (    String alternateFieldName : fieldTypeDefinition.getAlternateFieldNames()) {
      if (alternateFieldNamesSharedAcrossInstances && _fieldNameToDefMap.containsKey(alternateFieldName)) {
        FieldTypeDefinition ftd=_fieldNameToDefMap.get(alternateFieldName);
        if (!ftd.getName().equals(fieldTypeDefinition.getName())) {
          throw new IllegalArgumentException(""String_Node_Str"" + alternateFieldName + ""String_Node_Str""+ fieldTypeDefinition+ ""String_Node_Str"");
        }
      }
 else       if (_fieldNameToDefMap.containsKey(alternateFieldName)) {
        throw new IllegalArgumentException(""String_Node_Str"" + alternateFieldName + ""String_Node_Str""+ fieldTypeDefinition+ ""String_Node_Str"");
      }
    }
    setFields(fieldTypeDefinition,family,columnName,subColumnName,fieldLessIndexed,fieldType,props);
    if (!tryToStore(fieldTypeDefinition,fieldName)) {
      return false;
    }
    registerFieldTypeDefinition(fieldName,fieldTypeDefinition);
  }
  return true;
}",0.8029143897996357
82145,"private void setupFieldManager(BaseFieldManager fieldManager) throws IOException {
  fieldManager.addColumnDefinition(FAM,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
  fieldManager.addColumnDefinition(FAM,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
}","private void setupFieldManager(BaseFieldManager fieldManager) throws IOException {
  fieldManager.addColumnDefinition(FAM,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
  fieldManager.addColumnDefinition(FAM,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
  fieldManager.addColumnDefinition(FAM2,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
  fieldManager.addColumnDefinition(FAM2,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
}",0.735
82146,"private void setupFieldManager(BaseFieldManager fieldManager) throws IOException {
  fieldManager.addColumnDefinition(FAM,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
  fieldManager.addColumnDefinition(FAM,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
}","private void setupFieldManager(BaseFieldManager fieldManager) throws IOException {
  fieldManager.addColumnDefinition(FAM,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
  fieldManager.addColumnDefinition(FAM,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
  fieldManager.addColumnDefinition(FAM2,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
  fieldManager.addColumnDefinition(FAM2,""String_Node_Str"",null,false,""String_Node_Str"",false,false,null);
}",0.735
82147,"@Override public void bulkMutateFinish(String bulkId,boolean apply,boolean blockUntilComplete) throws BlurException, TException {
  try {
    List<String> tableListByCluster=tableListByCluster(_cluster);
    _indexManager.bulkMutateFinish(new HashSet<String>(tableListByCluster),bulkId,apply,blockUntilComplete);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + bulkId + ""String_Node_Str"",e);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(e.getMessage(),e);
  }
}","@Override public void bulkMutateFinish(String bulkId,boolean apply,boolean blockUntilComplete) throws BlurException, TException {
  try {
    List<String> tableListByCluster=tableListByCluster(_cluster);
    List<String> writableTables=new ArrayList<String>();
    for (    String table : tableListByCluster) {
      if (_clusterStatus.isReadOnly(true,_cluster,table)) {
        writableTables.add(table);
      }
    }
    _indexManager.bulkMutateFinish(new HashSet<String>(writableTables),bulkId,apply,blockUntilComplete);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + bulkId + ""String_Node_Str"",e);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(e.getMessage(),e);
  }
}",0.7672955974842768
82148,"@Override public IndexOutput createOutput(final String name,IOContext context) throws IOException {
  LOG.debug(""String_Node_Str"",name,context,getPath());
  if (fileExists(name)) {
    deleteFile(name);
  }
  _fileStatusMap.put(name,new FStat(System.currentTimeMillis(),0L));
  final FSDataOutputStream outputStream=openForOutput(name);
  return new BufferedIndexOutput(){
    @Override public long length() throws IOException {
      return outputStream.getPos();
    }
    @Override protected void flushBuffer(    byte[] b,    int offset,    int len) throws IOException {
      long start=System.nanoTime();
      outputStream.write(b,offset,len);
      long end=System.nanoTime();
      _metricsGroup.writeAccess.update((end - start) / 1000);
      _metricsGroup.writeThroughput.mark(len);
    }
    @Override public void close() throws IOException {
      super.close();
      _fileStatusMap.put(name,new FStat(System.currentTimeMillis(),outputStream.getPos()));
      if (_asyncClosing) {
        outputStream.sync();
        CLOSING_QUEUE.add(outputStream);
      }
 else {
        outputStream.close();
      }
      openForInput(name);
    }
    @Override public void seek(    long pos) throws IOException {
      throw new IOException(""String_Node_Str"");
    }
  }
;
}","@Override public IndexOutput createOutput(final String name,IOContext context) throws IOException {
  LOG.debug(""String_Node_Str"",name,context,getPath());
  if (fileExists(name)) {
    deleteFile(name);
  }
  if (_useCache) {
    _fileStatusMap.put(name,new FStat(System.currentTimeMillis(),0L));
  }
  final FSDataOutputStream outputStream=openForOutput(name);
  return new BufferedIndexOutput(){
    @Override public long length() throws IOException {
      return outputStream.getPos();
    }
    @Override protected void flushBuffer(    byte[] b,    int offset,    int len) throws IOException {
      long start=System.nanoTime();
      outputStream.write(b,offset,len);
      long end=System.nanoTime();
      _metricsGroup.writeAccess.update((end - start) / 1000);
      _metricsGroup.writeThroughput.mark(len);
    }
    @Override public void close() throws IOException {
      super.close();
      if (_useCache) {
        _fileStatusMap.put(name,new FStat(System.currentTimeMillis(),outputStream.getPos()));
      }
      if (_asyncClosing && _useCache) {
        outputStream.sync();
        CLOSING_QUEUE.add(outputStream);
      }
 else {
        outputStream.close();
      }
      openForInput(name);
    }
    @Override public void seek(    long pos) throws IOException {
      throw new IOException(""String_Node_Str"");
    }
  }
;
}",0.9729523809523808
82149,"public FastHdfsKeyValueDirectory(Timer hdfsKeyValueTimer,Configuration configuration,Path path) throws IOException {
  _path=path;
  _store=new HdfsKeyValueStore(hdfsKeyValueTimer,configuration,path);
  MemoryLeakDetector.record(_store,""String_Node_Str"",path.toString());
  BytesRef value=new BytesRef();
  if (_store.get(FILES,value)) {
    String filesString=value.utf8ToString();
    String[] files=filesString.split(""String_Node_Str"" + SEP);
    for (    String file : files) {
      if (file.isEmpty()) {
        throw new IOException(""String_Node_Str"" + filesString + ""String_Node_Str"");
      }
      BytesRef key=new BytesRef(file + LENGTH);
      if (_store.get(key,value)) {
        _files.put(file,Long.parseLong(value.utf8ToString()));
      }
 else {
        LOG.warn(MISSING_METADATA_MESSAGE,file);
      }
    }
  }
  setLockFactory(NoLockFactory.getNoLockFactory());
  writeFilesNames();
  gc();
}","public FastHdfsKeyValueDirectory(Timer hdfsKeyValueTimer,Configuration configuration,Path path,long maxAmountAllowedPerFile,long maxOpenForWriting) throws IOException {
  _path=path;
  _store=new HdfsKeyValueStore(hdfsKeyValueTimer,configuration,path,maxAmountAllowedPerFile,maxOpenForWriting);
  MemoryLeakDetector.record(_store,""String_Node_Str"",path.toString());
  BytesRef value=new BytesRef();
  if (_store.get(FILES,value)) {
    String filesString=value.utf8ToString();
    if (!filesString.isEmpty()) {
      String[] files=filesString.split(""String_Node_Str"" + SEP);
      for (      String file : files) {
        if (file.isEmpty()) {
          throw new IOException(""String_Node_Str"" + filesString + ""String_Node_Str"");
        }
        BytesRef key=new BytesRef(file + LENGTH);
        if (_store.get(key,value)) {
          _files.put(file,Long.parseLong(value.utf8ToString()));
        }
 else {
          LOG.warn(MISSING_METADATA_MESSAGE,file);
        }
      }
    }
  }
  setLockFactory(NoLockFactory.getNoLockFactory());
  writeFileNamesAndSync();
  gc();
}",0.9106425702811244
82150,"public HdfsKeyValueStore(Timer hdfsKeyValueTimer,Configuration configuration,Path path,long maxAmountAllowedPerFile) throws IOException {
  _maxAmountAllowedPerFile=maxAmountAllowedPerFile;
  _path=path;
  _fileSystem=_path.getFileSystem(configuration);
  _fileSystem.mkdirs(_path);
  _readWriteLock=new ReentrantReadWriteLock();
  _writeLock=_readWriteLock.writeLock();
  _readLock=_readWriteLock.readLock();
  _fileStatus.set(getSortedSet(_path));
  if (!_fileStatus.get().isEmpty()) {
    _currentFileCounter.set(Long.parseLong(_fileStatus.get().last().getPath().getName()));
  }
  removeAnyTruncatedFiles();
  loadIndexes();
  cleanupOldFiles();
  _idleLogTimerTask=getIdleLogTimer();
  _oldFileCleanerTimerTask=getOldFileCleanerTimer();
  _hdfsKeyValueTimer=hdfsKeyValueTimer;
  _hdfsKeyValueTimer.schedule(_idleLogTimerTask,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
  _hdfsKeyValueTimer.schedule(_oldFileCleanerTimerTask,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
}","public HdfsKeyValueStore(Timer hdfsKeyValueTimer,Configuration configuration,Path path,long maxAmountAllowedPerFile,long maxOpenForWriting) throws IOException {
  _maxOpenForWriting=maxOpenForWriting;
  _maxAmountAllowedPerFile=maxAmountAllowedPerFile;
  _path=path;
  _fileSystem=_path.getFileSystem(configuration);
  _fileSystem.mkdirs(_path);
  _readWriteLock=new ReentrantReadWriteLock();
  _writeLock=_readWriteLock.writeLock();
  _readLock=_readWriteLock.readLock();
  _fileStatus.set(getSortedSet(_path));
  if (!_fileStatus.get().isEmpty()) {
    _currentFileCounter.set(Long.parseLong(_fileStatus.get().last().getPath().getName()));
  }
  removeAnyTruncatedFiles();
  loadIndexes();
  cleanupOldFiles();
  _idleLogTimerTask=getIdleLogTimer();
  _oldFileCleanerTimerTask=getOldFileCleanerTimer();
  _hdfsKeyValueTimer=hdfsKeyValueTimer;
  _hdfsKeyValueTimer.schedule(_idleLogTimerTask,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
  _hdfsKeyValueTimer.schedule(_oldFileCleanerTimerTask,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
}",0.9681657402728652
82151,"private void closeLogFileIfIdle() throws IOException {
  _writeLock.lock();
  try {
    if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
      LOG.info(""String_Node_Str"",_path);
      try {
        _output.close();
      }
  finally {
        _output=null;
      }
    }
  }
  finally {
    _writeLock.unlock();
  }
}","private void closeLogFileIfIdle() throws IOException {
  _writeLock.lock();
  try {
    if (_output != null && _lastWrite.get() + _maxOpenForWriting < System.currentTimeMillis()) {
      LOG.info(""String_Node_Str"",_path);
      try {
        _output.close();
      }
  finally {
        _output=null;
      }
    }
  }
  finally {
    _writeLock.unlock();
  }
}",0.9558011049723756
82152,"public BlurQueryParser(Version matchVersion,String f,Map<Query,String> fieldNames,FieldManager fieldManager){
  super(matchVersion,f,fieldManager.getAnalyzerForQuery());
  _fieldNames=fieldNames == null ? new HashMap<Query,String>() : fieldNames;
  _fieldManager=fieldManager;
  setAllowLeadingWildcard(true);
}","public BlurQueryParser(Version matchVersion,String f,Map<Query,String> fieldNames,FieldManager fieldManager){
  super(matchVersion,f,fieldManager.getAnalyzerForQuery());
  _fieldNames=fieldNames == null ? new HashMap<Query,String>() : fieldNames;
  _fieldManager=fieldManager;
  setAllowLeadingWildcard(true);
  setAutoGeneratePhraseQueries(true);
}",0.9424242424242424
82153,"public <K extends TBase<?,?>>ThriftCacheKey<K> getKey(String table,K tkey,Class<K> clazz){
  User user=UserContext.getUser();
  return new ThriftCacheKey<K>(user,table,tkey,clazz);
}","public <K extends TBase<?,?>>ThriftCacheKey<K> getKey(String table,int[] shards,K tkey,Class<K> clazz) throws BlurException {
  User user=UserContext.getUser();
  return new ThriftCacheKey<K>(user,table,shards,tkey,clazz);
}",0.896551724137931
82154,"@Override public int weightOf(ThriftCacheValue<?> value){
  return value.size();
}","@Override public int weightOf(ThriftCacheKey<?> key,ThriftCacheValue<?> value){
  return key.size() + value.size();
}",0.8241206030150754
82155,"public ThriftCache(long totalNumberOfBytes){
  _hits=Metrics.newMeter(new MetricName(ORG_APACHE_BLUR,THRIFT_CACHE,HIT),HIT,TimeUnit.SECONDS);
  _misses=Metrics.newMeter(new MetricName(ORG_APACHE_BLUR,THRIFT_CACHE,MISS),MISS,TimeUnit.SECONDS);
  _evictions=Metrics.newMeter(new MetricName(ORG_APACHE_BLUR,THRIFT_CACHE,EVICTION),EVICTION,TimeUnit.SECONDS);
  _cacheMap=new ConcurrentLinkedHashMap.Builder<ThriftCacheKey<?>,ThriftCacheValue<?>>().weigher(new Weigher<ThriftCacheValue<?>>(){
    @Override public int weightOf(    ThriftCacheValue<?> value){
      return value.size();
    }
  }
).listener(new EvictionListener<ThriftCacheKey<?>,ThriftCacheValue<?>>(){
    @Override public void onEviction(    ThriftCacheKey<?> key,    ThriftCacheValue<?> value){
      _evictions.mark();
      _evictionsAtomicLong.incrementAndGet();
    }
  }
).maximumWeightedCapacity(totalNumberOfBytes).build();
  _hitsAtomicLong=new AtomicLong();
  _missesAtomicLong=new AtomicLong();
  _evictionsAtomicLong=new AtomicLong();
}","public ThriftCache(long totalNumberOfBytes){
  _hits=Metrics.newMeter(new MetricName(ORG_APACHE_BLUR,THRIFT_CACHE,HIT),HIT,TimeUnit.SECONDS);
  _misses=Metrics.newMeter(new MetricName(ORG_APACHE_BLUR,THRIFT_CACHE,MISS),MISS,TimeUnit.SECONDS);
  _evictions=Metrics.newMeter(new MetricName(ORG_APACHE_BLUR,THRIFT_CACHE,EVICTION),EVICTION,TimeUnit.SECONDS);
  _cacheMap=new ConcurrentLinkedHashMap.Builder<ThriftCacheKey<?>,ThriftCacheValue<?>>().weigher(new EntryWeigher<ThriftCacheKey<?>,ThriftCacheValue<?>>(){
    @Override public int weightOf(    ThriftCacheKey<?> key,    ThriftCacheValue<?> value){
      return key.size() + value.size();
    }
  }
).listener(new EvictionListener<ThriftCacheKey<?>,ThriftCacheValue<?>>(){
    @Override public void onEviction(    ThriftCacheKey<?> key,    ThriftCacheValue<?> value){
      _evictions.mark();
      _evictionsAtomicLong.incrementAndGet();
    }
  }
).maximumWeightedCapacity(totalNumberOfBytes).build();
  _hitsAtomicLong=new AtomicLong();
  _missesAtomicLong=new AtomicLong();
  _evictionsAtomicLong=new AtomicLong();
}",0.9702780441035476
82156,"public <K extends TBase<?,?>,V extends TBase<?,?>>V put(ThriftCacheKey<K> key,V t) throws BlurException {
  _cacheMap.put(key,new ThriftCacheValue<V>(t));
  return t;
}","public <K extends TBase<?,?>,V extends TBase<?,?>>V put(ThriftCacheKey<K> key,V t) throws BlurException {
synchronized (_lastModTimestamps) {
    Long lastModTimestamp=_lastModTimestamps.get(key.getTable());
    if (lastModTimestamp != null && key.getTimestamp() < lastModTimestamp) {
      return t;
    }
  }
  LOG.debug(""String_Node_Str"",t,key);
  _cacheMap.put(key,new ThriftCacheValue<V>(t));
  return t;
}",0.5803108808290155
82157,"public void clearTable(String table){
  LOG.info(""String_Node_Str"",table);
  Set<Entry<ThriftCacheKey<?>,ThriftCacheValue<?>>> entrySet=_cacheMap.entrySet();
  Iterator<Entry<ThriftCacheKey<?>,ThriftCacheValue<?>>> iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Entry<ThriftCacheKey<?>,ThriftCacheValue<?>> entry=iterator.next();
    if (entry.getKey().getTable().equals(table)) {
      iterator.remove();
    }
  }
}","public void clearTable(String table){
synchronized (_lastModTimestamps) {
    _lastModTimestamps.put(table,System.nanoTime());
  }
  LOG.info(""String_Node_Str"",table);
  Set<Entry<ThriftCacheKey<?>,ThriftCacheValue<?>>> entrySet=_cacheMap.entrySet();
  Iterator<Entry<ThriftCacheKey<?>,ThriftCacheValue<?>>> iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Entry<ThriftCacheKey<?>,ThriftCacheValue<?>> entry=iterator.next();
    if (entry.getKey().getTable().equals(table)) {
      iterator.remove();
    }
  }
}",0.9034267912772586
82158,"public ThriftCacheKey(User user,String table,T t,Class<T> clazz){
  _clazz=clazz.getName();
  if (user != null) {
    _username=user.getUsername();
    Map<String,String> attributes=user.getAttributes();
    if (attributes == null) {
      _attributes=attributes;
    }
 else {
      _attributes=new TreeMap<String,String>(user.getAttributes());
    }
  }
 else {
    _username=null;
    _attributes=null;
  }
  _table=table;
  _t=t;
}","public ThriftCacheKey(User user,String table,int[] shards,T t,Class<T> clazz) throws BlurException {
  _timestamp=System.nanoTime();
  _clazz=new ClassObj<T>(clazz);
  if (user != null) {
    _username=user.getUsername();
    Map<String,String> attributes=user.getAttributes();
    if (attributes == null) {
      _attributes=attributes;
    }
 else {
      _attributes=new TreeMap<String,String>(user.getAttributes());
    }
  }
 else {
    _username=null;
    _attributes=null;
  }
  _table=table;
  _shards=shards;
  _key=new ThriftCacheValue<T>(t);
}",0.8554095045500506
82159,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((_attributes == null) ? 0 : _attributes.hashCode());
  result=prime * result + ((_clazz == null) ? 0 : _clazz.hashCode());
  result=prime * result + ((_t == null) ? 0 : _t.hashCode());
  result=prime * result + ((_table == null) ? 0 : _table.hashCode());
  result=prime * result + ((_username == null) ? 0 : _username.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((_attributes == null) ? 0 : _attributes.hashCode());
  result=prime * result + ((_clazz == null) ? 0 : _clazz.hashCode());
  result=prime * result + ((_key == null) ? 0 : _key.hashCode());
  result=prime * result + Arrays.hashCode(_shards);
  result=prime * result + ((_table == null) ? 0 : _table.hashCode());
  result=prime * result + ((_username == null) ? 0 : _username.hashCode());
  return result;
}",0.936842105263158
82160,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ThriftCacheKey<?> other=(ThriftCacheKey<?>)obj;
  if (_attributes == null) {
    if (other._attributes != null)     return false;
  }
 else   if (!_attributes.equals(other._attributes))   return false;
  if (_clazz == null) {
    if (other._clazz != null)     return false;
  }
 else   if (!_clazz.equals(other._clazz))   return false;
  if (_t == null) {
    if (other._t != null)     return false;
  }
 else   if (!_t.equals(other._t))   return false;
  if (_table == null) {
    if (other._table != null)     return false;
  }
 else   if (!_table.equals(other._table))   return false;
  if (_username == null) {
    if (other._username != null)     return false;
  }
 else   if (!_username.equals(other._username))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ThriftCacheKey<?> other=(ThriftCacheKey<?>)obj;
  if (_attributes == null) {
    if (other._attributes != null)     return false;
  }
 else   if (!_attributes.equals(other._attributes))   return false;
  if (_clazz == null) {
    if (other._clazz != null)     return false;
  }
 else   if (!_clazz.equals(other._clazz))   return false;
  if (_key == null) {
    if (other._key != null)     return false;
  }
 else   if (!_key.equals(other._key))   return false;
  if (!Arrays.equals(_shards,other._shards))   return false;
  if (_table == null) {
    if (other._table != null)     return false;
  }
 else   if (!_table.equals(other._table))   return false;
  if (_username == null) {
    if (other._username != null)     return false;
  }
 else   if (!_username.equals(other._username))   return false;
  return true;
}",0.9595800524934384
82161,"@Override public String toString(){
  return ""String_Node_Str"" + _username + ""String_Node_Str""+ _attributes+ ""String_Node_Str""+ _table+ ""String_Node_Str""+ _t+ ""String_Node_Str""+ _clazz+ ""String_Node_Str"";
}","@Override public String toString(){
  try {
    return ""String_Node_Str"" + _username + ""String_Node_Str""+ _attributes+ ""String_Node_Str""+ _table+ ""String_Node_Str""+ Arrays.toString(_shards)+ ""String_Node_Str""+ _clazz+ ""String_Node_Str""+ _key.getValue(_clazz.getClazz())+ ""String_Node_Str""+ _timestamp+ ""String_Node_Str"";
  }
 catch (  BlurException e) {
    throw new RuntimeException(e);
  }
}",0.59
82162,"@Override public FetchResult fetchRow(String table,Selector selector) throws BlurException, TException {
  Selector copy=new Selector(selector);
  ThriftCacheKey<Selector> key=_thriftCache.getKey(table,copy,Selector.class);
  FetchResult results=_thriftCache.get(key,FetchResult.class);
  if (results != null) {
    return results;
  }
  return _thriftCache.put(key,super.fetchRow(table,selector));
}","@Override public FetchResult fetchRow(String table,Selector selector) throws BlurException, TException {
  Selector copy=new Selector(selector);
  ThriftCacheKey<Selector> key=_thriftCache.getKey(table,getShards(table),copy,Selector.class);
  FetchResult results=_thriftCache.get(key,FetchResult.class);
  if (results != null) {
    return results;
  }
  return _thriftCache.put(key,super.fetchRow(table,selector));
}",0.9791921664626684
82163,"public ThriftCacheServer(BlurConfiguration configuration,Iface iface,ThriftCache thriftCache){
  super(configuration,iface,true);
  _thriftCache=thriftCache;
}","public ThriftCacheServer(BlurConfiguration configuration,Iface iface,IndexServer indexServer,ThriftCache thriftCache){
  super(configuration,iface,true);
  _thriftCache=thriftCache;
  _indexServer=indexServer;
}",0.8594594594594595
82164,"@Override public BlurResults query(String table,BlurQuery blurQuery) throws BlurException, TException {
  boolean useCacheIfPresent=blurQuery.isUseCacheIfPresent();
  boolean cacheResult=blurQuery.isCacheResult();
  BlurQuery copy=new BlurQuery(blurQuery);
  copy.useCacheIfPresent=false;
  copy.maxQueryTime=0;
  copy.uuid=null;
  copy.userContext=null;
  copy.cacheResult=false;
  copy.startTime=0;
  ThriftCacheKey<BlurQuery> key=_thriftCache.getKey(table,copy,BlurQuery.class);
  BlurResults results=_thriftCache.get(key,BlurResults.class);
  if (results != null && useCacheIfPresent) {
    return results;
  }
  BlurResults blurResults=super.query(table,blurQuery);
  if (cacheResult) {
    return _thriftCache.put(key,blurResults);
  }
  return blurResults;
}","@Override public BlurResults query(String table,BlurQuery blurQuery) throws BlurException, TException {
  boolean useCacheIfPresent=blurQuery.isUseCacheIfPresent();
  boolean cacheResult=blurQuery.isCacheResult();
  BlurQuery copy=new BlurQuery(blurQuery);
  copy.useCacheIfPresent=false;
  copy.maxQueryTime=0;
  copy.uuid=null;
  copy.userContext=null;
  copy.cacheResult=false;
  copy.startTime=0;
  ThriftCacheKey<BlurQuery> key=_thriftCache.getKey(table,getShards(table),copy,BlurQuery.class);
  if (useCacheIfPresent) {
    BlurResults results=_thriftCache.get(key,BlurResults.class);
    if (results != null) {
      return results;
    }
  }
  BlurResults blurResults=super.query(table,blurQuery);
  if (cacheResult) {
    return _thriftCache.put(key,blurResults);
  }
  return blurResults;
}",0.9022364217252395
82165,"@Override public TableStats tableStats(String table) throws BlurException, TException {
  ThriftCacheKey<TableStats> key=_thriftCache.getKey(table,null,TableStats.class);
  TableStats results=_thriftCache.get(key,TableStats.class);
  if (results != null) {
    return results;
  }
  return _thriftCache.put(key,super.tableStats(table));
}","@Override public TableStats tableStats(String table) throws BlurException, TException {
  ThriftCacheKey<TableStats> key=_thriftCache.getKey(table,getShards(table),null,TableStats.class);
  TableStats results=_thriftCache.get(key,TableStats.class);
  if (results != null) {
    return results;
  }
  return _thriftCache.put(key,super.tableStats(table));
}",0.9754689754689756
82166,"@Override public List<FetchResult> fetchRowBatch(String table,List<Selector> selectors) throws BlurException, TException {
  Map<Integer,FetchResult> resultMap=new TreeMap<Integer,FetchResult>();
  Map<Integer,Integer> requestMapping=new HashMap<Integer,Integer>();
  List<Selector> selectorRequest=new ArrayList<Selector>();
  for (int i=0; i < selectors.size(); i++) {
    Selector selector=selectors.get(i);
    Selector copy=new Selector(selector);
    ThriftCacheKey<Selector> key=_thriftCache.getKey(table,copy,Selector.class);
    FetchResult fetchResult=_thriftCache.get(key,FetchResult.class);
    if (fetchResult != null) {
      resultMap.put(i,fetchResult);
    }
 else {
      int index=selectorRequest.size();
      requestMapping.put(index,i);
      selectorRequest.add(selector);
    }
  }
  if (selectorRequest.size() != 0) {
    List<FetchResult> missingResults=super.fetchRowBatch(table,selectorRequest);
    for (int i=0; i < missingResults.size(); i++) {
      Selector selector=selectorRequest.get(i);
      FetchResult fetchResult=missingResults.get(i);
      ThriftCacheKey<Selector> key=_thriftCache.getKey(table,new Selector(selector),Selector.class);
      _thriftCache.put(key,fetchResult);
      int originalIndex=requestMapping.get(i);
      resultMap.put(originalIndex,fetchResult);
    }
  }
  return toList(resultMap);
}","@Override public List<FetchResult> fetchRowBatch(String table,List<Selector> selectors) throws BlurException, TException {
  Map<Integer,FetchResult> resultMap=new TreeMap<Integer,FetchResult>();
  Map<Integer,Integer> requestMapping=new HashMap<Integer,Integer>();
  List<Selector> selectorRequest=new ArrayList<Selector>();
  for (int i=0; i < selectors.size(); i++) {
    Selector selector=selectors.get(i);
    Selector copy=new Selector(selector);
    ThriftCacheKey<Selector> key=_thriftCache.getKey(table,getShards(table),copy,Selector.class);
    FetchResult fetchResult=_thriftCache.get(key,FetchResult.class);
    if (fetchResult != null) {
      resultMap.put(i,fetchResult);
    }
 else {
      int index=selectorRequest.size();
      requestMapping.put(index,i);
      selectorRequest.add(selector);
    }
  }
  if (selectorRequest.size() != 0) {
    List<FetchResult> missingResults=super.fetchRowBatch(table,selectorRequest);
    for (int i=0; i < missingResults.size(); i++) {
      Selector selector=selectorRequest.get(i);
      FetchResult fetchResult=missingResults.get(i);
      ThriftCacheKey<Selector> key=_thriftCache.getKey(table,getShards(table),new Selector(selector),Selector.class);
      _thriftCache.put(key,fetchResult);
      int originalIndex=requestMapping.get(i);
      resultMap.put(originalIndex,fetchResult);
    }
  }
  return toList(resultMap);
}",0.9875912408759124
82167,"private void commit() throws IOException {
  Tracer trace1=Trace.trace(""String_Node_Str"");
  waitUntilNotNull(_writer);
  BlurIndexWriter writer=_writer.get();
  writer.prepareCommit();
  trace1.done();
  Tracer trace2=Trace.trace(""String_Node_Str"");
  writer.commit();
  trace2.done();
  Tracer trace3=Trace.trace(""String_Node_Str"");
  DirectoryReader currentReader=_indexReader.get();
  DirectoryReader newReader=DirectoryReader.openIfChanged(currentReader);
  if (newReader == null) {
    LOG.debug(""String_Node_Str"",_tableContext.getTable(),_shardContext.getShard());
  }
 else {
    DirectoryReader reader=wrap(newReader);
    _indexRefreshWriteLock.lock();
    try {
      _indexReader.set(reader);
    }
  finally {
      _indexRefreshWriteLock.unlock();
    }
    _indexCloser.close(currentReader);
  }
  trace3.done();
}","private void commit() throws IOException {
  Tracer trace1=Trace.trace(""String_Node_Str"");
  waitUntilNotNull(_writer);
  BlurIndexWriter writer=_writer.get();
  writer.prepareCommit();
  trace1.done();
  Tracer trace2=Trace.trace(""String_Node_Str"");
  writer.commit();
  trace2.done();
  Tracer trace3=Trace.trace(""String_Node_Str"");
  DirectoryReader currentReader=_indexReader.get();
  DirectoryReader newReader=DirectoryReader.openIfChanged(currentReader);
  if (newReader == null) {
    LOG.debug(""String_Node_Str"",_tableContext.getTable(),_shardContext.getShard());
  }
 else {
    DirectoryReader reader=wrap(newReader);
    checkForMemoryLeaks(reader,""String_Node_Str"");
    _indexRefreshWriteLock.lock();
    try {
      _indexReader.set(reader);
    }
  finally {
      _indexRefreshWriteLock.unlock();
    }
    _indexCloser.close(currentReader);
  }
  trace3.done();
}",0.9701579871269748
82168,"public BlurIndexSimpleWriter(ShardContext shardContext,Directory directory,SharedMergeScheduler mergeScheduler,final ExecutorService searchExecutor,BlurIndexCloser indexCloser,Timer indexImporterTimer,Timer bulkIndexingTimer,ThriftCache thriftCache) throws IOException {
  super(shardContext,directory,mergeScheduler,searchExecutor,indexCloser,indexImporterTimer,bulkIndexingTimer,thriftCache);
  _thriftCache=thriftCache;
  _commaSplitter=Splitter.on(',');
  _bulkWriters=new ConcurrentHashMap<String,BlurIndexSimpleWriter.BulkEntry>();
  _indexImporterTimer=indexImporterTimer;
  _bulkIndexingTimer=bulkIndexingTimer;
  _searchThreadPool=searchExecutor;
  _shardContext=shardContext;
  _tableContext=_shardContext.getTableContext();
  _context=_tableContext.getTable() + ""String_Node_Str"" + shardContext.getShard();
  _fieldManager=_tableContext.getFieldManager();
  _discoverableFields=_tableContext.getDiscoverableFields();
  _accessControlFactory=_tableContext.getAccessControlFactory();
  TableDescriptor descriptor=_tableContext.getDescriptor();
  Map<String,String> tableProperties=descriptor.getTableProperties();
  if (tableProperties != null) {
    String value=tableProperties.get(BlurConstants.BLUR_RECORD_SECURITY);
    if (value != null && value.equals(TRUE)) {
      LOG.info(""String_Node_Str"",_tableContext.getTable(),_shardContext.getShard());
      _security=true;
    }
 else {
      _security=false;
    }
  }
 else {
    _security=false;
  }
  Analyzer analyzer=_fieldManager.getAnalyzerForIndex();
  _conf=new IndexWriterConfig(LUCENE_VERSION,analyzer);
  _conf.setWriteLockTimeout(TimeUnit.MINUTES.toMillis(5));
  _conf.setCodec(new Blur024Codec(_tableContext.getBlurConfiguration()));
  _conf.setSimilarity(_tableContext.getSimilarity());
  _conf.setInfoStream(new LoggingInfoStream(_tableContext.getTable(),_shardContext.getShard()));
  TieredMergePolicy mergePolicy=(TieredMergePolicy)_conf.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  _conf.setMergeScheduler(mergeScheduler.getMergeScheduler());
  _snapshotIndexDeletionPolicy=new SnapshotIndexDeletionPolicy(_tableContext.getConfiguration(),new Path(shardContext.getHdfsDirPath(),""String_Node_Str""));
  _policy=new IndexDeletionPolicyReader(_snapshotIndexDeletionPolicy);
  _conf.setIndexDeletionPolicy(_policy);
  BlurConfiguration blurConfiguration=_tableContext.getBlurConfiguration();
  _queue=new ArrayBlockingQueue<RowMutation>(blurConfiguration.getInt(BLUR_SHARD_QUEUE_MAX_INMEMORY_LENGTH,100));
  _mutationQueueProcessor=new MutationQueueProcessor(_queue,this,_shardContext,_writesWaiting);
  if (!DirectoryReader.indexExists(directory)) {
    new BlurIndexWriter(directory,_conf).close();
  }
  _directory=directory;
  _indexCloser=indexCloser;
  _indexReader.set(wrap(DirectoryReader.open(_directory)));
  openWriter();
  _watchForIdleBulkWriters=new TimerTask(){
    @Override public void run(){
      for (      BulkEntry bulkEntry : _bulkWriters.values()) {
        bulkEntry._lock.lock();
        try {
          if (!bulkEntry.isClosed() && bulkEntry.isIdle()) {
            LOG.info(""String_Node_Str"",bulkEntry);
            try {
              bulkEntry.close();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"",e);
            }
          }
        }
  finally {
          bulkEntry._lock.unlock();
        }
      }
    }
  }
;
  long delay=TimeUnit.SECONDS.toMillis(30);
  _bulkIndexingTimer.schedule(_watchForIdleBulkWriters,delay,delay);
}","public BlurIndexSimpleWriter(ShardContext shardContext,Directory directory,SharedMergeScheduler mergeScheduler,final ExecutorService searchExecutor,BlurIndexCloser indexCloser,Timer indexImporterTimer,Timer bulkIndexingTimer,ThriftCache thriftCache) throws IOException {
  super(shardContext,directory,mergeScheduler,searchExecutor,indexCloser,indexImporterTimer,bulkIndexingTimer,thriftCache);
  _thriftCache=thriftCache;
  _commaSplitter=Splitter.on(',');
  _bulkWriters=new ConcurrentHashMap<String,BlurIndexSimpleWriter.BulkEntry>();
  _indexImporterTimer=indexImporterTimer;
  _bulkIndexingTimer=bulkIndexingTimer;
  _searchThreadPool=searchExecutor;
  _shardContext=shardContext;
  _tableContext=_shardContext.getTableContext();
  _context=_tableContext.getTable() + ""String_Node_Str"" + shardContext.getShard();
  _fieldManager=_tableContext.getFieldManager();
  _discoverableFields=_tableContext.getDiscoverableFields();
  _accessControlFactory=_tableContext.getAccessControlFactory();
  TableDescriptor descriptor=_tableContext.getDescriptor();
  Map<String,String> tableProperties=descriptor.getTableProperties();
  if (tableProperties != null) {
    String value=tableProperties.get(BlurConstants.BLUR_RECORD_SECURITY);
    if (value != null && value.equals(TRUE)) {
      LOG.info(""String_Node_Str"",_tableContext.getTable(),_shardContext.getShard());
      _security=true;
    }
 else {
      _security=false;
    }
  }
 else {
    _security=false;
  }
  Analyzer analyzer=_fieldManager.getAnalyzerForIndex();
  _conf=new IndexWriterConfig(LUCENE_VERSION,analyzer);
  _conf.setWriteLockTimeout(TimeUnit.MINUTES.toMillis(5));
  _conf.setCodec(new Blur024Codec(_tableContext.getBlurConfiguration()));
  _conf.setSimilarity(_tableContext.getSimilarity());
  _conf.setInfoStream(new LoggingInfoStream(_tableContext.getTable(),_shardContext.getShard()));
  TieredMergePolicy mergePolicy=(TieredMergePolicy)_conf.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  _conf.setMergeScheduler(mergeScheduler.getMergeScheduler());
  _snapshotIndexDeletionPolicy=new SnapshotIndexDeletionPolicy(_tableContext.getConfiguration(),new Path(shardContext.getHdfsDirPath(),""String_Node_Str""));
  _policy=new IndexDeletionPolicyReader(_snapshotIndexDeletionPolicy);
  _conf.setIndexDeletionPolicy(_policy);
  BlurConfiguration blurConfiguration=_tableContext.getBlurConfiguration();
  _queue=new ArrayBlockingQueue<RowMutation>(blurConfiguration.getInt(BLUR_SHARD_QUEUE_MAX_INMEMORY_LENGTH,100));
  _mutationQueueProcessor=new MutationQueueProcessor(_queue,this,_shardContext,_writesWaiting);
  if (!DirectoryReader.indexExists(directory)) {
    new BlurIndexWriter(directory,_conf).close();
  }
  _directory=directory;
  _indexCloser=indexCloser;
  DirectoryReader realDirectoryReader=DirectoryReader.open(_directory);
  DirectoryReader wrappped=wrap(realDirectoryReader);
  String message=""String_Node_Str"";
  DirectoryReader directoryReader=checkForMemoryLeaks(wrappped,message);
  _indexReader.set(directoryReader);
  openWriter();
  _watchForIdleBulkWriters=new TimerTask(){
    @Override public void run(){
      for (      BulkEntry bulkEntry : _bulkWriters.values()) {
        bulkEntry._lock.lock();
        try {
          if (!bulkEntry.isClosed() && bulkEntry.isIdle()) {
            LOG.info(""String_Node_Str"",bulkEntry);
            try {
              bulkEntry.close();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"",e);
            }
          }
        }
  finally {
          bulkEntry._lock.unlock();
        }
      }
    }
  }
;
  long delay=TimeUnit.SECONDS.toMillis(30);
  _bulkIndexingTimer.schedule(_watchForIdleBulkWriters,delay,delay);
}",0.9625623960066556
82169,"private Closeable makeCloseable(final TimerTask timerTask){
  return new Closeable(){
    @Override public void close() throws IOException {
      timerTask.cancel();
    }
  }
;
}","private Closeable makeCloseable(final TimerTask timerTask){
  return new Closeable(){
    @Override public void close() throws IOException {
      timerTask.cancel();
      _bulkIndexingTimer.purge();
    }
  }
;
}",0.9137055837563453
82170,"public IndexImporter(Timer indexImporterTimer,BlurIndex blurIndex,ShardContext shardContext,TimeUnit refreshUnit,long refreshAmount){
  _blurIndex=blurIndex;
  _shardContext=shardContext;
  long period=refreshUnit.toMillis(refreshAmount);
  indexImporterTimer.schedule(this,period,period);
  _table=_shardContext.getTableContext().getTable();
  _shard=_shardContext.getShard();
  _cleanupDelay=TimeUnit.MINUTES.toMillis(10);
}","public IndexImporter(Timer indexImporterTimer,BlurIndex blurIndex,ShardContext shardContext,TimeUnit refreshUnit,long refreshAmount){
  _blurIndex=blurIndex;
  _shardContext=shardContext;
  long period=refreshUnit.toMillis(refreshAmount);
  indexImporterTimer.schedule(this,period,period);
  _inindexImporterTimer=indexImporterTimer;
  _table=_shardContext.getTableContext().getTable();
  _shard=_shardContext.getShard();
  _cleanupDelay=TimeUnit.MINUTES.toMillis(10);
}",0.9508928571428572
82171,"@Override public void close() throws IOException {
  cancel();
}","@Override public void close() throws IOException {
  cancel();
  _inindexImporterTimer.purge();
}",0.7950310559006211
82172,"/** 
 * The way this method is called via warm up methods the likelihood of creating multiple bitsets during a race condition is very low, that's why this method is not synced.
 */
public static OpenBitSet getPrimeDocBitSet(Term primeDocTerm,AtomicReader providedReader) throws IOException {
  AtomicReader reader=AtomicReaderUtil.getSegmentReader(providedReader);
  final Object key=reader.getCoreCacheKey();
  final Map<Object,OpenBitSet> primeDocMap=getPrimeDocMap(primeDocTerm);
  OpenBitSet bitSet=primeDocMap.get(key);
  if (bitSet == null) {
synchronized (reader) {
      reader.addReaderClosedListener(new ReaderClosedListener(){
        @Override public void onClose(        IndexReader reader){
          LOG.debug(""String_Node_Str"" + primeDocMap.size() + ""String_Node_Str""+ reader+ ""String_Node_Str"");
          OpenBitSet openBitSet=primeDocMap.remove(key);
          if (openBitSet == null) {
            LOG.warn(""String_Node_Str"",key);
          }
        }
      }
);
      LOG.debug(""String_Node_Str"" + reader + ""String_Node_Str""+ primeDocMap.size()+ ""String_Node_Str"");
      final OpenBitSet bs=new OpenBitSet(reader.maxDoc());
      Fields fields=reader.fields();
      if (fields == null) {
        throw new IOException(""String_Node_Str"");
      }
      Terms terms=fields.terms(primeDocTerm.field());
      if (terms == null) {
        throw new IOException(""String_Node_Str"" + primeDocTerm.field() + ""String_Node_Str"");
      }
      TermsEnum termsEnum=terms.iterator(null);
      if (!termsEnum.seekExact(primeDocTerm.bytes(),true)) {
        throw new IOException(""String_Node_Str"" + primeDocTerm + ""String_Node_Str"");
      }
      DocsEnum docsEnum=termsEnum.docs(null,null);
      int docFreq=reader.docFreq(primeDocTerm);
      int doc;
      int count=0;
      while ((doc=docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        bs.fastSet(doc);
        count++;
      }
      if (count == docFreq) {
        primeDocMap.put(key,bs);
      }
 else {
        LOG.warn(""String_Node_Str"",reader,count,docFreq);
      }
      return bs;
    }
  }
  return bitSet;
}","/** 
 * The way this method is called via warm up methods the likelihood of creating multiple bitsets during a race condition is very low, that's why this method is not synced.
 */
public static OpenBitSet getPrimeDocBitSet(Term primeDocTerm,AtomicReader providedReader) throws IOException {
  AtomicReader reader=AtomicReaderUtil.getSegmentReader(providedReader);
  final Object key=reader.getCoreCacheKey();
  final Map<Object,OpenBitSet> primeDocMap=getPrimeDocMap(primeDocTerm);
  OpenBitSet bitSet=primeDocMap.get(key);
  if (bitSet == null) {
synchronized (reader) {
      reader.addReaderClosedListener(new ReaderClosedListener(){
        @Override public void onClose(        IndexReader reader){
          LOG.debug(""String_Node_Str"" + primeDocMap.size() + ""String_Node_Str""+ reader+ ""String_Node_Str"");
          OpenBitSet openBitSet=primeDocMap.remove(key);
          if (openBitSet == null) {
            LOG.warn(""String_Node_Str"",key);
          }
        }
      }
);
      LOG.debug(""String_Node_Str"" + reader + ""String_Node_Str""+ primeDocMap.size()+ ""String_Node_Str"");
      final OpenBitSet bs=new OpenBitSet(reader.maxDoc());
      MemoryLeakDetector.record(bs,""String_Node_Str"",key.toString());
      Fields fields=reader.fields();
      if (fields == null) {
        throw new IOException(""String_Node_Str"");
      }
      Terms terms=fields.terms(primeDocTerm.field());
      if (terms == null) {
        throw new IOException(""String_Node_Str"" + primeDocTerm.field() + ""String_Node_Str"");
      }
      TermsEnum termsEnum=terms.iterator(null);
      if (!termsEnum.seekExact(primeDocTerm.bytes(),true)) {
        throw new IOException(""String_Node_Str"" + primeDocTerm + ""String_Node_Str"");
      }
      DocsEnum docsEnum=termsEnum.docs(null,null);
      int docFreq=reader.docFreq(primeDocTerm);
      int doc;
      int count=0;
      while ((doc=docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        bs.fastSet(doc);
        count++;
      }
      if (count == docFreq) {
        primeDocMap.put(key,bs);
      }
 else {
        LOG.warn(""String_Node_Str"",reader,count,docFreq);
      }
      return bs;
    }
  }
  return bitSet;
}",0.983614232209738
82173,"public ExitableReader(DirectoryReader in,ExitObject exitObject){
  super(in,new ExitableSubReaderWrapper(exitObject));
  _exitObject=exitObject;
}","public ExitableReader(DirectoryReader in,ExitObject exitObject){
  super(in,new ExitableSubReaderWrapper(exitObject));
  _exitObject=exitObject;
  _in=in;
}",0.9668874172185432
82174,"public FastHdfsKeyValueDirectory(Timer hdfsKeyValueTimer,Configuration configuration,Path path) throws IOException {
  _path=path;
  _store=new HdfsKeyValueStore(hdfsKeyValueTimer,configuration,path);
  BytesRef value=new BytesRef();
  if (_store.get(FILES,value)) {
    String filesString=value.utf8ToString();
    String[] files=filesString.split(""String_Node_Str"" + SEP);
    for (    String file : files) {
      if (file.isEmpty()) {
        throw new IOException(""String_Node_Str"" + filesString + ""String_Node_Str"");
      }
      BytesRef key=new BytesRef(file + LENGTH);
      if (_store.get(key,value)) {
        _files.put(file,Long.parseLong(value.utf8ToString()));
      }
 else {
        LOG.warn(MISSING_METADATA_MESSAGE,file);
      }
    }
  }
  setLockFactory(NoLockFactory.getNoLockFactory());
  writeFilesNames();
  gc();
}","public FastHdfsKeyValueDirectory(Timer hdfsKeyValueTimer,Configuration configuration,Path path) throws IOException {
  _path=path;
  _store=new HdfsKeyValueStore(hdfsKeyValueTimer,configuration,path);
  MemoryLeakDetector.record(_store,""String_Node_Str"",path.toString());
  BytesRef value=new BytesRef();
  if (_store.get(FILES,value)) {
    String filesString=value.utf8ToString();
    String[] files=filesString.split(""String_Node_Str"" + SEP);
    for (    String file : files) {
      if (file.isEmpty()) {
        throw new IOException(""String_Node_Str"" + filesString + ""String_Node_Str"");
      }
      BytesRef key=new BytesRef(file + LENGTH);
      if (_store.get(key,value)) {
        _files.put(file,Long.parseLong(value.utf8ToString()));
      }
 else {
        LOG.warn(MISSING_METADATA_MESSAGE,file);
      }
    }
  }
  setLockFactory(NoLockFactory.getNoLockFactory());
  writeFilesNames();
  gc();
}",0.9595441595441596
82175,"public HdfsKeyValueStore(Timer hdfsKeyValueTimer,Configuration configuration,Path path,long maxAmountAllowedPerFile) throws IOException {
  _maxAmountAllowedPerFile=maxAmountAllowedPerFile;
  _path=path;
  _fileSystem=_path.getFileSystem(configuration);
  _fileSystem.mkdirs(_path);
  _readWriteLock=new ReentrantReadWriteLock();
  _writeLock=_readWriteLock.writeLock();
  _readLock=_readWriteLock.readLock();
  _fileStatus.set(getSortedSet(_path));
  if (!_fileStatus.get().isEmpty()) {
    _currentFileCounter.set(Long.parseLong(_fileStatus.get().last().getPath().getName()));
  }
  removeAnyTruncatedFiles();
  loadIndexes();
  cleanupOldFiles();
  _idleLogTimerTask=getIdleLogTimer();
  _oldFileCleanerTimerTask=getOldFileCleanerTimer();
  hdfsKeyValueTimer.schedule(_idleLogTimerTask,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
  hdfsKeyValueTimer.schedule(_oldFileCleanerTimerTask,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
  Metrics.newGauge(new MetricName(ORG_APACHE_BLUR,HDFS_KV,SIZE,path.getParent().toString()),new Gauge<Long>(){
    @Override public Long value(){
      return _size.get();
    }
  }
);
}","public HdfsKeyValueStore(Timer hdfsKeyValueTimer,Configuration configuration,Path path,long maxAmountAllowedPerFile) throws IOException {
  _maxAmountAllowedPerFile=maxAmountAllowedPerFile;
  _path=path;
  _fileSystem=_path.getFileSystem(configuration);
  _fileSystem.mkdirs(_path);
  _readWriteLock=new ReentrantReadWriteLock();
  _writeLock=_readWriteLock.writeLock();
  _readLock=_readWriteLock.readLock();
  _fileStatus.set(getSortedSet(_path));
  if (!_fileStatus.get().isEmpty()) {
    _currentFileCounter.set(Long.parseLong(_fileStatus.get().last().getPath().getName()));
  }
  removeAnyTruncatedFiles();
  loadIndexes();
  cleanupOldFiles();
  _idleLogTimerTask=getIdleLogTimer();
  _oldFileCleanerTimerTask=getOldFileCleanerTimer();
  _hdfsKeyValueTimer=hdfsKeyValueTimer;
  _hdfsKeyValueTimer.schedule(_idleLogTimerTask,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
  _hdfsKeyValueTimer.schedule(_oldFileCleanerTimerTask,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
}",0.889752306945119
82176,"@Override public void close() throws IOException {
  if (!_isClosed) {
    _isClosed=true;
    _idleLogTimerTask.cancel();
    _oldFileCleanerTimerTask.cancel();
    _writeLock.lock();
    try {
      if (isOpenForWriting()) {
        syncInternal();
        _output.close();
        _output=null;
      }
    }
  finally {
      _writeLock.unlock();
    }
  }
}","@Override public void close() throws IOException {
  if (!_isClosed) {
    _isClosed=true;
    _idleLogTimerTask.cancel();
    _oldFileCleanerTimerTask.cancel();
    _hdfsKeyValueTimer.purge();
    _writeLock.lock();
    try {
      if (isOpenForWriting()) {
        syncInternal();
        _output.close();
        _output=null;
      }
    }
  finally {
      _writeLock.unlock();
    }
  }
}",0.9576719576719576
82177,"@SuppressWarnings(""String_Node_Str"") public static Map<String,List> getTableSummaries() throws TException {
  CachingBlurClient client=Config.getCachingBlurClient();
  List<Map<String,Object>> summaries=new ArrayList<Map<String,Object>>();
  List<String> clusters=client.shardClusterList();
  for (  String cluster : clusters) {
    List<String> tables=client.tableListByCluster(cluster);
    for (    String table : tables) {
      Map<String,Object> tableInfo=new HashMap<String,Object>();
      TableDescriptor descriptor=client.describe(table);
      tableInfo.put(""String_Node_Str"",cluster);
      tableInfo.put(""String_Node_Str"",table);
      tableInfo.put(""String_Node_Str"",descriptor.isEnabled());
      if (descriptor.isEnabled()) {
        TableStats stats=client.tableStats(table);
        tableInfo.put(""String_Node_Str"",stats.getRowCount());
        tableInfo.put(""String_Node_Str"",stats.getRecordCount());
        Schema schema=client.schema(table);
        tableInfo.put(""String_Node_Str"",new ArrayList<String>(schema.getFamilies().keySet()));
      }
 else {
        tableInfo.put(""String_Node_Str"",""String_Node_Str"");
        tableInfo.put(""String_Node_Str"",""String_Node_Str"");
        tableInfo.put(""String_Node_Str"",new ArrayList<String>());
      }
      summaries.add(tableInfo);
    }
  }
  Map<String,List> data=new HashMap<String,List>();
  data.put(""String_Node_Str"",summaries);
  data.put(""String_Node_Str"",clusters);
  return data;
}","@SuppressWarnings(""String_Node_Str"") public static Map<String,List> getTableSummaries() throws TException {
  CachingBlurClient client=Config.getCachingBlurClient();
  List<Map<String,Object>> summaries=new ArrayList<Map<String,Object>>();
  List<String> clusters=client.shardClusterList();
  for (  String cluster : clusters) {
    List<String> tables=client.tableListByCluster(cluster);
    for (    String table : tables) {
      Map<String,Object> tableInfo=new HashMap<String,Object>();
      tableInfo.put(""String_Node_Str"",cluster);
      tableInfo.put(""String_Node_Str"",table);
      try {
        TableDescriptor descriptor=client.describe(table);
        tableInfo.put(""String_Node_Str"",descriptor.isEnabled());
        tableInfo.put(""String_Node_Str"",descriptor.isReadOnly());
        if (descriptor.isEnabled()) {
          TableStats stats=client.tableStats(table);
          tableInfo.put(""String_Node_Str"",stats.getRowCount());
          tableInfo.put(""String_Node_Str"",stats.getRecordCount());
          Schema schema=client.schema(table);
          tableInfo.put(""String_Node_Str"",new ArrayList<String>(schema.getFamilies().keySet()));
        }
 else {
          tableInfo.put(""String_Node_Str"",""String_Node_Str"");
          tableInfo.put(""String_Node_Str"",""String_Node_Str"");
          tableInfo.put(""String_Node_Str"",new ArrayList<String>());
        }
      }
 catch (      Exception e) {
        tableInfo.put(""String_Node_Str"",e.getMessage());
      }
      summaries.add(tableInfo);
    }
  }
  Map<String,List> data=new HashMap<String,List>();
  data.put(""String_Node_Str"",summaries);
  data.put(""String_Node_Str"",clusters);
  return data;
}",0.8765195137555982
82178,"public static TableContext create(TableDescriptor tableDescriptor,boolean remote,Iface client){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String tableUri=tableDescriptor.getTableUri();
  if (tableUri == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=_cache.get(name);
  if (tableContext != null) {
    TableContext clone=tableContext.clone();
    TableDescriptor newTd=new TableDescriptor(clone._descriptor);
    clone._descriptor=newTd;
    clone._descriptor.setEnabled(tableDescriptor.isEnabled());
    return clone;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=getSystemConfiguration();
  BlurConfiguration blurConfiguration=getSystemBlurConfiguration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
      blurConfiguration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext._configuration=configuration;
  tableContext._blurConfiguration=blurConfiguration;
  tableContext._tablePath=new Path(tableUri);
  tableContext._defaultFieldName=SUPER;
  tableContext._table=name;
  tableContext._descriptor=tableDescriptor;
  tableContext._timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext._timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext._defaultPrimeDocTerm=new Term(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE);
  tableContext._defaultScoreType=ScoreType.SUPER;
  tableContext._discoverableFields=new HashSet<String>(Arrays.asList(BlurConstants.ROW_ID,BlurConstants.RECORD_ID,BlurConstants.FAMILY));
  tableContext._accessControlFactory=new FilterAccessControlFactory();
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext._tablePath,TYPES);
  try {
    FieldManager fieldManager;
    if (remote) {
      fieldManager=new ThriftFieldManager(SUPER,new NoStopWordStandardAnalyzer(),strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps,configuration,client,name);
    }
 else {
      fieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
    }
    loadCustomTypes(tableContext,blurConfiguration,fieldManager);
    fieldManager.loadFromStorage();
    tableContext._fieldManager=fieldManager;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext._indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SHARD_INDEX_SIMILARITY,FairSimilarity.class);
  tableContext._similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  String readInterceptorClass=blurConfiguration.get(BLUR_SHARD_READ_INTERCEPTOR);
  if (readInterceptorClass == null || readInterceptorClass.trim().isEmpty()) {
    tableContext._readInterceptor=DEFAULT_INTERCEPTOR;
  }
 else {
    try {
      @SuppressWarnings(""String_Node_Str"") Class<? extends ReadInterceptor> clazz=(Class<? extends ReadInterceptor>)Class.forName(readInterceptorClass);
      Constructor<? extends ReadInterceptor> constructor=clazz.getConstructor(new Class[]{BlurConfiguration.class});
      tableContext._readInterceptor=constructor.newInstance(blurConfiguration);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  tableContext._similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  _cache.put(name,tableContext);
  return tableContext.clone();
}","public static TableContext create(TableDescriptor tableDescriptor,boolean remote,Iface client){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String tableUri=tableDescriptor.getTableUri();
  if (tableUri == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=_cache.get(name);
  if (tableContext != null) {
    return clone(tableDescriptor,tableContext);
  }
synchronized (_cache) {
    tableContext=_cache.get(name);
    if (tableContext != null) {
      return clone(tableDescriptor,tableContext);
    }
    return createInternal(tableDescriptor,remote,client,name,tableUri);
  }
}",0.2235858101629913
82179,"private BlurIndex openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  TableContext tableContext=getTableContext(table);
  Path tablePath=tableContext.getTablePath();
  Path hdfsDirPath=new Path(tablePath,shard);
  BlurLockFactory lockFactory=new BlurLockFactory(_configuration,hdfsDirPath,_nodeName,BlurUtil.getPid());
  HdfsDirectory longTermStorage=new HdfsDirectory(_configuration,hdfsDirPath);
  longTermStorage.setLockFactory(lockFactory);
  Directory directory;
  URI uri=hdfsDirPath.toUri();
  String scheme=uri.getScheme();
  if (scheme != null && scheme.equals(""String_Node_Str"")) {
    LOG.info(""String_Node_Str"",shard,table);
    FastHdfsKeyValueDirectory shortTermStorage=new FastHdfsKeyValueDirectory(_hdfsKeyValueTimer,_configuration,new Path(hdfsDirPath,""String_Node_Str""));
    directory=new JoinDirectory(longTermStorage,shortTermStorage);
  }
 else {
    directory=longTermStorage;
  }
  ShardContext shardContext=ShardContext.create(tableContext,shard);
  TableDescriptor descriptor=tableContext.getDescriptor();
  boolean blockCacheEnabled=descriptor.isBlockCaching();
  if (blockCacheEnabled) {
    Set<String> blockCacheFileTypes=descriptor.getBlockCachingFileTypes();
    directory=_blockCacheDirectoryFactory.newDirectory(table,shard,directory,blockCacheFileTypes);
  }
  BlurIndex index=tableContext.newInstanceBlurIndex(shardContext,directory,_mergeScheduler,_searchExecutor,_indexCloser,_indexImporterTimer);
  if (_clusterStatus.isReadOnly(true,_cluster,table)) {
    index=new BlurIndexReadOnly(index);
  }
  _filterCache.opening(table,shard,index);
  return index;
}","private BlurIndex openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  TableContext tableContext=getTableContext(table);
  Path tablePath=tableContext.getTablePath();
  Path hdfsDirPath=new Path(tablePath,shard);
  BlurLockFactory lockFactory=new BlurLockFactory(_configuration,hdfsDirPath,_nodeName,BlurUtil.getPid());
  HdfsDirectory longTermStorage=new HdfsDirectory(_configuration,hdfsDirPath);
  longTermStorage.setLockFactory(lockFactory);
  Directory directory;
  URI uri=hdfsDirPath.toUri();
  String scheme=uri.getScheme();
  if (scheme != null && scheme.equals(""String_Node_Str"")) {
    LOG.info(""String_Node_Str"",shard,table);
    FastHdfsKeyValueDirectory shortTermStorage=new FastHdfsKeyValueDirectory(_hdfsKeyValueTimer,_configuration,new Path(hdfsDirPath,""String_Node_Str""));
    directory=new JoinDirectory(longTermStorage,shortTermStorage);
  }
 else {
    directory=longTermStorage;
  }
  ShardContext shardContext=ShardContext.create(tableContext,shard);
  TableDescriptor descriptor=tableContext.getDescriptor();
  boolean blockCacheEnabled=descriptor.isBlockCaching();
  if (blockCacheEnabled) {
    Set<String> blockCacheFileTypes=descriptor.getBlockCachingFileTypes();
    directory=_blockCacheDirectoryFactory.newDirectory(table,shard,directory,blockCacheFileTypes);
  }
  BlurIndex index=tableContext.newInstanceBlurIndex(shardContext,directory,_mergeScheduler,_searchExecutor,_indexCloser,_indexImporterTimer,_indexBulkTimer);
  if (_clusterStatus.isReadOnly(true,_cluster,table)) {
    index=new BlurIndexReadOnly(index);
  }
  _filterCache.opening(table,shard,index);
  return index;
}",0.995166163141994
82180,"public DistributedIndexServer(Configuration configuration,ZooKeeper zookeeper,ClusterStatus clusterStatus,BlurFilterCache filterCache,BlockCacheDirectoryFactory blockCacheDirectoryFactory,DistributedLayoutFactory distributedLayoutFactory,String cluster,String nodeName,long safeModeDelay,int shardOpenerThreadCount,int maxMergeThreads,int internalSearchThreads,int minimumNumberOfNodesBeforeExitingSafeMode,Timer hdfsKeyValueTimer,Timer indexImporterTimer,long smallMergeThreshold) throws KeeperException, InterruptedException {
  super(clusterStatus,configuration,nodeName,cluster);
  _indexImporterTimer=indexImporterTimer;
  _hdfsKeyValueTimer=hdfsKeyValueTimer;
  _minimumNumberOfNodes=minimumNumberOfNodesBeforeExitingSafeMode;
  _running.set(true);
  _closer=Closer.create();
  _shardOpenerThreadCount=shardOpenerThreadCount;
  _zookeeper=zookeeper;
  _filterCache=filterCache;
  _safeModeDelay=safeModeDelay;
  _internalSearchThreads=internalSearchThreads;
  _blockCacheDirectoryFactory=blockCacheDirectoryFactory;
  _distributedLayoutFactory=distributedLayoutFactory;
  _closer.register(_shardStateManager);
  BlurUtil.setupZookeeper(_zookeeper,_cluster);
  _openerService=Executors.newThreadPool(""String_Node_Str"",_shardOpenerThreadCount);
  _searchExecutor=Executors.newThreadPool(""String_Node_Str"",_internalSearchThreads);
  _closer.register(CloseableExecutorService.close(_openerService));
  _closer.register(CloseableExecutorService.close(_searchExecutor));
  _mergeScheduler=_closer.register(new SharedMergeScheduler(maxMergeThreads,smallMergeThreshold));
  _indexCloser=_closer.register(new BlurIndexCloser());
  _timerCacheFlush=setupFlushCacheTimer();
  _timerCacheFlush.start();
  String onlineShardsPath=ZookeeperPathConstants.getOnlineShardsPath(_cluster);
  String safemodePath=ZookeeperPathConstants.getSafemodePath(_cluster);
  int registerNodeTimeOut=_zookeeper.getSessionTimeout() / 1000 + 4;
  SafeMode safeMode=new SafeMode(_zookeeper,safemodePath,onlineShardsPath,TimeUnit.MILLISECONDS,_safeModeDelay,TimeUnit.SECONDS,registerNodeTimeOut,_minimumNumberOfNodes);
  safeMode.registerNode(getNodeName(),BlurUtil.getVersion().getBytes());
  _timerTableWarmer=setupTableWarmer();
  _timerTableWarmer.start();
  _watchOnlineShards=watchForShardServerChanges();
  _clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
synchronized (_warmupLock) {
        _warmupLock.notifyAll();
      }
    }
  }
);
  _clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
synchronized (_cleanupLock) {
        _cleanupLock.notifyAll();
      }
    }
  }
);
}","public DistributedIndexServer(Configuration configuration,ZooKeeper zookeeper,ClusterStatus clusterStatus,BlurFilterCache filterCache,BlockCacheDirectoryFactory blockCacheDirectoryFactory,DistributedLayoutFactory distributedLayoutFactory,String cluster,String nodeName,long safeModeDelay,int shardOpenerThreadCount,int maxMergeThreads,int internalSearchThreads,int minimumNumberOfNodesBeforeExitingSafeMode,Timer hdfsKeyValueTimer,Timer indexImporterTimer,long smallMergeThreshold,Timer indexBulkTimer) throws KeeperException, InterruptedException {
  super(clusterStatus,configuration,nodeName,cluster);
  _indexImporterTimer=indexImporterTimer;
  _indexBulkTimer=indexBulkTimer;
  _hdfsKeyValueTimer=hdfsKeyValueTimer;
  _minimumNumberOfNodes=minimumNumberOfNodesBeforeExitingSafeMode;
  _running.set(true);
  _closer=Closer.create();
  _shardOpenerThreadCount=shardOpenerThreadCount;
  _zookeeper=zookeeper;
  _filterCache=filterCache;
  _safeModeDelay=safeModeDelay;
  _internalSearchThreads=internalSearchThreads;
  _blockCacheDirectoryFactory=blockCacheDirectoryFactory;
  _distributedLayoutFactory=distributedLayoutFactory;
  _closer.register(_shardStateManager);
  BlurUtil.setupZookeeper(_zookeeper,_cluster);
  _openerService=Executors.newThreadPool(""String_Node_Str"",_shardOpenerThreadCount);
  _searchExecutor=Executors.newThreadPool(""String_Node_Str"",_internalSearchThreads);
  _closer.register(CloseableExecutorService.close(_openerService));
  _closer.register(CloseableExecutorService.close(_searchExecutor));
  _mergeScheduler=_closer.register(new SharedMergeScheduler(maxMergeThreads,smallMergeThreshold));
  _indexCloser=_closer.register(new BlurIndexCloser());
  _timerCacheFlush=setupFlushCacheTimer();
  _timerCacheFlush.start();
  String onlineShardsPath=ZookeeperPathConstants.getOnlineShardsPath(_cluster);
  String safemodePath=ZookeeperPathConstants.getSafemodePath(_cluster);
  int registerNodeTimeOut=_zookeeper.getSessionTimeout() / 1000 + 4;
  SafeMode safeMode=new SafeMode(_zookeeper,safemodePath,onlineShardsPath,TimeUnit.MILLISECONDS,_safeModeDelay,TimeUnit.SECONDS,registerNodeTimeOut,_minimumNumberOfNodes);
  safeMode.registerNode(getNodeName(),BlurUtil.getVersion().getBytes());
  _timerTableWarmer=setupTableWarmer();
  _timerTableWarmer.start();
  _watchOnlineShards=watchForShardServerChanges();
  _clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
synchronized (_warmupLock) {
        _warmupLock.notifyAll();
      }
    }
  }
);
  _clusterStatus.registerActionOnTableStateChange(new Action(){
    @Override public void action(){
synchronized (_cleanupLock) {
        _cleanupLock.notifyAll();
      }
    }
  }
);
}",0.9897368912110468
82181,"private BlurIndex openIndex(String table,String shard,Directory dir) throws CorruptIndexException, IOException {
  ShardContext shardContext=ShardContext.create(_tableContext,shard);
  BlurIndexSimpleWriter index=new BlurIndexSimpleWriter(shardContext,dir,_mergeScheduler,_searchExecutor,_indexCloser,_timer);
  return index;
}","private BlurIndex openIndex(String table,String shard,Directory dir) throws CorruptIndexException, IOException {
  ShardContext shardContext=ShardContext.create(_tableContext,shard);
  BlurIndexSimpleWriter index=new BlurIndexSimpleWriter(shardContext,dir,_mergeScheduler,_searchExecutor,_indexCloser,_timer,_bulkTimer);
  return index;
}",0.9834586466165414
82182,"public LocalIndexServer(TableDescriptor tableDescriptor,boolean ramDir) throws IOException {
  _timer=new Timer(""String_Node_Str"",true);
  _closer=Closer.create();
  _tableContext=TableContext.create(tableDescriptor);
  _mergeScheduler=_closer.register(new SharedMergeScheduler(3,128 * 1000 * 1000));
  _searchExecutor=Executors.newCachedThreadPool();
  _closer.register(new CloseableExecutorService(_searchExecutor));
  _ramDir=ramDir;
  _indexCloser=_closer.register(new BlurIndexCloser());
  _closer.register(new Closeable(){
    @Override public void close() throws IOException {
      _timer.cancel();
      _timer.purge();
    }
  }
);
  getIndexes(_tableContext.getTable());
}","public LocalIndexServer(TableDescriptor tableDescriptor,boolean ramDir) throws IOException {
  _timer=new Timer(""String_Node_Str"",true);
  _bulkTimer=new Timer(""String_Node_Str"",true);
  _closer=Closer.create();
  _tableContext=TableContext.create(tableDescriptor);
  _mergeScheduler=_closer.register(new SharedMergeScheduler(3,128 * 1000 * 1000));
  _searchExecutor=Executors.newCachedThreadPool();
  _closer.register(new CloseableExecutorService(_searchExecutor));
  _ramDir=ramDir;
  _indexCloser=_closer.register(new BlurIndexCloser());
  _closer.register(new Closeable(){
    @Override public void close() throws IOException {
      _timer.cancel();
      _timer.purge();
    }
  }
);
  getIndexes(_tableContext.getTable());
}",0.966053748231966
82183,"public BlurIndex(ShardContext shardContext,Directory directory,SharedMergeScheduler mergeScheduler,ExecutorService searchExecutor,BlurIndexCloser indexCloser,Timer indexImporterTimer) throws IOException {
  _shardContext=shardContext;
}","public BlurIndex(ShardContext shardContext,Directory directory,SharedMergeScheduler mergeScheduler,ExecutorService searchExecutor,BlurIndexCloser indexCloser,Timer indexImporterTimer,Timer bulkIndexingTimer) throws IOException {
  _shardContext=shardContext;
}",0.9516129032258064
82184,"public BlurIndexReadOnly(BlurIndex blurIndex) throws IOException {
  super(null,null,null,null,null,null);
  _blurIndex=blurIndex;
}","public BlurIndexReadOnly(BlurIndex blurIndex) throws IOException {
  super(null,null,null,null,null,null,null);
  _blurIndex=blurIndex;
}",0.9814126394052044
82185,"private BlockingQueue<CacheValue> getPool(int cacheBlockSize){
  BlockingQueue<CacheValue> blockingQueue=_cacheValuePool.get(_cacheValuePool);
  if (blockingQueue == null) {
    blockingQueue=buildNewBlockQueue(cacheBlockSize);
  }
  return blockingQueue;
}","private BlockingQueue<CacheValue> getPool(int cacheBlockSize){
  BlockingQueue<CacheValue> blockingQueue=_cacheValuePool.get(cacheBlockSize);
  if (blockingQueue == null) {
    blockingQueue=buildNewBlockQueue(cacheBlockSize);
  }
  return blockingQueue;
}",0.9434697855750488
82186,"private BlockingQueue<CacheValue> buildNewBlockQueue(int cacheBlockSize){
  _cacheValuePool.putIfAbsent(cacheBlockSize,new ArrayBlockingQueue<CacheValue>(_capacity));
  return _cacheValuePool.get(cacheBlockSize);
}","private BlockingQueue<CacheValue> buildNewBlockQueue(int cacheBlockSize){
  LOG.info(""String_Node_Str"",_capacity);
  BlockingQueue<CacheValue> value=new ArrayBlockingQueue<CacheValue>(_capacity);
  _cacheValuePool.putIfAbsent(cacheBlockSize,value);
  return _cacheValuePool.get(cacheBlockSize);
}",0.6627450980392157
82187,"public static Object runInternalReturnThriftObject(String name,Arguments arguments,Connection... connectionsArray) throws TTransportException, IOException, BlurException, TimeoutException, TException {
  List<Connection> connections=new ArrayList<Connection>(Arrays.asList(connectionsArray));
  Collections.shuffle(connections);
  for (  Connection connection : connections) {
    if (BlurClientManager.isBadConnection(connection)) {
      continue;
    }
    ClientPool clientPool=BlurClientManager.getClientPool();
    Client client=clientPool.getClient(connection);
    try {
      Long executionId=null;
      Response response;
      INNER:       while (true) {
        try {
          if (executionId == null) {
            response=client.execute(name,arguments);
          }
 else {
            response=client.reconnect(executionId);
          }
          break INNER;
        }
 catch (        TimeoutException te) {
          executionId=te.getInstanceExecutionId();
        }
      }
      return CommandUtil.fromThriftResponseToObject(response);
    }
  finally {
      clientPool.returnClient(connection,client);
    }
  }
  throw new BlurException(""String_Node_Str"" + connections + ""String_Node_Str"",null,ErrorType.UNKNOWN);
}","public static Object runInternalReturnThriftObject(String name,Arguments arguments,Connection... connectionsArray) throws TTransportException, IOException, BlurException, TimeoutException, TException {
  List<Connection> connections=new ArrayList<Connection>(Arrays.asList(connectionsArray));
  Collections.shuffle(connections);
  for (  Connection connection : connections) {
    if (BlurClientManager.isBadConnection(connection)) {
      continue;
    }
    ClientPool clientPool=BlurClientManager.getClientPool();
    Client client=clientPool.getClient(connection);
    try {
      Long executionId=null;
      Response response;
      INNER:       while (true) {
        Tracer tracer=BlurClientManager.setupClientPreCall(client);
        try {
          if (executionId == null) {
            response=client.execute(name,arguments);
          }
 else {
            response=client.reconnect(executionId);
          }
          break INNER;
        }
 catch (        TimeoutException te) {
          executionId=te.getInstanceExecutionId();
        }
 finally {
          if (tracer != null) {
            tracer.done();
          }
        }
      }
      return CommandUtil.fromThriftResponseToObject(response);
    }
  finally {
      clientPool.returnClient(connection,client);
    }
  }
  throw new BlurException(""String_Node_Str"" + connections + ""String_Node_Str"",null,ErrorType.UNKNOWN);
}",0.939439818319455
82188,"protected static Response waitForResponse(Client client,Command<?> command,Arguments arguments) throws TException {
  Long executionId=null;
  while (true) {
    try {
      if (executionId == null) {
        return client.execute(command.getName(),arguments);
      }
 else {
        return client.reconnect(executionId);
      }
    }
 catch (    BlurException e) {
      throw e;
    }
catch (    TimeoutException e) {
      executionId=e.getInstanceExecutionId();
      LOG.info(""String_Node_Str"",executionId);
    }
catch (    TException e) {
      throw e;
    }
  }
}","protected static Response waitForResponse(Client client,Command<?> command,Arguments arguments) throws TException {
  Long executionId=null;
  while (true) {
    Tracer tracer=BlurClientManager.setupClientPreCall(client);
    try {
      if (executionId == null) {
        return client.execute(command.getName(),arguments);
      }
 else {
        return client.reconnect(executionId);
      }
    }
 catch (    BlurException e) {
      throw e;
    }
catch (    TimeoutException e) {
      executionId=e.getInstanceExecutionId();
      LOG.info(""String_Node_Str"",executionId);
    }
catch (    TException e) {
      throw e;
    }
 finally {
      if (tracer != null) {
        tracer.done();
      }
    }
  }
}",0.8850931677018633
82189,"@Override public void doPostCommit(IndexWriter writer) throws IOException {
  LOG.info(""String_Node_Str"",_shard,_table);
  writer.maybeMerge();
}","@Override public void doPostCommit(IndexWriter writer) throws IOException {
  Path path=directory.getPath();
  fileSystem.delete(new Path(path,INPROGRESS),false);
  LOG.info(""String_Node_Str"",_shard,_table);
  writer.maybeMerge();
}",0.7692307692307693
82190,"@Override public void run(){
  _globalLock.lock();
  try {
    if (_lastCleanup + _cleanupDelay < System.currentTimeMillis()) {
      try {
        cleanupOldDirs();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e,_shard,_table);
      }
      _lastCleanup=System.currentTimeMillis();
    }
    Path path=_shardContext.getHdfsDirPath();
    Configuration configuration=_shardContext.getTableContext().getConfiguration();
    try {
      FileSystem fileSystem=path.getFileSystem(configuration);
      SortedSet<FileStatus> listStatus;
      while (true) {
        try {
          listStatus=sort(fileSystem.listStatus(path,new PathFilter(){
            @Override public boolean accept(            Path path){
              if (path != null && path.getName().endsWith(COMMIT)) {
                return true;
              }
              return false;
            }
          }
));
          break;
        }
 catch (        FileNotFoundException e) {
          LOG.warn(""String_Node_Str"");
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
      for (      FileStatus fileStatus : listStatus) {
        Path file=fileStatus.getPath();
        if (fileStatus.isDir() && file.getName().endsWith(COMMIT)) {
          Path inuse=new Path(file.getParent(),rename(file.getName(),INUSE));
          if (fileSystem.rename(file,inuse)) {
            HdfsDirectory hdfsDirectory=new HdfsDirectory(configuration,inuse);
            try {
              if (DirectoryReader.indexExists(hdfsDirectory)) {
                IndexAction indexAction=getIndexAction(hdfsDirectory,fileSystem);
                _blurIndex.process(indexAction);
                return;
              }
 else {
                Path badindex=new Path(file.getParent(),rename(file.getName(),BADINDEX));
                if (fileSystem.rename(inuse,badindex)) {
                  LOG.error(""String_Node_Str"",inuse,badindex);
                }
 else {
                  LOG.fatal(""String_Node_Str"",inuse,badindex);
                }
              }
            }
  finally {
              hdfsDirectory.close();
            }
          }
 else {
            LOG.fatal(""String_Node_Str"",file);
          }
        }
      }
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e,_shard,_table);
    }
  }
  finally {
    _globalLock.unlock();
  }
}","@Override public void run(){
  _globalLock.lock();
  try {
    if (_lastCleanup + _cleanupDelay < System.currentTimeMillis()) {
      try {
        cleanupOldDirs();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e,_shard,_table);
      }
      _lastCleanup=System.currentTimeMillis();
    }
    Path path=_shardContext.getHdfsDirPath();
    Configuration configuration=_shardContext.getTableContext().getConfiguration();
    try {
      FileSystem fileSystem=path.getFileSystem(configuration);
      SortedSet<FileStatus> listStatus;
      while (true) {
        try {
          listStatus=sort(fileSystem.listStatus(path,new PathFilter(){
            @Override public boolean accept(            Path path){
              if (path != null && path.getName().endsWith(COMMIT)) {
                return true;
              }
              return false;
            }
          }
));
          break;
        }
 catch (        FileNotFoundException e) {
          LOG.warn(""String_Node_Str"");
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
      for (      FileStatus fileStatus : listStatus) {
        Path file=fileStatus.getPath();
        if (fileStatus.isDir() && file.getName().endsWith(COMMIT)) {
          Path inuse=new Path(file.getParent(),rename(file.getName(),INUSE));
          touch(fileSystem,new Path(file,INPROGRESS));
          if (fileSystem.rename(file,inuse)) {
            if (_testError != null) {
              _testError.run();
            }
            HdfsDirectory hdfsDirectory=new HdfsDirectory(configuration,inuse);
            try {
              if (DirectoryReader.indexExists(hdfsDirectory)) {
                IndexAction indexAction=getIndexAction(hdfsDirectory,fileSystem);
                _blurIndex.process(indexAction);
                return;
              }
 else {
                Path badindex=new Path(file.getParent(),rename(file.getName(),BADINDEX));
                if (fileSystem.rename(inuse,badindex)) {
                  LOG.error(""String_Node_Str"",inuse,badindex);
                }
 else {
                  LOG.fatal(""String_Node_Str"",inuse,badindex);
                }
              }
            }
  finally {
              hdfsDirectory.close();
            }
          }
 else {
            LOG.fatal(""String_Node_Str"",file);
          }
        }
      }
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e,_shard,_table);
    }
  }
  finally {
    _globalLock.unlock();
  }
}",0.9690680502893634
82191,"public void cleanupOldDirs() throws IOException {
  Path hdfsDirPath=_shardContext.getHdfsDirPath();
  TableContext tableContext=_shardContext.getTableContext();
  Configuration configuration=tableContext.getConfiguration();
  FileSystem fileSystem=hdfsDirPath.getFileSystem(configuration);
  FileStatus[] inuseSubDirs=fileSystem.listStatus(hdfsDirPath,new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().endsWith(INUSE);
    }
  }
);
  Set<Path> inuseDirs=toSet(inuseSubDirs);
  Map<Path,Path> inuseFileToDir=toMap(fileSystem,inuseDirs);
  FileStatus[] listStatus=fileSystem.listStatus(hdfsDirPath,new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().endsWith(HdfsDirectory.LNK);
    }
  }
);
  for (  FileStatus status : listStatus) {
    Path realPath=HdfsDirectory.readRealPathDataFromSymlinkPath(fileSystem,status.getPath());
    Path inuseDir=inuseFileToDir.get(realPath);
    inuseDirs.remove(inuseDir);
  }
  for (  Path p : inuseDirs) {
    LOG.info(""String_Node_Str"",p);
    fileSystem.delete(p,true);
  }
}","public void cleanupOldDirs() throws IOException {
  Path hdfsDirPath=_shardContext.getHdfsDirPath();
  TableContext tableContext=_shardContext.getTableContext();
  Configuration configuration=tableContext.getConfiguration();
  FileSystem fileSystem=hdfsDirPath.getFileSystem(configuration);
  FileStatus[] inuseSubDirs=fileSystem.listStatus(hdfsDirPath,new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().endsWith(INUSE);
    }
  }
);
  Set<Path> inuseDirs=toSet(inuseSubDirs);
  Map<Path,Path> inuseFileToDir=toMap(fileSystem,inuseDirs);
  FileStatus[] listStatus=fileSystem.listStatus(hdfsDirPath,new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().endsWith(HdfsDirectory.LNK);
    }
  }
);
  for (  FileStatus status : listStatus) {
    Path realPath=HdfsDirectory.readRealPathDataFromSymlinkPath(fileSystem,status.getPath());
    Path inuseDir=inuseFileToDir.get(realPath);
    inuseDirs.remove(inuseDir);
  }
  for (  Path inuse : new HashSet<Path>(inuseDirs)) {
    Path path=new Path(inuse,INPROGRESS);
    if (fileSystem.exists(path)) {
      LOG.info(""String_Node_Str"",path);
      inuseDirs.remove(inuse);
      Path commit=new Path(inuse.getParent(),rename(inuse.getName(),COMMIT));
      fileSystem.rename(inuse,commit);
    }
  }
  for (  Path p : inuseDirs) {
    LOG.info(""String_Node_Str"",p);
    fileSystem.delete(p,true);
  }
}",0.8487229862475442
82192,"private IndexAction getIndexAction(final HdfsDirectory directory,final FileSystem fileSystem){
  return new IndexAction(){
    @Override public void performMutate(    IndexSearcherCloseable searcher,    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",directory,_shard,_table);
      boolean emitDeletes=searcher.getIndexReader().numDocs() != 0;
      applyDeletes(directory,writer,_shard,emitDeletes);
      LOG.info(""String_Node_Str"",directory,_shard,_table);
      writer.addIndexes(directory);
      LOG.info(""String_Node_Str"",directory,_shard,_table);
      writer.deleteDocuments(new Term(BlurConstants.DELETE_MARKER,BlurConstants.DELETE_MARKER_VALUE));
      LOG.info(""String_Node_Str"",directory,_shard,_table);
    }
    @Override public void doPreCommit(    IndexSearcherCloseable indexSearcher,    IndexWriter writer) throws IOException {
    }
    @Override public void doPostCommit(    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
      writer.maybeMerge();
    }
    @Override public void doPreRollback(    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
    }
    @Override public void doPostRollback(    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
      Path path=directory.getPath();
      String name=path.getName();
      fileSystem.rename(path,new Path(path.getParent(),rename(name,BADROWIDS)));
    }
  }
;
}","private IndexAction getIndexAction(final HdfsDirectory directory,final FileSystem fileSystem){
  return new IndexAction(){
    @Override public void performMutate(    IndexSearcherCloseable searcher,    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",directory,_shard,_table);
      boolean emitDeletes=searcher.getIndexReader().numDocs() != 0;
      applyDeletes(directory,writer,_shard,emitDeletes);
      LOG.info(""String_Node_Str"",directory,_shard,_table);
      writer.addIndexes(directory);
      LOG.info(""String_Node_Str"",directory,_shard,_table);
      writer.deleteDocuments(new Term(BlurConstants.DELETE_MARKER,BlurConstants.DELETE_MARKER_VALUE));
      LOG.info(""String_Node_Str"",directory,_shard,_table);
    }
    @Override public void doPreCommit(    IndexSearcherCloseable indexSearcher,    IndexWriter writer) throws IOException {
    }
    @Override public void doPostCommit(    IndexWriter writer) throws IOException {
      Path path=directory.getPath();
      fileSystem.delete(new Path(path,INPROGRESS),false);
      LOG.info(""String_Node_Str"",_shard,_table);
      writer.maybeMerge();
    }
    @Override public void doPreRollback(    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
    }
    @Override public void doPostRollback(    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
      Path path=directory.getPath();
      String name=path.getName();
      fileSystem.rename(path,new Path(path.getParent(),rename(name,BADROWIDS)));
    }
  }
;
}",0.9690251059667429
82193,"@Override public void run(){
  try {
    process(new IndexAction(){
      private Path _sorted;
      @Override public void performMutate(      IndexSearcherCloseable searcher,      IndexWriter writer) throws IOException {
        Configuration configuration=_tableContext.getConfiguration();
        SequenceFile.Sorter sorter=new Sorter(fileSystem,Text.class,RowMutationWritable.class,configuration);
        _sorted=new Path(path.getParent(),shard + ""String_Node_Str"");
        LOG.info(""String_Node_Str"",path,_sorted,table,shard,bulkId);
        sorter.sort(path,_sorted);
        LOG.info(""String_Node_Str"",_sorted,table,shard,bulkId);
        Reader reader=new SequenceFile.Reader(fileSystem,_sorted,configuration);
        Text key=new Text();
        RowMutationWritable value=new RowMutationWritable();
        Text last=null;
        List<RowMutation> list=new ArrayList<RowMutation>();
        while (reader.next(key,value)) {
          if (!key.equals(last)) {
            flushMutates(searcher,writer,list);
            last=new Text(key);
            list.clear();
          }
          list.add(value.getRowMutation().deepCopy());
        }
        flushMutates(searcher,writer,list);
        reader.close();
        LOG.info(""String_Node_Str"",table,shard,bulkId);
      }
      private void flushMutates(      IndexSearcherCloseable searcher,      IndexWriter writer,      List<RowMutation> list) throws IOException {
        if (!list.isEmpty()) {
          List<RowMutation> reduceMutates;
          try {
            reduceMutates=MutatableAction.reduceMutates(list);
          }
 catch (          BlurException e) {
            throw new IOException(e);
          }
          for (          RowMutation mutation : reduceMutates) {
            MutatableAction mutatableAction=new MutatableAction(_shardContext);
            mutatableAction.mutate(mutation);
            mutatableAction.performMutate(searcher,writer);
          }
        }
      }
      private void cleanupFiles() throws IOException {
        fileSystem.delete(path,false);
        fileSystem.delete(_sorted,false);
        Path parent=path.getParent();
        removeParentIfLastFile(fileSystem,parent);
      }
      @Override public void doPreRollback(      IndexWriter writer) throws IOException {
      }
      @Override public void doPreCommit(      IndexSearcherCloseable indexSearcher,      IndexWriter writer) throws IOException {
      }
      @Override public void doPostRollback(      IndexWriter writer) throws IOException {
        cleanupFiles();
      }
      @Override public void doPostCommit(      IndexWriter writer) throws IOException {
        cleanupFiles();
      }
    }
);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",table,shard,bulkId);
  }
}","@Override public void run(){
  try {
    process(new IndexAction(){
      private Path _sorted;
      @Override public void performMutate(      IndexSearcherCloseable searcher,      IndexWriter writer) throws IOException {
        Configuration configuration=_tableContext.getConfiguration();
        SequenceFile.Sorter sorter=new Sorter(fileSystem,Text.class,RowMutationWritable.class,configuration);
        _sorted=new Path(path.getParent(),shard + ""String_Node_Str"");
        LOG.info(""String_Node_Str"",path,_sorted,table,shard,bulkId);
        sorter.sort(path,_sorted);
        LOG.info(""String_Node_Str"",_sorted,table,shard,bulkId);
        Reader reader=new SequenceFile.Reader(fileSystem,_sorted,configuration);
        Text key=new Text();
        RowMutationWritable value=new RowMutationWritable();
        Text last=null;
        List<RowMutation> list=new ArrayList<RowMutation>();
        while (reader.next(key,value)) {
          if (!key.equals(last)) {
            flushMutates(searcher,writer,list);
            last=new Text(key);
            list.clear();
          }
          list.add(value.getRowMutation().deepCopy());
        }
        flushMutates(searcher,writer,list);
        reader.close();
        LOG.info(""String_Node_Str"",table,shard,bulkId);
      }
      private void flushMutates(      IndexSearcherCloseable searcher,      IndexWriter writer,      List<RowMutation> list) throws IOException {
        if (!list.isEmpty()) {
          List<RowMutation> reduceMutates;
          try {
            reduceMutates=MutatableAction.reduceMutates(list);
          }
 catch (          BlurException e) {
            throw new IOException(e);
          }
          for (          RowMutation mutation : reduceMutates) {
            MutatableAction mutatableAction=new MutatableAction(_shardContext);
            mutatableAction.mutate(mutation);
            mutatableAction.performMutate(searcher,writer);
          }
        }
      }
      private void cleanupFiles() throws IOException {
        fileSystem.delete(path,false);
        fileSystem.delete(_sorted,false);
        Path parent=path.getParent();
        removeParentIfLastFile(fileSystem,parent);
      }
      @Override public void doPreRollback(      IndexWriter writer) throws IOException {
      }
      @Override public void doPreCommit(      IndexSearcherCloseable indexSearcher,      IndexWriter writer) throws IOException {
      }
      @Override public void doPostRollback(      IndexWriter writer) throws IOException {
        cleanupFiles();
      }
      @Override public void doPostCommit(      IndexWriter writer) throws IOException {
        cleanupFiles();
      }
    }
);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",table,shard,bulkId,e);
  }
}",0.9996397694524496
82194,"@Override public void finishBulkMutate(final String bulkId,boolean apply,boolean blockUntilComplete) throws IOException {
  final String table=_tableContext.getTable();
  final String shard=_shardContext.getShard();
  final BulkEntry bulkEntry=_bulkWriters.get(bulkId);
  if (bulkEntry == null) {
    LOG.info(""String_Node_Str"",bulkId,apply,table,shard);
    return;
  }
  LOG.info(""String_Node_Str"",bulkId,apply,table,shard);
  bulkEntry._writer.close();
  Configuration configuration=_tableContext.getConfiguration();
  final Path path=bulkEntry._path;
  final FileSystem fileSystem=path.getFileSystem(configuration);
  if (!apply) {
    fileSystem.delete(path,false);
    Path parent=path.getParent();
    removeParentIfLastFile(fileSystem,parent);
  }
 else {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        try {
          process(new IndexAction(){
            private Path _sorted;
            @Override public void performMutate(            IndexSearcherCloseable searcher,            IndexWriter writer) throws IOException {
              Configuration configuration=_tableContext.getConfiguration();
              SequenceFile.Sorter sorter=new Sorter(fileSystem,Text.class,RowMutationWritable.class,configuration);
              _sorted=new Path(path.getParent(),shard + ""String_Node_Str"");
              LOG.info(""String_Node_Str"",path,_sorted,table,shard,bulkId);
              sorter.sort(path,_sorted);
              LOG.info(""String_Node_Str"",_sorted,table,shard,bulkId);
              Reader reader=new SequenceFile.Reader(fileSystem,_sorted,configuration);
              Text key=new Text();
              RowMutationWritable value=new RowMutationWritable();
              Text last=null;
              List<RowMutation> list=new ArrayList<RowMutation>();
              while (reader.next(key,value)) {
                if (!key.equals(last)) {
                  flushMutates(searcher,writer,list);
                  last=new Text(key);
                  list.clear();
                }
                list.add(value.getRowMutation().deepCopy());
              }
              flushMutates(searcher,writer,list);
              reader.close();
              LOG.info(""String_Node_Str"",table,shard,bulkId);
            }
            private void flushMutates(            IndexSearcherCloseable searcher,            IndexWriter writer,            List<RowMutation> list) throws IOException {
              if (!list.isEmpty()) {
                List<RowMutation> reduceMutates;
                try {
                  reduceMutates=MutatableAction.reduceMutates(list);
                }
 catch (                BlurException e) {
                  throw new IOException(e);
                }
                for (                RowMutation mutation : reduceMutates) {
                  MutatableAction mutatableAction=new MutatableAction(_shardContext);
                  mutatableAction.mutate(mutation);
                  mutatableAction.performMutate(searcher,writer);
                }
              }
            }
            private void cleanupFiles() throws IOException {
              fileSystem.delete(path,false);
              fileSystem.delete(_sorted,false);
              Path parent=path.getParent();
              removeParentIfLastFile(fileSystem,parent);
            }
            @Override public void doPreRollback(            IndexWriter writer) throws IOException {
            }
            @Override public void doPreCommit(            IndexSearcherCloseable indexSearcher,            IndexWriter writer) throws IOException {
            }
            @Override public void doPostRollback(            IndexWriter writer) throws IOException {
              cleanupFiles();
            }
            @Override public void doPostCommit(            IndexWriter writer) throws IOException {
              cleanupFiles();
            }
          }
);
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",table,shard,bulkId);
        }
      }
    }
;
    if (blockUntilComplete) {
      runnable.run();
    }
 else {
      Thread thread=new Thread(runnable);
      thread.setName(""String_Node_Str"" + table + ""String_Node_Str""+ shard+ ""String_Node_Str""+ bulkId+ ""String_Node_Str"");
      thread.start();
    }
  }
}","@Override public void finishBulkMutate(final String bulkId,boolean apply,boolean blockUntilComplete) throws IOException {
  final String table=_tableContext.getTable();
  final String shard=_shardContext.getShard();
  final BulkEntry bulkEntry=_bulkWriters.get(bulkId);
  if (bulkEntry == null) {
    LOG.info(""String_Node_Str"",bulkId,apply,table,shard);
    return;
  }
  LOG.info(""String_Node_Str"",bulkId,apply,table,shard);
  bulkEntry._writer.close();
  Configuration configuration=_tableContext.getConfiguration();
  final Path path=bulkEntry._path;
  final FileSystem fileSystem=path.getFileSystem(configuration);
  if (!apply) {
    fileSystem.delete(path,false);
    Path parent=path.getParent();
    removeParentIfLastFile(fileSystem,parent);
  }
 else {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        try {
          process(new IndexAction(){
            private Path _sorted;
            @Override public void performMutate(            IndexSearcherCloseable searcher,            IndexWriter writer) throws IOException {
              Configuration configuration=_tableContext.getConfiguration();
              SequenceFile.Sorter sorter=new Sorter(fileSystem,Text.class,RowMutationWritable.class,configuration);
              _sorted=new Path(path.getParent(),shard + ""String_Node_Str"");
              LOG.info(""String_Node_Str"",path,_sorted,table,shard,bulkId);
              sorter.sort(path,_sorted);
              LOG.info(""String_Node_Str"",_sorted,table,shard,bulkId);
              Reader reader=new SequenceFile.Reader(fileSystem,_sorted,configuration);
              Text key=new Text();
              RowMutationWritable value=new RowMutationWritable();
              Text last=null;
              List<RowMutation> list=new ArrayList<RowMutation>();
              while (reader.next(key,value)) {
                if (!key.equals(last)) {
                  flushMutates(searcher,writer,list);
                  last=new Text(key);
                  list.clear();
                }
                list.add(value.getRowMutation().deepCopy());
              }
              flushMutates(searcher,writer,list);
              reader.close();
              LOG.info(""String_Node_Str"",table,shard,bulkId);
            }
            private void flushMutates(            IndexSearcherCloseable searcher,            IndexWriter writer,            List<RowMutation> list) throws IOException {
              if (!list.isEmpty()) {
                List<RowMutation> reduceMutates;
                try {
                  reduceMutates=MutatableAction.reduceMutates(list);
                }
 catch (                BlurException e) {
                  throw new IOException(e);
                }
                for (                RowMutation mutation : reduceMutates) {
                  MutatableAction mutatableAction=new MutatableAction(_shardContext);
                  mutatableAction.mutate(mutation);
                  mutatableAction.performMutate(searcher,writer);
                }
              }
            }
            private void cleanupFiles() throws IOException {
              fileSystem.delete(path,false);
              fileSystem.delete(_sorted,false);
              Path parent=path.getParent();
              removeParentIfLastFile(fileSystem,parent);
            }
            @Override public void doPreRollback(            IndexWriter writer) throws IOException {
            }
            @Override public void doPreCommit(            IndexSearcherCloseable indexSearcher,            IndexWriter writer) throws IOException {
            }
            @Override public void doPostRollback(            IndexWriter writer) throws IOException {
              cleanupFiles();
            }
            @Override public void doPostCommit(            IndexWriter writer) throws IOException {
              cleanupFiles();
            }
          }
);
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",table,shard,bulkId,e);
        }
      }
    }
;
    if (blockUntilComplete) {
      runnable.run();
    }
 else {
      Thread thread=new Thread(runnable);
      thread.setName(""String_Node_Str"" + table + ""String_Node_Str""+ shard+ ""String_Node_Str""+ bulkId+ ""String_Node_Str"");
      thread.start();
    }
  }
}",0.9997680890538032
82195,"public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration) throws Exception {
  Configuration config=new Configuration();
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int configBindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  int instanceBindPort=configBindPort + serverIndex;
  if (configBindPort == 0) {
    instanceBindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,instanceBindPort);
  if (configBindPort == 0) {
    instanceBindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  final BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + instanceBindPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + instanceBindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  BlurUtil.setupZookeeper(zooKeeper,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration,config);
  BlurFilterCache filterCache=getFilterCache(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  int minimumNumberOfNodesBeforeExitingSafeMode=configuration.getInt(BLUR_SHARD_SERVER_MINIMUM_BEFORE_SAFEMODE_EXIT,0);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_INTERNAL_SEARCH_THREAD_COUNT,16);
  final Timer hdfsKeyValueTimer=new Timer(""String_Node_Str"",true);
  final Timer indexImporterTimer=new Timer(""String_Node_Str"",true);
  long smallMergeThreshold=configuration.getLong(BLUR_SHARD_SMALL_MERGE_THRESHOLD,128 * 1000 * 1000);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,maxMergeThreads,internalSearchThreads,minimumNumberOfNodesBeforeExitingSafeMode,hdfsKeyValueTimer,indexImporterTimer,smallMergeThreshold);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int remoteFetchCount=configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,110);
  if (fetchCount + 1 <= remoteFetchCount) {
    LOG.warn(""String_Node_Str"" + BLUR_SHARD_FETCHCOUNT + ""String_Node_Str""+ fetchCount+ ""String_Node_Str""+ BLUR_CONTROLLER_REMOTE_FETCH_COUNT+ ""String_Node_Str""+ remoteFetchCount+ ""String_Node_Str"");
  }
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  int cacheSize=configuration.getInt(BLUR_SHARD_DEEP_PAGING_CACHE_SIZE,1000);
  DeepPagingCache deepPagingCache=new DeepPagingCache(cacheSize);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,statusCleanupTimerDelay,facetThreadCount,deepPagingCache);
  File defaultTmpPath=getDefaultTmpPath(BLUR_TMP_PATH);
  String configTmpPath=configuration.get(BLUR_TMP_PATH);
  File tmpPath;
  if (!(configTmpPath == null || configTmpPath.isEmpty())) {
    tmpPath=new File(configTmpPath);
  }
 else {
    tmpPath=defaultTmpPath;
  }
  int numberOfShardWorkerCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_WORKER_THREADS,16);
  int numberOfShardDriverCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_DRIVER_THREADS,16);
  String commandPath=configuration.get(BLUR_COMMAND_LIB_PATH,getCommandLibPath());
  if (commandPath != null) {
    LOG.info(""String_Node_Str"",commandPath);
  }
 else {
    LOG.info(""String_Node_Str"");
  }
  final ShardCommandManager commandManager=new ShardCommandManager(indexServer,tmpPath,commandPath,numberOfShardWorkerCommandThreads,numberOfShardDriverCommandThreads,Connection.DEFAULT_TIMEOUT,config);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setCommandManager(commandManager);
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,shardServer,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  iface=BlurUtil.lastChanceErrorHandling(iface,Iface.class);
  int configGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  int instanceGuiPort=configGuiPort + serverIndex;
  if (configGuiPort == 0) {
    instanceGuiPort=0;
  }
  final HttpJettyServer httpServer;
  if (configGuiPort >= 0) {
    httpServer=new HttpJettyServer(HttpJettyServer.class,instanceGuiPort);
    int port=httpServer.getLocalPort();
    configuration.setInt(BLUR_HTTP_STATUS_RUNNING_PORT,port);
  }
 else {
    httpServer=null;
  }
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(config.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,BLUR_THRIFT_DEFAULT_MAX_FRAME_SIZE));
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(makeCloseable(hdfsKeyValueTimer),makeCloseable(indexImporterTimer),blockCacheDirectoryFactory,commandManager,traceStorage,server,shardServer,indexManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}","public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration) throws Exception {
  Configuration config=new Configuration();
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int configBindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  int instanceBindPort=configBindPort + serverIndex;
  if (configBindPort == 0) {
    instanceBindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,instanceBindPort);
  if (configBindPort == 0) {
    instanceBindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  final BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + instanceBindPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + instanceBindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  BlurUtil.setupZookeeper(zooKeeper,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration,config);
  BlurFilterCache filterCache=getFilterCache(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  int minimumNumberOfNodesBeforeExitingSafeMode=configuration.getInt(BLUR_SHARD_SERVER_MINIMUM_BEFORE_SAFEMODE_EXIT,0);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_INTERNAL_SEARCH_THREAD_COUNT,16);
  final Timer hdfsKeyValueTimer=new Timer(""String_Node_Str"",true);
  final Timer indexImporterTimer=new Timer(""String_Node_Str"",true);
  long smallMergeThreshold=configuration.getLong(BLUR_SHARD_SMALL_MERGE_THRESHOLD,128 * 1000 * 1000);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,maxMergeThreads,internalSearchThreads,minimumNumberOfNodesBeforeExitingSafeMode,hdfsKeyValueTimer,indexImporterTimer,smallMergeThreshold);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int remoteFetchCount=configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,110);
  if (fetchCount + 1 <= remoteFetchCount) {
    LOG.warn(""String_Node_Str"" + BLUR_SHARD_FETCHCOUNT + ""String_Node_Str""+ fetchCount+ ""String_Node_Str""+ BLUR_CONTROLLER_REMOTE_FETCH_COUNT+ ""String_Node_Str""+ remoteFetchCount+ ""String_Node_Str"");
  }
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  int cacheSize=configuration.getInt(BLUR_SHARD_DEEP_PAGING_CACHE_SIZE,1000);
  DeepPagingCache deepPagingCache=new DeepPagingCache(cacheSize);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,statusCleanupTimerDelay,facetThreadCount,deepPagingCache);
  File defaultTmpPath=getDefaultTmpPath(BLUR_TMP_PATH);
  String configTmpPath=configuration.get(BLUR_TMP_PATH);
  File tmpPath;
  if (!(configTmpPath == null || configTmpPath.isEmpty())) {
    tmpPath=new File(configTmpPath);
  }
 else {
    tmpPath=defaultTmpPath;
  }
  int numberOfShardWorkerCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_WORKER_THREADS,16);
  int numberOfShardDriverCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_DRIVER_THREADS,16);
  String commandPath=configuration.get(BLUR_COMMAND_LIB_PATH,getCommandLibPath());
  if (commandPath != null) {
    LOG.info(""String_Node_Str"",commandPath);
  }
 else {
    LOG.info(""String_Node_Str"");
  }
  final ShardCommandManager commandManager=new ShardCommandManager(indexServer,tmpPath,commandPath,numberOfShardWorkerCommandThreads,numberOfShardDriverCommandThreads,Connection.DEFAULT_TIMEOUT,config);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setCommandManager(commandManager);
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,shardServer,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  iface=BlurUtil.lastChanceErrorHandling(iface,Iface.class);
  int configGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  int instanceGuiPort=configGuiPort + serverIndex;
  if (configGuiPort == 0) {
    instanceGuiPort=0;
  }
  final HttpJettyServer httpServer;
  if (configGuiPort >= 0) {
    httpServer=new HttpJettyServer(HttpJettyServer.class,instanceGuiPort);
    int port=httpServer.getLocalPort();
    configuration.setInt(BLUR_HTTP_STATUS_RUNNING_PORT,port);
  }
 else {
    httpServer=null;
  }
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(configuration.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,BLUR_THRIFT_DEFAULT_MAX_FRAME_SIZE));
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(makeCloseable(hdfsKeyValueTimer),makeCloseable(indexImporterTimer),blockCacheDirectoryFactory,commandManager,traceStorage,server,shardServer,indexManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}",0.9996188816899876
82196,"public Document highlight(int docID,Document document,SegmentReader segmentReader) throws IOException {
  Document highlight;
  try {
    highlight=HighlightHelper.highlight(docID,document,_highlightQuery,_fieldManager,segmentReader,_preTag,_postTag);
  }
 catch (  InvalidTokenOffsetsException e) {
    throw new IOException(e);
  }
  return highlight;
}","public Document highlight(int docID,Document document,AtomicReader atomicReader) throws IOException {
  Document highlight;
  try {
    highlight=HighlightHelper.highlight(docID,document,_highlightQuery,_fieldManager,atomicReader,_preTag,_postTag);
  }
 catch (  InvalidTokenOffsetsException e) {
    throw new IOException(e);
  }
  return highlight;
}",0.9448373408769448
82197,"private static void applyFamilies(Set<String> alreadyProcessed,OpenBitSet bits,Set<String> columnFamiliesToFetch,SegmentReader segmentReader,int primeDocRowId,int numberOfDocsInRow,Bits liveDocs) throws IOException {
  for (  String family : columnFamiliesToFetch) {
    if (!alreadyProcessed.contains(family)) {
      applyFamily(bits,family,segmentReader,primeDocRowId,numberOfDocsInRow,liveDocs);
      alreadyProcessed.add(family);
    }
  }
}","private static void applyFamilies(Set<String> alreadyProcessed,OpenBitSet bits,Set<String> columnFamiliesToFetch,AtomicReader segmentReader,int primeDocRowId,int numberOfDocsInRow,Bits liveDocs) throws IOException {
  for (  String family : columnFamiliesToFetch) {
    if (!alreadyProcessed.contains(family)) {
      applyFamily(bits,family,segmentReader,primeDocRowId,numberOfDocsInRow,liveDocs);
      alreadyProcessed.add(family);
    }
  }
}",0.9854423292273236
82198,"/** 
 * NOTE: This is a potentially dangerous call, it will return all the documents that match the term.
 * @param selector
 * @param primeDocTerm
 * @param filter
 * @param totalRecords
 * @param highlighter
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public static List<Document> fetchDocuments(IndexReader reader,ResetableDocumentStoredFieldVisitor fieldSelector,Selector selector,int maxHeap,String context,Term primeDocTerm,Filter filter,AtomicBoolean moreToFetch,AtomicInteger totalRecords,BlurHighlighter highlighter) throws IOException {
  if (highlighter == null) {
    highlighter=new BlurHighlighter();
  }
  if (reader instanceof BaseCompositeReader) {
    BaseCompositeReader<IndexReader> indexReader=(BaseCompositeReader<IndexReader>)reader;
    List<? extends IndexReader> sequentialSubReaders=BaseCompositeReaderUtil.getSequentialSubReaders(indexReader);
    String locationId=selector.getLocationId();
    int indexOf=locationId.indexOf('/');
    if (indexOf < 0) {
      throw new IOException(""String_Node_Str"" + locationId + ""String_Node_Str"");
    }
    int notAdjustedPrimeDocId=Integer.parseInt(locationId.substring(indexOf + 1));
    int readerIndex=BaseCompositeReaderUtil.readerIndex(indexReader,notAdjustedPrimeDocId);
    int readerBase=BaseCompositeReaderUtil.readerBase(indexReader,readerIndex);
    int primeDocId=notAdjustedPrimeDocId - readerBase;
    IndexReader orgReader=sequentialSubReaders.get(readerIndex);
    SegmentReader sReader=AtomicReaderUtil.getSegmentReader(orgReader);
    if (sReader != null) {
      SegmentReader segmentReader=(SegmentReader)sReader;
      Bits liveDocs=segmentReader.getLiveDocs();
      OpenBitSet bitSet=PrimeDocCache.getPrimeDocBitSet(primeDocTerm,segmentReader);
      int nextPrimeDoc=bitSet.nextSetBit(primeDocId + 1);
      int numberOfDocsInRow;
      if (nextPrimeDoc == -1) {
        numberOfDocsInRow=segmentReader.maxDoc() - primeDocId;
      }
 else {
        numberOfDocsInRow=nextPrimeDoc - primeDocId;
      }
      OpenBitSet docsInRowSpanToFetch=getDocsToFetch(segmentReader,selector,primeDocId,numberOfDocsInRow,liveDocs,filter,totalRecords);
      int start=selector.getStartRecord();
      int maxDocsToFetch=selector.getMaxRecordsToFetch();
      int startingPosition=getStartingPosition(docsInRowSpanToFetch,start);
      List<Document> docs=new ArrayList<Document>();
      if (startingPosition < 0) {
        return docs;
      }
      int totalHeap=0;
      Tracer trace2=Trace.trace(""String_Node_Str"");
      int cursor=0;
      try {
        for (cursor=startingPosition; cursor < numberOfDocsInRow; cursor++) {
          if (maxDocsToFetch <= 0) {
            return docs;
          }
          if (totalHeap >= maxHeap) {
            LOG.warn(""String_Node_Str"",totalHeap,maxHeap,context,selector);
            return docs;
          }
          if (docsInRowSpanToFetch.fastGet(cursor)) {
            maxDocsToFetch--;
            int docID=primeDocId + cursor;
            segmentReader.document(docID,fieldSelector);
            Document document=fieldSelector.getDocument();
            if (highlighter.shouldHighlight()) {
              docs.add(highlighter.highlight(docID,document,segmentReader));
            }
 else {
              docs.add(document);
            }
            totalHeap+=fieldSelector.getSize();
            fieldSelector.reset();
          }
        }
      }
  finally {
        if (docsInRowSpanToFetch.nextSetBit(cursor) != -1) {
          moreToFetch.set(true);
        }
        trace2.done();
      }
      return orderDocsBasedOnFamilyOrder(docs,selector);
    }
 else {
      throw new IOException(""String_Node_Str"" + orgReader + ""String_Node_Str"");
    }
  }
  throw new IOException(""String_Node_Str"" + reader + ""String_Node_Str"");
}","/** 
 * NOTE: This is a potentially dangerous call, it will return all the documents that match the term.
 * @param selector
 * @param primeDocTerm
 * @param filter
 * @param totalRecords
 * @param highlighter
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public static List<Document> fetchDocuments(IndexReader reader,ResetableDocumentStoredFieldVisitor fieldSelector,Selector selector,int maxHeap,String context,Term primeDocTerm,Filter filter,AtomicBoolean moreToFetch,AtomicInteger totalRecords,BlurHighlighter highlighter) throws IOException {
  if (highlighter == null) {
    highlighter=new BlurHighlighter();
  }
  if (reader instanceof BaseCompositeReader) {
    BaseCompositeReader<IndexReader> indexReader=(BaseCompositeReader<IndexReader>)reader;
    List<? extends IndexReader> sequentialSubReaders=BaseCompositeReaderUtil.getSequentialSubReaders(indexReader);
    String locationId=selector.getLocationId();
    int indexOf=locationId.indexOf('/');
    if (indexOf < 0) {
      throw new IOException(""String_Node_Str"" + locationId + ""String_Node_Str"");
    }
    int notAdjustedPrimeDocId=Integer.parseInt(locationId.substring(indexOf + 1));
    int readerIndex=BaseCompositeReaderUtil.readerIndex(indexReader,notAdjustedPrimeDocId);
    int readerBase=BaseCompositeReaderUtil.readerBase(indexReader,readerIndex);
    int primeDocId=notAdjustedPrimeDocId - readerBase;
    IndexReader orgReader=sequentialSubReaders.get(readerIndex);
    if (orgReader != null && orgReader instanceof AtomicReader) {
      AtomicReader atomicReader=(AtomicReader)orgReader;
      Bits liveDocs=atomicReader.getLiveDocs();
      OpenBitSet bitSet=PrimeDocCache.getPrimeDocBitSet(primeDocTerm,atomicReader);
      int nextPrimeDoc=bitSet.nextSetBit(primeDocId + 1);
      int numberOfDocsInRow;
      if (nextPrimeDoc == -1) {
        numberOfDocsInRow=atomicReader.maxDoc() - primeDocId;
      }
 else {
        numberOfDocsInRow=nextPrimeDoc - primeDocId;
      }
      OpenBitSet docsInRowSpanToFetch=getDocsToFetch(atomicReader,selector,primeDocId,numberOfDocsInRow,liveDocs,filter,totalRecords);
      int start=selector.getStartRecord();
      int maxDocsToFetch=selector.getMaxRecordsToFetch();
      int startingPosition=getStartingPosition(docsInRowSpanToFetch,start);
      List<Document> docs=new ArrayList<Document>();
      if (startingPosition < 0) {
        return docs;
      }
      int totalHeap=0;
      Tracer trace2=Trace.trace(""String_Node_Str"");
      int cursor=0;
      try {
        for (cursor=startingPosition; cursor < numberOfDocsInRow; cursor++) {
          if (maxDocsToFetch <= 0) {
            return docs;
          }
          if (totalHeap >= maxHeap) {
            LOG.warn(""String_Node_Str"",totalHeap,maxHeap,context,selector);
            return docs;
          }
          if (docsInRowSpanToFetch.fastGet(cursor)) {
            maxDocsToFetch--;
            int docID=primeDocId + cursor;
            atomicReader.document(docID,fieldSelector);
            Document document=fieldSelector.getDocument();
            if (highlighter.shouldHighlight()) {
              docs.add(highlighter.highlight(docID,document,atomicReader));
            }
 else {
              docs.add(document);
            }
            totalHeap+=fieldSelector.getSize();
            fieldSelector.reset();
          }
        }
      }
  finally {
        if (docsInRowSpanToFetch.nextSetBit(cursor) != -1) {
          moreToFetch.set(true);
        }
        trace2.done();
      }
      return orderDocsBasedOnFamilyOrder(docs,selector);
    }
 else {
      throw new IOException(""String_Node_Str"" + orgReader + ""String_Node_Str"");
    }
  }
  throw new IOException(""String_Node_Str"" + reader + ""String_Node_Str"");
}",0.965242769965508
82199,"private static OpenBitSet getDocsToFetch(SegmentReader segmentReader,Selector selector,int primeDocRowId,int numberOfDocsInRow,Bits liveDocs,Filter filter,AtomicInteger totalRecords) throws IOException {
  Set<String> alreadyProcessed=new HashSet<String>();
  OpenBitSet bits=new OpenBitSet(numberOfDocsInRow);
  OpenBitSet mask=null;
  if (filter != null) {
    DocIdSet docIdSet=filter.getDocIdSet(segmentReader.getContext(),liveDocs);
    mask=getMask(docIdSet,primeDocRowId,numberOfDocsInRow);
  }
  Set<String> columnFamiliesToFetch=selector.getColumnFamiliesToFetch();
  boolean fetchAll=true;
  if (columnFamiliesToFetch != null) {
    fetchAll=false;
    applyFamilies(alreadyProcessed,bits,columnFamiliesToFetch,segmentReader,primeDocRowId,numberOfDocsInRow,liveDocs);
  }
  Map<String,Set<String>> columnsToFetch=selector.getColumnsToFetch();
  if (columnsToFetch != null) {
    fetchAll=false;
    applyColumns(alreadyProcessed,bits,columnsToFetch,segmentReader,primeDocRowId,numberOfDocsInRow,liveDocs);
  }
  if (fetchAll) {
    bits.set(0,numberOfDocsInRow);
  }
  if (mask != null) {
    bits.intersect(mask);
  }
  totalRecords.set((int)bits.cardinality());
  return bits;
}","private static OpenBitSet getDocsToFetch(AtomicReader atomicReader,Selector selector,int primeDocRowId,int numberOfDocsInRow,Bits liveDocs,Filter filter,AtomicInteger totalRecords) throws IOException {
  Set<String> alreadyProcessed=new HashSet<String>();
  OpenBitSet bits=new OpenBitSet(numberOfDocsInRow);
  OpenBitSet mask=null;
  if (filter != null) {
    DocIdSet docIdSet=filter.getDocIdSet(atomicReader.getContext(),liveDocs);
    mask=getMask(docIdSet,primeDocRowId,numberOfDocsInRow);
  }
  Set<String> columnFamiliesToFetch=selector.getColumnFamiliesToFetch();
  boolean fetchAll=true;
  if (columnFamiliesToFetch != null) {
    fetchAll=false;
    applyFamilies(alreadyProcessed,bits,columnFamiliesToFetch,atomicReader,primeDocRowId,numberOfDocsInRow,liveDocs);
  }
  Map<String,Set<String>> columnsToFetch=selector.getColumnsToFetch();
  if (columnsToFetch != null) {
    fetchAll=false;
    applyColumns(alreadyProcessed,bits,columnsToFetch,atomicReader,primeDocRowId,numberOfDocsInRow,liveDocs);
  }
  if (fetchAll) {
    bits.set(0,numberOfDocsInRow);
  }
  if (mask != null) {
    bits.intersect(mask);
  }
  totalRecords.set((int)bits.cardinality());
  return bits;
}",0.9667368421052632
82200,"private static void applyColumns(Set<String> alreadyProcessed,OpenBitSet bits,Map<String,Set<String>> columnsToFetch,SegmentReader segmentReader,int primeDocRowId,int numberOfDocsInRow,Bits liveDocs) throws IOException {
  for (  String family : columnsToFetch.keySet()) {
    if (!alreadyProcessed.contains(family)) {
      applyFamily(bits,family,segmentReader,primeDocRowId,numberOfDocsInRow,liveDocs);
      alreadyProcessed.add(family);
    }
  }
}","private static void applyColumns(Set<String> alreadyProcessed,OpenBitSet bits,Map<String,Set<String>> columnsToFetch,AtomicReader atomicReader,int primeDocRowId,int numberOfDocsInRow,Bits liveDocs) throws IOException {
  for (  String family : columnsToFetch.keySet()) {
    if (!alreadyProcessed.contains(family)) {
      applyFamily(bits,family,atomicReader,primeDocRowId,numberOfDocsInRow,liveDocs);
      alreadyProcessed.add(family);
    }
  }
}",0.9413067552602437
82201,"private static void applyFamily(OpenBitSet bits,String family,SegmentReader segmentReader,int primeDocRowId,int numberOfDocsInRow,Bits liveDocs) throws IOException {
  Fields fields=segmentReader.fields();
  Terms terms=fields.terms(BlurConstants.FAMILY);
  TermsEnum iterator=terms.iterator(null);
  BytesRef text=new BytesRef(family);
  int lastDocId=primeDocRowId + numberOfDocsInRow;
  if (iterator.seekExact(text,true)) {
    DocsEnum docs=iterator.docs(liveDocs,null,DocsEnum.FLAG_NONE);
    int doc=primeDocRowId;
    while ((doc=docs.advance(doc)) < lastDocId) {
      bits.set(doc - primeDocRowId);
    }
  }
}","private static void applyFamily(OpenBitSet bits,String family,AtomicReader atomicReader,int primeDocRowId,int numberOfDocsInRow,Bits liveDocs) throws IOException {
  Fields fields=atomicReader.fields();
  Terms terms=fields.terms(BlurConstants.FAMILY);
  TermsEnum iterator=terms.iterator(null);
  BytesRef text=new BytesRef(family);
  int lastDocId=primeDocRowId + numberOfDocsInRow;
  if (iterator.seekExact(text,true)) {
    DocsEnum docs=iterator.docs(liveDocs,null,DocsEnum.FLAG_NONE);
    int doc=primeDocRowId;
    while ((doc=docs.advance(doc)) < lastDocId) {
      bits.set(doc - primeDocRowId);
    }
  }
}",0.957085020242915
82202,"@Override protected RowMutation mutate(RowMutation rowMutation){
  List<RecordMutation> mutations=rowMutation.getRecordMutations();
  for (  RecordMutation mutation : mutations) {
    Record record=mutation.getRecord();
    record.addToColumns(new Column(""String_Node_Str"",READ));
    record.addToColumns(new Column(""String_Node_Str"",DISCOVER));
  }
  return rowMutation;
}","@Override protected RowMutation mutate(RowMutation rowMutation){
  List<RecordMutation> mutations=rowMutation.getRecordMutations();
  for (  RecordMutation mutation : mutations) {
    Record record=mutation.getRecord();
    record.addToColumns(new Column(ACL_READ,READ));
    record.addToColumns(new Column(ACL_DISCOVER,DISCOVER));
  }
  return rowMutation;
}",0.9289617486338798
82203,"@Override protected void postTableCreate(TableDescriptor tableDescriptor,Iface client){
  String name=tableDescriptor.getName();
  try {
    client.addColumnDefinition(name,new ColumnDefinition(""String_Node_Str"",""String_Node_Str"",null,false,""String_Node_Str"",null,false));
    client.addColumnDefinition(name,new ColumnDefinition(""String_Node_Str"",""String_Node_Str"",null,false,""String_Node_Str"",null,false));
  }
 catch (  BlurException e) {
    throw new RuntimeException(e);
  }
catch (  TException e) {
    throw new RuntimeException(e);
  }
}","@Override protected void postTableCreate(TableDescriptor tableDescriptor,Iface client){
  String name=tableDescriptor.getName();
  try {
    client.addColumnDefinition(name,new ColumnDefinition(TEST,ACL_READ,null,false,ACL_READ,null,false));
    client.addColumnDefinition(name,new ColumnDefinition(TEST,ACL_DISCOVER,null,false,ACL_DISCOVER,null,false));
  }
 catch (  BlurException e) {
    throw new RuntimeException(e);
  }
catch (  TException e) {
    throw new RuntimeException(e);
  }
}",0.5568400770712909
82204,"public static SegmentReader getSegmentReader(IndexReader indexReader) throws IOException {
  if (indexReader instanceof SegmentReader) {
    return (SegmentReader)indexReader;
  }
  if (indexReader instanceof ExitableFilterAtomicReader) {
    ExitableFilterAtomicReader exitableFilterAtomicReader=(ExitableFilterAtomicReader)indexReader;
    AtomicReader originalReader=exitableFilterAtomicReader.getOriginalReader();
    return getSegmentReader(originalReader);
  }
  if (indexReader instanceof SecureAtomicReader) {
    SecureAtomicReader secureAtomicReader=(SecureAtomicReader)indexReader;
    AtomicReader originalReader=secureAtomicReader.getOriginalReader();
    return getSegmentReader(originalReader);
  }
  throw new IOException(""String_Node_Str"");
}","/** 
 * WARNING!!! This method can bypass access control. Use only when you are sure you know what you are doing!
 * @param indexReader
 * @return
 * @throws IOException
 */
public static SegmentReader getSegmentReader(IndexReader indexReader) throws IOException {
  if (indexReader instanceof SegmentReader) {
    return (SegmentReader)indexReader;
  }
  if (indexReader instanceof ExitableFilterAtomicReader) {
    ExitableFilterAtomicReader exitableFilterAtomicReader=(ExitableFilterAtomicReader)indexReader;
    AtomicReader originalReader=exitableFilterAtomicReader.getOriginalReader();
    return getSegmentReader(originalReader);
  }
  if (indexReader instanceof SecureAtomicReader) {
    SecureAtomicReader secureAtomicReader=(SecureAtomicReader)indexReader;
    AtomicReader originalReader=secureAtomicReader.getOriginalReader();
    return getSegmentReader(originalReader);
  }
  throw new IOException(""String_Node_Str"");
}",0.0721040189125295
82205,"public static File getDefaultTmpPath(String propName) throws IOException {
  String blurHomeDir=getBlurHomeDir();
  File tmp;
  if (blurHomeDir == null) {
    tmp=getTmpDir();
    LOG.info(""String_Node_Str"",tmp);
  }
 else {
    tmp=new File(blurHomeDir,""String_Node_Str"");
    LOG.info(""String_Node_Str"",tmp);
    if (!tmp.mkdirs()) {
      tmp=getTmpDir();
      LOG.info(""String_Node_Str"",tmp);
    }
  }
  if (!tmp.exists() && !tmp.mkdirs()) {
    throw new IOException(""String_Node_Str"" + tmp.toURI() + ""String_Node_Str""+ propName+ ""String_Node_Str"");
  }
  File file=new File(tmp,UUID.randomUUID().toString());
  if (!file.createNewFile()) {
    throw new IOException(""String_Node_Str"" + tmp.toURI() + ""String_Node_Str"");
  }
  file.delete();
  return tmp;
}","public static File getDefaultTmpPath(String propName) throws IOException {
  String blurHomeDir=getBlurHomeDir();
  File tmp;
  if (blurHomeDir == null) {
    tmp=getTmpDir();
    LOG.info(""String_Node_Str"",tmp);
  }
 else {
    tmp=new File(blurHomeDir,""String_Node_Str"");
    LOG.info(""String_Node_Str"",tmp);
    if (!tmp.exists() && !tmp.mkdirs()) {
      tmp=getTmpDir();
      LOG.info(""String_Node_Str"",tmp);
    }
  }
  if (!tmp.exists() && !tmp.mkdirs()) {
    throw new IOException(""String_Node_Str"" + tmp.toURI() + ""String_Node_Str""+ propName+ ""String_Node_Str"");
  }
  File file=new File(tmp,UUID.randomUUID().toString());
  if (!file.createNewFile()) {
    throw new IOException(""String_Node_Str"" + tmp.toURI() + ""String_Node_Str"");
  }
  file.delete();
  return tmp;
}",0.9889967637540452
82206,"private IndexReader getReader() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory directory=new RAMDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer());
  IndexWriter writer=new IndexWriter(directory,conf);
  Document doc=new Document();
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  Document doc1=new Document();
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  writer.addDocument(doc);
  writer.addDocument(doc1);
  writer.close();
  return DirectoryReader.open(directory);
}","private IndexReader getReader() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory directory=new RAMDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer());
  IndexWriter writer=new IndexWriter(directory,conf);
  Document doc=new Document();
  doc.add(new StringField(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE,Store.NO));
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  Document doc1=new Document();
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  writer.addDocument(doc);
  writer.addDocument(doc1);
  writer.close();
  return DirectoryReader.open(directory);
}",0.9376693766937668
82207,"private IndexReader getReaderWithDocsHavingFamily() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory directory=new RAMDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer());
  IndexWriter writer=new IndexWriter(directory,conf);
  Document doc=new Document();
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  Document doc1=new Document();
  doc1.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc1.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  writer.addDocument(doc);
  writer.addDocument(doc1);
  writer.close();
  return DirectoryReader.open(directory);
}","private IndexReader getReaderWithDocsHavingFamily() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory directory=new RAMDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer());
  IndexWriter writer=new IndexWriter(directory,conf);
  Document doc=new Document();
  doc.add(new StringField(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE,Store.NO));
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  Document doc1=new Document();
  doc1.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc1.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  writer.addDocument(doc);
  writer.addDocument(doc1);
  writer.close();
  return DirectoryReader.open(directory);
}",0.9449101796407186
82208,"/** 
 * The way this method is called via warm up methods the likelihood of creating multiple bitsets during a race condition is very low, that's why this method is not synced.
 */
public static OpenBitSet getPrimeDocBitSet(Term primeDocTerm,AtomicReader providedReader) throws IOException {
  AtomicReader reader=AtomicReaderUtil.getSegmentReader(providedReader);
  final Object key=reader.getCoreCacheKey();
  final Map<Object,OpenBitSet> primeDocMap=getPrimeDocMap(primeDocTerm);
  OpenBitSet bitSet=primeDocMap.get(key);
  if (bitSet == null) {
synchronized (reader) {
      reader.addReaderClosedListener(new ReaderClosedListener(){
        @Override public void onClose(        IndexReader reader){
          LOG.debug(""String_Node_Str"" + primeDocMap.size() + ""String_Node_Str""+ reader+ ""String_Node_Str"");
          OpenBitSet openBitSet=primeDocMap.remove(key);
          if (openBitSet == null) {
            LOG.warn(""String_Node_Str"",key);
          }
        }
      }
);
      LOG.debug(""String_Node_Str"" + reader + ""String_Node_Str""+ primeDocMap.size()+ ""String_Node_Str"");
      final OpenBitSet bs=new OpenBitSet(reader.maxDoc());
      DocsEnum termDocsEnum=reader.termDocsEnum(primeDocTerm);
      if (termDocsEnum == null) {
        return bs;
      }
      int docFreq=reader.docFreq(primeDocTerm);
      int doc;
      int count=0;
      while ((doc=termDocsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        bs.fastSet(doc);
        count++;
      }
      if (count == docFreq) {
        primeDocMap.put(key,bs);
      }
 else {
        LOG.info(""String_Node_Str"",reader,count,docFreq);
      }
      return bs;
    }
  }
  return bitSet;
}","/** 
 * The way this method is called via warm up methods the likelihood of creating multiple bitsets during a race condition is very low, that's why this method is not synced.
 */
public static OpenBitSet getPrimeDocBitSet(Term primeDocTerm,AtomicReader providedReader) throws IOException {
  AtomicReader reader=AtomicReaderUtil.getSegmentReader(providedReader);
  final Object key=reader.getCoreCacheKey();
  final Map<Object,OpenBitSet> primeDocMap=getPrimeDocMap(primeDocTerm);
  OpenBitSet bitSet=primeDocMap.get(key);
  if (bitSet == null) {
synchronized (reader) {
      reader.addReaderClosedListener(new ReaderClosedListener(){
        @Override public void onClose(        IndexReader reader){
          LOG.debug(""String_Node_Str"" + primeDocMap.size() + ""String_Node_Str""+ reader+ ""String_Node_Str"");
          OpenBitSet openBitSet=primeDocMap.remove(key);
          if (openBitSet == null) {
            LOG.warn(""String_Node_Str"",key);
          }
        }
      }
);
      LOG.debug(""String_Node_Str"" + reader + ""String_Node_Str""+ primeDocMap.size()+ ""String_Node_Str"");
      final OpenBitSet bs=new OpenBitSet(reader.maxDoc());
      Fields fields=reader.fields();
      if (fields == null) {
        throw new IOException(""String_Node_Str"");
      }
      Terms terms=fields.terms(primeDocTerm.field());
      if (terms == null) {
        throw new IOException(""String_Node_Str"" + primeDocTerm.field() + ""String_Node_Str"");
      }
      TermsEnum termsEnum=terms.iterator(null);
      if (!termsEnum.seekExact(primeDocTerm.bytes(),true)) {
        throw new IOException(""String_Node_Str"" + primeDocTerm + ""String_Node_Str"");
      }
      DocsEnum docsEnum=termsEnum.docs(null,null);
      int docFreq=reader.docFreq(primeDocTerm);
      int doc;
      int count=0;
      while ((doc=docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        bs.fastSet(doc);
        count++;
      }
      if (count == docFreq) {
        primeDocMap.put(key,bs);
      }
 else {
        LOG.warn(""String_Node_Str"",reader,count,docFreq);
      }
      return bs;
    }
  }
  return bitSet;
}",0.83881230116649
82209,"public void runGisTypeTest() throws IOException, ParseException {
  BaseFieldManager fieldManager=getFieldManager(new NoStopWordStandardAnalyzer());
  setupGisField(fieldManager);
  Record record=new Record();
  record.setFamily(""String_Node_Str"");
  record.setRecordId(""String_Node_Str"");
  record.addToColumns(new Column(""String_Node_Str"",""String_Node_Str""));
  List<Field> fields=fieldManager.getFields(""String_Node_Str"",record);
  IndexWriterConfig conf=new IndexWriterConfig(Version.LUCENE_43,fieldManager.getAnalyzerForIndex());
  IndexWriter writer=new IndexWriter(_dir,conf);
  writer.addDocument(fields);
  writer.close();
  DirectoryReader reader=DirectoryReader.open(_dir);
  IndexSearcher searcher=new IndexSearcher(reader);
  SuperParser parser=new SuperParser(Version.LUCENE_43,fieldManager,true,null,ScoreType.SUPER,new Term(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE));
  Query query=parser.parse(""String_Node_Str"");
  TopDocs topDocs=searcher.search(query,10);
  assertEquals(1,topDocs.totalHits);
  reader.close();
}","public void runGisTypeTest() throws IOException, ParseException {
  BaseFieldManager fieldManager=getFieldManager(new NoStopWordStandardAnalyzer());
  setupGisField(fieldManager);
  Record record=new Record();
  record.setFamily(""String_Node_Str"");
  record.setRecordId(""String_Node_Str"");
  record.addToColumns(new Column(""String_Node_Str"",""String_Node_Str""));
  List<Field> fields=fieldManager.getFields(""String_Node_Str"",record);
  IndexWriterConfig conf=new IndexWriterConfig(Version.LUCENE_43,fieldManager.getAnalyzerForIndex());
  IndexWriter writer=new IndexWriter(_dir,conf);
  fields.add(new StringField(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE,Store.NO));
  writer.addDocument(fields);
  writer.close();
  DirectoryReader reader=DirectoryReader.open(_dir);
  IndexSearcher searcher=new IndexSearcher(reader);
  SuperParser parser=new SuperParser(Version.LUCENE_43,fieldManager,true,null,ScoreType.SUPER,new Term(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE));
  Query query=parser.parse(""String_Node_Str"");
  TopDocs topDocs=searcher.search(query,10);
  assertEquals(1,topDocs.totalHits);
  reader.close();
}",0.7304347826086957
82210,"public void shutdownDfs(){
  if (cluster != null) {
    LOG.info(""String_Node_Str"");
    try {
      cluster.shutdown();
    }
 catch (    Exception e) {
    }
    try {
      FileSystem fs=cluster.getFileSystem();
      if (fs != null) {
        LOG.info(""String_Node_Str"");
        fs.close();
      }
      FileSystem.closeAll();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    ThreadGroup threadGroup=Thread.currentThread().getThreadGroup();
    Thread[] threads=new Thread[100];
    int enumerate=threadGroup.enumerate(threads);
    for (int i=0; i < enumerate; i++) {
      Thread thread=threads[i];
      if (thread.getName().startsWith(""String_Node_Str"")) {
        if (thread.isAlive()) {
          thread.interrupt();
          LOG.info(""String_Node_Str"" + thread.getName() + ""String_Node_Str"");
          Object target=getField(Thread.class,thread,""String_Node_Str"");
          if (target != null) {
            ThreadPoolExecutor e=(ThreadPoolExecutor)getField(ThreadPoolExecutor.class,target,""String_Node_Str"");
            if (e != null) {
              e.shutdownNow();
            }
          }
          try {
            LOG.info(""String_Node_Str"" + thread.getName() + ""String_Node_Str"");
            thread.join();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
}","public void shutdownDfs(){
  if (cluster != null) {
    LOG.info(""String_Node_Str"");
    try {
      cluster.shutdown();
    }
 catch (    Exception e) {
    }
    try {
      FileSystem fs=cluster.getFileSystem();
      if (fs != null) {
        LOG.info(""String_Node_Str"");
        fs.close();
      }
      FileSystem.closeAll();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    ThreadGroup threadGroup=group;
    Thread[] threads=new Thread[100];
    int enumerate=threadGroup.enumerate(threads);
    for (int i=0; i < enumerate; i++) {
      Thread thread=threads[i];
      if (thread.getName().startsWith(""String_Node_Str"")) {
        if (thread.isAlive()) {
          thread.interrupt();
          LOG.info(""String_Node_Str"" + thread.getName() + ""String_Node_Str"");
          Object target=getField(Thread.class,thread,""String_Node_Str"");
          if (target != null) {
            ThreadPoolExecutor e=(ThreadPoolExecutor)getField(ThreadPoolExecutor.class,target,""String_Node_Str"");
            if (e != null) {
              e.shutdownNow();
            }
          }
          try {
            LOG.info(""String_Node_Str"" + thread.getName() + ""String_Node_Str"");
            thread.join();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
}",0.9870689655172412
82211,"public void startBlurCluster(String path,int controllerCount,int shardCount,boolean randomPort,boolean externalProcesses){
  MemoryReporter.enable();
  startDfs(path + ""String_Node_Str"");
  startZooKeeper(path + ""String_Node_Str"",randomPort);
  setupBuffers();
  startControllers(controllerCount,randomPort,externalProcesses);
  startShards(shardCount,randomPort,externalProcesses);
  try {
    waitForSafeModeToExit();
  }
 catch (  BlurException e) {
    throw new RuntimeException(e);
  }
catch (  TException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void startBlurCluster(final String path,final int controllerCount,final int shardCount,final boolean randomPort,final boolean externalProcesses){
  Thread thread=new Thread(group,new Runnable(){
    @Override public void run(){
      MemoryReporter.enable();
      startDfs(path + ""String_Node_Str"");
      startZooKeeper(path + ""String_Node_Str"",randomPort);
      setupBuffers();
      startControllers(controllerCount,randomPort,externalProcesses);
      startShards(shardCount,randomPort,externalProcesses);
      try {
        waitForSafeModeToExit();
      }
 catch (      BlurException e) {
        throw new RuntimeException(e);
      }
catch (      TException e) {
        throw new RuntimeException(e);
      }
catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}",0.794888178913738
82212,"private static List<Connection> getOnlineControllers(BlurConfiguration conf){
  setupZooKeeper(conf);
  return _connections;
}","private static List<Connection> getOnlineControllers(BlurConfiguration conf){
  String zooKeeperConnectionStr=getZooKeeperConnectionStr(conf);
  ZooKeeperConntrollerWatchInfo zooKeeperConntrollerWatchInfo=_zkConnectionInfo.get(zooKeeperConnectionStr);
  if (zooKeeperConntrollerWatchInfo != null) {
    return zooKeeperConntrollerWatchInfo._connections;
  }
  setupZooKeeper(conf);
  zooKeeperConntrollerWatchInfo=_zkConnectionInfo.get(zooKeeperConnectionStr);
  return zooKeeperConntrollerWatchInfo._connections;
}",0.358814352574103
82213,"public static void closeZooKeeper(){
  if (_watchConntrollers != null) {
    try {
      _watchConntrollers.close();
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  if (_zooKeeper != null) {
    try {
      _zooKeeper.close();
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","public static void closeZooKeeper(){
  Collection<ZooKeeperConntrollerWatchInfo> values=_zkConnectionInfo.values();
  for (  ZooKeeperConntrollerWatchInfo zooKeeperConntrollerWatchInfo : values) {
    closeQuietly(zooKeeperConntrollerWatchInfo);
  }
}",0.2285714285714285
82214,"private static void setConnections(List<String> children){
  Set<Connection> goodConnections=new HashSet<Connection>();
  for (  String s : children) {
    Connection connection=new Connection(s);
    goodConnections.add(connection);
    if (!_connections.contains(connection)) {
      _connections.add(connection);
    }
  }
  Set<Connection> badConnections=new HashSet<Connection>();
  for (  Connection c : _connections) {
    if (!goodConnections.contains(c)) {
      badConnections.add(c);
    }
  }
  _connections.removeAll(badConnections);
}","void setConnections(List<String> children){
  Set<Connection> goodConnections=new HashSet<Connection>();
  for (  String s : children) {
    Connection connection=new Connection(s);
    goodConnections.add(connection);
    if (!_connections.contains(connection)) {
      _connections.add(connection);
    }
  }
  Set<Connection> badConnections=new HashSet<Connection>();
  for (  Connection c : _connections) {
    if (!goodConnections.contains(c)) {
      badConnections.add(c);
    }
  }
  _connections.removeAll(badConnections);
}",0.9861239592969472
82215,"private static void setupZooKeeper(BlurConfiguration conf){
  if (_zooKeeper == null) {
    String zkConn=conf.getExpected(BLUR_ZOOKEEPER_CONNECTION);
    int zkSessionTimeout=conf.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
    try {
      _zooKeeper=ZkUtils.newZooKeeper(zkConn,zkSessionTimeout);
      setConnections(_zooKeeper.getChildren(ZookeeperPathConstants.getOnlineControllersPath(),false));
      _watchConntrollers=new WatchChildren(_zooKeeper,ZookeeperPathConstants.getOnlineControllersPath());
      _watchConntrollers.watch(new OnChange(){
        @Override public void action(        List<String> children){
          setConnections(children);
        }
      }
);
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          closeZooKeeper();
        }
      }
));
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}","private static synchronized void setupZooKeeper(BlurConfiguration conf){
  String zooKeeperConnectionStr=getZooKeeperConnectionStr(conf);
  ZooKeeperConntrollerWatchInfo zooKeeperConntrollerWatchInfo=_zkConnectionInfo.get(zooKeeperConnectionStr);
  if (zooKeeperConntrollerWatchInfo == null) {
    try {
      final ZooKeeperConntrollerWatchInfo zkcwi=new ZooKeeperConntrollerWatchInfo(conf);
      _zkConnectionInfo.put(zooKeeperConnectionStr,zkcwi);
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          closeQuietly(zkcwi);
        }
      }
));
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}",0.3023395320935813
82216,"private static synchronized BlurConfiguration getBlurConfiguration() throws IOException {
  if (_blurConfiguration == null) {
    _blurConfiguration=new BlurConfiguration();
  }
  return _blurConfiguration;
}","private static synchronized BlurConfiguration getBlurConfiguration() throws IOException {
  if (_defaultBlurConfiguration == null) {
    _defaultBlurConfiguration=new BlurConfiguration();
  }
  return _defaultBlurConfiguration;
}",0.9382151029748284
82217,"@Override public void run(){
  closeZooKeeper();
}","@Override public void run(){
  closeQuietly(zkcwi);
}",0.8155339805825242
82218,"@Override public void deleteFile(String name) throws IOException {
  Long length=_files.remove(name);
  if (length != null) {
    LOG.debug(""String_Node_Str"",name,length);
    long blocks=length / _blockSize;
    _store.delete(new BytesRef(name + LENGTH));
    _store.delete(new BytesRef(name + LASTMOD));
    for (long l=0; l <= blocks; l++) {
      _store.delete(new BytesRef(name + ""String_Node_Str"" + l));
    }
  }
}","@Override public void deleteFile(String name) throws IOException {
  Long length=_files.remove(name);
  if (length != null) {
    LOG.debug(""String_Node_Str"",name,length);
    long blocks=length / _blockSize;
    _store.delete(new BytesRef(name + LENGTH));
    _store.delete(new BytesRef(name + LASTMOD));
    for (long l=0; l <= blocks; l++) {
      _store.delete(new BytesRef(name + ""String_Node_Str"" + l));
    }
    writeFileNamesAndSync();
  }
}",0.9667049368541906
82219,"@Override public void sync(Collection<String> names) throws IOException {
  writeFilesNames();
  _store.sync();
  if (shouldPerformGC()) {
    gc();
  }
}","@Override public void sync(Collection<String> names) throws IOException {
  writeFileNamesAndSync();
  if (shouldPerformGC()) {
    gc();
  }
}",0.936026936026936
82220,"public FastHdfsKeyValueDirectory(Timer hdfsKeyValueTimer,Configuration configuration,Path path) throws IOException {
  _path=path;
  _store=new HdfsKeyValueStore(hdfsKeyValueTimer,configuration,path);
  BytesRef value=new BytesRef();
  if (_store.get(FILES,value)) {
    String filesString=value.utf8ToString();
    String[] files=filesString.split(""String_Node_Str"" + SEP);
    for (    String file : files) {
      if (file.isEmpty()) {
        continue;
      }
      BytesRef key=new BytesRef(file + LENGTH);
      if (_store.get(key,value)) {
        _files.put(file,Long.parseLong(value.utf8ToString()));
      }
 else {
        LOG.warn(""String_Node_Str"",file);
      }
    }
  }
  setLockFactory(NoLockFactory.getNoLockFactory());
  writeFilesNames();
  gc();
}","public FastHdfsKeyValueDirectory(Timer hdfsKeyValueTimer,Configuration configuration,Path path) throws IOException {
  _path=path;
  _store=new HdfsKeyValueStore(hdfsKeyValueTimer,configuration,path);
  BytesRef value=new BytesRef();
  if (_store.get(FILES,value)) {
    String filesString=value.utf8ToString();
    String[] files=filesString.split(""String_Node_Str"" + SEP);
    for (    String file : files) {
      if (file.isEmpty()) {
        throw new IOException(""String_Node_Str"" + filesString + ""String_Node_Str"");
      }
      BytesRef key=new BytesRef(file + LENGTH);
      if (_store.get(key,value)) {
        _files.put(file,Long.parseLong(value.utf8ToString()));
      }
 else {
        throw new IOException(""String_Node_Str"" + file + ""String_Node_Str"");
      }
    }
  }
  setLockFactory(NoLockFactory.getNoLockFactory());
  writeFilesNames();
  gc();
}",0.9151921903599756
82221,"private void writeFilesNames() throws IOException {
  StringBuilder builder=new StringBuilder();
  for (  String n : _files.keySet()) {
    if (builder.length() != 0) {
      builder.append(SEP);
    }
    builder.append(n);
  }
  _store.put(FILES,new BytesRef(builder.toString()));
}","private void writeFilesNames() throws IOException {
  StringBuilder builder=new StringBuilder();
  Set<String> fileNames=new TreeSet<String>(_files.keySet());
  for (  String n : fileNames) {
    if (builder.length() != 0) {
      builder.append(SEP);
    }
    builder.append(n);
  }
  _store.put(FILES,new BytesRef(builder.toString()));
}",0.8621794871794872
82222,"@Override public String[] listAll() throws IOException {
  Set<String> fileNames=new HashSet<String>(_files.keySet());
  fileNames.remove(null);
  return fileNames.toArray(new String[fileNames.size()]);
}","@Override public String[] listAll() throws IOException {
  Set<String> fileNames=new HashSet<String>(_files.keySet());
  return fileNames.toArray(new String[fileNames.size()]);
}",0.9319371727748692
82223,"public void startDfs(Configuration conf,boolean format,String path){
  String perm;
  Path p=new Path(new File(""String_Node_Str"").getAbsolutePath());
  try {
    FileSystem fileSystem=p.getFileSystem(conf);
    FileStatus fileStatus=fileSystem.getFileStatus(p);
    FsPermission permission=fileStatus.getPermission();
    perm=permission.getUserAction().ordinal() + ""String_Node_Str"" + permission.getGroupAction().ordinal()+ ""String_Node_Str""+ permission.getOtherAction().ordinal();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  LOG.info(""String_Node_Str"" + perm);
  conf.set(""String_Node_Str"",perm);
  System.setProperty(""String_Node_Str"",path);
  try {
    cluster=new MiniDFSCluster(conf,1,true,(String[])null);
    cluster.waitActive();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}","public void startDfs(Configuration conf,boolean format,String path){
  String perm;
  Path p=new Path(new File(path).getAbsolutePath());
  try {
    FileSystem fileSystem=p.getFileSystem(conf);
    if (!fileSystem.exists(p)) {
      if (!fileSystem.mkdirs(p)) {
        throw new RuntimeException(""String_Node_Str"" + path + ""String_Node_Str"");
      }
    }
    FileStatus fileStatus=fileSystem.getFileStatus(p);
    FsPermission permission=fileStatus.getPermission();
    perm=permission.getUserAction().ordinal() + ""String_Node_Str"" + permission.getGroupAction().ordinal()+ ""String_Node_Str""+ permission.getOtherAction().ordinal();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  LOG.info(""String_Node_Str"" + perm);
  conf.set(""String_Node_Str"",perm);
  System.setProperty(""String_Node_Str"",path);
  try {
    cluster=new MiniDFSCluster(conf,1,true,(String[])null);
    cluster.waitActive();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}",0.9023746701846964
82224,"@Override public int compareTo(MergeWork o){
  return Long.compare(_size,o._size);
}","@Override public int compareTo(MergeWork o){
  if (_size == o._size) {
    return 0;
  }
  return _size < o._size ? -1 : 1;
}",0.6220095693779905
82225,"@Override public void run(){
  _writeLock.lock();
  try {
    if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
      LOG.info(""String_Node_Str"",_path);
      try {
        _output.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
 finally {
        _output=null;
      }
      try {
        cleanupOldFiles();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
  finally {
    _writeLock.unlock();
  }
}","@Override public void run(){
  _writeLock.lock();
  try {
    if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
      try {
        cleanupOldFiles();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
      LOG.info(""String_Node_Str"",_path);
      try {
        _output.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
 finally {
        _output=null;
      }
    }
  }
  finally {
    _writeLock.unlock();
  }
}",0.722735674676525
82226,"private void addToTimer(Timer hdfsKeyValueTimer){
  _writeLock.lock();
  try {
    try {
      cleanupOldFiles();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  finally {
    _writeLock.unlock();
  }
  hdfsKeyValueTimer.schedule(new TimerTask(){
    @Override public void run(){
      _writeLock.lock();
      try {
        if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
          LOG.info(""String_Node_Str"",_path);
          try {
            _output.close();
          }
 catch (          IOException e) {
            LOG.error(""String_Node_Str"",e);
          }
 finally {
            _output=null;
          }
          try {
            cleanupOldFiles();
          }
 catch (          IOException e) {
            LOG.error(""String_Node_Str"",e);
          }
        }
      }
  finally {
        _writeLock.unlock();
      }
    }
  }
,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
}","private void addToTimer(Timer hdfsKeyValueTimer){
  _writeLock.lock();
  try {
    try {
      cleanupOldFiles();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  finally {
    _writeLock.unlock();
  }
  hdfsKeyValueTimer.schedule(new TimerTask(){
    @Override public void run(){
      _writeLock.lock();
      try {
        if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
          try {
            cleanupOldFiles();
          }
 catch (          IOException e) {
            LOG.error(""String_Node_Str"",e);
          }
          LOG.info(""String_Node_Str"",_path);
          try {
            _output.close();
          }
 catch (          IOException e) {
            LOG.error(""String_Node_Str"",e);
          }
 finally {
            _output=null;
          }
        }
      }
  finally {
        _writeLock.unlock();
      }
    }
  }
,DAEMON_POLL_TIME,DAEMON_POLL_TIME);
}",0.8402489626556017
82227,"public Parameter(Object name,Object value){
  _name=name;
  _value=value;
}","public Parameter(String name,Object value){
  _name=name;
  _value=value;
}",0.9333333333333332
82228,"public JSONObject toJsonObject() throws JSONException {
  JSONObject jsonObject=new JSONObject();
  jsonObject.put(""String_Node_Str"",_id);
  jsonObject.put(""String_Node_Str"",_traceScope);
  jsonObject.put(""String_Node_Str"",_name);
  jsonObject.put(""String_Node_Str"",_threadName);
  jsonObject.put(""String_Node_Str"",(_ended - _start));
  jsonObject.put(""String_Node_Str"",_start);
  jsonObject.put(""String_Node_Str"",_ended);
  if (_traceCollector != null) {
    jsonObject.put(""String_Node_Str"",_traceCollector.toJsonObject());
  }
  if (_parameters != null) {
    jsonObject.put(""String_Node_Str"",getParametersJsonObject());
  }
  return jsonObject;
}","public JSONObject toJsonObject() throws JSONException {
  JSONObject jsonObject=new JSONObject();
  jsonObject.put(""String_Node_Str"",_id);
  jsonObject.put(""String_Node_Str"",_traceScope);
  jsonObject.put(""String_Node_Str"",_name);
  jsonObject.put(""String_Node_Str"",_threadName);
  jsonObject.put(""String_Node_Str"",(_ended - _start));
  jsonObject.put(""String_Node_Str"",_start);
  jsonObject.put(""String_Node_Str"",_ended);
  if (_traceCollector != null) {
    jsonObject.put(""String_Node_Str"",_traceCollector.toJsonObject());
  }
  if (_parameters != null) {
    jsonObject.put(""String_Node_Str"",getParametersJSONArray());
  }
  return jsonObject;
}",0.9869130100076984
82229,"private String toString(Object o){
  if (o == null) {
    return null;
  }
  return o.toString();
}","@Override public String toString(){
  return ""String_Node_Str"" + _name + ""String_Node_Str""+ _id+ ""String_Node_Str""+ _threadName+ ""String_Node_Str""+ _start+ ""String_Node_Str""+ (_ended - _start)+ ""String_Node_Str"";
}",0.1853035143769968
82230,"public BaseCommandManager(String tmpPath,String commandPath,int workerThreadCount,int driverThreadCount,long connectionTimeout,Configuration configuration) throws IOException {
  _configuration=configuration;
  lookForCommandsToRegisterInClassPath();
  _tmpPath=tmpPath;
  _commandPath=commandPath;
  _executorService=Executors.newThreadPool(""String_Node_Str"",workerThreadCount);
  _executorServiceDriver=Executors.newThreadPool(""String_Node_Str"",driverThreadCount);
  _connectionTimeout=connectionTimeout / 2;
  _timer=new Timer(""String_Node_Str"",true);
  _timer.schedule(getTimerTaskForRemovalOfOldCommands(),_pollingPeriod,_pollingPeriod);
  if (_tmpPath == null || _commandPath == null) {
    LOG.info(""String_Node_Str"",_tmpPath,_commandPath);
  }
 else {
    loadNewCommandsFromCommandPath();
    _timer.schedule(getNewCommandTimerTask(),_pollingPeriod,_pollingPeriod);
  }
}","public BaseCommandManager(File tmpPath,String commandPath,int workerThreadCount,int driverThreadCount,long connectionTimeout,Configuration configuration) throws IOException {
  _configuration=configuration;
  lookForCommandsToRegisterInClassPath();
  _tmpPath=tmpPath;
  _commandPath=commandPath;
  _executorService=Executors.newThreadPool(""String_Node_Str"",workerThreadCount);
  _executorServiceDriver=Executors.newThreadPool(""String_Node_Str"",driverThreadCount);
  _connectionTimeout=connectionTimeout / 2;
  _timer=new Timer(""String_Node_Str"",true);
  _timer.schedule(getTimerTaskForRemovalOfOldCommands(),_pollingPeriod,_pollingPeriod);
  if (_tmpPath == null || _commandPath == null) {
    LOG.info(""String_Node_Str"",_tmpPath,_commandPath);
  }
 else {
    loadNewCommandsFromCommandPath();
    _timer.schedule(getNewCommandTimerTask(),_pollingPeriod,_pollingPeriod);
  }
}",0.994311717861206
82231,"public ControllerCommandManager(String tmpPath,String commandPath,int workerThreadCount,int driverThreadCount,long connectionTimeout,Configuration configuration) throws IOException {
  super(tmpPath,commandPath,workerThreadCount,driverThreadCount,connectionTimeout,configuration);
}","public ControllerCommandManager(File tmpPath,String commandPath,int workerThreadCount,int driverThreadCount,long connectionTimeout,Configuration configuration) throws IOException {
  super(tmpPath,commandPath,workerThreadCount,driverThreadCount,connectionTimeout,configuration);
}",0.98220640569395
82232,"public ShardCommandManager(IndexServer indexServer,String tmpPath,String commandPath,int workerThreadCount,int driverThreadCount,long connectionTimeout,Configuration configuration) throws IOException {
  super(tmpPath,commandPath,workerThreadCount,driverThreadCount,connectionTimeout,configuration);
  _indexServer=indexServer;
}","public ShardCommandManager(IndexServer indexServer,File tmpPath,String commandPath,int workerThreadCount,int driverThreadCount,long connectionTimeout,Configuration configuration) throws IOException {
  super(tmpPath,commandPath,workerThreadCount,driverThreadCount,connectionTimeout,configuration);
  _indexServer=indexServer;
}",0.9847560975609756
82233,"public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration) throws Exception {
  Thread.setDefaultUncaughtExceptionHandler(new SimpleUncaughtExceptionHandler());
  String bindAddress=configuration.get(BLUR_CONTROLLER_BIND_ADDRESS);
  int configBindPort=configuration.getInt(BLUR_CONTROLLER_BIND_PORT,-1);
  int instanceBindPort=configBindPort + serverIndex;
  if (configBindPort == 0) {
    instanceBindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,instanceBindPort);
  if (configBindPort == 0) {
    instanceBindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + instanceBindPort);
  String nodeName=getNodeName(configuration,BLUR_CONTROLLER_HOSTNAME);
  nodeName=nodeName + ""String_Node_Str"" + instanceBindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  BlurUtil.setupZookeeper(zooKeeper,null);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration);
  int timeout=configuration.getInt(BLUR_CONTROLLER_SHARD_CONNECTION_TIMEOUT,60000);
  BlurControllerServer.BlurClient client=new BlurControllerServer.BlurClientRemote(timeout);
  String tmpPath=configuration.get(BLUR_TMP_PATH,getDefaultTmpPath(BLUR_TMP_PATH));
  int numberOfControllerWorkerCommandThreads=configuration.getInt(BLUR_CONTROLLER_COMMAND_WORKER_THREADS,16);
  int numberOfControllerDriverCommandThreads=configuration.getInt(BLUR_CONTROLLER_COMMAND_DRIVER_THREADS,16);
  String commandPath=configuration.get(BLUR_COMMAND_LIB_PATH,getCommandLibPath());
  Configuration config=new Configuration();
  final ControllerCommandManager controllerCommandManager=new ControllerCommandManager(tmpPath,commandPath,numberOfControllerWorkerCommandThreads,numberOfControllerDriverCommandThreads,Connection.DEFAULT_TIMEOUT,config);
  final BlurControllerServer controllerServer=new BlurControllerServer();
  controllerServer.setClient(client);
  controllerServer.setCommandManager(controllerCommandManager);
  controllerServer.setClusterStatus(clusterStatus);
  controllerServer.setZookeeper(zooKeeper);
  controllerServer.setNodeName(nodeName);
  controllerServer.setRemoteFetchCount(configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100));
  controllerServer.setQueryChecker(queryChecker);
  controllerServer.setThreadCount(configuration.getInt(BLUR_CONTROLLER_SERVER_REMOTE_THREAD_COUNT,64));
  controllerServer.setMaxFetchRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_FETCH_RETRIES,3));
  controllerServer.setMaxMutateRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_MUTATE_RETRIES,3));
  controllerServer.setMaxDefaultRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_DEFAULT_RETRIES,3));
  controllerServer.setFetchDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_FETCH_DELAY,500));
  controllerServer.setMutateDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MUTATE_DELAY,500));
  controllerServer.setDefaultDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_DEFAULT_DELAY,500));
  controllerServer.setMaxFetchDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_FETCH_DELAY,2000));
  controllerServer.setMaxMutateDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_MUTATE_DELAY,2000));
  controllerServer.setMaxDefaultDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_DEFAULT_DELAY,2000));
  controllerServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  controllerServer.setConfiguration(configuration);
  controllerServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,controllerServer,false);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,true);
  iface=BlurUtil.runWithUser(iface,true);
  iface=BlurUtil.runTrace(iface,true);
  iface=BlurUtil.lastChanceErrorHandling(iface,Iface.class);
  int threadCount=configuration.getInt(BLUR_CONTROLLER_SERVER_THRIFT_THREAD_COUNT,32);
  ControllerServerEventHandler eventHandler=new ControllerServerEventHandler();
  final ThriftBlurControllerServer server=new ThriftBlurControllerServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setEventHandler(eventHandler);
  server.setIface(iface);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_CONTROLLER_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_CONTROLLER_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_CONTROLLER_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(configuration.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,BLUR_THRIFT_DEFAULT_MAX_FRAME_SIZE));
  int configGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_CONTROLLER_PORT));
  int instanceGuiPort=configGuiPort + serverIndex;
  if (configGuiPort == 0) {
    instanceGuiPort=0;
  }
  final HttpJettyServer httpServer;
  if (configGuiPort >= 0) {
    httpServer=new HttpJettyServer(HttpJettyServer.class,instanceGuiPort);
    int port=httpServer.getLocalPort();
    configuration.setInt(BLUR_HTTP_STATUS_RUNNING_PORT,port);
  }
 else {
    httpServer=null;
  }
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
  }
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(controllerCommandManager,traceStorage,server,controllerServer,clusterStatus,zooKeeper,threadWatcher,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}","public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration) throws Exception {
  Thread.setDefaultUncaughtExceptionHandler(new SimpleUncaughtExceptionHandler());
  String bindAddress=configuration.get(BLUR_CONTROLLER_BIND_ADDRESS);
  int configBindPort=configuration.getInt(BLUR_CONTROLLER_BIND_PORT,-1);
  int instanceBindPort=configBindPort + serverIndex;
  if (configBindPort == 0) {
    instanceBindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,instanceBindPort);
  if (configBindPort == 0) {
    instanceBindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + instanceBindPort);
  String nodeName=getNodeName(configuration,BLUR_CONTROLLER_HOSTNAME);
  nodeName=nodeName + ""String_Node_Str"" + instanceBindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  BlurUtil.setupZookeeper(zooKeeper,null);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration);
  int timeout=configuration.getInt(BLUR_CONTROLLER_SHARD_CONNECTION_TIMEOUT,60000);
  BlurControllerServer.BlurClient client=new BlurControllerServer.BlurClientRemote(timeout);
  File defaultTmpPath=getDefaultTmpPath(BLUR_TMP_PATH);
  String configTmpPath=configuration.get(BLUR_TMP_PATH);
  File tmpPath;
  if (!(configTmpPath == null || configTmpPath.isEmpty())) {
    tmpPath=new File(configTmpPath);
  }
 else {
    tmpPath=defaultTmpPath;
  }
  int numberOfControllerWorkerCommandThreads=configuration.getInt(BLUR_CONTROLLER_COMMAND_WORKER_THREADS,16);
  int numberOfControllerDriverCommandThreads=configuration.getInt(BLUR_CONTROLLER_COMMAND_DRIVER_THREADS,16);
  String commandPath=configuration.get(BLUR_COMMAND_LIB_PATH,getCommandLibPath());
  Configuration config=new Configuration();
  final ControllerCommandManager controllerCommandManager=new ControllerCommandManager(tmpPath,commandPath,numberOfControllerWorkerCommandThreads,numberOfControllerDriverCommandThreads,Connection.DEFAULT_TIMEOUT,config);
  final BlurControllerServer controllerServer=new BlurControllerServer();
  controllerServer.setClient(client);
  controllerServer.setCommandManager(controllerCommandManager);
  controllerServer.setClusterStatus(clusterStatus);
  controllerServer.setZookeeper(zooKeeper);
  controllerServer.setNodeName(nodeName);
  controllerServer.setRemoteFetchCount(configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100));
  controllerServer.setQueryChecker(queryChecker);
  controllerServer.setThreadCount(configuration.getInt(BLUR_CONTROLLER_SERVER_REMOTE_THREAD_COUNT,64));
  controllerServer.setMaxFetchRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_FETCH_RETRIES,3));
  controllerServer.setMaxMutateRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_MUTATE_RETRIES,3));
  controllerServer.setMaxDefaultRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_DEFAULT_RETRIES,3));
  controllerServer.setFetchDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_FETCH_DELAY,500));
  controllerServer.setMutateDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MUTATE_DELAY,500));
  controllerServer.setDefaultDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_DEFAULT_DELAY,500));
  controllerServer.setMaxFetchDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_FETCH_DELAY,2000));
  controllerServer.setMaxMutateDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_MUTATE_DELAY,2000));
  controllerServer.setMaxDefaultDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_DEFAULT_DELAY,2000));
  controllerServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  controllerServer.setConfiguration(configuration);
  controllerServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,controllerServer,false);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,true);
  iface=BlurUtil.runWithUser(iface,true);
  iface=BlurUtil.runTrace(iface,true);
  iface=BlurUtil.lastChanceErrorHandling(iface,Iface.class);
  int threadCount=configuration.getInt(BLUR_CONTROLLER_SERVER_THRIFT_THREAD_COUNT,32);
  ControllerServerEventHandler eventHandler=new ControllerServerEventHandler();
  final ThriftBlurControllerServer server=new ThriftBlurControllerServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setEventHandler(eventHandler);
  server.setIface(iface);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_CONTROLLER_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_CONTROLLER_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_CONTROLLER_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(configuration.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,BLUR_THRIFT_DEFAULT_MAX_FRAME_SIZE));
  int configGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_CONTROLLER_PORT));
  int instanceGuiPort=configGuiPort + serverIndex;
  if (configGuiPort == 0) {
    instanceGuiPort=0;
  }
  final HttpJettyServer httpServer;
  if (configGuiPort >= 0) {
    httpServer=new HttpJettyServer(HttpJettyServer.class,instanceGuiPort);
    int port=httpServer.getLocalPort();
    configuration.setInt(BLUR_HTTP_STATUS_RUNNING_PORT,port);
  }
 else {
    httpServer=null;
  }
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
  }
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(controllerCommandManager,traceStorage,server,controllerServer,clusterStatus,zooKeeper,threadWatcher,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}",0.9791297651135926
82234,"public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration) throws Exception {
  Configuration config=new Configuration();
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int configBindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  int instanceBindPort=configBindPort + serverIndex;
  if (configBindPort == 0) {
    instanceBindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,instanceBindPort);
  if (configBindPort == 0) {
    instanceBindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  final BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + instanceBindPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + instanceBindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  BlurUtil.setupZookeeper(zooKeeper,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration);
  final BlurIndexRefresher refresher=new BlurIndexRefresher();
  BlurFilterCache filterCache=getFilterCache(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  int minimumNumberOfNodesBeforeExitingSafeMode=configuration.getInt(BLUR_SHARD_SERVER_MINIMUM_BEFORE_SAFEMODE_EXIT,0);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_INTERNAL_SEARCH_THREAD_COUNT,16);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,maxMergeThreads,internalSearchThreads,minimumNumberOfNodesBeforeExitingSafeMode);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int remoteFetchCount=configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,110);
  if (fetchCount + 1 <= remoteFetchCount) {
    LOG.warn(""String_Node_Str"" + BLUR_SHARD_FETCHCOUNT + ""String_Node_Str""+ fetchCount+ ""String_Node_Str""+ BLUR_CONTROLLER_REMOTE_FETCH_COUNT+ ""String_Node_Str""+ remoteFetchCount+ ""String_Node_Str"");
  }
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  int cacheSize=configuration.getInt(BLUR_SHARD_DEEP_PAGING_CACHE_SIZE,1000);
  DeepPagingCache deepPagingCache=new DeepPagingCache(cacheSize);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,statusCleanupTimerDelay,facetThreadCount,deepPagingCache);
  String tmpPath=configuration.get(BLUR_TMP_PATH,getDefaultTmpPath(BLUR_TMP_PATH));
  int numberOfShardWorkerCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_WORKER_THREADS,16);
  int numberOfShardDriverCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_DRIVER_THREADS,16);
  String commandPath=configuration.get(BLUR_COMMAND_LIB_PATH,getCommandLibPath());
  final ShardCommandManager commandManager=new ShardCommandManager(indexServer,tmpPath,commandPath,numberOfShardWorkerCommandThreads,numberOfShardDriverCommandThreads,Connection.DEFAULT_TIMEOUT,config);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setCommandManager(commandManager);
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,shardServer,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  iface=BlurUtil.lastChanceErrorHandling(iface,Iface.class);
  int configGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  int instanceGuiPort=configGuiPort + serverIndex;
  if (configGuiPort == 0) {
    instanceGuiPort=0;
  }
  final HttpJettyServer httpServer;
  if (configGuiPort >= 0) {
    httpServer=new HttpJettyServer(HttpJettyServer.class,instanceGuiPort);
    int port=httpServer.getLocalPort();
    configuration.setInt(BLUR_HTTP_STATUS_RUNNING_PORT,port);
  }
 else {
    httpServer=null;
  }
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(config.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,BLUR_THRIFT_DEFAULT_MAX_FRAME_SIZE));
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(blockCacheDirectoryFactory,commandManager,traceStorage,refresher,server,shardServer,indexManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}","public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration) throws Exception {
  Configuration config=new Configuration();
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int configBindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  int instanceBindPort=configBindPort + serverIndex;
  if (configBindPort == 0) {
    instanceBindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,instanceBindPort);
  if (configBindPort == 0) {
    instanceBindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  final BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + instanceBindPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + instanceBindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  BlurUtil.setupZookeeper(zooKeeper,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration);
  final BlurIndexRefresher refresher=new BlurIndexRefresher();
  BlurFilterCache filterCache=getFilterCache(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  int minimumNumberOfNodesBeforeExitingSafeMode=configuration.getInt(BLUR_SHARD_SERVER_MINIMUM_BEFORE_SAFEMODE_EXIT,0);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_INTERNAL_SEARCH_THREAD_COUNT,16);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,maxMergeThreads,internalSearchThreads,minimumNumberOfNodesBeforeExitingSafeMode);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int remoteFetchCount=configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,110);
  if (fetchCount + 1 <= remoteFetchCount) {
    LOG.warn(""String_Node_Str"" + BLUR_SHARD_FETCHCOUNT + ""String_Node_Str""+ fetchCount+ ""String_Node_Str""+ BLUR_CONTROLLER_REMOTE_FETCH_COUNT+ ""String_Node_Str""+ remoteFetchCount+ ""String_Node_Str"");
  }
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  int cacheSize=configuration.getInt(BLUR_SHARD_DEEP_PAGING_CACHE_SIZE,1000);
  DeepPagingCache deepPagingCache=new DeepPagingCache(cacheSize);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,statusCleanupTimerDelay,facetThreadCount,deepPagingCache);
  File defaultTmpPath=getDefaultTmpPath(BLUR_TMP_PATH);
  String configTmpPath=configuration.get(BLUR_TMP_PATH);
  File tmpPath;
  if (!(configTmpPath == null || configTmpPath.isEmpty())) {
    tmpPath=new File(configTmpPath);
  }
 else {
    tmpPath=defaultTmpPath;
  }
  int numberOfShardWorkerCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_WORKER_THREADS,16);
  int numberOfShardDriverCommandThreads=configuration.getInt(BLUR_SHARD_COMMAND_DRIVER_THREADS,16);
  String commandPath=configuration.get(BLUR_COMMAND_LIB_PATH,getCommandLibPath());
  final ShardCommandManager commandManager=new ShardCommandManager(indexServer,tmpPath,commandPath,numberOfShardWorkerCommandThreads,numberOfShardDriverCommandThreads,Connection.DEFAULT_TIMEOUT,config);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setCommandManager(commandManager);
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,shardServer,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  iface=BlurUtil.lastChanceErrorHandling(iface,Iface.class);
  int configGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  int instanceGuiPort=configGuiPort + serverIndex;
  if (configGuiPort == 0) {
    instanceGuiPort=0;
  }
  final HttpJettyServer httpServer;
  if (configGuiPort >= 0) {
    httpServer=new HttpJettyServer(HttpJettyServer.class,instanceGuiPort);
    int port=httpServer.getLocalPort();
    configuration.setInt(BLUR_HTTP_STATUS_RUNNING_PORT,port);
  }
 else {
    httpServer=null;
  }
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(config.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,BLUR_THRIFT_DEFAULT_MAX_FRAME_SIZE));
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(blockCacheDirectoryFactory,commandManager,traceStorage,refresher,server,shardServer,indexManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}",0.9848301320874432
82235,"public static String getDefaultTmpPath(String propName) throws IOException {
  String blurHomeDir=getBlurHomeDir();
  File tmp;
  if (blurHomeDir == null) {
    tmp=getTmpDir();
    LOG.info(""String_Node_Str"",tmp);
  }
 else {
    tmp=new File(blurHomeDir,""String_Node_Str"");
    LOG.info(""String_Node_Str"",tmp);
    if (!tmp.mkdirs()) {
      tmp=getTmpDir();
      LOG.info(""String_Node_Str"",tmp);
    }
  }
  if (!tmp.exists() && !tmp.mkdirs()) {
    throw new IOException(""String_Node_Str"" + tmp.toURI() + ""String_Node_Str""+ propName+ ""String_Node_Str"");
  }
  File file=new File(tmp,UUID.randomUUID().toString());
  if (!file.createNewFile()) {
    throw new IOException(""String_Node_Str"" + tmp.toURI() + ""String_Node_Str"");
  }
  file.delete();
  return tmp.toURI().toString();
}","public static File getDefaultTmpPath(String propName) throws IOException {
  String blurHomeDir=getBlurHomeDir();
  File tmp;
  if (blurHomeDir == null) {
    tmp=getTmpDir();
    LOG.info(""String_Node_Str"",tmp);
  }
 else {
    tmp=new File(blurHomeDir,""String_Node_Str"");
    LOG.info(""String_Node_Str"",tmp);
    if (!tmp.mkdirs()) {
      tmp=getTmpDir();
      LOG.info(""String_Node_Str"",tmp);
    }
  }
  if (!tmp.exists() && !tmp.mkdirs()) {
    throw new IOException(""String_Node_Str"" + tmp.toURI() + ""String_Node_Str""+ propName+ ""String_Node_Str"");
  }
  File file=new File(tmp,UUID.randomUUID().toString());
  if (!file.createNewFile()) {
    throw new IOException(""String_Node_Str"" + tmp.toURI() + ""String_Node_Str"");
  }
  file.delete();
  return tmp;
}",0.9812782440284056
82236,"@Test public void testNewCommandLoading() throws IOException, TimeoutException, InterruptedException, ExceptionCollector {
  _manager.close();
  new File(_tmpPath).mkdirs();
  File commandPath=new File(_commandPath);
  rmr(commandPath);
  if (commandPath.exists()) {
    fail(""String_Node_Str"" + commandPath + ""String_Node_Str"");
  }
  commandPath.mkdirs();
{
    InputStream inputStream=getClass().getResourceAsStream(""String_Node_Str"");
    File dest=new File(commandPath,""String_Node_Str"");
    FileOutputStream output=new FileOutputStream(dest);
    IOUtils.copy(inputStream,output);
    inputStream.close();
    output.close();
  }
  ShardCommandManager manager=new ShardCommandManager(getIndexServer(),_tmpPath,_commandPath,10,10,1000,_config);
{
    BlurObject args=new BlurObject();
    args.put(""String_Node_Str"",""String_Node_Str"");
    ArgumentOverlay argumentOverlay=new ArgumentOverlay(args,new BlurObjectSerDe());
    Response response=manager.execute(getTableContextFactory(),""String_Node_Str"",argumentOverlay);
    Map<Shard,Object> shardResults=response.getShardResults();
    for (    Object o : shardResults.values()) {
      assertEquals(""String_Node_Str"",o);
    }
  }
{
    InputStream inputStream=getClass().getResourceAsStream(""String_Node_Str"");
    File dest=new File(commandPath,""String_Node_Str"");
    FileOutputStream output=new FileOutputStream(dest);
    IOUtils.copy(inputStream,output);
    inputStream.close();
    output.close();
  }
  assertEquals(1,manager.commandRefresh());
{
    BlurObject args=new BlurObject();
    args.put(""String_Node_Str"",""String_Node_Str"");
    ArgumentOverlay argumentOverlay=new ArgumentOverlay(args,new BlurObjectSerDe());
    Response response=manager.execute(getTableContextFactory(),""String_Node_Str"",argumentOverlay);
    Map<Shard,Object> shardResults=response.getShardResults();
    for (    Object o : shardResults.values()) {
      assertEquals(""String_Node_Str"",o);
    }
  }
  _manager=manager;
}","@Test public void testNewCommandLoading() throws IOException, TimeoutException, InterruptedException, ExceptionCollector {
  _manager.close();
  _tmpPath.mkdirs();
  File commandPath=new File(_commandPath);
  rmr(commandPath);
  if (commandPath.exists()) {
    fail(""String_Node_Str"" + commandPath + ""String_Node_Str"");
  }
  commandPath.mkdirs();
{
    InputStream inputStream=getClass().getResourceAsStream(""String_Node_Str"");
    File dest=new File(commandPath,""String_Node_Str"");
    FileOutputStream output=new FileOutputStream(dest);
    IOUtils.copy(inputStream,output);
    inputStream.close();
    output.close();
  }
  ShardCommandManager manager=new ShardCommandManager(getIndexServer(),_tmpPath,_commandPath,10,10,1000,_config);
{
    BlurObject args=new BlurObject();
    args.put(""String_Node_Str"",""String_Node_Str"");
    ArgumentOverlay argumentOverlay=new ArgumentOverlay(args,new BlurObjectSerDe());
    Response response=manager.execute(getTableContextFactory(),""String_Node_Str"",argumentOverlay);
    Map<Shard,Object> shardResults=response.getShardResults();
    for (    Object o : shardResults.values()) {
      assertEquals(""String_Node_Str"",o);
    }
  }
{
    InputStream inputStream=getClass().getResourceAsStream(""String_Node_Str"");
    File dest=new File(commandPath,""String_Node_Str"");
    FileOutputStream output=new FileOutputStream(dest);
    IOUtils.copy(inputStream,output);
    inputStream.close();
    output.close();
  }
  assertEquals(1,manager.commandRefresh());
{
    BlurObject args=new BlurObject();
    args.put(""String_Node_Str"",""String_Node_Str"");
    ArgumentOverlay argumentOverlay=new ArgumentOverlay(args,new BlurObjectSerDe());
    Response response=manager.execute(getTableContextFactory(),""String_Node_Str"",argumentOverlay);
    Map<Shard,Object> shardResults=response.getShardResults();
    for (    Object o : shardResults.values()) {
      assertEquals(""String_Node_Str"",o);
    }
  }
  _manager=manager;
}",0.9974567650050864
82237,"private static List<String> getOnlineControllers(BlurConfiguration conf){
  String zkConn=conf.getExpected(BLUR_ZOOKEEPER_CONNECTION);
  int zkSessionTimeout=conf.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  ZooKeeper zkClient=null;
  try {
    zkClient=ZkUtils.newZooKeeper(zkConn,zkSessionTimeout);
    return zkClient.getChildren(ZookeeperPathConstants.getOnlineControllersPath(),false);
  }
 catch (  KeeperException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","private static List<Connection> getOnlineControllers(BlurConfiguration conf){
  setupZooKeeper(conf);
}",0.2352941176470588
82238,"private static List<Connection> getOnlineControllers(BlurConfiguration conf){
  setupZooKeeper(conf);
}","private static List<Connection> getOnlineControllers(BlurConfiguration conf){
  setupZooKeeper(conf);
  return _connections;
}",0.8995633187772926
82239,"private static void setupZooKeeper(BlurConfiguration conf){
  String zkConn=conf.getExpected(BLUR_ZOOKEEPER_CONNECTION);
  int zkSessionTimeout=conf.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  ZooKeeper zkClient=null;
  try {
    zkClient=ZkUtils.newZooKeeper(zkConn,zkSessionTimeout);
    return zkClient.getChildren(ZookeeperPathConstants.getOnlineControllersPath(),false);
  }
 catch (  KeeperException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","private static void setupZooKeeper(BlurConfiguration conf){
  if (_zooKeeper == null) {
    String zkConn=conf.getExpected(BLUR_ZOOKEEPER_CONNECTION);
    int zkSessionTimeout=conf.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
    try {
      _zooKeeper=ZkUtils.newZooKeeper(zkConn,zkSessionTimeout);
      setConnections(_zooKeeper.getChildren(ZookeeperPathConstants.getOnlineControllersPath(),false));
      _watchConntrollers=new WatchChildren(_zooKeeper,ZookeeperPathConstants.getOnlineControllersPath());
      _watchConntrollers.watch(new OnChange(){
        @Override public void action(        List<String> children){
          setConnections(children);
        }
      }
);
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          closeZooKeeper();
        }
      }
));
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}",0.5354719309068476
82240,"public static TableContext create(TableDescriptor tableDescriptor){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String tableUri=tableDescriptor.getTableUri();
  if (tableUri == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=_cache.get(name);
  if (tableContext != null) {
    return tableContext;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=getSystemConfiguration();
  BlurConfiguration blurConfiguration=getSystemBlurConfiguration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
      blurConfiguration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext._configuration=configuration;
  tableContext._blurConfiguration=blurConfiguration;
  tableContext._tablePath=new Path(tableUri);
  tableContext._walTablePath=new Path(tableContext._tablePath,LOGS);
  tableContext._defaultFieldName=SUPER;
  tableContext._table=name;
  tableContext._descriptor=tableDescriptor;
  tableContext._timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext._timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext._defaultPrimeDocTerm=new Term(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE);
  tableContext._defaultScoreType=ScoreType.SUPER;
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext._tablePath,TYPES);
  try {
    HdfsFieldManager hdfsFieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
    loadCustomTypes(tableContext,blurConfiguration,hdfsFieldManager);
    hdfsFieldManager.loadFromStorage();
    tableContext._fieldManager=hdfsFieldManager;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext._indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SHARD_INDEX_SIMILARITY,FairSimilarity.class);
  tableContext._similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  String readInterceptorClass=blurConfiguration.get(BLUR_SHARD_READ_INTERCEPTOR);
  if (readInterceptorClass == null || readInterceptorClass.trim().isEmpty()) {
    tableContext._readInterceptor=DEFAULT_INTERCEPTOR;
  }
 else {
    try {
      @SuppressWarnings(""String_Node_Str"") Class<? extends ReadInterceptor> clazz=(Class<? extends ReadInterceptor>)Class.forName(readInterceptorClass);
      Constructor<? extends ReadInterceptor> constructor=clazz.getConstructor(new Class[]{BlurConfiguration.class});
      tableContext._readInterceptor=constructor.newInstance(blurConfiguration);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  tableContext._similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  _cache.put(name,tableContext);
  return tableContext;
}","public static TableContext create(TableDescriptor tableDescriptor){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String tableUri=tableDescriptor.getTableUri();
  if (tableUri == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=_cache.get(name);
  if (tableContext != null) {
    TableDescriptor newTd=new TableDescriptor(tableDescriptor);
    TableContext clone=tableContext.clone();
    clone._descriptor=newTd;
    return clone;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=getSystemConfiguration();
  BlurConfiguration blurConfiguration=getSystemBlurConfiguration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
      blurConfiguration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext._configuration=configuration;
  tableContext._blurConfiguration=blurConfiguration;
  tableContext._tablePath=new Path(tableUri);
  tableContext._walTablePath=new Path(tableContext._tablePath,LOGS);
  tableContext._defaultFieldName=SUPER;
  tableContext._table=name;
  tableContext._descriptor=tableDescriptor;
  tableContext._timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext._timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext._defaultPrimeDocTerm=new Term(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE);
  tableContext._defaultScoreType=ScoreType.SUPER;
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext._tablePath,TYPES);
  try {
    HdfsFieldManager hdfsFieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
    loadCustomTypes(tableContext,blurConfiguration,hdfsFieldManager);
    hdfsFieldManager.loadFromStorage();
    tableContext._fieldManager=hdfsFieldManager;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext._indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SHARD_INDEX_SIMILARITY,FairSimilarity.class);
  tableContext._similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  String readInterceptorClass=blurConfiguration.get(BLUR_SHARD_READ_INTERCEPTOR);
  if (readInterceptorClass == null || readInterceptorClass.trim().isEmpty()) {
    tableContext._readInterceptor=DEFAULT_INTERCEPTOR;
  }
 else {
    try {
      @SuppressWarnings(""String_Node_Str"") Class<? extends ReadInterceptor> clazz=(Class<? extends ReadInterceptor>)Class.forName(readInterceptorClass);
      Constructor<? extends ReadInterceptor> constructor=clazz.getConstructor(new Class[]{BlurConfiguration.class});
      tableContext._readInterceptor=constructor.newInstance(blurConfiguration);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  tableContext._similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  _cache.put(name,tableContext);
  return tableContext.clone();
}",0.9771995362617544
82241,"@Test public void combineShouldProperlySum() throws IOException {
  DocumentCountCombiner dc=new DocumentCountCombiner();
  Map<Shard,Integer> shardTotals=Maps.newHashMap(ImmutableMap.of(new Shard(""String_Node_Str"",""String_Node_Str""),10,new Shard(""String_Node_Str"",""String_Node_Str""),20,new Shard(""String_Node_Str"",""String_Node_Str""),30));
  long total=dc.combine(shardTotals);
  assertEquals(60l,total);
}","@Test public void combineShouldProperlySum() throws IOException {
  DocumentCountCombiner dc=new DocumentCountCombiner();
  Map<Shard,Integer> shardTotals=Maps.newHashMap(ImmutableMap.of(new Shard(""String_Node_Str"",""String_Node_Str""),10,new Shard(""String_Node_Str"",""String_Node_Str""),20,new Shard(""String_Node_Str"",""String_Node_Str""),30));
  long total=dc.combine(new TestCombiningContext(),shardTotals);
  assertEquals(60l,total);
}",0.9678188319427892
82242,"@Test public void combineEmptyShouldGiveNiceEmptyList() throws IOException {
  Map<Shard,List<String>> execResults=Maps.newHashMap();
  List<String> expected=Lists.newArrayList();
  TermsCommand cmd=new TermsCommand();
  List<String> returned=cmd.combine(execResults);
  assertEquals(expected,returned);
}","@Test public void combineEmptyShouldGiveNiceEmptyList() throws IOException, InterruptedException {
  Map<Shard,List<String>> execResults=Maps.newHashMap();
  List<String> expected=Lists.newArrayList();
  TermsCommand cmd=new TermsCommand();
  List<String> returned=cmd.combine(new TestCombiningContext(),execResults);
  assertEquals(expected,returned);
}",0.9256449165402124
82243,"@Test public void combineShouldBeCorrect() throws IOException {
  Map<Shard,List<String>> execResults=Maps.newHashMap();
  execResults.put(new Shard(""String_Node_Str"",""String_Node_Str""),Lists.newArrayList(""String_Node_Str"",""String_Node_Str""));
  execResults.put(new Shard(""String_Node_Str"",""String_Node_Str""),Lists.newArrayList(""String_Node_Str"",""String_Node_Str""));
  List<String> expected=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TermsCommand cmd=new TermsCommand();
  List<String> returned=cmd.combine(execResults);
  assertEquals(expected,returned);
}","@Test public void combineShouldBeCorrect() throws IOException, InterruptedException {
  Map<Shard,List<String>> execResults=Maps.newHashMap();
  execResults.put(new Shard(""String_Node_Str"",""String_Node_Str""),Lists.newArrayList(""String_Node_Str"",""String_Node_Str""));
  execResults.put(new Shard(""String_Node_Str"",""String_Node_Str""),Lists.newArrayList(""String_Node_Str"",""String_Node_Str""));
  List<String> expected=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TermsCommand cmd=new TermsCommand();
  List<String> returned=cmd.combine(new TestCombiningContext(),execResults);
  assertEquals(expected,returned);
}",0.9613259668508288
82244,"@SuppressWarnings(""String_Node_Str"") protected Map<String,String> getArguments(String commandName,boolean optional){
  Command<?> command=_command.get(commandName);
  if (command == null) {
    return null;
  }
  Class<? extends Command<?>> clazz=(Class<? extends Command<?>>)command.getClass();
  Map<String,String> arguments=new TreeMap<String,String>();
  Argument[] args=getArgumentArray(clazz,optional);
  addArguments(arguments,args);
  if (optional) {
    if (!(command instanceof ShardRoute)) {
      Argument[] argumentArray=getArgumentArray((Class<? extends Command<?>>)Command.class,optional);
      addArguments(arguments,argumentArray);
    }
  }
 else {
    if (!(command instanceof TableRoute)) {
      Argument[] argumentArray=getArgumentArray((Class<? extends Command<?>>)Command.class,optional);
      addArguments(arguments,argumentArray);
    }
  }
  return arguments;
}","@SuppressWarnings(""String_Node_Str"") protected Map<String,String> getArguments(String commandName,boolean optional){
  Command<?> command=_command.get(commandName);
  if (command == null) {
    return null;
  }
  Class<Command<?>> clazz=(Class<Command<?>>)command.getClass();
  Map<String,String> arguments=new TreeMap<String,String>();
  Argument[] args=getArgumentArray(clazz,optional);
  addArguments(arguments,args);
  if (optional) {
    if (!(command instanceof ShardRoute)) {
      Argument[] argumentArray=getArgumentArray(Command.class,optional);
      addArguments(arguments,argumentArray);
    }
  }
 else {
    if (!(command instanceof TableRoute)) {
      Argument[] argumentArray=getArgumentArray(Command.class,optional);
      addArguments(arguments,argumentArray);
    }
  }
  return arguments;
}",0.954171562867215
82245,"protected Argument[] getArgumentArray(Class<? extends Command<?>> clazz,boolean optional){
  if (optional) {
    OptionalArguments arguments=clazz.getAnnotation(OptionalArguments.class);
    if (arguments == null) {
      return null;
    }
    return arguments.value();
  }
 else {
    RequiredArguments arguments=clazz.getAnnotation(RequiredArguments.class);
    if (arguments == null) {
      return null;
    }
    return arguments.value();
  }
}","protected Argument[] getArgumentArray(Class<?> clazz,boolean optional){
  if (optional) {
    OptionalArguments arguments=clazz.getAnnotation(OptionalArguments.class);
    if (arguments == null) {
      return null;
    }
    return arguments.value();
  }
 else {
    RequiredArguments arguments=clazz.getAnnotation(RequiredArguments.class);
    if (arguments == null) {
      return null;
    }
    return arguments.value();
  }
}",0.978433598183882
82246,"@Override public void configure(String fieldNameForThisInstance,Map<String,String> properties,Configuration configuration){
  _ctx=SpatialContext.GEO;
  SpatialPrefixTree grid=getSpatialPrefixTree(properties);
  _strategy=new RecursivePrefixTreeStrategy(grid,fieldNameForThisInstance);
  _shapeReadWriter=new ShapeReadWriter<SpatialContext>(_ctx);
  addSupportedIndexedShapes(Shape.class);
  addSupportedOperations(SpatialOperation.IsDisjointTo);
  addSupportedOperations(SpatialOperation.Intersects);
  addSupportedOperations(SpatialOperation.IsWithin);
  addSupportedOperations(SpatialOperation.Contains);
}","@Override public void configure(String fieldNameForThisInstance,Map<String,String> properties,Configuration configuration){
  _ctx=SpatialContext.GEO;
  SpatialPrefixTree grid=getSpatialPrefixTree(properties);
  boolean docValue=false;
  if (properties.get(DOC_VALUE) != null) {
    docValue=true;
  }
  _strategy=new RecursivePrefixTreeStrategy(grid,fieldNameForThisInstance,docValue);
  _shapeReadWriter=new ShapeReadWriter<SpatialContext>(_ctx);
  addSupportedIndexedShapes(Shape.class);
  addSupportedOperations(SpatialOperation.IsDisjointTo);
  addSupportedOperations(SpatialOperation.Intersects);
  addSupportedOperations(SpatialOperation.IsWithin);
  addSupportedOperations(SpatialOperation.Contains);
}",0.9234268385140256
82247,"@Override public void configure(String fieldNameForThisInstance,Map<String,String> properties,Configuration configuration){
  _ctx=SpatialContext.GEO;
  SpatialPrefixTree grid=getSpatialPrefixTree(properties);
  _strategy=new TermQueryPrefixTreeStrategy(grid,fieldNameForThisInstance);
  _shapeReadWriter=new ShapeReadWriter<SpatialContext>(_ctx);
  addSupportedIndexedShapes(Point.class);
  addSupportedOperations(SpatialOperation.Intersects);
}","@Override public void configure(String fieldNameForThisInstance,Map<String,String> properties,Configuration configuration){
  _ctx=SpatialContext.GEO;
  boolean docValue=false;
  if (properties.get(DOC_VALUE) != null) {
    docValue=true;
  }
  SpatialPrefixTree grid=getSpatialPrefixTree(properties);
  _strategy=new TermQueryPrefixTreeStrategy(grid,fieldNameForThisInstance,docValue);
  _shapeReadWriter=new ShapeReadWriter<SpatialContext>(_ctx);
  addSupportedIndexedShapes(Point.class);
  addSupportedOperations(SpatialOperation.Intersects);
}",0.8982880161127895
82248,"@Override public boolean needsTaskCommit(TaskAttemptContext context) throws IOException {
  return _runTaskCommit;
}","@Override public boolean needsTaskCommit(TaskAttemptContext context) throws IOException {
  int numReduceTasks=context.getNumReduceTasks();
  TaskAttemptID taskAttemptID=context.getTaskAttemptID();
  return taskAttemptID.isMap() && numReduceTasks != 0 ? false : true;
}",0.4935064935064935
82249,"@Override public void run(){
  while (_running.get()) {
    _writeLock.lock();
    try {
      if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
        LOG.info(""String_Node_Str"",_path);
        try {
          _output.close();
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
        }
 finally {
          _output=null;
        }
        try {
          cleanupOldFiles();
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
    }
  finally {
      _writeLock.unlock();
    }
    try {
      Thread.sleep(DAEMON_POLL_TIME);
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}","@Override public void run(){
  _writeLock.lock();
  try {
    try {
      cleanupOldFiles();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  finally {
    _writeLock.unlock();
  }
  while (_running.get()) {
    _writeLock.lock();
    try {
      if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
        LOG.info(""String_Node_Str"",_path);
        try {
          _output.close();
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
        }
 finally {
          _output=null;
        }
        try {
          cleanupOldFiles();
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
    }
  finally {
      _writeLock.unlock();
    }
    try {
      Thread.sleep(DAEMON_POLL_TIME);
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}",0.8856447688564477
82250,"@Override public void put(BytesRef key,BytesRef value) throws IOException {
  ensureOpen();
  if (value == null) {
    delete(key);
    return;
  }
  _writeLock.lock();
  ensureOpenForWriting();
  try {
    Operation op=getPutOperation(OperationType.PUT,key,value);
    Path path=write(op);
    BytesRef deepCopyOf=BytesRef.deepCopyOf(value);
    _size.addAndGet(deepCopyOf.bytes.length);
    Value old=_pointers.put(BytesRef.deepCopyOf(key),new Value(deepCopyOf,path));
    if (old != null) {
      _size.addAndGet(-old._bytesRef.bytes.length);
    }
    if (!path.equals(_outputPath)) {
      cleanupOldFiles();
    }
  }
 catch (  RemoteException e) {
    throw new IOException(""String_Node_Str"",e);
  }
catch (  LeaseExpiredException e) {
    throw new IOException(""String_Node_Str"",e);
  }
 finally {
    _writeLock.unlock();
  }
}","@Override public void put(BytesRef key,BytesRef value) throws IOException {
  ensureOpen();
  if (value == null) {
    delete(key);
    return;
  }
  _writeLock.lock();
  ensureOpenForWriting();
  try {
    Operation op=getPutOperation(OperationType.PUT,key,value);
    Path path=write(op);
    BytesRef deepCopyOf=BytesRef.deepCopyOf(value);
    _size.addAndGet(deepCopyOf.bytes.length);
    Value old=_pointers.put(BytesRef.deepCopyOf(key),new Value(deepCopyOf,path));
    if (old != null) {
      _size.addAndGet(-old._bytesRef.bytes.length);
    }
  }
 catch (  RemoteException e) {
    throw new IOException(""String_Node_Str"",e);
  }
catch (  LeaseExpiredException e) {
    throw new IOException(""String_Node_Str"",e);
  }
 finally {
    _writeLock.unlock();
  }
}",0.9576059850374063
82251,"public HdfsKeyValueStore(Configuration configuration,Path path,long maxAmountAllowedPerFile) throws IOException {
  _maxAmountAllowedPerFile=maxAmountAllowedPerFile;
  _configuration=configuration;
  _path=path;
  _configuration.setBoolean(""String_Node_Str"",true);
  _fileSystem=FileSystem.get(_path.toUri(),_configuration);
  _readWriteLock=new ReentrantReadWriteLock();
  _writeLock=_readWriteLock.writeLock();
  _readLock=_readWriteLock.readLock();
  _fileStatus.set(getSortedSet(_path));
  if (!_fileStatus.get().isEmpty()) {
    _currentFileCounter.set(Long.parseLong(_fileStatus.get().last().getPath().getName()));
  }
  loadIndexes();
  openWriter();
  _daemon=startDaemon();
  cleanupOldFiles();
  Metrics.newGauge(new MetricName(ORG_APACHE_BLUR,HDFS_KV,SIZE,path.getParent().toString()),new Gauge<Long>(){
    @Override public Long value(){
      return _size.get();
    }
  }
);
}","public HdfsKeyValueStore(Configuration configuration,Path path,long maxAmountAllowedPerFile) throws IOException {
  _maxAmountAllowedPerFile=maxAmountAllowedPerFile;
  _configuration=configuration;
  _path=path;
  _configuration.setBoolean(""String_Node_Str"",true);
  _fileSystem=FileSystem.get(_path.toUri(),_configuration);
  _fileSystem.mkdirs(_path);
  _readWriteLock=new ReentrantReadWriteLock();
  _writeLock=_readWriteLock.writeLock();
  _readLock=_readWriteLock.readLock();
  _fileStatus.set(getSortedSet(_path));
  if (!_fileStatus.get().isEmpty()) {
    _currentFileCounter.set(Long.parseLong(_fileStatus.get().last().getPath().getName()));
  }
  removeAnyTruncatedFiles();
  loadIndexes();
  _daemon=startDaemon();
  Metrics.newGauge(new MetricName(ORG_APACHE_BLUR,HDFS_KV,SIZE,path.getParent().toString()),new Gauge<Long>(){
    @Override public Long value(){
      return _size.get();
    }
  }
);
}",0.9472515269294836
82252,"private Thread startDaemon(){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      while (_running.get()) {
        _writeLock.lock();
        try {
          if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
            LOG.info(""String_Node_Str"",_path);
            try {
              _output.close();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"",e);
            }
 finally {
              _output=null;
            }
            try {
              cleanupOldFiles();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"",e);
            }
          }
        }
  finally {
          _writeLock.unlock();
        }
        try {
          Thread.sleep(DAEMON_POLL_TIME);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
  }
);
  thread.setName(""String_Node_Str"" + _path + ""String_Node_Str"");
  thread.setDaemon(true);
  thread.start();
  return thread;
}","private Thread startDaemon(){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      _writeLock.lock();
      try {
        try {
          cleanupOldFiles();
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
  finally {
        _writeLock.unlock();
      }
      while (_running.get()) {
        _writeLock.lock();
        try {
          if (_output != null && _lastWrite.get() + MAX_OPEN_FOR_WRITING < System.currentTimeMillis()) {
            LOG.info(""String_Node_Str"",_path);
            try {
              _output.close();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"",e);
            }
 finally {
              _output=null;
            }
            try {
              cleanupOldFiles();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"",e);
            }
          }
        }
  finally {
          _writeLock.unlock();
        }
        try {
          Thread.sleep(DAEMON_POLL_TIME);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
  }
);
  thread.setName(""String_Node_Str"" + _path + ""String_Node_Str"");
  thread.setDaemon(true);
  thread.start();
  return thread;
}",0.9016949152542372
82253,"private void rollFile() throws IOException {
  logSize();
  LOG.info(""String_Node_Str"" + _outputPath + ""String_Node_Str"");
  _output.close();
  openWriter();
}","private void rollFile() throws IOException {
  LOG.info(""String_Node_Str"" + _outputPath + ""String_Node_Str"");
  _output.close();
  openWriter();
}",0.9573770491803278
82254,"private void openWriter() throws IOException {
  logSize();
  long nextSegment=_currentFileCounter.incrementAndGet();
  String name=buffer(nextSegment);
  _outputPath=new Path(_path,name);
  LOG.info(""String_Node_Str"",_outputPath);
  _output=_fileSystem.create(_outputPath,false);
  _output.write(MAGIC);
  _output.writeInt(VERSION);
  syncInternal();
}","private void openWriter() throws IOException {
  long nextSegment=_currentFileCounter.incrementAndGet();
  String name=buffer(nextSegment);
  _outputPath=new Path(_path,name);
  LOG.info(""String_Node_Str"",_outputPath);
  _output=_fileSystem.create(_outputPath,false);
  _output.write(MAGIC);
  _output.writeInt(VERSION);
  syncInternal();
}",0.9812409812409812
82255,"@Test public void testFileGC() throws IOException {
  HdfsKeyValueStore store=new HdfsKeyValueStore(_configuration,_path,1000);
  FileSystem fileSystem=_path.getFileSystem(_configuration);
  assertEquals(1,fileSystem.listStatus(_path).length);
  store.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  assertEquals(2,fileSystem.listStatus(_path).length);
  store.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  assertEquals(2,fileSystem.listStatus(_path).length);
  store.close();
}","@Test public void testFileGC() throws IOException {
  HdfsKeyValueStore store=new HdfsKeyValueStore(_configuration,_path,1000);
  store.put(new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""));
  FileSystem fileSystem=_path.getFileSystem(_configuration);
  assertEquals(1,fileSystem.listStatus(_path).length);
  store.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  assertEquals(2,fileSystem.listStatus(_path).length);
  store.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  store.cleanupOldFiles();
  assertEquals(2,fileSystem.listStatus(_path).length);
  store.close();
}",0.908616187989556
82256,"@Test public void testFileRolling() throws IOException {
  HdfsKeyValueStore store=new HdfsKeyValueStore(_configuration,_path,1000);
  FileSystem fileSystem=_path.getFileSystem(_configuration);
  assertEquals(1,fileSystem.listStatus(_path).length);
  store.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  assertEquals(2,fileSystem.listStatus(_path).length);
  store.close();
}","@Test public void testFileRolling() throws IOException {
  HdfsKeyValueStore store=new HdfsKeyValueStore(_configuration,_path,1000);
  FileSystem fileSystem=_path.getFileSystem(_configuration);
  store.put(new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""));
  assertEquals(1,fileSystem.listStatus(_path).length);
  store.put(new BytesRef(""String_Node_Str""),new BytesRef(new byte[2000]));
  assertEquals(2,fileSystem.listStatus(_path).length);
  store.close();
}",0.9105504587155964
82257,"public Query parse(final String queryStr) throws ParseException {
  final Map<String,Query> subQueries=new HashMap<String,Query>();
  final StringBuilder builder=new StringBuilder();
  match(queryStr,new Group(){
    int _subQueryIndex=0;
    @Override public void match(    int start,    int end) throws ParseException {
      if (_lastStart != start) {
        builder.append(queryStr.substring(_lastEnd,start));
      }
      String realQuery=queryStr.substring(start,end);
      LOG.debug(""String_Node_Str"",realQuery);
      String superQueryStr=getMatchText(realQuery);
      LOG.debug(""String_Node_Str"",superQueryStr);
      String key=_prefixToSub + _subQueryIndex;
      QueryParser newParser=getNewParser();
      Query query=newParser.parse(superQueryStr);
      if (!isSameGroupName(query)) {
        throw new ParseException(""String_Node_Str"" + superQueryStr + ""String_Node_Str"");
      }
      if (_superSearch) {
        query=newSuperQuery(query);
      }
 else {
        query=wrapFilter(query);
      }
      subQueries.put(key,query);
      builder.append(_prefixToSub).append(':').append(_subQueryIndex);
      _subQueryIndex++;
      _lastStart=start;
      _lastEnd=end;
    }
    private String getMatchText(    String match){
      return match.substring(1,match.length() - 1);
    }
  }
);
  if (_lastEnd < queryStr.length()) {
    builder.append(queryStr.substring(_lastEnd));
  }
  Query query=super.parse(builder.toString());
  return reprocess(replaceRealQueries(query,subQueries));
}","public Query parse(final String queryStr) throws ParseException {
  final Map<String,Query> subQueries=new HashMap<String,Query>();
  final StringBuilder builder=new StringBuilder();
  match(queryStr,new Group(){
    int _subQueryIndex=0;
    @Override public void match(    int start,    int end) throws ParseException {
      if (_lastStart != start) {
        builder.append(queryStr.substring(_lastEnd,start));
      }
      String realQuery=queryStr.substring(start,end);
      LOG.debug(""String_Node_Str"",realQuery);
      String superQueryStr=getMatchText(realQuery);
      LOG.debug(""String_Node_Str"",superQueryStr);
      String key=_prefixToSub + _subQueryIndex;
      QueryParser newParser=getNewParser();
      Query query=newParser.parse(superQueryStr);
      if (!isSameGroupName(query)) {
        throw new ParseException(""String_Node_Str"" + superQueryStr + ""String_Node_Str"");
      }
      if (_superSearch) {
        query=newSuperQuery(query);
      }
 else {
        query=wrapFilter(query);
      }
      subQueries.put(key,query);
      builder.append(_prefixToSub).append(':').append(_subQueryIndex);
      _subQueryIndex++;
      _lastStart=start;
      _lastEnd=end;
    }
    private String getMatchText(    String match){
      return match.substring(1,match.length() - 1);
    }
  }
);
  if (_lastEnd < queryStr.length()) {
    builder.append(queryStr.substring(_lastEnd));
  }
  Query query=super.parse(builder.toString());
  return fixNegatives(reprocess(replaceRealQueries(query,subQueries)));
}",0.9953917050691244
82258,"private Query parseSq(String qstr) throws ParseException {
  SuperParser superParser=new SuperParser(LUCENE_VERSION,_fieldManager,true,null,ScoreType.SUPER,new Term(""String_Node_Str""));
  return superParser.parse(qstr);
}","private Query parseSq(String qstr) throws ParseException {
  SuperParser superParser=new SuperParser(LUCENE_VERSION,_fieldManager,true,null,ScoreType.SUPER,new Term(""String_Node_Str"",""String_Node_Str""));
  return superParser.parse(qstr);
}",0.9608695652173912
82259,"private SuperQuery sq(Query q){
  return new SuperQuery(q,ScoreType.SUPER,new Term(""String_Node_Str""));
}","private SuperQuery sq(Query q){
  return new SuperQuery(q,ScoreType.SUPER,new Term(""String_Node_Str"",""String_Node_Str""));
}",0.9210526315789472
82260,"private void checkCurrentAuth(HttpServletRequest request,HttpServletResponse response) throws IOException {
  IProvider provider=Config.getProvider();
  Map<String,Object> responseData=new HashMap<String,Object>();
  if (provider.isLoginRequired()) {
    String authToken=HttpUtil.getFirstParam(request.getParameterMap().get(AUTH_TOKEN));
    if (StringUtils.isNotBlank(authToken) && provider.getUser(authToken,request) != null) {
      responseData.put(LOGIN_STATUS_FIELD,true);
    }
 else {
      responseData.put(LOGIN_STATUS_FIELD,false);
      responseData.put(LOGIN_FIELDS_FIELD,provider.getLoginFields());
    }
  }
 else {
    responseData.put(LOGIN_STATUS_FIELD,true);
  }
  HttpUtil.sendResponse(response,new ObjectMapper().writeValueAsString(responseData),HttpUtil.JSON);
}","private void checkCurrentAuth(HttpServletRequest request,HttpServletResponse response) throws IOException {
  IProvider provider=Config.getProvider();
  Map<String,Object> responseData=new HashMap<String,Object>();
  if (provider.isLoginRequired()) {
    String authToken=HttpUtil.getFirstParam((String[])request.getParameterMap().get(AUTH_TOKEN));
    if (StringUtils.isNotBlank(authToken) && provider.getUser(authToken,request) != null) {
      responseData.put(LOGIN_STATUS_FIELD,true);
    }
 else {
      responseData.put(LOGIN_STATUS_FIELD,false);
      responseData.put(LOGIN_FIELDS_FIELD,provider.getLoginFields());
    }
  }
 else {
    responseData.put(LOGIN_STATUS_FIELD,true);
  }
  HttpUtil.sendResponse(response,new ObjectMapper().writeValueAsString(responseData),HttpUtil.JSON);
}",0.9936708860759492
82261,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static Map<String,Object> fetchRow(String table,String query,String[] families,String remoteHost) throws IOException, BlurException, TException {
  try {
    Iface client=Config.getClient(remoteHost);
    Selector selector=new Selector();
    String rowid=StringUtils.remove(query,""String_Node_Str"");
    selector.setRowId(rowid);
    selector.setColumnFamiliesToFetch(new HashSet<String>(Arrays.asList(families)));
    FetchResult fetchRow=client.fetchRow(table,selector);
    Map<String,Object> results=new HashMap<String,Object>();
    results.put(TOTAL_KEY,fetchRow.getRowResult().getRow() == null ? 0 : 1);
    Map<String,List> rows=new HashMap<String,List>();
    Row row=fetchRow.getRowResult().getRow();
    if (row != null) {
      for (      Record record : row.getRecords()) {
        String family=record.getFamily();
        List<ResultRow> fam=(List<ResultRow>)getFam(family,rows,false);
        ResultRow rowData=getRow(row.getId(),fam);
        rowData.getRecords().add(buildRow(record.getColumns(),record.getRecordId()));
      }
    }
    results.put(DATA_KEY,rows);
    results.put(FAMILY_KEY,new HashSet<String>(Arrays.asList(families)));
    return results;
  }
  finally {
    UserContext.reset();
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static Map<String,Object> fetchRow(String table,String query,String[] families,String remoteHost) throws IOException, BlurException, TException {
  try {
    Iface client=Config.getClient(remoteHost);
    Selector selector=new Selector();
    String rowid=StringUtils.remove(query,""String_Node_Str"");
    selector.setRowId(rowid);
    selector.setColumnFamiliesToFetch(new HashSet<String>(Arrays.asList(families)));
    FetchResult fetchRow=client.fetchRow(table,selector);
    Map<String,Object> results=new HashMap<String,Object>();
    results.put(TOTAL_KEY,fetchRow.getRowResult().getRow() == null ? 0 : 1);
    Map<String,List> rows=new HashMap<String,List>();
    Row row=fetchRow.getRowResult().getRow();
    if (row != null && row.getRecords() != null) {
      for (      Record record : row.getRecords()) {
        String family=record.getFamily();
        List<ResultRow> fam=(List<ResultRow>)getFam(family,rows,false);
        ResultRow rowData=getRow(row.getId(),fam);
        rowData.getRecords().add(buildRow(record.getColumns(),record.getRecordId()));
      }
    }
    results.put(DATA_KEY,rows);
    results.put(FAMILY_KEY,new HashSet<String>(Arrays.asList(families)));
    return results;
  }
  finally {
    UserContext.reset();
  }
}",0.9892638036809815
82262,"@Override public void run(){
  try {
    entry.getValue().process(_counts,_minimumsBeforeReturning,_running);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
 finally {
    finished.incrementAndGet();
  }
}","@Override public void run(){
  try {
    entry.getValue().process(_counts,_minimumsBeforeReturning,_running);
  }
 catch (  Throwable e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    finished.incrementAndGet();
  }
}",0.7169042769857433
82263,"private void processInternal(ExecutorService executor) throws IOException {
  List<Entry<Object,Info>> entries=new ArrayList<Entry<Object,Info>>(_infoMap.entrySet());
  Collections.sort(entries,COMPARATOR);
  if (executor == null) {
    for (    Entry<Object,Info> e : entries) {
      if (_running.get()) {
        e.getValue().process(_counts,_minimumsBeforeReturning,_running);
      }
    }
  }
 else {
    final AtomicInteger finished=new AtomicInteger();
    for (    Entry<Object,Info> e : entries) {
      if (_running.get()) {
        final Entry<Object,Info> entry=e;
        executor.submit(new Runnable(){
          @Override public void run(){
            try {
              entry.getValue().process(_counts,_minimumsBeforeReturning,_running);
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"",e);
              throw new RuntimeException(e);
            }
 finally {
              finished.incrementAndGet();
            }
          }
        }
);
      }
    }
    while (finished.get() < entries.size()) {
synchronized (this) {
        try {
          wait(1);
        }
 catch (        InterruptedException e) {
          throw new IOException(e);
        }
      }
    }
  }
}","private void processInternal(ExecutorService executor) throws IOException {
  List<Entry<Object,Info>> entries=new ArrayList<Entry<Object,Info>>(_infoMap.entrySet());
  Collections.sort(entries,COMPARATOR);
  if (executor == null) {
    for (    Entry<Object,Info> e : entries) {
      if (_running.get()) {
        e.getValue().process(_counts,_minimumsBeforeReturning,_running);
      }
    }
  }
 else {
    final AtomicInteger finished=new AtomicInteger();
    for (    Entry<Object,Info> e : entries) {
      if (_running.get()) {
        final Entry<Object,Info> entry=e;
        executor.submit(new Runnable(){
          @Override public void run(){
            try {
              entry.getValue().process(_counts,_minimumsBeforeReturning,_running);
            }
 catch (            Throwable e) {
              LOG.error(""String_Node_Str"",e);
            }
 finally {
              finished.incrementAndGet();
            }
          }
        }
);
      }
    }
    while (finished.get() < entries.size()) {
synchronized (this) {
        try {
          wait(1);
        }
 catch (        InterruptedException e) {
          throw new IOException(e);
        }
      }
    }
  }
}",0.6710580485796624
82264,"private void flushToTmpIndex() throws IOException {
  if (_documents.isEmpty()) {
    return;
  }
  _usingLocalTmpindex=true;
  if (_localTmpWriter == null) {
    String localDirPath=System.getProperty(JAVA_IO_TMPDIR);
    _localTmpPath=new File(localDirPath,UUID.randomUUID().toString() + ""String_Node_Str"");
    _localTmpDir=new ProgressableDirectory(FSDirectory.open(_localTmpPath),BlurOutputFormat.getProgressable());
    _localTmpWriter=new IndexWriter(_localTmpDir,_overFlowConf.clone());
    List<List<Field>> docs=new ArrayList<List<Field>>(_documents.values());
    docs.get(0).add(new StringField(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE,Store.NO));
    _localTmpWriter.addDocuments(docs);
  }
 else {
    _localTmpWriter.addDocuments(_documents.values());
  }
  _documents.clear();
}","private void flushToTmpIndex() throws IOException {
  if (_documents.isEmpty()) {
    return;
  }
  _usingLocalTmpindex=true;
  if (_localTmpWriter == null) {
    String localDirPath=System.getProperty(JAVA_IO_TMPDIR);
    _localTmpPath=new File(localDirPath,UUID.randomUUID().toString() + ""String_Node_Str"");
    HdfsDirectory directory=new HdfsDirectory(_configuration,new Path(_localTmpPath.toURI()));
    _localTmpDir=new ProgressableDirectory(directory,BlurOutputFormat.getProgressable());
    _localTmpWriter=new IndexWriter(_localTmpDir,_overFlowConf.clone());
    List<List<Field>> docs=new ArrayList<List<Field>>(_documents.values());
    docs.get(0).add(new StringField(BlurConstants.PRIME_DOC,BlurConstants.PRIME_DOC_VALUE,Store.NO));
    _localTmpWriter.addDocuments(docs);
  }
 else {
    _localTmpWriter.addDocuments(_documents.values());
  }
  _documents.clear();
}",0.915234143449911
82265,"public GenericBlurRecordWriter(Configuration configuration,int attemptId,String tmpDirName) throws IOException {
  _indexLocally=BlurOutputFormat.isIndexLocally(configuration);
  _optimizeInFlight=BlurOutputFormat.isOptimizeInFlight(configuration);
  TableDescriptor tableDescriptor=BlurOutputFormat.getTableDescriptor(configuration);
  int shardCount=tableDescriptor.getShardCount();
  int shardId=attemptId % shardCount;
  _maxDocumentBufferSize=BlurOutputFormat.getMaxDocumentBufferSize(configuration);
  Path tableOutput=BlurOutputFormat.getOutputPath(configuration);
  String shardName=BlurUtil.getShardName(BlurConstants.SHARD_PREFIX,shardId);
  Path indexPath=new Path(tableOutput,shardName);
  _newIndex=new Path(indexPath,tmpDirName);
  _finalDir=new ProgressableDirectory(new HdfsDirectory(configuration,_newIndex),getProgressable());
  _finalDir.setLockFactory(NoLockFactory.getNoLockFactory());
  TableContext tableContext=TableContext.create(tableDescriptor);
  _fieldManager=tableContext.getFieldManager();
  Analyzer analyzer=_fieldManager.getAnalyzerForIndex();
  _conf=new IndexWriterConfig(LuceneVersionConstant.LUCENE_VERSION,analyzer);
  _conf.setCodec(new Blur022Codec());
  _conf.setSimilarity(tableContext.getSimilarity());
  TieredMergePolicy mergePolicy=(TieredMergePolicy)_conf.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  _overFlowConf=_conf.clone();
  _overFlowConf.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);
  if (_indexLocally) {
    String localDirPath=System.getProperty(JAVA_IO_TMPDIR);
    _localPath=new File(localDirPath,UUID.randomUUID().toString() + ""String_Node_Str"");
    _localDir=new ProgressableDirectory(FSDirectory.open(_localPath),getProgressable());
    _writer=new IndexWriter(_localDir,_conf.clone());
  }
 else {
    _localPath=null;
    _localDir=null;
    _writer=new IndexWriter(_finalDir,_conf.clone());
  }
}","public GenericBlurRecordWriter(Configuration configuration,int attemptId,String tmpDirName) throws IOException {
  _configuration=configuration;
  _indexLocally=BlurOutputFormat.isIndexLocally(_configuration);
  _optimizeInFlight=BlurOutputFormat.isOptimizeInFlight(_configuration);
  TableDescriptor tableDescriptor=BlurOutputFormat.getTableDescriptor(_configuration);
  int shardCount=tableDescriptor.getShardCount();
  int shardId=attemptId % shardCount;
  _maxDocumentBufferSize=BlurOutputFormat.getMaxDocumentBufferSize(_configuration);
  Path tableOutput=BlurOutputFormat.getOutputPath(_configuration);
  String shardName=BlurUtil.getShardName(BlurConstants.SHARD_PREFIX,shardId);
  Path indexPath=new Path(tableOutput,shardName);
  _newIndex=new Path(indexPath,tmpDirName);
  _finalDir=new ProgressableDirectory(new HdfsDirectory(_configuration,_newIndex),getProgressable());
  _finalDir.setLockFactory(NoLockFactory.getNoLockFactory());
  TableContext tableContext=TableContext.create(tableDescriptor);
  _fieldManager=tableContext.getFieldManager();
  Analyzer analyzer=_fieldManager.getAnalyzerForIndex();
  _conf=new IndexWriterConfig(LuceneVersionConstant.LUCENE_VERSION,analyzer);
  _conf.setCodec(new Blur022Codec());
  _conf.setSimilarity(tableContext.getSimilarity());
  TieredMergePolicy mergePolicy=(TieredMergePolicy)_conf.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  _overFlowConf=_conf.clone();
  _overFlowConf.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);
  if (_indexLocally) {
    String localDirPath=System.getProperty(JAVA_IO_TMPDIR);
    _localPath=new File(localDirPath,UUID.randomUUID().toString() + ""String_Node_Str"");
    HdfsDirectory directory=new HdfsDirectory(_configuration,new Path(_localPath.toURI()));
    _localDir=new ProgressableDirectory(directory,getProgressable());
    _writer=new IndexWriter(_localDir,_conf.clone());
  }
 else {
    _localPath=null;
    _localDir=null;
    _writer=new IndexWriter(_finalDir,_conf.clone());
  }
}",0.9523318732285494
82266,"/** 
 * Checks the query by running validation against the   {@link BlurQuery} andthe  {@link Selector} provided.
 * @param blurQuery the  {@link BlurQuery} to validate.
 * @throws BlurException
 */
public void checkQuery(BlurQuery blurQuery) throws BlurException {
  if (blurQuery.selector != null) {
    if (blurQuery.selector.recordOnly) {
      if (blurQuery.fetch > _maxQueryRecordFetch) {
        LOG.warn(""String_Node_Str"",_maxQueryRecordFetch);
        blurQuery.fetch=(int)blurQuery.minimumNumberOfResults;
      }
    }
 else {
      if (blurQuery.fetch > _maxQueryRowFetch) {
        LOG.warn(""String_Node_Str"",_maxQueryRowFetch);
        blurQuery.fetch=(int)blurQuery.minimumNumberOfResults;
      }
    }
  }
  if (blurQuery.fetch > _maxQueryResultsFetch) {
    LOG.warn(""String_Node_Str"",_maxQueryResultsFetch);
    blurQuery.fetch=(int)blurQuery.minimumNumberOfResults;
  }
  if (blurQuery.fetch > blurQuery.minimumNumberOfResults) {
    LOG.warn(""String_Node_Str"",blurQuery.fetch,blurQuery.minimumNumberOfResults);
    blurQuery.fetch=(int)blurQuery.minimumNumberOfResults;
  }
  Query query=blurQuery.getQuery();
  if (blurQuery.getRowId() != null) {
    if (query.isRowQuery()) {
      throw new BException(""String_Node_Str"",query,blurQuery);
    }
  }
  List<SortField> sortFields=blurQuery.getSortFields();
  if (sortFields != null && !sortFields.isEmpty()) {
    boolean rowQuery=query.isRowQuery();
    if (rowQuery) {
      throw new BException(""String_Node_Str"",query,blurQuery);
    }
  }
}","/** 
 * Checks the query by running validation against the   {@link BlurQuery} andthe  {@link Selector} provided.
 * @param blurQuery the  {@link BlurQuery} to validate.
 * @throws BlurException
 */
public void checkQuery(BlurQuery blurQuery) throws BlurException {
  if (blurQuery.selector != null) {
    if (blurQuery.selector.recordOnly) {
      if (blurQuery.fetch > _maxQueryRecordFetch) {
        LOG.warn(""String_Node_Str"",blurQuery.fetch,_maxQueryRecordFetch);
        blurQuery.fetch=_maxQueryRecordFetch;
      }
    }
 else {
      if (blurQuery.fetch > _maxQueryRowFetch) {
        LOG.warn(""String_Node_Str"",blurQuery.fetch,_maxQueryRowFetch);
        blurQuery.fetch=_maxQueryRowFetch;
      }
    }
  }
  if (blurQuery.fetch > _maxQueryResultsFetch) {
    LOG.warn(""String_Node_Str"",blurQuery.fetch,_maxQueryResultsFetch);
    blurQuery.fetch=_maxQueryResultsFetch;
  }
  if (blurQuery.fetch > blurQuery.minimumNumberOfResults) {
    LOG.warn(""String_Node_Str"",blurQuery.fetch,blurQuery.minimumNumberOfResults);
    blurQuery.fetch=(int)blurQuery.minimumNumberOfResults;
  }
  Query query=blurQuery.getQuery();
  if (blurQuery.getRowId() != null) {
    if (query.isRowQuery()) {
      throw new BException(""String_Node_Str"",query,blurQuery);
    }
  }
  List<SortField> sortFields=blurQuery.getSortFields();
  if (sortFields != null && !sortFields.isEmpty()) {
    boolean rowQuery=query.isRowQuery();
    if (rowQuery) {
      throw new BException(""String_Node_Str"",query,blurQuery);
    }
  }
}",0.9349190617773372
82267,"private void cleanup(){
  clearMapOfOldTables(_layout);
  boolean closed=false;
  Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
  for (  String table : oldIndexesThatNeedToBeClosed.keySet()) {
    Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
    if (indexes == null) {
      continue;
    }
    for (    String shard : indexes.keySet()) {
      BlurIndex index=indexes.get(shard);
      if (index == null) {
        continue;
      }
      close(index,table,shard);
      closed=true;
    }
  }
  for (  String table : _indexes.keySet()) {
    Map<String,BlurIndex> shardMap=_indexes.get(table);
    if (shardMap != null) {
      Set<String> shards=new HashSet<String>(shardMap.keySet());
      Set<String> shardsToServe=getShardsToServe(table);
      shards.removeAll(shardsToServe);
      if (!shards.isEmpty()) {
        LOG.info(""String_Node_Str"",table,shards);
      }
      for (      String shard : shards) {
        LOG.info(""String_Node_Str"",table,shard);
        BlurIndex index=shardMap.remove(shard);
        close(index,table,shard);
        closed=true;
      }
    }
    if (closed) {
      TableContext.clear(table);
    }
  }
}","private void cleanup(){
  clearMapOfOldTables(_layout);
  clearMapOfOldTables(_distributedLayoutFactory.getLayoutCache());
  boolean closed=false;
  Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
  for (  String table : oldIndexesThatNeedToBeClosed.keySet()) {
    Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
    if (indexes == null) {
      continue;
    }
    for (    String shard : indexes.keySet()) {
      BlurIndex index=indexes.get(shard);
      if (index == null) {
        continue;
      }
      close(index,table,shard);
      closed=true;
    }
  }
  for (  String table : _indexes.keySet()) {
    Map<String,BlurIndex> shardMap=_indexes.get(table);
    if (shardMap != null) {
      Set<String> shards=new HashSet<String>(shardMap.keySet());
      Set<String> shardsToServe=getShardsToServe(table);
      shards.removeAll(shardsToServe);
      if (!shards.isEmpty()) {
        LOG.info(""String_Node_Str"",table,shards);
      }
      for (      String shard : shards) {
        LOG.info(""String_Node_Str"",table,shard);
        BlurIndex index=shardMap.remove(shard);
        close(index,table,shard);
        closed=true;
      }
    }
    if (closed) {
      TableContext.clear(table);
    }
  }
}",0.9732321214542548
82268,"private DistributedLayoutFactory getDefaultLayoutFactory(){
  return new DistributedLayoutFactory(){
    @Override public DistributedLayout createDistributedLayout(    String table,    List<String> shardList,    List<String> shardServerList,    List<String> offlineShardServers){
      DistributedLayoutManager layoutManager=new DistributedLayoutManager();
      layoutManager.setNodes(shardServerList);
      layoutManager.setNodesOffline(offlineShardServers);
      layoutManager.setShards(shardList);
      layoutManager.init();
      return layoutManager;
    }
    @Override public DistributedLayout readCurrentLayout(    String table){
      throw new RuntimeException(""String_Node_Str"");
    }
  }
;
}","private DistributedLayoutFactory getDefaultLayoutFactory(){
  return new DistributedLayoutFactory(){
    @Override public DistributedLayout createDistributedLayout(    String table,    List<String> shardList,    List<String> shardServerList,    List<String> offlineShardServers){
      DistributedLayoutManager layoutManager=new DistributedLayoutManager();
      layoutManager.setNodes(shardServerList);
      layoutManager.setNodesOffline(offlineShardServers);
      layoutManager.setShards(shardList);
      layoutManager.init();
      return layoutManager;
    }
    @Override public DistributedLayout readCurrentLayout(    String table){
      throw new RuntimeException(""String_Node_Str"");
    }
    @Override public Map<String,?> getLayoutCache(){
      throw new RuntimeException(""String_Node_Str"");
    }
  }
;
}",0.9267015706806284
82269,"private String findExistingStoragePath(String table) throws KeeperException, InterruptedException {
  String tableStoragePath=ZookeeperPathConstants.getTablePath(_cluster,table);
  ZkUtils.mkNodesStr(_zooKeeper,tableStoragePath);
  List<String> children=new ArrayList<String>(_zooKeeper.getChildren(tableStoragePath,false));
  String path=null;
  for (  String child : children) {
    int index=child.lastIndexOf(SEP);
    if (index >= 0) {
      if (child.substring(0,index).equals(table)) {
        if (path == null || child.compareTo(path) > 0) {
          path=child;
        }
      }
    }
  }
  return tableStoragePath + ""String_Node_Str"" + path;
}","private String findExistingStoragePath(String table) throws KeeperException, InterruptedException {
  String tableStoragePath=ZookeeperPathConstants.getTablePath(_cluster,table);
  ZkUtils.mkNodesStr(_zooKeeper,tableStoragePath);
  List<String> children=new ArrayList<String>(_zooKeeper.getChildren(tableStoragePath,false));
  String path=null;
  for (  String child : children) {
    int index=child.lastIndexOf(SEP);
    if (index >= 0) {
      if (child.substring(0,index).equals(table)) {
        if (path == null || child.compareTo(path) > 0) {
          path=child;
        }
      }
    }
  }
  if (path == null) {
    return null;
  }
  return tableStoragePath + ""String_Node_Str"" + path;
}",0.968218773096822
82270,"@Override public DistributedLayout createDistributedLayout(String table,List<String> shardList,List<String> shardServerList,List<String> offlineShardServers){
  MasterBasedDistributedLayout layout=_cachedLayoutMap.get(table);
  List<String> onlineShardServerList=getOnlineShardServerList(shardServerList,offlineShardServers);
  if (layout == null || layout.isOutOfDate(shardList,onlineShardServerList)) {
    LOG.info(""String_Node_Str"",table);
    MasterBasedDistributedLayout newLayout=newLayout(table,shardList,onlineShardServerList);
    _cachedLayoutMap.put(table,newLayout);
    return newLayout;
  }
 else {
    return layout;
  }
}","@Override public DistributedLayout createDistributedLayout(String table,List<String> shardList,List<String> shardServerList,List<String> offlineShardServers){
  LOG.info(""String_Node_Str"",table);
  MasterBasedDistributedLayout layout=_cachedLayoutMap.get(table);
  List<String> onlineShardServerList=getOnlineShardServerList(shardServerList,offlineShardServers);
  if (layout == null || layout.isOutOfDate(shardList,onlineShardServerList)) {
    LOG.info(""String_Node_Str"",table);
    MasterBasedDistributedLayout newLayout=newLayout(table,shardList,onlineShardServerList);
    _cachedLayoutMap.put(table,newLayout);
    return newLayout;
  }
 else {
    LOG.info(""String_Node_Str"",table);
    return layout;
  }
}",0.9437869822485208
82271,"@Override public DistributedLayout readCurrentLayout(String table){
  LOG.info(""String_Node_Str"",table);
  try {
    String existingStoragePath=findExistingStoragePath(table);
    if (existingStoragePath == null) {
      return null;
    }
    Stat stat=_zooKeeper.exists(existingStoragePath,false);
    if (stat != null) {
      LOG.info(""String_Node_Str"",table);
      byte[] data=_zooKeeper.getData(existingStoragePath,false,stat);
      if (data != null) {
        return fromBytes(data);
      }
    }
    return null;
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}","@Override public DistributedLayout readCurrentLayout(String table){
  LOG.info(""String_Node_Str"",table);
  try {
    String existingStoragePath=findExistingStoragePath(table);
    if (existingStoragePath == null) {
      LOG.info(""String_Node_Str"",table,existingStoragePath);
      return null;
    }
    Stat stat=_zooKeeper.exists(existingStoragePath,false);
    if (stat != null) {
      LOG.info(""String_Node_Str"",table,existingStoragePath);
      LOG.info(""String_Node_Str"",table);
      byte[] data=_zooKeeper.getData(existingStoragePath,false,stat);
      if (data != null) {
        return fromBytes(data);
      }
 else {
        return null;
      }
    }
 else {
      LOG.info(""String_Node_Str"",table,existingStoragePath);
      return null;
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}",0.5033467202141901
82272,"@Override public Map<String,String> shardServerLayout(String table) throws BlurException, TException {
  try {
    checkTable(table);
    Map<String,Map<String,String>> layout=_shardServerLayout.get();
    Map<String,String> tableLayout=layout.get(table);
    if (tableLayout == null) {
      return new HashMap<String,String>();
    }
    return tableLayout;
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e,table);
  }
}","@Override public Map<String,String> shardServerLayout(String table) throws BlurException, TException {
  try {
    checkTable(table);
    Map<String,String> tableLayout=getTableLayout(table);
    return tableLayout;
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e,table);
  }
}",0.8065173116089613
82273,"@Override public BlurResults query(final String table,final BlurQuery blurQuery) throws BlurException, TException {
  try {
    checkTable(table);
    Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",table),Trace.param(""String_Node_Str"",blurQuery));
    String cluster=_clusterStatus.getCluster(true,table);
    _queryChecker.checkQuery(blurQuery);
    checkSelectorFetchSize(blurQuery.getSelector());
    TableDescriptor tableDescriptor=_clusterStatus.getTableDescriptor(true,cluster,table);
    int shardCount=tableDescriptor.getShardCount();
    if (blurQuery.getUuid() == null) {
      blurQuery.setUuid(UUID.randomUUID().toString());
    }
    BlurUtil.setStartTime(blurQuery);
    trace.done();
    BlurUtil.setStartTime(blurQuery);
    OUTER:     for (int retries=0; retries < _maxDefaultRetries; retries++) {
      Tracer selectorTrace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",retries));
      final AtomicLongArray facetCounts=BlurUtil.getAtomicLongArraySameLengthAsList(blurQuery.facets);
      Selector selector=blurQuery.getSelector();
      if (selector == null) {
        selector=new Selector();
        selector.setColumnFamiliesToFetch(EMPTY_SET);
        selector.setColumnsToFetch(EMPTY_MAP);
        if (!blurQuery.query.rowQuery) {
          selector.setRecordOnly(true);
        }
      }
 else {
        HighlightOptions highlightOptions=selector.getHighlightOptions();
        if (highlightOptions != null && highlightOptions.getQuery() == null) {
          highlightOptions.setQuery(blurQuery.getQuery());
        }
      }
      blurQuery.setSelector(null);
      selectorTrace.done();
      BlurCommand<BlurResultIterable> command=new BlurCommand<BlurResultIterable>(){
        @Override public BlurResultIterable call(        Client client,        Connection connection) throws BlurException, TException {
          return new BlurResultIterableClient(connection,client,table,blurQuery,facetCounts,_remoteFetchCount);
        }
        @Override public BlurResultIterable call(        Client client) throws BlurException, TException {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
;
      command.setDetachClient(true);
      MergerBlurResultIterable merger=new MergerBlurResultIterable(blurQuery);
      BlurResultIterable hitsIterable=null;
      try {
        String rowId=blurQuery.getRowId();
        if (rowId == null) {
          Tracer scatterGatherTrace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",retries));
          try {
            hitsIterable=scatterGather(tableDescriptor.getCluster(),command,merger);
          }
  finally {
            scatterGatherTrace.done();
          }
        }
 else {
          String clientHostnamePort=getNode(table,rowId);
          hitsIterable=_client.execute(clientHostnamePort,command,_maxFetchRetries,_fetchDelay,_maxFetchDelay);
        }
        BlurResults results;
        Tracer convertToBlurResults=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",retries));
        try {
          results=convertToBlurResults(hitsIterable,blurQuery,facetCounts,_executor,selector,table);
        }
  finally {
          convertToBlurResults.done();
        }
        if (!validResults(results,shardCount,blurQuery)) {
          BlurClientManager.sleep(_defaultDelay,_maxDefaultDelay,retries,_maxDefaultRetries);
          Map<String,String> map=_shardServerLayout.get().get(table);
          LOG.info(""String_Node_Str"",table,map);
          continue OUTER;
        }
        return results;
      }
  finally {
        if (hitsIterable != null) {
          hitsIterable.close();
        }
      }
    }
    throw new BException(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table,blurQuery);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e,table,blurQuery);
  }
}","@Override public BlurResults query(final String table,final BlurQuery blurQuery) throws BlurException, TException {
  try {
    checkTable(table);
    Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",table),Trace.param(""String_Node_Str"",blurQuery));
    String cluster=_clusterStatus.getCluster(true,table);
    _queryChecker.checkQuery(blurQuery);
    checkSelectorFetchSize(blurQuery.getSelector());
    TableDescriptor tableDescriptor=_clusterStatus.getTableDescriptor(true,cluster,table);
    int shardCount=tableDescriptor.getShardCount();
    if (blurQuery.getUuid() == null) {
      blurQuery.setUuid(UUID.randomUUID().toString());
    }
    BlurUtil.setStartTime(blurQuery);
    trace.done();
    BlurUtil.setStartTime(blurQuery);
    OUTER:     for (int retries=0; retries < _maxDefaultRetries; retries++) {
      Tracer selectorTrace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",retries));
      final AtomicLongArray facetCounts=BlurUtil.getAtomicLongArraySameLengthAsList(blurQuery.facets);
      Selector selector=blurQuery.getSelector();
      if (selector == null) {
        selector=new Selector();
        selector.setColumnFamiliesToFetch(EMPTY_SET);
        selector.setColumnsToFetch(EMPTY_MAP);
        if (!blurQuery.query.rowQuery) {
          selector.setRecordOnly(true);
        }
      }
 else {
        HighlightOptions highlightOptions=selector.getHighlightOptions();
        if (highlightOptions != null && highlightOptions.getQuery() == null) {
          highlightOptions.setQuery(blurQuery.getQuery());
        }
      }
      blurQuery.setSelector(null);
      selectorTrace.done();
      BlurCommand<BlurResultIterable> command=new BlurCommand<BlurResultIterable>(){
        @Override public BlurResultIterable call(        Client client,        Connection connection) throws BlurException, TException {
          return new BlurResultIterableClient(connection,client,table,blurQuery,facetCounts,_remoteFetchCount);
        }
        @Override public BlurResultIterable call(        Client client) throws BlurException, TException {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
;
      command.setDetachClient(true);
      MergerBlurResultIterable merger=new MergerBlurResultIterable(blurQuery);
      BlurResultIterable hitsIterable=null;
      try {
        String rowId=blurQuery.getRowId();
        if (rowId == null) {
          Tracer scatterGatherTrace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",retries));
          try {
            hitsIterable=scatterGather(tableDescriptor.getCluster(),command,merger);
          }
  finally {
            scatterGatherTrace.done();
          }
        }
 else {
          String clientHostnamePort=getNode(table,rowId);
          hitsIterable=_client.execute(clientHostnamePort,command,_maxFetchRetries,_fetchDelay,_maxFetchDelay);
        }
        BlurResults results;
        Tracer convertToBlurResults=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",retries));
        try {
          results=convertToBlurResults(hitsIterable,blurQuery,facetCounts,_executor,selector,table);
        }
  finally {
          convertToBlurResults.done();
        }
        if (!validResults(results,shardCount,blurQuery)) {
          BlurClientManager.sleep(_defaultDelay,_maxDefaultDelay,retries,_maxDefaultRetries);
          Map<String,String> map=getTableLayout(table);
          LOG.info(""String_Node_Str"",table,map);
          continue OUTER;
        }
        return results;
      }
  finally {
        if (hitsIterable != null) {
          hitsIterable.close();
        }
      }
    }
    throw new BException(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table,blurQuery);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e,table,blurQuery);
  }
}",0.9961880559085132
82274,"@Override public void enqueueMutateBatch(List<RowMutation> mutations) throws BlurException, TException {
  try {
    for (    RowMutation mutation : mutations) {
      MutationHelper.validateMutation(mutation);
    }
    Map<String,List<RowMutation>> batches=new HashMap<String,List<RowMutation>>();
    for (    RowMutation mutation : mutations) {
      checkTable(mutation.table);
      checkForUpdates(mutation.table);
      MutationHelper.validateMutation(mutation);
      String table=mutation.getTable();
      int numberOfShards=getShardCount(table);
      Map<String,String> tableLayout=_shardServerLayout.get().get(table);
      if (tableLayout == null || tableLayout.size() != numberOfShards) {
        throw new BException(""String_Node_Str"");
      }
      String shardName=MutationHelper.getShardName(table,mutation.rowId,numberOfShards,_blurPartitioner);
      String node=tableLayout.get(shardName);
      List<RowMutation> list=batches.get(node);
      if (list == null) {
        list=new ArrayList<RowMutation>();
        batches.put(node,list);
      }
      list.add(mutation);
    }
    List<Future<Void>> futures=new ArrayList<Future<Void>>();
    for (    Entry<String,List<RowMutation>> entry : batches.entrySet()) {
      final String node=entry.getKey();
      final List<RowMutation> mutationsLst=entry.getValue();
      futures.add(_executor.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          return _client.execute(node,new BlurCommand<Void>(){
            @Override public Void call(            Client client) throws BlurException, TException {
              client.enqueueMutateBatch(mutationsLst);
              return null;
            }
          }
,_maxMutateRetries,_mutateDelay,_maxMutateDelay);
        }
      }
));
    }
    for (    Future<Void> future : futures) {
      try {
        future.get();
      }
 catch (      InterruptedException e) {
        LOG.error(""String_Node_Str"",e);
        throw new BException(""String_Node_Str"",e);
      }
catch (      ExecutionException e) {
        LOG.error(""String_Node_Str"",e.getCause());
        throw new BException(""String_Node_Str"",e.getCause());
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e);
  }
}","@Override public void enqueueMutateBatch(List<RowMutation> mutations) throws BlurException, TException {
  try {
    for (    RowMutation mutation : mutations) {
      MutationHelper.validateMutation(mutation);
    }
    Map<String,List<RowMutation>> batches=new HashMap<String,List<RowMutation>>();
    for (    RowMutation mutation : mutations) {
      checkTable(mutation.table);
      checkForUpdates(mutation.table);
      MutationHelper.validateMutation(mutation);
      String table=mutation.getTable();
      int numberOfShards=getShardCount(table);
      Map<String,String> tableLayout=getTableLayout(table);
      if (tableLayout == null || tableLayout.size() != numberOfShards) {
        throw new BException(""String_Node_Str"");
      }
      String shardName=MutationHelper.getShardName(table,mutation.rowId,numberOfShards,_blurPartitioner);
      String node=tableLayout.get(shardName);
      List<RowMutation> list=batches.get(node);
      if (list == null) {
        list=new ArrayList<RowMutation>();
        batches.put(node,list);
      }
      list.add(mutation);
    }
    List<Future<Void>> futures=new ArrayList<Future<Void>>();
    for (    Entry<String,List<RowMutation>> entry : batches.entrySet()) {
      final String node=entry.getKey();
      final List<RowMutation> mutationsLst=entry.getValue();
      futures.add(_executor.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          return _client.execute(node,new BlurCommand<Void>(){
            @Override public Void call(            Client client) throws BlurException, TException {
              client.enqueueMutateBatch(mutationsLst);
              return null;
            }
          }
,_maxMutateRetries,_mutateDelay,_maxMutateDelay);
        }
      }
));
    }
    for (    Future<Void> future : futures) {
      try {
        future.get();
      }
 catch (      InterruptedException e) {
        LOG.error(""String_Node_Str"",e);
        throw new BException(""String_Node_Str"",e);
      }
catch (      ExecutionException e) {
        LOG.error(""String_Node_Str"",e.getCause());
        throw new BException(""String_Node_Str"",e.getCause());
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e);
  }
}",0.9936948297604036
82275,"@Override public void enqueueMutate(final RowMutation mutation) throws BlurException, TException {
  try {
    checkTable(mutation.table);
    checkForUpdates(mutation.table);
    MutationHelper.validateMutation(mutation);
    String table=mutation.getTable();
    int numberOfShards=getShardCount(table);
    Map<String,String> tableLayout=_shardServerLayout.get().get(table);
    if (tableLayout.size() != numberOfShards) {
      throw new BException(""String_Node_Str"");
    }
    String shardName=MutationHelper.getShardName(table,mutation.rowId,numberOfShards,_blurPartitioner);
    String node=tableLayout.get(shardName);
    _client.execute(node,new BlurCommand<Void>(){
      @Override public Void call(      Client client) throws BlurException, TException {
        client.enqueueMutate(mutation);
        return null;
      }
    }
,_maxMutateRetries,_mutateDelay,_maxMutateDelay);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,mutation);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e,mutation);
  }
}","@Override public void enqueueMutate(final RowMutation mutation) throws BlurException, TException {
  try {
    checkTable(mutation.table);
    checkForUpdates(mutation.table);
    MutationHelper.validateMutation(mutation);
    String table=mutation.getTable();
    int numberOfShards=getShardCount(table);
    Map<String,String> tableLayout=getTableLayout(table);
    if (tableLayout.size() != numberOfShards) {
      throw new BException(""String_Node_Str"");
    }
    String shardName=MutationHelper.getShardName(table,mutation.rowId,numberOfShards,_blurPartitioner);
    String node=tableLayout.get(shardName);
    _client.execute(node,new BlurCommand<Void>(){
      @Override public Void call(      Client client) throws BlurException, TException {
        client.enqueueMutate(mutation);
        return null;
      }
    }
,_maxMutateRetries,_mutateDelay,_maxMutateDelay);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,mutation);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e,mutation);
  }
}",0.9862763037511436
82276,"@Override public void mutateBatch(List<RowMutation> mutations) throws BlurException, TException {
  try {
    for (    RowMutation mutation : mutations) {
      MutationHelper.validateMutation(mutation);
    }
    Map<String,List<RowMutation>> batches=new HashMap<String,List<RowMutation>>();
    for (    RowMutation mutation : mutations) {
      checkTable(mutation.table);
      checkForUpdates(mutation.table);
      MutationHelper.validateMutation(mutation);
      String table=mutation.getTable();
      int numberOfShards=getShardCount(table);
      Map<String,String> tableLayout=_shardServerLayout.get().get(table);
      if (tableLayout == null || tableLayout.size() != numberOfShards) {
        throw new BException(""String_Node_Str"");
      }
      String shardName=MutationHelper.getShardName(table,mutation.rowId,numberOfShards,_blurPartitioner);
      String node=tableLayout.get(shardName);
      List<RowMutation> list=batches.get(node);
      if (list == null) {
        list=new ArrayList<RowMutation>();
        batches.put(node,list);
      }
      list.add(mutation);
    }
    List<Future<Void>> futures=new ArrayList<Future<Void>>();
    for (    Entry<String,List<RowMutation>> entry : batches.entrySet()) {
      final String node=entry.getKey();
      final List<RowMutation> mutationsLst=entry.getValue();
      futures.add(_executor.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          return _client.execute(node,new BlurCommand<Void>(){
            @Override public Void call(            Client client) throws BlurException, TException {
              client.mutateBatch(mutationsLst);
              return null;
            }
          }
,_maxMutateRetries,_mutateDelay,_maxMutateDelay);
        }
      }
));
    }
    for (    Future<Void> future : futures) {
      try {
        future.get();
      }
 catch (      InterruptedException e) {
        LOG.error(""String_Node_Str"",e);
        throw new BException(""String_Node_Str"",e);
      }
catch (      ExecutionException e) {
        LOG.error(""String_Node_Str"",e.getCause());
        throw new BException(""String_Node_Str"",e.getCause());
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e);
  }
}","@Override public void mutateBatch(List<RowMutation> mutations) throws BlurException, TException {
  try {
    for (    RowMutation mutation : mutations) {
      MutationHelper.validateMutation(mutation);
    }
    Map<String,List<RowMutation>> batches=new HashMap<String,List<RowMutation>>();
    for (    RowMutation mutation : mutations) {
      checkTable(mutation.table);
      checkForUpdates(mutation.table);
      MutationHelper.validateMutation(mutation);
      String table=mutation.getTable();
      int numberOfShards=getShardCount(table);
      Map<String,String> tableLayout=getTableLayout(table);
      if (tableLayout == null || tableLayout.size() != numberOfShards) {
        throw new BException(""String_Node_Str"");
      }
      String shardName=MutationHelper.getShardName(table,mutation.rowId,numberOfShards,_blurPartitioner);
      String node=tableLayout.get(shardName);
      List<RowMutation> list=batches.get(node);
      if (list == null) {
        list=new ArrayList<RowMutation>();
        batches.put(node,list);
      }
      list.add(mutation);
    }
    List<Future<Void>> futures=new ArrayList<Future<Void>>();
    for (    Entry<String,List<RowMutation>> entry : batches.entrySet()) {
      final String node=entry.getKey();
      final List<RowMutation> mutationsLst=entry.getValue();
      futures.add(_executor.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          return _client.execute(node,new BlurCommand<Void>(){
            @Override public Void call(            Client client) throws BlurException, TException {
              client.mutateBatch(mutationsLst);
              return null;
            }
          }
,_maxMutateRetries,_mutateDelay,_maxMutateDelay);
        }
      }
));
    }
    for (    Future<Void> future : futures) {
      try {
        future.get();
      }
 catch (      InterruptedException e) {
        LOG.error(""String_Node_Str"",e);
        throw new BException(""String_Node_Str"",e);
      }
catch (      ExecutionException e) {
        LOG.error(""String_Node_Str"",e.getCause());
        throw new BException(""String_Node_Str"",e.getCause());
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e);
  }
}",0.9936575052854124
82277,"@Override public void mutate(final RowMutation mutation) throws BlurException, TException {
  try {
    checkTable(mutation.table);
    checkForUpdates(mutation.table);
    MutationHelper.validateMutation(mutation);
    String table=mutation.getTable();
    int numberOfShards=getShardCount(table);
    Map<String,String> tableLayout=_shardServerLayout.get().get(table);
    if (tableLayout.size() != numberOfShards) {
      throw new BException(""String_Node_Str"");
    }
    String shardName=MutationHelper.getShardName(table,mutation.rowId,numberOfShards,_blurPartitioner);
    String node=tableLayout.get(shardName);
    _client.execute(node,new BlurCommand<Void>(){
      @Override public Void call(      Client client) throws BlurException, TException {
        client.mutate(mutation);
        return null;
      }
    }
,_maxMutateRetries,_mutateDelay,_maxMutateDelay);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,mutation);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e,mutation);
  }
}","@Override public void mutate(final RowMutation mutation) throws BlurException, TException {
  try {
    checkTable(mutation.table);
    checkForUpdates(mutation.table);
    MutationHelper.validateMutation(mutation);
    String table=mutation.getTable();
    int numberOfShards=getShardCount(table);
    Map<String,String> tableLayout=getTableLayout(table);
    if (tableLayout.size() != numberOfShards) {
      throw new BException(""String_Node_Str"");
    }
    String shardName=MutationHelper.getShardName(table,mutation.rowId,numberOfShards,_blurPartitioner);
    String node=tableLayout.get(shardName);
    _client.execute(node,new BlurCommand<Void>(){
      @Override public Void call(      Client client) throws BlurException, TException {
        client.mutate(mutation);
        return null;
      }
    }
,_maxMutateRetries,_mutateDelay,_maxMutateDelay);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,mutation);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(""String_Node_Str"",e,mutation);
  }
}",0.9860982391102872
82278,"/** 
 * The way this method is called via warm up methods the likelihood of creating multiple bitsets during a race condition is very low, that's why this method is not synced.
 */
public static OpenBitSet getPrimeDocBitSet(Term primeDocTerm,IndexReader reader) throws IOException {
  Object key=reader.getCoreCacheKey();
  final Map<Object,OpenBitSet> primeDocMap=getPrimeDocMap(primeDocTerm);
  OpenBitSet bitSet=primeDocMap.get(key);
  if (bitSet == null) {
    reader.addReaderClosedListener(new ReaderClosedListener(){
      @Override public void onClose(      IndexReader reader){
        Object key=reader.getCoreCacheKey();
        LOG.debug(""String_Node_Str"" + primeDocMap.size() + ""String_Node_Str""+ reader+ ""String_Node_Str"");
        primeDocMap.remove(key);
      }
    }
);
    LOG.debug(""String_Node_Str"" + reader + ""String_Node_Str""+ primeDocMap.size()+ ""String_Node_Str"");
    final OpenBitSet bs=new OpenBitSet(reader.maxDoc());
    primeDocMap.put(key,bs);
    IndexSearcher searcher=new IndexSearcher(reader);
    searcher.search(new TermQuery(primeDocTerm),new Collector(){
      @Override public void setScorer(      Scorer scorer) throws IOException {
      }
      @Override public void setNextReader(      AtomicReaderContext atomicReaderContext) throws IOException {
      }
      @Override public void collect(      int doc) throws IOException {
        bs.set(doc);
      }
      @Override public boolean acceptsDocsOutOfOrder(){
        return false;
      }
    }
);
    return bs;
  }
  return bitSet;
}","/** 
 * The way this method is called via warm up methods the likelihood of creating multiple bitsets during a race condition is very low, that's why this method is not synced.
 */
public static OpenBitSet getPrimeDocBitSet(Term primeDocTerm,AtomicReader reader) throws IOException {
  Object key=reader.getCoreCacheKey();
  final Map<Object,OpenBitSet> primeDocMap=getPrimeDocMap(primeDocTerm);
  OpenBitSet bitSet=primeDocMap.get(key);
  if (bitSet == null) {
synchronized (reader) {
      reader.addReaderClosedListener(new ReaderClosedListener(){
        @Override public void onClose(        IndexReader reader){
          Object key=reader.getCoreCacheKey();
          LOG.debug(""String_Node_Str"" + primeDocMap.size() + ""String_Node_Str""+ reader+ ""String_Node_Str"");
          primeDocMap.remove(key);
        }
      }
);
      LOG.debug(""String_Node_Str"" + reader + ""String_Node_Str""+ primeDocMap.size()+ ""String_Node_Str"");
      final OpenBitSet bs=new OpenBitSet(reader.maxDoc());
      DocsEnum termDocsEnum=reader.termDocsEnum(primeDocTerm);
      if (termDocsEnum == null) {
        return bs;
      }
      int docFreq=reader.docFreq(primeDocTerm);
      int doc;
      int count=0;
      while ((doc=termDocsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        bs.fastSet(doc);
        count++;
      }
      if (count == docFreq) {
        primeDocMap.put(key,bs);
      }
 else {
        LOG.info(""String_Node_Str"",reader,count,docFreq);
      }
      return bs;
    }
  }
  return bitSet;
}",0.6472131147540984
82279,"@Override public void run(){
  try {
    entry.getValue().process(_counts,_minimumsBeforeReturning,_running);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    finished.incrementAndGet();
  }
}","@Override public void run(){
  try {
    entry.getValue().process(_counts,_minimumsBeforeReturning,_running);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
 finally {
    finished.incrementAndGet();
  }
}",0.926829268292683
82280,"private void processInternal(ExecutorService executor) throws IOException {
  List<Entry<Object,Info>> entries=new ArrayList<Entry<Object,Info>>(_infoMap.entrySet());
  Collections.sort(entries,COMPARATOR);
  if (executor == null) {
    for (    Entry<Object,Info> e : entries) {
      if (_running.get()) {
        e.getValue().process(_counts,_minimumsBeforeReturning,_running);
      }
    }
  }
 else {
    final AtomicInteger finished=new AtomicInteger();
    for (    Entry<Object,Info> e : entries) {
      if (_running.get()) {
        final Entry<Object,Info> entry=e;
        executor.submit(new Runnable(){
          @Override public void run(){
            try {
              entry.getValue().process(_counts,_minimumsBeforeReturning,_running);
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
 finally {
              finished.incrementAndGet();
            }
          }
        }
);
      }
    }
    while (finished.get() < entries.size()) {
synchronized (this) {
        try {
          wait(1);
        }
 catch (        InterruptedException e) {
          throw new IOException(e);
        }
      }
    }
  }
}","private void processInternal(ExecutorService executor) throws IOException {
  List<Entry<Object,Info>> entries=new ArrayList<Entry<Object,Info>>(_infoMap.entrySet());
  Collections.sort(entries,COMPARATOR);
  if (executor == null) {
    for (    Entry<Object,Info> e : entries) {
      if (_running.get()) {
        e.getValue().process(_counts,_minimumsBeforeReturning,_running);
      }
    }
  }
 else {
    final AtomicInteger finished=new AtomicInteger();
    for (    Entry<Object,Info> e : entries) {
      if (_running.get()) {
        final Entry<Object,Info> entry=e;
        executor.submit(new Runnable(){
          @Override public void run(){
            try {
              entry.getValue().process(_counts,_minimumsBeforeReturning,_running);
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"",e);
              throw new RuntimeException(e);
            }
 finally {
              finished.incrementAndGet();
            }
          }
        }
);
      }
    }
    while (finished.get() < entries.size()) {
synchronized (this) {
        try {
          wait(1);
        }
 catch (        InterruptedException e) {
          throw new IOException(e);
        }
      }
    }
  }
}",0.9810699588477366
82281,"@Test public void testLoadingNewTypeWhenNotDefined() throws IOException {
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setName(name);
  tableDescriptor.setTableUri(file.toURI().toString());
  TableContext context=TableContext.create(tableDescriptor);
  FieldManager fieldManager=context.getFieldManager();
  try {
    fieldManager.addColumnDefinition(""String_Node_Str"",""String_Node_Str"",null,false,""String_Node_Str"",false,null);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
}","@Test public void testLoadingNewTypeWhenNotDefined() throws IOException {
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setName(name);
  tableDescriptor.setTableUri(file.toURI().toString());
  TableContext context=TableContext.create(tableDescriptor);
  FieldManager fieldManager=context.getFieldManager();
  try {
    boolean result=fieldManager.addColumnDefinition(""String_Node_Str"",""String_Node_Str"",null,false,""String_Node_Str"",false,null);
    fail(""String_Node_Str"" + result + ""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
}",0.960644007155635
82282,"@Before public void setup(){
  TableContext.clear();
  base=new File(TMPDIR,""String_Node_Str"");
  rm(base);
  file=new File(base,name);
  file.mkdirs();
}","@Before public void setup() throws IOException {
  TableContext.clear();
  TableContext.setSystemBlurConfiguration(new BlurConfiguration());
  base=new File(TMPDIR,""String_Node_Str"");
  rm(base);
  file=new File(base,name);
  file.mkdirs();
}",0.7777777777777778
82283,"public void doitInternal(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  AtomicBoolean quit=new AtomicBoolean();
  AtomicBoolean help=new AtomicBoolean();
  Properties properties=new Properties();
  try {
    properties.load(getClass().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    if (Main.debug) {
      e.printStackTrace();
    }
    throw new CommandException(e.getMessage());
  }
  Map<String,String> metricNames=new HashMap<String,String>();
  Map<String,String> helpMap=new HashMap<String,String>();
  Set<Object> keySet=properties.keySet();
  for (  Object k : keySet) {
    String key=k.toString();
    if (isShortName(key)) {
      String shortName=getShortName(key,properties);
      String longName=getLongName(getLongNameKey(key),properties);
      metricNames.put(shortName,longName);
    }
 else     if (isHelpName(key)) {
      int indexOf=key.indexOf(HELP);
      String strKey=key.substring(0,indexOf);
      Object shortNameKey=properties.get(strKey + SHORTNAME);
      Object helpMessage=properties.get(key);
      if (shortNameKey != null && helpMessage != null) {
        helpMap.put(shortNameKey.toString(),helpMessage.toString());
      }
    }
  }
  String labelsStr=properties.getProperty(""String_Node_Str"");
  String[] labels=resolveShortNames(labelsStr.split(""String_Node_Str""),properties);
  String sizesStr=properties.getProperty(""String_Node_Str"");
  Set<String> sizes=new HashSet<String>(Arrays.asList(resolveShortNames(sizesStr.split(""String_Node_Str""),properties)));
  Set<String> keys=new HashSet<String>(metricNames.values());
  String cluster;
  if (args.length != 2) {
    cluster=Main.getCluster(client,""String_Node_Str"" + help());
  }
 else {
    cluster=args[1];
  }
  ConsoleReader reader=this.getConsoleReader();
  if (reader != null) {
    Terminal terminal=reader.getTerminal();
    _height=terminal.getHeight() - 2;
    _width=terminal.getWidth() - 2;
    try {
      reader.setPrompt(""String_Node_Str"");
      reader.clearScreen();
    }
 catch (    IOException e) {
      if (Main.debug) {
        e.printStackTrace();
      }
    }
    startCommandWatcher(reader,quit,help,this);
  }
  List<String> shardServerList=new ArrayList<String>(client.shardServerList(cluster));
  Collections.sort(shardServerList);
  Map<String,AtomicReference<Client>> shardClients=setupClients(shardServerList);
  String shardServerLabel=properties.getProperty(TOP_SHARD_SERVER_SHORTNAME);
  int longestServerName=Math.max(getSizeOfLongestKey(shardClients),shardServerLabel.length());
  StringBuilder header=new StringBuilder(""String_Node_Str"" + longestServerName + ""String_Node_Str"");
  for (int i=1; i < labels.length; i++) {
    header.append(""String_Node_Str"");
  }
  do {
    int lineCount=0;
    StringBuilder output=new StringBuilder();
    if (quit.get()) {
      return;
    }
 else     if (help.get()) {
      showHelp(output,labels,helpMap);
    }
 else {
      output.append(truncate(String.format(header.toString(),(Object[])labels)) + ""String_Node_Str"");
      lineCount++;
      SERVER:       for (      Entry<String,AtomicReference<Client>> e : new TreeMap<String,AtomicReference<Client>>(shardClients).entrySet()) {
        String shardServer=e.getKey();
        AtomicReference<Client> ref=e.getValue();
        Map<String,Metric> metrics=getMetrics(shardServer,ref,keys);
        if (metrics == null) {
          String line=String.format(""String_Node_Str"" + longestServerName + ""String_Node_Str"",shardServer);
          output.append(line);
          lineCount++;
          if (tooLong(lineCount)) {
            break SERVER;
          }
        }
 else {
          Object[] cols=new Object[labels.length];
          int c=0;
          cols[c++]=shardServer;
          StringBuilder sb=new StringBuilder(""String_Node_Str"" + longestServerName + ""String_Node_Str"");
          for (int i=1; i < labels.length; i++) {
            String mn=metricNames.get(labels[i]);
            Metric metric=metrics.get(mn);
            Double value;
            if (metric == null) {
              value=null;
            }
 else {
              Map<String,Double> doubleMap=metric.getDoubleMap();
              value=doubleMap.get(""String_Node_Str"");
              if (value == null) {
                value=doubleMap.get(""String_Node_Str"");
              }
            }
            if (value == null) {
              value=0.0;
            }
            cols[c++]=humanize(value,sizes.contains(mn));
            sb.append(""String_Node_Str"");
          }
          output.append(truncate(String.format(sb.toString(),cols)) + ""String_Node_Str"");
          lineCount++;
          if (tooLong(lineCount)) {
            break SERVER;
          }
        }
      }
    }
    if (reader != null) {
      try {
        reader.clearScreen();
      }
 catch (      IOException e) {
        if (Main.debug) {
          e.printStackTrace();
        }
      }
    }
    out.print(output.toString());
    out.flush();
    if (reader != null) {
      try {
synchronized (this) {
          wait(3000);
        }
      }
 catch (      InterruptedException e) {
        return;
      }
      Terminal terminal=reader.getTerminal();
      _height=terminal.getHeight() - 2;
      _width=terminal.getWidth() - 2;
      List<String> currentShardServerList=new ArrayList<String>(client.shardServerList(cluster));
      Collections.sort(currentShardServerList);
      if (!shardServerList.equals(currentShardServerList)) {
        close(shardClients);
        shardClients=setupClients(shardServerList);
      }
    }
  }
 while (reader != null);
}","public void doitInternal(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  AtomicBoolean quit=new AtomicBoolean();
  AtomicBoolean help=new AtomicBoolean();
  Properties properties=new Properties();
  try {
    properties.load(getClass().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    if (Main.debug) {
      e.printStackTrace();
    }
    throw new CommandException(e.getMessage());
  }
  String cluster;
  if (args.length != 2) {
    cluster=Main.getCluster(client,""String_Node_Str"" + help());
  }
 else {
    cluster=args[1];
  }
  Map<String,String> metricNames=new HashMap<String,String>();
  Map<String,String> helpMap=new HashMap<String,String>();
  Set<Object> keySet=properties.keySet();
  for (  Object k : keySet) {
    String key=k.toString();
    if (isShortName(key)) {
      String shortName=getShortName(key,properties);
      String longName=getLongName(getLongNameKey(key),properties);
      longName=longName.replace(""String_Node_Str"",cluster);
      metricNames.put(shortName,longName);
    }
 else     if (isHelpName(key)) {
      int indexOf=key.indexOf(HELP);
      String strKey=key.substring(0,indexOf);
      Object shortNameKey=properties.get(strKey + SHORTNAME);
      Object helpMessage=properties.get(key);
      if (shortNameKey != null && helpMessage != null) {
        helpMap.put(shortNameKey.toString(),helpMessage.toString());
      }
    }
  }
  String labelsStr=properties.getProperty(""String_Node_Str"");
  String[] labels=resolveShortNames(labelsStr.split(""String_Node_Str""),properties);
  String sizesStr=properties.getProperty(""String_Node_Str"");
  Set<String> sizes=new HashSet<String>(Arrays.asList(resolveShortNames(sizesStr.split(""String_Node_Str""),properties)));
  Set<String> keys=new HashSet<String>(metricNames.values());
  ConsoleReader reader=this.getConsoleReader();
  if (reader != null) {
    Terminal terminal=reader.getTerminal();
    _height=terminal.getHeight() - 2;
    _width=terminal.getWidth() - 2;
    try {
      reader.setPrompt(""String_Node_Str"");
      reader.clearScreen();
    }
 catch (    IOException e) {
      if (Main.debug) {
        e.printStackTrace();
      }
    }
    startCommandWatcher(reader,quit,help,this);
  }
  List<String> shardServerList=new ArrayList<String>(client.shardServerList(cluster));
  Collections.sort(shardServerList);
  Map<String,AtomicReference<Client>> shardClients=setupClients(shardServerList);
  String shardServerLabel=properties.getProperty(TOP_SHARD_SERVER_SHORTNAME);
  int longestServerName=Math.max(getSizeOfLongestKey(shardClients),shardServerLabel.length());
  StringBuilder header=new StringBuilder(""String_Node_Str"" + longestServerName + ""String_Node_Str"");
  for (int i=1; i < labels.length; i++) {
    header.append(""String_Node_Str"");
  }
  do {
    int lineCount=0;
    StringBuilder output=new StringBuilder();
    if (quit.get()) {
      return;
    }
 else     if (help.get()) {
      showHelp(output,labels,helpMap);
    }
 else {
      output.append(truncate(String.format(header.toString(),(Object[])labels)) + ""String_Node_Str"");
      lineCount++;
      SERVER:       for (      Entry<String,AtomicReference<Client>> e : new TreeMap<String,AtomicReference<Client>>(shardClients).entrySet()) {
        String shardServer=e.getKey();
        AtomicReference<Client> ref=e.getValue();
        Map<String,Metric> metrics=getMetrics(shardServer,ref,keys);
        if (metrics == null) {
          String line=String.format(""String_Node_Str"" + longestServerName + ""String_Node_Str"",shardServer);
          output.append(line);
          lineCount++;
          if (tooLong(lineCount)) {
            break SERVER;
          }
        }
 else {
          Object[] cols=new Object[labels.length];
          int c=0;
          cols[c++]=shardServer;
          StringBuilder sb=new StringBuilder(""String_Node_Str"" + longestServerName + ""String_Node_Str"");
          for (int i=1; i < labels.length; i++) {
            String mn=metricNames.get(labels[i]);
            Metric metric=metrics.get(mn);
            Double value;
            if (metric == null) {
              value=null;
            }
 else {
              Map<String,Double> doubleMap=metric.getDoubleMap();
              value=doubleMap.get(""String_Node_Str"");
              if (value == null) {
                value=doubleMap.get(""String_Node_Str"");
              }
            }
            if (value == null) {
              value=0.0;
            }
            cols[c++]=humanize(value,sizes.contains(mn));
            sb.append(""String_Node_Str"");
          }
          output.append(truncate(String.format(sb.toString(),cols)) + ""String_Node_Str"");
          lineCount++;
          if (tooLong(lineCount)) {
            break SERVER;
          }
        }
      }
    }
    if (reader != null) {
      try {
        reader.clearScreen();
      }
 catch (      IOException e) {
        if (Main.debug) {
          e.printStackTrace();
        }
      }
    }
    out.print(output.toString());
    out.flush();
    if (reader != null) {
      try {
synchronized (this) {
          wait(3000);
        }
      }
 catch (      InterruptedException e) {
        return;
      }
      Terminal terminal=reader.getTerminal();
      _height=terminal.getHeight() - 2;
      _width=terminal.getWidth() - 2;
      List<String> currentShardServerList=new ArrayList<String>(client.shardServerList(cluster));
      Collections.sort(currentShardServerList);
      if (!shardServerList.equals(currentShardServerList)) {
        close(shardClients);
        shardClients=setupClients(shardServerList);
      }
    }
  }
 while (reader != null);
}",0.969152124096598
82284,"private void watchForClusterChanges() throws KeeperException, InterruptedException {
  _watchForClusters=new WatchChildren(_zookeeper,ZookeeperPathConstants.getClustersPath());
  _watchForClusters.watch(new OnChange(){
    @Override public void action(    List<String> children){
      for (      String cluster : new HashSet<String>(_distributedLayoutFactoryMap.keySet())) {
        if (!children.contains(cluster)) {
          _distributedLayoutFactoryMap.remove(cluster);
        }
      }
      for (      String cluster : children) {
        try {
          watchForLayoutChanges(cluster);
        }
 catch (        KeeperException e) {
          LOG.error(""String_Node_Str"",e);
          throw new RuntimeException(e);
        }
catch (        InterruptedException e) {
          LOG.error(""String_Node_Str"",e);
          throw new RuntimeException(e);
        }
      }
    }
  }
);
}","private void watchForClusterChanges() throws KeeperException, InterruptedException {
  _watchForClusters=new WatchChildren(_zookeeper,ZookeeperPathConstants.getClustersPath());
  _watchForClusters.watch(new OnChange(){
    @Override public void action(    List<String> children){
      for (      String cluster : new HashSet<String>(_distributedLayoutFactoryMap.keySet())) {
        if (!children.contains(cluster)) {
          _distributedLayoutFactoryMap.remove(cluster);
        }
      }
      for (      String cluster : children) {
        try {
          watchForLayoutChangeEvents(cluster);
        }
 catch (        KeeperException e) {
          LOG.error(""String_Node_Str"",e);
          throw new RuntimeException(e);
        }
catch (        InterruptedException e) {
          LOG.error(""String_Node_Str"",e);
          throw new RuntimeException(e);
        }
      }
    }
  }
);
}",0.9972020145495244
82285,"@Override public void action(List<String> children){
  LOG.info(""String_Node_Str"",cluster);
  updateLayout();
}","@Override public void action(List<String> children){
  LOG.info(""String_Node_Str"",cluster,table);
  updateLayout(cluster);
}",0.9446808510638298
82286,"public void init() throws KeeperException, InterruptedException {
  setupZookeeper();
  registerMyself();
  _executor=Executors.newThreadPool(CONTROLLER_THREAD_POOL,_threadCount);
  _running.set(true);
  watchForClusterChanges();
  List<String> clusterList=_clusterStatus.getClusterList(false);
  for (  String cluster : clusterList) {
    watchForLayoutChanges(cluster);
  }
  updateLayout();
  startPreconnectTimer();
}","public void init() throws KeeperException, InterruptedException {
  setupZookeeper();
  registerMyself();
  _executor=Executors.newThreadPool(CONTROLLER_THREAD_POOL,_threadCount);
  _running.set(true);
  watchForClusterChanges();
  List<String> clusterList=_clusterStatus.getClusterList(false);
  for (  String cluster : clusterList) {
    watchForLayoutChangeEvents(cluster);
    updateLayout(cluster);
  }
  startPreconnectTimer();
}",0.9392523364485982
82287,"private synchronized void updateLayout(){
  if (!_clusterStatus.isOpen()) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  List<String> tableList=_clusterStatus.getTableList(false);
  HashMap<String,Map<String,String>> newLayout=new HashMap<String,Map<String,String>>();
  for (  String table : tableList) {
    String cluster=_clusterStatus.getCluster(false,table);
    if (cluster == null) {
      continue;
    }
    DistributedLayoutFactory distributedLayoutFactory=getDistributedLayoutFactory(cluster);
    DistributedLayout layout=distributedLayoutFactory.readCurrentLayout(table);
    if (layout != null) {
      Map<String,String> map=layout.getLayout();
      LOG.info(""String_Node_Str"",table,map);
      newLayout.put(table,map);
    }
 else {
      LOG.info(""String_Node_Str"",table);
    }
  }
  _shardServerLayout.set(newLayout);
}","private synchronized void updateLayout(String cluster){
  if (!_clusterStatus.isOpen()) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  List<String> tableList=_clusterStatus.getTableList(false,cluster);
  HashMap<String,Map<String,String>> newLayout=new HashMap<String,Map<String,String>>();
  for (  String table : tableList) {
    watchTableLayouts(cluster,table,_watchForTableLayoutChanges);
    DistributedLayoutFactory distributedLayoutFactory=getDistributedLayoutFactory(cluster);
    DistributedLayout layout=distributedLayoutFactory.readCurrentLayout(table);
    if (layout != null) {
      Map<String,String> map=layout.getLayout();
      LOG.info(""String_Node_Str"",table,map);
      newLayout.put(table,map);
    }
 else {
      LOG.info(""String_Node_Str"",table);
    }
  }
  _shardServerLayout.set(newLayout);
}",0.8912783751493429
82288,"@Override public IndexSearcherClosable getIndexSearcher() throws IOException {
  final IndexReader indexReader;
  _indexRefreshReadLock.lock();
  try {
    indexReader=_indexReader.get();
    indexReader.incRef();
  }
  finally {
    _indexRefreshReadLock.unlock();
  }
  return new IndexSearcherClosable(indexReader,_searchThreadPool){
    private boolean _closed;
    @Override public Directory getDirectory(){
      return _directory;
    }
    @Override public synchronized void close() throws IOException {
      if (!_closed) {
        indexReader.decRef();
        _closed=true;
      }
 else {
        LOG.error(""String_Node_Str"",new Throwable(),this);
      }
    }
  }
;
}","@Override public IndexSearcherClosable getIndexSearcher() throws IOException {
  final IndexReader indexReader;
  _indexRefreshReadLock.lock();
  try {
    indexReader=_indexReader.get();
    indexReader.incRef();
  }
  finally {
    _indexRefreshReadLock.unlock();
  }
  if (indexReader instanceof ExitableReader) {
    ((ExitableReader)indexReader).reset();
  }
  return new IndexSearcherClosable(indexReader,_searchThreadPool){
    private boolean _closed;
    @Override public Directory getDirectory(){
      return _directory;
    }
    @Override public synchronized void close() throws IOException {
      if (!_closed) {
        indexReader.decRef();
        _closed=true;
      }
 else {
        LOG.error(""String_Node_Str"",new Throwable(),this);
      }
    }
  }
;
}",0.935528120713306
82289,"@Test public void testQueryCancel() throws BlurException, TException, InterruptedException, IOException {
  final String tableName=""String_Node_Str"";
  createTable(tableName);
  loadTable(tableName);
  try {
    IndexManager.DEBUG_RUN_SLOW.set(true);
    final Iface client=getClient();
    final BlurQuery blurQueryRow=new BlurQuery();
    Query queryRow=new Query();
    queryRow.setQuery(""String_Node_Str"");
    blurQueryRow.setQuery(queryRow);
    blurQueryRow.setUseCacheIfPresent(false);
    blurQueryRow.setCacheResult(false);
    blurQueryRow.setUuid(""String_Node_Str"");
    final AtomicReference<BlurException> error=new AtomicReference<BlurException>();
    final AtomicBoolean fail=new AtomicBoolean();
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          client.query(tableName,blurQueryRow);
          fail.set(true);
        }
 catch (        BlurException e) {
          error.set(e);
        }
catch (        TException e) {
          e.printStackTrace();
          fail.set(true);
        }
      }
    }
).start();
    Thread.sleep(500);
    client.cancelQuery(tableName,blurQueryRow.getUuid());
    BlurException blurException=pollForError(error,10,TimeUnit.SECONDS,null,fail,-1);
    if (fail.get()) {
      fail(""String_Node_Str"");
    }
    assertEquals(blurException.getErrorType(),ErrorType.QUERY_CANCEL);
  }
  finally {
    IndexManager.DEBUG_RUN_SLOW.set(false);
  }
}","@Test public void testQueryCancel() throws BlurException, TException, InterruptedException, IOException {
  final String tableName=""String_Node_Str"";
  createTable(tableName);
  loadTable(tableName);
  final Iface client=getClient();
  try {
    IndexManager.DEBUG_RUN_SLOW.set(true);
    final BlurQuery blurQueryRow=new BlurQuery();
    Query queryRow=new Query();
    queryRow.setQuery(""String_Node_Str"");
    blurQueryRow.setQuery(queryRow);
    blurQueryRow.setUseCacheIfPresent(false);
    blurQueryRow.setCacheResult(false);
    blurQueryRow.setUuid(""String_Node_Str"");
    final AtomicReference<BlurException> error=new AtomicReference<BlurException>();
    final AtomicBoolean fail=new AtomicBoolean();
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          client.query(tableName,blurQueryRow);
          fail.set(true);
        }
 catch (        BlurException e) {
          error.set(e);
        }
catch (        TException e) {
          e.printStackTrace();
          fail.set(true);
        }
      }
    }
).start();
    Thread.sleep(500);
    client.cancelQuery(tableName,blurQueryRow.getUuid());
    BlurException blurException=pollForError(error,10,TimeUnit.SECONDS,null,fail,-1);
    if (fail.get()) {
      fail(""String_Node_Str"");
    }
    assertEquals(blurException.getErrorType(),ErrorType.QUERY_CANCEL);
  }
  finally {
    IndexManager.DEBUG_RUN_SLOW.set(false);
  }
  client.terms(tableName,""String_Node_Str"",""String_Node_Str"",null,(short)100);
}",0.949336960217613
82290,"public ExitableFields(Fields fields,AtomicReference<AtomicBoolean> running){
  _fields=fields;
  _running=running;
}","public ExitableFields(Fields fields,ExitObject exitObject){
  _fields=fields;
  _exitObject=exitObject;
}",0.6334841628959276
82291,"private ExitableReader(DirectoryReader in,AtomicReference<AtomicBoolean> running){
  super(in,new ExitableSubReaderWrapper(running));
  _running=running;
}","public ExitableReader(DirectoryReader in,ExitObject exitObject){
  super(in,new ExitableSubReaderWrapper(exitObject));
  _exitObject=exitObject;
}",0.6511627906976745
82292,"public ExitableSubReaderWrapper(AtomicReference<AtomicBoolean> running){
  _running=running;
}","public ExitableSubReaderWrapper(ExitObject exitObject){
  _exitObject=exitObject;
}",0.5423728813559322
82293,"public void setRunning(AtomicBoolean running){
  _running.set(running);
}","public void setRunning(AtomicBoolean running){
  _exitObject.set(running);
}",0.8993288590604027
82294,"@Override public TermsEnum iterator(TermsEnum reuse) throws IOException {
  return new ExitableTermsEnum(_terms.iterator(reuse),_running);
}","@Override public TermsEnum iterator(TermsEnum reuse) throws IOException {
  return new ExitableTermsEnum(_terms.iterator(reuse),_exitObject);
}",0.9469964664310954
82295,"@Override public Terms terms(String field) throws IOException {
  Terms terms=_fields.terms(field);
  if (terms == null) {
    return null;
  }
  return new ExitableTerms(terms,_running);
}","@Override public Terms terms(String field) throws IOException {
  Terms terms=_fields.terms(field);
  if (terms == null) {
    return null;
  }
  return new ExitableTerms(terms,_exitObject);
}",0.9606299212598424
82296,"public ExitableTerms(Terms terms,AtomicReference<AtomicBoolean> running){
  _terms=terms;
  _running=running;
}","public ExitableTerms(Terms terms,ExitObject exitObject){
  _terms=terms;
  _exitObject=exitObject;
}",0.6161137440758294
82297,"@Override public TermsEnum intersect(CompiledAutomaton compiled,BytesRef startTerm) throws IOException {
  return new ExitableTermsEnum(_terms.intersect(compiled,startTerm),_running);
}","@Override public TermsEnum intersect(CompiledAutomaton compiled,BytesRef startTerm) throws IOException {
  return new ExitableTermsEnum(_terms.intersect(compiled,startTerm),_exitObject);
}",0.9597855227882036
82298,"public ExitableFilterAtomicReader(AtomicReader in,AtomicReference<AtomicBoolean> running){
  super(in);
  _running=running;
}","public ExitableFilterAtomicReader(AtomicReader in,ExitObject exitObject){
  super(in);
  _exitObject=exitObject;
}",0.6610878661087866
82299,"public AtomicBoolean getRunning(){
  return _running.get();
}","public AtomicBoolean getRunning(){
  return _exitObject.get();
}",0.88
82300,"public ExitableTermsEnum(TermsEnum termsEnum,AtomicReference<AtomicBoolean> running){
  _termsEnum=termsEnum;
  _running=running.get();
  _lastCheck=System.nanoTime();
  checkAndThrow();
}","public ExitableTermsEnum(TermsEnum termsEnum,ExitObject exitObject){
  _termsEnum=termsEnum;
  _running=exitObject.get();
  _lastCheck=System.nanoTime();
  checkAndThrow();
}",0.8176795580110497
82301,"@Override public Fields fields() throws IOException {
  Fields fields=super.fields();
  if (fields == null) {
    return null;
  }
  return new ExitableFields(fields,_running);
}","@Override public Fields fields() throws IOException {
  Fields fields=super.fields();
  if (fields == null) {
    return null;
  }
  return new ExitableFields(fields,_exitObject);
}",0.958217270194986
82302,"@Override public AtomicReader wrap(AtomicReader reader){
  return new ExitableFilterAtomicReader(reader,_running);
}","@Override public AtomicReader wrap(AtomicReader reader){
  return new ExitableFilterAtomicReader(reader,_exitObject);
}",0.9361702127659576
82303,"@Test public void testBlurOutputFormat() throws IOException, InterruptedException, ClassNotFoundException, BlurException, TException {
  fileSystem.delete(inDir,true);
  String tableName=""String_Node_Str"";
  writeRecordsFile(""String_Node_Str"",1,1,1,1,""String_Node_Str"");
  writeRecordsFile(""String_Node_Str"",1,1,2,1,""String_Node_Str"");
  Job job=new Job(jobConf,""String_Node_Str"");
  job.setJarByClass(BlurOutputFormatMiniClusterTest.class);
  job.setMapperClass(CsvBlurMapper.class);
  job.setInputFormatClass(TextInputFormat.class);
  FileInputFormat.addInputPath(job,new Path(TEST_ROOT_DIR + ""String_Node_Str""));
  String tableUri=new Path(TEST_ROOT_DIR + ""String_Node_Str"" + tableName).toString();
  CsvBlurMapper.addColumns(job,""String_Node_Str"",""String_Node_Str"");
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setShardCount(1);
  tableDescriptor.setTableUri(tableUri);
  tableDescriptor.setName(tableName);
  Iface client=getClient();
  client.createTable(tableDescriptor);
  BlurOutputFormat.setupJob(job,tableDescriptor);
  assertTrue(job.waitForCompletion(true));
  Counters ctrs=job.getCounters();
  System.out.println(""String_Node_Str"" + ctrs);
  while (true) {
    TableStats tableStats=client.tableStats(tableName);
    System.out.println(tableStats);
    if (tableStats.getRowCount() > 0) {
      break;
    }
    Thread.sleep(5000);
  }
}","@Test public void testBlurOutputFormat() throws IOException, InterruptedException, ClassNotFoundException, BlurException, TException {
  fileSystem.delete(inDir,true);
  String tableName=""String_Node_Str"";
  writeRecordsFile(""String_Node_Str"",1,1,1,1,""String_Node_Str"");
  writeRecordsFile(""String_Node_Str"",1,1,2,1,""String_Node_Str"");
  Job job=new Job(jobConf,""String_Node_Str"");
  job.setJarByClass(BlurOutputFormatMiniClusterTest.class);
  job.setMapperClass(CsvBlurMapper.class);
  job.setInputFormatClass(TextInputFormat.class);
  FileInputFormat.addInputPath(job,new Path(TEST_ROOT_DIR + ""String_Node_Str""));
  String tableUri=new Path(TEST_ROOT_DIR + ""String_Node_Str"" + tableName).toString();
  CsvBlurMapper.addColumns(job,""String_Node_Str"",""String_Node_Str"");
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setShardCount(1);
  tableDescriptor.setTableUri(tableUri);
  tableDescriptor.setName(tableName);
  Iface client=getClient();
  client.createTable(tableDescriptor);
  BlurOutputFormat.setupJob(job,tableDescriptor);
  Path tablePath=new Path(tableUri);
  Path shardPath=new Path(tablePath,BlurUtil.getShardName(0));
  FileStatus[] listStatus=fileSystem.listStatus(shardPath);
  assertEquals(2,listStatus.length);
  System.out.println(""String_Node_Str"" + listStatus.length);
  for (  FileStatus fileStatus : listStatus) {
    System.out.println(fileStatus.getPath());
  }
  assertTrue(job.waitForCompletion(true));
  Counters ctrs=job.getCounters();
  System.out.println(""String_Node_Str"" + ctrs);
  while (true) {
    TableStats tableStats=client.tableStats(tableName);
    System.out.println(tableStats);
    if (tableStats.getRowCount() > 0) {
      break;
    }
    Thread.sleep(5000);
  }
  assertTrue(fileSystem.exists(tablePath));
  assertFalse(fileSystem.isFile(tablePath));
  FileStatus[] listStatusAfter=fileSystem.listStatus(shardPath);
  assertEquals(9,listStatusAfter.length);
}",0.8338860416038589
82304,"@Override public void copy(Directory to,String src,String dest,IOContext context) throws IOException {
  if (to instanceof DirectoryDecorator) {
    copy(((DirectoryDecorator)to).getOriginalDirectory(),src,dest,context);
  }
 else   if (to instanceof HdfsDirectory) {
    if (quickMove(to,src,dest,context)) {
      return;
    }
  }
 else {
    slowCopy(to,src,dest,context);
  }
}","@Override public void copy(Directory to,String src,String dest,IOContext context) throws IOException {
  if (to instanceof DirectoryDecorator) {
    copy(((DirectoryDecorator)to).getOriginalDirectory(),src,dest,context);
  }
 else   if (to instanceof HdfsQuickMove) {
    if (quickMove(((HdfsQuickMove)to).getQuickMoveDirectory(),src,dest,context)) {
      return;
    }
  }
 else {
    slowCopy(to,src,dest,context);
  }
}",0.8869565217391304
82305,"public JoinDirectory(Directory longTermStorage,Directory shortTermStorage) throws IOException {
  lastModifiedCheck(longTermStorage);
  lastModifiedCheck(shortTermStorage);
  _longTermStorage=longTermStorage;
  _shortTermStorage=shortTermStorage;
  setLockFactory(_longTermStorage.getLockFactory());
}","public JoinDirectory(HdfsDirectory longTermStorage,Directory shortTermStorage) throws IOException {
  lastModifiedCheck(longTermStorage);
  lastModifiedCheck(shortTermStorage);
  _longTermStorage=longTermStorage;
  _shortTermStorage=shortTermStorage;
  setLockFactory(_longTermStorage.getLockFactory());
}",0.9933993399339934
82306,"private void watchForOnlineShardNodes(final String cluster){
  WatchChildren watch=new WatchChildren(_zk,ZookeeperPathConstants.getOnlineShardsPath(cluster)).watch(new OnChange(){
    @Override public void action(    List<String> children){
      _onlineShardsNodes.put(cluster,children);
    }
  }
);
  if (_onlineShardsNodesWatchers.putIfAbsent(cluster,watch) != null) {
    watch.close();
  }
}","private void watchForOnlineShardNodes(final String cluster){
  WatchChildren watch=new WatchChildren(_zk,ZookeeperPathConstants.getOnlineShardsPath(cluster));
  watch.watch(new OnChange(){
    @Override public void action(    List<String> children){
      _onlineShardsNodes.put(cluster,children);
    }
  }
);
  if (_onlineShardsNodesWatchers.putIfAbsent(cluster,watch) != null) {
    watch.close();
  }
}",0.9887920298879204
82307,"@Override public boolean isInSafeMode(boolean useCache,String cluster){
  if (useCache) {
    SafeModeCacheEntry safeModeCacheEntry=_clusterToSafeMode.get(cluster);
    if (safeModeCacheEntry != null && safeModeCacheEntry.isValid()) {
      return safeModeCacheEntry._safeMode;
    }
  }
  long s=System.nanoTime();
  try {
    checkIfOpen();
    String safemodePath=ZookeeperPathConstants.getSafemodePath(cluster);
    ZooKeeperLockManager zooKeeperLockManager=new ZooKeeperLockManager(_zk,safemodePath);
    if (zooKeeperLockManager.getNumberOfLockNodesPresent(cluster) == 0) {
      _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(false));
      return false;
    }
    _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(true));
    return true;
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public boolean isInSafeMode(boolean useCache,String cluster){
  if (useCache) {
    SafeModeCacheEntry safeModeCacheEntry=_clusterToSafeMode.get(cluster);
    if (safeModeCacheEntry != null && safeModeCacheEntry.isValid()) {
      return safeModeCacheEntry._safeMode;
    }
  }
  try {
    checkIfOpen();
    String safemodePath=ZookeeperPathConstants.getSafemodePath(cluster);
    ZooKeeperLockManager zooKeeperLockManager=new ZooKeeperLockManager(_zk,safemodePath);
    if (zooKeeperLockManager.getNumberOfLockNodesPresent(cluster) == 0) {
      _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(false));
      return false;
    }
    _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(true));
    return true;
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}",0.9218668065023596
82308,"private BlurIndex openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  TableContext tableContext=getTableContext(table);
  Path tablePath=tableContext.getTablePath();
  Path hdfsDirPath=new Path(tablePath,shard);
  BlurLockFactory lockFactory=new BlurLockFactory(_configuration,hdfsDirPath,_nodeName,BlurUtil.getPid());
  HdfsDirectory longTermStorage=new HdfsDirectory(_configuration,hdfsDirPath);
  longTermStorage.setLockFactory(lockFactory);
  Directory directory;
  URI uri=hdfsDirPath.toUri();
  String scheme=uri.getScheme();
  if (scheme != null && scheme.equals(""String_Node_Str"")) {
    LOG.info(""String_Node_Str"",shard,table);
    FastHdfsKeyValueDirectory shortTermStorage=new FastHdfsKeyValueDirectory(_configuration,new Path(hdfsDirPath,""String_Node_Str""));
    directory=new JoinDirectory(longTermStorage,shortTermStorage);
  }
 else {
    directory=longTermStorage;
  }
  ShardContext shardContext=ShardContext.create(tableContext,shard);
  Directory dir;
  TableDescriptor descriptor=tableContext.getDescriptor();
  boolean blockCacheEnabled=descriptor.isBlockCaching();
  if (blockCacheEnabled) {
    Set<String> blockCacheFileTypes=descriptor.getBlockCachingFileTypes();
    dir=_blockCacheDirectoryFactory.newDirectory(table,shard,directory,blockCacheFileTypes);
  }
 else {
    dir=directory;
  }
  BlurIndex index=tableContext.newInstanceBlurIndex(shardContext,dir,_mergeScheduler,_gc,_searchExecutor,_indexCloser,_refresher,_warmup);
  if (_clusterStatus.isReadOnly(true,_cluster,table)) {
    index=new BlurIndexReadOnly(index);
  }
  _filterCache.opening(table,shard,index);
  TableDescriptor tableDescriptor=_clusterStatus.getTableDescriptor(true,_cluster,table);
  warmUp(index,tableDescriptor,shard);
  return index;
}","private BlurIndex openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  TableContext tableContext=getTableContext(table);
  Path tablePath=tableContext.getTablePath();
  Path hdfsDirPath=new Path(tablePath,shard);
  BlurLockFactory lockFactory=new BlurLockFactory(_configuration,hdfsDirPath,_nodeName,BlurUtil.getPid());
  HdfsDirectory longTermStorage=new HdfsDirectory(_configuration,hdfsDirPath);
  longTermStorage.setLockFactory(lockFactory);
  Directory directory;
  URI uri=hdfsDirPath.toUri();
  String scheme=uri.getScheme();
  if (scheme != null && scheme.equals(""String_Node_Str"")) {
    LOG.info(""String_Node_Str"",shard,table);
    FastHdfsKeyValueDirectory shortTermStorage=new FastHdfsKeyValueDirectory(_configuration,new Path(hdfsDirPath,""String_Node_Str""));
    directory=new JoinDirectory(longTermStorage,shortTermStorage);
  }
 else {
    directory=longTermStorage;
  }
  ShardContext shardContext=ShardContext.create(tableContext,shard);
  TableDescriptor descriptor=tableContext.getDescriptor();
  boolean blockCacheEnabled=descriptor.isBlockCaching();
  if (blockCacheEnabled) {
    Set<String> blockCacheFileTypes=descriptor.getBlockCachingFileTypes();
    directory=_blockCacheDirectoryFactory.newDirectory(table,shard,directory,blockCacheFileTypes);
  }
  BlurIndex index=tableContext.newInstanceBlurIndex(shardContext,directory,_mergeScheduler,_gc,_searchExecutor,_indexCloser,_refresher,_warmup);
  if (_clusterStatus.isReadOnly(true,_cluster,table)) {
    index=new BlurIndexReadOnly(index);
  }
  _filterCache.opening(table,shard,index);
  TableDescriptor tableDescriptor=_clusterStatus.getTableDescriptor(true,_cluster,table);
  warmUp(index,tableDescriptor,shard);
  return index;
}",0.983127109111361
82309,"private WatchChildren watchForShardServerChanges(){
  WatchChildren watchOnlineShards=new WatchChildren(_zookeeper,ZookeeperPathConstants.getOnlineShardsPath(_cluster)).watch(new OnChange(){
    private List<String> _prevOnlineShards=new ArrayList<String>();
    @Override public void action(    List<String> onlineShards){
      List<String> oldOnlineShards=_prevOnlineShards;
      _prevOnlineShards=onlineShards;
      _layout.clear();
      LOG.info(""String_Node_Str"");
      boolean change=false;
      if (oldOnlineShards == null) {
        oldOnlineShards=new ArrayList<String>();
      }
      for (      String oldOnlineShard : oldOnlineShards) {
        if (!onlineShards.contains(oldOnlineShard)) {
          LOG.info(""String_Node_Str"",oldOnlineShard);
          change=true;
        }
      }
      for (      String onlineShard : onlineShards) {
        if (!oldOnlineShards.contains(onlineShard)) {
          LOG.info(""String_Node_Str"",onlineShard);
          change=true;
        }
      }
      if (change) {
        LOG.info(""String_Node_Str"");
      }
    }
  }
);
  return _closer.register(watchOnlineShards);
}","private WatchChildren watchForShardServerChanges(){
  WatchChildren watchOnlineShards=new WatchChildren(_zookeeper,ZookeeperPathConstants.getOnlineShardsPath(_cluster));
  watchOnlineShards.watch(new OnChange(){
    private List<String> _prevOnlineShards=new ArrayList<String>();
    @Override public void action(    List<String> onlineShards){
      List<String> oldOnlineShards=_prevOnlineShards;
      _prevOnlineShards=onlineShards;
      _layout.clear();
      LOG.info(""String_Node_Str"");
      boolean change=false;
      if (oldOnlineShards == null) {
        oldOnlineShards=new ArrayList<String>();
      }
      for (      String oldOnlineShard : oldOnlineShards) {
        if (!onlineShards.contains(oldOnlineShard)) {
          LOG.info(""String_Node_Str"",oldOnlineShard);
          change=true;
        }
      }
      for (      String onlineShard : onlineShards) {
        if (!oldOnlineShards.contains(onlineShard)) {
          LOG.info(""String_Node_Str"",onlineShard);
          change=true;
        }
      }
      if (change) {
        LOG.info(""String_Node_Str"");
      }
    }
  }
);
  return _closer.register(watchOnlineShards);
}",0.9907935116177116
82310,"private IndexReader getReader() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory directory=new RAMDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer());
  IndexWriter writer=new IndexWriter(directory,conf);
  Document doc=new Document();
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Store.YES,Index.NOT_ANALYZED_NO_NORMS));
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Store.YES,Index.NOT_ANALYZED_NO_NORMS));
  Document doc1=new Document();
  doc1.add(new Field(""String_Node_Str"",""String_Node_Str"",Store.YES,Index.NOT_ANALYZED_NO_NORMS));
  writer.addDocument(doc);
  writer.addDocument(doc1);
  writer.close();
  return IndexReader.open(directory);
}","private IndexReader getReader() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory directory=new RAMDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer());
  IndexWriter writer=new IndexWriter(directory,conf);
  Document doc=new Document();
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  Document doc1=new Document();
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  writer.addDocument(doc);
  writer.addDocument(doc1);
  writer.close();
  return DirectoryReader.open(directory);
}",0.6275051831375259
82311,"private IndexReader getReaderWithDocsHavingFamily() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory directory=new RAMDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer());
  IndexWriter writer=new IndexWriter(directory,conf);
  Document doc=new Document();
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Store.YES,Index.NOT_ANALYZED_NO_NORMS));
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Store.YES,Index.NOT_ANALYZED_NO_NORMS));
  Document doc1=new Document();
  doc1.add(new Field(""String_Node_Str"",""String_Node_Str"",Store.YES,Index.NOT_ANALYZED_NO_NORMS));
  doc1.add(new Field(""String_Node_Str"",""String_Node_Str"",Store.YES,Index.NOT_ANALYZED_NO_NORMS));
  writer.addDocument(doc);
  writer.addDocument(doc1);
  writer.close();
  return IndexReader.open(directory);
}","private IndexReader getReaderWithDocsHavingFamily() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory directory=new RAMDirectory();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,new KeywordAnalyzer());
  IndexWriter writer=new IndexWriter(directory,conf);
  Document doc=new Document();
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  Document doc1=new Document();
  doc1.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  doc1.add(new StringField(""String_Node_Str"",""String_Node_Str"",Store.YES));
  writer.addDocument(doc);
  writer.addDocument(doc1);
  writer.close();
  return DirectoryReader.open(directory);
}",0.7472924187725631
82312,"public Tables(String cluster){
  this.cluster=cluster;
}","public Tables(String cluster){
  _cluster=cluster;
  _tablesPath=ZookeeperPathConstants.getTablesPath(cluster);
}",0.6035502958579881
82313,"@Override public List<String> getTableList(boolean useCache,String cluster){
  if (useCache) {
    Set<String> tables=_tablesPerCluster.get(cluster);
    if (tables != null) {
      return new ArrayList<String>(tables);
    }
  }
  long s=System.nanoTime();
  try {
    checkIfOpen();
    return _zk.getChildren(ZookeeperPathConstants.getTablesPath(cluster),false);
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public List<String> getTableList(boolean useCache,String cluster){
  if (useCache) {
    Set<String> tables=_tablesPerCluster.get(cluster);
    if (tables != null) {
      return new ArrayList<String>(tables);
    }
  }
  long s=System.nanoTime();
  try {
    checkIfOpen();
    String tablesPath=ZookeeperPathConstants.getTablesPath(cluster);
    return filterTables(tablesPath,_zk.getChildren(tablesPath,false));
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}",0.8835462058602555
82314,"@Override public void process(MutatableAction mutatableAction){
  throw new RuntimeException(""String_Node_Str"");
}","@Override public void process(IndexAction indexAction) throws IOException {
  throw new RuntimeException(""String_Node_Str"");
}",0.8166666666666667
82315,public abstract void doPostRollback(BlurIndexWriter writer) throws IOException ;,public abstract void doPostRollback(IndexWriter writer) throws IOException ;,0.9743589743589745
82316,public abstract void doPostCommit(BlurIndexWriter writer) throws IOException ;,public abstract void doPostCommit(IndexWriter writer) throws IOException ;,0.9736842105263158
82317,public abstract void doPreRollback(BlurIndexWriter writer) throws IOException ;,public abstract void doPreRollback(IndexWriter writer) throws IOException ;,0.974025974025974
82318,"public abstract void doPreCommit(IndexSearcherClosable indexSearcher,BlurIndexWriter writer) throws IOException ;","public abstract void doPreCommit(IndexSearcherClosable indexSearcher,IndexWriter writer) throws IOException ;",0.981981981981982
82319,"@Override public void doPostRollback(BlurIndexWriter writer) throws IOException {
  LOG.info(""String_Node_Str"",_shard,_table);
  String name=_dirPath.getName();
  int lastIndexOf=name.lastIndexOf('.');
  String badRowIdsName=name.substring(0,lastIndexOf) + ""String_Node_Str"";
  fileSystem.rename(_dirPath,new Path(_dirPath.getParent(),badRowIdsName));
}","@Override public void doPostRollback(IndexWriter writer) throws IOException {
  LOG.info(""String_Node_Str"",_shard,_table);
  String name=_dirPath.getName();
  int lastIndexOf=name.lastIndexOf('.');
  String badRowIdsName=name.substring(0,lastIndexOf) + ""String_Node_Str"";
  fileSystem.rename(_dirPath,new Path(_dirPath.getParent(),badRowIdsName));
}",0.2079772079772079
82320,"private IndexAction getIndexAction(final List<HdfsDirectory> indexesToImport,final FileSystem fileSystem){
  return new IndexAction(){
    private Path _dirPath;
    @Override public void performMutate(    IndexSearcherClosable searcher,    IndexWriter writer) throws IOException {
      for (      Directory directory : indexesToImport) {
        LOG.info(""String_Node_Str"",directory,_shard,_table);
      }
      LOG.info(""String_Node_Str"",_shard,_table);
      for (      HdfsDirectory directory : indexesToImport) {
        boolean emitDeletes=searcher.getIndexReader().numDocs() != 0;
        _dirPath=directory.getPath();
        applyDeletes(directory,writer,_shard,emitDeletes);
        LOG.info(""String_Node_Str"",directory,_shard,_table);
        writer.addIndexes(directory);
        LOG.info(""String_Node_Str"",directory,_shard,_table);
        writer.deleteDocuments(new Term(BlurConstants.DELETE_MARKER,BlurConstants.DELETE_MARKER_VALUE));
        LOG.info(""String_Node_Str"",directory,_shard,_table);
      }
    }
    @Override public void doPreCommit(    IndexSearcherClosable indexSearcher,    BlurIndexWriter writer) throws IOException {
    }
    @Override public void doPostCommit(    BlurIndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_dirPath,_shard,_table);
      writer.maybeMerge();
      LOG.info(""String_Node_Str"",_dirPath,_shard,_table);
      fileSystem.delete(_dirPath,true);
      LOG.info(""String_Node_Str"",_shard,_table);
    }
    @Override public void doPreRollback(    BlurIndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
    }
    @Override public void doPostRollback(    BlurIndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
      String name=_dirPath.getName();
      int lastIndexOf=name.lastIndexOf('.');
      String badRowIdsName=name.substring(0,lastIndexOf) + ""String_Node_Str"";
      fileSystem.rename(_dirPath,new Path(_dirPath.getParent(),badRowIdsName));
    }
  }
;
}","private IndexAction getIndexAction(final List<HdfsDirectory> indexesToImport,final FileSystem fileSystem){
  return new IndexAction(){
    private Path _dirPath;
    @Override public void performMutate(    IndexSearcherClosable searcher,    IndexWriter writer) throws IOException {
      for (      Directory directory : indexesToImport) {
        LOG.info(""String_Node_Str"",directory,_shard,_table);
      }
      LOG.info(""String_Node_Str"",_shard,_table);
      for (      HdfsDirectory directory : indexesToImport) {
        boolean emitDeletes=searcher.getIndexReader().numDocs() != 0;
        _dirPath=directory.getPath();
        applyDeletes(directory,writer,_shard,emitDeletes);
        LOG.info(""String_Node_Str"",directory,_shard,_table);
        writer.addIndexes(directory);
        LOG.info(""String_Node_Str"",directory,_shard,_table);
        writer.deleteDocuments(new Term(BlurConstants.DELETE_MARKER,BlurConstants.DELETE_MARKER_VALUE));
        LOG.info(""String_Node_Str"",directory,_shard,_table);
      }
    }
    @Override public void doPreCommit(    IndexSearcherClosable indexSearcher,    IndexWriter writer) throws IOException {
    }
    @Override public void doPostCommit(    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_dirPath,_shard,_table);
      writer.maybeMerge();
      LOG.info(""String_Node_Str"",_dirPath,_shard,_table);
      fileSystem.delete(_dirPath,true);
      LOG.info(""String_Node_Str"",_shard,_table);
    }
    @Override public void doPreRollback(    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
    }
    @Override public void doPostRollback(    IndexWriter writer) throws IOException {
      LOG.info(""String_Node_Str"",_shard,_table);
      String name=_dirPath.getName();
      int lastIndexOf=name.lastIndexOf('.');
      String badRowIdsName=name.substring(0,lastIndexOf) + ""String_Node_Str"";
      fileSystem.rename(_dirPath,new Path(_dirPath.getParent(),badRowIdsName));
    }
  }
;
}",0.8377171215880893
82321,"@Override public void doPostCommit(BlurIndexWriter writer) throws IOException {
  LOG.info(""String_Node_Str"",_dirPath,_shard,_table);
  writer.maybeMerge();
  LOG.info(""String_Node_Str"",_dirPath,_shard,_table);
  fileSystem.delete(_dirPath,true);
  LOG.info(""String_Node_Str"",_shard,_table);
}","@Override public void doPostCommit(IndexWriter writer) throws IOException {
  LOG.info(""String_Node_Str"",_dirPath,_shard,_table);
  writer.maybeMerge();
  LOG.info(""String_Node_Str"",_dirPath,_shard,_table);
  fileSystem.delete(_dirPath,true);
  LOG.info(""String_Node_Str"",_shard,_table);
}",0.993127147766323
82322,"@Override public void doPreRollback(BlurIndexWriter writer) throws IOException {
  LOG.info(""String_Node_Str"",_shard,_table);
}","@Override public void doPreRollback(IndexWriter writer) throws IOException {
  LOG.info(""String_Node_Str"",_shard,_table);
}",0.984
82323,"@Override public void doPreCommit(IndexSearcherClosable indexSearcher,BlurIndexWriter writer) throws IOException {
}","@Override public void doPreCommit(IndexSearcherClosable indexSearcher,IndexWriter writer) throws IOException {
}",0.9824561403508772
82324,"@Override public void doPostCommit(BlurIndexWriter writer){
}","@Override public void doPostCommit(IndexWriter writer){
}",0.9661016949152542
82325,"@Override public void doPostRollback(BlurIndexWriter writer){
}","@Override public void doPostRollback(IndexWriter writer){
}",0.9672131147540984
82326,"@Override public void doPreRollback(BlurIndexWriter writer){
}","@Override public void doPreRollback(IndexWriter writer){
}",0.9666666666666668
82327,"@Override public void doPreCommit(IndexSearcherClosable indexSearcher,BlurIndexWriter writer){
}","@Override public void doPreCommit(IndexSearcherClosable indexSearcher,IndexWriter writer){
}",0.9787234042553192
82328,"private void setupWriter(Configuration configuration) throws IOException {
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setName(""String_Node_Str"");
  String uuid=UUID.randomUUID().toString();
  tableDescriptor.setTableUri(new Path(_base,""String_Node_Str"").toUri().toString());
  tableDescriptor.setShardCount(2);
  TableContext tableContext=TableContext.create(tableDescriptor);
  ShardContext shardContext=ShardContext.create(tableContext,""String_Node_Str"");
  Path tablePath=new Path(_base,""String_Node_Str"");
  Path shardPath=new Path(tablePath,""String_Node_Str"");
  String indexDirName=""String_Node_Str"" + uuid;
  _path=new Path(shardPath,indexDirName + ""String_Node_Str"");
  _fileSystem.mkdirs(_path);
  _badRowIdsPath=new Path(shardPath,indexDirName + ""String_Node_Str"");
  Directory commitDirectory=new HdfsDirectory(configuration,_path);
  Directory mainDirectory=new HdfsDirectory(configuration,shardPath);
  _fieldManager=tableContext.getFieldManager();
  Analyzer analyzerForIndex=_fieldManager.getAnalyzerForIndex();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,analyzerForIndex);
  conf.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);
  _commitWriter=new IndexWriter(commitDirectory,conf.clone());
  _mainWriter=new IndexWriter(mainDirectory,conf.clone());
  BufferStore.initNewBuffer(128,128 * 128);
  _indexImporter=new IndexImporter(_mainWriter,new ReentrantReadWriteLock(),shardContext,TimeUnit.MINUTES,10);
}","private void setupWriter(Configuration configuration) throws IOException {
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setName(""String_Node_Str"");
  String uuid=UUID.randomUUID().toString();
  tableDescriptor.setTableUri(new Path(_base,""String_Node_Str"").toUri().toString());
  tableDescriptor.setShardCount(2);
  TableContext tableContext=TableContext.create(tableDescriptor);
  ShardContext shardContext=ShardContext.create(tableContext,""String_Node_Str"");
  Path tablePath=new Path(_base,""String_Node_Str"");
  Path shardPath=new Path(tablePath,""String_Node_Str"");
  String indexDirName=""String_Node_Str"" + uuid;
  _path=new Path(shardPath,indexDirName + ""String_Node_Str"");
  _fileSystem.mkdirs(_path);
  _badRowIdsPath=new Path(shardPath,indexDirName + ""String_Node_Str"");
  Directory commitDirectory=new HdfsDirectory(configuration,_path);
  Directory mainDirectory=new HdfsDirectory(configuration,shardPath);
  _fieldManager=tableContext.getFieldManager();
  Analyzer analyzerForIndex=_fieldManager.getAnalyzerForIndex();
  IndexWriterConfig conf=new IndexWriterConfig(LUCENE_VERSION,analyzerForIndex);
  conf.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);
  _commitWriter=new IndexWriter(commitDirectory,conf.clone());
  new IndexWriter(mainDirectory,conf.clone()).close();
  _mainWriter=new IndexWriter(mainDirectory,conf.clone());
  BufferStore.initNewBuffer(128,128 * 128);
  _indexImporter=new IndexImporter(getBlurIndex(shardContext,mainDirectory),shardContext,TimeUnit.MINUTES,10);
}",0.9557109557109555
82329,"@After public void tearDown() throws IOException {
  IOUtils.closeQuietly(_mainWriter);
  IOUtils.closeQuietly(_indexImporter);
  _base.getFileSystem(configuration).delete(_base,true);
}","@After public void tearDown() throws IOException {
  IOUtils.closeQuietly(_commitWriter);
  IOUtils.closeQuietly(_mainWriter);
  IOUtils.closeQuietly(_indexImporter);
  _base.getFileSystem(configuration).delete(_base,true);
}",0.8856447688564477
82330,"protected void registerFieldTypeDefinition(String fieldName,FieldTypeDefinition fieldTypeDefinition){
  _fieldNameToDefMap.put(fieldName,fieldTypeDefinition);
  for (  String alternateFieldName : fieldTypeDefinition.getAlternateFieldNames()) {
    _fieldNameToDefMap.put(alternateFieldName,fieldTypeDefinition);
  }
  String baseFieldName=getBaseFieldName(fieldName);
  String subColumnName=getSubColumnName(fieldName);
  if (subColumnName != null) {
    Set<String> subColumnNames=_columnToSubColumn.get(baseFieldName);
    if (subColumnNames == null) {
      subColumnNames=getConcurrentSet();
      _columnToSubColumn.put(baseFieldName,subColumnNames);
    }
    subColumnNames.add(subColumnName);
  }
}","protected void registerFieldTypeDefinition(String fieldName,FieldTypeDefinition fieldTypeDefinition){
  _fieldNameToDefMap.put(fieldName,fieldTypeDefinition);
  for (  String alternateFieldName : fieldTypeDefinition.getAlternateFieldNames()) {
    _fieldNameToDefMap.put(alternateFieldName,fieldTypeDefinition);
  }
  String subColumnName=getSubColumnName(fieldName);
  if (subColumnName != null) {
    String baseFieldName=getBaseFieldName(fieldName);
    Set<String> subColumnNames=_columnToSubColumn.get(baseFieldName);
    if (subColumnNames == null) {
      subColumnNames=getConcurrentSet();
      _columnToSubColumn.put(baseFieldName,subColumnNames);
    }
    subColumnNames.add(subColumnName);
  }
}",0.925035360678925
82331,"private String getBaseFieldName(String fieldName){
  int indexOf=fieldName.indexOf('.');
  return fieldName.substring(0,indexOf);
}","private String getBaseFieldName(String fieldName){
  return fieldName.substring(0,fieldName.lastIndexOf('.'));
}",0.7654320987654321
82332,"@Test public void testFieldManagerMultipleColumnsDifferentNames() throws IOException {
  BaseFieldManager memoryFieldManager=newFieldManager(true);
  memoryFieldManager.addColumnDefinition(""String_Node_Str"",""String_Node_Str"",null,false,""String_Node_Str"",false,null);
  memoryFieldManager.addColumnDefinition(""String_Node_Str"",""String_Node_Str"",null,true,""String_Node_Str"",false,null);
  Record record=new Record();
  record.setFamily(""String_Node_Str"");
  record.setRecordId(""String_Node_Str"");
  record.addToColumns(new Column(""String_Node_Str"",""String_Node_Str""));
  record.addToColumns(new Column(""String_Node_Str"",""String_Node_Str""));
  List<Field> fields=getFields(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",newFieldsNoStore(BlurConstants.FIELDS,""String_Node_Str""),newFieldsNoStore(BlurConstants.FIELDS,""String_Node_Str""),newTextField(""String_Node_Str"",""String_Node_Str""),newTextField(""String_Node_Str"",""String_Node_Str""),newTextFieldNoStore(BlurConstants.SUPER,""String_Node_Str""));
  int c=0;
  List<Field> fields2=memoryFieldManager.getFields(""String_Node_Str"",record);
  System.out.println(fields2);
  for (  Field field : fields2) {
    assertFieldEquals(fields.get(c++),field);
  }
}","@Test public void testFieldManagerMultipleColumnsDifferentNames() throws IOException {
  BaseFieldManager memoryFieldManager=newFieldManager(true);
  memoryFieldManager.addColumnDefinition(""String_Node_Str"",""String_Node_Str"",null,false,""String_Node_Str"",false,null);
  memoryFieldManager.addColumnDefinition(""String_Node_Str"",""String_Node_Str"",null,true,""String_Node_Str"",false,null);
  Record record=new Record();
  record.setFamily(""String_Node_Str"");
  record.setRecordId(""String_Node_Str"");
  record.addToColumns(new Column(""String_Node_Str"",""String_Node_Str""));
  record.addToColumns(new Column(""String_Node_Str"",""String_Node_Str""));
  List<Field> fields=getFields(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",newFieldsNoStore(BlurConstants.FIELDS,""String_Node_Str""),newFieldsNoStore(BlurConstants.FIELDS,""String_Node_Str""),newTextField(""String_Node_Str"",""String_Node_Str""),newTextField(""String_Node_Str"",""String_Node_Str""),newTextFieldNoStore(BlurConstants.SUPER,""String_Node_Str""));
  int c=0;
  List<Field> fields2=memoryFieldManager.getFields(""String_Node_Str"",record);
  for (  Field field : fields2) {
    assertFieldEquals(fields.get(c++),field);
  }
}",0.9869583508624316
82333,"private FileIdKey getCacheFileName(CacheDirectory directory,String fileName) throws IOException {
  long fileModified=directory.getFileModified(fileName);
  return new FileIdKey(directory.getDirectoryName(),fileName,fileModified);
}","private FileIdKey getCacheFileName(CacheDirectory directory,String fileName) throws IOException {
  if (directory.fileExists(fileName)) {
    long fileModified=directory.getFileModified(fileName);
    return new FileIdKey(directory.getDirectoryName(),fileName,fileModified);
  }
  return new FileIdKey(directory.getDirectoryName(),fileName,-1L);
}",0.8013816925734024
82334,"@Override public void close() throws IOException {
  flushInternal();
  _indexOutput.flush();
  _indexOutput.close();
  _store.putBuffer(_buffer);
}","@Override public void close() throws IOException {
  flushInternal();
  _indexOutput.flush();
  _indexOutput.close();
  _store.putBuffer(_buffer);
  _cache.fileClosedForWriting(_directory,_fileName,_fileId);
}",0.8291316526610645
82335,"@Override public long getFileModified(String name) throws IOException {
  return 0;
}","@Override public long getFileModified(String name) throws IOException {
  if (_shortTermStorage.fileExists(name)) {
    return ((LastModified)_shortTermStorage).getFileModified(name);
  }
  return ((LastModified)_longTermStorage).getFileModified(name);
}",0.495575221238938
82336,"public static Cache getCache(){
  EvictionListener<CacheKey,CacheValue> listener=new EvictionListener<CacheKey,CacheValue>(){
    @Override public void onEviction(    CacheKey key,    CacheValue value){
      value.release();
    }
  }
;
  Weigher<CacheValue> weigher=new Weigher<CacheValue>(){
    @Override public int weightOf(    CacheValue value){
      return value.length();
    }
  }
;
  long maximumWeightedCapacity=1 * 1024 * 1024;
  final ConcurrentLinkedHashMap<CacheKey,CacheValue> cache=new ConcurrentLinkedHashMap.Builder<CacheKey,CacheValue>().weigher(weigher).maximumWeightedCapacity(maximumWeightedCapacity).listener(listener).build();
  Cache cacheFactory=new Cache(){
    @Override public CacheValue newInstance(    CacheDirectory directory,    String fileName,    int cacheBlockSize){
      return new UnsafeCacheValue(cacheBlockSize);
    }
    @Override public long getFileId(    CacheDirectory directory,    String fileName){
      return fileName.hashCode();
    }
    @Override public int getFileBufferSize(    CacheDirectory directory,    String fileName){
      return 1024;
    }
    @Override public int getCacheBlockSize(    CacheDirectory directory,    String fileName){
      return 8192;
    }
    @Override public boolean cacheFileForReading(    CacheDirectory directory,    String name,    IOContext context){
      return true;
    }
    @Override public boolean cacheFileForWriting(    CacheDirectory directory,    String name,    IOContext context){
      return true;
    }
    @Override public CacheValue get(    CacheKey key){
      return cache.get(key);
    }
    @Override public void put(    CacheKey key,    CacheValue value){
      cache.put(key,value);
    }
    @Override public void removeFile(    CacheDirectory directory,    String fileName) throws IOException {
    }
    @Override public void releaseDirectory(    String directoryName){
    }
    @Override public CacheValue getQuietly(    CacheKey key){
      return cache.getQuietly(key);
    }
    @Override public boolean shouldBeQuiet(    CacheDirectory directory,    String fileName){
      return false;
    }
    @Override public void close() throws IOException {
    }
  }
;
  return cacheFactory;
}","public static Cache getCache(){
  EvictionListener<CacheKey,CacheValue> listener=new EvictionListener<CacheKey,CacheValue>(){
    @Override public void onEviction(    CacheKey key,    CacheValue value){
      value.release();
    }
  }
;
  Weigher<CacheValue> weigher=new Weigher<CacheValue>(){
    @Override public int weightOf(    CacheValue value){
      return value.length();
    }
  }
;
  long maximumWeightedCapacity=1 * 1024 * 1024;
  final ConcurrentLinkedHashMap<CacheKey,CacheValue> cache=new ConcurrentLinkedHashMap.Builder<CacheKey,CacheValue>().weigher(weigher).maximumWeightedCapacity(maximumWeightedCapacity).listener(listener).build();
  Cache cacheFactory=new Cache(){
    @Override public CacheValue newInstance(    CacheDirectory directory,    String fileName,    int cacheBlockSize){
      return new UnsafeCacheValue(cacheBlockSize);
    }
    @Override public long getFileId(    CacheDirectory directory,    String fileName){
      return fileName.hashCode();
    }
    @Override public int getFileBufferSize(    CacheDirectory directory,    String fileName){
      return 1024;
    }
    @Override public int getCacheBlockSize(    CacheDirectory directory,    String fileName){
      return 8192;
    }
    @Override public boolean cacheFileForReading(    CacheDirectory directory,    String name,    IOContext context){
      return true;
    }
    @Override public boolean cacheFileForWriting(    CacheDirectory directory,    String name,    IOContext context){
      return true;
    }
    @Override public CacheValue get(    CacheKey key){
      return cache.get(key);
    }
    @Override public void put(    CacheKey key,    CacheValue value){
      cache.put(key,value);
    }
    @Override public void removeFile(    CacheDirectory directory,    String fileName) throws IOException {
    }
    @Override public void releaseDirectory(    String directoryName){
    }
    @Override public CacheValue getQuietly(    CacheKey key){
      return cache.getQuietly(key);
    }
    @Override public boolean shouldBeQuiet(    CacheDirectory directory,    String fileName){
      return false;
    }
    @Override public void close() throws IOException {
    }
    @Override public void fileClosedForWriting(    CacheDirectory directory,    String fileName,    long fileId) throws IOException {
    }
  }
;
  return cacheFactory;
}",0.9693251533742332
82337,public abstract void process(MutatableAction mutatableAction) throws IOException ;,public abstract void process(IndexAction indexAction) throws IOException ;,0.8461538461538461
82338,"@Override public void process(MutatableAction mutatableAction) throws IOException {
  _writeLock.lock();
  waitUntilNotNull(_writer);
  BlurIndexWriter writer=_writer.get();
  IndexSearcherClosable indexSearcher=null;
  try {
    indexSearcher=getIndexSearcher();
    mutatableAction.performMutate(indexSearcher,writer);
    commit();
  }
 catch (  Exception e) {
    writer.rollback();
    openWriter();
    throw new IOException(""String_Node_Str"",e);
  }
 finally {
    if (indexSearcher != null) {
      indexSearcher.close();
    }
    _writeLock.unlock();
  }
}","@Override public void process(IndexAction indexAction) throws IOException {
  _writeLock.lock();
  waitUntilNotNull(_writer);
  BlurIndexWriter writer=_writer.get();
  IndexSearcherClosable indexSearcher=null;
  try {
    indexSearcher=getIndexSearcher();
    indexAction.performMutate(indexSearcher,writer);
    indexAction.doPreCommit(indexSearcher,writer);
    commit();
    indexAction.doPostCommit(writer);
  }
 catch (  Exception e) {
    indexAction.doPreRollback(writer);
    writer.rollback();
    openWriter();
    indexAction.doPostRollback(writer);
    throw new IOException(""String_Node_Str"",e);
  }
 finally {
    if (indexSearcher != null) {
      indexSearcher.close();
    }
    _writeLock.unlock();
  }
}",0.8229813664596274
82339,"private Thread getWriterOpener(ShardContext shardContext){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        _writer.set(new BlurIndexWriter(_directory,_conf.clone()));
synchronized (_writer) {
          _writer.notify();
        }
        _indexImporter=new IndexImporter(_writer.get(),_lock,_shardContext,TimeUnit.SECONDS,10);
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
);
  thread.setName(""String_Node_Str"" + shardContext.getTableContext().getTable() + ""String_Node_Str""+ shardContext.getShard()+ ""String_Node_Str"");
  thread.setDaemon(true);
  return thread;
}","private Thread getWriterOpener(ShardContext shardContext){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        _writer.set(new BlurIndexWriter(_directory,_conf.clone()));
synchronized (_writer) {
          _writer.notify();
        }
        _indexImporter=new IndexImporter(BlurIndexSimpleWriter.this,_shardContext,TimeUnit.SECONDS,10);
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
);
  thread.setName(""String_Node_Str"" + shardContext.getTableContext().getTable() + ""String_Node_Str""+ shardContext.getShard()+ ""String_Node_Str"");
  thread.setDaemon(true);
  return thread;
}",0.9662921348314608
82340,"private boolean applyDeletes(Directory directory,IndexWriter indexWriter,String shard,boolean emitDeletes) throws IOException {
  DirectoryReader reader=DirectoryReader.open(directory);
  try {
    LOG.info(""String_Node_Str"",reader);
    CompositeReaderContext compositeReaderContext=reader.getContext();
    List<AtomicReaderContext> leaves=compositeReaderContext.leaves();
    BlurPartitioner blurPartitioner=new BlurPartitioner();
    Text key=new Text();
    int numberOfShards=_shardContext.getTableContext().getDescriptor().getShardCount();
    int shardId=BlurUtil.getShardIndex(shard);
    for (    AtomicReaderContext context : leaves) {
      AtomicReader atomicReader=context.reader();
      Fields fields=atomicReader.fields();
      Terms terms=fields.terms(BlurConstants.ROW_ID);
      if (terms != null) {
        TermsEnum termsEnum=terms.iterator(null);
        BytesRef ref=null;
        while ((ref=termsEnum.next()) != null) {
          key.set(ref.bytes,ref.offset,ref.length);
          int partition=blurPartitioner.getPartition(key,null,numberOfShards);
          if (shardId != partition) {
            return false;
          }
          if (emitDeletes) {
            indexWriter.deleteDocuments(new Term(BlurConstants.ROW_ID,BytesRef.deepCopyOf(ref)));
          }
        }
      }
    }
  }
  finally {
    reader.close();
  }
  return true;
}","private void applyDeletes(Directory directory,IndexWriter indexWriter,String shard,boolean emitDeletes) throws IOException {
  DirectoryReader reader=DirectoryReader.open(directory);
  try {
    LOG.info(""String_Node_Str"",reader);
    CompositeReaderContext compositeReaderContext=reader.getContext();
    List<AtomicReaderContext> leaves=compositeReaderContext.leaves();
    BlurPartitioner blurPartitioner=new BlurPartitioner();
    Text key=new Text();
    int numberOfShards=_shardContext.getTableContext().getDescriptor().getShardCount();
    int shardId=BlurUtil.getShardIndex(shard);
    for (    AtomicReaderContext context : leaves) {
      AtomicReader atomicReader=context.reader();
      Fields fields=atomicReader.fields();
      Terms terms=fields.terms(BlurConstants.ROW_ID);
      if (terms != null) {
        TermsEnum termsEnum=terms.iterator(null);
        BytesRef ref=null;
        while ((ref=termsEnum.next()) != null) {
          key.set(ref.bytes,ref.offset,ref.length);
          int partition=blurPartitioner.getPartition(key,null,numberOfShards);
          if (shardId != partition) {
            throw new IOException(""String_Node_Str"" + partition + ""String_Node_Str""+ shardId+ ""String_Node_Str"");
          }
          if (emitDeletes) {
            indexWriter.deleteDocuments(new Term(BlurConstants.ROW_ID,BytesRef.deepCopyOf(ref)));
          }
        }
      }
    }
  }
  finally {
    reader.close();
  }
}",0.9509943181818182
82341,"public IndexImporter(IndexWriter indexWriter,ReadWriteLock lock,ShardContext shardContext,TimeUnit refreshUnit,long refreshAmount){
  _indexWriter=indexWriter;
  _lock=lock;
  _shardContext=shardContext;
  _timer=new Timer(""String_Node_Str"" + shardContext.getShard() + ""String_Node_Str""+ shardContext.getTableContext().getTable()+ ""String_Node_Str"",true);
  long period=refreshUnit.toMillis(refreshAmount);
  _timer.schedule(this,period,period);
}","public IndexImporter(BlurIndex blurIndex,ShardContext shardContext,TimeUnit refreshUnit,long refreshAmount){
  _blurIndex=blurIndex;
  _shardContext=shardContext;
  _timer=new Timer(""String_Node_Str"" + shardContext.getShard() + ""String_Node_Str""+ shardContext.getTableContext().getTable()+ ""String_Node_Str"",true);
  long period=refreshUnit.toMillis(refreshAmount);
  _timer.schedule(this,period,period);
  _table=_shardContext.getTableContext().getTable();
  _shard=_shardContext.getShard();
}",0.0828905419766206
82342,"@Override public void run(){
  Path path=_shardContext.getHdfsDirPath();
  Configuration configuration=_shardContext.getTableContext().getConfiguration();
  try {
    FileSystem fileSystem=path.getFileSystem(configuration);
    SortedSet<FileStatus> listStatus;
    while (true) {
      try {
        listStatus=sort(fileSystem.listStatus(path,new PathFilter(){
          @Override public boolean accept(          Path path){
            if (path != null && path.getName().endsWith(""String_Node_Str"")) {
              return true;
            }
            return false;
          }
        }
));
        break;
      }
 catch (      FileNotFoundException e) {
        LOG.warn(""String_Node_Str"");
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        return;
      }
    }
    List<HdfsDirectory> indexesToImport=new ArrayList<HdfsDirectory>();
    for (    FileStatus fileStatus : listStatus) {
      Path file=fileStatus.getPath();
      if (fileStatus.isDir() && file.getName().endsWith(""String_Node_Str"")) {
        HdfsDirectory hdfsDirectory=new HdfsDirectory(configuration,file);
        if (!DirectoryReader.indexExists(hdfsDirectory)) {
          LOG.error(""String_Node_Str"",file);
        }
 else {
          indexesToImport.add(hdfsDirectory);
        }
      }
    }
    if (indexesToImport.isEmpty()) {
      return;
    }
    String table=_shardContext.getTableContext().getTable();
    String shard=_shardContext.getShard();
    for (    Directory directory : indexesToImport) {
      LOG.info(""String_Node_Str"",directory,shard,table);
    }
    LOG.info(""String_Node_Str"",shard,table);
    _lock.writeLock().lock();
    try {
      for (      HdfsDirectory directory : indexesToImport) {
        LOG.info(""String_Node_Str"",directory,shard,table);
        _indexWriter.commit();
        boolean isSuccess=true;
        boolean isRollbackDueToException=false;
        boolean emitDeletes=_indexWriter.numDocs() != 0;
        try {
          isSuccess=applyDeletes(directory,_indexWriter,shard,emitDeletes);
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e,shard,table);
          isSuccess=false;
          isRollbackDueToException=true;
        }
        Path dirPath=directory.getPath();
        if (isSuccess) {
          LOG.info(""String_Node_Str"",directory,shard,table);
          _indexWriter.addIndexes(directory);
          LOG.info(""String_Node_Str"",directory,shard,table);
          _indexWriter.deleteDocuments(new Term(BlurConstants.DELETE_MARKER,BlurConstants.DELETE_MARKER_VALUE));
          LOG.info(""String_Node_Str"",directory,shard,table);
          _indexWriter.commit();
          _indexWriter.maybeMerge();
          LOG.info(""String_Node_Str"",dirPath,shard,table);
          fileSystem.delete(dirPath,true);
          LOG.info(""String_Node_Str"",shard,table);
        }
 else {
          if (!isRollbackDueToException) {
            LOG.error(""String_Node_Str"",shard,table,directory);
          }
          LOG.info(""String_Node_Str"",shard,table);
          _indexWriter.rollback();
          LOG.info(""String_Node_Str"",shard,table);
          String name=dirPath.getName();
          int lastIndexOf=name.lastIndexOf('.');
          String badRowIdsName=name.substring(0,lastIndexOf) + ""String_Node_Str"";
          fileSystem.rename(dirPath,new Path(dirPath.getParent(),badRowIdsName));
        }
      }
    }
  finally {
      _lock.writeLock().unlock();
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  Path path=_shardContext.getHdfsDirPath();
  Configuration configuration=_shardContext.getTableContext().getConfiguration();
  try {
    FileSystem fileSystem=path.getFileSystem(configuration);
    SortedSet<FileStatus> listStatus;
    while (true) {
      try {
        listStatus=sort(fileSystem.listStatus(path,new PathFilter(){
          @Override public boolean accept(          Path path){
            if (path != null && path.getName().endsWith(""String_Node_Str"")) {
              return true;
            }
            return false;
          }
        }
));
        break;
      }
 catch (      FileNotFoundException e) {
        LOG.warn(""String_Node_Str"");
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        return;
      }
    }
    List<HdfsDirectory> indexesToImport=new ArrayList<HdfsDirectory>();
    for (    FileStatus fileStatus : listStatus) {
      Path file=fileStatus.getPath();
      if (fileStatus.isDir() && file.getName().endsWith(""String_Node_Str"")) {
        HdfsDirectory hdfsDirectory=new HdfsDirectory(configuration,file);
        if (!DirectoryReader.indexExists(hdfsDirectory)) {
          LOG.error(""String_Node_Str"",file);
        }
 else {
          indexesToImport.add(hdfsDirectory);
        }
      }
    }
    if (indexesToImport.isEmpty()) {
      return;
    }
    IndexAction indexAction=getIndexAction(indexesToImport,fileSystem);
    _blurIndex.process(indexAction);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e,_shard,_table);
  }
}",0.5628042843232717
82343,"void performMutate(IndexSearcherClosable searcher,IndexWriter writer) throws IOException {
  try {
    for (    InternalAction internalAction : _actions) {
      internalAction.performAction(searcher,writer);
    }
  }
  finally {
    _actions.clear();
  }
}","@Override public void performMutate(IndexSearcherClosable searcher,IndexWriter writer) throws IOException {
  try {
    for (    InternalAction internalAction : _actions) {
      internalAction.performAction(searcher,writer);
    }
  }
  finally {
    _actions.clear();
  }
}",0.9681050656660412
82344,"private void commitOrAbortJob(JobContext jobContext,Path shardPath,boolean commit) throws IOException {
  FileSystem fileSystem=shardPath.getFileSystem(jobContext.getConfiguration());
  FileStatus[] listStatus=fileSystem.listStatus(shardPath);
  for (  FileStatus fileStatus : listStatus) {
    Path path=fileStatus.getPath();
    String name=path.getName();
    boolean taskComplete=name.endsWith(""String_Node_Str"");
    if (fileStatus.isDir()) {
      String taskAttemptName=getTaskAttemptName(name);
      TaskAttemptID taskAttemptID=TaskAttemptID.forName(taskAttemptName);
      if (taskAttemptID.getJobID().equals(jobContext.getJobID())) {
        if (commit) {
          if (taskComplete) {
            fileSystem.rename(path,new Path(shardPath,taskAttemptName + ""String_Node_Str""));
            LOG.info(""String_Node_Str"",taskAttemptID,path);
          }
 else {
            fileSystem.delete(path,true);
            LOG.info(""String_Node_Str"",taskAttemptID,path);
          }
        }
 else {
          fileSystem.delete(path,true);
          LOG.info(""String_Node_Str"",taskAttemptID,path);
        }
      }
    }
  }
}","private void commitOrAbortJob(JobContext jobContext,Path shardPath,boolean commit) throws IOException {
  FileSystem fileSystem=shardPath.getFileSystem(jobContext.getConfiguration());
  FileStatus[] listStatus=fileSystem.listStatus(shardPath,new PathFilter(){
    @Override public boolean accept(    Path path){
      if (path.getName().endsWith(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
  }
);
  for (  FileStatus fileStatus : listStatus) {
    Path path=fileStatus.getPath();
    String name=path.getName();
    boolean taskComplete=name.endsWith(""String_Node_Str"");
    if (fileStatus.isDir()) {
      String taskAttemptName=getTaskAttemptName(name);
      if (taskAttemptName == null) {
        LOG.info(""String_Node_Str"",name);
        continue;
      }
      TaskAttemptID taskAttemptID=TaskAttemptID.forName(taskAttemptName);
      if (taskAttemptID.getJobID().equals(jobContext.getJobID())) {
        if (commit) {
          if (taskComplete) {
            fileSystem.rename(path,new Path(shardPath,taskAttemptName + ""String_Node_Str""));
            LOG.info(""String_Node_Str"",taskAttemptID,path);
          }
 else {
            fileSystem.delete(path,true);
            LOG.info(""String_Node_Str"",taskAttemptID,path);
          }
        }
 else {
          fileSystem.delete(path,true);
          LOG.info(""String_Node_Str"",taskAttemptID,path);
        }
      }
    }
  }
}",0.8858375833660259
82345,"private String getTaskAttemptName(String name){
  int lastIndexOf=name.lastIndexOf('.');
  return name.substring(0,lastIndexOf);
}","private String getTaskAttemptName(String name){
  int lastIndexOf=name.lastIndexOf('.');
  if (lastIndexOf < 0) {
    return null;
  }
  return name.substring(0,lastIndexOf);
}",0.8496732026143791
82346,"private void tryToCloseReaders(){
  LOG.debug(""String_Node_Str"",readers.size());
  Iterator<IndexReader> it=readers.iterator();
  while (it.hasNext()) {
    IndexReader reader=it.next();
    if (reader.getRefCount() == 1) {
      it.remove();
      closeInternal(reader);
    }
 else {
      LOG.debug(""String_Node_Str"" + reader + ""String_Node_Str""+ reader.getRefCount()+ ""String_Node_Str"");
    }
    closeInternal(reader);
  }
}","private void tryToCloseReaders(){
  LOG.debug(""String_Node_Str"",readers.size());
  Iterator<IndexReader> it=readers.iterator();
  while (it.hasNext()) {
    IndexReader reader=it.next();
    if (reader.getRefCount() == 1) {
      it.remove();
      closeInternal(reader);
    }
 else {
      LOG.debug(""String_Node_Str"" + reader + ""String_Node_Str""+ reader.getRefCount()+ ""String_Node_Str"");
    }
  }
}",0.9675870348139256
82347,"private void closeInternal(final IndexReader reader){
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        long s=System.currentTimeMillis();
        reader.close();
        long e=System.currentTimeMillis();
        LOG.debug(""String_Node_Str"",readers.size(),(e - s),reader);
      }
 catch (      Exception e) {
        readers.add(reader);
        LOG.error(""String_Node_Str"" + reader + ""String_Node_Str"",e);
      }
    }
  }
);
}","private void closeInternal(final IndexReader reader){
  if (reader.getRefCount() == 0) {
    return;
  }
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        long s=System.currentTimeMillis();
        reader.close();
        long e=System.currentTimeMillis();
        LOG.debug(""String_Node_Str"",readers.size(),(e - s),reader);
      }
 catch (      Exception e) {
        readers.add(reader);
        LOG.error(""String_Node_Str"" + reader + ""String_Node_Str"",e);
      }
    }
  }
);
}",0.949050949050949
82348,"public FastHdfsKeyValueDirectory(Configuration configuration,Path path) throws IOException {
  _store=new HdfsKeyValueStore(configuration,path);
  BytesRef value=new BytesRef();
  if (_store.get(FILES,value)) {
    String filesString=value.utf8ToString();
    String[] files=filesString.split(""String_Node_Str"" + SEP);
    for (    String file : files) {
      if (file.isEmpty()) {
        continue;
      }
      BytesRef key=new BytesRef(file + LENGTH);
      if (_store.get(key,value)) {
        _files.put(file,Long.parseLong(value.utf8ToString()));
      }
 else {
        throw new IOException(""String_Node_Str"" + key.utf8ToString() + ""String_Node_Str"");
      }
    }
  }
  setLockFactory(NoLockFactory.getNoLockFactory());
}","public FastHdfsKeyValueDirectory(Configuration configuration,Path path) throws IOException {
  _store=new HdfsKeyValueStore(configuration,path);
  BytesRef value=new BytesRef();
  if (_store.get(FILES,value)) {
    String filesString=value.utf8ToString();
    String[] files=filesString.split(""String_Node_Str"" + SEP);
    for (    String file : files) {
      if (file.isEmpty()) {
        continue;
      }
      BytesRef key=new BytesRef(file + LENGTH);
      if (_store.get(key,value)) {
        _files.put(file,Long.parseLong(value.utf8ToString()));
      }
 else {
        _files.put(file,0L);
        LOG.warn(""String_Node_Str"",file);
      }
    }
  }
  setLockFactory(NoLockFactory.getNoLockFactory());
}",0.9308437067773168
82349,"@Override public TableDescriptor getTableDescriptor(boolean useCache,String cluster,String table){
  if (useCache) {
    TableDescriptor tableDescriptor=_tableDescriptorCache.get(table);
    updateEnabled(useCache,tableDescriptor,cluster,table);
    if (tableDescriptor != null) {
      return tableDescriptor;
    }
  }
  long s=System.nanoTime();
  TableDescriptor tableDescriptor=new TableDescriptor();
  try {
    checkIfOpen();
    String blurTablePath=ZookeeperPathConstants.getTablePath(cluster,table);
    byte[] bytes=getData(blurTablePath);
    if (bytes == null || bytes.length == 0) {
      LOG.info(""String_Node_Str"",table);
      getOldTableDescriptor(useCache,cluster,table,tableDescriptor);
      BlurUtil.removeAll(_zk,blurTablePath);
      byte[] newFormatBytes=serializeTableDescriptor(tableDescriptor);
      BlurUtil.createPath(_zk,blurTablePath,newFormatBytes);
    }
 else {
      TDeserializer deserializer=new TDeserializer(new TJSONProtocol.Factory());
      deserializer.deserialize(tableDescriptor,bytes);
    }
  }
 catch (  TException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
  tableDescriptor.cluster=cluster;
  _tableDescriptorCache.put(table,tableDescriptor);
  return tableDescriptor;
}","@Override public TableDescriptor getTableDescriptor(boolean useCache,String cluster,String table){
  if (useCache) {
    TableDescriptor tableDescriptor=_tableDescriptorCache.get(table);
    if (tableDescriptor != null) {
      return tableDescriptor;
    }
  }
  long s=System.nanoTime();
  TableDescriptor tableDescriptor=new TableDescriptor();
  try {
    checkIfOpen();
    String blurTablePath=ZookeeperPathConstants.getTablePath(cluster,table);
    byte[] bytes=getData(blurTablePath);
    if (bytes == null) {
      throw new RuntimeException(""String_Node_Str"" + table + ""String_Node_Str""+ cluster+ ""String_Node_Str"");
    }
    TDeserializer deserializer=new TDeserializer(new TJSONProtocol.Factory());
    deserializer.deserialize(tableDescriptor,bytes);
  }
 catch (  TException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
  tableDescriptor.cluster=cluster;
  _tableDescriptorCache.put(table,tableDescriptor);
  return tableDescriptor;
}",0.8391401037805782
82350,"@Override public void disableTable(String cluster,String table){
  long s=System.nanoTime();
  try {
    checkIfOpen();
    if (_zk.exists(ZookeeperPathConstants.getTablePath(cluster,table),false) == null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    String blurTableEnabledPath=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
    if (_zk.exists(blurTableEnabledPath,false) == null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    _zk.delete(blurTableEnabledPath,-1);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public void disableTable(String cluster,String table){
  try {
    checkIfOpen();
    String tablePath=ZookeeperPathConstants.getTablePath(cluster,table);
    Stat stat=_zk.exists(tablePath,false);
    if (stat == null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    TableDescriptor tableDescriptor=getTableDescriptor(false,cluster,table);
    if (!tableDescriptor.isEnabled()) {
      return;
    }
    tableDescriptor.setEnabled(false);
    byte[] bytes=serializeTableDescriptor(tableDescriptor);
    _zk.setData(tablePath,bytes,stat.getVersion());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
}",0.5195563339171045
82351,"@Override public boolean isEnabled(boolean useCache,String cluster,String table){
  if (useCache) {
    Boolean e=_enabled.get(getClusterTableKey(cluster,table));
    if (e != null) {
      return e;
    }
  }
  long s=System.nanoTime();
  String tablePathIsEnabled=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
  try {
    checkIfOpen();
    if (_zk.exists(tablePathIsEnabled,false) == null) {
      return false;
    }
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
  return true;
}","@Override public boolean isEnabled(boolean useCache,String cluster,String table){
  TableDescriptor tableDescriptor=getTableDescriptor(useCache,cluster,table);
  return tableDescriptor.isEnabled();
}",0.2962962962962963
82352,"@Override public boolean exists(boolean useCache,String cluster,String table){
  if (useCache) {
    Set<String> tables=_tablesPerCluster.get(cluster);
    if (tables != null) {
      if (tables.contains(table)) {
        return true;
      }
    }
  }
  long s=System.nanoTime();
  try {
    checkIfOpen();
    if (_zk.exists(ZookeeperPathConstants.getTablePath(cluster,table),false) == null) {
      return false;
    }
    return true;
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public boolean exists(boolean useCache,String cluster,String table){
  if (useCache) {
    Set<String> tables=_tablesPerCluster.get(cluster);
    if (tables != null) {
      if (tables.contains(table)) {
        return true;
      }
    }
  }
  try {
    checkIfOpen();
    if (_zk.exists(ZookeeperPathConstants.getTablePath(cluster,table),false) == null) {
      return false;
    }
    return true;
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}",0.8810086682427108
82353,"@Override public void enableTable(String cluster,String table){
  long s=System.nanoTime();
  try {
    checkIfOpen();
    if (_zk.exists(ZookeeperPathConstants.getTablePath(cluster,table),false) == null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    String blurTableEnabledPath=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
    if (_zk.exists(blurTableEnabledPath,false) != null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    _zk.create(blurTableEnabledPath,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public void enableTable(String cluster,String table){
  long s=System.nanoTime();
  try {
    checkIfOpen();
    String tablePath=ZookeeperPathConstants.getTablePath(cluster,table);
    Stat stat=_zk.exists(tablePath,false);
    if (stat == null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    TableDescriptor tableDescriptor=getTableDescriptor(false,cluster,table);
    if (tableDescriptor.isEnabled()) {
      return;
    }
    tableDescriptor.setEnabled(true);
    byte[] bytes=serializeTableDescriptor(tableDescriptor);
    _zk.setData(tablePath,bytes,stat.getVersion());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}",0.6403785488958991
82354,"@Override public void seek(long pos) throws IOException {
  ensureOpen();
  if (pos >= _fileLength) {
    throw new IOException(""String_Node_Str"" + pos + ""String_Node_Str""+ _fileLength+ ""String_Node_Str"");
  }
  if (_position == pos) {
    return;
  }
  long oldBlockId=getBlockId();
  if (_blockPosition == _cacheBlockSize) {
    oldBlockId--;
  }
  _position=pos;
  long newBlockId=getBlockId(_position);
  if (newBlockId == oldBlockId) {
    _blockPosition=getBlockPosition();
  }
 else {
    releaseCache();
  }
}","@Override public void seek(long pos) throws IOException {
  ensureOpen();
  if (pos >= _fileLength) {
    _position=pos;
    return;
  }
  if (_position == pos) {
    return;
  }
  long oldBlockId=getBlockId();
  if (_blockPosition == _cacheBlockSize) {
    oldBlockId--;
  }
  _position=pos;
  long newBlockId=getBlockId(_position);
  if (newBlockId == oldBlockId) {
    _blockPosition=getBlockPosition();
  }
 else {
    releaseCache();
  }
}",0.8720083246618107
82355,"private void tryToFill() throws IOException {
  if (!isCacheValueValid() || remaining() == 0) {
    releaseCache();
    fill();
  }
 else {
    return;
  }
}","private void tryToFill() throws IOException {
  checkEOF();
  if (!isCacheValueValid() || remaining() == 0) {
    releaseCache();
    fill();
  }
 else {
    return;
  }
}",0.9573170731707316
82356,"@Test public void testCreateIndex() throws IOException {
  long s=System.nanoTime();
  IndexWriterConfig conf=new IndexWriterConfig(LuceneVersionConstant.LUCENE_VERSION,new KeywordAnalyzer());
  FSDirectory control=FSDirectory.open(fileControl);
  Directory dir=getControlDir(control,directory);
  IndexWriter writer=new IndexWriter(dir,conf);
  int numDocs=10000;
  DirectoryReader reader=null;
  for (int i=0; i < 100; i++) {
    if (reader == null) {
      reader=DirectoryReader.open(writer,true);
    }
 else {
      DirectoryReader old=reader;
      reader=DirectoryReader.openIfChanged(old,writer,true);
      if (reader == null) {
        reader=old;
      }
 else {
        old.close();
      }
    }
    assertEquals(i * numDocs,reader.numDocs());
    IndexSearcher searcher=new IndexSearcher(reader);
    NumericRangeQuery<Integer> query=NumericRangeQuery.newIntRange(""String_Node_Str"",42,42,true,true);
    TopDocs topDocs=searcher.search(query,10);
    assertEquals(i,topDocs.totalHits);
    addDocuments(writer,numDocs);
  }
  writer.close(false);
  reader.close();
  long e=System.nanoTime();
  System.out.println(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
}","@Test public void testCreateIndex() throws IOException {
  long s=System.nanoTime();
  IndexWriterConfig conf=new IndexWriterConfig(LuceneVersionConstant.LUCENE_VERSION,new KeywordAnalyzer());
  IndexDeletionPolicyReader indexDeletionPolicy=new IndexDeletionPolicyReader(new KeepOnlyLastCommitDeletionPolicy());
  conf.setIndexDeletionPolicy(indexDeletionPolicy);
  FSDirectory control=FSDirectory.open(fileControl);
  Directory dir=getControlDir(control,directory);
  IndexWriter writer=new IndexWriter(dir,conf);
  int numDocs=10000;
  DirectoryReader reader=null;
  long gen=0;
  for (int i=0; i < 100; i++) {
    if (reader == null) {
      reader=DirectoryReader.open(writer,true);
      gen=reader.getIndexCommit().getGeneration();
      indexDeletionPolicy.register(gen);
    }
 else {
      DirectoryReader old=reader;
      reader=DirectoryReader.openIfChanged(old,writer,true);
      if (reader == null) {
        reader=old;
      }
 else {
        long newGen=reader.getIndexCommit().getGeneration();
        indexDeletionPolicy.register(newGen);
        indexDeletionPolicy.unregister(gen);
        old.close();
        gen=newGen;
      }
    }
    assertEquals(i * numDocs,reader.numDocs());
    IndexSearcher searcher=new IndexSearcher(reader);
    NumericRangeQuery<Integer> query=NumericRangeQuery.newIntRange(""String_Node_Str"",42,42,true,true);
    TopDocs topDocs=searcher.search(query,10);
    assertEquals(i,topDocs.totalHits);
    addDocuments(writer,numDocs);
  }
  writer.close(false);
  reader.close();
  long e=System.nanoTime();
  System.out.println(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
}",0.833745146487822
82357,"public CachedDecompressor(Decompressor decompressor,SegmentInfo si,ConcurrentLinkedHashMap<CachedKey,BytesRef> cache){
  _si=si;
  _decompressor=decompressor;
  _cache=cache;
}","public CachedDecompressor(Decompressor decompressor,SegmentInfo si,ConcurrentLinkedHashMap<CachedKey,BytesRef> cache){
  _decompressor=decompressor;
}",0.9202453987730062
82358,"@Override public void decompress(final DataInput in,final int originalLength,final int offset,final int length,final BytesRef bytes) throws IOException {
  if (in instanceof IndexInput) {
    IndexInput indexInput=(IndexInput)in;
    String name=indexInput.toString();
    long filePointer=indexInput.getFilePointer();
    CachedKey key=new CachedKey(name,filePointer,_si);
    BytesRef cachedRef=_cache.get(key);
    if (cachedRef == null) {
      cachedRef=new BytesRef(originalLength + 7);
      _decompressor.decompress(indexInput,originalLength,0,originalLength,cachedRef);
      _cache.put(key,cachedRef);
      cachedRef.length=originalLength;
      cachedRef.offset=0;
    }
    if (bytes.bytes.length < originalLength + 7) {
      bytes.bytes=new byte[ArrayUtil.oversize(originalLength + 7,1)];
    }
    System.arraycopy(cachedRef.bytes,cachedRef.offset,bytes.bytes,0,length + offset);
    bytes.offset=offset;
    bytes.length=length;
  }
 else {
    _decompressor.decompress(in,originalLength,offset,length,bytes);
  }
}","@Override public void decompress(final DataInput in,final int originalLength,final int offset,final int length,final BytesRef bytes) throws IOException {
  if (in instanceof IndexInput) {
    IndexInput indexInput=(IndexInput)in;
    String name=indexInput.toString();
    long filePointer=indexInput.getFilePointer();
    Entry entry=_entry.get();
    if (entry == null || !entry.isValid(indexInput,name,filePointer)) {
      entry=new Entry(indexInput,name,filePointer);
      entry._cache=new BytesRef(originalLength + 7);
      _decompressor.decompress(indexInput,originalLength,0,originalLength,entry._cache);
      entry._cache.length=originalLength;
      entry._cache.offset=0;
      _entry.set(entry);
    }
    if (bytes.bytes.length < originalLength + 7) {
      bytes.bytes=new byte[ArrayUtil.oversize(originalLength + 7,1)];
    }
    System.arraycopy(entry._cache.bytes,entry._cache.offset,bytes.bytes,0,length + offset);
    bytes.offset=offset;
    bytes.length=length;
  }
 else {
    _decompressor.decompress(in,originalLength,offset,length,bytes);
  }
}",0.69106463878327
82359,"@Override public void run(){
  BlockingQueue<Client> bq=_connMap.get(_connection);
synchronized (_connection) {
    if (!_connMap.get(_connection).isEmpty()) {
      Iterator<Client> it=bq.iterator();
      try {
        while (it.hasNext()) {
          Client client=it.next();
          if (((WeightedClient)client).isStale()) {
            close(client);
            bq.take();
          }
 else           break;
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
}","@Override public void run(){
  while (_running.get()) {
    for (    Entry<Connection,BlockingQueue<Client>> e : _connMap.entrySet()) {
      testConnections(e.getKey(),e.getValue());
    }
    try {
      Thread.sleep(getClientPoolCleanFrequency());
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}",0.2112676056338028
82360,"public Client getClient(Connection connection) throws TTransportException, IOException {
  BlockingQueue<Client> blockingQueue=getQueue(connection);
  if (blockingQueue.isEmpty()) {
    return newClient(connection);
  }
  try {
    return blockingQueue.take();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public Client getClient(Connection connection) throws TTransportException, IOException {
  BlockingQueue<Client> blockingQueue=getQueue(connection);
  if (blockingQueue.isEmpty()) {
    return newClient(connection);
  }
  while (true) {
    WeightedClient client=(WeightedClient)blockingQueue.poll();
    if (client == null) {
      return newClient(connection);
    }
    if (client.isStale()) {
      if (testClient(connection,client)) {
        return client;
      }
    }
 else {
      return client;
    }
  }
}",0.5734265734265734
82361,"public void trashConnections(Connection connection,Client client){
  BlockingQueue<Client> blockingQueue;
synchronized (connection) {
    blockingQueue=_connMap.put(connection,getNewQueue());
    try {
      blockingQueue.put(client);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  LOG.info(""String_Node_Str"",connection);
  for (  Client c : blockingQueue) {
    close(c);
  }
}","public void trashConnections(Connection connection,Client client){
  BlockingQueue<Client> blockingQueue;
synchronized (_connMap) {
    blockingQueue=_connMap.put(connection,getNewQueue());
    try {
      blockingQueue.put(client);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  LOG.info(""String_Node_Str"",connection);
  for (  Client c : blockingQueue) {
    close(c);
  }
}",0.9787234042553192
82362,"public void returnClient(Connection connection,Client client){
  try {
    ((WeightedClient)client).setEnqueTime(System.currentTimeMillis());
    getQueue(connection).put(client);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public void returnClient(Connection connection,Client client){
  ((WeightedClient)client).touch();
  if (!getQueue(connection).offer(client)) {
    close(client);
  }
}",0.6355140186915887
82363,"private BlockingQueue<Client> getQueue(Connection connection){
  BlockingQueue<Client> blockingQueue;
synchronized (connection) {
    blockingQueue=_connMap.get(connection);
    if (blockingQueue == null) {
      blockingQueue=getNewQueue();
      _connMap.put(connection,blockingQueue);
    }
  }
  return _connMap.get(connection);
}","private BlockingQueue<Client> getQueue(Connection connection){
  BlockingQueue<Client> blockingQueue=_connMap.get(connection);
  if (blockingQueue != null) {
    return blockingQueue;
  }
synchronized (_connMap) {
    blockingQueue=_connMap.get(connection);
    if (blockingQueue == null) {
      blockingQueue=getNewQueue();
      _connMap.put(connection,blockingQueue);
    }
  }
  return _connMap.get(connection);
}",0.8590425531914894
82364,"private static void checkAndRemoveStaleClients(){
  _master=new Thread(new Runnable(){
    @Override public void run(){
      while (_running.get()) {
        try {
          Thread.sleep(getClientPoolCleanFrequency());
          List<Thread> workers=new ArrayList<Thread>();
          int num=0;
          for (          Connection connection : _connMap.keySet()) {
            Thread thread=new PoolWorker(connection);
            thread.setName(""String_Node_Str"" + ++num);
            thread.start();
            workers.add(thread);
          }
          for (          Thread t : workers) {
            t.join();
          }
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
);
  _master.setDaemon(true);
  _master.setName(""String_Node_Str"");
  _master.start();
}","private static void checkAndRemoveStaleClients(){
  _master=new Thread(new Runnable(){
    @Override public void run(){
      while (_running.get()) {
        for (        Entry<Connection,BlockingQueue<Client>> e : _connMap.entrySet()) {
          testConnections(e.getKey(),e.getValue());
        }
        try {
          Thread.sleep(getClientPoolCleanFrequency());
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
    private void testConnections(    Connection connection,    BlockingQueue<Client> clients){
      LOG.debug(""String_Node_Str"",connection);
      int size=clients.size();
      for (int i=0; i < size; i++) {
        WeightedClient weightedClient=(WeightedClient)clients.poll();
        if (weightedClient == null) {
          return;
        }
        if (weightedClient.isStale()) {
          if (testClient(connection,weightedClient)) {
            tryToReturnToQueue(clients,weightedClient);
          }
 else {
            close(weightedClient);
          }
        }
 else {
          tryToReturnToQueue(clients,weightedClient);
        }
      }
    }
    private void tryToReturnToQueue(    BlockingQueue<Client> clients,    WeightedClient weightedClient){
      if (!clients.offer(weightedClient)) {
        close(weightedClient);
      }
    }
  }
);
  _master.setDaemon(true);
  _master.setName(""String_Node_Str"");
  _master.start();
}",0.248
82365,"public boolean isStale(){
  long diff=System.currentTimeMillis() - _enqueueTime;
  return diff >= getClientIdleTimeThreshold();
}","public boolean isStale(){
  long diff=System.nanoTime() - _lastUse;
  return diff >= getClientIdleTimeThreshold();
}",0.8734693877551021
82366,"public static void close(Client client){
  client.getInputProtocol().getTransport().close();
  client.getOutputProtocol().getTransport().close();
}","public static void close(Client client){
  try {
    client.getInputProtocol().getTransport().close();
    client.getOutputProtocol().getTransport().close();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",client);
  }
}",0.7736842105263158
82367,"void process(AtomicLongArray counts,long[] minimumsBeforeReturning) throws IOException {
  SimpleCollector col=new SimpleCollector(_bitSet);
  if (minimumsBeforeReturning == null) {
    for (int i=0; i < _scorers.length; i++) {
      Scorer scorer=_scorers[i];
      if (scorer != null) {
        scorer.score(col);
        counts.addAndGet(i,col._hits);
      }
      col._hits=0;
    }
  }
 else {
    for (int i=0; i < _scorers.length; i++) {
      long min=minimumsBeforeReturning[i];
      long currentCount=counts.get(i);
      if (currentCount < min) {
        Scorer scorer=_scorers[i];
        if (scorer != null) {
          scorer.score(col);
          counts.addAndGet(i,col._hits);
        }
        counts.addAndGet(i,col._hits);
        col._hits=0;
      }
    }
  }
}","void process(AtomicLongArray counts,long[] minimumsBeforeReturning) throws IOException {
  SimpleCollector col=new SimpleCollector(_bitSet);
  if (minimumsBeforeReturning == null) {
    for (int i=0; i < _scorers.length; i++) {
      Scorer scorer=_scorers[i];
      if (scorer != null) {
        scorer.score(col);
        counts.addAndGet(i,col._hits);
      }
      col._hits=0;
    }
  }
 else {
    for (int i=0; i < _scorers.length; i++) {
      long min=minimumsBeforeReturning[i];
      long currentCount=counts.get(i);
      if (currentCount < min) {
        Scorer scorer=_scorers[i];
        if (scorer != null) {
          scorer.score(col);
          counts.addAndGet(i,col._hits);
        }
        col._hits=0;
      }
    }
  }
}",0.974493132766514
82368,"public CachedDecompressor(Decompressor decompressor,SegmentInfo si,ConcurrentLinkedHashMap<CachedKey,BytesRef> cache){
  _si=si;
  _decompressor=decompressor;
  _cache=cache;
}","public CachedDecompressor(Decompressor decompressor,SegmentInfo si,ConcurrentLinkedHashMap<CachedKey,BytesRef> cache){
  _decompressor=decompressor;
}",0.9202453987730062
82369,"@Override public void decompress(final DataInput in,final int originalLength,final int offset,final int length,final BytesRef bytes) throws IOException {
  if (in instanceof IndexInput) {
    IndexInput indexInput=(IndexInput)in;
    String name=indexInput.toString();
    long filePointer=indexInput.getFilePointer();
    CachedKey key=new CachedKey(name,filePointer,_si);
    BytesRef cachedRef=_cache.get(key);
    if (cachedRef == null) {
      cachedRef=new BytesRef(originalLength + 7);
      _decompressor.decompress(indexInput,originalLength,0,originalLength,cachedRef);
      _cache.put(key,cachedRef);
      cachedRef.length=originalLength;
      cachedRef.offset=0;
    }
    if (bytes.bytes.length < originalLength + 7) {
      bytes.bytes=new byte[ArrayUtil.oversize(originalLength + 7,1)];
    }
    System.arraycopy(cachedRef.bytes,cachedRef.offset,bytes.bytes,0,length + offset);
    bytes.offset=offset;
    bytes.length=length;
  }
 else {
    _decompressor.decompress(in,originalLength,offset,length,bytes);
  }
}","@Override public void decompress(final DataInput in,final int originalLength,final int offset,final int length,final BytesRef bytes) throws IOException {
  if (in instanceof IndexInput) {
    IndexInput indexInput=(IndexInput)in;
    String name=indexInput.toString();
    long filePointer=indexInput.getFilePointer();
    Entry entry=_entry.get();
    if (entry == null || !entry.isValid(indexInput,name,filePointer)) {
      entry=new Entry(indexInput,name,filePointer);
      entry._cache=new BytesRef(originalLength + 7);
      _decompressor.decompress(indexInput,originalLength,0,originalLength,entry._cache);
      entry._cache.length=originalLength;
      entry._cache.offset=0;
      _entry.set(entry);
    }
    if (bytes.bytes.length < originalLength + 7) {
      bytes.bytes=new byte[ArrayUtil.oversize(originalLength + 7,1)];
    }
    System.arraycopy(entry._cache.bytes,entry._cache.offset,bytes.bytes,0,length + offset);
    bytes.offset=offset;
    bytes.length=length;
  }
 else {
    _decompressor.decompress(in,originalLength,offset,length,bytes);
  }
}",0.69106463878327
82370,"void process(AtomicLongArray counts,long[] minimumsBeforeReturning) throws IOException {
  SimpleCollector col=new SimpleCollector(_bitSet);
  if (minimumsBeforeReturning == null) {
    for (int i=0; i < _scorers.length; i++) {
      Scorer scorer=_scorers[i];
      if (scorer != null) {
        scorer.score(col);
        counts.addAndGet(i,col._hits);
      }
      col._hits=0;
    }
  }
 else {
    for (int i=0; i < _scorers.length; i++) {
      long min=minimumsBeforeReturning[i];
      long currentCount=counts.get(i);
      if (currentCount < min) {
        Scorer scorer=_scorers[i];
        if (scorer != null) {
          scorer.score(col);
          counts.addAndGet(i,col._hits);
        }
        counts.addAndGet(i,col._hits);
        col._hits=0;
      }
    }
  }
}","void process(AtomicLongArray counts,long[] minimumsBeforeReturning) throws IOException {
  SimpleCollector col=new SimpleCollector(_bitSet);
  if (minimumsBeforeReturning == null) {
    for (int i=0; i < _scorers.length; i++) {
      Scorer scorer=_scorers[i];
      if (scorer != null) {
        scorer.score(col);
        counts.addAndGet(i,col._hits);
      }
      col._hits=0;
    }
  }
 else {
    for (int i=0; i < _scorers.length; i++) {
      long min=minimumsBeforeReturning[i];
      long currentCount=counts.get(i);
      if (currentCount < min) {
        Scorer scorer=_scorers[i];
        if (scorer != null) {
          scorer.score(col);
          counts.addAndGet(i,col._hits);
        }
        col._hits=0;
      }
    }
  }
}",0.974493132766514
82371,"@Override public void run(){
  BlockingQueue<Client> bq=_connMap.get(_connection);
synchronized (_connection) {
    if (!_connMap.get(_connection).isEmpty()) {
      Iterator<Client> it=bq.iterator();
      try {
        while (it.hasNext()) {
          Client client=it.next();
          if (((WeightedClient)client).isStale()) {
            close(client);
            bq.take();
          }
 else           break;
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
}","@Override public void run(){
  while (_running.get()) {
    for (    Entry<Connection,BlockingQueue<Client>> e : _connMap.entrySet()) {
      testConnections(e.getKey(),e.getValue());
    }
    try {
      Thread.sleep(getClientPoolCleanFrequency());
    }
 catch (    InterruptedException e) {
      return;
    }
  }
}",0.2112676056338028
82372,"public Client getClient(Connection connection) throws TTransportException, IOException {
  BlockingQueue<Client> blockingQueue=getQueue(connection);
  if (blockingQueue.isEmpty()) {
    return newClient(connection);
  }
  try {
    return blockingQueue.take();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public Client getClient(Connection connection) throws TTransportException, IOException {
  BlockingQueue<Client> blockingQueue=getQueue(connection);
  if (blockingQueue.isEmpty()) {
    return newClient(connection);
  }
  while (true) {
    WeightedClient client=(WeightedClient)blockingQueue.poll();
    if (client == null) {
      return newClient(connection);
    }
    if (client.isStale()) {
      if (testClient(connection,client)) {
        return client;
      }
    }
 else {
      return client;
    }
  }
}",0.5734265734265734
82373,"public void trashConnections(Connection connection,Client client){
  BlockingQueue<Client> blockingQueue;
synchronized (connection) {
    blockingQueue=_connMap.put(connection,getNewQueue());
    try {
      blockingQueue.put(client);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  LOG.info(""String_Node_Str"",connection);
  for (  Client c : blockingQueue) {
    close(c);
  }
}","public void trashConnections(Connection connection,Client client){
  BlockingQueue<Client> blockingQueue;
synchronized (_connMap) {
    blockingQueue=_connMap.put(connection,getNewQueue());
    try {
      blockingQueue.put(client);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  LOG.info(""String_Node_Str"",connection);
  for (  Client c : blockingQueue) {
    close(c);
  }
}",0.9787234042553192
82374,"public void returnClient(Connection connection,Client client){
  try {
    ((WeightedClient)client).setEnqueTime(System.currentTimeMillis());
    getQueue(connection).put(client);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public void returnClient(Connection connection,Client client){
  ((WeightedClient)client).touch();
  if (!getQueue(connection).offer(client)) {
    close(client);
  }
}",0.6355140186915887
82375,"private BlockingQueue<Client> getQueue(Connection connection){
  BlockingQueue<Client> blockingQueue;
synchronized (connection) {
    blockingQueue=_connMap.get(connection);
    if (blockingQueue == null) {
      blockingQueue=getNewQueue();
      _connMap.put(connection,blockingQueue);
    }
  }
  return _connMap.get(connection);
}","private BlockingQueue<Client> getQueue(Connection connection){
  BlockingQueue<Client> blockingQueue=_connMap.get(connection);
  if (blockingQueue != null) {
    return blockingQueue;
  }
synchronized (_connMap) {
    blockingQueue=_connMap.get(connection);
    if (blockingQueue == null) {
      blockingQueue=getNewQueue();
      _connMap.put(connection,blockingQueue);
    }
  }
  return _connMap.get(connection);
}",0.8590425531914894
82376,"private static void checkAndRemoveStaleClients(){
  _master=new Thread(new Runnable(){
    @Override public void run(){
      while (_running.get()) {
        try {
          Thread.sleep(getClientPoolCleanFrequency());
          List<Thread> workers=new ArrayList<Thread>();
          int num=0;
          for (          Connection connection : _connMap.keySet()) {
            Thread thread=new PoolWorker(connection);
            thread.setName(""String_Node_Str"" + ++num);
            thread.start();
            workers.add(thread);
          }
          for (          Thread t : workers) {
            t.join();
          }
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
);
  _master.setDaemon(true);
  _master.setName(""String_Node_Str"");
  _master.start();
}","private static void checkAndRemoveStaleClients(){
  _master=new Thread(new Runnable(){
    @Override public void run(){
      while (_running.get()) {
        for (        Entry<Connection,BlockingQueue<Client>> e : _connMap.entrySet()) {
          testConnections(e.getKey(),e.getValue());
        }
        try {
          Thread.sleep(getClientPoolCleanFrequency());
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
    private void testConnections(    Connection connection,    BlockingQueue<Client> clients){
      LOG.debug(""String_Node_Str"",connection);
      int size=clients.size();
      for (int i=0; i < size; i++) {
        WeightedClient weightedClient=(WeightedClient)clients.poll();
        if (weightedClient == null) {
          return;
        }
        if (weightedClient.isStale()) {
          if (testClient(connection,weightedClient)) {
            tryToReturnToQueue(clients,weightedClient);
          }
 else {
            close(weightedClient);
          }
        }
 else {
          tryToReturnToQueue(clients,weightedClient);
        }
      }
    }
    private void tryToReturnToQueue(    BlockingQueue<Client> clients,    WeightedClient weightedClient){
      if (!clients.offer(weightedClient)) {
        close(weightedClient);
      }
    }
  }
);
  _master.setDaemon(true);
  _master.setName(""String_Node_Str"");
  _master.start();
}",0.248
82377,"public boolean isStale(){
  long diff=System.currentTimeMillis() - _enqueueTime;
  return diff >= getClientIdleTimeThreshold();
}","public boolean isStale(){
  long diff=System.nanoTime() - _lastUse;
  return diff >= getClientIdleTimeThreshold();
}",0.8734693877551021
82378,"public static void close(Client client){
  client.getInputProtocol().getTransport().close();
  client.getOutputProtocol().getTransport().close();
}","public static void close(Client client){
  try {
    client.getInputProtocol().getTransport().close();
    client.getOutputProtocol().getTransport().close();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",client);
  }
}",0.7736842105263158
82379,"public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration,boolean randomPort) throws Exception {
  Configuration config=new Configuration();
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int bindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  bindPort+=serverIndex;
  if (randomPort) {
    bindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,bindPort);
  if (randomPort) {
    bindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  int baseGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  final HttpJettyServer httpServer;
  if (baseGuiPort > 0) {
    int webServerPort=baseGuiPort + serverIndex;
    httpServer=new HttpJettyServer(bindPort,webServerPort,configuration.getInt(BLUR_CONTROLLER_BIND_PORT,-1),configuration.getInt(BLUR_SHARD_BIND_PORT,-1),configuration.getInt(BLUR_GUI_CONTROLLER_PORT,-1),configuration.getInt(BLUR_GUI_SHARD_PORT,-1),""String_Node_Str"");
  }
 else {
    httpServer=null;
  }
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + bindPort,randomPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + bindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  BlurUtil.setupZookeeper(zooKeeper,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration);
  final BlurIndexRefresher refresher=new BlurIndexRefresher();
  BlurFilterCache filterCache=getFilterCache(configuration);
  BlurIndexWarmup indexWarmup=BlurIndexWarmup.getIndexWarmup(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_WARMUP_THREAD_COUNT,16);
  int warmupThreads=configuration.getInt(BLUR_SHARD_WARMUP_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,indexWarmup,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,internalSearchThreads,warmupThreads,maxMergeThreads);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,100);
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,statusCleanupTimerDelay,facetThreadCount);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setConfiguration(configuration);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,shardServer,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(config.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,16384000));
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(traceStorage,refresher,server,shardServer,indexManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}","public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration,boolean randomPort) throws Exception {
  Configuration config=new Configuration();
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int bindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  bindPort+=serverIndex;
  if (randomPort) {
    bindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,bindPort);
  if (randomPort) {
    bindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  int baseGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  final HttpJettyServer httpServer;
  if (baseGuiPort > 0) {
    int webServerPort=baseGuiPort + serverIndex;
    httpServer=new HttpJettyServer(bindPort,webServerPort,configuration.getInt(BLUR_CONTROLLER_BIND_PORT,-1),configuration.getInt(BLUR_SHARD_BIND_PORT,-1),configuration.getInt(BLUR_GUI_CONTROLLER_PORT,-1),configuration.getInt(BLUR_GUI_SHARD_PORT,-1),""String_Node_Str"");
  }
 else {
    httpServer=null;
  }
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + bindPort,randomPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + bindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  BlurUtil.setupZookeeper(zooKeeper,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration);
  final BlurIndexRefresher refresher=new BlurIndexRefresher();
  BlurFilterCache filterCache=getFilterCache(configuration);
  BlurIndexWarmup indexWarmup=BlurIndexWarmup.getIndexWarmup(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_WARMUP_THREAD_COUNT,16);
  int warmupThreads=configuration.getInt(BLUR_SHARD_WARMUP_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,indexWarmup,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,internalSearchThreads,warmupThreads,maxMergeThreads);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int remoteFetchCount=configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,110);
  if (fetchCount + 1 <= remoteFetchCount) {
    LOG.warn(""String_Node_Str"" + BLUR_SHARD_FETCHCOUNT + ""String_Node_Str""+ fetchCount+ ""String_Node_Str""+ BLUR_CONTROLLER_REMOTE_FETCH_COUNT+ ""String_Node_Str""+ remoteFetchCount+ ""String_Node_Str"");
  }
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,statusCleanupTimerDelay,facetThreadCount);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setConfiguration(configuration);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,shardServer,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(config.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,16384000));
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(traceStorage,refresher,server,shardServer,indexManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}",0.9763947070948866
82380,"public static BlurResults convertToHits(BlurResultIterable hitsIterable,BlurQuery query,AtomicLongArray facetCounts,ExecutorService executor,Selector selector,final Iface iface,final String table) throws InterruptedException, ExecutionException, BlurException {
  BlurResults results=new BlurResults();
  results.setTotalResults(hitsIterable.getTotalResults());
  results.setShardInfo(hitsIterable.getShardInfo());
  if (query.minimumNumberOfResults > 0) {
    hitsIterable.skipTo(query.start);
    int count=0;
    BlurIterator<BlurResult,BlurException> iterator=hitsIterable.iterator();
    while (iterator.hasNext() && count < query.fetch) {
      results.addToResults(iterator.next());
      count++;
    }
  }
  if (results.results == null) {
    results.results=new ArrayList<BlurResult>();
  }
  if (facetCounts != null) {
    results.facetCounts=BlurUtil.toList(facetCounts);
  }
  if (selector != null) {
    List<Future<FetchResult>> futures=new ArrayList<Future<FetchResult>>();
    for (int i=0; i < results.results.size(); i++) {
      BlurResult result=results.results.get(i);
      final Selector s=new Selector(selector);
      s.setLocationId(result.locationId);
      futures.add(executor.submit(new Callable<FetchResult>(){
        @Override public FetchResult call() throws Exception {
          return iface.fetchRow(table,s);
        }
      }
));
    }
    for (int i=0; i < results.results.size(); i++) {
      Future<FetchResult> future=futures.get(i);
      BlurResult result=results.results.get(i);
      result.setFetchResult(future.get());
    }
  }
  results.query=query;
  results.query.selector=selector;
  return results;
}","public static BlurResults convertToHits(BlurResultIterable hitsIterable,BlurQuery query,AtomicLongArray facetCounts,ExecutorService executor,Selector selector,final Iface iface,final String table) throws InterruptedException, ExecutionException, BlurException {
  BlurResults results=new BlurResults();
  results.setTotalResults(hitsIterable.getTotalResults());
  results.setShardInfo(hitsIterable.getShardInfo());
  if (query.minimumNumberOfResults > 0) {
    hitsIterable.skipTo(query.start);
    BlurIterator<BlurResult,BlurException> iterator=hitsIterable.iterator();
    for (int count=0; count < query.fetch && iterator.hasNext(); count++) {
      results.addToResults(iterator.next());
    }
  }
  if (results.results == null) {
    results.results=new ArrayList<BlurResult>();
  }
  if (facetCounts != null) {
    results.facetCounts=BlurUtil.toList(facetCounts);
  }
  if (selector != null) {
    List<Future<FetchResult>> futures=new ArrayList<Future<FetchResult>>();
    for (int i=0; i < results.results.size(); i++) {
      BlurResult result=results.results.get(i);
      final Selector s=new Selector(selector);
      s.setLocationId(result.locationId);
      futures.add(executor.submit(new Callable<FetchResult>(){
        @Override public FetchResult call() throws Exception {
          return iface.fetchRow(table,s);
        }
      }
));
    }
    for (int i=0; i < results.results.size(); i++) {
      Future<FetchResult> future=futures.get(i);
      BlurResult result=results.results.get(i);
      result.setFetchResult(future.get());
    }
  }
  results.query=query;
  results.query.selector=selector;
  return results;
}",0.9575757575757576
82381,"@Test public void runClusterIntegrationTests() throws BlurException, TException, IOException, InterruptedException, KeeperException {
  testCreateTable();
  testLoadTable();
  testForEmptySchema();
  testQueryWithSelector();
  testQueryWithFacets();
  testBatchFetch();
  testQueryCancel();
  testBackPressureViaQuery();
  testTestShardFailover();
  testTermsList();
  testCreateDisableAndRemoveTable();
  testCreateTableWithCustomType();
}","@Test public void runClusterIntegrationTests() throws BlurException, TException, IOException, InterruptedException, KeeperException {
  start(""String_Node_Str"");
  testCreateTable();
  start(""String_Node_Str"");
  testLoadTable();
  start(""String_Node_Str"");
  testForEmptySchema();
  start(""String_Node_Str"");
  testQueryWithSelector();
  start(""String_Node_Str"");
  testQueryWithFacets();
  start(""String_Node_Str"");
  testBatchFetch();
  start(""String_Node_Str"");
  testQueryCancel();
  start(""String_Node_Str"");
  testBackPressureViaQuery();
  start(""String_Node_Str"");
  testTestShardFailover();
  start(""String_Node_Str"");
  testTermsList();
  start(""String_Node_Str"");
  testCreateDisableAndRemoveTable();
  start(""String_Node_Str"");
  testCreateTableWithCustomType();
}",0.7236842105263158
82382,"private void runBackPressureViaQuery() throws InterruptedException {
  final Iface client=getClient();
  final BlurQuery blurQueryRow=new BlurQuery();
  Query queryRow=new Query();
  queryRow.setQuery(""String_Node_Str"");
  blurQueryRow.setQuery(queryRow);
  blurQueryRow.setUseCacheIfPresent(false);
  blurQueryRow.setCacheResult(false);
  blurQueryRow.setUuid(""String_Node_Str"");
  final AtomicReference<BlurException> error=new AtomicReference<BlurException>();
  final AtomicBoolean fail=new AtomicBoolean();
  System.gc();
  System.gc();
  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();
  MemoryUsage usage=memoryMXBean.getHeapMemoryUsage();
  long max=usage.getMax();
  System.out.println(""String_Node_Str"" + max + ""String_Node_Str"");
  long used=usage.getUsed();
  System.out.println(""String_Node_Str"" + used + ""String_Node_Str"");
  long limit=(long)(max * 0.80);
  System.out.println(""String_Node_Str"" + limit + ""String_Node_Str"");
  long difference=limit - used;
  int sizeToAllocate=(int)((int)difference * 0.50);
  System.out.println(""String_Node_Str"" + sizeToAllocate + ""String_Node_Str""+ getHeapSize()+ ""String_Node_Str""+ getMaxHeapSize()+ ""String_Node_Str"");
  byte[] bufferToFillHeap=new byte[sizeToAllocate];
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        client.query(""String_Node_Str"",blurQueryRow);
        fail.set(true);
      }
 catch (      BlurException e) {
        error.set(e);
      }
catch (      TException e) {
        e.printStackTrace();
        fail.set(true);
      }
    }
  }
).start();
  Thread.sleep(500);
  List<byte[]> bufferToPutGcWatcherOverLimitList=new ArrayList<byte[]>();
  BlurException blurException=pollForError(error,120,TimeUnit.SECONDS,bufferToPutGcWatcherOverLimitList,fail,(int)(difference / 7));
  if (fail.get()) {
    fail(""String_Node_Str"");
  }
  System.out.println(bufferToFillHeap.hashCode());
  System.out.println(bufferToPutGcWatcherOverLimitList.hashCode());
  assertEquals(blurException.getErrorType(),ErrorType.BACK_PRESSURE);
  bufferToPutGcWatcherOverLimitList.clear();
  bufferToPutGcWatcherOverLimitList=null;
  bufferToFillHeap=null;
}","private void runBackPressureViaQuery() throws InterruptedException {
  final Iface client=getClient();
  final BlurQuery blurQueryRow=new BlurQuery();
  Query queryRow=new Query();
  queryRow.setQuery(""String_Node_Str"");
  blurQueryRow.setQuery(queryRow);
  blurQueryRow.setUseCacheIfPresent(false);
  blurQueryRow.setCacheResult(false);
  blurQueryRow.setUuid(""String_Node_Str"");
  final AtomicReference<BlurException> error=new AtomicReference<BlurException>();
  final AtomicBoolean fail=new AtomicBoolean();
  System.gc();
  System.gc();
  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();
  MemoryUsage usage=memoryMXBean.getHeapMemoryUsage();
  long max=usage.getMax();
  System.out.println(""String_Node_Str"" + max + ""String_Node_Str"");
  long used=usage.getUsed();
  System.out.println(""String_Node_Str"" + used + ""String_Node_Str"");
  long limit=(long)(max * 0.80);
  System.out.println(""String_Node_Str"" + limit + ""String_Node_Str"");
  long difference=limit - used;
  int sizeToAllocate=(int)((int)difference * 0.50);
  System.out.println(""String_Node_Str"" + sizeToAllocate + ""String_Node_Str""+ getHeapSize()+ ""String_Node_Str""+ getMaxHeapSize()+ ""String_Node_Str"");
  byte[] bufferToFillHeap=new byte[sizeToAllocate];
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        client.query(""String_Node_Str"",blurQueryRow);
        fail.set(true);
      }
 catch (      BlurException e) {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        error.set(e);
      }
catch (      TException e) {
        e.printStackTrace();
        fail.set(true);
      }
    }
  }
).start();
  Thread.sleep(500);
  List<byte[]> bufferToPutGcWatcherOverLimitList=new ArrayList<byte[]>();
  BlurException blurException=pollForError(error,120,TimeUnit.SECONDS,bufferToPutGcWatcherOverLimitList,fail,(int)(difference / 7));
  if (fail.get()) {
    fail(""String_Node_Str"");
  }
  System.out.println(bufferToFillHeap.hashCode());
  System.out.println(bufferToPutGcWatcherOverLimitList.hashCode());
  assertEquals(blurException.getErrorType(),ErrorType.BACK_PRESSURE);
  bufferToPutGcWatcherOverLimitList.clear();
  bufferToPutGcWatcherOverLimitList=null;
  bufferToFillHeap=null;
}",0.9327567567567568
82383,"@Override public void run(){
  try {
    client.query(""String_Node_Str"",blurQueryRow);
    fail.set(true);
  }
 catch (  BlurException e) {
    error.set(e);
  }
catch (  TException e) {
    e.printStackTrace();
    fail.set(true);
  }
}","@Override public void run(){
  try {
    client.query(""String_Node_Str"",blurQueryRow);
    fail.set(true);
  }
 catch (  BlurException e) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    error.set(e);
  }
catch (  TException e) {
    e.printStackTrace();
    fail.set(true);
  }
}",0.6261558784676354
82384,"public void testTestShardFailover() throws BlurException, TException, InterruptedException, IOException, KeeperException {
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  Iface client=getClient();
  BlurQuery blurQuery=new BlurQuery();
  blurQuery.setUseCacheIfPresent(false);
  Query query=new Query();
  query.setQuery(""String_Node_Str"");
  blurQuery.setQuery(query);
  BlurResults results1=client.query(""String_Node_Str"",blurQuery);
  assertEquals(numberOfDocs,results1.getTotalResults());
  assertRowResults(results1);
  miniCluster.killShardServer(1);
  Thread.sleep(TimeUnit.SECONDS.toMillis(1));
  client.shardServerLayout(""String_Node_Str"");
  assertEquals(numberOfDocs,client.query(""String_Node_Str"",blurQuery).getTotalResults());
}","public void testTestShardFailover() throws BlurException, TException, InterruptedException, IOException, KeeperException {
  Iface client=getClient();
  BlurQuery blurQuery=new BlurQuery();
  blurQuery.setUseCacheIfPresent(false);
  Query query=new Query();
  query.setQuery(""String_Node_Str"");
  blurQuery.setQuery(query);
  BlurResults results1=client.query(""String_Node_Str"",blurQuery);
  assertEquals(numberOfDocs,results1.getTotalResults());
  assertRowResults(results1);
  miniCluster.killShardServer(1);
  Thread.sleep(TimeUnit.SECONDS.toMillis(1));
  client.shardServerLayout(""String_Node_Str"");
  assertEquals(numberOfDocs,client.query(""String_Node_Str"",blurQuery).getTotalResults());
}",0.8944658944658944
82385,"public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration,boolean randomPort) throws Exception {
  Configuration config=new Configuration();
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int bindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  bindPort+=serverIndex;
  if (randomPort) {
    bindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,bindPort);
  if (randomPort) {
    bindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  int baseGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  final HttpJettyServer httpServer;
  if (baseGuiPort > 0) {
    int webServerPort=baseGuiPort + serverIndex;
    httpServer=new HttpJettyServer(bindPort,webServerPort,configuration.getInt(BLUR_CONTROLLER_BIND_PORT,-1),configuration.getInt(BLUR_SHARD_BIND_PORT,-1),configuration.getInt(BLUR_GUI_CONTROLLER_PORT,-1),configuration.getInt(BLUR_GUI_SHARD_PORT,-1),""String_Node_Str"");
  }
 else {
    httpServer=null;
  }
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + bindPort,randomPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + bindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  BlurUtil.setupZookeeper(zooKeeper,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration);
  final BlurIndexRefresher refresher=new BlurIndexRefresher();
  BlurFilterCache filterCache=getFilterCache(configuration);
  BlurIndexWarmup indexWarmup=BlurIndexWarmup.getIndexWarmup(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_WARMUP_THREAD_COUNT,16);
  int warmupThreads=configuration.getInt(BLUR_SHARD_WARMUP_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,indexWarmup,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,internalSearchThreads,warmupThreads,maxMergeThreads);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,100);
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,statusCleanupTimerDelay,facetThreadCount);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setConfiguration(configuration);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,shardServer,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(config.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,16384000));
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(traceStorage,refresher,server,shardServer,indexManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}","public static ThriftServer createServer(int serverIndex,BlurConfiguration configuration,boolean randomPort) throws Exception {
  Configuration config=new Configuration();
  TableContext.setSystemBlurConfiguration(configuration);
  TableContext.setSystemConfiguration(config);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int bindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  bindPort+=serverIndex;
  if (randomPort) {
    bindPort=0;
  }
  TNonblockingServerSocket tNonblockingServerSocket=ThriftServer.getTNonblockingServerSocket(bindAddress,bindPort);
  if (randomPort) {
    bindPort=tNonblockingServerSocket.getServerSocket().getLocalPort();
  }
  int baseGuiPort=Integer.parseInt(configuration.get(BLUR_GUI_SHARD_PORT));
  final HttpJettyServer httpServer;
  if (baseGuiPort > 0) {
    int webServerPort=baseGuiPort + serverIndex;
    httpServer=new HttpJettyServer(bindPort,webServerPort,configuration.getInt(BLUR_CONTROLLER_BIND_PORT,-1),configuration.getInt(BLUR_SHARD_BIND_PORT,-1),configuration.getInt(BLUR_GUI_CONTROLLER_PORT,-1),configuration.getInt(BLUR_GUI_SHARD_PORT,-1),""String_Node_Str"");
  }
 else {
    httpServer=null;
  }
  Set<Entry<String,String>> set=configuration.getProperties().entrySet();
  for (  Entry<String,String> e : set) {
    String key=e.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int index=key.lastIndexOf('.');
      int bufferSize=Integer.parseInt(key.substring(index + 1));
      long amount=Long.parseLong(e.getValue());
      BufferStore.initNewBuffer(bufferSize,amount);
    }
  }
  BlockCacheDirectoryFactory blockCacheDirectoryFactory;
  String blockCacheVersion=configuration.get(BLUR_SHARD_BLOCK_CACHE_VERSION,""String_Node_Str"");
  long totalNumberOfBytes=configuration.getLong(BLUR_SHARD_BLOCK_CACHE_TOTAL_SIZE,VM.maxDirectMemory() - _64MB);
  if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV1(configuration,totalNumberOfBytes);
  }
 else   if (blockCacheVersion.equals(""String_Node_Str"")) {
    blockCacheDirectoryFactory=new BlockCacheDirectoryFactoryV2(configuration,totalNumberOfBytes);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + blockCacheVersion + ""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + bindPort,randomPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + bindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  int sessionTimeout=configuration.getInt(BLUR_ZOOKEEPER_TIMEOUT,BLUR_ZOOKEEPER_TIMEOUT_DEFAULT);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr,sessionTimeout);
  String cluster=configuration.get(BLUR_CLUSTER_NAME,BLUR_CLUSTER);
  BlurUtil.setupZookeeper(zooKeeper,cluster);
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper,configuration);
  final BlurIndexRefresher refresher=new BlurIndexRefresher();
  BlurFilterCache filterCache=getFilterCache(configuration);
  BlurIndexWarmup indexWarmup=BlurIndexWarmup.getIndexWarmup(configuration);
  DistributedLayoutFactory distributedLayoutFactory=DistributedLayoutFactoryImpl.getDistributedLayoutFactory(configuration,cluster,zooKeeper);
  long safeModeDelay=configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000);
  int shardOpenerThreadCount=configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16);
  int internalSearchThreads=configuration.getInt(BLUR_SHARD_WARMUP_THREAD_COUNT,16);
  int warmupThreads=configuration.getInt(BLUR_SHARD_WARMUP_THREAD_COUNT,16);
  int maxMergeThreads=configuration.getInt(BLUR_SHARD_MERGE_THREAD_COUNT,3);
  final DistributedIndexServer indexServer=new DistributedIndexServer(config,zooKeeper,clusterStatus,indexWarmup,filterCache,blockCacheDirectoryFactory,distributedLayoutFactory,cluster,nodeName,safeModeDelay,shardOpenerThreadCount,internalSearchThreads,warmupThreads,maxMergeThreads);
  BooleanQuery.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  int maxHeapPerRowFetch=configuration.getInt(BLUR_MAX_HEAP_PER_ROW_FETCH,10000000);
  int remoteFetchCount=configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100);
  int fetchCount=configuration.getInt(BLUR_SHARD_FETCHCOUNT,110);
  if (fetchCount + 1 <= remoteFetchCount) {
    LOG.warn(""String_Node_Str"" + BLUR_SHARD_FETCHCOUNT + ""String_Node_Str""+ fetchCount+ ""String_Node_Str""+ BLUR_CONTROLLER_REMOTE_FETCH_COUNT+ ""String_Node_Str""+ remoteFetchCount+ ""String_Node_Str"");
  }
  int indexManagerThreadCount=configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32);
  int mutateThreadCount=configuration.getInt(BLUR_INDEXMANAGER_MUTATE_THREAD_COUNT,32);
  int facetThreadCount=configuration.getInt(BLUR_INDEXMANAGER_FACET_THREAD_COUNT,16);
  long statusCleanupTimerDelay=TimeUnit.SECONDS.toMillis(10);
  final IndexManager indexManager=new IndexManager(indexServer,clusterStatus,filterCache,maxHeapPerRowFetch,fetchCount,indexManagerThreadCount,mutateThreadCount,statusCleanupTimerDelay,facetThreadCount);
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setQueryChecker(queryChecker);
  shardServer.setConfiguration(configuration);
  shardServer.setMaxRecordsPerRowFetchRequest(configuration.getInt(BLUR_MAX_RECORDS_PER_ROW_FETCH_REQUEST,1000));
  shardServer.setConfiguration(configuration);
  shardServer.init();
  final TraceStorage traceStorage=setupTraceStorage(configuration);
  Trace.setStorage(traceStorage);
  Trace.setNodeName(nodeName);
  Iface iface=BlurUtil.wrapFilteredBlurServer(configuration,shardServer,true);
  iface=BlurUtil.recordMethodCallsAndAverageTimes(iface,Iface.class,false);
  iface=BlurUtil.runWithUser(iface,false);
  iface=BlurUtil.runTrace(iface,false);
  if (httpServer != null) {
    WebAppContext context=httpServer.getContext();
    context.addServlet(new ServletHolder(new TServlet(new Blur.Processor<Blur.Iface>(iface),new TJSONProtocol.Factory())),""String_Node_Str"");
    context.addServlet(new ServletHolder(new JSONReporterServlet()),""String_Node_Str"");
    if (enableJsonReporter) {
      JSONReporter.enable(""String_Node_Str"",1,TimeUnit.SECONDS,60);
    }
  }
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  ShardServerEventHandler eventHandler=new ShardServerEventHandler();
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setServerTransport(tNonblockingServerSocket);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setEventHandler(eventHandler);
  server.setAcceptQueueSizePerThread(configuration.getInt(BLUR_SHARD_THRIFT_ACCEPT_QUEUE_SIZE_PER_THREAD,4));
  server.setMaxReadBufferBytes(configuration.getLong(BLUR_SHARD_THRIFT_MAX_READ_BUFFER_BYTES,Long.MAX_VALUE));
  server.setSelectorThreads(configuration.getInt(BLUR_SHARD_THRIFT_SELECTOR_THREADS,2));
  server.setMaxFrameSize(config.getInt(BLUR_THRIFT_MAX_FRAME_SIZE,16384000));
  BlurShutdown shutdown=new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(traceStorage,refresher,server,shardServer,indexManager,indexServer,threadWatcher,clusterStatus,zooKeeper,httpServer);
    }
  }
;
  server.setShutdown(shutdown);
  new BlurServerShutDown().register(shutdown,zooKeeper);
  return server;
}",0.9763947070948866
82386,"public static BlurResults convertToHits(BlurResultIterable hitsIterable,BlurQuery query,AtomicLongArray facetCounts,ExecutorService executor,Selector selector,final Iface iface,final String table) throws InterruptedException, ExecutionException, BlurException {
  BlurResults results=new BlurResults();
  results.setTotalResults(hitsIterable.getTotalResults());
  results.setShardInfo(hitsIterable.getShardInfo());
  if (query.minimumNumberOfResults > 0) {
    hitsIterable.skipTo(query.start);
    int count=0;
    BlurIterator<BlurResult,BlurException> iterator=hitsIterable.iterator();
    while (iterator.hasNext() && count < query.fetch) {
      results.addToResults(iterator.next());
      count++;
    }
  }
  if (results.results == null) {
    results.results=new ArrayList<BlurResult>();
  }
  if (facetCounts != null) {
    results.facetCounts=BlurUtil.toList(facetCounts);
  }
  if (selector != null) {
    List<Future<FetchResult>> futures=new ArrayList<Future<FetchResult>>();
    for (int i=0; i < results.results.size(); i++) {
      BlurResult result=results.results.get(i);
      final Selector s=new Selector(selector);
      s.setLocationId(result.locationId);
      futures.add(executor.submit(new Callable<FetchResult>(){
        @Override public FetchResult call() throws Exception {
          return iface.fetchRow(table,s);
        }
      }
));
    }
    for (int i=0; i < results.results.size(); i++) {
      Future<FetchResult> future=futures.get(i);
      BlurResult result=results.results.get(i);
      result.setFetchResult(future.get());
    }
  }
  results.query=query;
  results.query.selector=selector;
  return results;
}","public static BlurResults convertToHits(BlurResultIterable hitsIterable,BlurQuery query,AtomicLongArray facetCounts,ExecutorService executor,Selector selector,final Iface iface,final String table) throws InterruptedException, ExecutionException, BlurException {
  BlurResults results=new BlurResults();
  results.setTotalResults(hitsIterable.getTotalResults());
  results.setShardInfo(hitsIterable.getShardInfo());
  if (query.minimumNumberOfResults > 0) {
    hitsIterable.skipTo(query.start);
    BlurIterator<BlurResult,BlurException> iterator=hitsIterable.iterator();
    for (int count=0; count < query.fetch && iterator.hasNext(); count++) {
      results.addToResults(iterator.next());
    }
  }
  if (results.results == null) {
    results.results=new ArrayList<BlurResult>();
  }
  if (facetCounts != null) {
    results.facetCounts=BlurUtil.toList(facetCounts);
  }
  if (selector != null) {
    List<Future<FetchResult>> futures=new ArrayList<Future<FetchResult>>();
    for (int i=0; i < results.results.size(); i++) {
      BlurResult result=results.results.get(i);
      final Selector s=new Selector(selector);
      s.setLocationId(result.locationId);
      futures.add(executor.submit(new Callable<FetchResult>(){
        @Override public FetchResult call() throws Exception {
          return iface.fetchRow(table,s);
        }
      }
));
    }
    for (int i=0; i < results.results.size(); i++) {
      Future<FetchResult> future=futures.get(i);
      BlurResult result=results.results.get(i);
      result.setFetchResult(future.get());
    }
  }
  results.query=query;
  results.query.selector=selector;
  return results;
}",0.9575757575757576
82387,"@Test public void runClusterIntegrationTests() throws BlurException, TException, IOException, InterruptedException, KeeperException {
  testCreateTable();
  testLoadTable();
  testForEmptySchema();
  testQueryWithSelector();
  testQueryWithFacets();
  testBatchFetch();
  testQueryCancel();
  testBackPressureViaQuery();
  testTestShardFailover();
  testTermsList();
  testCreateDisableAndRemoveTable();
  testCreateTableWithCustomType();
}","@Test public void runClusterIntegrationTests() throws BlurException, TException, IOException, InterruptedException, KeeperException {
  start(""String_Node_Str"");
  testCreateTable();
  start(""String_Node_Str"");
  testLoadTable();
  start(""String_Node_Str"");
  testForEmptySchema();
  start(""String_Node_Str"");
  testQueryWithSelector();
  start(""String_Node_Str"");
  testQueryWithFacets();
  start(""String_Node_Str"");
  testBatchFetch();
  start(""String_Node_Str"");
  testQueryCancel();
  start(""String_Node_Str"");
  testBackPressureViaQuery();
  start(""String_Node_Str"");
  testTestShardFailover();
  start(""String_Node_Str"");
  testTermsList();
  start(""String_Node_Str"");
  testCreateDisableAndRemoveTable();
  start(""String_Node_Str"");
  testCreateTableWithCustomType();
}",0.7236842105263158
82388,"private void runBackPressureViaQuery() throws InterruptedException {
  final Iface client=getClient();
  final BlurQuery blurQueryRow=new BlurQuery();
  Query queryRow=new Query();
  queryRow.setQuery(""String_Node_Str"");
  blurQueryRow.setQuery(queryRow);
  blurQueryRow.setUseCacheIfPresent(false);
  blurQueryRow.setCacheResult(false);
  blurQueryRow.setUuid(""String_Node_Str"");
  final AtomicReference<BlurException> error=new AtomicReference<BlurException>();
  final AtomicBoolean fail=new AtomicBoolean();
  System.gc();
  System.gc();
  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();
  MemoryUsage usage=memoryMXBean.getHeapMemoryUsage();
  long max=usage.getMax();
  System.out.println(""String_Node_Str"" + max + ""String_Node_Str"");
  long used=usage.getUsed();
  System.out.println(""String_Node_Str"" + used + ""String_Node_Str"");
  long limit=(long)(max * 0.80);
  System.out.println(""String_Node_Str"" + limit + ""String_Node_Str"");
  long difference=limit - used;
  int sizeToAllocate=(int)((int)difference * 0.50);
  System.out.println(""String_Node_Str"" + sizeToAllocate + ""String_Node_Str""+ getHeapSize()+ ""String_Node_Str""+ getMaxHeapSize()+ ""String_Node_Str"");
  byte[] bufferToFillHeap=new byte[sizeToAllocate];
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        client.query(""String_Node_Str"",blurQueryRow);
        fail.set(true);
      }
 catch (      BlurException e) {
        error.set(e);
      }
catch (      TException e) {
        e.printStackTrace();
        fail.set(true);
      }
    }
  }
).start();
  Thread.sleep(500);
  List<byte[]> bufferToPutGcWatcherOverLimitList=new ArrayList<byte[]>();
  BlurException blurException=pollForError(error,120,TimeUnit.SECONDS,bufferToPutGcWatcherOverLimitList,fail,(int)(difference / 7));
  if (fail.get()) {
    fail(""String_Node_Str"");
  }
  System.out.println(bufferToFillHeap.hashCode());
  System.out.println(bufferToPutGcWatcherOverLimitList.hashCode());
  assertEquals(blurException.getErrorType(),ErrorType.BACK_PRESSURE);
  bufferToPutGcWatcherOverLimitList.clear();
  bufferToPutGcWatcherOverLimitList=null;
  bufferToFillHeap=null;
}","private void runBackPressureViaQuery() throws InterruptedException {
  final Iface client=getClient();
  final BlurQuery blurQueryRow=new BlurQuery();
  Query queryRow=new Query();
  queryRow.setQuery(""String_Node_Str"");
  blurQueryRow.setQuery(queryRow);
  blurQueryRow.setUseCacheIfPresent(false);
  blurQueryRow.setCacheResult(false);
  blurQueryRow.setUuid(""String_Node_Str"");
  final AtomicReference<BlurException> error=new AtomicReference<BlurException>();
  final AtomicBoolean fail=new AtomicBoolean();
  System.gc();
  System.gc();
  MemoryMXBean memoryMXBean=ManagementFactory.getMemoryMXBean();
  MemoryUsage usage=memoryMXBean.getHeapMemoryUsage();
  long max=usage.getMax();
  System.out.println(""String_Node_Str"" + max + ""String_Node_Str"");
  long used=usage.getUsed();
  System.out.println(""String_Node_Str"" + used + ""String_Node_Str"");
  long limit=(long)(max * 0.80);
  System.out.println(""String_Node_Str"" + limit + ""String_Node_Str"");
  long difference=limit - used;
  int sizeToAllocate=(int)((int)difference * 0.50);
  System.out.println(""String_Node_Str"" + sizeToAllocate + ""String_Node_Str""+ getHeapSize()+ ""String_Node_Str""+ getMaxHeapSize()+ ""String_Node_Str"");
  byte[] bufferToFillHeap=new byte[sizeToAllocate];
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        client.query(""String_Node_Str"",blurQueryRow);
        fail.set(true);
      }
 catch (      BlurException e) {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        error.set(e);
      }
catch (      TException e) {
        e.printStackTrace();
        fail.set(true);
      }
    }
  }
).start();
  Thread.sleep(500);
  List<byte[]> bufferToPutGcWatcherOverLimitList=new ArrayList<byte[]>();
  BlurException blurException=pollForError(error,120,TimeUnit.SECONDS,bufferToPutGcWatcherOverLimitList,fail,(int)(difference / 7));
  if (fail.get()) {
    fail(""String_Node_Str"");
  }
  System.out.println(bufferToFillHeap.hashCode());
  System.out.println(bufferToPutGcWatcherOverLimitList.hashCode());
  assertEquals(blurException.getErrorType(),ErrorType.BACK_PRESSURE);
  bufferToPutGcWatcherOverLimitList.clear();
  bufferToPutGcWatcherOverLimitList=null;
  bufferToFillHeap=null;
}",0.9327567567567568
82389,"@Override public void run(){
  try {
    client.query(""String_Node_Str"",blurQueryRow);
    fail.set(true);
  }
 catch (  BlurException e) {
    error.set(e);
  }
catch (  TException e) {
    e.printStackTrace();
    fail.set(true);
  }
}","@Override public void run(){
  try {
    client.query(""String_Node_Str"",blurQueryRow);
    fail.set(true);
  }
 catch (  BlurException e) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    error.set(e);
  }
catch (  TException e) {
    e.printStackTrace();
    fail.set(true);
  }
}",0.6261558784676354
82390,"public void testTestShardFailover() throws BlurException, TException, InterruptedException, IOException, KeeperException {
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  Iface client=getClient();
  BlurQuery blurQuery=new BlurQuery();
  blurQuery.setUseCacheIfPresent(false);
  Query query=new Query();
  query.setQuery(""String_Node_Str"");
  blurQuery.setQuery(query);
  BlurResults results1=client.query(""String_Node_Str"",blurQuery);
  assertEquals(numberOfDocs,results1.getTotalResults());
  assertRowResults(results1);
  miniCluster.killShardServer(1);
  Thread.sleep(TimeUnit.SECONDS.toMillis(1));
  client.shardServerLayout(""String_Node_Str"");
  assertEquals(numberOfDocs,client.query(""String_Node_Str"",blurQuery).getTotalResults());
}","public void testTestShardFailover() throws BlurException, TException, InterruptedException, IOException, KeeperException {
  Iface client=getClient();
  BlurQuery blurQuery=new BlurQuery();
  blurQuery.setUseCacheIfPresent(false);
  Query query=new Query();
  query.setQuery(""String_Node_Str"");
  blurQuery.setQuery(query);
  BlurResults results1=client.query(""String_Node_Str"",blurQuery);
  assertEquals(numberOfDocs,results1.getTotalResults());
  assertRowResults(results1);
  miniCluster.killShardServer(1);
  Thread.sleep(TimeUnit.SECONDS.toMillis(1));
  client.shardServerLayout(""String_Node_Str"");
  assertEquals(numberOfDocs,client.query(""String_Node_Str"",blurQuery).getTotalResults());
}",0.8944658944658944
82391,"private void doItInternal(Blur.Iface client,String[] args,PagingPrintWriter out) throws FinishedException, BlurException, TException {
  String tablename=args[1];
  String queryStr=""String_Node_Str"";
  for (int i=2; i < args.length; i++) {
    queryStr+=args[i] + ""String_Node_Str"";
  }
  BlurQuery blurQuery=new BlurQuery();
  Query query=new Query();
  query.setQuery(queryStr);
  blurQuery.setQuery(query);
  blurQuery.setSelector(Main.selector);
  blurQuery.setCacheResult(false);
  blurQuery.setUseCacheIfPresent(false);
  if (Main.highlight) {
    blurQuery.getSelector().setHighlightOptions(new HighlightOptions());
  }
  if (Main.debug) {
    out.println(blurQuery);
  }
  int maxWidth=100;
  ConsoleReader reader=getConsoleReader();
  if (reader != null) {
    Terminal terminal=reader.getTerminal();
    maxWidth=terminal.getWidth() - 15;
    out.setLineLimit(terminal.getHeight() - 2);
  }
  long s=System.nanoTime();
  BlurResults blurResults=client.query(tablename,blurQuery);
  long e=System.nanoTime();
  long timeInNanos=e - s;
  printSummary(out,blurResults,maxWidth,timeInNanos);
  lineBreak(out,maxWidth);
  int hit=0;
  for (  BlurResult result : blurResults.getResults()) {
    double score=result.getScore();
    out.println(""String_Node_Str"" + hit);
    out.println(""String_Node_Str"" + score);
    if (Main.debug) {
      String locationId=result.getLocationId();
      out.println(""String_Node_Str"" + locationId);
    }
    FetchResult fetchResult=result.getFetchResult();
    if (Main.debug) {
      out.println(""String_Node_Str"" + fetchResult.isDeleted());
      out.println(""String_Node_Str"" + fetchResult.isExists());
      out.println(""String_Node_Str"" + fetchResult.getTable());
    }
    FetchRowResult rowResult=fetchResult.getRowResult();
    if (rowResult != null) {
      Row row=rowResult.getRow();
      if (row != null) {
        GetRowCommand.format(out,row,maxWidth);
      }
    }
    lineBreak(out,maxWidth);
    hit++;
  }
  printSummary(out,blurResults,maxWidth,timeInNanos);
}","private void doItInternal(Blur.Iface client,String[] args,PagingPrintWriter out) throws FinishedException, BlurException, TException {
  String tablename=args[1];
  String queryStr=""String_Node_Str"";
  for (int i=2; i < args.length; i++) {
    queryStr+=args[i] + ""String_Node_Str"";
  }
  BlurQuery blurQuery=new BlurQuery();
  Query query=new Query();
  query.setQuery(queryStr);
  blurQuery.setQuery(query);
  blurQuery.setSelector(new Selector(Main.selector));
  blurQuery.setCacheResult(false);
  blurQuery.setUseCacheIfPresent(false);
  if (Main.highlight) {
    blurQuery.getSelector().setHighlightOptions(new HighlightOptions());
  }
  if (Main.debug) {
    out.println(blurQuery);
  }
  int maxWidth=100;
  ConsoleReader reader=getConsoleReader();
  if (reader != null) {
    Terminal terminal=reader.getTerminal();
    maxWidth=terminal.getWidth() - 15;
    out.setLineLimit(terminal.getHeight() - 2);
  }
  long s=System.nanoTime();
  BlurResults blurResults=client.query(tablename,blurQuery);
  long e=System.nanoTime();
  long timeInNanos=e - s;
  printSummary(out,blurResults,maxWidth,timeInNanos);
  lineBreak(out,maxWidth);
  int hit=0;
  for (  BlurResult result : blurResults.getResults()) {
    double score=result.getScore();
    out.println(""String_Node_Str"" + hit);
    out.println(""String_Node_Str"" + score);
    if (Main.debug) {
      String locationId=result.getLocationId();
      out.println(""String_Node_Str"" + locationId);
    }
    FetchResult fetchResult=result.getFetchResult();
    if (Main.debug) {
      out.println(""String_Node_Str"" + fetchResult.isDeleted());
      out.println(""String_Node_Str"" + fetchResult.isExists());
      out.println(""String_Node_Str"" + fetchResult.getTable());
    }
    FetchRowResult rowResult=fetchResult.getRowResult();
    if (rowResult != null) {
      Row row=rowResult.getRow();
      if (row != null) {
        GetRowCommand.format(out,row,maxWidth);
      }
    }
    lineBreak(out,maxWidth);
    hit++;
  }
  printSummary(out,blurResults,maxWidth,timeInNanos);
}",0.9965483234714004
82392,"private void doItInternal(Blur.Iface client,String[] args,PagingPrintWriter out) throws FinishedException, BlurException, TException {
  String tablename=args[1];
  String queryStr=""String_Node_Str"";
  for (int i=2; i < args.length; i++) {
    queryStr+=args[i] + ""String_Node_Str"";
  }
  BlurQuery blurQuery=new BlurQuery();
  Query query=new Query();
  query.setQuery(queryStr);
  blurQuery.setQuery(query);
  blurQuery.setSelector(Main.selector);
  blurQuery.setCacheResult(false);
  blurQuery.setUseCacheIfPresent(false);
  if (Main.highlight) {
    blurQuery.getSelector().setHighlightOptions(new HighlightOptions());
  }
  if (Main.debug) {
    out.println(blurQuery);
  }
  int maxWidth=100;
  ConsoleReader reader=getConsoleReader();
  if (reader != null) {
    Terminal terminal=reader.getTerminal();
    maxWidth=terminal.getWidth() - 15;
    out.setLineLimit(terminal.getHeight() - 2);
  }
  long s=System.nanoTime();
  BlurResults blurResults=client.query(tablename,blurQuery);
  long e=System.nanoTime();
  long timeInNanos=e - s;
  printSummary(out,blurResults,maxWidth,timeInNanos);
  lineBreak(out,maxWidth);
  int hit=0;
  for (  BlurResult result : blurResults.getResults()) {
    double score=result.getScore();
    out.println(""String_Node_Str"" + hit);
    out.println(""String_Node_Str"" + score);
    if (Main.debug) {
      String locationId=result.getLocationId();
      out.println(""String_Node_Str"" + locationId);
    }
    FetchResult fetchResult=result.getFetchResult();
    if (Main.debug) {
      out.println(""String_Node_Str"" + fetchResult.isDeleted());
      out.println(""String_Node_Str"" + fetchResult.isExists());
      out.println(""String_Node_Str"" + fetchResult.getTable());
    }
    FetchRowResult rowResult=fetchResult.getRowResult();
    if (rowResult != null) {
      Row row=rowResult.getRow();
      if (row != null) {
        GetRowCommand.format(out,row,maxWidth);
      }
    }
    lineBreak(out,maxWidth);
    hit++;
  }
  printSummary(out,blurResults,maxWidth,timeInNanos);
}","private void doItInternal(Blur.Iface client,String[] args,PagingPrintWriter out) throws FinishedException, BlurException, TException {
  String tablename=args[1];
  String queryStr=""String_Node_Str"";
  for (int i=2; i < args.length; i++) {
    queryStr+=args[i] + ""String_Node_Str"";
  }
  BlurQuery blurQuery=new BlurQuery();
  Query query=new Query();
  query.setQuery(queryStr);
  blurQuery.setQuery(query);
  blurQuery.setSelector(new Selector(Main.selector));
  blurQuery.setCacheResult(false);
  blurQuery.setUseCacheIfPresent(false);
  if (Main.highlight) {
    blurQuery.getSelector().setHighlightOptions(new HighlightOptions());
  }
  if (Main.debug) {
    out.println(blurQuery);
  }
  int maxWidth=100;
  ConsoleReader reader=getConsoleReader();
  if (reader != null) {
    Terminal terminal=reader.getTerminal();
    maxWidth=terminal.getWidth() - 15;
    out.setLineLimit(terminal.getHeight() - 2);
  }
  long s=System.nanoTime();
  BlurResults blurResults=client.query(tablename,blurQuery);
  long e=System.nanoTime();
  long timeInNanos=e - s;
  printSummary(out,blurResults,maxWidth,timeInNanos);
  lineBreak(out,maxWidth);
  int hit=0;
  for (  BlurResult result : blurResults.getResults()) {
    double score=result.getScore();
    out.println(""String_Node_Str"" + hit);
    out.println(""String_Node_Str"" + score);
    if (Main.debug) {
      String locationId=result.getLocationId();
      out.println(""String_Node_Str"" + locationId);
    }
    FetchResult fetchResult=result.getFetchResult();
    if (Main.debug) {
      out.println(""String_Node_Str"" + fetchResult.isDeleted());
      out.println(""String_Node_Str"" + fetchResult.isExists());
      out.println(""String_Node_Str"" + fetchResult.getTable());
    }
    FetchRowResult rowResult=fetchResult.getRowResult();
    if (rowResult != null) {
      Row row=rowResult.getRow();
      if (row != null) {
        GetRowCommand.format(out,row,maxWidth);
      }
    }
    lineBreak(out,maxWidth);
    hit++;
  }
  printSummary(out,blurResults,maxWidth,timeInNanos);
}",0.9965483234714004
82393,"private void populateSelector(String table,Selector selector) throws IOException, BlurException {
  Tracer trace=Trace.trace(""String_Node_Str"");
  String rowId=selector.rowId;
  String recordId=selector.recordId;
  String shardName=MutationHelper.getShardName(table,rowId,getNumberOfShards(table),_blurPartitioner);
  Map<String,BlurIndex> indexes=_indexServer.getIndexes(table);
  BlurIndex blurIndex=indexes.get(shardName);
  if (blurIndex == null) {
    throw new BException(""String_Node_Str"" + shardName + ""String_Node_Str"");
  }
  IndexSearcherClosable searcher=blurIndex.getIndexSearcher();
  try {
    BooleanQuery query=new BooleanQuery();
    if (selector.recordOnly) {
      query.add(new TermQuery(new Term(RECORD_ID,recordId)),Occur.MUST);
      query.add(new TermQuery(new Term(ROW_ID,rowId)),Occur.MUST);
    }
 else {
      query.add(new TermQuery(new Term(ROW_ID,rowId)),Occur.MUST);
      query.add(new TermQuery(BlurUtil.PRIME_DOC_TERM),Occur.MUST);
    }
    TopDocs topDocs=searcher.search(query,1);
    if (topDocs.totalHits > 1) {
      if (selector.recordOnly) {
        LOG.warn(""String_Node_Str"" + rowId + ""String_Node_Str""+ recordId+ ""String_Node_Str"");
      }
 else {
        LOG.warn(""String_Node_Str"" + rowId + ""String_Node_Str"");
      }
    }
    if (topDocs.totalHits == 1) {
      selector.setLocationId(shardName + ""String_Node_Str"" + topDocs.scoreDocs[0].doc);
    }
 else {
      selector.setLocationId(NOT_FOUND);
    }
  }
  finally {
    searcher.close();
    trace.done();
  }
}","private void populateSelector(IndexSearcherClosable searcher,String shardName,String table,Selector selector) throws IOException, BlurException {
  Tracer trace=Trace.trace(""String_Node_Str"");
  String rowId=selector.rowId;
  String recordId=selector.recordId;
  try {
    BooleanQuery query=new BooleanQuery();
    if (selector.recordOnly) {
      query.add(new TermQuery(new Term(RECORD_ID,recordId)),Occur.MUST);
      query.add(new TermQuery(new Term(ROW_ID,rowId)),Occur.MUST);
    }
 else {
      query.add(new TermQuery(new Term(ROW_ID,rowId)),Occur.MUST);
      query.add(new TermQuery(BlurUtil.PRIME_DOC_TERM),Occur.MUST);
    }
    TopDocs topDocs=searcher.search(query,1);
    if (topDocs.totalHits > 1) {
      if (selector.recordOnly) {
        LOG.warn(""String_Node_Str"" + rowId + ""String_Node_Str""+ recordId+ ""String_Node_Str"");
      }
 else {
        LOG.warn(""String_Node_Str"" + rowId + ""String_Node_Str"");
      }
    }
    if (topDocs.totalHits == 1) {
      selector.setLocationId(shardName + ""String_Node_Str"" + topDocs.scoreDocs[0].doc);
    }
 else {
      selector.setLocationId(NOT_FOUND);
    }
  }
  finally {
    trace.done();
  }
}",0.8305970149253732
82394,"public Blur022StoredFieldsFormat(int chunkSize,CompressionMode compressionMode){
  _chunkSize=chunkSize;
  _compressionMode=compressionMode;
}","public Blur022StoredFieldsFormat(int chunkSize,CompressionMode compressionMode){
  _chunkSize=chunkSize;
  _compressionMode=compressionMode;
  _cache=new ConcurrentLinkedHashMap.Builder<CachedKey,BytesRef>().weigher(new Weigher<BytesRef>(){
    @Override public int weightOf(    BytesRef value){
      return value.bytes.length;
    }
  }
).maximumWeightedCapacity(capacity).build();
}",0.538899430740038
82395,"@Override public Decompressor newDecompressor(){
  return new CachedDecompressor(_compressionMode.newDecompressor());
}","@Override public Decompressor newDecompressor(){
  return new CachedDecompressor(_compressionMode.newDecompressor(),_si,_cache);
}",0.9558232931726908
82396,"@Override public StoredFieldsReader fieldsReader(Directory directory,SegmentInfo si,FieldInfos fn,IOContext context) throws IOException {
  CompressionMode compressionMode=new CachedCompressionMode(getCompressionMode(si),directory,si);
  return new CompressingStoredFieldsReader(directory,si,SEGMENT_SUFFIX,fn,context,FORMAT_NAME,compressionMode);
}","@Override public StoredFieldsReader fieldsReader(Directory directory,SegmentInfo si,FieldInfos fn,IOContext context) throws IOException {
  CompressionMode compressionMode=new CachedCompressionMode(getCompressionMode(si),si,_cache);
  return new CompressingStoredFieldsReader(directory,si,SEGMENT_SUFFIX,fn,context,FORMAT_NAME,compressionMode);
}",0.9697841726618706
82397,"CachedCompressionMode(CompressionMode compressionMode,Directory directory,SegmentInfo si){
  _compressionMode=compressionMode;
}","CachedCompressionMode(CompressionMode compressionMode,SegmentInfo si,ConcurrentLinkedHashMap<CachedKey,BytesRef> cache){
  _compressionMode=compressionMode;
  _si=si;
  _cache=cache;
}",0.6923076923076923
82398,"public CachedDecompressor(Decompressor decompressor){
  _decompressor=decompressor;
}","public CachedDecompressor(Decompressor decompressor,SegmentInfo si,ConcurrentLinkedHashMap<CachedKey,BytesRef> cache){
  _si=si;
  _decompressor=decompressor;
  _cache=cache;
}",0.6513409961685823
82399,"@Override public void decompress(DataInput in,int originalLength,int offset,int length,BytesRef bytes) throws IOException {
  if (in instanceof IndexInput) {
    IndexInput indexInput=(IndexInput)in;
    String name=indexInput.toString();
    Entry entry=_cache.get();
    long filePointer=indexInput.getFilePointer();
    BytesRef cachedRef=entry._bytesRef;
    if (!name.equals(entry._inputName) || entry._position != filePointer) {
      cachedRef.grow(originalLength);
      _decompressor.decompress(in,originalLength,0,originalLength,cachedRef);
      entry._inputName=name;
      entry._position=filePointer;
    }
    bytes.copyBytes(cachedRef);
    bytes.offset=offset;
    bytes.length=length;
  }
 else {
    _decompressor.decompress(in,originalLength,offset,length,bytes);
  }
}","@Override public void decompress(final DataInput in,final int originalLength,final int offset,final int length,final BytesRef bytes) throws IOException {
  if (in instanceof IndexInput) {
    IndexInput indexInput=(IndexInput)in;
    String name=indexInput.toString();
    long filePointer=indexInput.getFilePointer();
    CachedKey key=new CachedKey(name,filePointer,_si);
    BytesRef cachedRef=_cache.get(key);
    if (cachedRef == null) {
      cachedRef=new BytesRef(originalLength + 7);
      _decompressor.decompress(indexInput,originalLength,0,originalLength,cachedRef);
      _cache.put(key,cachedRef);
      cachedRef.length=originalLength;
      cachedRef.offset=0;
    }
    if (bytes.bytes.length < originalLength + 7) {
      bytes.bytes=new byte[ArrayUtil.oversize(originalLength + 7,1)];
    }
    System.arraycopy(cachedRef.bytes,cachedRef.offset,bytes.bytes,0,length + offset);
    bytes.offset=offset;
    bytes.length=length;
  }
 else {
    _decompressor.decompress(in,originalLength,offset,length,bytes);
  }
}",0.2800658978583196
82400,"private void fill() throws IOException {
  _key.setBlockId(getBlockId());
  _cacheValue=get(_key);
  if (_cacheValue == null) {
    _cacheValue=_cache.newInstance(_directory,_fileName);
    long filePosition=getFilePosition();
    _indexInput.seek(filePosition);
    byte[] buffer=_store.takeBuffer(_bufferSize);
    int len=(int)Math.min(_cacheBlockSize,_fileLength - filePosition);
    int cachePosition=0;
    while (len > 0) {
      int length=Math.min(_bufferSize,len);
      _indexInput.readBytes(buffer,0,length);
      _cacheValue.write(cachePosition,buffer,0,length);
      len-=length;
      cachePosition+=length;
    }
    _store.putBuffer(buffer);
    _cache.put(_key.clone(),_cacheValue);
  }
  _blockPosition=getBlockPosition();
}","private void fill() throws IOException {
  _key.setBlockId(getBlockId());
  _cacheValue=get(_key);
  if (_cacheValue == null) {
    _cacheValue=_cache.newInstance(_directory,_fileName);
    _cacheValue.incRef();
    long filePosition=getFilePosition();
    _indexInput.seek(filePosition);
    byte[] buffer=_store.takeBuffer(_bufferSize);
    int len=(int)Math.min(_cacheBlockSize,_fileLength - filePosition);
    int cachePosition=0;
    while (len > 0) {
      int length=Math.min(_bufferSize,len);
      _indexInput.readBytes(buffer,0,length);
      _cacheValue.write(cachePosition,buffer,0,length);
      len-=length;
      cachePosition+=length;
    }
    _store.putBuffer(buffer);
    _cache.put(_key.clone(),_cacheValue);
  }
 else {
    _cacheValue.incRef();
  }
  _blockPosition=getBlockPosition();
}",0.9588159588159588
82401,"@Override public IndexInput clone(){
  ensureOpen();
  CacheIndexInput clone=(CacheIndexInput)super.clone();
  clone._key=_key.clone();
  clone._indexInput=_indexInput.clone();
  clone._quiet=_cache.shouldBeQuiet(_directory,_fileName);
  return clone;
}","@Override public IndexInput clone(){
  ensureOpen();
  CacheIndexInput clone=(CacheIndexInput)super.clone();
  clone._key=_key.clone();
  clone._indexInput=_indexInput.clone();
  clone._quiet=_cache.shouldBeQuiet(_directory,_fileName);
  if (clone._cacheValue != null) {
    clone._cacheValue.incRef();
  }
  return clone;
}",0.82842287694974
82402,"private void releaseCache(){
  if (_cacheValue != null) {
    _cacheValue=null;
  }
}","private void releaseCache(){
  if (_cacheValue != null) {
    _cacheValue.decRef();
    _cacheValue=null;
  }
}",0.8673469387755102
82403,"private void flushInternal() throws IOException {
  int length=_cacheBlockSize - remaining();
  if (length == 0) {
    return;
  }
  CacheValue cacheValue=_cache.newInstance(_directory,_fileName);
  writeBufferToOutputStream(length);
  cacheValue.write(0,_buffer,0,length);
  long blockId=(_position - length) / _cacheBlockSize;
  cacheValue=cacheValue.trim(length);
  _cache.put(new CacheKey(_fileId,blockId),cacheValue);
  _bufferPosition=0;
}","private void flushInternal() throws IOException {
  int length=_cacheBlockSize - remaining();
  if (length == 0) {
    return;
  }
  CacheValue cacheValue=_cache.newInstance(_directory,_fileName);
  cacheValue.incRef();
  writeBufferToOutputStream(length);
  cacheValue.write(0,_buffer,0,length);
  long blockId=(_position - length) / _cacheBlockSize;
  cacheValue=cacheValue.trim(length);
  _cache.put(new CacheKey(_fileId,blockId),cacheValue);
  cacheValue.decRef();
  _bufferPosition=0;
}",0.9508547008547008
82404,"public void returnToPool(CacheValue cacheValue){
  BlockingQueue<CacheValue> blockingQueue=getPool(cacheValue.length());
  if (!blockingQueue.offer(cacheValue)) {
    _detroyed.mark();
    cacheValue.release();
  }
}","public void returnToPool(CacheValue cacheValue){
  if (cacheValue == null) {
    return;
  }
  BlockingQueue<CacheValue> blockingQueue=getPool(cacheValue.length());
  if (!blockingQueue.offer(cacheValue)) {
    _detroyed.mark();
    cacheValue.release();
  }
}",0.907563025210084
82405,"private void populateSelector(String table,Selector selector) throws IOException, BlurException {
  Tracer trace=Trace.trace(""String_Node_Str"");
  String rowId=selector.rowId;
  String recordId=selector.recordId;
  String shardName=MutationHelper.getShardName(table,rowId,getNumberOfShards(table),_blurPartitioner);
  Map<String,BlurIndex> indexes=_indexServer.getIndexes(table);
  BlurIndex blurIndex=indexes.get(shardName);
  if (blurIndex == null) {
    throw new BException(""String_Node_Str"" + shardName + ""String_Node_Str"");
  }
  IndexSearcherClosable searcher=blurIndex.getIndexSearcher();
  try {
    BooleanQuery query=new BooleanQuery();
    if (selector.recordOnly) {
      query.add(new TermQuery(new Term(RECORD_ID,recordId)),Occur.MUST);
      query.add(new TermQuery(new Term(ROW_ID,rowId)),Occur.MUST);
    }
 else {
      query.add(new TermQuery(new Term(ROW_ID,rowId)),Occur.MUST);
      query.add(new TermQuery(BlurUtil.PRIME_DOC_TERM),Occur.MUST);
    }
    TopDocs topDocs=searcher.search(query,1);
    if (topDocs.totalHits > 1) {
      if (selector.recordOnly) {
        LOG.warn(""String_Node_Str"" + rowId + ""String_Node_Str""+ recordId+ ""String_Node_Str"");
      }
 else {
        LOG.warn(""String_Node_Str"" + rowId + ""String_Node_Str"");
      }
    }
    if (topDocs.totalHits == 1) {
      selector.setLocationId(shardName + ""String_Node_Str"" + topDocs.scoreDocs[0].doc);
    }
 else {
      selector.setLocationId(NOT_FOUND);
    }
  }
  finally {
    searcher.close();
    trace.done();
  }
}","private void populateSelector(IndexSearcherClosable searcher,String shardName,String table,Selector selector) throws IOException, BlurException {
  Tracer trace=Trace.trace(""String_Node_Str"");
  String rowId=selector.rowId;
  String recordId=selector.recordId;
  try {
    BooleanQuery query=new BooleanQuery();
    if (selector.recordOnly) {
      query.add(new TermQuery(new Term(RECORD_ID,recordId)),Occur.MUST);
      query.add(new TermQuery(new Term(ROW_ID,rowId)),Occur.MUST);
    }
 else {
      query.add(new TermQuery(new Term(ROW_ID,rowId)),Occur.MUST);
      query.add(new TermQuery(BlurUtil.PRIME_DOC_TERM),Occur.MUST);
    }
    TopDocs topDocs=searcher.search(query,1);
    if (topDocs.totalHits > 1) {
      if (selector.recordOnly) {
        LOG.warn(""String_Node_Str"" + rowId + ""String_Node_Str""+ recordId+ ""String_Node_Str"");
      }
 else {
        LOG.warn(""String_Node_Str"" + rowId + ""String_Node_Str"");
      }
    }
    if (topDocs.totalHits == 1) {
      selector.setLocationId(shardName + ""String_Node_Str"" + topDocs.scoreDocs[0].doc);
    }
 else {
      selector.setLocationId(NOT_FOUND);
    }
  }
  finally {
    trace.done();
  }
}",0.8305970149253732
82406,"public Blur022StoredFieldsFormat(int chunkSize,CompressionMode compressionMode){
  _chunkSize=chunkSize;
  _compressionMode=compressionMode;
}","public Blur022StoredFieldsFormat(int chunkSize,CompressionMode compressionMode){
  _chunkSize=chunkSize;
  _compressionMode=compressionMode;
  _cache=new ConcurrentLinkedHashMap.Builder<CachedKey,BytesRef>().weigher(new Weigher<BytesRef>(){
    @Override public int weightOf(    BytesRef value){
      return value.bytes.length;
    }
  }
).maximumWeightedCapacity(capacity).build();
}",0.538899430740038
82407,"@Override public Decompressor newDecompressor(){
  return new CachedDecompressor(_compressionMode.newDecompressor());
}","@Override public Decompressor newDecompressor(){
  return new CachedDecompressor(_compressionMode.newDecompressor(),_si,_cache);
}",0.9558232931726908
82408,"@Override public StoredFieldsReader fieldsReader(Directory directory,SegmentInfo si,FieldInfos fn,IOContext context) throws IOException {
  CompressionMode compressionMode=new CachedCompressionMode(getCompressionMode(si),directory,si);
  return new CompressingStoredFieldsReader(directory,si,SEGMENT_SUFFIX,fn,context,FORMAT_NAME,compressionMode);
}","@Override public StoredFieldsReader fieldsReader(Directory directory,SegmentInfo si,FieldInfos fn,IOContext context) throws IOException {
  CompressionMode compressionMode=new CachedCompressionMode(getCompressionMode(si),si,_cache);
  return new CompressingStoredFieldsReader(directory,si,SEGMENT_SUFFIX,fn,context,FORMAT_NAME,compressionMode);
}",0.9697841726618706
82409,"CachedCompressionMode(CompressionMode compressionMode,Directory directory,SegmentInfo si){
  _compressionMode=compressionMode;
}","CachedCompressionMode(CompressionMode compressionMode,SegmentInfo si,ConcurrentLinkedHashMap<CachedKey,BytesRef> cache){
  _compressionMode=compressionMode;
  _si=si;
  _cache=cache;
}",0.6923076923076923
82410,"public CachedDecompressor(Decompressor decompressor){
  _decompressor=decompressor;
}","public CachedDecompressor(Decompressor decompressor,SegmentInfo si,ConcurrentLinkedHashMap<CachedKey,BytesRef> cache){
  _si=si;
  _decompressor=decompressor;
  _cache=cache;
}",0.6513409961685823
82411,"@Override public void decompress(DataInput in,int originalLength,int offset,int length,BytesRef bytes) throws IOException {
  if (in instanceof IndexInput) {
    IndexInput indexInput=(IndexInput)in;
    String name=indexInput.toString();
    Entry entry=_cache.get();
    long filePointer=indexInput.getFilePointer();
    BytesRef cachedRef=entry._bytesRef;
    if (!name.equals(entry._inputName) || entry._position != filePointer) {
      cachedRef.grow(originalLength);
      _decompressor.decompress(in,originalLength,0,originalLength,cachedRef);
      entry._inputName=name;
      entry._position=filePointer;
    }
    bytes.copyBytes(cachedRef);
    bytes.offset=offset;
    bytes.length=length;
  }
 else {
    _decompressor.decompress(in,originalLength,offset,length,bytes);
  }
}","@Override public void decompress(final DataInput in,final int originalLength,final int offset,final int length,final BytesRef bytes) throws IOException {
  if (in instanceof IndexInput) {
    IndexInput indexInput=(IndexInput)in;
    String name=indexInput.toString();
    long filePointer=indexInput.getFilePointer();
    CachedKey key=new CachedKey(name,filePointer,_si);
    BytesRef cachedRef=_cache.get(key);
    if (cachedRef == null) {
      cachedRef=new BytesRef(originalLength + 7);
      _decompressor.decompress(indexInput,originalLength,0,originalLength,cachedRef);
      _cache.put(key,cachedRef);
      cachedRef.length=originalLength;
      cachedRef.offset=0;
    }
    if (bytes.bytes.length < originalLength + 7) {
      bytes.bytes=new byte[ArrayUtil.oversize(originalLength + 7,1)];
    }
    System.arraycopy(cachedRef.bytes,cachedRef.offset,bytes.bytes,0,length + offset);
    bytes.offset=offset;
    bytes.length=length;
  }
 else {
    _decompressor.decompress(in,originalLength,offset,length,bytes);
  }
}",0.2800658978583196
82412,"private void fill() throws IOException {
  _key.setBlockId(getBlockId());
  _cacheValue=get(_key);
  if (_cacheValue == null) {
    _cacheValue=_cache.newInstance(_directory,_fileName);
    long filePosition=getFilePosition();
    _indexInput.seek(filePosition);
    byte[] buffer=_store.takeBuffer(_bufferSize);
    int len=(int)Math.min(_cacheBlockSize,_fileLength - filePosition);
    int cachePosition=0;
    while (len > 0) {
      int length=Math.min(_bufferSize,len);
      _indexInput.readBytes(buffer,0,length);
      _cacheValue.write(cachePosition,buffer,0,length);
      len-=length;
      cachePosition+=length;
    }
    _store.putBuffer(buffer);
    _cache.put(_key.clone(),_cacheValue);
  }
  _blockPosition=getBlockPosition();
}","private void fill() throws IOException {
  _key.setBlockId(getBlockId());
  _cacheValue=get(_key);
  if (_cacheValue == null) {
    _cacheValue=_cache.newInstance(_directory,_fileName);
    _cacheValue.incRef();
    long filePosition=getFilePosition();
    _indexInput.seek(filePosition);
    byte[] buffer=_store.takeBuffer(_bufferSize);
    int len=(int)Math.min(_cacheBlockSize,_fileLength - filePosition);
    int cachePosition=0;
    while (len > 0) {
      int length=Math.min(_bufferSize,len);
      _indexInput.readBytes(buffer,0,length);
      _cacheValue.write(cachePosition,buffer,0,length);
      len-=length;
      cachePosition+=length;
    }
    _store.putBuffer(buffer);
    _cache.put(_key.clone(),_cacheValue);
  }
 else {
    _cacheValue.incRef();
  }
  _blockPosition=getBlockPosition();
}",0.9588159588159588
82413,"@Override public IndexInput clone(){
  ensureOpen();
  CacheIndexInput clone=(CacheIndexInput)super.clone();
  clone._key=_key.clone();
  clone._indexInput=_indexInput.clone();
  clone._quiet=_cache.shouldBeQuiet(_directory,_fileName);
  return clone;
}","@Override public IndexInput clone(){
  ensureOpen();
  CacheIndexInput clone=(CacheIndexInput)super.clone();
  clone._key=_key.clone();
  clone._indexInput=_indexInput.clone();
  clone._quiet=_cache.shouldBeQuiet(_directory,_fileName);
  if (clone._cacheValue != null) {
    clone._cacheValue.incRef();
  }
  return clone;
}",0.82842287694974
82414,"private void releaseCache(){
  if (_cacheValue != null) {
    _cacheValue=null;
  }
}","private void releaseCache(){
  if (_cacheValue != null) {
    _cacheValue.decRef();
    _cacheValue=null;
  }
}",0.8673469387755102
82415,"private void flushInternal() throws IOException {
  int length=_cacheBlockSize - remaining();
  if (length == 0) {
    return;
  }
  CacheValue cacheValue=_cache.newInstance(_directory,_fileName);
  writeBufferToOutputStream(length);
  cacheValue.write(0,_buffer,0,length);
  long blockId=(_position - length) / _cacheBlockSize;
  cacheValue=cacheValue.trim(length);
  _cache.put(new CacheKey(_fileId,blockId),cacheValue);
  _bufferPosition=0;
}","private void flushInternal() throws IOException {
  int length=_cacheBlockSize - remaining();
  if (length == 0) {
    return;
  }
  CacheValue cacheValue=_cache.newInstance(_directory,_fileName);
  cacheValue.incRef();
  writeBufferToOutputStream(length);
  cacheValue.write(0,_buffer,0,length);
  long blockId=(_position - length) / _cacheBlockSize;
  cacheValue=cacheValue.trim(length);
  _cache.put(new CacheKey(_fileId,blockId),cacheValue);
  cacheValue.decRef();
  _bufferPosition=0;
}",0.9508547008547008
82416,"public void returnToPool(CacheValue cacheValue){
  BlockingQueue<CacheValue> blockingQueue=getPool(cacheValue.length());
  if (!blockingQueue.offer(cacheValue)) {
    _detroyed.mark();
    cacheValue.release();
  }
}","public void returnToPool(CacheValue cacheValue){
  if (cacheValue == null) {
    return;
  }
  BlockingQueue<CacheValue> blockingQueue=getPool(cacheValue.length());
  if (!blockingQueue.offer(cacheValue)) {
    _detroyed.mark();
    cacheValue.release();
  }
}",0.907563025210084
82417,"@Override public boolean isInSafeMode(boolean useCache,String cluster){
  if (useCache) {
    SafeModeCacheEntry safeModeCacheEntry=_clusterToSafeMode.get(cluster);
    if (safeModeCacheEntry != null && safeModeCacheEntry.isValid()) {
      return safeModeCacheEntry._safeMode;
    }
  }
  long s=System.nanoTime();
  try {
    checkIfOpen();
    String safemodePath=ZookeeperPathConstants.getSafemodePath(cluster);
    ZooKeeperLockManager zooKeeperLockManager=new ZooKeeperLockManager(_zk,safemodePath);
    if (zooKeeperLockManager.getNumberOfLockNodesPresent(cluster) == 0) {
      _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(false));
      return false;
    }
    return true;
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public boolean isInSafeMode(boolean useCache,String cluster){
  if (useCache) {
    SafeModeCacheEntry safeModeCacheEntry=_clusterToSafeMode.get(cluster);
    if (safeModeCacheEntry != null && safeModeCacheEntry.isValid()) {
      return safeModeCacheEntry._safeMode;
    }
  }
  long s=System.nanoTime();
  try {
    checkIfOpen();
    String safemodePath=ZookeeperPathConstants.getSafemodePath(cluster);
    ZooKeeperLockManager zooKeeperLockManager=new ZooKeeperLockManager(_zk,safemodePath);
    if (zooKeeperLockManager.getNumberOfLockNodesPresent(cluster) == 0) {
      _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(false));
      return false;
    }
    _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(true));
    return true;
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}",0.9668341708542714
82418,"@Override public boolean isInSafeMode(boolean useCache,String cluster){
  if (useCache) {
    SafeModeCacheEntry safeModeCacheEntry=_clusterToSafeMode.get(cluster);
    if (safeModeCacheEntry != null && safeModeCacheEntry.isValid()) {
      return safeModeCacheEntry._safeMode;
    }
  }
  long s=System.nanoTime();
  try {
    checkIfOpen();
    String safemodePath=ZookeeperPathConstants.getSafemodePath(cluster);
    ZooKeeperLockManager zooKeeperLockManager=new ZooKeeperLockManager(_zk,safemodePath);
    if (zooKeeperLockManager.getNumberOfLockNodesPresent(cluster) == 0) {
      _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(false));
      return false;
    }
    return true;
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public boolean isInSafeMode(boolean useCache,String cluster){
  if (useCache) {
    SafeModeCacheEntry safeModeCacheEntry=_clusterToSafeMode.get(cluster);
    if (safeModeCacheEntry != null && safeModeCacheEntry.isValid()) {
      return safeModeCacheEntry._safeMode;
    }
  }
  long s=System.nanoTime();
  try {
    checkIfOpen();
    String safemodePath=ZookeeperPathConstants.getSafemodePath(cluster);
    ZooKeeperLockManager zooKeeperLockManager=new ZooKeeperLockManager(_zk,safemodePath);
    if (zooKeeperLockManager.getNumberOfLockNodesPresent(cluster) == 0) {
      _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(false));
      return false;
    }
    _clusterToSafeMode.put(cluster,new SafeModeCacheEntry(true));
    return true;
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}",0.9668341708542714
82419,"@Override public float score() throws IOException {
switch (scoreType) {
case AGGREGATE:
    return aggregateScore;
case BEST:
  return bestScore;
case CONSTANT:
return 1;
case SUPER:
double log=Math.log10(aggregateScore) + 1.0;
double avg=aggregateScore / hitsInEntity;
double pow=Math.pow(avg,SUPER_POWER_CONSTANT);
return (float)Math.pow(log + pow,1.0 / SUPER_POWER_CONSTANT);
}
throw new RuntimeException(""String_Node_Str"" + scoreType + ""String_Node_Str"");
}","@Override public float score() throws IOException {
switch (scoreType) {
case AGGREGATE:
    return aggregateScore;
case BEST:
  return bestScore;
case CONSTANT:
return 1;
case SUPER:
if (aggregateScore < 1.0) {
return aggregateScore;
}
double log=Math.log10(aggregateScore) + 1.0;
double avg=aggregateScore / hitsInEntity;
double pow=Math.pow(avg,SUPER_POWER_CONSTANT);
return (float)Math.pow(log + pow,1.0 / SUPER_POWER_CONSTANT);
}
throw new RuntimeException(""String_Node_Str"" + scoreType + ""String_Node_Str"");
}",0.9457523029682702
82420,"@Override public float score() throws IOException {
switch (scoreType) {
case AGGREGATE:
    return aggregateScore;
case BEST:
  return bestScore;
case CONSTANT:
return 1;
case SUPER:
double log=Math.log10(aggregateScore) + 1.0;
double avg=aggregateScore / hitsInEntity;
double pow=Math.pow(avg,SUPER_POWER_CONSTANT);
return (float)Math.pow(log + pow,1.0 / SUPER_POWER_CONSTANT);
}
throw new RuntimeException(""String_Node_Str"" + scoreType + ""String_Node_Str"");
}","@Override public float score() throws IOException {
switch (scoreType) {
case AGGREGATE:
    return aggregateScore;
case BEST:
  return bestScore;
case CONSTANT:
return 1;
case SUPER:
if (aggregateScore < 1.0) {
return aggregateScore;
}
double log=Math.log10(aggregateScore) + 1.0;
double avg=aggregateScore / hitsInEntity;
double pow=Math.pow(avg,SUPER_POWER_CONSTANT);
return (float)Math.pow(log + pow,1.0 / SUPER_POWER_CONSTANT);
}
throw new RuntimeException(""String_Node_Str"" + scoreType + ""String_Node_Str"");
}",0.9457523029682702
82421,"public static TableContext create(TableDescriptor tableDescriptor){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String tableUri=tableDescriptor.getTableUri();
  if (tableUri == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=cache.get(name);
  if (tableContext != null) {
    return tableContext;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=getSystemConfiguration();
  BlurConfiguration blurConfiguration=getSystemBlurConfiguration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
      blurConfiguration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext.configuration=configuration;
  tableContext.blurConfiguration=blurConfiguration;
  tableContext.tablePath=new Path(tableUri);
  tableContext.walTablePath=new Path(tableContext.tablePath,LOGS);
  tableContext.defaultFieldName=SUPER;
  tableContext.table=name;
  tableContext.descriptor=tableDescriptor;
  tableContext.timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext.timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext.defaultPrimeDocTerm=new Term(""String_Node_Str"",""String_Node_Str"");
  tableContext.defaultScoreType=ScoreType.SUPER;
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext.tablePath,TYPES);
  try {
    HdfsFieldManager hdfsFieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
    loadCustomTypes(tableContext,blurConfiguration,hdfsFieldManager);
    hdfsFieldManager.load();
    tableContext.fieldManager=hdfsFieldManager;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext.indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SHARD_INDEX_SIMILARITY,DefaultSimilarity.class);
  tableContext.similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  cache.put(name,tableContext);
  return tableContext;
}","public static TableContext create(TableDescriptor tableDescriptor){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String tableUri=tableDescriptor.getTableUri();
  if (tableUri == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=cache.get(name);
  if (tableContext != null) {
    return tableContext;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=getSystemConfiguration();
  BlurConfiguration blurConfiguration=getSystemBlurConfiguration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
      blurConfiguration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext.configuration=configuration;
  tableContext.blurConfiguration=blurConfiguration;
  tableContext.tablePath=new Path(tableUri);
  tableContext.walTablePath=new Path(tableContext.tablePath,LOGS);
  tableContext.defaultFieldName=SUPER;
  tableContext.table=name;
  tableContext.descriptor=tableDescriptor;
  tableContext.timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext.timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext.defaultPrimeDocTerm=new Term(""String_Node_Str"",""String_Node_Str"");
  tableContext.defaultScoreType=ScoreType.SUPER;
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext.tablePath,TYPES);
  try {
    HdfsFieldManager hdfsFieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
    loadCustomTypes(tableContext,blurConfiguration,hdfsFieldManager);
    hdfsFieldManager.loadFromStorage();
    tableContext.fieldManager=hdfsFieldManager;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext.indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SHARD_INDEX_SIMILARITY,DefaultSimilarity.class);
  tableContext.similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  cache.put(name,tableContext);
  return tableContext;
}",0.99816391253547
82422,"@Override public Schema schema(String table) throws BlurException, TException {
  checkTable(_cluster,table);
  resetSearchers();
  try {
    return _indexManager.schema(table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,""String_Node_Str"",table);
    throw new BException(e.getMessage(),e);
  }
}","@Override public Schema schema(String table) throws BlurException, TException {
  resetSearchers();
  return super.schema(table);
}",0.5727069351230425
82423,"@Test public void runClusterIntegrationTests() throws BlurException, TException, IOException, InterruptedException, KeeperException {
  testCreateTable();
  testLoadTable();
  testQueryWithSelector();
  testBatchFetch();
  testQueryCancel();
  testBackPressureViaQuery();
  testTestShardFailover();
  testTermsList();
  testCreateDisableAndRemoveTable();
  testCreateTableWithCustomType();
}","@Test public void runClusterIntegrationTests() throws BlurException, TException, IOException, InterruptedException, KeeperException {
  testCreateTable();
  testLoadTable();
  testForEmptySchema();
  testQueryWithSelector();
  testBatchFetch();
  testQueryCancel();
  testBackPressureViaQuery();
  testTestShardFailover();
  testTermsList();
  testCreateDisableAndRemoveTable();
  testCreateTableWithCustomType();
}",0.9702233250620348
82424,"public static TableContext create(TableDescriptor tableDescriptor){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String tableUri=tableDescriptor.getTableUri();
  if (tableUri == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=cache.get(name);
  if (tableContext != null) {
    return tableContext;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=getSystemConfiguration();
  BlurConfiguration blurConfiguration=getSystemBlurConfiguration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
      blurConfiguration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext.configuration=configuration;
  tableContext.blurConfiguration=blurConfiguration;
  tableContext.tablePath=new Path(tableUri);
  tableContext.walTablePath=new Path(tableContext.tablePath,LOGS);
  tableContext.defaultFieldName=SUPER;
  tableContext.table=name;
  tableContext.descriptor=tableDescriptor;
  tableContext.timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext.timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext.defaultPrimeDocTerm=new Term(""String_Node_Str"",""String_Node_Str"");
  tableContext.defaultScoreType=ScoreType.SUPER;
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext.tablePath,TYPES);
  try {
    HdfsFieldManager hdfsFieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
    loadCustomTypes(tableContext,blurConfiguration,hdfsFieldManager);
    hdfsFieldManager.load();
    tableContext.fieldManager=hdfsFieldManager;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext.indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SHARD_INDEX_SIMILARITY,DefaultSimilarity.class);
  tableContext.similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  cache.put(name,tableContext);
  return tableContext;
}","public static TableContext create(TableDescriptor tableDescriptor){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String tableUri=tableDescriptor.getTableUri();
  if (tableUri == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=cache.get(name);
  if (tableContext != null) {
    return tableContext;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=getSystemConfiguration();
  BlurConfiguration blurConfiguration=getSystemBlurConfiguration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
      blurConfiguration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext.configuration=configuration;
  tableContext.blurConfiguration=blurConfiguration;
  tableContext.tablePath=new Path(tableUri);
  tableContext.walTablePath=new Path(tableContext.tablePath,LOGS);
  tableContext.defaultFieldName=SUPER;
  tableContext.table=name;
  tableContext.descriptor=tableDescriptor;
  tableContext.timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext.timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext.defaultPrimeDocTerm=new Term(""String_Node_Str"",""String_Node_Str"");
  tableContext.defaultScoreType=ScoreType.SUPER;
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext.tablePath,TYPES);
  try {
    HdfsFieldManager hdfsFieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
    loadCustomTypes(tableContext,blurConfiguration,hdfsFieldManager);
    hdfsFieldManager.loadFromStorage();
    tableContext.fieldManager=hdfsFieldManager;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext.indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SHARD_INDEX_SIMILARITY,DefaultSimilarity.class);
  tableContext.similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  cache.put(name,tableContext);
  return tableContext;
}",0.99816391253547
82425,"@Override public Schema schema(String table) throws BlurException, TException {
  checkTable(_cluster,table);
  resetSearchers();
  try {
    return _indexManager.schema(table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,""String_Node_Str"",table);
    throw new BException(e.getMessage(),e);
  }
}","@Override public Schema schema(String table) throws BlurException, TException {
  resetSearchers();
  return super.schema(table);
}",0.5727069351230425
82426,"@Test public void runClusterIntegrationTests() throws BlurException, TException, IOException, InterruptedException, KeeperException {
  testCreateTable();
  testLoadTable();
  testQueryWithSelector();
  testBatchFetch();
  testQueryCancel();
  testBackPressureViaQuery();
  testTestShardFailover();
  testTermsList();
  testCreateDisableAndRemoveTable();
  testCreateTableWithCustomType();
}","@Test public void runClusterIntegrationTests() throws BlurException, TException, IOException, InterruptedException, KeeperException {
  testCreateTable();
  testLoadTable();
  testForEmptySchema();
  testQueryWithSelector();
  testBatchFetch();
  testQueryCancel();
  testBackPressureViaQuery();
  testTestShardFailover();
  testTermsList();
  testCreateDisableAndRemoveTable();
  testCreateTableWithCustomType();
}",0.9702233250620348
82427,"public BlurResults convertToBlurResults(BlurResultIterable hitsIterable,BlurQuery query,AtomicLongArray facetCounts,ExecutorService executor,Selector selector,final String table) throws InterruptedException, ExecutionException, BlurException {
  BlurResults results=new BlurResults();
  results.setTotalResults(hitsIterable.getTotalResults());
  results.setShardInfo(hitsIterable.getShardInfo());
  if (query.minimumNumberOfResults > 0) {
    hitsIterable.skipTo(query.start);
    int count=0;
    BlurIterator<BlurResult,BlurException> iterator=hitsIterable.iterator();
    while (iterator.hasNext() && count < query.fetch) {
      results.addToResults(iterator.next());
      count++;
    }
  }
  if (results.results == null) {
    results.results=new ArrayList<BlurResult>();
  }
  if (facetCounts != null) {
    results.facetCounts=BlurUtil.toList(facetCounts);
  }
  if (selector != null) {
    Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",table));
    IdentityHashMap<Client,List<Selector>> map=new IdentityHashMap<Client,List<Selector>>();
    final IdentityHashMap<Selector,Integer> indexMap=new IdentityHashMap<Selector,Integer>();
    for (int i=0; i < results.results.size(); i++) {
      final LazyBlurResult result=(LazyBlurResult)results.results.get(i);
      Client client=result.getClient();
      Selector s=new Selector(selector);
      s.setLocationId(result.locationId);
      List<Selector> list=map.get(client);
      if (list == null) {
        list=new ArrayList<Selector>();
        map.put(client,list);
      }
      list.add(s);
      indexMap.put(s,i);
    }
    List<Future<Boolean>> futures=new ArrayList<Future<Boolean>>();
    final AtomicReferenceArray<FetchResult> fetchResults=new AtomicReferenceArray<FetchResult>(results.results.size());
    for (    Entry<Client,List<Selector>> entry : map.entrySet()) {
      final Client client=entry.getKey();
      final List<Selector> list=entry.getValue();
      futures.add(executor.submit(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          String traceId=Trace.getTraceId();
          if (traceId != null) {
            client.startTrace(traceId);
          }
          List<FetchResult> fetchRowBatch=client.fetchRowBatch(table,list);
          for (int i=0; i < list.size(); i++) {
            int index=indexMap.get(list.get(i));
            fetchResults.set(index,fetchRowBatch.get(i));
          }
          return Boolean.TRUE;
        }
      }
));
    }
    for (    Future<Boolean> future : futures) {
      future.get();
    }
    for (int i=0; i < fetchResults.length(); i++) {
      FetchResult fetchResult=fetchResults.get(i);
      BlurResult result=results.results.get(i);
      result.setFetchResult(fetchResult);
      result.setLocationId(null);
    }
    trace.done();
  }
  results.query=query;
  results.query.selector=selector;
  return results;
}","public BlurResults convertToBlurResults(BlurResultIterable hitsIterable,BlurQuery query,AtomicLongArray facetCounts,ExecutorService executor,Selector selector,final String table) throws InterruptedException, ExecutionException, BlurException {
  BlurResults results=new BlurResults();
  results.setTotalResults(hitsIterable.getTotalResults());
  results.setShardInfo(hitsIterable.getShardInfo());
  if (query.minimumNumberOfResults > 0) {
    hitsIterable.skipTo(query.start);
    int count=0;
    BlurIterator<BlurResult,BlurException> iterator=hitsIterable.iterator();
    while (iterator.hasNext() && count < query.fetch) {
      results.addToResults(iterator.next());
      count++;
    }
  }
  if (results.results == null) {
    results.results=new ArrayList<BlurResult>();
  }
  if (facetCounts != null) {
    results.facetCounts=BlurUtil.toList(facetCounts);
  }
  if (selector != null) {
    Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",table));
    IdentityHashMap<Client,List<Selector>> map=new IdentityHashMap<Client,List<Selector>>();
    final IdentityHashMap<Selector,Integer> indexMap=new IdentityHashMap<Selector,Integer>();
    for (int i=0; i < results.results.size(); i++) {
      final LazyBlurResult result=(LazyBlurResult)results.results.get(i);
      Client client=result.getClient();
      Selector s=new Selector(selector);
      s.setLocationId(result.locationId);
      List<Selector> list=map.get(client);
      if (list == null) {
        list=new ArrayList<Selector>();
        map.put(client,list);
      }
      list.add(s);
      indexMap.put(s,i);
    }
    List<Future<Boolean>> futures=new ArrayList<Future<Boolean>>();
    final AtomicReferenceArray<FetchResult> fetchResults=new AtomicReferenceArray<FetchResult>(results.results.size());
    for (    Entry<Client,List<Selector>> entry : map.entrySet()) {
      final Client client=entry.getKey();
      final List<Selector> list=entry.getValue();
      futures.add(executor.submit(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",getNode(client)));
          try {
            String traceId=Trace.getTraceId();
            if (traceId != null) {
              client.startTrace(traceId);
            }
            List<FetchResult> fetchRowBatch=client.fetchRowBatch(table,list);
            for (int i=0; i < list.size(); i++) {
              int index=indexMap.get(list.get(i));
              fetchResults.set(index,fetchRowBatch.get(i));
            }
            return Boolean.TRUE;
          }
  finally {
            trace.done();
          }
        }
        private String getNode(        Client client){
          TProtocol inputProtocol=client.getInputProtocol();
          TTransport transport=inputProtocol.getTransport();
          if (transport instanceof TFramedTransport) {
            TFramedTransport framedTransport=(TFramedTransport)transport;
            transport=framedTransport.getTransport();
          }
          if (transport instanceof TSocket) {
            TSocket tsocket=(TSocket)transport;
            Socket socket=tsocket.getSocket();
            SocketAddress remoteSocketAddress=socket.getRemoteSocketAddress();
            return remoteSocketAddress.toString();
          }
          return ""String_Node_Str"";
        }
      }
));
    }
    for (    Future<Boolean> future : futures) {
      future.get();
    }
    for (int i=0; i < fetchResults.length(); i++) {
      FetchResult fetchResult=fetchResults.get(i);
      BlurResult result=results.results.get(i);
      result.setFetchResult(fetchResult);
      result.setLocationId(null);
    }
    trace.done();
  }
  results.query=query;
  results.query.selector=selector;
  return results;
}",0.8663799495773394
82428,"public BlurResults convertToBlurResults(BlurResultIterable hitsIterable,BlurQuery query,AtomicLongArray facetCounts,ExecutorService executor,Selector selector,final String table) throws InterruptedException, ExecutionException, BlurException {
  BlurResults results=new BlurResults();
  results.setTotalResults(hitsIterable.getTotalResults());
  results.setShardInfo(hitsIterable.getShardInfo());
  if (query.minimumNumberOfResults > 0) {
    hitsIterable.skipTo(query.start);
    int count=0;
    BlurIterator<BlurResult,BlurException> iterator=hitsIterable.iterator();
    while (iterator.hasNext() && count < query.fetch) {
      results.addToResults(iterator.next());
      count++;
    }
  }
  if (results.results == null) {
    results.results=new ArrayList<BlurResult>();
  }
  if (facetCounts != null) {
    results.facetCounts=BlurUtil.toList(facetCounts);
  }
  if (selector != null) {
    Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",table));
    IdentityHashMap<Client,List<Selector>> map=new IdentityHashMap<Client,List<Selector>>();
    final IdentityHashMap<Selector,Integer> indexMap=new IdentityHashMap<Selector,Integer>();
    for (int i=0; i < results.results.size(); i++) {
      final LazyBlurResult result=(LazyBlurResult)results.results.get(i);
      Client client=result.getClient();
      Selector s=new Selector(selector);
      s.setLocationId(result.locationId);
      List<Selector> list=map.get(client);
      if (list == null) {
        list=new ArrayList<Selector>();
        map.put(client,list);
      }
      list.add(s);
      indexMap.put(s,i);
    }
    List<Future<Boolean>> futures=new ArrayList<Future<Boolean>>();
    final AtomicReferenceArray<FetchResult> fetchResults=new AtomicReferenceArray<FetchResult>(results.results.size());
    for (    Entry<Client,List<Selector>> entry : map.entrySet()) {
      final Client client=entry.getKey();
      final List<Selector> list=entry.getValue();
      futures.add(executor.submit(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          String traceId=Trace.getTraceId();
          if (traceId != null) {
            client.startTrace(traceId);
          }
          List<FetchResult> fetchRowBatch=client.fetchRowBatch(table,list);
          for (int i=0; i < list.size(); i++) {
            int index=indexMap.get(list.get(i));
            fetchResults.set(index,fetchRowBatch.get(i));
          }
          return Boolean.TRUE;
        }
      }
));
    }
    for (    Future<Boolean> future : futures) {
      future.get();
    }
    for (int i=0; i < fetchResults.length(); i++) {
      FetchResult fetchResult=fetchResults.get(i);
      BlurResult result=results.results.get(i);
      result.setFetchResult(fetchResult);
      result.setLocationId(null);
    }
    trace.done();
  }
  results.query=query;
  results.query.selector=selector;
  return results;
}","public BlurResults convertToBlurResults(BlurResultIterable hitsIterable,BlurQuery query,AtomicLongArray facetCounts,ExecutorService executor,Selector selector,final String table) throws InterruptedException, ExecutionException, BlurException {
  BlurResults results=new BlurResults();
  results.setTotalResults(hitsIterable.getTotalResults());
  results.setShardInfo(hitsIterable.getShardInfo());
  if (query.minimumNumberOfResults > 0) {
    hitsIterable.skipTo(query.start);
    int count=0;
    BlurIterator<BlurResult,BlurException> iterator=hitsIterable.iterator();
    while (iterator.hasNext() && count < query.fetch) {
      results.addToResults(iterator.next());
      count++;
    }
  }
  if (results.results == null) {
    results.results=new ArrayList<BlurResult>();
  }
  if (facetCounts != null) {
    results.facetCounts=BlurUtil.toList(facetCounts);
  }
  if (selector != null) {
    Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",table));
    IdentityHashMap<Client,List<Selector>> map=new IdentityHashMap<Client,List<Selector>>();
    final IdentityHashMap<Selector,Integer> indexMap=new IdentityHashMap<Selector,Integer>();
    for (int i=0; i < results.results.size(); i++) {
      final LazyBlurResult result=(LazyBlurResult)results.results.get(i);
      Client client=result.getClient();
      Selector s=new Selector(selector);
      s.setLocationId(result.locationId);
      List<Selector> list=map.get(client);
      if (list == null) {
        list=new ArrayList<Selector>();
        map.put(client,list);
      }
      list.add(s);
      indexMap.put(s,i);
    }
    List<Future<Boolean>> futures=new ArrayList<Future<Boolean>>();
    final AtomicReferenceArray<FetchResult> fetchResults=new AtomicReferenceArray<FetchResult>(results.results.size());
    for (    Entry<Client,List<Selector>> entry : map.entrySet()) {
      final Client client=entry.getKey();
      final List<Selector> list=entry.getValue();
      futures.add(executor.submit(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          Tracer trace=Trace.trace(""String_Node_Str"",Trace.param(""String_Node_Str"",getNode(client)));
          try {
            String traceId=Trace.getTraceId();
            if (traceId != null) {
              client.startTrace(traceId);
            }
            List<FetchResult> fetchRowBatch=client.fetchRowBatch(table,list);
            for (int i=0; i < list.size(); i++) {
              int index=indexMap.get(list.get(i));
              fetchResults.set(index,fetchRowBatch.get(i));
            }
            return Boolean.TRUE;
          }
  finally {
            trace.done();
          }
        }
        private String getNode(        Client client){
          TProtocol inputProtocol=client.getInputProtocol();
          TTransport transport=inputProtocol.getTransport();
          if (transport instanceof TFramedTransport) {
            TFramedTransport framedTransport=(TFramedTransport)transport;
            transport=framedTransport.getTransport();
          }
          if (transport instanceof TSocket) {
            TSocket tsocket=(TSocket)transport;
            Socket socket=tsocket.getSocket();
            SocketAddress remoteSocketAddress=socket.getRemoteSocketAddress();
            return remoteSocketAddress.toString();
          }
          return ""String_Node_Str"";
        }
      }
));
    }
    for (    Future<Boolean> future : futures) {
      future.get();
    }
    for (int i=0; i < fetchResults.length(); i++) {
      FetchResult fetchResult=fetchResults.get(i);
      BlurResult result=results.results.get(i);
      result.setFetchResult(fetchResult);
      result.setLocationId(null);
    }
    trace.done();
  }
  results.query=query;
  results.query.selector=selector;
  return results;
}",0.8663799495773394
82429,"protected void cleanupOldFiles(){
  LOG.debug(""String_Node_Str"");
  Set<Long> validFileIds=new HashSet<Long>(_fileNameToId.values());
  for (  CacheKey key : _cacheMap.keySet()) {
    long fileId=key.getFileId();
    if (validFileIds.contains(fileId)) {
      CacheValue remove=_cacheMap.remove(key);
      if (remove != null) {
        _removals.mark();
        addToReleaseQueue(key,remove);
      }
    }
  }
}","protected void cleanupOldFiles(){
  LOG.debug(""String_Node_Str"");
  Set<Long> validFileIds=new HashSet<Long>(_fileNameToId.values());
  for (  CacheKey key : _cacheMap.keySet()) {
    long fileId=key.getFileId();
    if (!validFileIds.contains(fileId)) {
      CacheValue remove=_cacheMap.remove(key);
      if (remove != null) {
        _removals.mark();
        addToReleaseQueue(key,remove);
      }
    }
  }
}",0.9987908101571948
82430,"protected void cleanupOldFiles(){
  LOG.debug(""String_Node_Str"");
  Set<Long> validFileIds=new HashSet<Long>(_fileNameToId.values());
  for (  CacheKey key : _cacheMap.keySet()) {
    long fileId=key.getFileId();
    if (validFileIds.contains(fileId)) {
      CacheValue remove=_cacheMap.remove(key);
      if (remove != null) {
        _removals.mark();
        addToReleaseQueue(key,remove);
      }
    }
  }
}","protected void cleanupOldFiles(){
  LOG.debug(""String_Node_Str"");
  Set<Long> validFileIds=new HashSet<Long>(_fileNameToId.values());
  for (  CacheKey key : _cacheMap.keySet()) {
    long fileId=key.getFileId();
    if (!validFileIds.contains(fileId)) {
      CacheValue remove=_cacheMap.remove(key);
      if (remove != null) {
        _removals.mark();
        addToReleaseQueue(key,remove);
      }
    }
  }
}",0.9987908101571948
82431,"@Override public void createTable(TableDescriptor tableDescriptor){
  long s=System.nanoTime();
  try {
    checkIfOpen();
    if (tableDescriptor.getSimilarityClass() == null) {
      tableDescriptor.setSimilarityClass(FairSimilarity.class.getName());
    }
    String table=BlurUtil.nullCheck(tableDescriptor.name,""String_Node_Str"");
    String cluster=BlurUtil.nullCheck(tableDescriptor.cluster,""String_Node_Str"");
    assignTableUri(tableDescriptor);
    String uri=BlurUtil.nullCheck(tableDescriptor.tableUri,""String_Node_Str"");
    int shardCount=BlurUtil.zeroCheck(tableDescriptor.shardCount,""String_Node_Str"");
    Similarity similarity=BlurUtil.getInstance(tableDescriptor.similarityClass,Similarity.class);
    boolean blockCaching=tableDescriptor.blockCaching;
    Set<String> blockCachingFileTypes=tableDescriptor.blockCachingFileTypes;
    String blurTablePath=ZookeeperPathConstants.getTablePath(cluster,table);
    if (_zk.exists(blurTablePath,false) != null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    BlurUtil.setupFileSystem(uri,shardCount);
    BlurUtil.createPath(_zk,blurTablePath,null);
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableColumnsToPreCache(cluster,table),toBytes(tableDescriptor.preCacheCols));
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableUriPath(cluster,table),uri.getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableShardCountPath(cluster,table),Integer.toString(shardCount).getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableSimilarityPath(cluster,table),similarity.getClass().getName().getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getLockPath(cluster,table),null);
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableFieldNamesPath(cluster,table),null);
    if (tableDescriptor.readOnly) {
      BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableReadOnlyPath(cluster,table),null);
    }
    if (blockCaching) {
      BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableBlockCachingPath(cluster,table),null);
    }
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableBlockCachingFileTypesPath(cluster,table),toBytes(blockCachingFileTypes));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public void createTable(TableDescriptor tableDescriptor){
  long s=System.nanoTime();
  try {
    checkIfOpen();
    if (tableDescriptor.getSimilarityClass() == null) {
      tableDescriptor.setSimilarityClass(FairSimilarity.class.getName());
    }
    String table=BlurUtil.nullCheck(tableDescriptor.name,""String_Node_Str"");
    String cluster=BlurUtil.nullCheck(tableDescriptor.cluster,""String_Node_Str"");
    assignTableUri(tableDescriptor);
    String uri=BlurUtil.nullCheck(tableDescriptor.tableUri,""String_Node_Str"");
    int shardCount=BlurUtil.zeroCheck(tableDescriptor.shardCount,""String_Node_Str"");
    Similarity similarity=BlurUtil.getInstance(tableDescriptor.similarityClass,Similarity.class);
    boolean blockCaching=tableDescriptor.blockCaching;
    Set<String> blockCachingFileTypes=tableDescriptor.blockCachingFileTypes;
    String blurTablePath=ZookeeperPathConstants.getTablePath(cluster,table);
    if (_zk.exists(blurTablePath,false) != null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    BlurUtil.setupFileSystem(uri,shardCount);
    BlurUtil.createPath(_zk,blurTablePath,null);
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableColumnsToPreCache(cluster,table),toBytes(tableDescriptor.preCacheCols));
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableUriPath(cluster,table),uri.getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableShardCountPath(cluster,table),Integer.toString(shardCount).getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableSimilarityPath(cluster,table),similarity.getClass().getName().getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getLockPath(cluster,table),null);
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableFieldNamesPath(cluster,table),null);
    if (tableDescriptor.readOnly) {
      BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableReadOnlyPath(cluster,table),null);
    }
    if (blockCaching) {
      BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableBlockCachingPath(cluster,table),null);
    }
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableBlockCachingFileTypesPath(cluster,table),toBytes(blockCachingFileTypes));
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTablePropertiesPath(cluster,table),toBytes(tableDescriptor.getTableProperties()));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}",0.9740087269967748
82432,"@Override public TableDescriptor getTableDescriptor(boolean useCache,String cluster,String table){
  if (useCache) {
    TableDescriptor tableDescriptor=_tableDescriptorCache.get(table);
    updateEnabled(useCache,tableDescriptor,cluster,table);
    if (tableDescriptor != null) {
      return tableDescriptor;
    }
  }
  long s=System.nanoTime();
  TableDescriptor tableDescriptor=new TableDescriptor();
  try {
    checkIfOpen();
    NullPointerException npe=null;
    LOOP:     for (int i=0; i < 10; i++) {
      npe=null;
      try {
        tableDescriptor.shardCount=Integer.parseInt(new String(getData(ZookeeperPathConstants.getTableShardCountPath(cluster,table))));
        tableDescriptor.tableUri=new String(getData(ZookeeperPathConstants.getTableUriPath(cluster,table)));
        tableDescriptor.blockCaching=isBlockCacheEnabled(cluster,table);
        tableDescriptor.blockCachingFileTypes=getBlockCacheFileTypes(cluster,table);
        tableDescriptor.name=table;
        tableDescriptor.readOnly=internalGetReadOnly(ZookeeperPathConstants.getTableReadOnlyPath(cluster,table));
        tableDescriptor.preCacheCols=toList(getData(ZookeeperPathConstants.getTableColumnsToPreCache(cluster,table)));
        byte[] data=getData(ZookeeperPathConstants.getTableSimilarityPath(cluster,table));
        if (data != null) {
          tableDescriptor.similarityClass=new String(data);
        }
        updateEnabled(useCache,tableDescriptor,cluster,table);
        break LOOP;
      }
 catch (      NullPointerException e) {
        npe=e;
        LOG.warn(""String_Node_Str"");
        Thread.sleep(TimeUnit.SECONDS.toMillis(3));
      }
    }
    if (npe != null) {
      throw npe;
    }
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
  tableDescriptor.cluster=cluster;
  _tableDescriptorCache.put(table,tableDescriptor);
  return tableDescriptor;
}","@Override public TableDescriptor getTableDescriptor(boolean useCache,String cluster,String table){
  if (useCache) {
    TableDescriptor tableDescriptor=_tableDescriptorCache.get(table);
    updateEnabled(useCache,tableDescriptor,cluster,table);
    if (tableDescriptor != null) {
      return tableDescriptor;
    }
  }
  long s=System.nanoTime();
  TableDescriptor tableDescriptor=new TableDescriptor();
  try {
    checkIfOpen();
    NullPointerException npe=null;
    LOOP:     for (int i=0; i < 10; i++) {
      npe=null;
      try {
        tableDescriptor.shardCount=Integer.parseInt(new String(getData(ZookeeperPathConstants.getTableShardCountPath(cluster,table))));
        tableDescriptor.tableUri=new String(getData(ZookeeperPathConstants.getTableUriPath(cluster,table)));
        tableDescriptor.blockCaching=isBlockCacheEnabled(cluster,table);
        tableDescriptor.blockCachingFileTypes=getBlockCacheFileTypes(cluster,table);
        tableDescriptor.name=table;
        tableDescriptor.readOnly=internalGetReadOnly(ZookeeperPathConstants.getTableReadOnlyPath(cluster,table));
        tableDescriptor.preCacheCols=toList(getData(ZookeeperPathConstants.getTableColumnsToPreCache(cluster,table)));
        tableDescriptor.tableProperties=toMap(getData(ZookeeperPathConstants.getTablePropertiesPath(cluster,table)));
        byte[] data=getData(ZookeeperPathConstants.getTableSimilarityPath(cluster,table));
        if (data != null) {
          tableDescriptor.similarityClass=new String(data);
        }
        updateEnabled(useCache,tableDescriptor,cluster,table);
        break LOOP;
      }
 catch (      NullPointerException e) {
        npe=e;
        LOG.warn(""String_Node_Str"");
        Thread.sleep(TimeUnit.SECONDS.toMillis(3));
      }
    }
    if (npe != null) {
      throw npe;
    }
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
  tableDescriptor.cluster=cluster;
  _tableDescriptorCache.put(table,tableDescriptor);
  return tableDescriptor;
}",0.972391202620496
82433,"private static byte[] toBytes(Set<String> blockCachingFileTypes){
  if (blockCachingFileTypes == null || blockCachingFileTypes.isEmpty()) {
    return null;
  }
  StringBuilder builder=new StringBuilder();
  for (  String type : blockCachingFileTypes) {
    builder.append(type).append(',');
  }
  return builder.substring(0,builder.length() - 1).getBytes();
}","private static byte[] toBytes(Map<String,String> properties){
  if (properties == null || properties.isEmpty()) {
    return null;
  }
  StringBuilder builder=new StringBuilder();
  Set<Entry<String,String>> entrySet=properties.entrySet();
  for (  Entry<String,String> entry : entrySet) {
    String key=entry.getKey();
    String value=entry.getValue();
    String keyValue=key + ""String_Node_Str"" + value;
    builder.append(keyValue).append(',');
  }
  return builder.substring(0,builder.length() - 1).getBytes();
}",0.5551763367463026
82434,"public boolean exists() throws IOException {
  return _directory.fileExists(getFileName());
}","public boolean exists() throws IOException {
  boolean fileExists=_directory.fileExists(getFileName());
  if (fileExists) {
    int words=(_numBits / 64) + 1;
    int correctLength=words * 8;
    long length=_indexInput.length();
    if (correctLength == length) {
      return true;
    }
  }
  return false;
}",0.4257425742574257
82435,"public void create(DocIdSetIterator it) throws IOException {
  String fileName=getFileName();
  IndexOutput output=_directory.createOutput(fileName,IOContext.READ);
  int index;
  int currentWordNum=0;
  long wordValue=0;
  while ((index=it.nextDoc()) < _numBits) {
    int wordNum=index >> 6;
    if (currentWordNum > wordNum) {
      throw new IOException(""String_Node_Str"");
    }
    while (currentWordNum < wordNum) {
      output.writeLong(wordValue);
      currentWordNum++;
      wordValue=0;
    }
    int bit=index & 0x3f;
    long bitmask=1L << bit;
    wordValue|=bitmask;
  }
  if (_numBits > 0) {
    int totalWords=(_numBits / 64) + 1;
    while (currentWordNum < totalWords) {
      output.writeLong(wordValue);
      currentWordNum++;
      wordValue=0;
    }
  }
  output.close();
}","public void create(DocIdSetIterator it) throws IOException {
  String fileName=getFileName();
  if (_directory.fileExists(getFileName())) {
    LOG.warn(""String_Node_Str"",fileName,_directory);
    _directory.deleteFile(fileName);
  }
  IndexOutput output=_directory.createOutput(fileName,IOContext.READ);
  int index;
  int currentWordNum=0;
  long wordValue=0;
  while ((index=it.nextDoc()) < _numBits) {
    int wordNum=index >> 6;
    if (currentWordNum > wordNum) {
      throw new IOException(""String_Node_Str"");
    }
    while (currentWordNum < wordNum) {
      output.writeLong(wordValue);
      currentWordNum++;
      wordValue=0;
    }
    int bit=index & 0x3f;
    long bitmask=1L << bit;
    wordValue|=bitmask;
  }
  if (_numBits > 0) {
    int totalWords=(_numBits / 64) + 1;
    while (currentWordNum < totalWords) {
      output.writeLong(wordValue);
      currentWordNum++;
      wordValue=0;
    }
  }
  output.close();
}",0.9195402298850576
82436,"public boolean exists() throws IOException {
  return _directory.fileExists(getFileName());
}","public boolean exists() throws IOException {
  boolean fileExists=_directory.fileExists(getFileName());
  if (fileExists) {
    int words=(_numBits / 64) + 1;
    int correctLength=words * 8;
    long length=_indexInput.length();
    if (correctLength == length) {
      return true;
    }
  }
  return false;
}",0.4257425742574257
82437,"public void create(DocIdSetIterator it) throws IOException {
  String fileName=getFileName();
  IndexOutput output=_directory.createOutput(fileName,IOContext.READ);
  int index;
  int currentWordNum=0;
  long wordValue=0;
  while ((index=it.nextDoc()) < _numBits) {
    int wordNum=index >> 6;
    if (currentWordNum > wordNum) {
      throw new IOException(""String_Node_Str"");
    }
    while (currentWordNum < wordNum) {
      output.writeLong(wordValue);
      currentWordNum++;
      wordValue=0;
    }
    int bit=index & 0x3f;
    long bitmask=1L << bit;
    wordValue|=bitmask;
  }
  if (_numBits > 0) {
    int totalWords=(_numBits / 64) + 1;
    while (currentWordNum < totalWords) {
      output.writeLong(wordValue);
      currentWordNum++;
      wordValue=0;
    }
  }
  output.close();
}","public void create(DocIdSetIterator it) throws IOException {
  String fileName=getFileName();
  if (_directory.fileExists(getFileName())) {
    LOG.warn(""String_Node_Str"",fileName,_directory);
    _directory.deleteFile(fileName);
  }
  IndexOutput output=_directory.createOutput(fileName,IOContext.READ);
  int index;
  int currentWordNum=0;
  long wordValue=0;
  while ((index=it.nextDoc()) < _numBits) {
    int wordNum=index >> 6;
    if (currentWordNum > wordNum) {
      throw new IOException(""String_Node_Str"");
    }
    while (currentWordNum < wordNum) {
      output.writeLong(wordValue);
      currentWordNum++;
      wordValue=0;
    }
    int bit=index & 0x3f;
    long bitmask=1L << bit;
    wordValue|=bitmask;
  }
  if (_numBits > 0) {
    int totalWords=(_numBits / 64) + 1;
    while (currentWordNum < totalWords) {
      output.writeLong(wordValue);
      currentWordNum++;
      wordValue=0;
    }
  }
  output.close();
}",0.9195402298850576
82438,"@Test public void testGetTableList(){
  assertEquals(Arrays.asList(TEST),clusterStatus.getTableList(false));
}","@Test public void testGetTableList() throws KeeperException, InterruptedException {
  testGetClusterTable();
  assertEquals(Arrays.asList(TEST),clusterStatus.getTableList(false));
}",0.7560137457044673
82439,"@After public void teardown() throws InterruptedException {
  clusterStatus.close();
  zooKeeper.close();
}","@After public void teardown() throws InterruptedException, KeeperException {
  rmr(zooKeeper,""String_Node_Str"");
  clusterStatus.close();
  zooKeeper.close();
}",0.8014981273408239
82440,"@Test public void testGetTableList(){
  assertEquals(Arrays.asList(TEST),clusterStatus.getTableList(false));
}","@Test public void testGetTableList() throws KeeperException, InterruptedException {
  testGetClusterTable();
  assertEquals(Arrays.asList(TEST),clusterStatus.getTableList(false));
}",0.7560137457044673
82441,"@After public void teardown() throws InterruptedException {
  clusterStatus.close();
  zooKeeper.close();
}","@After public void teardown() throws InterruptedException, KeeperException {
  rmr(zooKeeper,""String_Node_Str"");
  clusterStatus.close();
  zooKeeper.close();
}",0.8014981273408239
82442,"@Override public void createTable(TableDescriptor tableDescriptor){
  long s=System.nanoTime();
  try {
    checkIfOpen();
    if (tableDescriptor.getSimilarityClass() == null) {
      tableDescriptor.setSimilarityClass(FairSimilarity.class.getName());
    }
    String table=BlurUtil.nullCheck(tableDescriptor.name,""String_Node_Str"");
    String cluster=BlurUtil.nullCheck(tableDescriptor.cluster,""String_Node_Str"");
    assignTableUri(tableDescriptor);
    String uri=BlurUtil.nullCheck(tableDescriptor.tableUri,""String_Node_Str"");
    int shardCount=BlurUtil.zeroCheck(tableDescriptor.shardCount,""String_Node_Str"");
    Similarity similarity=BlurUtil.getInstance(tableDescriptor.similarityClass,Similarity.class);
    boolean blockCaching=tableDescriptor.blockCaching;
    Set<String> blockCachingFileTypes=tableDescriptor.blockCachingFileTypes;
    String blurTablePath=ZookeeperPathConstants.getTablePath(cluster,table);
    if (_zk.exists(blurTablePath,false) != null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    BlurUtil.setupFileSystem(uri,shardCount);
    BlurUtil.createPath(_zk,blurTablePath,null);
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableColumnsToPreCache(cluster,table),toBytes(tableDescriptor.preCacheCols));
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableUriPath(cluster,table),uri.getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableShardCountPath(cluster,table),Integer.toString(shardCount).getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableSimilarityPath(cluster,table),similarity.getClass().getName().getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getLockPath(cluster,table),null);
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableFieldNamesPath(cluster,table),null);
    if (tableDescriptor.readOnly) {
      BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableReadOnlyPath(cluster,table),null);
    }
    if (blockCaching) {
      BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableBlockCachingPath(cluster,table),null);
    }
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableBlockCachingFileTypesPath(cluster,table),toBytes(blockCachingFileTypes));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}","@Override public void createTable(TableDescriptor tableDescriptor){
  long s=System.nanoTime();
  try {
    checkIfOpen();
    if (tableDescriptor.getSimilarityClass() == null) {
      tableDescriptor.setSimilarityClass(FairSimilarity.class.getName());
    }
    String table=BlurUtil.nullCheck(tableDescriptor.name,""String_Node_Str"");
    String cluster=BlurUtil.nullCheck(tableDescriptor.cluster,""String_Node_Str"");
    assignTableUri(tableDescriptor);
    String uri=BlurUtil.nullCheck(tableDescriptor.tableUri,""String_Node_Str"");
    int shardCount=BlurUtil.zeroCheck(tableDescriptor.shardCount,""String_Node_Str"");
    Similarity similarity=BlurUtil.getInstance(tableDescriptor.similarityClass,Similarity.class);
    boolean blockCaching=tableDescriptor.blockCaching;
    Set<String> blockCachingFileTypes=tableDescriptor.blockCachingFileTypes;
    String blurTablePath=ZookeeperPathConstants.getTablePath(cluster,table);
    if (_zk.exists(blurTablePath,false) != null) {
      throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
    BlurUtil.setupFileSystem(uri,shardCount);
    BlurUtil.createPath(_zk,blurTablePath,null);
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableColumnsToPreCache(cluster,table),toBytes(tableDescriptor.preCacheCols));
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableUriPath(cluster,table),uri.getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableShardCountPath(cluster,table),Integer.toString(shardCount).getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableSimilarityPath(cluster,table),similarity.getClass().getName().getBytes());
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getLockPath(cluster,table),null);
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableFieldNamesPath(cluster,table),null);
    if (tableDescriptor.readOnly) {
      BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableReadOnlyPath(cluster,table),null);
    }
    if (blockCaching) {
      BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableBlockCachingPath(cluster,table),null);
    }
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTableBlockCachingFileTypesPath(cluster,table),toBytes(blockCachingFileTypes));
    BlurUtil.createPath(_zk,ZookeeperPathConstants.getTablePropertiesPath(cluster,table),toBytes(tableDescriptor.getTableProperties()));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
}",0.9740087269967748
82443,"@Override public TableDescriptor getTableDescriptor(boolean useCache,String cluster,String table){
  if (useCache) {
    TableDescriptor tableDescriptor=_tableDescriptorCache.get(table);
    updateEnabled(useCache,tableDescriptor,cluster,table);
    if (tableDescriptor != null) {
      return tableDescriptor;
    }
  }
  long s=System.nanoTime();
  TableDescriptor tableDescriptor=new TableDescriptor();
  try {
    checkIfOpen();
    NullPointerException npe=null;
    LOOP:     for (int i=0; i < 10; i++) {
      npe=null;
      try {
        tableDescriptor.shardCount=Integer.parseInt(new String(getData(ZookeeperPathConstants.getTableShardCountPath(cluster,table))));
        tableDescriptor.tableUri=new String(getData(ZookeeperPathConstants.getTableUriPath(cluster,table)));
        tableDescriptor.blockCaching=isBlockCacheEnabled(cluster,table);
        tableDescriptor.blockCachingFileTypes=getBlockCacheFileTypes(cluster,table);
        tableDescriptor.name=table;
        tableDescriptor.readOnly=internalGetReadOnly(ZookeeperPathConstants.getTableReadOnlyPath(cluster,table));
        tableDescriptor.preCacheCols=toList(getData(ZookeeperPathConstants.getTableColumnsToPreCache(cluster,table)));
        byte[] data=getData(ZookeeperPathConstants.getTableSimilarityPath(cluster,table));
        if (data != null) {
          tableDescriptor.similarityClass=new String(data);
        }
        updateEnabled(useCache,tableDescriptor,cluster,table);
        break LOOP;
      }
 catch (      NullPointerException e) {
        npe=e;
        LOG.warn(""String_Node_Str"");
        Thread.sleep(TimeUnit.SECONDS.toMillis(3));
      }
    }
    if (npe != null) {
      throw npe;
    }
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
  tableDescriptor.cluster=cluster;
  _tableDescriptorCache.put(table,tableDescriptor);
  return tableDescriptor;
}","@Override public TableDescriptor getTableDescriptor(boolean useCache,String cluster,String table){
  if (useCache) {
    TableDescriptor tableDescriptor=_tableDescriptorCache.get(table);
    updateEnabled(useCache,tableDescriptor,cluster,table);
    if (tableDescriptor != null) {
      return tableDescriptor;
    }
  }
  long s=System.nanoTime();
  TableDescriptor tableDescriptor=new TableDescriptor();
  try {
    checkIfOpen();
    NullPointerException npe=null;
    LOOP:     for (int i=0; i < 10; i++) {
      npe=null;
      try {
        tableDescriptor.shardCount=Integer.parseInt(new String(getData(ZookeeperPathConstants.getTableShardCountPath(cluster,table))));
        tableDescriptor.tableUri=new String(getData(ZookeeperPathConstants.getTableUriPath(cluster,table)));
        tableDescriptor.blockCaching=isBlockCacheEnabled(cluster,table);
        tableDescriptor.blockCachingFileTypes=getBlockCacheFileTypes(cluster,table);
        tableDescriptor.name=table;
        tableDescriptor.readOnly=internalGetReadOnly(ZookeeperPathConstants.getTableReadOnlyPath(cluster,table));
        tableDescriptor.preCacheCols=toList(getData(ZookeeperPathConstants.getTableColumnsToPreCache(cluster,table)));
        tableDescriptor.tableProperties=toMap(getData(ZookeeperPathConstants.getTablePropertiesPath(cluster,table)));
        byte[] data=getData(ZookeeperPathConstants.getTableSimilarityPath(cluster,table));
        if (data != null) {
          tableDescriptor.similarityClass=new String(data);
        }
        updateEnabled(useCache,tableDescriptor,cluster,table);
        break LOOP;
      }
 catch (      NullPointerException e) {
        npe=e;
        LOG.warn(""String_Node_Str"");
        Thread.sleep(TimeUnit.SECONDS.toMillis(3));
      }
    }
    if (npe != null) {
      throw npe;
    }
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    long e=System.nanoTime();
    LOG.debug(""String_Node_Str"" + (e - s) / 1000000.0 + ""String_Node_Str"");
  }
  tableDescriptor.cluster=cluster;
  _tableDescriptorCache.put(table,tableDescriptor);
  return tableDescriptor;
}",0.972391202620496
82444,"private static byte[] toBytes(Set<String> blockCachingFileTypes){
  if (blockCachingFileTypes == null || blockCachingFileTypes.isEmpty()) {
    return null;
  }
  StringBuilder builder=new StringBuilder();
  for (  String type : blockCachingFileTypes) {
    builder.append(type).append(',');
  }
  return builder.substring(0,builder.length() - 1).getBytes();
}","private static byte[] toBytes(Map<String,String> properties){
  if (properties == null || properties.isEmpty()) {
    return null;
  }
  StringBuilder builder=new StringBuilder();
  Set<Entry<String,String>> entrySet=properties.entrySet();
  for (  Entry<String,String> entry : entrySet) {
    String key=entry.getKey();
    String value=entry.getValue();
    String keyValue=key + ""String_Node_Str"" + value;
    builder.append(keyValue).append(',');
  }
  return builder.substring(0,builder.length() - 1).getBytes();
}",0.5551763367463026
82445,"public static boolean createPath(FileSystem fileSystem,Path path) throws IOException {
  if (!fileSystem.exists(path)) {
    LOG.info(""String_Node_Str"",path);
    fileSystem.mkdirs(path);
    return false;
  }
  return true;
}","public static boolean createPath(FileSystem fileSystem,Path path) throws IOException {
  if (!fileSystem.exists(path)) {
    LOG.info(""String_Node_Str"",path);
    if (!fileSystem.mkdirs(path)) {
      LOG.error(""String_Node_Str"",path);
      throw new IOException(""String_Node_Str"");
    }
    return false;
  }
  return true;
}",0.8122743682310469
82446,"public void deleteFile(String name) throws IOException {
  if (name.equals(IndexFileNames.SEGMENTS_GEN)) {
    deleteFile(name);
    return;
  }
  AtomicInteger counter=refCounters.get(name);
  if (counter != null && counter.get() > 0) {
    addToFileGC(name);
  }
 else {
    LOG.debug(""String_Node_Str"",name);
    directory.deleteFile(name);
  }
}","public void deleteFile(String name) throws IOException {
  LOG.debug(""String_Node_Str"",name);
  if (name.equals(IndexFileNames.SEGMENTS_GEN)) {
    directory.deleteFile(name);
    return;
  }
  AtomicInteger counter=refCounters.get(name);
  if (counter != null && counter.get() > 0) {
    addToFileGC(name);
  }
 else {
    LOG.debug(""String_Node_Str"",name);
    directory.deleteFile(name);
  }
}",0.9369127516778524
82447,"public static void main(String[] args) throws IOException {
  Main.setupCommands();
  Map<String,Command> commands=Main.commands;
  ByteArrayOutputStream outputStream1=new ByteArrayOutputStream();
  ByteArrayOutputStream outputStream2=new ByteArrayOutputStream();
  PrintWriter menu=new PrintWriter(outputStream1);
  PrintWriter body=new PrintWriter(outputStream2);
  printCommands(""String_Node_Str"",Main.tableCommands,commands,menu,body);
  printCommands(""String_Node_Str"",Main.dataCommands,commands,menu,body);
  printCommands(""String_Node_Str"",Main.clusterCommands,commands,menu,body);
  printCommands(""String_Node_Str"",Main.shellCommands,commands,menu,body);
  menu.close();
  body.close();
  String menuReplacementText=new String(outputStream1.toByteArray());
  String bodyReplacementText=new String(outputStream2.toByteArray());
  File source=new File(args[0]);
  File output=new File(args[1]);
  PrintWriter writer=new PrintWriter(output);
  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(source)));
  String line;
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    if (line.equals(""String_Node_Str"")) {
      writer.println(menuReplacementText);
    }
 else     if (line.equals(""String_Node_Str"")) {
      writer.println(bodyReplacementText);
    }
 else {
      writer.println(line);
    }
  }
  writer.close();
  reader.close();
}","public static void main(String[] args) throws IOException {
  Main.setupCommands();
  Map<String,Command> commands=Main.commands;
  ByteArrayOutputStream outputStream1=new ByteArrayOutputStream();
  ByteArrayOutputStream outputStream2=new ByteArrayOutputStream();
  PrintWriter menu=new PrintWriter(outputStream1);
  PrintWriter body=new PrintWriter(outputStream2);
  printCommands(""String_Node_Str"",Main.tableCommands,commands,menu,body);
  printCommands(""String_Node_Str"",Main.dataCommands,commands,menu,body);
  printCommands(""String_Node_Str"",Main.clusterCommands,commands,menu,body);
  printCommands(""String_Node_Str"",Main.shellCommands,commands,menu,body);
  menu.close();
  body.close();
  String menuReplacementText=new String(outputStream1.toByteArray());
  String bodyReplacementText=new String(outputStream2.toByteArray());
  File source=new File(args[0]);
  File output=new File(args[1]);
  PrintWriter writer=new PrintWriter(output);
  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(source)));
  String line;
  while ((line=reader.readLine()) != null) {
    if (line.equals(""String_Node_Str"")) {
      writer.println(menuReplacementText);
    }
 else     if (line.equals(""String_Node_Str"")) {
      writer.println(bodyReplacementText);
    }
 else {
      writer.println(line);
    }
  }
  writer.close();
  reader.close();
}",0.992057761732852
82448,"public Schema schema(String table) throws IOException {
  TableContext tableContext=getTableContext(table);
  FieldManager fieldManager=tableContext.getFieldManager();
  Schema schema=new Schema().setTable(table);
  schema.setFamilies(new HashMap<String,Map<String,ColumnDefinition>>());
  Map<String,BlurIndex> blurIndexes=_indexServer.getIndexes(table);
  for (  BlurIndex blurIndex : blurIndexes.values()) {
    IndexSearcherClosable searcher=blurIndex.getIndexReader();
    try {
      FieldInfos mergedFieldInfos=MultiFields.getMergedFieldInfos(searcher.getIndexReader());
      INNER:       for (      FieldInfo fieldInfo : mergedFieldInfos) {
        String fieldName=fieldInfo.name;
        FieldTypeDefinition fieldTypeDefinition=fieldManager.getFieldTypeDefinition(fieldName);
        if (fieldTypeDefinition == null) {
          continue INNER;
        }
        int index=fieldName.indexOf('.');
        if (index > 0) {
          String columnFamily=fieldName.substring(0,index);
          String column=fieldName.substring(index + 1);
          Map<String,ColumnDefinition> map=schema.getFamilies().get(columnFamily);
          if (map == null) {
            map=new HashMap<String,ColumnDefinition>();
            schema.putToFamilies(columnFamily,map);
          }
          map.put(column,getColumnDefinition(fieldTypeDefinition));
        }
      }
    }
  finally {
      searcher.close();
    }
  }
  return schema;
}","public Schema schema(String table) throws IOException {
  TableContext tableContext=getTableContext(table);
  FieldManager fieldManager=tableContext.getFieldManager();
  Schema schema=new Schema().setTable(table);
  schema.setFamilies(new HashMap<String,Map<String,ColumnDefinition>>());
  Set<String> fieldNames=fieldManager.getFieldNames();
  INNER:   for (  String fieldName : fieldNames) {
    FieldTypeDefinition fieldTypeDefinition=fieldManager.getFieldTypeDefinition(fieldName);
    if (fieldTypeDefinition == null) {
      continue INNER;
    }
    String columnName=fieldTypeDefinition.getColumnName();
    String columnFamily=fieldTypeDefinition.getFamily();
    String subColumnName=fieldTypeDefinition.getSubColumnName();
    Map<String,ColumnDefinition> map=schema.getFamilies().get(columnFamily);
    if (map == null) {
      map=new HashMap<String,ColumnDefinition>();
      schema.putToFamilies(columnFamily,map);
    }
    if (subColumnName == null) {
      map.put(columnName,getColumnDefinition(fieldTypeDefinition));
    }
 else {
      map.put(columnName + ""String_Node_Str"" + subColumnName,getColumnDefinition(fieldTypeDefinition));
    }
  }
  return schema;
}",0.4099236641221374
82449,"public static TableContext create(TableDescriptor tableDescriptor){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=cache.get(name);
  if (tableContext != null) {
    return tableContext;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=new Configuration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext.configuration=configuration;
  tableContext.tablePath=new Path(tableDescriptor.getTableUri());
  tableContext.walTablePath=new Path(tableContext.tablePath,LOGS);
  tableContext.defaultFieldName=SUPER;
  tableContext.table=name;
  tableContext.descriptor=tableDescriptor;
  tableContext.timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext.timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext.defaultPrimeDocTerm=new Term(""String_Node_Str"",""String_Node_Str"");
  tableContext.defaultScoreType=ScoreType.SUPER;
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext.tablePath,TYPES);
  try {
    tableContext.fieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext.indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SAHRD_INDEX_SIMILARITY,DefaultSimilarity.class);
  tableContext.similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  cache.put(name,tableContext);
  return tableContext;
}","public static TableContext create(TableDescriptor tableDescriptor){
  if (tableDescriptor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  String name=tableDescriptor.getName();
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  TableContext tableContext=cache.get(name);
  if (tableContext != null) {
    return tableContext;
  }
  LOG.info(""String_Node_Str"",name);
  Configuration configuration=new Configuration();
  Map<String,String> tableProperties=tableDescriptor.getTableProperties();
  if (tableProperties != null) {
    for (    Entry<String,String> prop : tableProperties.entrySet()) {
      configuration.set(prop.getKey(),prop.getValue());
    }
  }
  tableContext=new TableContext();
  tableContext.configuration=configuration;
  tableContext.tablePath=new Path(tableDescriptor.getTableUri());
  tableContext.walTablePath=new Path(tableContext.tablePath,LOGS);
  tableContext.defaultFieldName=SUPER;
  tableContext.table=name;
  tableContext.descriptor=tableDescriptor;
  tableContext.timeBetweenCommits=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000);
  tableContext.timeBetweenRefreshs=configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,5000);
  tableContext.defaultPrimeDocTerm=new Term(""String_Node_Str"",""String_Node_Str"");
  tableContext.defaultScoreType=ScoreType.SUPER;
  boolean strict=tableDescriptor.isStrictTypes();
  String defaultMissingFieldType=tableDescriptor.getDefaultMissingFieldType();
  boolean defaultMissingFieldLessIndexing=tableDescriptor.isDefaultMissingFieldLessIndexing();
  Map<String,String> defaultMissingFieldProps=emptyIfNull(tableDescriptor.getDefaultMissingFieldProps());
  Path storagePath=new Path(tableContext.tablePath,TYPES);
  try {
    HdfsFieldManager hdfsFieldManager=new HdfsFieldManager(SUPER,new NoStopWordStandardAnalyzer(),storagePath,configuration,strict,defaultMissingFieldType,defaultMissingFieldLessIndexing,defaultMissingFieldProps);
    hdfsFieldManager.load();
    tableContext.fieldManager=hdfsFieldManager;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Class<?> c1=configuration.getClass(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,KeepOnlyLastCommitDeletionPolicy.class);
  tableContext.indexDeletionPolicy=(IndexDeletionPolicy)configure(ReflectionUtils.newInstance(c1,configuration),tableContext);
  Class<?> c2=configuration.getClass(BLUR_SAHRD_INDEX_SIMILARITY,DefaultSimilarity.class);
  tableContext.similarity=(Similarity)configure(ReflectionUtils.newInstance(c2,configuration),tableContext);
  cache.put(name,tableContext);
  return tableContext;
}",0.9780965303353364
82450,public abstract void registerType(Class<? extends FieldTypeDefinition> c);,"/** 
 * Register a   {@link FieldTypeDefinition} into this field manager.
 * @param c the class.
 */
public abstract void registerType(Class<? extends FieldTypeDefinition> c);",0.5943775100401606
82451,"protected BaseFieldManager newFieldManager(boolean create) throws IOException {
  return new BaseFieldManager(_fieldLessField,new KeywordAnalyzer()){
    @Override protected boolean tryToStore(    FieldTypeDefinition fieldTypeDefinition,    String fieldName){
      return true;
    }
    @Override protected void tryToLoad(    String field){
    }
  }
;
}","protected BaseFieldManager newFieldManager(boolean create) throws IOException {
  return new BaseFieldManager(_fieldLessField,new KeywordAnalyzer()){
    @Override protected boolean tryToStore(    FieldTypeDefinition fieldTypeDefinition,    String fieldName){
      return true;
    }
    @Override protected void tryToLoad(    String field){
    }
    @Override protected List<String> getFieldNamesToLoad() throws IOException {
      return new ArrayList<String>();
    }
  }
;
}",0.8516746411483254
82452,"private BaseFieldManager getFieldManager(Analyzer a) throws IOException {
  BaseFieldManager fieldManager=new BaseFieldManager(BlurConstants.SUPER,a){
    @Override protected boolean tryToStore(    FieldTypeDefinition fieldTypeDefinition,    String fieldName){
      return true;
    }
    @Override protected void tryToLoad(    String fieldName){
    }
  }
;
  fieldManager.addColumnDefinitionInt(""String_Node_Str"",""String_Node_Str"");
  fieldManager.addColumnDefinitionDouble(""String_Node_Str"",""String_Node_Str"");
  fieldManager.addColumnDefinitionFloat(""String_Node_Str"",""String_Node_Str"");
  fieldManager.addColumnDefinitionLong(""String_Node_Str"",""String_Node_Str"");
  fieldManager.addColumnDefinitionGisRecursivePrefixTree(""String_Node_Str"",""String_Node_Str"");
  return fieldManager;
}","private BaseFieldManager getFieldManager(Analyzer a) throws IOException {
  BaseFieldManager fieldManager=new BaseFieldManager(BlurConstants.SUPER,a){
    @Override protected boolean tryToStore(    FieldTypeDefinition fieldTypeDefinition,    String fieldName){
      return true;
    }
    @Override protected void tryToLoad(    String fieldName){
    }
    @Override protected List<String> getFieldNamesToLoad() throws IOException {
      return new ArrayList<String>();
    }
  }
;
  fieldManager.addColumnDefinitionInt(""String_Node_Str"",""String_Node_Str"");
  fieldManager.addColumnDefinitionDouble(""String_Node_Str"",""String_Node_Str"");
  fieldManager.addColumnDefinitionFloat(""String_Node_Str"",""String_Node_Str"");
  fieldManager.addColumnDefinitionLong(""String_Node_Str"",""String_Node_Str"");
  fieldManager.addColumnDefinitionGisRecursivePrefixTree(""String_Node_Str"",""String_Node_Str"");
  return fieldManager;
}",0.927144535840188
82453,"@Override public void doit(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  if (args.length < 5) {
    throw new CommandException(""String_Node_Str"" + help());
  }
  CommandLine cmd=parse(args,out);
  ColumnDefinition columnDefinition=new ColumnDefinition();
  columnDefinition.setFamily(args[2]);
  columnDefinition.setColumnName(args[3]);
  columnDefinition.setFieldType(args[4]);
  if (cmd.hasOption(""String_Node_Str"")) {
    columnDefinition.setColumnName(cmd.getOptionValue(""String_Node_Str""));
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    columnDefinition.setFieldLessIndexed(true);
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    Option[] options=cmd.getOptions();
    for (    Option option : options) {
      if (option.getOpt().equals(""String_Node_Str"")) {
        String[] values=option.getValues();
        columnDefinition.putToProperties(values[0],values[1]);
      }
    }
  }
  client.addColumnDefinition(args[1],columnDefinition);
}","@Override public void doit(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  if (args.length < 5) {
    throw new CommandException(""String_Node_Str"" + help());
  }
  CommandLine cmd=parse(args,out);
  ColumnDefinition columnDefinition=new ColumnDefinition();
  columnDefinition.setFamily(args[2]);
  columnDefinition.setColumnName(args[3]);
  columnDefinition.setFieldType(args[4]);
  if (cmd.hasOption(""String_Node_Str"")) {
    columnDefinition.setSubColumnName(cmd.getOptionValue(""String_Node_Str""));
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    columnDefinition.setFieldLessIndexed(true);
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    Option[] options=cmd.getOptions();
    for (    Option option : options) {
      if (option.getOpt().equals(""String_Node_Str"")) {
        String[] values=option.getValues();
        columnDefinition.putToProperties(values[0],values[1]);
      }
    }
  }
  client.addColumnDefinition(args[1],columnDefinition);
}",0.9985170538803756
82454,"@Override public void doit(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  if (args.length != 2) {
    throw new CommandException(""String_Node_Str"" + help());
  }
  String tablename=args[1];
  Schema schema=client.schema(tablename);
  out.println(schema.getTable());
  Map<String,Map<String,ColumnDefinition>> families=schema.getFamilies();
  for (  String cf : families.keySet()) {
    out.println(""String_Node_Str"" + cf);
    Map<String,ColumnDefinition> columns=families.get(cf);
    for (    String c : columns.keySet()) {
      ColumnDefinition columnDefinition=columns.get(c);
      out.println(""String_Node_Str"" + columnDefinition);
    }
  }
}","@Override public void doit(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  if (args.length != 2) {
    throw new CommandException(""String_Node_Str"" + help());
  }
  String tablename=args[1];
  Schema schema=client.schema(tablename);
  out.println(schema);
  out.println(schema.getTable());
  Map<String,Map<String,ColumnDefinition>> families=schema.getFamilies();
  Set<String> familyNames=new TreeSet<String>(families.keySet());
  for (  String cf : familyNames) {
    out.println(""String_Node_Str"" + cf);
    Map<String,ColumnDefinition> columns=families.get(cf);
    Set<String> columnNames=new TreeSet<String>(columns.keySet());
    for (    String c : columnNames) {
      ColumnDefinition columnDefinition=columns.get(c);
      out.println(""String_Node_Str"" + columnDefinition.getColumnName());
      String fieldType=columnDefinition.getFieldType();
      Map<String,String> properties=columnDefinition.getProperties();
      String subColumnName=columnDefinition.getSubColumnName();
      if (subColumnName != null) {
        out.println(""String_Node_Str"" + subColumnName);
        out.println(""String_Node_Str"" + fieldType);
        Map<String,String> props=new TreeMap<String,String>(properties);
        for (        Entry<String,String> e : props.entrySet()) {
          out.println(""String_Node_Str"" + e);
        }
      }
 else {
        out.println(""String_Node_Str"" + fieldType);
        Map<String,String> props=new TreeMap<String,String>(properties);
        for (        Entry<String,String> e : props.entrySet()) {
          out.println(""String_Node_Str"" + e);
        }
      }
    }
  }
}",0.5754001684919966
82455,"public void doitInternal(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  AtomicBoolean quit=new AtomicBoolean();
  AtomicBoolean help=new AtomicBoolean();
  Properties properties=new Properties();
  try {
    properties.load(getClass().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    if (Main.debug) {
      e.printStackTrace();
    }
    throw new CommandException(e.getMessage());
  }
  Map<String,String> metricNames=new HashMap<String,String>();
  Map<String,String> helpMap=new HashMap<String,String>();
  Set<Object> keySet=properties.keySet();
  for (  Object k : keySet) {
    String key=k.toString();
    if (isShortName(key)) {
      String shortName=getShortName(key,properties);
      String longName=getLongName(getLongNameKey(key),properties);
      metricNames.put(shortName,longName);
    }
 else     if (isHelpName(key)) {
      int indexOf=key.indexOf(HELP);
      String strKey=key.substring(0,indexOf);
      Object shortNameKey=properties.get(strKey + SHORTNAME);
      Object helpMessage=properties.get(key);
      if (shortNameKey != null && helpMessage != null) {
        helpMap.put(shortNameKey.toString(),helpMessage.toString());
      }
    }
  }
  String labelsStr=properties.getProperty(""String_Node_Str"");
  String[] labels=resolveShortNames(labelsStr.split(""String_Node_Str""),properties);
  String sizesStr=properties.getProperty(""String_Node_Str"");
  Set<String> sizes=new HashSet<String>(Arrays.asList(resolveShortNames(sizesStr.split(""String_Node_Str""),properties)));
  Set<String> keys=new HashSet<String>(metricNames.values());
  String cluster;
  if (args.length != 2) {
    cluster=Main.getCluster(client,""String_Node_Str"" + help());
  }
 else {
    cluster=args[1];
  }
  ConsoleReader reader=this.getConsoleReader();
  if (reader != null) {
    Terminal terminal=reader.getTerminal();
    _height=terminal.getHeight() - 2;
    _width=terminal.getWidth() - 2;
    try {
      reader.setPrompt(""String_Node_Str"");
      reader.clearScreen();
    }
 catch (    IOException e) {
      if (Main.debug) {
        e.printStackTrace();
      }
    }
    startCommandWatcher(reader,quit,help,this);
  }
  List<String> shardServerList=new ArrayList<String>(client.shardServerList(cluster));
  Collections.sort(shardServerList);
  Map<String,AtomicReference<Client>> shardClients=setupClients(shardServerList);
  String shardServerLabel=properties.getProperty(TOP_SHARD_SERVER_SHORTNAME);
  int longestServerName=Math.max(getSizeOfLongestKey(shardClients),shardServerLabel.length());
  StringBuilder header=new StringBuilder(""String_Node_Str"" + longestServerName + ""String_Node_Str"");
  for (int i=1; i < labels.length; i++) {
    header.append(""String_Node_Str"");
  }
  header.append(""String_Node_Str"");
  do {
    StringBuilder output=new StringBuilder();
    if (quit.get()) {
      return;
    }
 else     if (help.get()) {
      showHelp(output,labels,helpMap);
    }
 else {
      output.append(truncate(String.format(header.toString(),(Object[])labels)));
      for (      Entry<String,AtomicReference<Client>> e : new TreeMap<String,AtomicReference<Client>>(shardClients).entrySet()) {
        String shardServer=e.getKey();
        AtomicReference<Client> ref=e.getValue();
        Map<String,Metric> metrics=getMetrics(shardServer,ref,keys);
        if (metrics == null) {
          String line=String.format(""String_Node_Str"" + longestServerName + ""String_Node_Str"",shardServer);
          output.append(line);
        }
 else {
          Object[] cols=new Object[labels.length];
          int c=0;
          cols[c++]=shardServer;
          StringBuilder sb=new StringBuilder(""String_Node_Str"" + longestServerName + ""String_Node_Str"");
          for (int i=1; i < labels.length; i++) {
            String mn=metricNames.get(labels[i]);
            Metric metric=metrics.get(mn);
            Map<String,Double> doubleMap=metric.getDoubleMap();
            Double value=doubleMap.get(""String_Node_Str"");
            if (value == null) {
              value=doubleMap.get(""String_Node_Str"");
            }
            cols[c++]=humanize(value,sizes.contains(mn));
            sb.append(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"");
          output.append(truncate(String.format(sb.toString(),cols)));
        }
      }
    }
    if (reader != null) {
      try {
        reader.clearScreen();
      }
 catch (      IOException e) {
        if (Main.debug) {
          e.printStackTrace();
        }
      }
    }
    out.print(output.toString());
    out.flush();
    if (reader != null) {
      try {
synchronized (this) {
          wait(3000);
        }
      }
 catch (      InterruptedException e) {
        return;
      }
      Terminal terminal=reader.getTerminal();
      _height=terminal.getHeight() - 2;
      _width=terminal.getWidth() - 2;
      List<String> currentShardServerList=new ArrayList<String>(client.shardServerList(cluster));
      Collections.sort(currentShardServerList);
      if (!shardServerList.equals(currentShardServerList)) {
        close(shardClients);
        shardClients=setupClients(shardServerList);
      }
    }
  }
 while (reader != null);
}","public void doitInternal(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  AtomicBoolean quit=new AtomicBoolean();
  AtomicBoolean help=new AtomicBoolean();
  Properties properties=new Properties();
  try {
    properties.load(getClass().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    if (Main.debug) {
      e.printStackTrace();
    }
    throw new CommandException(e.getMessage());
  }
  Map<String,String> metricNames=new HashMap<String,String>();
  Map<String,String> helpMap=new HashMap<String,String>();
  Set<Object> keySet=properties.keySet();
  for (  Object k : keySet) {
    String key=k.toString();
    if (isShortName(key)) {
      String shortName=getShortName(key,properties);
      String longName=getLongName(getLongNameKey(key),properties);
      metricNames.put(shortName,longName);
    }
 else     if (isHelpName(key)) {
      int indexOf=key.indexOf(HELP);
      String strKey=key.substring(0,indexOf);
      Object shortNameKey=properties.get(strKey + SHORTNAME);
      Object helpMessage=properties.get(key);
      if (shortNameKey != null && helpMessage != null) {
        helpMap.put(shortNameKey.toString(),helpMessage.toString());
      }
    }
  }
  String labelsStr=properties.getProperty(""String_Node_Str"");
  String[] labels=resolveShortNames(labelsStr.split(""String_Node_Str""),properties);
  String sizesStr=properties.getProperty(""String_Node_Str"");
  Set<String> sizes=new HashSet<String>(Arrays.asList(resolveShortNames(sizesStr.split(""String_Node_Str""),properties)));
  Set<String> keys=new HashSet<String>(metricNames.values());
  String cluster;
  if (args.length != 2) {
    cluster=Main.getCluster(client,""String_Node_Str"" + help());
  }
 else {
    cluster=args[1];
  }
  ConsoleReader reader=this.getConsoleReader();
  if (reader != null) {
    Terminal terminal=reader.getTerminal();
    _height=terminal.getHeight() - 2;
    _width=terminal.getWidth() - 2;
    try {
      reader.setPrompt(""String_Node_Str"");
      reader.clearScreen();
    }
 catch (    IOException e) {
      if (Main.debug) {
        e.printStackTrace();
      }
    }
    startCommandWatcher(reader,quit,help,this);
  }
  List<String> shardServerList=new ArrayList<String>(client.shardServerList(cluster));
  Collections.sort(shardServerList);
  Map<String,AtomicReference<Client>> shardClients=setupClients(shardServerList);
  String shardServerLabel=properties.getProperty(TOP_SHARD_SERVER_SHORTNAME);
  int longestServerName=Math.max(getSizeOfLongestKey(shardClients),shardServerLabel.length());
  StringBuilder header=new StringBuilder(""String_Node_Str"" + longestServerName + ""String_Node_Str"");
  for (int i=1; i < labels.length; i++) {
    header.append(""String_Node_Str"");
  }
  do {
    StringBuilder output=new StringBuilder();
    if (quit.get()) {
      return;
    }
 else     if (help.get()) {
      showHelp(output,labels,helpMap);
    }
 else {
      output.append(truncate(String.format(header.toString(),(Object[])labels)) + ""String_Node_Str"");
      for (      Entry<String,AtomicReference<Client>> e : new TreeMap<String,AtomicReference<Client>>(shardClients).entrySet()) {
        String shardServer=e.getKey();
        AtomicReference<Client> ref=e.getValue();
        Map<String,Metric> metrics=getMetrics(shardServer,ref,keys);
        if (metrics == null) {
          String line=String.format(""String_Node_Str"" + longestServerName + ""String_Node_Str"",shardServer);
          output.append(line);
        }
 else {
          Object[] cols=new Object[labels.length];
          int c=0;
          cols[c++]=shardServer;
          StringBuilder sb=new StringBuilder(""String_Node_Str"" + longestServerName + ""String_Node_Str"");
          for (int i=1; i < labels.length; i++) {
            String mn=metricNames.get(labels[i]);
            Metric metric=metrics.get(mn);
            Map<String,Double> doubleMap=metric.getDoubleMap();
            Double value=doubleMap.get(""String_Node_Str"");
            if (value == null) {
              value=doubleMap.get(""String_Node_Str"");
            }
            cols[c++]=humanize(value,sizes.contains(mn));
            sb.append(""String_Node_Str"");
          }
          output.append(truncate(String.format(sb.toString(),cols)) + ""String_Node_Str"");
        }
      }
    }
    if (reader != null) {
      try {
        reader.clearScreen();
      }
 catch (      IOException e) {
        if (Main.debug) {
          e.printStackTrace();
        }
      }
    }
    out.print(output.toString());
    out.flush();
    if (reader != null) {
      try {
synchronized (this) {
          wait(3000);
        }
      }
 catch (      InterruptedException e) {
        return;
      }
      Terminal terminal=reader.getTerminal();
      _height=terminal.getHeight() - 2;
      _width=terminal.getWidth() - 2;
      List<String> currentShardServerList=new ArrayList<String>(client.shardServerList(cluster));
      Collections.sort(currentShardServerList);
      if (!shardServerList.equals(currentShardServerList)) {
        close(shardClients);
        shardClients=setupClients(shardServerList);
      }
    }
  }
 while (reader != null);
}",0.9817868098159508
82456,"private void assertInputsEquals(String name,Directory fsDir,Directory hdfs) throws IOException {
  int reads=random.nextInt(MAX_NUMBER_OF_READS);
  IndexInput fsInput=fsDir.openInput(name,IOContext.DEFAULT);
  IndexInput hdfsInput=hdfs.openInput(name,IOContext.DEFAULT);
  assertEquals(fsInput.length(),hdfsInput.length());
  int fileLength=(int)fsInput.length();
  for (int i=0; i < reads; i++) {
    byte[] fsBuf=new byte[random.nextInt(Math.min(MAX_BUFFER_SIZE - MIN_BUFFER_SIZE,fileLength)) + MIN_BUFFER_SIZE];
    byte[] hdfsBuf=new byte[fsBuf.length];
    int offset=random.nextInt(fsBuf.length);
    int length=random.nextInt(fsBuf.length - offset);
    int pos=random.nextInt(fileLength - length);
    fsInput.seek(pos);
    fsInput.readBytes(fsBuf,offset,length);
    hdfsInput.seek(pos);
    hdfsInput.readBytes(hdfsBuf,offset,length);
    for (int f=offset; f < length; f++) {
      if (fsBuf[f] != hdfsBuf[f]) {
        fail(Long.toString(seed) + ""String_Node_Str"" + i+ ""String_Node_Str"");
      }
    }
  }
  fsInput.close();
  hdfsInput.close();
}","private void assertInputsEquals(String name,Directory fsDir,Directory hdfs) throws IOException {
  int reads=random.nextInt(MAX_NUMBER_OF_READS);
  IndexInput fsInput=fsDir.openInput(name,IOContext.DEFAULT);
  IndexInput hdfsInput=hdfs.openInput(name,IOContext.DEFAULT);
  assertEquals(fsInput.length(),hdfsInput.length());
  int fileLength=(int)fsInput.length();
  if (fileLength != 0) {
    for (int i=0; i < reads; i++) {
      byte[] fsBuf=new byte[random.nextInt(Math.min(MAX_BUFFER_SIZE - MIN_BUFFER_SIZE,fileLength)) + MIN_BUFFER_SIZE];
      byte[] hdfsBuf=new byte[fsBuf.length];
      int offset=random.nextInt(fsBuf.length);
      int length=random.nextInt(fsBuf.length - offset);
      int pos=random.nextInt(fileLength - length);
      fsInput.seek(pos);
      fsInput.readBytes(fsBuf,offset,length);
      hdfsInput.seek(pos);
      hdfsInput.readBytes(hdfsBuf,offset,length);
      for (int f=offset; f < length; f++) {
        if (fsBuf[f] != hdfsBuf[f]) {
          fail(Long.toString(seed) + ""String_Node_Str"" + i+ ""String_Node_Str"");
        }
      }
    }
  }
  fsInput.close();
  hdfsInput.close();
}",0.9720568025652772
82457,"@Override public BlurAnalyzer getAnalyzer(String table){
  return new BlurAnalyzer(new StandardAnalyzer(LUCENE_VERSION,new CharArraySet(LUCENE_VERSION,new HashSet<String>(),false)));
}","@Override public BlurAnalyzer getAnalyzer(String table){
  return _tableContext.getAnalyzer();
}",0.5785714285714286
82458,"/** 
 * NOTE: This method will not preserve the correct field types.
 * @param preTag
 * @param postTag
 */
public static Document highlight(int docId,Document document,Query query,BlurAnalyzer analyzer,IndexReader reader,String preTag,String postTag) throws IOException, InvalidTokenOffsetsException {
  Query fixedQuery=fixSuperQuery(query,null);
  SimpleHTMLFormatter htmlFormatter=new SimpleHTMLFormatter(preTag,postTag);
  Document result=new Document();
  for (  IndexableField f : document) {
    String name=f.name();
    if (FIELDS_NOT_TO_HIGHLIGHT.contains(name)) {
      result.add(f);
      continue;
    }
    String text=f.stringValue();
    Number numericValue=f.numericValue();
    Query fieldFixedQuery;
    if (analyzer.isFullTextField(text)) {
      fieldFixedQuery=fixSuperQuery(query,name);
    }
 else {
      fieldFixedQuery=fixedQuery;
    }
    if (numericValue != null) {
      if (shouldNumberBeHighlighted(name,numericValue,fieldFixedQuery)) {
        String numberHighlight=preTag + text + postTag;
        result.add(new StringField(name,numberHighlight,Store.YES));
      }
    }
 else {
      Highlighter highlighter=new Highlighter(htmlFormatter,new QueryScorer(fieldFixedQuery,name));
      TokenStream tokenStream=TokenSources.getAnyTokenStream(reader,docId,name,analyzer);
      TextFragment[] frag=highlighter.getBestTextFragments(tokenStream,text,false,10);
      for (int j=0; j < frag.length; j++) {
        if ((frag[j] != null) && (frag[j].getScore() > 0)) {
          result.add(new StringField(name,frag[j].toString(),Store.YES));
        }
      }
    }
  }
  return result;
}","/** 
 * NOTE: This method will not preserve the correct field types.
 * @param preTag
 * @param postTag
 */
public static Document highlight(int docId,Document document,Query query,BlurAnalyzer analyzer,IndexReader reader,String preTag,String postTag) throws IOException, InvalidTokenOffsetsException {
  Query fixedQuery=fixSuperQuery(query,null);
  SimpleHTMLFormatter htmlFormatter=new SimpleHTMLFormatter(preTag,postTag);
  Document result=new Document();
  for (  IndexableField f : document) {
    String name=f.name();
    if (FIELDS_NOT_TO_HIGHLIGHT.contains(name)) {
      result.add(f);
      continue;
    }
    String text=f.stringValue();
    Number numericValue=f.numericValue();
    Query fieldFixedQuery;
    if (analyzer.isFullTextField(name)) {
      fieldFixedQuery=fixSuperQuery(query,name);
    }
 else {
      fieldFixedQuery=fixedQuery;
    }
    if (numericValue != null) {
      if (shouldNumberBeHighlighted(name,numericValue,fieldFixedQuery)) {
        String numberHighlight=preTag + text + postTag;
        result.add(new StringField(name,numberHighlight,Store.YES));
      }
    }
 else {
      Highlighter highlighter=new Highlighter(htmlFormatter,new QueryScorer(fieldFixedQuery,name));
      TokenStream tokenStream=TokenSources.getAnyTokenStream(reader,docId,name,analyzer);
      TextFragment[] frag=highlighter.getBestTextFragments(tokenStream,text,false,10);
      for (int j=0; j < frag.length; j++) {
        if ((frag[j] != null) && (frag[j].getScore() > 0)) {
          result.add(new StringField(name,frag[j].toString(),Store.YES));
        }
      }
    }
  }
  return result;
}",0.9975323874151758
82459,"public BlurAnalyzer(){
  this(new NoStopWordStandardAnalyzer());
}","public BlurAnalyzer(){
  this(new AnalyzerDefinition());
}",0.7741935483870968
82460,"@Override public void warmBlurIndex(final TableDescriptor table,final String shard,IndexReader reader,AtomicBoolean isClosed,ReleaseReader releaseReader) throws IOException {
  LOG.info(""String_Node_Str"",reader);
  try {
    int maxSampleSize=1000;
    IndexWarmup indexWarmup=new IndexWarmup(isClosed,maxSampleSize);
    String context=table.getName() + ""String_Node_Str"" + shard;
    Map<String,List<IndexTracerResult>> sampleIndex=indexWarmup.sampleIndex(reader,context);
    ColumnPreCache columnPreCache=table.getColumnPreCache();
    if (columnPreCache != null) {
      warm(reader,columnPreCache.preCacheCols,indexWarmup,sampleIndex,context,isClosed);
    }
 else {
      warm(reader,getFields(reader),indexWarmup,sampleIndex,context,isClosed);
    }
  }
  finally {
    releaseReader.release();
  }
}","@Override public void warmBlurIndex(final TableDescriptor table,final String shard,IndexReader reader,AtomicBoolean isClosed,ReleaseReader releaseReader) throws IOException {
  LOG.info(""String_Node_Str"",reader);
  try {
    if (reader instanceof FilterDirectoryReader) {
      reader=getBase((FilterDirectoryReader)reader);
    }
    int maxSampleSize=1000;
    IndexWarmup indexWarmup=new IndexWarmup(isClosed,maxSampleSize);
    String context=table.getName() + ""String_Node_Str"" + shard;
    Map<String,List<IndexTracerResult>> sampleIndex=indexWarmup.sampleIndex(reader,context);
    ColumnPreCache columnPreCache=table.getColumnPreCache();
    if (columnPreCache != null) {
      warm(reader,columnPreCache.preCacheCols,indexWarmup,sampleIndex,context,isClosed);
    }
 else {
      warm(reader,getFields(reader),indexWarmup,sampleIndex,context,isClosed);
    }
  }
  finally {
    releaseReader.release();
  }
}",0.936268829663963
82461,"public static boolean addColumns(Document document,BlurAnalyzer analyzer,String columnFamily,Iterable<Column> set){
  if (set == null) {
    return false;
  }
  OUTER:   for (  Column column : set) {
    String name=column.getName();
    String value=column.value;
    if (value == null || name == null) {
      continue OUTER;
    }
    String fieldName=getFieldName(columnFamily,name);
    FieldType fieldType=analyzer.getFieldType(fieldName);
    Field field=analyzer.getField(fieldName,value,fieldType);
    document.add(field);
    if (analyzer.isFullTextField(fieldName)) {
      document.add(new Field(SUPER,value,TextField.TYPE_NOT_STORED));
    }
    Set<String> subFieldNames=analyzer.getSubIndexNames(fieldName);
    if (subFieldNames != null) {
      for (      String subFieldName : subFieldNames) {
        FieldType subFieldType=analyzer.getFieldType(subFieldName);
        document.add(analyzer.getField(subFieldName,value,subFieldType));
      }
    }
  }
  return true;
}","public static boolean addColumns(Document document,BlurAnalyzer analyzer,String columnFamily,Iterable<Column> set){
  if (set == null) {
    return false;
  }
  OUTER:   for (  Column column : set) {
    String name=column.getName();
    String value=column.value;
    if (value == null || name == null) {
      continue OUTER;
    }
    String fieldName=getFieldName(columnFamily,name);
    FieldType fieldType=analyzer.getFieldType(fieldName);
    Field field=analyzer.getField(fieldName,value,fieldType);
    document.add(field);
    if (analyzer.isFullTextField(fieldName)) {
      document.add(new Field(SUPER,value,SUPER_FIELD_TYPE));
    }
    Set<String> subFieldNames=analyzer.getSubIndexNames(fieldName);
    if (subFieldNames != null) {
      for (      String subFieldName : subFieldNames) {
        FieldType subFieldType=analyzer.getFieldType(subFieldName);
        document.add(analyzer.getField(subFieldName,value,subFieldType));
      }
    }
  }
  return true;
}",0.9832402234636872
82462,"/** 
 * This method decides on the field type for the given field by name. Sub fields will also be passed in the fieldName such as fam1.col.sub1.
 * @param fieldName
 * @return the {@link FieldType}
 */
public FieldType getFieldType(String field){
  FieldType fieldType=_fieldTypes.get(field);
  if (fieldType == null) {
    fieldType=new FieldType(TextField.TYPE_STORED);
    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
  }
  if (isSubFieldName(field)) {
    fieldType.setStored(false);
  }
  return fieldType;
}","/** 
 * This method decides on the field type for the given field by name. Sub fields will also be passed in the fieldName such as fam1.col.sub1.
 * @param fieldName
 * @return the {@link FieldType}
 */
public FieldType getFieldType(String field){
  FieldType fieldType=_fieldTypes.get(field);
  if (fieldType == null) {
    fieldType=new FieldType(TextField.TYPE_STORED);
    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
    fieldType.setOmitNorms(true);
  }
  if (isSubFieldName(field)) {
    fieldType.setStored(false);
  }
  return fieldType;
}",0.9700704225352113
82463,"private static TYPE getType(String typeStr,String fieldName,Map<String,FieldType> fieldTypes){
  if (typeStr == null) {
    return null;
  }
  String[] types=typeStr.split(""String_Node_Str"");
  String type=types[0];
  String typeUpper=type.toUpperCase();
  TYPE t=null;
  if (!typeNameCache.contains(typeUpper)) {
    t=TYPE.TEXT;
  }
 else {
    t=TYPE.valueOf(typeUpper);
  }
  FieldType fieldType;
switch (t) {
case STORED:
    fieldType=StoredField.TYPE;
  break;
case STRING:
fieldType=new FieldType(StringField.TYPE_STORED);
break;
case LONG:
fieldType=new FieldType(LongField.TYPE_STORED);
if (types.length > 1) {
fieldType.setNumericPrecisionStep(Integer.parseInt(types[1]));
}
break;
case INTEGER:
fieldType=new FieldType(IntField.TYPE_STORED);
if (types.length > 1) {
fieldType.setNumericPrecisionStep(Integer.parseInt(types[1]));
}
break;
case FLOAT:
fieldType=new FieldType(FloatField.TYPE_STORED);
if (types.length > 1) {
fieldType.setNumericPrecisionStep(Integer.parseInt(types[1]));
}
break;
case DOUBLE:
fieldType=new FieldType(DoubleField.TYPE_STORED);
if (types.length > 1) {
fieldType.setNumericPrecisionStep(Integer.parseInt(types[1]));
}
break;
default :
fieldType=new FieldType(TextField.TYPE_STORED);
fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
break;
}
fieldTypes.put(fieldName,fieldType);
return t;
}","private static TYPE getType(String typeStr,String fieldName,Map<String,FieldType> fieldTypes){
  if (typeStr == null) {
    return null;
  }
  String[] types=typeStr.split(""String_Node_Str"");
  String type=types[0];
  String typeUpper=type.toUpperCase();
  TYPE t=null;
  if (!typeNameCache.contains(typeUpper)) {
    t=TYPE.TEXT;
  }
 else {
    t=TYPE.valueOf(typeUpper);
  }
  FieldType fieldType;
switch (t) {
case STORED:
    fieldType=StoredField.TYPE;
  break;
case STRING:
fieldType=new FieldType(StringField.TYPE_STORED);
break;
case LONG:
fieldType=new FieldType(LongField.TYPE_STORED);
if (types.length > 1) {
fieldType.setNumericPrecisionStep(Integer.parseInt(types[1]));
}
break;
case INTEGER:
fieldType=new FieldType(IntField.TYPE_STORED);
if (types.length > 1) {
fieldType.setNumericPrecisionStep(Integer.parseInt(types[1]));
}
break;
case FLOAT:
fieldType=new FieldType(FloatField.TYPE_STORED);
if (types.length > 1) {
fieldType.setNumericPrecisionStep(Integer.parseInt(types[1]));
}
break;
case DOUBLE:
fieldType=new FieldType(DoubleField.TYPE_STORED);
if (types.length > 1) {
fieldType.setNumericPrecisionStep(Integer.parseInt(types[1]));
}
break;
default :
fieldType=new FieldType(TextField.TYPE_STORED);
fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
fieldType.setOmitNorms(true);
break;
}
fieldTypes.put(fieldName,fieldType);
return t;
}",0.9891146589259796
82464,"@Override public void doit(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  if (args.length != 2) {
    throw new CommandException(""String_Node_Str"" + help());
  }
  String tablename=args[1];
  List<String> tableList=client.tableList();
  if (tableList.contains(tablename)) {
    out.println(""String_Node_Str"");
    return;
  }
  TableDescriptor tableDescriptor=client.describe(tablename);
  if (tableDescriptor.isIsEnabled()) {
    out.println(""String_Node_Str"");
    out.flush();
    client.disableTable(tablename);
  }
  out.println(""String_Node_Str"");
  out.flush();
  client.removeTable(tablename,true);
  out.println(""String_Node_Str"");
  out.flush();
  client.createTable(tableDescriptor);
}","@Override public void doit(PrintWriter out,Blur.Iface client,String[] args) throws CommandException, TException, BlurException {
  if (args.length != 2) {
    throw new CommandException(""String_Node_Str"" + help());
  }
  String tablename=args[1];
  List<String> tableList=client.tableList();
  if (!tableList.contains(tablename)) {
    out.println(""String_Node_Str"");
    return;
  }
  TableDescriptor tableDescriptor=client.describe(tablename);
  if (tableDescriptor.isIsEnabled()) {
    out.println(""String_Node_Str"");
    out.flush();
    client.disableTable(tablename);
  }
  out.println(""String_Node_Str"");
  out.flush();
  client.removeTable(tablename,true);
  out.println(""String_Node_Str"");
  out.flush();
  client.createTable(tableDescriptor);
}",0.9993364299933644
82465,"public static void fetchRow(IndexReader reader,String table,Selector selector,FetchResult fetchResult) throws CorruptIndexException, IOException {
  fetchResult.table=table;
  String locationId=selector.locationId;
  int lastSlash=locationId.lastIndexOf('/');
  int docId=Integer.parseInt(locationId.substring(lastSlash + 1));
  if (docId >= reader.maxDoc()) {
    throw new RuntimeException(""String_Node_Str"" + locationId + ""String_Node_Str""+ docId+ ""String_Node_Str"");
  }
  boolean returnIdsOnly=false;
  if (selector.columnFamiliesToFetch.isEmpty() && selector.columnsToFetch.isEmpty()) {
    returnIdsOnly=true;
  }
  Bits liveDocs=MultiFields.getLiveDocs(reader);
  ResetableDocumentStoredFieldVisitor fieldVisitor=getFieldSelector(selector);
  if (selector.isRecordOnly()) {
    if (liveDocs != null && !liveDocs.get(docId)) {
      fetchResult.exists=false;
      fetchResult.deleted=true;
      return;
    }
 else {
      fetchResult.exists=true;
      fetchResult.deleted=false;
      reader.document(docId,fieldVisitor);
      Document document=fieldVisitor.getDocument();
      fieldVisitor.reset();
      fetchResult.recordResult=getRecord(document);
      return;
    }
  }
 else {
    if (liveDocs != null && !liveDocs.get(docId)) {
      fetchResult.exists=false;
      fetchResult.deleted=true;
      return;
    }
 else {
      fetchResult.exists=true;
      fetchResult.deleted=false;
      String rowId=getRowId(reader,docId);
      Term term=new Term(ROW_ID,rowId);
      if (returnIdsOnly) {
        int recordCount=BlurUtil.countDocuments(reader,term);
        fetchResult.rowResult=new FetchRowResult();
        fetchResult.rowResult.row=new Row(rowId,null,recordCount);
      }
 else {
        List<Document> docs=BlurUtil.fetchDocuments(reader,term,fieldVisitor,selector);
        fetchResult.rowResult=new FetchRowResult(getRow(docs));
      }
      return;
    }
  }
}","public static void fetchRow(IndexReader reader,String table,Selector selector,FetchResult fetchResult) throws CorruptIndexException, IOException {
  fetchResult.table=table;
  String locationId=selector.locationId;
  int lastSlash=locationId.lastIndexOf('/');
  int docId=Integer.parseInt(locationId.substring(lastSlash + 1));
  if (docId >= reader.maxDoc()) {
    throw new RuntimeException(""String_Node_Str"" + locationId + ""String_Node_Str""+ docId+ ""String_Node_Str"");
  }
  boolean returnIdsOnly=false;
  if (selector.columnFamiliesToFetch != null && selector.columnsToFetch != null && selector.columnFamiliesToFetch.isEmpty() && selector.columnsToFetch.isEmpty()) {
    returnIdsOnly=true;
  }
  Bits liveDocs=MultiFields.getLiveDocs(reader);
  ResetableDocumentStoredFieldVisitor fieldVisitor=getFieldSelector(selector);
  if (selector.isRecordOnly()) {
    if (liveDocs != null && !liveDocs.get(docId)) {
      fetchResult.exists=false;
      fetchResult.deleted=true;
      return;
    }
 else {
      fetchResult.exists=true;
      fetchResult.deleted=false;
      reader.document(docId,fieldVisitor);
      Document document=fieldVisitor.getDocument();
      fieldVisitor.reset();
      fetchResult.recordResult=getRecord(document);
      return;
    }
  }
 else {
    if (liveDocs != null && !liveDocs.get(docId)) {
      fetchResult.exists=false;
      fetchResult.deleted=true;
      return;
    }
 else {
      fetchResult.exists=true;
      fetchResult.deleted=false;
      String rowId=getRowId(reader,docId);
      Term term=new Term(ROW_ID,rowId);
      if (returnIdsOnly) {
        int recordCount=BlurUtil.countDocuments(reader,term);
        fetchResult.rowResult=new FetchRowResult();
        fetchResult.rowResult.row=new Row(rowId,null,recordCount);
      }
 else {
        List<Document> docs=BlurUtil.fetchDocuments(reader,term,fieldVisitor,selector);
        fetchResult.rowResult=new FetchRowResult(getRow(docs));
      }
      return;
    }
  }
}",0.9801084990958407
82466,"@Override public Map<String,Map<String,ShardState>> shardServerLayoutState(String table) throws BlurException, TException {
  checkTable(_cluster,table);
  resetSearchers();
  try {
    Map<String,Map<String,ShardState>> result=new TreeMap<String,Map<String,ShardState>>();
    String nodeName=_indexServer.getNodeName();
    Map<String,ShardState> stateMap=_indexServer.getShardState(table);
    for (    Entry<String,ShardState> entry : stateMap.entrySet()) {
      result.put(entry.getKey(),newMap(nodeName,entry.getValue()));
    }
    return result;
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + table + ""String_Node_Str"",e);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(e.getMessage(),e);
  }
}","@Override public Map<String,Map<String,ShardState>> shardServerLayoutState(String table) throws BlurException, TException {
  resetSearchers();
  try {
    Map<String,Map<String,ShardState>> result=new TreeMap<String,Map<String,ShardState>>();
    String nodeName=_indexServer.getNodeName();
    Map<String,ShardState> stateMap=_indexServer.getShardState(table);
    for (    Entry<String,ShardState> entry : stateMap.entrySet()) {
      result.put(entry.getKey(),newMap(nodeName,entry.getValue()));
    }
    return result;
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + table + ""String_Node_Str"",e);
    if (e instanceof BlurException) {
      throw (BlurException)e;
    }
    throw new BException(e.getMessage(),e);
  }
}",0.98015873015873
82467,"/** 
 * The work loop. Handles selecting (read/write IO), dispatching, and managing the selection preferences of all existing connections.
 */
public void run(){
  try {
    while (!stopped_) {
      select();
      processAcceptedConnections();
      processInterestChanges();
    }
    for (    SelectionKey selectionKey : selector.keys()) {
      cleanupSelectionKey(selectionKey);
    }
  }
 catch (  Throwable t) {
    LOGGER.error(""String_Node_Str"",t);
  }
 finally {
    TThreadedSelectorServer.this.stop();
  }
}","/** 
 * The work loop. Handles selecting (read/write IO), dispatching, and managing the selection preferences of all existing connections.
 */
public void run(){
  try {
    Thread thread=Thread.currentThread();
    if (thread.getName().startsWith(""String_Node_Str"")) {
      thread.setName(""String_Node_Str"" + selectorThreadCount++);
    }
    while (!stopped_) {
      select();
      processAcceptedConnections();
      processInterestChanges();
    }
    for (    SelectionKey selectionKey : selector.keys()) {
      cleanupSelectionKey(selectionKey);
    }
  }
 catch (  Throwable t) {
    LOGGER.error(""String_Node_Str"",t);
  }
 finally {
    TThreadedSelectorServer.this.stop();
  }
}",0.8587943848059455
82468,"public ZooKeeperClient(String connectString,int sessionTimeout,Watcher watcher,long sessionId,byte[] sessionPasswd) throws IOException {
  super(connectString,sessionTimeout,watcher,sessionId,sessionPasswd);
}","public ZooKeeperClient(String connectString,int sessionTimeout,Watcher watcher,long sessionId,byte[] sessionPasswd) throws IOException {
  super(connectString,sessionTimeout,watcher,sessionId,sessionPasswd);
  internalSessionTimeout=sessionTimeout;
}",0.9106753812636166
82469,"@Override public void abortTask(TaskAttemptContext context) throws IOException {
  setup(context);
  FileSystem fileSystem=_newIndex.getFileSystem(_configuration);
  fileSystem.delete(_indexPath,true);
}","@Override public void abortTask(TaskAttemptContext context) throws IOException {
  setup(context);
  FileSystem fileSystem=_newIndex.getFileSystem(_configuration);
  LOG.info(""String_Node_Str"",_newIndex);
  fileSystem.delete(_newIndex,true);
}",0.7892376681614349
82470,"private void setup(TaskAttemptContext context) throws IOException {
  _configuration=context.getConfiguration();
  TableDescriptor tableDescriptor=BlurOutputFormat.getTableDescriptor(_configuration);
  int shardCount=tableDescriptor.getShardCount();
  int attemptId=context.getTaskAttemptID().getTaskID().getId();
  int shardId=attemptId % shardCount;
  _taskAttemptID=context.getTaskAttemptID();
  Path tableOutput=BlurOutputFormat.getOutputPath(_configuration);
  String shardName=BlurUtil.getShardName(BlurConstants.SHARD_PREFIX,shardId);
  _indexPath=new Path(tableOutput,shardName);
  _newIndex=new Path(_indexPath,_taskAttemptID.toString() + ""String_Node_Str"");
}","private void setup(TaskAttemptContext context) throws IOException {
  _configuration=context.getConfiguration();
  _tableDescriptor=BlurOutputFormat.getTableDescriptor(_configuration);
  int shardCount=_tableDescriptor.getShardCount();
  int attemptId=context.getTaskAttemptID().getTaskID().getId();
  int shardId=attemptId % shardCount;
  _taskAttemptID=context.getTaskAttemptID();
  Path tableOutput=BlurOutputFormat.getOutputPath(_configuration);
  String shardName=BlurUtil.getShardName(BlurConstants.SHARD_PREFIX,shardId);
  _indexPath=new Path(tableOutput,shardName);
  _newIndex=new Path(_indexPath,_taskAttemptID.toString() + ""String_Node_Str"");
}",0.93202416918429
82471,"@Override public void commitTask(TaskAttemptContext context) throws IOException {
  setup(context);
  FileSystem fileSystem=_newIndex.getFileSystem(_configuration);
  if (fileSystem.exists(_newIndex) && !fileSystem.isFile(_newIndex)) {
    fileSystem.rename(_newIndex,new Path(_indexPath,_taskAttemptID.toString() + ""String_Node_Str""));
  }
 else {
    throw new IOException(""String_Node_Str"" + _newIndex + ""String_Node_Str"");
  }
}","@Override public void commitTask(TaskAttemptContext context) throws IOException {
  setup(context);
  FileSystem fileSystem=_newIndex.getFileSystem(_configuration);
  if (fileSystem.exists(_newIndex) && !fileSystem.isFile(_newIndex)) {
    Path dst=new Path(_indexPath,_taskAttemptID.toString() + ""String_Node_Str"");
    LOG.info(""String_Node_Str"",_newIndex,dst);
    fileSystem.rename(_newIndex,dst);
  }
 else {
    throw new IOException(""String_Node_Str"" + _newIndex + ""String_Node_Str"");
  }
}",0.8697524219590959
82472,"private void copyDir() throws IOException {
  CopyRateDirectory copyRateDirectory=new CopyRateDirectory(_finalDir,_copyRateCounter);
  String[] fileNames=_localDir.listAll();
  for (  String fileName : fileNames) {
    LOG.info(""String_Node_Str"",fileName);
    _localDir.copy(copyRateDirectory,fileName,fileName,IOContext.DEFAULT);
  }
  rm(_localPath);
}","private void copyDir() throws IOException {
  CopyRateDirectory copyRateDirectory=new CopyRateDirectory(_finalDir,_copyRateCounter);
  String[] fileNames=_localDir.listAll();
  for (  String fileName : fileNames) {
    LOG.info(""String_Node_Str"",fileName,_newIndex);
    _localDir.copy(copyRateDirectory,fileName,fileName,IOContext.DEFAULT);
  }
  rm(_localPath);
}",0.9861111111111112
82473,"public BlurRecordWriter(Configuration configuration,BlurAnalyzer blurAnalyzer,int attemptId,String tmpDirName) throws IOException {
  TableDescriptor tableDescriptor=BlurOutputFormat.getTableDescriptor(configuration);
  int shardCount=tableDescriptor.getShardCount();
  int shardId=attemptId % shardCount;
  _maxDocumentBufferSize=BlurOutputFormat.getMaxDocumentBufferSize(configuration);
  Path tableOutput=BlurOutputFormat.getOutputPath(configuration);
  String shardName=BlurUtil.getShardName(BlurConstants.SHARD_PREFIX,shardId);
  Path indexPath=new Path(tableOutput,shardName);
  Path newIndex=new Path(indexPath,tmpDirName);
  _finalDir=new ProgressableDirectory(new HdfsDirectory(configuration,newIndex),BlurOutputFormat.getProgressable());
  _finalDir.setLockFactory(NoLockFactory.getNoLockFactory());
  _analyzer=new BlurAnalyzer(tableDescriptor.getAnalyzerDefinition());
  _conf=new IndexWriterConfig(LuceneVersionConstant.LUCENE_VERSION,_analyzer);
  TieredMergePolicy mergePolicy=(TieredMergePolicy)_conf.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  String localDirPath=System.getProperty(JAVA_IO_TMPDIR);
  _localPath=new File(localDirPath,UUID.randomUUID().toString() + ""String_Node_Str"");
  _localDir=new ProgressableDirectory(FSDirectory.open(_localPath),BlurOutputFormat.getProgressable());
  _writer=new IndexWriter(_localDir,_conf.clone());
}","public BlurRecordWriter(Configuration configuration,BlurAnalyzer blurAnalyzer,int attemptId,String tmpDirName) throws IOException {
  TableDescriptor tableDescriptor=BlurOutputFormat.getTableDescriptor(configuration);
  int shardCount=tableDescriptor.getShardCount();
  int shardId=attemptId % shardCount;
  _maxDocumentBufferSize=BlurOutputFormat.getMaxDocumentBufferSize(configuration);
  Path tableOutput=BlurOutputFormat.getOutputPath(configuration);
  String shardName=BlurUtil.getShardName(BlurConstants.SHARD_PREFIX,shardId);
  Path indexPath=new Path(tableOutput,shardName);
  _newIndex=new Path(indexPath,tmpDirName);
  _finalDir=new ProgressableDirectory(new HdfsDirectory(configuration,_newIndex),BlurOutputFormat.getProgressable());
  _finalDir.setLockFactory(NoLockFactory.getNoLockFactory());
  _analyzer=new BlurAnalyzer(tableDescriptor.getAnalyzerDefinition());
  _conf=new IndexWriterConfig(LuceneVersionConstant.LUCENE_VERSION,_analyzer);
  TieredMergePolicy mergePolicy=(TieredMergePolicy)_conf.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  String localDirPath=System.getProperty(JAVA_IO_TMPDIR);
  _localPath=new File(localDirPath,UUID.randomUUID().toString() + ""String_Node_Str"");
  _localDir=new ProgressableDirectory(FSDirectory.open(_localPath),BlurOutputFormat.getProgressable());
  _writer=new IndexWriter(_localDir,_conf.clone());
}",0.9974554707379136
82474,"@Test public void testBlurOutputFormatOverFlowMultipleReducersWithReduceMultiplierTest() throws IOException, InterruptedException, ClassNotFoundException {
  localFs.delete(new Path(TEST_ROOT_DIR + ""String_Node_Str""),true);
  localFs.delete(new Path(TEST_ROOT_DIR + ""String_Node_Str""),true);
  writeRecordsFile(""String_Node_Str"",1,50,1,1500,""String_Node_Str"");
  writeRecordsFile(""String_Node_Str"",1,50,2000,100,""String_Node_Str"");
  Job job=new Job(jobConf,""String_Node_Str"");
  job.setJarByClass(BlurOutputFormatTest.class);
  job.setMapperClass(CsvBlurMapper.class);
  job.setInputFormatClass(TrackingTextInputFormat.class);
  FileInputFormat.addInputPath(job,new Path(TEST_ROOT_DIR + ""String_Node_Str""));
  String tableUri=new Path(TEST_ROOT_DIR + ""String_Node_Str"").toString();
  CsvBlurMapper.addColumns(job,""String_Node_Str"",""String_Node_Str"");
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setShardCount(2);
  tableDescriptor.setAnalyzerDefinition(new AnalyzerDefinition());
  tableDescriptor.setTableUri(tableUri);
  BlurOutputFormat.setupJob(job,tableDescriptor);
  int multiple=2;
  BlurOutputFormat.setReducerMultiplier(job,multiple);
  assertTrue(job.waitForCompletion(true));
  Counters ctrs=job.getCounters();
  System.out.println(""String_Node_Str"" + ctrs);
  long total=0;
  for (int i=0; i < tableDescriptor.getShardCount(); i++) {
    Path path=new Path(tableUri,BlurUtil.getShardName(i));
    Collection<Path> commitedTasks=getCommitedTasks(path);
    assertEquals(multiple,commitedTasks.size());
    for (    Path p : commitedTasks) {
      DirectoryReader reader=DirectoryReader.open(new HdfsDirectory(conf,p));
      total+=reader.numDocs();
      reader.close();
    }
  }
  assertEquals(80000,total);
}","@Test public void testBlurOutputFormatOverFlowMultipleReducersWithReduceMultiplierTest() throws IOException, InterruptedException, ClassNotFoundException {
  localFs.delete(new Path(TEST_ROOT_DIR + ""String_Node_Str""),true);
  localFs.delete(new Path(TEST_ROOT_DIR + ""String_Node_Str""),true);
  writeRecordsFile(""String_Node_Str"",1,50,1,1500,""String_Node_Str"");
  writeRecordsFile(""String_Node_Str"",1,50,2000,100,""String_Node_Str"");
  Job job=new Job(jobConf,""String_Node_Str"");
  job.setJarByClass(BlurOutputFormatTest.class);
  job.setMapperClass(CsvBlurMapper.class);
  job.setInputFormatClass(TrackingTextInputFormat.class);
  FileInputFormat.addInputPath(job,new Path(TEST_ROOT_DIR + ""String_Node_Str""));
  String tableUri=new Path(TEST_ROOT_DIR + ""String_Node_Str"").toString();
  CsvBlurMapper.addColumns(job,""String_Node_Str"",""String_Node_Str"");
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setShardCount(7);
  tableDescriptor.setAnalyzerDefinition(new AnalyzerDefinition());
  tableDescriptor.setTableUri(tableUri);
  BlurOutputFormat.setupJob(job,tableDescriptor);
  int multiple=2;
  BlurOutputFormat.setReducerMultiplier(job,multiple);
  assertTrue(job.waitForCompletion(true));
  Counters ctrs=job.getCounters();
  System.out.println(""String_Node_Str"" + ctrs);
  long total=0;
  for (int i=0; i < tableDescriptor.getShardCount(); i++) {
    Path path=new Path(tableUri,BlurUtil.getShardName(i));
    Collection<Path> commitedTasks=getCommitedTasks(path);
    assertTrue(multiple >= commitedTasks.size());
    for (    Path p : commitedTasks) {
      DirectoryReader reader=DirectoryReader.open(new HdfsDirectory(conf,p));
      total+=reader.numDocs();
      reader.close();
    }
  }
  assertEquals(80000,total);
}",0.9900313301053832
82475,"public void testBlurIndexWriterFaster() throws IOException, InterruptedException {
  setupWriter(configuration,100);
  IndexSearcherClosable searcher1=writer.getIndexReader();
  IndexReader reader1=searcher1.getIndexReader();
  assertEquals(0,reader1.numDocs());
  searcher1.close();
  long s=System.nanoTime();
  int total=0;
  for (int i=0; i < TEST_NUMBER; i++) {
    if (i == TEST_NUMBER - 1) {
      writer.replaceRow(true,true,genRow());
    }
 else {
      writer.replaceRow(false,true,genRow());
    }
    total++;
  }
  long e=System.nanoTime();
  double seconds=(e - s) / 1000000000.0;
  double rate=total / seconds;
  System.out.println(""String_Node_Str"" + rate);
  writer.refresh();
  IndexSearcherClosable searcher2=writer.getIndexReader();
  IndexReader reader2=searcher2.getIndexReader();
  assertEquals(TEST_NUMBER,reader2.numDocs());
  searcher2.close();
}","@Test public void testBlurIndexWriterFaster() throws IOException, InterruptedException {
  setupWriter(configuration,100);
  IndexSearcherClosable searcher1=writer.getIndexReader();
  IndexReader reader1=searcher1.getIndexReader();
  assertEquals(0,reader1.numDocs());
  searcher1.close();
  long s=System.nanoTime();
  int total=0;
  for (int i=0; i < TEST_NUMBER; i++) {
    if (i == TEST_NUMBER - 1) {
      writer.replaceRow(true,true,genRow());
    }
 else {
      writer.replaceRow(false,true,genRow());
    }
    total++;
  }
  long e=System.nanoTime();
  double seconds=(e - s) / 1000000000.0;
  double rate=total / seconds;
  System.out.println(""String_Node_Str"" + rate);
  writer.refresh();
  IndexSearcherClosable searcher2=writer.getIndexReader();
  IndexReader reader2=searcher2.getIndexReader();
  assertEquals(TEST_NUMBER,reader2.numDocs());
  searcher2.close();
}",0.9965753424657534
82476,"private void setupWriter(Configuration configuration,long refresh) throws IOException {
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setName(""String_Node_Str"");
  tableDescriptor.setTableUri(new File(base,""String_Node_Str"" + UUID.randomUUID().toString()).toURI().toString());
  tableDescriptor.setAnalyzerDefinition(new AnalyzerDefinition());
  tableDescriptor.putToTableProperties(""String_Node_Str"",Long.toString(refresh));
  TableContext tableContext=TableContext.create(tableDescriptor);
  FSDirectory directory=FSDirectory.open(new File(base,""String_Node_Str"" + UUID.randomUUID().toString()));
  ShardContext shardContext=ShardContext.create(tableContext,""String_Node_Str"");
  writer=new BlurNRTIndex(shardContext,mergeScheduler,closer,directory,gc,service);
}","private void setupWriter(Configuration configuration,long refresh) throws IOException {
  TableDescriptor tableDescriptor=new TableDescriptor();
  tableDescriptor.setName(""String_Node_Str"");
  String uuid=UUID.randomUUID().toString();
  tableDescriptor.setTableUri(new File(base,""String_Node_Str"" + uuid).toURI().toString());
  tableDescriptor.setAnalyzerDefinition(new AnalyzerDefinition());
  tableDescriptor.putToTableProperties(""String_Node_Str"",Long.toString(refresh));
  TableContext tableContext=TableContext.create(tableDescriptor);
  File path=new File(base,""String_Node_Str"" + uuid);
  path.mkdirs();
  FSDirectory directory=FSDirectory.open(path);
  ShardContext shardContext=ShardContext.create(tableContext,""String_Node_Str"" + uuid);
  writer=new BlurNRTIndex(shardContext,mergeScheduler,closer,directory,gc,service);
}",0.7490774907749077
82477,"@Override public void action(List<String> onlineShards){
  List<String> oldOnlineShards=_prevOnlineShards;
  _prevOnlineShards=onlineShards;
  _layoutManagers.clear();
  _layoutCache.clear();
  LOG.info(""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  if (oldOnlineShards == null) {
    oldOnlineShards=new ArrayList<String>();
  }
  for (  String oldOnlineShard : oldOnlineShards) {
    if (!onlineShards.contains(oldOnlineShard)) {
      LOG.info(""String_Node_Str"",oldOnlineShard);
    }
  }
  for (  String onlineShard : onlineShards) {
    if (!oldOnlineShards.contains(onlineShard)) {
      LOG.info(""String_Node_Str"",onlineShard);
    }
  }
}","@Override public void action(List<String> onlineShards){
  List<String> oldOnlineShards=_prevOnlineShards;
  _prevOnlineShards=onlineShards;
  _layoutManagers.clear();
  _layoutCache.clear();
  LOG.info(""String_Node_Str"");
  if (oldOnlineShards == null) {
    oldOnlineShards=new ArrayList<String>();
  }
  for (  String oldOnlineShard : oldOnlineShards) {
    if (!onlineShards.contains(oldOnlineShard)) {
      LOG.info(""String_Node_Str"",oldOnlineShard);
    }
  }
  for (  String onlineShard : onlineShards) {
    if (!oldOnlineShards.contains(onlineShard)) {
      LOG.info(""String_Node_Str"",onlineShard);
    }
  }
}",0.565593087195601
82478,"private void watchForShardServerChanges(){
  ZookeeperPathConstants.getOnlineShardsPath(_cluster);
  _watchOnlineShards=new WatchChildren(_zookeeper,ZookeeperPathConstants.getOnlineShardsPath(_cluster)).watch(new OnChange(){
    private List<String> _prevOnlineShards=new ArrayList<String>();
    @Override public void action(    List<String> onlineShards){
      List<String> oldOnlineShards=_prevOnlineShards;
      _prevOnlineShards=onlineShards;
      _layoutManagers.clear();
      _layoutCache.clear();
      LOG.info(""String_Node_Str"");
      LOG.info(""String_Node_Str"");
      if (oldOnlineShards == null) {
        oldOnlineShards=new ArrayList<String>();
      }
      for (      String oldOnlineShard : oldOnlineShards) {
        if (!onlineShards.contains(oldOnlineShard)) {
          LOG.info(""String_Node_Str"",oldOnlineShard);
        }
      }
      for (      String onlineShard : onlineShards) {
        if (!oldOnlineShards.contains(onlineShard)) {
          LOG.info(""String_Node_Str"",onlineShard);
        }
      }
    }
  }
);
}","private void watchForShardServerChanges(){
  ZookeeperPathConstants.getOnlineShardsPath(_cluster);
  _watchOnlineShards=new WatchChildren(_zookeeper,ZookeeperPathConstants.getOnlineShardsPath(_cluster)).watch(new OnChange(){
    private List<String> _prevOnlineShards=new ArrayList<String>();
    @Override public void action(    List<String> onlineShards){
      List<String> oldOnlineShards=_prevOnlineShards;
      _prevOnlineShards=onlineShards;
      _layoutManagers.clear();
      _layoutCache.clear();
      LOG.info(""String_Node_Str"");
      if (oldOnlineShards == null) {
        oldOnlineShards=new ArrayList<String>();
      }
      for (      String oldOnlineShard : oldOnlineShards) {
        if (!onlineShards.contains(oldOnlineShard)) {
          LOG.info(""String_Node_Str"",oldOnlineShard);
        }
      }
      for (      String onlineShard : onlineShards) {
        if (!oldOnlineShards.contains(onlineShard)) {
          LOG.info(""String_Node_Str"",onlineShard);
        }
      }
    }
  }
);
}",0.6944309927360774
82479,"public WatchChildren watch(final OnChange onChange){
  if (_debug) {
    StringWriter writer=new StringWriter();
    PrintWriter printWriter=new PrintWriter(writer);
    new Throwable().printStackTrace(printWriter);
    printWriter.close();
    _debugStackTrace=writer.toString();
  }
  _watchThread=new Thread(new Runnable(){
    @Override public void run(){
      startDoubleCheckThread();
      while (_running.get()) {
synchronized (_lock) {
          try {
            _children=_zooKeeper.getChildren(_path,new Watcher(){
              @Override public void process(              WatchedEvent event){
synchronized (_lock) {
                  _lock.notify();
                }
              }
            }
);
            try {
              onChange.action(_children);
            }
 catch (            Throwable t) {
              LOG.error(""String_Node_Str"" + this + ""String_Node_Str"",t);
            }
            _lock.wait();
          }
 catch (          KeeperException e) {
            LOG.error(""String_Node_Str"",e,instance);
            if (!_running.get()) {
              LOG.info(""String_Node_Str"",e.getMessage());
              return;
            }
            if (e.code() == Code.NONODE) {
              if (_debug) {
                LOG.debug(""String_Node_Str"",_path,_debugStackTrace);
              }
 else {
                LOG.debug(""String_Node_Str"",_path);
              }
              close();
              return;
            }
            if (_debug) {
              LOG.error(""String_Node_Str"",e,_debugStackTrace);
            }
 else {
              LOG.error(""String_Node_Str"",e);
            }
            throw new RuntimeException(e);
          }
catch (          InterruptedException e) {
            return;
          }
        }
      }
      _running.set(false);
    }
  }
);
  _watchThread.setName(""String_Node_Str"" + _path + ""String_Node_Str""+ instance+ ""String_Node_Str"");
  _watchThread.setDaemon(true);
  _watchThread.start();
  return this;
}","public WatchChildren watch(final OnChange onChange){
  if (_debug) {
    StringWriter writer=new StringWriter();
    PrintWriter printWriter=new PrintWriter(writer);
    new Throwable().printStackTrace(printWriter);
    printWriter.close();
    _debugStackTrace=writer.toString();
  }
  _watchThread=new Thread(new Runnable(){
    @Override public void run(){
      Watcher watcher=new Watcher(){
        @Override public void process(        WatchedEvent event){
synchronized (_lock) {
            _lock.notify();
          }
        }
      }
;
      startDoubleCheckThread();
      while (_running.get()) {
synchronized (_lock) {
          try {
            _children=_zooKeeper.getChildren(_path,watcher);
            try {
              onChange.action(_children);
            }
 catch (            Throwable t) {
              LOG.error(""String_Node_Str"" + this + ""String_Node_Str"",t);
            }
            _lock.wait();
          }
 catch (          KeeperException e) {
            LOG.error(""String_Node_Str"",e,instance);
            if (!_running.get()) {
              LOG.info(""String_Node_Str"",e.getMessage());
              return;
            }
            if (e.code() == Code.NONODE) {
              if (_debug) {
                LOG.debug(""String_Node_Str"",_path,_debugStackTrace);
              }
 else {
                LOG.debug(""String_Node_Str"",_path);
              }
              close();
              return;
            }
            if (_debug) {
              LOG.error(""String_Node_Str"",e,_debugStackTrace);
            }
 else {
              LOG.error(""String_Node_Str"",e);
            }
            throw new RuntimeException(e);
          }
catch (          InterruptedException e) {
            return;
          }
        }
      }
      _running.set(false);
    }
  }
);
  _watchThread.setName(""String_Node_Str"" + _path + ""String_Node_Str""+ instance+ ""String_Node_Str"");
  _watchThread.setDaemon(true);
  _watchThread.start();
  return this;
}",0.9027393817542096
82480,"public WatchNodeData watch(final OnChange onChange){
  _watchThread=new Thread(new Runnable(){
    @Override public void run(){
      startDoubleCheckThread();
      while (_running.get()) {
synchronized (_lock) {
          try {
            Stat stat=_zooKeeper.exists(_path,false);
            if (stat == null) {
              LOG.debug(""String_Node_Str"",_path);
              return;
            }
            Watcher watcher=new Watcher(){
              @Override public void process(              WatchedEvent event){
synchronized (_lock) {
                  _lock.notify();
                }
              }
            }
;
            _data=_zooKeeper.getData(_path,watcher,stat);
            onChange.action(_data);
            _lock.wait();
          }
 catch (          KeeperException e) {
            if (!_running.get()) {
              LOG.info(""String_Node_Str"",e.getMessage());
              return;
            }
            LOG.error(""String_Node_Str"",e);
            throw new RuntimeException(e);
          }
catch (          InterruptedException e) {
            return;
          }
        }
      }
    }
  }
);
  _watchThread.setName(""String_Node_Str"" + _path + ""String_Node_Str""+ instance+ ""String_Node_Str"");
  _watchThread.setDaemon(true);
  _watchThread.start();
  return this;
}","public WatchNodeData watch(final OnChange onChange){
  _watchThread=new Thread(new Runnable(){
    @Override public void run(){
      Watcher watcher=new Watcher(){
        @Override public void process(        WatchedEvent event){
synchronized (_lock) {
            _lock.notify();
          }
        }
      }
;
      startDoubleCheckThread();
      while (_running.get()) {
synchronized (_lock) {
          try {
            Stat stat=_zooKeeper.exists(_path,false);
            if (stat == null) {
              LOG.debug(""String_Node_Str"",_path);
              return;
            }
            _data=_zooKeeper.getData(_path,watcher,stat);
            onChange.action(_data);
            _lock.wait();
          }
 catch (          KeeperException e) {
            if (!_running.get()) {
              LOG.info(""String_Node_Str"",e.getMessage());
              return;
            }
            LOG.error(""String_Node_Str"",e);
            throw new RuntimeException(e);
          }
catch (          InterruptedException e) {
            return;
          }
        }
      }
    }
  }
);
  _watchThread.setName(""String_Node_Str"" + _path + ""String_Node_Str""+ instance+ ""String_Node_Str"");
  _watchThread.setDaemon(true);
  _watchThread.start();
  return this;
}",0.8383838383838383
82481,"public WatchNodeExistance watch(final OnChange onChange){
  _watchThread=new Thread(new Runnable(){
    @Override public void run(){
      startDoubleCheckThread();
      while (_running.get()) {
synchronized (_lock) {
          try {
            Watcher watcher=new Watcher(){
              @Override public void process(              WatchedEvent event){
synchronized (_lock) {
                  _lock.notify();
                }
              }
            }
;
            _stat=_zooKeeper.exists(_path,watcher);
            onChange.action(_stat);
            _lock.wait();
          }
 catch (          KeeperException e) {
            if (!_running.get()) {
              LOG.info(""String_Node_Str"",e.getMessage());
              return;
            }
            LOG.error(""String_Node_Str"",e);
            throw new RuntimeException(e);
          }
catch (          InterruptedException e) {
            return;
          }
        }
      }
    }
  }
);
  _watchThread.setName(""String_Node_Str"" + _path + ""String_Node_Str""+ instance+ ""String_Node_Str"");
  _watchThread.setDaemon(true);
  _watchThread.start();
  return this;
}","public WatchNodeExistance watch(final OnChange onChange){
  _watchThread=new Thread(new Runnable(){
    @Override public void run(){
      Watcher watcher=new Watcher(){
        @Override public void process(        WatchedEvent event){
synchronized (_lock) {
            _lock.notify();
          }
        }
      }
;
      startDoubleCheckThread();
      while (_running.get()) {
synchronized (_lock) {
          try {
            _stat=_zooKeeper.exists(_path,watcher);
            onChange.action(_stat);
            _lock.wait();
          }
 catch (          KeeperException e) {
            if (!_running.get()) {
              LOG.info(""String_Node_Str"",e.getMessage());
              return;
            }
            LOG.error(""String_Node_Str"",e);
            throw new RuntimeException(e);
          }
catch (          InterruptedException e) {
            return;
          }
        }
      }
    }
  }
);
  _watchThread.setName(""String_Node_Str"" + _path + ""String_Node_Str""+ instance+ ""String_Node_Str"");
  _watchThread.setDaemon(true);
  _watchThread.start();
  return this;
}",0.8707360861759426
82482,"private void updateOnlineControllers(List<String> controllers) throws KeeperException, InterruptedException {
  for (  String controller : controllers) {
    String blurVersion=""String_Node_Str"";
    byte[] b=this.zookeeper.getData(""String_Node_Str"",false,null);
    if (b != null && b.length > 0) {
      blurVersion=new String(b);
    }
    this.database.updateOnlineController(controller,zookeeperId,blurVersion);
  }
}","private void updateOnlineControllers(List<String> controllers) throws KeeperException, InterruptedException {
  for (  String controller : controllers) {
    String blurVersion=""String_Node_Str"";
    byte[] b=this.zookeeper.getData(""String_Node_Str"" + controller,false,null);
    if (b != null && b.length > 0) {
      blurVersion=new String(b);
    }
    this.database.updateOnlineController(controller,zookeeperId,blurVersion);
  }
}",0.9848308051341892
82483,"private void updateOnlineShards(List<String> shards) throws KeeperException, InterruptedException {
  for (  String shard : shards) {
    String blurVersion=""String_Node_Str"";
    byte[] b=this.zookeeper.getData(""String_Node_Str"" + clusterName + ""String_Node_Str"",false,null);
    if (b != null && b.length > 0) {
      blurVersion=new String(b);
    }
    this.database.updateOnlineShard(shard,this.clusterId,blurVersion);
  }
}","private void updateOnlineShards(List<String> shards) throws KeeperException, InterruptedException {
  for (  String shard : shards) {
    String blurVersion=""String_Node_Str"";
    byte[] b=this.zookeeper.getData(""String_Node_Str"" + clusterName + ""String_Node_Str""+ shard,false,null);
    if (b != null && b.length > 0) {
      blurVersion=new String(b);
    }
    this.database.updateOnlineShard(shard,this.clusterId,blurVersion);
  }
}",0.991907514450867
82484,"private void setupCleaners(JdbcTemplate jdbc,List<String> activeCollectors){
  new Thread(new AgentCleaners(activeCollectors,jdbc)).start();
}","private void setupCleaners(JdbcTemplate jdbc,List<String> activeCollectors){
  new Thread(new AgentCleaners(activeCollectors,new CleanerDatabaseConnection(jdbc)),""String_Node_Str"").start();
}",0.8528528528528528
82485,"private void setupBlur(Properties props,JdbcTemplate jdbc,List<String> activeCollectors){
  Map<String,String> blurInstances=loadBlurInstances(props);
  for (  Map.Entry<String,String> blurEntry : blurInstances.entrySet()) {
    final String zookeeperName=blurEntry.getKey();
    final String connection=blurEntry.getValue();
    new Thread(new BlurCollector(zookeeperName,connection,activeCollectors,new BlurDatabaseConnection(jdbc),jdbc)).start();
  }
}","private void setupBlur(Properties props,JdbcTemplate jdbc,List<String> activeCollectors){
  Map<String,String> blurInstances=loadBlurInstances(props);
  for (  Map.Entry<String,String> blurEntry : blurInstances.entrySet()) {
    final String zookeeperName=blurEntry.getKey();
    final String connection=blurEntry.getValue();
    new Thread(new BlurCollector(zookeeperName,connection,activeCollectors,new BlurDatabaseConnection(jdbc),jdbc),""String_Node_Str"" + zookeeperName).start();
  }
}",0.9639830508474576
82486,"private void setupHdfs(Properties props,final JdbcTemplate jdbc,List<String> activeCollectors){
  Map<String,Map<String,String>> hdfsInstances=loadHdfsInstances(props);
  for (  Map<String,String> instance : hdfsInstances.values()) {
    final String name=instance.get(""String_Node_Str"");
    final String thriftUri=instance.get(""String_Node_Str"");
    final String defaultUri=instance.get(""String_Node_Str"");
    final String user=props.getProperty(""String_Node_Str"" + name + ""String_Node_Str"");
    try {
      new Thread(new HdfsCollector(name,defaultUri,thriftUri,user,activeCollectors,new HdfsDatabaseConnection(jdbc))).start();
    }
 catch (    HdfsThreadException e) {
      log.error(""String_Node_Str"" + name + ""String_Node_Str"");
      continue;
    }
  }
}","private void setupHdfs(Properties props,final JdbcTemplate jdbc,List<String> activeCollectors){
  Map<String,Map<String,String>> hdfsInstances=loadHdfsInstances(props);
  for (  Map<String,String> instance : hdfsInstances.values()) {
    final String name=instance.get(""String_Node_Str"");
    final String thriftUri=instance.get(""String_Node_Str"");
    final String defaultUri=instance.get(""String_Node_Str"");
    final String user=props.getProperty(""String_Node_Str"" + name + ""String_Node_Str"");
    try {
      new Thread(new HdfsCollector(name,defaultUri,thriftUri,user,activeCollectors,new HdfsDatabaseConnection(jdbc)),""String_Node_Str"" + name).start();
    }
 catch (    HdfsThreadException e) {
      log.error(""String_Node_Str"" + name + ""String_Node_Str"");
      continue;
    }
  }
}",0.9839640795381654
82487,"@Override public void run(){
  while (true) {
    String resolvedConnection=getResolvedConnection();
    Iface blurConnection=BlurClient.getClient(resolvedConnection);
    int zookeeperId=getZookeeperId();
    for (    Map<String,Object> cluster : this.database.getClusters(zookeeperId)) {
      String clusterName=(String)cluster.get(""String_Node_Str"");
      Integer clusterId=(Integer)cluster.get(""String_Node_Str"");
      List<String> tables;
      try {
        tables=blurConnection.tableListByCluster(clusterName);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + clusterName + ""String_Node_Str"",e);
        continue;
      }
      for (      final String tableName : tables) {
        int tableId=this.database.getTableId(clusterId,tableName);
        if (this.collectTables) {
          new Thread(new TableCollector(BlurClient.getClient(resolvedConnection),tableName,tableId,this.database),""String_Node_Str"" + this.zookeeperName).start();
        }
        if (this.collectQueries) {
          new Thread(new QueryCollector(BlurClient.getClient(resolvedConnection),tableName,tableId,this.database),""String_Node_Str"" + this.zookeeperName).start();
        }
      }
    }
    try {
      Thread.sleep(Agent.COLLECTOR_SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
}","@Override public void run(){
  while (true) {
    String resolvedConnection=getResolvedConnection();
    Iface blurConnection=BlurClient.getClient(resolvedConnection);
    int zookeeperId=getZookeeperId();
    for (    Map<String,Object> cluster : this.database.getClusters(zookeeperId)) {
      String clusterName=(String)cluster.get(""String_Node_Str"");
      Integer clusterId=(Integer)cluster.get(""String_Node_Str"");
      List<String> tables;
      try {
        tables=blurConnection.tableListByCluster(clusterName);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + clusterName + ""String_Node_Str"",e);
        continue;
      }
      for (      final String tableName : tables) {
        int tableId=this.database.getTableId(clusterId,tableName);
        if (this.collectTables) {
          new Thread(new TableCollector(BlurClient.getClient(resolvedConnection),tableName,tableId,this.database),""String_Node_Str"" + tableName).start();
        }
        if (this.collectQueries) {
          new Thread(new QueryCollector(BlurClient.getClient(resolvedConnection),tableName,tableId,this.database),""String_Node_Str"" + tableName).start();
        }
      }
    }
    try {
      Thread.sleep(Agent.COLLECTOR_SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
}",0.9871601208459214
82488,"@Override public void run(){
  try {
    TableDescriptor descriptor;
    try {
      descriptor=blurConnection.describe(tableName);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
      return;
    }
    if (descriptor.isEnabled) {
      new Thread(new SchemaCollector(this.blurConnection,this.tableName,this.tableId,descriptor,this.database)).start();
    }
    new Thread(new ServerCollector(this.blurConnection,this.tableName,this.tableId,this.database)).start();
    new Thread(new StatsCollector(this.blurConnection,this.tableName,this.tableId,this.database)).start();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    TableDescriptor descriptor;
    try {
      descriptor=blurConnection.describe(tableName);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
      return;
    }
    if (descriptor.isEnabled) {
      new Thread(new SchemaCollector(this.blurConnection,this.tableName,this.tableId,descriptor,this.database),""String_Node_Str"" + this.tableName).start();
    }
    new Thread(new ServerCollector(this.blurConnection,this.tableName,this.tableId,this.database),""String_Node_Str"" + this.tableName).start();
    new Thread(new StatsCollector(this.blurConnection,this.tableName,this.tableId,this.database),""String_Node_Str"" + this.tableName).start();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9301397205588824
82489,"@Override public void run(){
  List<String> onlineClusters;
  try {
    onlineClusters=zookeeper.getChildren(""String_Node_Str"",false);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return;
  }
  for (  String cluster : onlineClusters) {
    try {
      boolean safeMode=isClusterInSafeMode(cluster);
      int clusterId=this.database.insertOrUpdateCluster(safeMode,cluster,zookeeperId);
      new Thread(new ShardCollector(clusterId,cluster,this.zookeeper,this.database)).start();
      new Thread(new TableCollector(clusterId,cluster,this.zookeeper,this.database)).start();
    }
 catch (    KeeperException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  List<String> onlineClusters;
  try {
    onlineClusters=zookeeper.getChildren(""String_Node_Str"",false);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return;
  }
  for (  String cluster : onlineClusters) {
    try {
      boolean safeMode=isClusterInSafeMode(cluster);
      int clusterId=this.database.insertOrUpdateCluster(safeMode,cluster,zookeeperId);
      new Thread(new ShardCollector(clusterId,cluster,this.zookeeper,this.database),""String_Node_Str"" + cluster).start();
      new Thread(new TableCollector(clusterId,cluster,this.zookeeper,this.database),""String_Node_Str"" + cluster).start();
    }
 catch (    KeeperException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.9647798742138364
82490,"@Override public void run(){
  while (true) {
    this.latch=new CountDownLatch(1);
    if (this.zookeeper == null) {
      try {
        this.zookeeper=new ZooKeeper(this.url,3000,new Watcher(){
          @Override public void process(          WatchedEvent event){
            KeeperState state=event.getState();
            if (state == KeeperState.Disconnected || state == KeeperState.Expired) {
              log.warn(""String_Node_Str"" + name + ""String_Node_Str"");
              closeZookeeper();
            }
 else             if (state == KeeperState.SyncConnected) {
              latch.countDown();
              log.info(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
);
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + this.name + ""String_Node_Str"");
        closeZookeeper();
        try {
          Thread.sleep(30000);
          continue;
        }
 catch (        InterruptedException ex) {
          log.info(""String_Node_Str"" + this.name + ""String_Node_Str"");
          return;
        }
      }
    }
    try {
      if (latch.await(10,TimeUnit.SECONDS)) {
        this.database.setZookeeperOnline(this.id);
        new Thread(new ControllerCollector(this.id,this.zookeeper,this.database)).start();
        new Thread(new ClusterCollector(this.id,this.zookeeper,this.database)).start();
      }
 else {
        closeZookeeper();
      }
    }
 catch (    InterruptedException e) {
      closeZookeeper();
    }
    try {
      Thread.sleep(Agent.COLLECTOR_SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      log.info(""String_Node_Str"" + this.name + ""String_Node_Str"");
      return;
    }
  }
}","@Override public void run(){
  while (true) {
    try {
      this.latch=new CountDownLatch(1);
      if (this.zookeeper != null) {
        try {
          this.zookeeper.close();
        }
 catch (        InterruptedException e) {
        }
      }
      this.zookeeper=new ZooKeeper(this.url,3000,new Watcher(){
        @Override public void process(        WatchedEvent event){
          KeeperState state=event.getState();
          if (state == KeeperState.Disconnected || state == KeeperState.Expired) {
            log.warn(""String_Node_Str"" + name + ""String_Node_Str"");
            closeZookeeper();
          }
 else           if (state == KeeperState.SyncConnected) {
            latch.countDown();
            log.info(""String_Node_Str"" + name + ""String_Node_Str"");
          }
        }
      }
);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + this.name + ""String_Node_Str"");
      closeZookeeper();
      try {
        Thread.sleep(30000);
        continue;
      }
 catch (      InterruptedException ex) {
        log.info(""String_Node_Str"" + this.name + ""String_Node_Str"");
        return;
      }
    }
    try {
      if (latch.await(10,TimeUnit.SECONDS)) {
        this.database.setZookeeperOnline(this.id);
        Thread controllerThread=new Thread(new ControllerCollector(this.id,this.zookeeper,this.database));
        Thread clusterThread=new Thread(new ClusterCollector(this.id,this.zookeeper,this.database));
        controllerThread.start();
        clusterThread.start();
        controllerThread.join();
        clusterThread.join();
      }
 else {
        closeZookeeper();
      }
    }
 catch (    InterruptedException e) {
      closeZookeeper();
    }
    try {
      Thread.sleep(Agent.COLLECTOR_SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      log.info(""String_Node_Str"" + this.name + ""String_Node_Str"");
      return;
    }
  }
}",0.8934038408015585
82491,"private void closeZookeeper(){
  try {
    this.zookeeper.close();
    log.warn(""String_Node_Str"" + this.name + ""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    log.error(""String_Node_Str"" + this.name + ""String_Node_Str"");
  }
 finally {
    this.zookeeper=null;
    this.database.setZookeeperOffline(this.id);
  }
}","private void closeZookeeper(){
  try {
    if (this.zookeeper != null) {
      this.zookeeper.close();
      log.warn(""String_Node_Str"" + this.name + ""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"" + this.name + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    log.error(""String_Node_Str"" + this.name + ""String_Node_Str"");
  }
 finally {
    this.zookeeper=null;
    this.database.setZookeeperOffline(this.id);
  }
}",0.841168996188056
82492,"@Override public void updateOnlineController(String controller,int zookeeperId,String blurVersion){
  int updatedCount=this.jdbc.update(""String_Node_Str"",controller,zookeeperId,blurVersion);
  if (updatedCount == 0) {
    this.jdbc.update(""String_Node_Str"",controller,zookeeperId,blurVersion);
  }
}","@Override public void updateOnlineController(String controller,int zookeeperId,String blurVersion){
  int updatedCount=this.jdbc.update(""String_Node_Str"",blurVersion,controller,zookeeperId);
  if (updatedCount == 0) {
    this.jdbc.update(""String_Node_Str"",controller,zookeeperId,blurVersion);
  }
}",0.959866220735786
82493,"@Override public void run(){
  while (true) {
    String resolvedConnection=getResolvedConnection();
    Iface blurConnection=BlurClient.getClient(resolvedConnection);
    int zookeeperId=getZookeeperId();
    for (    Map<String,Object> cluster : this.database.getClusters(zookeeperId)) {
      String clusterName=(String)cluster.get(""String_Node_Str"");
      Integer clusterId=(Integer)cluster.get(""String_Node_Str"");
      List<String> tables;
      try {
        tables=blurConnection.tableListByCluster(clusterName);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + clusterName + ""String_Node_Str"",e);
        continue;
      }
      for (      final String tableName : tables) {
        int tableId=this.database.getTableId(clusterId,tableName);
        if (this.collectTables) {
          new Thread(new TableCollector(BlurClient.getClient(resolvedConnection),tableName,tableId,this.database),""String_Node_Str"" + tableName).start();
        }
        if (this.collectQueries) {
          new Thread(new QueryCollector(BlurClient.getClient(resolvedConnection),tableName,tableId,this.database),""String_Node_Str"" + tableName).start();
        }
      }
    }
    try {
      Thread.sleep(Agent.COLLECTOR_SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
}","@Override public void run(){
  while (true) {
    String resolvedConnection=getResolvedConnection();
    Iface blurConnection=BlurClient.getClient(resolvedConnection);
    int zookeeperId=getZookeeperId();
    for (    Map<String,Object> cluster : this.database.getClusters(zookeeperId)) {
      String clusterName=(String)cluster.get(""String_Node_Str"");
      Integer clusterId=(Integer)cluster.get(""String_Node_Str"");
      List<String> tables;
      try {
        tables=blurConnection.tableListByCluster(clusterName);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + clusterName + ""String_Node_Str"",e);
        continue;
      }
      for (      final String tableName : tables) {
        int tableId=this.database.getTableId(clusterId,tableName);
        if (tableId == -1) {
          continue;
        }
        if (this.collectTables) {
          new Thread(new TableCollector(BlurClient.getClient(resolvedConnection),tableName,tableId,this.database),""String_Node_Str"" + tableName).start();
        }
        if (this.collectQueries) {
          new Thread(new QueryCollector(BlurClient.getClient(resolvedConnection),tableName,tableId,this.database),""String_Node_Str"" + tableName).start();
        }
      }
    }
    try {
      Thread.sleep(Agent.COLLECTOR_SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
}",0.978058757902566
82494,"@Override public void run(){
  List<Long> currentQueries;
  try {
    currentQueries=blurConnection.queryStatusIdList(tableName);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
    return;
  }
  for (  Long queryUUID : currentQueries) {
    BlurQueryStatus status;
    try {
      status=blurConnection.queryStatusById(tableName,queryUUID);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
      continue;
    }
    Map<String,Object> oldQuery=this.database.getQuery(queryUUID);
    String times;
    try {
      times=new ObjectMapper().writeValueAsString(status.getCpuTimes());
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      times=null;
    }
    if (oldQuery == null) {
      SimpleQuery query=status.getQuery().getSimpleQuery();
      long startTimeLong=status.getQuery().getStartTime();
      Date startTime=(startTimeLong > 0) ? TimeHelper.getAdjustedTime(startTimeLong).getTime() : TimeHelper.now().getTime();
      this.database.createQuery(status,query,times,startTime.getTime(),this.tableId);
    }
 else     if (queryHasChanged(status,times,oldQuery)) {
      this.database.updateQuery(status,times,(Integer)oldQuery.get(""String_Node_Str""));
    }
  }
}","@Override public void run(){
  List<Long> currentQueries;
  try {
    currentQueries=blurConnection.queryStatusIdList(tableName);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
    return;
  }
  for (  Long queryUUID : currentQueries) {
    BlurQueryStatus status;
    try {
      status=blurConnection.queryStatusById(tableName,queryUUID);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
      continue;
    }
    Map<String,Object> oldQuery=this.database.getQuery(this.tableId,queryUUID);
    String times;
    try {
      times=new ObjectMapper().writeValueAsString(status.getCpuTimes());
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      times=null;
    }
    if (oldQuery == null) {
      SimpleQuery query=status.getQuery().getSimpleQuery();
      long startTimeLong=status.getQuery().getStartTime();
      Date startTime=(startTimeLong > 0) ? TimeHelper.getAdjustedTime(startTimeLong).getTime() : TimeHelper.now().getTime();
      this.database.createQuery(status,query,times,startTime,this.tableId);
    }
 else     if (queryHasChanged(status,times,oldQuery)) {
      this.database.updateQuery(status,times,(Integer)oldQuery.get(""String_Node_Str""));
    }
  }
}",0.991150442477876
82495,"@Override public void run(){
  try {
    int hdfsId=this.database.getHdfsId(this.hdfsName);
    FileSystem fileSystem=(this.user != null) ? FileSystem.get(this.uri,new Configuration(),this.user) : FileSystem.get(this.uri,new Configuration());
    if (fileSystem instanceof DistributedFileSystem) {
      DistributedFileSystem dfs=(DistributedFileSystem)fileSystem;
      FsStatus ds=dfs.getStatus();
      long capacity=ds.getCapacity();
      long used=ds.getUsed();
      long logical_used=used / dfs.getDefaultReplication();
      long remaining=ds.getRemaining();
      long presentCapacity=used + remaining;
      long liveNodes=-1;
      long deadNodes=-1;
      long totalNodes=-1;
      try {
        DatanodeInfo[] live=dfs.getClient().datanodeReport(DatanodeReportType.LIVE);
        DatanodeInfo[] dead=dfs.getClient().datanodeReport(DatanodeReportType.DEAD);
        liveNodes=live.length;
        deadNodes=dead.length;
        totalNodes=liveNodes + deadNodes;
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"");
      }
      Calendar cal=Calendar.getInstance();
      TimeZone z=cal.getTimeZone();
      cal.add(Calendar.MILLISECOND,-(z.getOffset(cal.getTimeInMillis())));
      this.database.insertHdfsStats(capacity,presentCapacity,remaining,used,logical_used,(((1.0 * used) / presentCapacity) * 100),dfs.getUnderReplicatedBlocksCount(),dfs.getCorruptBlocksCount(),dfs.getMissingBlocksCount(),totalNodes,liveNodes,deadNodes,cal.getTime(),host,port,hdfsId);
      dfs.close();
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  DataAccessException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  NullReturnedException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    int hdfsId=this.database.getHdfsId(this.hdfsName);
    if (hdfsId == -1) {
      log.error(""String_Node_Str"" + this.hdfsName + ""String_Node_Str"");
      return;
    }
    FileSystem fileSystem=(this.user != null) ? FileSystem.get(this.uri,new Configuration(),this.user) : FileSystem.get(this.uri,new Configuration());
    if (fileSystem instanceof DistributedFileSystem) {
      DistributedFileSystem dfs=(DistributedFileSystem)fileSystem;
      FsStatus ds=dfs.getStatus();
      long capacity=ds.getCapacity();
      long used=ds.getUsed();
      long logical_used=used / dfs.getDefaultReplication();
      long remaining=ds.getRemaining();
      long presentCapacity=used + remaining;
      long liveNodes=-1;
      long deadNodes=-1;
      long totalNodes=-1;
      try {
        DatanodeInfo[] live=dfs.getClient().datanodeReport(DatanodeReportType.LIVE);
        DatanodeInfo[] dead=dfs.getClient().datanodeReport(DatanodeReportType.DEAD);
        liveNodes=live.length;
        deadNodes=dead.length;
        totalNodes=liveNodes + deadNodes;
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"");
      }
      this.database.insertHdfsStats(capacity,presentCapacity,remaining,used,logical_used,(((1.0 * used) / presentCapacity) * 100),dfs.getUnderReplicatedBlocksCount(),dfs.getCorruptBlocksCount(),dfs.getMissingBlocksCount(),totalNodes,liveNodes,deadNodes,TimeHelper.now().getTime(),host,port,hdfsId);
      dfs.close();
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  DataAccessException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  NullReturnedException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9193863319386332
82496,"public void createQuery(BlurQueryStatus status,SimpleQuery query,String times,long startTime,int tableId){
  this.jdbc.update(""String_Node_Str"",query.getQueryStr(),times,status.getCompleteShards(),status.getTotalShards(),status.getState().getValue(),status.getUuid(),startTime,TimeHelper.now().getTime(),tableId,query.isSuperQueryOn(),StringUtils.join(status.getQuery().getFacets(),""String_Node_Str""),status.getQuery().getStart(),status.getQuery().getFetch(),query.getPreSuperFilter(),query.getPostSuperFilter(),status.getQuery().getSelector() == null ? null : JSONValue.toJSONString(status.getQuery().getSelector().getColumnFamiliesToFetch()),status.getQuery().getSelector() == null ? null : JSONValue.toJSONString(status.getQuery().getSelector().getColumnsToFetch()),status.getQuery().getUserContext(),status.getQuery().getSelector() == null ? null : status.getQuery().getSelector().isRecordOnly());
}","public void createQuery(BlurQueryStatus status,SimpleQuery query,String times,Date startTime,int tableId){
  this.jdbc.update(""String_Node_Str"",query.getQueryStr(),times,status.getCompleteShards(),status.getTotalShards(),status.getState().getValue(),status.getUuid(),startTime,TimeHelper.now().getTime(),tableId,query.isSuperQueryOn(),StringUtils.join(status.getQuery().getFacets(),""String_Node_Str""),status.getQuery().getStart(),status.getQuery().getFetch(),query.getPreSuperFilter(),query.getPostSuperFilter(),status.getQuery().getSelector() == null ? null : JSONValue.toJSONString(status.getQuery().getSelector().getColumnFamiliesToFetch()),status.getQuery().getSelector() == null ? null : JSONValue.toJSONString(status.getQuery().getSelector().getColumnsToFetch()),status.getQuery().getUserContext(),status.getQuery().getSelector() == null ? null : status.getQuery().getSelector().isRecordOnly());
}",0.9955703211517164
82497,"@Override public int getTableId(int clusterId,String tableName){
  return jdbc.queryForInt(""String_Node_Str"",clusterId,tableName);
}","@Override public int getTableId(int clusterId,String tableName){
  try {
    return jdbc.queryForInt(""String_Node_Str"",clusterId,tableName);
  }
 catch (  IncorrectResultSizeDataAccessException e) {
    return -1;
  }
}",0.7521367521367521
82498,"public Map<String,Object> getQuery(long UUID){
  return this.jdbc.queryForMap(""String_Node_Str"",UUID);
}","public Map<String,Object> getQuery(int tableId,long UUID){
  try {
    return this.jdbc.queryForMap(""String_Node_Str"",tableId,UUID);
  }
 catch (  IncorrectResultSizeDataAccessException e) {
    return null;
  }
}",0.6561514195583596
82499,"void createQuery(BlurQueryStatus status,SimpleQuery query,String times,long startTime,int tableId);","void createQuery(BlurQueryStatus status,SimpleQuery query,String times,Date startTime,int tableId);",0.9595959595959596
82500,"Map<String,Object> getQuery(long UUID);","Map<String,Object> getQuery(int tableId,long UUID);",0.8666666666666667
82501,"@Override public int getHdfsId(String name) throws NullReturnedException {
  int id=jdbc.queryForInt(""String_Node_Str"",name);
  if (id == 0) {
    throw new NullReturnedException();
  }
  return id;
}","@Override public int getHdfsId(String name) throws NullReturnedException {
  try {
    return jdbc.queryForInt(""String_Node_Str"",name);
  }
 catch (  IncorrectResultSizeDataAccessException e) {
    return -1;
  }
}",0.6859903381642513
82502,"@Override public void run(){
  try {
    Schema schema=null;
    schema=blurConnection.schema(tableName);
    if (schema != null && descriptor != null) {
      throw new NullReturnedException(""String_Node_Str"");
    }
    List<Family> columnDefs=getColumnDefinitions(schema);
    AnalyzerDefinition analyzerDefinition=descriptor.getAnalyzerDefinition();
    if (analyzerDefinition != null) {
      Map<String,ColumnFamilyDefinition> columnFamilyDefinitions=analyzerDefinition.getColumnFamilyDefinitions();
      ColumnDefinition analyzerDefaultDefinition=analyzerDefinition.getDefaultDefinition();
      if (columnFamilyDefinitions == null) {
        for (        Family family : columnDefs) {
          for (          Column column : family.getColumns()) {
            if (analyzerDefaultDefinition == null) {
              column.setAnalyzer(""String_Node_Str"");
            }
 else {
              column.setAnalyzer(analyzerDefaultDefinition.getAnalyzerClassName());
              column.setFullText(analyzerDefaultDefinition.isFullTextIndex());
            }
          }
        }
      }
 else {
        for (        Map.Entry<String,ColumnFamilyDefinition> describeEntry : columnFamilyDefinitions.entrySet()) {
          Family family=new Family(describeEntry.getKey());
          int familyIndex=columnDefs.indexOf(family);
          if (familyIndex == -1) {
            columnDefs.add(family);
          }
 else {
            family=columnDefs.get(familyIndex);
          }
          Map<String,ColumnDefinition> columnDefinitions=describeEntry.getValue().getColumnDefinitions();
          ColumnDefinition columnDefaultDefinition=describeEntry.getValue().getDefaultDefinition();
          if (columnDefinitions == null) {
            for (            Column column : family.getColumns()) {
              if (columnDefaultDefinition == null && analyzerDefaultDefinition == null) {
                column.setAnalyzer(""String_Node_Str"");
              }
 else               if (columnDefaultDefinition == null) {
                column.setAnalyzer(analyzerDefaultDefinition.getAnalyzerClassName());
                column.setFullText(analyzerDefaultDefinition.isFullTextIndex());
              }
 else {
                column.setAnalyzer(columnDefaultDefinition.getAnalyzerClassName());
                column.setFullText(columnDefaultDefinition.isFullTextIndex());
              }
            }
          }
 else {
            for (            Map.Entry<String,ColumnDefinition> columnDescription : columnDefinitions.entrySet()) {
              Column column=new Column(columnDescription.getKey());
              int columnIndex=family.getColumns().indexOf(column);
              if (columnIndex == -1) {
                family.getColumns().add(column);
              }
 else {
                column=family.getColumns().get(columnIndex);
              }
              column.setAnalyzer(columnDescription.getValue().getAnalyzerClassName());
              column.setFullText(columnDescription.getValue().isFullTextIndex());
            }
          }
        }
      }
    }
    this.database.updateTableSchema(this.tableId,new ObjectMapper().writeValueAsString(columnDefs),this.descriptor.getAnalyzerDefinition().getFullTextAnalyzerClassName());
  }
 catch (  BlurException e) {
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
  }
catch (  JsonProcessingException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  DataAccessException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  NullReturnedException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    Schema schema=null;
    schema=blurConnection.schema(tableName);
    if (schema == null || descriptor == null) {
      throw new NullReturnedException(""String_Node_Str"");
    }
    List<Family> columnDefs=getColumnDefinitions(schema);
    AnalyzerDefinition analyzerDefinition=descriptor.getAnalyzerDefinition();
    if (analyzerDefinition != null) {
      Map<String,ColumnFamilyDefinition> columnFamilyDefinitions=analyzerDefinition.getColumnFamilyDefinitions();
      ColumnDefinition analyzerDefaultDefinition=analyzerDefinition.getDefaultDefinition();
      if (columnFamilyDefinitions == null) {
        for (        Family family : columnDefs) {
          for (          Column column : family.getColumns()) {
            if (analyzerDefaultDefinition == null) {
              column.setAnalyzer(""String_Node_Str"");
            }
 else {
              column.setAnalyzer(analyzerDefaultDefinition.getAnalyzerClassName());
              column.setFullText(analyzerDefaultDefinition.isFullTextIndex());
            }
          }
        }
      }
 else {
        for (        Map.Entry<String,ColumnFamilyDefinition> describeEntry : columnFamilyDefinitions.entrySet()) {
          Family family=new Family(describeEntry.getKey());
          int familyIndex=columnDefs.indexOf(family);
          if (familyIndex == -1) {
            columnDefs.add(family);
          }
 else {
            family=columnDefs.get(familyIndex);
          }
          Map<String,ColumnDefinition> columnDefinitions=describeEntry.getValue().getColumnDefinitions();
          ColumnDefinition columnDefaultDefinition=describeEntry.getValue().getDefaultDefinition();
          if (columnDefinitions == null) {
            for (            Column column : family.getColumns()) {
              if (columnDefaultDefinition == null && analyzerDefaultDefinition == null) {
                column.setAnalyzer(""String_Node_Str"");
              }
 else               if (columnDefaultDefinition == null) {
                column.setAnalyzer(analyzerDefaultDefinition.getAnalyzerClassName());
                column.setFullText(analyzerDefaultDefinition.isFullTextIndex());
              }
 else {
                column.setAnalyzer(columnDefaultDefinition.getAnalyzerClassName());
                column.setFullText(columnDefaultDefinition.isFullTextIndex());
              }
            }
          }
 else {
            for (            Map.Entry<String,ColumnDefinition> columnDescription : columnDefinitions.entrySet()) {
              Column column=new Column(columnDescription.getKey());
              int columnIndex=family.getColumns().indexOf(column);
              if (columnIndex == -1) {
                family.getColumns().add(column);
              }
 else {
                column=family.getColumns().get(columnIndex);
              }
              column.setAnalyzer(columnDescription.getValue().getAnalyzerClassName());
              column.setFullText(columnDescription.getValue().isFullTextIndex());
            }
          }
        }
      }
    }
    this.database.updateTableSchema(this.tableId,new ObjectMapper().writeValueAsString(columnDefs),this.descriptor.getAnalyzerDefinition().getFullTextAnalyzerClassName());
  }
 catch (  BlurException e) {
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
  }
catch (  JsonProcessingException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  DataAccessException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  NullReturnedException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9972595231570294
82503,"private void setupZookeeper(Properties props,JdbcTemplate jdbc){
  if (props.containsKey(""String_Node_Str"")) {
    List<String> zooKeeperInstances=new ArrayList<String>(Arrays.asList(props.getProperty(""String_Node_Str"").split(""String_Node_Str"")));
    for (    String zkInstance : zooKeeperInstances) {
      String zkUrl=props.getProperty(""String_Node_Str"" + zkInstance + ""String_Node_Str"");
      new Thread(new ZookeeperCollector(zkInstance,zkUrl,new ZookeeperDatabaseConnection(jdbc)),""String_Node_Str"" + zkInstance).start();
    }
  }
}","private void setupZookeeper(Properties props,JdbcTemplate jdbc){
  if (props.containsKey(""String_Node_Str"")) {
    List<String> zooKeeperInstances=new ArrayList<String>(Arrays.asList(props.getProperty(""String_Node_Str"").split(""String_Node_Str"")));
    for (    String zkInstance : zooKeeperInstances) {
      String zkUrl=props.getProperty(""String_Node_Str"" + zkInstance + ""String_Node_Str"");
      String blurConnection=props.getProperty(""String_Node_Str"" + zkInstance + ""String_Node_Str"");
      new Thread(new ZookeeperCollector(zkUrl,zkInstance,blurConnection,new ZookeeperDatabaseConnection(jdbc)),""String_Node_Str"" + zkInstance).start();
    }
  }
}",0.8963210702341137
82504,"public ZookeeperCollector(String url,String name,ZookeeperDatabaseInterface database){
  this.url=url;
  this.name=name;
  this.database=database;
  this.id=database.getZookeeperId(name);
}","public ZookeeperCollector(String url,String name,String blurConnection,ZookeeperDatabaseInterface database){
  this.url=url;
  this.name=name;
  this.database=database;
  this.id=database.insertOrUpdateZookeeper(name,url,blurConnection);
}",0.8598130841121495
82505,"private void closeZookeeper(){
  try {
    this.zookeeper.close();
    log.warn(""String_Node_Str"" + this.name + ""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    log.error(""String_Node_Str"" + this.name + ""String_Node_Str"");
  }
 finally {
    this.zookeeper=null;
    this.database.setZookeeperOffline(id);
  }
}","private void closeZookeeper(){
  try {
    this.zookeeper.close();
    log.warn(""String_Node_Str"" + this.name + ""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    log.error(""String_Node_Str"" + this.name + ""String_Node_Str"");
  }
 finally {
    this.zookeeper=null;
    this.database.setZookeeperOffline(this.id);
  }
}",0.9923896499238964
82506,"@Override public void run(){
  while (true) {
    this.latch=new CountDownLatch(1);
    if (this.zookeeper == null) {
      try {
        this.zookeeper=new ZooKeeper(url,3000,new Watcher(){
          @Override public void process(          WatchedEvent event){
            KeeperState state=event.getState();
            if (state == KeeperState.Disconnected || state == KeeperState.Expired) {
              log.warn(""String_Node_Str"" + name + ""String_Node_Str"");
              closeZookeeper();
            }
 else             if (state == KeeperState.SyncConnected) {
              latch.countDown();
              log.info(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
);
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + this.name + ""String_Node_Str"");
        closeZookeeper();
        try {
          Thread.sleep(30000);
          continue;
        }
 catch (        InterruptedException ex) {
          log.info(""String_Node_Str"" + this.name + ""String_Node_Str"");
          return;
        }
      }
    }
    try {
      if (latch.await(10,TimeUnit.SECONDS)) {
        this.database.setZookeeperOnline(this.id);
        new Thread(new ControllerCollector(this.id,this.zookeeper,this.database)).start();
        new Thread(new ClusterCollector(this.id,this.zookeeper,this.database)).start();
      }
 else {
        closeZookeeper();
      }
    }
 catch (    InterruptedException e) {
      closeZookeeper();
    }
    try {
      Thread.sleep(Agent.COLLECTOR_SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      log.info(""String_Node_Str"" + this.name + ""String_Node_Str"");
      return;
    }
  }
}","@Override public void run(){
  while (true) {
    this.latch=new CountDownLatch(1);
    if (this.zookeeper == null) {
      try {
        this.zookeeper=new ZooKeeper(this.url,3000,new Watcher(){
          @Override public void process(          WatchedEvent event){
            KeeperState state=event.getState();
            if (state == KeeperState.Disconnected || state == KeeperState.Expired) {
              log.warn(""String_Node_Str"" + name + ""String_Node_Str"");
              closeZookeeper();
            }
 else             if (state == KeeperState.SyncConnected) {
              latch.countDown();
              log.info(""String_Node_Str"" + name + ""String_Node_Str"");
            }
          }
        }
);
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + this.name + ""String_Node_Str"");
        closeZookeeper();
        try {
          Thread.sleep(30000);
          continue;
        }
 catch (        InterruptedException ex) {
          log.info(""String_Node_Str"" + this.name + ""String_Node_Str"");
          return;
        }
      }
    }
    try {
      if (latch.await(10,TimeUnit.SECONDS)) {
        this.database.setZookeeperOnline(this.id);
        new Thread(new ControllerCollector(this.id,this.zookeeper,this.database)).start();
        new Thread(new ClusterCollector(this.id,this.zookeeper,this.database)).start();
      }
 else {
        closeZookeeper();
      }
    }
 catch (    InterruptedException e) {
      closeZookeeper();
    }
    try {
      Thread.sleep(Agent.COLLECTOR_SLEEP_TIME);
    }
 catch (    InterruptedException e) {
      log.info(""String_Node_Str"" + this.name + ""String_Node_Str"");
      return;
    }
  }
}",0.9985167606051616
82507,"@Override public void run(){
  List<Long> currentQueries;
  try {
    currentQueries=blurConnection.queryStatusIdList(tableName);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
    return;
  }
  for (  Long queryUUID : currentQueries) {
    BlurQueryStatus status;
    try {
      status=blurConnection.queryStatusById(tableName,queryUUID);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
      continue;
    }
    Map<String,Object> oldQuery=this.database.getQuery(this.tableId,queryUUID);
    String times;
    try {
      times=new ObjectMapper().writeValueAsString(status.getCpuTimes());
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      times=null;
    }
    if (oldQuery == null) {
      SimpleQuery query=status.getQuery().getSimpleQuery();
      long startTimeLong=status.getQuery().getStartTime();
      Date startTime=(startTimeLong > 0) ? TimeHelper.getAdjustedTime(startTimeLong).getTime() : TimeHelper.now().getTime();
      this.database.createQuery(status,query,times,startTime,this.tableId);
    }
 else     if (queryHasChanged(status,times,oldQuery)) {
      this.database.updateQuery(status,times,(Integer)oldQuery.get(""String_Node_Str""));
    }
  }
}","@Override public void run(){
  Set<Long> currentQueries=new HashSet<Long>();
  try {
    currentQueries.addAll(blurConnection.queryStatusIdList(tableName));
    currentQueries.addAll(this.database.getRunningQueries());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
    return;
  }
  for (  Long queryUUID : currentQueries) {
    BlurQueryStatus status;
    try {
      status=blurConnection.queryStatusById(tableName,queryUUID);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
      continue;
    }
    Map<String,Object> oldQuery=this.database.getQuery(this.tableId,queryUUID);
    String times;
    try {
      times=new ObjectMapper().writeValueAsString(status.getCpuTimes());
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      times=null;
    }
    if (oldQuery == null) {
      SimpleQuery query=status.getQuery().getSimpleQuery();
      long startTimeLong=status.getQuery().getStartTime();
      Date startTime=(startTimeLong > 0) ? TimeHelper.getAdjustedTime(startTimeLong).getTime() : TimeHelper.now().getTime();
      this.database.createQuery(status,query,times,startTime,this.tableId);
    }
 else     if (queryHasChanged(status,times,oldQuery)) {
      this.database.updateQuery(status,times,(Integer)oldQuery.get(""String_Node_Str""));
    }
  }
}",0.9639539204756596
82508,"@Test public void testFacetQueryNoSuper() throws IOException {
  BooleanQuery bq=new BooleanQuery();
  bq.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.SHOULD);
  bq.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.SHOULD);
  Query f1=new TermQuery(new Term(""String_Node_Str"",""String_Node_Str""));
  BooleanQuery f2=new BooleanQuery();
  f2.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
  f2.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
  Query[] facets=new Query[]{f1,f2};
  AtomicLongArray counts=new AtomicLongArray(facets.length);
  FacetQuery facetQuery=new FacetQuery(bq,facets,counts);
  IndexSearcher indexSearcher=new IndexSearcher(reader);
  TopDocs topDocs=indexSearcher.search(facetQuery,10);
  for (int i=0; i < counts.length(); i++) {
    System.out.println(counts.get(i));
  }
}","@Test public void testFacetQueryNoSuper() throws IOException {
  BooleanQuery bq=new BooleanQuery();
  bq.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.SHOULD);
  bq.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.SHOULD);
  Query f1=new TermQuery(new Term(""String_Node_Str"",""String_Node_Str""));
  BooleanQuery f2=new BooleanQuery();
  f2.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
  f2.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
  Query[] facets=new Query[]{f1,f2};
  AtomicLongArray counts=new AtomicLongArray(facets.length);
  FacetQuery facetQuery=new FacetQuery(bq,facets,counts);
  IndexSearcher indexSearcher=new IndexSearcher(reader);
  indexSearcher.search(facetQuery,10);
  for (int i=0; i < counts.length(); i++) {
    System.out.println(counts.get(i));
  }
}",0.9910714285714286
82509,"public TableCollector(Iface connection,String zookeeperName,TableDatabaseInterface database){
  this.connection=connection;
  this.zookeeper=zookeeperName;
  this.database=database;
}","public TableCollector(Iface connection,String zookeeperName,BlurDatabaseInterface blurDatabase,TableDatabaseInterface database){
  this.blurConnection=connection;
  this.zookeeper=zookeeperName;
  this.blurDatabase=blurDatabase;
  this.database=database;
}",0.8291571753986332
82510,"@Override public void run(){
  try {
    log.debug(""String_Node_Str"");
    String zookeeperId=this.database.getZookeeperId(this.zookeeper);
    List<Map<String,Object>> clusters=this.database.getClusters(zookeeperId);
    for (    Map<String,Object> cluster : clusters) {
      String clusterName=(String)cluster.get(""String_Node_Str"");
      Integer clusterId=(Integer)cluster.get(""String_Node_Str"");
      List<String> tables=connection.tableListByCluster(clusterName);
      if (tables == null) {
        throw new NullReturnedException(""String_Node_Str"" + clusterName + ""String_Node_Str"");
      }
      for (      final String tableName : tables) {
        TableDescriptor descriptor=connection.describe(tableName);
        if (descriptor == null) {
          log.error(""String_Node_Str"" + tableName + ""String_Node_Str"");
          continue;
        }
        Map<String,Object> existingTable=this.database.getExistingTable(tableName,clusterId);
        Map<String,Object> tableInfo=new HashMap<String,Object>();
        tableInfo.put(""String_Node_Str"",existingTable.get(""String_Node_Str""));
        tableInfo.put(""String_Node_Str"",descriptor.isEnabled);
        TableMap.getInstance().put(tableName + ""String_Node_Str"" + clusterName,tableInfo);
        if (descriptor.isEnabled) {
          new Thread(new SchemaCollector(this.connection,tableName,clusterId,descriptor,this.database)).start();
        }
        new Thread(new ServerCollector(connection,tableName,clusterId,this.database)).start();
        new Thread(new StatsCollector(connection,tableName,clusterId,this.database)).start();
      }
    }
  }
 catch (  ZookeeperNameCollisionException e) {
    log.error(e.getMessage(),e);
  }
catch (  ZookeeperNameMissingException e) {
    log.error(e.getMessage(),e);
  }
catch (  TableMissingException e) {
    log.error(e.getMessage(),e);
  }
catch (  TableCollisionException e) {
    log.error(e.getMessage(),e);
  }
catch (  NullReturnedException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    String zookeeperId;
    try {
      zookeeperId=this.blurDatabase.getZookeeperId(this.zookeeper);
    }
 catch (    ZookeeperNameMissingException e) {
      log.error(e.getMessage(),e);
      return;
    }
catch (    ZookeeperNameCollisionException e) {
      log.error(e.getMessage(),e);
      return;
    }
    for (    Map<String,Object> cluster : this.blurDatabase.getClusters(zookeeperId)) {
      String clusterName=(String)cluster.get(""String_Node_Str"");
      Integer clusterId=(Integer)cluster.get(""String_Node_Str"");
      List<String> tables;
      try {
        tables=blurConnection.tableListByCluster(clusterName);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + clusterName + ""String_Node_Str"",e);
        continue;
      }
      for (      final String tableName : tables) {
        TableDescriptor descriptor;
        try {
          descriptor=blurConnection.describe(tableName);
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"" + tableName + ""String_Node_Str"",e);
          continue;
        }
        Map<String,Object> existingTable;
        try {
          existingTable=this.blurDatabase.getExistingTable(tableName,clusterId);
        }
 catch (        TableMissingException e) {
          log.error(e.getMessage(),e);
          continue;
        }
catch (        TableCollisionException e) {
          log.error(e.getMessage(),e);
          continue;
        }
        Map<String,Object> tableInfo=new HashMap<String,Object>();
        tableInfo.put(""String_Node_Str"",existingTable.get(""String_Node_Str""));
        tableInfo.put(""String_Node_Str"",descriptor.isEnabled);
        TableMap.getInstance().put(tableName + ""String_Node_Str"" + clusterName,tableInfo);
        if (descriptor.isEnabled) {
          new Thread(new SchemaCollector(this.blurConnection,tableName,clusterId,descriptor,this.database)).start();
        }
        new Thread(new ServerCollector(this.blurConnection,tableName,clusterId,this.database)).start();
        new Thread(new StatsCollector(this.blurConnection,tableName,clusterId,this.database)).start();
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}",0.50267131242741
82511,"@Override public int docID(){
  return primeDoc;
}","@Override public int docID(){
  return print(DOC_ID,primeDoc);
}",0.8771929824561403
82512,"@Override public int advance(int target) throws IOException {
  if (target == NO_MORE_DOCS) {
    return scorer.advance(NO_MORE_DOCS);
  }
  int doc=scorer.docID();
  int odoc=doc;
  if (isScorerExhausted(doc)) {
    return primeDoc=doc;
  }
  if (target > doc || doc == -1) {
    doc=scorer.advance(target);
    if (isScorerExhausted(doc)) {
      return primeDoc=doc;
    }
  }
 else   if (isScorerExhausted(doc)) {
    return primeDoc == -1 ? primeDoc=doc : primeDoc;
  }
  int gatherAllHitsSuperDoc=gatherAllHitsSuperDoc(doc);
  return gatherAllHitsSuperDoc;
}","@Override public int advance(int target) throws IOException {
  if (target == NO_MORE_DOCS) {
    return print(ADVANCE,primeDoc=scorer.advance(NO_MORE_DOCS));
  }
  int doc=scorer.docID();
  int odoc=doc;
  if (isScorerExhausted(doc)) {
    return print(ADVANCE,primeDoc=doc);
  }
  if (target > doc || doc == -1) {
    doc=scorer.advance(target);
    if (isScorerExhausted(doc)) {
      return print(ADVANCE,primeDoc=doc);
    }
  }
 else   if (isScorerExhausted(doc)) {
    return print(ADVANCE,primeDoc == -1 ? primeDoc=doc : primeDoc);
  }
  return print(ADVANCE,gatherAllHitsSuperDoc(doc));
}",0.8630490956072352
82513,"@Override public int nextDoc() throws IOException {
  int doc=scorer.docID();
  int odoc=doc;
  if (isScorerExhausted(doc)) {
    return primeDoc=doc;
  }
  if (doc == -1) {
    doc=scorer.nextDoc();
    if (isScorerExhausted(doc)) {
      return primeDoc=doc;
    }
  }
 else   if (isScorerExhausted(doc)) {
    return primeDoc == -1 ? primeDoc=doc : primeDoc;
  }
  int gatherAllHitsSuperDoc=gatherAllHitsSuperDoc(doc);
  return gatherAllHitsSuperDoc;
}","@Override public int nextDoc() throws IOException {
  int doc=scorer.docID();
  int odoc=doc;
  if (isScorerExhausted(doc)) {
    return primeDoc=doc;
  }
  if (doc == -1) {
    doc=scorer.nextDoc();
    if (isScorerExhausted(doc)) {
      return print(NEXT_DOC,primeDoc=doc);
    }
  }
 else   if (isScorerExhausted(doc)) {
    return print(NEXT_DOC,primeDoc == -1 ? primeDoc=doc : primeDoc);
  }
  return print(NEXT_DOC,gatherAllHitsSuperDoc(doc));
}",0.86438809261301
82514,"private void setupData() throws BlurException, IOException {
  RowMutation mutation1=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  RowMutation mutation2=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  RowMutation mutation3=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  RowMutation mutation4=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  RowMutation mutation5=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")),newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  mutation5.waitToBeVisible=true;
  indexManager.mutate(mutation1);
  indexManager.mutate(mutation2);
  indexManager.mutate(mutation3);
  indexManager.mutate(mutation4);
  indexManager.mutate(mutation5);
}","private void setupData() throws BlurException, IOException {
  RowMutation mutation1=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  RowMutation mutation2=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")),newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  RowMutation mutation3=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  RowMutation mutation4=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")),newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  RowMutation mutation5=newRowMutation(TABLE,""String_Node_Str"",newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")),newRecordMutation(FAMILY,""String_Node_Str"",newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str""),newColumn(""String_Node_Str"",""String_Node_Str"")));
  mutation5.waitToBeVisible=true;
  indexManager.mutate(mutation1);
  indexManager.mutate(mutation2);
  indexManager.mutate(mutation3);
  indexManager.mutate(mutation4);
  indexManager.mutate(mutation5);
}",0.926829268292683
82515,"public static void main(String[] args) throws TTransportException, IOException, KeeperException, InterruptedException, BlurException {
  int serverIndex=getServerIndex(args);
  LOG.info(""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new SimpleUncaughtExceptionHandler());
  BlurConfiguration configuration=new BlurConfiguration();
  int numberOfBlocksPerBank=16384;
  int blockSize=BlockDirectory.BLOCK_SIZE;
  int bankCount=configuration.getInt(BLUR_SHARD_BLOCKCACHE_SLAB_COUNT,1);
  Configuration config=new Configuration();
  BlurMetrics blurMetrics=new BlurMetrics(config);
  boolean directAllocation=configuration.getBoolean(BLUR_SHARD_BLOCKCACHE_DIRECT_MEMORY_ALLOCATION,true);
  int slabSize=numberOfBlocksPerBank * blockSize;
  LOG.info(""String_Node_Str"",bankCount,directAllocation);
  LOG.info(""String_Node_Str"",slabSize,bankCount,((long)bankCount * (long)slabSize));
  BufferStore.init(configuration,blurMetrics);
  BlockCache blockCache;
  try {
    long totalMemory=bankCount * numberOfBlocksPerBank * blockSize;
    blockCache=new BlockCache(blurMetrics,directAllocation,totalMemory,slabSize,blockSize);
  }
 catch (  OutOfMemoryError e) {
    if (""String_Node_Str"".equals(e.getMessage())) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
    throw e;
  }
  BlockDirectoryCache cache=new BlockDirectoryCache(blockCache,blurMetrics);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int bindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  bindPort+=serverIndex;
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + bindPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + bindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr);
  try {
    ZookeeperSystemTime.checkSystemTime(zooKeeper,configuration.getLong(BLUR_ZOOKEEPER_SYSTEM_TIME_TOLERANCE,3000));
  }
 catch (  KeeperException e) {
    if (e.code() == Code.CONNECTIONLOSS) {
      System.err.println(""String_Node_Str"" + zkConnectionStr + ""String_Node_Str"");
      System.exit(1);
    }
  }
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper);
  final BlurIndexRefresher refresher=new BlurIndexRefresher();
  refresher.init();
  BlurFilterCache filterCache=getFilterCache(configuration);
  BlurIndexWarmup indexWarmup=getIndexWarmup(configuration);
  IndexDeletionPolicy indexDeletionPolicy=new TimeBasedIndexDeletionPolicy(configuration.getLong(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,60000));
  final DistributedIndexServer indexServer=new DistributedIndexServer();
  indexServer.setBlurMetrics(blurMetrics);
  indexServer.setCache(cache);
  indexServer.setClusterStatus(clusterStatus);
  indexServer.setConfiguration(config);
  indexServer.setNodeName(nodeName);
  indexServer.setRefresher(refresher);
  indexServer.setShardOpenerThreadCount(configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16));
  indexServer.setZookeeper(zooKeeper);
  indexServer.setFilterCache(filterCache);
  indexServer.setSafeModeDelay(configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000));
  indexServer.setWarmup(indexWarmup);
  indexServer.setIndexDeletionPolicy(indexDeletionPolicy);
  indexServer.setTimeBetweenCommits(configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000));
  indexServer.setTimeBetweenRefreshs(configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,500));
  indexServer.init();
  final IndexManager indexManager=new IndexManager();
  indexManager.setIndexServer(indexServer);
  indexManager.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  indexManager.setThreadCount(configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32));
  indexManager.setBlurMetrics(blurMetrics);
  indexManager.setFilterCache(filterCache);
  indexManager.init();
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setDataFetchThreadCount(configuration.getInt(BLUR_SHARD_DATA_FETCH_THREAD_COUNT,8));
  shardServer.setMaxQueryCacheElements(configuration.getInt(BLUR_SHARD_CACHE_MAX_QUERYCACHE_ELEMENTS,128));
  shardServer.setMaxTimeToLive(configuration.getLong(BLUR_SHARD_CACHE_MAX_TIMETOLIVE,TimeUnit.MINUTES.toMillis(1)));
  shardServer.setQueryChecker(queryChecker);
  shardServer.init();
  Iface iface=BlurUtil.recordMethodCallsAndAverageTimes(blurMetrics,shardServer,Iface.class);
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setBindAddress(bindAddress);
  server.setBindPort(bindPort);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setConfiguration(configuration);
  new BlurServerShutDown().register(new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(refresher,server,shardServer,indexManager,indexServer,threadWatcher);
      System.exit(0);
    }
  }
,zooKeeper);
  server.start();
}","public static void main(String[] args) throws TTransportException, IOException, KeeperException, InterruptedException, BlurException {
  int serverIndex=getServerIndex(args);
  LOG.info(""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new SimpleUncaughtExceptionHandler());
  BlurConfiguration configuration=new BlurConfiguration();
  int numberOfBlocksPerBank=16384;
  int blockSize=BlockDirectory.BLOCK_SIZE;
  int bankCount=configuration.getInt(BLUR_SHARD_BLOCKCACHE_SLAB_COUNT,1);
  Configuration config=new Configuration();
  BlurMetrics blurMetrics=new BlurMetrics(config);
  boolean directAllocation=configuration.getBoolean(BLUR_SHARD_BLOCKCACHE_DIRECT_MEMORY_ALLOCATION,true);
  int slabSize=numberOfBlocksPerBank * blockSize;
  LOG.info(""String_Node_Str"",bankCount,directAllocation);
  LOG.info(""String_Node_Str"",slabSize,bankCount,((long)bankCount * (long)slabSize));
  BufferStore.init(configuration,blurMetrics);
  BlockCache blockCache;
  try {
    long totalMemory=(long)bankCount * (long)numberOfBlocksPerBank * (long)blockSize;
    blockCache=new BlockCache(blurMetrics,directAllocation,totalMemory,slabSize,blockSize);
  }
 catch (  OutOfMemoryError e) {
    if (""String_Node_Str"".equals(e.getMessage())) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
    throw e;
  }
  BlockDirectoryCache cache=new BlockDirectoryCache(blockCache,blurMetrics);
  String bindAddress=configuration.get(BLUR_SHARD_BIND_ADDRESS);
  int bindPort=configuration.getInt(BLUR_SHARD_BIND_PORT,-1);
  bindPort+=serverIndex;
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + bindPort);
  String nodeNameHostName=getNodeName(configuration,BLUR_SHARD_HOSTNAME);
  String nodeName=nodeNameHostName + ""String_Node_Str"" + bindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr);
  try {
    ZookeeperSystemTime.checkSystemTime(zooKeeper,configuration.getLong(BLUR_ZOOKEEPER_SYSTEM_TIME_TOLERANCE,3000));
  }
 catch (  KeeperException e) {
    if (e.code() == Code.CONNECTIONLOSS) {
      System.err.println(""String_Node_Str"" + zkConnectionStr + ""String_Node_Str"");
      System.exit(1);
    }
  }
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper);
  final BlurIndexRefresher refresher=new BlurIndexRefresher();
  refresher.init();
  BlurFilterCache filterCache=getFilterCache(configuration);
  BlurIndexWarmup indexWarmup=getIndexWarmup(configuration);
  IndexDeletionPolicy indexDeletionPolicy=new TimeBasedIndexDeletionPolicy(configuration.getLong(BLUR_SHARD_INDEX_DELETION_POLICY_MAXAGE,60000));
  final DistributedIndexServer indexServer=new DistributedIndexServer();
  indexServer.setBlurMetrics(blurMetrics);
  indexServer.setCache(cache);
  indexServer.setClusterStatus(clusterStatus);
  indexServer.setConfiguration(config);
  indexServer.setNodeName(nodeName);
  indexServer.setRefresher(refresher);
  indexServer.setShardOpenerThreadCount(configuration.getInt(BLUR_SHARD_OPENER_THREAD_COUNT,16));
  indexServer.setZookeeper(zooKeeper);
  indexServer.setFilterCache(filterCache);
  indexServer.setSafeModeDelay(configuration.getLong(BLUR_SHARD_SAFEMODEDELAY,60000));
  indexServer.setWarmup(indexWarmup);
  indexServer.setIndexDeletionPolicy(indexDeletionPolicy);
  indexServer.setTimeBetweenCommits(configuration.getLong(BLUR_SHARD_TIME_BETWEEN_COMMITS,60000));
  indexServer.setTimeBetweenRefreshs(configuration.getLong(BLUR_SHARD_TIME_BETWEEN_REFRESHS,500));
  indexServer.init();
  final IndexManager indexManager=new IndexManager();
  indexManager.setIndexServer(indexServer);
  indexManager.setMaxClauseCount(configuration.getInt(BLUR_MAX_CLAUSE_COUNT,1024));
  indexManager.setThreadCount(configuration.getInt(BLUR_INDEXMANAGER_SEARCH_THREAD_COUNT,32));
  indexManager.setBlurMetrics(blurMetrics);
  indexManager.setFilterCache(filterCache);
  indexManager.init();
  final BlurShardServer shardServer=new BlurShardServer();
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  shardServer.setZookeeper(zooKeeper);
  shardServer.setClusterStatus(clusterStatus);
  shardServer.setDataFetchThreadCount(configuration.getInt(BLUR_SHARD_DATA_FETCH_THREAD_COUNT,8));
  shardServer.setMaxQueryCacheElements(configuration.getInt(BLUR_SHARD_CACHE_MAX_QUERYCACHE_ELEMENTS,128));
  shardServer.setMaxTimeToLive(configuration.getLong(BLUR_SHARD_CACHE_MAX_TIMETOLIVE,TimeUnit.MINUTES.toMillis(1)));
  shardServer.setQueryChecker(queryChecker);
  shardServer.init();
  Iface iface=BlurUtil.recordMethodCallsAndAverageTimes(blurMetrics,shardServer,Iface.class);
  int threadCount=configuration.getInt(BLUR_SHARD_SERVER_THRIFT_THREAD_COUNT,32);
  final ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  server.setBindAddress(bindAddress);
  server.setBindPort(bindPort);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  server.setConfiguration(configuration);
  new BlurServerShutDown().register(new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(refresher,server,shardServer,indexManager,indexServer,threadWatcher);
      System.exit(0);
    }
  }
,zooKeeper);
  server.start();
}",0.9983434566537824
82516,"public void init() throws IOException {
  initIndexWriterConfig();
  initIndexReader(IndexReader.open(getDirectory(),true));
}","public void init() throws IOException {
  initIndexWriterConfig();
  DirectIODirectory directory=getDirectory();
  if (!IndexReader.indexExists(directory)) {
    IndexWriterConfig conf=new IndexWriterConfig(Version.LUCENE_35,new KeywordAnalyzer());
    new IndexWriter(directory,conf).close();
  }
  initIndexReader(IndexReader.open(directory,true));
}",0.4476987447698745
82517,"private void waitForTheTableToEnable(String cluster,String table) throws BlurException {
  LOG.info(""String_Node_Str"" + table + ""String_Node_Str"");
}","private void waitForTheTableToEnable(String cluster,String table) throws BlurException {
  LOG.info(""String_Node_Str"" + table + ""String_Node_Str"");
  while (true) {
    if (_clusterStatus.isEnabled(false,cluster,table)) {
      return;
    }
    try {
      Thread.sleep(3000);
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"" + table + ""String_Node_Str"",e);
      throw new BException(""String_Node_Str"" + table + ""String_Node_Str"",e);
    }
  }
}",0.4768
82518,"private void waitForTheTableToDisengage(String cluster,String table) throws BlurException, TException {
  LOG.info(""String_Node_Str"" + table + ""String_Node_Str"");
}","private void waitForTheTableToDisengage(String cluster,String table) throws BlurException, TException {
}",0.7806691449814126
82519,"@Override public boolean isEnabled(boolean useCache,String cluster,String table){
  if (useCache) {
    Boolean enabled=_enabledMap.get(getClusterTableKey(cluster,table));
    if (enabled == null) {
      throw new RuntimeException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
 else {
      return enabled;
    }
  }
  LOG.debug(""String_Node_Str"");
  String tablePathIsEnabled=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
  try {
    if (_zk.exists(tablePathIsEnabled,false) == null) {
      return false;
    }
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  return true;
}","@Override public boolean isEnabled(boolean useCache,String cluster,String table){
  if (useCache) {
    Boolean enabled=_enabledMap.get(getClusterTableKey(cluster,table));
    if (enabled == null) {
      return false;
    }
 else {
      return enabled;
    }
  }
  LOG.debug(""String_Node_Str"");
  String tablePathIsEnabled=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
  try {
    if (_zk.exists(tablePathIsEnabled,false) == null) {
      return false;
    }
  }
 catch (  KeeperException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  return true;
}",0.9364248317127898
82520,"private void waitForTheTableToEnable(String cluster,String table) throws BlurException {
  LOG.info(""String_Node_Str"" + table + ""String_Node_Str"");
  while (true) {
    if (_clusterStatus.isEnabled(true,cluster,table)) {
      return;
    }
    try {
      Thread.sleep(3000);
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"" + table + ""String_Node_Str"",e);
      throw new BException(""String_Node_Str"" + table + ""String_Node_Str"",e);
    }
  }
}","private void waitForTheTableToEnable(String cluster,String table) throws BlurException {
  LOG.info(""String_Node_Str"" + table + ""String_Node_Str"");
  while (true) {
    if (_clusterStatus.isEnabled(false,cluster,table)) {
      return;
    }
    try {
      Thread.sleep(3000);
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"" + table + ""String_Node_Str"",e);
      throw new BException(""String_Node_Str"" + table + ""String_Node_Str"",e);
    }
  }
}",0.9926393270241852
82521,"public static void disableTable(ZooKeeper zookeeper,String cluster,String table) throws IOException, InterruptedException, KeeperException {
  if (zookeeper.exists(ZookeeperPathConstants.getTablePath(cluster,table),false) == null) {
    throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  String blurTableEnabledPath=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
  if (zookeeper.exists(blurTableEnabledPath,false) == null) {
    throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  zookeeper.delete(blurTableEnabledPath,-1);
  waitForWriteLocksToClear(zookeeper,cluster,table);
}","public static void disableTable(ZooKeeper zookeeper,String cluster,String table) throws IOException, InterruptedException, KeeperException {
  if (zookeeper.exists(ZookeeperPathConstants.getTablePath(cluster,table),false) == null) {
    throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  String blurTableEnabledPath=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
  if (zookeeper.exists(blurTableEnabledPath,false) == null) {
    throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  zookeeper.delete(blurTableEnabledPath,-1);
}",0.9567346938775512
82522,"public static void enableTable(ZooKeeper zookeeper,String cluster,String table) throws IOException, KeeperException, InterruptedException {
  if (zookeeper.exists(ZookeeperPathConstants.getTablePath(cluster,table),false) == null) {
    throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  String blurTableEnabledPath=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
  if (zookeeper.exists(blurTableEnabledPath,false) != null) {
    throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  zookeeper.create(blurTableEnabledPath,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  int shardCount=getShardCount(zookeeper,cluster,table);
  waitForWriteLocksToEngage(zookeeper,cluster,table,shardCount);
}","public static void enableTable(ZooKeeper zookeeper,String cluster,String table) throws IOException, KeeperException, InterruptedException {
  if (zookeeper.exists(ZookeeperPathConstants.getTablePath(cluster,table),false) == null) {
    throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  String blurTableEnabledPath=ZookeeperPathConstants.getTableEnabledPath(cluster,table);
  if (zookeeper.exists(blurTableEnabledPath,false) != null) {
    throw new IOException(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  zookeeper.create(blurTableEnabledPath,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
}",0.9115942028985508
82523,"@Override public final void enableTable(String table) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(false,table);
    if (cluster == null) {
      throw new BlurException(""String_Node_Str"" + table + ""String_Node_Str"",null);
    }
    EnableTable.enableTable(_zookeeper,cluster,table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    throw new BException(e.getMessage(),e);
  }
}","@Override public final void enableTable(String table) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(false,table);
    if (cluster == null) {
      throw new BlurException(""String_Node_Str"" + table + ""String_Node_Str"",null);
    }
    EnableTable.enableTable(_zookeeper,cluster,table);
    waitForTheTableToEnable(cluster,table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    throw new BException(e.getMessage(),e);
  }
}",0.953091684434968
82524,"public static void main(String[] args) throws TTransportException, IOException, KeeperException, InterruptedException, BlurException {
  int serverIndex=getServerIndex(args);
  LOG.info(""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new SimpleUncaughtExceptionHandler());
  BlurConfiguration configuration=new BlurConfiguration();
  String bindAddress=configuration.get(BLUR_CONTROLLER_BIND_ADDRESS);
  int bindPort=configuration.getInt(BLUR_CONTROLLER_BIND_PORT,-1);
  bindPort+=serverIndex;
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + bindPort);
  Configuration config=new Configuration();
  BlurMetrics blurMetrics=new BlurMetrics(config);
  String nodeName=ThriftBlurShardServer.getNodeName(configuration,BLUR_CONTROLLER_HOSTNAME);
  nodeName=nodeName + ""String_Node_Str"" + bindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  boolean crazyMode=false;
  if (args.length == 1 && args[1].equals(CRAZY)) {
    crazyMode=true;
  }
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr);
  ZookeeperSystemTime.checkSystemTime(zooKeeper,configuration.getLong(BLUR_ZOOKEEPER_SYSTEM_TIME_TOLERANCE,3000));
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper);
  BlurClient client=new BlurClientRemote();
  final BlurControllerServer controllerServer=new BlurControllerServer();
  controllerServer.setClient(client);
  controllerServer.setClusterStatus(clusterStatus);
  controllerServer.setZookeeper(zooKeeper);
  controllerServer.setNodeName(nodeName);
  controllerServer.setRemoteFetchCount(configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100));
  controllerServer.setMaxQueryCacheElements(configuration.getInt(BLUR_CONTROLLER_CACHE_MAX_QUERYCACHE_ELEMENTS,128));
  controllerServer.setMaxTimeToLive(configuration.getLong(BLUR_CONTROLLER_CACHE_MAX_TIMETOLIVE,TimeUnit.MINUTES.toMillis(1)));
  controllerServer.setQueryChecker(queryChecker);
  controllerServer.setThreadCount(configuration.getInt(BLUR_CONTROLLER_SERVER_REMOTE_THREAD_COUNT,64));
  controllerServer.setMaxFetchRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_FETCH_RETRIES,1));
  controllerServer.setMaxMutateRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_MUTATE_RETRIES,1));
  controllerServer.setMaxDefaultRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_DEFAULT_RETRIES,1));
  controllerServer.setFetchDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_FETCH_DELAY,500));
  controllerServer.setMutateDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MUTATE_DELAY,500));
  controllerServer.setDefaultDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_DEFAULT_DELAY,500));
  controllerServer.setMaxFetchDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_FETCH_DELAY,2000));
  controllerServer.setMaxMutateDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_MUTATE_DELAY,2000));
  controllerServer.setMaxDefaultDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_DEFAULT_DELAY,2000));
  controllerServer.init();
  Iface iface=BlurUtil.recordMethodCallsAndAverageTimes(blurMetrics,controllerServer,Iface.class);
  int threadCount=configuration.getInt(BLUR_CONTROLLER_SERVER_THRIFT_THREAD_COUNT,32);
  final ThriftBlurControllerServer server=new ThriftBlurControllerServer();
  server.setNodeName(nodeName);
  server.setConfiguration(configuration);
  server.setBindAddress(bindAddress);
  server.setBindPort(bindPort);
  server.setThreadCount(threadCount);
  if (crazyMode) {
    System.err.println(""String_Node_Str"");
    server.setIface(ThriftBlurShardServer.crazyMode(iface));
  }
 else {
    server.setIface(iface);
  }
  new BlurServerShutDown().register(new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(server,controllerServer,clusterStatus,zooKeeper,threadWatcher);
      System.exit(0);
    }
  }
,zooKeeper);
  server.start();
}","public static void main(String[] args) throws TTransportException, IOException, KeeperException, InterruptedException, BlurException {
  int serverIndex=getServerIndex(args);
  LOG.info(""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new SimpleUncaughtExceptionHandler());
  BlurConfiguration configuration=new BlurConfiguration();
  String bindAddress=configuration.get(BLUR_CONTROLLER_BIND_ADDRESS);
  int bindPort=configuration.getInt(BLUR_CONTROLLER_BIND_PORT,-1);
  bindPort+=serverIndex;
  LOG.info(""String_Node_Str"",serverIndex,bindAddress + ""String_Node_Str"" + bindPort);
  Configuration config=new Configuration();
  BlurMetrics blurMetrics=new BlurMetrics(config);
  String nodeName=ThriftBlurShardServer.getNodeName(configuration,BLUR_CONTROLLER_HOSTNAME);
  nodeName=nodeName + ""String_Node_Str"" + bindPort;
  String zkConnectionStr=isEmpty(configuration.get(BLUR_ZOOKEEPER_CONNECTION),BLUR_ZOOKEEPER_CONNECTION);
  BlurQueryChecker queryChecker=new BlurQueryChecker(configuration);
  final ZooKeeper zooKeeper=ZkUtils.newZooKeeper(zkConnectionStr);
  ZookeeperSystemTime.checkSystemTime(zooKeeper,configuration.getLong(BLUR_ZOOKEEPER_SYSTEM_TIME_TOLERANCE,3000));
  final ZookeeperClusterStatus clusterStatus=new ZookeeperClusterStatus(zooKeeper);
  BlurClient client=new BlurClientRemote();
  final BlurControllerServer controllerServer=new BlurControllerServer();
  controllerServer.setClient(client);
  controllerServer.setClusterStatus(clusterStatus);
  controllerServer.setZookeeper(zooKeeper);
  controllerServer.setNodeName(nodeName);
  controllerServer.setRemoteFetchCount(configuration.getInt(BLUR_CONTROLLER_REMOTE_FETCH_COUNT,100));
  controllerServer.setMaxQueryCacheElements(configuration.getInt(BLUR_CONTROLLER_CACHE_MAX_QUERYCACHE_ELEMENTS,128));
  controllerServer.setMaxTimeToLive(configuration.getLong(BLUR_CONTROLLER_CACHE_MAX_TIMETOLIVE,TimeUnit.MINUTES.toMillis(1)));
  controllerServer.setQueryChecker(queryChecker);
  controllerServer.setThreadCount(configuration.getInt(BLUR_CONTROLLER_SERVER_REMOTE_THREAD_COUNT,64));
  controllerServer.setMaxFetchRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_FETCH_RETRIES,1));
  controllerServer.setMaxMutateRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_MUTATE_RETRIES,1));
  controllerServer.setMaxDefaultRetries(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_DEFAULT_RETRIES,1));
  controllerServer.setFetchDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_FETCH_DELAY,500));
  controllerServer.setMutateDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MUTATE_DELAY,500));
  controllerServer.setDefaultDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_DEFAULT_DELAY,500));
  controllerServer.setMaxFetchDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_FETCH_DELAY,2000));
  controllerServer.setMaxMutateDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_MUTATE_DELAY,2000));
  controllerServer.setMaxDefaultDelay(configuration.getInt(BLUR_CONTROLLER_RETRY_MAX_DEFAULT_DELAY,2000));
  controllerServer.init();
  Iface iface=BlurUtil.recordMethodCallsAndAverageTimes(blurMetrics,controllerServer,Iface.class);
  int threadCount=configuration.getInt(BLUR_CONTROLLER_SERVER_THRIFT_THREAD_COUNT,32);
  final ThriftBlurControllerServer server=new ThriftBlurControllerServer();
  server.setNodeName(nodeName);
  server.setConfiguration(configuration);
  server.setBindAddress(bindAddress);
  server.setBindPort(bindPort);
  server.setThreadCount(threadCount);
  server.setIface(iface);
  new BlurServerShutDown().register(new BlurShutdown(){
    @Override public void shutdown(){
      ThreadWatcher threadWatcher=ThreadWatcher.instance();
      quietClose(server,controllerServer,clusterStatus,zooKeeper,threadWatcher);
      System.exit(0);
    }
  }
,zooKeeper);
  server.start();
}",0.9671649418678931
82525,"public void deleteDocuments(boolean wal,Term term) throws CorruptIndexException, IOException {
  _dirty.incrementAndGet();
  deleteDocuments(wal,term);
}","public void deleteDocuments(boolean wal,Term... terms) throws CorruptIndexException, IOException {
  _dirty.incrementAndGet();
  if (wal) {
    Future<Boolean> valid=walWriterDelete(terms);
    super.deleteDocuments(terms);
    try {
      if (!valid.get()) {
        throw new IOException(""String_Node_Str"");
      }
    }
 catch (    InterruptedException e) {
      throw new IOException(e);
    }
catch (    ExecutionException e) {
      throw new IOException(e);
    }
  }
 else {
    super.deleteDocuments(terms);
  }
}",0.3574593796159527
82526,"@Override public void action(WalIndexWriter indexWriter) throws CorruptIndexException, IOException {
  Collection<Document> docs=getDocs();
  indexWriter.updateDocuments(false,new Term(""String_Node_Str"",""String_Node_Str""),docs);
}","@Override public void action(WalIndexWriter indexWriter) throws CorruptIndexException, IOException {
  indexWriter.deleteDocuments(true,new Term(""String_Node_Str"",""String_Node_Str""));
}",0.8626506024096385
82527,"public SuperParser(Version matchVersion,Analyzer a,boolean superSearch,Filter queryFilter,ScoreType scoreType){
  super(matchVersion,SUPER,a);
  this.setAllowLeadingWildcard(true);
  this.superSearch=superSearch;
  this.queryFilter=queryFilter;
  this.scoreType=scoreType;
}","public SuperParser(Version matchVersion,Analyzer a,boolean superSearch,Filter queryFilter,ScoreType scoreType){
  super(matchVersion,SUPER,a);
  this.setAutoGeneratePhraseQueries(true);
  this.setAllowLeadingWildcard(true);
  this.superSearch=superSearch;
  this.queryFilter=queryFilter;
  this.scoreType=scoreType;
}",0.9272419627749576
82528,"private void watchForTables(){
  _tablesToCluster=new Thread(new Runnable(){
    @Override public void run(){
      try {
        doWatch();
      }
 catch (      KeeperException e) {
        LOG.error(""String_Node_Str"",e);
      }
catch (      InterruptedException e) {
        return;
      }
    }
    private void doWatch() throws KeeperException, InterruptedException {
      while (_running.get()) {
synchronized (_tableToClusterCache) {
          String clusterPath=ZookeeperPathConstants.getClustersPath();
          List<String> clusters=_zk.getChildren(clusterPath,new Watcher(){
            @Override public void process(            WatchedEvent event){
synchronized (_tableToClusterCache) {
                _tableToClusterCache.notifyAll();
              }
            }
          }
);
          for (          String cluster : clusters) {
            List<String> tables=_zk.getChildren(ZookeeperPathConstants.getTablesPath(cluster),new Watcher(){
              @Override public void process(              WatchedEvent event){
synchronized (_tableToClusterCache) {
                  _tableToClusterCache.notifyAll();
                }
              }
            }
);
            Map<String,List<String>> newValue=new HashMap<String,List<String>>();
            for (            String table : tables) {
              List<String> clusterList=newValue.get(table);
              if (clusterList == null) {
                clusterList=new ArrayList<String>();
                newValue.put(table,clusterList);
              }
              clusterList.add(cluster);
            }
            _tableToClusterCache.set(newValue);
          }
          _tableToClusterCache.wait();
        }
      }
    }
  }
);
  _tablesToCluster.setDaemon(true);
  _tablesToCluster.setName(""String_Node_Str"");
  _tablesToCluster.start();
}","private void watchForTables(){
  _tablesToCluster=new Thread(new Runnable(){
    @Override public void run(){
      try {
        doWatch();
      }
 catch (      KeeperException e) {
        LOG.error(""String_Node_Str"",e);
      }
catch (      InterruptedException e) {
        return;
      }
    }
    private void doWatch() throws KeeperException, InterruptedException {
      while (_running.get()) {
synchronized (_tableToClusterCache) {
          String clusterPath=ZookeeperPathConstants.getClustersPath();
          List<String> clusters=_zk.getChildren(clusterPath,new Watcher(){
            @Override public void process(            WatchedEvent event){
synchronized (_tableToClusterCache) {
                _tableToClusterCache.notifyAll();
              }
            }
          }
);
          Map<String,List<String>> newValue=new HashMap<String,List<String>>();
          for (          String cluster : clusters) {
            List<String> tables=_zk.getChildren(ZookeeperPathConstants.getTablesPath(cluster),new Watcher(){
              @Override public void process(              WatchedEvent event){
synchronized (_tableToClusterCache) {
                  _tableToClusterCache.notifyAll();
                }
              }
            }
);
            for (            String table : tables) {
              List<String> clusterList=newValue.get(table);
              if (clusterList == null) {
                clusterList=new ArrayList<String>();
                newValue.put(table,clusterList);
              }
              clusterList.add(cluster);
            }
          }
          _tableToClusterCache.set(newValue);
          _tableToClusterCache.wait();
        }
      }
    }
  }
);
  _tablesToCluster.setDaemon(true);
  _tablesToCluster.setName(""String_Node_Str"");
  _tablesToCluster.start();
}",0.7857923497267759
82529,"@Override public String getCluster(boolean useCache,String table){
  if (useCache) {
    Map<String,List<String>> map=_tableToClusterCache.get();
    List<String> clusters=map.get(table);
    if (clusters == null || clusters.size() == 0) {
      return null;
    }
 else     if (clusters.size() == 1) {
      return clusters.get(0);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + table + ""String_Node_Str""+ clusters+ ""String_Node_Str"");
    }
  }
  List<String> clusterList=getClusterList();
  for (  String cluster : clusterList) {
    try {
      Stat stat=_zk.exists(ZookeeperPathConstants.getTablePath(cluster,table),false);
      if (stat != null) {
        return cluster;
      }
    }
 catch (    KeeperException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  return null;
}","@Override public String getCluster(boolean useCache,String table){
  if (useCache) {
    Map<String,List<String>> map=_tableToClusterCache.get();
    List<String> clusters=map.get(table);
    if (clusters == null || clusters.size() == 0) {
      throw new RuntimeException(""String_Node_Str"" + table + ""String_Node_Str"");
    }
 else     if (clusters.size() == 1) {
      return clusters.get(0);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + table + ""String_Node_Str""+ clusters+ ""String_Node_Str"");
    }
  }
  List<String> clusterList=getClusterList();
  for (  String cluster : clusterList) {
    try {
      Stat stat=_zk.exists(ZookeeperPathConstants.getTablePath(cluster,table),false);
      if (stat != null) {
        return cluster;
      }
    }
 catch (    KeeperException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  throw new RuntimeException(""String_Node_Str"" + table + ""String_Node_Str"");
}",0.9116719242902208
82530,"@Override public void run(){
  clearMapOfOldTables(_tableAnalyzers);
  clearMapOfOldTables(_tableDescriptors);
  clearMapOfOldTables(_layoutManagers);
  clearMapOfOldTables(_layoutCache);
  clearMapOfOldTables(_tableSimilarity);
  Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
  for (  String table : oldIndexesThatNeedToBeClosed.keySet()) {
    Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
    if (indexes == null) {
      continue;
    }
    for (    String shard : indexes.keySet()) {
      BlurIndex index=indexes.get(shard);
      if (index == null) {
        continue;
      }
      close(index,table,shard);
    }
  }
  for (  String table : _indexes.keySet()) {
    Map<String,BlurIndex> shardMap=_indexes.get(table);
    if (shardMap != null) {
      Set<String> shards=new HashSet<String>(shardMap.keySet());
      Set<String> shardsToServe=getShardsToServe(table);
      shards.removeAll(shardsToServe);
      if (!shards.isEmpty()) {
        LOG.info(""String_Node_Str"",table,shards);
      }
      for (      String shard : shards) {
        LOG.info(""String_Node_Str"",table,shard);
        BlurIndex index=shardMap.remove(shard);
        close(index,table,shard);
      }
    }
  }
}","@Override public void run(){
  try {
    cleanup();
  }
 catch (  Throwable e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.1522988505747126
82531,"private void removeAnyTableLocks(){
  List<String> tableList=_clusterStatus.getTableList();
  for (  String table : tableList) {
    _clusterStatus.clearLocks(cluster,table);
  }
}","private void removeAnyTableLocks(){
  List<String> tableList=_clusterStatus.getTableList(cluster);
  for (  String table : tableList) {
    _clusterStatus.clearLocks(cluster,table);
  }
}",0.9809264305177112
82532,"private void setupTableWarmer(){
  _timerTableWarmer=new Timer(""String_Node_Str"",true);
  _timerTableWarmer.schedule(new TimerTask(){
    @Override public void run(){
      List<String> tableList=_clusterStatus.getTableList();
      _blurMetrics.tableCount.set(tableList.size());
      long indexCount=0;
      AtomicLong segmentCount=new AtomicLong();
      AtomicLong indexMemoryUsage=new AtomicLong();
      for (      String table : tableList) {
        try {
          Map<String,BlurIndex> indexes=getIndexes(table);
          int count=indexes.size();
          indexCount+=count;
          updateMetrics(_blurMetrics,indexes,segmentCount,indexMemoryUsage);
          LOG.debug(""String_Node_Str"",table,count);
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e,table);
        }
      }
      _blurMetrics.indexCount.set(indexCount);
      _blurMetrics.segmentCount.set(segmentCount.get());
      _blurMetrics.indexMemoryUsage.set(indexMemoryUsage.get());
    }
    private void updateMetrics(    BlurMetrics blurMetrics,    Map<String,BlurIndex> indexes,    AtomicLong segmentCount,    AtomicLong indexMemoryUsage) throws IOException {
      for (      BlurIndex index : indexes.values()) {
        IndexReader reader=index.getIndexReader(false);
        try {
          IndexReader[] readers=reader.getSequentialSubReaders();
          if (readers != null) {
            segmentCount.addAndGet(readers.length);
          }
          indexMemoryUsage.addAndGet(BlurUtil.getMemoryUsage(reader));
        }
  finally {
          reader.decRef();
        }
      }
    }
  }
,_delay,_delay);
}","private void setupTableWarmer(){
  _timerTableWarmer=new Timer(""String_Node_Str"",true);
  _timerTableWarmer.schedule(new TimerTask(){
    @Override public void run(){
      try {
        warmup();
      }
 catch (      Throwable e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
    private void warmup(){
      List<String> tableList=_clusterStatus.getTableList(cluster);
      _blurMetrics.tableCount.set(tableList.size());
      long indexCount=0;
      AtomicLong segmentCount=new AtomicLong();
      AtomicLong indexMemoryUsage=new AtomicLong();
      for (      String table : tableList) {
        try {
          Map<String,BlurIndex> indexes=getIndexes(table);
          int count=indexes.size();
          indexCount+=count;
          updateMetrics(_blurMetrics,indexes,segmentCount,indexMemoryUsage);
          LOG.debug(""String_Node_Str"",table,count);
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e,table);
        }
      }
      _blurMetrics.indexCount.set(indexCount);
      _blurMetrics.segmentCount.set(segmentCount.get());
      _blurMetrics.indexMemoryUsage.set(indexMemoryUsage.get());
    }
    private void updateMetrics(    BlurMetrics blurMetrics,    Map<String,BlurIndex> indexes,    AtomicLong segmentCount,    AtomicLong indexMemoryUsage) throws IOException {
      for (      BlurIndex index : indexes.values()) {
        IndexReader reader=index.getIndexReader(false);
        try {
          IndexReader[] readers=reader.getSequentialSubReaders();
          if (readers != null) {
            segmentCount.addAndGet(readers.length);
          }
          indexMemoryUsage.addAndGet(BlurUtil.getMemoryUsage(reader));
        }
  finally {
          reader.decRef();
        }
      }
    }
  }
,_delay,_delay);
}",0.9546120058565154
82533,"private void setupFlushCacheTimer(){
  _timerCacheFlush=new Timer(""String_Node_Str"",true);
  _timerCacheFlush.schedule(new TimerTask(){
    @Override public void run(){
      clearMapOfOldTables(_tableAnalyzers);
      clearMapOfOldTables(_tableDescriptors);
      clearMapOfOldTables(_layoutManagers);
      clearMapOfOldTables(_layoutCache);
      clearMapOfOldTables(_tableSimilarity);
      Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
      for (      String table : oldIndexesThatNeedToBeClosed.keySet()) {
        Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
        if (indexes == null) {
          continue;
        }
        for (        String shard : indexes.keySet()) {
          BlurIndex index=indexes.get(shard);
          if (index == null) {
            continue;
          }
          close(index,table,shard);
        }
      }
      for (      String table : _indexes.keySet()) {
        Map<String,BlurIndex> shardMap=_indexes.get(table);
        if (shardMap != null) {
          Set<String> shards=new HashSet<String>(shardMap.keySet());
          Set<String> shardsToServe=getShardsToServe(table);
          shards.removeAll(shardsToServe);
          if (!shards.isEmpty()) {
            LOG.info(""String_Node_Str"",table,shards);
          }
          for (          String shard : shards) {
            LOG.info(""String_Node_Str"",table,shard);
            BlurIndex index=shardMap.remove(shard);
            close(index,table,shard);
          }
        }
      }
    }
  }
,_delay,_delay);
}","private void setupFlushCacheTimer(){
  _timerCacheFlush=new Timer(""String_Node_Str"",true);
  _timerCacheFlush.schedule(new TimerTask(){
    @Override public void run(){
      try {
        cleanup();
      }
 catch (      Throwable e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
    private void cleanup(){
      clearMapOfOldTables(_tableAnalyzers);
      clearMapOfOldTables(_tableDescriptors);
      clearMapOfOldTables(_layoutManagers);
      clearMapOfOldTables(_layoutCache);
      clearMapOfOldTables(_tableSimilarity);
      Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
      for (      String table : oldIndexesThatNeedToBeClosed.keySet()) {
        Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
        if (indexes == null) {
          continue;
        }
        for (        String shard : indexes.keySet()) {
          BlurIndex index=indexes.get(shard);
          if (index == null) {
            continue;
          }
          close(index,table,shard);
        }
      }
      for (      String table : _indexes.keySet()) {
        Map<String,BlurIndex> shardMap=_indexes.get(table);
        if (shardMap != null) {
          Set<String> shards=new HashSet<String>(shardMap.keySet());
          Set<String> shardsToServe=getShardsToServe(table);
          shards.removeAll(shardsToServe);
          if (!shards.isEmpty()) {
            LOG.info(""String_Node_Str"",table,shards);
          }
          for (          String shard : shards) {
            LOG.info(""String_Node_Str"",table,shard);
            BlurIndex index=shardMap.remove(shard);
            close(index,table,shard);
          }
        }
      }
    }
  }
,_delay,_delay);
}",0.2841726618705036
82534,"public void init(){
  _timer=new Timer(""String_Node_Str"",true);
  _timer.schedule(new TimerTask(){
    @Override public void run(){
      sampleAll();
    }
  }
,_delay,_period);
}","public void init(){
  _timer=new Timer(""String_Node_Str"",true);
  _timer.schedule(new TimerTask(){
    @Override public void run(){
      try {
        sampleAll();
      }
 catch (      Throwable e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
,_delay,_period);
}",0.7843137254901961
82535,"@Override public void run(){
  sampleAll();
}","@Override public void run(){
  try {
    sampleAll();
  }
 catch (  Throwable e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.5325443786982249
82536,"public void init(){
  statusCleanupTimer=new Timer(""String_Node_Str"",true);
  statusCleanupTimer.schedule(new TimerTask(){
    @Override public void run(){
      try {
        cleanupFinishedQueryStatuses();
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
,statusCleanupTimerDelay,statusCleanupTimerDelay);
}","public void init(){
  statusCleanupTimer=new Timer(""String_Node_Str"",true);
  statusCleanupTimer.schedule(new TimerTask(){
    @Override public void run(){
      try {
        cleanupFinishedQueryStatuses();
      }
 catch (      Throwable e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
,statusCleanupTimerDelay,statusCleanupTimerDelay);
}",0.9746478873239436
82537,"@Override public void run(){
  try {
    cleanupFinishedQueryStatuses();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    cleanupFinishedQueryStatuses();
  }
 catch (  Throwable e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.944055944055944
82538,"@Override public void run(){
  for (  BlurIndex index : _indexes) {
    try {
      index.refresh();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e,index);
    }
  }
}","@Override public void run(){
  try {
    refreshInternal();
  }
 catch (  Throwable e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.7102803738317757
82539,"private synchronized void updateLayout(){
  List<String> tableList=_clusterStatus.getTableList();
  HashMap<String,Map<String,String>> newLayout=new HashMap<String,Map<String,String>>();
  for (  String table : tableList) {
    DistributedLayoutManager layoutManager=new DistributedLayoutManager();
    String cluster=_clusterStatus.getCluster(true,table);
    List<String> shardServerList=_clusterStatus.getShardServerList(cluster);
    List<String> offlineShardServers=_clusterStatus.getOfflineShardServers(cluster);
    List<String> shardList=getShardList(cluster,table);
    layoutManager.setNodes(shardServerList);
    layoutManager.setNodesOffline(offlineShardServers);
    layoutManager.setShards(shardList);
    layoutManager.init();
    Map<String,String> layout=layoutManager.getLayout();
    newLayout.put(table,layout);
  }
  _shardServerLayout.set(newLayout);
}","private synchronized void updateLayout(){
  List<String> tableList=_clusterStatus.getTableList();
  HashMap<String,Map<String,String>> newLayout=new HashMap<String,Map<String,String>>();
  for (  String table : tableList) {
    DistributedLayoutManager layoutManager=new DistributedLayoutManager();
    String cluster=_clusterStatus.getCluster(false,table);
    List<String> shardServerList=_clusterStatus.getShardServerList(cluster);
    List<String> offlineShardServers=_clusterStatus.getOfflineShardServers(cluster);
    List<String> shardList=getShardList(cluster,table);
    layoutManager.setNodes(shardServerList);
    layoutManager.setNodesOffline(offlineShardServers);
    layoutManager.setShards(shardList);
    layoutManager.init();
    Map<String,String> layout=layoutManager.getLayout();
    newLayout.put(table,layout);
  }
  _shardServerLayout.set(newLayout);
}",0.9959977129788452
82540,"private boolean inSafeMode(boolean useCache,String table){
  String cluster=_clusterStatus.getCluster(true,table);
  return _clusterStatus.isInSafeMode(cluster);
}","private boolean inSafeMode(boolean useCache,String table){
  String cluster=_clusterStatus.getCluster(useCache,table);
  return _clusterStatus.isInSafeMode(cluster);
}",0.9757575757575756
82541,"@Override public final void removeTable(String table,boolean deleteIndexFiles) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(true,table);
    RemoveTable.removeTable(_zookeeper,cluster,table,deleteIndexFiles);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    throw new BException(e.getMessage(),e);
  }
}","@Override public final void removeTable(String table,boolean deleteIndexFiles) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(false,table);
    RemoveTable.removeTable(_zookeeper,cluster,table,deleteIndexFiles);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    throw new BException(e.getMessage(),e);
  }
}",0.9906040268456376
82542,"@Override public final void enableTable(String table) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(true,table);
    EnableTable.enableTable(_zookeeper,cluster,table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    throw new BException(e.getMessage(),e);
  }
}","@Override public final void enableTable(String table) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(false,table);
    EnableTable.enableTable(_zookeeper,cluster,table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    throw new BException(e.getMessage(),e);
  }
}",0.989409984871407
82543,"@Override public final TableDescriptor describe(final String table) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(true,table);
    return _clusterStatus.getTableDescriptor(true,cluster,table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + table + ""String_Node_Str"",e);
    throw new BException(""String_Node_Str"" + table + ""String_Node_Str"",e);
  }
}","@Override public final TableDescriptor describe(final String table) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(false,table);
    return _clusterStatus.getTableDescriptor(true,cluster,table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + table + ""String_Node_Str"",e);
    throw new BException(""String_Node_Str"" + table + ""String_Node_Str"",e);
  }
}",0.9914320685434516
82544,"@Override public final void disableTable(String table) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(true,table);
    DisableTable.disableTable(_zookeeper,cluster,table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    throw new BException(e.getMessage(),e);
  }
}","@Override public final void disableTable(String table) throws BlurException, TException {
  try {
    String cluster=_clusterStatus.getCluster(false,table);
    DisableTable.disableTable(_zookeeper,cluster,table);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e,table);
    throw new BException(e.getMessage(),e);
  }
}",0.9895052473763118
82545,"public void init(){
  _timer=new Timer(""String_Node_Str"",true);
  _timer.schedule(new TimerTask(){
    @Override public void run(){
      tryToInterrupt();
    }
  }
,_delay,_delay);
}","public void init(){
  _timer=new Timer(""String_Node_Str"",true);
  _timer.schedule(new TimerTask(){
    @Override public void run(){
      try {
        tryToInterrupt();
      }
 catch (      Throwable e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
,_delay,_delay);
}",0.6852248394004282
82546,"@Override public void run(){
  tryToInterrupt();
}","@Override public void run(){
  try {
    tryToInterrupt();
  }
 catch (  Throwable e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.5586592178770949
82547,"public void init(){
  _timer=new Timer(""String_Node_Str"",true);
  _timer.schedule(new TimerTask(){
    @Override public void run(){
      processRunningThreads();
    }
  }
,TimeUnit.SECONDS.toMillis(5),TimeUnit.SECONDS.toMillis(5));
}","public void init(){
  _timer=new Timer(""String_Node_Str"",true);
  _timer.schedule(new TimerTask(){
    @Override public void run(){
      try {
        processRunningThreads();
      }
 catch (      Throwable e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
,TimeUnit.SECONDS.toMillis(5),TimeUnit.SECONDS.toMillis(5));
}",0.8260105448154658
82548,"@Override protected boolean removeEldestEntry(java.util.Map.Entry<K,V> eldest){
  boolean b=size() > _cachedElements;
  if (b) {
    LOG.debug(""String_Node_Str"",_name,eldest);
  }
  return b;
}","@Override protected boolean removeEldestEntry(java.util.Map.Entry<K,V> eldest){
  boolean b=size() > _cachedElements;
  if (b) {
    LOG.debug(""String_Node_Str"",_name,eldest);
    return true;
  }
  return false;
}",0.9434889434889436
82549,"public static Row getRow(Iterable<Document> docs){
  Row row=new Row();
  boolean empty=true;
  if (docs == null) {
    return null;
  }
  for (  Document document : docs) {
    empty=false;
    Record record=new Record();
    String rowId=populateRecord(record,document);
    if (record.getColumns() != null) {
      row.addToRecords(record);
    }
    if (row.id == null) {
      row.setId(rowId);
    }
    row.recordCount++;
  }
  if (empty) {
    return null;
  }
  return row;
}","public static Row getRow(Iterable<Document> docs){
  Row row=new Row();
  boolean empty=true;
  if (docs == null) {
    return null;
  }
  for (  Document document : docs) {
    empty=false;
    Record record=new Record();
    String rowId=populateRecord(record,document);
    if (record.getColumns() != null) {
      row.addToRecords(record);
    }
    if (row.id == null) {
      row.setId(rowId);
    }
    row.recordCount++;
  }
  if (empty) {
    return null;
  }
  if (row.records == null) {
    row.records=new ArrayList<Record>();
  }
  return row;
}",0.9040307101727448
82550,"private boolean findEmptyLocation(BlockCacheLocation location){
  OUTER:   for (int bankId=0; bankId < _banks.length; bankId++) {
    AtomicInteger bitSetCounter=_lockCounters[bankId];
    BlockLocks bitSet=_locks[bankId];
    if (bitSetCounter.get() == _numberOfBlocksPerBank) {
      continue OUTER;
    }
    int bit=bitSet.nextClearBit(0);
    INNER:     while (bit != -1) {
      if (bit >= _numberOfBlocksPerBank) {
        continue OUTER;
      }
      if (!bitSet.set(bit)) {
        bit=bitSet.nextClearBit(0);
        continue INNER;
      }
 else {
        location.setBankId(bankId);
        location.setBlock(bit);
        bitSetCounter.incrementAndGet();
        return true;
      }
    }
  }
  return false;
}","private boolean findEmptyLocation(BlockCacheLocation location){
  for (int j=0; j < 10; j++) {
    OUTER:     for (int bankId=0; bankId < _banks.length; bankId++) {
      AtomicInteger bitSetCounter=_lockCounters[bankId];
      BlockLocks bitSet=_locks[bankId];
      if (bitSetCounter.get() == _numberOfBlocksPerBank) {
        continue OUTER;
      }
      int bit=bitSet.nextClearBit(0);
      INNER:       while (bit != -1) {
        if (bit >= _numberOfBlocksPerBank) {
          continue OUTER;
        }
        if (!bitSet.set(bit)) {
          bit=bitSet.nextClearBit(0);
          continue INNER;
        }
 else {
          location.setBankId(bankId);
          location.setBlock(bit);
          bitSetCounter.incrementAndGet();
          return true;
        }
      }
    }
  }
  return false;
}",0.928897586431833
82551,"private void setupFlushCacheTimer(){
  _timerCacheFlush=new Timer(""String_Node_Str"",true);
  _timerCacheFlush.schedule(new TimerTask(){
    @Override public void run(){
      clearMapOfOldTables(_tableAnalyzers);
      clearMapOfOldTables(_tableDescriptors);
      clearMapOfOldTables(_layoutManagers);
      clearMapOfOldTables(_layoutCache);
      Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
      for (      String table : oldIndexesThatNeedToBeClosed.keySet()) {
        Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
        if (indexes == null) {
          continue;
        }
        for (        String shard : indexes.keySet()) {
          BlurIndex index=indexes.get(shard);
          if (index == null) {
            continue;
          }
          LOG.info(""String_Node_Str"",index,table,shard);
          try {
            _filterCache.closing(table,shard,index);
            index.close();
          }
 catch (          IOException e) {
            LOG.error(""String_Node_Str"",e,index,table,shard);
          }
        }
      }
    }
  }
,_delay,_delay);
}","private void setupFlushCacheTimer(){
  _timerCacheFlush=new Timer(""String_Node_Str"",true);
  _timerCacheFlush.schedule(new TimerTask(){
    @Override public void run(){
      clearMapOfOldTables(_tableAnalyzers);
      clearMapOfOldTables(_tableDescriptors);
      clearMapOfOldTables(_layoutManagers);
      clearMapOfOldTables(_layoutCache);
      Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
      for (      String table : oldIndexesThatNeedToBeClosed.keySet()) {
        Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
        if (indexes == null) {
          continue;
        }
        for (        String shard : indexes.keySet()) {
          BlurIndex index=indexes.get(shard);
          if (index == null) {
            continue;
          }
          close(index,table,shard);
        }
      }
      for (      String table : _indexes.keySet()) {
        Map<String,BlurIndex> shardMap=_indexes.get(table);
        if (shardMap != null) {
          Set<String> shards=new HashSet<String>(shardMap.keySet());
          Set<String> shardsToServe=getShardsToServe(table);
          shards.removeAll(shardsToServe);
          if (!shards.isEmpty()) {
            LOG.info(""String_Node_Str"",table,shards);
          }
          for (          String shard : shards) {
            LOG.info(""String_Node_Str"",table,shard);
            BlurIndex index=shardMap.remove(shard);
            close(index,table,shard);
          }
        }
      }
    }
  }
,_delay,_delay);
}",0.7295690936106983
82552,"@Override public void run(){
  clearMapOfOldTables(_tableAnalyzers);
  clearMapOfOldTables(_tableDescriptors);
  clearMapOfOldTables(_layoutManagers);
  clearMapOfOldTables(_layoutCache);
  Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
  for (  String table : oldIndexesThatNeedToBeClosed.keySet()) {
    Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
    if (indexes == null) {
      continue;
    }
    for (    String shard : indexes.keySet()) {
      BlurIndex index=indexes.get(shard);
      if (index == null) {
        continue;
      }
      LOG.info(""String_Node_Str"",index,table,shard);
      try {
        _filterCache.closing(table,shard,index);
        index.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e,index,table,shard);
      }
    }
  }
}","@Override public void run(){
  clearMapOfOldTables(_tableAnalyzers);
  clearMapOfOldTables(_tableDescriptors);
  clearMapOfOldTables(_layoutManagers);
  clearMapOfOldTables(_layoutCache);
  Map<String,Map<String,BlurIndex>> oldIndexesThatNeedToBeClosed=clearMapOfOldTables(_indexes);
  for (  String table : oldIndexesThatNeedToBeClosed.keySet()) {
    Map<String,BlurIndex> indexes=oldIndexesThatNeedToBeClosed.get(table);
    if (indexes == null) {
      continue;
    }
    for (    String shard : indexes.keySet()) {
      BlurIndex index=indexes.get(shard);
      if (index == null) {
        continue;
      }
      close(index,table,shard);
    }
  }
  for (  String table : _indexes.keySet()) {
    Map<String,BlurIndex> shardMap=_indexes.get(table);
    if (shardMap != null) {
      Set<String> shards=new HashSet<String>(shardMap.keySet());
      Set<String> shardsToServe=getShardsToServe(table);
      shards.removeAll(shardsToServe);
      if (!shards.isEmpty()) {
        LOG.info(""String_Node_Str"",table,shards);
      }
      for (      String shard : shards) {
        LOG.info(""String_Node_Str"",table,shard);
        BlurIndex index=shardMap.remove(shard);
        close(index,table,shard);
      }
    }
  }
}",0.7035271687321258
82553,"private void setupSafeMode() throws KeeperException, InterruptedException {
  String shardsPath=ZookeeperPathConstants.getBlurOnlineShardsPath();
  List<String> children=_zookeeper.getChildren(shardsPath,false);
  if (children.size() == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (children.size() != 1) {
    return;
  }
  LOG.info(""String_Node_Str"");
  long timestamp=System.currentTimeMillis() + SAFE_MODE_DELAY;
  String blurSafemodePath=ZookeeperPathConstants.getBlurSafemodePath();
  Stat stat=_zookeeper.exists(blurSafemodePath,false);
  if (stat == null) {
    _zookeeper.create(blurSafemodePath,Long.toString(timestamp).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  }
 else {
    _zookeeper.setData(blurSafemodePath,Long.toString(timestamp).getBytes(),-1);
  }
}","private void setupSafeMode() throws KeeperException, InterruptedException {
  String shardsPath=ZookeeperPathConstants.getBlurOnlineShardsPath();
  List<String> children=_zookeeper.getChildren(shardsPath,false);
  if (children.size() == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (children.size() != 1) {
    return;
  }
  LOG.info(""String_Node_Str"");
  long timestamp=System.currentTimeMillis() + SAFE_MODE_DELAY;
  String blurSafemodePath=ZookeeperPathConstants.getBlurSafemodePath();
  Stat stat=_zookeeper.exists(blurSafemodePath,false);
  if (stat == null) {
    _zookeeper.create(blurSafemodePath,Long.toString(timestamp).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  }
 else {
    _zookeeper.setData(blurSafemodePath,Long.toString(timestamp).getBytes(),-1);
  }
  removeAnyTableLocks();
}",0.9846719803801348
82554,"private void setupTableWarmer(){
  _timerTableWarmer=new Timer(""String_Node_Str"",true);
  _timerTableWarmer.schedule(new TimerTask(){
    @Override public void run(){
      List<String> tableList=_clusterStatus.getTableList();
      for (      String table : tableList) {
        try {
          int count=getIndexes(table).size();
          LOG.info(""String_Node_Str"",table,count);
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e,table);
        }
      }
    }
  }
,_delay,_delay);
}","private void setupTableWarmer(){
  _timerTableWarmer=new Timer(""String_Node_Str"",true);
  _timerTableWarmer.schedule(new TimerTask(){
    @Override public void run(){
      List<String> tableList=_clusterStatus.getTableList();
      for (      String table : tableList) {
        try {
          int count=getIndexes(table).size();
          LOG.debug(""String_Node_Str"",table,count);
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e,table);
        }
      }
    }
  }
,_delay,_delay);
}",0.9913544668587896
82555,"private ClusterStatus getClusterStatus(){
  return new ClusterStatus(){
    @Override public List<String> getClusterList(){
      return Arrays.asList(""String_Node_Str"");
    }
    @Override public List<String> getControllerServerList(){
      throw new RuntimeException(""String_Node_Str"");
    }
    @Override public List<String> getOnlineShardServers(    String cluster){
      return getShardServerList(cluster);
    }
    @Override public List<String> getShardServerList(    String cluster){
      List<String> nodes=new ArrayList<String>(shardServers.keySet());
      Collections.sort(nodes);
      return nodes;
    }
    @Override public TableDescriptor getTableDescriptor(    String table){
      TableDescriptor tableDescriptor=new TableDescriptor();
      tableDescriptor.cluster=""String_Node_Str"";
      tableDescriptor.shardCount=3;
      return tableDescriptor;
    }
    @Override public List<String> getTableList(){
      return Arrays.asList(TABLE);
    }
    @Override public String getCluster(    String table){
      return ""String_Node_Str"";
    }
    @Override public boolean exists(    String table){
      return false;
    }
    @Override public boolean isEnabled(    String table){
      return false;
    }
  }
;
}","private ClusterStatus getClusterStatus(){
  return new ClusterStatus(){
    @Override public List<String> getClusterList(){
      return Arrays.asList(""String_Node_Str"");
    }
    @Override public List<String> getControllerServerList(){
      throw new RuntimeException(""String_Node_Str"");
    }
    @Override public List<String> getOnlineShardServers(    String cluster){
      return getShardServerList(cluster);
    }
    @Override public List<String> getShardServerList(    String cluster){
      List<String> nodes=new ArrayList<String>(shardServers.keySet());
      Collections.sort(nodes);
      return nodes;
    }
    @Override public TableDescriptor getTableDescriptor(    String table){
      TableDescriptor tableDescriptor=new TableDescriptor();
      tableDescriptor.cluster=""String_Node_Str"";
      tableDescriptor.shardCount=3;
      return tableDescriptor;
    }
    @Override public List<String> getTableList(){
      return Arrays.asList(TABLE);
    }
    @Override public String getCluster(    String table){
      return ""String_Node_Str"";
    }
    @Override public boolean exists(    String table){
      return false;
    }
    @Override public boolean isEnabled(    String table){
      return false;
    }
    @Override public void clearLocks(    String table){
    }
  }
;
}",0.9740361919748228
82556,"@Override public boolean obtain() throws IOException {
  try {
    LOG.info(""String_Node_Str"",_instanceIndexLockPath);
    Stat stat=_zk.exists(_instanceIndexLockPath,false);
    if (stat != null) {
      byte[] data=_zk.getData(_instanceIndexLockPath,false,stat);
      if (_nodeName.equals(new String(data))) {
        LOG.warn(""String_Node_Str"",_instanceIndexLockPath);
        _zk.delete(_instanceIndexLockPath,-1);
      }
 else {
        LOG.info(""String_Node_Str"",_instanceIndexLockPath,new String(data));
        return false;
      }
    }
    _zk.create(_instanceIndexLockPath,_nodeName.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);
    _stat=stat;
    return true;
  }
 catch (  KeeperException e) {
    if (e.code() == Code.NODEEXISTS) {
      return false;
    }
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new IOException(e);
  }
}","@Override public boolean obtain() throws IOException {
  try {
    LOG.info(""String_Node_Str"",_instanceIndexLockPath);
    Stat stat=_zk.exists(_instanceIndexLockPath,false);
    if (stat != null) {
      byte[] data=_zk.getData(_instanceIndexLockPath,false,stat);
      if (_nodeName.equals(new String(data))) {
        LOG.warn(""String_Node_Str"",_instanceIndexLockPath);
        _zk.delete(_instanceIndexLockPath,-1);
      }
 else {
        LOG.info(""String_Node_Str"",_instanceIndexLockPath,new String(data));
        return false;
      }
    }
    _zk.create(_instanceIndexLockPath,_nodeName.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);
    return true;
  }
 catch (  KeeperException e) {
    if (e.code() == Code.NODEEXISTS) {
      return false;
    }
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new IOException(e);
  }
}",0.990909090909091
82557,"@Override public void release() throws IOException {
  try {
    _zk.delete(_instanceIndexLockPath,_stat.getVersion());
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
catch (  KeeperException e) {
    throw new IOException(e);
  }
}","@Override public void release() throws IOException {
  try {
    _zk.delete(_instanceIndexLockPath,-1);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
catch (  KeeperException e) {
    throw new IOException(e);
  }
}",0.9601593625498008
82558,"@Override public void onError(Exception exception){
  _pool._numberOfConnections.decrementAndGet();
  _realCallback.onError(exception);
}","@Override public void onError(Exception exception){
  AtomicInteger counter=_pool._numberOfConnections.get(_connection._host);
  if (counter != null) {
    counter.decrementAndGet();
  }
  _realCallback.onError(exception);
}",0.7590027700831025
82559,"private TAsyncClient newClient(Class<?> c,Connection connection) throws InterruptedException {
  BlockingQueue<TAsyncClient> blockingQueue=getQueue(connection);
  TAsyncClient client=blockingQueue.poll();
  if (client != null) {
    return client;
  }
  int numOfConnections=_numberOfConnections.get();
  while (numOfConnections >= _maxConnectionsPerHost) {
    client=blockingQueue.poll(_pollTime,TimeUnit.MILLISECONDS);
    if (client != null) {
      return client;
    }
    LOG.debug(""String_Node_Str"",numOfConnections,_maxConnectionsPerHost);
    numOfConnections=_numberOfConnections.get();
  }
  LOG.info(""String_Node_Str"",connection);
  String name=c.getName();
  Constructor<?> constructor=_constructorCache.get(name);
  if (constructor == null) {
    String clientClassName=name.replace(""String_Node_Str"",""String_Node_Str"");
    try {
      Class<?> clazz=Class.forName(clientClassName);
      constructor=clazz.getConstructor(new Class[]{TProtocolFactory.class,TAsyncClientManager.class,TNonblockingTransport.class});
      _constructorCache.put(name,constructor);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  try {
    client=(TAsyncClient)constructor.newInstance(new Object[]{_protocolFactory,_clientManager,newTransport(connection)});
    client.setTimeout(_timeout);
    _numberOfConnections.incrementAndGet();
    return client;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private TAsyncClient newClient(Class<?> c,Connection connection) throws InterruptedException {
  BlockingQueue<TAsyncClient> blockingQueue=getQueue(connection);
  TAsyncClient client=blockingQueue.poll();
  if (client != null) {
    return client;
  }
  AtomicInteger counter;
synchronized (_numberOfConnections) {
    counter=_numberOfConnections.get(connection._host);
    if (counter == null) {
      counter=new AtomicInteger();
      _numberOfConnections.put(connection._host,counter);
    }
  }
synchronized (counter) {
    int numOfConnections=counter.get();
    while (numOfConnections >= _maxConnectionsPerHost) {
      client=blockingQueue.poll(_pollTime,TimeUnit.MILLISECONDS);
      if (client != null) {
        return client;
      }
      LOG.debug(""String_Node_Str"" + numOfConnections + ""String_Node_Str""+ _maxConnectionsPerHost+ ""String_Node_Str"");
      numOfConnections=counter.get();
    }
    LOG.info(""String_Node_Str"" + connection + ""String_Node_Str"");
    String name=c.getName();
    Constructor<?> constructor=_constructorCache.get(name);
    if (constructor == null) {
      String clientClassName=name.replace(""String_Node_Str"",""String_Node_Str"");
      try {
        Class<?> clazz=Class.forName(clientClassName);
        constructor=clazz.getConstructor(new Class[]{TProtocolFactory.class,TAsyncClientManager.class,TNonblockingTransport.class});
        _constructorCache.put(name,constructor);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    try {
      client=(TAsyncClient)constructor.newInstance(new Object[]{_protocolFactory,_clientManager,newTransport(connection)});
      client.setTimeout(_timeout);
      counter.incrementAndGet();
      return client;
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}",0.810149801284011
82560,"private void returnClient(Connection connection,TAsyncClient client) throws InterruptedException {
  if (!client.hasError()) {
    getQueue(connection).put(client);
  }
 else {
    _numberOfConnections.decrementAndGet();
  }
}","private void returnClient(Connection connection,TAsyncClient client) throws InterruptedException {
  if (!client.hasError()) {
    getQueue(connection).put(client);
  }
 else {
    AtomicInteger counter=_numberOfConnections.get(connection._host);
    if (counter != null) {
      counter.decrementAndGet();
    }
  }
}",0.8308823529411765
82561,"@Override protected BlurIndex openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  URI tableUri=getTableURI(table);
  Path tablePath=new Path(tableUri.toString());
  Path hdfsDirPath=new Path(tablePath,shard);
  String shardPath=ZookeeperPathConstants.getBlurLockPath(table) + ""String_Node_Str"" + shard;
  ZookeeperLockFactory lockFactory=new ZookeeperLockFactory(_zookeeper,shardPath);
  HdfsDirectory directory=new HdfsDirectory(hdfsDirPath);
  directory.setLockFactory(lockFactory);
  BlockDirectory baseDirectory=new BlockDirectory(table + ""String_Node_Str"" + shard,directory,_cache);
  BlurIndexWriter writer=new BlurIndexWriter();
  writer.setCloser(_closer);
  writer.setCommiter(_commiter);
  writer.setAnalyzer(getAnalyzer(table));
  writer.setDirectory(baseDirectory);
  writer.setRefresher(_refresher);
  writer.init();
  return warmUp(writer);
}","@Override protected BlurIndex openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  URI tableUri=getTableURI(table);
  Path tablePath=new Path(tableUri.toString());
  Path hdfsDirPath=new Path(tablePath,shard);
  String shardPath=ZookeeperPathConstants.getBlurLockPath(table) + ""String_Node_Str"" + shard;
  ZookeeperLockFactory lockFactory=new ZookeeperLockFactory(_zookeeper,shardPath);
  DirectIODirectory directory=new HdfsDirectory(hdfsDirPath);
  directory.setLockFactory(lockFactory);
  TableDescriptor descriptor=_clusterStatus.getTableDescriptor(table);
  String compressionClass=descriptor.compressionClass;
  int compressionBlockSize=descriptor.compressionBlockSize;
  if (compressionClass != null) {
    CompressionCodec compressionCodec;
    try {
      compressionCodec=CreateTable.getInstance(compressionClass);
      directory=new CompressedFieldDataDirectory(directory,compressionCodec,compressionBlockSize);
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
  }
  BlockDirectory baseDirectory=new BlockDirectory(table + ""String_Node_Str"" + shard,directory,_cache);
  BlurIndexWriter writer=new BlurIndexWriter();
  writer.setCloser(_closer);
  writer.setCommiter(_commiter);
  writer.setAnalyzer(getAnalyzer(table));
  writer.setDirectory(baseDirectory);
  writer.setRefresher(_refresher);
  writer.init();
  return warmUp(writer);
}",0.7761065749892565
82562,"private void fetchBlock(int blockId) throws IOException {
  long position=_blockPositions[blockId];
  int length=_blockLengths[blockId];
  _indexInput.seek(position);
  _indexInput.readBytes(_decompressionBuffer,0,length);
  _decompressor.reset();
  _decompressor.setInput(_decompressionBuffer,0,length);
  _blockBufferLength=_decompressor.decompress(_blockBuffer,0,_blockBuffer.length);
  _currentBlockId=blockId;
}","private void fetchBlock(int blockId) throws IOException {
  long position=_blockPositions[blockId];
  int length=_blockLengths[blockId];
  _indexInput.seek(position);
  _indexInput.readBytes(_decompressionBuffer,0,length);
synchronized (_decompressor) {
    _decompressor.reset();
    _decompressor.setInput(_decompressionBuffer,0,length);
    _blockBufferLength=_decompressor.decompress(_blockBuffer,0,_blockBuffer.length);
  }
  _currentBlockId=blockId;
}",0.8957617411225659
82563,"public void close() throws IOException {
  _decompressor.end();
  if (!_isClone) {
    _indexInput.close();
  }
}","public void close() throws IOException {
  if (!_isClone) {
    _decompressor.end();
    _indexInput.close();
  }
}",0.8245614035087719
82564,"public CompressedIndexInput(String name,Directory directory,CompressionCodec codec) throws IOException {
  _codec=codec;
  _decompressor=_codec.createDecompressor();
  _indexInput=directory.openInput(name);
  _realLength=_indexInput.length();
  _indexInput.seek(_realLength - _SIZES_META_DATA);
  long metaDataLength=_indexInput.readLong();
  int blockCount=_indexInput.readInt();
  _blockSize=_indexInput.readInt();
  _origLength=_indexInput.readLong();
  _blockLengths=new int[blockCount];
  _blockPositions=new long[blockCount];
  _indexInput.seek(_realLength - _SIZES_META_DATA - metaDataLength);
  for (int i=0; i < blockCount; i++) {
    _blockPositions[i]=_indexInput.readVLong();
    _blockLengths[i]=_indexInput.readVInt();
  }
  _blockBuffer=new byte[_blockSize];
  int dsize=_blockSize * 2;
  if (dsize < _MIN_BUFFER_SIZE) {
    dsize=_MIN_BUFFER_SIZE;
  }
  _decompressionBuffer=new byte[dsize];
}","public CompressedIndexInput(String name,Directory directory,CompressionCodec codec) throws IOException {
  _decompressor=codec.createDecompressor();
  _indexInput=directory.openInput(name);
  _realLength=_indexInput.length();
  _indexInput.seek(_realLength - _SIZES_META_DATA);
  long metaDataLength=_indexInput.readLong();
  int blockCount=_indexInput.readInt();
  _blockSize=_indexInput.readInt();
  _origLength=_indexInput.readLong();
  _blockLengths=new int[blockCount];
  _blockPositions=new long[blockCount];
  _indexInput.seek(_realLength - _SIZES_META_DATA - metaDataLength);
  for (int i=0; i < blockCount; i++) {
    _blockPositions[i]=_indexInput.readVLong();
    _blockLengths[i]=_indexInput.readVInt();
  }
  setupBuffers(this);
}",0.8825665859564165
82565,"public CompressedFieldDataDirectory(Directory dir,CompressionCodec compression,int blockSize){
  _directory=dir;
  if (compression == null) {
    _compression=DEFAULT_COMPRESSION;
  }
 else {
    _compression=compression;
  }
  _writingBlockSize=blockSize;
}","public CompressedFieldDataDirectory(DirectIODirectory dir,CompressionCodec compression,int blockSize){
  _directory=dir;
  if (compression == null) {
    _compression=DEFAULT_COMPRESSION;
  }
 else {
    _compression=compression;
  }
  _writingBlockSize=blockSize;
}",0.9847328244274808
82566,"public Object clone(){
  CompressedIndexInput clone=(CompressedIndexInput)super.clone();
  clone._isClone=true;
  clone._decompressor=_codec.createDecompressor();
  clone._indexInput=(IndexInput)_indexInput.clone();
  return clone;
}","public Object clone(){
  CompressedIndexInput clone=(CompressedIndexInput)super.clone();
  clone._isClone=true;
  clone._indexInput=(IndexInput)_indexInput.clone();
  setupBuffers(clone);
  return clone;
}",0.6529680365296804
82567,"@Test public void testCompressedFieldDataDirectoryBasic() throws CorruptIndexException, IOException {
  RAMDirectory dir=new RAMDirectory();
  CompressedFieldDataDirectory directory=new CompressedFieldDataDirectory(dir,COMPRESSION_CODEC);
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  TieredMergePolicy mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  IndexWriter writer=new IndexWriter(directory,config);
  addDocs(writer,0,10);
  writer.close();
  testFetches(directory);
}","@Test public void testCompressedFieldDataDirectoryBasic() throws CorruptIndexException, IOException {
  RAMDirectory dir=new RAMDirectory();
  CompressedFieldDataDirectory directory=new CompressedFieldDataDirectory(DirectIODirectory.wrap(dir),COMPRESSION_CODEC);
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  TieredMergePolicy mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  IndexWriter writer=new IndexWriter(directory,config);
  addDocs(writer,0,10);
  writer.close();
  testFetches(directory);
}",0.9743150684931506
82568,"@Test public void testCompressedFieldDataDirectoryTransition() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory dir=new RAMDirectory();
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  TieredMergePolicy mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  IndexWriter writer=new IndexWriter(dir,config);
  addDocs(writer,0,5);
  writer.close();
  CompressedFieldDataDirectory directory=new CompressedFieldDataDirectory(dir,COMPRESSION_CODEC);
  config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  writer=new IndexWriter(directory,config);
  addDocs(writer,5,5);
  writer.close();
  testFetches(directory);
}","@Test public void testCompressedFieldDataDirectoryTransition() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory dir=new RAMDirectory();
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  TieredMergePolicy mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  IndexWriter writer=new IndexWriter(dir,config);
  addDocs(writer,0,5);
  writer.close();
  CompressedFieldDataDirectory directory=new CompressedFieldDataDirectory(DirectIODirectory.wrap(dir),COMPRESSION_CODEC);
  config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  writer=new IndexWriter(directory,config);
  addDocs(writer,5,5);
  writer.close();
  testFetches(directory);
}",0.9826789838337182
82569,"@Test public void testCompressedFieldDataDirectoryMixedBlockSize() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory dir=new RAMDirectory();
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  TieredMergePolicy mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  IndexWriter writer=new IndexWriter(dir,config);
  addDocs(writer,0,5);
  writer.close();
  CompressedFieldDataDirectory directory1=new CompressedFieldDataDirectory(dir,COMPRESSION_CODEC,2);
  config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  writer=new IndexWriter(directory1,config);
  addDocs(writer,5,2);
  writer.close();
  CompressedFieldDataDirectory directory2=new CompressedFieldDataDirectory(dir,COMPRESSION_CODEC,4);
  config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  writer=new IndexWriter(directory2,config);
  addDocs(writer,7,3);
  writer.close();
  testFetches(directory2);
}","@Test public void testCompressedFieldDataDirectoryMixedBlockSize() throws CorruptIndexException, LockObtainFailedException, IOException {
  RAMDirectory dir=new RAMDirectory();
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  TieredMergePolicy mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  IndexWriter writer=new IndexWriter(dir,config);
  addDocs(writer,0,5);
  writer.close();
  CompressedFieldDataDirectory directory1=new CompressedFieldDataDirectory(DirectIODirectory.wrap(dir),COMPRESSION_CODEC,2);
  config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  writer=new IndexWriter(directory1,config);
  addDocs(writer,5,2);
  writer.close();
  CompressedFieldDataDirectory directory2=new CompressedFieldDataDirectory(DirectIODirectory.wrap(dir),COMPRESSION_CODEC,4);
  config=new IndexWriterConfig(Version.LUCENE_33,new KeywordAnalyzer());
  mergePolicy=(TieredMergePolicy)config.getMergePolicy();
  mergePolicy.setUseCompoundFile(false);
  writer=new IndexWriter(directory2,config);
  addDocs(writer,7,3);
  writer.close();
  testFetches(directory2);
}",0.9759229534510432
82570,"public Agent(Properties props){
  String url=props.getProperty(""String_Node_Str"");
  SimpleDriverDataSource dataSource=null;
  try {
    dataSource=new SimpleDriverDataSource(DriverManager.getDriver(url),url,props.getProperty(""String_Node_Str""),props.getProperty(""String_Node_Str""));
  }
 catch (  SQLException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
  JdbcTemplate jdbc=new JdbcTemplate(dataSource);
  List<String> zooKeeperInstances=new ArrayList<String>(Arrays.asList(props.getProperty(""String_Node_Str"").split(""String_Node_Str"")));
  for (  String zkInstance : zooKeeperInstances) {
    String zkUrl=props.getProperty(""String_Node_Str"" + zkInstance + ""String_Node_Str"");
    new Thread(new ZookeeperInstance(zkInstance,zkUrl,jdbc)).start();
  }
  List<String> activeCollectors=new ArrayList<String>(Arrays.asList(props.getProperty(""String_Node_Str"").split(""String_Node_Str"")));
  Map<String,String> hdfsInstances=loadHdfsInstances(props);
  Map<String,String> blurInstances=loadBlurInstances(props);
  for (  Map.Entry<String,String> hdfsEntry : hdfsInstances.entrySet()) {
    HDFSCollector.initializeHdfs(hdfsEntry.getKey(),hdfsEntry.getValue(),jdbc);
  }
  while (true) {
    if (activeCollectors.contains(""String_Node_Str"")) {
      for (      String uri : hdfsInstances.values()) {
        try {
          HDFSCollector.startCollecting(uri,jdbc);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
      }
    }
    if (activeCollectors.contains(""String_Node_Str"")) {
      for (      String uri : blurInstances.values()) {
        try {
          QueryCollector.startCollecting(uri,jdbc);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
      }
    }
    if (activeCollectors.contains(""String_Node_Str"")) {
      for (      String uri : blurInstances.values()) {
        try {
          TableCollector.startCollecting(uri,jdbc);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
      }
    }
    try {
      Thread.sleep(1500);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
  System.out.println(""String_Node_Str"");
}","public Agent(Properties props){
  String url=props.getProperty(""String_Node_Str"");
  SimpleDriverDataSource dataSource=null;
  try {
    dataSource=new SimpleDriverDataSource(DriverManager.getDriver(url),url,props.getProperty(""String_Node_Str""),props.getProperty(""String_Node_Str""));
  }
 catch (  SQLException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
  JdbcTemplate jdbc=new JdbcTemplate(dataSource);
  List<String> zooKeeperInstances=new ArrayList<String>(Arrays.asList(props.getProperty(""String_Node_Str"").split(""String_Node_Str"")));
  for (  String zkInstance : zooKeeperInstances) {
    String zkUrl=props.getProperty(""String_Node_Str"" + zkInstance + ""String_Node_Str"");
    new Thread(new ZookeeperInstance(zkInstance,zkUrl,jdbc,props)).start();
  }
  List<String> activeCollectors=new ArrayList<String>(Arrays.asList(props.getProperty(""String_Node_Str"").split(""String_Node_Str"")));
  Map<String,Map<String,String>> hdfsInstances=loadHdfsInstances(props);
  Map<String,String> blurInstances=loadBlurInstances(props);
  for (  Map.Entry<String,Map<String,String>> hdfsEntry : hdfsInstances.entrySet()) {
    HDFSCollector.initializeHdfs(hdfsEntry.getKey(),hdfsEntry.getValue().get(""String_Node_Str""),jdbc);
  }
  while (true) {
    if (activeCollectors.contains(""String_Node_Str"")) {
      for (      Map<String,String> instance : hdfsInstances.values()) {
        try {
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
      }
    }
    if (activeCollectors.contains(""String_Node_Str"")) {
      for (      String uri : blurInstances.values()) {
        try {
          QueryCollector.startCollecting(uri,jdbc);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
      }
    }
    if (activeCollectors.contains(""String_Node_Str"")) {
      for (      String uri : blurInstances.values()) {
        try {
          TableCollector.startCollecting(uri,jdbc);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e.getMessage());
        }
      }
    }
    try {
      Thread.sleep(1500);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
  System.out.println(""String_Node_Str"");
}",0.9668615984405458
82571,"private Map<String,String> loadHdfsInstances(Properties props){
  Map<String,String> instances=new HashMap<String,String>();
  if (props.containsKey(""String_Node_Str"")) {
    String[] hdfsNames=props.getProperty(""String_Node_Str"").split(""String_Node_Str"");
    for (    String hdfs : hdfsNames) {
      instances.put(hdfs,props.getProperty(""String_Node_Str"" + hdfs + ""String_Node_Str""));
    }
  }
  return instances;
}","private Map<String,Map<String,String>> loadHdfsInstances(Properties props){
  Map<String,Map<String,String>> instances=new HashMap<String,Map<String,String>>();
  if (props.containsKey(""String_Node_Str"")) {
    String[] hdfsNames=props.getProperty(""String_Node_Str"").split(""String_Node_Str"");
    for (    String hdfs : hdfsNames) {
      Map<String,String> instanceInfo=new HashMap<String,String>();
      instanceInfo.put(""String_Node_Str"",props.getProperty(""String_Node_Str"" + hdfs + ""String_Node_Str""));
      instanceInfo.put(""String_Node_Str"",props.getProperty(""String_Node_Str"" + hdfs + ""String_Node_Str""));
      instances.put(hdfs,instanceInfo);
    }
  }
  return instances;
}",0.702262443438914
82572,"public static void startCollecting(String uriString,JdbcTemplate jdbc){
  try {
    System.out.println(""String_Node_Str"");
    URI uri=new URI(uriString);
    FileSystem fileSystem=FileSystem.get(uri,new Configuration());
    System.out.println(fileSystem.getClass());
    if (fileSystem instanceof DistributedFileSystem) {
      DistributedFileSystem dfs=(DistributedFileSystem)fileSystem;
      DiskStatus ds=dfs.getDiskStatus();
      long capacity=ds.getCapacity();
      long used=ds.getDfsUsed();
      long remaining=ds.getRemaining();
      long presentCapacity=used + remaining;
      System.out.println(""String_Node_Str"" + capacity);
      System.out.println(""String_Node_Str"" + presentCapacity);
      System.out.println(""String_Node_Str"" + remaining);
      System.out.println(""String_Node_Str"" + used);
      System.out.println(""String_Node_Str"" + (((1.0 * used) / presentCapacity) * 100) + ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + dfs.getUnderReplicatedBlocksCount());
      System.out.println(""String_Node_Str"" + dfs.getCorruptBlocksCount());
      System.out.println(""String_Node_Str"" + dfs.getMissingBlocksCount());
      System.out.println();
      System.out.println(""String_Node_Str"");
      DatanodeInfo[] live=dfs.getClient().datanodeReport(DatanodeReportType.LIVE);
      DatanodeInfo[] dead=dfs.getClient().datanodeReport(DatanodeReportType.DEAD);
      System.out.println(""String_Node_Str"" + live.length + ""String_Node_Str""+ (live.length + dead.length)+ ""String_Node_Str""+ dead.length+ ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void startCollecting(final String uriString,final JdbcTemplate jdbc){
  try {
    System.out.println(""String_Node_Str"");
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          URI uri=new URI(uriString);
          FileSystem fileSystem=FileSystem.get(uri,new Configuration());
          System.out.println(fileSystem.getClass());
          if (fileSystem instanceof DistributedFileSystem) {
            DistributedFileSystem dfs=(DistributedFileSystem)fileSystem;
            DiskStatus ds=dfs.getDiskStatus();
            long capacity=ds.getCapacity();
            long used=ds.getDfsUsed();
            long remaining=ds.getRemaining();
            long presentCapacity=used + remaining;
            System.out.println(""String_Node_Str"" + capacity);
            System.out.println(""String_Node_Str"" + presentCapacity);
            System.out.println(""String_Node_Str"" + remaining);
            System.out.println(""String_Node_Str"" + used);
            System.out.println(""String_Node_Str"" + (((1.0 * used) / presentCapacity) * 100) + ""String_Node_Str"");
            System.out.println(""String_Node_Str"" + dfs.getUnderReplicatedBlocksCount());
            System.out.println(""String_Node_Str"" + dfs.getCorruptBlocksCount());
            System.out.println(""String_Node_Str"" + dfs.getMissingBlocksCount());
            System.out.println();
            System.out.println(""String_Node_Str"");
            DatanodeInfo[] live=dfs.getClient().datanodeReport(DatanodeReportType.LIVE);
            DatanodeInfo[] dead=dfs.getClient().datanodeReport(DatanodeReportType.DEAD);
            System.out.println(""String_Node_Str"" + live.length + ""String_Node_Str""+ (live.length + dead.length)+ ""String_Node_Str""+ dead.length+ ""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
).start();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8919899525537259
82573,"private void runInitialRegistration(){
  ControllerCollector.collect(this,jdbc);
  ClusterCollector.collect(this,jdbc);
}","private void runInitialRegistration(){
  ControllerCollector.collect(this,jdbc,props,this);
  ClusterCollector.collect(this,jdbc);
}",0.9565217391304348
82574,"public ZookeeperInstance(String name,String url,JdbcTemplate jdbc){
  this.name=name;
  this.url=url;
  this.jdbc=jdbc;
  initializeZkInstanceModel();
  resetConnection();
}","public ZookeeperInstance(String name,String url,JdbcTemplate jdbc,Properties props){
  this.name=name;
  this.url=url;
  this.jdbc=jdbc;
  this.props=props;
  initializeZkInstanceModel();
  resetConnection();
}",0.9033942558746736
82575,"private List<String> getControllers(){
  try {
    return zk.getChildren(""String_Node_Str"",false);
  }
 catch (  KeeperException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return new ArrayList<String>();
}","private List<String> getControllers(){
  try {
    if (""String_Node_Str"".equals(props.getProperty(""String_Node_Str"" + zki.getName() + ""String_Node_Str""))) {
      return zk.getChildren(""String_Node_Str"",false);
    }
 else {
      return zk.getChildren(""String_Node_Str"",false);
    }
  }
 catch (  KeeperException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return new ArrayList<String>();
}",0.723943661971831
82576,"private ControllerCollector(InstanceManager manager,JdbcTemplate jdbc){
  this.zk=manager.getInstance();
  this.instanceId=manager.getInstanceId();
  this.jdbc=jdbc;
  updateControllers();
}","private ControllerCollector(InstanceManager manager,JdbcTemplate jdbc,Properties props,ZookeeperInstance zki){
  this.zk=manager.getInstance();
  this.instanceId=manager.getInstanceId();
  this.jdbc=jdbc;
  this.props=props;
  this.zki=zki;
  updateControllers();
}",0.8351648351648352
82577,"public static void collect(InstanceManager manager,JdbcTemplate jdbc){
  new ControllerCollector(manager,jdbc);
}","public static void collect(InstanceManager manager,JdbcTemplate jdbc,Properties props,ZookeeperInstance zki){
  new ControllerCollector(manager,jdbc,props,zki);
}",0.8218181818181818
82578,"@Override public Void call(Client client) throws Exception {
  List<String> tables=client.tableList();
  ObjectMapper mapper=new ObjectMapper();
  jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
  for (  String table : tables) {
    List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
    TableDescriptor descriptor=client.describe(table);
    TableMap.get().put(table,(Integer)(existingTable.get(0).get(""String_Node_Str"")));
    Schema schema=client.schema(table);
    String schemaString=mapper.writeValueAsString(schema);
    Map<String,String> shardServerLayout=client.shardServerLayout(table);
    Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
    for (    String shard : shardServerLayout.keySet()) {
      String host=shardServerLayout.get(shard);
      if (formattedShard.get(host) != null) {
        formattedShard.get(host).add(shard);
      }
 else {
        formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
      }
    }
    String shardServerString=mapper.writeValueAsString(formattedShard);
    String tableUri=descriptor.tableUri;
    String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
    if (existingTable.isEmpty()) {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
    }
 else {
      jdbc.update(""String_Node_Str"",new Object[]{descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString,table});
    }
  }
  return null;
}","@Override public Void call(Client client) throws Exception {
  List<String> tables=client.tableList();
  ObjectMapper mapper=new ObjectMapper();
  jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
  for (  String table : tables) {
    List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
    TableDescriptor descriptor=client.describe(table);
    if (!existingTable.isEmpty()) {
      TableMap.get().put(table,(Integer)(existingTable.get(0).get(""String_Node_Str"")));
    }
    Schema schema=client.schema(table);
    String schemaString=mapper.writeValueAsString(schema);
    Map<String,String> shardServerLayout=client.shardServerLayout(table);
    Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
    for (    String shard : shardServerLayout.keySet()) {
      String host=shardServerLayout.get(shard);
      if (formattedShard.get(host) != null) {
        formattedShard.get(host).add(shard);
      }
 else {
        formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
      }
    }
    String shardServerString=mapper.writeValueAsString(formattedShard);
    String tableUri=descriptor.tableUri;
    String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
    if (existingTable.isEmpty()) {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
    }
 else {
      jdbc.update(""String_Node_Str"",new Object[]{descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString,table});
    }
  }
  return null;
}",0.9867149758454108
82579,"public static void startCollecting(String connection,final JdbcTemplate jdbc) throws Exception {
  BlurClientManager.execute(connection,new BlurCommand<Void>(){
    @Override public Void call(    Client client) throws Exception {
      List<String> tables=client.tableList();
      ObjectMapper mapper=new ObjectMapper();
      jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
      for (      String table : tables) {
        List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
        TableDescriptor descriptor=client.describe(table);
        TableMap.get().put(table,(Integer)(existingTable.get(0).get(""String_Node_Str"")));
        Schema schema=client.schema(table);
        String schemaString=mapper.writeValueAsString(schema);
        Map<String,String> shardServerLayout=client.shardServerLayout(table);
        Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
        for (        String shard : shardServerLayout.keySet()) {
          String host=shardServerLayout.get(shard);
          if (formattedShard.get(host) != null) {
            formattedShard.get(host).add(shard);
          }
 else {
            formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
          }
        }
        String shardServerString=mapper.writeValueAsString(formattedShard);
        String tableUri=descriptor.tableUri;
        String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
        if (existingTable.isEmpty()) {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
        }
 else {
          jdbc.update(""String_Node_Str"",new Object[]{descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString,table});
        }
      }
      return null;
    }
  }
);
}","public static void startCollecting(String connection,final JdbcTemplate jdbc) throws Exception {
  BlurClientManager.execute(connection,new BlurCommand<Void>(){
    @Override public Void call(    Client client) throws Exception {
      List<String> tables=client.tableList();
      ObjectMapper mapper=new ObjectMapper();
      jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
      for (      String table : tables) {
        List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
        TableDescriptor descriptor=client.describe(table);
        if (!existingTable.isEmpty()) {
          TableMap.get().put(table,(Integer)(existingTable.get(0).get(""String_Node_Str"")));
        }
        Schema schema=client.schema(table);
        String schemaString=mapper.writeValueAsString(schema);
        Map<String,String> shardServerLayout=client.shardServerLayout(table);
        Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
        for (        String shard : shardServerLayout.keySet()) {
          String host=shardServerLayout.get(shard);
          if (formattedShard.get(host) != null) {
            formattedShard.get(host).add(shard);
          }
 else {
            formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
          }
        }
        String shardServerString=mapper.writeValueAsString(formattedShard);
        String tableUri=descriptor.tableUri;
        String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
        if (existingTable.isEmpty()) {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
        }
 else {
          jdbc.update(""String_Node_Str"",new Object[]{descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString,table});
        }
      }
      return null;
    }
  }
);
}",0.9867751780264497
82580,"@Override public Void call(Client client) throws Exception {
  System.out.println(""String_Node_Str"");
  List<String> tables=client.tableList();
  ObjectMapper mapper=new ObjectMapper();
  jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
  for (  String table : tables) {
    List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
    TableDescriptor descriptor=client.describe(table);
    Schema schema=client.schema(table);
    String schemaString=mapper.writeValueAsString(schema);
    Map<String,String> shardServerLayout=client.shardServerLayout(table);
    Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
    for (    String shard : shardServerLayout.keySet()) {
      String host=shardServerLayout.get(shard);
      if (formattedShard.get(host) != null) {
        formattedShard.get(host).add(shard);
      }
 else {
        formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
      }
    }
    String shardServerString=mapper.writeValueAsString(formattedShard);
    String tableUri=descriptor.tableUri;
    String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
    if (existingTable.isEmpty()) {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,shardServerString,schemaString});
    }
 else {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,shardServerString,schemaString});
    }
  }
  return null;
}","@Override public Void call(Client client) throws Exception {
  System.out.println(""String_Node_Str"");
  List<String> tables=client.tableList();
  ObjectMapper mapper=new ObjectMapper();
  jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
  for (  String table : tables) {
    List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
    TableDescriptor descriptor=client.describe(table);
    Schema schema=client.schema(table);
    String schemaString=mapper.writeValueAsString(schema);
    Map<String,String> shardServerLayout=client.shardServerLayout(table);
    Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
    for (    String shard : shardServerLayout.keySet()) {
      String host=shardServerLayout.get(shard);
      if (formattedShard.get(host) != null) {
        formattedShard.get(host).add(shard);
      }
 else {
        formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
      }
    }
    String shardServerString=mapper.writeValueAsString(formattedShard);
    String tableUri=descriptor.tableUri;
    String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
    if (existingTable.isEmpty()) {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
    }
 else {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
    }
  }
  return null;
}",0.9836375078665828
82581,"public static void startCollecting(String connection,final JdbcTemplate jdbc) throws Exception {
  BlurClientManager.execute(connection,new BlurCommand<Void>(){
    @Override public Void call(    Client client) throws Exception {
      System.out.println(""String_Node_Str"");
      List<String> tables=client.tableList();
      ObjectMapper mapper=new ObjectMapper();
      jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
      for (      String table : tables) {
        List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
        TableDescriptor descriptor=client.describe(table);
        Schema schema=client.schema(table);
        String schemaString=mapper.writeValueAsString(schema);
        Map<String,String> shardServerLayout=client.shardServerLayout(table);
        Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
        for (        String shard : shardServerLayout.keySet()) {
          String host=shardServerLayout.get(shard);
          if (formattedShard.get(host) != null) {
            formattedShard.get(host).add(shard);
          }
 else {
            formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
          }
        }
        String shardServerString=mapper.writeValueAsString(formattedShard);
        String tableUri=descriptor.tableUri;
        String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
        if (existingTable.isEmpty()) {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,shardServerString,schemaString});
        }
 else {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,shardServerString,schemaString});
        }
      }
      return null;
    }
  }
);
}","public static void startCollecting(String connection,final JdbcTemplate jdbc) throws Exception {
  BlurClientManager.execute(connection,new BlurCommand<Void>(){
    @Override public Void call(    Client client) throws Exception {
      System.out.println(""String_Node_Str"");
      List<String> tables=client.tableList();
      ObjectMapper mapper=new ObjectMapper();
      jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
      for (      String table : tables) {
        List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
        TableDescriptor descriptor=client.describe(table);
        Schema schema=client.schema(table);
        String schemaString=mapper.writeValueAsString(schema);
        Map<String,String> shardServerLayout=client.shardServerLayout(table);
        Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
        for (        String shard : shardServerLayout.keySet()) {
          String host=shardServerLayout.get(shard);
          if (formattedShard.get(host) != null) {
            formattedShard.get(host).add(shard);
          }
 else {
            formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
          }
        }
        String shardServerString=mapper.writeValueAsString(formattedShard);
        String tableUri=descriptor.tableUri;
        String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
        if (existingTable.isEmpty()) {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
        }
 else {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
        }
      }
      return null;
    }
  }
);
}",0.9862796833773088
82582,"@Override public Void call(Client client) throws Exception {
  System.out.println(""String_Node_Str"");
  List<String> tables=client.tableList();
  ObjectMapper mapper=new ObjectMapper();
  jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
  for (  String table : tables) {
    List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
    TableDescriptor descriptor=client.describe(table);
    Schema schema=client.schema(table);
    String schemaString=mapper.writeValueAsString(schema);
    Map<String,String> shardServerLayout=client.shardServerLayout(table);
    Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
    for (    String shard : shardServerLayout.keySet()) {
      String host=shardServerLayout.get(shard);
      if (formattedShard.get(host) != null) {
        formattedShard.get(host).add(shard);
      }
 else {
        formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
      }
    }
    String shardServerString=mapper.writeValueAsString(formattedShard);
    String tableUri=descriptor.tableUri;
    String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
    if (existingTable.isEmpty()) {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
    }
 else {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
    }
  }
  return null;
}","@Override public Void call(Client client) throws Exception {
  System.out.println(""String_Node_Str"");
  List<String> tables=client.tableList();
  ObjectMapper mapper=new ObjectMapper();
  jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
  for (  String table : tables) {
    List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
    TableDescriptor descriptor=client.describe(table);
    Schema schema=client.schema(table);
    String schemaString=mapper.writeValueAsString(schema);
    Map<String,String> shardServerLayout=client.shardServerLayout(table);
    Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
    for (    String shard : shardServerLayout.keySet()) {
      String host=shardServerLayout.get(shard);
      if (formattedShard.get(host) != null) {
        formattedShard.get(host).add(shard);
      }
 else {
        formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
      }
    }
    String shardServerString=mapper.writeValueAsString(formattedShard);
    String tableUri=descriptor.tableUri;
    String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
    if (existingTable.isEmpty()) {
      jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
    }
 else {
      jdbc.update(""String_Node_Str"",new Object[]{descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString,table});
    }
  }
  return null;
}",0.9962240402769036
82583,"public static void startCollecting(String connection,final JdbcTemplate jdbc) throws Exception {
  BlurClientManager.execute(connection,new BlurCommand<Void>(){
    @Override public Void call(    Client client) throws Exception {
      System.out.println(""String_Node_Str"");
      List<String> tables=client.tableList();
      ObjectMapper mapper=new ObjectMapper();
      jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
      for (      String table : tables) {
        List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
        TableDescriptor descriptor=client.describe(table);
        Schema schema=client.schema(table);
        String schemaString=mapper.writeValueAsString(schema);
        Map<String,String> shardServerLayout=client.shardServerLayout(table);
        Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
        for (        String shard : shardServerLayout.keySet()) {
          String host=shardServerLayout.get(shard);
          if (formattedShard.get(host) != null) {
            formattedShard.get(host).add(shard);
          }
 else {
            formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
          }
        }
        String shardServerString=mapper.writeValueAsString(formattedShard);
        String tableUri=descriptor.tableUri;
        String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
        if (existingTable.isEmpty()) {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
        }
 else {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
        }
      }
      return null;
    }
  }
);
}","public static void startCollecting(String connection,final JdbcTemplate jdbc) throws Exception {
  BlurClientManager.execute(connection,new BlurCommand<Void>(){
    @Override public Void call(    Client client) throws Exception {
      System.out.println(""String_Node_Str"");
      List<String> tables=client.tableList();
      ObjectMapper mapper=new ObjectMapper();
      jdbc.update(""String_Node_Str"" + StringUtils.join(tables,""String_Node_Str"") + ""String_Node_Str"");
      for (      String table : tables) {
        List<Map<String,Object>> existingTable=jdbc.queryForList(""String_Node_Str"",table);
        TableDescriptor descriptor=client.describe(table);
        Schema schema=client.schema(table);
        String schemaString=mapper.writeValueAsString(schema);
        Map<String,String> shardServerLayout=client.shardServerLayout(table);
        Map<String,ArrayList<String>> formattedShard=new HashMap<String,ArrayList<String>>();
        for (        String shard : shardServerLayout.keySet()) {
          String host=shardServerLayout.get(shard);
          if (formattedShard.get(host) != null) {
            formattedShard.get(host).add(shard);
          }
 else {
            formattedShard.put(host,new ArrayList<String>(Arrays.asList(shard)));
          }
        }
        String shardServerString=mapper.writeValueAsString(formattedShard);
        String tableUri=descriptor.tableUri;
        String tableAnalyzer=descriptor.analyzerDefinition.fullTextAnalyzerClassName;
        if (existingTable.isEmpty()) {
          jdbc.update(""String_Node_Str"",new Object[]{table,descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString});
        }
 else {
          jdbc.update(""String_Node_Str"",new Object[]{descriptor.isIsEnabled() ? 2 : 1,tableUri,tableAnalyzer,schemaString,shardServerString,table});
        }
      }
      return null;
    }
  }
);
}",0.9968337730870712
82584,"private static FieldSelector getFieldSelector(final Selector selector){
  return new FieldSelector(){
    private static final long serialVersionUID=4089164344758433000L;
    @Override public FieldSelectorResult accept(    String fieldName){
      if (ROW_ID.equals(fieldName)) {
        return FieldSelectorResult.LOAD;
      }
      if (RECORD_ID.equals(fieldName)) {
        return FieldSelectorResult.LOAD;
      }
      if (PRIME_DOC.equals(fieldName)) {
        return FieldSelectorResult.NO_LOAD;
      }
      if (selector.columnFamiliesToFetch == null && selector.columnsToFetch == null) {
        return FieldSelectorResult.LOAD;
      }
      String columnFamily=getColumnFamily(fieldName);
      if (selector.columnFamiliesToFetch != null) {
        if (selector.columnFamiliesToFetch.contains(columnFamily)) {
          return FieldSelectorResult.LOAD;
        }
        return FieldSelectorResult.NO_LOAD;
      }
      String columnName=getColumnName(fieldName);
      if (selector.columnsToFetch != null) {
        Set<String> columns=selector.columnsToFetch.get(columnFamily);
        if (columns != null && columns.contains(columnName)) {
          return FieldSelectorResult.LOAD;
        }
      }
      return FieldSelectorResult.NO_LOAD;
    }
  }
;
}","private static FieldSelector getFieldSelector(final Selector selector){
  return new FieldSelector(){
    private static final long serialVersionUID=4089164344758433000L;
    @Override public FieldSelectorResult accept(    String fieldName){
      if (ROW_ID.equals(fieldName)) {
        return FieldSelectorResult.LOAD;
      }
      if (RECORD_ID.equals(fieldName)) {
        return FieldSelectorResult.LOAD;
      }
      if (PRIME_DOC.equals(fieldName)) {
        return FieldSelectorResult.NO_LOAD;
      }
      if (selector.columnFamiliesToFetch == null && selector.columnsToFetch == null) {
        return FieldSelectorResult.LOAD;
      }
      String columnFamily=getColumnFamily(fieldName);
      if (selector.columnFamiliesToFetch != null) {
        if (selector.columnFamiliesToFetch.contains(columnFamily)) {
          return FieldSelectorResult.LOAD;
        }
      }
      String columnName=getColumnName(fieldName);
      if (selector.columnsToFetch != null) {
        Set<String> columns=selector.columnsToFetch.get(columnFamily);
        if (columns != null && columns.contains(columnName)) {
          return FieldSelectorResult.LOAD;
        }
      }
      return FieldSelectorResult.NO_LOAD;
    }
  }
;
}",0.7442046362909672
82585,"@Override public FieldSelectorResult accept(String fieldName){
  if (ROW_ID.equals(fieldName)) {
    return FieldSelectorResult.LOAD;
  }
  if (RECORD_ID.equals(fieldName)) {
    return FieldSelectorResult.LOAD;
  }
  if (PRIME_DOC.equals(fieldName)) {
    return FieldSelectorResult.NO_LOAD;
  }
  if (selector.columnFamiliesToFetch == null && selector.columnsToFetch == null) {
    return FieldSelectorResult.LOAD;
  }
  String columnFamily=getColumnFamily(fieldName);
  if (selector.columnFamiliesToFetch != null) {
    if (selector.columnFamiliesToFetch.contains(columnFamily)) {
      return FieldSelectorResult.LOAD;
    }
    return FieldSelectorResult.NO_LOAD;
  }
  String columnName=getColumnName(fieldName);
  if (selector.columnsToFetch != null) {
    Set<String> columns=selector.columnsToFetch.get(columnFamily);
    if (columns != null && columns.contains(columnName)) {
      return FieldSelectorResult.LOAD;
    }
  }
  return FieldSelectorResult.NO_LOAD;
}","@Override public FieldSelectorResult accept(String fieldName){
  if (ROW_ID.equals(fieldName)) {
    return FieldSelectorResult.LOAD;
  }
  if (RECORD_ID.equals(fieldName)) {
    return FieldSelectorResult.LOAD;
  }
  if (PRIME_DOC.equals(fieldName)) {
    return FieldSelectorResult.NO_LOAD;
  }
  if (selector.columnFamiliesToFetch == null && selector.columnsToFetch == null) {
    return FieldSelectorResult.LOAD;
  }
  String columnFamily=getColumnFamily(fieldName);
  if (selector.columnFamiliesToFetch != null) {
    if (selector.columnFamiliesToFetch.contains(columnFamily)) {
      return FieldSelectorResult.LOAD;
    }
  }
  String columnName=getColumnName(fieldName);
  if (selector.columnsToFetch != null) {
    Set<String> columns=selector.columnsToFetch.get(columnFamily);
    if (columns != null && columns.contains(columnName)) {
      return FieldSelectorResult.LOAD;
    }
  }
  return FieldSelectorResult.NO_LOAD;
}",0.7023060796645703
82586,"@Override public void sync(String name) throws IOException {
  File file=_localFileCache.getLocalFile(_dirName,name);
  Path dest=new Path(hdfsDirPath,name + ""String_Node_Str"");
  Path source=new Path(file.getAbsolutePath());
  int count=0;
  while (true) {
    try {
      LOG.debug(""String_Node_Str"",file.getAbsolutePath(),hdfsDirPath);
      fileSystem.copyFromLocalFile(source,dest);
      rename(name + ""String_Node_Str"",name);
      return;
    }
 catch (    IOException e) {
      if (count < _retryCount) {
        count++;
        LOG.error(""String_Node_Str"",e,count,source,dest);
      }
 else {
        throw e;
      }
    }
  }
}","@Override public void sync(String name) throws IOException {
  File file=_localFileCache.getLocalFile(_dirName,name);
  int count=0;
  while (true) {
    Path dest=new Path(hdfsDirPath,name + ""String_Node_Str"" + count);
    try {
      LOG.debug(""String_Node_Str"",file.getAbsolutePath(),hdfsDirPath);
      FSDataOutputStream outputStream=fileSystem.create(dest);
      InputStream inputStream=new BufferedInputStream(new FileInputStream(file));
      byte[] buffer=new byte[4096];
      int num;
      while ((num=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,num);
        _progressable.progress();
      }
      rename(name + ""String_Node_Str"" + count,name);
      return;
    }
 catch (    IOException e) {
      if (count < _retryCount) {
        LOG.error(""String_Node_Str"",e,count,file.getAbsolutePath(),dest);
        count++;
        try {
          fileSystem.delete(dest,false);
        }
 catch (        IOException ex) {
          LOG.error(""String_Node_Str"",ex,dest);
        }
      }
 else {
        throw e;
      }
    }
  }
}",0.5493863237872589
82587,"public IndexInput openFromLocal(String name,int bufferSize) throws IOException {
  if (Constants.WINDOWS) {
    return new FileIndexInput(_localFileCache.getLocalFile(_dirName,name),bufferSize);
  }
 else   if (name.endsWith(""String_Node_Str"")) {
    return new FileNIOIndexInput(_localFileCache.getLocalFile(_dirName,name),bufferSize);
  }
 else {
    return new MMapIndexInput(_localFileCache.getLocalFile(_dirName,name));
  }
}","public IndexInput openFromLocal(String name,int bufferSize) throws IOException {
  if (Constants.WINDOWS) {
    return new FileIndexInput(_localFileCache.getLocalFile(_dirName,name),bufferSize);
  }
 else   if (name.endsWith(""String_Node_Str"") || !Constants.JRE_IS_64BIT) {
    return new FileNIOIndexInput(_localFileCache.getLocalFile(_dirName,name),bufferSize);
  }
 else {
    return new MMapIndexInput(_localFileCache.getLocalFile(_dirName,name));
  }
}",0.9695603156708004
82588,"private File newFile(String dirName,String name){
  int index=random.nextInt(files.length);
  for (int i=0; i < files.length; i++) {
    File dir=new File(files[index],dirName);
    if (!dir.exists()) {
      dir.mkdirs();
    }
    try {
      File file=new File(dir,name);
      file.createNewFile();
      return file;
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",dir);
    }
    index++;
    if (index >= files.length) {
      index=0;
    }
  }
  fatalNoLocalDirs();
  return null;
}","private File newFile(String dirName,String name){
  int index=random.nextInt(files.length);
  for (int i=0; i < files.length; i++) {
    File dir=new File(files[index],dirName);
    if (!dir.exists()) {
      dir.mkdirs();
    }
    try {
      createDir(dir);
      File file=new File(dir,name);
      return file;
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",dir);
    }
    index++;
    if (index >= files.length) {
      index=0;
    }
  }
  fatalNoLocalDirs();
  return null;
}",0.950884086444008
82589,"public void init(){
  super.init();
  startIndexReaderCloserDaemon();
  startIndexReopenerDaemon();
}","public void init(){
  super.init();
  startIndexReaderCloserDaemon();
}",0.8255813953488372
82590,"protected void closeOldReaders(String table){
  Set<String> shardsToServe=getShardsToServe(table);
  Map<String,IndexReader> tableReaders=readers.get(table);
  if (tableReaders == null) {
    return;
  }
  Set<String> shardsOpen=new HashSet<String>(tableReaders.keySet());
  shardsOpen.removeAll(shardsToServe);
  if (shardsOpen.isEmpty()) {
    return;
  }
  for (  String shard : shardsOpen) {
    LOG.info(""String_Node_Str"",table,shard);
    IndexReader indexReader=tableReaders.remove(shard);
    beforeClose(shard,indexReader);
    try {
      indexReader.close();
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e,indexReader);
    }
    cleanupLocallyCachedIndexes(table,shard);
  }
}","protected void closeOldReaders(String table){
  Set<String> shardsToServe=getShardsToServe(table);
  Map<String,IndexReader> tableReaders=readers.get(table);
  if (tableReaders == null) {
    return;
  }
  Set<String> shardsOpen=new HashSet<String>(tableReaders.keySet());
  shardsOpen.removeAll(shardsToServe);
  if (shardsOpen.isEmpty()) {
    return;
  }
  for (  String shard : shardsOpen) {
    IndexReader indexReader=tableReaders.remove(shard);
    closeIndex(table,shard,indexReader);
  }
}",0.6909090909090909
82591,"@Override protected IndexReader openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  Path tablePath=new Path(blurBasePath,table);
  if (!exists(tablePath)) {
    throw new FileNotFoundException(tablePath.toString());
  }
  Path hdfsDirPath=new Path(tablePath,shard);
  if (!exists(hdfsDirPath)) {
    throw new FileNotFoundException(hdfsDirPath.toString());
  }
  ReplicaHdfsDirectory directory=new ReplicaHdfsDirectory(table,shard,hdfsDirPath,fileSystem,localFileCache,lockFactory,new Progressable(){
    @Override public void progress(){
    }
  }
,replicationDaemon);
  touchFiles(directory,table,shard);
  return IndexReader.open(directory);
}","@Override protected IndexReader openShard(String table,String shard) throws IOException {
  LOG.info(""String_Node_Str"",shard,table);
  Path tablePath=new Path(blurBasePath,table);
  if (!exists(tablePath)) {
    throw new FileNotFoundException(tablePath.toString());
  }
  Path hdfsDirPath=new Path(tablePath,shard);
  if (!exists(hdfsDirPath)) {
    throw new FileNotFoundException(hdfsDirPath.toString());
  }
  ReplicaHdfsDirectory directory=new ReplicaHdfsDirectory(table,shard,hdfsDirPath,fileSystem,localFileCache,lockFactory,new Progressable(){
    @Override public void progress(){
    }
  }
,replicationDaemon);
  return warmUp(IndexReader.open(directory));
}",0.9582417582417584
82592,"@Override public List<String> getShardList(String table){
  List<String> result=new ArrayList<String>();
  try {
    FileStatus[] listStatus=fileSystem.listStatus(new Path(blurBasePath,table));
    for (    FileStatus status : listStatus) {
      if (status.isDir()) {
        result.add(status.getPath().getName());
      }
    }
    return result;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public List<String> getShardList(String table){
  List<String> result=new ArrayList<String>();
  try {
    FileStatus[] listStatus=fileSystem.listStatus(new Path(blurBasePath,table));
    for (    FileStatus status : listStatus) {
      if (status.isDir()) {
        String name=status.getPath().getName();
        if (name.startsWith(SHARD_PREFIX)) {
          result.add(name);
        }
      }
    }
    return result;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.8605405405405405
82593,"public static void main(String[] args) throws TTransportException, IOException {
  Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread t,    Throwable e){
      LOG.error(""String_Node_Str"",e,t);
    }
  }
);
  String nodeName=args[0];
  String zkConnectionStr=args[1];
  String hdfsPath=args[2];
  List<File> localFileCaches=new ArrayList<File>();
  for (  String cachePath : args[3].split(""String_Node_Str"")) {
    localFileCaches.add(new File(cachePath));
  }
  boolean crazyMode=false;
  if (args.length == 5 && args[4].equals(CRAZY)) {
    crazyMode=true;
  }
  ZooKeeper zooKeeper=new ZooKeeper(zkConnectionStr,10000,new Watcher(){
    @Override public void process(    WatchedEvent event){
    }
  }
);
  ZookeeperDistributedManager dzk=new ZookeeperDistributedManager();
  dzk.setZooKeeper(zooKeeper);
  FileSystem fileSystem=FileSystem.get(new Configuration());
  Path blurBasePath=new Path(hdfsPath);
  HdfsExistenceCheck existenceCheck=new HdfsExistenceCheck(fileSystem,blurBasePath);
  LocalFileCache localFileCache=new LocalFileCache();
  localFileCache.setLocalFileCacheCheck(existenceCheck);
  localFileCache.setPotentialFiles(localFileCaches.toArray(new File[]{}));
  localFileCache.open();
  LockFactory lockFactory=new NoLockFactory();
  ReplicationDaemon replicationDaemon=new ReplicationDaemon(localFileCache);
  HdfsIndexServer indexServer=new HdfsIndexServer();
  indexServer.setType(NODE_TYPE.SHARD);
  indexServer.setLocalFileCache(localFileCache);
  indexServer.setLockFactory(lockFactory);
  indexServer.setFileSystem(fileSystem);
  indexServer.setBlurBasePath(blurBasePath);
  indexServer.setNodeName(nodeName);
  indexServer.setDistributedManager(dzk);
  indexServer.setReplicationDaemon(replicationDaemon);
  indexServer.init();
  localFileCache.setLocalFileCacheCheck(getLocalFileCacheCheck(indexServer));
  IndexManager indexManager=new IndexManager();
  indexManager.setIndexServer(indexServer);
  indexManager.init();
  BlurShardServer shardServer=new BlurShardServer();
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  if (crazyMode) {
    System.err.println(""String_Node_Str"");
    server.setIface(crazyMode(shardServer));
  }
 else {
    server.setIface(shardServer);
  }
  server.start();
}","public static void main(String[] args) throws TTransportException, IOException {
  Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread t,    Throwable e){
      LOG.error(""String_Node_Str"",e,t);
    }
  }
);
  String nodeName=args[0];
  String zkConnectionStr=args[1];
  String hdfsPath=args[2];
  List<File> localFileCaches=new ArrayList<File>();
  for (  String cachePath : args[3].split(""String_Node_Str"")) {
    localFileCaches.add(new File(cachePath));
  }
  boolean crazyMode=false;
  if (args.length == 5 && args[4].equals(CRAZY)) {
    crazyMode=true;
  }
  ZooKeeper zooKeeper=new ZooKeeper(zkConnectionStr,10000,new Watcher(){
    @Override public void process(    WatchedEvent event){
    }
  }
);
  ZookeeperDistributedManager dzk=new ZookeeperDistributedManager();
  dzk.setZooKeeper(zooKeeper);
  FileSystem fileSystem=FileSystem.get(new Configuration());
  Path blurBasePath=new Path(hdfsPath);
  LocalFileCache localFileCache=new LocalFileCache();
  localFileCache.setPotentialFiles(localFileCaches.toArray(new File[]{}));
  localFileCache.open();
  LockFactory lockFactory=new NoLockFactory();
  ReplicationDaemon replicationDaemon=new ReplicationDaemon(localFileCache);
  HdfsIndexServer indexServer=new HdfsIndexServer();
  indexServer.setType(NODE_TYPE.SHARD);
  indexServer.setLocalFileCache(localFileCache);
  indexServer.setLockFactory(lockFactory);
  indexServer.setFileSystem(fileSystem);
  indexServer.setBlurBasePath(blurBasePath);
  indexServer.setNodeName(nodeName);
  indexServer.setDistributedManager(dzk);
  indexServer.setReplicationDaemon(replicationDaemon);
  indexServer.init();
  localFileCache.setLocalFileCacheCheck(getLocalFileCacheCheck(indexServer));
  IndexManager indexManager=new IndexManager();
  indexManager.setIndexServer(indexServer);
  indexManager.init();
  BlurShardServer shardServer=new BlurShardServer();
  shardServer.setIndexServer(indexServer);
  shardServer.setIndexManager(indexManager);
  ThriftBlurShardServer server=new ThriftBlurShardServer();
  server.setNodeName(nodeName);
  if (crazyMode) {
    System.err.println(""String_Node_Str"");
    server.setIface(crazyMode(shardServer));
  }
 else {
    server.setIface(shardServer);
  }
  server.start();
}",0.9539112050739956
82594,"@Override public void update(long deltaTime){
  float delta=deltaTime / (float)1e9;
  float speed1=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 4f : 16) * delta;
  float speed2=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 11.25f : 45f) * delta;
  float speed3=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 5f : 20) * delta;
  if (Keyboard.isKeyDown(Keyboard.KEY_W))   camTarget.sub(0,0,speed1);
  if (Keyboard.isKeyDown(Keyboard.KEY_S))   camTarget.add(0,0,speed1);
  if (Keyboard.isKeyDown(Keyboard.KEY_D))   camTarget.add(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_A))   camTarget.sub(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_E))   camTarget.sub(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_Q))   camTarget.add(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_I))   sphereCamRelPos.sub(0,speed2,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_K))   sphereCamRelPos.add(0,speed2,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_J))   sphereCamRelPos.sub(speed2,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_L))   sphereCamRelPos.add(speed2,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_O))   sphereCamRelPos.sub(0,0,speed3);
  if (Keyboard.isKeyDown(Keyboard.KEY_U))   sphereCamRelPos.add(0,0,speed3);
  sphereCamRelPos.y(Utils.clamp(sphereCamRelPos.y(),-78.75f,-1));
  camTarget.y(camTarget.y() > 0 ? camTarget.y() : 0);
  sphereCamRelPos.z(sphereCamRelPos.z() > 5 ? sphereCamRelPos.z() : 5);
}","@Override public void update(long deltaTime){
  float delta=deltaTime / (float)1e9;
  float speed1=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 4f : 16) * delta;
  float speed2=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 11.25f : 45f) * delta;
  float speed3=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 5f : 20) * delta;
  if (Keyboard.isKeyDown(Keyboard.KEY_W))   camTarget.sub(0,0,speed1);
  if (Keyboard.isKeyDown(Keyboard.KEY_S))   camTarget.add(0,0,speed1);
  if (Keyboard.isKeyDown(Keyboard.KEY_D))   camTarget.add(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_A))   camTarget.sub(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_E))   camTarget.sub(0,speed1,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_Q))   camTarget.add(0,speed1,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_I))   sphereCamRelPos.sub(0,speed2,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_K))   sphereCamRelPos.add(0,speed2,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_J))   sphereCamRelPos.sub(speed2,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_L))   sphereCamRelPos.add(speed2,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_O))   sphereCamRelPos.sub(0,0,speed3);
  if (Keyboard.isKeyDown(Keyboard.KEY_U))   sphereCamRelPos.add(0,0,speed3);
  sphereCamRelPos.y(Utils.clamp(sphereCamRelPos.y(),-78.75f,-1));
  camTarget.y(camTarget.y() > 0 ? camTarget.y() : 0);
  sphereCamRelPos.z(sphereCamRelPos.z() > 5 ? sphereCamRelPos.z() : 5);
}",0.9971387696709584
82595,"@Override public void update(long deltaTime){
  float delta=deltaTime / (float)1e9;
  float speed1=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 4f : 16) * delta;
  float speed2=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 11.25f : 45f) * delta;
  float speed3=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 5f : 20) * delta;
  if (Keyboard.isKeyDown(Keyboard.KEY_W))   camTarget.sub(0,0,speed1);
  if (Keyboard.isKeyDown(Keyboard.KEY_S))   camTarget.add(0,0,speed1);
  if (Keyboard.isKeyDown(Keyboard.KEY_D))   camTarget.add(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_A))   camTarget.sub(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_E))   camTarget.sub(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_Q))   camTarget.add(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_I))   sphereCamRelPos.sub(0,speed2,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_K))   sphereCamRelPos.add(0,speed2,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_J))   sphereCamRelPos.sub(speed2,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_L))   sphereCamRelPos.add(speed2,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_O))   sphereCamRelPos.sub(0,0,speed3);
  if (Keyboard.isKeyDown(Keyboard.KEY_U))   sphereCamRelPos.add(0,0,speed3);
  sphereCamRelPos.y(Utils.clamp(sphereCamRelPos.y(),-78.75f,-1));
  camTarget.y(camTarget.y() > 0 ? camTarget.y() : 0);
  sphereCamRelPos.z(sphereCamRelPos.z() > 5 ? sphereCamRelPos.z() : 5);
}","@Override public void update(long deltaTime){
  float delta=deltaTime / (float)1e9;
  float speed1=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 4f : 16) * delta;
  float speed2=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 11.25f : 45f) * delta;
  float speed3=(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? 5f : 20) * delta;
  if (Keyboard.isKeyDown(Keyboard.KEY_W))   camTarget.sub(0,0,speed1);
  if (Keyboard.isKeyDown(Keyboard.KEY_S))   camTarget.add(0,0,speed1);
  if (Keyboard.isKeyDown(Keyboard.KEY_D))   camTarget.add(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_A))   camTarget.sub(speed1,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_E))   camTarget.sub(0,speed1,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_Q))   camTarget.add(0,speed1,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_I))   sphereCamRelPos.sub(0,speed2,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_K))   sphereCamRelPos.add(0,speed2,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_J))   sphereCamRelPos.sub(speed2,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_L))   sphereCamRelPos.add(speed2,0,0);
  if (Keyboard.isKeyDown(Keyboard.KEY_O))   sphereCamRelPos.sub(0,0,speed3);
  if (Keyboard.isKeyDown(Keyboard.KEY_U))   sphereCamRelPos.add(0,0,speed3);
  sphereCamRelPos.y(Utils.clamp(sphereCamRelPos.y(),-78.75f,-1));
  camTarget.y(camTarget.y() > 0 ? camTarget.y() : 0);
  sphereCamRelPos.z(sphereCamRelPos.z() > 5 ? sphereCamRelPos.z() : 5);
}",0.9971387696709584
82596,"private String[] clean(String[] data){
  ArrayList<String> clean=new ArrayList<>();
  for (  String s : data)   if (!(s=s.trim()).isEmpty())   clean.add(s);
  return clean.toArray(new String[0]);
}","private String[] clean(String[] data){
  ArrayList<String> clean=new ArrayList<>();
  for (  String s : data)   if (!(s=s.trim()).isEmpty())   clean.add(s);
  return clean.toArray(new String[clean.size()]);
}",0.9679012345679012
82597,"public static String[] split(String input,char delim){
  ArrayList<String> parts=new ArrayList<>();
  for (int index; (index=input.indexOf(delim)) != -1; ) {
    parts.add(input.substring(0,index));
    input=input.substring(index + 1);
  }
  parts.add(input);
  return parts.toArray(new String[0]);
}","public static String[] split(String input,char delim){
  ArrayList<String> parts=new ArrayList<>();
  for (int index; (index=input.indexOf(delim)) != -1; ) {
    parts.add(input.substring(0,index));
    input=input.substring(index + 1);
  }
  parts.add(input);
  return parts.toArray(new String[parts.size()]);
}",0.9787928221859706
82598,"public final void run(int major,int minor){
  try {
    Display.create(new PixelFormat(),new ContextAttribs(major,minor));
  }
 catch (  Exception exc) {
    exc.printStackTrace();
    System.exit(1);
  }
  gameLoop();
}","public final void run(PixelFormat format,ContextAttribs attribs){
  try {
    Display.create(format,attribs);
  }
 catch (  Exception exc) {
    exc.printStackTrace();
    System.exit(1);
  }
  gameLoop();
}",0.7213114754098361
82599,"public static void main(String[] args){
  new Example3_14().run();
}","public static void main(String[] args){
  new Example3_14().run(new PixelFormat(8,16,8));
}",0.8553459119496856
82600,"@Override public void resized(){
  super.resized();
  Matrix4 persMatrix=new Matrix4().clearToPerspectiveDeg(45,getWidth(),getHeight(),1,1000);
  glBindBuffer(GL_UNIFORM_BUFFER,projectionUniformBuffer);
  glBufferSubData(GL_UNIFORM_BUFFER,0,persMatrix.toBuffer());
  glBindBuffer(GL_UNIFORM_BUFFER,0);
  unprojectionData.clear();
  unprojectionData.asFloatBuffer().put(persMatrix.inverse().toBuffer());
  unprojectionData.asIntBuffer().put(getWidth()).put(getHeight());
  unprojectionData.flip();
  glBindBuffer(GL_UNIFORM_BUFFER,unprojectionUniformBuffer);
  glBufferSubData(GL_UNIFORM_BUFFER,0,unprojectionData);
  glBindBuffer(GL_UNIFORM_BUFFER,0);
}","@Override public void resized(){
  super.resized();
  Matrix4 persMatrix=new Matrix4().clearToPerspectiveDeg(45,getWidth(),getHeight(),1,1000);
  glBindBuffer(GL_UNIFORM_BUFFER,projectionUniformBuffer);
  glBufferSubData(GL_UNIFORM_BUFFER,0,persMatrix.toBuffer());
  glBindBuffer(GL_UNIFORM_BUFFER,0);
  unprojectionData.clear();
  unprojectionData.asFloatBuffer().put(persMatrix.inverse().toBuffer());
  unprojectionData.position(16 * 4);
  unprojectionData.asIntBuffer().put(getWidth()).put(getHeight());
  unprojectionData.position(18 * 4).flip();
  glBindBuffer(GL_UNIFORM_BUFFER,unprojectionUniformBuffer);
  glBufferSubData(GL_UNIFORM_BUFFER,0,unprojectionData);
  glBindBuffer(GL_UNIFORM_BUFFER,0);
}",0.9602941176470589
82601,"@Override public void render(){
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  MatrixStack modelMatrix=new MatrixStack();
  modelMatrix.setTop(viewPole.calcMatrix());
  Vector4 worldLightPos=calcLightPosition();
  Vector4 lightPosCameraSpace=modelMatrix.getTop().mult(worldLightPos);
  fragWhiteDiffuseColor.program.begin();
  glUniform4f(fragWhiteDiffuseColor.lightIntensityUniform,0.8f,0.8f,0.8f,1);
  glUniform4f(fragWhiteDiffuseColor.ambientIntensityUniform,0.2f,0.2f,0.2f,1);
  glUniform3(fragWhiteDiffuseColor.cameraSpaceLightPosUniform,lightPosCameraSpace.toBuffer());
  glUniform1f(fragWhiteDiffuseColor.lightAttenuationUniform,lightAttenuation);
  glUniform1i(fragWhiteDiffuseColor.useRSquareUniform,useRSquare ? 1 : 0);
  fragWhiteDiffuseColor.program.end();
  fragVertexDiffuseColor.program.begin();
  glUniform4f(fragVertexDiffuseColor.lightIntensityUniform,0.8f,0.8f,0.8f,1);
  glUniform4f(fragVertexDiffuseColor.ambientIntensityUniform,0.2f,0.2f,0.2f,1);
  glUniform3(fragVertexDiffuseColor.cameraSpaceLightPosUniform,lightPosCameraSpace.toBuffer());
  glUniform1f(fragVertexDiffuseColor.lightAttenuationUniform,lightAttenuation);
  glUniform1i(fragVertexDiffuseColor.useRSquareUniform,useRSquare ? 1 : 0);
  fragVertexDiffuseColor.program.end();
{
    modelMatrix.pushMatrix();
{
      modelMatrix.pushMatrix();
      fragWhiteDiffuseColor.program.begin();
      glUniformMatrix4(fragWhiteDiffuseColor.modelToCameraMatrixUniform,false,modelMatrix.getTop().toBuffer());
      glUniformMatrix3(fragWhiteDiffuseColor.normalModelToCameraMatrixUniform,false,new Matrix3(modelMatrix.getTop()).inverse().transpose().toBuffer());
      planeMesh.render();
      fragWhiteDiffuseColor.program.end();
      modelMatrix.popMatrix();
    }
{
      modelMatrix.pushMatrix();
      modelMatrix.getTop().mult(objectPole.calcMatrix());
      if (scaleCyl)       modelMatrix.getTop().scale(1,1,0.2f);
      Matrix3 normMatrix=new Matrix3(modelMatrix.getTop()).inverse().transpose();
      if (drawColoredCyl) {
        fragVertexDiffuseColor.program.begin();
        glUniformMatrix4(fragVertexDiffuseColor.modelToCameraMatrixUniform,false,modelMatrix.getTop().toBuffer());
        glUniformMatrix3(fragVertexDiffuseColor.normalModelToCameraMatrixUniform,false,normMatrix.toBuffer());
        cylinderMesh.render(""String_Node_Str"");
        fragVertexDiffuseColor.program.end();
      }
 else {
        fragWhiteDiffuseColor.program.begin();
        glUniformMatrix4(fragWhiteDiffuseColor.modelToCameraMatrixUniform,false,modelMatrix.getTop().toBuffer());
        glUniformMatrix3(fragWhiteDiffuseColor.normalModelToCameraMatrixUniform,false,normMatrix.toBuffer());
        cylinderMesh.render(""String_Node_Str"");
        fragVertexDiffuseColor.program.end();
      }
      modelMatrix.popMatrix();
    }
    if (drawLight) {
      modelMatrix.pushMatrix();
      modelMatrix.getTop().translate(new Vector3(worldLightPos));
      modelMatrix.getTop().scale(0.1f,0.1f,0.1f);
      unlit.program.begin();
      glUniformMatrix4(unlit.modelToCameraMatrixUniform,false,modelMatrix.getTop().toBuffer());
      glUniform4f(unlit.objectColorUniform,0.8078f,0.8706f,0.9922f,1);
      cubeMesh.render(""String_Node_Str"");
      unlit.program.end();
      modelMatrix.popMatrix();
    }
    modelMatrix.popMatrix();
  }
}","@Override public void render(){
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  MatrixStack modelMatrix=new MatrixStack();
  modelMatrix.setTop(viewPole.calcMatrix());
  Vector4 worldLightPos=calcLightPosition();
  Vector4 lightPosCameraSpace=modelMatrix.getTop().mult(worldLightPos);
  fragWhiteDiffuseColor.program.begin();
  glUniform4f(fragWhiteDiffuseColor.lightIntensityUniform,0.8f,0.8f,0.8f,1);
  glUniform4f(fragWhiteDiffuseColor.ambientIntensityUniform,0.2f,0.2f,0.2f,1);
  glUniform3(fragWhiteDiffuseColor.cameraSpaceLightPosUniform,lightPosCameraSpace.toBuffer());
  glUniform1f(fragWhiteDiffuseColor.lightAttenuationUniform,lightAttenuation);
  glUniform1i(fragWhiteDiffuseColor.useRSquareUniform,useRSquare ? 1 : 0);
  fragWhiteDiffuseColor.program.end();
  fragVertexDiffuseColor.program.begin();
  glUniform4f(fragVertexDiffuseColor.lightIntensityUniform,0.8f,0.8f,0.8f,1);
  glUniform4f(fragVertexDiffuseColor.ambientIntensityUniform,0.2f,0.2f,0.2f,1);
  glUniform3(fragVertexDiffuseColor.cameraSpaceLightPosUniform,lightPosCameraSpace.toBuffer());
  glUniform1f(fragVertexDiffuseColor.lightAttenuationUniform,lightAttenuation);
  glUniform1i(fragVertexDiffuseColor.useRSquareUniform,useRSquare ? 1 : 0);
  fragVertexDiffuseColor.program.end();
{
    modelMatrix.pushMatrix();
{
      modelMatrix.pushMatrix();
      fragWhiteDiffuseColor.program.begin();
      glUniformMatrix4(fragWhiteDiffuseColor.modelToCameraMatrixUniform,false,modelMatrix.getTop().toBuffer());
      glUniformMatrix3(fragWhiteDiffuseColor.normalModelToCameraMatrixUniform,false,new Matrix3(modelMatrix.getTop()).inverse().transpose().toBuffer());
      planeMesh.render();
      fragWhiteDiffuseColor.program.end();
      modelMatrix.popMatrix();
    }
{
      modelMatrix.pushMatrix();
      modelMatrix.getTop().mult(objectPole.calcMatrix());
      if (scaleCyl)       modelMatrix.getTop().scale(1,1,0.2f);
      Matrix3 normMatrix=new Matrix3(modelMatrix.getTop()).inverse().transpose();
      if (drawColoredCyl) {
        fragVertexDiffuseColor.program.begin();
        glUniformMatrix4(fragVertexDiffuseColor.modelToCameraMatrixUniform,false,modelMatrix.getTop().toBuffer());
        glUniformMatrix3(fragVertexDiffuseColor.normalModelToCameraMatrixUniform,false,normMatrix.toBuffer());
        cylinderMesh.render(""String_Node_Str"");
        fragVertexDiffuseColor.program.end();
      }
 else {
        fragWhiteDiffuseColor.program.begin();
        glUniformMatrix4(fragWhiteDiffuseColor.modelToCameraMatrixUniform,false,modelMatrix.getTop().toBuffer());
        glUniformMatrix3(fragWhiteDiffuseColor.normalModelToCameraMatrixUniform,false,normMatrix.toBuffer());
        cylinderMesh.render(""String_Node_Str"");
        fragWhiteDiffuseColor.program.end();
      }
      modelMatrix.popMatrix();
    }
    if (drawLight) {
      modelMatrix.pushMatrix();
      modelMatrix.getTop().translate(new Vector3(worldLightPos));
      modelMatrix.getTop().scale(0.1f,0.1f,0.1f);
      unlit.program.begin();
      glUniformMatrix4(unlit.modelToCameraMatrixUniform,false,modelMatrix.getTop().toBuffer());
      glUniform4f(unlit.objectColorUniform,0.8078f,0.8706f,0.9922f,1);
      cubeMesh.render(""String_Node_Str"");
      unlit.program.end();
      modelMatrix.popMatrix();
    }
    modelMatrix.popMatrix();
  }
}",0.9983416252072967
82602,"private Quaternion slerp(Quaternion q0,Quaternion q1,float alpha){
  q0=new Quaternion(q0);
  q1=new Quaternion(q1);
  float dot=q0.dot(q1);
  float DOT_THRESHOLD=0.9995f;
  if (dot > DOT_THRESHOLD)   return lerp(q0,q1,alpha);
  dot=clamp(dot,-1,1);
  float theta=(float)Math.cos(dot) * alpha;
  Quaternion q2=q1.sub(new Quaternion(q0).mult(dot)).normalize();
  return q0.mult((float)Math.cos(theta)).add(q2.mult((float)Math.sin(theta)));
}","private Quaternion slerp(Quaternion q0,Quaternion q1,float alpha){
  q0=new Quaternion(q0);
  q1=new Quaternion(q1);
  float dot=q0.dot(q1);
  float DOT_THRESHOLD=0.9995f;
  if (dot > DOT_THRESHOLD)   return lerp(q0,q1,alpha);
  dot=clamp(dot,-1,1);
  float theta=(float)Math.acos(dot) * alpha;
  Quaternion q2=q1.add(new Quaternion(q0).mult(-dot)).normalize();
  return q0.mult((float)Math.cos(theta)).add(q2.mult((float)Math.sin(theta)));
}",0.7868480725623582
82603,"public boolean update(long deltaTime){
  float currTime=deltaTime / (float)1e9;
  if (!hasUpdated) {
    absPrevTime=currTime;
    hasUpdated=true;
  }
  if (isPaused) {
    absPrevTime=currTime;
    return false;
  }
  float delta=currTime - absPrevTime;
  secAccumTime+=delta;
  absPrevTime=currTime;
  if (type == Type.SINGLE)   return secAccumTime > secDuration;
  return false;
}","public boolean update(long deltaTime){
  elapsedTime+=deltaTime;
  float currTime=elapsedTime / (float)1e9;
  if (!hasUpdated) {
    absPrevTime=currTime;
    hasUpdated=true;
  }
  if (isPaused) {
    absPrevTime=currTime;
    return false;
  }
  float delta=currTime - absPrevTime;
  secAccumTime+=delta;
  absPrevTime=currTime;
  if (type == Type.SINGLE)   return secAccumTime > secDuration;
  return false;
}",0.914572864321608
82604,"private static TemplateDescriptor createInstance(Class<? extends TemplateDescriptor> templateDescriptor){
  try {
    return templateDescriptor.getConstructor().newInstance();
  }
 catch (  InstantiationException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  InvocationTargetException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  SecurityException e) {
  }
  return null;
}","private static TemplateDescriptor createInstance(Class<? extends TemplateDescriptor> templateDescriptor){
  try {
    return templateDescriptor.getConstructor().newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + templateDescriptor.getName() + ""String_Node_Str"",e);
  }
}",0.58994708994709
82605,"/** 
 * This is the only way to create a new Edge
 * @param site0
 * @param site1
 * @return
 */
public static Edge createBisectingEdge(Site site0,Site site1){
  float a;
  float b;
  float c;
  float dx=site1.getX() - site0.getX();
  float dy=site1.getY() - site0.getY();
  float absdx=dx > 0 ? dx : -dx;
  float absdy=dy > 0 ? dy : -dy;
  c=site0.getX() * dx + site0.getY() * dy + (dx * dx + dy * dy) * 0.5f;
  if (absdx > absdy) {
    a=1.0f;
    b=dy / dx;
    c/=dx;
  }
 else {
    b=1.0f;
    a=dx / dy;
    c/=dy;
  }
  Edge edge=new Edge();
  edge.setLeftSite(site0);
  edge.setRightSite(site1);
  site0.addEdge(edge);
  site1.addEdge(edge);
  edge.leftVertex=null;
  edge.rightVertex=null;
  edge.set(a,b,c);
  return edge;
}","/** 
 * This is the only way to create a new Edge
 * @param site0
 * @param site1
 * @return
 */
public static Edge createBisectingEdge(Site site0,Site site1){
  float a;
  float b;
  float c;
  float dx=site1.getX() - site0.getX();
  float dy=site1.getY() - site0.getY();
  float absdx=dx > 0 ? dx : -dx;
  float absdy=dy > 0 ? dy : -dy;
  c=site0.getX() * dx + site0.getY() * dy + (dx * dx + dy * dy) * 0.5f;
  if (absdx > absdy) {
    a=1.0f;
    b=dy / dx;
    c/=dx;
  }
 else {
    b=1.0f;
    a=dx / dy;
    c/=dy;
  }
  Edge edge=new Edge();
  edge.setLeftSite(site0);
  edge.setRightSite(site1);
  site0.addEdge(edge);
  site1.addEdge(edge);
  edge.leftVertex=null;
  edge.rightVertex=null;
  edge.a=a;
  edge.b=b;
  edge.c=c;
  return edge;
}",0.9751176866173504
82606,"/** 
 * Set _clippedVertices to contain the two ends of the portion of the Voronoi edge that is visible within the bounds. If no part of the Edge falls within the bounds, leave _clippedVertices null.
 * @param bounds
 */
public void clipVertices(Rect2f bounds){
  float xmin=bounds.minX();
  float ymin=bounds.minY();
  float xmax=bounds.maxX();
  float ymax=bounds.maxY();
  Vertex vertex0;
  Vertex vertex1;
  float x0;
  float x1;
  float y0;
  float y1;
  if (getA() == 1.0 && getB() >= 0.0) {
    vertex0=rightVertex;
    vertex1=leftVertex;
  }
 else {
    vertex0=leftVertex;
    vertex1=rightVertex;
  }
  if (getA() == 1.0) {
    y0=ymin;
    if (vertex0 != null && vertex0.getY() > ymin) {
      y0=vertex0.getY();
    }
    if (y0 > ymax) {
      return;
    }
    x0=getC() - getB() * y0;
    y1=ymax;
    if (vertex1 != null && vertex1.getY() < ymax) {
      y1=vertex1.getY();
    }
    if (y1 < ymin) {
      return;
    }
    x1=getC() - getB() * y1;
    if ((x0 > xmax && x1 > xmax) || (x0 < xmin && x1 < xmin)) {
      return;
    }
    if (x0 > xmax) {
      x0=xmax;
      y0=(getC() - x0) / getB();
    }
 else     if (x0 < xmin) {
      x0=xmin;
      y0=(getC() - x0) / getB();
    }
    if (x1 > xmax) {
      x1=xmax;
      y1=(getC() - x1) / getB();
    }
 else     if (x1 < xmin) {
      x1=xmin;
      y1=(getC() - x1) / getB();
    }
  }
 else {
    x0=xmin;
    if (vertex0 != null && vertex0.getX() > xmin) {
      x0=vertex0.getX();
    }
    if (x0 > xmax) {
      return;
    }
    y0=getC() - getA() * x0;
    x1=xmax;
    if (vertex1 != null && vertex1.getX() < xmax) {
      x1=vertex1.getX();
    }
    if (x1 < xmin) {
      return;
    }
    y1=getC() - getA() * x1;
    if ((y0 > ymax && y1 > ymax) || (y0 < ymin && y1 < ymin)) {
      return;
    }
    if (y0 > ymax) {
      y0=ymax;
      x0=(getC() - y0) / getA();
    }
 else     if (y0 < ymin) {
      y0=ymin;
      x0=(getC() - y0) / getA();
    }
    if (y1 > ymax) {
      y1=ymax;
      x1=(getC() - y1) / getA();
    }
 else     if (y1 < ymin) {
      y1=ymin;
      x1=(getC() - y1) / getA();
    }
  }
  clippedVertices.clear();
  if (vertex0 == leftVertex) {
    clippedVertices.put(LR.LEFT,new Vector2f(x0,y0));
    clippedVertices.put(LR.RIGHT,new Vector2f(x1,y1));
  }
 else {
    clippedVertices.put(LR.RIGHT,new Vector2f(x0,y0));
    clippedVertices.put(LR.LEFT,new Vector2f(x1,y1));
  }
}","/** 
 * Set _clippedVertices to contain the two ends of the portion of the Voronoi edge that is visible within the bounds. If no part of the Edge falls within the bounds, leave _clippedVertices null.
 * @param bounds
 */
public void clipVertices(Rect2f bounds){
  float xmin=bounds.minX();
  float ymin=bounds.minY();
  float xmax=bounds.maxX();
  float ymax=bounds.maxY();
  Vertex vertex0;
  Vertex vertex1;
  float x0;
  float x1;
  float y0;
  float y1;
  if (getA() == 1.0 && getB() >= 0.0) {
    vertex0=rightVertex;
    vertex1=leftVertex;
  }
 else {
    vertex0=leftVertex;
    vertex1=rightVertex;
  }
  if (getA() == 1.0) {
    y0=ymin;
    if (vertex0 != null && vertex0.getY() > ymin) {
      y0=vertex0.getY();
    }
    if (y0 > ymax) {
      return;
    }
    x0=getC() - getB() * y0;
    y1=ymax;
    if (vertex1 != null && vertex1.getY() < ymax) {
      y1=vertex1.getY();
    }
    if (y1 < ymin) {
      return;
    }
    x1=getC() - getB() * y1;
    if ((x0 > xmax && x1 > xmax) || (x0 < xmin && x1 < xmin)) {
      return;
    }
    if (x0 > xmax) {
      x0=xmax;
      y0=(getC() - x0) / getB();
    }
 else     if (x0 < xmin) {
      x0=xmin;
      y0=(getC() - x0) / getB();
    }
    if (x1 > xmax) {
      x1=xmax;
      y1=(getC() - x1) / getB();
    }
 else     if (x1 < xmin) {
      x1=xmin;
      y1=(getC() - x1) / getB();
    }
  }
 else {
    x0=xmin;
    if (vertex0 != null && vertex0.getX() > xmin) {
      x0=vertex0.getX();
    }
    if (x0 > xmax) {
      return;
    }
    y0=getC() - getA() * x0;
    x1=xmax;
    if (vertex1 != null && vertex1.getX() < xmax) {
      x1=vertex1.getX();
    }
    if (x1 < xmin) {
      return;
    }
    y1=getC() - getA() * x1;
    if ((y0 > ymax && y1 > ymax) || (y0 < ymin && y1 < ymin)) {
      return;
    }
    if (y0 > ymax) {
      y0=ymax;
      x0=(getC() - y0) / getA();
    }
 else     if (y0 < ymin) {
      y0=ymin;
      x0=(getC() - y0) / getA();
    }
    if (y1 > ymax) {
      y1=ymax;
      x1=(getC() - y1) / getA();
    }
 else     if (y1 < ymin) {
      y1=ymin;
      x1=(getC() - y1) / getA();
    }
  }
  clippedVertices.clear();
  if (vertex0 == leftVertex) {
    clippedVertices.put(LR.LEFT,new Vector2f(x0,y0));
    clippedVertices.put(LR.RIGHT,new Vector2f(x1,y1));
  }
 else {
    clippedVertices.put(LR.RIGHT,new Vector2f(x0,y0));
    clippedVertices.put(LR.LEFT,new Vector2f(x1,y1));
  }
  if (leftVertex != null && bounds.contains(leftVertex.getX(),leftVertex.getY())) {
    clippedVertices.put(LR.LEFT,leftVertex.getCoord());
  }
  if (rightVertex != null && bounds.contains(rightVertex.getX(),rightVertex.getY())) {
    clippedVertices.put(LR.RIGHT,rightVertex.getCoord());
  }
}",0.9424700569408992
82607,"/** 
 * @param bounds bounds of the target area (points from Voronoi will be scaled and translated accordingly)
 * @param v the Voronoi diagram to use
 */
public VoronoiGraph(Rect2i bounds,Voronoi v){
  intBounds=bounds;
  realBounds=Rect2f.createFromMinAndSize(bounds.minX(),bounds.minY(),bounds.width(),bounds.height());
  final Map<Vector2f,Region> pointCenterMap=new HashMap<>();
  final Map<BaseVector2f,Corner> pointCornerMap=new HashMap<>();
  for (  Vector2f vorSite : v.siteCoords()) {
    Vector2f site=transform(v.getPlotBounds(),realBounds,vorSite);
    Region region=new Region(new ImmutableVector2f(site));
    regions.add(region);
    pointCenterMap.put(site,region);
    for (    Vector2f cput : v.region(vorSite)) {
      Vector2f cpt=transform(v.getPlotBounds(),realBounds,cput);
      Corner c0=makeCorner(pointCornerMap,cpt);
      region.addCorner(c0);
      c0.addTouches(region);
    }
  }
  v.regions();
  final List<org.terasology.math.delaunay.Edge> libedges=v.edges();
  for (  org.terasology.math.delaunay.Edge libedge : libedges) {
    final LineSegment vEdge=libedge.voronoiEdge();
    final LineSegment dEdge=libedge.delaunayLine();
    if (vEdge == null) {
      continue;
    }
    Vector2f cp0=transform(v.getPlotBounds(),realBounds,vEdge.getStart());
    Vector2f cp1=transform(v.getPlotBounds(),realBounds,vEdge.getEnd());
    Corner c0=makeCorner(pointCornerMap,cp0);
    Corner c1=makeCorner(pointCornerMap,cp1);
    Vector2f rp0=transform(v.getPlotBounds(),realBounds,dEdge.getStart());
    Vector2f rp1=transform(v.getPlotBounds(),realBounds,dEdge.getEnd());
    Region r0=pointCenterMap.get(rp0);
    Region r1=pointCenterMap.get(rp1);
    final Edge edge=new Edge(c0,c1,r0,r1);
    edges.add(edge);
    r0.addBorder(edge);
    r1.addBorder(edge);
    c0.addEdge(edge);
    c1.addEdge(edge);
    r0.addNeigbor(r1);
    r1.addNeigbor(r0);
    c0.addAdjacent(c1);
    c1.addAdjacent(c0);
  }
}","/** 
 * @param bounds bounds of the target area (points from Voronoi will be scaled and translated accordingly)
 * @param v the Voronoi diagram to use
 */
public VoronoiGraph(Rect2i bounds,Voronoi v){
  intBounds=bounds;
  realBounds=Rect2f.createFromMinAndSize(bounds.minX(),bounds.minY(),bounds.width(),bounds.height());
  final Map<Vector2f,Region> regionMap=new HashMap<>();
  final Map<BaseVector2f,Corner> pointCornerMap=new HashMap<>();
  for (  Vector2f vorSite : v.siteCoords()) {
    Vector2f site=transform(v.getPlotBounds(),realBounds,vorSite);
    Region region=new Region(new ImmutableVector2f(site));
    regions.add(region);
    regionMap.put(vorSite,region);
    for (    Vector2f pt : v.region(vorSite)) {
      Corner c0=makeCorner(pointCornerMap,v.getPlotBounds(),pt);
      region.addCorner(c0);
      c0.addTouches(region);
    }
  }
  for (  org.terasology.math.delaunay.Edge libedge : v.edges()) {
    if (!libedge.isVisible()) {
      continue;
    }
    final LineSegment dEdge=libedge.delaunayLine();
    final LineSegment vEdge=libedge.voronoiEdge();
    Corner c0=makeCorner(pointCornerMap,v.getPlotBounds(),vEdge.getStart());
    Corner c1=makeCorner(pointCornerMap,v.getPlotBounds(),vEdge.getEnd());
    Region r0=regionMap.get(dEdge.getStart());
    Region r1=regionMap.get(dEdge.getEnd());
    final Edge edge=new Edge(c0,c1,r0,r1);
    edges.add(edge);
    r0.addBorder(edge);
    r1.addBorder(edge);
    c0.addEdge(edge);
    c1.addEdge(edge);
    r0.addNeigbor(r1);
    r1.addNeigbor(r0);
    c0.addAdjacent(c1);
    c1.addAdjacent(c0);
  }
}",0.6205128205128205
82608,"/** 
 * ensures that each corner is represented by only one corner object
 */
private Corner makeCorner(Map<BaseVector2f,Corner> pointCornerMap,Vector2f p){
  if (p == null) {
    return null;
  }
  for (  BaseVector2f oc : pointCornerMap.keySet()) {
    if (oc.distanceSquared(p) < 0.01f) {
      return pointCornerMap.get(oc);
    }
  }
  Corner c=new Corner(new ImmutableVector2f(p));
  corners.add(c);
  pointCornerMap.put(p,c);
  float diff=0.01f;
  boolean onLeft=closeEnough(p.getX(),realBounds.minX(),diff);
  boolean onTop=closeEnough(p.getY(),realBounds.minY(),diff);
  boolean onRight=closeEnough(p.getX(),realBounds.maxX(),diff);
  boolean onBottom=closeEnough(p.getY(),realBounds.maxY(),diff);
  if (onLeft || onTop || onRight|| onBottom) {
    c.setBorder(true);
  }
  return c;
}","/** 
 * ensures that each corner is represented by only one corner object
 */
private Corner makeCorner(Map<BaseVector2f,Corner> pointCornerMap,Rect2f srcRc,BaseVector2f orgPt){
  Corner exist=pointCornerMap.get(orgPt);
  if (exist != null) {
    return exist;
  }
  Vector2f p=transform(srcRc,realBounds,orgPt);
  Corner c=new Corner(new ImmutableVector2f(p));
  corners.add(c);
  pointCornerMap.put(orgPt,c);
  float diff=0.01f;
  boolean onLeft=closeEnough(p.getX(),realBounds.minX(),diff);
  boolean onTop=closeEnough(p.getY(),realBounds.minY(),diff);
  boolean onRight=closeEnough(p.getX(),realBounds.maxX(),diff);
  boolean onBottom=closeEnough(p.getY(),realBounds.maxY(),diff);
  if (onLeft || onTop || onRight|| onBottom) {
    c.setBorder(true);
  }
  return c;
}",0.7151979565772669
82609,"private static Graph createVoronoiGraph(Rect2d bounds,long seed){
  double density=256;
  int numSites=DoubleMath.roundToInt(bounds.area() / density,RoundingMode.HALF_UP);
  final Random r=new Random(seed);
  List<Vector2d> points=Lists.newArrayListWithCapacity(numSites);
  for (int i=0; i < numSites; i++) {
    double px=bounds.minX() + r.nextDouble() * bounds.width();
    double py=bounds.minY() + r.nextDouble() * bounds.height();
    points.add(new Vector2d(px,py));
  }
  final Voronoi v=new Voronoi(points,bounds);
  final Graph graph=new VoronoiGraph(v,2,r);
  GraphEditor.improveCorners(graph.getCorners());
  return graph;
}","private static Graph createVoronoiGraph(Rect2d bounds,long seed){
  double density=256;
  int numSites=DoubleMath.roundToInt(bounds.area() / density,RoundingMode.HALF_UP);
  final Random r=new Random(seed);
  List<Vector2d> points=Lists.newArrayListWithCapacity(numSites);
  for (int i=0; i < numSites; i++) {
    double px=bounds.minX() + r.nextDouble() * bounds.width();
    double py=bounds.minY() + r.nextDouble() * bounds.height();
    points.add(new Vector2d(px,py));
  }
  final Voronoi v=new Voronoi(points,bounds);
  final Graph graph=new VoronoiGraph(v,2);
  GraphEditor.improveCorners(graph.getCorners());
  return graph;
}",0.9984251968503935
82610,"public Biome getBiome(Region region){
  double moisture=moistureModel.getMoisture(region);
  double elevation=elevationModel.getElevation(region);
  if (waterModel.isOcean(region)) {
    return Biome.OCEAN;
  }
 else   if (waterModel.isWater(region)) {
    if (elevation < 0.1) {
      return Biome.MARSH;
    }
    if (elevation > 0.8) {
      return Biome.ICE;
    }
    return Biome.LAKE;
  }
 else   if (waterModel.isCoast(region)) {
    return Biome.BEACH;
  }
 else   if (elevation > 0.8) {
    if (moisture > 0.50) {
      return Biome.SNOW;
    }
 else     if (moisture > 0.33) {
      return Biome.TUNDRA;
    }
 else     if (moisture > 0.16) {
      return Biome.BARE;
    }
 else {
      return Biome.SCORCHED;
    }
  }
 else   if (elevation > 0.6) {
    if (moisture > 0.66) {
      return Biome.TAIGA;
    }
 else     if (moisture > 0.33) {
      return Biome.SHRUBLAND;
    }
 else {
      return Biome.TEMPERATE_DESERT;
    }
  }
 else   if (elevation > 0.3) {
    if (moisture > 0.83) {
      return Biome.TEMPERATE_RAIN_FOREST;
    }
 else     if (moisture > 0.50) {
      return Biome.TEMPERATE_DECIDUOUS_FOREST;
    }
 else     if (moisture > 0.16) {
      return Biome.GRASSLAND;
    }
 else {
      return Biome.TEMPERATE_DESERT;
    }
  }
 else {
    if (moisture > 0.66) {
      return Biome.TROPICAL_RAIN_FOREST;
    }
 else     if (moisture > 0.33) {
      return Biome.TROPICAL_SEASONAL_FOREST;
    }
 else     if (moisture > 0.16) {
      return Biome.GRASSLAND;
    }
 else {
      return Biome.SUBTROPICAL_DESERT;
    }
  }
}","@Override public Biome getBiome(Region region){
  double moisture=moistureModel.getMoisture(region);
  double elevation=elevationModel.getElevation(region);
  if (waterModel.isOcean(region)) {
    return Biome.OCEAN;
  }
 else   if (waterModel.isWater(region)) {
    if (elevation < 0.1) {
      return Biome.MARSH;
    }
    if (elevation > 0.8) {
      return Biome.ICE;
    }
    return Biome.LAKE;
  }
 else   if (waterModel.isCoast(region)) {
    return Biome.BEACH;
  }
 else   if (elevation > 0.8) {
    if (moisture > 0.50) {
      return Biome.SNOW;
    }
 else     if (moisture > 0.33) {
      return Biome.TUNDRA;
    }
 else     if (moisture > 0.16) {
      return Biome.BARE;
    }
 else {
      return Biome.SCORCHED;
    }
  }
 else   if (elevation > 0.6) {
    if (moisture > 0.66) {
      return Biome.TAIGA;
    }
 else     if (moisture > 0.33) {
      return Biome.SHRUBLAND;
    }
 else {
      return Biome.TEMPERATE_DESERT;
    }
  }
 else   if (elevation > 0.3) {
    if (moisture > 0.83) {
      return Biome.TEMPERATE_RAIN_FOREST;
    }
 else     if (moisture > 0.50) {
      return Biome.TEMPERATE_DECIDUOUS_FOREST;
    }
 else     if (moisture > 0.16) {
      return Biome.GRASSLAND;
    }
 else {
      return Biome.TEMPERATE_DESERT;
    }
  }
 else {
    if (moisture > 0.66) {
      return Biome.TROPICAL_RAIN_FOREST;
    }
 else     if (moisture > 0.33) {
      return Biome.TROPICAL_SEASONAL_FOREST;
    }
 else     if (moisture > 0.16) {
      return Biome.GRASSLAND;
    }
 else {
      return Biome.SUBTROPICAL_DESERT;
    }
  }
}",0.9967948717948718
82611,"/** 
 * @param r the region
 * @return the
 */
public double getElevation(Region r);","/** 
 * @param r the region
 * @return the
 */
double getElevation(Region r);",0.9565217391304348
82612,"/** 
 * @param c the corner of interest
 * @return the neighbor corner with the lowest elevation
 */
public Corner getDownslope(Corner c);","/** 
 * @param c the corner of interest
 * @return the neighbor corner with the lowest elevation
 */
Corner getDownslope(Corner c);",0.9739776951672864
82613,"/** 
 * @param loc the loc to set
 */
public void setLocation(Vector2d loc){
  this.loc=loc;
}","/** 
 * @param nloc the loc to set
 */
public void setLocation(Vector2d nloc){
  this.loc=nloc;
}",0.9842931937172776
82614,"/** 
 * @return
 */
public List<Region> getRegions();","/** 
 * @return
 */
List<Region> getRegions();",0.9292929292929292
82615,"/** 
 * @return the corners
 */
public List<Corner> getCorners();","/** 
 * @return the corners
 */
List<Corner> getCorners();",0.943089430894309
82616,"/** 
 * @return
 */
public List<Edge> getEdges();","/** 
 * @return
 */
List<Edge> getEdges();",0.9230769230769232
82617,"/** 
 * @return the bounds
 */
public Rect2d getBounds();","/** 
 * @return the bounds
 */
Rect2d getBounds();",0.9345794392523364
82618,"/** 
 * Moves all corners to a random position within a circle with r=maxDist around it
 * @param corners the set of corners
 * @param random the random number gen
 * @param maxDist the maximum moving distance
 */
public static void jitterCorners(Collection<Corner> corners,Random random,double maxDist){
  for (  Corner c : corners) {
    if (c.isBorder())     continue;
    Vector2d loc=c.getLocation();
    double ang=random.nextDouble(0,Math.PI * 2.0);
    double len=random.nextDouble(0,maxDist);
    double rx=Math.cos(ang) * len;
    double ry=Math.sin(ang) * len;
    loc.addX(rx);
    loc.addY(ry);
  }
}","/** 
 * Moves all corners to a random position within a circle with r=maxDist around it
 * @param corners the set of corners
 * @param random the random number gen
 * @param maxDist the maximum moving distance
 */
public static void jitterCorners(Collection<Corner> corners,Random random,double maxDist){
  for (  Corner c : corners) {
    if (c.isBorder()) {
      continue;
    }
    Vector2d loc=c.getLocation();
    double ang=random.nextDouble(0,Math.PI * 2.0);
    double len=random.nextDouble(0,maxDist);
    double rx=Math.cos(ang) * len;
    double ry=Math.sin(ang) * len;
    loc.addX(rx);
    loc.addY(ry);
  }
}",0.970873786407767
82619,"private Corner getCorner(int r,int c){
  if (r < 0 || r > rows)   return null;
  if (c < 0 || c > cols)   return null;
  int idx=r * (cols + 1) + c;
  return corners.get(idx);
}","private Corner getCorner(int r,int c){
  if (r < 0 || r > rows) {
    return null;
  }
  if (c < 0 || c > cols) {
    return null;
  }
  int idx=r * (cols + 1) + c;
  return corners.get(idx);
}",0.9567567567567568
82620,"private Region getRegion(int r,int c){
  if (r < 0 || r >= rows)   return null;
  if (c < 0 || c >= cols)   return null;
  int idx=r * cols + c;
  return regions.get(idx);
}","private Region getRegion(int r,int c){
  if (r < 0 || r >= rows) {
    return null;
  }
  if (c < 0 || c >= cols) {
    return null;
  }
  int idx=r * cols + c;
  return regions.get(idx);
}",0.9558011049723756
82621,"private void buildGraph(Voronoi v){
  final Map<Vector2d,Region> pointCenterMap=new HashMap<>();
  final List<Vector2d> points=v.siteCoords();
  for (  Vector2d p : points) {
    Region c=new Region(p);
    regions.add(c);
    pointCenterMap.put(p,c);
  }
  for (  Region c : regions) {
    v.region(c.getCenter());
  }
  final List<org.terasology.math.delaunay.Edge> libedges=v.edges();
  final Map<Integer,Corner> pointCornerMap=new HashMap<>();
  for (  org.terasology.math.delaunay.Edge libedge : libedges) {
    final LineSegment vEdge=libedge.voronoiEdge();
    final LineSegment dEdge=libedge.delaunayLine();
    if (vEdge.getP0() == null || vEdge.getP1() == null)     continue;
    Corner c0=makeCorner(pointCornerMap,vEdge.getP0());
    Corner c1=makeCorner(pointCornerMap,vEdge.getP1());
    Region r0=pointCenterMap.get(dEdge.getP0());
    Region r1=pointCenterMap.get(dEdge.getP1());
    final Edge edge=new Edge(c0,c1,r0,r1);
    edges.add(edge);
    r0.addBorder(edge);
    r1.addBorder(edge);
    c0.addEdge(edge);
    c1.addEdge(edge);
    r0.addNeigbor(r1);
    r1.addNeigbor(r0);
    c0.addAdjacent(c1);
    c1.addAdjacent(c0);
    r0.addCorner(c0);
    r0.addCorner(c1);
    r1.addCorner(c0);
    r1.addCorner(c1);
    c0.addTouches(r0);
    c0.addTouches(r1);
    c1.addTouches(r0);
    c1.addTouches(r1);
  }
  for (  Region region : regions) {
    boolean onLeft=false;
    boolean onRight=false;
    boolean onTop=false;
    boolean onBottom=false;
    int diff=1;
    for (    Corner corner : region.getCorners()) {
      Vector2d p=corner.getLocation();
      onLeft|=closeEnough(p.getX(),bounds.minX(),diff);
      onTop|=closeEnough(p.getY(),bounds.minY(),diff);
      onRight|=closeEnough(p.getX(),bounds.maxX(),diff);
      onBottom|=closeEnough(p.getY(),bounds.maxY(),diff);
    }
    if (onLeft && onTop) {
      Corner c=new Corner(new Vector2d(bounds.minX(),bounds.minY()));
      c.setBorder(true);
      corners.add(c);
      region.addCorner(c);
    }
    if (onLeft && onBottom) {
      Corner c=new Corner(new Vector2d(bounds.minX(),bounds.maxY()));
      c.setBorder(true);
      corners.add(c);
      region.addCorner(c);
    }
    if (onRight && onTop) {
      Corner c=new Corner(new Vector2d(bounds.maxX(),bounds.minY()));
      c.setBorder(true);
      corners.add(c);
      region.addCorner(c);
    }
    if (onRight && onBottom) {
      Corner c=new Corner(new Vector2d(bounds.maxX(),bounds.maxY()));
      c.setBorder(true);
      corners.add(c);
      region.addCorner(c);
    }
  }
}","private void buildGraph(Voronoi v){
  final Map<Vector2d,Region> pointCenterMap=new HashMap<>();
  final List<Vector2d> points=v.siteCoords();
  for (  Vector2d p : points) {
    Region c=new Region(p);
    regions.add(c);
    pointCenterMap.put(p,c);
  }
  for (  Region c : regions) {
    v.region(c.getCenter());
  }
  final List<org.terasology.math.delaunay.Edge> libedges=v.edges();
  final Map<Integer,Corner> pointCornerMap=new HashMap<>();
  for (  org.terasology.math.delaunay.Edge libedge : libedges) {
    final LineSegment vEdge=libedge.voronoiEdge();
    final LineSegment dEdge=libedge.delaunayLine();
    if (vEdge.getP0() == null || vEdge.getP1() == null) {
      continue;
    }
    Corner c0=makeCorner(pointCornerMap,vEdge.getP0());
    Corner c1=makeCorner(pointCornerMap,vEdge.getP1());
    Region r0=pointCenterMap.get(dEdge.getP0());
    Region r1=pointCenterMap.get(dEdge.getP1());
    final Edge edge=new Edge(c0,c1,r0,r1);
    edges.add(edge);
    r0.addBorder(edge);
    r1.addBorder(edge);
    c0.addEdge(edge);
    c1.addEdge(edge);
    r0.addNeigbor(r1);
    r1.addNeigbor(r0);
    c0.addAdjacent(c1);
    c1.addAdjacent(c0);
    r0.addCorner(c0);
    r0.addCorner(c1);
    r1.addCorner(c0);
    r1.addCorner(c1);
    c0.addTouches(r0);
    c0.addTouches(r1);
    c1.addTouches(r0);
    c1.addTouches(r1);
  }
  for (  Region region : regions) {
    boolean onLeft=false;
    boolean onRight=false;
    boolean onTop=false;
    boolean onBottom=false;
    int diff=1;
    for (    Corner corner : region.getCorners()) {
      Vector2d p=corner.getLocation();
      onLeft|=closeEnough(p.getX(),bounds.minX(),diff);
      onTop|=closeEnough(p.getY(),bounds.minY(),diff);
      onRight|=closeEnough(p.getX(),bounds.maxX(),diff);
      onBottom|=closeEnough(p.getY(),bounds.maxY(),diff);
    }
    if (onLeft && onTop) {
      Corner c=new Corner(new Vector2d(bounds.minX(),bounds.minY()));
      c.setBorder(true);
      corners.add(c);
      region.addCorner(c);
    }
    if (onLeft && onBottom) {
      Corner c=new Corner(new Vector2d(bounds.minX(),bounds.maxY()));
      c.setBorder(true);
      corners.add(c);
      region.addCorner(c);
    }
    if (onRight && onTop) {
      Corner c=new Corner(new Vector2d(bounds.maxX(),bounds.minY()));
      c.setBorder(true);
      corners.add(c);
      region.addCorner(c);
    }
    if (onRight && onBottom) {
      Corner c=new Corner(new Vector2d(bounds.maxX(),bounds.maxY()));
      c.setBorder(true);
      corners.add(c);
      region.addCorner(c);
    }
  }
}",0.9929050059124952
82622,"public VoronoiGraph(Voronoi ov,int numLloydRelaxations,Random r){
  Voronoi v=ov;
  bounds=v.getPlotBounds();
  for (int i=0; i < numLloydRelaxations; i++) {
    List<Vector2d> points=v.siteCoords();
    for (    Vector2d p : points) {
      List<Vector2d> region=v.region(p);
      double x=0;
      double y=0;
      for (      Vector2d c : region) {
        x+=c.getX();
        y+=c.getY();
      }
      x/=region.size();
      y/=region.size();
      p.setX(x);
      p.setY(y);
    }
    v=new Voronoi(points,v.getPlotBounds());
  }
  buildGraph(v);
}","public VoronoiGraph(Voronoi ov,int numLloydRelaxations){
  Voronoi v=ov;
  bounds=v.getPlotBounds();
  for (int i=0; i < numLloydRelaxations; i++) {
    List<Vector2d> points=v.siteCoords();
    for (    Vector2d p : points) {
      List<Vector2d> region=v.region(p);
      double x=0;
      double y=0;
      for (      Vector2d c : region) {
        x+=c.getX();
        y+=c.getY();
      }
      x/=region.size();
      y/=region.size();
      p.setX(x);
      p.setY(y);
    }
    v=new Voronoi(points,v.getPlotBounds());
  }
  buildGraph(v);
}",0.991869918699187
82623,"public void setVornoi(Corner v0,Corner v1){
  this.v0=v0;
  this.v1=v1;
  midpoint=new Vector2d((v0.loc.getX() + v1.loc.getX()) / 2,(v0.loc.getY() + v1.loc.getY()) / 2);
}","public void setVornoi(Corner nv0,Corner nv1){
  this.v0=nv0;
  this.v1=nv1;
  midpoint=new Vector2d((v0.loc.getX() + v1.loc.getX()) / 2,(v0.loc.getY() + v1.loc.getY()) / 2);
}",0.9884393063583816
82624,"public void paint(Graphics2D g,boolean drawBiomes,boolean drawRivers,boolean drawSites,boolean drawCorners,boolean drawDelaunay,boolean drawVoronoi){
  final int numSites=centers.size();
  Color[] defaultColors=null;
  if (!drawBiomes) {
    defaultColors=new Color[numSites];
    for (int i=0; i < defaultColors.length; i++) {
      defaultColors[i]=new Color(r.nextInt(255),r.nextInt(255),r.nextInt(255));
    }
  }
  for (  Center c : centers) {
    g.setColor(drawBiomes ? getColor(c.biome) : defaultColors[c.index]);
    Corner edgeCorner1=null;
    Corner edgeCorner2=null;
    c.area=0;
    for (    Center n : c.neighbors) {
      Edge e=edgeWithCenters(c,n);
      if (e.v0 == null) {
        continue;
      }
      Corner cornerWithOneAdjacent=e.v0.border ? e.v0 : e.v1;
      if (cornerWithOneAdjacent.border) {
        if (edgeCorner1 == null) {
          edgeCorner1=cornerWithOneAdjacent;
        }
 else {
          edgeCorner2=cornerWithOneAdjacent;
        }
      }
      drawTriangle(g,e.v0,e.v1,c);
      c.area+=Math.abs(c.loc.getX() * (e.v0.loc.getY() - e.v1.loc.getY()) + e.v0.loc.getX() * (e.v1.loc.getY() - c.loc.getY()) + e.v1.loc.getX() * (c.loc.getY() - e.v0.loc.getY())) / 2;
    }
    if (edgeCorner2 != null) {
      if (closeEnough(edgeCorner1.loc.getX(),edgeCorner2.loc.getX(),1)) {
        drawTriangle(g,edgeCorner1,edgeCorner2,c);
      }
 else {
        int[] x=new int[4];
        int[] y=new int[4];
        x[0]=(int)c.loc.getX();
        y[0]=(int)c.loc.getY();
        x[1]=(int)edgeCorner1.loc.getX();
        y[1]=(int)edgeCorner1.loc.getY();
        x[2]=(int)((closeEnough(edgeCorner1.loc.getX(),bounds.minX(),1) || closeEnough(edgeCorner2.loc.getX(),bounds.minX(),.5)) ? bounds.minX() : bounds.maxX());
        y[2]=(int)((closeEnough(edgeCorner1.loc.getY(),bounds.minY(),1) || closeEnough(edgeCorner2.loc.getY(),bounds.minY(),.5)) ? bounds.minY() : bounds.maxY());
        x[3]=(int)edgeCorner2.loc.getX();
        y[3]=(int)edgeCorner2.loc.getY();
        g.fillPolygon(x,y,4);
        c.area+=0;
      }
    }
  }
  for (  Edge e : edges) {
    if (drawDelaunay) {
      g.setStroke(new BasicStroke(1));
      g.setColor(Color.YELLOW);
      g.drawLine((int)e.d0.loc.getX(),(int)e.d0.loc.getY(),(int)e.d1.loc.getX(),(int)e.d1.loc.getY());
    }
    if (drawRivers && e.river > 0) {
      g.setStroke(new BasicStroke(1 + (int)Math.sqrt(e.river * 2)));
      g.setColor(RIVER);
      g.drawLine((int)e.v0.loc.getX(),(int)e.v0.loc.getY(),(int)e.v1.loc.getX(),(int)e.v1.loc.getY());
    }
  }
  if (drawSites) {
    g.setColor(Color.BLACK);
    for (    Center s : centers) {
      g.fillOval((int)(s.loc.getX() - 2),(int)(s.loc.getY() - 2),4,4);
    }
  }
  if (drawCorners) {
    g.setColor(Color.WHITE);
    for (    Corner c : corners) {
      g.fillOval((int)(c.loc.getX() - 2),(int)(c.loc.getY() - 2),4,4);
    }
  }
  g.setColor(Color.WHITE);
  g.drawRect((int)bounds.minX(),(int)bounds.minY(),(int)bounds.width(),(int)bounds.height());
}","public void paint(Graphics2D g,boolean drawBiomes,boolean drawRivers,boolean drawSites,boolean drawCorners,boolean drawDelaunay,boolean drawVoronoi){
  final int numSites=centers.size();
  Color[] defaultColors=null;
  if (!drawBiomes) {
    defaultColors=new Color[numSites];
    for (int i=0; i < defaultColors.length; i++) {
      defaultColors[i]=new Color(r.nextInt(255),r.nextInt(255),r.nextInt(255));
    }
  }
  for (  Center c : centers) {
    g.setColor(drawBiomes ? getColor(c.biome) : defaultColors[c.index]);
    Corner edgeCorner1=null;
    Corner edgeCorner2=null;
    c.area=0;
    for (    Center n : c.neighbors) {
      Edge e=edgeWithCenters(c,n);
      if (e.v0 == null) {
        continue;
      }
      Corner cornerWithOneAdjacent=e.v0.border ? e.v0 : e.v1;
      if (cornerWithOneAdjacent.border) {
        if (edgeCorner1 == null) {
          edgeCorner1=cornerWithOneAdjacent;
        }
 else {
          edgeCorner2=cornerWithOneAdjacent;
        }
      }
      drawTriangle(g,e.v0,e.v1,c);
      c.area+=Math.abs(c.loc.getX() * (e.v0.loc.getY() - e.v1.loc.getY()) + e.v0.loc.getX() * (e.v1.loc.getY() - c.loc.getY()) + e.v1.loc.getX() * (c.loc.getY() - e.v0.loc.getY())) / 2;
    }
    if (edgeCorner2 != null) {
      if (closeEnough(edgeCorner1.loc.getX(),edgeCorner2.loc.getX(),1)) {
        drawTriangle(g,edgeCorner1,edgeCorner2,c);
      }
 else {
        int[] x=new int[4];
        int[] y=new int[4];
        x[0]=(int)c.loc.getX();
        y[0]=(int)c.loc.getY();
        x[1]=(int)edgeCorner1.loc.getX();
        y[1]=(int)edgeCorner1.loc.getY();
        x[2]=(int)((closeEnough(edgeCorner1.loc.getX(),bounds.minX(),1) || closeEnough(edgeCorner2.loc.getX(),bounds.minX(),.5)) ? bounds.minX() : bounds.maxX());
        y[2]=(int)((closeEnough(edgeCorner1.loc.getY(),bounds.minY(),1) || closeEnough(edgeCorner2.loc.getY(),bounds.minY(),.5)) ? bounds.minY() : bounds.maxY());
        x[3]=(int)edgeCorner2.loc.getX();
        y[3]=(int)edgeCorner2.loc.getY();
        g.fillPolygon(x,y,4);
        c.area+=0;
      }
    }
  }
  for (  Edge e : edges) {
    if (drawDelaunay) {
      g.setStroke(new BasicStroke(1));
      g.setColor(Color.YELLOW);
      g.drawLine((int)e.d0.loc.getX(),(int)e.d0.loc.getY(),(int)e.d1.loc.getX(),(int)e.d1.loc.getY());
    }
    if (drawRivers && e.river > 0) {
      g.setStroke(new BasicStroke(1 + (int)Math.sqrt(e.river * 2)));
      g.setColor(getRiverColor());
      g.drawLine((int)e.v0.loc.getX(),(int)e.v0.loc.getY(),(int)e.v1.loc.getX(),(int)e.v1.loc.getY());
    }
  }
  if (drawSites) {
    g.setColor(Color.BLACK);
    for (    Center s : centers) {
      g.fillOval((int)(s.loc.getX() - 2),(int)(s.loc.getY() - 2),4,4);
    }
  }
  if (drawCorners) {
    g.setColor(Color.WHITE);
    for (    Corner c : corners) {
      g.fillOval((int)(c.loc.getX() - 2),(int)(c.loc.getY() - 2),4,4);
    }
  }
  g.setColor(Color.WHITE);
  g.drawRect((int)bounds.minX(),(int)bounds.minY(),(int)bounds.width(),(int)bounds.height());
}",0.996996996996997
82625,"private void assignCornerElevations(){
  LinkedList<Corner> queue=new LinkedList<>();
  for (  Corner c : corners) {
    c.water=isWater(c.loc);
    if (c.border) {
      c.elevation=0;
      queue.add(c);
    }
 else {
      c.elevation=Double.MAX_VALUE;
    }
  }
  while (!queue.isEmpty()) {
    Corner c=queue.pop();
    for (    Corner a : c.adjacent) {
      double newElevation=0.01 + c.elevation;
      if (!c.water && !a.water) {
        newElevation+=1;
      }
      if (newElevation < a.elevation) {
        a.elevation=newElevation;
        queue.add(a);
      }
    }
  }
}","private void assignCornerElevations(){
  Deque<Corner> queue=new LinkedList<>();
  for (  Corner c : corners) {
    c.water=isWater(c.loc);
    if (c.border) {
      c.elevation=0;
      queue.add(c);
    }
 else {
      c.elevation=Double.MAX_VALUE;
    }
  }
  while (!queue.isEmpty()) {
    Corner c=queue.pop();
    for (    Corner a : c.adjacent) {
      double newElevation=0.01 + c.elevation;
      if (!c.water && !a.water) {
        newElevation+=1;
      }
      if (newElevation < a.elevation) {
        a.elevation=newElevation;
        queue.add(a);
      }
    }
  }
}",0.987168520102652
82626,"private void redistributeElevations(List<Corner> landCorners){
  Collections.sort(landCorners,new Comparator<Corner>(){
    @Override public int compare(    Corner o1,    Corner o2){
      if (o1.elevation > o2.elevation) {
        return 1;
      }
 else       if (o1.elevation < o2.elevation) {
        return -1;
      }
      return 0;
    }
  }
);
  final double SCALE_FACTOR=1.1;
  for (int i=0; i < landCorners.size(); i++) {
    double y=(double)i / landCorners.size();
    double x=Math.sqrt(SCALE_FACTOR) - Math.sqrt(SCALE_FACTOR * (1 - y));
    x=Math.min(x,1);
    landCorners.get(i).elevation=x;
  }
  for (  Corner c : corners) {
    if (c.ocean || c.coast) {
      c.elevation=0.0;
    }
  }
}","private void redistributeElevations(List<Corner> landCorners){
  Collections.sort(landCorners,new Comparator<Corner>(){
    @Override public int compare(    Corner o1,    Corner o2){
      if (o1.elevation > o2.elevation) {
        return 1;
      }
 else       if (o1.elevation < o2.elevation) {
        return -1;
      }
      return 0;
    }
  }
);
  final double scaleFactor=1.1;
  for (int i=0; i < landCorners.size(); i++) {
    double y=(double)i / landCorners.size();
    double x=Math.sqrt(scaleFactor) - Math.sqrt(scaleFactor * (1 - y));
    x=Math.min(x,1);
    landCorners.get(i).elevation=x;
  }
  for (  Corner c : corners) {
    if (c.ocean || c.coast) {
      c.elevation=0.0;
    }
  }
}",0.9554140127388536
82627,abstract protected Biome getBiome(Center p);,protected abstract Biome getBiome(Center p);,0.7954545454545454
82628,"private static boolean liesOnAxes(Rect2d r,Vector2d p){
  return closeEnough(p.getX(),r.minX(),1) || closeEnough(p.getY(),r.minY(),1) || closeEnough(p.getX(),r.maxX(),1)|| closeEnough(p.getY(),r.maxY(),1);
}","private static boolean liesOnAxes(Rect2d r,Vector2d p){
  int diff=1;
  return closeEnough(p.getX(),r.minX(),diff) || closeEnough(p.getY(),r.minY(),diff) || closeEnough(p.getX(),r.maxX(),diff)|| closeEnough(p.getY(),r.maxY(),diff);
}",0.6
82629,"private void assignOceanCoastAndLand(){
  LinkedList<Center> queue=new LinkedList<>();
  final double waterThreshold=.3;
  for (  final Center center : centers) {
    int numWater=0;
    for (    final Corner c : center.corners) {
      if (c.border) {
        center.border=center.water=center.ocean=true;
        queue.add(center);
      }
      if (c.water) {
        numWater++;
      }
    }
    center.water=center.ocean || ((double)numWater / center.corners.size() >= waterThreshold);
  }
  while (!queue.isEmpty()) {
    final Center center=queue.pop();
    for (    final Center n : center.neighbors) {
      if (n.water && !n.ocean) {
        n.ocean=true;
        queue.add(n);
      }
    }
  }
  for (  Center center : centers) {
    boolean oceanNeighbor=false;
    boolean landNeighbor=false;
    for (    Center n : center.neighbors) {
      oceanNeighbor|=n.ocean;
      landNeighbor|=!n.water;
    }
    center.coast=oceanNeighbor && landNeighbor;
  }
  for (  Corner c : corners) {
    int numOcean=0;
    int numLand=0;
    for (    Center center : c.touches) {
      numOcean+=center.ocean ? 1 : 0;
      numLand+=!center.water ? 1 : 0;
    }
    c.ocean=numOcean == c.touches.size();
    c.coast=numOcean > 0 && numLand > 0;
    c.water=c.border || ((numLand != c.touches.size()) && !c.coast);
  }
}","private void assignOceanCoastAndLand(){
  Deque<Center> queue=new LinkedList<>();
  final double waterThreshold=.3;
  for (  final Center center : centers) {
    int numWater=0;
    for (    final Corner c : center.corners) {
      if (c.border) {
        center.border=true;
        center.water=true;
        center.ocean=true;
        queue.add(center);
      }
      if (c.water) {
        numWater++;
      }
    }
    center.water=center.ocean || ((double)numWater / center.corners.size() >= waterThreshold);
  }
  while (!queue.isEmpty()) {
    final Center center=queue.pop();
    for (    final Center n : center.neighbors) {
      if (n.water && !n.ocean) {
        n.ocean=true;
        queue.add(n);
      }
    }
  }
  for (  Center center : centers) {
    boolean oceanNeighbor=false;
    boolean landNeighbor=false;
    for (    Center n : center.neighbors) {
      oceanNeighbor|=n.ocean;
      landNeighbor|=!n.water;
    }
    center.coast=oceanNeighbor && landNeighbor;
  }
  for (  Corner c : corners) {
    int numOcean=0;
    int numLand=0;
    for (    Center center : c.touches) {
      numOcean+=center.ocean ? 1 : 0;
      numLand+=!center.water ? 1 : 0;
    }
    c.ocean=numOcean == c.touches.size();
    c.coast=numOcean > 0 && numLand > 0;
    c.water=c.border || ((numLand != c.touches.size()) && !c.coast);
  }
}",0.9838649155722328
82630,abstract protected Color getColor(Biome biome);,protected abstract Color getColor(Biome biome);,0.8085106382978723
82631,"public VoronoiGraph(Voronoi v,int numLloydRelaxations,Random r){
  this.r=r;
  bumps=r.nextInt(5) + 1;
  startAngle=r.nextDouble() * 2 * Math.PI;
  dipAngle=r.nextDouble() * 2 * Math.PI;
  dipWidth=r.nextDouble() * .5 + .2;
  bounds=v.getPlotBounds();
  for (int i=0; i < numLloydRelaxations; i++) {
    List<Vector2d> points=v.siteCoords();
    for (    Vector2d p : points) {
      List<Vector2d> region=v.region(p);
      double x=0;
      double y=0;
      for (      Vector2d c : region) {
        x+=c.getX();
        y+=c.getY();
      }
      x/=region.size();
      y/=region.size();
      p.setX(x);
      p.setY(y);
    }
    v=new Voronoi(points,v.getPlotBounds());
  }
  buildGraph(v);
  improveCorners();
  assignCornerElevations();
  assignOceanCoastAndLand();
  redistributeElevations(landCorners());
  assignPolygonElevations();
  calculateDownslopes();
  createRivers();
  assignCornerMoisture();
  redistributeMoisture(landCorners());
  assignPolygonMoisture();
  assignBiomes();
}","public VoronoiGraph(Voronoi ov,int numLloydRelaxations,Random r){
  this.r=r;
  bumps=r.nextInt(5) + 1;
  startAngle=r.nextDouble() * 2 * Math.PI;
  dipAngle=r.nextDouble() * 2 * Math.PI;
  dipWidth=r.nextDouble() * .5 + .2;
  Voronoi v=ov;
  bounds=v.getPlotBounds();
  for (int i=0; i < numLloydRelaxations; i++) {
    List<Vector2d> points=v.siteCoords();
    for (    Vector2d p : points) {
      List<Vector2d> region=v.region(p);
      double x=0;
      double y=0;
      for (      Vector2d c : region) {
        x+=c.getX();
        y+=c.getY();
      }
      x/=region.size();
      y/=region.size();
      p.setX(x);
      p.setY(y);
    }
    v=new Voronoi(points,v.getPlotBounds());
  }
  buildGraph(v);
  improveCorners();
  assignCornerElevations();
  assignOceanCoastAndLand();
  redistributeElevations(landCorners());
  assignPolygonElevations();
  calculateDownslopes();
  createRivers();
  assignCornerMoisture();
  redistributeMoisture(landCorners());
  assignPolygonMoisture();
  assignBiomes();
}",0.991571641051066
82632,"private boolean isWater(Vector2d p){
  p=new Vector2d(2 * (p.getX() / bounds.width() - 0.5),2 * (p.getY() / bounds.height() - 0.5));
  double angle=Math.atan2(p.getY(),p.getX());
  double length=0.5 * (Math.max(Math.abs(p.getX()),Math.abs(p.getY())) + p.length());
  double r1=0.5 + 0.40 * Math.sin(startAngle + bumps * angle + Math.cos((bumps + 3) * angle));
  double r2=0.7 - 0.20 * Math.sin(startAngle + bumps * angle - Math.sin((bumps + 2) * angle));
  if (Math.abs(angle - dipAngle) < dipWidth || Math.abs(angle - dipAngle + 2 * Math.PI) < dipWidth || Math.abs(angle - dipAngle - 2 * Math.PI) < dipWidth) {
    r1=r2=0.2;
  }
  return !(length < r1 || (length > r1 * ISLAND_FACTOR && length < r2));
}","private boolean isWater(Vector2d p2){
  Vector2d p=new Vector2d(2 * (p2.getX() / bounds.width() - 0.5),2 * (p2.getY() / bounds.height() - 0.5));
  double angle=Math.atan2(p.getY(),p.getX());
  double length=0.5 * (Math.max(Math.abs(p.getX()),Math.abs(p.getY())) + p.length());
  double r1=0.5 + 0.40 * Math.sin(startAngle + bumps * angle + Math.cos((bumps + 3) * angle));
  double r2=0.7 - 0.20 * Math.sin(startAngle + bumps * angle - Math.sin((bumps + 2) * angle));
  if (Math.abs(angle - dipAngle) < dipWidth || Math.abs(angle - dipAngle + 2 * Math.PI) < dipWidth || Math.abs(angle - dipAngle - 2 * Math.PI) < dipWidth) {
    r1=0.2;
    r2=0.2;
  }
  return !(length < r1 || (length > r1 * ISLAND_FACTOR && length < r2));
}",0.9853249475890984
82633,"private void assignCornerMoisture(){
  LinkedList<Corner> queue=new LinkedList<>();
  for (  Corner c : corners) {
    if ((c.water || c.river > 0) && !c.ocean) {
      c.moisture=c.river > 0 ? Math.min(3.0,(0.2 * c.river)) : 1.0;
      queue.push(c);
    }
 else {
      c.moisture=0.0;
    }
  }
  while (!queue.isEmpty()) {
    Corner c=queue.pop();
    for (    Corner a : c.adjacent) {
      double newM=.9 * c.moisture;
      if (newM > a.moisture) {
        a.moisture=newM;
        queue.add(a);
      }
    }
  }
  for (  Corner c : corners) {
    if (c.ocean || c.coast) {
      c.moisture=1.0;
    }
  }
}","private void assignCornerMoisture(){
  Deque<Corner> queue=new LinkedList<>();
  for (  Corner c : corners) {
    if ((c.water || c.river > 0) && !c.ocean) {
      c.moisture=c.river > 0 ? Math.min(3.0,(0.2 * c.river)) : 1.0;
      queue.push(c);
    }
 else {
      c.moisture=0.0;
    }
  }
  while (!queue.isEmpty()) {
    Corner c=queue.pop();
    for (    Corner a : c.adjacent) {
      double newM=.9 * c.moisture;
      if (newM > a.moisture) {
        a.moisture=newM;
        queue.add(a);
      }
    }
  }
  for (  Corner c : corners) {
    if (c.ocean || c.coast) {
      c.moisture=1.0;
    }
  }
}",0.9877750611246944
82634,"@Override public void paint(Graphics g){
  g.drawImage(img,0,0,null);
}","@Override public void paint(Graphics g){
  g.drawImage(img,10,40,null);
}",0.9861111111111112
82635,"public static void main(String[] args){
  final int width=650;
  final int height=350;
  final int numSites=100;
  final long seed=System.nanoTime();
  final Random r=new Random();
  System.out.println(""String_Node_Str"" + seed);
  final Voronoi v=new Voronoi(numSites,width,height,r);
  final TestGraphImpl graph=new TestGraphImpl(v,2,r);
  final BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2=img.createGraphics();
  g2.setColor(Color.PINK);
  g2.fillRect(0,0,width,height);
  graph.paint(g2);
  final JFrame frame=new JFrame(){
    private static final long serialVersionUID=-1290616722309726306L;
    @Override public void paint(    Graphics g){
      g.drawImage(img,0,0,null);
    }
  }
;
  frame.setTitle(""String_Node_Str"");
  frame.setVisible(true);
  frame.setSize(width + 50,height + 50);
  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
}","public static void main(String[] args){
  final int width=1650;
  final int height=750;
  final int numSites=3000;
  final long seed=92070987606126L;
  final Random r=new Random(seed);
  System.out.println(""String_Node_Str"" + seed);
  final Voronoi v=new Voronoi(numSites,width,height,r);
  final TestGraphImpl graph=new TestGraphImpl(v,2,r);
  final BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2=img.createGraphics();
  g2.setColor(Color.CYAN);
  g2.fillRect(0,0,width,height);
  graph.paint(g2);
  final JFrame frame=new JFrame(){
    private static final long serialVersionUID=-1290616722309726306L;
    @Override public void paint(    Graphics g){
      g.drawImage(img,10,40,null);
    }
  }
;
  frame.setTitle(""String_Node_Str"");
  frame.setVisible(true);
  frame.setSize(width + 50,height + 50);
  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
}",0.921311475409836
82636,"private static Collection<Artifact> findArtifactsMatching(IncludeRule rule,Map<ArtifactId,Artifact> allArtifacts){
  Collection<Artifact> ret=new ArrayList<Artifact>();
  for (  Entry<ArtifactId,Artifact> entry : allArtifacts.entrySet()) {
    if (MatcherHelper.matches(rule.getMatcher(),rule.getId(),entry.getKey())) {
      ret.add(allArtifacts.get(entry.getValue()));
    }
  }
  return ret;
}","private static Collection<Artifact> findArtifactsMatching(IncludeRule rule,Map<ArtifactId,Artifact> allArtifacts){
  Collection<Artifact> ret=new ArrayList<Artifact>();
  for (  Entry<ArtifactId,Artifact> entry : allArtifacts.entrySet()) {
    if (MatcherHelper.matches(rule.getMatcher(),rule.getId(),entry.getKey())) {
      ret.add(entry.getValue());
    }
  }
  return ret;
}",0.9767441860465116
82637,"private void overwriteExtraInfoIfExists(String key,String value){
  boolean found=false;
  for (  ExtraInfoHolder extraInfoHolder : ivyModuleDescriptor.getExtraInfos()) {
    if (extraInfoHolder.getName().equals(key)) {
      extraInfoHolder.setContent(value);
      found=false;
    }
  }
  if (!found) {
    ivyModuleDescriptor.getExtraInfos().add(new ExtraInfoHolder(key,value));
  }
}","private void overwriteExtraInfoIfExists(String key,String value){
  boolean found=false;
  for (  ExtraInfoHolder extraInfoHolder : ivyModuleDescriptor.getExtraInfos()) {
    if (extraInfoHolder.getName().equals(key)) {
      extraInfoHolder.setContent(value);
      found=true;
    }
  }
  if (!found) {
    ivyModuleDescriptor.getExtraInfos().add(new ExtraInfoHolder(key,value));
  }
}",0.990967741935484
82638,"protected URI buildBundleURI(Object location){
  try {
    return new URI(((File)location).toURL().toExternalForm());
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  URISyntaxException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","protected URI buildBundleURI(Object location){
  try {
    return new URI(((File)location).toURI().toURL().toExternalForm());
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  URISyntaxException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9871382636655948
82639,"public void testMultipleInstances() throws Exception {
  MockMessageLogger mockLogger=new MockMessageLogger();
  Ivy ivy=Ivy.newInstance();
  ivy.getLoggerEngine().setDefaultLogger(mockLogger);
  ivy.configure(new File(""String_Node_Str""));
  assertFalse(""String_Node_Str"",IvyContext.getContext().getIvy() == ivy);
  ResolveReport report=ivy.resolve(new File(""String_Node_Str"").toURL(),getResolveOptions(ivy,new String[]{""String_Node_Str""}));
  assertNotNull(report);
  assertFalse(report.hasError());
  mockLogger.assertLogContains(""String_Node_Str"");
  assertFalse(""String_Node_Str"",IvyContext.getContext().getIvy() == ivy);
  MockMessageLogger mockLogger2=new MockMessageLogger();
  Ivy ivy2=new Ivy();
  ivy2.getLoggerEngine().setDefaultLogger(mockLogger2);
  ivy2.configure(new File(""String_Node_Str"").toURL());
  report=ivy2.resolve(new File(""String_Node_Str"").toURL(),getResolveOptions(ivy2,new String[]{""String_Node_Str""}));
  assertNotNull(report);
  assertFalse(report.hasError());
  mockLogger2.assertLogContains(""String_Node_Str"");
  assertFalse(""String_Node_Str"",IvyContext.getContext().getIvy() == ivy2);
  report=ivy.resolve(new File(""String_Node_Str"").toURL(),getResolveOptions(ivy,new String[]{""String_Node_Str""}));
  assertNotNull(report);
  assertFalse(report.hasError());
  mockLogger.assertLogContains(""String_Node_Str"");
  assertFalse(""String_Node_Str"",IvyContext.getContext().getIvy() == ivy);
}","public void testMultipleInstances() throws Exception {
  MockMessageLogger mockLogger=new MockMessageLogger();
  Ivy ivy=Ivy.newInstance();
  ivy.getLoggerEngine().setDefaultLogger(mockLogger);
  ivy.configure(new File(""String_Node_Str""));
  assertFalse(""String_Node_Str"",IvyContext.getContext().getIvy() == ivy);
  ResolveReport report=ivy.resolve(new File(""String_Node_Str""),getResolveOptions(ivy,new String[]{""String_Node_Str""}));
  assertNotNull(report);
  assertFalse(report.hasError());
  mockLogger.assertLogContains(""String_Node_Str"");
  assertFalse(""String_Node_Str"",IvyContext.getContext().getIvy() == ivy);
  MockMessageLogger mockLogger2=new MockMessageLogger();
  Ivy ivy2=new Ivy();
  ivy2.getLoggerEngine().setDefaultLogger(mockLogger2);
  ivy2.configure(new File(""String_Node_Str"").toURI().toURL());
  report=ivy2.resolve(new File(""String_Node_Str""),getResolveOptions(ivy2,new String[]{""String_Node_Str""}));
  assertNotNull(report);
  assertFalse(report.hasError());
  mockLogger2.assertLogContains(""String_Node_Str"");
  assertFalse(""String_Node_Str"",IvyContext.getContext().getIvy() == ivy2);
  report=ivy.resolve(new File(""String_Node_Str""),getResolveOptions(ivy,new String[]{""String_Node_Str""}));
  assertNotNull(report);
  assertFalse(report.hasError());
  mockLogger.assertLogContains(""String_Node_Str"");
  assertFalse(""String_Node_Str"",IvyContext.getContext().getIvy() == ivy);
}",0.9559971611071684
82640,"public ResolveReport resolve(String mrid) throws MalformedURLException, ParseException, IOException {
  return ivy.resolve(getIvyFile(mrid).toURL(),TestHelper.newResolveOptions(getSettings()));
}","public ResolveReport resolve(String mrid) throws MalformedURLException, ParseException, IOException {
  return ivy.resolve(getIvyFile(mrid),TestHelper.newResolveOptions(getSettings()));
}",0.9790575916230366
82641,"public void testURL() throws Exception {
  String confUrl=new File(""String_Node_Str"").toURL().toExternalForm();
  String confDirUrl=new File(""String_Node_Str"").toURL().toExternalForm();
  if (confDirUrl.endsWith(""String_Node_Str"")) {
    confDirUrl=confDirUrl.substring(0,confDirUrl.length() - 1);
  }
  configure.setUrl(confUrl);
  configure.execute();
  IvySettings settings=getIvyInstance().getSettings();
  assertEquals(new File(""String_Node_Str"").getAbsoluteFile(),settings.getDefaultCache());
  assertEquals(confUrl,settings.getVariables().getVariable(""String_Node_Str""));
  assertEquals(confDirUrl,settings.getVariables().getVariable(""String_Node_Str""));
  assertEquals(""String_Node_Str"",settings.getVariables().getVariable(""String_Node_Str""));
}","public void testURL() throws Exception {
  String confUrl=new File(""String_Node_Str"").toURI().toURL().toExternalForm();
  String confDirUrl=new File(""String_Node_Str"").toURI().toURL().toExternalForm();
  if (confDirUrl.endsWith(""String_Node_Str"")) {
    confDirUrl=confDirUrl.substring(0,confDirUrl.length() - 1);
  }
  configure.setUrl(confUrl);
  configure.execute();
  IvySettings settings=getIvyInstance().getSettings();
  assertEquals(new File(""String_Node_Str"").getAbsoluteFile(),settings.getDefaultCache());
  assertEquals(confUrl,settings.getVariables().getVariable(""String_Node_Str""));
  assertEquals(confDirUrl,settings.getVariables().getVariable(""String_Node_Str""));
  assertEquals(""String_Node_Str"",settings.getVariables().getVariable(""String_Node_Str""));
}",0.9894875164257556
82642,"public void testWithResolveIdInAnotherBuild() throws Exception {
  Project other=new Project();
  other.setProperty(""String_Node_Str"",""String_Node_Str"");
  other.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve resolve=new IvyResolve();
  resolve.setProject(other);
  resolve.setFile(new File(""String_Node_Str""));
  resolve.setResolveId(""String_Node_Str"");
  resolve.execute();
  resolve=new IvyResolve();
  resolve.setProject(project);
  resolve.setFile(new File(""String_Node_Str""));
  resolve.execute();
  deliver.setResolveId(""String_Node_Str"");
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}","public void testWithResolveIdInAnotherBuild() throws Exception {
  Project other=new Project();
  other.setProperty(""String_Node_Str"",""String_Node_Str"");
  other.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve resolve=new IvyResolve();
  resolve.setProject(other);
  resolve.setFile(new File(""String_Node_Str""));
  resolve.setResolveId(""String_Node_Str"");
  resolve.execute();
  resolve=new IvyResolve();
  resolve.setProject(project);
  resolve.setFile(new File(""String_Node_Str""));
  resolve.execute();
  deliver.setResolveId(""String_Node_Str"");
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}",0.9967871485943776
82643,"public void testReplaceBranchInfo() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setPubbranch(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
}","public void testReplaceBranchInfo() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setPubbranch(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
}",0.994459833795014
82644,"public void testWithDynEvicted2() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setValidate(false);
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setValidate(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),false);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(2,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[1].getDependencyRevisionId());
  IvyRetrieve ret=new IvyRetrieve();
  ret.setProject(project);
  ret.setPattern(""String_Node_Str"");
  ret.execute();
  File list=new File(""String_Node_Str"");
  String[] files=list.list();
  HashSet actualFileSet=new HashSet(Arrays.asList(files));
  HashSet expectedFileSet=new HashSet();
  for (int i=0; i < dds.length; i++) {
    DependencyDescriptor dd=dds[i];
    String name=dd.getDependencyId().getName();
    String rev=dd.getDependencyRevisionId().getRevision();
    String ext=""String_Node_Str"";
    String artifact=name + ""String_Node_Str"" + rev+ ""String_Node_Str""+ ext;
    expectedFileSet.add(artifact);
  }
  assertEquals(""String_Node_Str"",expectedFileSet,actualFileSet);
  list.delete();
}","public void testWithDynEvicted2() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setValidate(false);
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setValidate(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),false);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(2,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[1].getDependencyRevisionId());
  IvyRetrieve ret=new IvyRetrieve();
  ret.setProject(project);
  ret.setPattern(""String_Node_Str"");
  ret.execute();
  File list=new File(""String_Node_Str"");
  String[] files=list.list();
  HashSet actualFileSet=new HashSet(Arrays.asList(files));
  HashSet expectedFileSet=new HashSet();
  for (int i=0; i < dds.length; i++) {
    DependencyDescriptor dd=dds[i];
    String name=dd.getDependencyId().getName();
    String rev=dd.getDependencyRevisionId().getRevision();
    String ext=""String_Node_Str"";
    String artifact=name + ""String_Node_Str"" + rev+ ""String_Node_Str""+ ext;
    expectedFileSet.add(artifact);
  }
  assertEquals(""String_Node_Str"",expectedFileSet,actualFileSet);
  list.delete();
}",0.9975505205143906
82645,"public void testWithBranch() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}","public void testWithBranch() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}",0.9954904171364148
82646,"public void testNotGenerateRevConstraint() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setGenerateRevConstraint(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDynamicConstraintDependencyRevisionId());
}","public void testNotGenerateRevConstraint() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setGenerateRevConstraint(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDynamicConstraintDependencyRevisionId());
}",0.9962859795728876
82647,"public void testWithExtraAttributes() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setValidate(false);
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setValidate(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),false);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  Map extraAtt=new HashMap();
  extraAtt.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",extraAtt),dds[0].getDependencyRevisionId());
}","public void testWithExtraAttributes() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setValidate(false);
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setValidate(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),false);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  Map extraAtt=new HashMap();
  extraAtt.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",extraAtt),dds[0].getDependencyRevisionId());
}",0.9961051606621228
82648,"public void testWithDynEvicted() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setValidate(false);
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setValidate(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),false);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(2,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  IvyRetrieve ret=new IvyRetrieve();
  ret.setProject(project);
  ret.setPattern(""String_Node_Str"");
  ret.execute();
  File list=new File(""String_Node_Str"");
  String[] files=list.list();
  HashSet actualFileSet=new HashSet(Arrays.asList(files));
  HashSet expectedFileSet=new HashSet();
  for (int i=0; i < dds.length; i++) {
    DependencyDescriptor dd=dds[i];
    String name=dd.getDependencyId().getName();
    String rev=dd.getDependencyRevisionId().getRevision();
    String ext=""String_Node_Str"";
    String artifact=name + ""String_Node_Str"" + rev+ ""String_Node_Str""+ ext;
    expectedFileSet.add(artifact);
  }
  assertEquals(""String_Node_Str"",expectedFileSet,actualFileSet);
}","public void testWithDynEvicted() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setValidate(false);
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setValidate(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),false);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(2,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  IvyRetrieve ret=new IvyRetrieve();
  ret.setProject(project);
  ret.setPattern(""String_Node_Str"");
  ret.execute();
  File list=new File(""String_Node_Str"");
  String[] files=list.list();
  HashSet actualFileSet=new HashSet(Arrays.asList(files));
  HashSet expectedFileSet=new HashSet();
  for (int i=0; i < dds.length; i++) {
    DependencyDescriptor dd=dds[i];
    String name=dd.getDependencyId().getName();
    String rev=dd.getDependencyRevisionId().getRevision();
    String ext=""String_Node_Str"";
    String artifact=name + ""String_Node_Str"" + rev+ ""String_Node_Str""+ ext;
    expectedFileSet.add(artifact);
  }
  assertEquals(""String_Node_Str"",expectedFileSet,actualFileSet);
}",0.9975232198142416
82649,"public void testDifferentRevisionsForSameModule() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(3,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[1].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[2].getDependencyRevisionId());
}","public void testDifferentRevisionsForSameModule() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(3,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[1].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[2].getDependencyRevisionId());
}",0.996545768566494
82650,"public void testSimple() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDynamicConstraintDependencyRevisionId());
}","public void testSimple() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDynamicConstraintDependencyRevisionId());
}",0.9960629921259844
82651,"public void testWithResolveId() throws Exception {
  IvyResolve resolve=new IvyResolve();
  resolve.setProject(project);
  resolve.setFile(new File(""String_Node_Str""));
  resolve.setResolveId(""String_Node_Str"");
  resolve.execute();
  resolve=new IvyResolve();
  resolve.setProject(project);
  resolve.setFile(new File(""String_Node_Str""));
  resolve.execute();
  deliver.setResolveId(""String_Node_Str"");
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}","public void testWithResolveId() throws Exception {
  IvyResolve resolve=new IvyResolve();
  resolve.setProject(project);
  resolve.setFile(new File(""String_Node_Str""));
  resolve.setResolveId(""String_Node_Str"");
  resolve.execute();
  resolve=new IvyResolve();
  resolve.setProject(project);
  resolve.setFile(new File(""String_Node_Str""));
  resolve.execute();
  deliver.setResolveId(""String_Node_Str"");
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}",0.996316758747698
82652,"public void testReplaceBranch() throws Exception {
  IvyConfigure settings=new IvyConfigure();
  settings.setProject(project);
  settings.execute();
  IvyAntSettings.getDefaultInstance(settings).getConfiguredIvyInstance(settings).getSettings().setDefaultBranch(""String_Node_Str"");
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDynamicConstraintDependencyRevisionId());
}","public void testReplaceBranch() throws Exception {
  IvyConfigure settings=new IvyConfigure();
  settings.setProject(project);
  settings.execute();
  IvyAntSettings.getDefaultInstance(settings).getConfiguredIvyInstance(settings).getSettings().setDefaultBranch(""String_Node_Str"");
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDynamicConstraintDependencyRevisionId());
}",0.996852871754524
82653,"public void testNoReplaceDynamicRev() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setReplacedynamicrev(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}","public void testNoReplaceDynamicRev() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.setReplacedynamicrev(false);
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURI().toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}",0.9956379498364232
82654,"public void testInstallWithClassifiers() throws Exception {
  project.setProperty(""String_Node_Str"",new File(""String_Node_Str"").toURL().toExternalForm());
  install.setOrganisation(""String_Node_Str"");
  install.setModule(""String_Node_Str"");
  install.setRevision(""String_Node_Str"");
  install.setType(""String_Node_Str"");
  install.setFrom(""String_Node_Str"");
  install.setTo(""String_Node_Str"");
  install.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
}","public void testInstallWithClassifiers() throws Exception {
  project.setProperty(""String_Node_Str"",new File(""String_Node_Str"").toURI().toURL().toExternalForm());
  install.setOrganisation(""String_Node_Str"");
  install.setModule(""String_Node_Str"");
  install.setRevision(""String_Node_Str"");
  install.setType(""String_Node_Str"");
  install.setFrom(""String_Node_Str"");
  install.setTo(""String_Node_Str"");
  install.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
}",0.9936406995230525
82655,"public void testCustom() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setValidate(false);
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setPubdate(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setValidate(false);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  File dest=new File(""String_Node_Str"");
  assertTrue(dest.exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),dest.toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",md.getConfiguration(""String_Node_Str"").getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",md.getDependencies()[0].getAttribute(""String_Node_Str""));
  String expected=FileUtil.readEntirely(new BufferedReader(new InputStreamReader(IvyPublishTest.class.getResourceAsStream(""String_Node_Str""))));
  String updated=FileUtil.readEntirely(new BufferedReader(new FileReader(dest)));
  assertEquals(expected,updated);
}","public void testCustom() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setValidate(false);
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setPubdate(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setValidate(false);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  File dest=new File(""String_Node_Str"");
  assertTrue(dest.exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),dest.toURI().toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",md.getConfiguration(""String_Node_Str"").getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",md.getDependencies()[0].getAttribute(""String_Node_Str""));
  String expected=FileUtil.readEntirely(new BufferedReader(new InputStreamReader(IvyPublishTest.class.getResourceAsStream(""String_Node_Str""))));
  String updated=FileUtil.readEntirely(new BufferedReader(new FileReader(dest)));
  assertEquals(expected,updated);
}",0.9971489665003564
82656,"public void testForceDeliver() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setSrcivypattern(""String_Node_Str"");
  publish.setForcedeliver(true);
  FileUtil.copy(new File(""String_Node_Str""),new File(""String_Node_Str""),null);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
}","public void testForceDeliver() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setSrcivypattern(""String_Node_Str"");
  publish.setForcedeliver(true);
  FileUtil.copy(new File(""String_Node_Str""),new File(""String_Node_Str""),null);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURI().toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
}",0.9954233409610984
82657,"public void testNoDeliver() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setSrcivypattern(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),new File(""String_Node_Str""),null);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
  assertEquals(""String_Node_Str"",md.getDependencies()[0].getDependencyRevisionId().getRevision());
}","public void testNoDeliver() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setSrcivypattern(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),new File(""String_Node_Str""),null);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURI().toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
  assertEquals(""String_Node_Str"",md.getDependencies()[0].getDependencyRevisionId().getRevision());
}",0.9957310565635006
82658,"public void testSimple() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
}","public void testSimple() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURI().toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
}",0.9947437582128776
82659,"public void testPublishNotAllConfigs() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setConf(""String_Node_Str"");
  publish.setUpdate(true);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
  String[] configs=md.getConfigurationsNames();
  assertEquals(""String_Node_Str"",1,configs.length);
  assertEquals(""String_Node_Str"",""String_Node_Str"",configs[0]);
}","public void testPublishNotAllConfigs() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setPubrevision(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setConf(""String_Node_Str"");
  publish.setUpdate(true);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURI().toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
  String[] configs=md.getConfigurationsNames();
  assertEquals(""String_Node_Str"",1,configs.length);
  assertEquals(""String_Node_Str"",""String_Node_Str"",configs[0]);
}",0.99601593625498
82660,"public void testNoDeliverWithBranch() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setUpdate(true);
  publish.setPubrevision(""String_Node_Str"");
  publish.setPubbranch(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setSrcivypattern(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),new File(""String_Node_Str""),null);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getBranch());
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
  assertEquals(""String_Node_Str"",md.getDependencies()[0].getDependencyRevisionId().getRevision());
}","public void testNoDeliverWithBranch() throws Exception {
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  publish.setUpdate(true);
  publish.setPubrevision(""String_Node_Str"");
  publish.setPubbranch(""String_Node_Str"");
  publish.setResolver(""String_Node_Str"");
  publish.setSrcivypattern(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),new File(""String_Node_Str""),null);
  File art=new File(""String_Node_Str"");
  FileUtil.copy(new File(""String_Node_Str""),art,null);
  publish.execute();
  assertTrue(new File(""String_Node_Str"").exists());
  assertTrue(new File(""String_Node_Str"").exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),new File(""String_Node_Str"").toURI().toURL(),false);
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getBranch());
  assertEquals(""String_Node_Str"",md.getModuleRevisionId().getRevision());
  assertEquals(""String_Node_Str"",md.getDependencies()[0].getDependencyRevisionId().getRevision());
}",0.9963269054178144
82661,"public void testPerfs() throws Exception {
  generateModules(70,2,5,2,15);
  long start=System.currentTimeMillis();
  ResolveReport report=ivy.resolve(new File(""String_Node_Str"").toURL(),getResolveOptions(new String[]{""String_Node_Str""}).setRevision(""String_Node_Str""));
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + report.getConfigurationReport(""String_Node_Str"").getNodesNumber() + ""String_Node_Str""+ (end - start)+ ""String_Node_Str"");
  cleanRepo();
}","public void testPerfs() throws Exception {
  generateModules(70,2,5,2,15);
  long start=System.currentTimeMillis();
  ResolveReport report=ivy.resolve(new File(""String_Node_Str""),getResolveOptions(new String[]{""String_Node_Str""}).setRevision(""String_Node_Str""));
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + report.getConfigurationReport(""String_Node_Str"").getNodesNumber() + ""String_Node_Str""+ (end - start)+ ""String_Node_Str"");
  cleanRepo();
}",0.9917525773195875
82662,"public void testIVY1111() throws Exception {
  Project project=ivyDeliver.getProject();
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  String ivyFileName=DeliverTest.class.getResource(""String_Node_Str"").getFile();
  File ivyFile=new File(ivyFileName);
  resolve(ivyFile);
  ivyDeliver.setReplacedynamicrev(true);
  ivyDeliver.doExecute();
  String deliverContent=readFile(deliverDir.getAbsolutePath() + ""String_Node_Str"");
  assertTrue(deliverContent.indexOf(""String_Node_Str"") == -1);
  assertTrue(deliverContent.indexOf(""String_Node_Str"") >= 0);
}","public void testIVY1111() throws Exception {
  Project project=ivyDeliver.getProject();
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  File ivyFile=new File(new URI(DeliverTest.class.getResource(""String_Node_Str"").toString()));
  resolve(ivyFile);
  ivyDeliver.setReplacedynamicrev(true);
  ivyDeliver.doExecute();
  String deliverContent=readFile(deliverDir.getAbsolutePath() + ""String_Node_Str"");
  assertTrue(deliverContent.indexOf(""String_Node_Str"") == -1);
  assertTrue(deliverContent.indexOf(""String_Node_Str"") >= 0);
}",0.8242753623188406
82663,"protected void setUp() throws Exception {
  super.setUp();
  resetCounters();
  ivy=Ivy.newInstance();
  ivy.configure(PublishEventsTest.class.getResource(""String_Node_Str""));
  ivy.pushContext();
  publishEngine=ivy.getPublishEngine();
  ivyFile=new File(""String_Node_Str"");
  assertTrue(""String_Node_Str"",ivyFile.exists());
  dataFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  dataFile.deleteOnExit();
  publishModule=XmlModuleDescriptorParser.getInstance().parseDescriptor(ivy.getSettings(),ivyFile.toURL(),false);
  publishSources=Collections.singleton(dataFile.getAbsolutePath());
  publishOptions=new PublishOptions();
  publishOptions.setSrcIvyPattern(ivyFile.getAbsolutePath());
  dataArtifact=publishModule.getAllArtifacts()[0];
  assertEquals(""String_Node_Str"",""String_Node_Str"",dataArtifact.getName());
  ivyArtifact=MDArtifact.newIvyArtifact(publishModule);
  expectedPublications=new HashMap();
  expectedPublications.put(dataArtifact.getId(),new PublishTestCase(dataArtifact,dataFile,true));
  expectedPublications.put(ivyArtifact.getId(),new PublishTestCase(ivyArtifact,ivyFile,true));
  assertEquals(""String_Node_Str"",2,expectedPublications.size());
  IvyContext.getContext().push(PublishEventsTest.class.getName(),this);
}","protected void setUp() throws Exception {
  super.setUp();
  resetCounters();
  ivy=Ivy.newInstance();
  ivy.configure(PublishEventsTest.class.getResource(""String_Node_Str""));
  ivy.pushContext();
  publishEngine=ivy.getPublishEngine();
  ivyFile=new File(""String_Node_Str"");
  assertTrue(""String_Node_Str"",ivyFile.exists());
  dataFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  dataFile.deleteOnExit();
  publishModule=XmlModuleDescriptorParser.getInstance().parseDescriptor(ivy.getSettings(),ivyFile.toURI().toURL(),false);
  publishSources=Collections.singleton(dataFile.getAbsolutePath());
  publishOptions=new PublishOptions();
  publishOptions.setSrcIvyPattern(ivyFile.getAbsolutePath());
  dataArtifact=publishModule.getAllArtifacts()[0];
  assertEquals(""String_Node_Str"",""String_Node_Str"",dataArtifact.getName());
  ivyArtifact=MDArtifact.newIvyArtifact(publishModule);
  expectedPublications=new HashMap();
  expectedPublications.put(dataArtifact.getId(),new PublishTestCase(dataArtifact,dataFile,true));
  expectedPublications.put(ivyArtifact.getId(),new PublishTestCase(ivyArtifact,ivyFile,true));
  assertEquals(""String_Node_Str"",2,expectedPublications.size());
  IvyContext.getContext().push(PublishEventsTest.class.getName(),this);
}",0.9968279143536876
82664,"/** 
 * Resolve parent module from module inheritance repository
 * @param parentMrid a given {@link ModuleRevisionId} to find
 * @return a {@link ModuleDescriptor} if found. Return null if no {@link ModuleDescriptor} was found
 * @throws ParseException
 */
protected ModuleDescriptor resolveParentFromModuleInheritanceRepository(ModuleRevisionId parentMrid) throws ParseException {
  Message.debug(""String_Node_Str"");
  DependencyDescriptor dd=new DefaultDependencyDescriptor(parentMrid,true);
  ResolveEngine engine=IvyContext.getContext().getIvy().getResolveEngine();
  ResolveOptions options=new ResolveOptions();
  options.setDownload(false);
  ResolveData data=new ResolveData(engine,options);
  DependencyResolver resolver=IvyContext.getContext().getSettings().getResolver(getModuleInheritanceRepositoryParentResolverName(parentMrid));
  if (resolver == null) {
    return null;
  }
  dd=NameSpaceHelper.toSystem(dd,getSettings().getContextNamespace());
  ResolvedModuleRevision otherModule=resolver.getDependency(dd,data);
  if (otherModule != null) {
    return otherModule.getDescriptor();
  }
 else {
    return null;
  }
}","/** 
 * Resolve parent module from module inheritance repository
 * @param parentMrid a given {@link ModuleRevisionId} to find
 * @return a {@link ModuleDescriptor} if found. Return null if no {@link ModuleDescriptor} was found
 * @throws ParseException
 */
protected ModuleDescriptor resolveParentFromModuleInheritanceRepository(ModuleRevisionId parentMrid) throws ParseException {
  Message.debug(""String_Node_Str"");
  DependencyDescriptor dd=new DefaultDependencyDescriptor(parentMrid,true);
  ResolveEngine engine=IvyContext.getContext().getIvy().getResolveEngine();
  ResolveOptions options=new ResolveOptions();
  options.setDownload(false);
  ResolveData data=new ResolveData(engine,options);
  IvySettings settings=IvyContext.getContext().getSettings();
  String resolverName=getModuleInheritanceRepositoryParentResolverName(parentMrid);
  if (!settings.hasResolver(resolverName)) {
    return null;
  }
  DependencyResolver resolver=settings.getResolver(resolverName);
  dd=NameSpaceHelper.toSystem(dd,getSettings().getContextNamespace());
  ResolvedModuleRevision otherModule=resolver.getDependency(dd,data);
  if (otherModule != null) {
    return otherModule.getDescriptor();
  }
 else {
    return null;
  }
}",0.8955857385398981
82665,"/** 
 * Check if parent module is reachable using location attribute (for dev purpose). If parent module is reachable it will be registered in module inheritance repository 
 * @param location a given location 
 * @param parentMrid 
 * @throws IOException
 * @throws ParseException 
 */
protected DependencyResolver checkParentModuleOnFilesystem(String location,ModuleRevisionId parentMrid) throws IOException {
  if (!""String_Node_Str"".equals(descriptorURL.getProtocol())) {
    return null;
  }
  File file=FileUtil.normalize(location);
  if (!file.isAbsolute()) {
    URL url=new URL(descriptorURL,location);
    try {
      file=FileUtil.normalize(new File(new URI(url.toExternalForm())).getAbsolutePath());
    }
 catch (    URISyntaxException e) {
      file=FileUtil.normalize(new File(url.getPath()).getAbsolutePath());
    }
  }
  if (!file.exists()) {
    Message.verbose(""String_Node_Str"" + file.getAbsolutePath());
    return null;
  }
  FileSystemResolver parentModuleResolver=new FileSystemResolver();
  parentModuleResolver.setName(getModuleInheritanceRepositoryParentResolverName(parentMrid));
  parentModuleResolver.addIvyPattern(file.getAbsolutePath());
  parentModuleResolver.setSettings(IvyContext.getContext().getSettings());
  return parentModuleResolver;
}","/** 
 * Check if parent module is reachable using location attribute (for dev purpose). If parent module is reachable it will be registered in module inheritance repository 
 * @param location a given location 
 * @param parentMrid 
 * @throws IOException
 * @throws ParseException 
 */
protected DependencyResolver checkParentModuleOnFilesystem(String location,ModuleRevisionId parentMrid) throws IOException {
  if (!""String_Node_Str"".equals(descriptorURL.getProtocol())) {
    return null;
  }
  File file=new File(location);
  if (!file.isAbsolute()) {
    URL url=new URL(descriptorURL,location);
    try {
      file=new File(new URI(url.toExternalForm()));
    }
 catch (    URISyntaxException e) {
      file=new File(url.getPath());
    }
  }
  file=FileUtil.normalize(file.getAbsolutePath());
  if (!file.exists()) {
    Message.verbose(""String_Node_Str"" + file.getAbsolutePath());
    return null;
  }
  FileSystemResolver parentModuleResolver=new FileSystemResolver();
  parentModuleResolver.setName(getModuleInheritanceRepositoryParentResolverName(parentMrid));
  parentModuleResolver.addIvyPattern(file.getAbsolutePath());
  parentModuleResolver.setSettings(IvyContext.getContext().getSettings());
  return parentModuleResolver;
}",0.9464922711058265
82666,"protected String normalizeToString(URL url) throws IOException {
  if (!""String_Node_Str"".equals(url.getProtocol()) && !""String_Node_Str"".equals(url.getProtocol())) {
    return url.toExternalForm();
  }
  try {
    URI uri=new URI(url.getProtocol(),url.getAuthority(),url.getPath(),url.getQuery(),url.getRef());
    String uriString=uri.toASCIIString();
    uriString=uriString.replaceAll(""String_Node_Str"",""String_Node_Str"");
    return ESCAPE_PATTERN.matcher(uriString).replaceAll(""String_Node_Str"");
  }
 catch (  URISyntaxException e) {
    IOException ioe=new MalformedURLException(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
    ioe.initCause(e);
    throw ioe;
  }
}","protected String normalizeToString(URL url) throws IOException {
  if (!""String_Node_Str"".equals(url.getProtocol()) && !""String_Node_Str"".equals(url.getProtocol())) {
    return url.toExternalForm();
  }
  try {
    URI uri=new URI(url.getProtocol(),url.getAuthority(),url.getPath(),url.getQuery(),url.getRef());
    String uriString=uri.normalize().toASCIIString();
    uriString=uriString.replaceAll(""String_Node_Str"",""String_Node_Str"");
    return ESCAPE_PATTERN.matcher(uriString).replaceAll(""String_Node_Str"");
  }
 catch (  URISyntaxException e) {
    IOException ioe=new MalformedURLException(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
    ioe.initCause(e);
    throw ioe;
  }
}",0.9913419913419912
82667,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (""String_Node_Str"".equals(qName)) {
    organisation=attributes.getValue(""String_Node_Str"");
    module=attributes.getValue(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(qName)) {
    revisionArtifacts=new ArrayList();
    branch=attributes.getValue(""String_Node_Str"");
    revision=attributes.getValue(""String_Node_Str"");
    isDefault=Boolean.valueOf(attributes.getValue(""String_Node_Str"")).booleanValue();
    String pos=attributes.getValue(""String_Node_Str"");
    position=pos == null ? getMaxPos() + 1 : Integer.valueOf(pos).intValue();
    if (attributes.getValue(""String_Node_Str"") != null || attributes.getValue(""String_Node_Str"") != null) {
      skip=true;
    }
 else {
      revisionsMap.put(new Integer(position),revisionArtifacts);
      mrid=ModuleRevisionId.newInstance(organisation,module,branch,revision,ExtendableItemHelper.getExtraAttributes(attributes,""String_Node_Str""));
      mrids.add(mrid);
      if (isDefault) {
        defaultMrids.add(mrid);
      }
 else {
        Artifact metadataArtifact=DefaultArtifact.newIvyArtifact(mrid,pubdate);
        MetadataArtifactDownloadReport madr=new MetadataArtifactDownloadReport(metadataArtifact);
        metadataReports.put(mrid,madr);
        realMrids.add(mrid);
      }
      try {
        String pubDateAttr=attributes.getValue(""String_Node_Str"");
        if (pubDateAttr != null) {
          pubdate=Ivy.DATE_FORMAT.parse(pubDateAttr);
        }
        skip=false;
      }
 catch (      ParseException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + organisation + ""String_Node_Str""+ module+ ""String_Node_Str""+ revision+ ""String_Node_Str""+ attributes.getValue(""String_Node_Str""));
      }
    }
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (skip) {
      return;
    }
    MetadataArtifactDownloadReport madr=(MetadataArtifactDownloadReport)metadataReports.get(mrid);
    if (madr != null) {
      madr.setDownloadStatus(DownloadStatus.fromString(attributes.getValue(""String_Node_Str"")));
      madr.setDownloadDetails(attributes.getValue(""String_Node_Str""));
      madr.setSize(Long.parseLong(attributes.getValue(""String_Node_Str"")));
      madr.setDownloadTimeMillis(Long.parseLong(attributes.getValue(""String_Node_Str"")));
      madr.setSearched(parseBoolean(attributes.getValue(""String_Node_Str"")));
      if (attributes.getValue(""String_Node_Str"") != null) {
        madr.setLocalFile(new File(attributes.getValue(""String_Node_Str"")));
      }
      if (attributes.getValue(""String_Node_Str"") != null) {
        madr.setOriginalLocalFile(new File(attributes.getValue(""String_Node_Str"")));
      }
      if (attributes.getValue(""String_Node_Str"") != null) {
        if (ArtifactOrigin.isUnknown(attributes.getValue(""String_Node_Str""))) {
          madr.setArtifactOrigin(ArtifactOrigin.unkwnown(madr.getArtifact()));
        }
 else {
          madr.setArtifactOrigin(new ArtifactOrigin(madr.getArtifact(),parseBoolean(attributes.getValue(""String_Node_Str"")),attributes.getValue(""String_Node_Str"")));
        }
      }
    }
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (skip) {
      return;
    }
    String status=attributes.getValue(""String_Node_Str"");
    String artifactName=attributes.getValue(""String_Node_Str"");
    String type=attributes.getValue(""String_Node_Str"");
    String ext=attributes.getValue(""String_Node_Str"");
    Artifact artifact=new DefaultArtifact(mrid,pubdate,artifactName,type,ext,ExtendableItemHelper.getExtraAttributes(attributes,""String_Node_Str""));
    ArtifactDownloadReport aReport=new ArtifactDownloadReport(artifact);
    aReport.setDownloadStatus(DownloadStatus.fromString(status));
    aReport.setDownloadDetails(attributes.getValue(""String_Node_Str""));
    aReport.setSize(Long.parseLong(attributes.getValue(""String_Node_Str"")));
    aReport.setDownloadTimeMillis(Long.parseLong(attributes.getValue(""String_Node_Str"")));
    if (attributes.getValue(""String_Node_Str"") != null) {
      aReport.setLocalFile(new File(attributes.getValue(""String_Node_Str"")));
    }
    revisionArtifacts.add(aReport);
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (skip) {
      return;
    }
    ArtifactDownloadReport aReport=(ArtifactDownloadReport)revisionArtifacts.get(revisionArtifacts.size() - 1);
    if (ArtifactOrigin.isUnknown(attributes.getValue(""String_Node_Str""))) {
      aReport.setArtifactOrigin(ArtifactOrigin.unkwnown(aReport.getArtifact()));
    }
 else {
      aReport.setArtifactOrigin(new ArtifactOrigin(aReport.getArtifact(),parseBoolean(attributes.getValue(""String_Node_Str"")),attributes.getValue(""String_Node_Str"")));
    }
  }
 else   if (""String_Node_Str"".equals(qName)) {
    String organisation=attributes.getValue(""String_Node_Str"");
    String name=attributes.getValue(""String_Node_Str"");
    String branch=attributes.getValue(""String_Node_Str"");
    String revision=attributes.getValue(""String_Node_Str"");
    Map extraAttributes=new HashMap();
    for (int i=0; i < attributes.getLength(); i++) {
      String attName=attributes.getQName(i);
      if (attName.startsWith(""String_Node_Str"")) {
        String extraAttrName=attName.substring(""String_Node_Str"".length());
        String extraAttrValue=attributes.getValue(i);
        extraAttributes.put(extraAttrName,extraAttrValue);
      }
    }
    mRevisionId=ModuleRevisionId.newInstance(organisation,name,branch,revision,extraAttributes);
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (""String_Node_Str"".equals(qName)) {
    organisation=attributes.getValue(""String_Node_Str"");
    module=attributes.getValue(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(qName)) {
    revisionArtifacts=new ArrayList();
    branch=attributes.getValue(""String_Node_Str"");
    revision=attributes.getValue(""String_Node_Str"");
    isDefault=Boolean.valueOf(attributes.getValue(""String_Node_Str"")).booleanValue();
    String pos=attributes.getValue(""String_Node_Str"");
    position=pos == null ? getMaxPos() + 1 : Integer.valueOf(pos).intValue();
    if (attributes.getValue(""String_Node_Str"") != null) {
      hasError=true;
      skip=true;
    }
 else     if (attributes.getValue(""String_Node_Str"") != null) {
      skip=true;
    }
 else {
      revisionsMap.put(new Integer(position),revisionArtifacts);
      mrid=ModuleRevisionId.newInstance(organisation,module,branch,revision,ExtendableItemHelper.getExtraAttributes(attributes,""String_Node_Str""));
      mrids.add(mrid);
      if (isDefault) {
        defaultMrids.add(mrid);
      }
 else {
        Artifact metadataArtifact=DefaultArtifact.newIvyArtifact(mrid,pubdate);
        MetadataArtifactDownloadReport madr=new MetadataArtifactDownloadReport(metadataArtifact);
        metadataReports.put(mrid,madr);
        realMrids.add(mrid);
      }
      try {
        String pubDateAttr=attributes.getValue(""String_Node_Str"");
        if (pubDateAttr != null) {
          pubdate=Ivy.DATE_FORMAT.parse(pubDateAttr);
        }
        skip=false;
      }
 catch (      ParseException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + organisation + ""String_Node_Str""+ module+ ""String_Node_Str""+ revision+ ""String_Node_Str""+ attributes.getValue(""String_Node_Str""));
      }
    }
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (skip) {
      return;
    }
    MetadataArtifactDownloadReport madr=(MetadataArtifactDownloadReport)metadataReports.get(mrid);
    if (madr != null) {
      madr.setDownloadStatus(DownloadStatus.fromString(attributes.getValue(""String_Node_Str"")));
      madr.setDownloadDetails(attributes.getValue(""String_Node_Str""));
      madr.setSize(Long.parseLong(attributes.getValue(""String_Node_Str"")));
      madr.setDownloadTimeMillis(Long.parseLong(attributes.getValue(""String_Node_Str"")));
      madr.setSearched(parseBoolean(attributes.getValue(""String_Node_Str"")));
      if (attributes.getValue(""String_Node_Str"") != null) {
        madr.setLocalFile(new File(attributes.getValue(""String_Node_Str"")));
      }
      if (attributes.getValue(""String_Node_Str"") != null) {
        madr.setOriginalLocalFile(new File(attributes.getValue(""String_Node_Str"")));
      }
      if (attributes.getValue(""String_Node_Str"") != null) {
        if (ArtifactOrigin.isUnknown(attributes.getValue(""String_Node_Str""))) {
          madr.setArtifactOrigin(ArtifactOrigin.unkwnown(madr.getArtifact()));
        }
 else {
          madr.setArtifactOrigin(new ArtifactOrigin(madr.getArtifact(),parseBoolean(attributes.getValue(""String_Node_Str"")),attributes.getValue(""String_Node_Str"")));
        }
      }
    }
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (skip) {
      return;
    }
    String status=attributes.getValue(""String_Node_Str"");
    String artifactName=attributes.getValue(""String_Node_Str"");
    String type=attributes.getValue(""String_Node_Str"");
    String ext=attributes.getValue(""String_Node_Str"");
    Artifact artifact=new DefaultArtifact(mrid,pubdate,artifactName,type,ext,ExtendableItemHelper.getExtraAttributes(attributes,""String_Node_Str""));
    ArtifactDownloadReport aReport=new ArtifactDownloadReport(artifact);
    aReport.setDownloadStatus(DownloadStatus.fromString(status));
    aReport.setDownloadDetails(attributes.getValue(""String_Node_Str""));
    aReport.setSize(Long.parseLong(attributes.getValue(""String_Node_Str"")));
    aReport.setDownloadTimeMillis(Long.parseLong(attributes.getValue(""String_Node_Str"")));
    if (attributes.getValue(""String_Node_Str"") != null) {
      aReport.setLocalFile(new File(attributes.getValue(""String_Node_Str"")));
    }
    revisionArtifacts.add(aReport);
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (skip) {
      return;
    }
    ArtifactDownloadReport aReport=(ArtifactDownloadReport)revisionArtifacts.get(revisionArtifacts.size() - 1);
    if (ArtifactOrigin.isUnknown(attributes.getValue(""String_Node_Str""))) {
      aReport.setArtifactOrigin(ArtifactOrigin.unkwnown(aReport.getArtifact()));
    }
 else {
      aReport.setArtifactOrigin(new ArtifactOrigin(aReport.getArtifact(),parseBoolean(attributes.getValue(""String_Node_Str"")),attributes.getValue(""String_Node_Str"")));
    }
  }
 else   if (""String_Node_Str"".equals(qName)) {
    String organisation=attributes.getValue(""String_Node_Str"");
    String name=attributes.getValue(""String_Node_Str"");
    String branch=attributes.getValue(""String_Node_Str"");
    String revision=attributes.getValue(""String_Node_Str"");
    Map extraAttributes=new HashMap();
    for (int i=0; i < attributes.getLength(); i++) {
      String attName=attributes.getQName(i);
      if (attName.startsWith(""String_Node_Str"")) {
        String extraAttrName=attName.substring(""String_Node_Str"".length());
        String extraAttrValue=attributes.getValue(i);
        extraAttributes.put(extraAttrName,extraAttrValue);
      }
    }
    mRevisionId=ModuleRevisionId.newInstance(organisation,name,branch,revision,extraAttributes);
  }
}",0.994054054054054
82668,"public void originalToCachedModuleDescriptor(DependencyResolver resolver,ResolvedResource orginalMetadataRef,Artifact requestedMetadataArtifact,ResolvedModuleRevision rmr,ModuleDescriptorWriter writer){
  ModuleDescriptor md=rmr.getDescriptor();
  Artifact originalMetadataArtifact=getOriginalMetadataArtifact(requestedMetadataArtifact);
  File mdFileInCache=getIvyFileInCache(md.getResolvedModuleRevisionId());
  ModuleRevisionId mrid=requestedMetadataArtifact.getModuleRevisionId();
  if (!lockMetadataArtifact(mrid)) {
    Message.warn(""String_Node_Str"" + mrid);
    return;
  }
  try {
    File originalFileInCache=getArchiveFileInCache(originalMetadataArtifact);
    writer.write(orginalMetadataRef,md,originalFileInCache,mdFileInCache);
    saveResolvers(md,resolver.getName(),resolver.getName());
    if (!md.isDefault()) {
      rmr.getReport().setOriginalLocalFile(originalFileInCache);
    }
    rmr.getReport().setLocalFile(mdFileInCache);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    Message.warn(""String_Node_Str"" + (orginalMetadataRef == null ? String.valueOf(md.getResolvedModuleRevisionId()) : String.valueOf(orginalMetadataRef)) + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage());
  }
 finally {
    unlockMetadataArtifact(mrid);
  }
}","public void originalToCachedModuleDescriptor(DependencyResolver resolver,ResolvedResource orginalMetadataRef,Artifact requestedMetadataArtifact,ResolvedModuleRevision rmr,ModuleDescriptorWriter writer){
  ModuleDescriptor md=rmr.getDescriptor();
  Artifact originalMetadataArtifact=getOriginalMetadataArtifact(requestedMetadataArtifact);
  File mdFileInCache=getIvyFileInCache(md.getResolvedModuleRevisionId());
  ModuleRevisionId mrid=requestedMetadataArtifact.getModuleRevisionId();
  if (!lockMetadataArtifact(mrid)) {
    Message.warn(""String_Node_Str"" + mrid);
    return;
  }
  try {
    File originalFileInCache=getArchiveFileInCache(originalMetadataArtifact);
    writer.write(orginalMetadataRef,md,originalFileInCache,mdFileInCache);
    getMemoryCache().putInCache(mdFileInCache,new ParserSettingsMonitor(settings),true,md);
    saveResolvers(md,resolver.getName(),resolver.getName());
    if (!md.isDefault()) {
      rmr.getReport().setOriginalLocalFile(originalFileInCache);
    }
    rmr.getReport().setLocalFile(mdFileInCache);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    Message.warn(""String_Node_Str"" + (orginalMetadataRef == null ? String.valueOf(md.getResolvedModuleRevisionId()) : String.valueOf(orginalMetadataRef)) + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage());
  }
 finally {
    unlockMetadataArtifact(mrid);
  }
}",0.9662509170946442
82669,"private static void saxBundleInfo(BundleInfo bundleInfo,ContentHandler handler) throws SAXException {
  AttributesImpl atts=new AttributesImpl();
  addAttr(atts,OBRXMLParser.RESOURCE_SYMBOLIC_NAME,bundleInfo.getSymbolicName());
  addAttr(atts,OBRXMLParser.RESOURCE_VERSION,bundleInfo.getRawVersion());
  if (bundleInfo.getUri() != null) {
    addAttr(atts,OBRXMLParser.RESOURCE_URI,bundleInfo.getUri());
  }
  handler.startElement(""String_Node_Str"",OBRXMLParser.RESOURCE,OBRXMLParser.RESOURCE,atts);
  Iterator itCapabilities=bundleInfo.getCapabilities().iterator();
  while (itCapabilities.hasNext()) {
    BundleCapability capability=(BundleCapability)itCapabilities.next();
    saxCapability(capability,handler);
  }
  Iterator itRequirement=bundleInfo.getCapabilities().iterator();
  while (itRequirement.hasNext()) {
    BundleRequirement requirement=(BundleRequirement)itRequirement.next();
    saxRequirement(requirement,handler);
  }
  handler.endElement(""String_Node_Str"",OBRXMLParser.RESOURCE,OBRXMLParser.RESOURCE);
  handler.characters(""String_Node_Str"".toCharArray(),0,1);
}","private static void saxBundleInfo(BundleInfo bundleInfo,ContentHandler handler) throws SAXException {
  AttributesImpl atts=new AttributesImpl();
  addAttr(atts,OBRXMLParser.RESOURCE_SYMBOLIC_NAME,bundleInfo.getSymbolicName());
  addAttr(atts,OBRXMLParser.RESOURCE_VERSION,bundleInfo.getRawVersion());
  if (bundleInfo.getUri() != null) {
    addAttr(atts,OBRXMLParser.RESOURCE_URI,bundleInfo.getUri());
  }
  handler.startElement(""String_Node_Str"",OBRXMLParser.RESOURCE,OBRXMLParser.RESOURCE,atts);
  Iterator itCapabilities=bundleInfo.getCapabilities().iterator();
  while (itCapabilities.hasNext()) {
    BundleCapability capability=(BundleCapability)itCapabilities.next();
    saxCapability(capability,handler);
  }
  Iterator itRequirement=bundleInfo.getRequirements().iterator();
  while (itRequirement.hasNext()) {
    BundleRequirement requirement=(BundleRequirement)itRequirement.next();
    saxRequirement(requirement,handler);
  }
  handler.endElement(""String_Node_Str"",OBRXMLParser.RESOURCE,OBRXMLParser.RESOURCE);
  handler.characters(""String_Node_Str"".toCharArray(),0,1);
}",0.9898804047838088
82670,"public void testFileRepo() throws Exception {
  RepositoryManifestIterable it=new RepositoryManifestIterable(new FileRepository(new File(""String_Node_Str"")));
  BundleRepo repo=new BundleRepo();
  repo.populate(it);
  BundleRepo repo2=OBRXMLParser.parse(new FileInputStream(""String_Node_Str""));
  assertEquals(repo,repo2);
}","public void testFileRepo() throws Exception {
  RepositoryManifestIterable it=new RepositoryManifestIterable(new FileRepository(new File(""String_Node_Str"").getAbsoluteFile()));
  BundleRepo repo=new BundleRepo();
  repo.populate(it);
  BundleRepo repo2=OBRXMLParser.parse(new FileInputStream(""String_Node_Str""));
  assertEquals(repo,repo2);
}",0.972972972972973
82671,"private Map getMappingsMap(){
  Map mappingsMap=new HashMap();
  for (Iterator iter=mappings.iterator(); iter.hasNext(); ) {
    Mapping mapping=(Mapping)iter.next();
    mappingsMap.put(mapping.getConf(),mapping.getScope());
  }
  return mappingsMap;
}","private Map getMappingsMap(){
  Map mappingsMap=new HashMap();
  for (Iterator iter=mappings.iterator(); iter.hasNext(); ) {
    Mapping mapping=(Mapping)iter.next();
    String[] mappingConfs=splitConfs(mapping.getConf());
    for (int i=0; i < mappingConfs.length; i++) {
      if (!mappingsMap.containsKey(mappingConfs[i])) {
        mappingsMap.put(mappingConfs[i],mapping.getScope());
      }
    }
  }
  return mappingsMap;
}",0.7105263157894737
82672,"private void infoStarted(Attributes attributes){
  String module=substitute(settings,attributes.getValue(""String_Node_Str""));
  String rev=null;
  String branch=null;
  String status=null;
  String namespace=null;
  Map extraAttributes=null;
  if (options.isMerge()) {
    ModuleDescriptor merged=options.getMergedDescriptor();
    ModuleRevisionId mergedMrid=merged.getModuleRevisionId();
    organisation=mergedMrid.getOrganisation();
    branch=mergedMrid.getBranch();
    rev=mergedMrid.getRevision();
    status=merged.getStatus();
    if (merged instanceof DefaultModuleDescriptor) {
      Namespace ns=((DefaultModuleDescriptor)merged).getNamespace();
      if (ns != null) {
        namespace=ns.getName();
      }
    }
    if (namespace == null) {
      namespace=attributes.getValue(""String_Node_Str"");
    }
    extraAttributes=merged.getQualifiedExtraAttributes();
  }
 else {
    organisation=substitute(settings,attributes.getValue(""String_Node_Str""));
    rev=substitute(settings,attributes.getValue(""String_Node_Str""));
    branch=substitute(settings,attributes.getValue(""String_Node_Str""));
    status=substitute(settings,attributes.getValue(""String_Node_Str""));
    namespace=substitute(settings,attributes.getValue(""String_Node_Str""));
    extraAttributes=new LinkedHashMap(attributes.getLength());
    for (int i=0; i < attributes.getLength(); i++) {
      String qname=attributes.getQName(i);
      if (!stdAtts.contains(qname)) {
        extraAttributes.put(qname,substitute(settings,attributes.getValue(i)));
      }
    }
  }
  if (revision != null) {
    rev=revision;
  }
  if (options.getBranch() != null) {
    branch=options.getBranch();
  }
  if (this.status != null) {
    status=this.status;
  }
  ModuleRevisionId localMid=ModuleRevisionId.newInstance(organisation,module,branch,rev,ExtendableItemHelper.getExtraAttributes(settings,attributes,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  ModuleRevisionId systemMid=ns == null ? localMid : ns.getToSystemTransformer().transform(localMid);
  write(""String_Node_Str"");
  if (organisation != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getOrganisation()) + ""String_Node_Str"");
  }
  write(""String_Node_Str"" + XMLHelper.escape(systemMid.getName()) + ""String_Node_Str"");
  if (branch != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getBranch()) + ""String_Node_Str"");
  }
  if (systemMid.getRevision() != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getRevision()) + ""String_Node_Str"");
  }
  write(""String_Node_Str"" + XMLHelper.escape(status) + ""String_Node_Str"");
  if (pubdate != null) {
    write(""String_Node_Str"" + Ivy.DATE_FORMAT.format(pubdate) + ""String_Node_Str"");
  }
 else   if (attributes.getValue(""String_Node_Str"") != null) {
    write(""String_Node_Str"" + substitute(settings,attributes.getValue(""String_Node_Str"")) + ""String_Node_Str"");
  }
  if (namespace != null) {
    write(""String_Node_Str"" + namespace + ""String_Node_Str"");
  }
  for (Iterator extras=extraAttributes.entrySet().iterator(); extras.hasNext(); ) {
    Map.Entry extra=(Map.Entry)extras.next();
    write(""String_Node_Str"" + extra.getKey() + ""String_Node_Str""+ extra.getValue()+ ""String_Node_Str"");
  }
}","private void infoStarted(Attributes attributes){
  String module=substitute(settings,attributes.getValue(""String_Node_Str""));
  String rev=null;
  String branch=null;
  String status=null;
  String namespace=null;
  Map extraAttributes=null;
  if (options.isMerge()) {
    ModuleDescriptor merged=options.getMergedDescriptor();
    ModuleRevisionId mergedMrid=merged.getModuleRevisionId();
    organisation=mergedMrid.getOrganisation();
    branch=mergedMrid.getBranch();
    rev=mergedMrid.getRevision();
    status=merged.getStatus();
    if (merged instanceof DefaultModuleDescriptor) {
      Namespace ns=((DefaultModuleDescriptor)merged).getNamespace();
      if (ns != null) {
        namespace=ns.getName();
      }
    }
    if (namespace == null) {
      namespace=attributes.getValue(""String_Node_Str"");
    }
    extraAttributes=merged.getQualifiedExtraAttributes();
  }
 else {
    organisation=substitute(settings,attributes.getValue(""String_Node_Str""));
    rev=substitute(settings,attributes.getValue(""String_Node_Str""));
    branch=substitute(settings,attributes.getValue(""String_Node_Str""));
    status=substitute(settings,attributes.getValue(""String_Node_Str""));
    namespace=substitute(settings,attributes.getValue(""String_Node_Str""));
    extraAttributes=new LinkedHashMap(attributes.getLength());
    for (int i=0; i < attributes.getLength(); i++) {
      String qname=attributes.getQName(i);
      if (!STD_ATTS.contains(qname)) {
        extraAttributes.put(qname,substitute(settings,attributes.getValue(i)));
      }
    }
  }
  if (revision != null) {
    rev=revision;
  }
  if (options.getBranch() != null) {
    branch=options.getBranch();
  }
  if (this.status != null) {
    status=this.status;
  }
  ModuleRevisionId localMid=ModuleRevisionId.newInstance(organisation,module,branch,rev,ExtendableItemHelper.getExtraAttributes(settings,attributes,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  ModuleRevisionId systemMid=ns == null ? localMid : ns.getToSystemTransformer().transform(localMid);
  write(""String_Node_Str"");
  if (organisation != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getOrganisation()) + ""String_Node_Str"");
  }
  write(""String_Node_Str"" + XMLHelper.escape(systemMid.getName()) + ""String_Node_Str"");
  if (branch != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getBranch()) + ""String_Node_Str"");
  }
  if (systemMid.getRevision() != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getRevision()) + ""String_Node_Str"");
  }
  write(""String_Node_Str"" + XMLHelper.escape(status) + ""String_Node_Str"");
  if (pubdate != null) {
    write(""String_Node_Str"" + Ivy.DATE_FORMAT.format(pubdate) + ""String_Node_Str"");
  }
 else   if (attributes.getValue(""String_Node_Str"") != null) {
    write(""String_Node_Str"" + substitute(settings,attributes.getValue(""String_Node_Str"")) + ""String_Node_Str"");
  }
  if (namespace != null) {
    write(""String_Node_Str"" + namespace + ""String_Node_Str"");
  }
  for (Iterator extras=extraAttributes.entrySet().iterator(); extras.hasNext(); ) {
    Map.Entry extra=(Map.Entry)extras.next();
    write(""String_Node_Str"" + extra.getKey() + ""String_Node_Str""+ extra.getValue()+ ""String_Node_Str"");
  }
}",0.9980359570932164
82673,"/** 
 * <p>If publishing in merge mode, guarantee that any merged elements appearing before <code>moduleElement</code> have been written.  This method should be called <i>before</i> we write the start tag of <code>moduleElement</code>. This covers cases where merged elements like ""configurations"" and ""dependencies"" appear in the parent descriptor, but are completely missing in the child descriptor.</p> <p>For example, if ""moduleElement"" is ""dependencies"", guarantees that ""configurations"" has been written.  If <code>moduleElement</code> is <code>null</code>, then all missing merged elements will be flushed.</p>
 * @param moduleElement a descriptor element name, for example ""configurations"" or ""info""
 */
private void flushMergedElementsBefore(String moduleElement){
  if (options.isMerge() && context.size() == 1 && ""String_Node_Str"".equals(context.peek()) && !(mergedConfigurations && mergedDependencies)) {
    int position=moduleElement == null ? moduleElements.size() : moduleElements.indexOf(moduleElement);
    ModuleDescriptor merged=options.getMergedDescriptor();
    if (!mergedConfigurations && position > CONFIGURATIONS_POSITION && merged.getConfigurations().length > 0) {
      mergedConfigurations=true;
      writeInheritedItems(merged,merged.getConfigurations(),ConfigurationPrinter.INSTANCE,""String_Node_Str"",true);
    }
    if (!mergedDependencies && position > DEPENDENCIES_POSITION && merged.getDependencies().length > 0) {
      mergedDependencies=true;
      writeInheritedItems(merged,merged.getDependencies(),DependencyPrinter.INSTANCE,""String_Node_Str"",true);
    }
  }
}","/** 
 * <p>If publishing in merge mode, guarantee that any merged elements appearing before <code>moduleElement</code> have been written.  This method should be called <i>before</i> we write the start tag of <code>moduleElement</code>. This covers cases where merged elements like ""configurations"" and ""dependencies"" appear in the parent descriptor, but are completely missing in the child descriptor.</p> <p>For example, if ""moduleElement"" is ""dependencies"", guarantees that ""configurations"" has been written.  If <code>moduleElement</code> is <code>null</code>, then all missing merged elements will be flushed.</p>
 * @param moduleElement a descriptor element name, for example ""configurations"" or ""info""
 */
private void flushMergedElementsBefore(String moduleElement){
  if (options.isMerge() && context.size() == 1 && ""String_Node_Str"".equals(context.peek()) && !(mergedConfigurations && mergedDependencies)) {
    int position=moduleElement == null ? MODULE_ELEMENTS.size() : MODULE_ELEMENTS.indexOf(moduleElement);
    ModuleDescriptor merged=options.getMergedDescriptor();
    if (!mergedConfigurations && position > CONFIGURATIONS_POSITION && merged.getConfigurations().length > 0) {
      mergedConfigurations=true;
      writeInheritedItems(merged,merged.getConfigurations(),ConfigurationPrinter.INSTANCE,""String_Node_Str"",true);
    }
    if (!mergedDependencies && position > DEPENDENCIES_POSITION && merged.getDependencies().length > 0) {
      mergedDependencies=true;
      writeInheritedItems(merged,merged.getDependencies(),DependencyPrinter.INSTANCE,""String_Node_Str"",true);
    }
  }
}",0.9819314641744548
82674,"private boolean upToDate(File source,File target,RetrieveOptions options){
  if (!target.exists()) {
    return false;
  }
  String overwriteMode=options.getOverwriteMode();
  if (RetrieveOptions.OVERWRITEMODE_ALWAYS.equals(overwriteMode)) {
    return false;
  }
  if (RetrieveOptions.OVERWRITEMODE_NEVER.equals(overwriteMode)) {
    return true;
  }
  if (RetrieveOptions.OVERWRITEMODE_NEWER.equals(overwriteMode)) {
    return source.lastModified() <= target.lastModified();
  }
  if (RetrieveOptions.OVERWRITEMODE_NEWER.equals(overwriteMode)) {
    return source.lastModified() != target.lastModified();
  }
  return false;
}","private boolean upToDate(File source,File target,RetrieveOptions options){
  if (!target.exists()) {
    return false;
  }
  String overwriteMode=options.getOverwriteMode();
  if (RetrieveOptions.OVERWRITEMODE_ALWAYS.equals(overwriteMode)) {
    return false;
  }
  if (RetrieveOptions.OVERWRITEMODE_NEVER.equals(overwriteMode)) {
    return true;
  }
  if (RetrieveOptions.OVERWRITEMODE_NEWER.equals(overwriteMode)) {
    return source.lastModified() <= target.lastModified();
  }
  if (RetrieveOptions.OVERWRITEMODE_DIFFERENT.equals(overwriteMode)) {
    return source.lastModified() == target.lastModified();
  }
  return false;
}",0.9889064976228208
82675,"/** 
 * [revision] is a valid revision in maven. This method strips the '[' and ']' characters. Cfr. http://docs.codehaus.org/x/IGU
 */
private static String normalizeRevision(String revision){
  if (revision.startsWith(""String_Node_Str"") && revision.endsWith(""String_Node_Str"") && revision.indexOf(',') == -1) {
    return revision.substring(1,revision.length() - 1);
  }
 else {
    return revision;
  }
}","/** 
 * [revision] is a valid revision in maven. This method strips the '[' and ']' characters. Cfr. http://docs.codehaus.org/x/IGU
 */
private static String normalizeRevision(String revision){
  if (revision.startsWith(""String_Node_Str"") && revision.endsWith(""String_Node_Str"") && revision.indexOf(',') == -1) {
    if (IvyPatternHelper.getTokenString(IvyPatternHelper.REVISION_KEY).equals(revision)) {
      return revision;
    }
    return revision.substring(1,revision.length() - 1);
  }
 else {
    return revision;
  }
}",0.8715203426124197
82676,"protected ResolvedModuleRevision findModuleInCache(DependencyDescriptor dd,ResolveData data,boolean anyResolver){
  return getRepositoryCacheManager().findModuleInCache(dd,dd.getDependencyRevisionId(),getCacheOptions(data),anyResolver ? null : getName());
}","protected ResolvedModuleRevision findModuleInCache(DependencyDescriptor dd,ResolveData data,boolean anyResolver){
  ResolvedModuleRevision rmr=getRepositoryCacheManager().findModuleInCache(dd,dd.getDependencyRevisionId(),getCacheOptions(data),anyResolver ? null : getName());
  if (rmr == null) {
    return null;
  }
  if (data.getReport() != null && data.isBlacklisted(data.getReport().getConfiguration(),rmr.getId())) {
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ rmr.getId()+ ""String_Node_Str""+ dd+ ""String_Node_Str"");
    return null;
  }
  return rmr;
}",0.5931198102016607
82677,"protected ResolvedModuleRevision checkLatest(DependencyDescriptor dd,ResolvedModuleRevision newModuleFound,ResolveData data){
  ResolvedModuleRevision previousModuleFound=data.getCurrentResolvedModuleRevision();
  String newModuleDesc=describe(newModuleFound);
  Message.debug(""String_Node_Str"" + newModuleDesc + ""String_Node_Str""+ describe(previousModuleFound));
  if (previousModuleFound == null) {
    Message.debug(""String_Node_Str"" + newModuleDesc);
    getRepositoryCacheManager().saveResolvedRevision(dd.getDependencyRevisionId(),newModuleFound.getId().getRevision());
    return newModuleFound;
  }
 else   if (isAfter(newModuleFound,previousModuleFound,data.getDate())) {
    Message.debug(""String_Node_Str"" + newModuleDesc);
    getRepositoryCacheManager().saveResolvedRevision(dd.getDependencyRevisionId(),newModuleFound.getId().getRevision());
    return newModuleFound;
  }
 else   if (!newModuleFound.getDescriptor().isDefault() && previousModuleFound.getDescriptor().isDefault()) {
    Message.debug(""String_Node_Str"" + newModuleDesc);
    getRepositoryCacheManager().saveResolvedRevision(dd.getDependencyRevisionId(),newModuleFound.getId().getRevision());
    return newModuleFound;
  }
 else {
    Message.debug(""String_Node_Str"" + newModuleDesc);
    return previousModuleFound;
  }
}","protected ResolvedModuleRevision checkLatest(DependencyDescriptor dd,ResolvedModuleRevision newModuleFound,ResolveData data){
  Checks.checkNotNull(dd,""String_Node_Str"");
  Checks.checkNotNull(data,""String_Node_Str"");
  ResolvedModuleRevision previousModuleFound=data.getCurrentResolvedModuleRevision();
  String newModuleDesc=describe(newModuleFound);
  Message.debug(""String_Node_Str"" + newModuleDesc + ""String_Node_Str""+ describe(previousModuleFound));
  if (previousModuleFound == null) {
    Message.debug(""String_Node_Str"" + newModuleDesc);
    saveModuleRevisionIfNeeded(dd,newModuleFound);
    return newModuleFound;
  }
 else   if (isAfter(newModuleFound,previousModuleFound,data.getDate())) {
    Message.debug(""String_Node_Str"" + newModuleDesc);
    saveModuleRevisionIfNeeded(dd,newModuleFound);
    return newModuleFound;
  }
 else   if (!newModuleFound.getDescriptor().isDefault() && previousModuleFound.getDescriptor().isDefault()) {
    Message.debug(""String_Node_Str"" + newModuleDesc);
    saveModuleRevisionIfNeeded(dd,newModuleFound);
    return newModuleFound;
  }
 else {
    Message.debug(""String_Node_Str"" + newModuleDesc);
    return previousModuleFound;
  }
}",0.7208366854384554
82678,"public void testFile() throws Exception {
  PackagerResolver resolver=new PackagerResolver();
  resolver.setSettings(_settings);
  File repoRoot=new File(""String_Node_Str"");
  resolver.addIvyPattern(""String_Node_Str"" + new File(repoRoot,""String_Node_Str"").getAbsoluteFile().toURL().toExternalForm());
  resolver.setPackagerPattern(""String_Node_Str"" + new File(repoRoot,""String_Node_Str"").getAbsoluteFile().toURL().toExternalForm());
  resolver.setBuildRoot(_builddir.getAbsolutePath());
  resolver.setResourceCache(_cachedir.getAbsolutePath());
  resolver.setPreserveBuildDirectories(true);
  resolver.setVerbose(true);
  System.setProperty(""String_Node_Str"",new File(""String_Node_Str"").getAbsoluteFile().toURL().toExternalForm());
  resolver.setName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resolver.getName());
  ModuleRevisionId mrid=ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResolvedModuleRevision rmr=resolver.getDependency(new DefaultDependencyDescriptor(mrid,false),_data);
  assertNotNull(rmr);
  assertEquals(mrid,rmr.getId());
  Date pubdate=new GregorianCalendar(2004,10,1,11,0,0).getTime();
  assertEquals(pubdate,rmr.getPublicationDate());
  Artifact artifact=new DefaultArtifact(mrid,pubdate,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  DownloadReport report=resolver.download(new Artifact[]{artifact},downloadOptions());
  assertNotNull(report);
  assertEquals(1,report.getArtifactsReports().length);
  ArtifactDownloadReport ar=report.getArtifactReport(artifact);
  System.out.println(""String_Node_Str"" + ar.getDownloadDetails());
  assertNotNull(ar);
  assertEquals(artifact,ar.getArtifact());
  assertEquals(DownloadStatus.SUCCESSFUL,ar.getDownloadStatus());
  assertTrue(new File(_cachedir,""String_Node_Str"").exists());
  report=resolver.download(new Artifact[]{artifact},downloadOptions());
  assertNotNull(report);
  assertEquals(1,report.getArtifactsReports().length);
  ar=report.getArtifactReport(artifact);
  assertNotNull(ar);
  assertEquals(artifact,ar.getArtifact());
  assertEquals(DownloadStatus.NO,ar.getDownloadStatus());
  artifact=DefaultArtifact.cloneWithAnotherName(artifact,""String_Node_Str"");
  report=resolver.download(new Artifact[]{artifact},downloadOptions());
  assertNotNull(report);
  assertEquals(1,report.getArtifactsReports().length);
  ar=report.getArtifactReport(artifact);
  assertNotNull(ar);
  assertEquals(artifact,ar.getArtifact());
  assertEquals(DownloadStatus.SUCCESSFUL,ar.getDownloadStatus());
}","public void testFile() throws Exception {
  Locale oldLocale=Locale.getDefault();
  try {
    Locale.setDefault(Locale.UK);
    PackagerResolver resolver=new PackagerResolver();
    resolver.setSettings(_settings);
    File repoRoot=new File(""String_Node_Str"");
    resolver.addIvyPattern(""String_Node_Str"" + new File(repoRoot,""String_Node_Str"").getAbsoluteFile().toURL().toExternalForm());
    resolver.setPackagerPattern(""String_Node_Str"" + new File(repoRoot,""String_Node_Str"").getAbsoluteFile().toURL().toExternalForm());
    resolver.setBuildRoot(_builddir.getAbsolutePath());
    resolver.setResourceCache(_cachedir.getAbsolutePath());
    resolver.setPreserveBuildDirectories(true);
    resolver.setVerbose(true);
    System.setProperty(""String_Node_Str"",new File(""String_Node_Str"").getAbsoluteFile().toURL().toExternalForm());
    resolver.setName(""String_Node_Str"");
    assertEquals(""String_Node_Str"",resolver.getName());
    ModuleRevisionId mrid=ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    ResolvedModuleRevision rmr=resolver.getDependency(new DefaultDependencyDescriptor(mrid,false),_data);
    assertNotNull(rmr);
    assertEquals(mrid,rmr.getId());
    Date pubdate=new GregorianCalendar(2004,10,1,11,0,0).getTime();
    assertEquals(pubdate,rmr.getPublicationDate());
    Artifact artifact=new DefaultArtifact(mrid,pubdate,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    DownloadReport report=resolver.download(new Artifact[]{artifact},downloadOptions());
    assertNotNull(report);
    assertEquals(1,report.getArtifactsReports().length);
    ArtifactDownloadReport ar=report.getArtifactReport(artifact);
    System.out.println(""String_Node_Str"" + ar.getDownloadDetails());
    assertNotNull(ar);
    assertEquals(artifact,ar.getArtifact());
    assertEquals(DownloadStatus.SUCCESSFUL,ar.getDownloadStatus());
    assertTrue(new File(_cachedir,""String_Node_Str"").exists());
    report=resolver.download(new Artifact[]{artifact},downloadOptions());
    assertNotNull(report);
    assertEquals(1,report.getArtifactsReports().length);
    ar=report.getArtifactReport(artifact);
    assertNotNull(ar);
    assertEquals(artifact,ar.getArtifact());
    assertEquals(DownloadStatus.NO,ar.getDownloadStatus());
    artifact=DefaultArtifact.cloneWithAnotherName(artifact,""String_Node_Str"");
    report=resolver.download(new Artifact[]{artifact},downloadOptions());
    assertNotNull(report);
    assertEquals(1,report.getArtifactsReports().length);
    ar=report.getArtifactReport(artifact);
    assertNotNull(ar);
    assertEquals(artifact,ar.getArtifact());
    assertEquals(DownloadStatus.SUCCESSFUL,ar.getDownloadStatus());
  }
  finally {
    Locale.setDefault(oldLocale);
  }
}",0.9100910470409712
82679,"private void infoStarted(Attributes attributes){
  organisation=substitute(settings,attributes.getValue(""String_Node_Str""));
  String module=substitute(settings,attributes.getValue(""String_Node_Str""));
  String rev=revision;
  if (rev == null) {
    rev=substitute(settings,attributes.getValue(""String_Node_Str""));
  }
  String branch=options.getBranch();
  if (branch == null) {
    branch=substitute(settings,attributes.getValue(""String_Node_Str""));
  }
  ModuleRevisionId localMid=ModuleRevisionId.newInstance(organisation,module,branch,rev,ExtendableItemHelper.getExtraAttributes(settings,attributes,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  ModuleRevisionId systemMid=ns == null ? localMid : ns.getToSystemTransformer().transform(localMid);
  write(""String_Node_Str"" + XMLHelper.escape(systemMid.getOrganisation()) + ""String_Node_Str""+ XMLHelper.escape(systemMid.getName())+ ""String_Node_Str"");
  if (systemMid.getBranch() != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getBranch()) + ""String_Node_Str"");
  }
  if (systemMid.getRevision() != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getRevision()) + ""String_Node_Str"");
  }
  if (status != null) {
    write(""String_Node_Str"" + XMLHelper.escape(status) + ""String_Node_Str"");
  }
 else {
    write(""String_Node_Str"" + substitute(settings,attributes.getValue(""String_Node_Str"")) + ""String_Node_Str"");
  }
  if (pubdate != null) {
    write(""String_Node_Str"" + Ivy.DATE_FORMAT.format(pubdate) + ""String_Node_Str"");
  }
 else   if (attributes.getValue(""String_Node_Str"") != null) {
    write(""String_Node_Str"" + substitute(settings,attributes.getValue(""String_Node_Str"")) + ""String_Node_Str"");
  }
  Collection stdAtts=Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  if (attributes.getValue(""String_Node_Str"") != null) {
    write(""String_Node_Str"" + substitute(settings,attributes.getValue(""String_Node_Str"")) + ""String_Node_Str"");
  }
  for (int i=0; i < attributes.getLength(); i++) {
    if (!stdAtts.contains(attributes.getQName(i))) {
      write(""String_Node_Str"" + attributes.getQName(i) + ""String_Node_Str""+ substitute(settings,attributes.getValue(i))+ ""String_Node_Str"");
    }
  }
}","private void infoStarted(Attributes attributes){
  organisation=substitute(settings,attributes.getValue(""String_Node_Str""));
  String module=substitute(settings,attributes.getValue(""String_Node_Str""));
  String rev=revision;
  if (rev == null) {
    rev=substitute(settings,attributes.getValue(""String_Node_Str""));
  }
  String branch=options.getBranch();
  if (branch == null) {
    branch=substitute(settings,attributes.getValue(""String_Node_Str""));
  }
  ModuleRevisionId localMid=ModuleRevisionId.newInstance(organisation,module,branch,rev,ExtendableItemHelper.getExtraAttributes(settings,attributes,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  ModuleRevisionId systemMid=ns == null ? localMid : ns.getToSystemTransformer().transform(localMid);
  write(""String_Node_Str"" + XMLHelper.escape(systemMid.getOrganisation()) + ""String_Node_Str""+ XMLHelper.escape(systemMid.getName())+ ""String_Node_Str"");
  if (branch != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getBranch()) + ""String_Node_Str"");
  }
  if (systemMid.getRevision() != null) {
    write(""String_Node_Str"" + XMLHelper.escape(systemMid.getRevision()) + ""String_Node_Str"");
  }
  if (status != null) {
    write(""String_Node_Str"" + XMLHelper.escape(status) + ""String_Node_Str"");
  }
 else {
    write(""String_Node_Str"" + substitute(settings,attributes.getValue(""String_Node_Str"")) + ""String_Node_Str"");
  }
  if (pubdate != null) {
    write(""String_Node_Str"" + Ivy.DATE_FORMAT.format(pubdate) + ""String_Node_Str"");
  }
 else   if (attributes.getValue(""String_Node_Str"") != null) {
    write(""String_Node_Str"" + substitute(settings,attributes.getValue(""String_Node_Str"")) + ""String_Node_Str"");
  }
  Collection stdAtts=Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  if (attributes.getValue(""String_Node_Str"") != null) {
    write(""String_Node_Str"" + substitute(settings,attributes.getValue(""String_Node_Str"")) + ""String_Node_Str"");
  }
  for (int i=0; i < attributes.getLength(); i++) {
    if (!stdAtts.contains(attributes.getQName(i))) {
      write(""String_Node_Str"" + attributes.getQName(i) + ""String_Node_Str""+ substitute(settings,attributes.getValue(i))+ ""String_Node_Str"");
    }
  }
}",0.9964233115926784
82680,"public void toIvyFile(InputStream is,Resource res,File destFile,ModuleDescriptor md) throws IOException, ParseException {
  try {
    Namespace ns=null;
    if (md instanceof DefaultModuleDescriptor) {
      DefaultModuleDescriptor dmd=(DefaultModuleDescriptor)md;
      ns=dmd.getNamespace();
    }
    XmlModuleDescriptorUpdater.update(is,res,destFile,new UpdateOptions().setSettings(IvyContext.getContext().getSettings()).setStatus(md.getStatus()).setRevision(md.getResolvedModuleRevisionId().getRevision()).setPubdate(md.getResolvedPublicationDate()).setNamespace(ns));
  }
 catch (  SAXException e) {
    ParseException ex=new ParseException(""String_Node_Str"" + res,0);
    ex.initCause(e);
    throw ex;
  }
 finally {
    if (is != null) {
      is.close();
    }
  }
}","public void toIvyFile(InputStream is,Resource res,File destFile,ModuleDescriptor md) throws IOException, ParseException {
  try {
    Namespace ns=null;
    if (md instanceof DefaultModuleDescriptor) {
      DefaultModuleDescriptor dmd=(DefaultModuleDescriptor)md;
      ns=dmd.getNamespace();
    }
    XmlModuleDescriptorUpdater.update(is,res,destFile,new UpdateOptions().setSettings(IvyContext.getContext().getSettings()).setStatus(md.getStatus()).setRevision(md.getResolvedModuleRevisionId().getRevision()).setPubdate(md.getResolvedPublicationDate()).setUpdateBranch(false).setNamespace(ns));
  }
 catch (  SAXException e) {
    ParseException ex=new ParseException(""String_Node_Str"" + res,0);
    ex.initCause(e);
    throw ex;
  }
 finally {
    if (is != null) {
      is.close();
    }
  }
}",0.9853968253968254
82681,"private void startElementInDependency(Attributes attributes){
  ExtendedBuffer buffer=new ExtendedBuffer(getContext());
  buffers.push(buffer);
  confAttributeBuffers.push(buffer);
  buffer.setDefaultPrint(attributes.getValue(""String_Node_Str"") == null || attributes.getValue(""String_Node_Str"").trim().length() == 0);
  write(""String_Node_Str"");
  String org=substitute(settings,attributes.getValue(""String_Node_Str""));
  org=org == null ? organisation : org;
  String module=substitute(settings,attributes.getValue(""String_Node_Str""));
  String branch=substitute(settings,attributes.getValue(""String_Node_Str""));
  String branchConstraint=substitute(settings,attributes.getValue(""String_Node_Str""));
  branchConstraint=branchConstraint == null ? branch : branchConstraint;
  if (branch == null) {
    ModuleId mid=ModuleId.newInstance(org,module);
    if (ns != null) {
      mid=NameSpaceHelper.transform(mid,ns.getToSystemTransformer());
    }
    for (Iterator iter=resolvedRevisions.keySet().iterator(); iter.hasNext(); ) {
      ModuleRevisionId mrid=(ModuleRevisionId)iter.next();
      if (mrid.getModuleId().equals(mid)) {
        branch=mrid.getBranch();
        break;
      }
    }
  }
  String revision=substitute(settings,attributes.getValue(""String_Node_Str""));
  String revisionConstraint=substitute(settings,attributes.getValue(""String_Node_Str""));
  Map extraAttributes=ExtendableItemHelper.getExtraAttributes(settings,attributes,XmlModuleDescriptorParser.DEPENDENCY_REGULAR_ATTRIBUTES);
  ModuleRevisionId localMrid=ModuleRevisionId.newInstance(org,module,branch,revision,extraAttributes);
  ModuleRevisionId systemMrid=ns == null ? localMrid : ns.getToSystemTransformer().transform(localMrid);
  for (int i=0; i < attributes.getLength(); i++) {
    String attName=attributes.getQName(i);
    if (""String_Node_Str"".equals(attName)) {
      String rev=(String)resolvedRevisions.get(systemMrid);
      if (rev != null) {
        write(""String_Node_Str"" + rev + ""String_Node_Str"");
        if (attributes.getIndex(""String_Node_Str"") == -1 && branchConstraint != null) {
          write(""String_Node_Str"" + branchConstraint + ""String_Node_Str"");
        }
        if (attributes.getIndex(""String_Node_Str"") == -1 && !rev.equals(systemMrid.getRevision())) {
          write(""String_Node_Str"" + systemMrid.getRevision() + ""String_Node_Str"");
        }
      }
 else {
        write(""String_Node_Str"" + systemMrid.getRevision() + ""String_Node_Str"");
      }
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + revisionConstraint + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + systemMrid.getOrganisation() + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + systemMrid.getName() + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + systemMrid.getBranch() + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + branchConstraint + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      String oldMapping=substitute(settings,attributes.getValue(""String_Node_Str""));
      if (oldMapping.length() > 0) {
        String newMapping=removeConfigurationsFromMapping(oldMapping,confs);
        if (newMapping.length() > 0) {
          write(""String_Node_Str"" + newMapping + ""String_Node_Str"");
          ((ExtendedBuffer)buffers.peek()).setPrint(true);
        }
      }
    }
 else {
      write(""String_Node_Str"" + attName + ""String_Node_Str""+ substitute(settings,attributes.getValue(attName))+ ""String_Node_Str"");
    }
  }
  if (systemMrid.getBranch() != null && attributes.getIndex(""String_Node_Str"") == -1) {
    write(""String_Node_Str"" + systemMrid.getBranch() + ""String_Node_Str"");
  }
}","private void startElementInDependency(Attributes attributes){
  ExtendedBuffer buffer=new ExtendedBuffer(getContext());
  buffers.push(buffer);
  confAttributeBuffers.push(buffer);
  buffer.setDefaultPrint(attributes.getValue(""String_Node_Str"") == null || attributes.getValue(""String_Node_Str"").trim().length() == 0);
  write(""String_Node_Str"");
  String org=substitute(settings,attributes.getValue(""String_Node_Str""));
  org=org == null ? organisation : org;
  String module=substitute(settings,attributes.getValue(""String_Node_Str""));
  String branch=substitute(settings,attributes.getValue(""String_Node_Str""));
  String branchConstraint=substitute(settings,attributes.getValue(""String_Node_Str""));
  branchConstraint=branchConstraint == null ? branch : branchConstraint;
  if (branch == null) {
    ModuleId mid=ModuleId.newInstance(org,module);
    if (ns != null) {
      mid=NameSpaceHelper.transform(mid,ns.getToSystemTransformer());
    }
    for (Iterator iter=resolvedRevisions.keySet().iterator(); iter.hasNext(); ) {
      ModuleRevisionId mrid=(ModuleRevisionId)iter.next();
      if (mrid.getModuleId().equals(mid)) {
        branch=mrid.getBranch();
        break;
      }
    }
  }
  String revision=substitute(settings,attributes.getValue(""String_Node_Str""));
  String revisionConstraint=substitute(settings,attributes.getValue(""String_Node_Str""));
  Map extraAttributes=ExtendableItemHelper.getExtraAttributes(settings,attributes,XmlModuleDescriptorParser.DEPENDENCY_REGULAR_ATTRIBUTES);
  ModuleRevisionId localMrid=ModuleRevisionId.newInstance(org,module,branch,revision,extraAttributes);
  ModuleRevisionId systemMrid=ns == null ? localMrid : ns.getToSystemTransformer().transform(localMrid);
  for (int i=0; i < attributes.getLength(); i++) {
    String attName=attributes.getQName(i);
    if (""String_Node_Str"".equals(attName)) {
      String rev=(String)resolvedRevisions.get(systemMrid);
      if (rev != null) {
        write(""String_Node_Str"" + rev + ""String_Node_Str"");
        if (attributes.getIndex(""String_Node_Str"") == -1 && branchConstraint != null) {
          write(""String_Node_Str"" + branchConstraint + ""String_Node_Str"");
        }
        if (attributes.getIndex(""String_Node_Str"") == -1 && !rev.equals(systemMrid.getRevision())) {
          write(""String_Node_Str"" + systemMrid.getRevision() + ""String_Node_Str"");
        }
      }
 else {
        write(""String_Node_Str"" + systemMrid.getRevision() + ""String_Node_Str"");
      }
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + revisionConstraint + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + systemMrid.getOrganisation() + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + systemMrid.getName() + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + systemMrid.getBranch() + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      write(""String_Node_Str"" + branchConstraint + ""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(attName)) {
      String oldMapping=substitute(settings,attributes.getValue(""String_Node_Str""));
      if (oldMapping.length() > 0) {
        String newMapping=removeConfigurationsFromMapping(oldMapping,confs);
        if (newMapping.length() > 0) {
          write(""String_Node_Str"" + newMapping + ""String_Node_Str"");
          ((ExtendedBuffer)buffers.peek()).setPrint(true);
        }
      }
    }
 else {
      write(""String_Node_Str"" + attName + ""String_Node_Str""+ substitute(settings,attributes.getValue(attName))+ ""String_Node_Str"");
    }
  }
  if (options.isUpdateBranch() && systemMrid.getBranch() != null && attributes.getIndex(""String_Node_Str"") == -1) {
    write(""String_Node_Str"" + systemMrid.getBranch() + ""String_Node_Str"");
  }
}",0.990799897776642
82682,"public UpdaterHandler(URL relativePathCtx,PrintWriter out,final UpdateOptions options){
  this.settings=options.getSettings();
  this.out=out;
  this.resolvedRevisions=options.getResolvedRevisions();
  this.status=options.getStatus();
  this.revision=options.getRevision();
  this.pubdate=options.getPubdate();
  this.ns=options.getNamespace();
  this.replaceInclude=options.isReplaceInclude();
  this.relativePathCtx=relativePathCtx;
  if (options.getConfsToExclude() != null) {
    this.confs=Arrays.asList(options.getConfsToExclude());
  }
 else {
    this.confs=Collections.EMPTY_LIST;
  }
}","public UpdaterHandler(URL relativePathCtx,PrintWriter out,final UpdateOptions options){
  this.options=options;
  this.settings=options.getSettings();
  this.out=out;
  this.resolvedRevisions=options.getResolvedRevisions();
  this.status=options.getStatus();
  this.revision=options.getRevision();
  this.pubdate=options.getPubdate();
  this.ns=options.getNamespace();
  this.replaceInclude=options.isReplaceInclude();
  this.relativePathCtx=relativePathCtx;
  if (options.getConfsToExclude() != null) {
    this.confs=Arrays.asList(options.getConfsToExclude());
  }
 else {
    this.confs=Collections.EMPTY_LIST;
  }
}",0.9802306425041186
82683,"public void testReplaceBranch() throws Exception {
  IvyAntSettings settings=new IvyAntSettings();
  settings.setProject(project);
  settings.execute();
  settings.getConfiguredIvyInstance().getSettings().setDefaultBranch(""String_Node_Str"");
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
}","public void testReplaceBranch() throws Exception {
  IvyAntSettings settings=new IvyAntSettings();
  settings.setProject(project);
  settings.execute();
  settings.getConfiguredIvyInstance().getSettings().setDefaultBranch(""String_Node_Str"");
  project.setProperty(""String_Node_Str"",""String_Node_Str"");
  IvyResolve res=new IvyResolve();
  res.setProject(project);
  res.execute();
  deliver.setPubrevision(""String_Node_Str"");
  deliver.setDeliverpattern(""String_Node_Str"");
  deliver.execute();
  File deliveredIvyFile=new File(""String_Node_Str"");
  assertTrue(deliveredIvyFile.exists());
  ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),deliveredIvyFile.toURL(),true);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),md.getModuleRevisionId());
  DependencyDescriptor[] dds=md.getDependencies();
  assertEquals(1,dds.length);
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDependencyRevisionId());
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),dds[0].getDynamicConstraintDependencyRevisionId());
}",0.9344902386117137
82684,"public void addPlugin(PomDependencyMgt plugin){
  String pluginValue=plugin.getGroupId() + EXTRA_INFO_DELIMITER + plugin.getArtifaceId()+ EXTRA_INFO_DELIMITER+ plugin.getVersion();
  String pluginExtraInfo=(String)ivyModuleDescriptor.getExtraInfo().get(""String_Node_Str"");
  if (pluginExtraInfo == null) {
    pluginExtraInfo=pluginValue;
  }
 else {
    pluginExtraInfo=pluginExtraInfo + ""String_Node_Str"" + pluginValue;
  }
  ivyModuleDescriptor.getExtraInfo().put(""String_Node_Str"",pluginExtraInfo);
}","public void addPlugin(PomDependencyMgt plugin){
  String pluginValue=plugin.getGroupId() + EXTRA_INFO_DELIMITER + plugin.getArtifactId()+ EXTRA_INFO_DELIMITER+ plugin.getVersion();
  String pluginExtraInfo=(String)ivyModuleDescriptor.getExtraInfo().get(""String_Node_Str"");
  if (pluginExtraInfo == null) {
    pluginExtraInfo=pluginValue;
  }
 else {
    pluginExtraInfo=pluginExtraInfo + ""String_Node_Str"" + pluginValue;
  }
  ivyModuleDescriptor.getExtraInfo().put(""String_Node_Str"",pluginExtraInfo);
}",0.998015873015873
82685,"private String getDefaultVersion(PomDependencyData dep){
  String key=getDependencyMgtExtraInfoKey(dep.getGroupId(),dep.getArtifaceId());
  return (String)ivyModuleDescriptor.getExtraInfo().get(key);
}","private String getDefaultVersion(PomDependencyData dep){
  String key=getDependencyMgtExtraInfoKey(dep.getGroupId(),dep.getArtifactId());
  return (String)ivyModuleDescriptor.getExtraInfo().get(key);
}",0.9950248756218906
82686,"public void addDependencyMgt(PomDependencyMgt dep){
  String key=getDependencyMgtExtraInfoKey(dep.getGroupId(),dep.getArtifaceId());
  ivyModuleDescriptor.addExtraInfo(key,dep.getVersion());
  ivyModuleDescriptor.addDependencyDescriptorMediator(ModuleId.newInstance(dep.getGroupId(),dep.getArtifaceId()),ExactPatternMatcher.INSTANCE,new OverrideDependencyDescriptorMediator(null,dep.getVersion()));
}","public void addDependencyMgt(PomDependencyMgt dep){
  String key=getDependencyMgtExtraInfoKey(dep.getGroupId(),dep.getArtifactId());
  ivyModuleDescriptor.addExtraInfo(key,dep.getVersion());
  ivyModuleDescriptor.addDependencyDescriptorMediator(ModuleId.newInstance(dep.getGroupId(),dep.getArtifactId()),ExactPatternMatcher.INSTANCE,new OverrideDependencyDescriptorMediator(null,dep.getVersion()));
}",0.995
82687,"public void addArtifact(String artifactId,String packaging){
  String ext=packaging;
  if (""String_Node_Str"".equals(packaging)) {
    for (Iterator it=getPlugins(ivyModuleDescriptor).iterator(); it.hasNext(); ) {
      PomDependencyMgt plugin=(PomDependencyMgt)it.next();
      if (""String_Node_Str"".equals(plugin.getGroupId()) && ""String_Node_Str"".equals(plugin.getArtifaceId())) {
        ext=""String_Node_Str"";
        break;
      }
    }
  }
  ivyModuleDescriptor.addArtifact(""String_Node_Str"",new DefaultArtifact(mrid,new Date(),artifactId,ext,ext));
}","public void addArtifact(String artifactId,String packaging){
  String ext=packaging;
  if (""String_Node_Str"".equals(packaging)) {
    for (Iterator it=getPlugins(ivyModuleDescriptor).iterator(); it.hasNext(); ) {
      PomDependencyMgt plugin=(PomDependencyMgt)it.next();
      if (""String_Node_Str"".equals(plugin.getGroupId()) && ""String_Node_Str"".equals(plugin.getArtifactId())) {
        ext=""String_Node_Str"";
        break;
      }
    }
  }
  ivyModuleDescriptor.addArtifact(""String_Node_Str"",new DefaultArtifact(mrid,new Date(),artifactId,ext,ext));
}",0.9982078853046596
82688,"public String getArtifactId(){
  String val=getFirstChildText(projectElement,ARTIFACT_ID);
  if (val == null) {
    val=getFirstChildText(parentElement,ARTIFACT_ID);
  }
  return replaceProps(val);
}","public String getArtifactId(){
  String val=getFirstChildText(pluginElement,ARTIFACT_ID);
  return replaceProps(val);
}",0.7169811320754716
82689,"private void resolveAndCheckRevision(ModuleDescriptor systemMd,ModuleRevisionId dependencyConstraint,ResolvedResource ivyRef,boolean isDynamic){
  ModuleRevisionId resolvedMrid=systemMd.getResolvedModuleRevisionId();
  if (resolvedMrid.getRevision() == null || resolvedMrid.getRevision().length() == 0) {
    if (!isDynamic) {
      resolvedMrid=ModuleRevisionId.newInstance(resolvedMrid,dependencyConstraint.getRevision());
    }
 else     if (ivyRef.getRevision() == null || ivyRef.getRevision().length() == 0) {
      resolvedMrid=ModuleRevisionId.newInstance(resolvedMrid,""String_Node_Str"" + getName());
    }
 else {
      resolvedMrid=ModuleRevisionId.newInstance(resolvedMrid,ivyRef.getRevision());
    }
  }
  if (isDynamic) {
    Message.verbose(""String_Node_Str"" + toSystem(resolvedMrid).getRevision() + ""String_Node_Str""+ dependencyConstraint.getModuleId());
  }
  systemMd.setResolvedModuleRevisionId(resolvedMrid);
  checkModuleDescriptorRevision(systemMd,dependencyConstraint);
}","private void resolveAndCheckRevision(ModuleDescriptor systemMd,ModuleRevisionId dependencyConstraint,ResolvedResource ivyRef,boolean isDynamic){
  ModuleRevisionId resolvedMrid=systemMd.getResolvedModuleRevisionId();
  if (resolvedMrid.getRevision() == null || resolvedMrid.getRevision().length() == 0 || resolvedMrid.getRevision().startsWith(""String_Node_Str"")) {
    if (!isDynamic) {
      resolvedMrid=ModuleRevisionId.newInstance(resolvedMrid,dependencyConstraint.getRevision());
    }
 else     if (ivyRef.getRevision() == null || ivyRef.getRevision().length() == 0) {
      resolvedMrid=ModuleRevisionId.newInstance(resolvedMrid,""String_Node_Str"" + getName());
    }
 else {
      resolvedMrid=ModuleRevisionId.newInstance(resolvedMrid,ivyRef.getRevision());
    }
  }
  if (isDynamic) {
    Message.verbose(""String_Node_Str"" + toSystem(resolvedMrid).getRevision() + ""String_Node_Str""+ dependencyConstraint.getModuleId());
  }
  systemMd.setResolvedModuleRevisionId(resolvedMrid);
  checkModuleDescriptorRevision(systemMd,dependencyConstraint);
}",0.9706744868035192
82690,"private void checkModuleDescriptorRevision(ModuleDescriptor systemMd,ModuleRevisionId systemMrid){
  if (!getSettings().getVersionMatcher().accept(systemMrid,systemMd)) {
    throw new UnresolvedDependencyException(""String_Node_Str"" + getName() + ""String_Node_Str""+ systemMd.getModuleRevisionId().getRevision()+ ""String_Node_Str""+ systemMrid.getRevision());
  }
}","private void checkModuleDescriptorRevision(ModuleDescriptor systemMd,ModuleRevisionId systemMrid){
  if (!getSettings().getVersionMatcher().accept(systemMrid,systemMd)) {
    throw new UnresolvedDependencyException(""String_Node_Str"" + getName() + ""String_Node_Str""+ systemMd.getResolvedModuleRevisionId().getRevision()+ ""String_Node_Str""+ systemMrid.getRevision());
  }
}",0.989100817438692
82691,"public boolean loadData(String conf,boolean shouldBePublic){
  boolean loaded=node.loadData(rootModuleConf,getParentNode(),parentConf,conf,shouldBePublic);
  if (loaded) {
    useRealNode();
    if (data.getSettings().getVersionMatcher().isDynamic(getId())) {
      data.register(node.getResolvedId(),this);
    }
  }
  return loaded;
}","public boolean loadData(String conf,boolean shouldBePublic){
  boolean loaded=node.loadData(rootModuleConf,getParentNode(),parentConf,conf,shouldBePublic);
  if (loaded) {
    useRealNode();
    if (!getId().equals(node.getResolvedId())) {
      data.register(node.getResolvedId(),this);
    }
  }
  return loaded;
}",0.7147239263803681
82692,"public void taskFinished(BuildEvent event){
  if (stackDepth == 0) {
    ivy.getLoggerEngine().popLogger();
    event.getProject().removeBuildListener(this);
  }
  stackDepth--;
}","public void taskFinished(BuildEvent event){
  stackDepth--;
  if (stackDepth == 0) {
    ivy.getLoggerEngine().popLogger();
    event.getProject().removeBuildListener(this);
  }
}",0.9106145251396648
82693,"/** 
 * Creates and register an   {@link AntMessageLogger} for the given {@link Task}, with the given  {@link Ivy} instance.<p> The created instance will automatically be unregistered from the Ivy instance when the task finishes. </p>
 * @param task the task the logger should use for logging
 * @param ivy the ivy instance on which the logger should be registered
 */
public static void register(Task task,final Ivy ivy){
  AntMessageLogger logger=new AntMessageLogger(task);
  ivy.getLoggerEngine().pushLogger(logger);
  task.getProject().addBuildListener(new BuildListener(){
    private int stackDepth=0;
    public void buildFinished(    BuildEvent event){
    }
    public void buildStarted(    BuildEvent event){
    }
    public void targetStarted(    BuildEvent event){
    }
    public void targetFinished(    BuildEvent event){
    }
    public void taskStarted(    BuildEvent event){
      stackDepth++;
    }
    public void taskFinished(    BuildEvent event){
      if (stackDepth == 0) {
        ivy.getLoggerEngine().popLogger();
        event.getProject().removeBuildListener(this);
      }
      stackDepth--;
    }
    public void messageLogged(    BuildEvent event){
    }
  }
);
}","/** 
 * Creates and register an   {@link AntMessageLogger} for the given {@link Task}, with the given  {@link Ivy} instance.<p> The created instance will automatically be unregistered from the Ivy instance when the task finishes. </p>
 * @param task the task the logger should use for logging
 * @param ivy the ivy instance on which the logger should be registered
 */
public static void register(Task task,final Ivy ivy){
  AntMessageLogger logger=new AntMessageLogger(task);
  ivy.getLoggerEngine().pushLogger(logger);
  task.getProject().addBuildListener(new BuildListener(){
    private int stackDepth=0;
    public void buildFinished(    BuildEvent event){
    }
    public void buildStarted(    BuildEvent event){
    }
    public void targetStarted(    BuildEvent event){
    }
    public void targetFinished(    BuildEvent event){
    }
    public void taskStarted(    BuildEvent event){
      stackDepth++;
    }
    public void taskFinished(    BuildEvent event){
      stackDepth--;
      if (stackDepth == 0) {
        ivy.getLoggerEngine().popLogger();
        event.getProject().removeBuildListener(this);
      }
    }
    public void messageLogged(    BuildEvent event){
    }
  }
);
}",0.8884263114071607
82694,"public String getProblemMessage(){
  Exception e=problem;
  if (e == null) {
    return ""String_Node_Str"";
  }
  String errMsg=e instanceof RuntimeException ? e.getMessage() : e.toString();
  if (errMsg == null || errMsg.length() == 0 || ""String_Node_Str"".equals(errMsg)) {
    errMsg=e.getClass().getName() + ""String_Node_Str"" + e.getStackTrace()[0].toString();
  }
  return errMsg;
}","public String getProblemMessage(){
  return StringUtils.getErrorMessage(problem);
}",0.2948717948717949
82695,"public ResolvedModuleRevision getDependency(DependencyDescriptor dd,ResolveData data) throws ParseException {
  data=new ResolveData(data,doValidate(data));
  ResolvedModuleRevision ret=null;
  List errors=new ArrayList();
  ResolvedModuleRevision mr=null;
  ModuleRevisionId mrid=dd.getDependencyRevisionId();
  Message.verbose(getName() + ""String_Node_Str"" + dd);
  mr=findModuleInCache(dd,getCacheOptions(data),true);
  if (mr != null) {
    Message.verbose(getName() + ""String_Node_Str"" + mr.getId());
    return resolvedRevision(mr);
  }
  boolean isDynamic=getSettings().getVersionMatcher().isDynamic(mrid);
  for (Iterator iter=chain.iterator(); iter.hasNext(); ) {
    DependencyResolver resolver=(DependencyResolver)iter.next();
    LatestStrategy oldLatest=setLatestIfRequired(resolver,getLatestStrategy());
    try {
      mr=resolver.getDependency(dd,data);
    }
 catch (    Exception ex) {
      Message.verbose(""String_Node_Str"" + dd + ""String_Node_Str""+ resolver+ ""String_Node_Str""+ ex);
      errors.add(ex);
    }
 finally {
      if (oldLatest != null) {
        setLatest(resolver,oldLatest);
      }
    }
    checkInterrupted();
    if (mr != null) {
      boolean shouldReturn=returnFirst;
      shouldReturn|=!isDynamic && ret != null && !ret.getDescriptor().isDefault();
      if (!shouldReturn) {
        String mrDesc=mr.getId() + (mr.getDescriptor().isDefault() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ mr.getResolver().getName();
        Message.debug(""String_Node_Str"" + mrDesc + ""String_Node_Str""+ ret);
        if (ret == null) {
          Message.debug(""String_Node_Str"" + mrDesc);
          ret=mr;
        }
 else         if (isAfter(mr,ret,data.getDate())) {
          Message.debug(""String_Node_Str"" + mrDesc);
          ret=mr;
        }
 else         if (!mr.getDescriptor().isDefault() && ret.getDescriptor().isDefault()) {
          Message.debug(""String_Node_Str"" + mrDesc);
          ret=mr;
        }
 else {
          Message.debug(""String_Node_Str"" + mrDesc);
        }
        if (!isDynamic && !ret.getDescriptor().isDefault()) {
          Message.debug(""String_Node_Str"" + mrDesc);
          return resolvedRevision(mr);
        }
      }
 else {
        return resolvedRevision(mr);
      }
    }
  }
  if (ret == null && !errors.isEmpty()) {
    if (errors.size() == 1) {
      Exception ex=(Exception)errors.get(0);
      if (ex instanceof RuntimeException) {
        throw (RuntimeException)ex;
      }
 else       if (ex instanceof ParseException) {
        throw (ParseException)ex;
      }
 else {
        throw new RuntimeException(ex.toString(),ex);
      }
    }
 else {
      StringBuffer err=new StringBuffer();
      for (Iterator iter=errors.iterator(); iter.hasNext(); ) {
        Exception ex=(Exception)iter.next();
        err.append(ex).append(""String_Node_Str"");
      }
      err.setLength(err.length() - 1);
      throw new RuntimeException(""String_Node_Str"" + dd + ""String_Node_Str""+ err);
    }
  }
  return resolvedRevision(ret);
}","public ResolvedModuleRevision getDependency(DependencyDescriptor dd,ResolveData data) throws ParseException {
  data=new ResolveData(data,doValidate(data));
  ResolvedModuleRevision ret=null;
  List errors=new ArrayList();
  ResolvedModuleRevision mr=null;
  ModuleRevisionId mrid=dd.getDependencyRevisionId();
  Message.verbose(getName() + ""String_Node_Str"" + dd);
  mr=findModuleInCache(dd,getCacheOptions(data),true);
  if (mr != null) {
    Message.verbose(getName() + ""String_Node_Str"" + mr.getId());
    return resolvedRevision(mr);
  }
  boolean isDynamic=getSettings().getVersionMatcher().isDynamic(mrid);
  for (Iterator iter=chain.iterator(); iter.hasNext(); ) {
    DependencyResolver resolver=(DependencyResolver)iter.next();
    LatestStrategy oldLatest=setLatestIfRequired(resolver,getLatestStrategy());
    try {
      mr=resolver.getDependency(dd,data);
    }
 catch (    Exception ex) {
      Message.verbose(""String_Node_Str"" + dd + ""String_Node_Str""+ resolver+ ""String_Node_Str""+ StringUtils.getStackTrace(ex));
      errors.add(ex);
    }
 finally {
      if (oldLatest != null) {
        setLatest(resolver,oldLatest);
      }
    }
    checkInterrupted();
    if (mr != null) {
      boolean shouldReturn=returnFirst;
      shouldReturn|=!isDynamic && ret != null && !ret.getDescriptor().isDefault();
      if (!shouldReturn) {
        String mrDesc=mr.getId() + (mr.getDescriptor().isDefault() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ mr.getResolver().getName();
        Message.debug(""String_Node_Str"" + mrDesc + ""String_Node_Str""+ ret);
        if (ret == null) {
          Message.debug(""String_Node_Str"" + mrDesc);
          ret=mr;
        }
 else         if (isAfter(mr,ret,data.getDate())) {
          Message.debug(""String_Node_Str"" + mrDesc);
          ret=mr;
        }
 else         if (!mr.getDescriptor().isDefault() && ret.getDescriptor().isDefault()) {
          Message.debug(""String_Node_Str"" + mrDesc);
          ret=mr;
        }
 else {
          Message.debug(""String_Node_Str"" + mrDesc);
        }
        if (!isDynamic && !ret.getDescriptor().isDefault()) {
          Message.debug(""String_Node_Str"" + mrDesc);
          return resolvedRevision(mr);
        }
      }
 else {
        return resolvedRevision(mr);
      }
    }
  }
  if (ret == null && !errors.isEmpty()) {
    if (errors.size() == 1) {
      Exception ex=(Exception)errors.get(0);
      if (ex instanceof RuntimeException) {
        throw (RuntimeException)ex;
      }
 else       if (ex instanceof ParseException) {
        throw (ParseException)ex;
      }
 else {
        throw new RuntimeException(ex.toString(),ex);
      }
    }
 else {
      StringBuffer err=new StringBuffer();
      for (Iterator iter=errors.iterator(); iter.hasNext(); ) {
        Exception ex=(Exception)iter.next();
        err.append(""String_Node_Str"").append(StringUtils.getErrorMessage(ex)).append(""String_Node_Str"");
      }
      err.setLength(err.length() - 1);
      throw new RuntimeException(""String_Node_Str"" + dd + ""String_Node_Str""+ err);
    }
  }
  return resolvedRevision(ret);
}",0.9866318878382784
82696,"/** 
 * Fills a repository with a set of module, using empty files for published artifacts.
 * @param resolver the resolver to use to publish the modules
 * @param mds the descriptors of the modules to put in the repository
 * @throws IOException if an IO problem occurs while filling the repository
 */
public static void fillRepository(DependencyResolver resolver,Collection mds) throws IOException {
  File tmp=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  try {
    for (Iterator iter=mds.iterator(); iter.hasNext(); ) {
      boolean overwrite=false;
      ModuleDescriptor md=(ModuleDescriptor)iter.next();
      resolver.beginPublishTransaction(md.getModuleRevisionId(),overwrite);
      boolean published=false;
      try {
        XmlModuleDescriptorWriter.write(md,tmp);
        resolver.publish(md.getMetadataArtifact(),tmp,overwrite);
        tmp.delete();
        tmp.createNewFile();
        Artifact[] artifacts=md.getAllArtifacts();
        for (int i=0; i < artifacts.length; i++) {
          resolver.publish(artifacts[i],tmp,overwrite);
        }
        resolver.commitPublishTransaction();
      }
  finally {
        if (!published) {
          resolver.abortPublishTransaction();
        }
      }
    }
  }
  finally {
    tmp.delete();
  }
}","/** 
 * Fills a repository with a set of module, using empty files for published artifacts.
 * @param resolver the resolver to use to publish the modules
 * @param mds the descriptors of the modules to put in the repository
 * @throws IOException if an IO problem occurs while filling the repository
 */
public static void fillRepository(DependencyResolver resolver,Collection mds) throws IOException {
  File tmp=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  try {
    for (Iterator iter=mds.iterator(); iter.hasNext(); ) {
      boolean overwrite=false;
      ModuleDescriptor md=(ModuleDescriptor)iter.next();
      resolver.beginPublishTransaction(md.getModuleRevisionId(),overwrite);
      boolean published=false;
      try {
        XmlModuleDescriptorWriter.write(md,tmp);
        resolver.publish(md.getMetadataArtifact(),tmp,overwrite);
        tmp.delete();
        tmp.createNewFile();
        Artifact[] artifacts=md.getAllArtifacts();
        for (int i=0; i < artifacts.length; i++) {
          resolver.publish(artifacts[i],tmp,overwrite);
        }
        resolver.commitPublishTransaction();
        published=true;
      }
  finally {
        if (!published) {
          resolver.abortPublishTransaction();
        }
      }
    }
  }
  finally {
    tmp.delete();
  }
}",0.9907120743034056
82697,"public void doExecute() throws BuildException {
  Ivy ivy=getIvyInstance();
  IvySettings settings=ivy.getSettings();
  if (cache == null) {
    cache=settings.getDefaultCache();
  }
  if (xsl && xslFile == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (module == null && PatternMatcher.EXACT.equals(matcher)) {
    throw new BuildException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else   if (module == null && !PatternMatcher.EXACT.equals(matcher)) {
    module=PatternMatcher.ANY_EXPRESSION;
  }
  ModuleRevisionId mrid=ModuleRevisionId.newInstance(organisation,module,revision);
  try {
    ModuleId[] mids=ivy.listModules(new ModuleId(organisation,module),settings.getMatcher(matcher));
    ModuleRevisionId[] mrids=new ModuleRevisionId[mids.length];
    for (int i=0; i < mrids.length; i++) {
      if (branch != null) {
        mrids[i]=new ModuleRevisionId(mids[i],branch,revision);
      }
 else {
        mrids[i]=new ModuleRevisionId(mids[i],revision);
      }
    }
    DefaultModuleDescriptor md=DefaultModuleDescriptor.newCallerInstance(mrids,true,false);
    String resolveId=ResolveOptions.getDefaultResolveId(md);
    ResolveReport report=ivy.resolve(md,new ResolveOptions().setResolveId(resolveId).setCache(ivy.getCacheManager(cache)).setValidate(doValidate(settings)));
    ResolutionCacheManager cacheMgr=getIvyInstance().getCacheManager(cache);
    new XmlReportOutputter().output(report,cache);
    if (graph) {
      gengraph(cacheMgr,md.getModuleRevisionId().getOrganisation(),md.getModuleRevisionId().getName());
    }
    if (dot) {
      gendot(cacheMgr,md.getModuleRevisionId().getOrganisation(),md.getModuleRevisionId().getName());
    }
    if (xml) {
      FileUtil.copy(cacheMgr.getConfigurationResolveReportInCache(resolveId,""String_Node_Str""),new File(todir,outputname + ""String_Node_Str""),null);
    }
    if (xsl) {
      genreport(cacheMgr,md.getModuleRevisionId().getOrganisation(),md.getModuleRevisionId().getName());
    }
  }
 catch (  Exception e) {
    throw new BuildException(""String_Node_Str"" + mrid + ""String_Node_Str""+ e,e);
  }
}","public void doExecute() throws BuildException {
  Ivy ivy=getIvyInstance();
  IvySettings settings=ivy.getSettings();
  if (cache == null) {
    cache=settings.getDefaultCache();
  }
  if (xsl && xslFile == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (module == null && PatternMatcher.EXACT.equals(matcher)) {
    throw new BuildException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else   if (module == null && !PatternMatcher.EXACT.equals(matcher)) {
    module=PatternMatcher.ANY_EXPRESSION;
  }
  ModuleRevisionId mrid=ModuleRevisionId.newInstance(organisation,module,revision);
  try {
    ModuleId[] mids=ivy.listModules(new ModuleId(organisation,module),settings.getMatcher(matcher));
    ModuleRevisionId[] mrids=new ModuleRevisionId[mids.length];
    for (int i=0; i < mrids.length; i++) {
      if (branch != null) {
        mrids[i]=new ModuleRevisionId(mids[i],branch,revision);
      }
 else {
        mrids[i]=new ModuleRevisionId(mids[i],revision);
      }
    }
    DefaultModuleDescriptor md=DefaultModuleDescriptor.newCallerInstance(mrids,true,false);
    String resolveId=ResolveOptions.getDefaultResolveId(md);
    ResolveReport report=ivy.resolve(md,new ResolveOptions().setResolveId(resolveId).setCache(ivy.getCacheManager(cache)).setValidate(doValidate(settings)));
    ResolutionCacheManager cacheMgr=getIvyInstance().getCacheManager(cache);
    new XmlReportOutputter().output(report,cacheMgr);
    if (graph) {
      gengraph(cacheMgr,md.getModuleRevisionId().getOrganisation(),md.getModuleRevisionId().getName());
    }
    if (dot) {
      gendot(cacheMgr,md.getModuleRevisionId().getOrganisation(),md.getModuleRevisionId().getName());
    }
    if (xml) {
      FileUtil.copy(cacheMgr.getConfigurationResolveReportInCache(resolveId,""String_Node_Str""),new File(todir,outputname + ""String_Node_Str""),null);
    }
    if (xsl) {
      genreport(cacheMgr,md.getModuleRevisionId().getOrganisation(),md.getModuleRevisionId().getName());
    }
  }
 catch (  Exception e) {
    throw new BuildException(""String_Node_Str"" + mrid + ""String_Node_Str""+ e,e);
  }
}",0.9992932862190812
82698,"public ResolveReport install(ModuleRevisionId mrid,String from,String to,boolean transitive,boolean validate,boolean overwrite,Filter artifactFilter,File cache,String matcherName) throws IOException {
  if (cache == null) {
    cache=settings.getDefaultCache();
  }
  if (artifactFilter == null) {
    artifactFilter=FilterHelper.NO_FILTER;
  }
  DependencyResolver fromResolver=settings.getResolver(from);
  DependencyResolver toResolver=settings.getResolver(to);
  if (fromResolver == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + from + ""String_Node_Str""+ settings.getResolverNames());
  }
  if (toResolver == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + to + ""String_Node_Str""+ settings.getResolverNames());
  }
  PatternMatcher matcher=settings.getMatcher(matcherName);
  if (matcher == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + matcherName + ""String_Node_Str""+ settings.getMatcherNames());
  }
  Message.info(""String_Node_Str"" + mrid + ""String_Node_Str"");
  DependencyResolver oldDicator=resolveEngine.getDictatorResolver();
  boolean log=settings.logNotConvertedExclusionRule();
  try {
    settings.setLogNotConvertedExclusionRule(true);
    resolveEngine.setDictatorResolver(fromResolver);
    DefaultModuleDescriptor md=new DefaultModuleDescriptor(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),settings.getStatusManager().getDefaultStatus(),new Date());
    String resolveId=ResolveOptions.getDefaultResolveId(md);
    md.addConfiguration(new Configuration(""String_Node_Str""));
    md.addConflictManager(new ModuleId(ExactPatternMatcher.ANY_EXPRESSION,ExactPatternMatcher.ANY_EXPRESSION),ExactPatternMatcher.INSTANCE,new NoConflictManager());
    if (MatcherHelper.isExact(matcher,mrid)) {
      DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(md,mrid,false,false,transitive);
      dd.addDependencyConfiguration(""String_Node_Str"",""String_Node_Str"");
      md.addDependency(dd);
    }
 else {
      Collection mrids=searchEngine.findModuleRevisionIds(fromResolver,mrid,matcher);
      for (Iterator iter=mrids.iterator(); iter.hasNext(); ) {
        ModuleRevisionId foundMrid=(ModuleRevisionId)iter.next();
        Message.info(""String_Node_Str"" + foundMrid + ""String_Node_Str"");
        DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(md,foundMrid,false,false,transitive);
        dd.addDependencyConfiguration(""String_Node_Str"",""String_Node_Str"");
        md.addDependency(dd);
      }
    }
    ResolveReport report=new ResolveReport(md,resolveId);
    Message.info(""String_Node_Str"");
    IvyNode[] dependencies=resolveEngine.getDependencies(md,new ResolveOptions().setResolveId(resolveId).setConfs(new String[]{""String_Node_Str""}).setCache(getCacheManager(cache)),report);
    report.setDependencies(Arrays.asList(dependencies),artifactFilter);
    Message.info(""String_Node_Str"");
    resolveEngine.downloadArtifacts(report,getCacheManager(cache),false,artifactFilter);
    Message.info(""String_Node_Str"" + to + ""String_Node_Str"");
    for (int i=0; i < dependencies.length; i++) {
      ModuleDescriptor depmd=dependencies[i].getDescriptor();
      if (depmd != null) {
        Message.verbose(""String_Node_Str"" + depmd.getModuleRevisionId());
        publishEngine.publish(depmd,Collections.singleton(cache.getAbsolutePath() + ""String_Node_Str"" + settings.getCacheArtifactPattern()),toResolver,new PublishOptions().setSrcIvyPattern(cache.getAbsolutePath() + ""String_Node_Str"" + settings.getCacheIvyPattern()).setOverwrite(overwrite));
      }
    }
    Message.info(""String_Node_Str"");
    report.output(settings.getReportOutputters(),cache);
    return report;
  }
  finally {
    resolveEngine.setDictatorResolver(oldDicator);
    settings.setLogNotConvertedExclusionRule(log);
  }
}","public ResolveReport install(ModuleRevisionId mrid,String from,String to,boolean transitive,boolean validate,boolean overwrite,Filter artifactFilter,File cache,String matcherName) throws IOException {
  if (cache == null) {
    cache=settings.getDefaultCache();
  }
  if (artifactFilter == null) {
    artifactFilter=FilterHelper.NO_FILTER;
  }
  DependencyResolver fromResolver=settings.getResolver(from);
  DependencyResolver toResolver=settings.getResolver(to);
  if (fromResolver == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + from + ""String_Node_Str""+ settings.getResolverNames());
  }
  if (toResolver == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + to + ""String_Node_Str""+ settings.getResolverNames());
  }
  PatternMatcher matcher=settings.getMatcher(matcherName);
  if (matcher == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + matcherName + ""String_Node_Str""+ settings.getMatcherNames());
  }
  Message.info(""String_Node_Str"" + mrid + ""String_Node_Str"");
  DependencyResolver oldDicator=resolveEngine.getDictatorResolver();
  boolean log=settings.logNotConvertedExclusionRule();
  try {
    settings.setLogNotConvertedExclusionRule(true);
    resolveEngine.setDictatorResolver(fromResolver);
    DefaultModuleDescriptor md=new DefaultModuleDescriptor(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),settings.getStatusManager().getDefaultStatus(),new Date());
    String resolveId=ResolveOptions.getDefaultResolveId(md);
    md.addConfiguration(new Configuration(""String_Node_Str""));
    md.addConflictManager(new ModuleId(ExactPatternMatcher.ANY_EXPRESSION,ExactPatternMatcher.ANY_EXPRESSION),ExactPatternMatcher.INSTANCE,new NoConflictManager());
    if (MatcherHelper.isExact(matcher,mrid)) {
      DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(md,mrid,false,false,transitive);
      dd.addDependencyConfiguration(""String_Node_Str"",""String_Node_Str"");
      md.addDependency(dd);
    }
 else {
      Collection mrids=searchEngine.findModuleRevisionIds(fromResolver,mrid,matcher);
      for (Iterator iter=mrids.iterator(); iter.hasNext(); ) {
        ModuleRevisionId foundMrid=(ModuleRevisionId)iter.next();
        Message.info(""String_Node_Str"" + foundMrid + ""String_Node_Str"");
        DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(md,foundMrid,false,false,transitive);
        dd.addDependencyConfiguration(""String_Node_Str"",""String_Node_Str"");
        md.addDependency(dd);
      }
    }
    ResolveReport report=new ResolveReport(md,resolveId);
    Message.info(""String_Node_Str"");
    IvyNode[] dependencies=resolveEngine.getDependencies(md,new ResolveOptions().setResolveId(resolveId).setConfs(new String[]{""String_Node_Str""}).setCache(getCacheManager(cache)),report);
    report.setDependencies(Arrays.asList(dependencies),artifactFilter);
    Message.info(""String_Node_Str"");
    resolveEngine.downloadArtifacts(report,getCacheManager(cache),false,artifactFilter);
    Message.info(""String_Node_Str"" + to + ""String_Node_Str"");
    for (int i=0; i < dependencies.length; i++) {
      ModuleDescriptor depmd=dependencies[i].getDescriptor();
      if (depmd != null) {
        Message.verbose(""String_Node_Str"" + depmd.getModuleRevisionId());
        publishEngine.publish(depmd,Collections.singleton(cache.getAbsolutePath() + ""String_Node_Str"" + settings.getCacheArtifactPattern()),toResolver,new PublishOptions().setSrcIvyPattern(cache.getAbsolutePath() + ""String_Node_Str"" + settings.getCacheIvyPattern()).setOverwrite(overwrite));
      }
    }
    Message.info(""String_Node_Str"");
    resolveEngine.outputReport(report,getCacheManager(cache));
    return report;
  }
  finally {
    resolveEngine.setDictatorResolver(oldDicator);
    settings.setLogNotConvertedExclusionRule(log);
  }
}",0.9869893312516264
82699,"public void output(ReportOutputter[] outputters,File cache){
  for (int i=0; i < outputters.length; i++) {
    outputters[i].output(this,cache);
  }
}","public void output(ReportOutputter[] outputters,ResolutionCacheManager cacheMgr) throws IOException {
  for (int i=0; i < outputters.length; i++) {
    outputters[i].output(this,cacheMgr);
  }
}",0.8604651162790697
82700,"/** 
 * Resolve dependencies of a module described by a module descriptor.
 */
public ResolveReport resolve(ModuleDescriptor md,ResolveOptions options) throws ParseException, IOException {
  DependencyResolver oldDictator=getDictatorResolver();
  if (options.isUseCacheOnly()) {
    setDictatorResolver(new CacheResolver(settings));
  }
  try {
    CacheManager cacheManager=options.getCache();
    if (cacheManager == null) {
      cacheManager=IvyContext.getContext().getCacheManager();
      options.setCache(cacheManager);
    }
 else {
      IvyContext.getContext().setCacheManager(cacheManager);
    }
    String[] confs=options.getConfs(md);
    options.setConfs(confs);
    if (options.getResolveId() == null) {
      options.setResolveId(ResolveOptions.getDefaultResolveId(md));
    }
    eventManager.fireIvyEvent(new StartResolveEvent(md,confs));
    long start=System.currentTimeMillis();
    Message.info(""String_Node_Str"" + md.getResolvedModuleRevisionId() + (options.isTransitive() ? ""String_Node_Str"" : ""String_Node_Str""));
    Message.info(""String_Node_Str"" + Arrays.asList(confs));
    Message.verbose(""String_Node_Str"" + options.isValidate());
    ResolveReport report=new ResolveReport(md,options.getResolveId());
    IvyNode[] dependencies=getDependencies(md,options,report);
    report.setDependencies(Arrays.asList(dependencies),options.getArtifactFilter());
    File ivyFileInCache=cacheManager.getResolvedIvyFileInCache(md.getResolvedModuleRevisionId());
    md.toIvyFile(ivyFileInCache);
    File ivyPropertiesInCache=cacheManager.getResolvedIvyPropertiesInCache(md.getResolvedModuleRevisionId());
    Properties props=new Properties();
    if (dependencies.length > 0) {
      IvyNode root=dependencies[0].getRoot();
      for (int i=0; i < dependencies.length; i++) {
        if (!dependencies[i].hasProblem()) {
          DependencyDescriptor dd=dependencies[i].getDependencyDescriptor(root);
          if (dd != null) {
            ModuleRevisionId depResolvedId=dependencies[i].getResolvedId();
            ModuleDescriptor depDescriptor=dependencies[i].getDescriptor();
            ModuleRevisionId depRevisionId=dd.getDependencyRevisionId();
            if (depResolvedId == null) {
              throw new NullPointerException(""String_Node_Str"" + dependencies[i].toString());
            }
            if (depRevisionId == null) {
              throw new NullPointerException(""String_Node_Str"" + ""String_Node_Str"" + dd.toString());
            }
            String rev=depResolvedId.getRevision();
            String status=depDescriptor == null ? ""String_Node_Str"" : depDescriptor.getStatus();
            props.put(depRevisionId.encodeToString(),rev + ""String_Node_Str"" + status);
          }
        }
      }
    }
    FileOutputStream out=new FileOutputStream(ivyPropertiesInCache);
    props.store(out,md.getResolvedModuleRevisionId() + ""String_Node_Str"");
    out.close();
    Message.verbose(""String_Node_Str"" + ivyFileInCache);
    report.setResolveTime(System.currentTimeMillis() - start);
    if (options.isDownload()) {
      Message.verbose(""String_Node_Str"");
      downloadArtifacts(report,cacheManager,options.isUseOrigin(),options.getArtifactFilter());
    }
    if (options.isOutputReport()) {
      outputReport(report,cacheManager.getResolutionCacheRoot());
    }
    eventManager.fireIvyEvent(new EndResolveEvent(md,confs,report));
    return report;
  }
 catch (  RuntimeException ex) {
    Message.error(ex.getMessage());
    Message.sumupProblems();
    throw ex;
  }
 finally {
    setDictatorResolver(oldDictator);
  }
}","/** 
 * Resolve dependencies of a module described by a module descriptor.
 */
public ResolveReport resolve(ModuleDescriptor md,ResolveOptions options) throws ParseException, IOException {
  DependencyResolver oldDictator=getDictatorResolver();
  if (options.isUseCacheOnly()) {
    setDictatorResolver(new CacheResolver(settings));
  }
  try {
    CacheManager cacheManager=options.getCache();
    if (cacheManager == null) {
      cacheManager=IvyContext.getContext().getCacheManager();
      options.setCache(cacheManager);
    }
 else {
      IvyContext.getContext().setCacheManager(cacheManager);
    }
    String[] confs=options.getConfs(md);
    options.setConfs(confs);
    if (options.getResolveId() == null) {
      options.setResolveId(ResolveOptions.getDefaultResolveId(md));
    }
    eventManager.fireIvyEvent(new StartResolveEvent(md,confs));
    long start=System.currentTimeMillis();
    Message.info(""String_Node_Str"" + md.getResolvedModuleRevisionId() + (options.isTransitive() ? ""String_Node_Str"" : ""String_Node_Str""));
    Message.info(""String_Node_Str"" + Arrays.asList(confs));
    Message.verbose(""String_Node_Str"" + options.isValidate());
    ResolveReport report=new ResolveReport(md,options.getResolveId());
    IvyNode[] dependencies=getDependencies(md,options,report);
    report.setDependencies(Arrays.asList(dependencies),options.getArtifactFilter());
    File ivyFileInCache=cacheManager.getResolvedIvyFileInCache(md.getResolvedModuleRevisionId());
    md.toIvyFile(ivyFileInCache);
    File ivyPropertiesInCache=cacheManager.getResolvedIvyPropertiesInCache(md.getResolvedModuleRevisionId());
    Properties props=new Properties();
    if (dependencies.length > 0) {
      IvyNode root=dependencies[0].getRoot();
      for (int i=0; i < dependencies.length; i++) {
        if (!dependencies[i].hasProblem()) {
          DependencyDescriptor dd=dependencies[i].getDependencyDescriptor(root);
          if (dd != null) {
            ModuleRevisionId depResolvedId=dependencies[i].getResolvedId();
            ModuleDescriptor depDescriptor=dependencies[i].getDescriptor();
            ModuleRevisionId depRevisionId=dd.getDependencyRevisionId();
            if (depResolvedId == null) {
              throw new NullPointerException(""String_Node_Str"" + dependencies[i].toString());
            }
            if (depRevisionId == null) {
              throw new NullPointerException(""String_Node_Str"" + ""String_Node_Str"" + dd.toString());
            }
            String rev=depResolvedId.getRevision();
            String status=depDescriptor == null ? ""String_Node_Str"" : depDescriptor.getStatus();
            props.put(depRevisionId.encodeToString(),rev + ""String_Node_Str"" + status);
          }
        }
      }
    }
    FileOutputStream out=new FileOutputStream(ivyPropertiesInCache);
    props.store(out,md.getResolvedModuleRevisionId() + ""String_Node_Str"");
    out.close();
    Message.verbose(""String_Node_Str"" + ivyFileInCache);
    report.setResolveTime(System.currentTimeMillis() - start);
    if (options.isDownload()) {
      Message.verbose(""String_Node_Str"");
      downloadArtifacts(report,cacheManager,options.isUseOrigin(),options.getArtifactFilter());
    }
    if (options.isOutputReport()) {
      outputReport(report,cacheManager);
    }
    Message.verbose(""String_Node_Str"" + report.getResolveTime() + ""String_Node_Str""+ report.getDownloadTime()+ ""String_Node_Str"");
    Message.sumupProblems();
    eventManager.fireIvyEvent(new EndResolveEvent(md,confs,report));
    return report;
  }
 catch (  RuntimeException ex) {
    Message.error(ex.getMessage());
    Message.sumupProblems();
    throw ex;
  }
 finally {
    setDictatorResolver(oldDictator);
  }
}",0.9746401644962304
82701,"public void outputReport(ResolveReport report,File cache){
  Message.info(""String_Node_Str"");
  report.setProblemMessages(Message.getProblems());
  report.output(settings.getReportOutputters(),cache);
  Message.verbose(""String_Node_Str"" + report.getResolveTime() + ""String_Node_Str""+ report.getDownloadTime()+ ""String_Node_Str"");
  Message.sumupProblems();
}","public void outputReport(ResolveReport report,ResolutionCacheManager cacheMgr) throws IOException {
  Message.info(""String_Node_Str"");
  report.setProblemMessages(Message.getProblems());
  report.output(settings.getReportOutputters(),cacheMgr);
}",0.6324503311258278
82702,"public IvySettings(IvyVariableContainer variableContainer){
  setVariableContainer(variableContainer);
  setVariable(""String_Node_Str"",getDefaultSettingsDir(),true);
  setDeprecatedVariable(""String_Node_Str"",""String_Node_Str"");
  String ivyTypeDefs=System.getProperty(""String_Node_Str"");
  if (ivyTypeDefs != null) {
    String[] files=ivyTypeDefs.split(""String_Node_Str"");
    for (int i=0; i < files.length; i++) {
      try {
        typeDefs(new FileInputStream(new File(files[i].trim())),true);
      }
 catch (      FileNotFoundException e) {
        Message.warn(""String_Node_Str"" + files[i].trim());
      }
catch (      IOException e) {
        Message.warn(""String_Node_Str"" + files[i].trim() + ""String_Node_Str""+ e.getMessage());
      }
    }
  }
 else {
    try {
      typeDefs(getSettingsURL(""String_Node_Str"").openStream(),true);
    }
 catch (    IOException e) {
      Message.warn(""String_Node_Str"");
    }
  }
  LatestLexicographicStrategy latestLexicographicStrategy=new LatestLexicographicStrategy();
  LatestRevisionStrategy latestRevisionStrategy=new LatestRevisionStrategy();
  LatestTimeStrategy latestTimeStrategy=new LatestTimeStrategy();
  addLatestStrategy(""String_Node_Str"",latestRevisionStrategy);
  addLatestStrategy(""String_Node_Str"",latestLexicographicStrategy);
  addLatestStrategy(""String_Node_Str"",latestTimeStrategy);
  addLockStrategy(""String_Node_Str"",new NoLockStrategy());
  addLockStrategy(""String_Node_Str"",new ArtifactLockStrategy());
  addConflictManager(""String_Node_Str"",new LatestConflictManager(""String_Node_Str"",latestRevisionStrategy));
  addConflictManager(""String_Node_Str"",new LatestCompatibleConflictManager(""String_Node_Str"",latestRevisionStrategy));
  addConflictManager(""String_Node_Str"",new LatestConflictManager(""String_Node_Str"",latestTimeStrategy));
  addConflictManager(""String_Node_Str"",new NoConflictManager());
  addConflictManager(""String_Node_Str"",new StrictConflictManager());
  addMatcher(ExactPatternMatcher.INSTANCE);
  addMatcher(RegexpPatternMatcher.INSTANCE);
  addMatcher(ExactOrRegexpPatternMatcher.INSTANCE);
  try {
    Class globClazz=IvySettings.class.getClassLoader().loadClass(""String_Node_Str"");
    Field instanceField=globClazz.getField(""String_Node_Str"");
    addMatcher((PatternMatcher)instanceField.get(null));
  }
 catch (  Exception e) {
    Message.info(""String_Node_Str"" + ""String_Node_Str"");
  }
  addReportOutputter(new XmlReportOutputter());
  addReportOutputter(new LogReportOutputter());
  configureDefaultCircularDependencyStrategies();
  listingIgnore.add(""String_Node_Str"");
  listingIgnore.add(""String_Node_Str"");
  listingIgnore.add(""String_Node_Str"");
  addSystemProperties();
}","public IvySettings(IvyVariableContainer variableContainer){
  setVariableContainer(variableContainer);
  setVariable(""String_Node_Str"",getDefaultSettingsDir(),true);
  setDeprecatedVariable(""String_Node_Str"",""String_Node_Str"");
  String ivyTypeDefs=System.getProperty(""String_Node_Str"");
  if (ivyTypeDefs != null) {
    String[] files=ivyTypeDefs.split(""String_Node_Str"");
    for (int i=0; i < files.length; i++) {
      try {
        typeDefs(new FileInputStream(new File(files[i].trim())),true);
      }
 catch (      FileNotFoundException e) {
        Message.warn(""String_Node_Str"" + files[i].trim());
      }
catch (      IOException e) {
        Message.warn(""String_Node_Str"" + files[i].trim() + ""String_Node_Str""+ e.getMessage());
      }
    }
  }
 else {
    try {
      typeDefs(getSettingsURL(""String_Node_Str"").openStream(),true);
    }
 catch (    IOException e) {
      Message.warn(""String_Node_Str"");
    }
  }
  LatestLexicographicStrategy latestLexicographicStrategy=new LatestLexicographicStrategy();
  LatestRevisionStrategy latestRevisionStrategy=new LatestRevisionStrategy();
  LatestTimeStrategy latestTimeStrategy=new LatestTimeStrategy();
  addLatestStrategy(""String_Node_Str"",latestRevisionStrategy);
  addLatestStrategy(""String_Node_Str"",latestLexicographicStrategy);
  addLatestStrategy(""String_Node_Str"",latestTimeStrategy);
  addLockStrategy(""String_Node_Str"",new NoLockStrategy());
  addLockStrategy(""String_Node_Str"",new ArtifactLockStrategy());
  addConflictManager(""String_Node_Str"",new LatestConflictManager(""String_Node_Str"",latestRevisionStrategy));
  addConflictManager(""String_Node_Str"",new LatestCompatibleConflictManager(""String_Node_Str"",latestRevisionStrategy));
  addConflictManager(""String_Node_Str"",new LatestConflictManager(""String_Node_Str"",latestTimeStrategy));
  addConflictManager(""String_Node_Str"",new NoConflictManager());
  addConflictManager(""String_Node_Str"",new StrictConflictManager());
  addMatcher(ExactPatternMatcher.INSTANCE);
  addMatcher(RegexpPatternMatcher.INSTANCE);
  addMatcher(ExactOrRegexpPatternMatcher.INSTANCE);
  try {
    Class globClazz=IvySettings.class.getClassLoader().loadClass(""String_Node_Str"");
    Field instanceField=globClazz.getField(""String_Node_Str"");
    addMatcher((PatternMatcher)instanceField.get(null));
  }
 catch (  Exception e) {
    Message.info(""String_Node_Str"" + ""String_Node_Str"");
  }
  addReportOutputter(new LogReportOutputter());
  addReportOutputter(new XmlReportOutputter());
  configureDefaultCircularDependencyStrategies();
  listingIgnore.add(""String_Node_Str"");
  listingIgnore.add(""String_Node_Str"");
  listingIgnore.add(""String_Node_Str"");
  addSystemProperties();
}",0.9821162444113264
82703,"public abstract void output(ResolveReport report,File destDir);","public abstract void output(ResolveReport report,ResolutionCacheManager cacheMgr) throws IOException ;",0.6787878787878788
82704,"/** 
 * Returns the default ivy settings of this classloader. If it doesn't exist yet, a new one is created using the given project to back the VariableContainer.
 * @param project  TODO add text.
 * @return  An IvySetting instance.
 */
public static IvyAntSettings getDefaultInstance(Project project){
  Object defaultInstanceObj=project.getReference(""String_Node_Str"");
  if (defaultInstanceObj != null && defaultInstanceObj.getClass().getClassLoader() != IvyAntSettings.class.getClassLoader()) {
    Message.warn(""String_Node_Str"" + ""String_Node_Str"");
    defaultInstanceObj=null;
  }
  if (defaultInstanceObj != null && !(defaultInstanceObj instanceof IvyAntSettings)) {
    throw new BuildException(""String_Node_Str"" + defaultInstanceObj.getClass().getName() + ""String_Node_Str"");
  }
  if (defaultInstanceObj == null) {
    Message.info(""String_Node_Str"" + ""String_Node_Str"");
    IvyAntSettings defaultInstance=new IvyAntSettings();
    defaultInstance.setProject(project);
    defaultInstance.registerAsDefault();
    return defaultInstance;
  }
 else {
    return (IvyAntSettings)defaultInstanceObj;
  }
}","/** 
 * Returns the default ivy settings of this classloader. If it doesn't exist yet, a new one is created using the given project to back the VariableContainer.
 * @param project  TODO add text.
 * @return  An IvySetting instance.
 */
public static IvyAntSettings getDefaultInstance(Project project){
  Object defaultInstanceObj=project.getReference(""String_Node_Str"");
  if (defaultInstanceObj != null && defaultInstanceObj.getClass().getClassLoader() != IvyAntSettings.class.getClassLoader()) {
    project.log(""String_Node_Str"" + ""String_Node_Str"",Project.MSG_WARN);
    defaultInstanceObj=null;
  }
  if (defaultInstanceObj != null && !(defaultInstanceObj instanceof IvyAntSettings)) {
    throw new BuildException(""String_Node_Str"" + defaultInstanceObj.getClass().getName() + ""String_Node_Str"");
  }
  if (defaultInstanceObj == null) {
    project.log(""String_Node_Str"" + ""String_Node_Str"",Project.MSG_INFO);
    IvyAntSettings defaultInstance=new IvyAntSettings();
    defaultInstance.setProject(project);
    defaultInstance.registerAsDefault();
    return defaultInstance;
  }
 else {
    return (IvyAntSettings)defaultInstanceObj;
  }
}",0.900972590627763
82705,"protected Properties getDefaultProperties(){
  URL url=IvySettings.getDefaultPropertiesURL();
  Properties props=new Properties();
  Message.verbose(""String_Node_Str"" + url);
  try {
    InputStream is=url.openStream();
    try {
      props.load(is);
    }
  finally {
      if (is != null) {
        is.close();
      }
    }
  }
 catch (  IOException ex) {
    throw new BuildException(ex);
  }
  return props;
}","protected Properties getDefaultProperties(){
  URL url=IvySettings.getDefaultPropertiesURL();
  Properties props=new Properties();
  verbose(""String_Node_Str"" + url);
  try {
    InputStream is=url.openStream();
    try {
      props.load(is);
    }
  finally {
      if (is != null) {
        is.close();
      }
    }
  }
 catch (  IOException ex) {
    throw new BuildException(ex);
  }
  return props;
}",0.9902676399026764
82706,"/** 
 * Set _file or _url to its default value
 * @param variableContainer
 */
private void defineDefaultSettingFile(IvyVariableContainer variableContainer){
  String settingsFileName=variableContainer.getVariable(""String_Node_Str"");
  if (settingsFileName != null && !settingsFileName.equals(variableContainer.getVariable(""String_Node_Str""))) {
    Message.deprecated(""String_Node_Str"");
  }
 else {
    settingsFileName=variableContainer.getVariable(""String_Node_Str"");
  }
  File[] settingsLocations=new File[]{new File(getProject().getBaseDir(),settingsFileName),new File(getProject().getBaseDir(),""String_Node_Str""),new File(settingsFileName),new File(""String_Node_Str"")};
  for (int i=0; i < settingsLocations.length; i++) {
    file=settingsLocations[i];
    Message.verbose(""String_Node_Str"" + file);
    if (file.exists()) {
      break;
    }
  }
  if (!file.exists()) {
    if (Boolean.valueOf(getProject().getProperty(""String_Node_Str"")).booleanValue()) {
      Message.info(""String_Node_Str"");
      file=null;
      url=IvySettings.getDefault14SettingsURL();
    }
 else {
      Message.info(""String_Node_Str"");
      file=null;
      url=IvySettings.getDefaultSettingsURL();
    }
  }
}","/** 
 * Set _file or _url to its default value
 * @param variableContainer
 */
private void defineDefaultSettingFile(IvyVariableContainer variableContainer){
  String settingsFileName=variableContainer.getVariable(""String_Node_Str"");
  if (settingsFileName != null && !settingsFileName.equals(variableContainer.getVariable(""String_Node_Str""))) {
    info(""String_Node_Str"");
  }
 else {
    settingsFileName=variableContainer.getVariable(""String_Node_Str"");
  }
  File[] settingsLocations=new File[]{new File(getProject().getBaseDir(),settingsFileName),new File(getProject().getBaseDir(),""String_Node_Str""),new File(settingsFileName),new File(""String_Node_Str"")};
  for (int i=0; i < settingsLocations.length; i++) {
    file=settingsLocations[i];
    verbose(""String_Node_Str"" + file);
    if (file.exists()) {
      break;
    }
  }
  if (!file.exists()) {
    if (Boolean.valueOf(getProject().getProperty(""String_Node_Str"")).booleanValue()) {
      info(""String_Node_Str"");
      file=null;
      url=IvySettings.getDefault14SettingsURL();
    }
 else {
      info(""String_Node_Str"");
      file=null;
      url=IvySettings.getDefaultSettingsURL();
    }
  }
}",0.9805414551607444
82707,"public void doExecute() throws BuildException {
  try {
    if (pomFile == null) {
      throw new BuildException(""String_Node_Str"");
    }
    if (ivyFile == null) {
      throw new BuildException(""String_Node_Str"");
    }
    ModuleDescriptor md=PomModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),pomFile.toURL(),false);
    PomModuleDescriptorParser.getInstance().toIvyFile(pomFile.toURL().openStream(),new URLResource(pomFile.toURL()),getIvyFile(),md);
  }
 catch (  MalformedURLException e) {
    throw new BuildException(""String_Node_Str"" + pomFile + ""String_Node_Str""+ e,e);
  }
catch (  ParseException e) {
    log(e.getMessage(),Project.MSG_ERR);
    throw new BuildException(""String_Node_Str"" + pomFile + ""String_Node_Str""+ e,e);
  }
catch (  Exception e) {
    throw new BuildException(""String_Node_Str"" + e + ""String_Node_Str""+ pomFile+ ""String_Node_Str""+ ivyFile,e);
  }
}","public void doExecute() throws BuildException {
  try {
    if (pomFile == null) {
      throw new BuildException(""String_Node_Str"");
    }
    if (ivyFile == null) {
      throw new BuildException(""String_Node_Str"");
    }
    ModuleDescriptor md=PomModuleDescriptorParser.getInstance().parseDescriptor(getSettings(),pomFile.toURL(),false);
    PomModuleDescriptorParser.getInstance().toIvyFile(pomFile.toURL().openStream(),new URLResource(pomFile.toURL()),getIvyFile(),md);
  }
 catch (  MalformedURLException e) {
    throw new BuildException(""String_Node_Str"" + pomFile + ""String_Node_Str""+ e,e);
  }
catch (  ParseException e) {
    log(e.getMessage(),Project.MSG_ERR);
    throw new BuildException(""String_Node_Str"" + pomFile + ""String_Node_Str""+ e,e);
  }
catch (  Exception e) {
    throw new BuildException(""String_Node_Str"" + e + ""String_Node_Str""+ pomFile+ ""String_Node_Str""+ ivyFile,e);
  }
}",0.9944812362030904
82708,"public void doExecute() throws BuildException {
  try {
    if (ivyFile == null) {
      throw new BuildException(""String_Node_Str"");
    }
    if (pomFile == null) {
      throw new BuildException(""String_Node_Str"");
    }
    ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(new IvySettings(),ivyFile.toURL(),false);
    PomModuleDescriptorWriter.write(md,mappings.isEmpty() ? PomModuleDescriptorWriter.DEFAULT_MAPPING : new ConfigurationScopeMapping(getMappingsMap()),pomFile);
  }
 catch (  MalformedURLException e) {
    throw new BuildException(""String_Node_Str"" + ivyFile + ""String_Node_Str""+ e,e);
  }
catch (  ParseException e) {
    log(e.getMessage(),Project.MSG_ERR);
    throw new BuildException(""String_Node_Str"" + ivyFile + ""String_Node_Str""+ e,e);
  }
catch (  Exception e) {
    throw new BuildException(""String_Node_Str"" + e + ""String_Node_Str""+ ivyFile+ ""String_Node_Str""+ pomFile,e);
  }
}","public void doExecute() throws BuildException {
  try {
    if (ivyFile == null) {
      throw new BuildException(""String_Node_Str"");
    }
    if (pomFile == null) {
      throw new BuildException(""String_Node_Str"");
    }
    ModuleDescriptor md=XmlModuleDescriptorParser.getInstance().parseDescriptor(getSettings(),ivyFile.toURL(),false);
    PomModuleDescriptorWriter.write(md,mappings.isEmpty() ? PomModuleDescriptorWriter.DEFAULT_MAPPING : new ConfigurationScopeMapping(getMappingsMap()),pomFile);
  }
 catch (  MalformedURLException e) {
    throw new BuildException(""String_Node_Str"" + ivyFile + ""String_Node_Str""+ e,e);
  }
catch (  ParseException e) {
    log(e.getMessage(),Project.MSG_ERR);
    throw new BuildException(""String_Node_Str"" + ivyFile + ""String_Node_Str""+ e,e);
  }
catch (  Exception e) {
    throw new BuildException(""String_Node_Str"" + e + ""String_Node_Str""+ ivyFile+ ""String_Node_Str""+ pomFile,e);
  }
}",0.994646680942184
82709,"/** 
 * Called when task is about to finish Should clean up all state related information (stacks for example)
 */
protected void finalizeTask(){
  if (!IvyContext.getContext().pop(ANT_PROJECT_CONTEXT_KEY,getProject())) {
    Message.error(""String_Node_Str"");
  }
}","/** 
 * Called when task is about to finish Should clean up all state related information (stacks for example)
 */
protected void finalizeTask(){
  if (!IvyContext.getContext().pop(ANT_PROJECT_CONTEXT_KEY,getProject())) {
    Message.error(""String_Node_Str"");
  }
  IvyContext.popContext();
}",0.9515260323159784
82710,"/** 
 * Called when task starts its execution.
 */
protected void prepareTask(){
  IvyContext.getContext().push(ANT_PROJECT_CONTEXT_KEY,getProject());
}","/** 
 * Called when task starts its execution.
 */
protected void prepareTask(){
  IvyContext.pushNewCopyContext();
  IvyContext.getContext().setIvy(getIvyInstance());
  IvyContext.getContext().push(ANT_PROJECT_CONTEXT_KEY,getProject());
}",0.7774936061381074
82711,"public MessageLogger getMessageLogger(){
  return getIvy().getLoggerEngine();
}","public MessageLogger getMessageLogger(){
  Ivy ivy=peekIvy();
  if (ivy == null) {
    if (defaultIvy == null) {
      return Message.getDefaultLogger();
    }
 else {
      return defaultIvy.getLoggerEngine();
    }
  }
 else {
    return ivy.getLoggerEngine();
  }
}",0.3631123919308357
82712,"public static void setDefaultLogger(MessageLogger logger){
  defaultLogger=logger;
}","/** 
 * Change the default logger used when no other logger is currently configured
 * @param logger the new default logger, must not be <code>null</code>
 */
public static void setDefaultLogger(MessageLogger logger){
  Checks.checkNotNull(logger,""String_Node_Str"");
  defaultLogger=logger;
}",0.4468085106382978
82713,"public static MessageLogger getDefaultLogger(){
  return defaultLogger;
}","/** 
 * Returns the current default logger.
 * @return the current default logger; is never <code>null</code>.
 */
public static MessageLogger getDefaultLogger(){
  return defaultLogger;
}",0.5593869731800766
82714,"/** 
 * Returns the current logger, or the default one if there is no logger in the stack
 * @return the current logger, or the default one if there is no logger in the stack
 */
private MessageLogger peekLogger(){
  if (loggerStack.isEmpty()) {
    return defaultLogger;
  }
  return (MessageLogger)loggerStack.peek();
}","/** 
 * Returns the current logger, or the default one if there is no logger in the stack
 * @return the current logger, or the default one if there is no logger in the stack
 */
private MessageLogger peekLogger(){
  if (loggerStack.isEmpty()) {
    return getDefaultLogger();
  }
  return (MessageLogger)loggerStack.peek();
}",0.9891808346213292
82715,"public void setShowProgress(boolean progress){
  defaultLogger.setShowProgress(progress);
  for (Iterator iter=loggerStack.iterator(); iter.hasNext(); ) {
    MessageLogger l=(MessageLogger)iter.next();
    l.setShowProgress(progress);
  }
}","public void setShowProgress(boolean progress){
  getDefaultLogger().setShowProgress(progress);
  for (Iterator iter=loggerStack.iterator(); iter.hasNext(); ) {
    MessageLogger l=(MessageLogger)iter.next();
    l.setShowProgress(progress);
  }
}",0.9856262833675564
82716,"public void clearProblems(){
  defaultLogger.clearProblems();
  for (Iterator iter=loggerStack.iterator(); iter.hasNext(); ) {
    MessageLogger l=(MessageLogger)iter.next();
    l.clearProblems();
  }
  problems.clear();
  errors.clear();
  warns.clear();
}","public void clearProblems(){
  getDefaultLogger().clearProblems();
  for (Iterator iter=loggerStack.iterator(); iter.hasNext(); ) {
    MessageLogger l=(MessageLogger)iter.next();
    l.clearProblems();
  }
  problems.clear();
  errors.clear();
  warns.clear();
}",0.9865642994241842
82717,"public boolean isShowProgress(){
  return defaultLogger.isShowProgress();
}","public boolean isShowProgress(){
  return getDefaultLogger().isShowProgress();
}",0.9548387096774194
82718,"protected void setUp() throws Exception {
  strategy=IgnoreCircularDependencyStrategy.getInstance();
  mockMessageImpl=new MockMessageLogger();
  IvyContext.getContext().getIvy().getLoggerEngine().setDefaultLogger(mockMessageImpl);
}","protected void setUp() throws Exception {
  strategy=IgnoreCircularDependencyStrategy.getInstance();
  mockMessageImpl=new MockMessageLogger();
  Message.setDefaultLogger(mockMessageImpl);
}",0.8794326241134752
82719,"private void resetLogger(){
  mockMessageImpl=new MockMessageLogger();
  IvyContext.getContext().getIvy().getLoggerEngine().setDefaultLogger(mockMessageImpl);
}","private void resetLogger(){
  mockMessageImpl=new MockMessageLogger();
  Message.setDefaultLogger(mockMessageImpl);
}",0.8158844765342961
82720,"/** 
 * Blacklists the current node, so that a new resolve process won't ever consider this node as available in the repository. <p> This is useful in combination with   {@link RestartResolveProcess} for conflict managerimplementation which use a best effort strategy to find compatible dependency set, like {@link LatestCompatibleConflictManager}</p>
 * @param rootModuleConf the root module configuration in which the node should be blacklisted
 */
public void blacklist(IvyNodeBlacklist bdata){
  if (data.getSettings().logResolvedRevision()) {
    Message.info(""String_Node_Str"" + bdata);
  }
 else {
    Message.verbose(""String_Node_Str"" + bdata);
  }
  clearEvictionDataInAllCallers(bdata.getRootModuleConf(),this);
  blacklisted.put(bdata.getRootModuleConf(),bdata);
  data.blacklist(this);
}","/** 
 * Blacklists the current node, so that a new resolve process won't ever consider this node as available in the repository. <p> This is useful in combination with   {@link RestartResolveProcess} for conflict managerimplementation which use a best effort strategy to find compatible dependency set, like {@link LatestCompatibleConflictManager}</p>
 * @param rootModuleConf the root module configuration in which the node should be blacklisted
 */
public void blacklist(IvyNodeBlacklist bdata){
  if (data.getSettings().logResolvedRevision()) {
    Message.info(""String_Node_Str"" + bdata);
  }
 else {
    Message.verbose(""String_Node_Str"" + bdata);
  }
  Stack callerStack=new Stack();
  callerStack.push(this);
  clearEvictionDataInAllCallers(bdata.getRootModuleConf(),callerStack);
  blacklisted.put(bdata.getRootModuleConf(),bdata);
  data.blacklist(this);
}",0.955528846153846
82721,"private void clearEvictionDataInAllCallers(String rootModuleConf,IvyNode node){
  Caller[] callers=node.getCallers(rootModuleConf);
  for (int i=0; i < callers.length; i++) {
    IvyNode callerNode=findNode(callers[i].getModuleRevisionId());
    if (callerNode != null) {
      callerNode.eviction=new IvyNodeEviction(callerNode);
      clearEvictionDataInAllCallers(rootModuleConf,callerNode);
    }
  }
}","private void clearEvictionDataInAllCallers(String rootModuleConf,Stack callerStack){
  IvyNode node=(IvyNode)callerStack.peek();
  Caller[] callers=node.getCallers(rootModuleConf);
  for (int i=0; i < callers.length; i++) {
    IvyNode callerNode=findNode(callers[i].getModuleRevisionId());
    if (callerNode != null) {
      callerNode.eviction=new IvyNodeEviction(callerNode);
      if (!callerStack.contains(callerNode)) {
        callerStack.push(callerNode);
        clearEvictionDataInAllCallers(rootModuleConf,callerStack);
        callerStack.pop();
      }
    }
  }
}",0.806910569105691
82722,"private void blackListIncompatibleCallerAndRestartResolveIfPossible(IvySettings settings,IvyNode parent,IvyNode selected,IvyNode evicted){
  final Collection toBlacklist=blackListIncompatibleCaller(settings.getVersionMatcher(),parent,selected,evicted,evicted);
  if (toBlacklist != null) {
    final StringBuffer blacklisted=new StringBuffer();
    for (Iterator iterator=toBlacklist.iterator(); iterator.hasNext(); ) {
      IvyNodeBlacklist blacklist=(IvyNodeBlacklist)iterator.next();
      blacklist.getBlacklistedNode().blacklist(blacklist);
      blacklisted.append(blacklist.getBlacklistedNode());
      if (iterator.hasNext()) {
        blacklisted.append(""String_Node_Str"");
      }
    }
    String rootModuleConf=parent.getData().getReport().getConfiguration();
    evicted.markEvicted(new EvictionData(rootModuleConf,parent,this,Collections.singleton(selected),""String_Node_Str"" + blacklisted));
    if (settings.debugConflictResolution()) {
      Message.debug(""String_Node_Str"" + evicted + ""String_Node_Str""+ evicted.getEvictedData(rootModuleConf));
    }
    throw new RestartResolveProcess(""String_Node_Str"" + selected + ""String_Node_Str""+ evicted);
  }
}","private void blackListIncompatibleCallerAndRestartResolveIfPossible(IvySettings settings,IvyNode parent,IvyNode selected,IvyNode evicted){
  Stack callerStack=new Stack();
  callerStack.push(evicted);
  final Collection toBlacklist=blackListIncompatibleCaller(settings.getVersionMatcher(),parent,selected,evicted,callerStack);
  if (toBlacklist != null) {
    final StringBuffer blacklisted=new StringBuffer();
    for (Iterator iterator=toBlacklist.iterator(); iterator.hasNext(); ) {
      IvyNodeBlacklist blacklist=(IvyNodeBlacklist)iterator.next();
      blacklist.getBlacklistedNode().blacklist(blacklist);
      blacklisted.append(blacklist.getBlacklistedNode());
      if (iterator.hasNext()) {
        blacklisted.append(""String_Node_Str"");
      }
    }
    String rootModuleConf=parent.getData().getReport().getConfiguration();
    evicted.markEvicted(new EvictionData(rootModuleConf,parent,this,Collections.singleton(selected),""String_Node_Str"" + blacklisted));
    if (settings.debugConflictResolution()) {
      Message.debug(""String_Node_Str"" + evicted + ""String_Node_Str""+ evicted.getEvictedData(rootModuleConf));
    }
    throw new RestartResolveProcess(""String_Node_Str"" + selected + ""String_Node_Str""+ evicted);
  }
}",0.9667774086378738
82723,"/** 
 * Tries to blacklist exactly one version for all callers paths.
 * @param versionMatcher the version matcher to use to interpret versions
 * @param conflictParent the node in which the conflict is occurring
 * @param selectedNode the node in favor of which the conflict is resolved
 * @param evictedNode the node which will be evicted if we are able to blacklist all paths
 * @param node the node for which callers should be considered
 * @return the collection of blacklisting to do, null if a blacklist is not possible in at leastone caller path
 */
private Collection blackListIncompatibleCaller(VersionMatcher versionMatcher,IvyNode conflictParent,IvyNode selectedNode,IvyNode evictedNode,IvyNode node){
  Collection blacklisted=new ArrayList();
  Caller[] callers=node.getAllCallers();
  String rootModuleConf=conflictParent.getData().getReport().getConfiguration();
  for (int i=0; i < callers.length; i++) {
    IvyNode callerNode=node.findNode(callers[i].getModuleRevisionId());
    if (callerNode.isBlacklisted(rootModuleConf)) {
      continue;
    }
    if (versionMatcher.isDynamic(callers[i].getAskedDependencyId())) {
      blacklisted.add(new IvyNodeBlacklist(conflictParent,selectedNode,evictedNode,node,rootModuleConf));
    }
 else {
      if (callerNode == null) {
        return null;
      }
      Collection sub=blackListIncompatibleCaller(versionMatcher,conflictParent,selectedNode,evictedNode,callerNode);
      if (sub == null) {
        return null;
      }
 else {
        blacklisted.addAll(sub);
      }
    }
  }
  if (blacklisted.isEmpty()) {
    return null;
  }
  return blacklisted;
}","/** 
 * Tries to blacklist exactly one version for all callers paths.
 * @param versionMatcher the version matcher to use to interpret versions
 * @param conflictParent the node in which the conflict is occurring
 * @param selectedNode the node in favor of which the conflict is resolved
 * @param evictedNode the node which will be evicted if we are able to blacklist all paths
 * @param node the node for which callers should be considered
 * @return the collection of blacklisting to do, null if a blacklist is not possible in at leastone caller path
 */
private Collection blackListIncompatibleCaller(VersionMatcher versionMatcher,IvyNode conflictParent,IvyNode selectedNode,IvyNode evictedNode,Stack callerStack){
  Collection blacklisted=new ArrayList();
  IvyNode node=(IvyNode)callerStack.peek();
  Caller[] callers=node.getAllCallers();
  String rootModuleConf=conflictParent.getData().getReport().getConfiguration();
  for (int i=0; i < callers.length; i++) {
    IvyNode callerNode=node.findNode(callers[i].getModuleRevisionId());
    if (callerNode.isBlacklisted(rootModuleConf)) {
      continue;
    }
    if (versionMatcher.isDynamic(callers[i].getAskedDependencyId())) {
      blacklisted.add(new IvyNodeBlacklist(conflictParent,selectedNode,evictedNode,node,rootModuleConf));
    }
 else {
      if (callerNode == null) {
        return null;
      }
      if (!callerStack.contains(callerNode)) {
        callerStack.push(callerNode);
        Collection sub=blackListIncompatibleCaller(versionMatcher,conflictParent,selectedNode,evictedNode,callerStack);
        callerStack.pop();
        if (sub == null) {
          return null;
        }
 else {
          blacklisted.addAll(sub);
        }
      }
 else {
      }
    }
  }
  if (blacklisted.isEmpty()) {
    return null;
  }
  return blacklisted;
}",0.9332559489262914
82724,"protected String getDestination(String pattern,Artifact artifact,ModuleRevisionId mrid){
  if (supportTransaction() && !overwriteTransaction) {
    return IvyPatternHelper.substitute(pattern,ModuleRevisionId.newInstance(mrid,mrid.getRevision() + TRANSACTION_DESTINATION_SUFFIX),artifact);
  }
 else {
    return super.getDestination(pattern,artifact,mrid);
  }
}","protected String getDestination(String pattern,Artifact artifact,ModuleRevisionId mrid){
  if (supportTransaction() && !overwriteTransaction) {
    String destPattern=(String)fullTransactionPatterns.get(pattern);
    if (destPattern == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + pattern + ""String_Node_Str""+ fullTransactionPatterns.keySet());
    }
    return IvyPatternHelper.substitute(destPattern,mrid,artifact);
  }
 else {
    return super.getDestination(pattern,artifact,mrid);
  }
}",0.6225769669327252
82725,"private void checkSupportTransaction(){
  if (supportTransaction == null) {
    List ivyPatterns=getIvyPatterns();
    List artifactPatterns=getArtifactPatterns();
    if (ivyPatterns.size() > 0) {
      String pattern=(String)ivyPatterns.get(0);
      Matcher m=TRANSACTION_PATTERN.matcher(pattern);
      if (!m.matches()) {
        unsupportedTransaction(""String_Node_Str"");
        return;
      }
 else {
        baseTransactionPattern=m.group(1);
      }
    }
    if (artifactPatterns.size() > 0) {
      String pattern=(String)artifactPatterns.get(0);
      Matcher m=TRANSACTION_PATTERN.matcher(pattern);
      if (!m.matches()) {
        unsupportedTransaction(""String_Node_Str"");
        return;
      }
 else       if (baseTransactionPattern != null) {
        if (!baseTransactionPattern.equals(m.group(1))) {
          unsupportedTransaction(""String_Node_Str"" + ""String_Node_Str"");
          return;
        }
      }
 else {
        baseTransactionPattern=m.group(1);
      }
    }
    supportTransaction=Boolean.TRUE;
  }
}","private void checkSupportTransaction(){
  if (supportTransaction == null) {
    List ivyPatterns=getIvyPatterns();
    List artifactPatterns=getArtifactPatterns();
    if (ivyPatterns.size() > 0) {
      String pattern=(String)ivyPatterns.get(0);
      Matcher m=TRANSACTION_PATTERN.matcher(pattern);
      if (!m.matches()) {
        unsupportedTransaction(""String_Node_Str"");
        return;
      }
 else {
        baseTransactionPattern=m.group(1);
        fullTransactionPatterns.put(pattern,m.group(1) + TRANSACTION_DESTINATION_SUFFIX + m.group(2));
      }
    }
    if (artifactPatterns.size() > 0) {
      String pattern=(String)artifactPatterns.get(0);
      Matcher m=TRANSACTION_PATTERN.matcher(pattern);
      if (!m.matches()) {
        unsupportedTransaction(""String_Node_Str"");
        return;
      }
 else       if (baseTransactionPattern != null) {
        if (!baseTransactionPattern.equals(m.group(1))) {
          unsupportedTransaction(""String_Node_Str"" + ""String_Node_Str"");
          return;
        }
 else {
          fullTransactionPatterns.put(pattern,m.group(1) + TRANSACTION_DESTINATION_SUFFIX + m.group(2));
        }
      }
 else {
        baseTransactionPattern=m.group(1);
        fullTransactionPatterns.put(pattern,m.group(1) + TRANSACTION_DESTINATION_SUFFIX + m.group(2));
      }
    }
    supportTransaction=Boolean.TRUE;
  }
}",0.8633153302866639
82726,"public void testPublish() throws Exception {
  try {
    FileSystemResolver resolver=new FileSystemResolver();
    resolver.setName(""String_Node_Str"");
    resolver.setSettings(settings);
    assertEquals(""String_Node_Str"",resolver.getName());
    resolver.addIvyPattern(""String_Node_Str"" + FS + ""String_Node_Str""+ FS+ ""String_Node_Str""+ FS+ ""String_Node_Str""+ FS+ ""String_Node_Str""+ FS+ ""String_Node_Str""+ FS+ ""String_Node_Str"");
    resolver.addArtifactPattern(""String_Node_Str"" + ""String_Node_Str"");
    ModuleRevisionId mrid=ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    Artifact ivyArtifact=new DefaultArtifact(mrid,new Date(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    Artifact artifact=new DefaultArtifact(mrid,new Date(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    File src=new File(""String_Node_Str"");
    boolean successfullyPublished=false;
    resolver.beginPublishTransaction(mrid,false);
    try {
      resolver.publish(ivyArtifact,src,false);
      resolver.publish(artifact,src,false);
      resolver.commitPublishTransaction();
      successfullyPublished=true;
    }
  finally {
      if (!successfullyPublished)       resolver.abortPublishTransaction();
    }
    assertTrue(new File(""String_Node_Str"").exists());
    assertTrue(new File(""String_Node_Str"").exists());
  }
  finally {
    FileUtil.forceDelete(new File(""String_Node_Str""));
  }
}","public void testPublish() throws Exception {
  try {
    FileSystemResolver resolver=new FileSystemResolver();
    resolver.setName(""String_Node_Str"");
    resolver.setSettings(settings);
    assertEquals(""String_Node_Str"",resolver.getName());
    resolver.addIvyPattern(""String_Node_Str"" + FS + ""String_Node_Str""+ FS+ ""String_Node_Str""+ FS+ ""String_Node_Str""+ FS+ ""String_Node_Str""+ FS+ ""String_Node_Str""+ FS+ ""String_Node_Str"");
    resolver.addArtifactPattern(""String_Node_Str"" + ""String_Node_Str"");
    ModuleRevisionId mrid=ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    Artifact ivyArtifact=new DefaultArtifact(mrid,new Date(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    Artifact artifact=new DefaultArtifact(mrid,new Date(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    File src=new File(""String_Node_Str"");
    resolver.beginPublishTransaction(mrid,false);
    resolver.publish(ivyArtifact,src,false);
    resolver.publish(artifact,src,false);
    resolver.commitPublishTransaction();
    assertTrue(new File(""String_Node_Str"").exists());
    assertTrue(new File(""String_Node_Str"").exists());
  }
  finally {
    FileUtil.forceDelete(new File(""String_Node_Str""));
  }
}",0.792859799181852
82727,"public void addDest(MRIDRule dest){
  if (dest != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.dest=dest;
}","public void addDest(MRIDRule dest){
  if (this.dest != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.dest=dest;
}",0.9824561403508772
82728,"public void addTosystem(MRIDTransformationRule toSystem){
  if (toSystem != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.toSystem=toSystem;
}","public void addTosystem(MRIDTransformationRule toSystem){
  if (this.toSystem != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.toSystem=toSystem;
}",0.9858356940509916
82729,"public void addFromsystem(MRIDTransformationRule fromSystem){
  if (fromSystem != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.fromSystem=fromSystem;
}","public void addFromsystem(MRIDTransformationRule fromSystem){
  if (this.fromSystem != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.fromSystem=fromSystem;
}",0.9865951742627346
82730,"public void setXslfile(String xslFile){
  this.xslFile=xslFile;
}","public void setXslfile(File xslFile){
  this.xslFile=xslFile;
}",0.9375
82731,"private String getStylePath(File cache,String styleResourceName) throws IOException {
  File style=new File(cache,styleResourceName);
  FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(styleResourceName),style,null);
  return style.getAbsolutePath();
}","private File getStylePath(File cache,String styleResourceName) throws IOException {
  File style=new File(cache,styleResourceName);
  FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(styleResourceName),style,null);
  return style;
}",0.9444444444444444
82732,"private void genStyled(File cache,String organisation,String module,String[] confs,String style,String ext) throws IOException {
  File out;
  if (todir != null) {
    out=todir;
  }
 else {
    out=new File(""String_Node_Str"");
  }
  XSLTProcess xslt=new XSLTProcess();
  xslt.setTaskName(getTaskName());
  xslt.setProject(getProject());
  xslt.init();
  xslt.setDestdir(out);
  xslt.setBasedir(cache);
  xslt.setStyle(style);
  XSLTProcess.Param param=xslt.createParam();
  param.setName(""String_Node_Str"");
  param.setExpression(conf);
  param=xslt.createParam();
  param.setName(""String_Node_Str"");
  param.setExpression(xslext);
  for (Iterator it=params.iterator(); it.hasNext(); ) {
    param=(XSLTProcess.Param)it.next();
    XSLTProcess.Param realParam=xslt.createParam();
    realParam.setName(param.getName());
    realParam.setExpression(param.getExpression());
  }
  CacheManager cacheMgr=getIvyInstance().getCacheManager(cache);
  for (int i=0; i < confs.length; i++) {
    File reportFile=cacheMgr.getConfigurationResolveReportInCache(resolveId,confs[i]);
    File outFile=new File(out,IvyPatternHelper.substitute(outputpattern,organisation,module,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ext,confs[i]));
    xslt.setIn(reportFile);
    xslt.setOut(outFile);
    xslt.execute();
  }
}","private void genStyled(File cache,String organisation,String module,String[] confs,File style,String ext) throws IOException {
  CacheManager cacheMgr=getIvyInstance().getCacheManager(cache);
  File out;
  if (todir != null) {
    out=todir;
  }
 else {
    out=new File(""String_Node_Str"");
  }
  InputStream xsltStream=null;
  try {
    xsltStream=new BufferedInputStream(new FileInputStream(style));
    Source xsltSource=new StreamSource(xsltStream,JAXPUtils.getSystemId(style));
    TransformerFactory tFactory=TransformerFactory.newInstance();
    Transformer transformer=tFactory.newTransformer(xsltSource);
    transformer.setParameter(""String_Node_Str"",conf);
    transformer.setParameter(""String_Node_Str"",xslext);
    for (Iterator it=params.iterator(); it.hasNext(); ) {
      XSLTProcess.Param param=(XSLTProcess.Param)it.next();
      transformer.setParameter(param.getName(),param.getExpression());
    }
    for (int i=0; i < confs.length; i++) {
      File reportFile=cacheMgr.getConfigurationResolveReportInCache(resolveId,confs[i]);
      File outFile=new File(out,IvyPatternHelper.substitute(outputpattern,organisation,module,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ext,confs[i]));
      log(""String_Node_Str"" + reportFile + ""String_Node_Str""+ outFile);
      File outFileDir=outFile.getParentFile();
      if (!outFileDir.exists()) {
        if (!outFileDir.mkdirs()) {
          throw new BuildException(""String_Node_Str"" + outFileDir.getAbsolutePath());
        }
      }
      InputStream inStream=null;
      OutputStream outStream=null;
      try {
        inStream=new BufferedInputStream(new FileInputStream(reportFile));
        outStream=new BufferedOutputStream(new FileOutputStream(outFile));
        StreamResult res=new StreamResult(outStream);
        Source src=new StreamSource(inStream,JAXPUtils.getSystemId(style));
        transformer.transform(src,res);
      }
 catch (      TransformerException e) {
        throw new BuildException(e);
      }
 finally {
        if (inStream != null) {
          try {
            inStream.close();
          }
 catch (          IOException e) {
          }
        }
        if (outStream != null) {
          try {
            outStream.close();
          }
 catch (          IOException e) {
          }
        }
      }
    }
  }
 catch (  TransformerConfigurationException e) {
    throw new BuildException(e);
  }
 finally {
    if (xsltStream != null) {
      try {
        xsltStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.2573795960642154
82733,"public String getXslfile(){
  return xslFile;
}","public File getXslfile(){
  return xslFile;
}",0.9130434782608696
82734,"private String getReportStylePath(File cache) throws IOException {
  if (xslFile != null) {
    return xslFile;
  }
  File style=new File(cache,""String_Node_Str"");
  FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(""String_Node_Str""),style,null);
  return style.getAbsolutePath();
}","private File getReportStylePath(File cache) throws IOException {
  if (xslFile != null) {
    return xslFile;
  }
  File style=new File(cache,""String_Node_Str"");
  FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(""String_Node_Str""),style,null);
  return style;
}",0.950354609929078
82735,"public void toIvyFile(InputStream is,Resource res,File destFile,ModuleDescriptor md) throws IOException, ParseException {
  try {
    Namespace ns=null;
    if (md instanceof DefaultModuleDescriptor) {
      DefaultModuleDescriptor dmd=(DefaultModuleDescriptor)md;
      ns=dmd.getNamespace();
    }
    XmlModuleDescriptorUpdater.update(null,is,destFile,Collections.EMPTY_MAP,md.getStatus(),md.getResolvedModuleRevisionId().getRevision(),md.getResolvedPublicationDate(),ns,false,null);
  }
 catch (  SAXException e) {
    ParseException ex=new ParseException(""String_Node_Str"" + res,0);
    ex.initCause(e);
    throw ex;
  }
 finally {
    if (is != null) {
      is.close();
    }
  }
}","public void toIvyFile(InputStream is,Resource res,File destFile,ModuleDescriptor md) throws IOException, ParseException {
  try {
    Namespace ns=null;
    if (md instanceof DefaultModuleDescriptor) {
      DefaultModuleDescriptor dmd=(DefaultModuleDescriptor)md;
      ns=dmd.getNamespace();
    }
    XmlModuleDescriptorUpdater.update(IvyContext.getContext().getSettings(),is,res,destFile,Collections.EMPTY_MAP,md.getStatus(),md.getResolvedModuleRevisionId().getRevision(),md.getResolvedPublicationDate(),ns,true,null);
  }
 catch (  SAXException e) {
    ParseException ex=new ParseException(""String_Node_Str"" + res,0);
    ex.initCause(e);
    throw ex;
  }
 finally {
    if (is != null) {
      is.close();
    }
  }
}",0.9603960396039604
82736,"public void setPrefix(String prefix){
  this.prefix=prefix;
  if (!prefix.endsWith(""String_Node_Str"")) {
    prefix+=""String_Node_Str"";
  }
}","public void setPrefix(String prefix){
  this.prefix=prefix;
  if (!prefix.endsWith(""String_Node_Str"")) {
    this.prefix+=""String_Node_Str"";
  }
}",0.9825783972125436
82737,"protected void ensureResolved(boolean haltOnFailure,boolean useOrigin,boolean transitive,String org,String module,String conf,String resolveId,File cache){
  ensureMessageInitialised();
  String[] confs=null;
  if (resolveId != null) {
    confs=getConfsToResolve(resolveId,conf);
  }
 else {
    confs=getConfsToResolve(org,module,conf,false);
  }
  if (confs.length > 0) {
    IvyResolve resolve=createResolve(haltOnFailure,useOrigin);
    resolve.setCache(cache);
    resolve.setTransitive(transitive);
    resolve.setConf(StringUtils.join(confs,""String_Node_Str""));
    resolve.setResolveId(resolveId);
    resolve.execute();
  }
}","protected void ensureResolved(boolean haltOnFailure,boolean useOrigin,boolean transitive,String org,String module,String conf,String resolveId,File cache){
  ensureMessageInitialised();
  String[] confs=null;
  if (resolveId != null) {
    confs=getConfsToResolve(resolveId,conf);
  }
 else {
    confs=getConfsToResolve(org,module,conf,false);
  }
  if (confs.length > 0) {
    IvyResolve resolve=createResolve(haltOnFailure,useOrigin);
    resolve.setFile(_file);
    resolve.setCache(cache);
    resolve.setTransitive(transitive);
    resolve.setConf(StringUtils.join(confs,""String_Node_Str""));
    resolve.setResolveId(resolveId);
    resolve.execute();
  }
}",0.9784283513097072
82738,"protected IvyResolve createResolve(boolean haltOnFailure,boolean useOrigin){
  Message.verbose(""String_Node_Str"");
  IvyResolve resolve=new IvyResolve();
  resolve.setProject(getProject());
  resolve.setHaltonfailure(haltOnFailure);
  resolve.setUseOrigin(useOrigin);
  resolve.setValidate(isValidate());
  resolve.setFile(_file);
  return resolve;
}","protected IvyResolve createResolve(boolean haltOnFailure,boolean useOrigin){
  Message.verbose(""String_Node_Str"");
  IvyResolve resolve=new IvyResolve();
  resolve.setProject(getProject());
  resolve.setHaltonfailure(haltOnFailure);
  resolve.setUseOrigin(useOrigin);
  resolve.setValidate(isValidate());
  return resolve;
}",0.9614243323442137
82739,"protected ResolveReport getResolvedReport(){
  return getResolvedReport(getOrganisation(),isInline() ? getModule() + ""String_Node_Str"" : getModule());
}","protected ResolveReport getResolvedReport(){
  return getResolvedReport(getOrganisation(),isInline() ? getModule() + ""String_Node_Str"" : getModule(),_resolveId);
}",0.9650793650793652
82740,"protected ResolveReport getResolvedReport(String org,String module,boolean strict){
  return (ResolveReport)getReference(""String_Node_Str"",org,module,strict);
}","protected ResolveReport getResolvedReport(String org,String module,String resolveId){
  ResolveReport result=null;
  if (resolveId == null) {
    result=(ResolveReport)getReference(""String_Node_Str"",org,module,false);
  }
 else {
    result=(ResolveReport)getReference(""String_Node_Str"" + resolveId,null,null,false);
  }
  return result;
}",0.5370741482965932
82741,"protected void prepareAndCheck(){
  Ivy ivy=getIvyInstance();
  IvySettings settings=ivy.getSettings();
  boolean orgAndModSetManually=(_organisation != null) && (_module != null);
  _organisation=getProperty(_organisation,settings,""String_Node_Str"");
  _module=getProperty(_module,settings,""String_Node_Str"");
  if (isInline()) {
    _conf=_conf == null ? ""String_Node_Str"" : _conf;
    if (_organisation == null) {
      throw new BuildException(""String_Node_Str"");
    }
    if (_module == null) {
      throw new BuildException(""String_Node_Str"");
    }
    if (_resolveId == null) {
      _resolveId=ResolveOptions.getDefaultResolveId(getResolvedModuleId());
    }
    String[] toResolve=getConfsToResolve(getOrganisation(),getModule() + ""String_Node_Str"",_conf,true);
    if (toResolve.length > 0) {
      Message.verbose(""String_Node_Str"" + getOrganisation() + ""String_Node_Str""+ getModule()+ ""String_Node_Str""+ getRevision()+ ""String_Node_Str""+ StringUtils.join(toResolve,""String_Node_Str"")+ ""String_Node_Str"");
      IvyResolve resolve=createResolve(isHaltonfailure(),isUseOrigin());
      resolve.setOrganisation(getOrganisation());
      resolve.setModule(getModule());
      resolve.setRevision(getRevision());
      resolve.setInline(true);
      resolve.setConf(_conf);
      resolve.execute();
    }
 else {
      Message.verbose(""String_Node_Str"" + getOrganisation() + ""String_Node_Str""+ getModule()+ ""String_Node_Str""+ getRevision()+ ""String_Node_Str""+ _conf+ ""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(_conf)) {
      _conf=StringUtils.join(getResolvedConfigurations(getOrganisation(),getModule() + ""String_Node_Str"",true),""String_Node_Str"");
    }
  }
 else {
    Message.debug(""String_Node_Str"");
    if (!orgAndModSetManually) {
      ensureResolved(isHaltonfailure(),isUseOrigin(),isTransitive(),getOrganisation(),getModule(),getProperty(_conf,settings,""String_Node_Str""));
    }
    _conf=getProperty(_conf,settings,""String_Node_Str"");
    if (""String_Node_Str"".equals(_conf)) {
      _conf=getProperty(settings,""String_Node_Str"");
      if (_conf == null) {
        throw new BuildException(""String_Node_Str"");
      }
    }
  }
  _organisation=getProperty(_organisation,settings,""String_Node_Str"");
  _module=getProperty(_module,settings,""String_Node_Str"");
  if (_organisation == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_module == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_conf == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_cache == null) {
    _cache=settings.getDefaultCache();
  }
  if (_resolveId == null) {
    _resolveId=ResolveOptions.getDefaultResolveId(getResolvedModuleId());
  }
  _artifactFilter=FilterHelper.getArtifactTypeFilter(_type);
}","protected void prepareAndCheck(){
  Ivy ivy=getIvyInstance();
  IvySettings settings=ivy.getSettings();
  boolean orgAndModSetManually=(_organisation != null) && (_module != null);
  _organisation=getProperty(_organisation,settings,""String_Node_Str"");
  _module=getProperty(_module,settings,""String_Node_Str"");
  if (isInline()) {
    _conf=_conf == null ? ""String_Node_Str"" : _conf;
    if (_organisation == null) {
      throw new BuildException(""String_Node_Str"");
    }
    if (_module == null) {
      throw new BuildException(""String_Node_Str"");
    }
    if (_resolveId == null) {
      _resolveId=ResolveOptions.getDefaultResolveId(getResolvedModuleId());
    }
    String[] toResolve=getConfsToResolve(getOrganisation(),getModule() + ""String_Node_Str"",_conf,true);
    if (toResolve.length > 0) {
      Message.verbose(""String_Node_Str"" + getOrganisation() + ""String_Node_Str""+ getModule()+ ""String_Node_Str""+ getRevision()+ ""String_Node_Str""+ StringUtils.join(toResolve,""String_Node_Str"")+ ""String_Node_Str"");
      IvyResolve resolve=createResolve(isHaltonfailure(),isUseOrigin());
      resolve.setOrganisation(getOrganisation());
      resolve.setModule(getModule());
      resolve.setRevision(getRevision());
      resolve.setInline(true);
      resolve.setConf(_conf);
      resolve.execute();
    }
 else {
      Message.verbose(""String_Node_Str"" + getOrganisation() + ""String_Node_Str""+ getModule()+ ""String_Node_Str""+ getRevision()+ ""String_Node_Str""+ _conf+ ""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(_conf)) {
      _conf=StringUtils.join(getResolvedConfigurations(getOrganisation(),getModule() + ""String_Node_Str"",true),""String_Node_Str"");
    }
  }
 else {
    Message.debug(""String_Node_Str"");
    if (!orgAndModSetManually) {
      ensureResolved(isHaltonfailure(),isUseOrigin(),isTransitive(),getOrganisation(),getModule(),getProperty(_conf,settings,""String_Node_Str""),_resolveId);
    }
    _conf=getProperty(_conf,settings,""String_Node_Str"");
    if (""String_Node_Str"".equals(_conf)) {
      _conf=getProperty(settings,""String_Node_Str"");
      if (_conf == null) {
        throw new BuildException(""String_Node_Str"");
      }
    }
  }
  _organisation=getProperty(_organisation,settings,""String_Node_Str"");
  _module=getProperty(_module,settings,""String_Node_Str"");
  if (_organisation == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_module == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_conf == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_cache == null) {
    _cache=settings.getDefaultCache();
  }
  if (_resolveId == null) {
    _resolveId=ResolveOptions.getDefaultResolveId(getResolvedModuleId());
  }
  _artifactFilter=FilterHelper.getArtifactTypeFilter(_type);
}",0.998019801980198
82742,"public List getAllProblemMessages(){
  List ret=new ArrayList(_problemMessages);
  for (Iterator iter=_confReports.values().iterator(); iter.hasNext(); ) {
    ConfigurationResolveReport r=(ConfigurationResolveReport)iter.next();
    IvyNode[] unresolved=r.getUnresolvedDependencies();
    for (int i=0; i < unresolved.length; i++) {
      Exception e=unresolved[i].getProblem();
      if (e != null) {
        ret.add(""String_Node_Str"" + unresolved[i].getId() + ""String_Node_Str""+ (e instanceof RuntimeException ? e.getMessage() : e.toString()));
      }
 else {
        ret.add(""String_Node_Str"" + unresolved[i].getId());
      }
    }
    ArtifactDownloadReport[] adrs=r.getFailedArtifactsReports();
    for (int i=0; i < adrs.length; i++) {
      ret.add(""String_Node_Str"" + adrs[i].getArtifact());
    }
  }
  return ret;
}","public List getAllProblemMessages(){
  List ret=new ArrayList(_problemMessages);
  for (Iterator iter=_confReports.values().iterator(); iter.hasNext(); ) {
    ConfigurationResolveReport r=(ConfigurationResolveReport)iter.next();
    IvyNode[] unresolved=r.getUnresolvedDependencies();
    for (int i=0; i < unresolved.length; i++) {
      Exception e=unresolved[i].getProblem();
      if (e != null) {
        String errMsg=e instanceof RuntimeException ? e.getMessage() : e.toString();
        if (errMsg == null || errMsg.length() == 0 || ""String_Node_Str"".equals(errMsg)) {
          errMsg=e.getClass().getName() + ""String_Node_Str"" + e.getStackTrace()[0].toString();
        }
        ret.add(""String_Node_Str"" + unresolved[i].getId() + ""String_Node_Str""+ errMsg);
      }
 else {
        ret.add(""String_Node_Str"" + unresolved[i].getId());
      }
    }
    ArtifactDownloadReport[] adrs=r.getFailedArtifactsReports();
    for (int i=0; i < adrs.length; i++) {
      ret.add(""String_Node_Str"" + adrs[i].getArtifact());
    }
  }
  return ret;
}",0.8036189462480042
82743,"protected String readResponse(final boolean sendErrorAsResponse,long timeout) throws IOException {
  final StringBuffer response=new StringBuffer();
  final IOException[] exc=new IOException[1];
  final boolean[] done=new boolean[1];
  Runnable r=new Runnable(){
    public void run(){
      try {
        int c;
        while ((c=_in.read()) != -1) {
          response.append((char)c);
          if (response.length() >= PROMPT.length() && response.substring(response.length() - PROMPT.length(),response.length()).equals(PROMPT)) {
            response.setLength(response.length() - PROMPT.length());
            break;
          }
        }
        if (_errors.length() > 0) {
          if (sendErrorAsResponse) {
            response.append(_errors);
            _errors.setLength(0);
          }
 else {
            throw new IOException(chomp(_errors).toString());
          }
        }
        chomp(response);
        done[0]=true;
      }
 catch (      IOException e) {
        exc[0]=e;
      }
    }
  }
;
  Thread reader=null;
  if (timeout == 0) {
    r.run();
  }
 else {
    reader=new Thread(r);
    reader.start();
    try {
      reader.join(timeout);
    }
 catch (    InterruptedException e) {
    }
  }
  updateLastCommandTime();
  if (exc[0] != null) {
    throw exc[0];
  }
 else   if (!done[0]) {
    if (reader != null && reader.isAlive()) {
      reader.stop();
    }
    throw new IOException(""String_Node_Str"" + getHost());
  }
 else {
    if (""String_Node_Str"".equals(response)) {
      Message.info(""String_Node_Str"" + getHost() + ""String_Node_Str"");
      closeConnection();
      throw new IOException(""String_Node_Str"" + getHost());
    }
    Message.debug(""String_Node_Str"" + response + ""String_Node_Str""+ getHost());
    return response.toString();
  }
}","protected synchronized String readResponse(final boolean sendErrorAsResponse,long timeout) throws IOException {
  final StringBuffer response=new StringBuffer();
  final IOException[] exc=new IOException[1];
  final boolean[] done=new boolean[1];
  Runnable r=new Runnable(){
    public void run(){
synchronized (VsftpRepository.this) {
        try {
          int c;
          boolean getPrompt=false;
          for (int attempts=0; !getPrompt && attempts < 5; attempts++) {
            while ((c=_in.read()) != -1) {
              attempts=0;
              response.append((char)c);
              if (response.length() >= PROMPT.length() && response.substring(response.length() - PROMPT.length(),response.length()).equals(PROMPT)) {
                response.setLength(response.length() - PROMPT.length());
                getPrompt=true;
                break;
              }
            }
            if (!getPrompt) {
              try {
                Thread.sleep(50);
              }
 catch (              InterruptedException e) {
                break;
              }
            }
          }
          if (getPrompt) {
            if (_errorsLastUpdateTime == 0) {
              _errorsLastUpdateTime=_lastCommand;
            }
            while ((System.currentTimeMillis() - _errorsLastUpdateTime) < 50) {
              try {
                Thread.sleep(30);
              }
 catch (              InterruptedException e) {
                break;
              }
            }
          }
          if (_errors.length() > 0) {
            if (sendErrorAsResponse) {
              response.append(_errors);
              _errors.setLength(0);
            }
 else {
              throw new IOException(chomp(_errors).toString());
            }
          }
          chomp(response);
          done[0]=true;
        }
 catch (        IOException e) {
          exc[0]=e;
        }
 finally {
          VsftpRepository.this.notify();
        }
      }
    }
  }
;
  Thread reader=null;
  if (timeout == 0) {
    r.run();
  }
 else {
    reader=new Thread(r);
    reader.start();
    try {
      wait(timeout);
    }
 catch (    InterruptedException e) {
    }
  }
  updateLastCommandTime();
  if (exc[0] != null) {
    throw exc[0];
  }
 else   if (!done[0]) {
    if (reader != null && reader.isAlive()) {
      reader.interrupt();
      for (int i=0; i < 5 && reader.isAlive(); i++) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      if (reader.isAlive()) {
        reader.stop();
      }
    }
    throw new IOException(""String_Node_Str"" + getHost());
  }
 else {
    if (""String_Node_Str"".equals(response)) {
      Message.info(""String_Node_Str"" + getHost() + ""String_Node_Str"");
      closeConnection();
      throw new IOException(""String_Node_Str"" + getHost());
    }
    Message.debug(""String_Node_Str"" + response + ""String_Node_Str""+ getHost());
    return response.toString();
  }
}",0.7006902321690023
82744,"public void run(){
  int c;
  try {
    while (_err != null && (c=_err.read()) != -1) {
      _errors.append((char)c);
    }
  }
 catch (  IOException e) {
  }
}","public void run(){
  int c;
  try {
    while (_err != null && (c=_err.read()) != -1) {
      _errors.append((char)c);
      _errorsLastUpdateTime=System.currentTimeMillis();
    }
  }
 catch (  IOException e) {
  }
}",0.8518518518518519
82745,"protected String sendCommand(String command,boolean sendErrorAsResponse,boolean single,long timeout) throws IOException {
  single=false;
  checkInterrupted();
  _inCommand=true;
  if (!single || _in != null) {
    ensureConnectionOpened();
    Message.debug(""String_Node_Str"" + command + ""String_Node_Str""+ getHost());
    updateLastCommandTime();
    _out.println(command);
    _out.flush();
  }
 else {
    sendSingleCommand(command);
  }
  try {
    return readResponse(sendErrorAsResponse,timeout);
  }
  finally {
    _inCommand=false;
    if (single) {
      closeConnection();
    }
  }
}","protected String sendCommand(String command,boolean sendErrorAsResponse,boolean single,long timeout) throws IOException {
  single=false;
  checkInterrupted();
  _inCommand=true;
  _errorsLastUpdateTime=0;
synchronized (this) {
    if (!single || _in != null) {
      ensureConnectionOpened();
      Message.debug(""String_Node_Str"" + command + ""String_Node_Str""+ getHost());
      updateLastCommandTime();
      _out.println(command);
      _out.flush();
    }
 else {
      sendSingleCommand(command);
    }
  }
  try {
    return readResponse(sendErrorAsResponse,timeout);
  }
  finally {
    _inCommand=false;
    if (single) {
      closeConnection();
    }
  }
}",0.943784639746635
82746,"private synchronized void closeConnection(){
  if (_connectionCleaner != null) {
    _connectionCleaner.interrupt();
  }
  if (_errorsReader != null) {
    _errorsReader.interrupt();
  }
  try {
    _process.destroy();
  }
 catch (  Exception ex) {
  }
  try {
    _in.close();
  }
 catch (  Exception e) {
  }
  try {
    _err.close();
  }
 catch (  Exception e) {
  }
  try {
    _out.close();
  }
 catch (  Exception e) {
  }
  _connectionCleaner=null;
  _errorsReader=null;
  _process=null;
  _in=null;
  _out=null;
  _err=null;
}","private synchronized void closeConnection(){
  if (_connectionCleaner != null) {
    _connectionCleaner.interrupt();
  }
  if (_errorsReader != null) {
    _errorsReader.interrupt();
  }
  try {
    _process.destroy();
  }
 catch (  Exception ex) {
  }
  try {
    _in.close();
  }
 catch (  Exception e) {
  }
  try {
    _err.close();
  }
 catch (  Exception e) {
  }
  try {
    _out.close();
  }
 catch (  Exception e) {
  }
  _connectionCleaner=null;
  _errorsReader=null;
  _process=null;
  _in=null;
  _out=null;
  _err=null;
  Message.debug(""String_Node_Str"" + getHost() + ""String_Node_Str"");
}",0.9383802816901408
82747,"private void exec(String command) throws IOException {
  Message.debug(""String_Node_Str"" + command + ""String_Node_Str"");
  _process=Runtime.getRuntime().exec(command);
  _in=new InputStreamReader(_process.getInputStream());
  _err=new InputStreamReader(_process.getErrorStream());
  _out=new PrintWriter(_process.getOutputStream());
  _errorsReader=new Thread(){
    public void run(){
      int c;
      try {
        while (_err != null && (c=_err.read()) != -1) {
          _errors.append((char)c);
        }
      }
 catch (      IOException e) {
      }
    }
  }
;
  _errorsReader.start();
}","private void exec(String command) throws IOException {
  Message.debug(""String_Node_Str"" + command + ""String_Node_Str"");
  _process=Runtime.getRuntime().exec(command);
  _in=new InputStreamReader(_process.getInputStream());
  _err=new InputStreamReader(_process.getErrorStream());
  _out=new PrintWriter(_process.getOutputStream());
  _errorsReader=new Thread(){
    public void run(){
      int c;
      try {
        while (_err != null && (c=_err.read()) != -1) {
          _errors.append((char)c);
          _errorsLastUpdateTime=System.currentTimeMillis();
        }
      }
 catch (      IOException e) {
      }
    }
  }
;
  _errorsReader.start();
}",0.9521531100478468
82748,"public ResolvedModuleRevision findModule(ModuleRevisionId id){
  DependencyResolver r=getResolver(id.getModuleId());
  if (r == null) {
    throw new IllegalStateException(""String_Node_Str"" + id.getModuleId());
  }
  DefaultModuleDescriptor md=genCallerMD(id,new String[]{""String_Node_Str""},false,false);
  try {
    return r.getDependency(new DefaultDependencyDescriptor(id,true),new ResolveData(this,getDefaultCache(),null,new ConfigurationResolveReport(this,md,""String_Node_Str"",null,getDefaultCache()),false));
  }
 catch (  ParseException e) {
    throw new RuntimeException(""String_Node_Str"" + id + ""String_Node_Str""+ e,e);
  }
}","public ResolvedModuleRevision findModule(ModuleRevisionId id){
  DependencyResolver r=getResolver(id.getModuleId());
  if (r == null) {
    throw new IllegalStateException(""String_Node_Str"" + id.getModuleId());
  }
  DefaultModuleDescriptor md=DefaultModuleDescriptor.newCallerInstance(id,new String[]{""String_Node_Str""},false,false);
  try {
    return r.getDependency(new DefaultDependencyDescriptor(id,true),new ResolveData(this,getDefaultCache(),null,new ConfigurationResolveReport(this,md,""String_Node_Str"",null,getDefaultCache()),false));
  }
 catch (  ParseException e) {
    throw new RuntimeException(""String_Node_Str"" + id + ""String_Node_Str""+ e,e);
  }
}",0.9692307692307692
82749,"/** 
 * @param rootModuleConf
 * @param mrid
 * @param callerConf
 * @param dependencyConfs '*' must have been resolved
 * @param dd the dependency revision id asked by the caller
 */
public void addCaller(String rootModuleConf,IvyNode node,String callerConf,String[] dependencyConfs,DependencyDescriptor dd){
  ModuleDescriptor md=node.getDescriptor();
  ModuleRevisionId mrid=md.getModuleRevisionId();
  if (mrid.getModuleId().equals(getId().getModuleId())) {
    throw new IllegalArgumentException(""String_Node_Str"" + getId());
  }
  Map callers=(Map)_callersByRootConf.get(rootModuleConf);
  if (callers == null) {
    callers=new HashMap();
    _callersByRootConf.put(rootModuleConf,callers);
  }
  Caller caller=(Caller)callers.get(mrid);
  if (caller == null) {
    caller=new Caller(md,mrid,dd,node.canExclude(rootModuleConf));
    callers.put(mrid,caller);
  }
  caller.addConfiguration(callerConf,dependencyConfs);
  IvyNode parent=node.getRealNode();
  for (Iterator iter=parent._allCallers.keySet().iterator(); iter.hasNext(); ) {
    ModuleId mid=(ModuleId)iter.next();
    _allCallers.put(mid,parent);
  }
  _allCallers.put(mrid.getModuleId(),node);
  _isCircular=_allCallers.keySet().contains(getId().getModuleId());
  if (_isCircular) {
    IvyContext.getContext().getCircularDependencyStrategy().handleCircularDependency(toMrids(findPath(getId().getModuleId()),this));
  }
}","/** 
 * @param rootModuleConf
 * @param mrid
 * @param callerConf
 * @param dependencyConfs '*' must have been resolved
 * @param dd the dependency revision id asked by the caller
 */
public void addCaller(String rootModuleConf,IvyNode node,String callerConf,String[] dependencyConfs,DependencyDescriptor dd){
  ModuleDescriptor md=node.getDescriptor();
  ModuleRevisionId mrid=node.getId();
  if (mrid.getModuleId().equals(getId().getModuleId())) {
    throw new IllegalArgumentException(""String_Node_Str"" + getId());
  }
  Map callers=(Map)_callersByRootConf.get(rootModuleConf);
  if (callers == null) {
    callers=new HashMap();
    _callersByRootConf.put(rootModuleConf,callers);
  }
  Caller caller=(Caller)callers.get(mrid);
  if (caller == null) {
    caller=new Caller(md,mrid,dd,node.canExclude(rootModuleConf));
    callers.put(mrid,caller);
  }
  caller.addConfiguration(callerConf,dependencyConfs);
  IvyNode parent=node.getRealNode();
  for (Iterator iter=parent._allCallers.keySet().iterator(); iter.hasNext(); ) {
    ModuleId mid=(ModuleId)iter.next();
    _allCallers.put(mid,parent);
  }
  _allCallers.put(mrid.getModuleId(),node);
  _isCircular=_allCallers.keySet().contains(getId().getModuleId());
  if (_isCircular) {
    IvyContext.getContext().getCircularDependencyStrategy().handleCircularDependency(toMrids(findPath(getId().getModuleId()),this));
  }
}",0.9898916967509024
82750,"protected void prepareAndCheck(){
  Ivy ivy=getIvyInstance();
  _organisation=getProperty(_organisation,ivy,""String_Node_Str"");
  _module=getProperty(_module,ivy,""String_Node_Str"");
  if (_org != null && getResolvedDescriptor(_org,_name + ""String_Node_Str"",true) == null) {
    IvyResolve resolve=createResolve(isHaltonfailure());
    resolve.setOrg(_org);
    resolve.setName(_name);
    resolve.setRev(_rev);
    String conf=_conf == null ? ""String_Node_Str"" : _conf;
    resolve.setConf(conf);
    resolve.execute();
    _conf=""String_Node_Str"";
  }
 else {
    ensureResolved(isHaltonfailure(),isTransitive(),getOrganisation(),getModule());
    _conf=getProperty(_conf,ivy,""String_Node_Str"");
    if (""String_Node_Str"".equals(_conf)) {
      _conf=getProperty(ivy,""String_Node_Str"");
      if (_conf == null) {
        throw new BuildException(""String_Node_Str"");
      }
    }
  }
  _organisation=getProperty(_organisation,ivy,""String_Node_Str"");
  _module=getProperty(_module,ivy,""String_Node_Str"");
  if (_cache == null) {
    _cache=ivy.getDefaultCache();
  }
  if (_organisation == null && _org == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_module == null && _org == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_conf == null) {
    throw new BuildException(""String_Node_Str"");
  }
  _artifactFilter=FilterHelper.getArtifactTypeFilter(_type);
}","protected void prepareAndCheck(){
  Ivy ivy=getIvyInstance();
  _organisation=getProperty(_organisation,ivy,""String_Node_Str"");
  _module=getProperty(_module,ivy,""String_Node_Str"");
  if (_org != null) {
    _conf=_conf == null ? ""String_Node_Str"" : _conf;
    String[] toResolve=getConfsToResolve(_org,_name + ""String_Node_Str"",_conf,true);
    if (toResolve.length > 0) {
      Message.verbose(""String_Node_Str"" + _org + ""String_Node_Str""+ _name+ ""String_Node_Str""+ _rev+ ""String_Node_Str""+ StringUtils.join(toResolve,""String_Node_Str"")+ ""String_Node_Str"");
      IvyResolve resolve=createResolve(isHaltonfailure());
      resolve.setOrg(_org);
      resolve.setName(_name);
      resolve.setRev(_rev);
      resolve.setConf(_conf);
      resolve.execute();
    }
 else {
      Message.verbose(""String_Node_Str"" + _org + ""String_Node_Str""+ _name+ ""String_Node_Str""+ _rev+ ""String_Node_Str""+ _conf+ ""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(_conf)) {
      _conf=StringUtils.join(getResolvedConfigurations(_org,_name + ""String_Node_Str"",true),""String_Node_Str"");
    }
  }
 else {
    Message.debug(""String_Node_Str"");
    ensureResolved(isHaltonfailure(),isTransitive(),getOrganisation(),getModule(),getProperty(_conf,ivy,""String_Node_Str""));
    _conf=getProperty(_conf,ivy,""String_Node_Str"");
    if (""String_Node_Str"".equals(_conf)) {
      _conf=getProperty(ivy,""String_Node_Str"");
      if (_conf == null) {
        throw new BuildException(""String_Node_Str"");
      }
    }
  }
  _organisation=getProperty(_organisation,ivy,""String_Node_Str"");
  _module=getProperty(_module,ivy,""String_Node_Str"");
  if (_cache == null) {
    _cache=ivy.getDefaultCache();
  }
  if (_organisation == null && _org == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_module == null && _org == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_conf == null) {
    throw new BuildException(""String_Node_Str"");
  }
  _artifactFilter=FilterHelper.getArtifactTypeFilter(_type);
}",0.7445127304653204
82751,"protected void setResolved(ResolveReport report,boolean keep){
  ModuleDescriptor md=report.getModuleDescriptor();
  if (keep) {
    getProject().addReference(""String_Node_Str"",report);
    getProject().addReference(""String_Node_Str"",md);
  }
  String suffix=md.getModuleRevisionId().getModuleId().getOrganisation() + ""String_Node_Str"" + md.getModuleRevisionId().getModuleId().getName();
  getProject().addReference(""String_Node_Str"" + suffix,report);
  getProject().addReference(""String_Node_Str"" + suffix,md);
}","protected void setResolved(ResolveReport report,boolean keep){
  ModuleDescriptor md=report.getModuleDescriptor();
  String[] confs=report.getConfigurations();
  if (keep) {
    getProject().addReference(""String_Node_Str"",report);
    getProject().addReference(""String_Node_Str"",confs);
    getProject().addReference(""String_Node_Str"",md);
  }
  String suffix=md.getModuleRevisionId().getModuleId().getOrganisation() + ""String_Node_Str"" + md.getModuleRevisionId().getModuleId().getName();
  getProject().addReference(""String_Node_Str"" + suffix,report);
  getProject().addReference(""String_Node_Str"" + suffix,md);
  getProject().addReference(""String_Node_Str"" + suffix,confs);
}",0.8621848739495799
82752,"protected void ensureResolved(boolean haltOnFailure,boolean transitive,String org,String module){
  ensureMessageInitialised();
  if (org != null && module != null) {
    return;
  }
  Object reference=getResolvedDescriptor(org,module);
  if (reference == null) {
    IvyResolve resolve=createResolve(haltOnFailure);
    resolve.setTransitive(transitive);
    resolve.execute();
  }
}","protected void ensureResolved(boolean haltOnFailure,boolean transitive,String org,String module,String conf){
  ensureMessageInitialised();
  if (org != null && module != null) {
    return;
  }
  String[] confs=getConfsToResolve(org,module,conf,false);
  if (confs.length > 0) {
    IvyResolve resolve=createResolve(haltOnFailure);
    resolve.setTransitive(transitive);
    resolve.setConf(StringUtils.join(confs,""String_Node_Str""));
    resolve.execute();
  }
}",0.7806603773584906
82753,"public ResolveReport resolve(ModuleDescriptor md,String[] confs,File cache,Date date,boolean validate,boolean useCacheOnly,boolean transitive,Filter artifactFilter) throws ParseException, IOException, FileNotFoundException {
  IvyContext.getContext().setIvy(this);
  DependencyResolver oldDictator=getDictatorResolver();
  if (useCacheOnly) {
    setDictatorResolver(new CacheResolver(this));
  }
  try {
    if (cache == null) {
      cache=getDefaultCache();
      IvyContext.getContext().setCache(cache);
    }
    if (confs.length == 1 && confs[0].equals(""String_Node_Str"")) {
      confs=md.getConfigurationsNames();
    }
    fireIvyEvent(new StartResolveEvent(this,md,confs));
    long start=System.currentTimeMillis();
    Message.info(""String_Node_Str"" + md.getResolvedModuleRevisionId() + (transitive ? ""String_Node_Str"" : ""String_Node_Str""));
    Message.info(""String_Node_Str"" + Arrays.asList(confs));
    Message.verbose(""String_Node_Str"" + validate);
    ResolveReport report=new ResolveReport(md);
    IvyNode[] dependencies=getDependencies(md,confs,cache,date,report,validate,transitive);
    Message.verbose(""String_Node_Str"");
    downloadArtifacts(dependencies,artifactFilter,report,cache);
    File ivyFileInCache=getResolvedIvyFileInCache(cache,md.getResolvedModuleRevisionId());
    md.toIvyFile(ivyFileInCache);
    File ivyPropertiesInCache=getResolvedIvyPropertiesInCache(cache,md.getResolvedModuleRevisionId());
    Properties props=new Properties();
    for (int i=0; i < dependencies.length; i++) {
      if (!dependencies[i].isCompletelyEvicted() && !dependencies[i].hasProblem()) {
        String rev=dependencies[i].getResolvedId().getRevision();
        String status=dependencies[i].getDescriptor().getStatus();
        props.put(dependencies[i].getId().encodeToString(),rev + ""String_Node_Str"" + status);
      }
    }
    props.store(new FileOutputStream(ivyPropertiesInCache),md.getResolvedModuleRevisionId() + ""String_Node_Str"");
    Message.verbose(""String_Node_Str"" + ivyFileInCache);
    Message.info(""String_Node_Str"");
    report.output(getReportOutputters(),cache);
    Message.verbose(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
    Message.sumupProblems();
    fireIvyEvent(new EndResolveEvent(this,md,confs,report));
    return report;
  }
  finally {
    setDictatorResolver(oldDictator);
  }
}","public ResolveReport resolve(ModuleDescriptor md,String[] confs,File cache,Date date,boolean validate,boolean useCacheOnly,boolean transitive,Filter artifactFilter) throws ParseException, IOException, FileNotFoundException {
  IvyContext.getContext().setIvy(this);
  DependencyResolver oldDictator=getDictatorResolver();
  if (useCacheOnly) {
    setDictatorResolver(new CacheResolver(this));
  }
  try {
    if (cache == null) {
      cache=getDefaultCache();
      IvyContext.getContext().setCache(cache);
    }
    if (confs.length == 1 && confs[0].equals(""String_Node_Str"")) {
      confs=md.getConfigurationsNames();
    }
    fireIvyEvent(new StartResolveEvent(this,md,confs));
    long start=System.currentTimeMillis();
    Message.info(""String_Node_Str"" + md.getResolvedModuleRevisionId() + (transitive ? ""String_Node_Str"" : ""String_Node_Str""));
    Message.info(""String_Node_Str"" + Arrays.asList(confs));
    Message.verbose(""String_Node_Str"" + validate);
    ResolveReport report=new ResolveReport(md);
    IvyNode[] dependencies=getDependencies(md,confs,cache,date,report,validate,transitive);
    Message.verbose(""String_Node_Str"");
    downloadArtifacts(dependencies,artifactFilter,report,cache);
    File ivyFileInCache=getResolvedIvyFileInCache(cache,md.getResolvedModuleRevisionId());
    md.toIvyFile(ivyFileInCache);
    File ivyPropertiesInCache=getResolvedIvyPropertiesInCache(cache,md.getResolvedModuleRevisionId());
    Properties props=new Properties();
    for (int i=0; i < dependencies.length; i++) {
      if (!dependencies[i].isCompletelyEvicted() && !dependencies[i].hasProblem()) {
        String rev=dependencies[i].getResolvedId().getRevision();
        String status=dependencies[i].getDescriptor().getStatus();
        props.put(dependencies[i].getId().encodeToString(),rev + ""String_Node_Str"" + status);
      }
    }
    props.store(new FileOutputStream(ivyPropertiesInCache),md.getResolvedModuleRevisionId() + ""String_Node_Str"");
    Message.verbose(""String_Node_Str"" + ivyFileInCache);
    Message.info(""String_Node_Str"");
    report.setProblemMessages(Message.getProblems());
    report.output(getReportOutputters(),cache);
    Message.verbose(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
    Message.sumupProblems();
    fireIvyEvent(new EndResolveEvent(this,md,confs,report));
    return report;
  }
  finally {
    setDictatorResolver(oldDictator);
  }
}",0.9887640449438202
82754,"private Class classForName(String className,boolean silentFail){
  try {
    return getClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    if (silentFail) {
      Message.warn(""String_Node_Str"" + className + ""String_Node_Str""+ _classpathURLs+ ""String_Node_Str"");
      return null;
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str""+ _classpathURLs+ ""String_Node_Str"");
    }
  }
}","private Class classForName(String className,boolean silentFail){
  try {
    return getClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    if (silentFail) {
      Message.info(""String_Node_Str"" + className + ""String_Node_Str""+ _classpathURLs+ ""String_Node_Str"");
      return null;
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str""+ _classpathURLs+ ""String_Node_Str"");
    }
  }
}",0.9912472647702408
82755,"public static void sumupProblems(){
  if (_problems.length() > 0) {
    info(""String_Node_Str"");
    info(_problems.toString());
    info(""String_Node_Str"");
    _problems=new StringBuffer();
  }
}","public static void sumupProblems(){
  if (_problems.size() > 0) {
    info(""String_Node_Str"");
    for (Iterator iter=_problems.iterator(); iter.hasNext(); ) {
      String msg=(String)iter.next();
      info(""String_Node_Str"" + msg + ""String_Node_Str"");
    }
    info(""String_Node_Str"");
    _problems.clear();
  }
}",0.2601941747572815
82756,"public static void error(String msg){
  if (_impl != null) {
    _impl.log(""String_Node_Str"" + msg,MSG_VERBOSE);
  }
 else {
    System.err.println(msg);
  }
  _problems.append(""String_Node_Str"" + msg).append(""String_Node_Str"");
}","public static void error(String msg){
  if (_impl != null) {
    _impl.log(""String_Node_Str"" + msg,MSG_VERBOSE);
  }
 else {
    System.err.println(msg);
  }
  _problems.add(""String_Node_Str"" + msg);
}",0.9280742459396752
82757,"public static void warn(String msg){
  if (_impl != null) {
    _impl.log(""String_Node_Str"" + msg,MSG_VERBOSE);
  }
 else {
    System.err.println(msg);
  }
  _problems.append(""String_Node_Str"" + msg).append(""String_Node_Str"");
}","public static void warn(String msg){
  if (_impl != null) {
    _impl.log(""String_Node_Str"" + msg,MSG_VERBOSE);
  }
 else {
    System.err.println(msg);
  }
  _problems.add(""String_Node_Str"" + msg);
}",0.9277389277389276
82758,"public FileContent getContent() throws IOException {
  if ((_content == null) && _isAvailable) {
    try {
      _content=_resourceImpl.getContent();
    }
 catch (    FileSystemException e) {
      IOException error=new IOException(e.getLocalizedMessage());
      error.initCause(e);
      throw error;
    }
  }
  return _content;
}","public FileContent getContent() throws IOException {
  if (_content == null) {
    try {
      _content=_resourceImpl.getContent();
    }
 catch (    FileSystemException e) {
      IOException error=new IOException(e.getLocalizedMessage());
      error.initCause(e);
      throw error;
    }
  }
  return _content;
}",0.9723076923076924
82759,"protected void parseDepsConfs(String[] conf,DefaultDependencyDescriptor dd,boolean useDefaultMappingToGuessRightOperande){
  for (int i=0; i < conf.length; i++) {
    String[] ops=conf[i].split(""String_Node_Str"");
    if (ops.length == 1) {
      String[] modConfs=ops[0].split(""String_Node_Str"");
      if (!useDefaultMappingToGuessRightOperande) {
        for (int j=0; j < modConfs.length; j++) {
          dd.addDependencyConfiguration(modConfs[j].trim(),modConfs[j].trim());
        }
      }
 else {
        for (int j=0; j < modConfs.length; j++) {
          String[] depConfs=getDefaultConfMappingDescriptor().getDependencyConfigurations(modConfs[j]);
          if (depConfs.length > 0) {
            for (int k=0; k < depConfs.length; k++) {
              String mappedDependency=evaluateCondition(depConfs[k].trim(),dd);
              if (mappedDependency != null) {
                dd.addDependencyConfiguration(modConfs[j].trim(),mappedDependency);
              }
            }
          }
 else {
            dd.addDependencyConfiguration(modConfs[j].trim(),modConfs[j].trim());
          }
        }
      }
    }
 else     if (ops.length == 2) {
      String[] modConfs=ops[0].split(""String_Node_Str"");
      String[] depConfs=ops[1].split(""String_Node_Str"");
      for (int j=0; j < modConfs.length; j++) {
        for (int k=0; k < depConfs.length; k++) {
          dd.addDependencyConfiguration(modConfs[j].trim(),depConfs[k].trim());
        }
      }
    }
 else {
      addError(""String_Node_Str"" + conf[i] + ""String_Node_Str""+ dd.getDependencyRevisionId());
    }
  }
  if (_md.isMappingOverride()) {
    addExtendingConfigurations(conf,dd,useDefaultMappingToGuessRightOperande);
  }
}","protected void parseDepsConfs(String[] conf,DefaultDependencyDescriptor dd,boolean useDefaultMappingToGuessRightOperande,boolean evaluateConditions){
  for (int i=0; i < conf.length; i++) {
    String[] ops=conf[i].split(""String_Node_Str"");
    if (ops.length == 1) {
      String[] modConfs=ops[0].split(""String_Node_Str"");
      if (!useDefaultMappingToGuessRightOperande) {
        for (int j=0; j < modConfs.length; j++) {
          dd.addDependencyConfiguration(modConfs[j].trim(),modConfs[j].trim());
        }
      }
 else {
        for (int j=0; j < modConfs.length; j++) {
          String[] depConfs=getDefaultConfMappingDescriptor().getDependencyConfigurations(modConfs[j]);
          if (depConfs.length > 0) {
            for (int k=0; k < depConfs.length; k++) {
              String mappedDependency=evaluateConditions ? evaluateCondition(depConfs[k].trim(),dd) : depConfs[k].trim();
              if (mappedDependency != null) {
                dd.addDependencyConfiguration(modConfs[j].trim(),mappedDependency);
              }
            }
          }
 else {
            dd.addDependencyConfiguration(modConfs[j].trim(),modConfs[j].trim());
          }
        }
      }
    }
 else     if (ops.length == 2) {
      String[] modConfs=ops[0].split(""String_Node_Str"");
      String[] depConfs=ops[1].split(""String_Node_Str"");
      for (int j=0; j < modConfs.length; j++) {
        for (int k=0; k < depConfs.length; k++) {
          String mappedDependency=evaluateConditions ? evaluateCondition(depConfs[k].trim(),dd) : depConfs[k].trim();
          if (mappedDependency != null) {
            dd.addDependencyConfiguration(modConfs[j].trim(),mappedDependency);
          }
        }
      }
    }
 else {
      addError(""String_Node_Str"" + conf[i] + ""String_Node_Str""+ dd.getDependencyRevisionId());
    }
  }
  if (_md.isMappingOverride()) {
    addExtendingConfigurations(conf,dd,useDefaultMappingToGuessRightOperande);
  }
}",0.9204265791632484
82760,"protected DependencyDescriptor getDefaultConfMappingDescriptor(){
  if (_defaultConfMappingDescriptor == null) {
    _defaultConfMappingDescriptor=new DefaultDependencyDescriptor(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),false);
    parseDepsConfs(_defaultConfMapping,_defaultConfMappingDescriptor,false);
  }
  return _defaultConfMappingDescriptor;
}","protected DependencyDescriptor getDefaultConfMappingDescriptor(){
  if (_defaultConfMappingDescriptor == null) {
    _defaultConfMappingDescriptor=new DefaultDependencyDescriptor(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),false);
    parseDepsConfs(_defaultConfMapping,_defaultConfMappingDescriptor,false,false);
  }
  return _defaultConfMappingDescriptor;
}",0.9924242424242424
82761,"public void removeSavedArtifactOrigin(File cache,Artifact artifact){
  PropertiesFile cdf=getCachedDataFile(cache,artifact.getModuleRevisionId());
  cdf.remove(""String_Node_Str"" + artifact.getName() + ""String_Node_Str"");
  cdf.remove(""String_Node_Str"" + artifact.getName() + ""String_Node_Str"");
  cdf.save();
}","public void removeSavedArtifactOrigin(File cache,Artifact artifact){
  PropertiesFile cdf=getCachedDataFile(cache,artifact.getModuleRevisionId());
  cdf.remove(""String_Node_Str"" + artifact.getName() + ""String_Node_Str""+ artifact.getExt()+ ""String_Node_Str"");
  cdf.remove(""String_Node_Str"" + artifact.getName() + ""String_Node_Str""+ artifact.getExt()+ ""String_Node_Str"");
  cdf.save();
}",0.8908045977011494
82762,"public ArtifactOrigin getSavedArtifactOrigin(File cache,Artifact artifact){
  PropertiesFile cdf=getCachedDataFile(cache,artifact.getModuleRevisionId());
  String location=cdf.getProperty(""String_Node_Str"" + artifact.getName() + ""String_Node_Str"");
  boolean isLocal=Boolean.valueOf(cdf.getProperty(""String_Node_Str"" + artifact.getName() + ""String_Node_Str"")).booleanValue();
  if (location == null) {
    return null;
  }
  return new ArtifactOrigin(isLocal,location);
}","public ArtifactOrigin getSavedArtifactOrigin(File cache,Artifact artifact){
  PropertiesFile cdf=getCachedDataFile(cache,artifact.getModuleRevisionId());
  String location=cdf.getProperty(""String_Node_Str"" + artifact.getName() + ""String_Node_Str""+ artifact.getExt()+ ""String_Node_Str"");
  boolean isLocal=Boolean.valueOf(cdf.getProperty(""String_Node_Str"" + artifact.getName() + ""String_Node_Str""+ artifact.getExt()+ ""String_Node_Str"")).booleanValue();
  if (location == null) {
    return null;
  }
  return new ArtifactOrigin(isLocal,location);
}",0.925343811394892
82763,"public void saveArtifactOrigin(File cache,Artifact artifact,ArtifactOrigin origin){
  PropertiesFile cdf=getCachedDataFile(cache,artifact.getModuleRevisionId());
  cdf.setProperty(""String_Node_Str"" + artifact.getName() + ""String_Node_Str"",String.valueOf(origin.isLocal()));
  cdf.setProperty(""String_Node_Str"" + artifact.getName() + ""String_Node_Str"",origin.getLocation());
  cdf.save();
}","public void saveArtifactOrigin(File cache,Artifact artifact,ArtifactOrigin origin){
  PropertiesFile cdf=getCachedDataFile(cache,artifact.getModuleRevisionId());
  cdf.setProperty(""String_Node_Str"" + artifact.getName() + ""String_Node_Str""+ artifact.getExt()+ ""String_Node_Str"",String.valueOf(origin.isLocal()));
  cdf.setProperty(""String_Node_Str"" + artifact.getName() + ""String_Node_Str""+ artifact.getExt()+ ""String_Node_Str"",origin.getLocation());
  cdf.save();
}",0.911007025761124
82764,"public String encodeToString(){
  StringBuffer buf=new StringBuffer();
  Map attributes=getAttributes();
  for (Iterator iter=attributes.keySet().iterator(); iter.hasNext(); ) {
    String attName=(String)iter.next();
    buf.append(attName).append(ENCODE_SEPARATOR).append(attributes.get(attName)).append(ENCODE_SEPARATOR);
  }
  return buf.toString();
}","public String encodeToString(){
  StringBuffer buf=new StringBuffer();
  Map attributes=getAttributes();
  for (Iterator iter=attributes.keySet().iterator(); iter.hasNext(); ) {
    String attName=(String)iter.next();
    buf.append(ENCODE_PREFIX).append(attName).append(ENCODE_SEPARATOR).append(ENCODE_PREFIX).append(attributes.get(attName)).append(ENCODE_SEPARATOR);
  }
  return buf.toString();
}",0.9416445623342176
82765,"public static ModuleRevisionId decode(String encoded){
  String[] parts=encoded.split(ENCODE_SEPARATOR);
  if (parts.length % 2 != 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str"");
  }
  Map attributes=new HashMap();
  for (int i=0; i < parts.length; i+=2) {
    String attName=parts[i];
    String attValue=parts[i + 1];
    attributes.put(attName,attValue);
  }
  String org=(String)attributes.remove(IvyPatternHelper.ORGANISATION_KEY);
  String mod=(String)attributes.remove(IvyPatternHelper.MODULE_KEY);
  String rev=(String)attributes.remove(IvyPatternHelper.REVISION_KEY);
  if (org == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str"");
  }
  if (mod == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str"");
  }
  if (rev == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str"");
  }
  return newInstance(org,mod,rev,attributes);
}","public static ModuleRevisionId decode(String encoded){
  String[] parts=encoded.split(ENCODE_SEPARATOR);
  if (parts.length % 2 != 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str"");
  }
  Map attributes=new HashMap();
  for (int i=0; i < parts.length; i+=2) {
    String attName=parts[i];
    if (!attName.startsWith(ENCODE_PREFIX)) {
      throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str""+ attName+ ""String_Node_Str""+ ENCODE_PREFIX);
    }
 else {
      attName=attName.substring(1);
    }
    String attValue=parts[i + 1];
    if (!attValue.startsWith(ENCODE_PREFIX)) {
      throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str""+ attValue+ ""String_Node_Str""+ ENCODE_PREFIX);
    }
 else {
      attValue=attValue.substring(1);
    }
    attributes.put(attName,attValue);
  }
  String org=(String)attributes.remove(IvyPatternHelper.ORGANISATION_KEY);
  String mod=(String)attributes.remove(IvyPatternHelper.MODULE_KEY);
  String rev=(String)attributes.remove(IvyPatternHelper.REVISION_KEY);
  if (org == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str"");
  }
  if (mod == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str"");
  }
  if (rev == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + encoded + ""String_Node_Str"");
  }
  return newInstance(org,mod,rev,attributes);
}",0.8096
82766,"public void execute() throws BuildException {
  Ivy ivy=getIvyInstance();
  try {
    if (_file == null) {
      _file=new File(getProject().getBaseDir(),getProperty(ivy,""String_Node_Str""));
    }
    _conf=getProperty(_conf,ivy,""String_Node_Str"");
    _revision=getProperty(_revision,ivy,""String_Node_Str"");
    _type=getProperty(_type,ivy,""String_Node_Str"");
    if (_cache == null) {
      _cache=ivy.getDefaultCache();
    }
    String[] confs=splitConfs(_conf);
    ResolveReport report=ivy.resolve(_file.toURL(),_revision,confs,_cache,getPubDate(_pubdate,null),doValidate(ivy),_useCacheOnly,FilterHelper.getArtifactTypeFilter(_type));
    if (isHaltonfailure() && report.hasError()) {
      throw new BuildException(""String_Node_Str"");
    }
    getProject().addReference(""String_Node_Str"",report);
    ModuleDescriptor md=report.getModuleDescriptor();
    setResolved(md);
    getProject().setProperty(""String_Node_Str"",md.getModuleRevisionId().getOrganisation());
    ivy.setVariable(""String_Node_Str"",md.getModuleRevisionId().getOrganisation());
    getProject().setProperty(""String_Node_Str"",md.getModuleRevisionId().getName());
    ivy.setVariable(""String_Node_Str"",md.getModuleRevisionId().getName());
    getProject().setProperty(""String_Node_Str"",md.getResolvedModuleRevisionId().getRevision());
    ivy.setVariable(""String_Node_Str"",md.getResolvedModuleRevisionId().getRevision());
    getProject().setProperty(""String_Node_Str"",String.valueOf(report.hasChanged()));
    ivy.setVariable(""String_Node_Str"",String.valueOf(report.hasChanged()));
    if (_conf.trim().equals(""String_Node_Str"")) {
      getProject().setProperty(""String_Node_Str"",mergeConfs(md.getConfigurationsNames()));
      ivy.setVariable(""String_Node_Str"",mergeConfs(md.getConfigurationsNames()));
    }
 else {
      getProject().setProperty(""String_Node_Str"",_conf);
      ivy.setVariable(""String_Node_Str"",_conf);
    }
  }
 catch (  MalformedURLException e) {
    throw new BuildException(""String_Node_Str"" + _file,e);
  }
catch (  ParseException e) {
    log(e.getMessage(),Project.MSG_ERR);
    throw new BuildException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new BuildException(""String_Node_Str"" + e.getMessage(),e);
  }
}","public void execute() throws BuildException {
  Ivy ivy=getIvyInstance();
  try {
    if (_file == null) {
      _file=new File(getProject().getBaseDir(),getProperty(ivy,""String_Node_Str""));
    }
    _conf=getProperty(_conf,ivy,""String_Node_Str"");
    _revision=getProperty(_revision,ivy,""String_Node_Str"");
    _type=getProperty(_type,ivy,""String_Node_Str"");
    if (_cache == null) {
      _cache=ivy.getDefaultCache();
    }
    String[] confs=splitConfs(_conf);
    ResolveReport report=ivy.resolve(_file.toURL(),_revision,confs,_cache,getPubDate(_pubdate,null),doValidate(ivy),_useCacheOnly,FilterHelper.getArtifactTypeFilter(_type));
    if (isHaltonfailure() && report.hasError()) {
      throw new BuildException(""String_Node_Str"");
    }
    getProject().addReference(""String_Node_Str"",report);
    ModuleDescriptor md=report.getModuleDescriptor();
    setResolved(md);
    getProject().setProperty(""String_Node_Str"",md.getModuleRevisionId().getOrganisation());
    ivy.setVariable(""String_Node_Str"",md.getModuleRevisionId().getOrganisation());
    getProject().setProperty(""String_Node_Str"",md.getModuleRevisionId().getName());
    ivy.setVariable(""String_Node_Str"",md.getModuleRevisionId().getName());
    getProject().setProperty(""String_Node_Str"",md.getResolvedModuleRevisionId().getRevision());
    ivy.setVariable(""String_Node_Str"",md.getResolvedModuleRevisionId().getRevision());
    boolean hasChanged=report.hasChanged();
    getProject().setProperty(""String_Node_Str"",String.valueOf(hasChanged));
    ivy.setVariable(""String_Node_Str"",String.valueOf(hasChanged));
    if (_conf.trim().equals(""String_Node_Str"")) {
      getProject().setProperty(""String_Node_Str"",mergeConfs(md.getConfigurationsNames()));
      ivy.setVariable(""String_Node_Str"",mergeConfs(md.getConfigurationsNames()));
    }
 else {
      getProject().setProperty(""String_Node_Str"",_conf);
      ivy.setVariable(""String_Node_Str"",_conf);
    }
  }
 catch (  MalformedURLException e) {
    throw new BuildException(""String_Node_Str"" + _file,e);
  }
catch (  ParseException e) {
    log(e.getMessage(),Project.MSG_ERR);
    throw new BuildException(""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new BuildException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9389755011135856
82767,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (""String_Node_Str"".equals(qName)) {
    _organisation=attributes.getValue(""String_Node_Str"");
    _module=attributes.getValue(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(qName)) {
    _revisionArtifacts=new ArrayList();
    _revision=attributes.getValue(""String_Node_Str"");
    _default=Boolean.valueOf(attributes.getValue(""String_Node_Str"")).booleanValue();
    String pos=attributes.getValue(""String_Node_Str"");
    _position=pos == null ? getMaxPos() + 1 : Integer.valueOf(pos).intValue();
    if (attributes.getValue(""String_Node_Str"") != null || attributes.getValue(""String_Node_Str"") != null) {
      _skip=true;
    }
 else {
      _revisionsMap.put(new Integer(_position),_revisionArtifacts);
      _mrid=ModuleRevisionId.newInstance(_organisation,_module,_revision,ExtendableItemHelper.getExtraAttributes(attributes,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
      _mrids.add(_mrid);
      if (_default) {
        _defaultMrids.add(_mrid);
      }
 else {
        _realMrids.add(_mrid);
      }
      try {
        _pubdate=Ivy.DATE_FORMAT.parse(attributes.getValue(""String_Node_Str""));
        _skip=false;
      }
 catch (      ParseException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + _organisation + ""String_Node_Str""+ _module+ ""String_Node_Str""+ _revision+ ""String_Node_Str""+ attributes.getValue(""String_Node_Str""));
      }
    }
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (_skip) {
      return;
    }
    String status=attributes.getValue(""String_Node_Str"");
    if (status != null && ""String_Node_Str"".equals(status)) {
      return;
    }
    String artifactName=attributes.getValue(""String_Node_Str"");
    String type=attributes.getValue(""String_Node_Str"");
    String ext=attributes.getValue(""String_Node_Str"");
    Artifact artifact=new DefaultArtifact(_mrid,_pubdate,artifactName,type,ext);
    _revisionArtifacts.add(artifact);
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (""String_Node_Str"".equals(qName)) {
    _organisation=attributes.getValue(""String_Node_Str"");
    _module=attributes.getValue(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(qName)) {
    _revisionArtifacts=new ArrayList();
    _revision=attributes.getValue(""String_Node_Str"");
    _default=Boolean.valueOf(attributes.getValue(""String_Node_Str"")).booleanValue();
    String pos=attributes.getValue(""String_Node_Str"");
    _position=pos == null ? getMaxPos() + 1 : Integer.valueOf(pos).intValue();
    if (attributes.getValue(""String_Node_Str"") != null || attributes.getValue(""String_Node_Str"") != null) {
      _skip=true;
    }
 else {
      _revisionsMap.put(new Integer(_position),_revisionArtifacts);
      _mrid=ModuleRevisionId.newInstance(_organisation,_module,_revision,ExtendableItemHelper.getExtraAttributes(attributes,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
      _mrids.add(_mrid);
      if (_default) {
        _defaultMrids.add(_mrid);
      }
 else {
        _realMrids.add(_mrid);
      }
      try {
        _pubdate=Ivy.DATE_FORMAT.parse(attributes.getValue(""String_Node_Str""));
        _skip=false;
      }
 catch (      ParseException e) {
        throw new IllegalArgumentException(""String_Node_Str"" + _organisation + ""String_Node_Str""+ _module+ ""String_Node_Str""+ _revision+ ""String_Node_Str""+ attributes.getValue(""String_Node_Str""));
      }
    }
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (_skip) {
      return;
    }
    String status=attributes.getValue(""String_Node_Str"");
    if (status != null && ""String_Node_Str"".equals(status)) {
      return;
    }
    String artifactName=attributes.getValue(""String_Node_Str"");
    String type=attributes.getValue(""String_Node_Str"");
    String ext=attributes.getValue(""String_Node_Str"");
    Artifact artifact=new DefaultArtifact(_mrid,_pubdate,artifactName,type,ext);
    _revisionArtifacts.add(artifact);
  }
}",0.9750692520775625
82768,"public void parse() throws Exception {
  SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();
  saxParser.parse(_report,new DefaultHandler(){
    private String _organisation;
    private String _module;
    private String _revision;
    private int _position;
    private Date _pubdate;
    private boolean _skip;
    private ModuleRevisionId _mrid;
    private boolean _default;
    private SortedMap _revisionsMap=new TreeMap();
    private List _revisionArtifacts=null;
    private int _maxPos;
    public void startElement(    String uri,    String localName,    String qName,    Attributes attributes) throws SAXException {
      if (""String_Node_Str"".equals(qName)) {
        _organisation=attributes.getValue(""String_Node_Str"");
        _module=attributes.getValue(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(qName)) {
        _revisionArtifacts=new ArrayList();
        _revision=attributes.getValue(""String_Node_Str"");
        _default=Boolean.valueOf(attributes.getValue(""String_Node_Str"")).booleanValue();
        String pos=attributes.getValue(""String_Node_Str"");
        _position=pos == null ? getMaxPos() + 1 : Integer.valueOf(pos).intValue();
        if (attributes.getValue(""String_Node_Str"") != null || attributes.getValue(""String_Node_Str"") != null) {
          _skip=true;
        }
 else {
          _revisionsMap.put(new Integer(_position),_revisionArtifacts);
          _mrid=ModuleRevisionId.newInstance(_organisation,_module,_revision,ExtendableItemHelper.getExtraAttributes(attributes,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
          _mrids.add(_mrid);
          if (_default) {
            _defaultMrids.add(_mrid);
          }
 else {
            _realMrids.add(_mrid);
          }
          try {
            _pubdate=Ivy.DATE_FORMAT.parse(attributes.getValue(""String_Node_Str""));
            _skip=false;
          }
 catch (          ParseException e) {
            throw new IllegalArgumentException(""String_Node_Str"" + _organisation + ""String_Node_Str""+ _module+ ""String_Node_Str""+ _revision+ ""String_Node_Str""+ attributes.getValue(""String_Node_Str""));
          }
        }
      }
 else       if (""String_Node_Str"".equals(qName)) {
        if (_skip) {
          return;
        }
        String status=attributes.getValue(""String_Node_Str"");
        if (status != null && ""String_Node_Str"".equals(status)) {
          return;
        }
        String artifactName=attributes.getValue(""String_Node_Str"");
        String type=attributes.getValue(""String_Node_Str"");
        String ext=attributes.getValue(""String_Node_Str"");
        Artifact artifact=new DefaultArtifact(_mrid,_pubdate,artifactName,type,ext);
        _revisionArtifacts.add(artifact);
      }
    }
    public void endElement(    String uri,    String localName,    String qname) throws SAXException {
      if (""String_Node_Str"".equals(qname)) {
        for (Iterator it=_revisionsMap.values().iterator(); it.hasNext(); ) {
          List artifacts=(List)it.next();
          _artifacts.addAll(artifacts);
        }
      }
    }
    private int getMaxPos(){
      return _revisionsMap.isEmpty() ? -1 : ((Integer)_revisionsMap.keySet().toArray()[_revisionsMap.size() - 1]).intValue();
    }
  }
);
}","public void parse() throws Exception {
  SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();
  saxParser.parse(_report,new DefaultHandler(){
    private String _organisation;
    private String _module;
    private String _revision;
    private int _position;
    private Date _pubdate;
    private boolean _skip;
    private ModuleRevisionId _mrid;
    private boolean _default;
    private SortedMap _revisionsMap=new TreeMap();
    private List _revisionArtifacts=null;
    private int _maxPos;
    public void startElement(    String uri,    String localName,    String qName,    Attributes attributes) throws SAXException {
      if (""String_Node_Str"".equals(qName)) {
        _organisation=attributes.getValue(""String_Node_Str"");
        _module=attributes.getValue(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(qName)) {
        _revisionArtifacts=new ArrayList();
        _revision=attributes.getValue(""String_Node_Str"");
        _default=Boolean.valueOf(attributes.getValue(""String_Node_Str"")).booleanValue();
        String pos=attributes.getValue(""String_Node_Str"");
        _position=pos == null ? getMaxPos() + 1 : Integer.valueOf(pos).intValue();
        if (attributes.getValue(""String_Node_Str"") != null || attributes.getValue(""String_Node_Str"") != null) {
          _skip=true;
        }
 else {
          _revisionsMap.put(new Integer(_position),_revisionArtifacts);
          _mrid=ModuleRevisionId.newInstance(_organisation,_module,_revision,ExtendableItemHelper.getExtraAttributes(attributes,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
          _mrids.add(_mrid);
          if (_default) {
            _defaultMrids.add(_mrid);
          }
 else {
            _realMrids.add(_mrid);
          }
          try {
            _pubdate=Ivy.DATE_FORMAT.parse(attributes.getValue(""String_Node_Str""));
            _skip=false;
          }
 catch (          ParseException e) {
            throw new IllegalArgumentException(""String_Node_Str"" + _organisation + ""String_Node_Str""+ _module+ ""String_Node_Str""+ _revision+ ""String_Node_Str""+ attributes.getValue(""String_Node_Str""));
          }
        }
      }
 else       if (""String_Node_Str"".equals(qName)) {
        if (_skip) {
          return;
        }
        String status=attributes.getValue(""String_Node_Str"");
        if (status != null && ""String_Node_Str"".equals(status)) {
          return;
        }
        String artifactName=attributes.getValue(""String_Node_Str"");
        String type=attributes.getValue(""String_Node_Str"");
        String ext=attributes.getValue(""String_Node_Str"");
        Artifact artifact=new DefaultArtifact(_mrid,_pubdate,artifactName,type,ext);
        _revisionArtifacts.add(artifact);
      }
    }
    public void endElement(    String uri,    String localName,    String qname) throws SAXException {
      if (""String_Node_Str"".equals(qname)) {
        for (Iterator it=_revisionsMap.values().iterator(); it.hasNext(); ) {
          List artifacts=(List)it.next();
          _artifacts.addAll(artifacts);
        }
      }
    }
    private int getMaxPos(){
      return _revisionsMap.isEmpty() ? -1 : ((Integer)_revisionsMap.keySet().toArray()[_revisionsMap.size() - 1]).intValue();
    }
  }
);
}",0.9840283939662822
82769,"public void setResolvedNodes(ModuleId moduleId,String rootModuleConf,Collection resolved){
  _selectedDeps.put(new ModuleIdConf(moduleId,rootModuleConf),new HashSet(resolved));
}","public void setResolvedNodes(ModuleId moduleId,String rootModuleConf,Collection resolved){
  ModuleIdConf moduleIdConf=new ModuleIdConf(moduleId,rootModuleConf);
  _selectedDeps.put(moduleIdConf,new HashSet(resolved));
  Collection resolvedRevs=new HashSet();
  for (Iterator iter=resolved.iterator(); iter.hasNext(); ) {
    IvyNode node=(IvyNode)iter.next();
    resolvedRevs.add(node.getId());
    resolvedRevs.add(node.getResolvedId());
  }
  _selectedRevs.put(moduleIdConf,resolvedRevs);
}",0.431547619047619
82770,"public Collection getEvictedRevisions(ModuleId mid,String rootModuleConf){
  Collection resolved=(Collection)_evictedDeps.get(new ModuleIdConf(mid,rootModuleConf));
  if (resolved == null) {
    return new HashSet();
  }
 else {
    Collection ret=new HashSet();
    for (Iterator iter=resolved.iterator(); iter.hasNext(); ) {
      IvyNode node=(IvyNode)iter.next();
      ret.add(node.getRealNode().getResolvedId());
    }
    return ret;
  }
}","public Collection getEvictedRevisions(ModuleId mid,String rootModuleConf){
  Collection evicted=(Collection)_evictedRevs.get(new ModuleIdConf(mid,rootModuleConf));
  if (evicted == null) {
    return new HashSet();
  }
 else {
    return new HashSet(evicted);
  }
}",0.6694796061884669
82771,"public void setEvictedNodes(ModuleId moduleId,String rootModuleConf,Collection evicted){
  _evictedDeps.put(new ModuleIdConf(moduleId,rootModuleConf),new HashSet(evicted));
}","public void setEvictedNodes(ModuleId moduleId,String rootModuleConf,Collection evicted){
  ModuleIdConf moduleIdConf=new ModuleIdConf(moduleId,rootModuleConf);
  _evictedDeps.put(moduleIdConf,new HashSet(evicted));
  Collection evictedRevs=new HashSet();
  for (Iterator iter=evicted.iterator(); iter.hasNext(); ) {
    IvyNode node=(IvyNode)iter.next();
    evictedRevs.add(node.getId());
    evictedRevs.add(node.getResolvedId());
  }
  _evictedRevs.put(moduleIdConf,evictedRevs);
}",0.4285714285714285
82772,"public Collection getResolvedRevisions(ModuleId mid,String rootModuleConf){
  Collection resolved=(Collection)_selectedDeps.get(new ModuleIdConf(mid,rootModuleConf));
  if (resolved == null) {
    return new HashSet();
  }
 else {
    Collection ret=new HashSet();
    for (Iterator iter=resolved.iterator(); iter.hasNext(); ) {
      IvyNode node=(IvyNode)iter.next();
      ret.add(node.getId());
      ret.add(node.getResolvedId());
    }
    return ret;
  }
}","public Collection getResolvedRevisions(ModuleId mid,String rootModuleConf){
  Collection resolved=(Collection)_selectedRevs.get(new ModuleIdConf(mid,rootModuleConf));
  if (resolved == null) {
    return new HashSet();
  }
 else {
    return new HashSet(resolved);
  }
}",0.6875852660300137
82773,"public void testTransformation(){
  MRIDTransformationRule r=new MRIDTransformationRule();
  r.addSrc(new MRIDRule(""String_Node_Str"",""String_Node_Str"",null));
  r.addDest(new MRIDRule(""String_Node_Str"",""String_Node_Str"",null));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  r=new MRIDTransformationRule();
  r.addSrc(new MRIDRule(null,""String_Node_Str"",null));
  r.addDest(new MRIDRule(""String_Node_Str"",""String_Node_Str"",null));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}","public void testTransformation(){
  MRIDTransformationRule r=new MRIDTransformationRule();
  r.addSrc(new MRIDRule(""String_Node_Str"",""String_Node_Str"",null));
  r.addDest(new MRIDRule(""String_Node_Str"",""String_Node_Str"",null));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  r=new MRIDTransformationRule();
  r.addSrc(new MRIDRule(null,""String_Node_Str"",null));
  r.addDest(new MRIDRule(""String_Node_Str"",""String_Node_Str"",null));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  r=new MRIDTransformationRule();
  r.addSrc(new MRIDRule(""String_Node_Str"",""String_Node_Str"",null));
  r.addDest(new MRIDRule(""String_Node_Str"",""String_Node_Str"",null));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertEquals(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),r.transform(ModuleRevisionId.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}",0.8061538461538461
82774,"public ResolvedModuleRevision getDependency(DependencyDescriptor dd,ResolveData data) throws ParseException {
  dd=fromSystem(dd);
  clearIvyAttempts();
  boolean downloaded=false;
  boolean searched=false;
  Date cachedPublicationDate=null;
  ModuleRevisionId mrid=dd.getDependencyRevisionId();
  int index=mrid.getRevision().indexOf(""String_Node_Str"");
  if (index != -1 && !mrid.getRevision().substring(index + 1).equals(_workspaceName)) {
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid.getRevision());
    return null;
  }
  if (!mrid.isExactRevision() && !acceptLatest()) {
    Message.error(""String_Node_Str"" + getClass().getName() + ""String_Node_Str""+ mrid);
    return null;
  }
  if (mrid.isExactRevision() && !isCheckmodified() && !dd.isChanging()) {
    ResolvedModuleRevision rmr=findModuleInCache(data,mrid);
    if (rmr != null) {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      return toSystem(rmr);
    }
  }
  URL cachedIvyURL=null;
  ResolvedResource ivyRef=findIvyFileRef(dd,data);
  searched=true;
  ModuleDescriptorParser parser;
  ModuleDescriptor md;
  if (ivyRef == null) {
    parser=XmlModuleDescriptorParser.getInstance();
    md=DefaultModuleDescriptor.newDefaultInstance(mrid,dd.getAllDependencyArtifactsIncludes());
    ResolvedResource artifactRef=findFirstArtifactRef(md,dd,data);
    if (artifactRef == null) {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      logIvyNotFound(mrid);
      String[] conf=md.getConfigurationsNames();
      for (int i=0; i < conf.length; i++) {
        Artifact[] artifacts=md.getArtifacts(conf[i]);
        for (int j=0; j < artifacts.length; j++) {
          logArtifactNotFound(artifacts[j]);
        }
      }
      return null;
    }
 else {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str"");
      logIvyNotFound(mrid);
      if (!mrid.isExactRevision()) {
        md.setResolvedModuleRevisionId(new ModuleRevisionId(mrid.getModuleId(),artifactRef.getRevision()));
      }
    }
  }
 else {
    parser=ModuleDescriptorParserRegistry.getInstance().getParser(ivyRef.getResource());
    if (parser == null) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource());
      return null;
    }
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
    Message.verbose(""String_Node_Str"" + ivyRef);
    Message.debug(""String_Node_Str"" + parser);
    ModuleRevisionId resolvedMrid=mrid;
    if (!mrid.isExactRevision() && ModuleRevisionId.isExactRevision(ivyRef.getRevision())) {
      resolvedMrid=new ModuleRevisionId(mrid.getModuleId(),ivyRef.getRevision());
      IvyNode node=getSystemNode(data,resolvedMrid);
      if (node != null && node.getModuleRevision() != null) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return toSystem(searchedRmr(node.getModuleRevision()));
      }
    }
    ResolvedModuleRevision rmr=findModuleInCache(data,resolvedMrid);
    if (rmr != null) {
      if (!isCheckmodified() && !dd.isChanging()) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return toSystem(searchedRmr(rmr));
      }
      long repLastModified=ivyRef.getLastModified();
      long cacheLastModified=rmr.getDescriptor().getLastModified();
      if (!rmr.getDescriptor().isDefault() && repLastModified <= cacheLastModified) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return toSystem(searchedRmr(rmr));
      }
 else {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        if (dd.isChanging()) {
          cachedPublicationDate=rmr.getDescriptor().getResolvedPublicationDate();
        }
      }
    }
    try {
      if (ResourceHelper.equals(ivyRef.getResource(),data.getIvy().getIvyFileInCache(data.getCache(),toSystem(resolvedMrid)))) {
        Message.error(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return null;
      }
      File ivyTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      ivyTempFile.deleteOnExit();
      Message.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ ivyRef.getResource());
      get(ivyRef.getResource(),ivyTempFile);
      downloaded=true;
      try {
        cachedIvyURL=ivyTempFile.toURL();
      }
 catch (      MalformedURLException ex) {
        Message.warn(""String_Node_Str"" + ivyTempFile + ""String_Node_Str""+ ex.getMessage());
        return null;
      }
    }
 catch (    IOException ex) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ex.getMessage());
      return null;
    }
    try {
      md=parser.parseDescriptor(data.getIvy(),cachedIvyURL,ivyRef.getResource(),doValidate(data));
      Message.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str""+ md.getModuleRevisionId());
      if (!mrid.getOrganisation().equals(md.getModuleRevisionId().getOrganisation())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ mrid.getOrganisation()+ ""String_Node_Str""+ md.getModuleRevisionId().getOrganisation());
      }
      if (!mrid.getName().equals(md.getModuleRevisionId().getName())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ mrid.getName()+ ""String_Node_Str""+ md.getModuleRevisionId().getName());
      }
      if (ivyRef.getRevision() != null && !ivyRef.getRevision().startsWith(""String_Node_Str"") && md.getModuleRevisionId().getRevision() != null && !ModuleRevisionId.acceptRevision(ivyRef.getRevision(),md.getModuleRevisionId().getRevision())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ivyRef.getRevision()+ ""String_Node_Str""+ md.getModuleRevisionId().getRevision());
      }
      boolean deleteOldArtifacts=false;
      if (cachedPublicationDate != null && !cachedPublicationDate.equals(md.getResolvedPublicationDate())) {
        Message.verbose(dd + ""String_Node_Str"");
        deleteOldArtifacts=true;
      }
      if (deleteOldArtifacts) {
        String[] confs=rmr.getDescriptor().getConfigurationsNames();
        for (int i=0; i < confs.length; i++) {
          Artifact[] arts=rmr.getDescriptor().getArtifacts(confs[i]);
          for (int j=0; j < arts.length; j++) {
            File artFile=data.getIvy().getArchiveFileInCache(data.getCache(),toSystem(arts[j]));
            if (artFile.exists()) {
              Message.debug(""String_Node_Str"" + artFile);
              artFile.delete();
            }
          }
        }
      }
 else       if (dd.isChanging()) {
        Message.verbose(dd + ""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ex.getMessage());
      return null;
    }
  }
  if (mrid.getRevision().startsWith(""String_Node_Str"")) {
    String askedStatus=mrid.getRevision().substring(""String_Node_Str"".length());
    if (Status.getPriority(askedStatus) < Status.getPriority(md.getStatus())) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ md.getStatus()+ ""String_Node_Str""+ askedStatus);
      return null;
    }
  }
 else   if (!mrid.acceptRevision(md.getModuleRevisionId().getRevision())) {
    Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ md.getModuleRevisionId().getRevision()+ ""String_Node_Str""+ mrid.getRevision());
    return null;
  }
  ModuleRevisionId resolvedMrid=mrid;
  if (!resolvedMrid.isExactRevision()) {
    resolvedMrid=md.getResolvedModuleRevisionId();
    if (resolvedMrid.getRevision() == null || resolvedMrid.getRevision().length() == 0) {
      if (ivyRef.getRevision() == null || ivyRef.getRevision().length() == 0 || !ModuleRevisionId.isExactRevision(ivyRef.getRevision())) {
        resolvedMrid=new ModuleRevisionId(resolvedMrid.getModuleId(),(_envDependent ? ""String_Node_Str"" : ""String_Node_Str"") + DATE_FORMAT.format(data.getDate()) + ""String_Node_Str""+ _workspaceName);
      }
 else {
        resolvedMrid=new ModuleRevisionId(resolvedMrid.getModuleId(),ivyRef.getRevision());
      }
    }
    Message.verbose(""String_Node_Str"" + resolvedMrid.getRevision() + ""String_Node_Str""+ mrid.getModuleId());
  }
  md.setResolvedModuleRevisionId(resolvedMrid);
  if (data.getDate() != null) {
    long pubDate=getPublicationDate(md,dd,data);
    if (pubDate > data.getDate().getTime()) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ new Date(pubDate)+ ""String_Node_Str""+ data.getDate());
      return null;
    }
 else     if (pubDate == -1) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      return null;
    }
    md.setResolvedPublicationDate(new Date(pubDate));
  }
  ModuleDescriptor systemMd=toSystem(md);
  try {
    File ivyFile=data.getIvy().getIvyFileInCache(data.getCache(),systemMd.getResolvedModuleRevisionId());
    if (ivyRef == null) {
      XmlModuleDescriptorWriter.write(systemMd,ivyFile);
    }
 else {
      if (md instanceof DefaultModuleDescriptor) {
        DefaultModuleDescriptor dmd=(DefaultModuleDescriptor)md;
        if (data.getIvy().logNotConvertedExclusionRule() && dmd.isNamespaceUseful()) {
          Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ getNamespace().getName()+ ""String_Node_Str"");
        }
      }
      parser.toIvyFile(cachedIvyURL,ivyRef.getResource(),ivyFile,systemMd);
      long repLastModified=ivyRef.getLastModified();
      if (repLastModified > 0) {
        ivyFile.setLastModified(repLastModified);
      }
    }
  }
 catch (  Exception e) {
    Message.warn(""String_Node_Str"" + ivyRef.getResource());
  }
  data.getIvy().saveResolver(data.getCache(),systemMd,getName());
  return new DefaultModuleRevision(this,systemMd,searched,downloaded);
}","public ResolvedModuleRevision getDependency(DependencyDescriptor dd,ResolveData data) throws ParseException {
  dd=fromSystem(dd);
  clearIvyAttempts();
  boolean downloaded=false;
  boolean searched=false;
  Date cachedPublicationDate=null;
  ModuleRevisionId mrid=dd.getDependencyRevisionId();
  int index=mrid.getRevision().indexOf(""String_Node_Str"");
  if (index != -1 && !mrid.getRevision().substring(index + 1).equals(_workspaceName)) {
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid.getRevision());
    return null;
  }
  if (!mrid.isExactRevision() && !acceptLatest()) {
    Message.error(""String_Node_Str"" + getClass().getName() + ""String_Node_Str""+ mrid);
    return null;
  }
  if (mrid.isExactRevision() && !isCheckmodified() && !dd.isChanging()) {
    ResolvedModuleRevision rmr=findModuleInCache(data,mrid);
    if (rmr != null) {
      if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str"");
      }
 else {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
        return toSystem(rmr);
      }
    }
  }
  URL cachedIvyURL=null;
  ResolvedResource ivyRef=findIvyFileRef(dd,data);
  searched=true;
  ModuleDescriptorParser parser;
  ModuleDescriptor md;
  if (ivyRef == null) {
    parser=XmlModuleDescriptorParser.getInstance();
    md=DefaultModuleDescriptor.newDefaultInstance(mrid,dd.getAllDependencyArtifactsIncludes());
    ResolvedResource artifactRef=findFirstArtifactRef(md,dd,data);
    if (artifactRef == null) {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      logIvyNotFound(mrid);
      String[] conf=md.getConfigurationsNames();
      for (int i=0; i < conf.length; i++) {
        Artifact[] artifacts=md.getArtifacts(conf[i]);
        for (int j=0; j < artifacts.length; j++) {
          logArtifactNotFound(artifacts[j]);
        }
      }
      return null;
    }
 else {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str"");
      logIvyNotFound(mrid);
      if (!mrid.isExactRevision()) {
        md.setResolvedModuleRevisionId(new ModuleRevisionId(mrid.getModuleId(),artifactRef.getRevision()));
      }
    }
  }
 else {
    parser=ModuleDescriptorParserRegistry.getInstance().getParser(ivyRef.getResource());
    if (parser == null) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource());
      return null;
    }
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
    Message.verbose(""String_Node_Str"" + ivyRef);
    Message.debug(""String_Node_Str"" + parser);
    ModuleRevisionId resolvedMrid=mrid;
    if (!mrid.isExactRevision() && ModuleRevisionId.isExactRevision(ivyRef.getRevision())) {
      resolvedMrid=new ModuleRevisionId(mrid.getModuleId(),ivyRef.getRevision());
      IvyNode node=getSystemNode(data,resolvedMrid);
      if (node != null && node.getModuleRevision() != null) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return toSystem(searchedRmr(node.getModuleRevision()));
      }
    }
    ResolvedModuleRevision rmr=findModuleInCache(data,resolvedMrid);
    if (rmr != null) {
      if (!isCheckmodified() && !dd.isChanging()) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return toSystem(searchedRmr(rmr));
      }
      long repLastModified=ivyRef.getLastModified();
      long cacheLastModified=rmr.getDescriptor().getLastModified();
      if (!rmr.getDescriptor().isDefault() && repLastModified <= cacheLastModified) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return toSystem(searchedRmr(rmr));
      }
 else {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        if (dd.isChanging()) {
          cachedPublicationDate=rmr.getDescriptor().getResolvedPublicationDate();
        }
      }
    }
    try {
      if (ResourceHelper.equals(ivyRef.getResource(),data.getIvy().getIvyFileInCache(data.getCache(),toSystem(resolvedMrid)))) {
        Message.error(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return null;
      }
      File ivyTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      ivyTempFile.deleteOnExit();
      Message.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ ivyRef.getResource());
      get(ivyRef.getResource(),ivyTempFile);
      downloaded=true;
      try {
        cachedIvyURL=ivyTempFile.toURL();
      }
 catch (      MalformedURLException ex) {
        Message.warn(""String_Node_Str"" + ivyTempFile + ""String_Node_Str""+ ex.getMessage());
        return null;
      }
    }
 catch (    IOException ex) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ex.getMessage());
      return null;
    }
    try {
      md=parser.parseDescriptor(data.getIvy(),cachedIvyURL,ivyRef.getResource(),doValidate(data));
      Message.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str""+ md.getModuleRevisionId());
      if (!mrid.getOrganisation().equals(md.getModuleRevisionId().getOrganisation())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ mrid.getOrganisation()+ ""String_Node_Str""+ md.getModuleRevisionId().getOrganisation());
      }
      if (!mrid.getName().equals(md.getModuleRevisionId().getName())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ mrid.getName()+ ""String_Node_Str""+ md.getModuleRevisionId().getName());
      }
      if (ivyRef.getRevision() != null && !ivyRef.getRevision().startsWith(""String_Node_Str"") && md.getModuleRevisionId().getRevision() != null && !ModuleRevisionId.acceptRevision(ivyRef.getRevision(),md.getModuleRevisionId().getRevision())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ivyRef.getRevision()+ ""String_Node_Str""+ md.getModuleRevisionId().getRevision());
      }
      boolean deleteOldArtifacts=false;
      if (cachedPublicationDate != null && !cachedPublicationDate.equals(md.getResolvedPublicationDate())) {
        Message.verbose(dd + ""String_Node_Str"");
        deleteOldArtifacts=true;
      }
      if (deleteOldArtifacts) {
        String[] confs=rmr.getDescriptor().getConfigurationsNames();
        for (int i=0; i < confs.length; i++) {
          Artifact[] arts=rmr.getDescriptor().getArtifacts(confs[i]);
          for (int j=0; j < arts.length; j++) {
            File artFile=data.getIvy().getArchiveFileInCache(data.getCache(),toSystem(arts[j]));
            if (artFile.exists()) {
              Message.debug(""String_Node_Str"" + artFile);
              artFile.delete();
            }
          }
        }
      }
 else       if (dd.isChanging()) {
        Message.verbose(dd + ""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ex.getMessage());
      return null;
    }
  }
  if (mrid.getRevision().startsWith(""String_Node_Str"")) {
    String askedStatus=mrid.getRevision().substring(""String_Node_Str"".length());
    if (Status.getPriority(askedStatus) < Status.getPriority(md.getStatus())) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ md.getStatus()+ ""String_Node_Str""+ askedStatus);
      return null;
    }
  }
 else   if (!mrid.acceptRevision(md.getModuleRevisionId().getRevision())) {
    Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ md.getModuleRevisionId().getRevision()+ ""String_Node_Str""+ mrid.getRevision());
    return null;
  }
  ModuleRevisionId resolvedMrid=mrid;
  if (!resolvedMrid.isExactRevision()) {
    resolvedMrid=md.getResolvedModuleRevisionId();
    if (resolvedMrid.getRevision() == null || resolvedMrid.getRevision().length() == 0) {
      if (ivyRef.getRevision() == null || ivyRef.getRevision().length() == 0 || !ModuleRevisionId.isExactRevision(ivyRef.getRevision())) {
        resolvedMrid=new ModuleRevisionId(resolvedMrid.getModuleId(),(_envDependent ? ""String_Node_Str"" : ""String_Node_Str"") + DATE_FORMAT.format(data.getDate()) + ""String_Node_Str""+ _workspaceName);
      }
 else {
        resolvedMrid=new ModuleRevisionId(resolvedMrid.getModuleId(),ivyRef.getRevision());
      }
    }
    Message.verbose(""String_Node_Str"" + resolvedMrid.getRevision() + ""String_Node_Str""+ mrid.getModuleId());
  }
  md.setResolvedModuleRevisionId(resolvedMrid);
  if (data.getDate() != null) {
    long pubDate=getPublicationDate(md,dd,data);
    if (pubDate > data.getDate().getTime()) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ new Date(pubDate)+ ""String_Node_Str""+ data.getDate());
      return null;
    }
 else     if (pubDate == -1) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      return null;
    }
    md.setResolvedPublicationDate(new Date(pubDate));
  }
  ModuleDescriptor systemMd=toSystem(md);
  try {
    File ivyFile=data.getIvy().getIvyFileInCache(data.getCache(),systemMd.getResolvedModuleRevisionId());
    if (ivyRef == null) {
      XmlModuleDescriptorWriter.write(systemMd,ivyFile);
    }
 else {
      if (md instanceof DefaultModuleDescriptor) {
        DefaultModuleDescriptor dmd=(DefaultModuleDescriptor)md;
        if (data.getIvy().logNotConvertedExclusionRule() && dmd.isNamespaceUseful()) {
          Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ getNamespace().getName()+ ""String_Node_Str"");
        }
      }
      parser.toIvyFile(cachedIvyURL,ivyRef.getResource(),ivyFile,systemMd);
      long repLastModified=ivyRef.getLastModified();
      if (repLastModified > 0) {
        ivyFile.setLastModified(repLastModified);
      }
    }
  }
 catch (  Exception e) {
    Message.warn(""String_Node_Str"" + ivyRef.getResource());
  }
  data.getIvy().saveResolver(data.getCache(),systemMd,getName());
  return new DefaultModuleRevision(this,systemMd,searched,downloaded);
}",0.9896324222431668
82775,"/** 
 * Returns true if rmr1 is after rmr2, using the latest strategy to determine which is the latest
 * @param rmr1
 * @param rmr2
 * @return
 */
private boolean isAfter(ResolvedModuleRevision rmr1,ResolvedModuleRevision rmr2,Date date){
  ArtifactInfo[] ais=new ArtifactInfo[]{new ResolvedModuleRevisionArtifactInfo(rmr1),new ResolvedModuleRevisionArtifactInfo(rmr2)};
  return getLatestStrategy().findLatest(ais,date) == ais[0];
}","/** 
 * Returns true if rmr1 is after rmr2, using the latest strategy to determine which is the latest
 * @param rmr1
 * @param rmr2
 * @return
 */
private boolean isAfter(ResolvedModuleRevision rmr1,ResolvedModuleRevision rmr2,Date date){
  ArtifactInfo[] ais=new ArtifactInfo[]{new ResolvedModuleRevisionArtifactInfo(rmr1),new ResolvedModuleRevisionArtifactInfo(rmr2)};
  return getLatestStrategy().findLatest(ais,date) != ais[1];
}",0.9953917050691244
82776,"public void execute() throws BuildException {
  Ivy ivy=getIvyInstance();
  _organisation=getProperty(_organisation,ivy,""String_Node_Str"");
  _module=getProperty(_module,ivy,""String_Node_Str"");
  if (_cache == null) {
    _cache=ivy.getDefaultCache();
  }
  _conf=getProperty(_conf,ivy,""String_Node_Str"");
  if (_conf.equals(""String_Node_Str"")) {
    _conf=getProperty(ivy,""String_Node_Str"");
  }
  if (_conf == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_todir == null) {
    String t=getProperty(ivy,""String_Node_Str"");
    if (t != null) {
      _todir=new File(t);
    }
  }
  _outputpattern=getProperty(_outputpattern,ivy,""String_Node_Str"");
  if (_todir != null && _todir.exists()) {
    _todir.mkdirs();
  }
  if (_outputpattern == null) {
    _outputpattern=""String_Node_Str"";
  }
  if (_todir != null && !_todir.isDirectory()) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_organisation == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_module == null) {
    throw new BuildException(""String_Node_Str"");
  }
  try {
    String[] confs=splitConfs(_conf);
    for (int i=0; i < confs.length; i++) {
      if (_xsl) {
        genreport(ivy,_cache,_organisation,_module,confs[i]);
      }
      if (_xml) {
        genxml(ivy,_cache,_organisation,_module,confs[i]);
      }
      if (_graph) {
        gengraph(ivy,_cache,_organisation,_module,confs[i]);
      }
    }
  }
 catch (  IOException e) {
    throw new BuildException(""String_Node_Str"",e);
  }
}","public void execute() throws BuildException {
  Ivy ivy=getIvyInstance();
  _organisation=getProperty(_organisation,ivy,""String_Node_Str"");
  _module=getProperty(_module,ivy,""String_Node_Str"");
  if (_cache == null) {
    _cache=ivy.getDefaultCache();
  }
  _conf=getProperty(_conf,ivy,""String_Node_Str"");
  if (_conf.equals(""String_Node_Str"")) {
    _conf=getProperty(ivy,""String_Node_Str"");
  }
  if (_conf == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_todir == null) {
    String t=getProperty(ivy,""String_Node_Str"");
    if (t != null) {
      _todir=new File(t);
    }
  }
  _outputpattern=getProperty(_outputpattern,ivy,""String_Node_Str"");
  if (_todir != null && _todir.exists()) {
    _todir.mkdirs();
  }
  if (_outputpattern == null) {
    _outputpattern=""String_Node_Str"";
  }
  if (_todir != null && _todir.exists() && !_todir.isDirectory()) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_organisation == null) {
    throw new BuildException(""String_Node_Str"");
  }
  if (_module == null) {
    throw new BuildException(""String_Node_Str"");
  }
  try {
    String[] confs=splitConfs(_conf);
    for (int i=0; i < confs.length; i++) {
      if (_xsl) {
        genreport(ivy,_cache,_organisation,_module,confs[i]);
      }
      if (_xml) {
        genxml(ivy,_cache,_organisation,_module,confs[i]);
      }
      if (_graph) {
        gengraph(ivy,_cache,_organisation,_module,confs[i]);
      }
    }
  }
 catch (  IOException e) {
    throw new BuildException(""String_Node_Str"",e);
  }
}",0.9937928781443972
82777,"/** 
 * After the call node may be discarded. To avoid using discarded node, make sure to get the real node after the call IvyNode node = ... node.loadData(); node = node.getRealNode(); ...
 */
public boolean loadData(String conf){
  boolean loaded=false;
  if (!isEvicted(_rootModuleConf) && (hasConfigurationsToLoad() || !isRootModuleConfLoaded()) && !hasProblem()) {
    markRootModuleConfLoaded();
    if (_md == null) {
      DependencyResolver resolver=_data.getIvy().getResolver(getModuleId());
      try {
        Message.debug(""String_Node_Str"" + resolver + ""String_Node_Str""+ getId());
        _module=resolver.getDependency(_dd,_data);
        if (_module != null) {
          _data.getIvy().saveResolver(_data.getCache(),_module.getDescriptor(),resolver.getName());
          if (_data.getIvy().logModuleWhenFound()) {
            Message.info(""String_Node_Str"" + _module.getId() + ""String_Node_Str""+ _module.getResolver().getName());
          }
          if (!getId().isExactRevision()) {
            if (!_module.getId().isExactRevision()) {
              Message.error(""String_Node_Str"" + getId() + ""String_Node_Str"");
              _problem=new RuntimeException(""String_Node_Str"");
              _data.getReport().addDependency(this);
              return false;
            }
            IvyNode resolved=_data.getNode(_module.getId());
            if (resolved != null) {
              resolved._downloaded|=_module.isDownloaded();
              resolved._searched|=_module.isSearched();
              resolved.markSelected(_rootModuleConf);
              resolved.updateDataFrom(this,_rootModuleConf);
              resolved.loadData(conf);
              if (_dd != null) {
                resolved.addDependencyArtifactsIncludes(_rootModuleConf,_dd.getDependencyArtifactsIncludes(getParentConf()));
              }
              _data.register(getId(),resolved);
              return true;
            }
          }
          _downloaded=_module.isDownloaded();
          _searched=_module.isSearched();
        }
 else {
          Message.warn(""String_Node_Str"" + getId());
          resolver.reportFailure();
          _problem=new RuntimeException(""String_Node_Str"");
        }
      }
 catch (      ParseException e) {
        _problem=e;
      }
      if (_module == null) {
        _data.getReport().addDependency(this);
        return false;
      }
 else {
        loaded=true;
        if (!getId().isExactRevision()) {
          Message.info(""String_Node_Str"" + _module.getId().getRevision() + ""String_Node_Str""+ getId());
        }
        _md=_module.getDescriptor();
        if (!getId().isExactRevision()) {
          _data.register(_module.getId(),this);
        }
        _confsToFetch.remove(""String_Node_Str"");
        updateConfsToFetch(Arrays.asList(resolveSpecialConfigurations(getRequiredConfigurations(getParent(),getParentConf()),this)));
      }
    }
 else {
      loaded=true;
    }
  }
  if (hasProblem()) {
    _data.getReport().addDependency(this);
    return handleConfiguration(loaded,conf) && loaded;
  }
  if (!handleConfiguration(loaded,conf)) {
    return false;
  }
  if (_dd != null) {
    addDependencyArtifactsIncludes(_rootModuleConf,_dd.getDependencyArtifactsIncludes(getParentConf()));
  }
  return loaded;
}","/** 
 * After the call node may be discarded. To avoid using discarded node, make sure to get the real node after the call IvyNode node = ... node.loadData(); node = node.getRealNode(); ...
 */
public boolean loadData(String conf){
  boolean loaded=false;
  if (!isEvicted(_rootModuleConf) && (hasConfigurationsToLoad() || !isRootModuleConfLoaded()) && !hasProblem()) {
    markRootModuleConfLoaded();
    if (_md == null) {
      DependencyResolver resolver=_data.getIvy().getResolver(getModuleId());
      if (resolver == null) {
        Message.error(""String_Node_Str"" + getModuleId() + ""String_Node_Str"");
        _problem=new RuntimeException(""String_Node_Str"" + getModuleId() + ""String_Node_Str"");
        _data.getReport().addDependency(this);
        return false;
      }
      try {
        Message.debug(""String_Node_Str"" + resolver + ""String_Node_Str""+ getId());
        _module=resolver.getDependency(_dd,_data);
        if (_module != null) {
          _data.getIvy().saveResolver(_data.getCache(),_module.getDescriptor(),resolver.getName());
          if (_data.getIvy().logModuleWhenFound()) {
            Message.info(""String_Node_Str"" + _module.getId() + ""String_Node_Str""+ _module.getResolver().getName());
          }
          if (!getId().isExactRevision()) {
            if (!_module.getId().isExactRevision()) {
              Message.error(""String_Node_Str"" + getId() + ""String_Node_Str"");
              _problem=new RuntimeException(""String_Node_Str"");
              _data.getReport().addDependency(this);
              return false;
            }
            IvyNode resolved=_data.getNode(_module.getId());
            if (resolved != null) {
              resolved._downloaded|=_module.isDownloaded();
              resolved._searched|=_module.isSearched();
              resolved.markSelected(_rootModuleConf);
              resolved.updateDataFrom(this,_rootModuleConf);
              resolved.loadData(conf);
              if (_dd != null) {
                resolved.addDependencyArtifactsIncludes(_rootModuleConf,_dd.getDependencyArtifactsIncludes(getParentConf()));
              }
              _data.register(getId(),resolved);
              return true;
            }
          }
          _downloaded=_module.isDownloaded();
          _searched=_module.isSearched();
        }
 else {
          Message.warn(""String_Node_Str"" + getId());
          resolver.reportFailure();
          _problem=new RuntimeException(""String_Node_Str"");
        }
      }
 catch (      ParseException e) {
        _problem=e;
      }
      if (_module == null) {
        _data.getReport().addDependency(this);
        return false;
      }
 else {
        loaded=true;
        if (!getId().isExactRevision() && _data.getIvy().logResolvedRevision()) {
          Message.info(""String_Node_Str"" + _module.getId().getRevision() + ""String_Node_Str""+ getId());
        }
        _md=_module.getDescriptor();
        if (!getId().isExactRevision()) {
          _data.register(_module.getId(),this);
        }
        _confsToFetch.remove(""String_Node_Str"");
        updateConfsToFetch(Arrays.asList(resolveSpecialConfigurations(getRequiredConfigurations(getParent(),getParentConf()),this)));
      }
    }
 else {
      loaded=true;
    }
  }
  if (hasProblem()) {
    _data.getReport().addDependency(this);
    return handleConfiguration(loaded,conf) && loaded;
  }
  if (!handleConfiguration(loaded,conf)) {
    return false;
  }
  if (_dd != null) {
    addDependencyArtifactsIncludes(_rootModuleConf,_dd.getDependencyArtifactsIncludes(getParentConf()));
  }
  return loaded;
}",0.9535053199242092
82778,"private void doFetchDependencies(IvyNode node,String conf){
  Configuration c=node.getConfiguration(conf);
  String[] extendedConfs=c.getExtends();
  if (extendedConfs.length > 0) {
    node.updateConfsToFetch(Arrays.asList(extendedConfs));
  }
  for (int i=0; i < extendedConfs.length; i++) {
    fetchDependencies(node,extendedConfs[i]);
  }
  if (node.getDependencyDescriptor() == null || node.getDependencyDescriptor().isTransitive()) {
    Collection dependencies=node.getDependencies(conf,true);
    for (Iterator iter=dependencies.iterator(); iter.hasNext(); ) {
      IvyNode dep=(IvyNode)iter.next();
      if (dep.isCircular()) {
        Message.warn(""String_Node_Str"" + node.getId() + ""String_Node_Str""+ dep.getId()+ ""String_Node_Str"");
        continue;
      }
      String[] confs=dep.getRequiredConfigurations(node,conf);
      for (int i=0; i < confs.length; i++) {
        fetchDependencies(dep,confs[i]);
      }
      confs=dep.getConfsToFetch();
      for (int i=0; i < confs.length; i++) {
        fetchDependencies(dep,confs[i]);
      }
    }
  }
}","private void doFetchDependencies(IvyNode node,String conf){
  Configuration c=node.getConfiguration(conf);
  if (c == null) {
    Message.warn(""String_Node_Str"" + conf + ""String_Node_Str""+ node.getResolvedId()+ ""String_Node_Str"");
    if (node.getParent() != null) {
      Message.warn(""String_Node_Str"" + node.getParent().getResolvedId());
    }
    return;
  }
  String[] extendedConfs=c.getExtends();
  if (extendedConfs.length > 0) {
    node.updateConfsToFetch(Arrays.asList(extendedConfs));
  }
  for (int i=0; i < extendedConfs.length; i++) {
    fetchDependencies(node,extendedConfs[i]);
  }
  if (node.getDependencyDescriptor() == null || node.getDependencyDescriptor().isTransitive()) {
    Collection dependencies=node.getDependencies(conf,true);
    for (Iterator iter=dependencies.iterator(); iter.hasNext(); ) {
      IvyNode dep=(IvyNode)iter.next();
      if (dep.isCircular()) {
        Message.warn(""String_Node_Str"" + node.getId() + ""String_Node_Str""+ dep.getId()+ ""String_Node_Str"");
        continue;
      }
      String[] confs=dep.getRequiredConfigurations(node,conf);
      for (int i=0; i < confs.length; i++) {
        fetchDependencies(dep,confs[i]);
      }
      confs=dep.getConfsToFetch();
      for (int i=0; i < confs.length; i++) {
        fetchDependencies(dep,confs[i]);
      }
    }
  }
}",0.8932443703085905
82779,"public File getDefaultIvyUserDir(){
  if (_defaultUserDir == null) {
    _defaultUserDir=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
    Message.verbose(""String_Node_Str"" + _defaultUserDir);
  }
  return _defaultUserDir;
}","public File getDefaultIvyUserDir(){
  if (_defaultUserDir == null) {
    setDefaultIvyUserDir(new File(System.getProperty(""String_Node_Str""),""String_Node_Str""));
    Message.verbose(""String_Node_Str"" + _defaultUserDir);
  }
  return _defaultUserDir;
}",0.9233870967741936
82780,"public void configure(URL configurationURL) throws ParseException, IOException {
  Message.info(""String_Node_Str"" + configurationURL);
  long start=System.currentTimeMillis();
  setConfigurationVariables(configurationURL);
  new XmlIvyConfigurationParser(this).parse(configurationURL);
  setVariable(""String_Node_Str"",getDefaultIvyUserDir().getAbsolutePath(),false);
  Message.verbose(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
  dumpConfig();
}","public void configure(URL configurationURL) throws ParseException, IOException {
  Message.info(""String_Node_Str"" + configurationURL);
  long start=System.currentTimeMillis();
  setConfigurationVariables(configurationURL);
  getDefaultIvyUserDir();
  getDefaultCache();
  new XmlIvyConfigurationParser(this).parse(configurationURL);
  setVariable(""String_Node_Str"",getDefaultIvyUserDir().getAbsolutePath(),false);
  Message.verbose(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
  dumpConfig();
}",0.9534192269573836
82781,"public void dumpConfig(){
  super.dumpConfig();
  Message.debug(""String_Node_Str"");
  for (ListIterator iter=_ivyPatterns.listIterator(); iter.hasNext(); ) {
    String p=(String)iter.next();
    Message.debug(""String_Node_Str"" + p);
  }
  Message.debug(""String_Node_Str"");
  for (ListIterator iter=_artifactPatterns.listIterator(); iter.hasNext(); ) {
    String p=(String)iter.next();
    Message.debug(""String_Node_Str"" + p);
  }
}","public void dumpConfig(){
  super.dumpConfig();
  Message.debug(""String_Node_Str"" + isM2compatible());
  Message.debug(""String_Node_Str"");
  for (ListIterator iter=getIvyPatterns().listIterator(); iter.hasNext(); ) {
    String p=(String)iter.next();
    Message.debug(""String_Node_Str"" + p);
  }
  Message.debug(""String_Node_Str"");
  for (ListIterator iter=getArtifactPatterns().listIterator(); iter.hasNext(); ) {
    String p=(String)iter.next();
    Message.debug(""String_Node_Str"" + p);
  }
}",0.9237379162191192
82782,"protected void clearIvyAttempts(){
  _ivyattempts.clear();
}","protected void clearIvyAttempts(){
  _ivyattempts.clear();
  clearArtifactAttempts();
}",0.8163265306122449
82783,"public ResolvedModuleRevision getDependency(DependencyDescriptor dd,ResolveData data) throws ParseException {
  clearIvyAttempts();
  boolean downloaded=false;
  boolean searched=false;
  Date cachedPublicationDate=null;
  ModuleRevisionId mrid=dd.getDependencyRevisionId();
  int index=mrid.getRevision().indexOf(""String_Node_Str"");
  if (index != -1 && !mrid.getRevision().substring(index + 1).equals(_workspaceName)) {
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid.getRevision());
    return null;
  }
  if (!mrid.isExactRevision() && !acceptLatest()) {
    Message.error(""String_Node_Str"" + getClass().getName() + ""String_Node_Str""+ mrid);
    return null;
  }
  if (mrid.isExactRevision() && !isCheckmodified() && !dd.isChanging()) {
    ResolvedModuleRevision rmr=data.getIvy().findModuleInCache(mrid,data.getCache(),doValidate(data));
    if (rmr != null) {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      return rmr;
    }
  }
  URL cachedIvyURL=null;
  ResolvedResource ivyRef=findIvyFileRef(dd,data);
  searched=true;
  ModuleDescriptorParser parser;
  ModuleDescriptor md;
  if (ivyRef == null) {
    parser=XmlModuleDescriptorParser.getInstance();
    md=DefaultModuleDescriptor.newDefaultInstance(mrid,dd.getAllDependencyArtifactsIncludes());
    ResolvedResource artifactRef=findFirstArtifactRef(md,dd,data);
    if (artifactRef == null) {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      logIvyNotFound(mrid);
      String[] conf=md.getConfigurationsNames();
      for (int i=0; i < conf.length; i++) {
        Artifact[] artifacts=md.getArtifacts(conf[i]);
        for (int j=0; j < artifacts.length; j++) {
          logArtifactNotFound(artifacts[j]);
        }
      }
      return null;
    }
 else {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str"");
      logIvyNotFound(mrid);
      if (!mrid.isExactRevision()) {
        md.setResolvedModuleRevisionId(new ModuleRevisionId(mrid.getModuleId(),artifactRef.getRevision()));
      }
    }
  }
 else {
    parser=ModuleDescriptorParserRegistry.getInstance().getParser(ivyRef.getResource());
    if (parser == null) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource());
      return null;
    }
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
    Message.verbose(""String_Node_Str"" + ivyRef);
    Message.debug(""String_Node_Str"" + parser);
    ModuleRevisionId resolvedMrid=mrid;
    if (!mrid.isExactRevision() && ModuleRevisionId.isExactRevision(ivyRef.getRevision())) {
      resolvedMrid=new ModuleRevisionId(mrid.getModuleId(),ivyRef.getRevision());
      IvyNode node=data.getNode(resolvedMrid);
      if (node != null && node.getModuleRevision() != null) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return searchedRmr(node.getModuleRevision());
      }
    }
    ResolvedModuleRevision rmr=data.getIvy().findModuleInCache(resolvedMrid,data.getCache(),doValidate(data));
    if (rmr != null) {
      if (!isCheckmodified() && !dd.isChanging()) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return searchedRmr(rmr);
      }
      long repLastModified=ivyRef.getLastModified();
      long cacheLastModified=rmr.getDescriptor().getLastModified();
      if (!rmr.getDescriptor().isDefault() && repLastModified <= cacheLastModified) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return searchedRmr(rmr);
      }
 else {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        if (dd.isChanging()) {
          cachedPublicationDate=rmr.getDescriptor().getResolvedPublicationDate();
        }
      }
    }
    try {
      if (ResourceHelper.equals(ivyRef.getResource(),data.getIvy().getIvyFileInCache(data.getCache(),resolvedMrid))) {
        Message.error(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return null;
      }
      File ivyTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      ivyTempFile.deleteOnExit();
      Message.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ ivyRef.getResource());
      get(ivyRef.getResource(),ivyTempFile);
      downloaded=true;
      try {
        cachedIvyURL=ivyTempFile.toURL();
      }
 catch (      MalformedURLException ex) {
        Message.warn(""String_Node_Str"" + ivyTempFile + ""String_Node_Str""+ ex.getMessage());
        return null;
      }
    }
 catch (    IOException ex) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ex.getMessage());
      return null;
    }
    try {
      md=parser.parseDescriptor(data.getIvy(),cachedIvyURL,ivyRef.getResource(),doValidate(data));
      Message.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str""+ md.getModuleRevisionId());
      if (!mrid.getOrganisation().equals(md.getModuleRevisionId().getOrganisation())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ mrid.getOrganisation()+ ""String_Node_Str""+ md.getModuleRevisionId().getOrganisation());
      }
      if (!mrid.getName().equals(md.getModuleRevisionId().getName())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ mrid.getName()+ ""String_Node_Str""+ md.getModuleRevisionId().getName());
      }
      if (ivyRef.getRevision() != null && md.getModuleRevisionId().getRevision() != null && !ModuleRevisionId.acceptRevision(ivyRef.getRevision(),md.getModuleRevisionId().getRevision())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ivyRef.getRevision()+ ""String_Node_Str""+ md.getModuleRevisionId().getRevision());
      }
      boolean deleteOldArtifacts=false;
      if (cachedPublicationDate != null && !cachedPublicationDate.equals(md.getResolvedPublicationDate())) {
        Message.verbose(""String_Node_Str"" + dd + ""String_Node_Str"");
        deleteOldArtifacts=true;
      }
      if (deleteOldArtifacts) {
        String[] confs=rmr.getDescriptor().getConfigurationsNames();
        for (int i=0; i < confs.length; i++) {
          Artifact[] arts=rmr.getDescriptor().getArtifacts(confs[i]);
          for (int j=0; j < arts.length; j++) {
            File artFile=data.getIvy().getArchiveFileInCache(data.getCache(),arts[j]);
            if (artFile.exists()) {
              Message.debug(""String_Node_Str"" + artFile);
              artFile.delete();
            }
          }
        }
      }
 else       if (dd.isChanging()) {
        Message.verbose(""String_Node_Str"" + dd + ""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ex.getMessage());
      return null;
    }
  }
  if (mrid.getRevision().startsWith(""String_Node_Str"")) {
    String askedStatus=mrid.getRevision().substring(""String_Node_Str"".length());
    if (Status.getPriority(askedStatus) < Status.getPriority(md.getStatus())) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ md.getStatus()+ ""String_Node_Str""+ askedStatus);
      return null;
    }
  }
 else   if (!mrid.acceptRevision(md.getModuleRevisionId().getRevision())) {
    Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ md.getModuleRevisionId().getRevision()+ ""String_Node_Str""+ mrid.getRevision());
    return null;
  }
  ModuleRevisionId resolvedMrid=mrid;
  if (!resolvedMrid.isExactRevision()) {
    resolvedMrid=md.getResolvedModuleRevisionId();
    if (resolvedMrid.getRevision() == null || resolvedMrid.getRevision().length() == 0) {
      if (ivyRef.getRevision() == null || ivyRef.getRevision().length() == 0 || !ModuleRevisionId.isExactRevision(ivyRef.getRevision())) {
        resolvedMrid=new ModuleRevisionId(resolvedMrid.getModuleId(),(_envDependent ? ""String_Node_Str"" : ""String_Node_Str"") + DATE_FORMAT.format(data.getDate()) + ""String_Node_Str""+ _workspaceName);
      }
 else {
        resolvedMrid=new ModuleRevisionId(resolvedMrid.getModuleId(),ivyRef.getRevision());
      }
    }
    Message.verbose(""String_Node_Str"" + resolvedMrid.getRevision() + ""String_Node_Str""+ mrid.getModuleId());
  }
  md.setResolvedModuleRevisionId(resolvedMrid);
  if (data.getDate() != null) {
    long pubDate=getPublicationDate(md,dd,data);
    if (pubDate > data.getDate().getTime()) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ new Date(pubDate)+ ""String_Node_Str""+ data.getDate());
      return null;
    }
 else     if (pubDate == -1) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      return null;
    }
    md.setResolvedPublicationDate(new Date(pubDate));
  }
  try {
    File ivyFile=data.getIvy().getIvyFileInCache(data.getCache(),md.getResolvedModuleRevisionId());
    if (ivyRef == null) {
      XmlModuleDescriptorWriter.write(md,ivyFile);
    }
 else {
      parser.toIvyFile(cachedIvyURL,ivyRef.getResource(),ivyFile,md);
      long repLastModified=ivyRef.getLastModified();
      if (repLastModified > 0) {
        ivyFile.setLastModified(repLastModified);
      }
    }
  }
 catch (  Exception e) {
    Message.warn(""String_Node_Str"" + ivyRef.getResource());
  }
  data.getIvy().saveResolver(data.getCache(),md,getName());
  return new DefaultModuleRevision(this,md,searched,downloaded);
}","public ResolvedModuleRevision getDependency(DependencyDescriptor dd,ResolveData data) throws ParseException {
  clearIvyAttempts();
  boolean downloaded=false;
  boolean searched=false;
  Date cachedPublicationDate=null;
  ModuleRevisionId mrid=dd.getDependencyRevisionId();
  int index=mrid.getRevision().indexOf(""String_Node_Str"");
  if (index != -1 && !mrid.getRevision().substring(index + 1).equals(_workspaceName)) {
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid.getRevision());
    return null;
  }
  if (!mrid.isExactRevision() && !acceptLatest()) {
    Message.error(""String_Node_Str"" + getClass().getName() + ""String_Node_Str""+ mrid);
    return null;
  }
  if (mrid.isExactRevision() && !isCheckmodified() && !dd.isChanging()) {
    ResolvedModuleRevision rmr=data.getIvy().findModuleInCache(mrid,data.getCache(),doValidate(data));
    if (rmr != null) {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      return rmr;
    }
  }
  URL cachedIvyURL=null;
  ResolvedResource ivyRef=findIvyFileRef(dd,data);
  searched=true;
  ModuleDescriptorParser parser;
  ModuleDescriptor md;
  if (ivyRef == null) {
    parser=XmlModuleDescriptorParser.getInstance();
    md=DefaultModuleDescriptor.newDefaultInstance(mrid,dd.getAllDependencyArtifactsIncludes());
    ResolvedResource artifactRef=findFirstArtifactRef(md,dd,data);
    if (artifactRef == null) {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      logIvyNotFound(mrid);
      String[] conf=md.getConfigurationsNames();
      for (int i=0; i < conf.length; i++) {
        Artifact[] artifacts=md.getArtifacts(conf[i]);
        for (int j=0; j < artifacts.length; j++) {
          logArtifactNotFound(artifacts[j]);
        }
      }
      return null;
    }
 else {
      Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str"");
      logIvyNotFound(mrid);
      if (!mrid.isExactRevision()) {
        md.setResolvedModuleRevisionId(new ModuleRevisionId(mrid.getModuleId(),artifactRef.getRevision()));
      }
    }
  }
 else {
    parser=ModuleDescriptorParserRegistry.getInstance().getParser(ivyRef.getResource());
    if (parser == null) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource());
      return null;
    }
    Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
    Message.verbose(""String_Node_Str"" + ivyRef);
    Message.debug(""String_Node_Str"" + parser);
    ModuleRevisionId resolvedMrid=mrid;
    if (!mrid.isExactRevision() && ModuleRevisionId.isExactRevision(ivyRef.getRevision())) {
      resolvedMrid=new ModuleRevisionId(mrid.getModuleId(),ivyRef.getRevision());
      IvyNode node=data.getNode(resolvedMrid);
      if (node != null && node.getModuleRevision() != null) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return searchedRmr(node.getModuleRevision());
      }
    }
    ResolvedModuleRevision rmr=data.getIvy().findModuleInCache(resolvedMrid,data.getCache(),doValidate(data));
    if (rmr != null) {
      if (!isCheckmodified() && !dd.isChanging()) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return searchedRmr(rmr);
      }
      long repLastModified=ivyRef.getLastModified();
      long cacheLastModified=rmr.getDescriptor().getLastModified();
      if (!rmr.getDescriptor().isDefault() && repLastModified <= cacheLastModified) {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        return searchedRmr(rmr);
      }
 else {
        Message.verbose(""String_Node_Str"" + getName() + ""String_Node_Str""+ resolvedMrid);
        if (dd.isChanging()) {
          cachedPublicationDate=rmr.getDescriptor().getResolvedPublicationDate();
        }
      }
    }
    try {
      if (ResourceHelper.equals(ivyRef.getResource(),data.getIvy().getIvyFileInCache(data.getCache(),resolvedMrid))) {
        Message.error(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return null;
      }
      File ivyTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      ivyTempFile.deleteOnExit();
      Message.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ ivyRef.getResource());
      get(ivyRef.getResource(),ivyTempFile);
      downloaded=true;
      try {
        cachedIvyURL=ivyTempFile.toURL();
      }
 catch (      MalformedURLException ex) {
        Message.warn(""String_Node_Str"" + ivyTempFile + ""String_Node_Str""+ ex.getMessage());
        return null;
      }
    }
 catch (    IOException ex) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ex.getMessage());
      return null;
    }
    try {
      md=parser.parseDescriptor(data.getIvy(),cachedIvyURL,ivyRef.getResource(),doValidate(data));
      Message.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid+ ""String_Node_Str""+ md.getModuleRevisionId());
      if (!mrid.getOrganisation().equals(md.getModuleRevisionId().getOrganisation())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ mrid.getOrganisation()+ ""String_Node_Str""+ md.getModuleRevisionId().getOrganisation());
      }
      if (!mrid.getName().equals(md.getModuleRevisionId().getName())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ mrid.getName()+ ""String_Node_Str""+ md.getModuleRevisionId().getName());
      }
      if (ivyRef.getRevision() != null && md.getModuleRevisionId().getRevision() != null && !ModuleRevisionId.acceptRevision(ivyRef.getRevision(),md.getModuleRevisionId().getRevision())) {
        throw new IllegalStateException(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ivyRef.getRevision()+ ""String_Node_Str""+ md.getModuleRevisionId().getRevision());
      }
      boolean deleteOldArtifacts=false;
      if (cachedPublicationDate != null && !cachedPublicationDate.equals(md.getResolvedPublicationDate())) {
        Message.verbose(dd + ""String_Node_Str"");
        deleteOldArtifacts=true;
      }
      if (deleteOldArtifacts) {
        String[] confs=rmr.getDescriptor().getConfigurationsNames();
        for (int i=0; i < confs.length; i++) {
          Artifact[] arts=rmr.getDescriptor().getArtifacts(confs[i]);
          for (int j=0; j < arts.length; j++) {
            File artFile=data.getIvy().getArchiveFileInCache(data.getCache(),arts[j]);
            if (artFile.exists()) {
              Message.debug(""String_Node_Str"" + artFile);
              artFile.delete();
            }
          }
        }
      }
 else       if (dd.isChanging()) {
        Message.verbose(dd + ""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
      Message.warn(""String_Node_Str"" + ivyRef.getResource() + ""String_Node_Str""+ ex.getMessage());
      return null;
    }
  }
  if (mrid.getRevision().startsWith(""String_Node_Str"")) {
    String askedStatus=mrid.getRevision().substring(""String_Node_Str"".length());
    if (Status.getPriority(askedStatus) < Status.getPriority(md.getStatus())) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ md.getStatus()+ ""String_Node_Str""+ askedStatus);
      return null;
    }
  }
 else   if (!mrid.acceptRevision(md.getModuleRevisionId().getRevision())) {
    Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ md.getModuleRevisionId().getRevision()+ ""String_Node_Str""+ mrid.getRevision());
    return null;
  }
  ModuleRevisionId resolvedMrid=mrid;
  if (!resolvedMrid.isExactRevision()) {
    resolvedMrid=md.getResolvedModuleRevisionId();
    if (resolvedMrid.getRevision() == null || resolvedMrid.getRevision().length() == 0) {
      if (ivyRef.getRevision() == null || ivyRef.getRevision().length() == 0 || !ModuleRevisionId.isExactRevision(ivyRef.getRevision())) {
        resolvedMrid=new ModuleRevisionId(resolvedMrid.getModuleId(),(_envDependent ? ""String_Node_Str"" : ""String_Node_Str"") + DATE_FORMAT.format(data.getDate()) + ""String_Node_Str""+ _workspaceName);
      }
 else {
        resolvedMrid=new ModuleRevisionId(resolvedMrid.getModuleId(),ivyRef.getRevision());
      }
    }
    Message.verbose(""String_Node_Str"" + resolvedMrid.getRevision() + ""String_Node_Str""+ mrid.getModuleId());
  }
  md.setResolvedModuleRevisionId(resolvedMrid);
  if (data.getDate() != null) {
    long pubDate=getPublicationDate(md,dd,data);
    if (pubDate > data.getDate().getTime()) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ new Date(pubDate)+ ""String_Node_Str""+ data.getDate());
      return null;
    }
 else     if (pubDate == -1) {
      Message.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ mrid);
      return null;
    }
    md.setResolvedPublicationDate(new Date(pubDate));
  }
  try {
    File ivyFile=data.getIvy().getIvyFileInCache(data.getCache(),md.getResolvedModuleRevisionId());
    if (ivyRef == null) {
      XmlModuleDescriptorWriter.write(md,ivyFile);
    }
 else {
      parser.toIvyFile(cachedIvyURL,ivyRef.getResource(),ivyFile,md);
      long repLastModified=ivyRef.getLastModified();
      if (repLastModified > 0) {
        ivyFile.setLastModified(repLastModified);
      }
    }
  }
 catch (  Exception e) {
    Message.warn(""String_Node_Str"" + ivyRef.getResource());
  }
  data.getIvy().saveResolver(data.getCache(),md,getName());
  return new DefaultModuleRevision(this,md,searched,downloaded);
}",0.9978982765868012
82784,"private ResolvedModuleRevision resolvedRevision(ResolvedModuleRevision mr){
  if (isDual()) {
    return new ResolvedModuleRevisionProxy(mr,this);
  }
 else {
    return mr;
  }
}","private ResolvedModuleRevision resolvedRevision(ResolvedModuleRevision mr){
  if (isDual() && mr != null) {
    return new ResolvedModuleRevisionProxy(mr,this);
  }
 else {
    return mr;
  }
}",0.9623655913978496
82785,"private String getWholeIvyPattern(){
  return _ivyroot + _ivypattern;
}","private String getWholeIvyPattern(){
  if (_ivyroot == null || _ivypattern == null) {
    return null;
  }
  return _ivyroot + _ivypattern;
}",0.6698113207547169
82786,"private void updateWholeIvyPattern(){
  if (isM2compatible()) {
    List patterns=new ArrayList();
    patterns.add(getWholeIvyPattern());
    patterns.add(getWholeArtPattern());
    setIvyPatterns(patterns);
  }
 else {
    setIvyPatterns(Collections.singletonList(getWholeIvyPattern()));
  }
}","private void updateWholeIvyPattern(){
  if (isM2compatible()) {
    List patterns=new ArrayList();
    if (getWholeIvyPattern() != null) {
      patterns.add(getWholeIvyPattern());
    }
    if (getWholeArtPattern() != null) {
      patterns.add(getWholeArtPattern());
    }
    setIvyPatterns(patterns);
  }
 else {
    setIvyPatterns(Collections.singletonList(getWholeIvyPattern()));
  }
}",0.8600583090379009
82787,"public void setM2compatible(boolean m2compatible){
  super.setM2compatible(m2compatible);
  if (isM2compatible()) {
    _artroot=""String_Node_Str"";
    _artpattern=""String_Node_Str"";
    ensureIvyConfigured(getIvy());
    updateWholeIvyPattern();
  }
}","public void setM2compatible(boolean m2compatible){
  super.setM2compatible(m2compatible);
  if (isM2compatible()) {
    _artroot=""String_Node_Str"";
    _artpattern=""String_Node_Str"";
    ensureIvyConfigured(getIvy());
    updateWholeArtPattern();
  }
}",0.988095238095238
82788,"public ResolvedModuleRevisionProxy(ResolvedModuleRevision mr,DependencyResolver resolver){
  _mr=mr;
  _resolver=resolver;
}","public ResolvedModuleRevisionProxy(ResolvedModuleRevision mr,DependencyResolver resolver){
  if (mr == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (resolver == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  _mr=mr;
  _resolver=resolver;
}",0.4563106796116505
82789,"/** 
 * After the call node may be discarded. To avoid using discarded node, make sure to get the real node after the call IvyNode node = ... node.loadData(); node = node.getRealNode(); ...
 */
public boolean loadData(String conf){
  boolean loaded=_md != null;
  if (!isEvicted(_rootModuleConf) && hasConfigurationsToLoad() && !hasProblem()) {
    if (_md == null) {
      DependencyResolver resolver=_data.getIvy().getResolver(getModuleId());
      try {
        Message.debug(""String_Node_Str"" + resolver + ""String_Node_Str""+ getId());
        _module=resolver.getDependency(_dd,_data);
        if (_module != null) {
          _data.getIvy().saveResolver(_data.getCache(),_module.getDescriptor(),resolver.getName());
          if (!getId().isExactRevision()) {
            if (!_module.getId().isExactRevision()) {
              Message.error(""String_Node_Str"" + getId() + ""String_Node_Str"");
              _problem=new RuntimeException(""String_Node_Str"");
              _data.getReport().addDependency(this);
              return false;
            }
            IvyNode resolved=_data.getNode(_module.getId());
            if (resolved != null) {
              resolved._downloaded|=_module.isDownloaded();
              resolved._searched|=_module.isSearched();
              resolved.markSelected(_rootModuleConf);
              resolved.updateDataFrom(this,_rootModuleConf);
              resolved.loadData(conf);
              if (_dd != null) {
                resolved.addDependencyArtifactsIncludes(_rootModuleConf,_dd.getDependencyArtifactsIncludes(getParentConf()));
              }
              _data.register(getId(),resolved);
              return true;
            }
          }
          _downloaded=_module.isDownloaded();
          _searched=_module.isSearched();
        }
 else {
          Message.warn(""String_Node_Str"" + getId());
          resolver.reportFailure();
          _problem=new RuntimeException(""String_Node_Str"");
        }
      }
 catch (      ParseException e) {
        _problem=e;
      }
      if (_module == null) {
        _data.getReport().addDependency(this);
        return false;
      }
 else {
        loaded=true;
        if (!getId().isExactRevision()) {
          Message.info(""String_Node_Str"" + _module.getId().getRevision() + ""String_Node_Str""+ getId());
        }
        _md=_module.getDescriptor();
        if (!getId().isExactRevision()) {
          _data.register(_module.getId(),this);
        }
        _confsToFetch.remove(""String_Node_Str"");
        updateConfsToFetch(Arrays.asList(resolveSpecialConfigurations(getRequiredConfigurations(getParent(),getParentConf()),this)));
      }
    }
  }
  if (hasProblem()) {
    _data.getReport().addDependency(this);
    return loaded;
  }
  if (""String_Node_Str"".equals(conf)) {
    if (_md != null) {
      _fetchedConfigurations.addAll(Arrays.asList(_md.getPublicConfigurationsNames()));
      _confsToFetch.clear();
      addRootModuleConfigurations(_rootModuleConf,_md.getPublicConfigurationsNames());
    }
  }
 else {
    if (_md != null) {
      Configuration c=_md.getConfiguration(conf);
      if (c == null) {
        _confsToFetch.remove(conf);
        _problem=new RuntimeException(""String_Node_Str"" + this + ""String_Node_Str""+ conf+ ""String_Node_Str""+ getParent()+ ""String_Node_Str""+ getParentConf());
        return false;
      }
 else       if (!isRoot() && c.getVisibility() != Configuration.Visibility.PUBLIC) {
        _confsToFetch.remove(conf);
        _problem=new RuntimeException(""String_Node_Str"" + this + ""String_Node_Str""+ c+ ""String_Node_Str""+ getParent()+ ""String_Node_Str""+ getParentConf());
        return false;
      }
    }
    if (loaded) {
      _fetchedConfigurations.add(conf);
      _confsToFetch.remove(conf);
    }
    addRootModuleConfigurations(_rootModuleConf,new String[]{conf});
  }
  if (_dd != null) {
    addDependencyArtifactsIncludes(_rootModuleConf,_dd.getDependencyArtifactsIncludes(getParentConf()));
  }
  return loaded;
}","/** 
 * After the call node may be discarded. To avoid using discarded node, make sure to get the real node after the call IvyNode node = ... node.loadData(); node = node.getRealNode(); ...
 */
public boolean loadData(String conf){
  boolean loaded=_md != null;
  if (!isEvicted(_rootModuleConf) && hasConfigurationsToLoad() && !hasProblem()) {
    if (_md == null) {
      DependencyResolver resolver=_data.getIvy().getResolver(getModuleId());
      try {
        Message.debug(""String_Node_Str"" + resolver + ""String_Node_Str""+ getId());
        _module=resolver.getDependency(_dd,_data);
        if (_module != null) {
          _data.getIvy().saveResolver(_data.getCache(),_module.getDescriptor(),resolver.getName());
          if (_data.getIvy().logModuleWhenFound()) {
            Message.info(""String_Node_Str"" + _module.getId() + ""String_Node_Str""+ _module.getResolver().getName());
          }
          if (!getId().isExactRevision()) {
            if (!_module.getId().isExactRevision()) {
              Message.error(""String_Node_Str"" + getId() + ""String_Node_Str"");
              _problem=new RuntimeException(""String_Node_Str"");
              _data.getReport().addDependency(this);
              return false;
            }
            IvyNode resolved=_data.getNode(_module.getId());
            if (resolved != null) {
              resolved._downloaded|=_module.isDownloaded();
              resolved._searched|=_module.isSearched();
              resolved.markSelected(_rootModuleConf);
              resolved.updateDataFrom(this,_rootModuleConf);
              resolved.loadData(conf);
              if (_dd != null) {
                resolved.addDependencyArtifactsIncludes(_rootModuleConf,_dd.getDependencyArtifactsIncludes(getParentConf()));
              }
              _data.register(getId(),resolved);
              return true;
            }
          }
          _downloaded=_module.isDownloaded();
          _searched=_module.isSearched();
        }
 else {
          Message.warn(""String_Node_Str"" + getId());
          resolver.reportFailure();
          _problem=new RuntimeException(""String_Node_Str"");
        }
      }
 catch (      ParseException e) {
        _problem=e;
      }
      if (_module == null) {
        _data.getReport().addDependency(this);
        return false;
      }
 else {
        loaded=true;
        if (!getId().isExactRevision()) {
          Message.info(""String_Node_Str"" + _module.getId().getRevision() + ""String_Node_Str""+ getId());
        }
        _md=_module.getDescriptor();
        if (!getId().isExactRevision()) {
          _data.register(_module.getId(),this);
        }
        _confsToFetch.remove(""String_Node_Str"");
        updateConfsToFetch(Arrays.asList(resolveSpecialConfigurations(getRequiredConfigurations(getParent(),getParentConf()),this)));
      }
    }
  }
  if (hasProblem()) {
    _data.getReport().addDependency(this);
    return handleConfiguration(loaded,conf) && loaded;
  }
  if (!handleConfiguration(loaded,conf)) {
    return false;
  }
  if (_dd != null) {
    addDependencyArtifactsIncludes(_rootModuleConf,_dd.getDependencyArtifactsIncludes(getParentConf()));
  }
  return loaded;
}",0.8117154811715481
82790,"public static void main(String[] args) throws Exception {
  Options options=getOptions();
  CommandLineParser parser=new GnuParser();
  try {
    CommandLine line=parser.parse(options,args);
    if (line.hasOption(""String_Node_Str"")) {
      usage(options);
      return;
    }
    if (line.hasOption(""String_Node_Str"")) {
      Message.init(new DefaultMessageImpl(Message.MSG_DEBUG));
    }
 else     if (line.hasOption(""String_Node_Str"")) {
      Message.init(new DefaultMessageImpl(Message.MSG_VERBOSE));
    }
 else     if (line.hasOption(""String_Node_Str"")) {
      Message.init(new DefaultMessageImpl(Message.MSG_WARN));
    }
 else     if (line.hasOption(""String_Node_Str"")) {
      Message.init(new DefaultMessageImpl(Message.MSG_ERR));
    }
 else {
      Message.init(new DefaultMessageImpl(Message.MSG_INFO));
    }
    boolean validate=line.hasOption(""String_Node_Str"") ? false : true;
    Ivy ivy=new Ivy();
    ivy.addAllVariables(System.getProperties());
    configureURLHandler(line.getOptionValue(""String_Node_Str"",null),line.getOptionValue(""String_Node_Str"",null),line.getOptionValue(""String_Node_Str"",null),line.getOptionValue(""String_Node_Str"",null));
    String confPath=line.getOptionValue(""String_Node_Str"",""String_Node_Str"");
    if (""String_Node_Str"".equals(confPath)) {
      ivy.configure(Ivy.class.getResource(""String_Node_Str""));
    }
 else {
      File conffile=new File(confPath);
      if (!conffile.exists()) {
        error(options,""String_Node_Str"" + conffile);
      }
 else       if (conffile.isDirectory()) {
        error(options,""String_Node_Str"" + conffile);
      }
      ivy.configure(conffile);
    }
    File cache=new File(ivy.substitute(line.getOptionValue(""String_Node_Str"",ivy.getDefaultCache().getAbsolutePath())));
    if (!cache.exists()) {
      cache.mkdirs();
    }
 else     if (!cache.isDirectory()) {
      error(options,cache + ""String_Node_Str"");
    }
    String[] confs;
    if (line.hasOption(""String_Node_Str"")) {
      confs=line.getOptionValues(""String_Node_Str"");
    }
 else {
      confs=new String[]{""String_Node_Str""};
    }
    File ivyfile;
    if (line.hasOption(""String_Node_Str"")) {
      String[] dep=line.getOptionValues(""String_Node_Str"");
      if (dep.length != 3) {
        error(options,""String_Node_Str"");
      }
      ivyfile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      ivyfile.deleteOnExit();
      DefaultModuleDescriptor md=DefaultModuleDescriptor.newDefaultInstance(ModuleRevisionId.newInstance(dep[0],""String_Node_Str"",""String_Node_Str""));
      DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(md,ModuleRevisionId.newInstance(dep[0],dep[1],dep[2]),false,false,true);
      for (int i=0; i < confs.length; i++) {
        dd.addDependencyConfiguration(""String_Node_Str"",confs[i]);
      }
      md.addDependency(dd);
      XmlModuleDescriptorWriter.write(md,ivyfile);
      confs=new String[]{""String_Node_Str""};
    }
 else {
      ivyfile=new File(ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")));
      if (!ivyfile.exists()) {
        error(options,""String_Node_Str"" + ivyfile);
      }
 else       if (ivyfile.isDirectory()) {
        error(options,""String_Node_Str"" + ivyfile);
      }
    }
    Date date=new Date();
    ResolveReport report=ivy.resolve(ivyfile.toURL(),null,confs,cache,date,validate);
    ModuleDescriptor md=report.getModuleDescriptor();
    if (confs.length == 1 && ""String_Node_Str"".equals(confs[0])) {
      confs=md.getConfigurationsNames();
    }
    if (line.hasOption(""String_Node_Str"")) {
      String retrievePattern=ivy.substitute(line.getOptionValue(""String_Node_Str""));
      if (retrievePattern.indexOf(""String_Node_Str"") == -1) {
        retrievePattern=retrievePattern + ""String_Node_Str"";
      }
      ivy.retrieve(md.getModuleRevisionId().getModuleId(),confs,cache,retrievePattern);
    }
    if (line.hasOption(""String_Node_Str"")) {
      outputCachePath(ivy,cache,md,confs,line.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    }
    if (line.hasOption(""String_Node_Str"")) {
      ivy.deliver(md.getResolvedModuleRevisionId(),ivy.substitute(line.getOptionValue(""String_Node_Str"")),cache,ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")),ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")),date,new DefaultPublishingDRResolver(),validate);
      if (line.hasOption(""String_Node_Str"")) {
        ivy.publish(md.getResolvedModuleRevisionId(),ivy.substitute(line.getOptionValue(""String_Node_Str"")),cache,ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")),line.getOptionValue(""String_Node_Str""),ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")),validate);
      }
    }
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    usage(options);
  }
}","public static void main(String[] args) throws Exception {
  Options options=getOptions();
  CommandLineParser parser=new GnuParser();
  try {
    CommandLine line=parser.parse(options,args);
    if (line.hasOption(""String_Node_Str"")) {
      usage(options);
      return;
    }
    if (line.hasOption(""String_Node_Str"")) {
      Message.init(new DefaultMessageImpl(Message.MSG_DEBUG));
    }
 else     if (line.hasOption(""String_Node_Str"")) {
      Message.init(new DefaultMessageImpl(Message.MSG_VERBOSE));
    }
 else     if (line.hasOption(""String_Node_Str"")) {
      Message.init(new DefaultMessageImpl(Message.MSG_WARN));
    }
 else     if (line.hasOption(""String_Node_Str"")) {
      Message.init(new DefaultMessageImpl(Message.MSG_ERR));
    }
 else {
      Message.init(new DefaultMessageImpl(Message.MSG_INFO));
    }
    boolean validate=line.hasOption(""String_Node_Str"") ? false : true;
    Ivy ivy=new Ivy();
    ivy.addAllVariables(System.getProperties());
    if (line.hasOption(""String_Node_Str"")) {
      ivy.setVariable(""String_Node_Str"",""String_Node_Str"");
    }
    configureURLHandler(line.getOptionValue(""String_Node_Str"",null),line.getOptionValue(""String_Node_Str"",null),line.getOptionValue(""String_Node_Str"",null),line.getOptionValue(""String_Node_Str"",null));
    String confPath=line.getOptionValue(""String_Node_Str"",""String_Node_Str"");
    if (""String_Node_Str"".equals(confPath)) {
      ivy.configureDefault();
    }
 else {
      File conffile=new File(confPath);
      if (!conffile.exists()) {
        error(options,""String_Node_Str"" + conffile);
      }
 else       if (conffile.isDirectory()) {
        error(options,""String_Node_Str"" + conffile);
      }
      ivy.configure(conffile);
    }
    File cache=new File(ivy.substitute(line.getOptionValue(""String_Node_Str"",ivy.getDefaultCache().getAbsolutePath())));
    if (!cache.exists()) {
      cache.mkdirs();
    }
 else     if (!cache.isDirectory()) {
      error(options,cache + ""String_Node_Str"");
    }
    String[] confs;
    if (line.hasOption(""String_Node_Str"")) {
      confs=line.getOptionValues(""String_Node_Str"");
    }
 else {
      confs=new String[]{""String_Node_Str""};
    }
    File ivyfile;
    if (line.hasOption(""String_Node_Str"")) {
      String[] dep=line.getOptionValues(""String_Node_Str"");
      if (dep.length != 3) {
        error(options,""String_Node_Str"");
      }
      ivyfile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      ivyfile.deleteOnExit();
      DefaultModuleDescriptor md=DefaultModuleDescriptor.newDefaultInstance(ModuleRevisionId.newInstance(dep[0],""String_Node_Str"",""String_Node_Str""));
      DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(md,ModuleRevisionId.newInstance(dep[0],dep[1],dep[2]),false,false,true);
      for (int i=0; i < confs.length; i++) {
        dd.addDependencyConfiguration(""String_Node_Str"",confs[i]);
      }
      md.addDependency(dd);
      XmlModuleDescriptorWriter.write(md,ivyfile);
      confs=new String[]{""String_Node_Str""};
    }
 else {
      ivyfile=new File(ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")));
      if (!ivyfile.exists()) {
        error(options,""String_Node_Str"" + ivyfile);
      }
 else       if (ivyfile.isDirectory()) {
        error(options,""String_Node_Str"" + ivyfile);
      }
    }
    Date date=new Date();
    ResolveReport report=ivy.resolve(ivyfile.toURL(),null,confs,cache,date,validate);
    ModuleDescriptor md=report.getModuleDescriptor();
    if (confs.length == 1 && ""String_Node_Str"".equals(confs[0])) {
      confs=md.getConfigurationsNames();
    }
    if (line.hasOption(""String_Node_Str"")) {
      String retrievePattern=ivy.substitute(line.getOptionValue(""String_Node_Str""));
      if (retrievePattern.indexOf(""String_Node_Str"") == -1) {
        retrievePattern=retrievePattern + ""String_Node_Str"";
      }
      ivy.retrieve(md.getModuleRevisionId().getModuleId(),confs,cache,retrievePattern);
    }
    if (line.hasOption(""String_Node_Str"")) {
      outputCachePath(ivy,cache,md,confs,line.getOptionValue(""String_Node_Str"",""String_Node_Str""));
    }
    if (line.hasOption(""String_Node_Str"")) {
      ivy.deliver(md.getResolvedModuleRevisionId(),ivy.substitute(line.getOptionValue(""String_Node_Str"")),cache,ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")),ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")),date,new DefaultPublishingDRResolver(),validate);
      if (line.hasOption(""String_Node_Str"")) {
        ivy.publish(md.getResolvedModuleRevisionId(),ivy.substitute(line.getOptionValue(""String_Node_Str"")),cache,ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")),line.getOptionValue(""String_Node_Str""),ivy.substitute(line.getOptionValue(""String_Node_Str"",""String_Node_Str"")),validate);
      }
    }
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    usage(options);
  }
}",0.983739837398374
82791,"private static Options getOptions(){
  Option conf=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option cache=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option ivyfile=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option dependency=OptionBuilder.withArgName(""String_Node_Str"").hasArgs().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option confs=OptionBuilder.withArgName(""String_Node_Str"").hasArgs().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option retrieve=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option cachepath=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option revision=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option status=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option deliver=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option publishResolver=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option publishPattern=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option realm=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option host=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option username=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option passwd=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Options options=new Options();
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(conf);
  options.addOption(confs);
  options.addOption(cache);
  options.addOption(ivyfile);
  options.addOption(dependency);
  options.addOption(retrieve);
  options.addOption(cachepath);
  options.addOption(revision);
  options.addOption(status);
  options.addOption(deliver);
  options.addOption(publishResolver);
  options.addOption(publishPattern);
  options.addOption(realm);
  options.addOption(host);
  options.addOption(username);
  options.addOption(passwd);
  return options;
}","private static Options getOptions(){
  Option conf=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option cache=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option ivyfile=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option dependency=OptionBuilder.withArgName(""String_Node_Str"").hasArgs().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option confs=OptionBuilder.withArgName(""String_Node_Str"").hasArgs().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option retrieve=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option cachepath=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option revision=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option status=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option deliver=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option publishResolver=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option publishPattern=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option realm=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option host=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option username=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option passwd=OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Options options=new Options();
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(conf);
  options.addOption(confs);
  options.addOption(cache);
  options.addOption(ivyfile);
  options.addOption(dependency);
  options.addOption(retrieve);
  options.addOption(cachepath);
  options.addOption(revision);
  options.addOption(status);
  options.addOption(deliver);
  options.addOption(publishResolver);
  options.addOption(publishPattern);
  options.addOption(realm);
  options.addOption(host);
  options.addOption(username);
  options.addOption(passwd);
  return options;
}",0.989786147462496
82792,"public void endElement(String uri,String localName,String qName) throws SAXException {
  if ((_organisation != null && _module != null && _revision != null) && _md.getModuleRevisionId() == null) {
    ModuleRevisionId mrid=ModuleRevisionId.newInstance(_organisation,_module,_revision);
    _md.setModuleRevisionId(mrid);
    _md.addArtifact(""String_Node_Str"",new DefaultArtifact(mrid,getDefaultPubDate(),_module,""String_Node_Str"",""String_Node_Str""));
    _organisation=null;
    _module=null;
    _revision=null;
  }
 else   if (((_organisation != null && _module != null && _revision != null) || _dd != null) && ""String_Node_Str"".equals(getContext())) {
    if (_dd == null) {
      _dd=new DefaultDependencyDescriptor(_md,ModuleRevisionId.newInstance(_organisation,_module,_revision),true,true,true);
    }
    _scope=_scope == null ? ""String_Node_Str"" : _scope;
    if (_optional && ""String_Node_Str"".equals(_scope)) {
      _scope=""String_Node_Str"";
    }
    String mapping=(String)MAVEN2_CONF_MAPPING.get(_scope);
    if (mapping == null) {
      Message.verbose(""String_Node_Str"" + _scope + ""String_Node_Str""+ getResource());
      mapping=(String)MAVEN2_CONF_MAPPING.get(""String_Node_Str"");
    }
    if (_optional) {
      mapping=mapping.replaceAll(_scope + ""String_Node_Str"",""String_Node_Str"");
      if (_md.getConfiguration(""String_Node_Str"") == null) {
        _md.addConfiguration(OPTIONAL_CONFIGURATION);
      }
    }
    parseDepsConfs(mapping,_dd);
    for (Iterator iter=_exclusions.iterator(); iter.hasNext(); ) {
      ModuleId mid=(ModuleId)iter.next();
      String[] confs=_dd.getModuleConfigurations();
      for (int i=0; i < confs.length; i++) {
        _dd.addDependencyArtifactExcludes(confs[i],new DefaultDependencyArtifactDescriptor(_dd,new ArtifactId(mid,mid.getName(),""String_Node_Str"",""String_Node_Str""),false));
      }
    }
    _md.addDependency(_dd);
    _dd=null;
  }
 else   if ((_organisation != null && _module != null) && ""String_Node_Str"".equals(getContext())) {
    _exclusions.add(new ModuleId(_organisation,_module));
    _organisation=null;
    _module=null;
  }
  if (""String_Node_Str"".equals(qName)) {
    _organisation=null;
    _module=null;
    _revision=null;
    _scope=null;
    _optional=false;
    _exclusions.clear();
  }
  _contextStack.pop();
}","public void endElement(String uri,String localName,String qName) throws SAXException {
  if ((_organisation != null && _module != null && _revision != null) && _md.getModuleRevisionId() == null) {
    ModuleRevisionId mrid=ModuleRevisionId.newInstance(_organisation,_module,_revision);
    _md.setModuleRevisionId(mrid);
    _md.addArtifact(""String_Node_Str"",new DefaultArtifact(mrid,getDefaultPubDate(),_module,""String_Node_Str"",""String_Node_Str""));
    _organisation=null;
    _module=null;
    _revision=null;
  }
 else   if (((_organisation != null && _module != null && _revision != null) || _dd != null) && ""String_Node_Str"".equals(getContext())) {
    if (_dd == null) {
      _dd=new DefaultDependencyDescriptor(_md,ModuleRevisionId.newInstance(_organisation,_module,_revision),true,false,true);
    }
    _scope=_scope == null ? ""String_Node_Str"" : _scope;
    if (_optional && ""String_Node_Str"".equals(_scope)) {
      _scope=""String_Node_Str"";
    }
    String mapping=(String)MAVEN2_CONF_MAPPING.get(_scope);
    if (mapping == null) {
      Message.verbose(""String_Node_Str"" + _scope + ""String_Node_Str""+ getResource());
      mapping=(String)MAVEN2_CONF_MAPPING.get(""String_Node_Str"");
    }
    if (_optional) {
      mapping=mapping.replaceAll(_scope + ""String_Node_Str"",""String_Node_Str"");
      if (_md.getConfiguration(""String_Node_Str"") == null) {
        _md.addConfiguration(OPTIONAL_CONFIGURATION);
      }
    }
    parseDepsConfs(mapping,_dd);
    for (Iterator iter=_exclusions.iterator(); iter.hasNext(); ) {
      ModuleId mid=(ModuleId)iter.next();
      String[] confs=_dd.getModuleConfigurations();
      for (int i=0; i < confs.length; i++) {
        _dd.addDependencyArtifactExcludes(confs[i],new DefaultDependencyArtifactDescriptor(_dd,new ArtifactId(mid,mid.getName(),""String_Node_Str"",""String_Node_Str""),false));
      }
    }
    _md.addDependency(_dd);
    _dd=null;
  }
 else   if ((_organisation != null && _module != null) && ""String_Node_Str"".equals(getContext())) {
    _exclusions.add(new ModuleId(_organisation,_module));
    _organisation=null;
    _module=null;
  }
  if (""String_Node_Str"".equals(qName)) {
    _organisation=null;
    _module=null;
    _revision=null;
    _scope=null;
    _optional=false;
    _exclusions.clear();
  }
  _contextStack.pop();
}",0.9984825493171472
82793,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  _contextStack.push(qName);
  if (""String_Node_Str"".equals(qName)) {
    _optional=true;
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (_dd == null) {
      _dd=new DefaultDependencyDescriptor(_md,ModuleRevisionId.newInstance(_organisation,_module,_revision),true,true,true);
      _organisation=null;
      _module=null;
      _revision=null;
    }
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  _contextStack.push(qName);
  if (""String_Node_Str"".equals(qName)) {
    _optional=true;
  }
 else   if (""String_Node_Str"".equals(qName)) {
    if (_dd == null) {
      _dd=new DefaultDependencyDescriptor(_md,ModuleRevisionId.newInstance(_organisation,_module,_revision),true,false,true);
      _organisation=null;
      _module=null;
      _revision=null;
    }
  }
}",0.9927007299270072
82794,"/** 
 * Adds the current node to the toKeep collection and then processes the each of the direct dependencies of this node that appear in the moduleIdMap (indicating that the dependency is part of this BuildList)
 * @param node the node to be processed
 * @param toKeep the collection of ModuleDescriptors that should be kept
 * @param moduleIdMap reference mapping of moduleId to ModuleDescriptor that are part of the BuildList
 */
private void processFilterNode(ModuleDescriptor node,Collection toKeep,Map moduleIdMap){
  toKeep.add(node);
  DependencyDescriptor[] deps=node.getDependencies();
  for (int i=0; i < deps.length; i++) {
    ModuleId id=deps[i].getDependencyId();
    if (moduleIdMap.get(id) != null) {
      processFilterNode((ModuleDescriptor)moduleIdMap.get(id),toKeep,moduleIdMap);
    }
  }
}","/** 
 * Adds the current node to the toKeep collection and then processes the each of the direct dependencies of this node that appear in the moduleIdMap (indicating that the dependency is part of this BuildList)
 * @param node the node to be processed
 * @param toKeep the set of ModuleDescriptors that should be kept
 * @param moduleIdMap reference mapping of moduleId to ModuleDescriptor that are part of the BuildList
 */
private void processFilterNode(ModuleDescriptor node,Set toKeep,Map moduleIdMap){
  toKeep.add(node);
  DependencyDescriptor[] deps=node.getDependencies();
  for (int i=0; i < deps.length; i++) {
    ModuleId id=deps[i].getDependencyId();
    if (moduleIdMap.get(id) != null) {
      processFilterNode((ModuleDescriptor)moduleIdMap.get(id),toKeep,moduleIdMap);
    }
  }
}",0.9838509316770186
82795,"/** 
 * Returns a collection of ModuleDescriptors that are conatined in the input collection of ModuleDescriptors and upon which the root module depends
 * @param mds input collection of ModuleDescriptors
 * @param rootmd root module
 * @return filtered list of modules
 */
private Collection filterModules(Collection mds,ModuleDescriptor rootmd){
  Map moduleIdMap=new HashMap();
  for (Iterator iter=mds.iterator(); iter.hasNext(); ) {
    ModuleDescriptor md=((ModuleDescriptor)iter.next());
    moduleIdMap.put(md.getModuleRevisionId().getModuleId(),md);
  }
  Collection toKeep=new ArrayList();
  processFilterNode(rootmd,toKeep,moduleIdMap);
  for (Iterator iter=toKeep.iterator(); iter.hasNext(); ) {
    ModuleDescriptor md=((ModuleDescriptor)iter.next());
    Message.verbose(""String_Node_Str"" + md.getModuleRevisionId().getModuleId().getName());
  }
  return toKeep;
}","/** 
 * Returns a collection of ModuleDescriptors that are conatined in the input collection of ModuleDescriptors and upon which the root module depends
 * @param mds input collection of ModuleDescriptors
 * @param rootmd root module
 * @return filtered list of modules
 */
private Collection filterModules(Collection mds,ModuleDescriptor rootmd){
  Map moduleIdMap=new HashMap();
  for (Iterator iter=mds.iterator(); iter.hasNext(); ) {
    ModuleDescriptor md=((ModuleDescriptor)iter.next());
    moduleIdMap.put(md.getModuleRevisionId().getModuleId(),md);
  }
  Set toKeep=new HashSet();
  processFilterNode(rootmd,toKeep,moduleIdMap);
  for (Iterator iter=toKeep.iterator(); iter.hasNext(); ) {
    ModuleDescriptor md=((ModuleDescriptor)iter.next());
    Message.verbose(""String_Node_Str"" + md.getModuleRevisionId().getModuleId().getName());
  }
  return toKeep;
}",0.9845449341728678
82796,"/** 
 * Format the given unit to the given StringBuffer, then return the operator precedence of the outermost operator in the unit expression that was formatted. See   {@link ConverterFormat} for the constants that define thevarious precedence values.
 * @param unit the unit to be formatted
 * @param buffer the <code>StringBuffer</code> to be written to
 * @return the operator precedence of the outermost operator in the unitexpression that was output
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private int formatInternal(Unit<?> unit,Appendable buffer) throws IOException {
  if (unit instanceof AnnotatedUnit<?>) {
    unit=((AnnotatedUnit<?>)unit).getActualUnit();
  }
  final String symbol=symbolMap.getSymbol(unit);
  if (symbol != null) {
    return noopPrecedenceInternal(buffer,symbol);
  }
 else   if (unit.getProductUnits() != null) {
    return productPrecedenceInternal(unit,buffer);
  }
 else   if (unit instanceof BaseUnit<?>) {
    return noopPrecedenceInternal(buffer,((BaseUnit<?>)unit).getSymbol());
  }
 else   if (unit.getSymbol() != null) {
    return noopPrecedenceInternal(buffer,unit.getSymbol());
  }
 else {
    return newUnitPrecedenceInternal(unit,buffer);
  }
}","/** 
 * Format the given unit to the given StringBuffer, then return the operator precedence of the outermost operator in the unit expression that was formatted. See   {@link ConverterFormat} for the constants that define thevarious precedence values.
 * @param unit the unit to be formatted
 * @param buffer the <code>StringBuffer</code> to be written to
 * @return the operator precedence of the outermost operator in the unitexpression that was output
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private int formatInternal(Unit<?> unit,Appendable buffer) throws IOException {
  return InternalFormater.INSTANCE.formatInternal(unit,buffer,symbolMap);
}",0.6461211477151966
82797,"@SuppressWarnings(""String_Node_Str"") public Measurement<T,Number> inverse(){
  return new IntegerMeasurement(value,getUnit().inverse());
}","public Measurement<T,Number> inverse(){
  return new IntegerMeasurement(value,getUnit().inverse());
}",0.8451882845188284
82798,"public AbstractQuantity<?> parse(CharSequence csq) throws ParserException {
  return parse(csq,new ParsePosition(0));
}","@Override public AbstractQuantity<?> parse(CharSequence csq) throws ParserException {
  return parse(csq,new ParsePosition(0));
}",0.9596774193548387
82799,"@Test public void toTest(){
  Quantity metre=AbstractQuantity.of(10,SI.METRE);
  Quantity foot=metre.to(US.FOOT);
  BigDecimal value=(BigDecimal)foot.getValue();
  value.setScale(4,RoundingMode.HALF_EVEN);
  BigDecimal expected=BigDecimal.valueOf(32.8084);
  Assert.assertEquals(expected,value.setScale(4,RoundingMode.HALF_EVEN));
}","@Test public void toTest(){
  Length metre=(Length)AbstractQuantity.of(10,SI.METRE);
  Length foot=(Length)metre.to(US.FOOT);
  BigDecimal value=(BigDecimal)foot.getValue();
  value.setScale(4,RoundingMode.HALF_EVEN);
  BigDecimal expected=BigDecimal.valueOf(32.8084);
  Assert.assertEquals(expected,value.setScale(4,RoundingMode.HALF_EVEN));
}",0.9349112426035504
82800,"@Test public void toTest(){
  Length metre=(Length)AbstractQuantity.of(10,SI.METRE);
  Length foot=(Length)metre.to(US.FOOT);
  BigDecimal value=(BigDecimal)foot.getValue();
  value.setScale(4,RoundingMode.HALF_EVEN);
  BigDecimal expected=BigDecimal.valueOf(32.8084);
  Assert.assertEquals(expected,value.setScale(4,RoundingMode.HALF_EVEN));
}","@Test public void toTest(){
  Quantity<Length> metre=AbstractQuantity.of(10,SI.METRE);
  Quantity<Length> foot=(Quantity<Length>)metre.to(US.FOOT);
  BigDecimal value=(BigDecimal)foot.getValue();
  value.setScale(4,RoundingMode.HALF_EVEN);
  BigDecimal expected=BigDecimal.valueOf(32.8084);
  Assert.assertEquals(expected,value.setScale(4,RoundingMode.HALF_EVEN));
}",0.9464788732394366
82801,"/** 
 * Returns the measurement numeric value.
 * @return the measurement value.
 */
public abstract Number getValue();","/** 
 * Returns the measurement numeric value.
 * @return the measurement value.
 */
@Override public abstract Number getValue();",0.9596774193548387
82802,"/** 
 * Returns the measurement unit.
 * @return the measurement unit.
 */
public Unit<Q> getUnit(){
  return unit;
}","/** 
 * Returns the measurement unit.
 * @return the measurement unit.
 */
@Override public Unit<Q> getUnit(){
  return unit;
}",0.9590163934426228
82803,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj instanceof ProductUnit<?>) {
    Element[] elems=((ProductUnit<?>)obj).elements;
    return Arrays.equals(elements,elems);
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj instanceof ProductUnit<?>) {
    Element[] elems=((ProductUnit<?>)obj).elements;
    if (elements.length != elems.length)     return false;
    for (    Element element : elements) {
      boolean unitFound=false;
      Element e=element;
      for (      Element elem : elems) {
        if (e.unit.equals(elem.unit))         if ((e.pow != elem.pow) || (e.root != elem.root))         return false;
 else {
          unitFound=true;
          break;
        }
      }
      if (!unitFound)       return false;
    }
    return true;
  }
  return false;
}",0.4511784511784512
82804,"@Test public void testGetJsonWithResources() throws NoSuchFieldException, ClassNotFoundException {
  IdsHelper.loadValues(R.class);
  String s=IdsHelper.toJson(Robolectric.application.getResources());
  HashMap hashMap=new Gson().fromJson(s,HashMap.class);
  List<LinkedTreeMap> list=(List<LinkedTreeMap>)hashMap.get(""String_Node_Str"");
  boolean hasSource=false;
  for (  LinkedTreeMap v : list) {
    assertNotNull(v.get(""String_Node_Str""));
    assertNotNull(v.get(""String_Node_Str""));
    hasSource|=v.containsKey(""String_Node_Str"");
  }
  assertTrue(hasSource);
}","@Test public void testGetJsonWithResources() throws NoSuchFieldException, ClassNotFoundException {
  IdsHelper.loadValues(com.scurab.android.anuitorsample.R.class);
  String s=IdsHelper.toJson(Robolectric.application.getResources());
  HashMap hashMap=new Gson().fromJson(s,HashMap.class);
  List<LinkedTreeMap> list=(List<LinkedTreeMap>)hashMap.get(""String_Node_Str"");
  boolean hasSource=false;
  for (  LinkedTreeMap v : list) {
    assertNotNull(v.get(""String_Node_Str""));
    assertNotNull(v.get(""String_Node_Str""));
    hasSource|=v.containsKey(""String_Node_Str"");
  }
  assertTrue(hasSource);
}",0.971770744225834
82805,"@Override public void onValueChange(ValueChangeEvent<String> event){
  if (event.getValue().length() == 0) {
    openScreen(""String_Node_Str"");
  }
}","@Override public void onValueChange(ValueChangeEvent<String> event){
  PBarHelper.hide();
  openScreen(event.getValue());
}",0.6911764705882353
82806,"/** 
 * This is the entry point method.
 */
@Override public void onModuleLoad(){
  History.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      if (event.getValue().length() == 0) {
        openScreen(""String_Node_Str"");
      }
    }
  }
);
  openScreen(History.getToken());
}","/** 
 * This is the entry point method.
 */
@Override public void onModuleLoad(){
  History.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> event){
      PBarHelper.hide();
      openScreen(event.getValue());
    }
  }
);
  openScreen(History.getToken());
}",0.8567335243553008
82807,"@Override public HashMap<String,Object> fillValues(View v,HashMap<String,Object> data,HashMap<String,Object> parentData){
  super.fillValues(v,data,parentData);
  SeekBar sb=(SeekBar)v;
  data.put(""String_Node_Str"",sb.getThumbOffset());
  return data;
}","@Override public HashMap<String,Object> fillValues(View v,HashMap<String,Object> data,HashMap<String,Object> parentData){
  super.fillValues(v,data,parentData);
  AbsSeekBar sb=(AbsSeekBar)v;
  data.put(""String_Node_Str"",sb.getThumbOffset());
  return data;
}",0.98828125
82808,"private Response respond(Map<String,String> headers,IHTTPSession session,String uri){
  uri=uri.trim().replace(File.separatorChar,'/');
  if (uri.indexOf('?') >= 0) {
    uri=uri.substring(0,uri.indexOf('?'));
  }
  if (uri.startsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str"") || uri.contains(""String_Node_Str"")) {
    return getForbiddenResponse(""String_Node_Str"");
  }
  boolean canServeUri=false;
  File homeDir=null;
  List<File> roots=getRootDirs();
  for (int i=0; !canServeUri && i < roots.size(); i++) {
    homeDir=roots.get(i);
    canServeUri=canServeUri(uri,homeDir);
  }
  if (!canServeUri) {
    return getNotFoundResponse();
  }
  File f=new File(homeDir,uri);
  if (f.isDirectory() && !uri.endsWith(""String_Node_Str"")) {
    uri+=""String_Node_Str"";
    Response res=createResponse(Response.Status.REDIRECT,NanoHTTPD.MIME_HTML,""String_Node_Str"" + uri + ""String_Node_Str""+ uri+ ""String_Node_Str"");
    res.addHeader(""String_Node_Str"",uri);
    return res;
  }
  if (f.isDirectory()) {
    String indexFile=findIndexFileInDirectory(f);
    if (indexFile == null) {
      if (f.canRead()) {
        return createResponse(Response.Status.OK,NanoHTTPD.MIME_HTML,listDirectory(uri,f));
      }
 else {
        return getForbiddenResponse(""String_Node_Str"");
      }
    }
 else {
      return respond(headers,session,uri + indexFile);
    }
  }
  String mimeTypeForFile=getMimeTypeForFile(uri);
  WebServerPlugin plugin=mimeTypeHandlers.get(mimeTypeForFile);
  Response response=null;
  if (plugin != null) {
    response=plugin.serveFile(uri,headers,session,f,mimeTypeForFile);
    if (response != null && response instanceof InternalRewrite) {
      InternalRewrite rewrite=(InternalRewrite)response;
      return respond(rewrite.getHeaders(),session,rewrite.getUri());
    }
  }
 else {
    response=serveFile(uri,headers,f,mimeTypeForFile);
  }
  return response != null ? response : getNotFoundResponse();
}","private Response respond(Map<String,String> headers,IHTTPSession session,String uri){
  uri=uri.trim().replace(File.separatorChar,'/');
  if (uri.indexOf('?') >= 0) {
    uri=uri.substring(0,uri.indexOf('?'));
  }
  if (uri.startsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str"") || uri.contains(""String_Node_Str"")) {
    return getForbiddenResponse(""String_Node_Str"");
  }
  boolean canServeUri=false;
  File homeDir=null;
  List<File> roots=getRootDirs();
  for (int i=0; !canServeUri && i < roots.size(); i++) {
    homeDir=roots.get(i);
    canServeUri=canServeUri(uri,homeDir);
  }
  if (!canServeUri) {
    return getNotFoundResponse();
  }
  File f=new File(homeDir,uri);
  if (f.isDirectory() && !uri.endsWith(""String_Node_Str"")) {
    uri+=""String_Node_Str"";
    Response res=createResponse(Response.Status.REDIRECT,NanoHTTPD.MIME_HTML,""String_Node_Str"" + uri + ""String_Node_Str""+ uri+ ""String_Node_Str"");
    res.addHeader(""String_Node_Str"",uri);
    return res;
  }
  if (f.isDirectory()) {
    String indexFile=findIndexFileInDirectory(f);
    if (indexFile == null) {
      if (f.canRead()) {
        return createResponse(Response.Status.OK,NanoHTTPD.MIME_HTML,listDirectory(uri,f));
      }
 else {
        return getForbiddenResponse(""String_Node_Str"");
      }
    }
 else {
      return respond(headers,session,uri + indexFile);
    }
  }
  String mimeTypeForFile=getMimeTypeForFile(uri);
  WebServerPlugin plugin=mimeTypeHandlers.get(mimeTypeForFile);
  Response response=null;
  if (plugin != null && plugin.canServeUri(uri,f)) {
    response=plugin.serveFile(uri,headers,session,f,mimeTypeForFile);
    if (response != null && response instanceof InternalRewrite) {
      InternalRewrite rewrite=(InternalRewrite)response;
      return respond(rewrite.getHeaders(),session,rewrite.getUri());
    }
  }
 else {
    response=serveFile(uri,headers,f,mimeTypeForFile);
  }
  return response != null ? response : getNotFoundResponse();
}",0.9925545571245186
82809,"public Template(DyvilCompiler compiler,Package pack,File input,File output){
  super(compiler,pack,input,output);
  this.markers=new MarkerList(I18n.INSTANCE);
}","public Template(DyvilCompiler compiler,Package pack,File input,File output){
  super(compiler,pack,input,output);
  this.markers=new MarkerList(I18n.SYNTAX);
}",0.975
82810,"public ScopeDirective(){
}","public ScopeDirective(){
  this.value=new StringInterpolationExpr();
}",0.5416666666666666
82811,"@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  super.writeExpression(writer,type);
  if (this.block != null) {
    this.block.writeExpression(writer,Types.VOID);
  }
}","@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  if (this.getValue() != null) {
    super.writeExpression(writer,type);
  }
  if (this.block != null) {
    this.block.writeExpression(writer,Types.VOID);
  }
}",0.9182389937106918
82812,"private void parseDyvilArguments(){
  final DyvilLexer sublexer=new DyvilLexer(this.markers,GenSrcSymbols.INSTANCE);
  sublexer.setInterpolationEnd();
  this.useSubLexer(sublexer);
}","private void parseDyvilArguments(){
  final DyvilLexer sublexer=new DyvilLexer(this.markers,DyvilSymbols.INSTANCE);
  sublexer.setInterpolationEnd();
  this.useSubLexer(sublexer);
}",0.9696969696969696
82813,"@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
switch (this.mode) {
case ELEMENT:
switch (type) {
case BaseSymbols.CLOSE_CURLY_BRACKET:
      pm.popParser(true);
    return;
case Tokens.EOF:
  return;
case Tokens.STRING:
this.directives.add(new ProcessedText(token.stringValue()));
return;
case BaseSymbols.HASH:
this.mode=DIRECTIVE_NAME;
return;
}
return;
case DIRECTIVE_NAME:
switch (type) {
case GenSrcSymbols.TEMPLATE:
pm.pushParser(new TemplateDirectiveParser(this.template),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.IMPORT:
pm.pushParser(new ImportDirectiveParser(this.template),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.IF:
pm.pushParser(new IfDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.FOR:
pm.pushParser(new ForDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.VAR:
case GenSrcSymbols.LET:
case GenSrcSymbols.CONST:
pm.pushParser(new VarDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.FUNC:
pm.pushParser(new FuncDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case BaseSymbols.OPEN_PARENTHESIS:
case BaseSymbols.OPEN_CURLY_BRACKET:
pm.pushParser(new ScopeDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
}
if (Tokens.isIdentifier(type)) {
pm.pushParser(new CallDirectiveParser(this.directives),true);
return;
}
pm.report(token,""String_Node_Str"");
}
}","@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
switch (this.mode) {
case ELEMENT:
switch (type) {
case BaseSymbols.CLOSE_CURLY_BRACKET:
      pm.popParser(true);
    return;
case Tokens.EOF:
  return;
case Tokens.STRING:
this.directives.add(new ProcessedText(token.stringValue()));
return;
case BaseSymbols.HASH:
this.mode=DIRECTIVE_NAME;
return;
}
return;
case DIRECTIVE_NAME:
switch (type) {
case GenSrcSymbols.TEMPLATE:
pm.pushParser(new TemplateDirectiveParser(this.template),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.IMPORT:
pm.pushParser(new ImportDirectiveParser(this.template),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.IF:
pm.pushParser(new IfDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.FOR:
pm.pushParser(new ForDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.VAR:
case GenSrcSymbols.LET:
case GenSrcSymbols.CONST:
pm.pushParser(new VarDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.FUNC:
pm.pushParser(new FuncDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case BaseSymbols.OPEN_PARENTHESIS:
case BaseSymbols.OPEN_CURLY_BRACKET:
pm.pushParser(new ScopeDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
}
if (Tokens.isIdentifier(type)) {
pm.pushParser(new CallDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
}
pm.report(token,""String_Node_Str"");
}
}",0.9936262998993626
82814,"public static <T extends Enum<T>>T getEnumValue(ArgumentList arguments,IParameter parameter,Class<T> type){
  IValue value=arguments.get(parameter);
  if (value == null) {
    value=parameter.getValue();
  }
switch (value.valueTag()) {
case IValue.ENUM_ACCESS:
    return Enum.valueOf(type,((EnumValue)value).getInternalName());
case IValue.FIELD_ACCESS:
  if (Types.isSameType(parameter.getCovariantType(),value.getType())) {
    return Enum.valueOf(type,((FieldAccess)value).getName().qualified);
  }
break;
}
return null;
}","public static <T extends Enum<T>>T getEnumValue(ArgumentList arguments,IParameter parameter,Class<T> type){
  IValue value=arguments.get(parameter);
  if (value == null) {
    value=parameter.getValue();
  }
  try {
switch (value.valueTag()) {
case IValue.ENUM_ACCESS:
      return Enum.valueOf(type,((EnumValue)value).getInternalName());
case IValue.FIELD_ACCESS:
    if (Types.isSameType(parameter.getCovariantType(),value.getType())) {
      return Enum.valueOf(type,((FieldAccess)value).getName().qualified);
    }
}
}
 catch (IllegalArgumentException ignored) {
}
return null;
}",0.9125338142470696
82815,"public static String getStringValue(ArgumentList arguments,IParameter parameter){
  IValue value=arguments.get(parameter);
  if (value == null) {
    value=parameter.getValue();
  }
  if (value.valueTag() == IValue.STRING) {
    return value.stringValue();
  }
  return null;
}","public static String getStringValue(ArgumentList arguments,IParameter parameter){
  IValue value=arguments.get(parameter);
  if (value == null) {
    value=parameter.getValue();
  }
  return value.stringValue();
}",0.8408163265306122
82816,"private static String replaceMember(IMember member,String value){
  return value.replace(""String_Node_Str"",Markers.getSemantic(""String_Node_Str"" + member.getKind().getName())).replace(""String_Node_Str"",member.getName().toString());
}","private static String replaceMember(IMember member,String value){
  if (value == null) {
    return null;
  }
  return value.replace(""String_Node_Str"",Markers.getSemantic(""String_Node_Str"" + member.getKind().getName())).replace(""String_Node_Str"",member.getName().toString());
}",0.9137254901960784
82817,"@Override public boolean isResolved(){
  return this.method != null;
}","@Override public boolean isResolved(){
  return this.method != null && this.method.getType().isResolved();
}",0.7865168539325843
82818,"@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.method != null) {
    this.method.checkCall(markers,this.position,context,this.receiver,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
  if (this.genericData != null) {
    this.genericData.check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.method != null) {
    this.method.checkCall(markers,this.position,context,this.receiver,this.arguments,this.getGenericData());
    if (!this.method.getType().isResolved()) {
      markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.getName()));
    }
  }
  this.arguments.check(markers,context);
  if (this.genericData != null) {
    this.genericData.check(markers,context);
  }
}",0.8515057113187954
82819,"@Override public boolean isResolved(){
  return this.field != null;
}","@Override public boolean isResolved(){
  return this.field != null && this.field.getType().isResolved();
}",0.7885714285714286
82820,"@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.value != null) {
    this.value.check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.value != null) {
    this.value.check(markers,context);
  }
}",0.8779220779220779
82821,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.resolveTypes(markers,context);
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
}",0.8899297423887588
82822,"@Override public void checkMatch(MatchList<IMethod> list,IValue receiver,Name name,ArgumentList arguments){
  if (name != this.name && name != null) {
    return;
  }
  final ParameterList parameters=this.getParameters();
  final int parameterStartIndex;
  final int argumentStartIndex;
  final int argumentCount;
  final int parameterCount=parameters.size();
  final int[] matchValues;
  final IType[] matchTypes;
  boolean invalid=false;
  final int mod=this.attributes.flags() & Modifiers.INFIX;
  if (receiver == null) {
    if (mod == Modifiers.INFIX) {
      invalid=true;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this));
      return;
    }
    argumentCount=arguments.size();
    matchValues=new int[argumentCount];
    matchTypes=new IType[argumentCount];
    argumentStartIndex=0;
    parameterStartIndex=0;
  }
 else   if (mod != 0 && receiver.isClassAccess()) {
    final IType receiverType=receiver.getType();
    if (!Types.isSuperType(this.getReceiverType(),receiverType)) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,IValue.EXACT_MATCH,receiverType,false));
      return;
    }
    parameterStartIndex=0;
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=1;
    matchTypes[0]=receiverType;
  }
 else {
    if (mod == Modifiers.STATIC && !receiver.isClassAccess()) {
      invalid=true;
    }
    final IType receiverType;
    if (mod == Modifiers.INFIX) {
      receiverType=parameters.get(0).getCovariantType();
      parameterStartIndex=1;
    }
 else {
      receiverType=this.getReceiverType();
      parameterStartIndex=0;
    }
    final int receiverMatch=TypeChecker.getTypeMatch(receiver,receiverType,list);
    if (receiverMatch == IValue.MISMATCH) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,receiverMatch,receiverType,false));
      return;
    }
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=receiverMatch;
    matchTypes[0]=receiverType;
  }
  final int parametersLeft=parameterCount - parameterStartIndex;
  if (argumentCount > parametersLeft && !this.isVariadic()) {
    return;
  }
  int defaults=0;
  int varargs=0;
  for (int argumentIndex=0; argumentIndex < parametersLeft; argumentIndex++) {
    final IParameter parameter=parameters.get(parameterStartIndex + argumentIndex);
    final int partialVarargs=arguments.checkMatch(matchValues,matchTypes,argumentStartIndex,argumentIndex,parameter,list);
switch (partialVarargs) {
case ArgumentList.MISMATCH:
      return;
case ArgumentList.DEFAULT:
    defaults++;
  continue;
default :
varargs+=partialVarargs;
}
}
for (int matchValue : matchValues) {
if (matchValue == IValue.MISMATCH) {
return;
}
}
list.add(new Candidate<>(this,matchValues,matchTypes,defaults,varargs,invalid));
}","@Override public void checkMatch(MatchList<IMethod> list,IValue receiver,Name name,ArgumentList arguments){
  if (name != this.name && name != null) {
    return;
  }
  final ParameterList parameters=this.getParameters();
  final int parameterStartIndex;
  final int argumentStartIndex;
  final int argumentCount;
  final int parameterCount=parameters.size();
  final int[] matchValues;
  final IType[] matchTypes;
  boolean invalid=false;
  final int mod=this.attributes.flags() & Modifiers.INFIX;
  if (receiver == null) {
    if (mod == Modifiers.INFIX) {
      invalid=true;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this));
      return;
    }
    argumentCount=arguments.size();
    matchValues=new int[argumentCount];
    matchTypes=new IType[argumentCount];
    argumentStartIndex=0;
    parameterStartIndex=0;
  }
 else   if (mod != 0 && receiver.isClassAccess()) {
    final IType receiverType=receiver.getType();
    if (!Types.isSuperType(this.getReceiverType(),receiverType)) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,IValue.EXACT_MATCH,receiverType,false));
      return;
    }
    parameterStartIndex=0;
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=1;
    matchTypes[0]=receiverType;
  }
 else {
    if (mod == Modifiers.STATIC && !receiver.isClassAccess()) {
      invalid=true;
    }
    final IType receiverType;
    if (mod == Modifiers.INFIX && !parameters.isEmpty()) {
      receiverType=parameters.get(0).getCovariantType();
      parameterStartIndex=1;
    }
 else {
      receiverType=this.getReceiverType();
      parameterStartIndex=0;
    }
    final int receiverMatch=TypeChecker.getTypeMatch(receiver,receiverType,list);
    if (receiverMatch == IValue.MISMATCH) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,receiverMatch,receiverType,false));
      return;
    }
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=receiverMatch;
    matchTypes[0]=receiverType;
  }
  final int parametersLeft=parameterCount - parameterStartIndex;
  if (argumentCount > parametersLeft && !this.isVariadic()) {
    return;
  }
  int defaults=0;
  int varargs=0;
  for (int argumentIndex=0; argumentIndex < parametersLeft; argumentIndex++) {
    final IParameter parameter=parameters.get(parameterStartIndex + argumentIndex);
    final int partialVarargs=arguments.checkMatch(matchValues,matchTypes,argumentStartIndex,argumentIndex,parameter,list);
switch (partialVarargs) {
case ArgumentList.MISMATCH:
      return;
case ArgumentList.DEFAULT:
    defaults++;
  continue;
default :
varargs+=partialVarargs;
}
}
for (int matchValue : matchValues) {
if (matchValue == IValue.MISMATCH) {
return;
}
}
list.add(new Candidate<>(this,matchValues,matchTypes,defaults,varargs,invalid));
}",0.995876628731651
82823,"protected void writeArguments(MethodWriter writer,IValue receiver,ArgumentList arguments) throws BytecodeException {
  if (receiver != null && !receiver.isIgnoredClassAccess() && this.hasModifier(Modifiers.INFIX)) {
    arguments.writeValues(writer,this.parameters,1);
    return;
  }
  arguments.writeValues(writer,this.parameters,0);
}","protected void writeArguments(MethodWriter writer,IValue receiver,ArgumentList arguments) throws BytecodeException {
  if (receiver != null && !receiver.isIgnoredClassAccess() && this.hasModifier(Modifiers.INFIX) && !this.parameters.isEmpty()) {
    arguments.writeValues(writer,this.parameters,1);
    return;
  }
  arguments.writeValues(writer,this.parameters,0);
}",0.9573863636363636
82824,"protected void writeReceiver(MethodWriter writer,IValue receiver) throws BytecodeException {
  if (receiver == null) {
    return;
  }
  final int modifiers=this.attributes.flags();
  if ((modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    receiver.writeExpression(writer,this.parameters.get(0).getCovariantType());
    return;
  }
  final IType receiverType=this.enclosingClass.getReceiverType();
  if ((modifiers & Modifiers.STATIC) == 0) {
    receiver.writeNullCheckedExpression(writer,receiverType);
  }
 else {
    receiver.writeExpression(writer,receiverType);
  }
  if (receiver.isIgnoredClassAccess()) {
    final IType type=receiver.getType();
    if (type.hasTag(IType.TYPE_VAR)) {
      type.writeClassExpression(writer,true);
    }
  }
}","protected void writeReceiver(MethodWriter writer,IValue receiver) throws BytecodeException {
  if (receiver == null) {
    return;
  }
  if (this.hasModifier(Modifiers.INFIX) && !this.parameters.isEmpty()) {
    receiver.writeExpression(writer,this.parameters.get(0).getCovariantType());
    return;
  }
  final IType receiverType=this.enclosingClass.getReceiverType();
  if (!this.isStatic()) {
    receiver.writeNullCheckedExpression(writer,receiverType);
  }
 else {
    receiver.writeExpression(writer,receiverType);
  }
  if (receiver.isIgnoredClassAccess()) {
    final IType type=receiver.getType();
    if (type.hasTag(IType.TYPE_VAR)) {
      type.writeClassExpression(writer,true);
    }
  }
}",0.8853809196980096
82825,"@Override public IValue checkArguments(MarkerList markers,SourcePosition position,IContext context,IValue receiver,ArgumentList arguments,GenericData genericData){
  final ParameterList parameters=this.getParameters();
  if (receiver != null) {
    final int mod=this.attributes.flags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && !receiver.isClassAccess()) {
      final IParameter parameter=parameters.get(0);
      final IType paramType=parameter.getCovariantType();
      updateReceiverType(receiver,genericData);
      receiver=TypeChecker.convertValue(receiver,paramType,genericData,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
      updateReceiverType(receiver,genericData);
      for (int i=1, count=parameters.size(); i < count; i++) {
        arguments.checkValue(i - 1,parameters.get(i),genericData,position,markers,context);
      }
      if (genericData != null) {
        this.checkTypeVarsInferred(markers,position,genericData);
      }
      return receiver;
    }
    updateReceiverType(receiver,genericData);
    if ((mod & Modifiers.STATIC) != 0) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (this.getReceiverType().getTheClass() == this.enclosingClass && receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semanticError(position,""String_Node_Str"",this.name));
      }
    }
 else {
      receiver=TypeChecker.convertValue(receiver,this.getReceiverType(),receiver.getType(),markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
    if (receiver != null) {
      updateReceiverType(receiver,genericData);
    }
  }
 else   if (!this.isStatic()) {
    if (context.hasStaticAccess()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      final IType receiverType=this.enclosingClass.getThisType();
      receiver=new ThisExpr(position,receiverType,markers,context);
      if (genericData != null) {
        genericData.setFallbackTypeContext(receiverType);
      }
      if (!this.enclosingClass.isAnonymous()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      }
    }
  }
  for (int i=0, count=parameters.size(); i < count; i++) {
    arguments.checkValue(i,parameters.get(i),genericData,position,markers,context);
  }
  if (genericData != null) {
    this.checkTypeVarsInferred(markers,position,genericData);
  }
  return receiver;
}","@Override public IValue checkArguments(MarkerList markers,SourcePosition position,IContext context,IValue receiver,ArgumentList arguments,GenericData genericData){
  final ParameterList parameters=this.getParameters();
  if (receiver != null) {
    final int mod=this.attributes.flags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && !receiver.isClassAccess() && !parameters.isEmpty()) {
      final IParameter parameter=parameters.get(0);
      final IType paramType=parameter.getCovariantType();
      updateReceiverType(receiver,genericData);
      receiver=TypeChecker.convertValue(receiver,paramType,genericData,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
      updateReceiverType(receiver,genericData);
      for (int i=1, count=parameters.size(); i < count; i++) {
        arguments.checkValue(i - 1,parameters.get(i),genericData,position,markers,context);
      }
      if (genericData != null) {
        this.checkTypeVarsInferred(markers,position,genericData);
      }
      return receiver;
    }
    updateReceiverType(receiver,genericData);
    if ((mod & Modifiers.STATIC) != 0) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (this.getReceiverType().getTheClass() == this.enclosingClass && receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semanticError(position,""String_Node_Str"",this.name));
      }
    }
 else {
      receiver=TypeChecker.convertValue(receiver,this.getReceiverType(),receiver.getType(),markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
    if (receiver != null) {
      updateReceiverType(receiver,genericData);
    }
  }
 else   if (!this.isStatic()) {
    if (context.hasStaticAccess()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      final IType receiverType=this.enclosingClass.getThisType();
      receiver=new ThisExpr(position,receiverType,markers,context);
      if (genericData != null) {
        genericData.setFallbackTypeContext(receiverType);
      }
      if (!this.enclosingClass.isAnonymous()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      }
    }
  }
  for (int i=0, count=parameters.size(); i < count; i++) {
    arguments.checkValue(i,parameters.get(i),genericData,position,markers,context);
  }
  if (genericData != null) {
    this.checkTypeVarsInferred(markers,position,genericData);
  }
  return receiver;
}",0.995571302037201
82826,"@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
}","@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  if (this.writer != null) {
    this.writer.accept(writer,type);
  }
}",0.7368421052631579
82827,"@Override public IValue checkArguments(MarkerList markers,SourcePosition position,IContext context,IValue receiver,ArgumentList arguments,GenericData genericData){
  final ParameterList parameters=this.getParameters();
  if (receiver != null) {
    final int mod=this.modifiers.toFlags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && !receiver.isClassAccess()) {
      final IParameter parameter=parameters.get(0);
      final IType paramType=parameter.getCovariantType();
      updateReceiverType(receiver,genericData);
      receiver=TypeChecker.convertValue(receiver,paramType,genericData,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
      updateReceiverType(receiver,genericData);
      for (int i=1, count=parameters.size(); i < count; i++) {
        arguments.checkValue(i - 1,parameters.get(i),genericData,position,markers,context);
      }
      if (genericData != null) {
        this.checkTypeVarsInferred(markers,position,genericData);
      }
      return receiver;
    }
    updateReceiverType(receiver,genericData);
    if ((mod & Modifiers.STATIC) != 0) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (this.getReceiverType().getTheClass() == this.enclosingClass && receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semanticError(position,""String_Node_Str"",this.name));
      }
    }
 else {
      receiver=TypeChecker.convertValue(receiver,this.getReceiverType(),receiver.getType(),markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
    updateReceiverType(receiver,genericData);
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      final IType receiverType=this.enclosingClass.getThisType();
      receiver=new ThisExpr(position,receiverType,context,markers);
      if (genericData != null) {
        genericData.setFallbackTypeContext(receiverType);
      }
      if (!this.enclosingClass.isAnonymous()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      }
    }
  }
  for (int i=0, count=parameters.size(); i < count; i++) {
    arguments.checkValue(i,parameters.get(i),genericData,position,markers,context);
  }
  if (genericData != null) {
    this.checkTypeVarsInferred(markers,position,genericData);
  }
  return receiver;
}","@Override public IValue checkArguments(MarkerList markers,SourcePosition position,IContext context,IValue receiver,ArgumentList arguments,GenericData genericData){
  final ParameterList parameters=this.getParameters();
  if (receiver != null) {
    final int mod=this.modifiers.toFlags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && !receiver.isClassAccess()) {
      final IParameter parameter=parameters.get(0);
      final IType paramType=parameter.getCovariantType();
      updateReceiverType(receiver,genericData);
      receiver=TypeChecker.convertValue(receiver,paramType,genericData,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
      updateReceiverType(receiver,genericData);
      for (int i=1, count=parameters.size(); i < count; i++) {
        arguments.checkValue(i - 1,parameters.get(i),genericData,position,markers,context);
      }
      if (genericData != null) {
        this.checkTypeVarsInferred(markers,position,genericData);
      }
      return receiver;
    }
    updateReceiverType(receiver,genericData);
    if ((mod & Modifiers.STATIC) != 0) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (this.getReceiverType().getTheClass() == this.enclosingClass && receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semanticError(position,""String_Node_Str"",this.name));
      }
    }
 else {
      receiver=TypeChecker.convertValue(receiver,this.getReceiverType(),receiver.getType(),markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
    if (receiver != null) {
      updateReceiverType(receiver,genericData);
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      final IType receiverType=this.enclosingClass.getThisType();
      receiver=new ThisExpr(position,receiverType,context,markers);
      if (genericData != null) {
        genericData.setFallbackTypeContext(receiverType);
      }
      if (!this.enclosingClass.isAnonymous()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      }
    }
  }
  for (int i=0, count=parameters.size(); i < count; i++) {
    arguments.checkValue(i,parameters.get(i),genericData,position,markers,context);
  }
  if (genericData != null) {
    this.checkTypeVarsInferred(markers,position,genericData);
  }
  return receiver;
}",0.99361249112846
82828,"protected static IValue resolveMissing(IParameter param,GenericData genericData,SourcePosition position,MarkerList markers,IContext context){
  if (param.isVarargs()) {
    return convertValue(new ArrayExpr(position,EMPTY),param,genericData,markers,context);
  }
  if (param.hasModifier(Modifiers.IMPLICIT)) {
    final IValue implicit=context.resolveImplicit(param.getCovariantType());
    if (implicit != null) {
      return implicit;
    }
  }
  if (param.isDefault()) {
    return new DummyValue(param.getCovariantType(),(writer,type) -> param.writeGetDefaultValue(writer));
  }
  return null;
}","protected static IValue resolveMissing(IParameter param,GenericData genericData,SourcePosition position,MarkerList markers,IContext context){
  if (param.isVarargs()) {
    return convertValue(new ArrayExpr(position,EMPTY),param,genericData,markers,context);
  }
  if (param.isImplicit()) {
    final IValue implicit=context.resolveImplicit(param.getCovariantType().getConcreteType(genericData));
    if (implicit != null) {
      return implicit;
    }
  }
  if (param.isDefault()) {
    return new DummyValue(param.getCovariantType(),(writer,type) -> param.writeGetDefaultValue(writer));
  }
  return null;
}",0.943801652892562
82829,"@Override public IValue resolveImplicit(IType type){
  return type == null ? this.implicitValue : null;
}","@Override public IValue resolveImplicit(IType type){
  return type == null ? this.implicitValue : super.resolveImplicit(type);
}",0.8927038626609443
82830,"private void readTargets(){
  final IAnnotation target=this.theClass.getAnnotation(Annotation.LazyFields.TARGET_CLASS);
  if (target == null) {
    return;
  }
  this.targets=EnumSet.noneOf(ElementType.class);
  final ArrayExpr arrayExpr=(ArrayExpr)target.getArguments().get(0,Names.value);
  if (arrayExpr == null) {
    return;
  }
  final ArgumentList values=arrayExpr.getValues();
  final int size=values.size();
  for (int i=0; i < size; i++) {
    final INamed value=(INamed)values.get(i);
    try {
      this.targets.add(ElementType.valueOf(value.getName().qualified));
    }
 catch (    IllegalArgumentException ignored) {
    }
  }
}","private void readTargets(){
  final IAnnotation target=this.theClass.getAnnotation(Annotation.LazyFields.TARGET_CLASS);
  if (target == null) {
    return;
  }
  this.targets=EnumSet.noneOf(ElementType.class);
  final IValue argument=target.getArguments().get(0,Names.value);
  if (!(argument instanceof ArrayExpr)) {
    return;
  }
  final ArgumentList values=((ArrayExpr)argument).getValues();
  final int size=values.size();
  for (int i=0; i < size; i++) {
    final INamed value=(INamed)values.get(i);
    try {
      this.targets.add(ElementType.valueOf(value.getName().qualified));
    }
 catch (    IllegalArgumentException ignored) {
    }
  }
}",0.7812018489984591
82831,"@Override public void resolveTypesGenerate(MarkerList markers,IContext context){
  final ClassBody body=this.theClass.getBody();
  final IType classType=this.theClass.getClassType();
  final IType arrayType=new ArrayType(classType,Mutability.IMMUTABLE);
  this.initValuesField(body,arrayType);
  this.initValuesMethod(classType,arrayType);
  this.updateConstructors(classType);
}","@Override public void resolveTypesGenerate(MarkerList markers,IContext context){
  final ClassBody body=this.theClass.getBody();
  final IType classType=this.theClass.getClassType();
  final IType arrayType=new ArrayType(classType,Mutability.IMMUTABLE);
  this.initValuesField(body,arrayType);
  this.initValuesMethod(arrayType);
  this.updateConstructors(classType);
}",0.9866310160427808
82832,"protected void initValuesMethod(IType classType,IType arrayType){
  this.valuesMethod=new CodeMethod(this.theClass,Names.values,arrayType,new FlagModifierSet(Modifiers.PUBLIC | Modifiers.STATIC));
  final IValue valuesFieldAccess=new FieldAccess(this.valuesField);
  final IMethod cloneMethod=IContext.resolveMethod(arrayType,valuesFieldAccess,Name.fromRaw(""String_Node_Str""),ArgumentList.EMPTY);
  final MethodCall cloneCall=new MethodCall(null,valuesFieldAccess,cloneMethod,ArgumentList.EMPTY);
  cloneCall.setGenericData(new GenericData(cloneMethod,classType));
  this.valuesMethod.setValue(cloneCall);
}","protected void initValuesMethod(IType arrayType){
  this.valuesMethod=new CodeMethod(this.theClass,Names.values,arrayType,new FlagModifierSet(Modifiers.PUBLIC | Modifiers.STATIC));
}",0.4613434727503168
82833,"@Override public void addOverride(IMethod method){
}","@Override public void addOverride(IMethod method){
  if (!this.enclosingClass.isSubClassOf(method.getEnclosingClass().getClassType())) {
    return;
  }
  if (this.overrideMethods == null) {
    this.overrideMethods=new IdentityHashSet<>();
  }
  this.overrideMethods.add(method);
}",0.311377245508982
82834,"@Override public boolean overrides(IMethod candidate,ITypeContext typeContext){
  if (candidate.getName() != this.name || this.typeArity() != candidate.typeArity() || candidate.hasModifier(Modifiers.STATIC_FINAL)) {
    return false;
  }
  final ParameterList candidateParameters=candidate.getParameters();
  if (candidateParameters.size() != this.parameters.size()) {
    return false;
  }
  if (this.checkOverride0(candidate)) {
    return true;
  }
  for (int i=0, count=this.parameters.size(); i < count; i++) {
    final IType parType=this.parameters.get(i).getCovariantType().getConcreteType(typeContext);
    final IType candidateParType=candidateParameters.get(i).getCovariantType().getConcreteType(typeContext);
    if (!Types.isSameType(parType,candidateParType)) {
      return false;
    }
  }
  return true;
}","@Override public boolean overrides(IMethod candidate,ITypeContext typeContext){
  if (candidate.getName() != this.name || this.typeArity() != candidate.typeArity() || candidate.hasModifier(Modifiers.STATIC_FINAL)) {
    return false;
  }
  final ParameterList thisParameters=this.getParameters();
  final ParameterList candidateParameters=candidate.getParameters();
  if (candidateParameters.size() != thisParameters.size()) {
    return false;
  }
  if (this.overrideMethods != null && this.overrideMethods.contains(candidate)) {
    return true;
  }
  for (int i=0, count=thisParameters.size(); i < count; i++) {
    final IType parType=thisParameters.get(i).getCovariantType().getConcreteType(typeContext);
    final IType candidateParType=candidateParameters.get(i).getCovariantType().getConcreteType(typeContext);
    if (!Types.isSameType(parType,candidateParType)) {
      return false;
    }
  }
  return true;
}",0.928817451205511
82835,"@Override public void writeAnnotations(TypeAnnotatableVisitor visitor,int typeRef,String typePath){
  this.type.writeAnnotations(visitor,typeRef,typePath + '*');
}","@Override public void writeAnnotations(TypeAnnotatableVisitor visitor,int typeRef,String typePath){
  IType.writeAnnotations(this.type,visitor,typeRef,typePath + '*');
}",0.9457831325301204
82836,"private void printMarkers(GenSrc gensrc,MarkerList markers,Specialization spec){
  final StringBuilder builder=new StringBuilder();
  if (spec == null) {
    builder.append(I18n.get(""String_Node_Str"",this.sourceFile.getInputFile()));
  }
 else {
    builder.append(I18n.get(""String_Node_Str"",this.sourceFile.getInputFile(),spec.getFileName()));
  }
  builder.append('\n').append('\n');
  final boolean colors=gensrc.useAnsiColors();
  for (  Marker marker : markers) {
    marker.log(this.sourceFile,builder,colors);
  }
  gensrc.getOutput().println(builder);
}","private void printMarkers(GenSrc gensrc,MarkerList markers,Specialization spec){
  final StringBuilder builder=new StringBuilder();
  if (spec == null) {
    builder.append(I18n.get(""String_Node_Str"",this.sourceFile.getInputFile()));
  }
 else {
    builder.append(I18n.get(""String_Node_Str"",this.sourceFile.getInputFile(),spec.getFileName()));
  }
  builder.append('\n').append('\n');
  final boolean colors=gensrc.useAnsiColors();
  markers.log(this.sourceFile,builder,colors);
  gensrc.getOutput().println(builder);
}",0.8899167437557817
82837,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  if (!this.type.isResolved()) {
    return;
  }
  this.checkSuperType(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
}",0.6983050847457627
82838,"private void checkSuperType(MarkerList markers,IContext context){
  final IClass superClass=this.type.getTheClass();
  final IClass enclosingClass=context.getThisClass();
  final IType enclosingType=enclosingClass.getClassType();
  final String message;
  boolean indirectSuperInterface=false;
  if (superClass == enclosingClass) {
    message=""String_Node_Str"";
  }
 else   if (!Types.isSuperType(this.type,enclosingType)) {
    message=""String_Node_Str"";
  }
 else {
    if (enclosingClass.getSuperType().isSameClass(this.type)) {
      return;
    }
    if (superClass.isInterface()) {
      for (int i=0, count=enclosingClass.interfaceCount(); i < count; i++) {
        if (enclosingClass.getInterface(i).isSameClass(this.type)) {
          return;
        }
      }
      indirectSuperInterface=true;
    }
    message=""String_Node_Str"";
  }
  final Marker marker=Markers.semanticError(this.type.getPosition(),message);
  if (indirectSuperInterface) {
    marker.addInfo(Markers.getSemantic(""String_Node_Str"",this.type,enclosingClass.getName()));
  }
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",enclosingType));
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",this.type));
  markers.add(marker);
}","private void checkSuperType(MarkerList markers,IContext context){
  final IClass superClass=this.type.getTheClass();
  final IClass enclosingClass=context.getThisClass();
  final IType enclosingType=enclosingClass.getClassType();
  final String message;
  boolean indirectSuperInterface=false;
  if (superClass == enclosingClass) {
    message=""String_Node_Str"";
  }
 else   if (!Types.isSuperType(this.type,enclosingType)) {
    message=""String_Node_Str"";
  }
 else {
    final IType superType=enclosingClass.getSuperType();
    if (superType.isSameClass(this.type)) {
      this.type=superType;
      return;
    }
    if (superClass.isInterface()) {
      for (int i=0, count=enclosingClass.interfaceCount(); i < count; i++) {
        final IType interfaceType=enclosingClass.getInterface(i);
        if (interfaceType.isSameClass(this.type)) {
          this.type=interfaceType;
          return;
        }
      }
      indirectSuperInterface=true;
    }
    message=""String_Node_Str"";
  }
  final Marker marker=Markers.semanticError(this.type.getPosition(),message);
  if (indirectSuperInterface) {
    marker.addInfo(Markers.getSemantic(""String_Node_Str"",this.type,enclosingClass.getName()));
  }
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",enclosingType));
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",this.type));
  markers.add(marker);
}",0.8918083462132921
82839,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (context.isStatic()) {
    markers.add(Markers.semantic(this.position,""String_Node_Str""));
    return;
  }
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    return;
  }
  final IClass enclosingClass=context.getThisClass();
  final IType superType=enclosingClass.getSuperType();
  if (superType == null) {
    final Marker marker=Markers.semantic(this.position,""String_Node_Str"");
    marker.addInfo(Markers.getSemantic(""String_Node_Str"",enclosingClass.getClassType()));
    markers.add(marker);
    return;
  }
  this.type=superType;
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (context.isStatic()) {
    markers.add(Markers.semantic(this.position,""String_Node_Str""));
    return;
  }
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    if (this.type.isResolved()) {
      this.checkSuperType(markers,context);
    }
    return;
  }
  final IClass enclosingClass=context.getThisClass();
  final IType superType=enclosingClass.getSuperType();
  if (superType == null) {
    final Marker marker=Markers.semanticError(this.position,""String_Node_Str"");
    marker.addInfo(Markers.getSemantic(""String_Node_Str"",enclosingClass.getClassType()));
    markers.add(marker);
    return;
  }
  this.type=superType;
}",0.9365645046329294
82840,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    return;
  }
  final IType thisType=context.getThisType();
  if (thisType != null) {
    this.type=thisType;
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    final IClass iclass=this.type.getTheClass();
    if (iclass != null) {
      this.type=iclass.getThisType();
    }
    return;
  }
  final IType thisType=context.getThisType();
  if (thisType != null) {
    this.type=thisType;
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}",0.8598351001177856
82841,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.annotations != null) {
    this.annotations.resolveTypes(markers,context,this);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolveType(markers,context);
  }
  if (this.upperBound == null) {
    this.upperBound=DEFAULT_BOUND;
  }
  this.upperBound=this.upperBound.resolveType(markers,context);
  this.upperBounds=getUpperBounds(this.upperBound);
  IType type=this.upperBounds[0];
  IClass typeClass=type.getTheClass();
  if (typeClass != null && !typeClass.isInterface()) {
    this.erasure=type;
  }
  for (int i=1, count=this.upperBounds.length; i < count; i++) {
    type=this.upperBounds[i];
    typeClass=type.getTheClass();
    if (typeClass != null && !typeClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",Util.classSignatureToString(typeClass)));
      markers.add(marker);
    }
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.annotations != null) {
    this.annotations.resolveTypes(markers,context,this);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolveType(markers,context);
  }
  if (this.upperBound == null) {
    this.upperBound=Types.NULLABLE_ANY;
  }
  this.upperBound=this.upperBound.resolveType(markers,context);
  this.upperBounds=getUpperBounds(this.upperBound);
  IType type=this.upperBounds[0];
  IClass typeClass=type.getTheClass();
  if (typeClass != null && !typeClass.isInterface()) {
    this.erasure=type;
  }
  for (int i=1, count=this.upperBounds.length; i < count; i++) {
    type=this.upperBounds[i];
    typeClass=type.getTheClass();
    if (typeClass != null && !typeClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",Util.classSignatureToString(typeClass)));
      markers.add(marker);
    }
  }
}",0.9890840056953014
82842,"@Override public boolean isSuperTypeOf(IType subType){
  if (!isSuperType(this.getUpperBound(),subType)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  if (lowerBound != null) {
    if (!isSuperType(subType,lowerBound)) {
      return false;
    }
  }
  return true;
}","@Override public boolean isSuperTypeOf(IType subType){
  if (!isSuperType(this.getSafeUpperBound(),subType)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || isSuperType(subType,lowerBound);
}",0.7903525046382189
82843,"@Override public boolean isSuperClassOf(IType subType){
  if (!isSuperClass(this.getUpperBound(),subType)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || isSuperClass(subType,lowerBound);
}","@Override public boolean isSuperClassOf(IType subType){
  if (!isSuperClass(this.getSafeUpperBound(),subType)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || isSuperClass(subType,lowerBound);
}",0.991869918699187
82844,"@Override public boolean isAssignableFrom(IType type,ITypeContext typeContext){
  if (!Types.isSuperType(this.getUpperBound().getConcreteType(typeContext),type)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSuperType(type,lowerBound.getConcreteType(typeContext));
}","@Override public boolean isAssignableFrom(IType type,ITypeContext typeContext){
  if (!Types.isSuperType(this.getSafeUpperBound().getConcreteType(typeContext),type)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSuperType(type,lowerBound.getConcreteType(typeContext));
}",0.993975903614458
82845,"@Override public boolean isSameType(IType type){
  if (Types.isSameType(type,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound != null && Types.isSameType(lowerBound,type);
}","@Override public boolean isSameType(IType type){
  if (Types.isSameType(type,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSameType(lowerBound,type);
}",0.9620253164556962
82846,"@Override public IClass getTheClass(){
  return this.getUpperBound().getTheClass();
}","@Override public IClass getTheClass(){
  return this.getSafeUpperBound().getTheClass();
}",0.9770114942528736
82847,"@Override public void getImplicitMatches(MatchList<IMethod> list,IValue value,IType targetType){
  this.getUpperBound().getImplicitMatches(list,value,targetType);
}","@Override public void getImplicitMatches(MatchList<IMethod> list,IValue value,IType targetType){
  this.getSafeUpperBound().getImplicitMatches(list,value,targetType);
}",0.9879518072289156
82848,"@Override public boolean isSubClassOf(IType superType){
  if (isSuperClass(superType,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound != null && isSuperClass(lowerBound,superType) || Types.isSameClass(superType,Types.OBJECT);
}","@Override public boolean isSubClassOf(IType superType){
  return isSuperClass(superType,this.getUpperBound());
}",0.5260545905707196
82849,"@Override public IDataMember resolveField(Name name){
  return this.getUpperBound().resolveField(name);
}","@Override public IDataMember resolveField(Name name){
  return this.getSafeUpperBound().resolveField(name);
}",0.9813084112149532
82850,"@Override public void getMethodMatches(MatchList<IMethod> list,IValue instance,Name name,IArguments arguments){
  this.getUpperBound().getMethodMatches(list,instance,name,arguments);
}","@Override public void getMethodMatches(MatchList<IMethod> list,IValue instance,Name name,IArguments arguments){
  this.getSafeUpperBound().getMethodMatches(list,instance,name,arguments);
}",0.989247311827957
82851,"@Override public boolean isSameClass(IType type){
  if (Types.isSameClass(type,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound != null && Types.isSameClass(lowerBound,type);
}","@Override public boolean isSameClass(IType type){
  if (Types.isSameClass(type,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSameClass(lowerBound,type);
}",0.9625
82852,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.annotations != null) {
    for (int i=0, size=this.annotations.annotationCount(); i < size; i++) {
      this.annotations.getAnnotation(i).toString(prefix,buffer);
      buffer.append(' ');
    }
  }
  buffer.append(""String_Node_Str"");
  this.variance.appendPrefix(buffer);
  buffer.append(this.name);
  final IType upperBound=this.getUpperBound();
  if (upperBound != null) {
    buffer.append(""String_Node_Str"");
    upperBound.toString(prefix,buffer);
  }
  final IType lowerBound=this.getLowerBound();
  if (lowerBound != null) {
    buffer.append(""String_Node_Str"");
    lowerBound.toString(prefix,buffer);
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.annotations != null) {
    for (int i=0, size=this.annotations.annotationCount(); i < size; i++) {
      this.annotations.getAnnotation(i).toString(prefix,buffer);
      buffer.append(' ');
    }
  }
  buffer.append(""String_Node_Str"");
  this.variance.appendPrefix(buffer);
  buffer.append(this.name);
  final IType upperBound=this.getSafeUpperBound();
  if (upperBound != null) {
    buffer.append(""String_Node_Str"");
    upperBound.toString(prefix,buffer);
  }
  final IType lowerBound=this.getLowerBound();
  if (lowerBound != null) {
    buffer.append(""String_Node_Str"");
    lowerBound.toString(prefix,buffer);
  }
}",0.997134670487106
82853,"@Override public boolean isSubTypeOf(IType superType){
  if (isSuperType(superType,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound != null && isSuperType(lowerBound,superType) || Types.isExactType(superType,Types.OBJECT);
}","@Override public boolean isSubTypeOf(IType superType){
  return isSuperType(superType,this.getUpperBound());
}",0.5226130653266332
82854,"@Override public boolean isSuperTypeOf(IType subType){
  if (subType.hasTag(IType.NULL)) {
    return true;
  }
  final NullableType nullable=subType.extract(NullableType.class);
  return Types.isSuperType(this.type,nullable != null ? nullable.getElementType() : subType);
}","@Override public boolean isSuperTypeOf(IType subType){
  if (subType.hasTag(IType.NULL)) {
    return true;
  }
  final NullableType nullable=subType.extract(NullableType.class);
  if (nullable != null) {
    return Types.isSuperType(this,nullable.getElementType());
  }
  return Types.isSuperType(this.type,subType);
}",0.7622259696458684
82855,"@Override public void checkType(MarkerList markers,IContext context,int position){
  ModifierUtil.checkVisibility(this.theClass,this.position,markers,context);
  final int count=Math.min(this.typeArgumentCount,this.theClass.typeParameterCount());
  for (int i=0; i < count; i++) {
    final ITypeParameter typeVariable=this.theClass.getTypeParameter(i);
    final IType type=this.typeArguments[i];
    if (type.isResolved() && !typeVariable.isSuperTypeOf(type)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"",typeVariable.getName().qualified,this.theClass.getFullName());
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",type));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",typeVariable));
      markers.add(marker);
    }
  }
  if ((position & TypePosition.GENERIC_FLAG) == 0) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
  super.checkType(markers,context,position);
}","@Override public void checkType(MarkerList markers,IContext context,int position){
  ModifierUtil.checkVisibility(this.theClass,this.position,markers,context);
  final int count=Math.min(this.typeArgumentCount,this.theClass.typeParameterCount());
  for (int i=0; i < count; i++) {
    final ITypeParameter typeVariable=this.theClass.getTypeParameter(i);
    final IType typeArgument=this.typeArguments[i];
    if (typeArgument.isResolved() && !Variance.checkCompatible(Variance.COVARIANT,typeVariable.getCovariantType(),typeArgument)) {
      final Marker marker=Markers.semanticError(typeArgument.getPosition(),""String_Node_Str"",typeVariable.getName().qualified,this.theClass.getFullName());
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",typeArgument));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",typeVariable));
      markers.add(marker);
    }
  }
  if ((position & TypePosition.GENERIC_FLAG) == 0) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
  super.checkType(markers,context,position);
}",0.9342560553633218
82856,"@Override public boolean isSuperTypeOf(IType subType){
  return this.typeParameter.isAssignableFrom(subType,ITypeContext.COVARIANT);
}","@Override public boolean isSuperTypeOf(IType subType){
  return this.backReference || this.typeParameter.isAssignableFrom(subType,ITypeContext.COVARIANT);
}",0.9241379310344828
82857,"@Override public boolean isSameType(IType type){
  return this.typeParameter.isSuperTypeOf(type);
}","@Override public boolean isSameType(IType type){
  return this.backReference || this.typeParameter.isSuperTypeOf(type);
}",0.9
82858,"public CovariantTypeVarType(ITypeParameter typeVariable){
  super(typeVariable);
}","public CovariantTypeVarType(ITypeParameter typeParameter,boolean backReference){
  super(typeParameter);
  this.backReference=backReference;
}",0.6785714285714286
82859,"@Override public boolean isSubTypeOf(IType superType){
  return this.typeParameter.isSuperTypeOf(superType);
}","@Override public boolean isSubTypeOf(IType superType){
  return this.backReference || this.typeParameter.isSuperTypeOf(superType);
}",0.9090909090909092
82860,"@Override public IType getConcreteType(ITypeContext context){
  IType type=super.getConcreteType(context);
  final TypeVarType typeVar=type.extract(TypeVarType.class);
  return typeVar != null && typeVar.getTypeVariable() == this.typeParameter ? this : type;
}","@Override public IType getConcreteType(ITypeContext context){
  final IType type=super.getConcreteType(context);
  final TypeVarType typeVar=type.extract(TypeVarType.class);
  return typeVar != null && typeVar.getTypeVariable() == this.typeParameter ? this : type;
}",0.988593155893536
82861,"public CodeTypeParameter(ICodePosition position,ITypeParametric generic,Name name,Variance variance){
  super(generic,name,variance);
  this.position=position;
  this.upperBound=Types.OBJECT;
}","public CodeTypeParameter(ICodePosition position,ITypeParametric generic,Name name,Variance variance){
  super(generic,name,variance);
  this.position=position;
}",0.9096045197740112
82862,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.annotations != null) {
    this.annotations.resolveTypes(markers,context,this);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolveType(markers,context);
  }
  if (this.upperBound == null) {
    return;
  }
  this.upperBound=this.upperBound.resolveType(markers,context);
  this.upperBounds=getUpperBounds(this.upperBound);
  IType type=this.upperBounds[0];
  IClass typeClass=type.getTheClass();
  if (typeClass != null && !typeClass.isInterface()) {
    this.erasure=type;
  }
  for (int i=1, count=this.upperBounds.length; i < count; i++) {
    type=this.upperBounds[i];
    typeClass=type.getTheClass();
    if (typeClass != null && !typeClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",Util.classSignatureToString(typeClass)));
      markers.add(marker);
    }
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.annotations != null) {
    this.annotations.resolveTypes(markers,context,this);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolveType(markers,context);
  }
  if (this.upperBound == null) {
    this.upperBound=DEFAULT_BOUND;
  }
  this.upperBound=this.upperBound.resolveType(markers,context);
  this.upperBounds=getUpperBounds(this.upperBound);
  IType type=this.upperBounds[0];
  IClass typeClass=type.getTheClass();
  if (typeClass != null && !typeClass.isInterface()) {
    this.erasure=type;
  }
  for (int i=1, count=this.upperBounds.length; i < count; i++) {
    type=this.upperBounds[i];
    typeClass=type.getTheClass();
    if (typeClass != null && !typeClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",Util.classSignatureToString(typeClass)));
      markers.add(marker);
    }
  }
}",0.9831649831649832
82863,"@Override public boolean isAssignableFrom(IType type,ITypeContext typeContext){
  if (!Types.isAssignable(this.getUpperBound().getConcreteType(typeContext),type)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isAssignable(type,lowerBound.getConcreteType(typeContext));
}","@Override public boolean isAssignableFrom(IType type,ITypeContext typeContext){
  if (!Types.isSuperType(this.getUpperBound().getConcreteType(typeContext),type)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSuperType(type,lowerBound.getConcreteType(typeContext));
}",0.9486404833836858
82864,"@Override public IValue convertValueTo(IValue value,IType targetType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isConvertibleTo(targetType)) {
    return null;
  }
  final LiteralConversion conversion=new LiteralConversion(value,LazyTypes.UNWRAP);
  conversion.setType(targetType);
  return conversion;
}","@Override public IValue convertValueTo(IValue value,IType targetType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isConvertibleTo(targetType)) {
    return null;
  }
  final LiteralConversion conversion=new LiteralConversion(value,LazyTypes.UNWRAP);
  conversion.setType(this.type);
  return conversion;
}",0.9836065573770492
82865,"private void generateSwitch(MethodWriter writer,Object frameType) throws BytecodeException {
}","private void generateSwitch(MethodWriter writer,Object frameType) throws BytecodeException {
  MatchCase defaultCase=null;
  Label defaultLabel=null;
  int cases=0;
  int low=Integer.MAX_VALUE;
  int high=Integer.MIN_VALUE;
  boolean switchVar=false;
  for (int i=0; i < this.caseCount; i++) {
    MatchCase matchCase=this.cases[i];
    IPattern pattern=matchCase.pattern;
    if (switchVar || pattern.switchCheck()) {
      switchVar=true;
    }
    if (pattern.isExhaustive()) {
      defaultCase=matchCase;
      defaultLabel=new Label();
      continue;
    }
    int min=pattern.minValue();
    if (min < low) {
      low=min;
    }
    int max=pattern.maxValue();
    if (max > high) {
      high=max;
    }
    cases+=pattern.subPatterns();
  }
  final Label endLabel=new Label();
  Label matchErrorLabel=null;
  if (!this.exhaustive) {
    switchVar=true;
    matchErrorLabel=new Label();
    if (defaultLabel == null) {
      defaultLabel=matchErrorLabel;
    }
  }
 else   if (defaultLabel == null) {
    defaultLabel=endLabel;
  }
  final boolean expr=frameType != null;
  final IType matchedType=this.matchedValue.getType();
  this.matchedValue.writeExpression(writer,null);
  int varIndex=-1;
  if (switchVar) {
    varIndex=writer.localCount();
    writer.visitVarInsn(matchedType.getStoreOpcode(),varIndex);
    writer.visitVarInsn(matchedType.getLoadOpcode(),varIndex);
  }
  if (!matchedType.isPrimitive()) {
    writer.visitMethodInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
  final int localCount=writer.localCount();
  final KeyCache keyCache=new KeyCache(cases);
  for (int i=0; i < this.caseCount; i++) {
    final MatchCase matchCase=this.cases[i];
    final IPattern pattern=matchCase.pattern;
    final int subPatterns=pattern.subPatterns();
    for (int j=0; j < subPatterns; j++) {
      final IPattern subPattern=pattern.subPattern(j);
      if (subPattern.isExhaustive()) {
        continue;
      }
      final int switchValue=subPattern.switchValue();
      keyCache.add(switchValue,matchCase,subPattern);
    }
  }
  final Collection<KeyCache.Entry> entries=keyCache.uniqueEntries();
  for (  KeyCache.Entry topEntry : entries) {
    for (KeyCache.Entry entry=topEntry; entry != null; entry=entry.next) {
      entry.switchLabel=new Label();
    }
  }
  if (useTableSwitch(low,high,cases)) {
    this.writeTableSwitch(writer,entries,defaultLabel,low,high);
  }
 else {
    this.writeLookupSwitch(writer,entries,defaultLabel,cases);
  }
  for (  KeyCache.Entry topEntry : entries) {
    KeyCache.Entry entry=topEntry;
    final int key=entry.key;
    do {
      final KeyCache.Entry next=entry.next;
      final MatchCase matchCase=entry.matchCase;
      final IPattern pattern=entry.pattern;
      Label elseLabel;
      if (next != null && next.key == key) {
        elseLabel=next.switchLabel;
        if (elseLabel == null) {
          elseLabel=next.switchLabel=new Label();
        }
      }
 else {
        elseLabel=defaultLabel;
      }
      writer.visitTargetLabel(entry.switchLabel);
      if (pattern.switchCheck()) {
        pattern.writeInvJump(writer,varIndex,matchedType,elseLabel);
      }
      if (matchCase.condition != null) {
        matchCase.condition.writeInvJump(writer,elseLabel);
      }
      this.writeAction(writer,expr,frameType,matchCase.action);
      writer.resetLocals(localCount);
      writer.visitJumpInsn(Opcodes.GOTO,endLabel);
      entry=next;
    }
 while (entry != null && entry.key == key);
  }
  if (defaultCase != null) {
    writer.visitTargetLabel(defaultLabel);
    if (defaultCase.pattern.switchCheck()) {
      defaultCase.pattern.writeInvJump(writer,varIndex,matchedType,matchErrorLabel);
    }
    if (defaultCase.condition != null) {
      defaultCase.condition.writeInvJump(writer,matchErrorLabel);
    }
    this.writeAction(writer,expr,frameType,defaultCase.action);
    writer.resetLocals(localCount);
    writer.visitJumpInsn(Opcodes.GOTO,endLabel);
  }
  if (matchErrorLabel != null) {
    writer.visitLabel(matchErrorLabel);
    this.writeMatchError(writer,varIndex,matchedType);
  }
  writer.visitLabel(endLabel);
  if (switchVar) {
    writer.resetLocals(varIndex);
  }
}",0.0436194895591647
82866,"protected void addVariable(FieldInitializer initializer,MarkerList markers,IContext context){
  final IVariable variable=initializer.variable;
  final Name variableName=variable.getName();
  if (variable.getValue() == null) {
    variable.setValue(variable.getType().getDefaultValue());
    markers.add(Markers.semanticError(this.position,""String_Node_Str"",variableName));
  }
  final IDataMember dataMember=context.resolveField(variableName);
  if (dataMember != null && dataMember.isVariable()) {
    markers.add(Markers.semantic(initializer.getPosition(),""String_Node_Str"",variableName));
  }
  if (this.variables == null) {
    this.variables=new ArrayList<>();
  }
  this.variables.add(variable);
}","protected void addVariable(FieldInitializer initializer,MarkerList markers,IContext context){
  final IVariable variable=initializer.variable;
  final Name variableName=variable.getName();
  if (variable.getValue() == null) {
    variable.setValue(variable.getType().getDefaultValue());
    markers.add(Markers.semanticError(variable.getPosition(),""String_Node_Str"",variableName));
  }
  final IDataMember dataMember=context.resolveField(variableName);
  if (dataMember != null && dataMember.isVariable()) {
    markers.add(Markers.semantic(initializer.getPosition(),""String_Node_Str"",variableName));
  }
  if (this.variables == null) {
    this.variables=new ArrayList<>();
  }
  this.variables.add(variable);
}",0.9752650176678446
82867,"@Override public void writeInnerClassInfo(ClassWriter writer){
  if (this.enclosingClass != null) {
    int modifiers=this.modifiers.toFlags() & 0x761F;
    if ((modifiers & Modifiers.INTERFACE_CLASS) != Modifiers.INTERFACE_CLASS) {
      modifiers|=Modifiers.STATIC;
    }
 else {
      modifiers&=~Modifiers.STATIC;
    }
    final String outerName=this.enclosingClass.getInternalName();
    writer.visitInnerClass(this.getInternalName(),outerName,this.name.qualified,modifiers);
    writer.visitOuterClass(outerName,null,null);
  }
}","@Override public void writeInnerClassInfo(ClassWriter writer){
  if (this.enclosingClass != null) {
    int modifiers=this.modifiers.toFlags() & 0x761F;
    if ((modifiers & Modifiers.INTERFACE_CLASS) != Modifiers.INTERFACE_CLASS) {
      modifiers|=Modifiers.STATIC;
    }
 else {
      modifiers&=~Modifiers.STATIC;
    }
    final String outerName=this.enclosingClass.getInternalName();
    writer.visitInnerClass(this.getInternalName(),outerName,this.name.qualified,modifiers);
  }
}",0.9521016617790812
82868,"protected void writeField(ClassWriter writer,int modifiers,String name,String descriptor){
  final String signature=this.type.needsSignature() ? this.getSignature() : null;
  final Object value;
  if (this.value != null && this.hasModifier(Modifiers.STATIC) && this.hasConstantValue()) {
    value=this.value.toObject();
  }
 else {
    value=null;
  }
  final FieldVisitor fieldVisitor=writer.visitField(modifiers,name,descriptor,signature,value);
  IField.writeAnnotations(fieldVisitor,this.modifiers,this.annotations,this.type);
  fieldVisitor.visitEnd();
}","protected void writeField(ClassWriter writer,int modifiers,String name,String descriptor){
  final String signature=this.getType().needsSignature() ? this.getSignature() : null;
  final Object value;
  if (this.value != null && this.hasModifier(Modifiers.STATIC) && this.hasConstantValue()) {
    value=this.value.toObject();
  }
 else {
    value=null;
  }
  final FieldVisitor fieldVisitor=writer.visitField(modifiers,name,descriptor,signature,value);
  IField.writeAnnotations(fieldVisitor,this.modifiers,this.annotations,this.type);
  fieldVisitor.visitEnd();
}",0.9937777777777778
82869,"private RetentionPolicy getRetention(){
  return this.type.getTheClass().getMetadata().getRetention();
}","private RetentionPolicy getRetention(){
  final IClass type=this.type.getTheClass();
  return type == null ? null : type.getMetadata().getRetention();
}",0.765625
82870,"private IType resolveTopLevelWith(MarkerList markers,IContext context){
  final IClass theClass=context.resolveClass(this.name);
  if (theClass != null) {
    final IType classType=theClass.getThisType();
    return this.checkCount(markers,theClass,""String_Node_Str"",classType);
  }
  final ITypeParameter typeParameter=context.resolveTypeParameter(this.name);
  if (typeParameter != null) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str"",typeParameter.getName()));
    return new ResolvedTypeVarType(typeParameter,this.position);
  }
  final ITypeAlias typeAlias=context.resolveTypeAlias(this.name,this.typeArgumentCount);
  if (typeAlias != null) {
    final IType type=typeAlias.getType();
    return this.checkCount(markers,typeAlias,""String_Node_Str"",type);
  }
  return null;
}","private IType resolveTopLevelWith(MarkerList markers,IContext context){
  final IClass theClass=context.resolveClass(this.name);
  if (theClass != null) {
    final IType classType=theClass.getThisType();
    return this.checkCount(markers,theClass,""String_Node_Str"",classType);
  }
  final ITypeParameter typeParameter=context.resolveTypeParameter(this.name);
  if (typeParameter != null) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str"",typeParameter.getName()));
    return new ResolvedTypeVarType(typeParameter,this.position);
  }
  final ITypeAlias typeAlias=context.resolveTypeAlias(this.name,this.typeArgumentCount);
  if (typeAlias != null) {
    final IType aliasType=typeAlias.getType();
    if (!aliasType.isResolved()) {
      markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.name));
      return aliasType.atPosition(this.position);
    }
    return this.checkCount(markers,typeAlias,""String_Node_Str"",aliasType);
  }
  return null;
}",0.8375973303670745
82871,"private IType resolveTopLevelWith(@SuppressWarnings(""String_Node_Str"") MarkerList markers,IContext context){
  final IClass theClass=context.resolveClass(this.name);
  if (theClass != null) {
    return new ResolvedClassType(theClass,this.position);
  }
  final ITypeParameter typeParameter=context.resolveTypeParameter(this.name);
  if (typeParameter != null) {
    return new ResolvedTypeVarType(typeParameter,this.position);
  }
  final ITypeAlias type=context.resolveTypeAlias(this.name,0);
  if (type != null) {
    return type.getType().getConcreteType(ITypeContext.DEFAULT).atPosition(this.position);
  }
  return null;
}","private IType resolveTopLevelWith(@SuppressWarnings(""String_Node_Str"") MarkerList markers,IContext context){
  final IClass theClass=context.resolveClass(this.name);
  if (theClass != null) {
    return new ResolvedClassType(theClass,this.position);
  }
  final ITypeParameter typeParameter=context.resolveTypeParameter(this.name);
  if (typeParameter != null) {
    return new ResolvedTypeVarType(typeParameter,this.position);
  }
  final ITypeAlias type=context.resolveTypeAlias(this.name,0);
  if (type != null) {
    final IType aliasType=type.getType();
    if (!aliasType.isResolved()) {
      markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.name));
      return aliasType.atPosition(this.position);
    }
    return aliasType.getConcreteType(ITypeContext.DEFAULT).atPosition(this.position);
  }
  return null;
}",0.8454731109598366
82872,"public void findFiles(File sourceDir,File targetDir){
  final String[] subFiles=sourceDir.list();
  if (subFiles == null) {
    return;
  }
  Map<String,Template> templates=new HashMap<>();
  List<Specialization> specializations=new ArrayList<>();
  for (  String subFile : subFiles) {
    final File sourceFile=new File(sourceDir,subFile);
    if (sourceFile.isDirectory()) {
      this.findFiles(sourceFile,new File(targetDir,subFile));
      continue;
    }
    final int endIndex=subFile.length() - 4;
    if (subFile.endsWith(""String_Node_Str"")) {
      final String fileName=subFile.substring(0,endIndex);
      templates.put(fileName,new Template(sourceFile,targetDir,fileName));
    }
 else     if (subFile.endsWith(""String_Node_Str"")) {
      final int dashIndex=subFile.lastIndexOf('-',endIndex);
      final String fileName=subFile.substring(0,dashIndex);
      final String specName=subFile.substring(dashIndex + 1,endIndex);
      specializations.add(new Specialization(sourceFile,fileName,specName));
    }
  }
  for (  Specialization spec : specializations) {
    this.specs.put(spec.getSourceFile(),spec);
    final Template template=templates.get(spec.getTemplateName());
    if (template == null) {
      continue;
    }
    spec.setTemplate(template);
    template.addSpecialization(spec);
  }
  this.templates.addAll(templates.values());
}","public void findFiles(File sourceDir,File targetDir){
  final String[] subFiles=sourceDir.list();
  if (subFiles == null) {
    return;
  }
  Map<String,Template> templates=new HashMap<>();
  List<Specialization> specializations=new ArrayList<>();
  for (  String subFile : subFiles) {
    final File sourceFile=new File(sourceDir,subFile);
    if (sourceFile.isDirectory()) {
      this.findFiles(sourceFile,new File(targetDir,subFile));
      continue;
    }
    final int endIndex=subFile.length() - 4;
    if (subFile.endsWith(""String_Node_Str"")) {
      final String fileName=subFile.substring(0,endIndex);
      templates.put(fileName,new Template(sourceFile,targetDir,fileName));
    }
 else     if (subFile.endsWith(""String_Node_Str"")) {
      final int dashIndex=subFile.lastIndexOf('-',endIndex);
      final Specialization spec;
      if (dashIndex < 0) {
        spec=new Specialization(sourceFile,subFile.substring(0,endIndex));
      }
 else {
        final String fileName=subFile.substring(0,dashIndex);
        final String specName=subFile.substring(dashIndex + 1,endIndex);
        spec=new Specialization(sourceFile,fileName,specName);
      }
      specializations.add(spec);
    }
  }
  for (  Specialization spec : specializations) {
    this.specs.put(spec.getSourceFile(),spec);
    final Template template=templates.get(spec.getTemplateName());
    if (template == null) {
      continue;
    }
    spec.setTemplate(template);
    template.addSpecialization(spec);
  }
  this.templates.addAll(templates.values());
}",0.8662068965517241
82873,"@Override public void checkMatch(MatchList<IMethod> list,IValue receiver,Name name,IArguments arguments){
  if (name != this.name && name != null) {
    return;
  }
  final IParameterList parameters=this.getParameterList();
  final int parameterStartIndex;
  final int argumentStartIndex;
  final int argumentCount;
  final int parameterCount=parameters.size();
  final int[] matchValues;
  final IType[] matchTypes;
  boolean invalid=false;
  final int mod;
  if (receiver == null) {
    if (arguments == null) {
      list.add(new Candidate<>(this));
      return;
    }
    argumentCount=arguments.size();
    matchValues=new int[argumentCount];
    matchTypes=new IType[argumentCount];
    argumentStartIndex=0;
    parameterStartIndex=0;
  }
 else   if ((mod=this.modifiers.toFlags() & Modifiers.INFIX) != 0 && receiver.isClassAccess()) {
    if (!Types.isSuperType(this.enclosingClass.getClassType(),receiver.getType())) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,IValue.EXACT_MATCH,null,false));
      return;
    }
    parameterStartIndex=0;
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=1;
  }
 else {
    if (mod == Modifiers.STATIC && !receiver.isClassAccess()) {
      invalid=true;
    }
    final IType receiverType;
    if (mod == Modifiers.INFIX) {
      receiverType=parameters.get(0).getInternalType();
      parameterStartIndex=1;
    }
 else {
      receiverType=this.enclosingClass.getClassType();
      parameterStartIndex=0;
    }
    final int receiverMatch=TypeChecker.getTypeMatch(receiver,receiverType,list);
    if (receiverMatch == IValue.MISMATCH) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,receiverMatch,receiverType,false));
      return;
    }
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=receiverMatch;
    matchTypes[0]=receiverType;
  }
  final int parametersLeft=parameterCount - parameterStartIndex;
  if (argumentCount > parametersLeft && !this.isVariadic()) {
    return;
  }
  int defaults=0;
  int varargs=0;
  for (int argumentIndex=0; argumentIndex < parametersLeft; argumentIndex++) {
    final IParameter parameter=parameters.get(parameterStartIndex + argumentIndex);
    final int partialVarargs=arguments.checkMatch(matchValues,matchTypes,argumentStartIndex,argumentIndex,parameter,list);
    if (partialVarargs >= 0) {
      varargs+=partialVarargs;
      continue;
    }
    if (parameter.getValue() != null) {
      defaults++;
      continue;
    }
    return;
  }
  list.add(new Candidate<>(this,matchValues,matchTypes,defaults,varargs,invalid));
}","@Override public void checkMatch(MatchList<IMethod> list,IValue receiver,Name name,IArguments arguments){
  if (name != this.name && name != null) {
    return;
  }
  final IParameterList parameters=this.getParameterList();
  final int parameterStartIndex;
  final int argumentStartIndex;
  final int argumentCount;
  final int parameterCount=parameters.size();
  final int[] matchValues;
  final IType[] matchTypes;
  boolean invalid=false;
  final int mod;
  if (receiver == null) {
    if (arguments == null) {
      list.add(new Candidate<>(this));
      return;
    }
    argumentCount=arguments.size();
    matchValues=new int[argumentCount];
    matchTypes=new IType[argumentCount];
    argumentStartIndex=0;
    parameterStartIndex=0;
  }
 else   if ((mod=this.modifiers.toFlags() & Modifiers.INFIX) != 0 && receiver.isClassAccess()) {
    final IType receiverType=receiver.getType();
    if (!Types.isSuperType(this.enclosingClass.getClassType(),receiverType)) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,IValue.EXACT_MATCH,null,false));
      return;
    }
    parameterStartIndex=0;
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=1;
    matchTypes[0]=receiverType;
  }
 else {
    if (mod == Modifiers.STATIC && !receiver.isClassAccess()) {
      invalid=true;
    }
    final IType receiverType;
    if (mod == Modifiers.INFIX) {
      receiverType=parameters.get(0).getInternalType();
      parameterStartIndex=1;
    }
 else {
      receiverType=this.enclosingClass.getClassType();
      parameterStartIndex=0;
    }
    final int receiverMatch=TypeChecker.getTypeMatch(receiver,receiverType,list);
    if (receiverMatch == IValue.MISMATCH) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,receiverMatch,receiverType,false));
      return;
    }
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=receiverMatch;
    matchTypes[0]=receiverType;
  }
  final int parametersLeft=parameterCount - parameterStartIndex;
  if (argumentCount > parametersLeft && !this.isVariadic()) {
    return;
  }
  int defaults=0;
  int varargs=0;
  for (int argumentIndex=0; argumentIndex < parametersLeft; argumentIndex++) {
    final IParameter parameter=parameters.get(parameterStartIndex + argumentIndex);
    final int partialVarargs=arguments.checkMatch(matchValues,matchTypes,argumentStartIndex,argumentIndex,parameter,list);
    if (partialVarargs >= 0) {
      varargs+=partialVarargs;
      continue;
    }
    if (parameter.getValue() != null) {
      defaults++;
      continue;
    }
    return;
  }
  list.add(new Candidate<>(this,matchValues,matchTypes,defaults,varargs,invalid));
}",0.9834811337158756
82874,"private boolean isConvertibleFrom(IType type){
  return type.getAnnotation(MapType.MapTypes.MAP_CONVERTIBLE_CLASS) != null;
}","private boolean isConvertibleFrom(IType type){
  return type.getAnnotation(LazyTypes.MAP_CONVERTIBLE_CLASS) != null;
}",0.9547325102880658
82875,"@Override public IValue withType(IType mapType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!MapType.MapTypes.MAP_CLASS.isSubClassOf(mapType)) {
    IAnnotation annotation=mapType.getTheClass().getAnnotation(MapType.MapTypes.MAP_CONVERTIBLE_CLASS);
    if (annotation != null) {
      ArgumentList arguments=new ArgumentList(new IValue[]{new ArrayExpr(this.keys,this.count),new ArrayExpr(this.values,this.count)},2);
      return new LiteralConversion(this,annotation,arguments).withType(mapType,typeContext,markers,context);
    }
    return null;
  }
  final IType keyType=this.keyType=Types.resolveTypeSafely(mapType,MapType.MapTypes.KEY_VARIABLE);
  final IType valueType=this.valueType=Types.resolveTypeSafely(mapType,MapType.MapTypes.VALUE_VARIABLE);
  for (int i=0; i < this.count; i++) {
    this.keys[i]=TypeChecker.convertValue(this.keys[i],keyType,typeContext,markers,context,KEY_MARKER_SUPPLIER);
    this.values[i]=TypeChecker.convertValue(this.values[i],valueType,typeContext,markers,context,VALUE_MARKER_SUPPLIER);
  }
  return this;
}","@Override public IValue withType(IType mapType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!MapType.MapTypes.MAP_CLASS.isSubClassOf(mapType)) {
    IAnnotation annotation=mapType.getTheClass().getAnnotation(LazyTypes.MAP_CONVERTIBLE_CLASS);
    if (annotation != null) {
      ArgumentList arguments=new ArgumentList(new IValue[]{new ArrayExpr(this.keys,this.count),new ArrayExpr(this.values,this.count)},2);
      return new LiteralConversion(this,annotation,arguments).withType(mapType,typeContext,markers,context);
    }
    return null;
  }
  final IType keyType=this.keyType=Types.resolveTypeSafely(mapType,MapType.MapTypes.KEY_VARIABLE);
  final IType valueType=this.valueType=Types.resolveTypeSafely(mapType,MapType.MapTypes.VALUE_VARIABLE);
  for (int i=0; i < this.count; i++) {
    this.keys[i]=TypeChecker.convertValue(this.keys[i],keyType,typeContext,markers,context,KEY_MARKER_SUPPLIER);
    this.values[i]=TypeChecker.convertValue(this.values[i],valueType,typeContext,markers,context,VALUE_MARKER_SUPPLIER);
  }
  return this;
}",0.9929939280709948
82876,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue receiver,IContext context){
  if (receiver != null) {
    if (this.modifiers.hasIntModifier(Modifiers.STATIC)) {
      if (receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=null;
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
    }
 else {
      IType type=this.enclosingClass.getClassType();
      receiver=TypeChecker.convertValue(receiver,type,type,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      receiver=new ThisExpr(position,this.enclosingClass.getType(),context,markers);
    }
  }
  ModifierUtil.checkVisibility(this,position,markers,context);
  return receiver;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue receiver,IContext context){
  if (receiver != null) {
    if (this.modifiers.hasIntModifier(Modifiers.STATIC)) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
    }
 else {
      IType type=this.enclosingClass.getClassType();
      receiver=TypeChecker.convertValue(receiver,type,type,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      receiver=new ThisExpr(position,this.enclosingClass.getType(),context,markers);
    }
  }
  ModifierUtil.checkVisibility(this,position,markers,context);
  return receiver;
}",0.987133666904932
82877,"@Override public void writeClassInit(MethodWriter writer) throws BytecodeException {
  if (this.traitInit) {
    writer.visitVarInsn(Opcodes.ALOAD,0);
    writer.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.getInternalName(),TraitMetadata.INIT_NAME,""String_Node_Str"",false);
  }
  this.metadata.writeClassInit(writer);
  if (this.body != null) {
    for (int i=0, count=this.body.fieldCount(); i < count; i++) {
      this.body.getField(i).writeClassInit(writer);
    }
    for (int i=0, count=this.body.propertyCount(); i < count; i++) {
      this.body.getProperty(i).writeClassInit(writer);
    }
    for (int i=0, count=this.body.initializerCount(); i < count; i++) {
      this.body.getInitializer(i).writeClassInit(writer);
    }
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeClassInit(writer);
  }
}","@Override public void writeClassInit(MethodWriter writer) throws BytecodeException {
  if (this.traitInit) {
    writer.visitVarInsn(Opcodes.ALOAD,0);
    writer.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.getInternalName(),TraitMetadata.INIT_NAME,""String_Node_Str"",false);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeClassInit(writer);
  }
  this.metadata.writeClassInit(writer);
  if (this.body == null) {
    return;
  }
  for (int i=0, count=this.body.fieldCount(); i < count; i++) {
    this.body.getField(i).writeClassInit(writer);
  }
  for (int i=0, count=this.body.propertyCount(); i < count; i++) {
    this.body.getProperty(i).writeClassInit(writer);
  }
  for (int i=0, count=this.body.initializerCount(); i < count; i++) {
    this.body.getInitializer(i).writeClassInit(writer);
  }
}",0.8518518518518519
82878,"@Override public void writeStaticInit(MethodWriter writer) throws BytecodeException {
  this.metadata.writeStaticInit(writer);
  if (this.body != null) {
    for (int i=0, count=this.body.fieldCount(); i < count; i++) {
      this.body.getField(i).writeStaticInit(writer);
    }
    for (int i=0, count=this.body.propertyCount(); i < count; i++) {
      this.body.getProperty(i).writeStaticInit(writer);
    }
    for (int i=0, count=this.body.initializerCount(); i < count; i++) {
      this.body.getInitializer(i).writeStaticInit(writer);
    }
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeStaticInit(writer);
  }
}","@Override public void writeStaticInit(MethodWriter writer) throws BytecodeException {
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeStaticInit(writer);
  }
  this.metadata.writeStaticInit(writer);
  if (this.body == null) {
    return;
  }
  for (int i=0, count=this.body.fieldCount(); i < count; i++) {
    this.body.getField(i).writeStaticInit(writer);
  }
  for (int i=0, count=this.body.propertyCount(); i < count; i++) {
    this.body.getProperty(i).writeStaticInit(writer);
  }
  for (int i=0, count=this.body.initializerCount(); i < count; i++) {
    this.body.getInitializer(i).writeStaticInit(writer);
  }
}",0.7972350230414746
82879,"@Override public void appendSignature(StringBuilder buffer){
  buffer.append(this.name).append(':');
  if (this.upperBoundCount <= 0) {
    buffer.append(""String_Node_Str"");
    return;
  }
  if (this.upperBounds[0].getTheClass().isInterface()) {
    buffer.append(':');
  }
  this.upperBounds[0].appendSignature(buffer,false);
  for (int i=1; i < this.upperBoundCount; i++) {
    buffer.append(':');
    this.upperBounds[i].appendSignature(buffer,false);
  }
}","@Override public void appendSignature(StringBuilder buffer){
  buffer.append(this.name).append(':');
  if (this.upperBoundCount <= 0) {
    buffer.append(""String_Node_Str"");
    return;
  }
  final IClass theClass=this.upperBounds[0].getTheClass();
  if (theClass != null && theClass.isInterface()) {
    buffer.append(':');
  }
  this.upperBounds[0].appendSignature(buffer,false);
  for (int i=1; i < this.upperBoundCount; i++) {
    buffer.append(':');
    this.upperBounds[i].appendSignature(buffer,false);
  }
}",0.9364754098360656
82880,"@Override public boolean isResolved(){
  return this.type != null;
}","@Override public boolean isResolved(){
  return this.left.isResolved() && this.right.isResolved();
}",0.7261904761904762
82881,"@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    this.end(pm,true);
  return;
}
switch (this.mode) {
case END:
this.end(pm,true);
return;
case VALUE:
if ((type & Tokens.IDENTIFIER) != 0) {
this.parseInfixAccess(pm,token);
return;
}
if (this.parseValue(pm,token,type)) {
return;
}
case ACCESS:
switch (type) {
case BaseSymbols.DOT:
this.mode=DOT_ACCESS;
return;
case DyvilSymbols.ARROW_RIGHT:
case DyvilSymbols.DOUBLE_ARROW_RIGHT:
if (!this.hasFlag(IGNORE_LAMBDA)) {
break;
}
case DyvilKeywords.ELSE:
case DyvilKeywords.CATCH:
case DyvilKeywords.FINALLY:
case DyvilKeywords.WHILE:
this.end(pm,true);
return;
case DyvilKeywords.AS:
{
final CastOperator castOperator=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(castOperator));
this.value=castOperator;
return;
}
case DyvilKeywords.IS:
{
final InstanceOfOperator instanceOfOperator=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(instanceOfOperator));
this.value=instanceOfOperator;
return;
}
case DyvilKeywords.MATCH:
MatchExpr me=new MatchExpr(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
final SubscriptAccess subscriptAccess=new SubscriptAccess(token,this.value);
ArgumentListParser.parseArguments(pm,token.next(),subscriptAccess);
this.value=subscriptAccess;
this.mode=SUBSCRIPT_END;
return;
case BaseSymbols.OPEN_PARENTHESIS:
final ApplyMethodCall applyMethodCall=new ApplyMethodCall(this.value.getPosition(),this.value);
ArgumentListParser.parseArguments(pm,token.next(),applyMethodCall);
this.value=applyMethodCall;
this.mode=PARAMETERS_END;
return;
case BaseSymbols.COLON:
if (this.hasFlag(IGNORE_COLON)) {
this.end(pm,true);
return;
}
this.parseInfixAccess(pm,token,Names.colon);
return;
case DyvilSymbols.ELLIPSIS:
this.parseInfixAccess(pm,token,Names.dotdotdot);
return;
case BaseSymbols.EQUALS:
if (this.value == null) {
pm.report(Markers.syntaxError(token,""String_Node_Str"",token));
this.mode=VALUE;
return;
}
this.parseInfixAccess(pm,token,Names.eq);
return;
}
if (ParserUtil.isExpressionEnd(type)) {
this.end(pm,true);
return;
}
if (isSymbol(type)) {
this.parseInfixAccess(pm,token);
return;
}
if (this.value != null) {
if (this.hasFlag(IGNORE_APPLY) || this.ignoreClosure(type)) {
this.end(pm,true);
return;
}
final ApplyMethodCall applyCall=new ApplyMethodCall(ICodePosition.between(token.prev(),token),this.value,EmptyArguments.VISIBLE);
this.value=applyCall;
this.parseApply(pm,token,applyCall);
pm.reparse();
return;
}
pm.report(Markers.syntaxError(token,""String_Node_Str"",token.toString()));
return;
case DOT_ACCESS:
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
final BraceAccessExpr braceAccessExpr=new BraceAccessExpr(token.raw(),this.value);
pm.pushParser(new StatementListParser(braceAccessExpr::setStatement),true);
this.value=braceAccessExpr;
this.mode=ACCESS;
return;
}
if (isIdentifier(type)) {
this.parseInfixAccess(pm,token);
return;
}
pm.report(Markers.syntaxError(token,""String_Node_Str""));
if (ParserUtil.isTerminator(type)) {
pm.popParser(true);
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
if (!TypeParser.isGenericEnd(token,type)) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
pm.splitJump(token,1);
final IToken next=token.next();
if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
ArgumentListParser.parseArguments(pm,next.next(),(ICall)this.value);
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS;
return;
}
throw new Error(""String_Node_Str"");
}","@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    this.end(pm,true);
  return;
}
switch (this.mode) {
case END:
this.end(pm,true);
return;
case VALUE:
if ((type & Tokens.IDENTIFIER) != 0) {
this.parseInfixAccess(pm,token,token.nameValue());
return;
}
if (this.parseValue(pm,token,type)) {
return;
}
case ACCESS:
switch (type) {
case BaseSymbols.DOT:
this.mode=DOT_ACCESS;
return;
case DyvilSymbols.ARROW_RIGHT:
case DyvilSymbols.DOUBLE_ARROW_RIGHT:
if (!this.hasFlag(IGNORE_LAMBDA)) {
break;
}
case DyvilKeywords.ELSE:
case DyvilKeywords.CATCH:
case DyvilKeywords.FINALLY:
case DyvilKeywords.WHILE:
this.end(pm,true);
return;
case DyvilKeywords.AS:
{
final CastOperator castOperator=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(castOperator));
this.value=castOperator;
return;
}
case DyvilKeywords.IS:
{
final InstanceOfOperator instanceOfOperator=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(instanceOfOperator));
this.value=instanceOfOperator;
return;
}
case DyvilKeywords.MATCH:
MatchExpr me=new MatchExpr(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
final SubscriptAccess subscriptAccess=new SubscriptAccess(token,this.value);
ArgumentListParser.parseArguments(pm,token.next(),subscriptAccess);
this.value=subscriptAccess;
this.mode=SUBSCRIPT_END;
return;
case BaseSymbols.OPEN_PARENTHESIS:
final ApplyMethodCall applyMethodCall=new ApplyMethodCall(this.value.getPosition(),this.value);
ArgumentListParser.parseArguments(pm,token.next(),applyMethodCall);
this.value=applyMethodCall;
this.mode=PARAMETERS_END;
return;
case BaseSymbols.COLON:
if (this.hasFlag(IGNORE_COLON)) {
this.end(pm,true);
return;
}
this.parseInfixAccess(pm,token,Names.colon);
return;
case BaseSymbols.EQUALS:
if (this.value == null) {
pm.report(Markers.syntaxError(token,""String_Node_Str"",token));
this.mode=VALUE;
return;
}
this.parseInfixAccess(pm,token,Names.eq);
return;
}
if (ParserUtil.isExpressionEnd(type)) {
this.end(pm,true);
return;
}
if (isSymbol(type)) {
this.parseInfixAccess(pm,token);
return;
}
if (this.value != null) {
if (this.hasFlag(IGNORE_APPLY) || this.ignoreClosure(type)) {
this.end(pm,true);
return;
}
final ApplyMethodCall applyCall=new ApplyMethodCall(ICodePosition.between(token.prev(),token),this.value,EmptyArguments.VISIBLE);
this.value=applyCall;
this.parseApply(pm,token,applyCall);
pm.reparse();
return;
}
pm.report(Markers.syntaxError(token,""String_Node_Str"",token.toString()));
return;
case DOT_ACCESS:
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
final BraceAccessExpr braceAccessExpr=new BraceAccessExpr(token.raw(),this.value);
pm.pushParser(new StatementListParser(braceAccessExpr::setStatement),true);
this.value=braceAccessExpr;
this.mode=ACCESS;
return;
}
if (isIdentifier(type)) {
this.parseInfixAccess(pm,token,token.nameValue());
return;
}
pm.report(Markers.syntaxError(token,""String_Node_Str""));
if (ParserUtil.isTerminator(type)) {
pm.popParser(true);
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
if (!TypeParser.isGenericEnd(token,type)) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
pm.splitJump(token,1);
final IToken next=token.next();
if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
ArgumentListParser.parseArguments(pm,next.next(),(ICall)this.value);
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS;
return;
}
throw new Error(""String_Node_Str"");
}",0.9850414142662876
82882,"private void parseInfixAccess(IParserManager pm,IToken token,Name name){
  final int type=token.type();
  final IToken next=token.next();
  final int nextType=next.type();
  if (isSymbol(type)) {
    if (this.value == null) {
      final PrefixCall call=new PrefixCall(token.raw(),name);
      this.value=call;
      this.mode=ACCESS;
      if (this.isOperatorEnd(nextType)) {
        pm.report(next,""String_Node_Str"");
        return;
      }
      this.parseApply(pm,next,call);
      return;
    }
    if (this.isOperatorEnd(nextType) || isSymbol(nextType) && neighboring(token.prev(),token) && !neighboring(next,next.next())) {
      this.value=new PostfixCall(token.raw(),this.value,name);
      this.mode=ACCESS;
      return;
    }
    if (this.hasFlag(IGNORE_OPERATOR)) {
      this.valueConsumer.setValue(this.value);
      pm.popParser(true);
      return;
    }
    final OperatorChain chain;
    if (this.value.valueTag() == IValue.OPERATOR_CHAIN) {
      chain=(OperatorChain)this.value;
    }
 else {
      chain=new OperatorChain();
      chain.addOperand(this.value);
      this.value=chain;
    }
    chain.addOperator(name,token.raw());
    pm.pushParser(new ExpressionParser(chain::addOperand).withFlag(this.flags | IGNORE_OPERATOR));
    return;
  }
switch (nextType) {
case BaseSymbols.OPEN_PARENTHESIS:
{
      final MethodCall call=new MethodCall(token.raw(),this.value,name);
      ArgumentListParser.parseArguments(pm,next.next(),call);
      this.value=call;
      this.mode=PARAMETERS_END;
      pm.skip();
      return;
    }
case BaseSymbols.OPEN_SQUARE_BRACKET:
{
    final FieldAccess fieldAccess=new FieldAccess(token.raw(),this.value,name);
    final SubscriptAccess subscriptAccess=new SubscriptAccess(next.raw(),fieldAccess);
    ArgumentListParser.parseArguments(pm,next.next(),subscriptAccess);
    this.value=subscriptAccess;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    return;
  }
case DyvilSymbols.ARROW_RIGHT:
case DyvilSymbols.DOUBLE_ARROW_RIGHT:
if (this.hasFlag(IGNORE_LAMBDA)) {
  break;
}
pm.pushParser(new LambdaOrTupleParser(this,LambdaOrTupleParser.SINGLE_PARAMETER),true);
this.mode=END;
return;
}
if (isGenericCall(next,nextType)) {
final MethodCall call=new MethodCall(token.raw(),this.value,name,EmptyArguments.INSTANCE);
this.value=call;
pm.splitJump(next,1);
pm.pushParser(new TypeListParser(call.getGenericData(),true));
this.mode=TYPE_ARGUMENTS_END;
return;
}
if (this.isFieldAccess(token,next,nextType)) {
this.value=new FieldAccess(token.raw(),this.value,name);
this.mode=ACCESS;
return;
}
final MethodCall call=new MethodCall(token.raw(),this.value,name,EmptyArguments.INSTANCE);
this.value=call;
this.mode=ACCESS;
this.parseApply(pm,token.next(),call);
}","private void parseInfixAccess(IParserManager pm,IToken token,Name name){
  final int type=token.type();
  final IToken next=token.next();
  final int nextType=next.type();
  if (isSymbol(type)) {
    if (this.value == null) {
      final PrefixCall call=new PrefixCall(token.raw(),name);
      this.value=call;
      this.mode=ACCESS;
      if (this.isOperatorEnd(nextType)) {
        pm.report(ICodePosition.between(token,next),""String_Node_Str"");
        return;
      }
      this.parseApply(pm,next,call);
      return;
    }
    if (this.isOperatorEnd(nextType) || isSymbol(nextType) && neighboring(token.prev(),token) && !neighboring(next,next.next())) {
      this.value=new PostfixCall(token.raw(),this.value,name);
      this.mode=ACCESS;
      return;
    }
    if (this.hasFlag(IGNORE_OPERATOR)) {
      this.valueConsumer.setValue(this.value);
      pm.popParser(true);
      return;
    }
    final OperatorChain chain;
    if (this.value.valueTag() == IValue.OPERATOR_CHAIN) {
      chain=(OperatorChain)this.value;
    }
 else {
      chain=new OperatorChain();
      chain.addOperand(this.value);
      this.value=chain;
    }
    chain.addOperator(name,token.raw());
    pm.pushParser(new ExpressionParser(chain::addOperand).withFlag(this.flags | IGNORE_OPERATOR));
    return;
  }
switch (nextType) {
case BaseSymbols.OPEN_PARENTHESIS:
{
      final MethodCall call=new MethodCall(token.raw(),this.value,name);
      ArgumentListParser.parseArguments(pm,next.next(),call);
      this.value=call;
      this.mode=PARAMETERS_END;
      pm.skip();
      return;
    }
case BaseSymbols.OPEN_SQUARE_BRACKET:
{
    final FieldAccess fieldAccess=new FieldAccess(token.raw(),this.value,name);
    final SubscriptAccess subscriptAccess=new SubscriptAccess(next.raw(),fieldAccess);
    ArgumentListParser.parseArguments(pm,next.next(),subscriptAccess);
    this.value=subscriptAccess;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    return;
  }
case DyvilSymbols.ARROW_RIGHT:
case DyvilSymbols.DOUBLE_ARROW_RIGHT:
if (this.hasFlag(IGNORE_LAMBDA)) {
  break;
}
pm.pushParser(new LambdaOrTupleParser(this,LambdaOrTupleParser.SINGLE_PARAMETER),true);
this.mode=END;
return;
}
if (isGenericCall(next,nextType)) {
final MethodCall call=new MethodCall(token.raw(),this.value,name,EmptyArguments.INSTANCE);
this.value=call;
pm.splitJump(next,1);
pm.pushParser(new TypeListParser(call.getGenericData(),true));
this.mode=TYPE_ARGUMENTS_END;
return;
}
if (this.isFieldAccess(token,next,nextType)) {
this.value=new FieldAccess(token.raw(),this.value,name);
this.mode=ACCESS;
return;
}
final MethodCall call=new MethodCall(token.raw(),this.value,name,EmptyArguments.INSTANCE);
this.value=call;
this.mode=ACCESS;
this.parseApply(pm,token.next(),call);
}",0.9932321199926832
82883,"private void preWrite(MethodWriter writer,IValue instance,IArguments arguments,int localCount){
  if (!this.preProcessed) {
    this.preProcessed=true;
    final int[] accessCounts=new int[this.maxLocals];
    int lastStoredIndex=-1;
    for (int i=0; i < this.instructionCount; i++) {
      final IInstruction instruction=this.instructions[i];
      final int opcode=instruction.getOpcode();
      if (Opcodes.isLoadOpcode(opcode)) {
        final int varIndex=((VarInstruction)instruction).getIndex();
        if (++accessCounts[varIndex] < 2) {
          continue;
        }
        if (varIndex > lastStoredIndex) {
          lastStoredIndex=varIndex;
        }
      }
 else       if (Opcodes.isReturnOpcode(opcode)) {
        this.returnIndex=i;
      }
    }
    this.storedParameters=lastStoredIndex + 1;
    final IParameterList parameterList=this.method.getParameterList();
    int parameterSlots=0;
    for (int i=0, parameterCount=parameterList.size(); i < parameterCount; i++) {
      parameterSlots+=parameterList.get(i).getInternalType().getLocalSlots();
    }
    this.parameterSlots=parameterSlots;
  }
  for (int i=0; i < this.storedParameters; i++) {
    final IType type=IntrinsicData.writeArgument(writer,this.method,i,instance,arguments);
    writer.visitVarInsn(type.getStoreOpcode(),localCount);
    localCount=writer.localCount();
  }
}","private void preWrite(MethodWriter writer,IValue instance,IArguments arguments,int localCount){
  if (!this.preProcessed) {
    this.preProcessed=true;
    this.preProcess();
  }
  for (int i=0; i < this.storedParameters; i++) {
    final IType type=IntrinsicData.writeArgument(writer,this.method,i,instance,arguments);
    writer.visitVarInsn(type.getStoreOpcode(),localCount);
    localCount=writer.localCount();
  }
}",0.4536777091521617
82884,"private static boolean lowerPrecedence(OperatorElement element1,OperatorElement element2,OperatorElement ternaryOperator,MarkerList markers){
  if (element1.operator.getType() == IOperator.TERNARY) {
    if (element2.operator.getType() == IOperator.TERNARY) {
      return false;
    }
    if (element2.name == element1.operator.getTernaryName()) {
      return false;
    }
  }
  if (ternaryOperator != null && element1.name == ternaryOperator.operator.getTernaryName()) {
    if (element2.name == element1.name) {
      return true;
    }
    if (element2.name == ternaryOperator.name) {
      return false;
    }
  }
  final int comparePrecedence=element1.operator.comparePrecedence(element2.operator);
  if (comparePrecedence < 0) {
    return true;
  }
  if (comparePrecedence == 0) {
switch (element1.operator.getAssociativity()) {
case IOperator.NONE:
      markers.add(Markers.semantic(element1.position,""String_Node_Str"",element1.name));
case IOperator.LEFT:
    return true;
}
}
return false;
}","private static boolean lowerPrecedence(OperatorElement element1,OperatorElement element2,OperatorElement ternaryOperator,MarkerList markers){
  final byte element1Type=element1.operator.getType();
  if (element1Type == IOperator.TERNARY) {
    if (element2.operator.getType() == IOperator.TERNARY) {
      return false;
    }
    if (element2.name == element1.operator.getTernaryName()) {
      return false;
    }
  }
  if (ternaryOperator != null && element1.name == ternaryOperator.operator.getTernaryName()) {
    if (element2.name == element1.name) {
      return true;
    }
    if (element2.name == ternaryOperator.name) {
      return false;
    }
  }
  final int comparePrecedence=element1.operator.comparePrecedence(element2.operator);
  if (comparePrecedence < 0) {
    return true;
  }
  if (comparePrecedence > 0) {
    return false;
  }
switch (element1.operator.getAssociativity()) {
case IOperator.NONE:
    if (element1Type != IOperator.INFIX) {
      return true;
    }
  markers.add(Markers.semantic(element1.position,""String_Node_Str"",element1.name));
case IOperator.LEFT:
return true;
}
return false;
}",0.919605077574048
82885,"@Override public IValue resolveCall(MarkerList markers,IContext context){
  final IValue op=Operators.getPrefix(this.name,this.arguments.getFirstValue());
  if (op != null) {
    op.setPosition(this.position);
    return op.resolveOperator(markers,context);
  }
  if (this.resolveMethodCall(markers,context)) {
    return this;
  }
  if (this.resolveImplicitCall(markers,context)) {
    return this;
  }
  return null;
}","@Override public IValue resolveCall(MarkerList markers,IContext context){
  final IValue operand=this.arguments.getFirstValue();
  if (operand != null) {
    final IValue op=Operators.getPrefix(this.name,operand);
    if (op != null) {
      op.setPosition(this.position);
      return op.resolveOperator(markers,context);
    }
  }
  if (this.resolveMethodCall(markers,context)) {
    return this;
  }
  if (this.resolveImplicitCall(markers,context)) {
    return this;
  }
  return null;
}",0.849615806805708
82886,"@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.type.getTheClass().isInterface()) {
    this.nestedClass.addInterface(this.type);
  }
 else {
    this.nestedClass.setSuperType(this.type);
  }
  this.nestedClass.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  final IClass theClass=this.type.getTheClass();
  if (theClass != null) {
    if (theClass.isInterface()) {
      this.nestedClass.addInterface(this.type);
    }
 else {
      this.nestedClass.setSuperType(this.type);
    }
  }
  this.nestedClass.resolveTypes(markers,context);
}",0.8845070422535212
82887,"@Override public void resolve(MarkerList markers,IContext context){
  context=context.push(this);
  super.resolve(markers,context);
  for (int i=0; i < this.typeParameterCount; i++) {
    this.typeParameters[i].resolve(markers,context);
  }
  if (this.receiverType != null) {
    this.receiverType.resolve(markers,context);
  }
  this.parameters.resolve(markers,context);
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i].resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN) {
      inferType=true;
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN && this.value.isResolved()) {
        markers.add(Markers.semantic(this.position,""String_Node_Str"",this.name.unqualified));
      }
    }
    final TypeChecker.MarkerSupplier markerSupplier=TypeChecker.markerSupplier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.name);
    this.value=TypeChecker.convertValue(this.value,this.type,this.type,markers,context,markerSupplier);
    if (inferType) {
      this.type=this.value.getType();
    }
  }
 else   if (this.type == Types.UNKNOWN) {
    markers.add(Markers.semantic(this.position,""String_Node_Str"",this.name.unqualified));
    this.type=Types.ANY;
  }
  context.pop();
}","@Override public void resolve(MarkerList markers,IContext context){
  context=context.push(this);
  super.resolve(markers,context);
  for (int i=0; i < this.typeParameterCount; i++) {
    this.typeParameters[i].resolve(markers,context);
  }
  if (this.receiverType != null) {
    this.receiverType.resolve(markers,context);
  }
  this.parameters.resolve(markers,context);
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i].resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN || this.type == null) {
      inferType=true;
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN && this.value.isResolved()) {
        markers.add(Markers.semantic(this.position,""String_Node_Str"",this.name.unqualified));
      }
    }
    final TypeChecker.MarkerSupplier markerSupplier=TypeChecker.markerSupplier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.name);
    this.value=TypeChecker.convertValue(this.value,this.type,this.type,markers,context,markerSupplier);
    if (inferType) {
      this.type=this.value.getType();
    }
  }
 else   if (this.type == Types.UNKNOWN) {
    markers.add(Markers.semantic(this.position,""String_Node_Str"",this.name.unqualified));
    this.type=Types.ANY;
  }
  context.pop();
}",0.9922935779816514
82888,"@Override public void checkTypes(MarkerList markers,IContext context){
  final IType returnType=context.getReturnType();
  if (this.value != null) {
    this.value.checkTypes(markers,context);
    if (returnType == null) {
      return;
    }
    final IType valueType=this.value.getType();
    if (!Types.isSuperType(returnType,valueType)) {
      final Marker marker=Markers.semanticError(this.position,""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",returnType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
      markers.add(marker);
    }
  }
 else   if (returnType != null && !Types.isSameClass(returnType,Types.VOID)) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  final IType returnType=context.getReturnType();
  if (this.value != null) {
    this.value.checkTypes(markers,context);
    if (returnType == null || !this.value.isResolved()) {
      return;
    }
    final IType valueType=this.value.getType();
    if (!Types.isSuperType(returnType,valueType)) {
      final Marker marker=Markers.semanticError(this.position,""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",returnType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
      markers.add(marker);
    }
  }
 else   if (returnType != null && !Types.isSameClass(returnType,Types.VOID)) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}",0.9820051413881749
82889,"@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
  if (type == BaseSymbols.CLOSE_CURLY_BRACKET) {
    this.end(pm);
    return;
  }
  if (type == Tokens.EOF) {
    this.end(pm);
    pm.report(token,""String_Node_Str"");
    return;
  }
switch (this.mode) {
case OPEN_BRACKET:
{
      final IToken next=token.next();
      final IToken lambdaArrow=this.findLambdaArrow(next);
      if (lambdaArrow != null) {
        this.lambdaExpr=new LambdaExpr(lambdaArrow.raw());
        this.lambdaExpr.setValue(this.statementList=new StatementList(token));
        if (next == lambdaArrow) {
          this.mode=LAMBDA_TYPE_ARROW;
          return;
        }
        if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
          pm.skip();
          pm.pushParser(new ParameterListParser(this.lambdaExpr));
          this.mode=LAMBDA_PARAMETERS_END;
          return;
        }
        pm.pushParser(new ParameterListParser(this.lambdaExpr).withFlags(LAMBDA_ARROW_END));
        this.mode=LAMBDA_TYPE_ARROW;
        return;
      }
      this.statementList=this.closure ? new Closure(token) : new StatementList(token);
      this.mode=EXPRESSION;
      if (type != BaseSymbols.OPEN_CURLY_BRACKET) {
        pm.report(token,""String_Node_Str"");
        pm.reparse();
      }
      return;
    }
case LAMBDA_PARAMETERS_END:
  this.mode=LAMBDA_TYPE_ARROW;
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
  pm.report(token,""String_Node_Str"");
}
return;
case LAMBDA_TYPE_ARROW:
if (type == DyvilSymbols.ARROW_RIGHT) {
pm.pushParser(LambdaOrTupleParser.returnTypeParser(this.lambdaExpr));
this.mode=LAMBDA_RETURN_ARROW;
return;
}
case LAMBDA_RETURN_ARROW:
if (type != DyvilSymbols.DOUBLE_ARROW_RIGHT) {
pm.report(token,""String_Node_Str"");
return;
}
this.mode=EXPRESSION;
return;
case EXPRESSION:
if (type == BaseSymbols.SEMICOLON || type == BaseSymbols.COMMA) {
return;
}
if (ParserUtil.isIdentifier(type) && token.next().type() == BaseSymbols.COLON) {
this.label=token.nameValue();
pm.skip();
return;
}
final TokenIterator tokens=pm.getTokens();
final MemberParser parser=new MemberParser<>(this).withFlag(NO_UNINITIALIZED_VARIABLES | OPERATOR_ERROR | NO_FIELD_PROPERTIES);
final TryParserManager parserManager=new TryParserManager(DyvilSymbols.INSTANCE,tokens,pm.getMarkers());
tokens.jump(token);
if (parserManager.parse(parser,EXIT_ON_ROOT)) {
tokens.jump(tokens.lastReturned());
this.mode=SEPARATOR;
return;
}
parserManager.resetTo(token);
pm.pushParser(new ExpressionParser(this));
return;
case SEPARATOR:
this.mode=EXPRESSION;
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (token.prev().type() == BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
return;
}
pm.report(token,""String_Node_Str"");
}
}","@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
  if (type == BaseSymbols.CLOSE_CURLY_BRACKET) {
    this.end(pm);
    return;
  }
  if (type == Tokens.EOF) {
    this.end(pm);
    pm.report(token,""String_Node_Str"");
    return;
  }
switch (this.mode) {
case OPEN_BRACKET:
{
      final IToken next=token.next();
      final IToken lambdaArrow=this.findLambdaArrow(next);
      if (lambdaArrow != null) {
        this.lambdaExpr=new LambdaExpr(lambdaArrow.raw());
        this.lambdaExpr.setValue(this.statementList=new StatementList(token));
        if (next == lambdaArrow) {
          this.mode=LAMBDA_TYPE_ARROW;
          return;
        }
        if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
          pm.skip();
          pm.pushParser(new ParameterListParser(this.lambdaExpr));
          this.mode=LAMBDA_PARAMETERS_END;
          return;
        }
        pm.pushParser(new ParameterListParser(this.lambdaExpr).withFlags(LAMBDA_ARROW_END));
        this.mode=LAMBDA_TYPE_ARROW;
        return;
      }
      this.statementList=this.closure ? new Closure(token) : new StatementList(token);
      this.mode=EXPRESSION;
      if (type != BaseSymbols.OPEN_CURLY_BRACKET) {
        pm.report(token,""String_Node_Str"");
        pm.reparse();
      }
      return;
    }
case LAMBDA_PARAMETERS_END:
  this.mode=LAMBDA_TYPE_ARROW;
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
  pm.report(token,""String_Node_Str"");
}
return;
case LAMBDA_TYPE_ARROW:
if (type == DyvilSymbols.ARROW_RIGHT) {
pm.pushParser(LambdaOrTupleParser.returnTypeParser(this.lambdaExpr));
this.mode=LAMBDA_RETURN_ARROW;
return;
}
case LAMBDA_RETURN_ARROW:
if (type != DyvilSymbols.DOUBLE_ARROW_RIGHT) {
pm.report(token,""String_Node_Str"");
return;
}
this.mode=EXPRESSION;
return;
case EXPRESSION:
if (type == BaseSymbols.SEMICOLON || type == BaseSymbols.COMMA) {
return;
}
if (ParserUtil.isIdentifier(type) && token.next().type() == BaseSymbols.COLON) {
this.label=token.nameValue();
pm.skip();
return;
}
final TokenIterator tokens=pm.getTokens();
final MemberParser parser=new MemberParser<>(this).withFlag(NO_UNINITIALIZED_VARIABLES | OPERATOR_ERROR | NO_FIELD_PROPERTIES);
final TryParserManager parserManager=new TryParserManager(DyvilSymbols.INSTANCE,tokens);
tokens.jump(token);
if (parserManager.parse(parser,pm.getMarkers(),EXIT_ON_ROOT)) {
tokens.jump(tokens.lastReturned());
this.mode=SEPARATOR;
return;
}
parserManager.resetTo(token);
pm.pushParser(new ExpressionParser(this));
return;
case SEPARATOR:
this.mode=EXPRESSION;
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (token.prev().type() == BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
return;
}
pm.report(token,""String_Node_Str"");
}
}",0.9805504587155964
82890,"private boolean success(){
  return !this.hasSyntaxErrors || this.reportErrors;
}","private boolean success(MarkerList markers){
  if (!this.hasSyntaxErrors || this.reportErrors) {
    markers.addAll(this.markers);
    return true;
  }
  return false;
}",0.6
82891,"public TryParserManager(Symbols symbols,TokenIterator tokens,MarkerList markers){
  super(symbols,tokens,markers);
}","@Deprecated public TryParserManager(Symbols symbols,TokenIterator tokens,MarkerList markers){
  super(symbols,tokens,markers);
}",0.9508196721311476
82892,"@Override public void report(Marker error){
  final boolean isError=error.isError();
  if (!this.hasSyntaxErrors && isError) {
    this.hasSyntaxErrors=true;
  }
  if (this.reportErrors || !isError) {
    super.report(error);
    this.reportedMarkers++;
  }
}","@Override public void report(Marker error){
  final boolean isError=error.isError();
  if (!this.hasSyntaxErrors && isError) {
    this.hasSyntaxErrors=true;
  }
  if (this.reportErrors || !isError) {
    super.report(error);
  }
}",0.9428571428571428
82893,"public boolean parse(Parser parser,int flags){
  this.parser=parser;
  this.hasSyntaxErrors=false;
  this.reportErrors=(flags & REPORT_ERRORS) != 0;
  IToken token=null;
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      if (!this.tokens.hasNext()) {
        break;
      }
      token=this.tokens.next();
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    if (this.parser == null) {
      if ((flags & EXIT_ON_ROOT) != 0) {
        return this.success();
      }
      this.reportUnparsed(token);
      continue;
    }
    if (!this.reportErrors && this.parser.reportErrors()) {
      if (this.hasSyntaxErrors) {
        return false;
      }
      this.reportErrors=true;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      this.reportError(token,ex);
      return this.success();
    }
    if (!this.success()) {
      return false;
    }
  }
  this.parseRemaining(token);
  return this.success();
}","public boolean parse(Parser parser,MarkerList markers,int flags){
  this.parser=parser;
  this.hasSyntaxErrors=false;
  this.markers=new MarkerList(markers.getI18n());
  this.reportErrors=(flags & REPORT_ERRORS) != 0;
  IToken token=null;
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      if (!this.tokens.hasNext()) {
        break;
      }
      token=this.tokens.next();
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    if (this.parser == null) {
      if ((flags & EXIT_ON_ROOT) != 0) {
        return this.success(markers);
      }
      this.reportUnparsed(token);
      continue;
    }
    if (!this.reportErrors && this.parser.reportErrors()) {
      if (this.hasSyntaxErrors) {
        return this.success(markers);
      }
      this.reportErrors=true;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      this.reportError(token,ex);
      return this.success(markers);
    }
    if (this.hasSyntaxErrors && !this.reportErrors) {
      return this.success(markers);
    }
  }
  this.parseRemaining(token);
  return this.success(markers);
}",0.8780713954566528
82894,"public void resetTo(IToken token){
  this.tokens.jump(token);
  if (this.reportedMarkers >= 0) {
    this.markers.remove(this.reportedMarkers);
  }
  if (this.splitTokens == null) {
    return;
  }
  for (  IToken splitToken : this.splitTokens) {
    splitToken.prev().setNext(splitToken);
    splitToken.next().setPrev(splitToken);
  }
  this.splitTokens.clear();
}","public void resetTo(IToken token){
  this.tokens.jump(token);
  if (this.splitTokens == null) {
    return;
  }
  for (  IToken splitToken : this.splitTokens) {
    splitToken.prev().setNext(splitToken);
    splitToken.next().setPrev(splitToken);
  }
  this.splitTokens.clear();
}",0.8668730650154799
82895,"public void add(Marker marker){
  if (marker.isError()) {
    this.errors++;
  }
  if (marker.isWarning()) {
    this.warnings++;
  }
  int index=this.markerCount++;
  if (index >= this.markers.length) {
    Marker[] temp=new Marker[this.markerCount];
    System.arraycopy(this.markers,0,temp,0,this.markers.length);
    this.markers=temp;
  }
  this.markers[index]=marker;
}","public void add(Marker marker){
  if (marker.isError()) {
    this.errors++;
  }
  if (marker.isWarning()) {
    this.warnings++;
  }
  int index=this.markerCount++;
  if (index >= this.markers.length) {
    Marker[] temp=new Marker[this.markerCount << 1];
    System.arraycopy(this.markers,0,temp,0,index);
    this.markers=temp;
  }
  this.markers[index]=marker;
}",0.9608636977058028
82896,"private boolean tryParse(MarkerList markers,TokenIterator tokens,Parser parser,boolean reportErrors){
  this.parser.reset(markers,tokens);
  this.parser.resetTo(tokens.first());
  return this.parser.parse(parser,reportErrors);
}","private boolean tryParse(MarkerList markers,TokenIterator tokens,Parser parser,boolean reportErrors){
  this.parser.reset(markers,tokens);
  this.parser.resetTo(tokens.first());
  return this.parser.parse(parser,markers,reportErrors ? TryParserManager.REPORT_ERRORS : 0);
}",0.8622754491017964
82897,"public static IValue convertValue(IValue value,IType type,ITypeContext typeContext,MarkerList markers,IContext context,MarkerSupplier markerSupplier){
  final IType concreteType=type.getConcreteType(typeContext);
  final IValue newValue=convertValueDirect(value,concreteType,typeContext,markers,context);
  if (newValue != null) {
    if (typeContext != null && !typeContext.isReadonly()) {
      type.inferTypes(newValue.getType(),typeContext);
    }
    return newValue;
  }
  if (value.isResolved()) {
    markers.add(markerSupplier.createMarker(value.getPosition(),type,value.getType()));
  }
  return value;
}","public static IValue convertValue(IValue value,IType type,ITypeContext typeContext,MarkerList markers,IContext context,MarkerSupplier markerSupplier){
  final IType concreteType=type.getConcreteType(typeContext);
  final IValue newValue=convertValueDirect(value,concreteType,typeContext,markers,context);
  if (newValue != null) {
    if (typeContext != null && !typeContext.isReadonly()) {
      type.inferTypes(newValue.getType(),typeContext);
    }
    return newValue;
  }
  if (value.isResolved()) {
    markers.add(markerSupplier.createMarker(value.getPosition(),concreteType,value.getType()));
  }
  return value;
}",0.9919093851132686
82898,"@Override public IValue resolve(MarkerList markers,IContext context){
switch (this.operatorCount) {
case 0:
    return this.operands[0];
case 1:
  return createCall(this.operators[0],this.operands[0],this.operands[1]).resolve(markers,context);
}
final Stack<OperatorElement> operatorStack=new LinkedList<>();
final Stack<IValue> operandStack=new LinkedList<>();
operandStack.push(this.operands[0]);
for (int i=0; i < this.operatorCount; i++) {
final OperatorElement element1=this.operators[i];
OperatorElement element2;
while (!operatorStack.isEmpty()) {
  element2=operatorStack.peek();
  final int comparePrecedence=element1.operator.comparePrecedence(element2.operator);
  if (comparePrecedence < 0 || element1.operator.getAssociativity() != IOperator.RIGHT && comparePrecedence == 0) {
    operatorStack.pop();
    this.pushCall(operandStack,element2);
  }
 else {
    break;
  }
}
operatorStack.push(element1);
operandStack.push(this.operands[i + 1]);
}
while (!operatorStack.isEmpty()) {
this.pushCall(operandStack,operatorStack.pop());
}
return operandStack.pop().resolve(markers,context);
}","@Override public IValue resolve(MarkerList markers,IContext context){
switch (this.operatorCount) {
case 0:
    return this.operands[0];
case 1:
  return createCall(this.operators[0],this.operands[0],this.operands[1]).resolve(markers,context);
}
final Stack<OperatorElement> operatorStack=new LinkedList<>();
final Stack<IValue> operandStack=new LinkedList<>();
operandStack.push(this.operands[0]);
for (int i=0; i < this.operatorCount; i++) {
final OperatorElement element1=this.operators[i];
OperatorElement element2;
while (!operatorStack.isEmpty()) {
  element2=operatorStack.peek();
  final int comparePrecedence=element1.operator.comparePrecedence(element2.operator);
  if (comparePrecedence < 0) {
    operatorStack.pop();
    this.pushCall(operandStack,element2);
    continue;
  }
  if (comparePrecedence == 0) {
switch (element1.operator.getAssociativity()) {
case IOperator.NONE:
      markers.add(Markers.semantic(element1.position,""String_Node_Str"",element1.name));
case IOperator.LEFT:
    operatorStack.pop();
  this.pushCall(operandStack,element2);
continue;
}
}
break;
}
operatorStack.push(element1);
operandStack.push(this.operands[i + 1]);
}
while (!operatorStack.isEmpty()) {
this.pushCall(operandStack,operatorStack.pop());
}
return operandStack.pop().resolve(markers,context);
}",0.8448707256046706
82899,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.left=this.left.resolve(markers,context);
  this.right=this.right.resolve(markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.left != null) {
    this.left=this.left.resolve(markers,context);
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
    this.left=new WildcardValue(this.position);
  }
  if (this.right != null) {
    this.right=this.right.resolve(markers,context);
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
    this.right=new WildcardValue(this.position);
  }
  return this;
}",0.4415954415954416
82900,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.left.resolveTypes(markers,context);
  this.right.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.left != null) {
    this.left.resolveTypes(markers,context);
  }
  if (this.right != null) {
    this.right.resolveTypes(markers,context);
  }
}",0.8277634961439588
82901,"@Override public void resolve(MarkerList markers,IContext context){
  this.arguments.resolve(markers,context);
  final IClass theClass=this.type.getTheClass();
  if (theClass == null) {
    return;
  }
  for (int i=0, count=theClass.parameterCount(); i < count; i++) {
    final IParameter parameter=theClass.getParameter(i);
    final IType parameterType=parameter.getType();
    final IValue value=this.arguments.getValue(i,parameter);
    if (value == null) {
      if (parameter.getValue() == null) {
        markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.type,parameter.getName()));
      }
      continue;
    }
    IValue typedValue=value.withType(parameterType,parameterType,markers,context);
    if (typedValue == null) {
      markers.add(TypeChecker.typeError(value,parameterType,parameterType,""String_Node_Str"",parameter.getName()));
      continue;
    }
    typedValue=Util.constant(typedValue,markers,context);
    if (typedValue != value) {
      this.arguments.setValue(i,parameter,typedValue);
    }
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  this.arguments.resolve(markers,context);
  final IClass theClass;
  if (this.type == null || (theClass=this.type.getTheClass()) == null) {
    return;
  }
  for (int i=0, count=theClass.parameterCount(); i < count; i++) {
    final IParameter parameter=theClass.getParameter(i);
    final IType parameterType=parameter.getType();
    final IValue value=this.arguments.getValue(i,parameter);
    if (value == null) {
      if (parameter.getValue() == null) {
        markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.type,parameter.getName()));
      }
      continue;
    }
    IValue typedValue=value.withType(parameterType,parameterType,markers,context);
    if (typedValue == null) {
      markers.add(TypeChecker.typeError(value,parameterType,parameterType,""String_Node_Str"",parameter.getName()));
      continue;
    }
    typedValue=Util.constant(typedValue,markers,context);
    if (typedValue != value) {
      this.arguments.setValue(i,parameter,typedValue);
    }
  }
}",0.9740198393953708
82902,"@Override public void check(MarkerList markers,IContext context,ElementType target){
  if (this.type == null || !this.type.isResolved()) {
    return;
  }
  IClass theClass=this.type.getTheClass();
  if (!theClass.hasModifier(Modifiers.ANNOTATION)) {
    markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.getName()));
    return;
  }
  if (target == null) {
    return;
  }
  IClassMetadata metadata=theClass.getMetadata();
  if (!metadata.isTarget(target)) {
    Marker error=Markers.semantic(this.position,""String_Node_Str"",this.type.getName());
    error.addInfo(Markers.getSemantic(""String_Node_Str"",target));
    error.addInfo(Markers.getSemantic(""String_Node_Str"",metadata.getTargets()));
    markers.add(error);
  }
}","@Override public void check(MarkerList markers,IContext context,ElementType target){
  if (this.type == null || !this.type.isResolved()) {
    return;
  }
  final IClass theClass=this.type.getTheClass();
  if (!theClass.hasModifier(Modifiers.ANNOTATION)) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.type.getName()));
    return;
  }
  if (target == null) {
    return;
  }
  final IClassMetadata metadata=theClass.getMetadata();
  if (!metadata.isTarget(target)) {
    final Marker error=Markers.semanticError(this.position,""String_Node_Str"",this.type.getName());
    error.addInfo(Markers.getSemantic(""String_Node_Str"",target));
    error.addInfo(Markers.getSemantic(""String_Node_Str"",metadata.getTargets()));
    markers.add(error);
  }
}",0.9815546772068512
82903,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.CLASS);
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.checkType(markers,context,TypePosition.CLASS);
  }
  this.arguments.checkTypes(markers,context);
}",0.9147286821705426
82904,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.type=this.type.resolveType(markers,context);
  this.arguments.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type=this.type.resolveType(markers,context);
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
  this.arguments.resolveTypes(markers,context);
}",0.7081545064377682
82905,"public static void checkMethodModifiers(MarkerList markers,IClassMember member,int modifiers,boolean hasValue){
  boolean isStatic=(modifiers & Modifiers.STATIC) != 0;
  boolean isAbstract=(modifiers & Modifiers.ABSTRACT) != 0;
  boolean isNative=(modifiers & Modifiers.NATIVE) != 0;
  if (isStatic && isAbstract) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
 else   if (isAbstract && isNative) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
 else {
    if (isStatic) {
      if (!hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
    if (isNative) {
      if (!hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
    if (isAbstract) {
      IClass theClass=member.getEnclosingClass();
      if (!theClass.isAbstract()) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member),theClass.getName()));
      }
      if (hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
  }
  if (!hasValue && !isAbstract && !isNative) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
}","public static void checkMethodModifiers(MarkerList markers,IClassMember member,int modifiers,boolean hasValue){
  boolean isStatic=(modifiers & Modifiers.STATIC) != 0;
  boolean isAbstract=(modifiers & Modifiers.ABSTRACT) != 0;
  boolean isNative=(modifiers & Modifiers.NATIVE) != 0;
  if (isStatic && isAbstract) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
 else   if (isAbstract && isNative) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
 else {
    if (isStatic) {
      if (!hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
    if (isNative) {
      if (!hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
    if (isAbstract) {
      IClass theClass=member.getEnclosingClass();
      if (!theClass.isAbstract()) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member),theClass.getName()));
      }
      if (hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
  }
  if (!hasValue && !isAbstract && !isNative&& !isStatic) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
}",0.9959128065395096
82906,"protected void parseRemaining(IToken token){
  if (token == null || this.hasStopped) {
    return;
  }
  while (this.parser != null) {
    token=token.next();
    Parser prevParser=this.parser;
    int mode=prevParser.getMode();
    prevParser.parse(this,token);
    if (this.parser == prevParser && this.parser.getMode() == mode) {
      break;
    }
  }
}","protected void parseRemaining(IToken token){
  if (token == null || this.hasStopped) {
    return;
  }
  while (this.parser != null) {
    token=token.next();
    Parser prevParser=this.parser;
    int mode=prevParser.getMode();
    this.tryParse(token,prevParser);
    if (this.parser == prevParser && this.parser.getMode() == mode) {
      break;
    }
  }
}",0.9232914923291492
82907,"public final void parse(TokenIterator tokens){
  this.tokens=tokens;
  IToken token=null;
  while (!this.hasStopped) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      if (!this.tokens.hasNext()) {
        break;
      }
      token=tokens.next();
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    if (this.parser == null) {
      if (token != null && !token.isInferred()) {
        this.report(Markers.syntaxError(token,""String_Node_Str"",token));
      }
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      this.report(Markers.parserError(token,ex));
    }
  }
  this.parseRemaining(token);
}","public final void parse(TokenIterator tokens){
  this.tokens=tokens;
  IToken token=null;
  while (!this.hasStopped) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      if (!this.tokens.hasNext()) {
        break;
      }
      token=tokens.next();
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    if (this.parser == null) {
      if (token != null && !token.isInferred()) {
        this.report(Markers.syntaxError(token,""String_Node_Str"",token));
      }
      continue;
    }
    this.tryParse(token,this.parser);
  }
  this.parseRemaining(token);
}",0.8803088803088803
82908,"@Override public boolean isResolved(){
  return this.value.isResolved();
}","@Override public boolean isResolved(){
  return this.value == null || this.value.isResolved();
}",0.8705882352941177
82909,"protected static IValue resolveCall(MarkerList markers,IContext context,ICodePosition position,IValue receiver,Name name,IArguments arguments){
  if (!receiver.isResolved()) {
    return null;
  }
  if (arguments.isEmpty()) {
    return null;
  }
  int type=receiver.valueTag();
  if (type == IValue.APPLY_CALL) {
    ApplyMethodCall applyCall=(ApplyMethodCall)receiver;
    SideEffectHelper helper=new SideEffectHelper();
    IValue applyReceiver=applyCall.receiver=helper.processValue(applyCall.receiver);
    IArguments applyArguments=applyCall.arguments=helper.processArguments(applyCall.arguments);
    IValue op=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    IValue update=new UpdateMethodCall(position,applyReceiver,applyArguments.withLastValue(Names.update,op)).resolveCall(markers,context);
    return helper.finish(update);
  }
 else   if (type == IValue.SUBSCRIPT_GET) {
    SubscriptAccess subscriptAccess=(SubscriptAccess)receiver;
    SideEffectHelper helper=new SideEffectHelper();
    IValue subscriptReceiver=subscriptAccess.receiver=helper.processValue(subscriptAccess.receiver);
    IArguments subscriptArguments=subscriptAccess.arguments=helper.processArguments(subscriptAccess.arguments);
    IValue op=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    IArguments subscriptSetterArguments=subscriptArguments.withLastValue(Names.subscript_$eq,op);
    IValue subscript=new SubscriptAssignment(position,subscriptReceiver,subscriptSetterArguments).resolveCall(markers,context);
    return helper.finish(subscript);
  }
 else   if (type == IValue.FIELD_ACCESS) {
    final FieldAccess fieldAccess=(FieldAccess)receiver;
    final IncOperator op=getIncOperator(name,arguments,fieldAccess);
    if (op != null) {
      op.setPosition(position);
      return op.resolveOperator(markers,context);
    }
    final SideEffectHelper helper=new SideEffectHelper();
    final IValue fieldReceiver=fieldAccess.receiver=helper.processValue(fieldAccess.receiver);
    final IValue methodCall=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    if (methodCall == null) {
      return null;
    }
    final FieldAssignment assignment=new FieldAssignment(position,fieldReceiver,fieldAccess.field,methodCall);
    return helper.finish(assignment);
  }
  return null;
}","protected static IValue resolveCall(MarkerList markers,IContext context,ICodePosition position,IValue receiver,Name name,IArguments arguments){
  if (!receiver.isResolved()) {
    return null;
  }
  if (arguments.isEmpty()) {
    return null;
  }
  int type=receiver.valueTag();
  if (type == IValue.APPLY_CALL) {
    ApplyMethodCall applyCall=(ApplyMethodCall)receiver;
    SideEffectHelper helper=new SideEffectHelper();
    IValue applyReceiver=applyCall.receiver=helper.processValue(applyCall.receiver);
    IArguments applyArguments=applyCall.arguments=helper.processArguments(applyCall.arguments);
    IValue op=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    if (op == null) {
      return null;
    }
    IValue update=new UpdateMethodCall(position,applyReceiver,applyArguments.withLastValue(Names.update,op)).resolveCall(markers,context);
    return helper.finish(update);
  }
 else   if (type == IValue.SUBSCRIPT_GET) {
    SubscriptAccess subscriptAccess=(SubscriptAccess)receiver;
    SideEffectHelper helper=new SideEffectHelper();
    IValue subscriptReceiver=subscriptAccess.receiver=helper.processValue(subscriptAccess.receiver);
    IArguments subscriptArguments=subscriptAccess.arguments=helper.processArguments(subscriptAccess.arguments);
    IValue op=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    if (op == null) {
      return null;
    }
    IArguments subscriptSetterArguments=subscriptArguments.withLastValue(Names.subscript_$eq,op);
    IValue subscript=new SubscriptAssignment(position,subscriptReceiver,subscriptSetterArguments).resolveCall(markers,context);
    return helper.finish(subscript);
  }
 else   if (type == IValue.FIELD_ACCESS) {
    final FieldAccess fieldAccess=(FieldAccess)receiver;
    final IncOperator op=getIncOperator(name,arguments,fieldAccess);
    if (op != null) {
      op.setPosition(position);
      return op.resolveOperator(markers,context);
    }
    final SideEffectHelper helper=new SideEffectHelper();
    final IValue fieldReceiver=fieldAccess.receiver=helper.processValue(fieldAccess.receiver);
    final IValue methodCall=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    if (methodCall == null) {
      return null;
    }
    final FieldAssignment assignment=new FieldAssignment(position,fieldReceiver,fieldAccess.field,methodCall);
    return helper.finish(assignment);
  }
  return null;
}",0.980546357615894
82910,"@Override public IPattern withType(IType type,MarkerList markers){
  IClass tupleClass=TupleType.getTupleClass(this.patternCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  this.tupleType=type;
  for (int i=0; i < this.patternCount; i++) {
    IType elementType=type.resolveTypeSafely(tupleClass.getTypeParameter(i));
    IPattern pattern=this.patterns[i];
    IPattern typedPattern=pattern.withType(elementType,markers);
    if (typedPattern == null) {
      Marker m=Markers.semantic(pattern.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",pattern.getType()));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",elementType));
      markers.add(m);
    }
 else {
      this.patterns[i]=typedPattern;
    }
  }
  return this;
}","@Override public IPattern withType(IType type,MarkerList markers){
  IClass tupleClass=TupleType.getTupleClass(this.patternCount);
  if (tupleClass == null || !tupleClass.isSubTypeOf(type)) {
    return null;
  }
  this.tupleType=type;
  for (int i=0; i < this.patternCount; i++) {
    IType elementType=type.resolveTypeSafely(tupleClass.getTypeParameter(i));
    IPattern pattern=this.patterns[i];
    IPattern typedPattern=pattern.withType(elementType,markers);
    if (typedPattern == null) {
      Marker m=Markers.semantic(pattern.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",pattern.getType()));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",elementType));
      markers.add(m);
    }
 else {
      this.patterns[i]=typedPattern;
    }
  }
  return this;
}",0.986284289276808
82911,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.valueCount == 1) {
    return this.values[0].withType(type,typeContext,markers,context);
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.TUPLE_CONVERTIBLE);
  if (annotation != null) {
    return new LiteralConversion(this,annotation,new ArgumentList(this.values,this.valueCount)).withType(type,typeContext,markers,context);
  }
  IClass tupleClass=TupleType.getTupleClass(this.valueCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  IClass iclass=type.getTheClass();
  for (int i=0; i < this.valueCount; i++) {
    IType elementType=iclass == dyvil.tools.compiler.ast.type.builtin.Types.OBJECT_CLASS ? dyvil.tools.compiler.ast.type.builtin.Types.ANY : type.resolveTypeSafely(iclass.getTypeParameter(i));
    IValue value=this.values[i];
    IValue value1=IType.convertValue(value,elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker m=Markers.semantic(value.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",value.getType()));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",elementType.getConcreteType(typeContext)));
      markers.add(m);
    }
 else {
      this.values[i]=value=value1;
    }
  }
  this.tupleType=null;
  this.tupleType=this.getType();
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  final IAnnotation annotation=type.getTheClass().getAnnotation(Types.TUPLE_CONVERTIBLE);
  if (annotation != null) {
    return new LiteralConversion(this,annotation,new ArgumentList(this.values,this.valueCount)).withType(type,typeContext,markers,context);
  }
  if (!type.isSuperTypeOf(this.getType())) {
    return null;
  }
  final IClass iclass=type.getTheClass();
  for (int i=0; i < this.valueCount; i++) {
    final IType elementType=iclass == dyvil.tools.compiler.ast.type.builtin.Types.OBJECT_CLASS ? dyvil.tools.compiler.ast.type.builtin.Types.ANY : type.resolveTypeSafely(iclass.getTypeParameter(i));
    final IValue value=this.values[i];
    final IValue typedValue=IType.convertValue(value,elementType,typeContext,markers,context);
    if (typedValue != null) {
      this.values[i]=typedValue;
    }
 else     if (value.isResolved()) {
      final Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",value.getType()));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",elementType.getConcreteType(typeContext)));
      markers.add(marker);
    }
  }
  return this;
}",0.8028379387602689
82912,"@Override public IType getSimpleRefType(){
  if (this.simpleRefType != null) {
    return this.simpleRefType;
  }
  final String className=""String_Node_Str"" + this.classPrefix() + ""String_Node_Str"";
  return this.simpleRefType=new ClassType(Package.dyvilRefSimple.resolveClass(className));
}","@Override public IType getSimpleRefType(){
  if (this.simpleRefType != null) {
    return this.simpleRefType;
  }
  final String className=""String_Node_Str"" + this.getTypePrefix() + ""String_Node_Str"";
  return this.simpleRefType=new ClassType(Package.dyvilRefSimple.resolveClass(className));
}",0.9794520547945206
82913,"@Override public IClass getArrayClass(){
  IClass iclass=this.arrayClass;
  if (iclass == null) {
    String className=this.classPrefix() + ""String_Node_Str"";
    return this.arrayClass=Package.dyvilArray.resolveClass(className);
  }
  return iclass;
}","@Override public IClass getArrayClass(){
  IClass iclass=this.arrayClass;
  if (iclass == null) {
    final String className=this.getTypePrefix() + ""String_Node_Str"";
    return this.arrayClass=Package.dyvilArray.resolveClass(className);
  }
  return iclass;
}",0.96484375
82914,"@Override public IClass getRefClass(){
  if (this.refClass != null) {
    return this.refClass;
  }
  final String className=this.classPrefix() + ""String_Node_Str"";
  return this.refClass=Package.dyvilRef.resolveClass(className);
}","@Override public IClass getRefClass(){
  if (this.refClass != null) {
    return this.refClass;
  }
  final String className=this.getTypePrefix() + ""String_Node_Str"";
  return this.refClass=Package.dyvilRef.resolveClass(className);
}",0.9741379310344828
82915,"public static String getInternalRef(IType type,String prefix){
  return ""String_Node_Str"" + prefix + getTypeRefKeyword(type)+ ""String_Node_Str"";
}","public static String getInternalRef(IType type,String prefix){
  return ""String_Node_Str"" + prefix + type.getTypePrefix()+ ""String_Node_Str"";
}",0.9273356401384084
82916,"public static String getReferenceFactoryName(IType type,String prefix){
  return ""String_Node_Str"" + prefix + getTypeRefKeyword(type)+ ""String_Node_Str"";
}","public static String getReferenceFactoryName(IType type,String prefix){
  return ""String_Node_Str"" + prefix + type.getTypePrefix()+ ""String_Node_Str"";
}",0.9315960912052116
82917,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  final Name name=this.type.getName();
  final IDataMember field=context.resolveField(name);
  if (field != null) {
    final FieldAccess fieldAccess=new FieldAccess(this.position);
    fieldAccess.name=name;
    fieldAccess.field=field;
    return fieldAccess;
  }
  final IMethod method=IContext.resolveMethod(context,null,name,EmptyArguments.INSTANCE);
  if (method != null) {
    final MethodCall methodCall=new MethodCall(this.position);
    methodCall.name=name;
    methodCall.method=method;
    methodCall.dotless=true;
    methodCall.arguments=EmptyArguments.INSTANCE;
    return methodCall;
  }
  if (!this.type.isResolved()) {
    markers.add(Markers.semantic(this.position,this.type.isArrayType() ? ""String_Node_Str"" : ""String_Node_Str"",this.type.toString()));
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  final Name name=this.type.getName();
  final IDataMember field=context.resolveField(name);
  if (field != null) {
    final FieldAccess fieldAccess=new FieldAccess(this.position);
    fieldAccess.name=name;
    fieldAccess.field=field;
    return fieldAccess;
  }
  final IMethod method=IContext.resolveMethod(context,null,name,EmptyArguments.INSTANCE);
  if (method != null) {
    final MethodCall methodCall=new MethodCall(this.position);
    methodCall.name=name;
    methodCall.method=method;
    methodCall.dotless=true;
    methodCall.arguments=EmptyArguments.INSTANCE;
    return methodCall;
  }
  return this;
}",0.8785276073619632
82918,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  IClass iclass=this.type.getTheClass();
  if (iclass == null) {
    return;
  }
  if (iclass.hasModifier(Modifiers.OBJECT_CLASS)) {
    return;
  }
  markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.toString()));
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  if (!this.type.isResolved()) {
    return;
  }
  final IClass iclass=this.type.getTheClass();
  if (iclass != null && iclass.hasModifier(Modifiers.OBJECT_CLASS)) {
    return;
  }
  markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.toString()));
}",0.8776371308016878
82919,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
  if (!this.type.isResolved()) {
    markers.add(Markers.semantic(this.position,this.type.isArrayType() ? ""String_Node_Str"" : ""String_Node_Str"",this.type.toString()));
  }
}",0.6018518518518519
82920,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  final Name name=this.type.getName();
  final IDataMember field=context.resolveField(name);
  if (field != null) {
    final FieldAccess fieldAccess=new FieldAccess(this.position);
    fieldAccess.name=name;
    fieldAccess.field=field;
    return fieldAccess;
  }
  final IMethod method=IContext.resolveMethod(context,null,name,EmptyArguments.INSTANCE);
  if (method != null) {
    final MethodCall methodCall=new MethodCall(this.position);
    methodCall.name=name;
    methodCall.method=method;
    methodCall.dotless=true;
    methodCall.arguments=EmptyArguments.INSTANCE;
    return methodCall;
  }
  if (!this.type.isResolved()) {
    markers.add(Markers.semantic(this.position,this.type.isArrayType() ? ""String_Node_Str"" : ""String_Node_Str"",this.type.toString()));
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  final Name name=this.type.getName();
  final IDataMember field=context.resolveField(name);
  if (field != null) {
    final FieldAccess fieldAccess=new FieldAccess(this.position);
    fieldAccess.name=name;
    fieldAccess.field=field;
    return fieldAccess;
  }
  final IMethod method=IContext.resolveMethod(context,null,name,EmptyArguments.INSTANCE);
  if (method != null) {
    final MethodCall methodCall=new MethodCall(this.position);
    methodCall.name=name;
    methodCall.method=method;
    methodCall.dotless=true;
    methodCall.arguments=EmptyArguments.INSTANCE;
    return methodCall;
  }
  return this;
}",0.8785276073619632
82921,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  IClass iclass=this.type.getTheClass();
  if (iclass == null) {
    return;
  }
  if (iclass.hasModifier(Modifiers.OBJECT_CLASS)) {
    return;
  }
  markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.toString()));
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  if (!this.type.isResolved()) {
    return;
  }
  final IClass iclass=this.type.getTheClass();
  if (iclass != null && iclass.hasModifier(Modifiers.OBJECT_CLASS)) {
    return;
  }
  markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.toString()));
}",0.8776371308016878
82922,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
  if (!this.type.isResolved()) {
    markers.add(Markers.semantic(this.position,this.type.isArrayType() ? ""String_Node_Str"" : ""String_Node_Str"",this.type.toString()));
  }
}",0.6018518518518519
82923,"@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
 else {
    this.value=this.type.getDefaultValue();
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}",0.7475538160469667
82924,"@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
 else {
    this.value=this.type.getDefaultValue();
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}",0.7475538160469667
82925,"@Override public IValue resolveCall(MarkerList markers,IContext context){
  IClass iclass=context.getThisClass();
  if (this.isSuper) {
    iclass=iclass.getSuperType().getTheClass();
  }
  IConstructor match=IContext.resolveConstructor(iclass,this.arguments);
  if (match != null) {
    this.constructor=match;
    this.checkArguments(markers,context);
    return this;
  }
  return null;
}","@Override public IValue resolveCall(MarkerList markers,IContext context){
  IClass iclass=context.getThisClass();
  if (iclass == null) {
    return null;
  }
  if (this.isSuper) {
    iclass=iclass.getSuperType().getTheClass();
    if (iclass == null) {
      return null;
    }
  }
  final IConstructor match=IContext.resolveConstructor(iclass,this.arguments);
  if (match != null) {
    this.constructor=match;
    this.checkArguments(markers,context);
    return this;
  }
  return null;
}",0.8846153846153846
82926,"@Override public int getSuperTypeDistance(IType superType){
  IClass iclass=superType.getTheClass();
  if (this == iclass) {
    return 1;
  }
  int max=this.superType != null ? superType.getSubClassDistance(this.superType) : 0;
  if (!iclass.isInterface()) {
    return max;
  }
  for (int i=0; i < this.interfaceCount; i++) {
    int m=superType.getSubClassDistance(this.interfaces[i]);
    if (m > max) {
      max=m;
    }
  }
  return max == 0 ? 0 : 1 + max;
}","@Override public int getSuperTypeDistance(IType superType){
  IClass iclass=superType.getTheClass();
  if (iclass == null) {
    return 0;
  }
  if (this == iclass) {
    return 1;
  }
  int max=this.superType != null ? superType.getSubClassDistance(this.superType) : 0;
  if (!iclass.isInterface()) {
    return max;
  }
  for (int i=0; i < this.interfaceCount; i++) {
    int m=superType.getSubClassDistance(this.interfaces[i]);
    if (m > max) {
      max=m;
    }
  }
  return max == 0 ? 0 : 1 + max;
}",0.9567901234567902
82927,"@Override public boolean checkImplements(MarkerList markers,IClass checkedClass,IMethod candidate,ITypeContext typeContext){
  if (candidate.getTheClass() == this) {
    return !candidate.hasModifier(Modifiers.ABSTRACT);
  }
  if (this.body != null && this.body.checkImplements(markers,checkedClass,candidate,typeContext)) {
    return true;
  }
  if (this.superType != null) {
    if (this.superType.getTheClass().checkImplements(markers,checkedClass,candidate,this.superType.getConcreteType(typeContext))) {
      return true;
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    final IType interfaceType=this.interfaces[i];
    if (interfaceType.getTheClass().checkImplements(markers,checkedClass,candidate,interfaceType.getConcreteType(typeContext))) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkImplements(MarkerList markers,IClass checkedClass,IMethod candidate,ITypeContext typeContext){
  if (candidate.getTheClass() == this) {
    return !candidate.hasModifier(Modifiers.ABSTRACT);
  }
  if (this.body != null && this.body.checkImplements(markers,checkedClass,candidate,typeContext)) {
    return true;
  }
  if (this.superType != null) {
    final IClass superClass=this.superType.getTheClass();
    if (superClass != null && superClass.checkImplements(markers,checkedClass,candidate,this.superType.getConcreteType(typeContext))) {
      return true;
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    final IType interfaceType=this.interfaces[i];
    final IClass interfaceClass=interfaceType.getTheClass();
    if (interfaceClass != null && interfaceClass.checkImplements(markers,checkedClass,candidate,interfaceType.getConcreteType(typeContext))) {
      return true;
    }
  }
  return false;
}",0.9137343927355278
82928,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  if (!this.annotationsResolved) {
    this.resolveAnnotations();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  return super.checkArguments(markers,position,context,instance,arguments,typeContext);
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue receiver,IArguments arguments,ITypeContext typeContext){
  if (!this.annotationsResolved) {
    this.resolveAnnotations();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  return super.checkArguments(markers,position,context,receiver,arguments,typeContext);
}",0.9588688946015425
82929,"@Override public boolean isSuperTypeOf(IType type){
  return this.typeParameter == type.getTypeVariable();
}","@Override public boolean isSuperTypeOf(IType type){
  return this.isSameType(type);
}",0.7668393782383419
82930,"@Override public boolean classEquals(IType type){
  return this.typeParameter == type.getTypeVariable();
}","@Override public boolean classEquals(IType type){
  return this.isSameType(type);
}",0.7619047619047619
82931,"@Override public boolean isSameType(IType type){
  return this.typeParameter == type.getTypeVariable();
}","@Override public boolean isSameType(IType type){
  return this.typeParameter == type.getReturnType().getTypeVariable();
}",0.9292035398230089
82932,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if (this.modifiers.hasIntModifier(Modifiers.PREFIX) && !this.isStatic()) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers.toFlags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if (this.isVarargs()) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((mod & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
    }
 else {
      IValue instance1=IType.convertValue(instance,this.receiverType,typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,this.receiverType,typeContext,""String_Node_Str"",this.name);
      }
 else {
        instance=instance1;
      }
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisExpr(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.isVarargs()) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue receiver,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if (this.modifiers.hasIntModifier(Modifiers.PREFIX) && !this.isStatic()) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(receiver);
    receiver=argument;
  }
  if (receiver != null) {
    int mod=this.modifiers.toFlags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && receiver.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(receiver,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,receiver,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        receiver=instance1;
      }
      if (this.isVarargs()) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return receiver;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return receiver;
    }
    if ((mod & Modifiers.STATIC) != 0) {
      if (receiver.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (receiver.getType().getTheClass() != this.theClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.theClass.getFullName()));
      }
      receiver=null;
    }
 else     if (receiver.valueTag() == IValue.CLASS_ACCESS) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
    }
 else {
      final IValue typedReceiver=IType.convertValue(receiver,this.receiverType,typeContext,markers,context);
      if (typedReceiver == null) {
        Util.createTypeError(markers,receiver,this.receiverType,typeContext,""String_Node_Str"",this.name);
      }
 else {
        receiver=typedReceiver;
      }
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      receiver=new ThisExpr(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.isVarargs()) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return receiver;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return receiver;
}",0.9370525059665872
82933,"public void setAction(IValue action){
  this.action=action;
}","@Override public void setAction(IValue action){
  this.action=action;
}",0.9242424242424242
82934,"@Override public IValue resolve(MarkerList markers,IContext context){
  IType varType=this.variable.getType();
  IValue value=this.variable.getValue().resolve(markers,context);
  this.variable.setValue(value);
  if (value.valueTag() == IValue.RANGE_OPERATOR) {
    RangeOperator ro=(RangeOperator)value;
    IValue value1=ro.getFirstValue();
    IValue value2=ro.getLastValue();
    IType rangeType=ro.getElementType();
    if (varType == Types.UNKNOWN) {
      if (rangeType == Types.UNKNOWN) {
        rangeType=Types.combine(value1.getType(),value2.getType());
      }
      this.variable.setType(varType=rangeType);
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (rangeType != Types.UNKNOWN && !varType.isSuperTypeOf(rangeType)) {
      Marker marker=Markers.semantic(value1.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",rangeType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    RangeForStatement rfs=new RangeForStatement(this.position,this.variable,value1,value2,ro.isHalfOpen());
    rfs.resolveAction(this.action,markers,context);
    return rfs;
  }
  IType valueType=value.getType();
  if (valueType.isArrayType()) {
    if (varType == Types.UNKNOWN) {
      this.variable.setType(varType=valueType.getElementType());
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (!varType.isSuperTypeOf(valueType.getElementType())) {
      Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    ArrayForStatement afs=new ArrayForStatement(this.position,this.variable,valueType);
    afs.resolveAction(this.action,markers,context);
    return afs;
  }
  if (Types.ITERABLE.isSuperTypeOf(valueType)) {
    IType iterableType=valueType.resolveTypeSafely(IterableForStatement.ITERABLE_TYPE);
    if (varType == Types.UNKNOWN) {
      this.variable.setType(varType=iterableType);
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (!varType.isSuperTypeOf(iterableType)) {
      Marker m=Markers.semantic(value.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",iterableType));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(m);
    }
    IterableForStatement ifs=new IterableForStatement(this.position,this.variable);
    ifs.resolveAction(this.action,markers,context);
    return ifs;
  }
  if (Types.STRING.isSuperTypeOf(valueType)) {
    if (varType == Types.UNKNOWN) {
      this.variable.setType(Types.CHAR);
    }
 else     if (!varType.classEquals(Types.CHAR)) {
      Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    StringForStatement sfs=new StringForStatement(this.position,this.variable);
    sfs.resolveAction(this.action,markers,context);
    return sfs;
  }
  Marker marker=Markers.semantic(this.variable.getPosition(),""String_Node_Str"");
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
  markers.add(marker);
  this.resolveAction(this.action,markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  IType varType=this.variable.getType();
  IValue value=this.variable.getValue().resolve(markers,context);
  this.variable.setValue(value);
  if (value.valueTag() == IValue.RANGE_OPERATOR) {
    RangeOperator ro=(RangeOperator)value;
    IValue value1=ro.getFirstValue();
    IValue value2=ro.getLastValue();
    IType rangeType=ro.getElementType();
    if (varType == Types.UNKNOWN) {
      if (rangeType == Types.UNKNOWN) {
        rangeType=Types.combine(value1.getType(),value2.getType());
      }
      this.variable.setType(varType=rangeType);
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (rangeType != Types.UNKNOWN && !varType.isSuperTypeOf(rangeType)) {
      Marker marker=Markers.semantic(value1.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",rangeType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    RangeForStatement rfs=new RangeForStatement(this.position,this.variable,value1,value2,ro.isHalfOpen());
    rfs.resolveAction(this.action,markers,context);
    return rfs;
  }
  IType valueType=value.getType();
  if (valueType.isArrayType()) {
    if (varType == Types.UNKNOWN) {
      this.variable.setType(varType=valueType.getElementType());
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (!varType.isSuperTypeOf(valueType.getElementType())) {
      Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    ArrayForStatement afs=new ArrayForStatement(this.position,this.variable,valueType);
    afs.resolveAction(this.action,markers,context);
    return afs;
  }
  if (Types.ITERABLE.isSuperTypeOf(valueType)) {
    final IType iterableType=valueType.resolveTypeSafely(IterableForStatement.ITERABLE_TYPE).getReturnType();
    if (varType == Types.UNKNOWN) {
      this.variable.setType(varType=iterableType);
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (!varType.isSuperTypeOf(iterableType)) {
      Marker m=Markers.semantic(value.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",iterableType));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(m);
    }
    IterableForStatement ifs=new IterableForStatement(this.position,this.variable);
    ifs.resolveAction(this.action,markers,context);
    return ifs;
  }
  if (Types.STRING.isSuperTypeOf(valueType)) {
    if (varType == Types.UNKNOWN) {
      this.variable.setType(Types.CHAR);
    }
 else     if (!varType.classEquals(Types.CHAR)) {
      Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    StringForStatement sfs=new StringForStatement(this.position,this.variable);
    sfs.resolveAction(this.action,markers,context);
    return sfs;
  }
  Marker marker=Markers.semantic(this.variable.getPosition(),""String_Node_Str"");
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
  markers.add(marker);
  this.resolveAction(this.action,markers,context);
  return this;
}",0.9970791290493892
82935,"public IValue getAction(){
  return this.action;
}","@Override public IValue getAction(){
  return this.action;
}",0.9090909090909092
82936,"@Override default IType resolveType(MarkerList markers,IContext context){
  return null;
}","@Override default IType resolveType(ITypeParameter typeParameter){
  final IClass theClass=this.getTheClass();
  return theClass == null ? null : theClass.resolveType(typeParameter,this);
}",0.4516129032258064
82937,"/** 
 * @return the descriptor that contains the captured instance and capturedvariables (if present) as the argument types and the instantiated method type as the return type.
 */
private String getInvokeDescriptor(){
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  this.captureHelper.appendThisCaptureType(buffer);
  this.captureHelper.appendCaptureTypes(buffer);
  buffer.append(')');
  this.type.appendExtendedName(buffer);
  return buffer.toString();
}","/** 
 * @return the descriptor that contains the captured instance and captured variables (if present) as the argumenttypes and the instantiated method type as the return type.
 */
private String getInvokeDescriptor(){
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  this.captureHelper.appendThisCaptureType(buffer);
  this.captureHelper.appendCaptureTypes(buffer);
  buffer.append(')');
  this.type.appendExtendedName(buffer);
  return buffer.toString();
}",0.9979035639412998
82938,"/** 
 * @return the descriptor of the (synthetic) lambda callback method,including captured variables, parameter types and the return type.
 */
private String getLambdaDescriptor(){
  if (this.lambdaDesc != null) {
    return this.lambdaDesc;
  }
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  this.captureHelper.appendCaptureTypes(buffer);
  for (int i=this.directInvokeOpcode != 0 && this.directInvokeOpcode != Opcodes.INVOKESTATIC ? 1 : 0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  if (this.directInvokeOpcode == ClassFormat.H_NEWINVOKESPECIAL) {
    buffer.append('V');
  }
 else {
    this.returnType.appendExtendedName(buffer);
  }
  return this.lambdaDesc=buffer.toString();
}","/** 
 * @return the descriptor of the (synthetic) lambda callback method, including captured variables, parameter typesand the return type.
 */
private String getLambdaDescriptor(){
  if (this.lambdaDesc != null) {
    return this.lambdaDesc;
  }
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  this.captureHelper.appendCaptureTypes(buffer);
  for (int i=this.directInvokeOpcode != 0 && this.directInvokeOpcode != Opcodes.INVOKESTATIC ? 1 : 0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  if (this.directInvokeOpcode == ClassFormat.H_NEWINVOKESPECIAL) {
    buffer.append('V');
  }
 else {
    this.returnType.appendExtendedName(buffer);
  }
  return this.lambdaDesc=buffer.toString();
}",0.9987228607918264
82939,"/** 
 * @return the specialized method type of the SAM method, as opposed to{@link IMethod#getDescriptor()}.
 */
private String getSpecialDescriptor(){
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  this.returnType.appendExtendedName(buffer);
  return buffer.toString();
}","/** 
 * @return the specialized method type of the SAM method, as opposed to {@link IMethod#getDescriptor()}.
 */
private String getSpecialDescriptor(){
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  this.returnType.appendExtendedName(buffer);
  return buffer.toString();
}",0.998833138856476
82940,"@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,context);
  }
  this.value.resolveTypes(markers,new CombiningContext(this,context));
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    if (param.getType() == Types.UNKNOWN) {
      param.setType(null);
      param.resolveTypes(markers,context);
      param.setType(Types.UNKNOWN);
    }
 else {
      param.resolveTypes(markers,context);
    }
  }
  this.value.resolveTypes(markers,new CombiningContext(this,context));
}",0.7643835616438356
82941,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  this.value.check(markers,context);
  ModifierUtil.checkModifiers(markers,this,this.modifiers,Modifiers.VARIABLE_MODIFIERS);
  if (this.type == Types.VOID) {
    markers.add(Markers.semantic(this.position,""String_Node_Str""));
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  this.value.check(markers,context);
  if (this.modifiers != null) {
    ModifierUtil.checkModifiers(markers,this,this.modifiers,Modifiers.VARIABLE_MODIFIERS);
  }
  if (this.type == Types.VOID) {
    markers.add(Markers.semantic(this.position,""String_Node_Str""));
  }
}",0.9455587392550144
82942,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  ModifierUtil.checkModifiers(markers,this,this.modifiers,Modifiers.PARAMETER_MODIFIERS);
  if (this.defaultValue != null) {
    this.defaultValue.check(markers,context);
  }
  if (this.type == Types.VOID) {
    markers.add(Markers.semantic(this.position,this.getKind().getName() + ""String_Node_Str""));
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue.check(markers,context);
  }
  if (this.type == Types.VOID) {
    markers.add(Markers.semantic(this.position,this.getKind().getName() + ""String_Node_Str""));
  }
}",0.8753462603878116
82943,"protected void compute(DyvilREPL repl,List<IClassCompilable> compilableList){
  if (this.isConstant() && !compilableList.isEmpty()) {
    return;
  }
  try {
    this.theClass=this.generateClass(this.className,compilableList);
    this.updateValue(repl);
  }
 catch (  Throwable t) {
    filterStackTrace(t);
    t.printStackTrace(repl.getOutput());
  }
}","protected void compute(DyvilREPL repl,List<IClassCompilable> compilableList){
  if (this.isConstant() && !compilableList.isEmpty()) {
    return;
  }
  try {
    this.theClass=this.generateClass(this.className,compilableList);
  }
 catch (  Throwable throwable) {
    throwable.printStackTrace(repl.getErrorOutput());
  }
  try {
    this.updateValue(repl);
  }
 catch (  Throwable t) {
    filterStackTrace(t);
    t.printStackTrace(repl.getOutput());
  }
}",0.7330873308733087
82944,"@Override public boolean isUsableAsStatement(){
  for (int i=0; i < this.caseCount; i++) {
    if (!this.cases[i].action.isUsableAsStatement()) {
      return false;
    }
  }
  return true;
}","@Override public boolean isUsableAsStatement(){
  for (int i=0; i < this.caseCount; i++) {
    final IValue action=this.cases[i].action;
    if (action != null && !action.isUsableAsStatement()) {
      return false;
    }
  }
  return true;
}",0.8018433179723502
82945,"@Override public void resolveStatement(ILabelContext context,MarkerList markers){
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].action.resolveStatement(context,markers);
  }
}","@Override public void resolveStatement(ILabelContext context,MarkerList markers){
  for (int i=0; i < this.caseCount; i++) {
    final IValue action=this.cases[i].action;
    if (action != null) {
      action.resolveStatement(context,markers);
    }
  }
}",0.852017937219731
82946,"public static void parse(String content,Map<String,Object> map){
  Parser parser=new Parser(new MarkerList(),content);
  FlatMapConverter converter=new FlatMapConverter(map);
  parser.parseFileNode(converter);
}","public static void parse(String content,Map<String,Object> map){
  Parser parser=new Parser(new MarkerList(),content);
  FlatMapConverter converter=new FlatMapConverter(map);
  parser.parseNodeBody(converter);
}",0.981042654028436
82947,"private void parseNodeBody(NodeVisitor visitor){
  while (true) {
    if (!(this.tokens.hasNext() && this.parseNodeElement(visitor))) {
      break;
    }
  }
  visitor.visitEnd();
}","public void parseNodeBody(NodeVisitor visitor){
  while (true) {
    if (!(this.tokens.hasNext() && this.parseNodeElement(visitor))) {
      break;
    }
  }
  visitor.visitEnd();
}",0.975206611570248
82948,"public Parser(MarkerList markers,String code){
  this.markers=markers;
  DyvilLexer lexer=new DyvilLexer(markers,BaseSymbols.INSTANCE);
  this.tokens=lexer.tokenize(code);
}","public Parser(MarkerList markers,String code){
  this.markers=markers;
  final DyvilLexer lexer=new DyvilLexer(markers,BaseSymbols.INSTANCE);
  this.tokens=lexer.tokenize(code);
}",0.9829545454545454
82949,"private void parseParameters(BuilderVisitor visitor){
  IToken token=this.tokens.lastReturned().next();
  if (token.type() == BaseSymbols.CLOSE_PARENTHESIS) {
    this.tokens.next();
    visitor.visitEnd();
    return;
  }
  while (this.tokens.hasNext()) {
    if (token.next().type() == BaseSymbols.COLON) {
      this.tokens.next();
      this.tokens.next();
      this.parseValue(visitor.visitParameter(token.nameValue()));
    }
 else {
      this.parseValue(visitor.visitParameter(null));
    }
    token=this.tokens.next();
switch (token.type()) {
case BaseSymbols.CLOSE_PARENTHESIS:
      visitor.visitEnd();
    return;
case BaseSymbols.COMMA:
case BaseSymbols.SEMICOLON:
  token=token.next();
continue;
}
}
}","private void parseParameters(BuilderVisitor visitor){
  IToken token=this.tokens.lastReturned().next();
  if (token.type() == BaseSymbols.CLOSE_PARENTHESIS) {
    this.tokens.next();
    visitor.visitEnd();
    return;
  }
  while (this.tokens.hasNext()) {
    if (token.next().type() == BaseSymbols.COLON) {
      this.tokens.next();
      this.tokens.next();
      this.parseValue(visitor.visitParameter(token.nameValue()));
    }
 else {
      this.parseValue(visitor.visitParameter(null));
    }
    token=this.tokens.next();
switch (token.type()) {
case BaseSymbols.CLOSE_PARENTHESIS:
      visitor.visitEnd();
    return;
case BaseSymbols.COMMA:
case BaseSymbols.SEMICOLON:
  token=token.next();
}
}
}",0.9929775280898876
82950,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType prevType=this.value.getType();
  IValue value1=this.value.withType(this.type,this.type,markers,context);
  if (value1 != null) {
    this.value=value1;
    IType valueType=value1.getType();
    if (!prevType.isSameType(valueType) && this.type.isSuperClassOf(valueType) && valueType.isPrimitive() == this.type.isPrimitive()) {
      this.typeHint=true;
      this.type=valueType;
      return this;
    }
    prevType=valueType;
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (value1 == null && !(primitiveType && primitiveValue) && !prevType.isSuperClassOf(this.type)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",prevType,this.type));
    return this;
  }
  if (!this.typeHint && this.type.isSameType(prevType) && primitiveType == primitiveValue) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
    this.typeHint=true;
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  if (this.value == null) {
    return this;
  }
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType valueType=this.value.getType();
  final IValue typedValue=this.value.withType(this.type,this.type,markers,context);
  if (typedValue != null) {
    this.value=typedValue;
    final IType newType=typedValue.getType();
    if (!valueType.isSameType(newType) && this.type.isSuperClassOf(newType) && newType.isPrimitive() == this.type.isPrimitive()) {
      this.typeHint=true;
      this.type=newType;
      return this;
    }
    valueType=newType;
  }
  final boolean primitiveType=this.type.isPrimitive();
  final boolean primitiveValue=this.value.isPrimitive();
  if (typedValue == null && !(primitiveType && primitiveValue) && !valueType.isSuperClassOf(this.type)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType,this.type));
    return this;
  }
  if (!this.typeHint && this.type.isSameType(valueType) && primitiveType == primitiveValue) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
    this.typeHint=true;
  }
  return this;
}",0.8955661414437522
82951,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  this.value.check(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  if (this.value != null) {
    this.value.check(markers,context);
  }
}",0.89171974522293
82952,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
  this.value.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
  if (this.value != null) {
    this.value.checkTypes(markers,context);
  }
}",0.91005291005291
82953,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.type=this.type.resolveType(markers,context);
  this.value.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type=this.type.resolveType(markers,context);
  }
 else {
    this.type=Types.UNKNOWN;
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
 else {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
}",0.5227272727272727
82954,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.value=this.value.resolve(markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
  }
  return this;
}",0.7903614457831325
82955,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  this.value.check(markers,context);
  if (this.type.isPrimitive()) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
    return;
  }
  if (this.value.isPrimitive()) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
    return;
  }
  IType valueType=this.value.getType();
  if (valueType.classEquals(this.type)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType));
    return;
  }
  if (this.type.isSuperClassOf(valueType)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType,this.type));
    return;
  }
  if (!valueType.isSuperClassOf(this.type)) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str"",valueType,this.type));
  }
}","@Override public void check(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.check(markers,context);
    if (this.type.isPrimitive()) {
      markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
      return;
    }
  }
 else {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
    return;
  }
  if (this.value != null) {
    this.value.check(markers,context);
  }
 else {
    return;
  }
  if (this.value.isPrimitive()) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
    return;
  }
  final IType valueType=this.value.getType();
  if (valueType.classEquals(this.type)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType));
    return;
  }
  if (this.type.isSuperClassOf(valueType)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType,this.type));
    return;
  }
  if (!valueType.isSuperClassOf(this.type)) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str"",valueType,this.type));
  }
}",0.7488676396577756
82956,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.CLASS);
  this.value.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.checkType(markers,context,TypePosition.CLASS);
  }
  if (this.value != null) {
    this.value.checkTypes(markers,context);
  }
}",0.837772397094431
82957,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.type=this.type.resolveType(markers,context);
  this.value.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type=this.type.resolveType(markers,context);
  }
 else {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
 else {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
}",0.5485519591141397
82958,"@Override public void setPosition(ICodePosition position){
}","@Override public void setPosition(ICodePosition position){
  this.position=position;
}",0.821917808219178
82959,"@Override public ICodePosition getPosition(){
  return null;
}","@Override public ICodePosition getPosition(){
  return this.position;
}",0.8872180451127819
82960,"@Override public void resolveTypes(MarkerList markers,IContext context){
  IContext combinedContext=new CombiningContext(this,context);
  this.type=this.type.resolveType(markers,combinedContext);
  for (int i=0; i < this.typeVariableCount; i++) {
    this.typeVariables[i].resolveTypes(markers,combinedContext);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  IContext combinedContext=new CombiningContext(this,context);
  if (this.type == null) {
    this.type=Types.UNKNOWN;
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
  this.type=this.type.resolveType(markers,combinedContext);
  for (int i=0; i < this.typeVariableCount; i++) {
    this.typeVariables[i].resolveTypes(markers,combinedContext);
  }
}",0.8212435233160622
82961,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case END:
    this.map.addTypeAlias(this.typeAlias);
  pm.popParser(true);
return;
case TYPE:
this.mode=NAME;
if (type != DyvilKeywords.TYPE) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case NAME:
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
this.typeAlias=new TypeAlias(name);
this.mode=TYPE_PARAMETERS;
return;
}
pm.popParser();
pm.report(token,""String_Node_Str"");
return;
case TYPE_PARAMETERS:
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
this.typeAlias.setTypeParameterized();
this.mode=TYPE_PARAMETERS_END;
pm.pushParser(new TypeParameterListParser(this.typeAlias));
return;
}
case EQUAL:
this.mode=END;
pm.pushParser(pm.newTypeParser(this.typeAlias));
if (type != BaseSymbols.EQUALS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_PARAMETERS_END:
this.mode=EQUAL;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case END:
    this.map.addTypeAlias(this.typeAlias);
  pm.popParser(true);
return;
case TYPE:
this.mode=NAME;
if (type != DyvilKeywords.TYPE) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case NAME:
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
this.typeAlias=new TypeAlias(name,token.raw());
this.mode=TYPE_PARAMETERS;
return;
}
pm.popParser();
pm.report(token,""String_Node_Str"");
return;
case TYPE_PARAMETERS:
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
this.typeAlias.setTypeParameterized();
this.mode=TYPE_PARAMETERS_END;
pm.pushParser(new TypeParameterListParser(this.typeAlias));
return;
}
case EQUAL:
this.mode=END;
pm.pushParser(pm.newTypeParser(this.typeAlias));
if (type != BaseSymbols.EQUALS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_PARAMETERS_END:
this.mode=EQUAL;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
}
}",0.9943396226415094
82962,"@Override public IType resolveType(MarkerList markers,IContext context){
  if (this.name == Names.Tuple) {
    this.resolveTypeArguments(markers,context);
    return new TupleType(this.typeArguments,this.typeArgumentCount);
  }
  if (this.name == Names.Function) {
    if (this.typeArgumentCount > 0) {
      this.resolveTypeArguments(markers,context);
      return new LambdaType(this.typeArguments,this.typeArgumentCount - 1,this.typeArguments[this.typeArgumentCount - 1]);
    }
  }
  IType resolved=new NamedType(this.position,this.name,this.parent).resolveType0(markers,context);
  if (!resolved.isResolved()) {
    this.resolveTypeArguments(markers,context);
    return this;
  }
  this.resolveTypeArguments(markers,context);
  IClass iClass=resolved.getTheClass();
  ITypeVariable[] typeVariables;
  IType concrete;
  if (!resolved.isGenericType()) {
    resolved=iClass.getType();
    typeVariables=iClass.getTypeVariables();
    concrete=new ClassGenericType(iClass,this.typeArguments,this.typeArgumentCount);
  }
 else {
    typeVariables=new ITypeVariable[this.typeArgumentCount];
    concrete=resolved.getConcreteType(typeVar -> {
      int index=typeVar.getIndex();
      if (index >= this.typeArgumentCount) {
        return null;
      }
      typeVariables[index]=typeVar;
      return this.typeArguments[index];
    }
);
  }
  for (int i=0; i < this.typeArgumentCount; i++) {
    ITypeVariable typeVariable=typeVariables[i];
    IType type=this.typeArguments[i];
    if (typeVariable != null && !typeVariable.isAssignableFrom(type)) {
      Marker marker=MarkerMessages.createMarker(type.getPosition(),""String_Node_Str"",typeVariable.getName().qualified);
      marker.addInfo(MarkerMessages.getMarker(""String_Node_Str"",type));
      marker.addInfo(MarkerMessages.getMarker(""String_Node_Str"",typeVariable));
      markers.add(marker);
    }
  }
  return concrete;
}","@Override public IType resolveType(MarkerList markers,IContext context){
  if (this.parent == null) {
    if (this.name == Names.Tuple) {
      this.resolveTypeArguments(markers,context);
      return new TupleType(this.typeArguments,this.typeArgumentCount);
    }
    if (this.name == Names.Function) {
      if (this.typeArgumentCount > 0) {
        this.resolveTypeArguments(markers,context);
        return new LambdaType(this.typeArguments,this.typeArgumentCount - 1,this.typeArguments[this.typeArgumentCount - 1]);
      }
    }
  }
  final IType resolved=new NamedType(this.position,this.name,this.parent).resolveType0(markers,context);
  if (!resolved.isResolved()) {
    this.resolveTypeArguments(markers,context);
    return this;
  }
  this.resolveTypeArguments(markers,context);
  final IClass iClass=resolved.getTheClass();
  final ITypeVariable[] typeVariables;
  final IType concrete;
  if (!resolved.isGenericType()) {
    typeVariables=iClass.getTypeVariables();
    concrete=new ClassGenericType(iClass,this.typeArguments,this.typeArgumentCount);
  }
 else {
    typeVariables=new ITypeVariable[this.typeArgumentCount];
    concrete=resolved.getConcreteType(typeVar -> {
      int index=typeVar.getIndex();
      if (index >= this.typeArgumentCount) {
        return null;
      }
      typeVariables[index]=typeVar;
      return this.typeArguments[index];
    }
);
  }
  for (int i=0; i < this.typeArgumentCount; i++) {
    final ITypeVariable typeVariable=typeVariables[i];
    final IType type=this.typeArguments[i];
    if (typeVariable != null && !typeVariable.isAssignableFrom(type)) {
      final Marker marker=MarkerMessages.createMarker(type.getPosition(),""String_Node_Str"",typeVariable.getName().qualified);
      marker.addInfo(MarkerMessages.getMarker(""String_Node_Str"",type));
      marker.addInfo(MarkerMessages.getMarker(""String_Node_Str"",typeVariable));
      markers.add(marker);
    }
  }
  return concrete;
}",0.9649764767381076
82963,"@Override public boolean hasTypeVariables(){
  return this.bound == null ? false : this.bound.hasTypeVariables();
}","@Override public boolean hasTypeVariables(){
  return this.bound != null && this.bound.hasTypeVariables();
}",0.9417040358744396
82964,"private static int readTyped(String desc,int start,ITypeConsumer consumer){
  int array=0;
  char c;
  while ((c=desc.charAt(start)) == '[') {
    array++;
    start++;
  }
switch (c) {
case 'V':
    consumer.setType(ArrayType.getArrayType(Types.VOID,array));
  return start + 1;
case 'Z':
consumer.setType(ArrayType.getArrayType(Types.BOOLEAN,array));
return start + 1;
case 'B':
consumer.setType(ArrayType.getArrayType(Types.BYTE,array));
return start + 1;
case 'S':
consumer.setType(ArrayType.getArrayType(Types.SHORT,array));
return start + 1;
case 'C':
consumer.setType(ArrayType.getArrayType(Types.CHAR,array));
return start + 1;
case 'I':
consumer.setType(ArrayType.getArrayType(Types.INT,array));
return start + 1;
case 'J':
consumer.setType(ArrayType.getArrayType(Types.LONG,array));
return start + 1;
case 'F':
consumer.setType(ArrayType.getArrayType(Types.FLOAT,array));
return start + 1;
case 'D':
consumer.setType(ArrayType.getArrayType(Types.DOUBLE,array));
return start + 1;
case 'L':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
IType type=readReferenceType(desc,start + 1,end1);
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case 'T':
{
int end1=desc.indexOf(';',start);
IType type=new InternalTypeVarType(desc.substring(start + 1,end1));
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case '*':
consumer.setType(new WildcardType(Variance.INVARIANT));
return start + 1;
case '+':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType(Variance.COVARIANT);
var.setType(readType(desc,start + 1,end1));
consumer.setType(var);
return end1 + 1;
}
case '-':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType(Variance.CONTRAVARIANT);
var.setType(readType(desc,start + 1,end1));
consumer.setType(var);
return end1 + 1;
}
}
return start;
}","private static int readTyped(String desc,int start,ITypeConsumer consumer){
  int array=0;
  char c;
  while ((c=desc.charAt(start)) == '[') {
    array++;
    start++;
  }
switch (c) {
case 'V':
    consumer.setType(ArrayType.getArrayType(Types.VOID,array));
  return start + 1;
case 'Z':
consumer.setType(ArrayType.getArrayType(Types.BOOLEAN,array));
return start + 1;
case 'B':
consumer.setType(ArrayType.getArrayType(Types.BYTE,array));
return start + 1;
case 'S':
consumer.setType(ArrayType.getArrayType(Types.SHORT,array));
return start + 1;
case 'C':
consumer.setType(ArrayType.getArrayType(Types.CHAR,array));
return start + 1;
case 'I':
consumer.setType(ArrayType.getArrayType(Types.INT,array));
return start + 1;
case 'J':
consumer.setType(ArrayType.getArrayType(Types.LONG,array));
return start + 1;
case 'F':
consumer.setType(ArrayType.getArrayType(Types.FLOAT,array));
return start + 1;
case 'D':
consumer.setType(ArrayType.getArrayType(Types.DOUBLE,array));
return start + 1;
case 'L':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
IType type=readReferenceType(desc,start + 1,end1);
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case 'T':
{
int end1=desc.indexOf(';',start);
IType type=new InternalTypeVarType(desc.substring(start + 1,end1));
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case '*':
consumer.setType(new WildcardType(Variance.INVARIANT));
return start + 1;
case '+':
{
WildcardType var=new WildcardType(Variance.COVARIANT);
int end1=readTyped(desc,start + 1,var);
consumer.setType(var);
return end1;
}
case '-':
{
WildcardType var=new WildcardType(Variance.CONTRAVARIANT);
int end1=readTyped(desc,start + 1,var);
consumer.setType(var);
return end1;
}
}
return start;
}",0.9296296296296296
82965,"@Override public void visitParameter(String name,int modifiers){
  final IParameter parameter=this.method.getParameter_(this.parameterIndex++);
  parameter.setName(Name.getQualified(name));
  if (modifiers != 0) {
    parameter.getModifiers().addIntModifier(modifiers);
  }
}","@Override public void visitParameter(String name,int modifiers){
  final IParameter parameter=this.method.getParameter_(this.parameterIndex);
  if (parameter == null) {
    return;
  }
  this.parameterIndex++;
  parameter.setName(Name.getQualified(name));
  if (modifiers != 0) {
    parameter.getModifiers().addIntModifier(modifiers);
  }
}",0.8896103896103896
82966,"@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  final IType fieldType=this.field.getType();
  final int lineNumber=this.getLineNumber();
  if (this.receiver == null) {
    this.value.writeExpression(writer,fieldType);
    if (type != Types.VOID) {
      writer.writeInsn(Opcodes.AUTO_DUP);
    }
  }
 else {
    this.receiver.writeExpression(writer,null);
    this.value.writeExpression(writer,fieldType);
    if (type != Types.VOID) {
      writer.writeInsn(Opcodes.AUTO_DUP_X1);
    }
  }
  this.field.writeSet(writer,null,null,lineNumber);
  if (type != null && type != Types.VOID) {
    fieldType.writeCast(writer,type,lineNumber);
  }
}","@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  final int lineNumber=this.getLineNumber();
  if (type == Types.VOID) {
    this.field.writeSet(writer,this.receiver,this.value,lineNumber);
    return;
  }
  if (type == null) {
    type=this.getType();
  }
  final IType fieldType=this.field.getType();
  if (this.receiver != null) {
    this.receiver.writeExpression(writer,null);
  }
  this.field.writeSet_PreValue(writer,lineNumber);
  if (this.receiver == null) {
    final boolean tempVar=this.field.writeSet_PreValue(writer,lineNumber);
    this.value.writeExpression(writer,fieldType);
    writer.writeInsn(tempVar ? Opcodes.AUTO_DUP_X1 : Opcodes.AUTO_DUP);
  }
 else {
    this.field.writeSet_PreValue(writer,lineNumber);
    this.value.writeExpression(writer,fieldType);
    writer.writeInsn(Opcodes.AUTO_DUP_X1);
  }
  this.field.writeSet_Wrap(writer,lineNumber);
  this.field.writeSet_Set(writer,lineNumber);
  fieldType.writeCast(writer,type,lineNumber);
}",0.4201287302516091
82967,"default void writeGet(MethodWriter writer,IValue receiver,int lineNumber) throws BytecodeException {
  this.writeGet_PreReceiver(writer,lineNumber);
  if (receiver != null) {
    receiver.writeExpression(writer,this.getTheClass().getType());
  }
  this.writeGet_Get(writer,lineNumber);
  this.writeGet_Unwrap(writer,lineNumber);
}","default void writeGet(MethodWriter writer,IValue receiver,int lineNumber) throws BytecodeException {
  if (receiver != null) {
    receiver.writeExpression(writer,this.getTheClass().getType());
  }
  this.writeGet_Get(writer,lineNumber);
  this.writeGet_Unwrap(writer,lineNumber);
}",0.5751633986928104
82968,"default void writeSet(MethodWriter writer,IValue receiver,IValue value,int lineNumber) throws BytecodeException {
  this.writeSet_PreReceiver(writer,lineNumber);
  if (receiver != null) {
    receiver.writeExpression(writer,this.getTheClass().getType());
  }
  this.writeSet_PreValue(writer,lineNumber);
  value.writeExpression(writer,this.getType());
  this.writeSet_Wrap(writer,lineNumber);
  this.writeSet_Set(writer,lineNumber);
}","default void writeSet(MethodWriter writer,IValue receiver,IValue value,int lineNumber) throws BytecodeException {
  if (receiver != null) {
    receiver.writeExpression(writer,this.getTheClass().getType());
  }
  this.writeSet_PreValue(writer,lineNumber);
  value.writeExpression(writer,this.getType());
  this.writeSet_Wrap(writer,lineNumber);
  this.writeSet_Set(writer,lineNumber);
}",0.6634146341463415
82969,"@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  final int typecode=this.field.getType().getTypecode();
  final int lineNumber=this.getLineNumber();
  boolean receiver=this.receiver != null;
  if (type == Types.VOID) {
    if (this.canUseIINC(typecode)) {
      writer.writeIINC(((IVariable)this.field).getLocalIndex(),this.value);
      return;
    }
    this.field.writeGet_PreReceiver(writer,lineNumber);
    if (receiver) {
      this.receiver.writeExpression(writer,null);
      writer.writeInsn(Opcodes.DUP);
    }
    this.field.writeGet_Get(writer,lineNumber);
    this.field.writeGet_Unwrap(writer,lineNumber);
    this.writeAdd1(writer,typecode);
    this.field.writeSet_Wrap(writer,lineNumber);
    this.field.writeSet_Set(writer,lineNumber);
    return;
  }
  if (this.canUseIINC(typecode)) {
    int localIndex=((IVariable)this.field).getLocalIndex();
    if (this.prefix) {
      writer.writeIINC(localIndex,this.value);
      writer.writeVarInsn(this.field.getType().getLoadOpcode(),localIndex);
    }
 else {
      writer.writeVarInsn(this.field.getType().getLoadOpcode(),localIndex);
      writer.writeIINC(localIndex,this.value);
    }
  }
 else {
    int localCount=0;
    this.field.writeSet_PreReceiver(writer,lineNumber);
    if (receiver) {
      localCount=writer.localCount();
      this.receiver.writeExpression(writer,null);
      writer.writeInsn(Opcodes.DUP);
      writer.writeVarInsn(Opcodes.ASTORE,localCount);
    }
    final boolean tempValue=this.field.writeSet_PreValue(writer,lineNumber);
    final int dupOpcode=tempValue ? Opcodes.AUTO_DUP_X1 : Opcodes.AUTO_DUP;
{
      this.field.writeGet_PreReceiver(writer,lineNumber);
      if (receiver) {
        writer.writeVarInsn(Opcodes.ALOAD,localCount);
      }
      this.field.writeGet_Get(writer,lineNumber);
      this.field.writeGet_Unwrap(writer,lineNumber);
    }
    if (this.prefix) {
      this.writeAdd1(writer,typecode);
      writer.writeInsn(dupOpcode);
    }
 else {
      writer.writeInsn(dupOpcode);
      this.writeAdd1(writer,typecode);
    }
    this.field.writeSet_Wrap(writer,lineNumber);
    this.field.writeSet_Set(writer,lineNumber);
    if (receiver) {
      writer.resetLocals(localCount);
    }
  }
  if (type != null) {
    this.field.getType().writeCast(writer,type,lineNumber);
  }
}","@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  final int typecode=this.field.getType().getTypecode();
  final int lineNumber=this.getLineNumber();
  boolean receiver=this.receiver != null;
  if (type == Types.VOID) {
    if (this.canUseIINC(typecode)) {
      writer.writeIINC(((IVariable)this.field).getLocalIndex(),this.value);
      return;
    }
    this.field.writeSet_PreValue(writer,lineNumber);
    if (receiver) {
      this.receiver.writeExpression(writer,null);
      writer.writeInsn(Opcodes.DUP);
    }
    this.field.writeGet_Get(writer,lineNumber);
    this.field.writeGet_Unwrap(writer,lineNumber);
    this.writeAdd1(writer,typecode);
    this.field.writeSet_Wrap(writer,lineNumber);
    this.field.writeSet_Set(writer,lineNumber);
    return;
  }
  if (this.canUseIINC(typecode)) {
    int localIndex=((IVariable)this.field).getLocalIndex();
    if (this.prefix) {
      writer.writeIINC(localIndex,this.value);
      writer.writeVarInsn(this.field.getType().getLoadOpcode(),localIndex);
    }
 else {
      writer.writeVarInsn(this.field.getType().getLoadOpcode(),localIndex);
      writer.writeIINC(localIndex,this.value);
    }
  }
 else {
    int receiverIndex=0;
    if (receiver) {
      receiverIndex=writer.localCount();
      this.receiver.writeExpression(writer,null);
      writer.writeInsn(Opcodes.DUP);
      writer.writeVarInsn(Opcodes.ASTORE,receiverIndex);
    }
    final boolean tempValue=this.field.writeSet_PreValue(writer,lineNumber);
    final int dupOpcode=tempValue || receiver ? Opcodes.AUTO_DUP_X1 : Opcodes.AUTO_DUP;
{
      if (receiver) {
        writer.writeVarInsn(Opcodes.ALOAD,receiverIndex);
      }
      this.field.writeGet_Get(writer,lineNumber);
      this.field.writeGet_Unwrap(writer,lineNumber);
    }
    if (this.prefix) {
      this.writeAdd1(writer,typecode);
      writer.writeInsn(dupOpcode);
    }
 else {
      writer.writeInsn(dupOpcode);
      this.writeAdd1(writer,typecode);
    }
    this.field.writeSet_Wrap(writer,lineNumber);
    this.field.writeSet_Set(writer,lineNumber);
    if (receiver) {
      writer.resetLocals(receiverIndex);
    }
  }
  if (type != null) {
    this.field.getType().writeCast(writer,type,lineNumber);
  }
}",0.94140625
82970,"@Override public void writeSet_Wrap(MethodWriter writer,int lineNumber) throws BytecodeException {
  if (this.refType != null) {
    this.refType.writeWrap(writer,this.localIndex);
  }
}","@Override public void writeSet_Wrap(MethodWriter writer,int lineNumber) throws BytecodeException {
  if (this.refType != null) {
    this.refType.writeWrap(writer);
  }
}",0.9550561797752808
82971,"@Override public void writeGet_Unwrap(MethodWriter writer,int lineNumber) throws BytecodeException {
  if (this.refType != null) {
    this.refType.writeUnwrap(writer,this.localIndex);
  }
}","@Override public void writeGet_Unwrap(MethodWriter writer,int lineNumber) throws BytecodeException {
  if (this.refType != null) {
    this.refType.writeUnwrap(writer);
  }
}",0.956043956043956
82972,"public void writeUnwrap(MethodWriter writer,int index) throws BytecodeException {
  String internal=this.theClass.getInternalName();
  if (this.theClass == Types.getObjectRefClass()) {
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",""String_Node_Str"",true);
    if (this.type.getTheClass() != Types.OBJECT_CLASS) {
      writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
    }
    return;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  this.type.appendExtendedName(sb);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",sb.toString(),true);
}","public void writeUnwrap(MethodWriter writer) throws BytecodeException {
  final String internal=this.theClass.getInternalName();
  if (this.theClass == Types.getObjectRefClass()) {
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",""String_Node_Str"",true);
    if (this.type.getTheClass() != Types.OBJECT_CLASS) {
      writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
    }
    return;
  }
  final StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  this.type.appendExtendedName(stringBuilder);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",stringBuilder.toString(),true);
}",0.9531129900076863
82973,"public void writeWrap(MethodWriter writer,int index) throws BytecodeException {
  String internal=this.theClass.getInternalName();
  if (this.theClass == Types.getObjectRefClass()) {
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",""String_Node_Str"",true);
    return;
  }
  StringBuilder sb=new StringBuilder().append('(');
  this.type.appendExtendedName(sb);
  sb.append(""String_Node_Str"");
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",sb.toString(),true);
}","public void writeWrap(MethodWriter writer) throws BytecodeException {
  final String internal=this.theClass.getInternalName();
  if (this.theClass == Types.getObjectRefClass()) {
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",""String_Node_Str"",true);
    return;
  }
  final StringBuilder stringBuilder=new StringBuilder().append('(');
  this.type.appendExtendedName(stringBuilder);
  stringBuilder.append(""String_Node_Str"");
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",stringBuilder.toString(),true);
}",0.8931860036832413
82974,"@Override public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){
  IAnnotation annotation=new Annotation(ClassFormat.extendedToType(desc));
switch (TypeReference.getSort(typeRef)) {
case TypeReference.METHOD_RETURN:
    this.type=IType.withAnnotation(this.type,annotation,typePath,0,typePath.getLength());
  break;
case TypeReference.METHOD_TYPE_PARAMETER:
{
  ITypeVariable typeVar=this.generics[TypeReference.getTypeParameterIndex(typeRef)];
  if (typeVar.addRawAnnotation(desc,annotation)) {
    return null;
  }
  typeVar.addAnnotation(annotation);
  break;
}
case TypeReference.METHOD_TYPE_PARAMETER_BOUND:
{
ITypeVariable typeVar=this.generics[TypeReference.getTypeParameterIndex(typeRef)];
typeVar.addBoundAnnotation(annotation,TypeReference.getTypeParameterBoundIndex(typeRef),typePath);
break;
}
case TypeReference.EXCEPTION_PARAMETER:
{
int index=TypeReference.getExceptionIndex(typeRef);
this.exceptions[index]=IType.withAnnotation(this.exceptions[index],annotation,typePath,0,typePath.getLength());
break;
}
case TypeReference.METHOD_FORMAL_PARAMETER:
{
int index=TypeReference.getFormalParameterIndex(typeRef);
IParameter param=this.parameters[index];
param.setType(IType.withAnnotation(param.getType(),annotation,typePath,0,typePath.getLength()));
break;
}
}
return new AnnotationReader(null,annotation);
}","@Override public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){
  IAnnotation annotation=new Annotation(ClassFormat.extendedToType(desc));
  if (typePath == null) {
    typePath=TypePath.EMPTY;
  }
switch (TypeReference.getSort(typeRef)) {
case TypeReference.METHOD_RETURN:
    this.type=IType.withAnnotation(this.type,annotation,typePath,0,typePath.getLength());
  break;
case TypeReference.METHOD_TYPE_PARAMETER:
{
  ITypeVariable typeVar=this.generics[TypeReference.getTypeParameterIndex(typeRef)];
  if (typeVar.addRawAnnotation(desc,annotation)) {
    return null;
  }
  typeVar.addAnnotation(annotation);
  break;
}
case TypeReference.METHOD_TYPE_PARAMETER_BOUND:
{
ITypeVariable typeVar=this.generics[TypeReference.getTypeParameterIndex(typeRef)];
typeVar.addBoundAnnotation(annotation,TypeReference.getTypeParameterBoundIndex(typeRef),typePath);
break;
}
case TypeReference.EXCEPTION_PARAMETER:
{
int index=TypeReference.getExceptionIndex(typeRef);
this.exceptions[index]=IType.withAnnotation(this.exceptions[index],annotation,typePath,0,typePath.getLength());
break;
}
case TypeReference.METHOD_FORMAL_PARAMETER:
{
int index=TypeReference.getFormalParameterIndex(typeRef);
IParameter param=this.parameters[index];
param.setType(IType.withAnnotation(param.getType(),annotation,typePath,0,typePath.getLength()));
break;
}
}
return new AnnotationReader(null,annotation);
}",0.978921043229725
82975,"@Override public void checkType(MarkerList markers,IContext context,TypePosition position){
  if (position == TypePosition.CLASS) {
    markers.add(MarkerMessages.createMarker(this.returnType.getPosition(),""String_Node_Str""));
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameterTypes[i].checkType(markers,context,TypePosition.PARAMETER_TYPE);
  }
  this.returnType.checkType(markers,context,TypePosition.RETURN_TYPE);
}","@Override public void checkType(MarkerList markers,IContext context,TypePosition position){
  if (position == TypePosition.CLASS) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameterTypes[i].checkType(markers,context,TypePosition.PARAMETER_TYPE);
  }
  this.returnType.checkType(markers,context,TypePosition.RETURN_TYPE);
}",0.9627906976744186
82976,"@Override public IType resolveType(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    this.parameterTypes[i]=this.parameterTypes[i].resolveType(markers,context).getParameterType();
  }
  if (this.returnType == null) {
    this.returnType=Types.UNKNOWN;
    markers.add(MarkerMessages.createError(this.getPosition(),""String_Node_Str""));
  }
  this.returnType=this.returnType.resolveType(markers,context).getReturnType();
  return this;
}","@Override public IType resolveType(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    this.parameterTypes[i]=this.parameterTypes[i].resolveType(markers,context).getParameterType();
  }
  if (this.returnType == null) {
    this.returnType=Types.UNKNOWN;
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
 else {
    this.returnType=this.returnType.resolveType(markers,context).getReturnType();
  }
  return this;
}",0.9363920750782064
82977,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case END:
    if (type == Tokens.SYMBOL_IDENTIFIER) {
      final Name name=token.nameValue();
      if (name == Names.qmark) {
        this.type=new OptionType(this.type);
        return;
      }
      if (name == Names.times) {
        this.type=new ReferenceType(this.type);
        return;
      }
    }
  if (this.type != null) {
    this.consumer.setType(this.type);
  }
pm.popParser(true);
return;
case NAME:
switch (type) {
case DyvilSymbols.AT:
Annotation a=new Annotation();
pm.pushParser(pm.newAnnotationParser(a));
this.type=new AnnotatedType(a);
this.mode=ANNOTATION_END;
return;
case BaseSymbols.OPEN_PARENTHESIS:
TupleType tupleType=new TupleType();
pm.pushParser(new TypeListParser(tupleType));
this.type=tupleType;
this.mode=TUPLE_END;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ARRAY_COLON;
ArrayType at=new ArrayType();
this.type=at;
pm.pushParser(pm.newTypeParser(at));
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaType lt=new LambdaType();
this.type=lt;
pm.pushParser(pm.newTypeParser(lt));
this.mode=LAMBDA_END;
return;
case DyvilKeywords.NULL:
this.consumer.setType(Types.NULL);
pm.popParser();
return;
case DyvilSymbols.WILDCARD:
this.type=new WildcardType(token.raw());
this.mode=WILDCARD_TYPE;
return;
}
if (ParserUtil.isIdentifier(type)) {
IToken next=token.next();
switch (next.type()) {
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.type=new NamedGenericType(token.raw(),token.nameValue(),this.parentType);
this.mode=GENERICS;
return;
case DyvilSymbols.ARROW_OPERATOR:
if (this.parentType == null) {
LambdaType lt=new LambdaType(new NamedType(token.raw(),token.nameValue()));
this.type=lt;
this.mode=LAMBDA_END;
pm.skip();
pm.pushParser(pm.newTypeParser(lt));
return;
}
break;
case BaseSymbols.DOT:
NamedType namedType=new NamedType(token.raw(),token.nameValue(),this.parentType);
TypeParser parser=new TypeParser(this);
parser.parentType=namedType;
pm.pushParser(parser);
pm.skip();
this.mode=END;
return;
}
this.type=new NamedType(token.raw(),token.nameValue(),this.parentType);
this.mode=END;
return;
}
if (ParserUtil.isTerminator(type)) {
pm.popParser(true);
return;
}
pm.report(MarkerMessages.createSyntaxError(token,""String_Node_Str"",token.toString()));
return;
case TUPLE_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
IToken next=token.next();
int nextType=next.type();
if (nextType == DyvilSymbols.ARROW_OPERATOR) {
TupleType tupleType=(TupleType)this.type;
this.type=new LambdaType(tupleType);
this.mode=LAMBDA_TYPE;
return;
}
this.type.expandPosition(token);
this.mode=END;
return;
case LAMBDA_TYPE:
pm.pushParser(pm.newTypeParser((LambdaType)this.type));
this.mode=LAMBDA_END;
return;
case LAMBDA_END:
this.type.expandPosition(token.prev());
this.consumer.setType(this.type);
pm.popParser(true);
return;
case ARRAY_COLON:
if (type == BaseSymbols.COLON) {
this.mode=ARRAY_END;
MapType mt=new MapType(this.type.getElementType(),null);
this.type=mt;
pm.pushParser(new TypeParser(mt::setValueType));
return;
}
case ARRAY_END:
this.type.expandPosition(token);
this.mode=END;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case GENERICS:
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
pm.pushParser(new TypeListParser((GenericType)this.type));
this.mode=GENERICS_END;
return;
}
this.type.expandPosition(token.prev());
this.consumer.setType(this.type);
pm.popParser(true);
return;
case WILDCARD_TYPE:
Name name=token.nameValue();
WildcardType wt=(WildcardType)this.type;
if (name == Names.ltcolon) {
wt.setVariance(Variance.COVARIANT);
pm.pushParser(pm.newTypeParser(wt));
this.mode=END;
return;
}
if (name == Names.gtcolon) {
wt.setVariance(Variance.CONTRAVARIANT);
pm.pushParser(pm.newTypeParser(wt));
this.mode=END;
return;
}
this.consumer.setType(this.type);
pm.popParser(true);
return;
case GENERICS_END:
this.mode=END;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case ANNOTATION_END:
this.mode=END;
pm.pushParser(pm.newTypeParser((ITyped)this.type),true);
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case END:
    if (type == Tokens.SYMBOL_IDENTIFIER) {
      final Name name=token.nameValue();
      if (name == Names.qmark) {
        this.type=new OptionType(this.type);
        return;
      }
      if (name == Names.times) {
        this.type=new ReferenceType(this.type);
        return;
      }
    }
  if (this.type != null) {
    this.consumer.setType(this.type);
  }
pm.popParser(true);
return;
case NAME:
switch (type) {
case DyvilSymbols.AT:
Annotation a=new Annotation();
pm.pushParser(pm.newAnnotationParser(a));
this.type=new AnnotatedType(a);
this.mode=ANNOTATION_END;
return;
case BaseSymbols.OPEN_PARENTHESIS:
TupleType tupleType=new TupleType();
pm.pushParser(new TypeListParser(tupleType));
this.type=tupleType;
this.mode=TUPLE_END;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ARRAY_COLON;
ArrayType at=new ArrayType();
this.type=at;
pm.pushParser(pm.newTypeParser(at));
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaType lt=new LambdaType();
lt.setPosition(token.raw());
this.type=lt;
pm.pushParser(pm.newTypeParser(lt));
this.mode=LAMBDA_END;
return;
case DyvilKeywords.NULL:
this.consumer.setType(Types.NULL);
pm.popParser();
return;
case DyvilSymbols.WILDCARD:
this.type=new WildcardType(token.raw());
this.mode=WILDCARD_TYPE;
return;
}
if (ParserUtil.isIdentifier(type)) {
IToken next=token.next();
switch (next.type()) {
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.type=new NamedGenericType(token.raw(),token.nameValue(),this.parentType);
this.mode=GENERICS;
return;
case DyvilSymbols.ARROW_OPERATOR:
if (this.parentType == null) {
LambdaType lt=new LambdaType(new NamedType(token.raw(),token.nameValue()));
lt.setPosition(next.raw());
this.type=lt;
this.mode=LAMBDA_END;
pm.skip();
pm.pushParser(pm.newTypeParser(lt));
return;
}
break;
case BaseSymbols.DOT:
NamedType namedType=new NamedType(token.raw(),token.nameValue(),this.parentType);
TypeParser parser=new TypeParser(this);
parser.parentType=namedType;
pm.pushParser(parser);
pm.skip();
this.mode=END;
return;
}
this.type=new NamedType(token.raw(),token.nameValue(),this.parentType);
this.mode=END;
return;
}
if (ParserUtil.isTerminator(type)) {
pm.popParser(true);
return;
}
pm.report(MarkerMessages.createSyntaxError(token,""String_Node_Str"",token.toString()));
return;
case TUPLE_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
IToken next=token.next();
int nextType=next.type();
if (nextType == DyvilSymbols.ARROW_OPERATOR) {
TupleType tupleType=(TupleType)this.type;
this.type=new LambdaType(tupleType);
this.type.setPosition(next.raw());
this.mode=LAMBDA_TYPE;
return;
}
this.type.expandPosition(token);
this.mode=END;
return;
case LAMBDA_TYPE:
pm.pushParser(pm.newTypeParser((LambdaType)this.type));
this.mode=LAMBDA_END;
return;
case LAMBDA_END:
this.type.expandPosition(token.prev());
this.consumer.setType(this.type);
pm.popParser(true);
return;
case ARRAY_COLON:
if (type == BaseSymbols.COLON) {
this.mode=ARRAY_END;
MapType mt=new MapType(this.type.getElementType(),null);
this.type=mt;
pm.pushParser(new TypeParser(mt::setValueType));
return;
}
case ARRAY_END:
this.type.expandPosition(token);
this.mode=END;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case GENERICS:
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
pm.pushParser(new TypeListParser((GenericType)this.type));
this.mode=GENERICS_END;
return;
}
this.type.expandPosition(token.prev());
this.consumer.setType(this.type);
pm.popParser(true);
return;
case WILDCARD_TYPE:
Name name=token.nameValue();
WildcardType wt=(WildcardType)this.type;
if (name == Names.ltcolon) {
wt.setVariance(Variance.COVARIANT);
pm.pushParser(pm.newTypeParser(wt));
this.mode=END;
return;
}
if (name == Names.gtcolon) {
wt.setVariance(Variance.CONTRAVARIANT);
pm.pushParser(pm.newTypeParser(wt));
this.mode=END;
return;
}
this.consumer.setType(this.type);
pm.popParser(true);
return;
case GENERICS_END:
this.mode=END;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case ANNOTATION_END:
this.mode=END;
pm.pushParser(pm.newTypeParser((ITyped)this.type),true);
return;
}
}",0.9891841053374087
82978,"@Override public void addParameter(IParameter param){
  param.setTheClass(this);
  if (this.parameters == null) {
    this.parameters=new ClassParameter[2];
    this.parameters[0]=param;
    this.parameterCount=1;
    return;
  }
  int index=this.parameterCount++;
  if (this.parameterCount > this.parameters.length) {
    IParameter[] temp=new IParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
  param.setIndex(index);
}","@Override public void addParameter(IParameter param){
  param.setTheClass(this);
  if (this.parameters == null) {
    param.setIndex(0);
    this.parameters=new ClassParameter[2];
    this.parameters[0]=param;
    this.parameterCount=1;
    return;
  }
  final int index=this.parameterCount++;
  param.setIndex(index);
  if (this.parameterCount > this.parameters.length) {
    IParameter[] temp=new IParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}",0.9260991580916744
82979,"@Override public void setParameter(int index,IParameter param){
  param.setTheClass(this);
  this.parameters[index]=param;
}","@Override public void setParameter(int index,IParameter param){
  param.setTheClass(this);
  param.setIndex(index);
  this.parameters[index]=param;
}",0.9084249084249084
82980,"private void resolveParameters(){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  this.parametersResolved=true;
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(null,this);
  }
}","private void resolveParameters(){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  this.parametersResolved=true;
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolveTypes(null,this);
  }
}",0.9428571428571428
82981,"@Override public void addParameter(IParameter param){
  param.setMethod(this);
  int index=this.parameterCount++;
  if (index >= this.parameters.length) {
    MethodParameter[] temp=new MethodParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}","@Override public void addParameter(IParameter param){
  final int index=this.parameterCount++;
  param.setMethod(this);
  param.setIndex(index);
  if (index >= this.parameters.length) {
    MethodParameter[] temp=new MethodParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}",0.8892005610098177
82982,"@Override public void setParameter(int index,IParameter param){
  param.setMethod(this);
  this.parameters[index]=param;
}","@Override public void setParameter(int index,IParameter param){
  param.setMethod(this);
  param.setIndex(index);
  this.parameters[index]=param;
}",0.9070631970260224
82983,"@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,this);
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].resolveTypes(markers,this);
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,this);
  }
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i]=this.exceptions[i].resolveType(markers,this);
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,this);
  }
 else   if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
    this.modifiers.addIntModifier(Modifiers.ABSTRACT | Modifiers.PUBLIC);
  }
 else   if (this.theClass.hasModifier(Modifiers.ABSTRACT)) {
    this.modifiers.addIntModifier(Modifiers.ABSTRACT);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,this);
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].resolveTypes(markers,this);
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolveTypes(markers,this);
  }
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i]=this.exceptions[i].resolveType(markers,this);
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,this);
  }
 else   if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
    this.modifiers.addIntModifier(Modifiers.ABSTRACT | Modifiers.PUBLIC);
  }
 else   if (this.theClass.hasModifier(Modifiers.ABSTRACT)) {
    this.modifiers.addIntModifier(Modifiers.ABSTRACT);
  }
}",0.9822335025380712
82984,"@Override public void addParameter(IParameter param){
  param.setMethod(this);
  int index=this.parameterCount++;
  if (index >= this.parameters.length) {
    IParameter[] temp=new IParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}","@Override public void addParameter(IParameter param){
  param.setMethod(this);
  final int index=this.parameterCount++;
  param.setIndex(index);
  if (index >= this.parameters.length) {
    IParameter[] temp=new IParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}",0.9552669552669552
82985,"@Override public void setParameter(int index,IParameter param){
  param.setMethod(this);
  this.parameters[index]=param;
}","@Override public void setParameter(int index,IParameter param){
  param.setMethod(this);
  param.setIndex(index);
  this.parameters[index]=param;
}",0.9070631970260224
82986,"protected void writeAnnotations(MethodWriter writer){
  if (this.annotations != null) {
    AnnotatableVisitor visitor=(desc,visible) -> writer.visitParameterAnnotation(Parameter.this.index,desc,visible);
    int count=this.annotations.annotationCount();
    for (int i=0; i < count; i++) {
      this.annotations.getAnnotation(i).write(visitor);
    }
  }
  this.type.writeAnnotations(writer,TypeReference.newFormalParameterReference(this.index),""String_Node_Str"");
  if (this.defaultValue != null) {
    this.writeDefaultAnnotation(writer);
  }
}","protected void writeAnnotations(MethodWriter writer){
  final AnnotatableVisitor visitor=(desc,visible) -> writer.visitParameterAnnotation(Parameter.this.index,desc,visible);
  if (this.annotations != null) {
    final int count=this.annotations.annotationCount();
    for (int i=0; i < count; i++) {
      this.annotations.getAnnotation(i).write(visitor);
    }
  }
  AnnotationUtils.writeModifiers(visitor,this.modifiers);
  this.type.writeAnnotations(writer,TypeReference.newFormalParameterReference(this.index),""String_Node_Str"");
  if (this.defaultValue != null) {
    this.writeDefaultAnnotation(writer);
  }
}",0.8797250859106529
82987,"@Override public boolean isType(IType type){
  if (type == Types.VOID) {
    return true;
  }
  if (this.then != null && !this.then.isType(type)) {
    return false;
  }
  return !(this.elseThen != null && !this.elseThen.isType(type));
}","@Override public boolean isType(IType type){
  if (type == Types.VOID) {
    return true;
  }
  if (this.then != null && !this.then.isType(type)) {
    return false;
  }
  return this.elseThen == null || this.elseThen.isType(type);
}",0.7787234042553192
82988,"@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
StringInterpolationExpr ssv=new StringInterpolationExpr(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new StingInterpolationParser(ssv),true);
return;
}
case Tokens.SINGLE_QUOTED_STRING:
this.value=new CharValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case DyvilSymbols.WILDCARD:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == BaseSymbols.CLOSE_PARENTHESIS) {
if (next.next().type() == DyvilSymbols.ARROW_OPERATOR) {
LambdaExpr le=new LambdaExpr(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=ACCESS;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case BaseSymbols.OPEN_CURLY_BRACKET:
this.mode=ACCESS;
pm.pushParser(new StatementListParser(this),true);
return;
case DyvilSymbols.AT:
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=END;
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaExpr le=new LambdaExpr(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == DyvilKeywords.IF) {
pm.pushParser(pm.newExpressionParser(((ICase)this.value)::setCondition));
return;
}
case PATTERN_END:
if (type == DyvilSymbols.ARROW_OPERATOR || type == BaseSymbols.COLON) {
this.mode=END;
if (token.next().type() != DyvilKeywords.CASE) {
pm.pushParser(pm.newExpressionParser(((ICase)this.value)::setAction));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=CONSTRUCTOR_PARAMETERS;
pm.reparse();
return;
}
case CONSTRUCTOR_PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == BaseSymbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
this.value.expandPosition(token);
this.mode=ACCESS;
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
return;
case BYTECODE_END:
this.mode=END;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
{
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
MethodCall mc=(MethodCall)this.value;
GenericData genericData=mc.getGenericData();
IToken next=token.next();
int nextType=next.type();
if (nextType == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
IArguments arguments=this.parseArguments(pm,next.next());
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),arguments);
amc.setGenericData(genericData);
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(nextType)) {
pm.skip();
this.value=mc.getReceiver();
this.parseAccess(pm,token.next(),token.next().type(),token.next().nameValue(),null);
if (this.value instanceof AbstractCall) {
((AbstractCall)this.value).setGenericData(genericData);
}
if (this.value instanceof FieldAccess) {
FieldAccess fieldAccess=(FieldAccess)this.value;
mc.setName(fieldAccess.getName());
this.value=mc;
}
return;
}
if (ParserUtil.isExpressionTerminator(nextType)) {
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),EmptyArguments.INSTANCE);
amc.setGenericData(genericData);
this.value=amc;
this.mode=ACCESS;
return;
}
SingleArgument argument=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),argument);
amc.setGenericData(genericData);
this.value=amc;
this.parseApply(pm,next,argument,Operators.DEFAULT);
this.mode=ACCESS;
return;
}
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type) || type == BaseSymbols.COLON) {
if (this.value != null) {
this.valueConsumer.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == BaseSymbols.DOT) {
this.mode=DOT_ACCESS;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case DyvilKeywords.ELSE:
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
case BaseSymbols.EQUALS:
this.parseAssignment(pm,token);
return;
case DyvilKeywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case DyvilKeywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case DyvilKeywords.MATCH:
MatchExpr me=new MatchExpr(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case BaseSymbols.OPEN_PARENTHESIS:
this.value=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (this.value != null) {
if (this.operator != null) {
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
}
SingleArgument sa=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,sa);
this.parseApply(pm,token,sa,Operators.DEFAULT);
pm.reparse();
this.value=amc;
return;
}
}
if (this.mode == DOT_ACCESS) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
MethodCall call=new MethodCall(token,this.value,null);
pm.pushParser(new TypeListParser(call.getGenericData()));
this.mode=TYPE_ARGUMENTS_END;
this.value=call;
return;
}
pm.report(MarkerMessages.createError(token,""String_Node_Str"",token.toString()));
return;
}
pm.report(MarkerMessages.createError(token,""String_Node_Str"",token.toString()));
return;
}","@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
StringInterpolationExpr ssv=new StringInterpolationExpr(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new StingInterpolationParser(ssv),true);
return;
}
case Tokens.SINGLE_QUOTED_STRING:
this.value=new CharValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case DyvilSymbols.WILDCARD:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == BaseSymbols.CLOSE_PARENTHESIS) {
if (next.next().type() == DyvilSymbols.ARROW_OPERATOR) {
LambdaExpr le=new LambdaExpr(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=ACCESS;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case BaseSymbols.OPEN_CURLY_BRACKET:
this.mode=ACCESS;
pm.pushParser(new StatementListParser(this),true);
return;
case DyvilSymbols.AT:
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=END;
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaExpr le=new LambdaExpr(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == DyvilKeywords.IF) {
pm.pushParser(pm.newExpressionParser(((ICase)this.value)::setCondition));
return;
}
case PATTERN_END:
if (type == DyvilSymbols.ARROW_OPERATOR || type == BaseSymbols.COLON) {
this.mode=END;
if (token.next().type() != DyvilKeywords.CASE) {
pm.pushParser(pm.newExpressionParser(((ICase)this.value)::setAction));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=CONSTRUCTOR_PARAMETERS;
pm.reparse();
return;
}
case CONSTRUCTOR_PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == BaseSymbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
this.value.expandPosition(token);
this.mode=ACCESS;
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
return;
case BYTECODE_END:
this.mode=END;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
{
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
MethodCall mc=(MethodCall)this.value;
GenericData genericData=mc.getGenericData();
IToken next=token.next();
int nextType=next.type();
if (nextType == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
IArguments arguments=this.parseArguments(pm,next.next());
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),arguments);
amc.setGenericData(genericData);
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(nextType)) {
pm.skip();
this.value=mc.getReceiver();
this.parseAccess(pm,token.next(),token.next().type(),token.next().nameValue(),null);
if (this.value instanceof AbstractCall) {
((AbstractCall)this.value).setGenericData(genericData);
}
if (this.value instanceof FieldAccess) {
FieldAccess fieldAccess=(FieldAccess)this.value;
mc.setName(fieldAccess.getName());
this.value=mc;
}
return;
}
if (ParserUtil.isExpressionTerminator(nextType)) {
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),EmptyArguments.INSTANCE);
amc.setGenericData(genericData);
this.value=amc;
this.mode=ACCESS;
return;
}
SingleArgument argument=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),argument);
amc.setGenericData(genericData);
this.value=amc;
this.parseApply(pm,next,argument,Operators.DEFAULT);
this.mode=ACCESS;
return;
}
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type) || type == BaseSymbols.COLON) {
if (this.value != null) {
this.valueConsumer.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == BaseSymbols.DOT) {
this.mode=DOT_ACCESS;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case DyvilKeywords.ELSE:
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
case BaseSymbols.EQUALS:
this.parseAssignment(pm,token);
return;
case DyvilKeywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case DyvilKeywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case DyvilKeywords.MATCH:
MatchExpr me=new MatchExpr(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case BaseSymbols.OPEN_PARENTHESIS:
this.value=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (this.value != null) {
if (this.operator != null) {
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
}
SingleArgument sa=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,sa);
this.parseApply(pm,token,sa,Operators.DEFAULT);
pm.reparse();
this.value=amc;
return;
}
}
if (this.mode == DOT_ACCESS) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
MethodCall call=new MethodCall(token,this.value,null);
pm.pushParser(new TypeListParser(call.getGenericData()));
this.mode=TYPE_ARGUMENTS_END;
this.value=call;
return;
}
pm.report(MarkerMessages.createSyntaxError(token,""String_Node_Str"",token.toString()));
return;
}
pm.report(MarkerMessages.createSyntaxError(token,""String_Node_Str"",token.toString()));
return;
}",0.999340006599934
82989,"private static synchronized void loop(){
  System.out.print(""String_Node_Str"");
  try {
    String currentCode=readLine();
    if (currentCode == null) {
      return;
    }
    String trim=currentCode.trim();
    if (trim.length() > 1 && trim.charAt(0) == ':' && trim.charAt(1) != ':') {
      runCommand(trim);
      return;
    }
    instance.evaluate(currentCode);
    Thread.sleep(4L);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}","private static synchronized void loop(){
  System.out.print(""String_Node_Str"");
  String currentCode;
  try {
    currentCode=readLine();
    if (currentCode == null) {
      return;
    }
  }
 catch (  IOException ignored) {
    return;
  }
  try {
    String trim=currentCode.trim();
    if (trim.length() > 1 && trim.charAt(0) == ':' && trim.charAt(1) != ':') {
      runCommand(trim);
      return;
    }
    instance.evaluate(currentCode);
    Thread.sleep(4L);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}",0.7581967213114754
82990,"@Override public boolean isSuperClassOf(IType type){
  return this.typeVar == type.getTypeVariable();
}","@Override public boolean isSuperClassOf(IType type){
  return this.typeVar.isSuperClassOf(type);
}",0.8159203980099502
82991,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType prevType=this.value.getType();
  IValue value1=this.value.withType(this.type,this.type,markers,context);
  if (value1 != null) {
    this.value=value1;
    IType valueType=value1.getType();
    if (!prevType.isSameType(valueType) && this.type.isSuperClassOf(valueType) && valueType.isPrimitive() == this.type.isPrimitive()) {
      this.typeHint=true;
      this.type=valueType;
      return this;
    }
    prevType=valueType;
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (value1 == null && !(primitiveType && primitiveValue) && !prevType.isSuperClassOf(this.type)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",prevType,this.type));
    return this;
  }
  if (!this.typeHint && this.type.isSuperClassOf(prevType) && primitiveType == primitiveValue) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    this.typeHint=true;
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType prevType=this.value.getType();
  IValue value1=this.value.withType(this.type,this.type,markers,context);
  if (value1 != null) {
    this.value=value1;
    IType valueType=value1.getType();
    if (!prevType.isSameType(valueType) && this.type.isSuperClassOf(valueType) && valueType.isPrimitive() == this.type.isPrimitive()) {
      this.typeHint=true;
      this.type=valueType;
      return this;
    }
    prevType=valueType;
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (value1 == null && !(primitiveType && primitiveValue) && !prevType.isSuperClassOf(this.type)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",prevType,this.type));
    return this;
  }
  if (!this.typeHint && this.type.isSameType(prevType) && primitiveType == primitiveValue) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    this.typeHint=true;
  }
  return this;
}",0.9930394431554525
82992,"@Override public void writeCast(MethodWriter writer,IType target,int lineNumber) throws BytecodeException {
  if (!target.isPrimitive()) {
    this.boxMethod.writeInvoke(writer,null,EmptyArguments.INSTANCE,lineNumber);
    return;
  }
switch (this.typecode) {
case BOOLEAN_CODE:
case BYTE_CODE:
case SHORT_CODE:
case CHAR_CODE:
case INT_CODE:
    writeIntCast(target,writer);
  return;
case LONG_CODE:
writeLongCast(target,writer);
return;
case FLOAT_CODE:
writeFloatCast(target,writer);
return;
case DOUBLE_CODE:
writeDoubleCast(target,writer);
return;
}
}","@Override public void writeCast(MethodWriter writer,IType target,int lineNumber) throws BytecodeException {
  IType primitiveTarget=target;
  if (!target.isPrimitive()) {
    primitiveTarget=getPrimitiveType(target);
  }
switch (this.typecode) {
case BOOLEAN_CODE:
case BYTE_CODE:
case SHORT_CODE:
case CHAR_CODE:
case INT_CODE:
    writeIntCast(primitiveTarget,writer);
  break;
case LONG_CODE:
writeLongCast(primitiveTarget,writer);
break;
case FLOAT_CODE:
writeFloatCast(primitiveTarget,writer);
break;
case DOUBLE_CODE:
writeDoubleCast(primitiveTarget,writer);
break;
}
if (primitiveTarget != target) {
primitiveTarget.getBoxMethod().writeInvoke(writer,null,EmptyArguments.INSTANCE,lineNumber);
}
}",0.3510722795869738
82993,"@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.method != null) {
    IType receiverType=this.receiver.getType();
    IType methodReturnType=super.getType();
    if (!receiverType.isSuperTypeOf(methodReturnType)) {
      Marker marker=I18n.createMarker(this.position,""String_Node_Str"",this.name,this.receiver.toString());
      marker.addInfo(I18n.getString(""String_Node_Str"",receiverType));
      marker.addInfo(I18n.getString(""String_Node_Str"",methodReturnType));
      markers.add(marker);
    }
    this.method.checkCall(markers,this.position,context,this.receiver,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.method != null) {
    if (this.receiver != null) {
      IType receiverType=this.receiver.getType();
      IType methodReturnType=this.method.getType();
      if (!receiverType.isSuperTypeOf(methodReturnType)) {
        Marker marker=I18n.createMarker(this.position,""String_Node_Str"",this.name,this.receiver.toString());
        marker.addInfo(I18n.getString(""String_Node_Str"",receiverType));
        marker.addInfo(I18n.getString(""String_Node_Str"",methodReturnType));
        markers.add(marker);
      }
    }
    this.method.checkCall(markers,this.position,context,this.receiver,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}",0.9550917141049968
82994,"default int getSuperTypeDistance(IType superType){
  return this.getTheClass().getSuperTypeDistance(superType);
}","default int getSuperTypeDistance(IType superType){
  IClass iClass=this.getTheClass();
  return iClass == null ? 0 : iClass.getSuperTypeDistance(superType);
}",0.7896678966789668
82995,"@Override public void report(IToken token,String message){
  this.pm.jump(this.firstToken);
  this.pm.pushParser(this.pm.newExpressionParser(this));
  this.reset();
  this.mode=SEPARATOR;
}","@Override public void report(IToken token,String message){
  this.revertExpression(this.pm);
}",0.6360424028268551
82996,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (type == BaseSymbols.CLOSE_CURLY_BRACKET) {
    if (this.firstToken != null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(pm.newExpressionParser(this));
      this.mode=0;
      return;
    }
    this.consumer.setValue(this.statementList);
    pm.popParser();
    return;
  }
switch (this.mode) {
case OPEN_BRACKET:
    this.mode=EXPRESSION;
  this.statementList=this.applied ? new Closure(token) : new StatementList(token);
if (type != BaseSymbols.OPEN_CURLY_BRACKET) {
  pm.report(token,""String_Node_Str"");
  pm.reparse();
}
return;
case EXPRESSION:
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (ParserUtil.isIdentifier(type)) {
int nextType=token.next().type();
if (nextType == BaseSymbols.COLON) {
this.label=token.nameValue();
pm.skip();
return;
}
if (nextType == BaseSymbols.EQUALS) {
FieldAssignment fa=new FieldAssignment(token.raw(),null,token.nameValue());
pm.skip();
pm.pushParser(pm.newExpressionParser(fa));
this.setValue(fa);
this.mode=SEPARATOR;
return;
}
}
int i;
if ((i=ModifierTypes.MEMBER.parse(type)) != -1) {
this.modifiers|=i;
return;
}
if (type == DyvilSymbols.AT) {
if (this.annotations == null) {
this.annotations=new AnnotationList();
}
Annotation a=new Annotation(token.raw());
pm.pushParser(pm.newAnnotationParser(a));
this.annotations.addAnnotation(a);
return;
}
this.tryParser(pm,token,pm.newTypeParser(this));
this.mode=TYPE;
case TYPE:
if (ParserUtil.isIdentifier(type) && token.next().type() == BaseSymbols.EQUALS) {
if (this.type != null) {
Variable variable=new Variable(token.raw(),token.nameValue(),this.type);
variable.setModifiers(this.modifiers);
variable.setAnnotations(this.annotations);
FieldInitializer fi=new FieldInitializer(variable);
pm.pushParser(pm.newExpressionParser(variable));
this.setValue(fi);
}
 else if (token != this.firstToken) {
this.parser.parse(this,token);
pm.reparse();
return;
}
this.reset();
this.mode=SEPARATOR;
pm.skip();
return;
}
 else if (this.parser == null) {
pm.jump(this.firstToken);
this.reset();
pm.pushParser(pm.newExpressionParser(this));
this.mode=SEPARATOR;
return;
}
this.parser.parse(this,token);
return;
case SEPARATOR:
this.mode=EXPRESSION;
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (token.prev().type() == BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
return;
}
if (type == 0) {
this.consumer.setValue(this.statementList);
pm.popParser();
pm.report(token,""String_Node_Str"");
return;
}
pm.report(token,""String_Node_Str"");
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (type == BaseSymbols.CLOSE_CURLY_BRACKET) {
    if (this.firstToken != null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(pm.newExpressionParser(this));
      this.mode=0;
      return;
    }
    this.consumer.setValue(this.statementList);
    pm.popParser();
    return;
  }
switch (this.mode) {
case OPEN_BRACKET:
    this.mode=EXPRESSION;
  this.statementList=this.applied ? new Closure(token) : new StatementList(token);
if (type != BaseSymbols.OPEN_CURLY_BRACKET) {
  pm.report(token,""String_Node_Str"");
  pm.reparse();
}
return;
case EXPRESSION:
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (ParserUtil.isIdentifier(type)) {
int nextType=token.next().type();
if (nextType == BaseSymbols.COLON) {
this.label=token.nameValue();
pm.skip();
return;
}
if (nextType == BaseSymbols.EQUALS) {
FieldAssignment fa=new FieldAssignment(token.raw(),null,token.nameValue());
pm.skip();
pm.pushParser(pm.newExpressionParser(fa));
this.setValue(fa);
this.mode=SEPARATOR;
return;
}
}
int i;
if ((i=ModifierTypes.MEMBER.parse(type)) != -1) {
this.modifiers|=i;
return;
}
if (type == DyvilSymbols.AT) {
if (this.annotations == null) {
this.annotations=new AnnotationList();
}
Annotation a=new Annotation(token.raw());
pm.pushParser(pm.newAnnotationParser(a));
this.annotations.addAnnotation(a);
return;
}
this.tryParser(pm,token,pm.newTypeParser(this));
this.mode=TYPE;
case TYPE:
if (this.parser == null) {
this.revertExpression(pm);
return;
}
this.parser.parse(this,token);
return;
case VARIABLE_NAME:
if (ParserUtil.isIdentifier(type) && token.next().type() == BaseSymbols.EQUALS) {
Variable variable=new Variable(token.raw(),token.nameValue(),this.type);
variable.setModifiers(this.modifiers);
variable.setAnnotations(this.annotations);
FieldInitializer fi=new FieldInitializer(variable);
this.setValue(fi);
pm.skip();
pm.pushParser(pm.newExpressionParser(variable));
this.reset();
this.mode=SEPARATOR;
return;
}
this.revertExpression(pm);
return;
case SEPARATOR:
this.mode=EXPRESSION;
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (token.prev().type() == BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
return;
}
if (type == 0) {
this.consumer.setValue(this.statementList);
pm.popParser();
pm.report(token,""String_Node_Str"");
return;
}
pm.report(token,""String_Node_Str"");
return;
}
}",0.9024193548387096
82997,"@Override public void setType(IType type){
  this.type=type;
}","@Override public void setType(IType type){
  this.type=type;
  this.mode=VARIABLE_NAME;
}",0.8211920529801324
82998,"@Override public boolean isSuperTypeOf(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  return this.type.isSuperTypeOf(type.getElementType());
}","@Override public boolean isSuperTypeOf(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  IType elementType=type.getElementType();
  return this.type.isSuperTypeOf(elementType) && this.type.isPrimitive() == elementType.isPrimitive();
}",0.681265206812652
82999,"@Override public boolean classEquals(IType type){
  return type.isArrayType() && this.getElementType().classEquals(type.getElementType());
}","@Override public boolean classEquals(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  IType elementType=type.getElementType();
  return this.type.classEquals(elementType) && this.type.isPrimitive() == elementType.isPrimitive();
}",0.4300518134715025
83000,"@Override public boolean isSuperClassOf(IType type){
  return type.isArrayType() && this.getElementType().isSuperClassOf(type.getElementType());
}","@Override public boolean isSuperClassOf(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  IType elementType=type.getElementType();
  return this.type.isSuperClassOf(elementType) && this.type.isPrimitive() == elementType.isPrimitive();
}",0.4321608040201005
