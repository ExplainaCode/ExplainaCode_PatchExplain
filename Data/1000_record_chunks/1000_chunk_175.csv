record_number,buggy_code,fixed_code,code_similarity
174001,"@SneakyThrows public DocumentationYaml(final String yamlFile){
  try (final InputStream in=DocumentationYaml.class.getResourceAsStream(yamlFile)){
    final Yaml yaml=new Yaml(new Constructor(RestOperations.class));
    final RestOperations items=(RestOperations)yaml.load(in);
    this.operations=items.getRestOperations().stream().collect(Collectors.toMap(p -> Pair.of(p.getPath(),p.getMethod()),Function.identity()));
  }
 }","@SneakyThrows public DocumentationYaml(final String yamlFile){
  try (final InputStream in=DocumentationYaml.class.getResourceAsStream(yamlFile)){
    final Yaml yaml=new Yaml(new Constructor(RestOperations.class));
    final RestOperations items=(RestOperations)yaml.load(in);
    this.operations=new HashMap<>();
    for (    final RestOperation r : items.getRestOperations()) {
      this.operations.put(Pair.of(r.getPath(),r.getMethod()),r);
    }
  }
 }",0.7570621468926554
174002,"/** 
 * Determines parameter name.
 * @param param parameter to extract name for.
 * @param all parameters for checking.
 * @return name of the parameter.
 */
public static String paramName(final Parameter param,final Parameter[] all){
  final Optional<Pair<Class<? extends Annotation>,String>> parameterAnnotation=parameterAnnotation(param);
  String paramName;
  if (parameterAnnotation.isPresent()) {
    paramName=parameterAnnotation.get().getValue();
  }
 else {
    if (param.getType().isPrimitive()) {
      paramName=param.getType().getSimpleName() + ""String_Node_Str"";
    }
 else {
      paramName=param.getType().getSimpleName();
    }
    final boolean sameTypeParametersPresent=Arrays.stream(all).anyMatch(p -> (!parameterAnnotation(param).isPresent() && p.getType().equals(param.getType())));
    if (sameTypeParametersPresent) {
      paramName+=ThreadLocalRandom.current().nextInt(0,9999);
    }
  }
  return uncapitalize(paramName);
}","/** 
 * Determines parameter name.
 * @param param parameter to extract name for.
 * @param all parameters for checking.
 * @return name of the parameter.
 */
public static String paramName(final Parameter param,final Parameter[] all){
  final Optional<Pair<Class<? extends Annotation>,String>> parameterAnnotation=parameterAnnotation(param);
  String paramName;
  if (parameterAnnotation.isPresent()) {
    paramName=parameterAnnotation.get().getValue();
  }
 else {
    if (param.getType().isPrimitive()) {
      paramName=param.getType().getSimpleName() + ""String_Node_Str"";
    }
 else {
      paramName=param.getType().getSimpleName();
    }
    int found=0;
    for (    final Parameter p : all) {
      if (!parameterAnnotation(param).isPresent() && p.getType().equals(param.getType())) {
        found++;
      }
    }
    if (found > 1) {
      paramName+=ThreadLocalRandom.current().nextInt(0,9999);
    }
  }
  return uncapitalize(paramName);
}",0.8216159496327388
174003,"private void parseBody(String body){
  log.info(""String_Node_Str"");
  parseParams(body.trim());
  if (this.params == null) {
    this.params=new HashMap<>();
  }
}","private void parseBody(String body){
  log.info(""String_Node_Str"");
  byte[] bytes=body.getBytes(CharsetProperties.UTF_8_CHARSET);
  List<String> lengths=this.headers.get(""String_Node_Str"");
  if (lengths != null) {
    int length=Integer.parseInt(lengths.get(0));
    log.info(""String_Node_Str"",length);
    parseParams(new String(bytes,0,length,CharsetProperties.UTF_8_CHARSET));
  }
 else {
    parseParams(body.trim());
  }
  if (this.params == null) {
    this.params=new HashMap<>();
  }
}",0.4437689969604863
174004,"public boolean login(String username,String password){
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  String val=users.get(username);
  if (password.equals(val)) {
    online.put(username,""String_Node_Str"");
    return true;
  }
  return false;
}","public boolean login(String username,String password){
  String val=users.get(username);
  if (password.equals(val)) {
    online.put(username,""String_Node_Str"");
    return true;
  }
  return false;
}",0.6190476190476191
174005,"private String cdPath(String destination){
  File file=new File(destination);
  if (file.isAbsolute()) {
    printDebug(""String_Node_Str"");
    return tryToChangeCurrentDirectory(file);
  }
 else {
    printDebug(""String_Node_Str"");
    File current=getCurrentDir();
    String destPath=FileUtil.buildFilePath(current.getAbsolutePath(),destination);
    return tryToChangeCurrentDirectory(new File(destPath));
  }
}","private String cdPath(String destination){
  if (destination.startsWith(""String_Node_Str"")) {
    printDebug(""String_Node_Str"");
    return tryToChangeCurrentDirectory(new File(destination));
  }
 else {
    printDebug(""String_Node_Str"");
    File current=getCurrentDir();
    String destPath=FileUtil.buildFilePath(current.getAbsolutePath(),destination);
    return tryToChangeCurrentDirectory(new File(destPath));
  }
}",0.2703349282296651
174006,"private String newModel(String modelName){
  String projectFullPath=getCurrentHome();
  TelosysProject telosysProject=new TelosysProject(projectFullPath);
  try {
    File file=telosysProject.createNewDslModel(modelName);
    setCurrentModel(modelName);
    return ""String_Node_Str"" + modelName + ""String_Node_Str""+ file.getName()+ ""String_Node_Str""+ modelName+ ""String_Node_Str"";
  }
 catch (  TelosysToolsException e) {
    return ""String_Node_Str"" + modelName + ""String_Node_Str""+ ""String_Node_Str""+ e.getMessage();
  }
}","private String newModel(String modelName){
  String projectFullPath=getCurrentHome();
  TelosysProject telosysProject=new TelosysProject(projectFullPath);
  try {
    File modelFile=telosysProject.createNewDslModel(modelName);
    setCurrentModel(modelFile);
    return ""String_Node_Str"" + modelName + ""String_Node_Str""+ modelFile.getName()+ ""String_Node_Str""+ modelName+ ""String_Node_Str"";
  }
 catch (  TelosysToolsException e) {
    return ""String_Node_Str"" + modelName + ""String_Node_Str""+ ""String_Node_Str""+ e.getMessage();
  }
}",0.9810964083175804
174007,"private final void init(ConsoleReader consoleReader,Environment environment){
  register(new ThrowExceptionCommand(consoleReader,environment));
  register(new CdCommand(consoleReader,environment));
  register(new EditCommand(consoleReader,environment));
  register(new EnvCommand(consoleReader,environment));
  register(new GuideCommand(consoleReader,environment));
  register(new HelpCommand(consoleReader,environment,this));
  register(new LsCommand(consoleReader,environment));
  register(new PwdCommand(consoleReader,environment));
  register(new QuitCommand(consoleReader,environment));
  register(new ErrorCommand(consoleReader,environment));
  register(new HomeCommand(consoleReader,environment));
  register(new InitCommand(consoleReader,environment));
  register(new EditConfigCommand(consoleReader,environment));
  register(new EditDatabasesCommand(consoleReader,environment));
  register(new CheckDatabaseCommand(consoleReader,environment));
  register(new NewDbModelCommand(consoleReader,environment));
  register(new ModelCommand(consoleReader,environment));
  register(new NewModelCommand(consoleReader,environment));
  register(new ListModelsCommand(consoleReader,environment));
  register(new DeleteModelCommand(consoleReader,environment));
  register(new CheckModelCommand(consoleReader,environment));
  register(new ListEntitiesCommand(consoleReader,environment));
  register(new NewEntityCommand(consoleReader,environment));
  register(new EditEntityCommand(consoleReader,environment));
  register(new DeleteEntityCommand(consoleReader,environment));
  register(new GitHubCommand(consoleReader,environment));
  register(new ListGitHubCommand(consoleReader,environment));
  register(new InstallBundlesCommand(consoleReader,environment));
  register(new ListBundlesCommand(consoleReader,environment));
  register(new BundleCommand(consoleReader,environment));
  register(new EditBundleCommand(consoleReader,environment));
  register(new DeleteBundleCommand(consoleReader,environment));
  register(new ListTemplatesCommand(consoleReader,environment));
  register(new ListResourcesCommand(consoleReader,environment));
  register(new GenerateCommand(consoleReader,environment));
}","private final void init(ConsoleReader consoleReader,Environment environment){
  register(new ThrowExceptionCommand(consoleReader,environment));
  register(new CdCommand(consoleReader,environment));
  register(new EditCommand(consoleReader,environment));
  register(new EnvCommand(consoleReader,environment));
  register(new GuideCommand(consoleReader,environment));
  register(new HelpCommand(consoleReader,environment,this));
  register(new LsCommand(consoleReader,environment));
  register(new PwdCommand(consoleReader,environment));
  register(new QuitCommand(consoleReader,environment));
  register(new ErrorCommand(consoleReader,environment));
  register(new HomeCommand(consoleReader,environment));
  register(new InitCommand(consoleReader,environment));
  register(new EditConfigCommand(consoleReader,environment));
  register(new EditDatabasesCommand(consoleReader,environment));
  register(new ListDatabasesCommand(consoleReader,environment));
  register(new CheckDatabaseCommand(consoleReader,environment));
  register(new NewDbModelCommand(consoleReader,environment));
  register(new ModelCommand(consoleReader,environment));
  register(new NewModelCommand(consoleReader,environment));
  register(new ListModelsCommand(consoleReader,environment));
  register(new DeleteModelCommand(consoleReader,environment));
  register(new CheckModelCommand(consoleReader,environment));
  register(new ListEntitiesCommand(consoleReader,environment));
  register(new NewEntityCommand(consoleReader,environment));
  register(new EditEntityCommand(consoleReader,environment));
  register(new DeleteEntityCommand(consoleReader,environment));
  register(new GitHubCommand(consoleReader,environment));
  register(new ListGitHubCommand(consoleReader,environment));
  register(new InstallBundlesCommand(consoleReader,environment));
  register(new ListBundlesCommand(consoleReader,environment));
  register(new BundleCommand(consoleReader,environment));
  register(new EditBundleCommand(consoleReader,environment));
  register(new DeleteBundleCommand(consoleReader,environment));
  register(new ListTemplatesCommand(consoleReader,environment));
  register(new ListResourcesCommand(consoleReader,environment));
  register(new GenerateCommand(consoleReader,environment));
}",0.9854030990343589
174008,"private final CommandsGroup getDatabaseCommands(CommandProvider commandProvider){
  List<String> commands=new LinkedList<>();
  String name=""String_Node_Str"";
  commands.add(""String_Node_Str"");
  commands.add(""String_Node_Str"");
  return new CommandsGroup(name,commands);
}","private final CommandsGroup getDatabaseCommands(CommandProvider commandProvider){
  List<String> commands=new LinkedList<>();
  String name=""String_Node_Str"";
  commands.add(""String_Node_Str"");
  commands.add(""String_Node_Str"");
  commands.add(""String_Node_Str"");
  return new CommandsGroup(name,commands);
}",0.9397590361445785
174009,"private String getExceptionInfo(Exception e){
  StringBuffer sb=new StringBuffer();
  appendLine(sb,""String_Node_Str"" + e.getClass().getSimpleName());
  appendLine(sb,""String_Node_Str"" + e.getMessage());
  appendLine(sb,""String_Node_Str"");
  appendLine(sb,getStackTraceInfo(e));
  if (e.getCause() != null) {
    appendLine(sb,""String_Node_Str"");
    appendLine(sb,getExceptionInfo(e));
  }
  return sb.toString();
}","private String getExceptionInfo(Throwable e){
  StringBuffer sb=new StringBuffer();
  appendLine(sb,""String_Node_Str"" + e.getClass().getSimpleName());
  appendLine(sb,""String_Node_Str"" + e.getMessage());
  appendLine(sb,""String_Node_Str"");
  appendLine(sb,getStackTraceInfo(e));
  Throwable cause=e.getCause();
  if (cause != null) {
    appendEndOfLine(sb);
    appendLine(sb,""String_Node_Str"");
    sb.append(getExceptionInfo(cause));
  }
  return sb.toString();
}",0.1814058956916099
174010,"private String getStackTraceInfo(Exception e){
  StringBuffer sb=new StringBuffer();
  StackTraceElement[] stack=e.getStackTrace();
  for (  StackTraceElement ste : stack) {
    appendLine(sb,""String_Node_Str"" + ste.getFileName() + ""String_Node_Str""+ ste.getLineNumber()+ ""String_Node_Str""+ ste.getMethodName());
  }
  return sb.toString();
}","private String getStackTraceInfo(Throwable e){
  StringBuffer sb=new StringBuffer();
  StackTraceElement[] stack=e.getStackTrace();
  for (  StackTraceElement ste : stack) {
    appendLine(sb,""String_Node_Str"" + ste.getClassName() + ""String_Node_Str""+ ste.getLineNumber()+ ""String_Node_Str""+ ste.getMethodName());
  }
  return sb.toString();
}",0.9635036496350364
174011,"@Override public String execute(String[] args){
  if (args.length > 1) {
    printDebug(""String_Node_Str"");
    return deleteModel(args[1]);
  }
 else {
    printDebug(""String_Node_Str"");
    if (checkModelDefined()) {
      printDebug(""String_Node_Str"");
      String result=deleteModel(getCurrentModel());
      return result;
    }
 else {
      printDebug(""String_Node_Str"");
    }
  }
  return null;
}","@Override public String execute(String[] args){
  if (checkHomeDirectoryDefined()) {
    if (args.length > 1) {
      return deleteModel(args[1]);
    }
 else {
      if (checkModelDefined()) {
        return deleteModel(getCurrentModel());
      }
    }
  }
  return null;
}",0.355359765051395
174012,"@Override public String execute(String[] args){
  if (args.length > 1) {
    if (checkModelDefined()) {
      return editEntity(args[1]);
    }
  }
 else {
    return invalidUsage(""String_Node_Str"");
  }
  return null;
}","@Override public String execute(String[] args){
  if (args.length > 1) {
    if (checkModelDefined()) {
      if (getCurrentModel().endsWith(""String_Node_Str"")) {
        return editEntityDSL(args[1]);
      }
 else {
        editDBModelFile();
      }
    }
  }
 else {
    return invalidUsage(""String_Node_Str"");
  }
  return null;
}",0.7927927927927928
174013,"private String tryToSetCurrentModel(String modelName){
  File modelFile=getModelFile(modelName);
  if (modelFile != null) {
    setCurrentModel(modelFile.getName());
    return ""String_Node_Str"" + getCurrentModel() + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + modelName + ""String_Node_Str"";
  }
}","private String tryToSetCurrentModel(String modelName){
  File modelFile=getModelFile(modelName);
  if (modelFile != null) {
    setCurrentModel(modelFile.getName());
    return ""String_Node_Str"" + getCurrentModel() + ""String_Node_Str"";
  }
  return null;
}",0.8476357267950964
174014,"@Override public String execute(String[] args){
  if (args.length > 1) {
    return tryToSetCurrentModel(args[1]);
  }
 else {
    return undefinedIfNull(getCurrentModel());
  }
}","@Override public String execute(String[] args){
  if (args.length > 1) {
    if (checkHomeDirectoryDefined()) {
      return tryToSetCurrentModel(args[1]);
    }
  }
 else {
    return undefinedIfNull(getCurrentModel());
  }
  return null;
}",0.8476190476190476
174015,"@Override public String execute(String[] args){
  if (args.length > 1) {
    editBundle(args);
  }
 else {
    if (checkBundleDefined()) {
      editBundle(getCurrentBundle());
    }
  }
  return null;
}","@Override public String execute(String[] args){
  if (checkHomeDirectoryDefined()) {
    if (args.length > 1) {
      editBundle(args);
    }
 else {
      if (checkBundleDefined()) {
        editBundle(getCurrentBundle());
      }
    }
  }
  return null;
}",0.8373101952277657
174016,"/** 
 * Returns the editor command to be used <br> The specific command if defined in the '.cfg' file or the standard default command <br>
 * @return
 */
private String findEditorCommand(){
  String specificEditorCommand=getSpecificEditorCommand();
  if (specificEditorCommand != null) {
    return specificEditorCommand;
  }
 else {
    return getDefaultEditorCommand();
  }
}","/** 
 * Returns the editor command to be used <br> The specific command if defined in the '.cfg' file or the standard default command <br>
 * @return
 */
private String findEditorCommand(){
  String specificEditorCommand=findSpecificEditorCommand();
  if (specificEditorCommand != null) {
    return specificEditorCommand;
  }
 else {
    return determineDefaultEditorCommand();
  }
}",0.9750328515111696
174017,"private File findConfigFile(){
  File file=findJarFile();
  if (file.exists()) {
    File parent=file.getParentFile();
    String folderPath=parent.toString();
    File cfgFile=new File(FileUtil.buildFilePath(folderPath,TELOSYS_CLI_CFG));
    if (cfgFile.exists() && cfgFile.isFile()) {
      return cfgFile;
    }
  }
  return null;
}","/** 
 * Tries to find a configuration file 
 * @return the file or null if not found
 */
private File findConfigFile(){
  File file=findJarFile();
  if (file.exists()) {
    File parent=file.getParentFile();
    String folderPath=parent.toString();
    File cfgFile=new File(FileUtil.buildFilePath(folderPath,TELOSYS_CLI_CFG));
    if (cfgFile.exists() && cfgFile.isFile()) {
      return cfgFile;
    }
  }
  return null;
}",0.8827404479578392
174018,"private String env(){
  Environment environment=getEnvironment();
  StringBuffer sb=new StringBuffer();
  appendLine(sb,""String_Node_Str"");
  appendLine(sb,""String_Node_Str"" + environment.getOperatingSystem());
  appendLine(sb,""String_Node_Str"" + environment.getEditorCommand());
  appendLine(sb,""String_Node_Str"" + environment.getJarLocation());
  appendLine(sb,""String_Node_Str"" + environment.getCurrentDirectory());
  appendLine(sb,""String_Node_Str"" + undefinedIfNull(environment.getHomeDirectory()));
  appendLine(sb,""String_Node_Str"" + undefinedIfNull(environment.getCurrentGitHubStore()));
  appendLine(sb,""String_Node_Str"" + undefinedIfNull(environment.getCurrentModel()));
  appendLine(sb,""String_Node_Str"" + undefinedIfNull(environment.getCurrentBundle()));
  return sb.toString();
}","private String env(){
  Environment environment=getEnvironment();
  StringBuffer sb=new StringBuffer();
  appendLine(sb,""String_Node_Str"");
  appendLine(sb,""String_Node_Str"" + environment.getOperatingSystem());
  appendLine(sb,""String_Node_Str"" + environment.getEditorCommand());
  appendLine(sb,""String_Node_Str"" + environment.getJarLocation());
  appendLine(sb,""String_Node_Str"" + environment.getCurrentDirectory());
  appendLine(sb,""String_Node_Str"" + undefinedIfNull(environment.getCurrentGitHubStore()));
  appendLine(sb,""String_Node_Str"" + undefinedIfNull(environment.getHomeDirectory()));
  appendLine(sb,""String_Node_Str"" + undefinedIfNull(environment.getCurrentModel()));
  appendLine(sb,""String_Node_Str"" + undefinedIfNull(environment.getCurrentBundle()));
  return sb.toString();
}",0.8787878787878788
174019,"public static List<String> parseLine(String line){
  List<String> args=new ArrayList<>();
  if (line.length() == 0 || line.equals(""String_Node_Str""))   return args;
  char[] ary=line.toCharArray();
  StringBuilder s=new StringBuilder();
  boolean dq=false, q=false;
  for (int i=0; i < ary.length; i++) {
    char c=ary[i];
switch (c) {
case ' ':
      if (dq || q)       s.append(' ');
 else       if (s.length() > 0) {
        args.add(s.toString());
        s.setLength(0);
      }
    break;
case '""':
  if (!dq && !q) {
    dq=true;
  }
 else   if (q) {
    s.append('""');
  }
 else {
    args.add(s.toString());
    s.setLength(0);
    dq=false;
    if (i + 1 < ary.length && ary[i + 1] != ' ')     throw new UnsupportedOperationException(""String_Node_Str"");
  }
break;
case '\'':
if (!dq && !q) {
q=true;
}
 else if (dq) {
s.append('\'');
}
 else {
args.add(s.toString());
s.setLength(0);
q=false;
if (i + 1 < ary.length && ary[i + 1] != ' ') throw new UnsupportedOperationException(""String_Node_Str"");
}
break;
case '\\':
if (!dq) s.append('\\');
 else {
i++;
if (i < ary.length) {
switch (ary[i]) {
case 'n':
s.append('\n');
break;
case 'r':
s.append('\r');
break;
case 't':
s.append('\t');
break;
case 'b':
s.append('\b');
break;
case 'f':
s.append('\f');
break;
case 'x':
if (i + 2 >= ary.length) s.append(""String_Node_Str"");
 else {
char high=ary[++i];
char low=ary[++i];
try {
s.append(parseInt(new String(new char[]{high,low}),16));
}
 catch (Exception e) {
s.append(""String_Node_Str"");
s.append(high);
s.append(low);
}
}
break;
default :
s.append(ary[i]);
break;
}
}
}
break;
default :
s.append(c);
break;
}
}
if (dq || q) throw new UnsupportedOperationException(""String_Node_Str"" + line + ""String_Node_Str"");
if (s.length() > 0) args.add(s.toString());
return args;
}","public static List<String> parseLine(String line){
  List<String> args=new ArrayList<>();
  if (line.length() == 0 || line.equals(""String_Node_Str""))   return args;
  char[] ary=line.toCharArray();
  StringBuilder s=new StringBuilder();
  boolean dq=false, q=false;
  for (int i=0; i < ary.length; i++) {
    char c=ary[i];
switch (c) {
case ' ':
      if (dq || q)       s.append(' ');
 else       if (s.length() > 0) {
        args.add(s.toString());
        s.setLength(0);
      }
    break;
case '""':
  if (!dq && !q) {
    dq=true;
  }
 else   if (q) {
    s.append('""');
  }
 else {
    args.add(s.toString());
    s.setLength(0);
    dq=false;
    if (i + 1 < ary.length && ary[i + 1] != ' ')     throw new UnsupportedOperationException(""String_Node_Str"");
  }
break;
case '\'':
if (!dq && !q) {
q=true;
}
 else if (dq) {
s.append('\'');
}
 else {
args.add(s.toString());
s.setLength(0);
q=false;
if (i + 1 < ary.length && ary[i + 1] != ' ') throw new UnsupportedOperationException(""String_Node_Str"");
}
break;
case '\\':
if (!dq) s.append('\\');
 else {
i++;
if (i < ary.length) {
switch (ary[i]) {
case 'n':
s.append('\n');
break;
case 'r':
s.append('\r');
break;
case 't':
s.append('\t');
break;
case 'b':
s.append('\b');
break;
case 'f':
s.append('\f');
break;
case 'a':
s.append((byte)7);
break;
case 'x':
if (i + 2 >= ary.length) s.append(""String_Node_Str"");
 else {
char high=ary[++i];
char low=ary[++i];
try {
s.append(parseInt(new String(new char[]{high,low}),16));
}
 catch (Exception e) {
s.append(""String_Node_Str"");
s.append(high);
s.append(low);
}
}
break;
default :
s.append(ary[i]);
break;
}
}
}
break;
default :
s.append(c);
break;
}
}
if (dq || q) throw new UnsupportedOperationException(""String_Node_Str"" + line + ""String_Node_Str"");
if (s.length() > 0) args.add(s.toString());
return args;
}",0.9900055524708496
174020,"protected void reply(Transport<byte[][]> t,byte[] message){
  t.write(""String_Node_Str"",false);
  t.write(message,false);
  t.write(""String_Node_Str"".getBytes(),true);
}","protected void reply(Transport<byte[][]> t,byte[] message){
  t.write(""String_Node_Str"".getBytes(),false);
  t.write(message,false);
  t.write(""String_Node_Str"".getBytes(),true);
}",0.968481375358166
174021,"@Override public void handle(Transport<byte[][]> t,String[] message,byte[][] rawMessage){
  if (message.length == 1) {
    reply(t,""String_Node_Str"");
    managers.watchdog.stop(10,TimeUnit.SECONDS);
  }
 else   if (message.length == 2 && message[1] != null && (message[1].equalsIgnoreCase(""String_Node_Str"") || message[1].equalsIgnoreCase(""String_Node_Str""))) {
    reply(t,""String_Node_Str"");
    managers.watchdog.stop(10,TimeUnit.SECONDS);
  }
 else {
    replyError(t,""String_Node_Str"");
  }
}","@Override public void handle(Transport<byte[][]> t,String[] message,byte[][] rawMessage){
  if (message.length == 1) {
    reply(t,""String_Node_Str"");
    managers.cron.execute(() -> managers.watchdog.stop(10,TimeUnit.SECONDS));
  }
 else   if (message.length == 2 && message[1] != null && (message[1].equalsIgnoreCase(""String_Node_Str"") || message[1].equalsIgnoreCase(""String_Node_Str""))) {
    reply(t,""String_Node_Str"");
    managers.cron.execute(() -> managers.watchdog.stop(10,TimeUnit.SECONDS));
  }
 else {
    replyError(t,""String_Node_Str"");
  }
}",0.9449715370018976
174022,"public boolean clusterLoadConfig(){
  String file=managers.configuration.getClusterConfigFile();
  try (BufferedReader r=new BufferedReader(new FileReader(new File(file)))){
    String line;
    while ((line=r.readLine()) != null) {
      List<String> args=parseLine(line);
      if (args.isEmpty())       continue;
      if (args.get(0).equals(""String_Node_Str"")) {
        for (int i=1; i < args.size(); i+=2) {
          if (args.get(i).equals(""String_Node_Str"")) {
            server.cluster.currentEpoch=parseInt(args.get(i + 1));
          }
 else           if (args.get(i).equals(""String_Node_Str"")) {
            server.cluster.lastVoteEpoch=parseInt(args.get(i + 1));
          }
 else {
            logger.warn(""String_Node_Str"" + args.get(i) + ""String_Node_Str"");
          }
        }
      }
 else       if (args.size() < 8) {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
 else {
        ClusterNode node=managers.nodes.clusterLookupNode(args.get(0));
        if (node == null) {
          node=managers.nodes.createClusterNode(args.get(0),0);
          managers.nodes.clusterAddNode(node);
        }
        String hostAndPort=args.get(1);
        if (!hostAndPort.contains(""String_Node_Str"")) {
          throw new UnsupportedOperationException(""String_Node_Str"");
        }
        int colonIdx=hostAndPort.indexOf(""String_Node_Str"");
        int atIdx=hostAndPort.indexOf(""String_Node_Str"");
        node.ip=hostAndPort.substring(0,colonIdx);
        node.port=parseInt(hostAndPort.substring(colonIdx + 1,atIdx == -1 ? hostAndPort.length() : atIdx));
        node.busPort=atIdx == -1 ? node.port + CLUSTER_PORT_INCR : parseInt(hostAndPort.substring(atIdx + 1));
        String[] roles=args.get(2).split(""String_Node_Str"");
        long now=System.currentTimeMillis();
        for (        String role : roles) {
switch (role) {
case ""String_Node_Str"":
            server.myself=server.cluster.myself=node;
          node.flags|=CLUSTER_NODE_MYSELF;
        break;
case ""String_Node_Str"":
      node.flags|=CLUSTER_NODE_MASTER;
    break;
case ""String_Node_Str"":
  node.flags|=CLUSTER_NODE_SLAVE;
break;
case ""String_Node_Str"":
node.flags|=CLUSTER_NODE_PFAIL;
break;
case ""String_Node_Str"":
node.flags|=CLUSTER_NODE_FAIL;
node.failTime=now;
break;
case ""String_Node_Str"":
node.flags|=CLUSTER_NODE_HANDSHAKE;
break;
case ""String_Node_Str"":
node.flags|=CLUSTER_NODE_NOADDR;
break;
case ""String_Node_Str"":
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
}
ClusterNode master;
if (!args.get(3).equals(""String_Node_Str"")) {
master=managers.nodes.clusterLookupNode(args.get(3));
if (master == null) {
master=managers.nodes.createClusterNode(args.get(3),0);
managers.nodes.clusterAddNode(master);
}
node.master=master;
managers.nodes.clusterNodeAddSlave(master,node);
}
if (parseLong(args.get(4)) > 0) node.pingTime=now;
if (parseLong(args.get(5)) > 0) node.pongTime=now;
node.configEpoch=parseInt(args.get(6));
for (int i=8; i < args.size(); i++) {
int st, ed;
String arg=args.get(i);
if (arg.startsWith(""String_Node_Str"")) {
int idx=arg.indexOf(""String_Node_Str"");
char direction=arg.charAt(idx + 1);
int slot=parseInt(arg.substring(1,idx));
String name=arg.substring(idx + 3,idx + 3 + CLUSTER_NAME_LEN);
ClusterNode n=managers.nodes.clusterLookupNode(name);
if (n == null) {
n=managers.nodes.createClusterNode(name,0);
managers.nodes.clusterAddNode(n);
}
if (direction == '>') {
server.cluster.migrating[slot]=n;
}
 else {
server.cluster.importing[slot]=n;
}
continue;
}
 else if (arg.contains(""String_Node_Str"")) {
int idx=arg.indexOf(""String_Node_Str"");
st=parseInt(arg.substring(0,idx));
ed=parseInt(arg.substring(idx + 1));
}
 else {
st=ed=parseInt(arg);
}
while (st <= ed) managers.slots.clusterAddSlot(node,st++);
}
}
}
if (server.cluster.myself == null) {
throw new UnsupportedOperationException(""String_Node_Str"");
}
logger.info(""String_Node_Str"" + server.myself.name);
long maxEpoch=managers.nodes.clusterGetMaxEpoch();
if (maxEpoch > server.cluster.currentEpoch) {
server.cluster.currentEpoch=maxEpoch;
}
for (ClusterNode node : server.cluster.nodes.values()) {
ClusterNodeInfo info=ClusterNodeInfo.valueOf(node,server.myself);
managers.notifyNodeAdded(info);
if ((node.flags & CLUSTER_NODE_PFAIL) != 0) {
managers.notifyNodePFailed(info);
}
if ((node.flags & CLUSTER_NODE_FAIL) != 0) {
managers.notifyNodeFailed(info);
}
}
managers.notifyConfigChanged(ClusterConfigInfo.valueOf(server.cluster));
return true;
}
 catch (Throwable e) {
return false;
}
}","public boolean clusterLoadConfig(){
  String file=managers.configuration.getClusterConfigFile();
  try (BufferedReader r=new BufferedReader(new FileReader(new File(file)))){
    String line;
    while ((line=r.readLine()) != null) {
      List<String> args=parseLine(line);
      if (args.isEmpty())       continue;
      if (args.get(0).equals(""String_Node_Str"")) {
        for (int i=1; i < args.size(); i+=2) {
          if (args.get(i).equals(""String_Node_Str"")) {
            server.cluster.currentEpoch=parseInt(args.get(i + 1));
          }
 else           if (args.get(i).equals(""String_Node_Str"")) {
            server.cluster.lastVoteEpoch=parseInt(args.get(i + 1));
          }
 else {
            logger.warn(""String_Node_Str"" + args.get(i) + ""String_Node_Str"");
          }
        }
      }
 else       if (args.size() < 8) {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
 else {
        ClusterNode node=managers.nodes.clusterLookupNode(args.get(0));
        if (node == null) {
          node=managers.nodes.createClusterNode(args.get(0),0);
          managers.nodes.clusterAddNode(node);
        }
        String hostAndPort=args.get(1);
        if (!hostAndPort.contains(""String_Node_Str"")) {
          throw new UnsupportedOperationException(""String_Node_Str"");
        }
        int colonIdx=hostAndPort.indexOf(""String_Node_Str"");
        int atIdx=hostAndPort.indexOf(""String_Node_Str"");
        String ip=hostAndPort.substring(0,colonIdx);
        node.ip=ip.equalsIgnoreCase(""String_Node_Str"") ? null : ip;
        node.port=parseInt(hostAndPort.substring(colonIdx + 1,atIdx == -1 ? hostAndPort.length() : atIdx));
        node.busPort=atIdx == -1 ? node.port + CLUSTER_PORT_INCR : parseInt(hostAndPort.substring(atIdx + 1));
        String[] roles=args.get(2).split(""String_Node_Str"");
        long now=System.currentTimeMillis();
        for (        String role : roles) {
switch (role) {
case ""String_Node_Str"":
            server.myself=server.cluster.myself=node;
          node.flags|=CLUSTER_NODE_MYSELF;
        break;
case ""String_Node_Str"":
      node.flags|=CLUSTER_NODE_MASTER;
    break;
case ""String_Node_Str"":
  node.flags|=CLUSTER_NODE_SLAVE;
break;
case ""String_Node_Str"":
node.flags|=CLUSTER_NODE_PFAIL;
break;
case ""String_Node_Str"":
node.flags|=CLUSTER_NODE_FAIL;
node.failTime=now;
break;
case ""String_Node_Str"":
node.flags|=CLUSTER_NODE_HANDSHAKE;
break;
case ""String_Node_Str"":
node.flags|=CLUSTER_NODE_NOADDR;
break;
case ""String_Node_Str"":
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
}
ClusterNode master;
if (!args.get(3).equals(""String_Node_Str"")) {
master=managers.nodes.clusterLookupNode(args.get(3));
if (master == null) {
master=managers.nodes.createClusterNode(args.get(3),0);
managers.nodes.clusterAddNode(master);
}
node.master=master;
managers.nodes.clusterNodeAddSlave(master,node);
}
if (parseLong(args.get(4)) > 0) node.pingTime=now;
if (parseLong(args.get(5)) > 0) node.pongTime=now;
node.configEpoch=parseInt(args.get(6));
for (int i=8; i < args.size(); i++) {
int st, ed;
String arg=args.get(i);
if (arg.startsWith(""String_Node_Str"")) {
int idx=arg.indexOf(""String_Node_Str"");
char direction=arg.charAt(idx + 1);
int slot=parseInt(arg.substring(1,idx));
String name=arg.substring(idx + 3,idx + 3 + CLUSTER_NAME_LEN);
ClusterNode n=managers.nodes.clusterLookupNode(name);
if (n == null) {
n=managers.nodes.createClusterNode(name,0);
managers.nodes.clusterAddNode(n);
}
if (direction == '>') {
server.cluster.migrating[slot]=n;
}
 else {
server.cluster.importing[slot]=n;
}
continue;
}
 else if (arg.contains(""String_Node_Str"")) {
int idx=arg.indexOf(""String_Node_Str"");
st=parseInt(arg.substring(0,idx));
ed=parseInt(arg.substring(idx + 1));
}
 else {
st=ed=parseInt(arg);
}
while (st <= ed) managers.slots.clusterAddSlot(node,st++);
}
}
}
if (server.cluster.myself == null) {
throw new UnsupportedOperationException(""String_Node_Str"");
}
logger.info(""String_Node_Str"" + server.myself.name);
long maxEpoch=managers.nodes.clusterGetMaxEpoch();
if (maxEpoch > server.cluster.currentEpoch) {
server.cluster.currentEpoch=maxEpoch;
}
for (ClusterNode node : server.cluster.nodes.values()) {
ClusterNodeInfo info=ClusterNodeInfo.valueOf(node,server.myself);
managers.notifyNodeAdded(info);
if ((node.flags & CLUSTER_NODE_PFAIL) != 0) {
managers.notifyNodePFailed(info);
}
if ((node.flags & CLUSTER_NODE_FAIL) != 0) {
managers.notifyNodeFailed(info);
}
}
managers.notifyConfigChanged(ClusterConfigInfo.valueOf(server.cluster));
return true;
}
 catch (Throwable e) {
return false;
}
}",0.9912491796105884
174023,"protected ClusterMessage decode(ByteBuf in){
  in.markReaderIndex();
  try {
    ClusterMessage hdr=new ClusterMessage();
    hdr.signature=(String)in.readCharSequence(4,CHARSET);
    hdr.length=in.readInt();
    if (in.readableBytes() < hdr.length - 8) {
      in.resetReaderIndex();
      return null;
    }
    hdr.version=in.readUnsignedShort();
    hdr.port=in.readUnsignedShort();
    hdr.type=in.readUnsignedShort();
    hdr.count=in.readUnsignedShort();
    hdr.currentEpoch=in.readLong();
    hdr.configEpoch=in.readLong();
    hdr.offset=in.readLong();
    hdr.name=truncate(in,CLUSTER_NODE_NULL_NAME);
    in.readBytes(hdr.slots);
    hdr.master=truncate(in,CLUSTER_NODE_NULL_NAME);
    hdr.ip=truncate(in,CLUSTER_NODE_NULL_IP);
    in.readBytes(hdr.reserved);
    hdr.busPort=in.readUnsignedShort();
    hdr.flags=in.readUnsignedShort();
    hdr.state=in.readByte();
    in.readBytes(hdr.messageFlags);
switch (hdr.type) {
case CLUSTERMSG_TYPE_PING:
case CLUSTERMSG_TYPE_PONG:
case CLUSTERMSG_TYPE_MEET:
      hdr.data=new ClusterMessageData();
    hdr.data.gossips=new ArrayList<>();
  for (int i=0; i < hdr.count; i++) {
    ClusterMessageDataGossip gossip=new ClusterMessageDataGossip();
    gossip.name=truncate(in,CLUSTER_NODE_NULL_NAME);
    gossip.pingTime=in.readInt() * 1000;
    gossip.pongTime=in.readInt() * 1000;
    gossip.ip=truncate(in,CLUSTER_NODE_NULL_IP);
    gossip.port=in.readUnsignedShort();
    gossip.busPort=in.readUnsignedShort();
    gossip.flags=in.readUnsignedShort();
    in.readBytes(gossip.reserved);
    hdr.data.gossips.add(gossip);
  }
break;
case CLUSTERMSG_TYPE_FAIL:
hdr.data=new ClusterMessageData();
hdr.data.fail=new ClusterMessageDataFail();
hdr.data.fail.name=truncate(in,CLUSTER_NODE_NULL_NAME);
break;
case CLUSTERMSG_TYPE_PUBLISH:
hdr.data=new ClusterMessageData();
hdr.data.publish=new ClusterMessageDataPublish();
hdr.data.publish.channelLength=in.readInt();
hdr.data.publish.messageLength=in.readInt();
in.readBytes(hdr.data.publish.bulkData);
break;
case CLUSTERMSG_TYPE_UPDATE:
hdr.data=new ClusterMessageData();
hdr.data.config=new ClusterMessageDataUpdate();
hdr.data.config.configEpoch=in.readLong();
hdr.data.config.name=truncate(in,CLUSTER_NODE_NULL_NAME);
in.readBytes(hdr.data.config.slots);
break;
default :
break;
}
return hdr;
}
 catch (Exception e) {
in.resetReaderIndex();
return null;
}
}","protected ClusterMessage decode(ByteBuf in){
  in.markReaderIndex();
  try {
    ClusterMessage hdr=new ClusterMessage();
    hdr.signature=(String)in.readCharSequence(4,CHARSET);
    hdr.length=in.readInt();
    if (in.readableBytes() < hdr.length - 8) {
      in.resetReaderIndex();
      return null;
    }
    hdr.version=in.readUnsignedShort();
    hdr.port=in.readUnsignedShort();
    hdr.type=in.readUnsignedShort();
    hdr.count=in.readUnsignedShort();
    hdr.currentEpoch=in.readLong();
    hdr.configEpoch=in.readLong();
    hdr.offset=in.readLong();
    hdr.name=truncate(in,CLUSTER_NODE_NULL_NAME);
    in.readBytes(hdr.slots);
    hdr.master=truncate(in,CLUSTER_NODE_NULL_NAME);
    hdr.ip=truncate(in,CLUSTER_NODE_NULL_IP);
    in.readBytes(hdr.reserved);
    hdr.busPort=in.readUnsignedShort();
    hdr.flags=in.readUnsignedShort();
    hdr.state=in.readByte();
    in.readBytes(hdr.messageFlags);
switch (hdr.type) {
case CLUSTERMSG_TYPE_PING:
case CLUSTERMSG_TYPE_PONG:
case CLUSTERMSG_TYPE_MEET:
      hdr.data=new ClusterMessageData();
    hdr.data.gossips=new ArrayList<>();
  for (int i=0; i < hdr.count; i++) {
    ClusterMessageDataGossip gossip=new ClusterMessageDataGossip();
    gossip.name=truncate(in,CLUSTER_NODE_NULL_NAME);
    gossip.pingTime=in.readInt() * 1000L;
    gossip.pongTime=in.readInt() * 1000L;
    gossip.ip=truncate(in,CLUSTER_NODE_NULL_IP);
    gossip.port=in.readUnsignedShort();
    gossip.busPort=in.readUnsignedShort();
    gossip.flags=in.readUnsignedShort();
    in.readBytes(gossip.reserved);
    hdr.data.gossips.add(gossip);
  }
break;
case CLUSTERMSG_TYPE_FAIL:
hdr.data=new ClusterMessageData();
hdr.data.fail=new ClusterMessageDataFail();
hdr.data.fail.name=truncate(in,CLUSTER_NODE_NULL_NAME);
break;
case CLUSTERMSG_TYPE_PUBLISH:
hdr.data=new ClusterMessageData();
hdr.data.publish=new ClusterMessageDataPublish();
hdr.data.publish.channelLength=in.readInt();
hdr.data.publish.messageLength=in.readInt();
in.readBytes(hdr.data.publish.bulkData);
break;
case CLUSTERMSG_TYPE_UPDATE:
hdr.data=new ClusterMessageData();
hdr.data.config=new ClusterMessageDataUpdate();
hdr.data.config.configEpoch=in.readLong();
hdr.data.config.name=truncate(in,CLUSTER_NODE_NULL_NAME);
in.readBytes(hdr.data.config.slots);
break;
default :
break;
}
return hdr;
}
 catch (Exception e) {
in.resetReaderIndex();
return null;
}
}",0.9995773457311918
174024,"@Override protected void encode(ChannelHandlerContext ctx,RCmbMessage msg,ByteBuf out) throws Exception {
  if (!(msg instanceof ClusterMessage))   return;
  ClusterMessage hdr=(ClusterMessage)msg;
  out.writeBytes(hdr.signature.getBytes());
switch (hdr.type) {
case CLUSTERMSG_TYPE_PING:
case CLUSTERMSG_TYPE_PONG:
case CLUSTERMSG_TYPE_MEET:
    out.writeInt(2256 + hdr.count * 104);
  break;
case CLUSTERMSG_TYPE_FAIL:
out.writeInt(2296);
break;
case CLUSTERMSG_TYPE_PUBLISH:
out.writeInt(2272);
break;
case CLUSTERMSG_TYPE_UPDATE:
out.writeInt(4352);
break;
default :
out.writeInt(2256);
break;
}
out.writeShort(hdr.version);
out.writeShort(hdr.port);
out.writeShort(hdr.type);
out.writeShort(hdr.count);
out.writeLong(hdr.currentEpoch);
out.writeLong(hdr.configEpoch);
out.writeLong(hdr.offset);
out.writeBytes(extract(hdr.name,CLUSTER_NODE_NULL_NAME));
out.writeBytes(hdr.slots);
out.writeBytes(extract(hdr.master,CLUSTER_NODE_NULL_NAME));
out.writeBytes(extract(hdr.ip,CLUSTER_NODE_NULL_IP));
out.writeBytes(hdr.reserved);
out.writeShort(hdr.busPort);
out.writeShort(hdr.flags);
out.writeByte(hdr.state);
out.writeBytes(hdr.messageFlags);
switch (hdr.type) {
case CLUSTERMSG_TYPE_PING:
case CLUSTERMSG_TYPE_PONG:
case CLUSTERMSG_TYPE_MEET:
for (int i=0; i < hdr.count; i++) {
ClusterMessageDataGossip gossip=hdr.data.gossips.get(i);
out.writeBytes(extract(gossip.name,CLUSTER_NODE_NULL_NAME));
out.writeInt((int)(gossip.pingTime / 1000));
out.writeInt((int)(gossip.pongTime / 1000));
out.writeBytes(extract(gossip.ip,CLUSTER_NODE_NULL_IP));
out.writeShort(gossip.port);
out.writeShort(gossip.busPort);
out.writeShort(gossip.flags);
out.writeBytes(gossip.reserved);
}
break;
case CLUSTERMSG_TYPE_FAIL:
out.writeBytes(extract(hdr.data.fail.name,CLUSTER_NODE_NULL_NAME));
break;
case CLUSTERMSG_TYPE_PUBLISH:
out.writeInt(hdr.data.publish.channelLength);
out.writeInt(hdr.data.publish.messageLength);
out.writeBytes(hdr.data.publish.bulkData);
break;
case CLUSTERMSG_TYPE_UPDATE:
out.writeLong(hdr.data.config.configEpoch);
out.writeBytes(extract(hdr.data.config.name,CLUSTER_NODE_NULL_NAME));
out.writeBytes(hdr.data.config.slots);
break;
default :
break;
}
}","@Override protected void encode(ChannelHandlerContext ctx,RCmbMessage msg,ByteBuf out) throws Exception {
  if (!(msg instanceof ClusterMessage))   return;
  ClusterMessage hdr=(ClusterMessage)msg;
  out.writeBytes(hdr.signature.getBytes());
switch (hdr.type) {
case CLUSTERMSG_TYPE_PING:
case CLUSTERMSG_TYPE_PONG:
case CLUSTERMSG_TYPE_MEET:
    out.writeInt(2256 + hdr.count * 104);
  break;
case CLUSTERMSG_TYPE_FAIL:
out.writeInt(2296);
break;
case CLUSTERMSG_TYPE_PUBLISH:
out.writeInt(2272);
break;
case CLUSTERMSG_TYPE_UPDATE:
out.writeInt(4352);
break;
default :
out.writeInt(2256);
break;
}
out.writeShort(hdr.version);
out.writeShort(hdr.port);
out.writeShort(hdr.type);
out.writeShort(hdr.count);
out.writeLong(hdr.currentEpoch);
out.writeLong(hdr.configEpoch);
out.writeLong(hdr.offset);
out.writeBytes(extract(hdr.name,CLUSTER_NODE_NULL_NAME));
out.writeBytes(hdr.slots);
out.writeBytes(extract(hdr.master,CLUSTER_NODE_NULL_NAME));
out.writeBytes(extract(hdr.ip,CLUSTER_NODE_NULL_IP));
out.writeBytes(hdr.reserved);
out.writeShort(hdr.busPort);
out.writeShort(hdr.flags);
out.writeByte(hdr.state);
out.writeBytes(hdr.messageFlags);
switch (hdr.type) {
case CLUSTERMSG_TYPE_PING:
case CLUSTERMSG_TYPE_PONG:
case CLUSTERMSG_TYPE_MEET:
for (int i=0; i < hdr.count; i++) {
ClusterMessageDataGossip gossip=hdr.data.gossips.get(i);
out.writeBytes(extract(gossip.name,CLUSTER_NODE_NULL_NAME));
out.writeInt((int)(gossip.pingTime / 1000L));
out.writeInt((int)(gossip.pongTime / 1000L));
out.writeBytes(extract(gossip.ip,CLUSTER_NODE_NULL_IP));
out.writeShort(gossip.port);
out.writeShort(gossip.busPort);
out.writeShort(gossip.flags);
out.writeBytes(gossip.reserved);
}
break;
case CLUSTERMSG_TYPE_FAIL:
out.writeBytes(extract(hdr.data.fail.name,CLUSTER_NODE_NULL_NAME));
break;
case CLUSTERMSG_TYPE_PUBLISH:
out.writeInt(hdr.data.publish.channelLength);
out.writeInt(hdr.data.publish.messageLength);
out.writeBytes(hdr.data.publish.bulkData);
break;
case CLUSTERMSG_TYPE_UPDATE:
out.writeLong(hdr.data.config.configEpoch);
out.writeBytes(extract(hdr.data.config.name,CLUSTER_NODE_NULL_NAME));
out.writeBytes(hdr.data.config.slots);
break;
default :
break;
}
}",0.9995378927911276
174025,"protected ClusterMessage decode(ByteBuf in){
  in.markReaderIndex();
  try {
    ClusterMessage hdr=new ClusterMessage();
    hdr.signature=(String)in.readCharSequence(4,CHARSET);
    hdr.length=in.readInt();
    if (in.readableBytes() < hdr.length - 8) {
      in.resetReaderIndex();
      return null;
    }
    hdr.version=in.readUnsignedShort();
    hdr.port=in.readUnsignedShort();
    hdr.type=in.readUnsignedShort();
    hdr.count=in.readUnsignedShort();
    hdr.currentEpoch=in.readLong();
    hdr.configEpoch=in.readLong();
    hdr.offset=in.readLong();
    hdr.name=truncate(in,CLUSTER_NODE_NULL_NAME);
    in.readBytes(hdr.slots);
    hdr.master=truncate(in,CLUSTER_NODE_NULL_NAME);
    hdr.ip=truncate(in,CLUSTER_NODE_NULL_IP);
    in.readBytes(hdr.reserved);
    hdr.busPort=in.readUnsignedShort();
    hdr.flags=in.readUnsignedShort();
    hdr.state=in.readByte();
    in.readBytes(hdr.messageFlags);
switch (hdr.type) {
case CLUSTERMSG_TYPE_PING:
case CLUSTERMSG_TYPE_PONG:
case CLUSTERMSG_TYPE_MEET:
      hdr.data=new ClusterMessageData();
    hdr.data.gossips=new ArrayList<>();
  for (int i=0; i < hdr.count; i++) {
    ClusterMessageDataGossip gossip=new ClusterMessageDataGossip();
    gossip.name=truncate(in,CLUSTER_NODE_NULL_NAME);
    gossip.pingTime=in.readInt() * 1000L;
    gossip.pongTime=in.readInt() * 1000L;
    gossip.ip=truncate(in,CLUSTER_NODE_NULL_IP);
    gossip.port=in.readUnsignedShort();
    gossip.busPort=in.readUnsignedShort();
    gossip.flags=in.readUnsignedShort();
    in.readBytes(gossip.reserved);
    hdr.data.gossips.add(gossip);
  }
break;
case CLUSTERMSG_TYPE_FAIL:
hdr.data=new ClusterMessageData();
hdr.data.fail=new ClusterMessageDataFail();
hdr.data.fail.name=truncate(in,CLUSTER_NODE_NULL_NAME);
break;
case CLUSTERMSG_TYPE_PUBLISH:
hdr.data=new ClusterMessageData();
hdr.data.publish=new ClusterMessageDataPublish();
hdr.data.publish.channelLength=in.readInt();
hdr.data.publish.messageLength=in.readInt();
in.readBytes(hdr.data.publish.bulkData);
break;
case CLUSTERMSG_TYPE_UPDATE:
hdr.data=new ClusterMessageData();
hdr.data.config=new ClusterMessageDataUpdate();
hdr.data.config.configEpoch=in.readLong();
hdr.data.config.name=truncate(in,CLUSTER_NODE_NULL_NAME);
in.readBytes(hdr.data.config.slots);
break;
default :
break;
}
return hdr;
}
 catch (Exception e) {
in.resetReaderIndex();
return null;
}
}","protected ClusterMessage decode(ByteBuf in){
  in.markReaderIndex();
  try {
    ClusterMessage hdr=new ClusterMessage();
    hdr.signature=(String)in.readCharSequence(4,CHARSET);
    hdr.length=in.readInt();
    if (in.readableBytes() < hdr.length - 8) {
      in.resetReaderIndex();
      return null;
    }
    hdr.version=in.readUnsignedShort();
    hdr.port=in.readUnsignedShort();
    hdr.type=in.readUnsignedShort();
    hdr.count=in.readUnsignedShort();
    hdr.currentEpoch=in.readLong();
    hdr.configEpoch=in.readLong();
    hdr.offset=in.readLong();
    hdr.name=truncate(in,CLUSTER_NODE_NULL_NAME);
    in.readBytes(hdr.slots);
    hdr.master=truncate(in,CLUSTER_NODE_NULL_NAME);
    hdr.ip=truncate(in,CLUSTER_NODE_NULL_IP);
    in.readBytes(hdr.reserved);
    hdr.busPort=in.readUnsignedShort();
    hdr.flags=in.readUnsignedShort();
    hdr.state=in.readByte();
    in.readBytes(hdr.messageFlags);
switch (hdr.type) {
case CLUSTERMSG_TYPE_PING:
case CLUSTERMSG_TYPE_PONG:
case CLUSTERMSG_TYPE_MEET:
      for (int i=0; i < hdr.count; i++) {
        ClusterMessageDataGossip gossip=new ClusterMessageDataGossip();
        gossip.name=truncate(in,CLUSTER_NODE_NULL_NAME);
        gossip.pingTime=in.readInt() * 1000L;
        gossip.pongTime=in.readInt() * 1000L;
        gossip.ip=truncate(in,CLUSTER_NODE_NULL_IP);
        gossip.port=in.readUnsignedShort();
        gossip.busPort=in.readUnsignedShort();
        gossip.flags=in.readUnsignedShort();
        in.readBytes(gossip.reserved);
        hdr.data.gossips.add(gossip);
      }
    break;
case CLUSTERMSG_TYPE_FAIL:
  hdr.data.fail.name=truncate(in,CLUSTER_NODE_NULL_NAME);
break;
case CLUSTERMSG_TYPE_PUBLISH:
hdr.data.publish.channelLength=in.readInt();
hdr.data.publish.messageLength=in.readInt();
in.readBytes(hdr.data.publish.bulkData);
break;
case CLUSTERMSG_TYPE_UPDATE:
hdr.data.config.configEpoch=in.readLong();
hdr.data.config.name=truncate(in,CLUSTER_NODE_NULL_NAME);
in.readBytes(hdr.data.config.slots);
break;
default :
break;
}
return hdr;
}
 catch (Exception e) {
in.resetReaderIndex();
return null;
}
}",0.8865470852017937
174026,"public ClusterMessage clusterBuildMessageHdr(int type){
  ClusterMessage hdr=new ClusterMessage();
  ClusterNode master=(nodeIsSlave(server.myself) && server.myself.master != null) ? server.myself.master : server.myself;
  hdr.version=CLUSTER_PROTOCOL_VERSION;
  hdr.signature=""String_Node_Str"";
  hdr.type=type;
  hdr.name=server.myself.name;
  hdr.ip=managers.configuration.getClusterAnnounceIp();
  hdr.slots=master.slots;
  if (server.myself.master != null) {
    hdr.master=server.myself.master.name;
  }
  hdr.flags=server.myself.flags;
  hdr.port=managers.configuration.getClusterAnnouncePort();
  hdr.busPort=managers.configuration.getClusterAnnounceBusPort();
  hdr.state=server.cluster.state;
  hdr.currentEpoch=server.cluster.currentEpoch;
  hdr.configEpoch=master.configEpoch;
  hdr.offset=0;
  return hdr;
}","public ClusterMessage clusterBuildMessageHdr(int type){
  ClusterMessage hdr=new ClusterMessage();
  ClusterNode master=(nodeIsSlave(server.myself) && server.myself.master != null) ? server.myself.master : server.myself;
  hdr.version=CLUSTER_PROTOCOL_VERSION;
  hdr.signature=""String_Node_Str"";
  hdr.type=type;
  hdr.name=server.myself.name;
  hdr.ip=managers.configuration.getClusterAnnounceIp();
  hdr.slots=master.slots;
  if (server.myself.master != null) {
    hdr.master=server.myself.master.name;
  }
  hdr.flags=server.myself.flags;
  hdr.port=managers.configuration.getClusterAnnouncePort();
  hdr.busPort=managers.configuration.getClusterAnnounceBusPort();
  hdr.state=server.cluster.state;
  hdr.currentEpoch=server.cluster.currentEpoch;
  hdr.configEpoch=master.configEpoch;
  if (nodeIsSlave(server.myself))   hdr.offset=managers.replications.replicationGetSlaveOffset();
  return hdr;
}",0.9384436701509872
174027,"public void clusterSetGossipEntry(ClusterMessage hdr,ClusterNode n){
  ClusterMessageDataGossip gossip=new ClusterMessageDataGossip();
  gossip.ip=n.ip;
  gossip.name=n.name;
  gossip.port=n.port;
  gossip.flags=n.flags;
  gossip.busPort=n.busPort;
  gossip.reserved=new byte[4];
  gossip.pingTime=n.pingTime;
  gossip.pongTime=n.pongTime;
  hdr.data.gossips.add(gossip);
}","public void clusterSetGossipEntry(ClusterMessage hdr,ClusterNode n){
  ClusterMessageDataGossip gossip=new ClusterMessageDataGossip();
  gossip.ip=n.ip;
  gossip.name=n.name;
  gossip.port=n.port;
  gossip.flags=n.flags;
  gossip.busPort=n.busPort;
  gossip.pingTime=n.pingTime;
  gossip.pongTime=n.pongTime;
  gossip.reserved=new byte[4];
  hdr.data.gossips.add(gossip);
}",0.839142091152815
174028,"public void clusterSendPing(ClusterLink link,int type){
  int actives=server.cluster.nodes.size() - 2;
  int wanted=server.cluster.nodes.size() / 10;
  if (wanted < 3)   wanted=3;
  if (wanted > actives)   wanted=actives;
  int pFailWanted=(int)server.cluster.pFailNodes;
  if (link.node != null && type == CLUSTERMSG_TYPE_PING)   link.node.pingTime=System.currentTimeMillis();
  ClusterMessage hdr=clusterBuildMessageHdr(type);
  hdr.data=new ClusterMessageData();
  int maxIterations=wanted * 3, gossips=0;
  while (actives > 0 && gossips < wanted && maxIterations-- > 0) {
    List<ClusterNode> list=new ArrayList<>(server.cluster.nodes.values());
    ClusterNode node=list.get(ThreadLocalRandom.current().nextInt(list.size()));
    if (Objects.equals(node,server.myself))     continue;
    if ((node.flags & CLUSTER_NODE_PFAIL) != 0)     continue;
    if ((node.flags & (CLUSTER_NODE_HANDSHAKE | CLUSTER_NODE_NOADDR)) != 0 || (node.link == null && node.assignedSlots == 0))     continue;
    if (clusterNodeIsInGossipSection(hdr,gossips,node))     continue;
    clusterSetGossipEntry(hdr,node);
    actives--;
    gossips++;
  }
  if (pFailWanted != 0) {
    List<ClusterNode> nodes=new ArrayList<>(server.cluster.nodes.values());
    for (int i=0; i < nodes.size() && pFailWanted > 0; i++) {
      ClusterNode node=nodes.get(i);
      if (nodeInHandshake(node) || nodeWithoutAddr(node) || !nodePFailed(node))       continue;
      clusterSetGossipEntry(hdr,node);
      actives--;
      gossips++;
      pFailWanted--;
    }
  }
  hdr.count=gossips;
  clusterSendMessage(link,hdr);
}","public void clusterSendPing(ClusterLink link,int type){
  int actives=server.cluster.nodes.size() - 2;
  int wanted=server.cluster.nodes.size() / 10;
  int fWanted=(int)server.cluster.pFailNodes;
  wanted=Math.min(Math.max(wanted,3),actives);
  if (link.node != null && type == CLUSTERMSG_TYPE_PING)   link.node.pingTime=System.currentTimeMillis();
  ClusterMessage hdr=clusterBuildMessageHdr(type);
  int max=wanted * 3, gossips=0;
  while (actives > 0 && gossips < wanted && max-- > 0) {
    List<ClusterNode> list=new ArrayList<>(server.cluster.nodes.values());
    ClusterNode node=list.get(ThreadLocalRandom.current().nextInt(list.size()));
    if (Objects.equals(node,server.myself))     continue;
    if ((node.flags & CLUSTER_NODE_PFAIL) != 0)     continue;
    if ((node.flags & (CLUSTER_NODE_HANDSHAKE | CLUSTER_NODE_NOADDR)) != 0 || (node.link == null && node.assignedSlots == 0))     continue;
    if (clusterNodeIsInGossipSection(hdr,gossips,node))     continue;
    clusterSetGossipEntry(hdr,node);
    actives--;
    gossips++;
  }
  if (fWanted != 0) {
    List<ClusterNode> nodes=new ArrayList<>(server.cluster.nodes.values());
    for (int i=0; i < nodes.size() && fWanted > 0; i++) {
      ClusterNode node=nodes.get(i);
      if (nodeInHandshake(node) || nodeWithoutAddr(node) || !nodePFailed(node))       continue;
      clusterSetGossipEntry(hdr,node);
      actives--;
      gossips++;
      fWanted--;
    }
  }
  hdr.count=gossips;
  clusterSendMessage(link,hdr);
}",0.9155295646523716
174029,"public static void main(String[] args) throws ExecutionException, InterruptedException {
  ClusterManagers managers=new ClusterManagers(ClusterConfiguration.defaultSetting());
  final ThinServer client=new ThinServer(managers);
  final ThinGossip gossip=new ThinGossip(managers);
  client.start();
  gossip.start();
}","public static void main(String[] args) throws ExecutionException, InterruptedException {
  ClusterManagers managers=new ClusterManagers(ClusterConfiguration.defaultSetting().setAsMaster(true));
  final ThinServer client=new ThinServer(managers);
  final ThinGossip gossip=new ThinGossip(managers);
  client.start();
  gossip.start();
}",0.97239263803681
174030,"public void clusterReset(boolean hard){
  if (nodeIsSlave(server.myself)) {
    managers.nodes.clusterSetNodeAsMaster(server.myself);
    managers.replications.replicationUnsetMaster();
  }
  managers.slots.clusterCloseAllSlots();
  for (int i=0; i < CLUSTER_SLOTS; i++)   managers.slots.clusterDelSlot(i);
  List<ClusterNode> nodes=new ArrayList<>(server.cluster.nodes.values());
  nodes.stream().filter(e -> Objects.equals(e,server.myself)).forEach(managers.nodes::clusterDelNode);
  if (!hard)   return;
  server.myself.configEpoch=0;
  server.cluster.currentEpoch=0;
  server.cluster.lastVoteEpoch=0;
  String previous=server.myself.name;
  server.cluster.nodes.remove(previous);
  server.myself.name=getRandomHexChars();
  managers.nodes.clusterAddNode(server.myself);
  logger.info(""String_Node_Str"" + server.myself.name);
}","public void clusterReset(boolean hard){
  if (nodeIsSlave(server.myself)) {
    managers.nodes.clusterSetNodeAsMaster(server.myself);
    managers.replications.replicationUnsetMaster();
  }
  managers.slots.clusterCloseAllSlots();
  for (int i=0; i < CLUSTER_SLOTS; i++)   managers.slots.clusterDelSlot(i);
  List<ClusterNode> nodes=new ArrayList<>(server.cluster.nodes.values());
  nodes.stream().filter(e -> !Objects.equals(e,server.myself)).forEach(managers.nodes::clusterDelNode);
  if (!hard)   return;
  server.myself.configEpoch=0;
  server.cluster.currentEpoch=0;
  server.cluster.lastVoteEpoch=0;
  String previous=server.myself.name;
  server.cluster.nodes.remove(previous);
  server.myself.name=getRandomHexChars();
  managers.nodes.clusterAddNode(server.myself);
  logger.info(""String_Node_Str"" + server.myself.name);
}",0.9993979530403372
174031,"@Override EagerLoadNulableObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity && null != getMyEntityId(),() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  this.$$arez$$_myEntityId.reportObserved();
  return this.$$arezr$$_myEntity;
}","@Override EagerLoadNulableObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity || null == getMyEntityId(),() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  this.$$arez$$_myEntityId.reportObserved();
  return this.$$arezr$$_myEntity;
}",0.9854368932038836
174032,"@DataProvider(name=""String_Node_Str"") public Object[][] successfulCompiles(){
  return new Object[][]{new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",true,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,true,false},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",true,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",true,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false}};
}","@DataProvider(name=""String_Node_Str"") public Object[][] successfulCompiles(){
  return new Object[][]{new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",true,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,true,false},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,true,true},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",true,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",true,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false},new Object[]{""String_Node_Str"",false,false,false}};
}",0.9979232430636318
174033,"@Override EagerLoadNulableObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity && null != getMyEntityId(),() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  return this.$$arezr$$_myEntity;
}","@Override EagerLoadNulableObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity && null != getMyEntityId(),() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  this.$$arez$$_myEntityId.reportObserved();
  return this.$$arezr$$_myEntity;
}",0.9303106633081444
174034,"@Override EagerLoadObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity,() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  return this.$$arezr$$_myEntity;
}","@Override EagerLoadObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity,() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  this.$$arez$$_myEntityId.reportObserved();
  return this.$$arezr$$_myEntity;
}",0.9599287622439892
174035,"@Override ExplicitLoadObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity,() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  return this.$$arezr$$_myEntity;
}","@Override ExplicitLoadObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity,() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  this.$$arez$$_myEntityId.reportObserved();
  return this.$$arezr$$_myEntity;
}",0.9601417183348095
174036,"@Override ObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity,() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  return this.$$arezr$$_myEntity;
}","@Override ObservableReferenceModel.MyEntity getMyEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> null != $$arezr$$_myEntity,() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
  }
  this.$$arez$$_myEntityId.reportObserved();
  return this.$$arezr$$_myEntity;
}",0.9592760180995475
174037,"@Nonnull private MethodSpec buildLinkMethod() throws ArezProcessorException {
  final String methodName=getLinkMethodName();
  final MethodSpec.Builder builder=MethodSpec.methodBuilder(methodName);
  builder.addModifiers(Modifier.PRIVATE);
  GeneratorUtil.generateNotDisposedInvariant(_componentDescriptor,builder,methodName);
  final boolean isNullable=!getIdMethod().getReturnType().getKind().isPrimitive() && null == ProcessorUtil.findAnnotationByType(getIdMethod(),Constants.NONNULL_ANNOTATION_CLASSNAME);
  if (""String_Node_Str"".equals(getLinkType())) {
    builder.addStatement(""String_Node_Str"",getIdMethod().getReturnType(),getIdMethod().getSimpleName());
    if (isNullable) {
      final CodeBlock.Builder nestedBlock=CodeBlock.builder();
      nestedBlock.beginControlFlow(""String_Node_Str"");
      buildLookup(nestedBlock);
      nestedBlock.endControlFlow();
      builder.addCode(nestedBlock.build());
    }
 else {
      buildLookup(builder);
    }
  }
 else {
    final CodeBlock.Builder block=CodeBlock.builder();
    block.beginControlFlow(""String_Node_Str"",getFieldName());
    block.addStatement(""String_Node_Str"",getIdMethod().getReturnType(),getIdMethod().getSimpleName());
    if (isNullable) {
      final CodeBlock.Builder nestedBlock=CodeBlock.builder();
      nestedBlock.beginControlFlow(""String_Node_Str"");
      buildLookup(nestedBlock);
      nestedBlock.endControlFlow();
      block.add(nestedBlock.build());
    }
 else {
      buildLookup(block);
    }
    block.endControlFlow();
    builder.addCode(block.build());
  }
  return builder.build();
}","@Nonnull private MethodSpec buildLinkMethod() throws ArezProcessorException {
  final String methodName=getLinkMethodName();
  final MethodSpec.Builder builder=MethodSpec.methodBuilder(methodName);
  builder.addModifiers(Modifier.PRIVATE);
  GeneratorUtil.generateNotDisposedInvariant(_componentDescriptor,builder,methodName);
  final boolean isNullable=!getIdMethod().getReturnType().getKind().isPrimitive() && null == ProcessorUtil.findAnnotationByType(getIdMethod(),Constants.NONNULL_ANNOTATION_CLASSNAME);
  if (""String_Node_Str"".equals(getLinkType())) {
    builder.addStatement(""String_Node_Str"",getIdMethod().getReturnType(),getIdMethod().getSimpleName());
    if (isNullable) {
      final CodeBlock.Builder nestedBlock=CodeBlock.builder();
      nestedBlock.beginControlFlow(""String_Node_Str"");
      buildLookup(nestedBlock);
      nestedBlock.nextControlFlow(""String_Node_Str"");
      nestedBlock.addStatement(""String_Node_Str"",getFieldName());
      nestedBlock.endControlFlow();
      builder.addCode(nestedBlock.build());
    }
 else {
      buildLookup(builder);
    }
  }
 else {
    final CodeBlock.Builder block=CodeBlock.builder();
    block.beginControlFlow(""String_Node_Str"",getFieldName());
    block.addStatement(""String_Node_Str"",getIdMethod().getReturnType(),getIdMethod().getSimpleName());
    if (isNullable) {
      final CodeBlock.Builder nestedBlock=CodeBlock.builder();
      nestedBlock.beginControlFlow(""String_Node_Str"");
      buildLookup(nestedBlock);
      nestedBlock.endControlFlow();
      block.add(nestedBlock.build());
    }
 else {
      buildLookup(block);
    }
    block.endControlFlow();
    builder.addCode(block.build());
  }
  return builder.build();
}",0.963481436396835
174038,"private void $$arezi$$_link_myEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  final String id=this.getMyEntityId();
  if (null != id) {
    this.$$arezr$$_myEntity=this.$$arezi$$_locator().findById(EagerLoadNulableObservableReferenceModel.MyEntity.class,id);
    if (Arez.shouldCheckApiInvariants()) {
      Guards.apiInvariant(() -> null != $$arezr$$_myEntity,() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
    }
  }
}","private void $$arezi$$_link_myEntity(){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  final String id=this.getMyEntityId();
  if (null != id) {
    this.$$arezr$$_myEntity=this.$$arezi$$_locator().findById(EagerLoadNulableObservableReferenceModel.MyEntity.class,id);
    if (Arez.shouldCheckApiInvariants()) {
      Guards.apiInvariant(() -> null != $$arezr$$_myEntity,() -> ""String_Node_Str"" + $$arezi$$_name() + ""String_Node_Str""+ getMyEntityId());
    }
  }
 else {
    this.$$arezr$$_myEntity=null;
  }
}",0.9668109668109668
174039,"@SuppressWarnings(""String_Node_Str"") @Test public void disallowNullInSetter() throws Throwable {
  final Model model=Model.create(ValueUtil.randomString());
  assertThrows(AssertionError.class,() -> model.setLastName(null));
}","@SuppressWarnings(""String_Node_Str"") @Test public void disallowNullInSetter() throws Throwable {
  final Model model=Model.create(ValueUtil.randomString());
  Arez.context().safeAction(() -> assertThrows(AssertionError.class,() -> model.setLastName(null)));
}",0.931958762886598
174040,"/** 
 * Set the entity that this reference points to.
 * @param entity the associated entity.
 */
@Observable protected void setEntity(@Nullable final T entity){
  if (null != _entry) {
    detachEntry(_entry,false);
  }
  if (null == entity) {
    _entry=null;
  }
 else {
    _entry=createEntityEntry(entity,reference -> detachEntry(reference,false));
  }
}","/** 
 * Set the entity that this reference points to.
 * @param entity the associated entity.
 */
@Observable protected void setEntity(@Nullable final T entity){
  if (null != _entry) {
    detachEntry(_entry,false);
  }
  if (null == entity) {
    _entry=null;
  }
 else {
    _entry=createEntityEntry(entity,reference -> setEntity(null));
  }
}",0.9418439716312056
174041,"@Nullable static PackageElement getPackageElement(@Nonnull final TypeElement element){
  Element enclosingElement=element.getEnclosingElement();
  while (null != enclosingElement) {
    if (enclosingElement instanceof PackageElement) {
      return (PackageElement)enclosingElement;
    }
  }
  return null;
}","@Nullable static PackageElement getPackageElement(@Nonnull final TypeElement element){
  Element enclosingElement=element.getEnclosingElement();
  while (null != enclosingElement) {
    if (enclosingElement instanceof PackageElement) {
      return (PackageElement)enclosingElement;
    }
    enclosingElement=enclosingElement.getEnclosingElement();
  }
  return null;
}",0.910162002945508
174042,"@Override public void doStuff(final long time){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  try {
    $$arezi$$_context().safeAction(Arez.areNamesEnabled() ? $$arezi$$_name() + ""String_Node_Str"" : null,true,() -> super.doStuff(time),time);
  }
 catch (  final RuntimeException|Error $$arez_exception$$) {
    throw $$arez_exception$$;
  }
catch (  final Throwable $$arez_exception$$) {
    throw new IllegalStateException($$arez_exception$$);
  }
}","@Override void doStuff(final long time){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  try {
    $$arezi$$_context().safeAction(Arez.areNamesEnabled() ? $$arezi$$_name() + ""String_Node_Str"" : null,true,() -> super.doStuff(time),time);
  }
 catch (  final RuntimeException|Error $$arez_exception$$) {
    throw $$arez_exception$$;
  }
catch (  final Throwable $$arez_exception$$) {
    throw new IllegalStateException($$arez_exception$$);
  }
}",0.9946524064171124
174043,"@Override public void doStuff(final long time){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  try {
    $$arezi$$_context().safeAction(Arez.areNamesEnabled() ? $$arezi$$_name() + ""String_Node_Str"" : null,true,() -> super.doStuff(time),time);
  }
 catch (  final RuntimeException|Error $$arez_exception$$) {
    throw $$arez_exception$$;
  }
catch (  final Throwable $$arez_exception$$) {
    throw new IllegalStateException($$arez_exception$$);
  }
}","@Override void doStuff(final long time){
  if (Arez.shouldCheckApiInvariants()) {
    Guards.apiInvariant(() -> ComponentState.isActive(this.$$arezi$$_state),() -> ""String_Node_Str"" + ComponentState.describe(this.$$arezi$$_state) + ""String_Node_Str""+ $$arezi$$_name()+ ""String_Node_Str"");
  }
  try {
    $$arezi$$_context().safeAction(Arez.areNamesEnabled() ? $$arezi$$_name() + ""String_Node_Str"" : null,true,() -> super.doStuff(time),time);
  }
 catch (  final RuntimeException|Error $$arez_exception$$) {
    throw $$arez_exception$$;
  }
catch (  final Throwable $$arez_exception$$) {
    throw new IllegalStateException($$arez_exception$$);
  }
}",0.9946524064171124
174044,"@Action public void doStuff(final long time){
}","@Action void doStuff(final long time){
}",0.9195402298850576
174045,"@Action public void doStuff(final long time){
}","@Action void doStuff(final long time){
}",0.9195402298850576
174046,"/** 
 * Completes the tracking by updating the dependencies on the observer to match the observables that were observed during tracking. The _tracker is added or removed as an observer on an observable if the observer is a new dependency or previously was a dependency but no longer is, respectively.
 */
void completeTracking(){
  if (null == _tracker) {
    invariant(() -> null == _observables,() -> ""String_Node_Str"" + getName() + ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  _tracker.invariantDependenciesUnique(""String_Node_Str"");
  invariant(() -> _tracker.getState() != ObserverState.INACTIVE || _tracker.isDisposed(),() -> ""String_Node_Str"" + getName() + ""String_Node_Str""+ ""String_Node_Str"");
  ObserverState newDerivationState=ObserverState.UP_TO_DATE;
  boolean dependenciesChanged=false;
  int currentIndex=0;
  if (null != _observables && !_tracker.isDisposed()) {
    final int size=_observables.size();
    for (int i=0; i < size; i++) {
      final Observable observable=_observables.get(i);
      if (!observable.isInCurrentTracking() && !observable.isDisposed()) {
        observable.putInCurrentTracking();
        if (i != currentIndex) {
          _observables.set(currentIndex,observable);
        }
        currentIndex++;
        if (observable.hasOwner()) {
          final Observer owner=observable.getOwner();
          final ObserverState dependenciesState=owner.getState();
          if (dependenciesState == ObserverState.STALE) {
            newDerivationState=dependenciesState;
          }
        }
      }
    }
  }
  final ArrayList<Observable<?>> dependencies=_tracker.getDependencies();
  for (int i=dependencies.size() - 1; i >= 0; i--) {
    final Observable observable=dependencies.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.removeObserver(_tracker);
      dependenciesChanged=true;
    }
 else {
      observable.removeFromCurrentTracking();
    }
  }
  if (!_tracker.isDisposed() && ObserverState.UP_TO_DATE != newDerivationState) {
    _tracker.setState(newDerivationState);
  }
  if (null != _observables) {
    for (int i=currentIndex - 1; i >= 0; i--) {
      final Observable observable=_observables.get(i);
      if (observable.isInCurrentTracking()) {
        observable.removeFromCurrentTracking();
        observable.addObserver(_tracker);
        dependenciesChanged=true;
        final ObserverState leastStaleObserverState=observable.getLeastStaleObserverState();
        if (leastStaleObserverState == ObserverState.INACTIVE || leastStaleObserverState.ordinal() > newDerivationState.ordinal()) {
          fail(() -> ""String_Node_Str"" + getName() + ""String_Node_Str""+ observable.getName()+ ""String_Node_Str"");
          observable.setLeastStaleObserverState(newDerivationState);
        }
      }
    }
  }
  if (null != _observables) {
    for (int i=_observables.size() - 1; i >= currentIndex; i--) {
      _observables.remove(i);
    }
    if (dependenciesChanged) {
      _tracker.replaceDependencies(_observables);
    }
  }
 else {
    if (dependenciesChanged) {
      _tracker.replaceDependencies(new ArrayList<>());
    }
  }
  if (_disposeTracker) {
    _tracker.setState(ObserverState.INACTIVE);
  }
 else   if (_tracker.isDerivation() && !_tracker.getDerivedValue().hasObservers()) {
    queueForDeactivation(_tracker.getDerivedValue());
  }
  if (BrainCheckConfig.checkInvariants()) {
    if (null != _observables) {
      for (      final Observable observable : _observables) {
        observable.invariantLeastStaleObserverState();
        observable.invariantObserversLinked();
      }
    }
    _tracker.invariantDependenciesUnique(""String_Node_Str"");
    _tracker.invariantDependenciesBackLink(""String_Node_Str"");
    _tracker.invariantDependenciesNotDisposed();
  }
}","/** 
 * Completes the tracking by updating the dependencies on the observer to match the observables that were observed during tracking. The _tracker is added or removed as an observer on an observable if the observer is a new dependency or previously was a dependency but no longer is, respectively.
 */
void completeTracking(){
  if (null == _tracker) {
    invariant(() -> null == _observables,() -> ""String_Node_Str"" + getName() + ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  _tracker.invariantDependenciesUnique(""String_Node_Str"");
  invariant(() -> _tracker.getState() != ObserverState.INACTIVE || _tracker.isDisposed(),() -> ""String_Node_Str"" + getName() + ""String_Node_Str""+ ""String_Node_Str"");
  ObserverState newDerivationState=ObserverState.UP_TO_DATE;
  boolean dependenciesChanged=false;
  int currentIndex=0;
  if (null != _observables && !_tracker.isDisposed()) {
    final int size=_observables.size();
    for (int i=0; i < size; i++) {
      final Observable observable=_observables.get(i);
      if (!observable.isInCurrentTracking() && !observable.isDisposed()) {
        observable.putInCurrentTracking();
        if (i != currentIndex) {
          _observables.set(currentIndex,observable);
        }
        currentIndex++;
        if (observable.hasOwner()) {
          final Observer owner=observable.getOwner();
          final ObserverState dependenciesState=owner.getState();
          if (dependenciesState == ObserverState.STALE) {
            newDerivationState=dependenciesState;
          }
        }
      }
    }
  }
  final ArrayList<Observable<?>> dependencies=_tracker.getDependencies();
  for (int i=dependencies.size() - 1; i >= 0; i--) {
    final Observable observable=dependencies.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.removeObserver(_tracker);
      dependenciesChanged=true;
    }
 else {
      observable.removeFromCurrentTracking();
    }
  }
  if (!_tracker.isDisposed() && ObserverState.UP_TO_DATE != newDerivationState) {
    if (_tracker.getState().ordinal() < newDerivationState.ordinal()) {
      _tracker.setState(newDerivationState,false);
    }
  }
  if (null != _observables) {
    for (int i=currentIndex - 1; i >= 0; i--) {
      final Observable observable=_observables.get(i);
      if (observable.isInCurrentTracking()) {
        observable.removeFromCurrentTracking();
        observable.addObserver(_tracker);
        dependenciesChanged=true;
        final ObserverState leastStaleObserverState=observable.getLeastStaleObserverState();
        if (leastStaleObserverState == ObserverState.INACTIVE || leastStaleObserverState.ordinal() > newDerivationState.ordinal()) {
          fail(() -> ""String_Node_Str"" + getName() + ""String_Node_Str""+ observable.getName()+ ""String_Node_Str"");
          observable.setLeastStaleObserverState(newDerivationState);
        }
      }
    }
  }
  if (null != _observables) {
    for (int i=_observables.size() - 1; i >= currentIndex; i--) {
      _observables.remove(i);
    }
    if (dependenciesChanged) {
      _tracker.replaceDependencies(_observables);
    }
  }
 else {
    if (dependenciesChanged) {
      _tracker.replaceDependencies(new ArrayList<>());
    }
  }
  if (_disposeTracker) {
    _tracker.setState(ObserverState.INACTIVE);
  }
 else   if (_tracker.isDerivation() && !_tracker.getDerivedValue().hasObservers()) {
    queueForDeactivation(_tracker.getDerivedValue());
  }
  if (BrainCheckConfig.checkInvariants()) {
    if (null != _observables) {
      for (      final Observable observable : _observables) {
        observable.invariantLeastStaleObserverState();
        observable.invariantObserversLinked();
      }
    }
    _tracker.invariantDependenciesUnique(""String_Node_Str"");
    _tracker.invariantDependenciesBackLink(""String_Node_Str"");
    _tracker.invariantDependenciesNotDisposed();
  }
}",0.9858823529411764
174047,"private static void enumerateMethods(@Nonnull final TypeElement scope,@Nonnull final Types typeUtils,@Nonnull final TypeElement element,@Nonnull final Map<String,ExecutableElement> methods){
  final TypeMirror superclass=element.getSuperclass();
  if (TypeKind.NONE != superclass.getKind()) {
    enumerateMethods(scope,typeUtils,(TypeElement)((DeclaredType)superclass).asElement(),methods);
  }
  for (  final TypeMirror interfaceType : element.getInterfaces()) {
    final TypeElement interfaceElement=(TypeElement)((DeclaredType)interfaceType).asElement();
    enumerateMethods(scope,typeUtils,interfaceElement,methods);
  }
  for (  final Element member : element.getEnclosedElements()) {
    if (member.getKind() == ElementKind.METHOD) {
      final ExecutableType methodType=(ExecutableType)typeUtils.asMemberOf((DeclaredType)scope.asType(),member);
      methods.put(methodType.toString(),(ExecutableElement)member);
    }
  }
}","private static void enumerateMethods(@Nonnull final TypeElement scope,@Nonnull final Types typeUtils,@Nonnull final TypeElement element,@Nonnull final Map<String,ExecutableElement> methods){
  final TypeMirror superclass=element.getSuperclass();
  if (TypeKind.NONE != superclass.getKind()) {
    enumerateMethods(scope,typeUtils,(TypeElement)((DeclaredType)superclass).asElement(),methods);
  }
  for (  final TypeMirror interfaceType : element.getInterfaces()) {
    final TypeElement interfaceElement=(TypeElement)((DeclaredType)interfaceType).asElement();
    enumerateMethods(scope,typeUtils,interfaceElement,methods);
  }
  for (  final Element member : element.getEnclosedElements()) {
    if (member.getKind() == ElementKind.METHOD) {
      final ExecutableType methodType=(ExecutableType)typeUtils.asMemberOf((DeclaredType)scope.asType(),member);
      methods.put(member.getSimpleName() + methodType.toString(),(ExecutableElement)member);
    }
  }
}",0.9868073878627968
174048,"@DataProvider(name=""String_Node_Str"") public Object[][] successfulCompiles(){
  return new Object[][]{new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",true},new Object[]{""String_Node_Str"",true},new Object[]{""String_Node_Str"",true},new Object[]{""String_Node_Str"",true},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false}};
}","@DataProvider(name=""String_Node_Str"") public Object[][] successfulCompiles(){
  return new Object[][]{new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",true},new Object[]{""String_Node_Str"",true},new Object[]{""String_Node_Str"",true},new Object[]{""String_Node_Str"",true},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false},new Object[]{""String_Node_Str"",false}};
}",0.9904137235116044
174049,"public static void main(final String[] args) throws Throwable {
  final ArezContext context=Arez.context();
  ExampleUtil.logAllErrors(context);
  context.getSpy().addSpyEventHandler(ExamplesSpyUtil::emitEvent);
  final CodeModel codeModel=CodeModel.create(""String_Node_Str"",""String_Node_Str"");
  final Observer observer=context.autorun(""String_Node_Str"",() -> System.out.println(""String_Node_Str"" + codeModel.getQualifiedName()));
  context.action(""String_Node_Str"",true,() -> codeModel.setQualifiedName(""String_Node_Str""));
  context.action(""String_Node_Str"",true,() -> codeModel.setQualifiedName(null));
  context.action(""String_Node_Str"",true,() -> codeModel.setName(""String_Node_Str""));
  observer.dispose();
  context.action(""String_Node_Str"",true,((Disposable)codeModel)::dispose);
}","public static void main(final String[] args) throws Throwable {
  final ArezContext context=Arez.context();
  ExampleUtil.logAllErrors(context);
  context.getSpy().addSpyEventHandler(ExamplesSpyUtil::emitEvent);
  final CodeModel codeModel=CodeModel.create(""String_Node_Str"",""String_Node_Str"");
  final Observer observer=context.autorun(""String_Node_Str"",() -> System.out.println(""String_Node_Str"" + codeModel.getQualifiedName()));
  context.action(""String_Node_Str"",true,() -> codeModel.setQualifiedName(""String_Node_Str""));
  context.action(""String_Node_Str"",true,() -> codeModel.setQualifiedName(null));
  context.action(""String_Node_Str"",true,() -> codeModel.setName(""String_Node_Str""));
  observer.dispose();
  context.action(""String_Node_Str"",true,() -> Disposable.dispose(codeModel));
}",0.9842072015161086
174050,"@BeforeMethod protected void beforeTest() throws Exception {
  final ArezConfig.DynamicProvider provider=getConfigProvider();
  provider.setEnableNames(true);
  provider.setVerboseErrorMessages(true);
  provider.setCheckInvariants(true);
  provider.setPurgeReactionsWhenRunawayDetected(false);
  provider.setEnforceTransactionType(true);
  provider.setEnableSpy(true);
  getProxyLogger().setLogger(new TestLogger());
  Arez.setProvider(null);
}","@BeforeMethod protected void beforeTest() throws Exception {
  final ArezConfig.DynamicProvider provider=getConfigProvider();
  provider.setEnableNames(true);
  provider.setVerboseErrorMessages(true);
  provider.setCheckInvariants(true);
  provider.setPurgeReactionsWhenRunawayDetected(false);
  provider.setEnforceTransactionType(true);
  provider.setEnableSpy(true);
  getProxyLogger().setLogger(null);
  Arez.setProvider(null);
}",0.9794520547945206
174051,"@DataProvider(name=""String_Node_Str"") public Object[][] failedCompiles(){
  return new Object[][]{new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""}};
}","@DataProvider(name=""String_Node_Str"") public Object[][] failedCompiles(){
  return new Object[][]{new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""},new Object[]{""String_Node_Str"",""String_Node_Str""}};
}",0.9953060458129928
174052,"/** 
 * Create a new transaction.
 * @param name    the name of the transaction. Should be non-null if {@link ArezConfig#enableNames()} is true, false otherwise.
 * @param mode    the transaction mode.
 * @param tracker the observer that is tracking transaction if any.
 * @return the new transaction.
 */
Transaction beginTransaction(@Nullable final String name,@Nonnull final TransactionMode mode,@Nullable final Observer tracker){
  if (TransactionMode.READ_WRITE == mode && null != _transaction) {
    Guards.invariant(() -> TransactionMode.READ_WRITE == _transaction.getMode(),() -> String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",name,_transaction.getName(),mode.name()));
  }
  _transaction=new Transaction(this,_transaction,name,mode,tracker);
  _transaction.begin();
  return _transaction;
}","/** 
 * Create a new transaction.
 * @param name    the name of the transaction. Should be non-null if {@link ArezConfig#enableNames()} is true, false otherwise.
 * @param mode    the transaction mode.
 * @param tracker the observer that is tracking transaction if any.
 * @return the new transaction.
 */
Transaction beginTransaction(@Nullable final String name,@Nonnull final TransactionMode mode,@Nullable final Observer tracker){
  if (TransactionMode.READ_WRITE == mode && null != _transaction) {
    Guards.invariant(() -> TransactionMode.READ_WRITE == _transaction.getMode(),() -> String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",name,_transaction.getName(),_transaction.getMode().name()));
  }
  _transaction=new Transaction(this,_transaction,name,mode,tracker);
  _transaction.begin();
  return _transaction;
}",0.9843937575030012
174053,"/** 
 * Completes the tracking by updating the dependencies on the derivation to match the observables that were observed during tracking.
 */
final void completeTracking(){
  if (null == _tracker) {
    Guards.invariant(() -> null == _observables,() -> ""String_Node_Str"");
    return;
  }
  _tracker.invariantDependenciesUnique(""String_Node_Str"");
  Guards.invariant(() -> _tracker.getState() != ObserverState.NOT_TRACKING,() -> ""String_Node_Str"");
  ObserverState newDerivationState=ObserverState.UP_TO_DATE;
  if (null == _observables) {
    _tracker.setState(newDerivationState);
    _tracker.replaceDependencies(new ArrayList<>());
    return;
  }
  boolean dependenciesChanged=false;
  final int size=_observables.size();
  int currentIndex=0;
  for (int i=0; i < size; i++) {
    final Observable observable=_observables.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.putInCurrentTracking();
      if (i != currentIndex) {
        _observables.set(currentIndex,observable);
      }
      currentIndex++;
      final Observer observer=observable.getObserver();
      if (null != observer) {
        final ObserverState dependenciesState=observer.getState();
        if (dependenciesState.ordinal() < newDerivationState.ordinal()) {
          newDerivationState=dependenciesState;
        }
      }
    }
  }
  final ArrayList<Observable> dependencies=_tracker.getDependencies();
  for (int i=dependencies.size() - 1; i >= 0; i--) {
    final Observable observable=dependencies.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.removeObserver(_tracker);
      dependenciesChanged=true;
    }
 else {
      observable.removeFromCurrentTracking();
    }
  }
  for (int i=currentIndex - 1; i >= 0; i--) {
    final Observable observable=_observables.get(i);
    if (observable.isInCurrentTracking()) {
      observable.removeFromCurrentTracking();
      observable.addObserver(_tracker);
      dependenciesChanged=true;
    }
  }
  if (ObserverState.UP_TO_DATE != newDerivationState) {
    _tracker.setState(newDerivationState);
  }
  for (int i=_observables.size() - 1; i >= currentIndex; i--) {
    _observables.remove(i);
  }
  if (dependenciesChanged) {
    _tracker.replaceDependencies(_observables);
  }
}","/** 
 * Completes the tracking by updating the dependencies on the derivation to match the observables that were observed during tracking.
 */
final void completeTracking(){
  if (null == _tracker) {
    Guards.invariant(() -> null == _observables,() -> ""String_Node_Str"");
    return;
  }
  _tracker.invariantDependenciesUnique(""String_Node_Str"");
  Guards.invariant(() -> _tracker.getState() != ObserverState.NOT_TRACKING,() -> ""String_Node_Str"");
  ObserverState newDerivationState=ObserverState.UP_TO_DATE;
  if (null == _observables) {
    _tracker.setState(newDerivationState);
    _tracker.replaceDependencies(new ArrayList<>());
    return;
  }
  boolean dependenciesChanged=false;
  final int size=_observables.size();
  int currentIndex=0;
  for (int i=0; i < size; i++) {
    final Observable observable=_observables.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.putInCurrentTracking();
      if (i != currentIndex) {
        _observables.set(currentIndex,observable);
      }
      currentIndex++;
      final Observer observer=observable.getObserver();
      if (null != observer) {
        final ObserverState dependenciesState=observer.getState();
        if (dependenciesState.ordinal() > newDerivationState.ordinal()) {
          newDerivationState=dependenciesState;
        }
      }
    }
  }
  final ArrayList<Observable> dependencies=_tracker.getDependencies();
  for (int i=dependencies.size() - 1; i >= 0; i--) {
    final Observable observable=dependencies.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.removeObserver(_tracker);
      dependenciesChanged=true;
    }
 else {
      observable.removeFromCurrentTracking();
    }
  }
  for (int i=currentIndex - 1; i >= 0; i--) {
    final Observable observable=_observables.get(i);
    if (observable.isInCurrentTracking()) {
      observable.removeFromCurrentTracking();
      observable.addObserver(_tracker);
      dependenciesChanged=true;
    }
  }
  if (ObserverState.UP_TO_DATE != newDerivationState) {
    _tracker.setState(newDerivationState);
  }
  for (int i=_observables.size() - 1; i >= currentIndex; i--) {
    _observables.remove(i);
  }
  if (dependenciesChanged) {
    _tracker.replaceDependencies(_observables);
  }
}",0.9995567375886524
174054,"/** 
 * Completes the tracking by updating the dependencies on the derivation to match the observables that were observed during tracking.
 */
private void completeTracking(){
  if (null == _tracker) {
    return;
  }
  _tracker.invariantDependenciesUnique(""String_Node_Str"");
  Guards.invariant(() -> _tracker.getState() != ObserverState.NOT_TRACKING,() -> ""String_Node_Str"");
  ObserverState newDerivationState=ObserverState.UP_TO_DATE;
  if (null == _observables) {
    return;
  }
  final int size=_observables.size();
  int currentIndex=0;
  for (int i=0; i < size; i++) {
    final Observable observable=_observables.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.putInCurrentTracking();
      if (i != currentIndex) {
        _observables.set(currentIndex,observable);
      }
      currentIndex++;
      final Observer observer=observable.getObserver();
      if (null != observer) {
        final ObserverState dependenciesState=observer.getState();
        if (dependenciesState.ordinal() < newDerivationState.ordinal()) {
          newDerivationState=dependenciesState;
        }
      }
    }
  }
  final ArrayList<Observable> dependencies=_tracker.getDependencies();
  for (int i=dependencies.size() - 1; i >= 0; i--) {
    final Observable observable=dependencies.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.removeObserver(_tracker);
    }
  }
  for (int i=currentIndex - 1; i >= 0; i--) {
    final Observable observable=_observables.get(i);
    if (observable.isInCurrentTracking()) {
      observable.removeFromCurrentTracking();
      observable.addObserver(_tracker);
    }
  }
  if (ObserverState.UP_TO_DATE != newDerivationState) {
    _tracker.setState(newDerivationState);
  }
  for (int i=_observables.size() - 1; i > currentIndex; i--) {
    _observables.remove(i);
  }
  _tracker.replaceDependencies(_observables);
}","/** 
 * Completes the tracking by updating the dependencies on the derivation to match the observables that were observed during tracking.
 */
private void completeTracking(){
  if (null == _tracker) {
    return;
  }
  _tracker.invariantDependenciesUnique(""String_Node_Str"");
  Guards.invariant(() -> _tracker.getState() != ObserverState.NOT_TRACKING,() -> ""String_Node_Str"");
  ObserverState newDerivationState=ObserverState.UP_TO_DATE;
  if (null == _observables) {
    return;
  }
  final int size=_observables.size();
  int currentIndex=0;
  for (int i=0; i < size; i++) {
    final Observable observable=_observables.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.putInCurrentTracking();
      if (i != currentIndex) {
        _observables.set(currentIndex,observable);
      }
      currentIndex++;
      final Observer observer=observable.getObserver();
      if (null != observer) {
        final ObserverState dependenciesState=observer.getState();
        if (dependenciesState.ordinal() < newDerivationState.ordinal()) {
          newDerivationState=dependenciesState;
        }
      }
    }
  }
  final ArrayList<Observable> dependencies=_tracker.getDependencies();
  for (int i=dependencies.size() - 1; i >= 0; i--) {
    final Observable observable=dependencies.get(i);
    if (!observable.isInCurrentTracking()) {
      observable.removeObserver(_tracker);
    }
  }
  for (int i=currentIndex - 1; i >= 0; i--) {
    final Observable observable=_observables.get(i);
    if (observable.isInCurrentTracking()) {
      observable.removeFromCurrentTracking();
      observable.addObserver(_tracker);
    }
  }
  if (ObserverState.UP_TO_DATE != newDerivationState) {
    _tracker.setState(newDerivationState);
  }
  for (int i=_observables.size() - 1; i >= currentIndex; i--) {
    _observables.remove(i);
  }
  _tracker.replaceDependencies(_observables);
}",0.999735659529474
174055,"void sendStats(JDA jda){
  JSONObject body;
  OkHttpClient client=((JDAImpl)jda).getHttpClientBuilder().build();
  body=new JSONObject().put(""String_Node_Str"",shardManager.getGuildCache().size());
  if (!(jda.getShardInfo() == null)) {
    body.put(""String_Node_Str"",jda.getShardInfo().getShardId()).put(""String_Node_Str"",jda.getShardInfo().getShardTotal());
  }
  if (!(config.getDBotsListToken().isEmpty())) {
    Request.Builder builder=new Request.Builder().post(RequestBody.create(Requester.MEDIA_TYPE_JSON,body.toString())).url(""String_Node_Str"" + jda.getSelfUser().getId() + ""String_Node_Str"").header(""String_Node_Str"",config.getDBotsListToken()).header(""String_Node_Str"",""String_Node_Str"");
    client.newCall(builder.build()).enqueue(new Callback(){
      @ParametersAreNonnullByDefault @Override public void onResponse(      Call call,      Response response){
        Endless.LOG.info(""String_Node_Str"");
        response.close();
      }
      @ParametersAreNonnullByDefault @Override public void onFailure(      Call call,      IOException e){
        Endless.LOG.error(""String_Node_Str"",e);
      }
    }
);
  }
  if (!(config.getDBotsToken().isEmpty())) {
    Request.Builder builder=new Request.Builder().post(RequestBody.create(Requester.MEDIA_TYPE_JSON,body.toString())).url(""String_Node_Str"" + jda.getSelfUser().getId() + ""String_Node_Str"").header(""String_Node_Str"",config.getDBotsToken()).header(""String_Node_Str"",""String_Node_Str"");
    client.newCall(builder.build()).enqueue(new Callback(){
      @ParametersAreNonnullByDefault @Override public void onResponse(      Call call,      Response response){
        Endless.LOG.info(""String_Node_Str"");
        response.close();
      }
      @ParametersAreNonnullByDefault @Override public void onFailure(      Call call,      IOException e){
        Endless.LOG.error(""String_Node_Str"",e);
      }
    }
);
  }
}","void sendStats(JDA jda){
  JSONObject body;
  OkHttpClient client=((JDAImpl)jda).getHttpClient();
  body=new JSONObject().put(""String_Node_Str"",shardManager.getGuildCache().size());
  if (!(jda.getShardInfo() == null)) {
    body.put(""String_Node_Str"",jda.getShardInfo().getShardId()).put(""String_Node_Str"",jda.getShardInfo().getShardTotal());
  }
  if (!(config.getDBotsListToken().isEmpty())) {
    Request.Builder builder=new Request.Builder().post(RequestBody.create(Requester.MEDIA_TYPE_JSON,body.toString())).url(""String_Node_Str"" + jda.getSelfUser().getId() + ""String_Node_Str"").header(""String_Node_Str"",config.getDBotsListToken()).header(""String_Node_Str"",""String_Node_Str"");
    client.newCall(builder.build()).enqueue(new Callback(){
      @ParametersAreNonnullByDefault @Override public void onResponse(      Call call,      Response response){
        Endless.LOG.info(""String_Node_Str"");
        response.close();
      }
      @ParametersAreNonnullByDefault @Override public void onFailure(      Call call,      IOException e){
        Endless.LOG.error(""String_Node_Str"",e);
      }
    }
);
  }
  if (!(config.getDBotsToken().isEmpty())) {
    Request.Builder builder=new Request.Builder().post(RequestBody.create(Requester.MEDIA_TYPE_JSON,body.toString())).url(""String_Node_Str"" + jda.getSelfUser().getId() + ""String_Node_Str"").header(""String_Node_Str"",config.getDBotsToken()).header(""String_Node_Str"",""String_Node_Str"");
    client.newCall(builder.build()).enqueue(new Callback(){
      @ParametersAreNonnullByDefault @Override public void onResponse(      Call call,      Response response){
        Endless.LOG.info(""String_Node_Str"");
        response.close();
      }
      @ParametersAreNonnullByDefault @Override public void onFailure(      Call call,      IOException e){
        Endless.LOG.error(""String_Node_Str"",e);
      }
    }
);
  }
}",0.995998933048813
174056,"public Room getRoom(long id){
  try {
    PreparedStatement statement=connection.prepareStatement(""String_Node_Str"",ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.setLong(1,id);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery()){
      if (results.next())       return bot.endlessBuilder.entityBuilder.createRoom(results);
 else       return null;
    }
   }
 catch (  SQLException e) {
    LOG.error(""String_Node_Str"",e);
    return null;
  }
}","public Room getRoom(long id){
  try {
    PreparedStatement statement=connection.prepareStatement(""String_Node_Str"",ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.setLong(1,id);
    statement.setLong(2,id);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery()){
      if (results.next())       return bot.endlessBuilder.entityBuilder.createRoom(results);
 else       return null;
    }
   }
 catch (  SQLException e) {
    LOG.error(""String_Node_Str"",e);
    return null;
  }
}",0.9723546234509056
174057,"public void addMessage(Message msg,int amount){
  try {
    PreparedStatement statement=connection.prepareStatement(""String_Node_Str"",ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery()){
      results.moveToInsertRow();
      results.updateLong(""String_Node_Str"",msg.getIdLong());
      results.updateLong(""String_Node_Str"",msg.getTextChannel().getIdLong());
      results.updateLong(""String_Node_Str"",msg.getGuild().getIdLong());
      results.updateInt(""String_Node_Str"",amount);
      results.insertRow();
    }
   }
 catch (  SQLException e) {
    LOG.error(""String_Node_Str"",msg.getIdLong(),msg.getTextChannel().getIdLong(),e);
  }
}","public void addMessage(Message msg,int amount){
  try {
    PreparedStatement statement=connection.prepareStatement(""String_Node_Str"",ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery()){
      if (!(results.next())) {
        results.moveToInsertRow();
        results.updateLong(""String_Node_Str"",msg.getIdLong());
        results.updateLong(""String_Node_Str"",msg.getTextChannel().getIdLong());
        results.updateLong(""String_Node_Str"",msg.getGuild().getIdLong());
        results.updateInt(""String_Node_Str"",amount);
        results.insertRow();
      }
    }
   }
 catch (  SQLException e) {
    LOG.error(""String_Node_Str"",msg.getIdLong(),msg.getTextChannel().getIdLong(),e);
  }
}",0.9664694280078896
174058,"@Override protected void executeCommand(CommandEvent event){
  Channel channel=ArgsUtils.findChannel(event,event.getArgs());
  Guild guild=event.getGuild();
  if (channel == null)   return;
  EmbedBuilder eb=new EmbedBuilder();
  MessageBuilder mb=new MessageBuilder();
  StringBuilder sb=new StringBuilder();
  int position;
  if (channel instanceof TextChannel)   position=guild.getTextChannels().indexOf(channel);
 else   if (channel instanceof VoiceChannel)   position=guild.getVoiceChannels().indexOf(channel);
 else   position=guild.getCategories().indexOf(channel);
  sb.append(Const.LINE_START).append(""String_Node_Str"").append(channel.getId()).append(""String_Node_Str"");
  sb.append(Const.LINE_START).append(""String_Node_Str"").append(position).append(""String_Node_Str"");
  sb.append(Const.LINE_START).append(""String_Node_Str"").append(channel.getCreationTime().format(DateTimeFormatter.RFC_1123_DATE_TIME)).append(""String_Node_Str"");
  sb.append(Const.LINE_START).append(""String_Node_Str"").append(channel.getMembers().size());
  if (channel instanceof VoiceChannel) {
    sb.append(""String_Node_Str"").append(((VoiceChannel)channel).getUserLimit() == 0 ? ""String_Node_Str"" : ((VoiceChannel)channel).getUserLimit()).append(""String_Node_Str"");
    sb.append(Const.LINE_START).append(""String_Node_Str"").append(((VoiceChannel)channel).getBitrate()).append(""String_Node_Str"");
  }
 else   sb.append(""String_Node_Str"");
  if (channel instanceof TextChannel && (!(((TextChannel)channel).getTopic() == null) || !(((TextChannel)channel).getTopic().isEmpty())))   eb.addField(""String_Node_Str"",((TextChannel)channel).getTopic(),false);
  if (channel instanceof net.dv8tion.jda.core.entities.Category) {
    net.dv8tion.jda.core.entities.Category category=(net.dv8tion.jda.core.entities.Category)channel;
    if (!(category.getTextChannels().isEmpty()))     eb.addField(""String_Node_Str"",category.getTextChannels().stream().map(IMentionable::getAsMention).collect(Collectors.joining(""String_Node_Str"")),false);
    if (!(category.getTextChannels().isEmpty()))     eb.addField(""String_Node_Str"",category.getVoiceChannels().stream().map(Channel::getName).collect(Collectors.joining(""String_Node_Str"")),false);
  }
  String name=channel instanceof TextChannel ? ((TextChannel)channel).getAsMention() : channel.getName();
  String title=""String_Node_Str"" + name + ""String_Node_Str"";
  eb.setColor(event.getSelfMember().getColor()).setDescription(sb.toString());
  event.reply(mb.setContent(title).setEmbed(eb.build()).build());
}","@Override protected void executeCommand(CommandEvent event){
  Channel channel;
  if (event.getArgs().isEmpty())   channel=event.getTextChannel();
 else   channel=ArgsUtils.findChannel(event,event.getArgs());
  Guild guild=event.getGuild();
  if (channel == null)   return;
  EmbedBuilder eb=new EmbedBuilder();
  MessageBuilder mb=new MessageBuilder();
  StringBuilder sb=new StringBuilder();
  int position;
  if (channel instanceof TextChannel)   position=guild.getTextChannels().indexOf(channel);
 else   if (channel instanceof VoiceChannel)   position=guild.getVoiceChannels().indexOf(channel);
 else   position=guild.getCategories().indexOf(channel);
  sb.append(Const.LINE_START).append(""String_Node_Str"").append(channel.getId()).append(""String_Node_Str"");
  sb.append(Const.LINE_START).append(""String_Node_Str"").append(position).append(""String_Node_Str"");
  sb.append(Const.LINE_START).append(""String_Node_Str"").append(channel.getCreationTime().format(DateTimeFormatter.RFC_1123_DATE_TIME)).append(""String_Node_Str"");
  sb.append(Const.LINE_START).append(""String_Node_Str"").append(channel.getMembers().size());
  if (channel instanceof VoiceChannel) {
    VoiceChannel vc=(VoiceChannel)channel;
    sb.append(""String_Node_Str"").append(vc.getUserLimit() == 0 ? ""String_Node_Str"" : vc.getUserLimit()).append(""String_Node_Str"");
    sb.append(Const.LINE_START).append(""String_Node_Str"").append(vc.getBitrate()).append(""String_Node_Str"");
  }
 else   sb.append(""String_Node_Str"");
  if (channel instanceof TextChannel) {
    TextChannel tc=(TextChannel)channel;
    if (!(tc.getTopic() == null || tc.getTopic().isEmpty()))     eb.addField(""String_Node_Str"",tc.getTopic(),false);
  }
 else   if (channel instanceof net.dv8tion.jda.core.entities.Category) {
    net.dv8tion.jda.core.entities.Category category=(net.dv8tion.jda.core.entities.Category)channel;
    if (!(category.getTextChannels().isEmpty()))     eb.addField(""String_Node_Str"",category.getTextChannels().stream().map(IMentionable::getAsMention).collect(Collectors.joining(""String_Node_Str"")),false);
    if (!(category.getVoiceChannels().isEmpty()))     eb.addField(""String_Node_Str"",category.getVoiceChannels().stream().map(Channel::getName).collect(Collectors.joining(""String_Node_Str"")),false);
  }
  String name=channel instanceof TextChannel ? ((TextChannel)channel).getAsMention() : channel.getName();
  String title=""String_Node_Str"" + name + ""String_Node_Str"";
  eb.setColor(event.getSelfMember().getColor()).setDescription(sb.toString());
  event.reply(mb.setContent(title).setEmbed(eb.build()).build());
}",0.9308250048990788
174059,"public static void checkAddReaction(GuildMessageReactionAddEvent event){
  if (!(Bot.getInstance().dataEnabled))   return;
  thread.submit(() -> {
    Guild guild=event.getGuild();
    if (!(event.getChannel().getTopic() == null) && event.getChannel().getTopic().toLowerCase().contains(""String_Node_Str""))     return;
    if (!(isConfigured(guild)))     return;
    TextChannel starboard=GuildUtils.getStarboardChannel(event.getGuild());
    Message starredMsg=getMessage(event.getMessageIdLong(),event.getChannel());
    if (starredMsg == null)     return;
    String emote=Bot.getInstance().endless.getGuildSettings(guild).getStarboardEmote();
    MessageReaction.ReactionEmote re=event.getReactionEmote();
    if (isSameAuthor(starredMsg.getAuthor(),event.getUser()) && (re.isEmote() ? re.getEmote().getId().equals(emote) : re.getName().equals(emote)))     return;
    if (!(amountPassed(starredMsg)))     return;
    if (!(starboard.canTalk())) {
      FinderUtil.getDefaultChannel(guild).sendMessage(""String_Node_Str"").queue(null,e -> guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(""String_Node_Str"").queue(null,null)));
      return;
    }
    if (event.getChannel().getIdLong() == starboard.getIdLong()) {
      boolean isUnicode=false;
      String content=starredMsg.getContentRaw();
      String unicode;
      Pattern REGEX;
      if (starredMsg.getEmotes().isEmpty()) {
        isUnicode=true;
        REGEX=EMOJI_PATTERN;
        unicode=getUnicode(emote);
        content=content.replace(emote,unicode);
      }
 else       REGEX=EMOTE_PATTERN;
      Matcher m=REGEX.matcher(content);
      if (m.matches() && starredMsg.getAuthor().getIdLong() == event.getJDA().getSelfUser().getIdLong()) {
        String channelId;
        String msgId;
        if (isUnicode) {
          channelId=m.group(3);
          msgId=m.group(4);
        }
 else {
          channelId=m.group(4);
          msgId=m.group(5);
        }
        TextChannel originalTc=guild.getTextChannelById(channelId);
        if (originalTc == null || !(ChecksUtil.hasPermission(guild.getSelfMember(),originalTc,Permission.MESSAGE_HISTORY)))         return;
        Message originalMsg=originalTc.getMessageById(msgId).complete();
        MessageReaction reaction=originalMsg.getReactions().stream().filter(r -> {
          MessageReaction.ReactionEmote reE=r.getReactionEmote();
          return (reE.isEmote() ? reE.getId().equals(emote) : reE.getName().equals(emote));
        }
).findFirst().orElse(null);
        if (reaction == null || reaction.getUsers().complete().contains(event.getUser()))         return;
        if (isSameAuthor(originalMsg.getAuthor(),event.getUser()) && (re.isEmote() ? re.getId().equals(emote) : re.getName().equals(emote)))         return;
        int count=getStarCount(originalMsg) + getStarCount(starredMsg);
        sdm.updateCount(originalMsg.getIdLong(),count);
        updateCount(starredMsg,sdm.getStarboardMessage(originalMsg.getIdLong()).getStarboardMessageIdLong(),count);
      }
 else       addMessage(starredMsg,starboard);
    }
 else {
      if (existsOnStarboard(starredMsg.getIdLong())) {
        sdm.updateCount(starredMsg.getIdLong(),getStarCount(starredMsg));
        updateCount(starredMsg,sdm.getStarboardMessage(starredMsg.getIdLong()).getStarboardMessageIdLong(),getStarCount(starredMsg));
      }
 else       addMessage(starredMsg,starboard);
    }
  }
);
}","public static void checkAddReaction(GuildMessageReactionAddEvent event){
  if (!(Bot.getInstance().dataEnabled))   return;
  thread.submit(() -> {
    Guild guild=event.getGuild();
    if (!(event.getChannel().getTopic() == null) && event.getChannel().getTopic().toLowerCase().contains(""String_Node_Str""))     return;
    if (!(isConfigured(guild)))     return;
    TextChannel starboard=GuildUtils.getStarboardChannel(event.getGuild());
    Message starredMsg=getMessage(event.getMessageIdLong(),event.getChannel());
    if (starredMsg == null)     return;
    String emote=Bot.getInstance().endless.getGuildSettings(guild).getStarboardEmote();
    MessageReaction.ReactionEmote re=event.getReactionEmote();
    if (isSameAuthor(starredMsg.getAuthor(),event.getUser()) && (re.isEmote() ? re.getEmote().getId().equals(emote) : re.getName().equals(emote)))     return;
    if (!(amountPassed(starredMsg)))     return;
    if (!(starboard.canTalk())) {
      FinderUtil.getDefaultChannel(guild).sendMessage(""String_Node_Str"").queue(null,e -> guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(""String_Node_Str"").queue(null,null)));
      return;
    }
    if (event.getChannel().getIdLong() == starboard.getIdLong()) {
      boolean isUnicode=false;
      String content=starredMsg.getContentRaw();
      String unicode;
      Pattern REGEX;
      if (starredMsg.getEmotes().isEmpty()) {
        isUnicode=true;
        REGEX=EMOJI_PATTERN;
        unicode=getUnicode(emote);
        content=content.replace(emote,unicode);
      }
 else       REGEX=EMOTE_PATTERN;
      Matcher m=REGEX.matcher(content);
      if (m.matches() && starredMsg.getAuthor().getIdLong() == event.getJDA().getSelfUser().getIdLong()) {
        String channelId;
        String msgId;
        if (isUnicode) {
          channelId=m.group(3);
          msgId=m.group(4);
        }
 else {
          channelId=m.group(4);
          msgId=m.group(5);
        }
        TextChannel originalTc=guild.getTextChannelById(channelId);
        if (originalTc == null || !(ChecksUtil.hasPermission(guild.getSelfMember(),originalTc,Permission.MESSAGE_HISTORY)))         return;
        Message originalMsg=originalTc.getMessageById(msgId).complete();
        MessageReaction reaction=originalMsg.getReactions().stream().filter(r -> {
          MessageReaction.ReactionEmote reE=r.getReactionEmote();
          return (reE.isEmote() ? reE.getId().equals(emote) : reE.getName().equals(emote));
        }
).findFirst().orElse(null);
        if (reaction == null || reaction.getUsers().complete().contains(event.getUser()))         return;
        if (isSameAuthor(originalMsg.getAuthor(),event.getUser()) && (re.isEmote() ? re.getId().equals(emote) : re.getName().equals(emote)))         return;
        int count=getStarCount(originalMsg) + getStarCount(starredMsg);
        sdm.updateCount(originalMsg.getIdLong(),count);
        updateCount(starredMsg,sdm.getStarboardMessage(originalMsg.getIdLong()).getStarboardMessageIdLong(),count);
      }
 else {
        if (existsOnStarboard(starredMsg.getIdLong())) {
          sdm.updateCount(starredMsg.getIdLong(),getStarCount(starredMsg));
          updateCount(starredMsg,sdm.getStarboardMessage(starredMsg.getIdLong()).getStarboardMessageIdLong(),getStarCount(starredMsg));
        }
 else         addMessage(starredMsg,starboard);
      }
    }
 else {
      if (existsOnStarboard(starredMsg.getIdLong())) {
        sdm.updateCount(starredMsg.getIdLong(),getStarCount(starredMsg));
        updateCount(starredMsg,sdm.getStarboardMessage(starredMsg.getIdLong()).getStarboardMessageIdLong(),getStarCount(starredMsg));
      }
 else       addMessage(starredMsg,starboard);
    }
  }
);
}",0.9496846531184304
174060,"@Override public void execute(CommandEvent event){
  boolean hasPerms=false;
  CommandClient client=event.getClient();
  Guild guild=event.getGuild();
  Member member=event.getMember();
  Member selfMember=event.getSelfMember();
  TextChannel tc=event.getTextChannel();
  User author=event.getAuthor();
  if (ownerCommand && !(event.isOwner())) {
    Endless.LOG.warn(author.getName() + ""String_Node_Str"" + author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str"");
    return;
  }
  if (needsArguments && event.getArgs().isEmpty()) {
    event.getClient().applyCooldown(getCooldownKey(event),0);
    if (needsArgumentsMessage == null)     event.replyError(""String_Node_Str"" + ""String_Node_Str"" + client.getPrefix() + (parent == null ? ""String_Node_Str"" : parent.getName() + ""String_Node_Str"")+ this.name+ ""String_Node_Str"");
 else     event.replyWarning(needsArgumentsMessage);
    return;
  }
  if (event.isFromType(ChannelType.TEXT)) {
    for (    Permission p : botPerms) {
      if (!(ChecksUtil.hasPermission(selfMember,tc,p))) {
        event.getClient().applyCooldown(getCooldownKey(event),0);
        event.replyError(String.format(""String_Node_Str"",p.getName()));
        return;
      }
      break;
    }
    if (event.isOwner()) {
      executeCommand(event);
      return;
    }
    if (Bot.getInstance().dataEnabled) {
      if (this.category == Categories.MODERATION) {
        if (member.getRoles().contains(GuildUtils.getAdminRole(guild)) || member.getRoles().contains(GuildUtils.getModRole(guild)))         hasPerms=true;
      }
 else       if (member.getRoles().contains(GuildUtils.getAdminRole(guild)))       hasPerms=true;
    }
    if (!(hasPerms)) {
      for (      Permission p : userPerms) {
        if (!(ChecksUtil.hasPermission(member,tc,p))) {
          event.getClient().applyCooldown(getCooldownKey(event),0);
          event.replyError(String.format(""String_Node_Str"",p.getName()));
          return;
        }
        break;
      }
    }
  }
  executeCommand(event);
}","@Override public void execute(CommandEvent event){
  boolean hasPerms=false;
  CommandClient client=event.getClient();
  Guild guild=event.getGuild();
  Member member=event.getMember();
  Member selfMember=event.getSelfMember();
  TextChannel tc=event.getTextChannel();
  User author=event.getAuthor();
  if (ownerCommand && !(event.isOwner())) {
    Endless.LOG.warn(author.getName() + ""String_Node_Str"" + author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str"");
    return;
  }
  if (event.isFromType(ChannelType.TEXT)) {
    for (    Permission p : botPerms) {
      if (!(ChecksUtil.hasPermission(selfMember,tc,p))) {
        event.getClient().applyCooldown(getCooldownKey(event),0);
        event.replyError(String.format(""String_Node_Str"",p.getName()));
        return;
      }
      break;
    }
    if (event.isOwner())     hasPerms=true;
    if (Bot.getInstance().dataEnabled) {
      if (this.category == Categories.MODERATION) {
        if (member.getRoles().contains(GuildUtils.getAdminRole(guild)) || member.getRoles().contains(GuildUtils.getModRole(guild)))         hasPerms=true;
      }
 else       if (member.getRoles().contains(GuildUtils.getAdminRole(guild)))       hasPerms=true;
    }
    if (!(hasPerms)) {
      for (      Permission p : userPerms) {
        if (!(ChecksUtil.hasPermission(member,tc,p))) {
          event.getClient().applyCooldown(getCooldownKey(event),0);
          event.replyError(String.format(""String_Node_Str"",p.getName()));
          return;
        }
        break;
      }
    }
  }
  if (needsArguments && event.getArgs().isEmpty()) {
    event.getClient().applyCooldown(getCooldownKey(event),0);
    if (needsArgumentsMessage == null)     event.replyError(""String_Node_Str"" + ""String_Node_Str"" + client.getPrefix() + (parent == null ? ""String_Node_Str"" : parent.getName() + ""String_Node_Str"")+ this.name+ ""String_Node_Str"");
 else     event.replyWarning(needsArgumentsMessage);
    return;
  }
  executeCommand(event);
}",0.7774465971187282
174061,"CreateCmd(){
  this.name=""String_Node_Str"";
  this.aliases=new String[]{""String_Node_Str""};
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.botPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.userPermissions=new Permission[]{Permission.MANAGE_EMOTES};
  this.parent=EmoteCmd.this;
}","CreateCmd(){
  this.name=""String_Node_Str"";
  this.aliases=new String[]{""String_Node_Str""};
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.botPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.userPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.parent=EmoteCmd.this;
}",0.9904153354632588
174062,"RemoveCmd(){
  this.name=""String_Node_Str"";
  this.aliases=new String[]{""String_Node_Str""};
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.botPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.userPermissions=new Permission[]{Permission.MANAGE_EMOTES};
  this.parent=EmoteCmd.this;
}","RemoveCmd(){
  this.name=""String_Node_Str"";
  this.aliases=new String[]{""String_Node_Str""};
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.botPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.userPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.parent=EmoteCmd.this;
}",0.9904153354632588
174063,"StealCmd(){
  this.name=""String_Node_Str"";
  this.aliases=new String[]{""String_Node_Str""};
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.botPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.userPermissions=new Permission[]{Permission.MANAGE_EMOTES};
  this.parent=EmoteCmd.this;
}","StealCmd(){
  this.name=""String_Node_Str"";
  this.aliases=new String[]{""String_Node_Str""};
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.botPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.userPerms=new Permission[]{Permission.MANAGE_EMOTES};
  this.parent=EmoteCmd.this;
}",0.9903846153846154
174064,"private static String getEmote(Guild guild,int count,String emote){
  if (!(emote.equals(""String_Node_Str"")))   return guild.getEmoteById(emote).getAsMention();
  if (count < 5)   return ""String_Node_Str"";
 else   if (count > 5)   return ""String_Node_Str"";
 else   if (count > 15)   return ""String_Node_Str"";
 else   return ""String_Node_Str"";
}","private static String getEmote(Guild guild,int count,String emote){
  if (!(emote.startsWith(""String_Node_Str"")))   return guild.getEmoteById(emote).getAsMention();
  if (count < 5)   return ""String_Node_Str"";
 else   if (count > 5)   return ""String_Node_Str"";
 else   if (count > 15)   return ""String_Node_Str"";
 else   return ""String_Node_Str"";
}",0.9797687861271676
174065,"public void logKick(Action action,CommandEvent event,OffsetDateTime time,String reason,User target){
  if (!(bot.dataEnabled))   return;
  Guild guild=event.getGuild();
  GuildSettings gs=event.getClient().getSettingsFor(guild);
  TextChannel modlog=guild.getTextChannelById(gs.getModlog());
  User author=event.getAuthor();
  if (modlog == null || !(modlog.canTalk()) || LogUtils.isActionIgnored(action,modlog) || LogUtils.isIssuerIgnored(author.getIdLong(),modlog) || LogUtils.isTargetIgnored(target.getIdLong(),modlog))   return;
  Sender.sendMessage(modlog,FormatUtil.formatLogBan(BAN_FORMAT));
}","public void logKick(Action action,CommandEvent event,OffsetDateTime time,String reason,User target){
  if (!(bot.dataEnabled))   return;
  Guild guild=event.getGuild();
  GuildSettings gs=event.getClient().getSettingsFor(guild);
  TextChannel modlog=guild.getTextChannelById(gs.getModlog());
  User author=event.getAuthor();
  if (modlog == null || !(modlog.canTalk()) || LogUtils.isActionIgnored(action,modlog) || LogUtils.isIssuerIgnored(author.getIdLong(),modlog) || LogUtils.isTargetIgnored(target.getIdLong(),modlog))   return;
  Sender.sendMessage(modlog,FormatUtil.formatLogKick(BAN_FORMAT));
}",0.9941715237302248
174066,"public void setRoomMode(Guild guild,Room.Mode mode){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",guild.getId()))){
      if (mode == null) {
        if (results.next()) {
          results.updateNull(""String_Node_Str"");
          results.updateRow();
        }
      }
 else {
        if (results.next()) {
          results.updateString(""String_Node_Str"",mode.getName());
          results.updateRow();
        }
 else {
          results.moveToInsertRow();
          results.updateLong(""String_Node_Str"",guild.getIdLong());
          results.updateString(""String_Node_Str"",mode.name());
          results.insertRow();
        }
      }
      GuildSettingsImpl settings=(GuildSettingsImpl)bot.endless.getGuildSettings(guild);
      settings.setRoomMode(mode);
      if (bot.endless.getGuildSettingsById(guild.getIdLong()).isDefault())       ((EndlessCoreImpl)bot.endless).addSettings(guild,settings);
    }
   }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + guild.getId(),e);
  }
}","public void setRoomMode(Guild guild,Room.Mode mode){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",guild.getId()))){
      if (mode == null) {
        if (results.next()) {
          results.updateNull(""String_Node_Str"");
          results.updateRow();
        }
      }
 else {
        if (results.next()) {
          results.updateString(""String_Node_Str"",mode.name());
          results.updateRow();
        }
 else {
          results.moveToInsertRow();
          results.updateLong(""String_Node_Str"",guild.getIdLong());
          results.updateString(""String_Node_Str"",mode.name());
          results.insertRow();
        }
      }
      GuildSettingsImpl settings=(GuildSettingsImpl)bot.endless.getGuildSettings(guild);
      settings.setRoomMode(mode);
      if (bot.endless.getGuildSettingsById(guild.getIdLong()).isDefault())       ((EndlessCoreImpl)bot.endless).addSettings(guild,settings);
    }
   }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + guild.getId(),e);
  }
}",0.9979140592407176
174067,"public void removePunishment(long user,long guild,Const.PunishmentType type){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",user,guild,type.name()))){
      if (results.next()) {
        results.updateInt(""String_Node_Str"",0);
        results.updateRow();
      }
    }
     statement.executeUpdate(String.format(""String_Node_Str"",user,guild,type.name()));
    statement.closeOnCompletion();
  }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + user + ""String_Node_Str""+ guild,e);
  }
}","public void removePunishment(long user,long guild,Const.PunishmentType type){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",user,guild,type.name()))){
      if (results.next())       results.deleteRow();
    }
     statement.executeUpdate(String.format(""String_Node_Str"",user,guild,type.name()));
    statement.closeOnCompletion();
  }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + user + ""String_Node_Str""+ guild,e);
  }
}",0.9148264984227128
174068,"public void deleteMessage(Long msg,Long starboardMsg){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",msg))){
      if (results.next()) {
        results.updateLong(""String_Node_Str"",0);
        results.updateRow();
      }
    }
     statement.executeUpdate(String.format(""String_Node_Str"",starboardMsg));
    statement.closeOnCompletion();
  }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + msg + ""String_Node_Str""+ starboardMsg,e);
  }
}","public void deleteMessage(Long msg,Long starboardMsg){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",msg))){
      if (results.next())       results.deleteRow();
    }
     statement.executeUpdate(String.format(""String_Node_Str"",starboardMsg));
    statement.closeOnCompletion();
  }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + msg + ""String_Node_Str""+ starboardMsg,e);
  }
}",0.907391673746814
174069,"@Override protected void executeCommand(CommandEvent event){
  if (!(event.getClient().getOwnerId().equals(String.valueOf(Const.ARTUTO_ID)))) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (event.getArgs().isEmpty()) {
    event.replyWarning(""String_Node_Str"");
    return;
  }
  User user;
  List<Member> list=FinderUtil.findMembers(event.getArgs(),event.getGuild());
  if (list.isEmpty()) {
    event.getJDA().retrieveUserById(event.getArgs()).queue(s -> {
      if (!(bot.ddm.hasDonated(s))) {
        bot.ddm.setDonation(s,null);
        event.replyError(""String_Node_Str"");
      }
 else {
        bot.ddm.setDonation(s,null);
        event.replySuccess(String.format(""String_Node_Str"",s));
      }
    }
,e -> event.replyError(""String_Node_Str""));
  }
 else   if (list.size() > 1)   event.replyWarning(FormatUtil.listOfMembers(list,event.getArgs()));
 else {
    user=list.get(0).getUser();
    if (!(bot.ddm.hasDonated(user))) {
      bot.ddm.setDonation(user,null);
      event.replyError(""String_Node_Str"");
    }
 else {
      bot.ddm.setDonation(user,null);
      event.replySuccess(String.format(""String_Node_Str"",user));
    }
  }
}","@Override protected void executeCommand(CommandEvent event){
  if (!(event.getClient().getOwnerId().equals(String.valueOf(Const.ARTUTO_ID)))) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (event.getArgs().isEmpty()) {
    event.replyWarning(""String_Node_Str"");
    return;
  }
  User user;
  List<Member> list=FinderUtil.findMembers(event.getArgs(),event.getGuild());
  if (list.isEmpty()) {
    event.getJDA().retrieveUserById(event.getArgs()).queue(s -> {
      if (!(bot.ddm.hasDonated(s))) {
        bot.ddm.setDonation(s.getIdLong(),null);
        event.replyError(""String_Node_Str"");
      }
 else {
        bot.ddm.setDonation(s.getIdLong(),null);
        event.replySuccess(String.format(""String_Node_Str"",s));
      }
    }
,e -> event.replyError(""String_Node_Str""));
  }
 else   if (list.size() > 1)   event.replyWarning(FormatUtil.listOfMembers(list,event.getArgs()));
 else {
    user=list.get(0).getUser();
    if (!(bot.ddm.hasDonated(user))) {
      bot.ddm.setDonation(user.getIdLong(),null);
      event.replyError(""String_Node_Str"");
    }
 else {
      bot.ddm.setDonation(user.getIdLong(),null);
      event.replySuccess(String.format(""String_Node_Str"",user));
    }
  }
}",0.9797639123102868
174070,"public List<User> getUsersThatDonated(JDA jda){
  try {
    Statement statement=connection.createStatement();
    statement.closeOnCompletion();
    List<User> users;
    try (ResultSet results=statement.executeQuery(""String_Node_Str"")){
      users=new LinkedList<>();
      while (results.next()) {
        jda.retrieveUserById(results.getLong(""String_Node_Str"")).queue(u -> {
          if (hasDonated(u))           users.add(u);
        }
,e -> {
        }
);
      }
    }
     return users;
  }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"",e);
    return null;
  }
}","public List<User> getUsersThatDonated(JDA jda){
  try {
    Statement statement=connection.createStatement();
    statement.closeOnCompletion();
    List<User> users;
    try (ResultSet results=statement.executeQuery(""String_Node_Str"")){
      users=new LinkedList<>();
      while (results.next()) {
        long id=results.getLong(""String_Node_Str"");
        jda.retrieveUserById(id).queue(u -> {
          if (hasDonated(u))           users.add(u);
        }
,e -> setDonation(id,null));
      }
    }
     return users;
  }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"",e);
    return null;
  }
}",0.9014778325123152
174071,"public void setDonation(User user,String amount){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",user.getId()))){
      if (results.next()) {
        results.updateString(""String_Node_Str"",amount);
        results.updateRow();
      }
 else {
        results.moveToInsertRow();
        results.updateLong(""String_Node_Str"",user.getIdLong());
        results.updateString(""String_Node_Str"",amount);
        results.insertRow();
      }
    }
   }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + user.getId(),e);
  }
}","public void setDonation(long user,String donation){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",user))){
      if (results.next()) {
        results.updateString(""String_Node_Str"",donation);
        results.updateRow();
      }
 else {
        results.moveToInsertRow();
        results.updateLong(""String_Node_Str"",user);
        results.updateString(""String_Node_Str"",donation);
        results.insertRow();
      }
    }
   }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + user,e);
  }
}",0.7075208913649025
174072,"public void setModlogChannel(Guild guild,TextChannel tc){
  try {
    Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
    statement.closeOnCompletion();
    try (ResultSet results=statement.executeQuery(String.format(""String_Node_Str"",guild.getId()))){
      if (results.next()) {
        results.updateLong(""String_Node_Str"",tc == null ? null : tc.getIdLong());
        results.updateRow();
      }
 else {
        results.moveToInsertRow();
        results.updateLong(""String_Node_Str"",guild.getIdLong());
        results.updateLong(""String_Node_Str"",tc == null ? null : tc.getIdLong());
        results.insertRow();
      }
    }
   }
 catch (  SQLException e) {
    Database.LOG.error(""String_Node_Str"" + guild.getId(),e);
  }
}","public void setModlogChannel(Guild guild,TextChannel tc){
}",0.1386603995299647
174073,"public static String checkBadGuild(Guild guild){
  if (isBadGuild(guild)) {
    String msg=""String_Node_Str"" + guild.getName() + ""String_Node_Str"";
    TextChannel tc=FinderUtil.getDefaultChannel(guild);
    if (!(tc == null))     tc.sendMessage(msg).queue(null,(e) -> guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(msg).queue()));
    guild.leave().queue();
    return ""String_Node_Str"";
  }
 else   if (isABotListGuild(guild)) {
    User owner=guild.getJDA().getUserById(bot.config.getOwnerId());
    guild.getJDA().getUserById(""String_Node_Str"").openPrivateChannel().queue(s -> s.sendMessage(""String_Node_Str"" + owner.getName() + ""String_Node_Str""+ owner.getDiscriminator()+ ""String_Node_Str""+ guild.getName()).queue());
    return ""String_Node_Str"";
  }
 else   return ""String_Node_Str"";
}","public static String checkBadGuild(Guild guild){
  if (isBadGuild(guild)) {
    String msg=""String_Node_Str"" + guild.getName() + ""String_Node_Str"";
    TextChannel tc=FinderUtil.getDefaultChannel(guild);
    if (!(tc == null))     tc.sendMessage(msg).queue(null,(e) -> guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(msg).queue(null,e2 -> {
    }
)));
    guild.leave().queue();
    return ""String_Node_Str"";
  }
 else   if (isABotListGuild(guild)) {
    User owner=guild.getJDA().getUserById(bot.config.getOwnerId());
    guild.getJDA().getUserById(""String_Node_Str"").openPrivateChannel().queue(s -> s.sendMessage(""String_Node_Str"" + owner.getName() + ""String_Node_Str""+ owner.getDiscriminator()+ ""String_Node_Str""+ guild.getName()).queue());
    return ""String_Node_Str"";
  }
 else   return ""String_Node_Str"";
}",0.9885334942667472
174074,"@Override protected void execute(CommandEvent event){
  String ranks;
  String roles;
  String emote;
  EmbedBuilder builder=new EmbedBuilder();
  Member member;
  if (event.getArgs().isEmpty())   member=event.getMessage().getMember();
 else {
    List<Member> list=FinderUtil.findMembers(event.getArgs(),event.getGuild());
    if (list.isEmpty()) {
      event.replyWarning(""String_Node_Str"" + event.getArgs() + ""String_Node_Str"");
      return;
    }
 else     if (list.size() > 1) {
      event.replyWarning(FormatUtil.listOfMembers(list,event.getArgs()));
      return;
    }
 else     member=list.get(0);
  }
  String strjoins;
  List<Member> joins=new ArrayList<>(event.getGuild().getMembers());
  Collections.sort(joins,(  Member a,  Member b) -> a.getJoinDate().compareTo(b.getJoinDate()));
  int index=joins.indexOf(member);
  int joinnumber=index;
  index-=3;
  if (index < 0)   index=0;
  if (joins.get(index).equals(member))   strjoins=""String_Node_Str"" + joins.get(index).getUser().getName() + ""String_Node_Str"";
 else   strjoins=joins.get(index).getUser().getName();
  for (int i=index + 1; i < index + 7; i++) {
    if (i > joins.size())     break;
    Member m=joins.get(i);
    String name=m.getUser().getName();
    if (m.equals(member))     name=""String_Node_Str"" + name + ""String_Node_Str"";
    strjoins+=""String_Node_Str"" + name;
  }
  roles=InfoTools.mentionUserRoles(member);
  emote=InfoTools.onlineStatus(member);
  if (InfoTools.nitroCheck(member.getUser()))   ranks=""String_Node_Str"";
 else   ranks=""String_Node_Str"";
  String title=(member.getUser().isBot() ? ""String_Node_Str"" + member.getUser().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ member.getUser().getDiscriminator()+ ""String_Node_Str"" : ""String_Node_Str"" + member.getUser().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ member.getUser().getDiscriminator()+ ""String_Node_Str""+ ranks);
  try {
    builder.addField(""String_Node_Str"",member.getUser().getId(),true);
    builder.addField(""String_Node_Str"",(member.getNickname() == null ? ""String_Node_Str"" : member.getNickname()),true);
    builder.addField(""String_Node_Str"",roles,false);
    builder.addField(emote + ""String_Node_Str"",member.getOnlineStatus() + (member.getGame() == null ? ""String_Node_Str"" : ""String_Node_Str"" + (member.getGame().getType() == Game.GameType.STREAMING ? ""String_Node_Str"" + member.getGame().getName() + ""String_Node_Str"" : ""String_Node_Str"" + member.getGame().getName()) + ""String_Node_Str""+ ""String_Node_Str""),false);
    builder.addField(""String_Node_Str"",member.getUser().getCreationTime().format(DateTimeFormatter.RFC_1123_DATE_TIME),true);
    builder.addField(""String_Node_Str"",member.getJoinDate().format(DateTimeFormatter.RFC_1123_DATE_TIME),true);
    builder.addField(""String_Node_Str"" + (joinnumber + 1) + ""String_Node_Str"",strjoins,false);
    builder.setThumbnail(member.getUser().getEffectiveAvatarUrl());
    builder.setColor(member.getColor());
    event.getChannel().sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue();
  }
 catch (  Exception e) {
    event.replyError(""String_Node_Str"" + e + ""String_Node_Str"");
  }
}","@Override protected void execute(CommandEvent event){
  String ranks;
  String roles;
  String emote;
  EmbedBuilder builder=new EmbedBuilder();
  Member member;
  if (event.getArgs().isEmpty())   member=event.getMessage().getMember();
 else {
    List<Member> list=FinderUtil.findMembers(event.getArgs(),event.getGuild());
    if (list.isEmpty()) {
      event.replyWarning(""String_Node_Str"" + event.getArgs() + ""String_Node_Str"");
      return;
    }
 else     if (list.size() > 1) {
      event.replyWarning(FormatUtil.listOfMembers(list,event.getArgs()));
      return;
    }
 else     member=list.get(0);
  }
  String strjoins;
  List<Member> joins=new ArrayList<>(event.getGuild().getMembers());
  Collections.sort(joins,(  Member a,  Member b) -> a.getJoinDate().compareTo(b.getJoinDate()));
  int index=joins.indexOf(member);
  int joinnumber=index;
  index-=3;
  if (index < 0)   index=0;
  if (joins.get(index).equals(member))   strjoins=""String_Node_Str"" + joins.get(index).getUser().getName() + ""String_Node_Str"";
 else   strjoins=joins.get(index).getUser().getName();
  for (int i=index + 1; i < index + 7; i++) {
    if (i >= joins.size())     break;
    Member m=joins.get(i);
    String name=m.getUser().getName();
    if (m.equals(member))     name=""String_Node_Str"" + name + ""String_Node_Str"";
    strjoins+=""String_Node_Str"" + name;
  }
  roles=InfoTools.mentionUserRoles(member);
  emote=InfoTools.onlineStatus(member);
  if (InfoTools.nitroCheck(member.getUser()))   ranks=""String_Node_Str"";
 else   ranks=""String_Node_Str"";
  String title=(member.getUser().isBot() ? ""String_Node_Str"" + member.getUser().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ member.getUser().getDiscriminator()+ ""String_Node_Str"" : ""String_Node_Str"" + member.getUser().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ member.getUser().getDiscriminator()+ ""String_Node_Str""+ ranks);
  try {
    builder.addField(""String_Node_Str"",member.getUser().getId(),true);
    builder.addField(""String_Node_Str"",(member.getNickname() == null ? ""String_Node_Str"" : member.getNickname()),true);
    builder.addField(""String_Node_Str"",roles,false);
    builder.addField(emote + ""String_Node_Str"",member.getOnlineStatus() + (member.getGame() == null ? ""String_Node_Str"" : ""String_Node_Str"" + (member.getGame().getType() == Game.GameType.STREAMING ? ""String_Node_Str"" + member.getGame().getName() + ""String_Node_Str"" : ""String_Node_Str"" + member.getGame().getName()) + ""String_Node_Str""+ ""String_Node_Str""),false);
    builder.addField(""String_Node_Str"",member.getUser().getCreationTime().format(DateTimeFormatter.RFC_1123_DATE_TIME),true);
    builder.addField(""String_Node_Str"",member.getJoinDate().format(DateTimeFormatter.RFC_1123_DATE_TIME),true);
    builder.addField(""String_Node_Str"" + (joinnumber + 1) + ""String_Node_Str"",strjoins,false);
    builder.setThumbnail(member.getUser().getEffectiveAvatarUrl());
    builder.setColor(member.getColor());
    event.getChannel().sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue();
  }
 catch (  Exception e) {
    event.replyError(""String_Node_Str"" + e + ""String_Node_Str"");
  }
}",0.9998433829287392
174075,"private void waitForChannel(CommandEvent event){
  event.replySuccess(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ew.waitForEvent(GuildMessageReceivedEvent.class,e -> event.getAuthor().equals(e.getAuthor()) && event.getTextChannel().equals(e.getChannel()),e -> {
switch (e.getMessage().getContentRaw().toLowerCase()) {
case ""String_Node_Str"":
      event.replyWarning(""String_Node_Str"");
    break;
case ""String_Node_Str"":
  if (!(event.getSelfMember().hasPermission(Permission.MANAGE_CHANNEL)) || !(event.getSelfMember().hasPermission(Permission.MANAGE_PERMISSIONS))) {
    event.replyError(""String_Node_Str"");
    waitForChannel(event);
  }
event.replySuccess(""String_Node_Str"",m -> m.editMessage(""String_Node_Str"").queueAfter(3,TimeUnit.SECONDS,(s) -> {
  event.getGuild().getController().createTextChannel(""String_Node_Str"").queue(everyone -> everyone.createPermissionOverride(event.getGuild().getPublicRole()).setDeny(Permission.MESSAGE_WRITE).queue(self -> self.getChannel().createPermissionOverride(event.getSelfMember()).setAllow(Permission.MESSAGE_WRITE).queue(next -> {
    event.replySuccess(""String_Node_Str"");
    waitForStarCount(event);
  }
)));
}
));
break;
case ""String_Node_Str"":
String tc;
try {
String[] args=e.getMessage().getContentRaw().split(""String_Node_Str"",2);
tc=args[1].trim();
}
 catch (ArrayIndexOutOfBoundsException ex) {
event.replyWarning(""String_Node_Str"");
waitForChannel(event);
return;
}
List<TextChannel> list=FinderUtil.findTextChannels(tc,event.getGuild());
if (list.isEmpty()) event.replyWarning(""String_Node_Str"" + tc + ""String_Node_Str"");
 else if (list.size() > 1) event.replyWarning(FormatUtil.listOfTcChannels(list,tc));
 else {
db.setStarboardChannel(event.getGuild(),list.get(0));
event.replySuccess(""String_Node_Str"" + list.get(0).getAsMention());
waitForStarCount(event);
}
break;
default :
event.replyWarning(""String_Node_Str"");
waitForChannel(event);
}
}
,2,TimeUnit.MINUTES,() -> event.replyWarning(""String_Node_Str"" + event.getAuthor().getAsMention() + ""String_Node_Str""));
}","private void waitForChannel(CommandEvent event){
  event.replySuccess(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ew.waitForEvent(GuildMessageReceivedEvent.class,e -> event.getAuthor().equals(e.getAuthor()) && event.getTextChannel().equals(e.getChannel()),e -> {
switch (e.getMessage().getContentRaw().split(""String_Node_Str"",2)[0].toLowerCase()) {
case ""String_Node_Str"":
      event.replyWarning(""String_Node_Str"");
    break;
case ""String_Node_Str"":
  if (!(event.getSelfMember().hasPermission(Permission.MANAGE_CHANNEL)) || !(event.getSelfMember().hasPermission(Permission.MANAGE_PERMISSIONS))) {
    event.replyError(""String_Node_Str"");
    waitForChannel(event);
  }
event.replySuccess(""String_Node_Str"",m -> m.editMessage(""String_Node_Str"").queueAfter(3,TimeUnit.SECONDS,(s) -> {
  event.getGuild().getController().createTextChannel(""String_Node_Str"").queue(everyone -> everyone.createPermissionOverride(event.getGuild().getPublicRole()).setDeny(Permission.MESSAGE_WRITE).queue(self -> self.getChannel().createPermissionOverride(event.getSelfMember()).setAllow(Permission.MESSAGE_WRITE).queue(next -> {
    event.replySuccess(""String_Node_Str"");
    waitForStarCount(event);
  }
)));
}
));
break;
case ""String_Node_Str"":
String tc;
try {
String[] args=e.getMessage().getContentRaw().split(""String_Node_Str"",2);
tc=args[1].trim();
}
 catch (ArrayIndexOutOfBoundsException ex) {
event.replyWarning(""String_Node_Str"");
waitForChannel(event);
return;
}
List<TextChannel> list=FinderUtil.findTextChannels(tc,event.getGuild());
if (list.isEmpty()) event.replyWarning(""String_Node_Str"" + tc + ""String_Node_Str"");
 else if (list.size() > 1) event.replyWarning(FormatUtil.listOfTcChannels(list,tc));
 else {
db.setStarboardChannel(event.getGuild(),list.get(0));
event.replySuccess(""String_Node_Str"" + list.get(0).getAsMention());
waitForStarCount(event);
}
break;
default :
event.replyWarning(""String_Node_Str"");
waitForChannel(event);
}
}
,2,TimeUnit.MINUTES,() -> event.replyWarning(""String_Node_Str"" + event.getAuthor().getAsMention() + ""String_Node_Str""));
}",0.9927953890489912
174076,"public CommandClient createClient(){
  CommandClientBuilder client=new CommandClientBuilder();
  Long[] coOwners=config.getCoOwnerIds();
  String[] owners=new String[coOwners.length];
  for (int i=0; i < owners.length; i++) {
    owners[i]=String.valueOf(coOwners[i]);
  }
  client.setOwnerId(String.valueOf(config.getOwnerId()));
  client.setServerInvite(Const.INVITE);
  client.setEmojis(config.getDoneEmote(),config.getWarnEmote(),config.getErrorEmote());
  client.setPrefix(config.getPrefix());
  client.setStatus(config.getStatus());
  client.setGame(Game.of(config.getGame()));
  if (!(owners.toString().isEmpty()))   client.setCoOwnerIds(owners);
  if (!(config.getDBotsToken().isEmpty() || config.getDBotsToken() == null))   client.setDiscordBotsKey(config.getDBotsToken());
  if (!(config.getDBotsListToken().isEmpty() || config.getDBotsListToken() == null))   client.setDiscordBotListKey(config.getDBotsListToken());
  client.addCommands(new About(),new Donate(),new Invite(),new Ping(),new Stats(),new Bash(),new BlacklistUsers(bdm),new BotCPanel(),new Eval(config,db,ldm,bdm,jldm,modlog),new Shutdown(db),new Ban(modlog,config),new Clear(modlog,threads),new Kick(modlog,config),new Hackban(modlog,config),new SoftBan(modlog,config),new Unban(modlog,config),new ServerSettings(ldm,jldm),new Welcome(ldm),new Afk(),new Avatar(),new DBansCheck(config),new GuildInfo(),new Lookup(),new RoleInfo(),new UserInfo(),new Cat(config),new Choose(),new Dog(config),new GiphyGif(config),new Say(),new GoogleSearch(),new Translate(config));
  return client.build();
}","public static CommandClient createClient(){
  CommandClientBuilder client=new CommandClientBuilder();
  Long[] coOwners=config.getCoOwnerIds();
  String[] owners=new String[coOwners.length];
  for (int i=0; i < owners.length; i++) {
    owners[i]=String.valueOf(coOwners[i]);
  }
  client.setOwnerId(String.valueOf(config.getOwnerId()));
  client.setServerInvite(Const.INVITE);
  client.setEmojis(config.getDoneEmote(),config.getWarnEmote(),config.getErrorEmote());
  client.setPrefix(config.getPrefix());
  client.setStatus(config.getStatus());
  client.setGame(Game.of(config.getGame()));
  if (!(owners.toString().isEmpty()))   client.setCoOwnerIds(owners);
  if (!(config.getDBotsToken().isEmpty() || config.getDBotsToken() == null))   client.setDiscordBotsKey(config.getDBotsToken());
  if (!(config.getDBotsListToken().isEmpty() || config.getDBotsListToken() == null))   client.setDiscordBotListKey(config.getDBotsListToken());
  client.addCommands(new About(),new Donate(),new Invite(),new Ping(),new Stats(),new Bash(),new BlacklistUsers(bdm),new BotCPanel(),new Eval(config,db,ldm,bdm,jldm,modlog),new Shutdown(db),new Ban(modlog,config),new Clear(modlog,threads),new Kick(modlog,config),new Hackban(modlog,config),new SoftBan(modlog,config),new Unban(modlog,config),new ServerSettings(ldm,jldm),new Welcome(jldm),new Afk(),new Avatar(),new DBansCheck(config),new GuildInfo(),new Lookup(),new RoleInfo(),new UserInfo(),new Cat(config),new Choose(),new Dog(config),new GiphyGif(config),new Say(),new GoogleSearch(),new Translate(config));
  return client.build();
}",0.9974506054811982
174077,"public void initializeData() throws SQLException {
  db=new DatabaseManager(config.getDatabaseUrl(),config.getDatabaseUsername(),config.getDatabasePassword());
  bdm=new BlacklistDataManager(db);
  ldm=new LoggingDataManager(db);
  jldm=new JLDataManager(db);
}","public static void initializeData() throws SQLException {
  db=new DatabaseManager(config.getDatabaseUrl(),config.getDatabaseUsername(),config.getDatabasePassword());
  bdm=new BlacklistDataManager(db);
  ldm=new LoggingDataManager(db);
  jldm=new JLDataManager(db);
}",0.9867674858223062
174078,"public JDA startJda() throws LoginException, RateLimitedException, InterruptedException {
  jda=new JDABuilder(AccountType.BOT).setToken(config.getToken()).setStatus(OnlineStatus.DO_NOT_DISTURB).setGame(Game.of(Const.GAME_0)).addEventListener(waiter).addEventListener(createClient()).addEventListener(bot).addEventListener(new Endless()).addEventListener(new Logging(config)).addEventListener(new GuildBlacklist()).addEventListener(new ServerLogging(ldm)).addEventListener(new GuildEvents(config)).addEventListener(new UserEvents(config)).buildBlocking();
  return jda;
}","public static JDA startJda() throws LoginException, RateLimitedException, InterruptedException {
  jda=new JDABuilder(AccountType.BOT).setToken(config.getToken()).setStatus(OnlineStatus.DO_NOT_DISTURB).setGame(Game.of(Const.GAME_0)).addEventListener(waiter).addEventListener(createClient()).addEventListener(bot).addEventListener(new Endless()).addEventListener(new Logging(config)).addEventListener(new GuildBlacklist()).addEventListener(new ServerLogging(ldm,jldm)).addEventListener(new GuildEvents(config)).addEventListener(new UserEvents(config)).buildBlocking();
  return jda;
}",0.9896013864818024
174079,"public void main(String[] args) throws IOException, SQLException, LoginException, RateLimitedException, InterruptedException {
  log.setLevel(Level.INFO);
  LOG.info(""String_Node_Str"" + Const.VERSION + ""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  try {
    config=new Config();
  }
 catch (  Exception e) {
    LOG.fatal(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  LOG.info(""String_Node_Str"");
  initializeData();
  LOG.info(""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  startJda();
  LOG.info(""String_Node_Str"");
}","public static void main(String[] args) throws IOException, SQLException, LoginException, RateLimitedException, InterruptedException {
  log.setLevel(Level.INFO);
  LOG.info(""String_Node_Str"" + Const.VERSION + ""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  try {
    config=new Config();
    LOG.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.fatal(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  LOG.info(""String_Node_Str"");
  initializeData();
  LOG.info(""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  startJda();
}",0.935862691960253
174080,"@Override public void onReady(ReadyEvent event){
  LOG.info(""String_Node_Str"");
  GuildUtils.leaveBadGuilds(jda);
  LOG.info(""String_Node_Str"");
  SimpleLog LOG=SimpleLog.getLog(""String_Node_Str"");
  User selfuser=event.getJDA().getSelfUser();
  User owner=event.getJDA().getUserById(config.getOwnerId());
  String selfname=selfuser.getName() + ""String_Node_Str"" + selfuser.getDiscriminator();
  String selfid=selfuser.getId();
  String ownername=owner.getName() + ""String_Node_Str"" + owner.getDiscriminator();
  String ownerid=owner.getId();
  LOG.info(""String_Node_Str"");
  LOG.info(""String_Node_Str"" + selfname + ""String_Node_Str""+ selfid+ ""String_Node_Str"");
  LOG.info(""String_Node_Str"" + config.getPrefix());
  LOG.info(""String_Node_Str"" + ownername + ""String_Node_Str""+ ownerid+ ""String_Node_Str"");
  event.getJDA().getPresence().setGame(Game.of(""String_Node_Str"" + config.getPrefix() + ""String_Node_Str""+ Const.VERSION+ ""String_Node_Str""+ event.getJDA().getGuilds().size()+ ""String_Node_Str""+ event.getJDA().getUsers().size()+ ""String_Node_Str""+ event.getJDA().getTextChannels().size()+ ""String_Node_Str""));
  if (event.getJDA().getGuilds().isEmpty()) {
    SimpleLog.getLog(""String_Node_Str"").warn(""String_Node_Str"");
    SimpleLog.getLog(""String_Node_Str"").warn(event.getJDA().asBot().getInviteUrl(Permission.ADMINISTRATOR));
  }
}","@Override public void onReady(ReadyEvent event){
  LOG.info(""String_Node_Str"");
  GuildUtils.leaveBadGuilds(event.getJDA());
  LOG.info(""String_Node_Str"");
  SimpleLog LOG=SimpleLog.getLog(""String_Node_Str"");
  User selfuser=event.getJDA().getSelfUser();
  User owner=event.getJDA().getUserById(config.getOwnerId());
  String selfname=selfuser.getName() + ""String_Node_Str"" + selfuser.getDiscriminator();
  String selfid=selfuser.getId();
  String ownername=owner.getName() + ""String_Node_Str"" + owner.getDiscriminator();
  String ownerid=owner.getId();
  LOG.info(""String_Node_Str"");
  LOG.info(""String_Node_Str"" + selfname + ""String_Node_Str""+ selfid+ ""String_Node_Str"");
  LOG.info(""String_Node_Str"" + config.getPrefix());
  LOG.info(""String_Node_Str"" + ownername + ""String_Node_Str""+ ownerid+ ""String_Node_Str"");
  event.getJDA().getPresence().setGame(Game.of(""String_Node_Str"" + config.getPrefix() + ""String_Node_Str""+ Const.VERSION+ ""String_Node_Str""+ event.getJDA().getGuilds().size()+ ""String_Node_Str""+ event.getJDA().getUsers().size()+ ""String_Node_Str""+ event.getJDA().getTextChannels().size()+ ""String_Node_Str""));
  if (event.getJDA().getGuilds().isEmpty()) {
    SimpleLog.getLog(""String_Node_Str"").warn(""String_Node_Str"");
    SimpleLog.getLog(""String_Node_Str"").warn(event.getJDA().asBot().getInviteUrl(Permission.ADMINISTRATOR));
  }
}",0.993687337541775
174081,"public Welcome(LoggingDataManager db){
  this.db=db;
  this.name=""String_Node_Str"";
  this.children=new Command[]{new Change(db)};
  this.aliases=new String[]{""String_Node_Str"",""String_Node_Str""};
  this.help=""String_Node_Str"";
  this.category=Categories.TOOLS;
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.ownerCommand=false;
  this.guildOnly=true;
}","public Welcome(JLDataManager db){
  this.db=db;
  this.name=""String_Node_Str"";
  this.children=new Command[]{new Change()};
  this.aliases=new String[]{""String_Node_Str"",""String_Node_Str""};
  this.help=""String_Node_Str"";
  this.category=Categories.TOOLS;
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.ownerCommand=false;
  this.guildOnly=true;
}",0.9898305084745764
174082,"public Change(LoggingDataManager db){
  this.db=db;
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
  this.category=Categories.TOOLS;
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MANAGE_SERVER};
  this.ownerCommand=false;
  this.guildOnly=true;
}","public Change(){
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
  this.category=Categories.TOOLS;
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MANAGE_SERVER};
  this.ownerCommand=false;
  this.guildOnly=true;
}",0.9443561208267092
174083,"@Override public void onGuildMessageUpdate(GuildMessageUpdateEvent event){
  EmbedBuilder builder=new EmbedBuilder();
  Guild guild=event.getGuild();
  TextChannel tc=db.getServerlogChannel(guild);
  Message message=MessagesLogging.getMsg(event.getMessageIdLong());
  Message newmsg=event.getMessage();
  String title;
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  if (!(message.getContent().equals(""String_Node_Str"")) && !(tc == null) && !(event.getAuthor().isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
      title=""String_Node_Str"" + message.getAuthor().getName() + ""String_Node_Str""+ message.getAuthor().getDiscriminator()+ ""String_Node_Str""+ message.getTextChannel().getAsMention()+ ""String_Node_Str"";
      builder.setAuthor(message.getAuthor().getName(),null,message.getAuthor().getEffectiveAvatarUrl());
      builder.addField(""String_Node_Str"",""String_Node_Str"" + message.getContent() + ""String_Node_Str"",false);
      builder.addField(""String_Node_Str"",""String_Node_Str"" + newmsg.getContent() + ""String_Node_Str"",false);
      builder.setFooter(""String_Node_Str"" + message.getId(),null);
      builder.setColor(event.getGuild().getSelfMember().getColor());
      builder.setTimestamp(message.getCreationTime());
      tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue((m) -> {
        MessagesLogging.removeMessage(newmsg.getIdLong());
        MessagesLogging.addMessage(newmsg.getIdLong(),newmsg);
      }
);
    }
  }
 else {
    if (!(tc == null) && !(event.getAuthor().isBot())) {
      if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))       guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> tc.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
        title=""String_Node_Str"";
        builder.addField(""String_Node_Str"",""String_Node_Str"",false);
        builder.addField(""String_Node_Str"",""String_Node_Str"" + newmsg.getContent() + ""String_Node_Str"",false);
        builder.setFooter(""String_Node_Str"" + event.getMessageId(),null);
        builder.setColor(event.getGuild().getSelfMember().getColor());
        tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue((m) -> {
          MessagesLogging.removeMessage(newmsg.getIdLong());
          MessagesLogging.addMessage(newmsg.getIdLong(),newmsg);
        }
);
      }
    }
  }
}","@Override public void onGuildMessageUpdate(GuildMessageUpdateEvent event){
  EmbedBuilder builder=new EmbedBuilder();
  Guild guild=event.getGuild();
  TextChannel tc=ldm.getServerlogChannel(guild);
  Message message=MessagesLogging.getMsg(event.getMessageIdLong());
  Message newmsg=event.getMessage();
  String title;
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  if (!(message.getContent().equals(""String_Node_Str"")) && !(tc == null) && !(event.getAuthor().isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
      title=""String_Node_Str"" + message.getAuthor().getName() + ""String_Node_Str""+ message.getAuthor().getDiscriminator()+ ""String_Node_Str""+ message.getTextChannel().getAsMention()+ ""String_Node_Str"";
      builder.setAuthor(message.getAuthor().getName(),null,message.getAuthor().getEffectiveAvatarUrl());
      builder.addField(""String_Node_Str"",""String_Node_Str"" + message.getContent() + ""String_Node_Str"",false);
      builder.addField(""String_Node_Str"",""String_Node_Str"" + newmsg.getContent() + ""String_Node_Str"",false);
      builder.setFooter(""String_Node_Str"" + message.getId(),null);
      builder.setColor(event.getGuild().getSelfMember().getColor());
      builder.setTimestamp(message.getCreationTime());
      tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue((m) -> {
        MessagesLogging.removeMessage(newmsg.getIdLong());
        MessagesLogging.addMessage(newmsg.getIdLong(),newmsg);
      }
);
    }
  }
 else {
    if (!(tc == null) && !(event.getAuthor().isBot())) {
      if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))       guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> tc.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
        title=""String_Node_Str"";
        builder.addField(""String_Node_Str"",""String_Node_Str"",false);
        builder.addField(""String_Node_Str"",""String_Node_Str"" + newmsg.getContent() + ""String_Node_Str"",false);
        builder.setFooter(""String_Node_Str"" + event.getMessageId(),null);
        builder.setColor(event.getGuild().getSelfMember().getColor());
        tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue((m) -> {
          MessagesLogging.removeMessage(newmsg.getIdLong());
          MessagesLogging.addMessage(newmsg.getIdLong(),newmsg);
        }
);
      }
    }
  }
}",0.9991311902693312
174084,"public ServerLogging(LoggingDataManager db){
  ServerLogging.db=db;
  this.parser=new ParserBuilder().addMethods(Variables.getMethods()).setMaxOutput(2000).setMaxIterations(1000).build();
}","public ServerLogging(LoggingDataManager ldm,JLDataManager jldm){
  ServerLogging.ldm=ldm;
  this.jldm=jldm;
  this.parser=new ParserBuilder().addMethods(Variables.getMethods()).setMaxOutput(2000).setMaxIterations(1000).build();
}",0.8755980861244019
174085,"@Override public void onGuildMemberJoin(GuildMemberJoinEvent event){
  Guild guild=event.getGuild();
  TextChannel serverlog=db.getServerlogChannel(guild);
  TextChannel welcome=db.getWelcomeChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  User newmember=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  String msg=db.getWelcomeMessage(guild);
  parser.clear().put(""String_Node_Str"",newmember).put(""String_Node_Str"",guild).put(""String_Node_Str"",welcome);
  if (!(serverlog == null)) {
    if (!(serverlog.getGuild().getSelfMember().hasPermission(serverlog,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     serverlog.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ newmember.getName()+ ""String_Node_Str""+ newmember.getDiscriminator()+ ""String_Node_Str""+ newmember.getId()+ ""String_Node_Str""+ guild.getMembers().size()+ ""String_Node_Str"").queue();
  }
  if (!(welcome == null) && !(msg.isEmpty())) {
    if (!(welcome.getGuild().getSelfMember().hasPermission(welcome,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.WELCOME_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.WELCOME_NOPERMISSIONS).queue()));
 else     welcome.sendMessage(parser.parse(msg).trim()).queueAfter(2,TimeUnit.SECONDS);
  }
}","@Override public void onGuildMemberJoin(GuildMemberJoinEvent event){
  Guild guild=event.getGuild();
  TextChannel serverlog=ldm.getServerlogChannel(guild);
  TextChannel welcome=jldm.getWelcomeChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  User newmember=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  String msg=jldm.getWelcomeMessage(guild);
  parser.clear().put(""String_Node_Str"",newmember).put(""String_Node_Str"",guild).put(""String_Node_Str"",welcome);
  if (!(serverlog == null)) {
    if (!(serverlog.getGuild().getSelfMember().hasPermission(serverlog,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     serverlog.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ newmember.getName()+ ""String_Node_Str""+ newmember.getDiscriminator()+ ""String_Node_Str""+ newmember.getId()+ ""String_Node_Str""+ guild.getMembers().size()+ ""String_Node_Str"").queue();
  }
  if (!(welcome == null) && !(msg.isEmpty())) {
    if (!(welcome.getGuild().getSelfMember().hasPermission(welcome,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.WELCOME_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.WELCOME_NOPERMISSIONS).queue()));
 else     welcome.sendMessage(parser.parse(msg).trim()).queueAfter(2,TimeUnit.SECONDS);
  }
}",0.9957254211717376
174086,"@Override public void onGuildMessageReceived(GuildMessageReceivedEvent event){
  TextChannel tc=db.getServerlogChannel(event.getGuild());
  if (!(tc == null) && !(event.getAuthor().isBot()))   MessagesLogging.addMessage(event.getMessage().getIdLong(),event.getMessage());
}","@Override public void onGuildMessageReceived(GuildMessageReceivedEvent event){
  TextChannel tc=ldm.getServerlogChannel(event.getGuild());
  if (!(tc == null) && !(event.getAuthor().isBot()))   MessagesLogging.addMessage(event.getMessage().getIdLong(),event.getMessage());
}",0.9908592321755028
174087,"@Override public void onGuildMemberLeave(GuildMemberLeaveEvent event){
  Guild guild=event.getGuild();
  TextChannel tc=db.getServerlogChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  User oldmember=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  if (!(tc == null)) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ oldmember.getName()+ ""String_Node_Str""+ oldmember.getDiscriminator()+ ""String_Node_Str""+ oldmember.getId()+ ""String_Node_Str""+ guild.getMembers().size()+ ""String_Node_Str"").queue();
  }
}","@Override public void onGuildMemberLeave(GuildMemberLeaveEvent event){
  Guild guild=event.getGuild();
  TextChannel tc=ldm.getServerlogChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  User oldmember=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  if (!(tc == null)) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ oldmember.getName()+ ""String_Node_Str""+ oldmember.getDiscriminator()+ ""String_Node_Str""+ oldmember.getId()+ ""String_Node_Str""+ guild.getMembers().size()+ ""String_Node_Str"").queue();
  }
}",0.9980369061641148
174088,"@Override public void onGuildVoiceMove(GuildVoiceMoveEvent event){
  Guild guild=event.getGuild();
  TextChannel tc=db.getServerlogChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  VoiceChannel vcold=event.getChannelLeft();
  VoiceChannel vcnew=event.getChannelJoined();
  User user=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  if (!(tc == null) && !(user.isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ user.getName()+ ""String_Node_Str""+ user.getDiscriminator()+ ""String_Node_Str""+ vcold.getName()+ ""String_Node_Str""+ vcnew.getName()+ ""String_Node_Str"").queue();
  }
}","@Override public void onGuildVoiceMove(GuildVoiceMoveEvent event){
  Guild guild=event.getGuild();
  TextChannel tc=ldm.getServerlogChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  VoiceChannel vcold=event.getChannelLeft();
  VoiceChannel vcnew=event.getChannelJoined();
  User user=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  if (!(tc == null) && !(user.isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ user.getName()+ ""String_Node_Str""+ user.getDiscriminator()+ ""String_Node_Str""+ vcold.getName()+ ""String_Node_Str""+ vcnew.getName()+ ""String_Node_Str"").queue();
  }
}",0.9981529368304396
174089,"@Override public void onGuildMessageDelete(GuildMessageDeleteEvent event){
  EmbedBuilder builder=new EmbedBuilder();
  Guild guild=event.getGuild();
  TextChannel tc=db.getServerlogChannel(guild);
  Message message=MessagesLogging.getMsg(event.getMessageIdLong());
  String title;
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  if (!(message.getContent().equals(""String_Node_Str"")) && !(tc == null) && !(message.getAuthor().isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
      title=""String_Node_Str"" + message.getAuthor().getName() + ""String_Node_Str""+ message.getAuthor().getDiscriminator()+ ""String_Node_Str""+ message.getTextChannel().getAsMention()+ ""String_Node_Str"";
      builder.setAuthor(message.getAuthor().getName(),null,message.getAuthor().getEffectiveAvatarUrl());
      builder.setDescription(""String_Node_Str"" + message.getContent() + ""String_Node_Str"");
      builder.setFooter(""String_Node_Str"" + message.getId(),null);
      builder.setColor(event.getGuild().getSelfMember().getColor());
      builder.setTimestamp(message.getCreationTime());
      tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue((m) -> MessagesLogging.removeMessage(message.getIdLong()));
    }
  }
 else {
    if (!(tc == null) && !(message.getAuthor() == null)) {
      if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))       guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> tc.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
        title=""String_Node_Str"";
        builder.setDescription(""String_Node_Str"");
        builder.setFooter(""String_Node_Str"" + event.getMessageId(),null);
        builder.setColor(event.getGuild().getSelfMember().getColor());
        tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue((m) -> MessagesLogging.removeMessage(message.getIdLong()));
      }
    }
  }
}","@Override public void onGuildMessageDelete(GuildMessageDeleteEvent event){
  EmbedBuilder builder=new EmbedBuilder();
  Guild guild=event.getGuild();
  TextChannel tc=ldm.getServerlogChannel(guild);
  Message message=MessagesLogging.getMsg(event.getMessageIdLong());
  String title;
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  if (!(message.getContent().equals(""String_Node_Str"")) && !(tc == null) && !(message.getAuthor().isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
      title=""String_Node_Str"" + message.getAuthor().getName() + ""String_Node_Str""+ message.getAuthor().getDiscriminator()+ ""String_Node_Str""+ message.getTextChannel().getAsMention()+ ""String_Node_Str"";
      builder.setAuthor(message.getAuthor().getName(),null,message.getAuthor().getEffectiveAvatarUrl());
      builder.setDescription(""String_Node_Str"" + message.getContent() + ""String_Node_Str"");
      builder.setFooter(""String_Node_Str"" + message.getId(),null);
      builder.setColor(event.getGuild().getSelfMember().getColor());
      builder.setTimestamp(message.getCreationTime());
      tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue((m) -> MessagesLogging.removeMessage(message.getIdLong()));
    }
  }
 else {
    if (!(tc == null) && !(message.getAuthor() == null)) {
      if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))       guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> tc.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
        title=""String_Node_Str"";
        builder.setDescription(""String_Node_Str"");
        builder.setFooter(""String_Node_Str"" + event.getMessageId(),null);
        builder.setColor(event.getGuild().getSelfMember().getColor());
        tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue((m) -> MessagesLogging.removeMessage(message.getIdLong()));
      }
    }
  }
}",0.998966301426504
174090,"@Override public void onUserAvatarUpdate(UserAvatarUpdateEvent event){
  List<Guild> guilds=event.getUser().getMutualGuilds();
  EmbedBuilder builder=new EmbedBuilder();
  User user=event.getUser();
  String title=""String_Node_Str"" + user.getName() + ""String_Node_Str""+ user.getDiscriminator()+ ""String_Node_Str"";
  if (!(guilds.isEmpty()) && !(user.isBot())) {
    for (    Guild guild : guilds) {
      TextChannel tc=db.getServerlogChannel(guild);
      TextChannel channel=FinderUtil.getDefaultChannel(guild);
      if (!(tc == null)) {
        if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))         guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
          builder.setAuthor(user.getName(),null,user.getEffectiveAvatarUrl());
          builder.setThumbnail(event.getPreviousAvatarUrl());
          builder.setImage(user.getEffectiveAvatarUrl());
          builder.setColor(guild.getSelfMember().getColor());
          tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue();
        }
      }
    }
  }
}","@Override public void onUserAvatarUpdate(UserAvatarUpdateEvent event){
  List<Guild> guilds=event.getUser().getMutualGuilds();
  EmbedBuilder builder=new EmbedBuilder();
  User user=event.getUser();
  String title=""String_Node_Str"" + user.getName() + ""String_Node_Str""+ user.getDiscriminator()+ ""String_Node_Str"";
  if (!(guilds.isEmpty()) && !(user.isBot())) {
    for (    Guild guild : guilds) {
      TextChannel tc=ldm.getServerlogChannel(guild);
      TextChannel channel=FinderUtil.getDefaultChannel(guild);
      if (!(tc == null)) {
        if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))         guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else {
          builder.setAuthor(user.getName(),null,user.getEffectiveAvatarUrl());
          builder.setThumbnail(event.getPreviousAvatarUrl());
          builder.setImage(user.getEffectiveAvatarUrl());
          builder.setColor(guild.getSelfMember().getColor());
          tc.sendMessage(new MessageBuilder().append(title).setEmbed(builder.build()).build()).queue();
        }
      }
    }
  }
}",0.998086490623804
174091,"@Override public void onGuildVoiceJoin(GuildVoiceJoinEvent event){
  Guild guild=event.getGuild();
  TextChannel tc=db.getServerlogChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  VoiceChannel vc=event.getChannelJoined();
  User user=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  if (!(tc == null) && !(user.isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ user.getName()+ ""String_Node_Str""+ user.getDiscriminator()+ ""String_Node_Str""+ vc.getName()+ ""String_Node_Str""+ vc.getId()+ ""String_Node_Str"").queue();
  }
}","@Override public void onGuildVoiceJoin(GuildVoiceJoinEvent event){
  Guild guild=event.getGuild();
  TextChannel tc=ldm.getServerlogChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  VoiceChannel vc=event.getChannelJoined();
  User user=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  if (!(tc == null) && !(user.isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ user.getName()+ ""String_Node_Str""+ user.getDiscriminator()+ ""String_Node_Str""+ vc.getName()+ ""String_Node_Str""+ vc.getId()+ ""String_Node_Str"").queue();
  }
}",0.9980732177263968
174092,"@Override public void onGuildVoiceLeave(GuildVoiceLeaveEvent event){
  Guild guild=event.getGuild();
  TextChannel tc=db.getServerlogChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  VoiceChannel vc=event.getChannelLeft();
  User user=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  if (!(tc == null) && !(user.isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ user.getName()+ ""String_Node_Str""+ user.getDiscriminator()+ ""String_Node_Str""+ vc.getName()+ ""String_Node_Str"").queue();
  }
}","@Override public void onGuildVoiceLeave(GuildVoiceLeaveEvent event){
  Guild guild=event.getGuild();
  TextChannel tc=ldm.getServerlogChannel(guild);
  TextChannel channel=FinderUtil.getDefaultChannel(event.getGuild());
  VoiceChannel vc=event.getChannelLeft();
  User user=event.getMember().getUser();
  Calendar calendar=GregorianCalendar.getInstance();
  calendar.setTime(new Date());
  String hour=String.format(""String_Node_Str"",calendar.get(Calendar.HOUR_OF_DAY));
  String min=String.format(""String_Node_Str"",calendar.get(Calendar.MINUTE));
  String sec=String.format(""String_Node_Str"",calendar.get(Calendar.SECOND));
  if (!(tc == null) && !(user.isBot())) {
    if (!(tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)))     guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.SRVLOG_NOPERMISSIONS).queue()));
 else     tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ user.getName()+ ""String_Node_Str""+ user.getDiscriminator()+ ""String_Node_Str""+ vc.getName()+ ""String_Node_Str"").queue();
  }
}",0.998026056060008
174093,"public Import(){
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.category=Categories.FUN;
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MANAGE_SERVER};
  this.ownerCommand=false;
  this.guildOnly=false;
}","public Import(){
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.category=Categories.FUN;
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MANAGE_SERVER};
  this.ownerCommand=false;
  this.guildOnly=true;
}",0.9894419306184012
174094,"public UnImport(){
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.category=Categories.FUN;
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MANAGE_SERVER};
  this.ownerCommand=false;
  this.guildOnly=false;
}","public UnImport(){
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
  this.arguments=""String_Node_Str"";
  this.category=Categories.FUN;
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MANAGE_SERVER};
  this.ownerCommand=false;
  this.guildOnly=true;
}",0.9895052473763118
174095,"@Override protected void execute(CommandEvent event){
  EmbedBuilder builder=new EmbedBuilder();
  Member member;
  User author;
  author=event.getAuthor();
  String target;
  String reason;
  if (event.getArgs().isEmpty()) {
    event.replyWarning(""String_Node_Str"" + event.getClient().getPrefix() + ""String_Node_Str"");
    return;
  }
  try {
    String[] args=event.getArgs().split(""String_Node_Str"");
    target=args[0];
    reason=args[1];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    event.replyWarning(""String_Node_Str"" + event.getClient().getPrefix() + ""String_Node_Str"");
    return;
  }
  List<Member> list=FinderUtil.findMembers(target,event.getGuild());
  if (list.isEmpty()) {
    event.replyWarning(""String_Node_Str"" + target + ""String_Node_Str"");
    return;
  }
 else   if (list.size() > 1) {
    event.replyWarning(FormatUtil.listOfMembers(list,target));
    return;
  }
 else {
    member=list.get(0);
  }
  if (!event.getSelfMember().canInteract(member)) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (!event.getMember().canInteract(member)) {
    event.replyError(""String_Node_Str"");
    return;
  }
  String success=member.getAsMention();
  try {
    builder.setColor(Color.YELLOW);
    builder.setThumbnail(event.getGuild().getIconUrl());
    builder.setAuthor(event.getAuthor().getName(),null,event.getAuthor().getAvatarUrl());
    builder.setTitle(""String_Node_Str"");
    builder.setDescription(""String_Node_Str"" + event.getGuild().getName() + ""String_Node_Str""+ event.getAuthor().getName()+ ""String_Node_Str""+ event.getAuthor().getDiscriminator()+ ""String_Node_Str""+ ""String_Node_Str""+ reason+ ""String_Node_Str"");
    builder.setFooter(""String_Node_Str"",null);
    builder.setTimestamp(Instant.now());
    member.getUser().openPrivateChannel().queue(s -> s.sendMessage(new MessageBuilder().setEmbed(builder.build()).build()).queue((d) -> event.replySuccess(Messages.KICK_SUCCESS + success),(e) -> event.replyWarning(Messages.KICK_NODM + success)));
    event.getGuild().getController().kick(member).reason(""String_Node_Str"" + author.getName() + ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ reason).queue();
    ModLogging.logKick(event.getAuthor(),member,reason,event.getGuild(),event.getTextChannel(),event.getMessage());
  }
 catch (  Exception e) {
    event.replyError(Messages.KICK_ERROR + member.getAsMention());
    SimpleLog.getLog(""String_Node_Str"").fatal(e);
    e.printStackTrace();
  }
}","@Override protected void execute(CommandEvent event){
  EmbedBuilder builder=new EmbedBuilder();
  Member member;
  User author;
  author=event.getAuthor();
  String target;
  String reason;
  if (event.getArgs().isEmpty()) {
    event.replyWarning(""String_Node_Str"" + event.getClient().getPrefix() + ""String_Node_Str"");
    return;
  }
  try {
    String[] args=event.getArgs().split(""String_Node_Str"",2);
    target=args[0];
    reason=args[1];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    event.replyWarning(""String_Node_Str"" + event.getClient().getPrefix() + ""String_Node_Str"");
    return;
  }
  List<Member> list=FinderUtil.findMembers(target,event.getGuild());
  if (list.isEmpty()) {
    event.replyWarning(""String_Node_Str"" + target + ""String_Node_Str"");
    return;
  }
 else   if (list.size() > 1) {
    event.replyWarning(FormatUtil.listOfMembers(list,target));
    return;
  }
 else {
    member=list.get(0);
  }
  if (!event.getSelfMember().canInteract(member)) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (!event.getMember().canInteract(member)) {
    event.replyError(""String_Node_Str"");
    return;
  }
  String success=member.getAsMention();
  try {
    builder.setColor(Color.YELLOW);
    builder.setThumbnail(event.getGuild().getIconUrl());
    builder.setAuthor(event.getAuthor().getName(),null,event.getAuthor().getAvatarUrl());
    builder.setTitle(""String_Node_Str"");
    builder.setDescription(""String_Node_Str"" + event.getGuild().getName() + ""String_Node_Str""+ event.getAuthor().getName()+ ""String_Node_Str""+ event.getAuthor().getDiscriminator()+ ""String_Node_Str""+ ""String_Node_Str""+ reason+ ""String_Node_Str"");
    builder.setFooter(""String_Node_Str"",null);
    builder.setTimestamp(Instant.now());
    member.getUser().openPrivateChannel().queue(s -> s.sendMessage(new MessageBuilder().setEmbed(builder.build()).build()).queue((d) -> event.replySuccess(Messages.KICK_SUCCESS + success),(e) -> event.replyWarning(Messages.KICK_NODM + success)));
    event.getGuild().getController().kick(member).reason(""String_Node_Str"" + author.getName() + ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ reason).queue();
    ModLogging.logKick(event.getAuthor(),member,reason,event.getGuild(),event.getTextChannel(),event.getMessage());
  }
 catch (  Exception e) {
    event.replyError(Messages.KICK_ERROR + member.getAsMention());
    SimpleLog.getLog(""String_Node_Str"").fatal(e);
    e.printStackTrace();
  }
}",0.9995954692556634
174096,"public static void logKick(User author,Member target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getUser().getName()+ ""String_Node_Str""+ target.getUser().getDiscriminator()+ ""String_Node_Str""+ target.getUser().getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason+ ""String_Node_Str"").queue();
  }
}","public static void logKick(User author,Member target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getUser().getName()+ ""String_Node_Str""+ target.getUser().getDiscriminator()+ ""String_Node_Str""+ target.getUser().getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason).queue();
  }
}",0.9919114516815666
174097,"public static void logSoftban(User author,Member target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getUser().getName()+ ""String_Node_Str""+ target.getUser().getDiscriminator()+ ""String_Node_Str""+ target.getUser().getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason+ ""String_Node_Str"").queue();
  }
}","public static void logSoftban(User author,Member target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getUser().getName()+ ""String_Node_Str""+ target.getUser().getDiscriminator()+ ""String_Node_Str""+ target.getUser().getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason).queue();
  }
}",0.991932059447983
174098,"public static void logUnban(User author,User target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getName()+ ""String_Node_Str""+ target.getDiscriminator()+ ""String_Node_Str""+ target.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason+ ""String_Node_Str"").queue();
  }
}","public static void logUnban(User author,User target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getName()+ ""String_Node_Str""+ target.getDiscriminator()+ ""String_Node_Str""+ target.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason).queue();
  }
}",0.9916921731526016
174099,"public static void logHackban(User author,User target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getName()+ ""String_Node_Str""+ target.getDiscriminator()+ ""String_Node_Str""+ target.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason+ ""String_Node_Str"").queue();
  }
}","public static void logHackban(User author,User target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getName()+ ""String_Node_Str""+ target.getDiscriminator()+ ""String_Node_Str""+ target.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason).queue();
  }
}",0.9917066783064163
174100,"public static void logBan(User author,Member target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getUser().getName()+ ""String_Node_Str""+ target.getUser().getDiscriminator()+ ""String_Node_Str""+ target.getUser().getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason+ ""String_Node_Str"").queue();
  }
}","public static void logBan(User author,Member target,String reason,Guild guild,TextChannel channel,Message message){
  Settings set=bot.getSettings(guild);
  TextChannel tc=guild.getTextChannelById(set.getModLogId());
  OffsetDateTime time=message.getCreationTime();
  int hour=time.getHour();
  int min=time.getMinute();
  int sec=time.getSecond();
  if (tc == null) {
  }
 else   if (!tc.getGuild().getSelfMember().hasPermission(tc,Permission.MESSAGE_READ,Permission.MESSAGE_WRITE,Permission.MESSAGE_EMBED_LINKS,Permission.MESSAGE_HISTORY)) {
    guild.getOwner().getUser().openPrivateChannel().queue(s -> s.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue(null,(e) -> channel.sendMessage(Messages.MODLOG_NOPERMISSIONS).queue()));
  }
 else {
    tc.sendMessage(""String_Node_Str"" + hour + ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ author.getName()+ ""String_Node_Str""+ author.getDiscriminator()+ ""String_Node_Str""+ author.getId()+ ""String_Node_Str""+ target.getUser().getName()+ ""String_Node_Str""+ target.getUser().getDiscriminator()+ ""String_Node_Str""+ target.getUser().getId()+ ""String_Node_Str""+ ""String_Node_Str""+ reason).queue();
  }
}",0.991904559011504
174101,"public BotCPanel(){
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
  this.category=new Command.Category(""String_Node_Str"");
  this.children=new Command[]{new Status()};
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.ownerCommand=false;
  this.guildOnly=false;
}","public BotCPanel(){
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
  this.category=new Command.Category(""String_Node_Str"");
  this.children=new Command[]{new Status(),new Playing()};
  this.botPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.userPermissions=new Permission[]{Permission.MESSAGE_WRITE};
  this.ownerCommand=false;
  this.guildOnly=false;
}",0.9813829787234044
174102,"@Override protected void execute(CommandEvent event){
  if (!(event.isOwner()) || event.isCoOwner()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (event.getArgs().isEmpty()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (event.getArgs().equals(""String_Node_Str"")) {
    event.replyInDM(""String_Node_Str"" + ""String_Node_Str"");
    event.reactSuccess();
    return;
  }
  try {
    String status=event.getArgs();
    event.getJDA().getPresence().setStatus(OnlineStatus.valueOf(status));
    event.replySuccess(""String_Node_Str"" + event.getJDA().getPresence().getStatus() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    event.replyError(""String_Node_Str"");
    e.printStackTrace();
  }
}","@Override protected void execute(CommandEvent event){
  if (!(event.isOwner()) || event.isCoOwner()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (event.getArgs().isEmpty()) {
    event.replySuccess(""String_Node_Str"");
  }
  try {
    event.getJDA().getPresence().setGame(Game.of(event.getArgs()));
    event.replySuccess(""String_Node_Str"" + event.getJDA().getPresence().getGame() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    event.replyError(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.7712
174103,"@Override protected void execute(CommandEvent event){
  if (!(event.isOwner()) || event.isCoOwner()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  event.getTextChannel().sendMessage(""String_Node_Str"").queue();
  event.getJDA().shutdown();
}","@Override protected void execute(CommandEvent event){
  if (!(event.isOwner()) || event.isCoOwner()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  event.getTextChannel().sendMessage(""String_Node_Str"").complete();
  event.getJDA().shutdown();
}",0.9785575048732944
174104,"@Override protected void execute(CommandEvent event){
  if (!(event.isOwner()) || event.isCoOwner()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (event.getArgs().isEmpty()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  StringBuilder output=new StringBuilder();
  String finalOutput;
  try {
    Process p=Runtime.getRuntime().exec(event.getArgs());
    p.waitFor();
    BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));
    String runningLineOutput;
    while ((runningLineOutput=reader.readLine()) != null) {
      output.append(runningLineOutput).append(""String_Node_Str"");
    }
    if (output.toString().isEmpty()) {
      event.replySuccess(""String_Node_Str"");
      return;
    }
    finalOutput=output.substring(0,output.length() - 1);
  }
 catch (  IOException e) {
    event.replyError(""String_Node_Str"" + args + ""String_Node_Str"");
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
    event.replyError(""String_Node_Str"");
    return;
  }
  event.reply(""String_Node_Str"" + finalOutput + ""String_Node_Str"");
}","@Override protected void execute(CommandEvent event){
  if (!(event.isOwner()) || event.isCoOwner()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  if (event.getArgs().isEmpty()) {
    event.replyError(""String_Node_Str"");
    return;
  }
  StringBuilder output=new StringBuilder();
  String finalOutput;
  try {
    Process p=Runtime.getRuntime().exec(event.getArgs());
    p.waitFor();
    BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));
    String runningLineOutput;
    while ((runningLineOutput=reader.readLine()) != null) {
      output.append(runningLineOutput).append(""String_Node_Str"");
    }
    System.out.println(output.toString());
    if (output.toString().isEmpty()) {
      event.replySuccess(""String_Node_Str"");
      return;
    }
    finalOutput=output.substring(0,output.length() - 1);
  }
 catch (  IOException e) {
    event.replyError(""String_Node_Str"" + args + ""String_Node_Str"");
    return;
  }
catch (  IllegalArgumentException e) {
    event.replyError(""String_Node_Str"");
  }
catch (  Exception e) {
    e.printStackTrace();
    event.replyError(""String_Node_Str"");
    return;
  }
  event.reply(""String_Node_Str"" + finalOutput + ""String_Node_Str"");
}",0.9455636519502786
174105,"protected void markFluidDirty(){
}","protected void markFluidDirty(){
  markDirty();
}",0.8192771084337349
174106,"protected void finish(){
  RenderHelper.enableStandardItemLighting();
}","protected void finish(){
  GlStateManager.enableCull();
  RenderHelper.enableStandardItemLighting();
}",0.8208092485549133
174107,"@Override public void grow(World worldIn,Random rand,BlockPos pos,IBlockState state){
  BlockPos posDown=pos.down();
  if (worldIn.isAirBlock(posDown) && (rand.nextInt(this.grapeSpawnRate) == 0)) {
    setGrapeBlock(worldIn,posDown,state);
  }
  if (worldIn.rand.nextInt(this.grapeLeavesGrowthRate) == 0) {
    if (canGrowOutwardsOnRope(worldIn,pos)) {
      final EnumFacing dir=BlockCheck.DIR4[rand.nextInt(4)];
      BlockPos posDir=pos.add(dir.getFrontOffsetX(),0,dir.getFrontOffsetZ());
      if (canGrowHere(worldIn,posDir)) {
        int type=state.getValue(SUBTYPE);
        worldIn.setBlockState(posDir,getDefaultState().withProperty(SUBTYPE,type),BlockFlags.UPDATE_AND_SYNC);
      }
    }
  }
}","@Override public void grow(World worldIn,Random rand,BlockPos pos,IBlockState state){
  BlockPos posDown=pos.down();
  if (worldIn.isAirBlock(posDown) && (rand.nextInt(this.grapeSpawnRate) == 0)) {
    setGrapeBlock(worldIn,posDown,state);
  }
  if (worldIn.rand.nextInt(this.grapeLeavesGrowthRate) == 0) {
    if (canGrowOutwardsOnRope(worldIn,pos)) {
      final EnumFacing dir=BlockCheck.DIR4[rand.nextInt(4)];
      BlockPos posDir=pos.add(dir.getFrontOffsetX(),0,dir.getFrontOffsetZ());
      if (canGrowHere(worldIn,posDir)) {
        int type=state.getValue(SUBTYPE);
        worldIn.setBlockState(posDir,getDefaultState().withProperty(SUBTYPE,type),BlockFlags.UPDATE_AND_SYNC);
        BlockPos below=posDir.down();
        IBlockState stateBelow=worldIn.getBlockState(below);
        if ((stateBelow.getBlock() instanceof BlockGrapeVine1)) {
          BlockGrapeVine1 blockBelow=(BlockGrapeVine1)stateBelow.getBlock();
          if (stateBelow.getValue(BlockGrapeVineBase.AGE) < blockBelow.getMaxAge()) {
            worldIn.setBlockState(below,stateBelow.withProperty(BlockGrapeVineBase.AGE,blockBelow.getMaxAge()),BlockFlags.UPDATE_AND_SYNC);
          }
        }
      }
    }
  }
}",0.7421052631578947
174108,"@Override public void updateTick(World worldIn,BlockPos pos,IBlockState state,Random rand){
  super.updateTick(worldIn,pos,state,rand);
  if (canUpdateGrowth(worldIn,pos)) {
    final Event.Result allowGrowthResult=Event.Result.DEFAULT;
    if (Event.Result.DENY == allowGrowthResult)     return;
    final float f=this.getGrowthRate(worldIn,pos);
    final boolean continueGrowth=rand.nextInt((int)(getGrowthRateMultiplier() / f) + 1) == 0;
    if (Event.Result.ALLOW == allowGrowthResult || continueGrowth) {
      doGrowth(worldIn,pos,state);
    }
  }
}","@Override public void updateTick(World worldIn,BlockPos pos,IBlockState state,Random rand){
  if (canUpdateGrowth(worldIn,pos)) {
    final Event.Result allowGrowthResult=Event.Result.DEFAULT;
    if (Event.Result.DENY == allowGrowthResult)     return;
    final float f=this.getGrowthRate(worldIn,pos);
    final boolean continueGrowth=rand.nextInt((int)(getGrowthRateMultiplier() / f) + 1) == 0;
    if (Event.Result.ALLOW == allowGrowthResult || continueGrowth) {
      doGrowth(worldIn,pos,state);
      return;
    }
  }
  this.checkAndDropBlock(worldIn,pos,state);
}",0.908768821966342
174109,"@Override public int getMetaFromState(IBlockState state){
  return state.getValue(TYPE_ORIENT).ordinal() | (state.getValue(TYPE_ORIENT).ordinal() << 1);
}","@Override public int getMetaFromState(IBlockState state){
  return state.getValue(TYPE_ORIENT).ordinal() | (state.getValue(TYPE_PRESSED).ordinal() << 1);
}",0.970873786407767
174110,"public static void registerSpecialRenders(){
  ClientRegistry.bindTileEntitySpecialRenderer(PREVTileEntityBrewKettle.class,new RenderBrewKettle());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityCultureJar.class,new RenderCultureJar());
}","public static void registerSpecialRenders(){
  ClientRegistry.bindTileEntitySpecialRenderer(PREVTileEntityBrewKettle.class,new RenderBrewKettle());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityCultureJar.class,new RenderCultureJar());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityFruitPress.class,new RenderFruitPress());
}",0.8336134453781513
174111,"@Override protected boolean shouldDropTileStack(World world,BlockPos pos,IBlockState state,int fortune){
  return true;
}","@Override protected boolean shouldDropTileStack(IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  return true;
}",0.9397590361445785
174112,"protected boolean shouldDropTileStack(World world,BlockPos pos,IBlockState state,int fortune){
  return false;
}","protected boolean shouldDropTileStack(IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  return false;
}",0.935064935064935
174113,"protected void setTileTagCompound(World world,BlockPos pos,ItemStack stack,NBTTagCompound tag){
  final Item item=stack.getItem();
  if (item instanceof IItemTileBlock) {
    final IItemTileBlock itb=(IItemTileBlock)item;
    itb.setTileTagCompound(stack,tag);
  }
 else {
    GrowthcraftCore.logger.error(""String_Node_Str"",stack,this);
  }
}","protected void setTileTagCompound(IBlockAccess world,BlockPos pos,ItemStack stack,NBTTagCompound tag){
  final Item item=stack.getItem();
  if (item instanceof IItemTileBlock) {
    final IItemTileBlock itb=(IItemTileBlock)item;
    itb.setTileTagCompound(stack,tag);
  }
 else {
    GrowthcraftCore.logger.error(""String_Node_Str"",stack,this);
  }
}",0.975397973950796
174114,"private void getDefaultDrops(List<ItemStack> ret,World world,BlockPos pos,IBlockState state,int fortune){
  final int count=quantityDropped(state,fortune,world.rand);
  for (int i=0; i < count; ++i) {
    final Item item=getItemDropped(state,world.rand,fortune);
    if (item != null) {
      ret.add(new ItemStack(item,1,damageDropped(state)));
    }
  }
}","private void getDefaultDrops(List<ItemStack> ret,IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  final int count=quantityDropped(state,fortune,rand);
  for (int i=0; i < count; ++i) {
    final Item item=getItemDropped(state,rand,fortune);
    if (item != null) {
      ret.add(new ItemStack(item,1,damageDropped(state)));
    }
  }
}",0.9590973201692524
174115,"public ArrayList<ItemStack> getDrops(World world,BlockPos pos,IBlockState state,int fortune){
  final ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  if (shouldDropTileStack(world,pos,state,fortune)) {
    getTileItemStackDrops(ret,world,pos,state,fortune);
  }
 else {
    getDefaultDrops(ret,world,pos,state,fortune);
  }
  return ret;
}","@Override public List<ItemStack> getDrops(IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  final ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  if (shouldDropTileStack(world,pos,state,fortune)) {
    getTileItemStackDrops(ret,world,pos,state,fortune);
  }
 else {
    getDefaultDrops(ret,world,pos,state,fortune);
  }
  return ret;
}",0.3323863636363636
174116,"protected void getTileItemStackDrops(List<ItemStack> ret,World world,BlockPos pos,IBlockState state,int fortune){
  final TileEntity te=getTileEntity(world,pos);
  if (te instanceof INBTItemSerializable) {
    final NBTTagCompound tag=new NBTTagCompound();
    ((INBTItemSerializable)te).writeToNBTForItem(tag);
    final ItemStack stack=new ItemStack(this,1,getMetaFromState(state));
    setTileTagCompound(world,pos,stack,tag);
    ret.add(stack);
  }
 else {
    getDefaultDrops(ret,world,pos,state,fortune);
  }
}","protected void getTileItemStackDrops(List<ItemStack> ret,IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  final TileEntity te=getTileEntity(world,pos);
  if (te instanceof INBTItemSerializable) {
    final NBTTagCompound tag=new NBTTagCompound();
    ((INBTItemSerializable)te).writeToNBTForItem(tag);
    final ItemStack stack=new ItemStack(this,1,getMetaFromState(state));
    setTileTagCompound(world,pos,stack,tag);
    ret.add(stack);
  }
 else {
    getDefaultDrops(ret,world,pos,state,fortune);
  }
}",0.983669548511047
174117,"@Override protected boolean shouldDropTileStack(World world,BlockPos pos,IBlockState state,int fortune){
  return false;
}","@Override protected boolean shouldDropTileStack(IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  return false;
}",0.9402390438247012
174118,"@Override public ArrayList<ItemStack> getDrops(World world,BlockPos pos,IBlockState state,int fortune){
  final ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  final TileEntityCheeseBlock te=getTileEntity(world,pos);
  if (te != null) {
    te.populateDrops(ret);
  }
  return ret;
}","@Override public List<ItemStack> getDrops(IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  final ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  final TileEntityCheeseBlock te=getTileEntity(world,pos);
  if (te != null) {
    te.populateDrops(ret);
  }
  return ret;
}",0.8797250859106529
174119,"@Override protected void getTileItemStackDrops(List<ItemStack> ret,World world,BlockPos pos,IBlockState state,int fortune){
  final TileEntityCheeseBlock te=getTileEntity(world,pos);
  if (te != null) {
    ret.add(te.asItemStack());
  }
 else {
    super.getTileItemStackDrops(ret,world,pos,state,fortune);
  }
}","@Override protected void getTileItemStackDrops(List<ItemStack> ret,IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  final TileEntityCheeseBlock te=getTileEntity(world,pos);
  if (te != null) {
    ret.add(te.asItemStack());
  }
 else {
    super.getTileItemStackDrops(ret,world,pos,state,fortune);
  }
}",0.9731437598736176
174120,"@Override protected ItemStack createHarvestedBlockItemStack(World world,EntityPlayer player,BlockPos pos,IBlockState state){
  final TileEntityCheeseBlock te=getTileEntity(world,pos);
  if (te != null) {
    return te.asItemStack();
  }
  return new ItemStack(this,1,state.getBlock().getMetaFromState(state));
}","@Override protected ItemStack createHarvestedBlockItemStack(World world,EntityPlayer player,BlockPos pos,IBlockState state){
  final TileEntityCheeseBlock te=getTileEntity(world,pos);
  if (te != null) {
    return te.asItemStack();
  }
  return new ItemStack(this,1,damageDropped(state));
}",0.9302325581395348
174121,"@SideOnly(Side.CLIENT) @Override public void getSubItems(Item itemIn,CreativeTabs tab,NonNullList<ItemStack> subItems){
  for (  T type : typeLookup) {
    ICheeseBlockStackFactory blockStackFactory=type.getCheeseBlocks();
    ItemStack stack=blockStackFactory.asItemStackForStage(blockStackFactory.getInitialStage());
    subItems.add(stack);
  }
}","@SideOnly(Side.CLIENT) @Override public void getSubItems(Item itemIn,CreativeTabs tab,NonNullList<ItemStack> subItems){
  for (  T type : typeLookup) {
    ICheeseBlockStackFactory blockStackFactory=type.getCheeseBlocks();
    ItemStack stack=blockStackFactory.asStackForStage(blockStackFactory.getInitialStage());
    subItems.add(stack);
  }
}",0.9942363112391932
174122,"public ItemStack yankSlices(int count,boolean doYank){
  final int yankedCount=MathHelper.clamp(count,0,getSlices());
  final int quantity=yankedCount * cheesePerSlice;
  if (quantity > 0) {
    if (doYank) {
      this.slices-=yankedCount;
      setStage(EnumCheeseStage.CUT);
    }
    return cheese.getCheeseItems().asStack(quantity);
  }
  return null;
}","public ItemStack yankSlices(int count,boolean doYank){
  final int yankedCount=MathHelper.clamp(count,0,getSlices());
  final int quantity=yankedCount * cheesePerSlice;
  if (quantity > 0) {
    if (doYank) {
      this.slices-=yankedCount;
      setStage(EnumCheeseStage.CUT);
    }
    return cheese.getCheeseItems().asStack(quantity);
  }
  return ItemStack.EMPTY;
}",0.9738651994497936
174123,"@Override public ICheeseBlockStackFactory getCheeseBlocks(){
  return new ICheeseBlockStackFactory(){
    @Override public ItemStack asStackForStage(    int size,    EnumCheeseStage stage){
      return GrowthcraftMilkBlocks.agedCheeseBlock.asStack(size,CheeseUtils.getItemMetaFor(AgedCheeseTypes.this,stage));
    }
    @Override public ItemStack asItemStackForStage(    int size,    EnumCheeseStage stage){
      return GrowthcraftMilkItems.agedCheeseBlockItem.asStack(size,CheeseUtils.getItemMetaFor(AgedCheeseTypes.this,stage));
    }
    @Override public EnumCheeseStage getInitialStage(){
      return EnumCheeseStage.UNAGED;
    }
  }
;
}","@Override public ICheeseBlockStackFactory getCheeseBlocks(){
  return new ICheeseBlockStackFactory(){
    @Override public ItemStack asStackForStage(    int size,    EnumCheeseStage stage){
      return GrowthcraftMilkBlocks.agedCheeseBlock.asStack(size,CheeseUtils.getItemMetaFor(AgedCheeseTypes.this,stage));
    }
    @Override public EnumCheeseStage getInitialStage(){
      return EnumCheeseStage.UNAGED;
    }
  }
;
}",0.7921348314606742
174124,"public static void register(){
  thistle.register(false);
  cheeseVat.getBlock().setCreativeTab(tabGrowthcraft);
  cheeseVat.register(true);
  pancheon.getBlock().setCreativeTab(tabGrowthcraft);
  pancheon.register(true);
  churn.getBlock().setCreativeTab(tabGrowthcraft);
  churn.register(true);
  agedCheeseBlock.register(new ResourceLocation(Reference.MODID,""String_Node_Str""),false);
}","public static void register(){
  thistle.register(false);
  cheeseVat.getBlock().setCreativeTab(tabGrowthcraft);
  cheeseVat.register(true);
  pancheon.getBlock().setCreativeTab(tabGrowthcraft);
  pancheon.register(true);
  churn.getBlock().setCreativeTab(tabGrowthcraft);
  churn.register(true);
  agedCheeseBlock.getBlock().setCreativeTab(tabGrowthcraft);
  agedCheeseBlock.register(new ResourceLocation(Reference.MODID,""String_Node_Str""),false);
}",0.9272943980929678
174125,"public static void register(){
  thistle.getItem().setCreativeTab(tabGrowthcraft);
  thistle.register();
  registerItem(thistle_seed);
  stomach.getItem().setCreativeTab(tabGrowthcraft);
  stomach.register();
  registerItem(itemCheeseCloth);
  starterCulture.getItem().setCreativeTab(GrowthcraftCore.tabGrowthcraft);
  starterCulture.register();
  butter.getItem().setCreativeTab(GrowthcraftCore.tabGrowthcraft);
  butter.register();
  registerItem(itemIceCream);
  registerItem(itemYogurt);
  registerItem(itemAgedCheeseSlice);
  registerItem(itemWaxedCheeseSlice);
  registerItem(itemSimpleCheeseSlice);
  agedCheeseBlockItem.getItem().setCreativeTab(GrowthcraftCore.tabGrowthcraft);
  agedCheeseBlockItem.register(new ResourceLocation(Reference.MODID,""String_Node_Str""));
  registerOres();
}","public static void register(){
  thistle.getItem().setCreativeTab(tabGrowthcraft);
  thistle.register();
  registerItem(thistle_seed);
  stomach.getItem().setCreativeTab(tabGrowthcraft);
  stomach.register();
  registerItem(itemCheeseCloth);
  starterCulture.getItem().setCreativeTab(GrowthcraftCore.tabGrowthcraft);
  starterCulture.register();
  butter.getItem().setCreativeTab(GrowthcraftCore.tabGrowthcraft);
  butter.register();
  registerItem(itemIceCream);
  registerItem(itemYogurt);
  registerItem(itemAgedCheeseSlice);
  registerItem(itemWaxedCheeseSlice);
  registerItem(itemSimpleCheeseSlice);
  agedCheeseBlockItem.register(GrowthcraftMilkBlocks.agedCheeseBlock.getBlock().getRegistryName());
  registerOres();
}",0.8768926925608953
174126,"@Override public void showHighBaskNotice(){
  mViewHolder.getTvBaskNotice().setText(R.string.weather_middle_bask);
}","@Override public void showHighBaskNotice(){
  mViewHolder.getTvBaskNotice().setText(R.string.weather_high_bask);
}",0.9652173913043478
174127,"/** 
 * 根据值的定义类型调用PreparedStatement相应的set方法，将值加入到SQL参数中
 * @param ps PreparedStatement实例
 * @param value 准备加入到SQL参数中的值
 * @param index 当前参数索引
 * @throws SQLException
 */
protected void setValue(PreparedStatement ps,Object value,int index) throws SQLException {
  if (value == null) {
    ps.setNull(index,java.sql.Types.NULL);
    return;
  }
  Class<?> type=value.getClass();
  if (ClassUtils.isPrimitiveWrapper(type)) {
    type=ClassUtils.resolvePrimitiveClassName(type);
  }
  if (int.class.isAssignableFrom(type)) {
    ps.setInt(index,(Integer)value);
  }
 else   if (String.class.isAssignableFrom(type)) {
    ps.setString(index,(String)value);
  }
 else   if (long.class.isAssignableFrom(type)) {
    ps.setLong(index,(Long)value);
  }
 else   if (boolean.class.isAssignableFrom(type)) {
    ps.setBoolean(index,(Boolean)value);
  }
 else   if (double.class.isAssignableFrom(type)) {
    ps.setDouble(index,(Double)value);
  }
 else   if (char.class.isAssignableFrom(type)) {
    ps.setString(index,(Character)value + ""String_Node_Str"");
  }
 else   if (short.class.isAssignableFrom(type)) {
    ps.setShort(index,(Short)value);
  }
 else   if (float.class.isAssignableFrom(type)) {
    ps.setFloat(index,(Float)value);
  }
 else   if (byte.class.isAssignableFrom(type)) {
    ps.setByte(index,(Byte)value);
  }
 else   if (type.isArray()) {
    ps.setArray(index,(Array)value);
  }
 else   if (value instanceof java.sql.Timestamp) {
    ps.setTimestamp(index,(java.sql.Timestamp)value);
  }
 else   if (value instanceof java.sql.Date) {
    ps.setDate(index,(java.sql.Date)value);
  }
 else   if (value instanceof java.util.Date) {
    ps.setTimestamp(index,new java.sql.Timestamp(((java.util.Date)value).getTime()));
  }
 else   if (value instanceof java.sql.Time) {
    ps.setTime(index,(java.sql.Time)value);
  }
}","/** 
 * 根据值的定义类型调用PreparedStatement相应的set方法，将值加入到SQL参数中
 * @param ps PreparedStatement实例
 * @param value 准备加入到SQL参数中的值
 * @param index 当前参数索引
 * @throws SQLException
 */
protected void setValue(PreparedStatement ps,Object value,int index) throws SQLException {
  if (value == null) {
    ps.setNull(index,java.sql.Types.NULL);
    return;
  }
  Class<?> type=value.getClass();
  if (ClassUtils.isPrimitiveWrapper(type)) {
    type=ClassUtils.resolvePrimitiveClassName(type);
  }
  if (int.class.isAssignableFrom(type)) {
    ps.setInt(index,(Integer)value);
  }
 else   if (String.class.isAssignableFrom(type)) {
    ps.setString(index,(String)value);
  }
 else   if (long.class.isAssignableFrom(type)) {
    ps.setLong(index,(Long)value);
  }
 else   if (boolean.class.isAssignableFrom(type)) {
    ps.setBoolean(index,(Boolean)value);
  }
 else   if (double.class.isAssignableFrom(type)) {
    ps.setDouble(index,(Double)value);
  }
 else   if (char.class.isAssignableFrom(type)) {
    ps.setString(index,(Character)value + ""String_Node_Str"");
  }
 else   if (short.class.isAssignableFrom(type)) {
    ps.setShort(index,(Short)value);
  }
 else   if (float.class.isAssignableFrom(type)) {
    ps.setFloat(index,(Float)value);
  }
 else   if (byte.class.isAssignableFrom(type)) {
    ps.setByte(index,(Byte)value);
  }
 else   if (Blob.class.isAssignableFrom(type)) {
    ps.setBlob(index,(Blob)value);
  }
 else   if (type.isArray()) {
    ps.setArray(index,(Array)value);
  }
 else   if (value instanceof java.sql.Timestamp) {
    ps.setTimestamp(index,(java.sql.Timestamp)value);
  }
 else   if (value instanceof java.sql.Date) {
    ps.setDate(index,(java.sql.Date)value);
  }
 else   if (value instanceof java.util.Date) {
    ps.setTimestamp(index,new java.sql.Timestamp(((java.util.Date)value).getTime()));
  }
 else   if (value instanceof java.sql.Time) {
    ps.setTime(index,(java.sql.Time)value);
  }
}",0.8005347593582888
174128,"@Override public String getTag(){
  String tag=String.format(""String_Node_Str"",credentials.getRegistryURL(),credentials.getUsername(),credentials.getRepository(),super.getTag());
  logger.info(""String_Node_Str"",tag);
  return tag;
}","@Override public String getTag(){
  String registryUrl=credentials.getRegistryURL();
  if (!registryUrl.endsWith(""String_Node_Str"")) {
    registryUrl=registryUrl + ""String_Node_Str"";
  }
  String username=credentials.getUsername();
  if (!username.isEmpty()) {
    username+=""String_Node_Str"";
  }
  String tag=String.format(""String_Node_Str"",registryUrl,username,credentials.getRepository(),super.getTag());
  logger.info(""String_Node_Str"",tag);
  return tag;
}",0.3050359712230215
174129,"/** 
 * Creates a script to delete the S3Bucket and the deployed Stack. Note: May or may not be included in the final version. Currently used for quicker manual debugging.
 */
private void writeCleanUpScript() throws IOException {
  logger.debug(""String_Node_Str"");
  BashScript cleanupScript=new BashScript(cfnModule.getFileAccess(),FILENAME_CLEANUP);
  cleanupScript.append(CLI_COMMAND_DELETEBUCKET + cfnModule.getBucketName());
  cleanupScript.append(CLI_COMMAND_DELETESTACK + CLI_PARAM_STACKNAME + cfnModule.getStackName());
}","/** 
 * Creates a script to delete the S3Bucket and the deployed Stack. Note: May or may not be included in the final version. Currently used for quicker manual debugging.
 */
private void writeCleanUpScript() throws IOException {
  logger.debug(""String_Node_Str"");
  BashScript cleanupScript=new BashScript(cfnModule.getFileAccess(),FILENAME_CLEANUP);
  cleanupScript.append(CLI_COMMAND_DELETEBUCKET + cfnModule.getBucketName() + ""String_Node_Str""+ CLI_PARAM_FORCE);
  cleanupScript.append(CLI_COMMAND_DELETESTACK + CLI_PARAM_STACKNAME + cfnModule.getStackName());
}",0.9662716499544212
174130,"/** 
 * creates a service which depends on the template add it to the manifest
 */
private void createService() throws IOException {
  ArrayList<String> services=new ArrayList<>();
  services.add(String.format(""String_Node_Str"",SERVICE.getName()));
  for (  Map.Entry<String,CloudFoundryServiceType> service : app.getServices().entrySet()) {
    services.add(String.format(""String_Node_Str"",service.getKey()));
  }
  for (  String service : services) {
    fileAccess.access(MANIFEST).appendln(service).close();
  }
}","/** 
 * creates a service which depends on the template add it to the manifest
 */
private void createService() throws IOException {
  Map<String,CloudFoundryServiceType> appServices=app.getServices();
  if (!appServices.isEmpty()) {
    ArrayList<String> services=new ArrayList<>();
    services.add(String.format(""String_Node_Str"",SERVICE.getName()));
    for (    Map.Entry<String,CloudFoundryServiceType> service : appServices.entrySet()) {
      services.add(String.format(""String_Node_Str"",service.getKey()));
    }
    for (    String service : services) {
      fileAccess.access(MANIFEST_PATH).appendln(service).close();
    }
  }
}",0.8687392055267703
174131,"/** 
 * creates a deploy shell script
 */
private void createDeployScript() throws IOException {
  BashScript deployScript=new BashScript(fileAccess,FILEPRAEFIX_DEPLOY + app.getName());
  deployScript.append(EnvironmentCheck.checkEnvironment(""String_Node_Str""));
  if (app.getProvider() != null && !app.getServices().isEmpty()) {
    addProviderServiceOfferings(deployScript);
    for (    Map.Entry<String,CloudFoundryServiceType> service : app.getServices().entrySet()) {
      String description=service.getValue().getName();
      CloudFoundryProvider provider=app.getProvider();
      List<ServiceOffering> services=provider.getOfferedService();
      Boolean isSet=false;
      for (      ServiceOffering offeredService : services) {
        if (offeredService.getDescription().toLowerCase().indexOf(description.toLowerCase()) != -1) {
          for (          ServicePlan plan : offeredService.getServicePlans()) {
            if (plan.getFree()) {
              deployScript.append(String.format(""String_Node_Str"",CLI_CREATE_SERVICE,offeredService.getLabel(),plan.getName(),service.getKey()));
              isSet=true;
              break;
            }
          }
        }
      }
      if (!isSet) {
        deployScript.append(CLI_CREATE_SERVICE_DEFAULT + service);
      }
    }
  }
 else {
    for (    Map.Entry<String,CloudFoundryServiceType> service : app.getServices().entrySet()) {
      deployScript.append(CLI_CREATE_SERVICE_DEFAULT + service.getKey());
    }
  }
  deployScript.append(CLI_PUSH + app.getName());
}","/** 
 * creates a deploy shell script
 */
private void createDeployScript() throws IOException {
  BashScript deployScript=new BashScript(fileAccess,FILEPRAEFIX_DEPLOY + app.getName());
  deployScript.append(EnvironmentCheck.checkEnvironment(""String_Node_Str""));
  if (app.getProvider() != null && !app.getServices().isEmpty()) {
    addProviderServiceOfferings(deployScript);
    for (    Map.Entry<String,CloudFoundryServiceType> service : app.getServices().entrySet()) {
      String description=service.getValue().getName();
      CloudFoundryProvider provider=app.getProvider();
      List<ServiceOffering> services=provider.getOfferedService();
      Boolean isSet=false;
      for (      ServiceOffering offeredService : services) {
        if (offeredService.getDescription().toLowerCase().indexOf(description.toLowerCase()) != -1) {
          for (          ServicePlan plan : offeredService.getServicePlans()) {
            if (plan.getFree()) {
              deployScript.append(String.format(""String_Node_Str"",CLI_CREATE_SERVICE,offeredService.getLabel(),plan.getName(),service.getKey()));
              isSet=true;
              break;
            }
          }
        }
      }
      if (!isSet) {
        deployScript.append(CLI_CREATE_SERVICE_DEFAULT + service);
      }
    }
  }
 else {
    for (    Map.Entry<String,CloudFoundryServiceType> service : app.getServices().entrySet()) {
      deployScript.append(CLI_CREATE_SERVICE_DEFAULT + service.getKey());
    }
  }
  deployScript.append(CLI_PUSH + app.getName() + CLI_PATH_TO_MANIFEST+ MANIFEST_NAME);
}",0.9877892030848328
174132,"private void createBuildpackAdditionsFile() throws IOException, JSONException {
  JSONObject buildPackAdditionsJson=new JSONObject();
  JSONArray buildPacks=new JSONArray();
  for (  String buildPack : app.getBuildpackAdditions()) {
    buildPacks.put(buildPack);
  }
  buildPackAdditionsJson.put(BUILDPACK_OBJECT_PHP,buildPacks);
  fileAccess.access(BUILDPACK_FILEPATH_PHP).append(buildPackAdditionsJson.toString(4)).close();
}","private void createBuildpackAdditionsFile() throws IOException, JSONException {
  JSONObject buildPackAdditionsJson=new JSONObject();
  JSONArray buildPacks=new JSONArray();
  for (  String buildPack : app.getBuildpackAdditions()) {
    buildPacks.put(buildPack);
  }
  buildPackAdditionsJson.put(BUILDPACK_OBJECT_PHP,buildPacks);
  String path;
  if (app.getPathToApplication() != null) {
    path=String.format(""String_Node_Str"",app.getPathToApplication(),BUILDPACK_FILEPATH_PHP);
  }
 else {
    path=BUILDPACK_FILEPATH_PHP;
  }
  fileAccess.access(path).append(buildPackAdditionsJson.toString(4)).close();
}",0.7911453320500481
174133,"private void createManifest() throws IOException {
  createManifestHead();
  createAttributes();
  createEnvironmentVariables();
  createService();
}","private void createManifest() throws IOException {
  createManifestHead();
  addPathToApplication();
  createAttributes();
  createEnvironmentVariables();
  createService();
}",0.9197530864197532
174134,"private void createManifestHead() throws IOException {
  String manifestHead=String.format(""String_Node_Str"",MANIFESTHEAD,NAMEBLOCK,app.getName());
  fileAccess.access(MANIFEST).appendln(manifestHead).close();
}","private void createManifestHead() throws IOException {
  String manifestHead=String.format(""String_Node_Str"",MANIFESTHEAD,NAMEBLOCK,app.getName());
  fileAccess.access(MANIFEST_PATH).appendln(manifestHead).close();
}",0.9882903981264636
174135,"private void createEnvironmentVariables() throws IOException {
  ArrayList<String> environmentVariables=new ArrayList<>();
  environmentVariables.add(String.format(""String_Node_Str"",ENVIRONMENT.getName()));
  for (  Map.Entry<String,String> entry : app.getEnvironmentVariables().entrySet()) {
    environmentVariables.add(String.format(""String_Node_Str"",entry.getKey(),entry.getValue()));
  }
  for (  String env : environmentVariables) {
    fileAccess.access(MANIFEST).appendln(env).close();
  }
}","private void createEnvironmentVariables() throws IOException {
  Map<String,String> envVariables=app.getEnvironmentVariables();
  if (!envVariables.isEmpty()) {
    ArrayList<String> environmentVariables=new ArrayList<>();
    environmentVariables.add(String.format(""String_Node_Str"",ENVIRONMENT.getName()));
    for (    Map.Entry<String,String> entry : envVariables.entrySet()) {
      environmentVariables.add(String.format(""String_Node_Str"",entry.getKey(),entry.getValue()));
    }
    for (    String env : environmentVariables) {
      fileAccess.access(MANIFEST_PATH).appendln(env).close();
    }
  }
}",0.8483754512635379
174136,"private void createAttributes() throws IOException {
  if (!app.getAttributes().isEmpty()) {
    ArrayList<String> attributes=new ArrayList<>();
    for (    Map.Entry<String,String> attribute : app.getAttributes().entrySet()) {
      attributes.add(String.format(""String_Node_Str"",attribute.getKey(),attribute.getValue()));
    }
    for (    String attribute : attributes) {
      fileAccess.access(MANIFEST).appendln(attribute).close();
    }
  }
}","private void createAttributes() throws IOException {
  if (!app.getAttributes().isEmpty()) {
    ArrayList<String> attributes=new ArrayList<>();
    for (    Map.Entry<String,String> attribute : app.getAttributes().entrySet()) {
      attributes.add(String.format(""String_Node_Str"",attribute.getKey(),attribute.getValue()));
    }
    for (    String attribute : attributes) {
      fileAccess.access(MANIFEST_PATH).appendln(attribute).close();
    }
  }
}",0.9944873208379272
174137,"private void handleStandardLifecycle(RootNode node){
  for (  OperationVariable lifecycleInput : node.getStandardLifecycle().getInputs()) {
    addEnvironmentVariable(lifecycleInput);
  }
  for (  Operation operation : node.getStandardLifecycle().getOperations()) {
    if (operation.getArtifact().isPresent()) {
      myApp.addFilePath(operation.getArtifact().get().getFilePath());
    }
    for (    String dependency : operation.getDependencies()) {
      myApp.addFilePath(dependency);
    }
    for (    OperationVariable input : operation.getInputs()) {
      addEnvironmentVariable(input);
    }
  }
}","private void handleStandardLifecycle(RootNode node,Boolean isTopNode){
  for (  OperationVariable lifecycleInput : node.getStandardLifecycle().getInputs()) {
    addEnvironmentVariable(lifecycleInput);
  }
  for (  Operation operation : node.getStandardLifecycle().getOperations()) {
    if (operation.getArtifact().isPresent()) {
      String path=operation.getArtifact().get().getFilePath();
      setPathToApplication(path,isTopNode);
    }
    for (    String dependency : operation.getDependencies()) {
      myApp.addFilePath(dependency);
    }
    for (    OperationVariable input : operation.getInputs()) {
      addEnvironmentVariable(input);
    }
  }
}",0.6341463414634146
174138,"@Override public void visit(WebApplication node){
  myApp.setName(node.getNodeName());
  handleStandardLifecycle(node);
}","@Override public void visit(WebApplication node){
  myApp.setName(node.getNodeName());
  handleStandardLifecycle(node,true);
}",0.979757085020243
174139,"@Test public void buildpackAdditons() throws Exception {
  fileCreator.createFiles();
  File targetFile=new File(targetDir,BUILDPACK_FILEPATH_PHP);
  String buildpackContent=FileUtils.readFileToString(targetFile);
  assertEquals(expectedBuildpackcontent,buildpackContent);
}","@Test public void buildpackAdditons() throws Exception {
  String mainApplicationPath=""String_Node_Str"";
  String expectedPath=""String_Node_Str"" + ""String_Node_Str"" + BUILDPACK_FILEPATH_PHP;
  testApp.setPathToApplication(mainApplicationPath);
  testApp.addBuildpack(buildPack1);
  testApp.addBuildpack(buildPack2);
  String expectedBuildpackcontent=""String_Node_Str"" + ""String_Node_Str"" + BUILDPACK_OBJECT_PHP + ""String_Node_Str""+ ""String_Node_Str""+ buildPack1+ ""String_Node_Str""+ ""String_Node_Str""+ buildPack2+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  fileCreator.createFiles();
  File targetFile=new File(targetDir,expectedPath);
  String buildpackContent=FileUtils.readFileToString(targetFile);
  assertEquals(expectedBuildpackcontent,buildpackContent);
}",0.4015223596574691
174140,"@Test public void createFiles() throws Exception {
  fileCreator.createFiles();
  File targetFile=new File(targetDir,MANIFEST);
  File deployFile=new File(targetDir,outputPath + FILEPRAEFIX_DEPLOY + appName+ FILESUFFIX_DEPLOY);
  File buildPackAdditions=new File(targetDir,BUILDPACK_FILEPATH_PHP);
  assertTrue(targetFile.exists());
  assertTrue(deployFile.exists());
  assertTrue(buildPackAdditions.exists());
}","@Test public void createFiles() throws Exception {
  fileCreator.createFiles();
  File targetFile=new File(targetDir,MANIFEST_PATH);
  File deployFile=new File(targetDir,outputPath + FILEPRAEFIX_DEPLOY + appName+ FILESUFFIX_DEPLOY);
  File buildPackAdditions=new File(targetDir,BUILDPACK_FILEPATH_PHP);
  assertTrue(targetFile.exists());
  assertTrue(deployFile.exists());
  assertTrue(buildPackAdditions.exists());
}",0.993968636911942
174141,"@Test public void contentManifest() throws Exception {
  fileCreator.createFiles();
  File targetFile=new File(targetDir,MANIFEST);
  String manifestContent=FileUtils.readFileToString(targetFile);
  String expectedManifestContent=String.format(""String_Node_Str"",APPLICATIONS_SECTION.getName(),NAMEBLOCK,appName,ENVIRONMENT.getName(),SERVICE.getName());
  assertEquals(expectedManifestContent,manifestContent);
}","@Test public void contentManifest() throws Exception {
  String mainApplicationPath=""String_Node_Str"";
  String expectedPath=""String_Node_Str"";
  testApp.setPathToApplication(mainApplicationPath);
  fileCreator.createFiles();
  File targetFile=new File(targetDir,MANIFEST_PATH);
  String manifestContent=FileUtils.readFileToString(targetFile);
  String expectedManifestContent=String.format(""String_Node_Str"",APPLICATIONS_SECTION.getName(),NAMEBLOCK,appName,PATH.getName(),expectedPath);
  assertEquals(expectedManifestContent,manifestContent);
}",0.7774294670846394
174142,"@Before public void setUp(){
  appName=""String_Node_Str"";
  testApp=new CloudFoundryApplication();
  testApp.setName(appName);
  testApp.addBuildpack(""String_Node_Str"");
  testApp.addBuildpack(""String_Node_Str"");
  File sourceDir=new File(tmpdir,""String_Node_Str"");
  targetDir=new File(tmpdir,""String_Node_Str"");
  sourceDir.mkdir();
  targetDir.mkdir();
  PluginFileAccess fileAccess=new PluginFileAccess(sourceDir,targetDir,log);
  fileCreator=new CloudFoundryFileCreator(fileAccess,testApp);
}","@Before public void setUp(){
  appName=""String_Node_Str"";
  testApp=new CloudFoundryApplication();
  testApp.setName(appName);
  File sourceDir=new File(tmpdir,""String_Node_Str"");
  targetDir=new File(tmpdir,""String_Node_Str"");
  sourceDir.mkdir();
  targetDir.mkdir();
  PluginFileAccess fileAccess=new PluginFileAccess(sourceDir,targetDir,log);
  fileCreator=new CloudFoundryFileCreator(fileAccess,testApp);
}",0.3502202643171806
174143,"@Test public void contentDeploy() throws Exception {
  fileCreator.createFiles();
  File targetFile=new File(targetDir,outputPath + FILEPRAEFIX_DEPLOY + appName+ FILESUFFIX_DEPLOY);
  String manifestContent=FileUtils.readFileToString(targetFile);
  String expectedDeployContent=""String_Node_Str"" + ""String_Node_Str"" + appName + ""String_Node_Str"";
  assertEquals(expectedDeployContent,manifestContent);
}","@Test public void contentDeploy() throws Exception {
  fileCreator.createFiles();
  File targetFile=new File(targetDir,outputPath + FILEPRAEFIX_DEPLOY + appName+ FILESUFFIX_DEPLOY);
  String manifestContent=FileUtils.readFileToString(targetFile);
  String expectedDeployContent=""String_Node_Str"" + ""String_Node_Str"" + appName + CLI_PATH_TO_MANIFEST+ MANIFEST_NAME+ ""String_Node_Str"";
  assertEquals(expectedDeployContent,manifestContent);
}",0.9561091340450772
174144,"@Builder protected Apache(String componentVersion,Credential adminCredential,ContainerCapability host,EndpointCapability databaseEndpoint,AdminEndpointCapability adminEndpoint,String NodeName,StandardLifecycle lifecycle,String description){
  super(componentVersion,adminCredential,host,databaseEndpoint,adminEndpoint,NodeName,lifecycle,description);
}","@Builder protected Apache(String componentVersion,Credential adminCredential,ContainerCapability host,EndpointCapability databaseEndpoint,AdminEndpointCapability adminEndpoint,String nodeName,StandardLifecycle lifecycle,String description){
  super(componentVersion,adminCredential,host,databaseEndpoint,adminEndpoint,nodeName,lifecycle,description);
}",0.9943181818181818
174145,"/** 
 * @param nodeName      {@link #nodeName}
 * @param adminEndpoint {@link #adminEndpoint}
 * @param scalable      {@link #scalable}
 * @param binding       {@link #binding}
 * @param localStorage  {@link #localStorage}
 */
public ComputeBuilder builder(String nodeName,AdminEndpointCapability adminEndpoint,ScalableCapability scalable,BindableCapability binding,Requirement<AttachmentCapability,BlockStorage,AttachesTo> localStorage){
  return new ComputeBuilder().nodeName(nodeName).adminEndpoint(adminEndpoint).scalable(scalable).binding(binding).localStorage(localStorage);
}","/** 
 * @param nodeName      {@link #nodeName}
 * @param adminEndpoint {@link #adminEndpoint}
 * @param scalable      {@link #scalable}
 * @param binding       {@link #binding}
 * @param localStorage  {@link #localStorage}
 */
public static ComputeBuilder builder(String nodeName,AdminEndpointCapability adminEndpoint,ScalableCapability scalable,BindableCapability binding,Requirement<AttachmentCapability,BlockStorage,AttachesTo> localStorage){
  return new ComputeBuilder().nodeName(nodeName).adminEndpoint(adminEndpoint).scalable(scalable).binding(binding).localStorage(localStorage);
}",0.9940222032450896
174146,"/** 
 * @param mountPoint {@link #mountPoint}
 */
public static AttachesToBuilder builder(String mountPoint){
  return new AttachesToBuilder();
}","/** 
 * @param mountPoint {@link #mountPoint}
 */
public static AttachesToBuilder builder(String mountPoint){
  return new AttachesToBuilder().mountPoint(mountPoint);
}",0.926517571884984
174147,"protected AttachesTo(String mountPoint,String device,String description){
  super(description);
  this.mountPoint=Objects.requireNonNull(mountPoint);
  this.device=device;
}","@Builder protected AttachesTo(String mountPoint,String device,String description){
  super(description);
  this.mountPoint=Objects.requireNonNull(mountPoint);
  this.device=device;
}",0.9746478873239436
174148,"/** 
 * Lists all Supported Platforms (HTTP Response Method). <p>  It handles the <code>/platforms</code> Request <p> Always responds with HTTP-Code 200 (application/hal+json)
 */
@RequestMapping(path=""String_Node_Str"",method=RequestMethod.GET,produces=""String_Node_Str"") public ResponseEntity<ResourceSupport> getPlatforms(){
  Link selfLink=linkTo(methodOn(PlatformController.class).getPlatforms()).withSelfRel();
  ArrayList<PlatformResponse> responses=new ArrayList<>();
  for (  Platform platform : platformService.getSupportedPlatforms()) {
    log.info(""String_Node_Str"",platform.id);
    PlatformResponse res=getPlatformResource(platform);
    responses.add(res);
  }
  Resources<PlatformResponse> resources=new Resources<>(responses,selfLink);
  return ResponseEntity.ok(resources);
}","/** 
 * Lists all Supported Platforms (HTTP Response Method). <p> It handles the <code>/platforms</code> Request <p> Always responds with HTTP-Code 200 (application/hal+json)
 */
@RequestMapping(path=""String_Node_Str"",method=RequestMethod.GET,produces=""String_Node_Str"") public ResponseEntity<ResourceSupport> getPlatforms(){
  Link selfLink=linkTo(methodOn(PlatformController.class).getPlatforms()).withSelfRel();
  ArrayList<PlatformResponse> responses=new ArrayList<>();
  for (  Platform platform : platformService.getSupportedPlatforms()) {
    log.info(""String_Node_Str"",platform.id);
    PlatformResponse res=getPlatformResource(platform);
    responses.add(res);
  }
  Resources<PlatformResponse> resources=new Resources<>(responses,selfLink);
  return ResponseEntity.ok(resources);
}",0.9993690851735016
174149,"/** 
 * Returns the information for a specific platform. <p>  This method handles the <code>/platforms/{id}</code> request <p> jResponds with Http code 200 normally (application/hal+json) and with code 404 (application/hal+json, standard error message) if the platform with the given name (case sensitive) does not exist.
 * @param id the <code>id</code> (identifier) of the platform (HTTP Path Parameter)
 */
@RequestMapping(path=""String_Node_Str"",method=RequestMethod.GET,produces=""String_Node_Str"") public ResponseEntity<PlatformResponse> getPlatform(@PathVariable(name=""String_Node_Str"") String id){
  Platform p=platformService.findPlatformById(id);
  if (p == null) {
    throw new PlatformNotFoundException();
  }
  return ResponseEntity.ok(getPlatformResource(p));
}","/** 
 * Returns the information for a specific platform. <p> This method handles the <code>/platforms/{id}</code> request <p> jResponds with Http code 200 normally (application/hal+json) and with code 404 (application/hal+json, standard error message) if the platform with the given name (case sensitive) does not exist.
 * @param id the <code>id</code> (identifier) of the platform (HTTP Path Parameter)
 */
@RequestMapping(path=""String_Node_Str"",method=RequestMethod.GET,produces=""String_Node_Str"") public ResponseEntity<PlatformResponse> getPlatform(@PathVariable(name=""String_Node_Str"") String id){
  Platform p=platformService.findPlatformById(id);
  if (p == null) {
    throw new PlatformNotFoundException();
  }
  return ResponseEntity.ok(getPlatformResource(p));
}",0.9993535875888816
174150,"private Log getLog(Csar csar,Platform platform){
  File logFile=new File(getRootDir(csar,platform),""String_Node_Str"".format(csar.getIdentifier(),platform.id));
  return new LogImpl(logFile);
}","private Log getLog(Csar csar,Platform platform){
  File logFile=new File(getRootDir(csar,platform),format(""String_Node_Str"",csar.getIdentifier(),platform.id));
  return new LogImpl(logFile);
}",0.9583333333333334
174151,"@Override public String toString(){
  return ""String_Node_Str"".format(csar.getIdentifier(),targetPlatform.id);
}","@Override public String toString(){
  return format(""String_Node_Str"",csar.getIdentifier(),targetPlatform.id);
}",0.9285714285714286
174152,"void setIndex(long index){
  this.index=index;
}","public void setIndex(long index){
  this.index=index;
}",0.9320388349514565
174153,"/** 
 * Constructs a LogEntry instance from a log line
 * @param line      the log line which gets parsed
 * @param predecessor the LogEntry preceding this newly created LogEntry
 */
LogEntry(String line,LogEntry predecessor) throws LogParserException {
  if (isRegularLine(line)) {
    parseRegularLine(line,predecessor);
  }
 else {
    parseStackTraceLine(line,predecessor);
  }
}","/** 
 * Constructs a LogEntry instance from a log line
 * @param line        the log line which gets parsed
 * @param predecessor the LogEntry preceding this newly created LogEntry
 */
LogEntry(String line,LogEntry predecessor) throws LogParserException {
  if (isRegularLine(line)) {
    parseRegularLine(line,predecessor);
  }
 else {
    parseStackTraceLine(line,predecessor);
  }
}",0.9973958333333334
174154,"/** 
 * Sets the value of the property with its given key. 
 * @throws IllegalArgumentException if a property with given key cannot be found or if the entered value is invalid
 */
public void setPropertyValue(String key,String value){
  setPropertyInternal(key,value);
  if (allRequiredPropertiesSet() && transformation.getState() == TransformationState.INPUT_REQUIRED) {
    transformation.setState(TransformationState.READY);
  }
}","/** 
 * Sets the value of the property with its given key.
 * @throws IllegalArgumentException if a property with given key cannot be found or if the entered value is invalid
 */
public void setPropertyValue(String key,String value){
  setPropertyInternal(key,value);
  if (allRequiredPropertiesSet() && transformation.getState() == TransformationState.INPUT_REQUIRED) {
    transformation.setState(TransformationState.READY);
  }
}",0.998843930635838
174155,"/** 
 * Creates a new property instance with no set property values for the given list (set) of properties.
 * @param properties the set of properties to create a property instance for.Is not allowed to be null,  if no props are needed add a empty set
 */
public PropertyInstance(Set<Property> properties,Transformation transformation){
  this.propertyValues=new HashMap<>();
  this.properties=properties;
  this.transformation=transformation;
  if (properties.stream().anyMatch(Property::isRequired)) {
    transformation.setState(TransformationState.INPUT_REQUIRED);
  }
}","/** 
 * Creates a new property instance with no set property values for the given list (set) of properties.
 * @param properties the set of properties to create a property instance for.Is not allowed to be null, if no props are needed add a empty set
 */
public PropertyInstance(Set<Property> properties,Transformation transformation){
  this.propertyValues=new HashMap<>();
  this.properties=properties;
  this.transformation=transformation;
  if (properties.stream().anyMatch(Property::isRequired)) {
    transformation.setState(TransformationState.INPUT_REQUIRED);
  }
}",0.999128160418483
174156,"@PostConstruct @SuppressWarnings(""String_Node_Str"") private void initTmpdir(){
  tmpdir=preferences.getDataDir();
}","/** 
 * temp data dir. if files need to get written to disk, use this as root directory. This folder is reset after every test method. Appropriate disk cleanup is performed automatically.
 */
@PostConstruct private void initTmpdir(){
  tmpdir=preferences.getDataDir();
}",0.4051948051948052
174157,"@Test public void createTransformation() throws Exception {
  assertTrue(csarService.getCsar(VALID_CSAR_NAME).getTransformations().entrySet().size() == 0);
  mvc.perform(put(CREATE_CSAR_VALID_URL)).andDo(print()).andExpect(status().is(200)).andExpect(content().bytes(new byte[0])).andReturn();
  assertTrue(csarService.getCsar(VALID_CSAR_NAME).getTransformations().entrySet().size() == 1);
  assertTrue(csarService.getCsar(VALID_CSAR_NAME).getTransformations().get(VALID_PLATFORM_NAME) != null);
}","@Test public void createTransformation() throws Exception {
  assertTrue(csarService.getCsar(VALID_CSAR_NAME).getTransformations().entrySet().size() == 0);
  mvc.perform(put(CREATE_CSAR_VALID_URL)).andDo(print()).andExpect(status().is(200)).andExpect(content().bytes(new byte[0])).andReturn();
  assertEquals(1,csarService.getCsar(VALID_CSAR_NAME).getTransformations().entrySet().size());
  assertNotNull(csarService.getCsar(VALID_CSAR_NAME).getTransformations().get(VALID_PLATFORM_NAME));
}",0.9615384615384616
174158,"@Override public void deleteCsar(Csar csar){
}","@Override public void deleteCsar(Csar csar){
  csars.remove(csar);
}",0.8070175438596491
174159,"@After public void tearDown() throws Exception {
  springThread.stop();
  springThread.join();
}","@SuppressWarnings(""String_Node_Str"") @After public void tearDown() throws Exception {
  springThread.stop();
  springThread.join();
}",0.8384279475982532
174160,"public static void writeTo(InputStream csarStream,OutputStream fout) throws IOException {
  byte[] data=new byte[512];
  int bytesRead=0;
  while (bytesRead != -1) {
    bytesRead=csarStream.read(data);
    if (bytesRead != -1) {
      fout.write(data,0,bytesRead);
    }
  }
  csarStream.close();
  fout.close();
}","private void writeTo(InputStream csarStream,OutputStream fout) throws IOException {
  byte[] data=new byte[512];
  int bytesRead=0;
  while (bytesRead != -1) {
    bytesRead=csarStream.read(data);
    if (bytesRead != -1) {
      fout.write(data,0,bytesRead);
    }
  }
  csarStream.close();
  fout.close();
}",0.971153846153846
174161,"@Test public void startTransformationInvalidState() throws Exception {
  Transformation t=service.createTransformation(csar,TestPlugins.PLATFORM1);
  t.setState(TransformationState.ERROR);
  assertTrue(!service.startTransformation(t));
}","@Test public void startTransformationInvalidState() throws Exception {
  Transformation t=service.createTransformation(csar,TestPlugins.PLATFORM1);
  t.setState(TransformationState.ERROR);
  assertFalse(service.startTransformation(t));
}",0.9746835443037974
174162,"@Test public void startTransformationPropertiesNotSet() throws Exception {
  DummyCsar csar=new DummyCsar(""String_Node_Str"");
  csar.modelSpecificProperties=new HashSet<>();
  csar.modelSpecificProperties.add(new Property(""String_Node_Str"",PropertyType.TEXT));
  Transformation t=service.createTransformation(csar,passingDummy.getPlatform());
  assertTrue(!service.startTransformation(t));
}","@Test public void startTransformationPropertiesNotSet() throws Exception {
  DummyCsar csar=new DummyCsar(""String_Node_Str"");
  csar.modelSpecificProperties=new HashSet<>();
  csar.modelSpecificProperties.add(new Property(""String_Node_Str"",PropertyType.TEXT));
  Transformation t=service.createTransformation(csar,passingDummy.getPlatform());
  assertFalse(service.startTransformation(t));
}",0.9846547314578004
174163,"public void loadAnnotation(WebFilter wf){
  EnumSet<DispatcherType> dispatcherTypes=EnumSet.copyOf(Arrays.asList(wf.dispatcherTypes()));
  this.addMappingForUrlPatterns(dispatcherTypes,true,wf.value());
  this.addMappingForUrlPatterns(dispatcherTypes,true,wf.urlPatterns());
  this.addMappingForServletNames(dispatcherTypes,true,wf.servletNames());
  this.setAsyncSupported(wf.asyncSupported());
  for (  WebInitParam initParam : wf.initParams()) {
    this.setInitParameter(initParam.name(),initParam.value());
  }
}","public void loadAnnotation(WebFilter wf){
  EnumSet<DispatcherType> dispatcherTypes;
  if (wf.dispatcherTypes().length > 0) {
    dispatcherTypes=EnumSet.copyOf(Arrays.asList(wf.dispatcherTypes()));
  }
 else {
    dispatcherTypes=EnumSet.allOf(DispatcherType.class);
  }
  this.addMappingForUrlPatterns(dispatcherTypes,true,wf.value());
  this.addMappingForUrlPatterns(dispatcherTypes,true,wf.urlPatterns());
  this.addMappingForServletNames(dispatcherTypes,true,wf.servletNames());
  this.setAsyncSupported(wf.asyncSupported());
  for (  WebInitParam initParam : wf.initParams()) {
    this.setInitParameter(initParam.name(),initParam.value());
  }
}",0.8845166809238666
174164,"public Filter getFilterInstance(){
  if (!this.init) {
    if (((GenericFilter)this.instance).getFilterConfig() != null) {
      this.init=true;
    }
 else synchronized (this) {
      if (!this.init) {
        log.info(""String_Node_Str"",this.name,this.instance.getClass().getName());
        FilterConfig config=new FilterConfig(){
          @Override public String getFilterName(){
            return TPFilterRegistration.this.name;
          }
          @Override public ServletContext getServletContext(){
            return TPFilterRegistration.this.context;
          }
          @Override public String getInitParameter(          String name){
            return TPFilterRegistration.this.getInitParameter(name);
          }
          @Override public Enumeration<String> getInitParameterNames(){
            return Collections.enumeration(TPFilterRegistration.this.getInitParameters().keySet());
          }
        }
;
        try {
          this.instance.init(config);
          this.init=true;
        }
 catch (        ServletException e) {
          log.error(""String_Node_Str"",this.name,this.instance.getClass().getName(),e);
        }
      }
    }
  }
  return this.instance;
}","public Filter getFilterInstance(){
  if (!this.init) {
    if ((this.instance instanceof GenericFilter) && (((GenericFilter)this.instance).getFilterConfig() != null)) {
      this.init=true;
    }
 else synchronized (this) {
      if (!this.init) {
        log.info(""String_Node_Str"",this.name,this.instance.getClass().getName());
        FilterConfig config=new FilterConfig(){
          @Override public String getFilterName(){
            return TPFilterRegistration.this.name;
          }
          @Override public ServletContext getServletContext(){
            return TPFilterRegistration.this.context;
          }
          @Override public String getInitParameter(          String name){
            return TPFilterRegistration.this.getInitParameter(name);
          }
          @Override public Enumeration<String> getInitParameterNames(){
            return Collections.enumeration(TPFilterRegistration.this.getInitParameters().keySet());
          }
        }
;
        try {
          this.instance.init(config);
          this.init=true;
        }
 catch (        ServletException e) {
          log.error(""String_Node_Str"",this.name,this.instance.getClass().getName(),e);
        }
      }
    }
  }
  return this.instance;
}",0.981101068200493
174165,"private static void ensureInit(){
  if (!init) {
synchronized (BeanPopulators.class) {
      if (!init) {
        init=true;
        log.info(""String_Node_Str"");
        ScanResult result=AutumnClasspathScan.getScanResult();
        result.getNamesOfSubclassesOf(AnnotatedFieldPopulator.class).forEach(cn -> {
          try {
            AnnotatedFieldPopulator<?> populator=(AnnotatedFieldPopulator<?>)result.classNameToClassRef(cn).newInstance();
            annotatedFieldPopulatorMap.put(populator.getAnnotationClass(),populator);
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"" + cn + ""String_Node_Str""+ e);
          }
        }
);
      }
    }
  }
}","private static void ensureInit(){
  if (!init) {
synchronized (BeanPopulators.class) {
      if (!init) {
        log.info(""String_Node_Str"");
        ScanResult result=AutumnClasspathScan.getScanResult();
        result.getNamesOfSubclassesOf(AnnotatedFieldPopulator.class).forEach(cn -> {
          try {
            AnnotatedFieldPopulator<?> populator=(AnnotatedFieldPopulator<?>)result.classNameToClassRef(cn).newInstance();
            annotatedFieldPopulatorMap.put(populator.getAnnotationClass(),populator);
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"" + cn + ""String_Node_Str""+ e);
          }
        }
);
        init=true;
      }
    }
  }
}",0.9725829725829724
174166,"private static void ensureInit(){
  if (!init) {
synchronized (BeanProcessors.class) {
      if (!init) {
        init=true;
        log.info(""String_Node_Str"");
        ScanResult result=AutumnClasspathScan.getScanResult();
        result.getNamesOfClassesImplementing(BeanProcessor.class).forEach(cn -> {
          try {
            Class<? extends BeanProcessor> processorClass=(Class<? extends BeanProcessor>)result.classNameToClassRef(cn);
            BeanProcessor processor=processorClass.newInstance();
            for (            Class<?> intf : processorClass.getInterfaces()) {
              if (BeanProcessor.class.isAssignableFrom(intf)) {
                beanProcessors.computeIfAbsent((Class<? extends BeanProcessor>)intf,x -> new ArrayList<>()).add(processor);
              }
            }
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"" + cn + ""String_Node_Str""+ e);
          }
        }
);
      }
    }
  }
}","private static void ensureInit(){
  if (!init) {
synchronized (BeanProcessors.class) {
      if (!init) {
        log.info(""String_Node_Str"");
        ScanResult result=AutumnClasspathScan.getScanResult();
        result.getNamesOfClassesImplementing(BeanProcessor.class).forEach(cn -> {
          try {
            Class<? extends BeanProcessor> processorClass=(Class<? extends BeanProcessor>)result.classNameToClassRef(cn);
            BeanProcessor processor=processorClass.newInstance();
            for (            Class<?> intf : processorClass.getInterfaces()) {
              if (BeanProcessor.class.isAssignableFrom(intf)) {
                beanProcessors.computeIfAbsent((Class<? extends BeanProcessor>)intf,x -> new ArrayList<>()).add(processor);
              }
            }
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"" + cn + ""String_Node_Str""+ e);
          }
        }
);
        init=true;
      }
    }
  }
}",0.9803312629399586
174167,"void register(AbstractSelectableChannel channel,int op,Object attachment){
  regLock.lock();
  try {
    selector.wakeup();
    channel.register(selector,op,attachment);
  }
 catch (  ClosedChannelException e) {
    log.warn(""String_Node_Str"",e);
  }
  regLock.unlock();
}","void register(AbstractSelectableChannel channel,int op,Object attachment){
  regLock.lock();
  try {
    selector.wakeup();
    channel.register(selector,op,attachment);
  }
 catch (  ClosedChannelException e) {
    log.warn(""String_Node_Str"",e);
  }
 finally {
    regLock.unlock();
  }
}",0.966131907308378
174168,"private static void ensureInit(){
  if (!init) {
synchronized (MethodParamsResolver.class) {
      if (!init) {
        init=true;
        log.info(""String_Node_Str"");
        ScanResult result=AutumnClasspathScan.getScanResult();
        result.getNamesOfSubclassesOf(AnnotatedParamResolver.class).forEach(cn -> {
          try {
            AnnotatedParamResolver<?> resolver=(AnnotatedParamResolver<?>)result.classNameToClassRef(cn).newInstance();
            annotatedResolvers.put(resolver.getAnnotationClass(),resolver);
          }
 catch (          Exception ignored) {
          }
        }
);
        result.getNamesOfSubclassesOf(TypedParamResolver.class).forEach(cn -> {
          try {
            typedResolvers.add((TypedParamResolver<?>)result.classNameToClassRef(cn).newInstance());
          }
 catch (          Exception ignored) {
          }
        }
);
        result.getNamesOfClassesImplementing(ParamConverter.class).forEach(cn -> {
          try {
            ParamConverter converter=(ParamConverter)result.classNameToClassRef(cn).newInstance();
            for (            Class targetType : converter.getTargetTypes()) {
              typeConverters.put(targetType,converter);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
);
      }
    }
  }
}","private static void ensureInit(){
  if (!init) {
synchronized (MethodParamsResolver.class) {
      if (!init) {
        log.info(""String_Node_Str"");
        ScanResult result=AutumnClasspathScan.getScanResult();
        result.getNamesOfSubclassesOf(AnnotatedParamResolver.class).forEach(cn -> {
          try {
            AnnotatedParamResolver<?> resolver=(AnnotatedParamResolver<?>)result.classNameToClassRef(cn).newInstance();
            annotatedResolvers.put(resolver.getAnnotationClass(),resolver);
          }
 catch (          Exception ignored) {
          }
        }
);
        result.getNamesOfSubclassesOf(TypedParamResolver.class).forEach(cn -> {
          try {
            typedResolvers.add((TypedParamResolver<?>)result.classNameToClassRef(cn).newInstance());
          }
 catch (          Exception ignored) {
          }
        }
);
        result.getNamesOfClassesImplementing(ParamConverter.class).forEach(cn -> {
          try {
            ParamConverter converter=(ParamConverter)result.classNameToClassRef(cn).newInstance();
            for (            Class targetType : converter.getTargetTypes()) {
              typeConverters.put(targetType,converter);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
);
        init=true;
      }
    }
  }
}",0.9858630952380952
174169,"@Override public Object createBean() throws BeanCreationException {
  SqlSessionFactory sqlSessionFactory=(SqlSessionFactory)context.getBeanByType(SqlSessionFactory.class);
  if (sqlSessionFactory == null) {
    throw new BeanCreationException(""String_Node_Str"");
  }
  try {
    return sqlSessionFactory.openSession().getMapper(mapperType);
  }
 catch (  Exception e) {
    throw new BeanCreationException(e);
  }
}","@Override public Object createBean() throws BeanCreationException {
  SqlSessionFactory sqlSessionFactory=(SqlSessionFactory)context.getBeanByType(SqlSessionFactory.class);
  if (sqlSessionFactory == null) {
    throw new BeanCreationException(""String_Node_Str"");
  }
  try {
    return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class<?>[]{mapperType},new InvocationHandler(){
      private ThreadLocal<Object> targetLocal=new ThreadLocal<>();
      @Override public Object invoke(      Object proxy,      Method method,      Object[] args) throws Throwable {
        Object target=targetLocal.get();
        if (target == null) {
          target=sqlSessionFactory.openSession(true).getMapper(mapperType);
          targetLocal.set(target);
        }
        try {
          return method.invoke(target,args);
        }
 catch (        InvocationTargetException e) {
          throw e.getTargetException();
        }
      }
    }
);
  }
 catch (  Exception e) {
    throw new BeanCreationException(e);
  }
}",0.5271105010295127
174170,"private void processBuf() throws IOException {
  int readBytes=0;
  if (state == State.START || state == State.HEADERS) {
    AutumnByteArrayReader reader=new AutumnByteArrayReader(buf,0,bufLimit);
    String line;
    while ((line=reader.nextLine()) != null) {
      readBytes+=line.getBytes().length + 2;
      if (state == State.START) {
        if (checkStart(line)) {
          lastActive=System.currentTimeMillis();
          state=State.HEADERS;
          headersMap.clear();
        }
      }
 else       if (state == State.HEADERS) {
        if (line.isEmpty()) {
          if (contentLength < 0) {
            lastActive=System.currentTimeMillis();
            finish();
            state=State.START;
          }
 else {
            state=State.BODY;
          }
          break;
        }
 else {
          String[] kv=line.split(""String_Node_Str"",2);
          if (kv.length == 2) {
            lastActive=System.currentTimeMillis();
            String key=kv[0].trim().toLowerCase();
            String value=kv[1].trim();
            headersMap.computeIfAbsent(key,k -> new ArrayList<>()).add(value);
            if (key.equals(""String_Node_Str"")) {
              contentLength=Integer.valueOf(value);
              if (contentLength > MAX_BODY_LENGTH) {
                error();
                state=State.START;
              }
 else {
                body=new byte[contentLength];
                bodyLimit=0;
              }
            }
          }
 else {
            error();
            state=State.START;
          }
        }
      }
    }
  }
  if (state == State.BODY) {
    lastActive=System.currentTimeMillis();
    int canRead=bufLimit - readBytes;
    if (canRead >= contentLength - bodyLimit) {
      canRead=contentLength - bodyLimit;
    }
    System.arraycopy(buf,readBytes,body,bodyLimit,canRead);
    readBytes+=canRead;
    bodyLimit+=canRead;
    if (bodyLimit >= contentLength) {
      readBytes=bufLimit;
      finish();
      state=State.START;
    }
  }
  if (readBytes < bufLimit) {
    System.arraycopy(buf,readBytes,buf,0,bufLimit - readBytes);
  }
  bufLimit-=readBytes;
}","private void processBuf() throws IOException {
  int readBytes=0;
  if (state == State.START || state == State.HEADERS) {
    AutumnByteArrayReader reader=new AutumnByteArrayReader(buf,0,bufLimit);
    String line;
    while ((line=reader.nextLine()) != null) {
      if (state == State.START) {
        if (checkStart(line)) {
          lastActive=System.currentTimeMillis();
          state=State.HEADERS;
          headersMap.clear();
        }
      }
 else       if (state == State.HEADERS) {
        if (line.isEmpty()) {
          if (contentLength < 0) {
            lastActive=System.currentTimeMillis();
            finish();
            state=State.START;
          }
 else {
            state=State.BODY;
          }
          break;
        }
 else {
          String[] kv=line.split(""String_Node_Str"",2);
          if (kv.length == 2) {
            lastActive=System.currentTimeMillis();
            String key=kv[0].trim().toLowerCase();
            String value=kv[1].trim();
            headersMap.computeIfAbsent(key,k -> new ArrayList<>()).add(value);
            if (key.equals(""String_Node_Str"")) {
              contentLength=Integer.valueOf(value);
              if (contentLength > MAX_BODY_LENGTH) {
                error();
                state=State.START;
              }
 else {
                body=new byte[contentLength];
                bodyLimit=0;
              }
            }
          }
 else {
            error();
            state=State.START;
          }
        }
      }
    }
    readBytes+=reader.getReadBytes();
  }
  if (state == State.BODY) {
    lastActive=System.currentTimeMillis();
    int canRead=bufLimit - readBytes;
    if (canRead >= contentLength - bodyLimit) {
      canRead=contentLength - bodyLimit;
    }
    System.arraycopy(buf,readBytes,body,bodyLimit,canRead);
    readBytes+=canRead;
    bodyLimit+=canRead;
    if (bodyLimit >= contentLength) {
      readBytes=bufLimit;
      finish();
      state=State.START;
    }
  }
  if (readBytes < bufLimit && readBytes > 0) {
    System.arraycopy(buf,readBytes,buf,0,bufLimit - readBytes);
  }
  bufLimit-=readBytes;
}",0.9764816556914392
174171,"public String nextLine(){
  while (pos < offset + limit - 1) {
    if (src[pos] == '\r' && src[pos + 1] == '\n') {
      String line=new String(src,lineStart,pos - lineStart);
      pos+=2;
      lineStart=pos;
      return line;
    }
    pos++;
  }
  if (pos < offset + limit) {
    pos++;
    return new String(src,lineStart,pos - lineStart);
  }
  return null;
}","public String nextLine(){
  while (pos < offset + limit - 1) {
    if (src[pos] == '\r' && src[pos + 1] == '\n') {
      String line=new String(src,lineStart,pos - lineStart);
      pos+=2;
      lineStart=pos;
      return line;
    }
    pos++;
  }
  return null;
}",0.8025276461295419
174172,"public <T>T getService(Class<T> interfaze,int timeout){
  return proxy.create(interfaze,(proxy,method,args) -> {
    String url=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ interfaze.getName();
    AutumnRPCRequest request=AutumnRPCRequest.builder().methodName(method.getName()).paramTypes(method.getParameterTypes()).params(args).build();
    byte[] payload=serialization.serializeRequest(request);
    byte[] response=httpClient.post(url,payload,serialization.contentType(),timeout);
    AutumnRPCResponse rpcResponse=serialization.deserializeResponse(response,method.getReturnType());
    if (rpcResponse.getStatus() == STATUS_OK) {
      return serialization.convertTypes(new Object[]{rpcResponse.getResult()},new Type[]{method.getGenericReturnType()})[0];
    }
 else {
      throw (Throwable)rpcResponse.getResult();
    }
  }
);
}","public <T>T getService(Class<T> interfaze,int timeout){
  return proxy.create(interfaze,(proxy,method,args) -> {
    String url=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ interfaze.getName();
    AutumnRPCRequest request=AutumnRPCRequest.builder().methodName(method.getName()).paramTypes(method.getParameterTypes()).params(args).build();
    byte[] payload=serialization.serializeRequest(request);
    byte[] response=httpClient.post(url,payload,serialization.contentType(),timeout);
    Class<?> returnType=method.getReturnType();
    AutumnRPCResponse rpcResponse=serialization.deserializeResponse(response,returnType);
    if (rpcResponse.getStatus() == STATUS_OK) {
      if (returnType == void.class || returnType == Void.class) {
        return null;
      }
      return serialization.convertTypes(new Object[]{rpcResponse.getResult()},new Type[]{method.getGenericReturnType()})[0];
    }
 else {
      throw (Throwable)rpcResponse.getResult();
    }
  }
);
}",0.9057619816908992
174173,"private Object convertParam(Parameter param,ParamValue value) throws ParamConvertException {
  Class<?> paramType=param.getType();
  if (paramType.isInstance(value.getSingleValue())) {
    return value.getSingleValue();
  }
  if (paramType.isInstance(value.getMultipleValues())) {
    return value.getMultipleValues();
  }
  boolean needMultipleValues=paramType.isArray() || Collection.class.isAssignableFrom(paramType);
  Object rawValue=needMultipleValues ? value.getMultipleValues() : value.getSingleValue();
  if (rawValue != null) {
    try {
      if (needMultipleValues) {
        Collection valueCollection=((Collection)rawValue);
        if (paramType.isArray()) {
          Class<?> innerType=paramType.getComponentType();
          return convertMultiple(valueCollection,innerType);
        }
 else {
          Type type=param.getParameterizedType();
          if (type instanceof ParameterizedType) {
            Type innerType=((ParameterizedType)type).getActualTypeArguments()[0];
            if (innerType instanceof Class) {
              valueCollection=Arrays.asList((Object[])convertMultiple(valueCollection,(Class<?>)innerType));
            }
          }
          return collectionConverter.convert(valueCollection,(Class<?>)paramType);
        }
      }
 else {
        return convertSingle(rawValue,paramType);
      }
    }
 catch (    ParamConvertException e) {
      return convertFromJson(param,value);
    }
  }
  return null;
}","private Object convertParam(Parameter param,ParamValue value) throws ParamConvertException {
  Class<?> paramType=param.getType();
  if (paramType.isInstance(value.getSingleValue())) {
    return value.getSingleValue();
  }
  boolean needMultipleValues=paramType.isArray() || Collection.class.isAssignableFrom(paramType);
  Object rawValue=needMultipleValues ? value.getMultipleValues() : value.getSingleValue();
  if (rawValue != null) {
    try {
      if (needMultipleValues) {
        Collection valueCollection=((Collection)rawValue);
        if (paramType.isArray()) {
          Class<?> innerType=paramType.getComponentType();
          return convertMultiple(valueCollection,innerType);
        }
 else {
          Type type=param.getParameterizedType();
          if (type instanceof ParameterizedType) {
            Type innerType=((ParameterizedType)type).getActualTypeArguments()[0];
            if (innerType instanceof Class) {
              valueCollection=Arrays.asList((Object[])convertMultiple(valueCollection,(Class<?>)innerType));
            }
          }
          return collectionConverter.convert(valueCollection,(Class<?>)paramType);
        }
      }
 else {
        return convertSingle(rawValue,paramType);
      }
    }
 catch (    ParamConvertException e) {
      try {
        return convertFromJson(param,value);
      }
 catch (      ParamConvertException e1) {
        throw new ParamConvertException(""String_Node_Str"" + param + ""String_Node_Str"");
      }
    }
  }
  return null;
}",0.9129411764705884
174174,"@Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  RequestMappingModel mapping=restContext.matchRequest(req);
  if (mapping == null || mapping.getMethod() == null) {
    resp.sendError(404);
    return;
  }
  Method method=mapping.getMethod();
  String produces=mapping.getProduces();
  if (produces.isEmpty()) {
    produces=""String_Node_Str"";
  }
  try {
    Object[] params=paramsResolver.resolveAll(method,req,resp);
    String result=String.valueOf(method.invoke(getInstance(method.getDeclaringClass()),params));
    resp.setContentType(produces);
    resp.getOutputStream().print(result);
  }
 catch (  IllegalAccessException|InvocationTargetException e) {
    log.error(""String_Node_Str"" + method + ""String_Node_Str""+ e);
  }
catch (  ParamResolveException e) {
    throw new ServletException(e);
  }
}","@Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  RequestMappingModel mapping=restContext.matchRequest(req);
  if (mapping == null || mapping.getMethod() == null) {
    resp.sendError(404);
    return;
  }
  Method method=mapping.getMethod();
  String produces=mapping.getProduces();
  if (produces.isEmpty()) {
    produces=""String_Node_Str"";
  }
  try {
    Object[] params=paramsResolver.resolveAll(method,req,resp);
    String result=String.valueOf(method.invoke(getInstance(method.getDeclaringClass()),params));
    resp.setContentType(produces);
    resp.getOutputStream().print(result);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + method + ""String_Node_Str""+ e);
    throw new ServletException(e);
  }
}",0.8437314319667261
174175,"public <T>T getService(Class<T> interfaze,int timeout){
  return proxy.create(interfaze,(proxy,method,args) -> {
    String url=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ interfaze.getName();
    AutumnRPCRequest request=AutumnRPCRequest.builder().methodName(method.getName()).paramTypes(method.getParameterTypes()).params(args).build();
    byte[] payload=serialization.serializeRequest(request);
    byte[] response=httpClient.post(url,payload,serialization.contentType(),timeout);
    AutumnRPCResponse rpcResponse=serialization.deserializeResponse(response,method.getReturnType());
    if (rpcResponse.getStatus() == STATUS_OK) {
      return rpcResponse.getResult();
    }
 else {
      throw (Throwable)rpcResponse.getResult();
    }
  }
);
}","public <T>T getService(Class<T> interfaze,int timeout){
  return proxy.create(interfaze,(proxy,method,args) -> {
    String url=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ interfaze.getName();
    AutumnRPCRequest request=AutumnRPCRequest.builder().methodName(method.getName()).paramTypes(method.getParameterTypes()).params(args).build();
    byte[] payload=serialization.serializeRequest(request);
    byte[] response=httpClient.post(url,payload,serialization.contentType(),timeout);
    AutumnRPCResponse rpcResponse=serialization.deserializeResponse(response,method.getReturnType());
    if (rpcResponse.getStatus() == STATUS_OK) {
      return serialization.convertTypes(new Object[]{rpcResponse.getResult()},new Type[]{method.getGenericReturnType()})[0];
    }
 else {
      throw (Throwable)rpcResponse.getResult();
    }
  }
);
}",0.9188529591214156
174176,"@SuppressWarnings(""String_Node_Str"") @Override public AutumnRPCResponse deserializeResponse(byte[] buf,Class defaultReturnType) throws AutumnSerializationException {
  try {
    JsonNode root=mapper.readTree(buf);
    if (root.isArray() && root.size() >= 2) {
      Class returnType=defaultReturnType;
      if (root.size() >= 3) {
        try {
          returnType=getClass(root.get(2).textValue());
        }
 catch (        ClassNotFoundException ignored) {
        }
      }
      return AutumnRPCResponse.builder().status(root.get(0).intValue()).result(mapper.treeToValue(root.get(1),returnType)).resultType(returnType).build();
    }
  }
 catch (  IOException e) {
    throw new AutumnSerializationException(e);
  }
  throw new AutumnSerializationException(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Override public AutumnRPCResponse deserializeResponse(byte[] buf,Class defaultReturnType) throws AutumnSerializationException {
  try {
    JsonNode root=mapper.readTree(buf);
    if (root.isArray() && root.size() >= 2) {
      Class returnType=defaultReturnType;
      Object result=root.get(1);
      if (root.size() >= 3) {
        try {
          returnType=getClass(root.get(2).textValue());
          result=mapper.treeToValue(((JsonNode)result),returnType);
        }
 catch (        ClassNotFoundException ignored) {
        }
      }
      return AutumnRPCResponse.builder().status(root.get(0).intValue()).result(result).resultType(returnType).build();
    }
  }
 catch (  IOException e) {
    throw new AutumnSerializationException(e);
  }
  throw new AutumnSerializationException(""String_Node_Str"");
}",0.908868501529052
174177,"@SuppressWarnings(""String_Node_Str"") @Override public AutumnRPCRequest deserializeRequest(byte[] buf) throws AutumnSerializationException {
  try {
    JsonNode root=mapper.readTree(buf);
    if (root.isArray() && root.size() >= 3) {
      Class[] paramTypes=null;
      if (root.get(1).isArray()) {
        paramTypes=new Class[root.get(1).size()];
      }
      Object[] params=new Object[root.get(2).size()];
      for (int i=0; i < root.get(2).size(); i++) {
        if (paramTypes != null && paramTypes.length > i) {
          paramTypes[i]=getClass(root.get(1).get(i).textValue());
        }
        params[i]=root.get(2).get(i);
      }
      return AutumnRPCRequest.builder().methodName(root.get(0).textValue()).paramTypes(paramTypes).params(params).build();
    }
  }
 catch (  IOException|ClassNotFoundException e) {
    throw new AutumnSerializationException(e);
  }
  throw new AutumnSerializationException(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Override public AutumnRPCRequest deserializeRequest(byte[] buf) throws AutumnSerializationException {
  try {
    JsonNode root=mapper.readTree(buf);
    if (root.isArray() && root.size() >= 3) {
      Class[] paramTypes=null;
      if (root.get(1).isArray()) {
        paramTypes=new Class[root.get(1).size()];
      }
      JsonNode[] params=new JsonNode[root.get(2).size()];
      for (int i=0; i < root.get(2).size(); i++) {
        if (paramTypes != null && paramTypes.length > i) {
          paramTypes[i]=getClass(root.get(1).get(i).textValue());
        }
        params[i]=root.get(2).get(i);
      }
      return AutumnRPCRequest.builder().methodName(root.get(0).textValue()).paramTypes(paramTypes).params(params).build();
    }
  }
 catch (  IOException|ClassNotFoundException e) {
    throw new AutumnSerializationException(e);
  }
  throw new AutumnSerializationException(""String_Node_Str"");
}",0.9851380042462844
174178,"public static void main(String[] args) throws RemoteException {
  AutumnRPCServer.start(""String_Node_Str"");
  AutumnRPCClient client=new AutumnRPCClient(""String_Node_Str"",8801,""String_Node_Str"",true);
  TestService testService=client.getService(TestService.class);
  System.out.println(testService.echo(""String_Node_Str""));
  System.out.println(testService.testEnum(1));
  System.out.println(testService.testObject(""String_Node_Str"",new MyObject(MyEnum.D)));
  System.out.println(testService.testArray(new Object[]{null,null,null}));
  System.out.println(testService.testList(Arrays.asList(new MyObject(MyEnum.A),new MyObject(MyEnum.B),new MyObject(MyEnum.C),new MyObject(MyEnum.D))));
  try {
    testService.testThrowException(""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(e);
  }
  System.out.println(testService.testReturnException(""String_Node_Str""));
}","public static void main(String[] args) throws RemoteException {
  AutumnRPCServer.start(""String_Node_Str"");
  AutumnRPCClient client=new AutumnRPCClient(""String_Node_Str"",8801,""String_Node_Str"",true);
  TestService testService=client.getService(TestService.class);
  System.out.println(testService.echo(""String_Node_Str""));
  System.out.println(testService.testEnum(1));
  System.out.println(testService.testObject(""String_Node_Str"",new MyObject(MyEnum.D)));
  System.out.println(testService.testArray(new Object[]{null,null,null}));
  System.out.println(testService.testList(Arrays.asList(new MyObject(MyEnum.A),new MyObject(MyEnum.B),new MyObject(MyEnum.C),new MyObject(MyEnum.D))).get(0).getMyEnum());
  try {
    testService.testThrowException(""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(e);
  }
  System.out.println(testService.testReturnException(""String_Node_Str""));
}",0.9893676552881924
174179,String testList(List<MyObject> list) throws RemoteException ;,List<MyObject> testList(List<MyObject> list) throws RemoteException ;,0.8615384615384616
174180,"@Override public String testList(List<MyObject> list) throws RemoteException {
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  list.forEach(o -> sb.append(o.getMyEnum()));
  return sb.toString();
}","@Override public List<MyObject> testList(List<MyObject> list) throws RemoteException {
  return list;
}",0.5659163987138264
174181,"/** 
 * Returns a java.util.Map of the parameters of this request. <p> <p>Request parameters are extra information sent with the request. For HTTP servlets, parameters are contained in the query string or posted form data.
 * @return an immutable java.util.Map containing parameter names askeys and parameter values as map values. The keys in the parameter map are of type String. The values in the parameter map are of type String array.
 */
@Override public Map<String,String[]> getParameterMap(){
  if (this.params == null) {
    Map<String,List<String>> paramsMap=new HashMap<>();
    this.parseParamString(this.getQueryString(),paramsMap);
    if (this.getMethod().toLowerCase().equals(""String_Node_Str"")) {
switch (this.getContentType()) {
case ""String_Node_Str"":
        this.parseParamString(new String(httpRequest.getBody()),paramsMap);
      break;
case ""String_Node_Str"":
    try {
      for (      Part part : this.getParts()) {
        if (part.getContentType().equals(""String_Node_Str"")) {
          byte[] buf=new byte[(int)part.getSize()];
          part.getInputStream().read(buf);
          paramsMap.computeIfAbsent(part.getName(),x -> new ArrayList<>()).add(new String(buf));
        }
      }
    }
 catch (    IOException|ServletException ignored) {
    }
  break;
}
}
this.params=new HashMap<>();
paramsMap.forEach((key,value) -> this.params.put(key,(String[])value.toArray()));
}
return Collections.unmodifiableMap(this.params);
}","/** 
 * Returns a java.util.Map of the parameters of this request. <p> <p>Request parameters are extra information sent with the request. For HTTP servlets, parameters are contained in the query string or posted form data.
 * @return an immutable java.util.Map containing parameter names askeys and parameter values as map values. The keys in the parameter map are of type String. The values in the parameter map are of type String array.
 */
@Override public Map<String,String[]> getParameterMap(){
  if (this.params == null) {
    Map<String,List<String>> paramsMap=new HashMap<>();
    this.parseParamString(this.getQueryString(),paramsMap);
    if (this.getMethod().toLowerCase().equals(""String_Node_Str"")) {
switch (this.getContentType()) {
case ""String_Node_Str"":
        this.parseParamString(new String(httpRequest.getBody()),paramsMap);
      break;
case ""String_Node_Str"":
    try {
      for (      Part part : this.getParts()) {
        if (part.getContentType().equals(""String_Node_Str"")) {
          byte[] buf=new byte[(int)part.getSize()];
          part.getInputStream().read(buf);
          paramsMap.computeIfAbsent(part.getName(),x -> new ArrayList<>()).add(new String(buf));
        }
      }
    }
 catch (    IOException|ServletException ignored) {
    }
  break;
}
}
this.params=new HashMap<>();
paramsMap.forEach((key,value) -> this.params.put(key,value.toArray(new String[0])));
}
return Collections.unmodifiableMap(this.params);
}",0.9879766403297836
174182,"private void parseParamString(String paramStr,Map<String,List<String>> map){
  String[] queries=paramStr.split(""String_Node_Str"");
  for (  String query : queries) {
    String[] nameAndValue=query.split(""String_Node_Str"",2);
    if (nameAndValue.length == 2) {
      List<String> values=map.computeIfAbsent(nameAndValue[0],x -> new ArrayList<>());
      try {
        values.add(URLDecoder.decode(nameAndValue[1],this.getCharacterEncoding()));
      }
 catch (      UnsupportedEncodingException e) {
        values.add(nameAndValue[1]);
      }
    }
  }
}","private void parseParamString(String paramStr,Map<String,List<String>> map){
  if (paramStr == null) {
    return;
  }
  String[] queries=paramStr.split(""String_Node_Str"");
  for (  String query : queries) {
    String[] nameAndValue=query.split(""String_Node_Str"",2);
    if (nameAndValue.length == 2) {
      List<String> values=map.computeIfAbsent(nameAndValue[0],x -> new ArrayList<>());
      try {
        values.add(URLDecoder.decode(nameAndValue[1],this.getCharacterEncoding()));
      }
 catch (      UnsupportedEncodingException e) {
        values.add(nameAndValue[1]);
      }
    }
  }
}",0.9636678200692042
174183,"private void processBuf() throws IOException {
  int readBytes=0;
  if (state == State.START || state == State.HEADERS) {
    String[] lines=new String(buf,0,bufLimit).split(""String_Node_Str"",-1);
    if (lines.length <= 1) {
      return;
    }
    for (int i=0; i < lines.length - 1; i++) {
      String line=lines[i];
      readBytes+=line.length() + 2;
      if (state == State.START) {
        if (checkStart(line)) {
          lastActive=System.currentTimeMillis();
          state=State.HEADERS;
          headersMap.clear();
        }
      }
 else       if (state == State.HEADERS) {
        if (line.isEmpty()) {
          if (contentLength < 0) {
            lastActive=System.currentTimeMillis();
            finish();
            state=State.START;
          }
 else {
            state=State.BODY;
          }
          break;
        }
 else {
          String[] kv=line.split(""String_Node_Str"",2);
          if (kv.length == 2) {
            lastActive=System.currentTimeMillis();
            String key=kv[0].trim().toLowerCase();
            String value=kv[1].trim();
            headersMap.computeIfAbsent(key,k -> new ArrayList<>()).add(value);
            if (key.equals(""String_Node_Str"")) {
              contentLength=Integer.valueOf(value);
              if (contentLength > MAX_BODY_LENGTH) {
                error();
                state=State.START;
              }
 else {
                body=new byte[contentLength];
                bodyLimit=0;
              }
            }
          }
 else {
            error();
            state=State.START;
          }
        }
      }
    }
  }
  if (state == State.BODY) {
    lastActive=System.currentTimeMillis();
    int canRead=bufLimit - readBytes;
    if (canRead >= contentLength - bodyLimit) {
      canRead=contentLength - bodyLimit;
    }
    System.arraycopy(buf,readBytes,body,bodyLimit,canRead);
    readBytes+=canRead;
    bodyLimit+=canRead;
    if (bodyLimit >= contentLength) {
      readBytes=bufLimit;
      finish();
      state=State.START;
    }
  }
  if (readBytes < bufLimit) {
    System.arraycopy(buf,readBytes,buf,0,bufLimit - readBytes);
  }
  bufLimit-=readBytes;
}","private void processBuf() throws IOException {
  int readBytes=0;
  if (state == State.START || state == State.HEADERS) {
    String[] lines=new String(buf,0,bufLimit).split(""String_Node_Str"",-1);
    if (lines.length <= 1) {
      return;
    }
    for (int i=0; i < lines.length - 1; i++) {
      String line=lines[i];
      readBytes+=line.getBytes().length + 2;
      if (state == State.START) {
        if (checkStart(line)) {
          lastActive=System.currentTimeMillis();
          state=State.HEADERS;
          headersMap.clear();
        }
      }
 else       if (state == State.HEADERS) {
        if (line.isEmpty()) {
          if (contentLength < 0) {
            lastActive=System.currentTimeMillis();
            finish();
            state=State.START;
          }
 else {
            state=State.BODY;
          }
          break;
        }
 else {
          String[] kv=line.split(""String_Node_Str"",2);
          if (kv.length == 2) {
            lastActive=System.currentTimeMillis();
            String key=kv[0].trim().toLowerCase();
            String value=kv[1].trim();
            headersMap.computeIfAbsent(key,k -> new ArrayList<>()).add(value);
            if (key.equals(""String_Node_Str"")) {
              contentLength=Integer.valueOf(value);
              if (contentLength > MAX_BODY_LENGTH) {
                error();
                state=State.START;
              }
 else {
                body=new byte[contentLength];
                bodyLimit=0;
              }
            }
          }
 else {
            error();
            state=State.START;
          }
        }
      }
    }
  }
  if (state == State.BODY) {
    lastActive=System.currentTimeMillis();
    int canRead=bufLimit - readBytes;
    if (canRead >= contentLength - bodyLimit) {
      canRead=contentLength - bodyLimit;
    }
    System.arraycopy(buf,readBytes,body,bodyLimit,canRead);
    readBytes+=canRead;
    bodyLimit+=canRead;
    if (bodyLimit >= contentLength) {
      readBytes=bufLimit;
      finish();
      state=State.START;
    }
  }
  if (readBytes < bufLimit) {
    System.arraycopy(buf,readBytes,buf,0,bufLimit - readBytes);
  }
  bufLimit-=readBytes;
}",0.9956331877729258
174184,"public static synchronized void requestPermission(int requestCode,@NonNull Activity target,@NonNull PermissionListener listener,@NonNull String... permissions){
  if (target == null || permissions == null)   return;
  mPermissionListener=listener;
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
    if (mPermissionListener != null)     mPermissionListener.onAllowed(requestCode,permissions);
    mPendingRequest=false;
    return;
  }
  if (mPendingRequest) {
    final HashMap<String,Integer> permissionsMap=getPermissionMap(target,permissions,null);
    int[] grantResults=new int[permissionsMap.size()];
    for (int i=0; i < grantResults.length; i++)     grantResults[i]=permissionsMap.get(permissions[i]);
    mPermissionListener.onDenied(mCommonRuntimePermissionRequest,target,requestCode,permissions,grantResults,DENIED_REASON.PENDING);
    return;
  }
  if (RuntimePermissionUtils.hasSelfPermissions(target,permissions)) {
    if (mPermissionListener != null)     mPermissionListener.onAllowed(requestCode,permissions);
    mPendingRequest=false;
  }
 else {
    if (RuntimePermissionUtils.shouldShowRequestPermissionRationale(target,permissions)) {
      if (mPermissionListener != null)       mPermissionListener.onRationale(mCommonRuntimePermissionRequest,target,requestCode,permissions);
      mPendingRequest=false;
    }
 else {
      ActivityCompat.requestPermissions(target,permissions,requestCode);
      mPendingRequest=true;
    }
  }
}","public static synchronized void requestPermission(int requestCode,@NonNull Activity target,PermissionListener listener,@NonNull String... permissions){
  if (target == null || permissions == null)   return;
  mPermissionListener=listener;
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
    if (mPermissionListener != null)     mPermissionListener.onAllowed(requestCode,permissions);
    mPendingRequest=false;
    return;
  }
  if (mPendingRequest) {
    final HashMap<String,Integer> permissionsMap=getPermissionMap(target,permissions,null);
    int[] grantResults=new int[permissionsMap.size()];
    for (int i=0; i < grantResults.length; i++)     grantResults[i]=permissionsMap.get(permissions[i]);
    mPermissionListener.onDenied(mInvokeCommonPermissionPermissionRequest,target,requestCode,permissions,grantResults,DENIED_REASON.PENDING);
    return;
  }
  if (RuntimePermissionUtils.hasSelfPermissions(target,permissions)) {
    if (mPermissionListener != null)     mPermissionListener.onAllowed(requestCode,permissions);
    mPendingRequest=false;
  }
 else {
    if (RuntimePermissionUtils.shouldShowRequestPermissionRationale(target,permissions)) {
      if (mPermissionListener != null)       mPermissionListener.onRationale(mInvokeCommonPermissionPermissionRequest,target,requestCode,permissions);
      mPendingRequest=false;
    }
 else {
      ActivityCompat.requestPermissions(target,permissions,requestCode);
      mPendingRequest=true;
    }
  }
}",0.9812606473594548
174185,"public static void onRequestPermissionsResult(Activity target,int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){
  if (RuntimePermissionUtils.verifyPermissions(grantResults)) {
    mPendingRequest=false;
    if (mPermissionListener != null)     mPermissionListener.onAllowed(requestCode,permissions);
  }
 else {
    if (!RuntimePermissionUtils.shouldShowRequestPermissionRationale(target,permissions)) {
      mPendingRequest=false;
      if (mPermissionListener != null)       mPermissionListener.onNeverAsk(requestCode,permissions,grantResults);
    }
 else {
      mPendingRequest=false;
      if (mPermissionListener != null)       mPermissionListener.onDenied(mCommonRuntimePermissionRequest,target,requestCode,permissions,grantResults,DENIED_REASON.USER);
    }
  }
}","public static void onRequestPermissionsResult(Activity target,int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){
  if (permissions.length < 1 || grantResults.length < 1)   return;
  if (mPermissionListener == null)   return;
  mPendingRequest=false;
  if (RuntimePermissionUtils.verifyPermissions(grantResults) || RuntimePermissionUtils.hasSelfPermissions(target,permissions)) {
    mPermissionListener.onAllowed(requestCode,permissions);
  }
 else   if (!RuntimePermissionUtils.shouldShowRequestPermissionRationale(target,permissions)) {
    mPermissionListener.onNeverAsk(requestCode,permissions,grantResults);
  }
 else {
    mPermissionListener.onDenied(mInvokeCommonPermissionPermissionRequest,target,requestCode,permissions,grantResults,DENIED_REASON.USER);
  }
}",0.5549278091650973
174186,"/** 
 * Returns true if the Activity or Fragment has access to all given permissions.
 * @param context     context
 * @param permissions permission list
 * @return returns true if the Activity or Fragment has access to all given permissions.
 */
public static boolean hasSelfPermissions(Context context,String... permissions){
  for (  String permission : permissions) {
    if (permissionExists(permission) && !hasSelfPermission(context,permission)) {
      return false;
    }
  }
  return true;
}","/** 
 * Returns true if the Activity or Fragment has access to all given permissions.
 * @param context     context
 * @param permissions permission list
 * @return returns true if the Activity or Fragment has access to all given permissions.
 */
public static boolean hasSelfPermissions(Context context,String... permissions){
  if (permissions == null || permissions.length < 1)   return false;
  for (  String permission : permissions) {
    if (permissionExists(permission) && !hasSelfPermission(context,permission)) {
      return false;
    }
  }
  return true;
}",0.9354536950420954
174187,"private void setInfo(){
  mTitleEt.setText(myGift.title);
  mPriceEt.setText(myGift.price);
  mDescriptionEt.setText(myGift.description);
  setRadioBtn();
  category=new Category();
  category.categoryId=myGift.categoryId;
  category.title=myGift.category;
  changeUIAfterCategorySelect();
  if (myGift.locationId != null) {
    city=new Place();
    city.id=myGift.locationId;
    city.name=getPlaceNameById(myGift.locationId);
    mChooseCityBtnTxt.setText(getPlaceNameById(myGift.locationId));
  }
  if (myGift.regionId != null) {
    region=new Place();
    region.id=myGift.regionId;
    region.name=getPlaceNameById(myGift.regionId);
    mChooseRegionBtnTxt.setText(getPlaceNameById(myGift.regionId));
  }
  findCityRegion();
  giftGalleryAdapter=new GiftGalleryAdapter(this,myGift.giftImages);
  mRecyclerView.setAdapter(giftGalleryAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,true));
  giftGalleryAdapter.notifyDataSetChanged();
  onUpdateGallery();
}","private void setInfo(){
  mTitleEt.setText(myGift.title);
  mPriceEt.setText(myGift.price);
  mDescriptionEt.setText(myGift.description);
  setRadioBtn();
  category=new Category();
  category.categoryId=myGift.categoryId;
  category.title=myGift.category;
  changeUIAfterCategorySelect();
  if (myGift.locationId != null && !myGift.locationId.equals(""String_Node_Str"")) {
    city=new Place();
    city.id=myGift.locationId;
    city.name=getPlaceNameById(myGift.locationId);
    mChooseCityBtnTxt.setText(getPlaceNameById(myGift.locationId));
    if (myGift.regionId != null && !myGift.regionId.equals(""String_Node_Str"")) {
      region=new Place();
      region.id=myGift.regionId;
      region.name=getPlaceNameById(myGift.regionId);
      mChooseRegionBtnTxt.setText(getPlaceNameById(myGift.regionId));
    }
    findCityRegion();
  }
  giftGalleryAdapter=new GiftGalleryAdapter(this,myGift.giftImages);
  mRecyclerView.setAdapter(giftGalleryAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,true));
  giftGalleryAdapter.notifyDataSetChanged();
  onUpdateGallery();
}",0.9477124183006536
174188,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  login_get_verification_tv.setVisibility(View.VISIBLE);
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    AppController.storeString(Constants.USER_ID,tokenOutput.userId);
    showS(""String_Node_Str"" + NumberTranslator.toPersian(AppController.getStoredString(Constants.TELEPHONE)) + ""String_Node_Str"");
    finish();
  }
 else   if (response.body() instanceof RegisterOutput) {
    String remainingSeconds=((RegisterOutput)response.body()).remainingSeconds;
    if (remainingSeconds != null && !remainingSeconds.equals(""String_Node_Str"")) {
      closeKeyboard();
      Snackbari.showS(mToolbarTitleTextView,""String_Node_Str"" + remainingSeconds + ""String_Node_Str"");
    }
 else {
      enterVerificationCode();
    }
  }
 else   if (response.body() instanceof ResponseBody) {
    AppController.storeBoolean(Constants.CALLED_SETDEVICE_BEFORE,true);
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  login_get_verification_tv.setVisibility(View.VISIBLE);
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    AppController.storeString(Constants.USER_ID,tokenOutput.userId);
    showS(""String_Node_Str"" + NumberTranslator.toPersian(AppController.getStoredString(Constants.TELEPHONE)) + ""String_Node_Str"");
    Intent intent=new Intent(getApplicationContext(),BottomBarActivity.class);
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);
  }
 else   if (response.body() instanceof RegisterOutput) {
    String remainingSeconds=((RegisterOutput)response.body()).remainingSeconds;
    if (remainingSeconds != null && !remainingSeconds.equals(""String_Node_Str"")) {
      closeKeyboard();
      Snackbari.showS(mToolbarTitleTextView,""String_Node_Str"" + remainingSeconds + ""String_Node_Str"");
    }
 else {
      enterVerificationCode();
    }
  }
 else   if (response.body() instanceof ResponseBody) {
    AppController.storeBoolean(Constants.CALLED_SETDEVICE_BEFORE,true);
  }
}",0.9263803680981596
174189,"@Override public void onBindViewHolder(final ChatListHolder holder,final int position){
}","@Override public void onBindViewHolder(final ChatListHolder holder,final int position){
  holder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((ChatActivity)mContext).hideFab();
      ((ChatActivity)mContext).replaceFragment(ChatConversationFragment.newInstance(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),ChatConversationFragment.class.getName());
    }
  }
);
}",0.3358490566037735
174190,"void init(){
  extractDataFromBundle();
  seen=false;
  mContext=this.getActivity();
  apiRequest=new ApiRequest(mContext,this);
  ViewGroup.MarginLayoutParams marginLayoutParams=(ViewGroup.MarginLayoutParams)mRecyclerView.getLayoutParams();
  marginLayoutParams.setMargins(0,0,0,0);
  mRecyclerView.setLayoutParams(marginLayoutParams);
  LinearLayoutManager layoutManager=new LinearLayoutManager(AppController.getAppContext());
  layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
  layoutManager.setStackFromEnd(true);
  layoutManager.setReverseLayout(true);
  mRecyclerView.setLayoutManager(layoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(layoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      count++;
      callApiGetChatConversation(count);
    }
  }
);
  callApiGetChatConversation(count);
  emptyTextView.setVisibility(View.GONE);
  chatConversationAdapter=new ChatConversationAdapter(this,mContext,chatConversationArrayList,""String_Node_Str"",countUnseen);
  mRecyclerView.setAdapter(chatConversationAdapter);
  blockMode();
}","protected void init(){
  extractDataFromBundle();
  seen=false;
  mContext=this.getActivity();
  apiRequest=new ApiRequest(mContext,this);
  ViewGroup.MarginLayoutParams marginLayoutParams=(ViewGroup.MarginLayoutParams)mRecyclerView.getLayoutParams();
  marginLayoutParams.setMargins(0,0,0,0);
  mRecyclerView.setLayoutParams(marginLayoutParams);
  LinearLayoutManager layoutManager=new LinearLayoutManager(AppController.getAppContext());
  layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
  layoutManager.setStackFromEnd(true);
  layoutManager.setReverseLayout(true);
  mRecyclerView.setLayoutManager(layoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(layoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      count++;
      callApiGetChatConversation(count);
    }
  }
);
  callApiGetChatConversation(count);
  emptyTextView.setVisibility(View.GONE);
  chatConversationAdapter=new ChatConversationAdapter(this,mContext,chatConversationArrayList,""String_Node_Str"",countUnseen);
  mRecyclerView.setAdapter(chatConversationAdapter);
  blockMode();
}",0.9955869373345102
174191,"public static ChatConversationFragment newInstance(String chatId,String userID,int position,String countUnseen){
  ChatConversationFragment chatConversationFragment=new ChatConversationFragment();
  Bundle args=new Bundle();
  args.putString(Constants.CHAT_ID,chatId);
  args.putString(Constants.USER_ID,userID);
  args.putString(Constants.COUNT_UNSEEN,countUnseen);
  positionSelected=position;
  chatConversationFragment.setArguments(args);
  return chatConversationFragment;
}","public static ChatConversationFragment newInstance(String chatId,String userID,String countUnseen){
  ChatConversationFragment chatConversationFragment=new ChatConversationFragment();
  Bundle args=new Bundle();
  args.putString(Constants.CHAT_ID,chatId);
  args.putString(Constants.USER_ID,userID);
  args.putString(Constants.COUNT_UNSEEN,countUnseen);
  chatConversationFragment.setArguments(args);
  return chatConversationFragment;
}",0.9541484716157204
174192,"@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof AppInfoOutput) {
    onUpdateVersionResponse((AppInfoOutput)response.body());
  }
 else   if (response.body() instanceof ArrayList) {
    ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
    if (gifts.size() > 0) {
      MaterialDialog.Builder builder=MaterialDialogBuilder.create(this).customView(R.layout.dialog_simple_yes_no,false);
      final MaterialDialog dialog=builder.build();
      ((TextView)dialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          ReceivedRequestsFragment receivedRequestsFragment=new ReceivedRequestsFragment();
          replaceFragment(receivedRequestsFragment,ReceivedRequestsFragment.class.getName());
          mToolbarTitleTextView.setText(""String_Node_Str"");
          dialog.dismiss();
        }
      }
);
      RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          dialog.dismiss();
        }
      }
);
      dialog.show();
    }
  }
 else {
    Snackbari.showS(mToolbarTitleTextView,""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof AppInfoOutput) {
    onUpdateVersionResponse((AppInfoOutput)response.body());
  }
 else   if (response.body() instanceof ArrayList) {
    ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
    if (gifts.size() > 0) {
      MaterialDialog.Builder builder=MaterialDialogBuilder.create(this).customView(R.layout.dialog_simple_yes_no,false);
      final MaterialDialog dialog=builder.build();
      ((TextView)dialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          startActivity(MyRequestsActivity.createIntent());
          dialog.dismiss();
        }
      }
);
      RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          dialog.dismiss();
        }
      }
);
      dialog.show();
    }
  }
 else {
    Snackbari.showS(mToolbarTitleTextView,""String_Node_Str"");
  }
}",0.9134948096885812
174193,"private void onUpdateVersionResponse(AppInfoOutput appInfoOutput){
  AppController.storeString(Constants.SMS_CENTER,appInfoOutput.smsCenter);
  boolean isForcedUpdate;
  if (appInfoOutput.updateInfo.force_update != null && appInfoOutput.updateInfo.force_update.equalsIgnoreCase(""String_Node_Str"")) {
    isForcedUpdate=true;
  }
 else {
    isForcedUpdate=false;
  }
  UpdateChecker updateChecker=new UpdateChecker(this,getResources().getString(R.string.app_name),appInfoOutput.updateInfo.version,appInfoOutput.updateInfo.apk_url,null,appInfoOutput.updateInfo.changes);
  if (isForcedUpdate || DeviceInfo.getAppVersionCode() < Integer.valueOf(updateChecker.mUpdateDetail.latestVersion)) {
    Intent[] intents=new Intent[1];
    intents[0]=Intent.makeMainActivity(new ComponentName(AppController.getAppContext(),BottomBarActivity.class));
    updateChecker.showUpdaterDialog(context,getString(R.string.update_to_new_version),getString(R.string.exist_new_version),appInfoOutput.updateInfo.changes,appInfoOutput.updateInfo.version,intents,isForcedUpdate);
    AppController.getInstance().setIsCheckedUpdate(true);
  }
 else {
    Snackbari.showS(mToolbarTitleTextView,""String_Node_Str"");
  }
}","private void onUpdateVersionResponse(AppInfoOutput appInfoOutput){
  AppController.storeString(Constants.SMS_CENTER,appInfoOutput.smsCenter);
  boolean isForcedUpdate;
  if (appInfoOutput.updateInfo.force_update != null && appInfoOutput.updateInfo.force_update.equalsIgnoreCase(""String_Node_Str"")) {
    isForcedUpdate=true;
  }
 else {
    isForcedUpdate=false;
  }
  UpdateChecker updateChecker=new UpdateChecker(this,getResources().getString(R.string.app_name),appInfoOutput.updateInfo.version,appInfoOutput.updateInfo.apk_url,null,appInfoOutput.updateInfo.changes);
  if (Integer.valueOf(appInfoOutput.updateInfo.version) > DeviceInfo.getAppVersionCode() && (isForcedUpdate || DeviceInfo.getAppVersionCode() < Integer.valueOf(updateChecker.mUpdateDetail.latestVersion))) {
    Intent[] intents=new Intent[1];
    intents[0]=Intent.makeMainActivity(new ComponentName(AppController.getAppContext(),BottomBarActivity.class));
    updateChecker.showUpdaterDialog(context,getString(R.string.update_to_new_version),getString(R.string.exist_new_version),appInfoOutput.updateInfo.changes,appInfoOutput.updateInfo.version,intents,isForcedUpdate);
    AppController.getInstance().setIsCheckedUpdate(true);
  }
 else {
    Snackbari.showS(mToolbarTitleTextView,""String_Node_Str"");
  }
}",0.9643724696356276
174194,"private void onUpdateVersionResponse(AppInfoOutput appInfoOutput){
  AppController.storeString(Constants.SMS_CENTER,appInfoOutput.smsCenter);
  boolean isForcedUpdate;
  if (appInfoOutput.updateInfo.force_update != null && appInfoOutput.updateInfo.force_update.equalsIgnoreCase(""String_Node_Str"")) {
    isForcedUpdate=true;
  }
 else {
    isForcedUpdate=false;
  }
  UpdateChecker updateChecker=new UpdateChecker(this,getResources().getString(R.string.app_name),appInfoOutput.updateInfo.version,appInfoOutput.updateInfo.apk_url,null,appInfoOutput.updateInfo.changes);
  if (isForcedUpdate || DeviceInfo.getAppVersionCode() < Integer.valueOf(updateChecker.mUpdateDetail.latestVersion)) {
    Intent[] intents=new Intent[1];
    intents[0]=Intent.makeMainActivity(new ComponentName(AppController.getAppContext(),BottomBarActivity.class));
    updateChecker.showUpdaterDialog(context,getString(R.string.update_to_new_version),getString(R.string.exist_new_version),appInfoOutput.updateInfo.changes,appInfoOutput.updateInfo.version,intents,isForcedUpdate);
    AppController.getInstance().setIsCheckedUpdate(true);
  }
 else {
    afterAll();
  }
}","private void onUpdateVersionResponse(AppInfoOutput appInfoOutput){
  AppController.storeString(Constants.SMS_CENTER,appInfoOutput.smsCenter);
  boolean isForcedUpdate;
  if (appInfoOutput.updateInfo.force_update != null && appInfoOutput.updateInfo.force_update.equalsIgnoreCase(""String_Node_Str"")) {
    isForcedUpdate=true;
  }
 else {
    isForcedUpdate=false;
  }
  UpdateChecker updateChecker=new UpdateChecker(this,getResources().getString(R.string.app_name),appInfoOutput.updateInfo.version,appInfoOutput.updateInfo.apk_url,null,appInfoOutput.updateInfo.changes);
  if (Integer.valueOf(appInfoOutput.updateInfo.version) > DeviceInfo.getAppVersionCode() && (isForcedUpdate || DeviceInfo.getAppVersionCode() < Integer.valueOf(updateChecker.mUpdateDetail.latestVersion))) {
    Intent[] intents=new Intent[1];
    intents[0]=Intent.makeMainActivity(new ComponentName(AppController.getAppContext(),BottomBarActivity.class));
    updateChecker.showUpdaterDialog(context,getString(R.string.update_to_new_version),getString(R.string.exist_new_version),appInfoOutput.updateInfo.changes,appInfoOutput.updateInfo.version,intents,isForcedUpdate);
    AppController.getInstance().setIsCheckedUpdate(true);
  }
 else {
    afterAll();
  }
}",0.9629941126997476
174195,"private void onUpdateVersionResponse(AppInfoOutput appInfoOutput){
  AppController.storeString(Constants.SMS_CENTER,appInfoOutput.smsCenter);
  boolean isForcedUpdate;
  if (appInfoOutput.updateInfo.force_update != null && appInfoOutput.updateInfo.force_update.equalsIgnoreCase(""String_Node_Str"")) {
    isForcedUpdate=true;
  }
 else {
    isForcedUpdate=false;
  }
  UpdateChecker updateChecker=new UpdateChecker(this,getResources().getString(R.string.app_name),appInfoOutput.updateInfo.version,appInfoOutput.updateInfo.apk_url,null,appInfoOutput.updateInfo.changes);
  if (isForcedUpdate || DeviceInfo.getAppVersionCode() < Integer.valueOf(updateChecker.mUpdateDetail.latestVersion)) {
    Intent[] intents=new Intent[1];
    intents[0]=Intent.makeMainActivity(new ComponentName(AppController.getAppContext(),BottomBarActivity.class));
    updateChecker.showUpdaterDialog(context,getString(R.string.update_to_new_version),getString(R.string.exist_new_version),appInfoOutput.updateInfo.changes,appInfoOutput.updateInfo.version,intents,isForcedUpdate);
    AppController.getInstance().setIsCheckedUpdate(true);
  }
 else {
    Snackbari.showS(mLog_in_out_lay,""String_Node_Str"");
  }
}","private void onUpdateVersionResponse(AppInfoOutput appInfoOutput){
  AppController.storeString(Constants.SMS_CENTER,appInfoOutput.smsCenter);
  boolean isForcedUpdate;
  if (appInfoOutput.updateInfo.force_update != null && appInfoOutput.updateInfo.force_update.equalsIgnoreCase(""String_Node_Str"")) {
    isForcedUpdate=true;
  }
 else {
    isForcedUpdate=false;
  }
  UpdateChecker updateChecker=new UpdateChecker(this,getResources().getString(R.string.app_name),appInfoOutput.updateInfo.version,appInfoOutput.updateInfo.apk_url,null,appInfoOutput.updateInfo.changes);
  if (Integer.valueOf(appInfoOutput.updateInfo.version) > DeviceInfo.getAppVersionCode() && (isForcedUpdate || DeviceInfo.getAppVersionCode() < Integer.valueOf(updateChecker.mUpdateDetail.latestVersion))) {
    Intent[] intents=new Intent[1];
    intents[0]=Intent.makeMainActivity(new ComponentName(AppController.getAppContext(),BottomBarActivity.class));
    updateChecker.showUpdaterDialog(context,getString(R.string.update_to_new_version),getString(R.string.exist_new_version),appInfoOutput.updateInfo.changes,appInfoOutput.updateInfo.version,intents,isForcedUpdate);
    AppController.getInstance().setIsCheckedUpdate(true);
  }
 else {
    Snackbari.showS(mLog_in_out_lay,""String_Node_Str"");
  }
}",0.9641985353946296
174196,"private void changeUIAfterCategorySelect(){
  mChooseCategoryLay.setBackgroundColor(getResources().getColor(R.color.white));
  mChooseCategoryTv.setVisibility(View.GONE);
  if (!category.title.equals(""String_Node_Str"")) {
    mChooseCategoryBtnTxt.setText(category.title);
  }
  mAfterCategorySelectLay.setVisibility(View.VISIBLE);
}","private void changeUIAfterCategorySelect(){
  if (!category.title.equals(""String_Node_Str"")) {
    mChooseCategoryBtnTxt.setText(category.title);
  }
  mAfterCategorySelectLay.setVisibility(View.VISIBLE);
}",0.764378478664193
174197,"void setListeners(){
  old_new_radiogr.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    RadioGroup radioGroup,    int checkedId){
switch (checkedId) {
case R.id.new_radiobtn:
        isNew=true;
      break;
case R.id.old_radiobtn:
    isNew=false;
  break;
}
}
}
);
mPriceEt.addTextChangedListener(new TextWatcher(){
boolean isEdiging;
@Override public void onTextChanged(CharSequence s,int start,int before,int count){
}
@Override public void beforeTextChanged(CharSequence s,int start,int count,int after){
}
@Override public void afterTextChanged(Editable s){
mPriceEt.removeTextChangedListener(this);
try {
String originalString=s.toString();
Long longval;
if (originalString.contains(""String_Node_Str"")) {
  originalString=originalString.replaceAll(""String_Node_Str"",""String_Node_Str"");
}
longval=Long.parseLong(originalString);
DecimalFormat formatter=(DecimalFormat)NumberFormat.getInstance(Locale.US);
formatter.applyPattern(""String_Node_Str"");
String formattedString=formatter.format(longval);
mPriceEt.setText(formattedString);
mPriceEt.setSelection(mPriceEt.getText().length());
}
 catch (NumberFormatException nfe) {
nfe.printStackTrace();
}
mPriceEt.addTextChangedListener(this);
}
}
);
mToolbarSendBtnTv.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mTitleEt.getText().toString().equals(""String_Node_Str"")) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
 else if (mPriceEt.getText().toString().equals(""String_Node_Str"")) {
Snackbari.showS(mTitleEt,""String_Node_Str"" + ""String_Node_Str"");
return;
}
 else if (mDescriptionEt.getText().toString().equals(""String_Node_Str"")) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
 else if (category == null) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
 else if (city == null) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
 else if (myGift.giftImages.size() == 0) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
Gift tempGift=new Gift(mDescriptionEt.getText().toString(),region != null ? (getPlaceNameById(city.id) + ""String_Node_Str"" + getPlaceNameById(region.id)) : getPlaceNameById(city.id),mTitleEt.getText().toString(),mPriceEt.getText().toString().replace(""String_Node_Str"",""String_Node_Str""),category.categoryId,city.id,(region == null ? ""String_Node_Str"" : region.id),isNew,myGift.giftImages);
if (editVersion) {
tempGift.giftId=myGift.giftId;
(new ApiRequest(context,RegisterGiftActivity.this)).editGift(tempGift);
}
 else {
(new ApiRequest(context,RegisterGiftActivity.this)).registerGift(tempGift);
AppController.deleteSavedGift();
}
mToolbarSendBtnTv.setVisibility(View.INVISIBLE);
mSendProgressView.setVisibility(View.VISIBLE);
}
}
);
mChooseRegionBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
FragmentManager fm=getSupportFragmentManager();
ChoosePlaceDialogFragment choosePlaceDialogFragment=ChoosePlaceDialogFragment.newInstance(city.id);
choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
}
}
);
mBackBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (!editVersion) {
saveMyGift();
Toasti.showS(getString(R.string.gift_info_saved));
}
onBackPressed();
}
}
);
mCancelBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
AppController.deleteSavedGift();
finish();
}
}
);
mSaveBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
saveMyGift();
Snackbari.showS(mTitleEt,getString(R.string.gift_info_saved));
}
}
);
mChooseCategoryBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
FragmentManager fm=getSupportFragmentManager();
ChooseCategoryDialogFragment chooseCategoryDF=new ChooseCategoryDialogFragment();
chooseCategoryDF.show(fm,chooseCategoryDF.getClass().getName());
}
}
);
mChooseImageBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
startActivityForResult(getPickImageChooserIntent(),200);
}
}
);
mChooseCityBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
FragmentManager fm=getSupportFragmentManager();
ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
}
}
);
}","void setListeners(){
  old_new_radiogr.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    RadioGroup radioGroup,    int checkedId){
switch (checkedId) {
case R.id.new_radiobtn:
        isNew=true;
      break;
case R.id.old_radiobtn:
    isNew=false;
  break;
}
}
}
);
mPriceEt.addTextChangedListener(new TextWatcher(){
boolean isEdiging;
@Override public void onTextChanged(CharSequence s,int start,int before,int count){
}
@Override public void beforeTextChanged(CharSequence s,int start,int count,int after){
}
@Override public void afterTextChanged(Editable s){
mPriceEt.removeTextChangedListener(this);
try {
String originalString=s.toString();
Long longval;
if (originalString.contains(""String_Node_Str"")) {
  originalString=originalString.replaceAll(""String_Node_Str"",""String_Node_Str"");
}
longval=Long.parseLong(originalString);
DecimalFormat formatter=(DecimalFormat)NumberFormat.getInstance(Locale.US);
formatter.applyPattern(""String_Node_Str"");
String formattedString=formatter.format(longval);
mPriceEt.setText(formattedString);
mPriceEt.setSelection(mPriceEt.getText().length());
}
 catch (NumberFormatException nfe) {
nfe.printStackTrace();
}
mPriceEt.addTextChangedListener(this);
}
}
);
mToolbarSendBtnTv.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mTitleEt.getText().toString().equals(""String_Node_Str"")) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
 else if (mPriceEt.getText().toString().equals(""String_Node_Str"")) {
Snackbari.showS(mTitleEt,""String_Node_Str"" + ""String_Node_Str"");
return;
}
 else if (mDescriptionEt.getText().toString().equals(""String_Node_Str"")) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
 else if (category == null) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
 else if (city == null) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
 else if (myGift.giftImages.size() == 0) {
Snackbari.showS(mTitleEt,""String_Node_Str"");
return;
}
Gift tempGift=new Gift(mDescriptionEt.getText().toString(),region != null ? (getPlaceNameById(city.id) + ""String_Node_Str"" + getPlaceNameById(region.id)) : getPlaceNameById(city.id),mTitleEt.getText().toString(),mPriceEt.getText().toString().replace(""String_Node_Str"",""String_Node_Str""),category.categoryId,city.id,(region == null ? ""String_Node_Str"" : region.id),isNew,myGift.giftImages);
if (editVersion) {
tempGift.giftId=myGift.giftId;
(new ApiRequest(context,RegisterGiftActivity.this)).editGift(tempGift);
}
 else {
(new ApiRequest(context,RegisterGiftActivity.this)).registerGift(tempGift);
AppController.deleteSavedGift();
}
mToolbarSendBtnTv.setVisibility(View.INVISIBLE);
mSendProgressView.setVisibility(View.VISIBLE);
}
}
);
mChooseRegionBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
chooseRegion();
}
}
);
mBackBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (!editVersion) {
saveMyGift();
Toasti.showS(getString(R.string.gift_info_saved));
}
onBackPressed();
}
}
);
mCancelBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
AppController.deleteSavedGift();
finish();
}
}
);
mSaveBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
saveMyGift();
Snackbari.showS(mTitleEt,getString(R.string.gift_info_saved));
}
}
);
mChooseCategoryBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
FragmentManager fm=getSupportFragmentManager();
ChooseCategoryDialogFragment chooseCategoryDF=new ChooseCategoryDialogFragment();
chooseCategoryDF.show(fm,chooseCategoryDF.getClass().getName());
}
}
);
mChooseImageBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
startActivityForResult(getPickImageChooserIntent(),200);
}
}
);
mChooseCityBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
FragmentManager fm=getSupportFragmentManager();
ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
}
}
);
}",0.9727419727419728
174198,"@Override public void onCitySelected(Place city){
  this.city=city;
  mChooseCityBtnTxt.setText(city.name);
  myGift.location=city.name;
  myGift.locationId=city.id;
  mChooseRegionBtnTxt.setText(""String_Node_Str"");
  findCityRegion();
}","@Override public void onCitySelected(Place city){
  this.city=city;
  mChooseCityBtnTxt.setText(city.name);
  myGift.location=city.name;
  myGift.locationId=city.id;
  mChooseRegionBtnTxt.setText(""String_Node_Str"");
  findCityRegion();
switch (mChooseRegionBtn.getVisibility()) {
case View.VISIBLE:
    chooseRegion();
  break;
}
}",0.8345070422535211
174199,"@Override public void onBindViewHolder(RequestToAGiftHolder myHolder,final int i){
  myHolder.mPhoneTv.setText(requestModels.get(i).fromUser);
  myHolder.rejectLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((TextView)yesNoDialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          apiRequest.denyRequest(requestModels.get(i).giftId,requestModels.get(i).fromUserId);
          yesProgressView.setVisibility(View.VISIBLE);
          yesTextView.setText(""String_Node_Str"");
        }
      }
);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          yesNoDialog.dismiss();
        }
      }
);
      yesProgressView.setVisibility(View.INVISIBLE);
      yesTextView.setText(""String_Node_Str"");
      yesNoDialog.show();
    }
  }
);
  myHolder.acceptLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((TextView)yesNoDialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          apiRequest.acceptRequest(requestModels.get(i).giftId,requestModels.get(i).fromUserId);
          yesProgressView.setVisibility(View.VISIBLE);
          yesTextView.setText(""String_Node_Str"");
        }
      }
);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          yesNoDialog.dismiss();
        }
      }
);
      yesProgressView.setVisibility(View.INVISIBLE);
      yesTextView.setText(""String_Node_Str"");
      yesNoDialog.show();
    }
  }
);
  myHolder.smsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",requestModels.get(i).fromUser,null)));
    }
  }
);
  myHolder.callLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String uri=""String_Node_Str"" + requestModels.get(i).fromUser;
      Intent intent=new Intent(Intent.ACTION_DIAL);
      intent.setData(Uri.parse(uri));
      mContext.startActivity(intent);
    }
  }
);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(i).fromUserId));
    }
  }
);
}","@Override public void onBindViewHolder(RequestToAGiftHolder myHolder,final int i){
  myHolder.mNumberTv.setText(""String_Node_Str"" + (i + 1));
  myHolder.mPhoneTv.setText(requestModels.get(i).fromUser);
  myHolder.rejectLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((TextView)yesNoDialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          apiRequest.denyRequest(requestModels.get(i).giftId,requestModels.get(i).fromUserId);
          yesProgressView.setVisibility(View.VISIBLE);
          yesTextView.setText(""String_Node_Str"");
        }
      }
);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          yesNoDialog.dismiss();
        }
      }
);
      yesProgressView.setVisibility(View.INVISIBLE);
      yesTextView.setText(""String_Node_Str"");
      yesNoDialog.show();
    }
  }
);
  myHolder.acceptLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((TextView)yesNoDialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          apiRequest.acceptRequest(requestModels.get(i).giftId,requestModels.get(i).fromUserId);
          yesProgressView.setVisibility(View.VISIBLE);
          yesTextView.setText(""String_Node_Str"");
        }
      }
);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          yesNoDialog.dismiss();
        }
      }
);
      yesProgressView.setVisibility(View.INVISIBLE);
      yesTextView.setText(""String_Node_Str"");
      yesNoDialog.show();
    }
  }
);
  myHolder.smsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",requestModels.get(i).fromUser,null)));
    }
  }
);
  myHolder.callLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String uri=""String_Node_Str"" + requestModels.get(i).fromUser;
      Intent intent=new Intent(Intent.ACTION_DIAL);
      intent.setData(Uri.parse(uri));
      mContext.startActivity(intent);
    }
  }
);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(i).fromUserId));
    }
  }
);
}",0.9897764685496449
174200,"private void init(){
  Bundle bundle=getArguments();
  if (bundle != null) {
    cancelable=getArguments().getBoolean(Constants.CANCELABLE);
    setCancelable(cancelable);
  }
  if (bundle != null && getArguments().getString(Constants.CITY_ID) != null) {
    locationId=getArguments().getString(Constants.CITY_ID);
    readLevel4FromJson();
    choosePlaceAdapter=new ChoosePlaceAdapter(this,getContext(),level4.getPlaces());
  }
 else {
    readLevel2FromJson();
    choosePlaceAdapter=new ChoosePlaceAdapter(this,getContext(),level2.getPlaces());
  }
  recyclerView.setAdapter(choosePlaceAdapter);
  recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
  setListeners();
}","private void init(){
  Bundle bundle=getArguments();
  if (bundle != null) {
    cancelable=getArguments().getBoolean(Constants.CANCELABLE);
    setCancelable(cancelable);
  }
  if (bundle != null && getArguments().getString(Constants.CITY_ID) != null) {
    locationId=getArguments().getString(Constants.CITY_ID);
    readLevel4FromJson();
    choosePlaceText.setText(""String_Node_Str"");
    choosePlaceAdapter=new ChoosePlaceAdapter(this,getContext(),level4.getPlaces());
  }
 else {
    readLevel2FromJson();
    choosePlaceAdapter=new ChoosePlaceAdapter(this,getContext(),level2.getPlaces());
  }
  recyclerView.setAdapter(choosePlaceAdapter);
  recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
  setListeners();
}",0.9664335664335664
174201,"public RequestToAGiftHolder(View itemView){
  super(itemView);
  this.itemView=itemView;
  rootLay=(RelativeLayout)itemView.findViewById(R.id.root_lay);
  callLay=(RelativeLayout)itemView.findViewById(R.id.call_lay);
  smsLay=(RelativeLayout)itemView.findViewById(R.id.sms_lay);
  acceptLay=(RelativeLayout)itemView.findViewById(R.id.accept_lay);
  rejectLay=(RelativeLayout)itemView.findViewById(R.id.deny_lay);
  mPhoneTv=(TextViewIranSansRegular)itemView.findViewById(R.id.rw_phone_number_tv);
  mCallIconIv=(ImageView)itemView.findViewById(R.id.rw_call_icon_iv);
  mSmsIconIv=(ImageView)itemView.findViewById(R.id.rw_sms_icon_iv);
}","public RequestToAGiftHolder(View itemView){
  super(itemView);
  this.itemView=itemView;
  rootLay=(RelativeLayout)itemView.findViewById(R.id.root_lay);
  callLay=(RelativeLayout)itemView.findViewById(R.id.call_lay);
  smsLay=(RelativeLayout)itemView.findViewById(R.id.sms_lay);
  acceptLay=(RelativeLayout)itemView.findViewById(R.id.accept_lay);
  rejectLay=(RelativeLayout)itemView.findViewById(R.id.deny_lay);
  mPhoneTv=(TextViewIranSansRegular)itemView.findViewById(R.id.rw_phone_number_tv);
  mNumberTv=itemView.findViewById(R.id.rw_number_tv);
  mCallIconIv=(ImageView)itemView.findViewById(R.id.rw_call_icon_iv);
  mSmsIconIv=(ImageView)itemView.findViewById(R.id.rw_sms_icon_iv);
}",0.9592760180995475
174202,"private void TabSelected(int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      unlock=true;
      mToolbarTitleTextView.setText(""String_Node_Str"");
      replaceFragment(homeCategoryFragment,HomeCategoryFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarMyGifts) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      unlock=true;
      mToolbarTitleTextView.setText(R.string.mygifts);
      replaceFragment(myGiftsFragment,MyGiftsFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarMyWall && unlock) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.bookshelf);
      Category category=new Category();
      category.categoryId=""String_Node_Str"";
      category.title=""String_Node_Str"";
      replaceFragment(HomeFragment.newInstance(Constants.CATEGORY_PAGETYPE,category),HomeFragment.class.getName() + CategoriesGridFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
}","private void TabSelected(int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      unlock=true;
      mToolbarTitleTextView.setText(""String_Node_Str"");
      replaceFragment(homeCategoryFragment,HomeCategoryFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarMyGifts) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      unlock=true;
      mToolbarTitleTextView.setText(R.string.mygifts);
      replaceFragment(myGiftsFragment,MyGiftsFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarMyWall && unlock) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.bookshelf);
      Category category=new Category();
      category.categoryId=""String_Node_Str"";
      category.title=""String_Node_Str"";
      replaceFragment(HomeFragment.newInstance(Constants.CATEGORY_PAGETYPE,category),HomeFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
}",0.982088248143294
174203,"private void settingBottomBar(Bundle savedInstanceState){
  mBottomBar=BottomBar.attach(this,savedInstanceState);
  mBottomBar.noTopOffset();
  mBottomBar.useFixedMode();
  mBottomBar.setTypeFace(""String_Node_Str"");
  mBottomBar.setItems(R.menu.menu_bottombar);
  mBottomBar.findViewById(R.id.bb_bottom_bar_background_view).setBackgroundColor(getResources().getColor(R.color.colorPrimaryDark));
  int color=getResources().getColor(R.color.white);
  ((ImageView)mBottomBar.findViewById(R.id.bb_bottom_bar_icon)).setColorFilter(color);
  mBottomBar.setOnMenuTabClickListener(new OnMenuTabClickListener(){
    @Override public void onMenuTabSelected(    @IdRes int menuItemId){
      TabSelected(menuItemId);
    }
    @Override public void onMenuTabReSelected(    @IdRes int menuItemId){
      TabSelected(menuItemId);
      if (menuItemId == R.id.bottomBarMyGifts) {
      }
 else       if (menuItemId == R.id.bottomBarMyWall) {
        onBackPressed();
      }
    }
  }
);
}","private void settingBottomBar(Bundle savedInstanceState){
  mBottomBar=BottomBar.attach(this,savedInstanceState);
  mBottomBar.noTopOffset();
  mBottomBar.useFixedMode();
  mBottomBar.setTypeFace(""String_Node_Str"");
  mBottomBar.setItems(R.menu.menu_bottombar);
  mBottomBar.findViewById(R.id.bb_bottom_bar_background_view).setBackgroundColor(getResources().getColor(R.color.colorPrimaryDark));
  int color=getResources().getColor(R.color.white);
  ((ImageView)mBottomBar.findViewById(R.id.bb_bottom_bar_icon)).setColorFilter(color);
  mBottomBar.setOnMenuTabClickListener(new OnMenuTabClickListener(){
    @Override public void onMenuTabSelected(    @IdRes int menuItemId){
      TabSelected(menuItemId);
    }
    @Override public void onMenuTabReSelected(    @IdRes int menuItemId){
      TabSelected(menuItemId);
      if (menuItemId == R.id.bottomBarHome) {
        if (getSupportFragmentManager().getBackStackEntryCount() > 1) {
          onBackPressed();
        }
      }
 else       if (menuItemId == R.id.bottomBarMyGifts) {
      }
 else       if (menuItemId == R.id.bottomBarMyWall) {
      }
    }
  }
);
}",0.8958930276981852
174204,"@Override public void onBackPressed(){
  if (getSupportFragmentManager().getBackStackEntryCount() > 0) {
    int index=getSupportFragmentManager().getBackStackEntryCount() - 1;
    FragmentManager.BackStackEntry backEntry=getSupportFragmentManager().getBackStackEntryAt(index);
    String tag=backEntry.getName();
    if (tag.equals(HomeCategoryFragment.class.getName() + Constants.HOME_PAGETYPE)) {
      finish();
    }
 else     if (tag.equals(BookmarkFragment.class.getName()) || tag.equals(StatisticFragment.class.getName()) || tag.equals(MyRequestsFragment.class.getName())|| tag.equals(RequestsToAGiftFragment.class.getName())|| tag.equals(OurTeamFragment.class.getName())|| tag.equals(ContactUsFragment.class.getName())|| tag.equals(HomeFragment.class.getName() + CategoriesGridFragment.class.getName())) {
      super.onBackPressed();
    }
 else {
      clearStack();
      mToolbarTitleTextView.setText(""String_Node_Str"");
      replaceFragment(homeCategoryFragment,HomeCategoryFragment.class.getName());
      menuItemIdSelected=R.id.bottomBarHome;
    }
  }
}","@Override public void onBackPressed(){
  if (getSupportFragmentManager().getBackStackEntryCount() > 0) {
    int index=getSupportFragmentManager().getBackStackEntryCount() - 1;
    FragmentManager.BackStackEntry backEntry=getSupportFragmentManager().getBackStackEntryAt(index);
    String tag=backEntry.getName();
    if (tag.equals(HomeCategoryFragment.class.getName())) {
      finish();
    }
 else     if (tag.equals(HomeFragment.class.getName() + CategoriesGridFragment.class.getName())) {
      super.onBackPressed();
    }
 else {
      clearStack();
      mToolbarTitleTextView.setText(""String_Node_Str"");
      replaceFragment(homeCategoryFragment,HomeCategoryFragment.class.getName());
      menuItemIdSelected=R.id.bottomBarHome;
    }
  }
}",0.8245614035087719
174205,"@Override public void onMenuTabReSelected(@IdRes int menuItemId){
  TabSelected(menuItemId);
  if (menuItemId == R.id.bottomBarMyGifts) {
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
    onBackPressed();
  }
}","@Override public void onMenuTabReSelected(@IdRes int menuItemId){
  TabSelected(menuItemId);
  if (menuItemId == R.id.bottomBarHome) {
    if (getSupportFragmentManager().getBackStackEntryCount() > 1) {
      onBackPressed();
    }
  }
 else   if (menuItemId == R.id.bottomBarMyGifts) {
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
  }
}",0.6879432624113475
174206,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_my_requests);
  ButterKnife.bind(this);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  FloatingActionButton fab=(FloatingActionButton)findViewById(R.id.fab);
  fab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Snackbar.make(view,""String_Node_Str"",Snackbar.LENGTH_LONG).setAction(""String_Node_Str"",null).show();
    }
  }
);
  searchIV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(SearchActivity.createIntent());
    }
  }
);
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
  }
 else {
    hasNotAuthorityFirstTime=true;
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(MyRequestsActivity.this,LoginActivity.class));
      }
    }
);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_my_requests);
  ButterKnife.bind(this);
  FloatingActionButton fab=(FloatingActionButton)findViewById(R.id.fab);
  fab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Snackbar.make(view,""String_Node_Str"",Snackbar.LENGTH_LONG).setAction(""String_Node_Str"",null).show();
    }
  }
);
  searchIV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(SearchActivity.createIntent());
    }
  }
);
  backIV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onBackPressed();
    }
  }
);
  replaceFragment(new MyRequestsFragment(),MyRequestsFragment.class.getName());
}",0.6496815286624203
174207,"@Override public void onClick(View v){
  startActivity(new Intent(MyRequestsActivity.this,LoginActivity.class));
}","@Override public void onClick(View view){
  onBackPressed();
}",0.5681818181818182
174208,"@Override public void onClick(View view){
  RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
  Bundle bundle=new Bundle();
  bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
  bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
  bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
  requestsToAGiftFragment.setArguments(bundle);
  ((BottomBarActivity)mContext).replaceFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
}","@Override public void onClick(View view){
  RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
  Bundle bundle=new Bundle();
  bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
  bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
  bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
  requestsToAGiftFragment.setArguments(bundle);
  ((MyRequestsActivity)mContext).replaceFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
}",0.981427174975562
174209,"@Override public void onBindViewHolder(final ReceiveGiftsRequestHolder myHolder,final int i){
  myHolder.mTitleTv.setText(gifts.get(i).title);
  myHolder.mUnseenMsgTv.setText(gifts.get(i).requestCount);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
      bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
      requestsToAGiftFragment.setArguments(bundle);
      ((BottomBarActivity)mContext).replaceFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}","@Override public void onBindViewHolder(final ReceiveGiftsRequestHolder myHolder,final int i){
  myHolder.mTitleTv.setText(gifts.get(i).title);
  myHolder.mUnseenMsgTv.setText(gifts.get(i).requestCount);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
      bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
      requestsToAGiftFragment.setArguments(bundle);
      ((MyRequestsActivity)mContext).replaceFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}",0.9885611077664058
174210,"@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
}","@Override protected void init(){
  super.init();
}",0.5347593582887701
174211,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    if (hasNotAuthorityFirstTime) {
      setupViewPager(mainVp);
      mainTabs.setupWithViewPager(mainVp);
      mainVp.setCurrentItem(1,false);
    }
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
  }
}","@Override public void onResume(){
  super.onResume();
  ((MyRequestsActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
  if (AppController.getStoredString(Constants.Authorization) != null) {
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    if (hasNotAuthorityFirstTime) {
      setupViewPager(mainVp);
      mainTabs.setupWithViewPager(mainVp);
      mainVp.setCurrentItem(1,false);
    }
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
  }
}",0.9168241965973536
174212,"@Override public void onBindViewHolder(GiftHolder myHolder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.background).crossFade().into(myHolder.getmItemIv());
  myHolder.getGiftTitleTv().setText(gifts.get(i).title);
  myHolder.getGiftLocationTv().setText(gifts.get(i).address);
  myHolder.getGiftCreatedTimeTv().setText(gifts.get(i).createDateTime);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mContext.startActivity(GiftDetailActivity.createIntent(gifts.get(i)));
    }
  }
);
}","@Override public void onBindViewHolder(GiftHolder myHolder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.background).crossFade().into(myHolder.getmItemIv());
  myHolder.getGiftTitleTv().setText(gifts.get(i).title);
  myHolder.getGiftLocationTv().setText(gifts.get(i).address);
  myHolder.getGiftCreatedTimeTv().setText(gifts.get(i).description);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mContext.startActivity(GiftDetailActivity.createIntent(gifts.get(i)));
    }
  }
);
}",0.9841068022886204
174213,"public ViewHolder(View view){
  super(view);
  coverImageView=(ImageView)view.findViewById(R.id.cell_movie_iv);
  mCellNameMovieTv=(TextView)view.findViewById(R.id.cell_name_movie_tv);
  mCellPriceMovieTv=(TextView)view.findViewById(R.id.cell_price_movie_tv);
  mShowcaseMoreInfoCategoryTv=(TextView)view.findViewById(R.id.showcase_more_info_category_tv);
  mRippleCardview=(RippleView)view.findViewById(R.id.ripple_cell_showcase);
}","public ViewHolder(View view){
  super(view);
  this.view=view;
  coverImageView=(ImageView)view.findViewById(R.id.cell_movie_iv);
  mCellNameMovieTv=(TextView)view.findViewById(R.id.cell_name_movie_tv);
  mCellPriceMovieTv=(TextView)view.findViewById(R.id.cell_price_movie_tv);
  mShowcaseMoreInfoCategoryTv=(TextView)view.findViewById(R.id.showcase_more_info_category_tv);
}",0.8836633663366337
174214,"@Override public void onBindViewHolder(final ViewHolder holder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.white).crossFade().into(holder.coverImageView);
  holder.mCellNameMovieTv.setText(gifts.get(i).title);
  holder.mShowcaseMoreInfoCategoryTv.setText(gifts.get(i).address);
  holder.mRippleCardview.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
    @Override public void onComplete(    RippleView rippleMoviePic){
      mContext.startActivity(GiftDetailActivity.createIntent(gifts.get(i)));
    }
  }
);
}","@Override public void onBindViewHolder(final ViewHolder holder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.white).crossFade().into(holder.coverImageView);
  holder.mCellNameMovieTv.setText(gifts.get(i).title);
  holder.mShowcaseMoreInfoCategoryTv.setText(gifts.get(i).address);
  holder.view.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(GiftDetailActivity.createIntent(gifts.get(i)));
    }
  }
);
}",0.8977119784656796
174215,"@Override protected void init(){
  super.init();
  adapter=new ContactUsAdapter(context);
  mRecyclerView.setAdapter(adapter);
  GridLayoutManager layoutManager=new RtlGridAutofitLayoutManager(AppController.getAppContext(),(int)MetricConverter.dp2px(context,80));
  mRecyclerView.setLayoutManager(layoutManager);
}","@Override protected void init(){
  super.init();
  adapter=new ContactUsAdapter(context);
  mRecyclerView.setAdapter(adapter);
  GridLayoutManager layoutManager=new RtlGridAutofitLayoutManager(AppController.getAppContext(),(int)MetricConverter.dp2px(context,80));
  mRecyclerView.setLayoutManager(layoutManager);
  mRecyclerView.setVisibility(View.VISIBLE);
  fragmentProgressBar.setVisibility(View.INVISIBLE);
}",0.8650137741046832
174216,"void findViews(View view){
  more=(TextView)view.findViewById(R.id.more);
  mMoreLayout=(RelativeLayout)view.findViewById(R.id.more_layout);
  description=(TextView)view.findViewById(R.id.description);
  mHorizontalRecycleView=(RecyclerView)view.findViewById(R.id.recycler_view_collection);
  mRippleBtnMore=(RippleView)view.findViewById(R.id.ripple_btn_more);
  categoryImg=(ImageView)view.findViewById(R.id.category_img);
}","void findViews(View view){
  more=(TextView)view.findViewById(R.id.more_tv);
  mMoreLayout=(RelativeLayout)view.findViewById(R.id.more_layout);
  description=(TextView)view.findViewById(R.id.description);
  mHorizontalRecycleView=(RecyclerView)view.findViewById(R.id.recycler_view_collection);
  categoryImg=(ImageView)view.findViewById(R.id.category_img);
}",0.9067688378033204
174217,"@Override public void onBindViewHolder(ShowcaseMoreInfoHolder showcaseMoreInfoHolder,final int position){
  showcaseMoreInfoHolder.description.setText(categories.get(position).title);
  Glide.with(mContext).load(categories.get(position).imageUrl).centerCrop().placeholder(R.color.background).crossFade().into(showcaseMoreInfoHolder.categoryImg);
  showcaseMoreInfoHolder.mRippleBtnMore.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
    @Override public void onComplete(    RippleView rippleView){
      ((BottomBarActivity)mContext).replaceFragment(HomeFragment.newInstance(Constants.CATEGORY_PAGETYPE,categories.get(position)),HomeFragment.class.getName() + CategoriesGridFragment.class.getName());
    }
  }
);
  mLayoutManager=new LinearLayoutManager(mContext);
  mLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
  mLayoutManager.setReverseLayout(true);
  showcaseMoreInfoHolder.mHorizontalRecycleView.setNestedScrollingEnabled(false);
  if (mGiftPositionMap.get(position).gifts.size() == 0) {
    mGiftPositionMap.get(position).showcaseMoreInfoAdapter=new ShowcaseMoreInfoAdapter(mContext,mGiftPositionMap.get(position).gifts);
    getGifts(position,mGiftPositionMap.get(position).start_index);
  }
  showcaseMoreInfoHolder.mHorizontalRecycleView.setAdapter(mGiftPositionMap.get(position).showcaseMoreInfoAdapter);
  showcaseMoreInfoHolder.mHorizontalRecycleView.setLayoutManager(mLayoutManager);
}","@Override public void onBindViewHolder(ShowcaseMoreInfoHolder showcaseMoreInfoHolder,final int position){
  showcaseMoreInfoHolder.description.setText(categories.get(position).title);
  Glide.with(mContext).load(categories.get(position).imageUrl).centerCrop().placeholder(R.color.background).crossFade().into(showcaseMoreInfoHolder.categoryImg);
  showcaseMoreInfoHolder.more.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((BottomBarActivity)mContext).replaceFragment(HomeFragment.newInstance(Constants.CATEGORY_PAGETYPE,categories.get(position)),HomeFragment.class.getName() + CategoriesGridFragment.class.getName());
    }
  }
);
  mLayoutManager=new LinearLayoutManager(mContext);
  mLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
  mLayoutManager.setReverseLayout(true);
  showcaseMoreInfoHolder.mHorizontalRecycleView.setNestedScrollingEnabled(false);
  if (mGiftPositionMap.get(position).gifts.size() == 0) {
    mGiftPositionMap.get(position).showcaseMoreInfoAdapter=new ShowcaseMoreInfoAdapter(mContext,mGiftPositionMap.get(position).gifts);
    getGifts(position,mGiftPositionMap.get(position).start_index);
  }
  showcaseMoreInfoHolder.mHorizontalRecycleView.setAdapter(mGiftPositionMap.get(position).showcaseMoreInfoAdapter);
  showcaseMoreInfoHolder.mHorizontalRecycleView.setLayoutManager(mLayoutManager);
}",0.9699964701729616
174218,"private void setListeners(){
}","private void setListeners(){
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      apiRequest.getCategories();
    }
  }
);
}",0.2575107296137339
174219,"@Override public void onResponse(Call call,Response response){
  mRecyclerView.setVisibility(View.VISIBLE);
  mProgressView.setVisibility(View.INVISIBLE);
  messageTextview.setVisibility(View.INVISIBLE);
  ArrayList<Category> categories=(ArrayList<Category>)response.body();
  this.categories.clear();
  this.categories.addAll(categories);
  homeCategoriesAdapter=new HomeCategoriesAdapter(context,this.categories);
  mRecyclerView.setAdapter(homeCategoriesAdapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
}","@Override public void onResponse(Call call,Response response){
  mRecyclerView.setVisibility(View.VISIBLE);
  mProgressView.setVisibility(View.INVISIBLE);
  messageTextview.setVisibility(View.INVISIBLE);
  mSwipeRefreshLayout.setRefreshing(false);
  ArrayList<Category> categories=(ArrayList<Category>)response.body();
  this.categories.clear();
  this.categories.addAll(categories);
  homeCategoriesAdapter=new HomeCategoriesAdapter(context,this.categories);
  mRecyclerView.setAdapter(homeCategoriesAdapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
}",0.9633943427620631
174220,"@Override public void onApplyFiltering(Place place,Place region,Category category){
  this.place=place;
  this.category=category;
  this.region=region;
  progressView.setVisibility(View.VISIBLE);
  mRecyclerView.setVisibility(View.INVISIBLE);
  mMessageTextView.setVisibility(View.INVISIBLE);
  if (place != null || category != null) {
    setFilteringBtnColor(R.color.colorPrimary);
  }
  gifts.clear();
  startIndex=0;
}","@Override public void onApplyFiltering(Place place,Place region,Category category){
  this.place=place;
  this.category=category;
  this.region=region;
  progressView.setVisibility(View.VISIBLE);
  mRecyclerView.setVisibility(View.INVISIBLE);
  mMessageTextView.setVisibility(View.INVISIBLE);
  if (place != null || category != null) {
    setFilteringBtnColor(R.color.colorPrimary);
  }
  gifts.clear();
  startIndex=0;
  getGifts();
}",0.9836829836829836
174221,"private void setListeners(){
  categoryFilterLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChooseCategoryDialogFragment chooseCategoryDF=new ChooseCategoryDialogFragment();
      chooseCategoryDF.setTargetFragment(HomeFilteringDialogFragment.this,0);
      chooseCategoryDF.show(fm,chooseCategoryDF.getClass().getName());
    }
  }
);
  locationFilterLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
      choosePlaceDialogFragment.setTargetFragment(HomeFilteringDialogFragment.this,0);
    }
  }
);
  regionFilterLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=ChoosePlaceDialogFragment.newInstance(choosenPlace.id);
      choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
      choosePlaceDialogFragment.setTargetFragment(HomeFilteringDialogFragment.this,0);
    }
  }
);
  applyFilterTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((HomeFilteringCallback)getTargetFragment()).onApplyFiltering(choosenPlace,choosenRegion,choosenCategory);
      dismiss();
    }
  }
);
  cancelFilterTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((HomeFilteringCallback)getTargetFragment()).onApplyFiltering(null,null,null);
      dismiss();
    }
  }
);
}","private void setListeners(){
  categoryFilterLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChooseCategoryDialogFragment chooseCategoryDF=new ChooseCategoryDialogFragment();
      chooseCategoryDF.setTargetFragment(HomeFilteringDialogFragment.this,0);
      chooseCategoryDF.show(fm,chooseCategoryDF.getClass().getName());
    }
  }
);
  locationFilterLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
      choosePlaceDialogFragment.setTargetFragment(HomeFilteringDialogFragment.this,0);
    }
  }
);
  regionFilterLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=ChoosePlaceDialogFragment.newInstance(choosenPlace.id);
      choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
      choosePlaceDialogFragment.setTargetFragment(HomeFilteringDialogFragment.this,0);
    }
  }
);
  applyFilterTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      homeFilteringCallback.onApplyFiltering(choosenPlace,choosenRegion,choosenCategory);
      dismiss();
    }
  }
);
  cancelFilterTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      homeFilteringCallback.onApplyFiltering(null,null,null);
      dismiss();
    }
  }
);
}",0.9865083648138154
174222,"@Override public void onClick(View v){
  ((HomeFilteringCallback)getTargetFragment()).onApplyFiltering(null,null,null);
  dismiss();
}","@Override public void onClick(View v){
  homeFilteringCallback.onApplyFiltering(null,null,null);
  dismiss();
}",0.8979591836734694
174223,"private void loginWithCode(String confirmationCode){
  phoneConfirimationCodeEt.setText(confirmationCode);
  if (!confirmationCode.trim().matches(regexStr)) {
    closeKeyboard();
    Snackbari.showS(mBackBtn,""String_Node_Str"");
    return;
  }
  AppController.storeString(Constants.FIREBASE_REG_TOKEN,""String_Node_Str"");
  if (AppController.getStoredString(Constants.FIREBASE_REG_TOKEN) == null) {
    closeKeyboard();
    Snackbari.showL(mBackBtn,""String_Node_Str"");
    return;
  }
  if (!AppController.getStoredBoolean(Constants.CALLED_SETDEVICE_BEFORE,false)) {
    String deviceID=DeviceInfo.getDeviceID(this);
    Log.d(""String_Node_Str"",deviceID);
    apiRequest.setDevice(new SetDeviceInput(AppController.getStoredString(Constants.FIREBASE_REG_TOKEN),deviceID));
    closeKeyboard();
    Snackbari.showL(mBackBtn,""String_Node_Str"");
    return;
  }
  apiRequest.login(confirmationCode,DeviceInfo.getDeviceID(context));
  progressView.setVisibility(View.VISIBLE);
  login_get_verification_tv.setVisibility(View.INVISIBLE);
  secondBtnLay.setOnClickListener(notRecievedCode);
}","private void loginWithCode(String confirmationCode){
  phoneConfirimationCodeEt.setText(confirmationCode);
  if (!confirmationCode.trim().matches(regexStr)) {
    closeKeyboard();
    Snackbari.showS(mBackBtn,""String_Node_Str"");
    return;
  }
  if (AppController.getStoredString(Constants.FIREBASE_REG_TOKEN) == null) {
    closeKeyboard();
    Snackbari.showL(mBackBtn,""String_Node_Str"");
    return;
  }
  if (!AppController.getStoredBoolean(Constants.CALLED_SETDEVICE_BEFORE,false)) {
    String deviceID=DeviceInfo.getDeviceID(this);
    Log.d(""String_Node_Str"",deviceID);
    apiRequest.setDevice(new SetDeviceInput(AppController.getStoredString(Constants.FIREBASE_REG_TOKEN),deviceID));
    closeKeyboard();
    Snackbari.showL(mBackBtn,""String_Node_Str"");
    return;
  }
  apiRequest.login(confirmationCode,DeviceInfo.getDeviceID(context));
  progressView.setVisibility(View.VISIBLE);
  login_get_verification_tv.setVisibility(View.INVISIBLE);
  secondBtnLay.setOnClickListener(notRecievedCode);
}",0.6618842659014825
174224,"private void setListeners(){
  mContactUsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent telegram=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      startActivity(telegram);
    }
  }
);
  mAboutLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(AppIntro.createIntent());
    }
  }
);
  myGiftLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new MyGiftsFragment(),MyGiftsFragment.class.getName());
    }
  }
);
  myRequestsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new MyRequestsFragment(),MyRequestsFragment.class.getName());
    }
  }
);
  locationLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.setTargetFragment(MyWallFragment.this,0);
      choosePlaceDialogFragment.show(fm,""String_Node_Str"");
    }
  }
);
  statisticLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new StatisticFragment(),StatisticFragment.class.getName());
    }
  }
);
  bookmarkLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((BottomBarActivity)getActivity()).replaceFragment(new BookmarkFragment(),BookmarkFragment.class.getName());
    }
  }
);
}","private void setListeners(){
  mOurTeamLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
    }
  }
);
  mContactUsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent telegram=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      startActivity(telegram);
    }
  }
);
  mAboutLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(AppIntro.createIntent());
    }
  }
);
  myGiftLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new MyGiftsFragment(),MyGiftsFragment.class.getName());
    }
  }
);
  myRequestsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new MyRequestsFragment(),MyRequestsFragment.class.getName());
    }
  }
);
  locationLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.setTargetFragment(MyWallFragment.this,0);
      choosePlaceDialogFragment.show(fm,""String_Node_Str"");
    }
  }
);
  statisticLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new StatisticFragment(),StatisticFragment.class.getName());
    }
  }
);
  bookmarkLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((BottomBarActivity)getActivity()).replaceFragment(new BookmarkFragment(),BookmarkFragment.class.getName());
    }
  }
);
}",0.9669333333333332
174225,"@Override public void onBackPressed(){
  if (getSupportFragmentManager().getBackStackEntryCount() > 0) {
    int index=getSupportFragmentManager().getBackStackEntryCount() - 1;
    FragmentManager.BackStackEntry backEntry=getSupportFragmentManager().getBackStackEntryAt(index);
    String tag=backEntry.getName();
    if (tag.equals(HomeFragment.class.getName() + Constants.HOME_PAGETYPE)) {
      finish();
    }
 else     if (tag.equals(BookmarkFragment.class.getName()) || tag.equals(StatisticFragment.class.getName()) || tag.equals(MyRequestsFragment.class.getName())|| tag.equals(RequestsToAGiftFragment.class.getName())|| tag.equals(MyGiftsFragment.class.getName())|| tag.equals(OurTeamFragment.class.getName())|| tag.equals(HomeFragment.class.getName() + CategoriesGridFragment.class.getName())) {
      super.onBackPressed();
    }
 else {
      mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
      replaceFragment(homeFragment,HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
    }
  }
}","@Override public void onBackPressed(){
  if (getSupportFragmentManager().getBackStackEntryCount() > 0) {
    int index=getSupportFragmentManager().getBackStackEntryCount() - 1;
    FragmentManager.BackStackEntry backEntry=getSupportFragmentManager().getBackStackEntryAt(index);
    String tag=backEntry.getName();
    if (tag.equals(HomeFragment.class.getName() + Constants.HOME_PAGETYPE)) {
      finish();
    }
 else     if (tag.equals(BookmarkFragment.class.getName()) || tag.equals(StatisticFragment.class.getName()) || tag.equals(MyRequestsFragment.class.getName())|| tag.equals(RequestsToAGiftFragment.class.getName())|| tag.equals(MyGiftsFragment.class.getName())|| tag.equals(OurTeamFragment.class.getName())|| tag.equals(ContactUsFragment.class.getName())|| tag.equals(HomeFragment.class.getName() + CategoriesGridFragment.class.getName())) {
      super.onBackPressed();
    }
 else {
      mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
      replaceFragment(homeFragment,HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
    }
  }
}",0.9780018331805684
174226,"@Override protected void onResume(){
  super.onResume();
  if (giftId != null) {
    apiRequest.getGift(giftId);
  }
}","@Override protected void onResume(){
  super.onResume();
  if (giftId != null) {
    apiRequest.getGift(giftId);
  }
  ViewTreeObserver viewTreeObserver=viewPager.getViewTreeObserver();
  viewTreeObserver.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
      int viewPagerWidth=viewPager.getWidth();
      float viewPagerHeight=(float)(viewPagerWidth * 1);
      layoutParams.width=viewPagerWidth;
      layoutParams.height=(int)viewPagerHeight;
      viewPager.setLayoutParams(layoutParams);
      viewPager.getViewTreeObserver().removeGlobalOnLayoutListener(this);
    }
  }
);
}",0.2545846817691478
174227,"@Override public void onResponse(Call call,Response response){
  super.onResponse(call,response);
  progressView.setVisibility(View.INVISIBLE);
  StatisticsOutput statisticsOutput=(StatisticsOutput)response.body();
  int i=0;
  for (  Map.Entry<String,String> entry : statisticsOutput.statistics.entrySet()) {
    i++;
    if (i > 10) {
      break;
    }
    String key=entry.getKey();
    String value=entry.getValue();
    TextView valueTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    valueTxt.setText(value);
    valueTxt.setVisibility(View.VISIBLE);
    TextView keyTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    keyTxt.setText(key);
    keyTxt.setVisibility(View.VISIBLE);
    View divider=rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    divider.setVisibility(View.VISIBLE);
  }
}","@Override public void onResponse(Call call,Response response){
  super.onResponse(call,response);
  progressView.setVisibility(View.INVISIBLE);
  StatisticsOutput statisticsOutput=(StatisticsOutput)response.body();
  adapter=new StatisticAdapter(context,statisticsOutput.statistics);
  recyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  recyclerView.setLayoutManager(linearLayoutManager);
}",0.2824572514249525
174228,"@Override public void onResponse(Call call,Response response,final int position,String tag){
  if (response.body() instanceof ResponseBody) {
    if (tag.equals(RequestName.DenyRequest)) {
      requestModels.remove(position);
      notifyDataSetChanged();
    }
 else     if (tag.equals(RequestName.AcceptRequest)) {
      afterAcceptDialog=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_after_accept_request,false).build();
      TextView message=(TextView)afterAcceptDialog.findViewById(R.id.message_textview);
      message.setText(""String_Node_Str"" + requestModels.get(position).fromUser + ""String_Node_Str"");
      ImageView callIV=(ImageView)afterAcceptDialog.findViewById(R.id.call_iv);
      callIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String uri=""String_Node_Str"" + requestModels.get(position).fromUser;
          Intent intent=new Intent(Intent.ACTION_DIAL);
          intent.setData(Uri.parse(uri));
          mContext.startActivity(intent);
        }
      }
);
      ImageView smsIV=(ImageView)afterAcceptDialog.findViewById(R.id.sms_iv);
      smsIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",requestModels.get(position).fromUser,null)));
        }
      }
);
      ImageView profileIV=(ImageView)afterAcceptDialog.findViewById(R.id.profile_iv);
      profileIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(position).fromUserId));
        }
      }
);
      RippleView giftPageRv=(RippleView)afterAcceptDialog.findViewById(R.id.gift_page_ripple_btn);
      giftPageRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          mContext.startActivity(GiftDetailActivity.createIntent(requestModels.get(position).giftId));
        }
      }
);
      RippleView okRv=(RippleView)afterAcceptDialog.findViewById(R.id.ok_ripple_btn);
      okRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      afterAcceptDialog.show();
    }
    yesNoDialog.dismiss();
  }
}","@Override public void onResponse(Call call,Response response,final int position,String tag){
  if (response.body() instanceof ResponseBody) {
    if (tag.equals(RequestName.DenyRequest)) {
      requestModels.remove(position);
      notifyDataSetChanged();
    }
 else     if (tag.equals(RequestName.AcceptRequest)) {
      showAfterAcceptDialog(position);
    }
    yesNoDialog.dismiss();
  }
}",0.2411784857828023
174229,"@Override public void onComplete(RippleView rippleView){
  Toasti.showS(""String_Node_Str"");
}","@Override public void onComplete(RippleView rippleView){
  Toasti.showS(""String_Node_Str"");
  afterAcceptDialog.dismiss();
  ((BottomBarActivity)mContext).onBackPressed();
}",0.6992481203007519
174230,"public static void clearInfo(){
  AppController.storeString(Constants.Authorization,null);
  AppController.storeString(Constants.TELEPHONE,null);
  deleteSavedGift();
}","public static void clearInfo(){
  AppController.storeString(Constants.Authorization,null);
  AppController.storeString(Constants.USER_ID,null);
  AppController.storeString(Constants.TELEPHONE,null);
  deleteSavedGift();
}",0.8637532133676092
174231,"private void settingToolbar(){
  mToolbar.setBackgroundColor(getResources().getColor(R.color.colorPrimary));
  setSupportActionBar(mToolbar);
  try {
    getSupportActionBar().setDisplayShowTitleEnabled(false);
  }
 catch (  Exception e) {
  }
}","private void settingToolbar(){
  mToolbar.setBackgroundColor(getResources().getColor(R.color.colorPrimary));
  setSupportActionBar(mToolbar);
  try {
    getSupportActionBar().setDisplayShowTitleEnabled(false);
  }
 catch (  Exception e) {
  }
  mToolbarTitleTextView.setText(""String_Node_Str"");
}",0.904059040590406
174232,"private void setListeners(){
  mFirstRightIcon.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onBackPressed();
    }
  }
);
  addToWishList=new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark);
        mBookmarkIc.setOnClickListener(removeFromWishList);
        apiRequest.bookmark(giftId);
      }
 else {
        Snackbari.showS(mBookmarkIc,""String_Node_Str"");
      }
    }
  }
;
  removeFromWishList=new View.OnClickListener(){
    @Override public void onClick(    View v){
      mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark_outline);
      mBookmarkIc.setOnClickListener(addToWishList);
      apiRequest.bookmark(giftId);
    }
  }
;
  mBookmarkIc.setOnClickListener(addToWishList);
  mShareIc.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      shareIt();
    }
  }
);
  mReportLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      MaterialDialog.Builder builder=MaterialDialogBuilder.create(mContext);
      final MaterialDialog dialog=builder.customView(R.layout.dialog_report_gift,false).show();
      RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          String message=((EditTextIranSans)dialog.findViewById(R.id.message_et)).getText().toString();
          if (message != null && !message.equals(""String_Node_Str"")) {
            ReportInput reportInput=new ReportInput();
            reportInput.giftId=gift.giftId;
            reportInput.message=message;
            apiRequest.reportGift(reportInput);
            dialog.dismiss();
          }
 else {
            Toasti.showS(""String_Node_Str"");
          }
        }
      }
);
      RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          dialog.dismiss();
        }
      }
);
    }
  }
);
}","private void setListeners(){
  mFirstRightIcon.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onBackPressed();
    }
  }
);
  addToWishList=new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark);
        mBookmarkIc.setOnClickListener(removeFromWishList);
        apiRequest.bookmark(giftId);
      }
 else {
        MaterialDialog.Builder builder=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_simple_yes_no,false);
        final MaterialDialog dialog=builder.build();
        ((TextView)dialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
        RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
        yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            startActivity(LoginActivity.createIntent());
            dialog.dismiss();
          }
        }
);
        RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
        noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            dialog.dismiss();
          }
        }
);
        dialog.show();
      }
    }
  }
;
  removeFromWishList=new View.OnClickListener(){
    @Override public void onClick(    View v){
      mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark_outline);
      mBookmarkIc.setOnClickListener(addToWishList);
      apiRequest.bookmark(giftId);
    }
  }
;
  mBookmarkIc.setOnClickListener(addToWishList);
  mShareIc.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      shareIt();
    }
  }
);
  mReportLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      MaterialDialog.Builder builder=MaterialDialogBuilder.create(mContext);
      final MaterialDialog dialog=builder.customView(R.layout.dialog_report_gift,false).show();
      RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          String message=((EditTextIranSans)dialog.findViewById(R.id.message_et)).getText().toString();
          if (message != null && !message.equals(""String_Node_Str"")) {
            ReportInput reportInput=new ReportInput();
            reportInput.giftId=gift.giftId;
            reportInput.message=message;
            apiRequest.reportGift(reportInput);
            dialog.dismiss();
          }
 else {
            Toasti.showS(""String_Node_Str"");
          }
        }
      }
);
      RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          dialog.dismiss();
        }
      }
);
    }
  }
);
}",0.6969802152030545
174233,"private void setCallSmsBtn(){
  mContactLay.setVisibility(View.VISIBLE);
  mRequestLay.setVisibility(View.GONE);
  mEditDeleteLay.setVisibility(View.GONE);
  mCallBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String uri=""String_Node_Str"" + ""String_Node_Str"";
      Intent intent=new Intent(Intent.ACTION_DIAL);
      intent.setData(Uri.parse(uri));
      mContext.startActivity(intent);
    }
  }
);
  mSmsBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",""String_Node_Str"",null)));
    }
  }
);
}","private void setCallSmsBtn(){
  mContactLay.setVisibility(View.VISIBLE);
  mRequestLay.setVisibility(View.GONE);
  mEditDeleteLay.setVisibility(View.GONE);
  mCallBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String uri=""String_Node_Str"" + gift.user;
      Intent intent=new Intent(Intent.ACTION_DIAL);
      intent.setData(Uri.parse(uri));
      mContext.startActivity(intent);
    }
  }
);
  mSmsBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",gift.user,null)));
    }
  }
);
}",0.9653179190751444
174234,"void setListeners(){
  mToolbarSendBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mTitleEt.getText().toString().equals(""String_Node_Str"")) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
 else       if (mPriceEt.getText().toString().equals(""String_Node_Str"")) {
        Snackbari.showS(mTitleEt,""String_Node_Str"" + ""String_Node_Str"");
        return;
      }
 else       if (mDescriptionEt.getText().toString().equals(""String_Node_Str"")) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
 else       if (category == null) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
 else       if (city == null) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
 else       if (myGift.giftImages.size() == 0) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
      Gift tempGift=new Gift(mDescriptionEt.getText().toString(),region != null ? (getPlaceNameById(city.id) + ""String_Node_Str"" + getPlaceNameById(region.id)) : getPlaceNameById(city.id),mTitleEt.getText().toString(),mPriceEt.getText().toString(),category.categoryId,city.id,(region == null ? ""String_Node_Str"" : region.id),myGift.giftImages);
      if (editVersion) {
        tempGift.giftId=myGift.giftId;
        (new ApiRequest(context,RegisterGiftActivity.this)).editGift(tempGift);
      }
 else {
        (new ApiRequest(context,RegisterGiftActivity.this)).registerGift(tempGift);
        deleteSavedGift();
      }
      mToolbarSendBtnTv.setVisibility(View.INVISIBLE);
      mSendProgressView.setVisibility(View.VISIBLE);
    }
  }
);
  mChooseRegionBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      FragmentManager fm=getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=ChoosePlaceDialogFragment.newInstance(city.id);
      choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
    }
  }
);
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!editVersion) {
        saveMyGift();
        Toasti.showS(getString(R.string.gift_info_saved));
      }
      onBackPressed();
    }
  }
);
  mCancelBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      deleteSavedGift();
      finish();
    }
  }
);
  mSaveBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      saveMyGift();
      Snackbari.showS(mTitleEt,getString(R.string.gift_info_saved));
    }
  }
);
  mChooseCategoryBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getSupportFragmentManager();
      ChooseCategoryDialogFragment chooseCategoryDF=new ChooseCategoryDialogFragment();
      chooseCategoryDF.show(fm,chooseCategoryDF.getClass().getName());
    }
  }
);
  mChooseImageBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivityForResult(getPickImageChooserIntent(),200);
    }
  }
);
  mChooseCityBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      FragmentManager fm=getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
    }
  }
);
}","void setListeners(){
  mToolbarSendBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mTitleEt.getText().toString().equals(""String_Node_Str"")) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
 else       if (mPriceEt.getText().toString().equals(""String_Node_Str"")) {
        Snackbari.showS(mTitleEt,""String_Node_Str"" + ""String_Node_Str"");
        return;
      }
 else       if (mDescriptionEt.getText().toString().equals(""String_Node_Str"")) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
 else       if (category == null) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
 else       if (city == null) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
 else       if (myGift.giftImages.size() == 0) {
        Snackbari.showS(mTitleEt,""String_Node_Str"");
        return;
      }
      Gift tempGift=new Gift(mDescriptionEt.getText().toString(),region != null ? (getPlaceNameById(city.id) + ""String_Node_Str"" + getPlaceNameById(region.id)) : getPlaceNameById(city.id),mTitleEt.getText().toString(),mPriceEt.getText().toString(),category.categoryId,city.id,(region == null ? ""String_Node_Str"" : region.id),myGift.giftImages);
      if (editVersion) {
        tempGift.giftId=myGift.giftId;
        (new ApiRequest(context,RegisterGiftActivity.this)).editGift(tempGift);
      }
 else {
        (new ApiRequest(context,RegisterGiftActivity.this)).registerGift(tempGift);
        AppController.deleteSavedGift();
      }
      mToolbarSendBtnTv.setVisibility(View.INVISIBLE);
      mSendProgressView.setVisibility(View.VISIBLE);
    }
  }
);
  mChooseRegionBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      FragmentManager fm=getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=ChoosePlaceDialogFragment.newInstance(city.id);
      choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
    }
  }
);
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!editVersion) {
        saveMyGift();
        Toasti.showS(getString(R.string.gift_info_saved));
      }
      onBackPressed();
    }
  }
);
  mCancelBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AppController.deleteSavedGift();
      finish();
    }
  }
);
  mSaveBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      saveMyGift();
      Snackbari.showS(mTitleEt,getString(R.string.gift_info_saved));
    }
  }
);
  mChooseCategoryBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getSupportFragmentManager();
      ChooseCategoryDialogFragment chooseCategoryDF=new ChooseCategoryDialogFragment();
      chooseCategoryDF.show(fm,chooseCategoryDF.getClass().getName());
    }
  }
);
  mChooseImageBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivityForResult(getPickImageChooserIntent(),200);
    }
  }
);
  mChooseCityBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      FragmentManager fm=getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.show(fm,ChoosePlaceDialogFragment.class.getName());
    }
  }
);
}",0.9961154273029966
174235,"private void uploadFile(String filePath){
  File file=new File(filePath);
  RequestBody requestBody=new ProgressRequestBody(MediaType.parse(""String_Node_Str""),file,this);
  Call<ResponseBody> call=AppController.longTimeoutService.uploadFile(AppController.getStoredString(Constants.Authorization),""String_Node_Str"",requestBody);
  mUploadImgCircularProgress.setVisibility(View.VISIBLE);
  mChooseImageTxt.setVisibility(View.INVISIBLE);
  call.enqueue(new Callback<ResponseBody>(){
    @Override public void onResponse(    Call<ResponseBody> call,    Response<ResponseBody> response){
      mUploadImgCircularProgress.setVisibility(View.INVISIBLE);
      mChooseImageTxt.setVisibility(View.VISIBLE);
      if (!response.isSuccessful()) {
        Toasti.showS(""String_Node_Str"" + response.code());
        mUploadImgCircularProgress.setVisibility(View.INVISIBLE);
        mChooseImageTxt.setVisibility(View.VISIBLE);
        return;
      }
      Log.v(""String_Node_Str"",""String_Node_Str"");
      UploadFileOutput uploadFileOutput=new UploadFileOutput();
      try {
        uploadFileOutput=new Gson().fromJson(response.body().string(),UploadFileOutput.class);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      if (uploadFileOutput.imageSrc != null) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + uploadFileOutput.imageSrc);
        myGift.giftImages.add(uploadFileOutput.imageSrc);
        giftGalleryAdapter.notifyDataSetChanged();
        onUpdateGallery();
      }
    }
    @Override public void onFailure(    Call<ResponseBody> call,    Throwable t){
      Log.e(""String_Node_Str"",t.getMessage());
      Toasti.showL(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ t.getCause());
      mUploadImgCircularProgress.setVisibility(View.INVISIBLE);
      mChooseImageTxt.setVisibility(View.VISIBLE);
    }
  }
);
}","private void uploadFile(String filePath){
  File file=new File(filePath);
  RequestBody requestBody=new ProgressRequestBody(MediaType.parse(""String_Node_Str""),file,this);
  Call<ResponseBody> call=AppController.longTimeoutService.uploadFile(AppController.getStoredString(Constants.Authorization),""String_Node_Str"",requestBody);
  mUploadImgCircularProgress.setVisibility(View.VISIBLE);
  mChooseImageTxt.setVisibility(View.INVISIBLE);
  call.enqueue(new Callback<ResponseBody>(){
    @Override public void onResponse(    Call<ResponseBody> call,    Response<ResponseBody> response){
      mUploadImgCircularProgress.setVisibility(View.INVISIBLE);
      mChooseImageTxt.setVisibility(View.VISIBLE);
      if (!response.isSuccessful()) {
        if (response.code() == 401) {
          AppController.clearInfo();
          startActivity(LoginActivity.createIntent());
        }
        mUploadImgCircularProgress.setVisibility(View.INVISIBLE);
        mChooseImageTxt.setVisibility(View.VISIBLE);
        return;
      }
      Log.v(""String_Node_Str"",""String_Node_Str"");
      UploadFileOutput uploadFileOutput=new UploadFileOutput();
      try {
        uploadFileOutput=new Gson().fromJson(response.body().string(),UploadFileOutput.class);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      if (uploadFileOutput.imageSrc != null) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + uploadFileOutput.imageSrc);
        myGift.giftImages.add(uploadFileOutput.imageSrc);
        giftGalleryAdapter.notifyDataSetChanged();
        onUpdateGallery();
      }
    }
    @Override public void onFailure(    Call<ResponseBody> call,    Throwable t){
      Log.e(""String_Node_Str"",t.getMessage());
      Toasti.showL(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ t.getCause());
      mUploadImgCircularProgress.setVisibility(View.INVISIBLE);
      mChooseImageTxt.setVisibility(View.VISIBLE);
    }
  }
);
}",0.9523809523809524
174236,"@Override public void onResponse(Call call,Response response,int position,String tag){
  if (response.body() instanceof ResponseBody) {
    if (tag.equals(RequestName.DenyRequest)) {
      requestModels.remove(position);
      notifyDataSetChanged();
    }
 else     if (tag.equals(RequestName.AcceptRequest)) {
      afterAcceptDialog=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_after_accept_request,false).build();
      TextView message=(TextView)afterAcceptDialog.findViewById(R.id.message_textview);
      message.setText(""String_Node_Str"" + requestModels.get(position).fromUser + ""String_Node_Str"");
      ImageView callIV=(ImageView)afterAcceptDialog.findViewById(R.id.call_iv);
      callIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      ImageView smsIV=(ImageView)afterAcceptDialog.findViewById(R.id.sms_iv);
      smsIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      ImageView profileIV=(ImageView)afterAcceptDialog.findViewById(R.id.profile_iv);
      profileIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      RippleView giftPageRv=(RippleView)afterAcceptDialog.findViewById(R.id.gift_page_ripple_btn);
      giftPageRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      RippleView okRv=(RippleView)afterAcceptDialog.findViewById(R.id.ok_ripple_btn);
      okRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      afterAcceptDialog.show();
    }
    yesNoDialog.dismiss();
  }
}","@Override public void onResponse(Call call,Response response,final int position,String tag){
  if (response.body() instanceof ResponseBody) {
    if (tag.equals(RequestName.DenyRequest)) {
      requestModels.remove(position);
      notifyDataSetChanged();
    }
 else     if (tag.equals(RequestName.AcceptRequest)) {
      afterAcceptDialog=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_after_accept_request,false).build();
      TextView message=(TextView)afterAcceptDialog.findViewById(R.id.message_textview);
      message.setText(""String_Node_Str"" + requestModels.get(position).fromUser + ""String_Node_Str"");
      ImageView callIV=(ImageView)afterAcceptDialog.findViewById(R.id.call_iv);
      callIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          String uri=""String_Node_Str"" + requestModels.get(position).fromUser;
          Intent intent=new Intent(Intent.ACTION_DIAL);
          intent.setData(Uri.parse(uri));
          mContext.startActivity(intent);
        }
      }
);
      ImageView smsIV=(ImageView)afterAcceptDialog.findViewById(R.id.sms_iv);
      smsIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",requestModels.get(position).fromUser,null)));
        }
      }
);
      ImageView profileIV=(ImageView)afterAcceptDialog.findViewById(R.id.profile_iv);
      profileIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(position).fromUserId));
        }
      }
);
      RippleView giftPageRv=(RippleView)afterAcceptDialog.findViewById(R.id.gift_page_ripple_btn);
      giftPageRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          mContext.startActivity(GiftDetailActivity.createIntent(requestModels.get(position).giftId));
        }
      }
);
      RippleView okRv=(RippleView)afterAcceptDialog.findViewById(R.id.ok_ripple_btn);
      okRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      afterAcceptDialog.show();
    }
    yesNoDialog.dismiss();
  }
}",0.6159810467370235
174237,"@Override public void onClick(View view){
  Toasti.showS(""String_Node_Str"");
}","@Override public void onClick(View view){
  mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(position).fromUserId));
}",0.5429864253393665
174238,"@Override public void onBindViewHolder(RequestToAGiftHolder myHolder,final int i){
  myHolder.mPhoneTv.setText(requestModels.get(i).fromUser);
  myHolder.rejectLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((TextView)yesNoDialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          apiRequest.denyRequest(requestModels.get(i).giftId,requestModels.get(i).fromUserId);
          yesProgressView.setVisibility(View.VISIBLE);
          yesTextView.setText(""String_Node_Str"");
        }
      }
);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          yesNoDialog.dismiss();
        }
      }
);
      yesNoDialog.show();
    }
  }
);
  myHolder.acceptLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((TextView)yesNoDialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          apiRequest.acceptRequest(requestModels.get(i).giftId,requestModels.get(i).fromUserId);
          yesProgressView.setVisibility(View.VISIBLE);
          yesTextView.setText(""String_Node_Str"");
        }
      }
);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          yesNoDialog.dismiss();
        }
      }
);
      yesNoDialog.show();
    }
  }
);
  myHolder.smsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",requestModels.get(i).fromUser,null)));
    }
  }
);
  myHolder.callLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String uri=""String_Node_Str"" + requestModels.get(i).fromUser;
      Intent intent=new Intent(Intent.ACTION_DIAL);
      intent.setData(Uri.parse(uri));
      mContext.startActivity(intent);
    }
  }
);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(i).fromUserId));
    }
  }
);
}","@Override public void onBindViewHolder(RequestToAGiftHolder myHolder,final int i){
  myHolder.mPhoneTv.setText(requestModels.get(i).fromUser);
  myHolder.rejectLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((TextView)yesNoDialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          apiRequest.denyRequest(requestModels.get(i).giftId,requestModels.get(i).fromUserId);
          yesProgressView.setVisibility(View.VISIBLE);
          yesTextView.setText(""String_Node_Str"");
        }
      }
);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          yesNoDialog.dismiss();
        }
      }
);
      yesProgressView.setVisibility(View.INVISIBLE);
      yesTextView.setText(""String_Node_Str"");
      yesNoDialog.show();
    }
  }
);
  myHolder.acceptLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ((TextView)yesNoDialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          apiRequest.acceptRequest(requestModels.get(i).giftId,requestModels.get(i).fromUserId);
          yesProgressView.setVisibility(View.VISIBLE);
          yesTextView.setText(""String_Node_Str"");
        }
      }
);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          yesNoDialog.dismiss();
        }
      }
);
      yesProgressView.setVisibility(View.INVISIBLE);
      yesTextView.setText(""String_Node_Str"");
      yesNoDialog.show();
    }
  }
);
  myHolder.smsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",requestModels.get(i).fromUser,null)));
    }
  }
);
  myHolder.callLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String uri=""String_Node_Str"" + requestModels.get(i).fromUser;
      Intent intent=new Intent(Intent.ACTION_DIAL);
      intent.setData(Uri.parse(uri));
      mContext.startActivity(intent);
    }
  }
);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(i).fromUserId));
    }
  }
);
}",0.7199854914762422
174239,"private void setListeners(){
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
      if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return false;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HomeFilteringDialogFragment fragment=HomeFilteringDialogFragment.ShowME(category,place,region);
      fragment.setTargetFragment(HomeFragment.this,0);
      fragment.show(getActivity().getSupportFragmentManager(),HomeFragment.class.getName());
    }
  }
);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      refreshItems();
    }
  }
);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
      getGifts();
    }
  }
);
  mSearchBackspaceBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSearchET.setText(""String_Node_Str"");
      mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
    }
  }
);
  mSearchET.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        mSearchBackspaceBtn.setVisibility(View.VISIBLE);
      }
 else {
        mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
      }
    }
  }
);
  mSearchBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      searchText();
    }
  }
);
}","private void setListeners(){
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
      if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return false;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HomeFilteringDialogFragment fragment=HomeFilteringDialogFragment.ShowME(category,place,region);
      fragment.setTargetFragment(HomeFragment.this,0);
      fragment.show(getActivity().getSupportFragmentManager(),HomeFragment.class.getName());
    }
  }
);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      refreshItems();
    }
  }
);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
      getGifts();
    }
  }
);
  mSearchBackspaceBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSearchET.setText(""String_Node_Str"");
      mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
    }
  }
);
  mSearchET.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        mSearchBackspaceBtn.setVisibility(View.VISIBLE);
      }
 else {
        mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
      }
    }
  }
);
  mSearchET.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_SEARCH) {
        Toasti.showS(""String_Node_Str"");
        searchText();
        return true;
      }
      return false;
    }
  }
);
  mSearchBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      searchText();
    }
  }
);
}",0.9225707391971923
174240,"@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      getBookmarks();
    }
  }
);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
}","@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      if (page > 1)       getBookmarks();
    }
  }
);
  getBookmarks();
}",0.7340425531914894
174241,"@Override public void onResponse(Call call,Response response){
  mRecyclerView.setVisibility(View.VISIBLE);
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  mRecyclerView.setVisibility(View.VISIBLE);
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (this.gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.9954421148587056
174242,"@Override public void onLoadMore(int page,int totalItemsCount){
  getBookmarks();
}","@Override public void onLoadMore(int page,int totalItemsCount){
  if (page > 1)   getBookmarks();
}",0.912087912087912
174243,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_gifts,container,false);
  ButterKnife.bind(this,rootView);
  init();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(2,false);
  }
 else {
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_gifts,container,false);
  ButterKnife.bind(this,rootView);
  init();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(2,false);
  }
 else {
    hasNotAuthorityFirstTime=true;
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}",0.9793266391021854
174244,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
  }
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    if (hasNotAuthorityFirstTime) {
      setupViewPager(mainVp);
      mainTabs.setupWithViewPager(mainVp);
      mainVp.setCurrentItem(2,false);
    }
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
  }
}",0.8127294981640147
174245,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_requests,container,false);
  ButterKnife.bind(this,rootView);
  init();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
  }
 else {
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_requests,container,false);
  ButterKnife.bind(this,rootView);
  init();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
  }
 else {
    hasNotAuthorityFirstTime=true;
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}",0.9793996468510888
174246,"private void setupViewPager(ViewPager viewPager){
  ViewPagerAdapter adapter=new ViewPagerAdapter(getChildFragmentManager());
  SentRequestsFragment sentRequestsFragment=new SentRequestsFragment();
  ReceivedRequestsFragment receivedRequestsFragment=new ReceivedRequestsFragment();
  adapter.addFrag(sentRequestsFragment,""String_Node_Str"");
  adapter.addFrag(receivedRequestsFragment,""String_Node_Str"");
  viewPager.setAdapter(adapter);
  adapter.notifyDataSetChanged();
}","private void setupViewPager(ViewPager viewPager){
  adapter=new ViewPagerAdapter(getChildFragmentManager());
  SentRequestsFragment sentRequestsFragment=new SentRequestsFragment();
  ReceivedRequestsFragment receivedRequestsFragment=new ReceivedRequestsFragment();
  adapter.addFrag(sentRequestsFragment,""String_Node_Str"");
  adapter.addFrag(receivedRequestsFragment,""String_Node_Str"");
  viewPager.setAdapter(adapter);
  adapter.notifyDataSetChanged();
}",0.9816612729234088
174247,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
  }
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    if (hasNotAuthorityFirstTime) {
      setupViewPager(mainVp);
      mainTabs.setupWithViewPager(mainVp);
      mainVp.setCurrentItem(1,false);
    }
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
  }
}",0.8127294981640147
174248,"private void handlingOnResponse(HandlingResponse handlingResponse,String TAG){
  if (!handlingResponse.response.isSuccessful()) {
    ErrorOutput errorOutput=null;
    if (handlingResponse.response.errorBody() != null) {
      try {
        errorOutput=(new Gson()).fromJson(handlingResponse.response.errorBody().string(),ErrorOutput.class);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (handlingResponse.response.code() == 401) {
      AppController.clearInfo();
      mContext.startActivity(LoginActivity.createIntent());
    }
 else     if (handlingResponse.response.code() == 400 && errorOutput != null && errorOutput.description.equals(""String_Node_Str"")) {
      listener.onFailure(handlingResponse.call,new Throwable(""String_Node_Str""));
    }
 else     if (ConnectionDetector.isConnectedToInternet()) {
      if ((mContext instanceof Activity) && ((Activity)mContext).hasWindowFocus()) {
        ConnectionDetector.ShowServerProblemDialog(mContext,handlingResponse.callbackWithRetry);
      }
 else {
        Toasti.showS(""String_Node_Str"");
      }
    }
 else     ConnectionDetector.ShowNetwrokConnectionProblemDialog(mContext,handlingResponse.callbackWithRetry);
    return;
  }
  if ((handlingResponse.response).body() instanceof StatusOutput) {
    ((StatusOutput)(handlingResponse.response).body()).tag=TAG;
  }
  if (listener != null) {
    listener.onResponse(handlingResponse.call,handlingResponse.response);
  }
 else   if (adapterListener != null) {
    adapterListener.onResponse(handlingResponse.call,handlingResponse.response,handlingResponse.position);
  }
 else   if (tagListener != null) {
    tagListener.onResponse(handlingResponse.call,handlingResponse.response,TAG);
  }
 else   if (adapterTagListener != null) {
    adapterTagListener.onResponse(handlingResponse.call,handlingResponse.response,handlingResponse.position,TAG);
  }
}","private void handlingOnResponse(HandlingResponse handlingResponse,String TAG){
  if (!handlingResponse.response.isSuccessful()) {
    ErrorOutput errorOutput=null;
    if (handlingResponse.response.errorBody() != null) {
      try {
        errorOutput=(new Gson()).fromJson(handlingResponse.response.errorBody().string(),ErrorOutput.class);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (handlingResponse.response.code() == 401) {
      AppController.clearInfo();
      mContext.startActivity(LoginActivity.createIntent());
    }
 else     if (handlingResponse.response.code() == 400 && errorOutput != null && errorOutput.description != null && errorOutput.description.equals(""String_Node_Str"")) {
      listener.onFailure(handlingResponse.call,new Throwable(""String_Node_Str""));
    }
 else     if (ConnectionDetector.isConnectedToInternet()) {
      if ((mContext instanceof Activity) && ((Activity)mContext).hasWindowFocus()) {
        ConnectionDetector.ShowServerProblemDialog(mContext,handlingResponse.callbackWithRetry);
      }
 else {
        Toasti.showS(""String_Node_Str"");
      }
    }
 else     ConnectionDetector.ShowNetwrokConnectionProblemDialog(mContext,handlingResponse.callbackWithRetry);
    return;
  }
  if ((handlingResponse.response).body() instanceof StatusOutput) {
    ((StatusOutput)(handlingResponse.response).body()).tag=TAG;
  }
  if (listener != null) {
    listener.onResponse(handlingResponse.call,handlingResponse.response);
  }
 else   if (adapterListener != null) {
    adapterListener.onResponse(handlingResponse.call,handlingResponse.response,handlingResponse.position);
  }
 else   if (tagListener != null) {
    tagListener.onResponse(handlingResponse.call,handlingResponse.response,TAG);
  }
 else   if (adapterTagListener != null) {
    adapterTagListener.onResponse(handlingResponse.call,handlingResponse.response,handlingResponse.position,TAG);
  }
}",0.9908972691807544
174249,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_login);
  ButterKnife.bind(this);
  init();
  setListeners();
  IntentFilter filter=new IntentFilter();
  filter.addAction(""String_Node_Str"");
  registerReceiver(receiver,filter);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_login);
  ButterKnife.bind(this);
  init();
  setListeners();
  filter=new IntentFilter();
  filter.addAction(""String_Node_Str"");
}",0.9140893470790378
174250,"private void longTimeoutRetrofitInitialization(){
  HttpLoggingInterceptor logging=new HttpLoggingInterceptor();
  logging.setLevel(HttpLoggingInterceptor.Level.BODY);
  longTimeOutHttpClient=new OkHttpClient.Builder().readTimeout(120,TimeUnit.SECONDS).connectTimeout(120,TimeUnit.SECONDS).addInterceptor(new Interceptor(){
    @Override public Response intercept(    Interceptor.Chain chain) throws IOException {
      Request request=chain.request().newBuilder().build();
      return chain.proceed(request);
    }
  }
).addInterceptor(logging).build();
  longTimeoutRetrofitBuilder=new Retrofit.Builder().addConverterFactory(GsonConverterFactory.create()).client(httpClient);
  longTimeOutRetrofit=longTimeoutRetrofitBuilder.baseUrl(URIs.BASE_URL + URIs.API_VERSION).build();
  service=retrofit.create(RestAPI.class);
}","private void longTimeoutRetrofitInitialization(){
  HttpLoggingInterceptor logging=new HttpLoggingInterceptor();
  logging.setLevel(HttpLoggingInterceptor.Level.BODY);
  longTimeOutHttpClient=new OkHttpClient.Builder().readTimeout(120,TimeUnit.SECONDS).connectTimeout(120,TimeUnit.SECONDS).addInterceptor(new Interceptor(){
    @Override public Response intercept(    Interceptor.Chain chain) throws IOException {
      Request request=chain.request().newBuilder().build();
      return chain.proceed(request);
    }
  }
).addInterceptor(logging).build();
  longTimeoutRetrofitBuilder=new Retrofit.Builder().addConverterFactory(GsonConverterFactory.create()).client(httpClient);
  longTimeOutRetrofit=longTimeoutRetrofitBuilder.baseUrl(URIs.BASE_URL + URIs.API_VERSION).build();
  longTimeoutService=longTimeOutRetrofit.create(RestAPI.class);
}",0.9843937575030012
174251,"private void retrofitInitialization(){
  HttpLoggingInterceptor logging=new HttpLoggingInterceptor();
  logging.setLevel(HttpLoggingInterceptor.Level.BODY);
  httpClient=new OkHttpClient.Builder().addInterceptor(new Interceptor(){
    @Override public Response intercept(    Interceptor.Chain chain) throws IOException {
      Request request=chain.request().newBuilder().build();
      return chain.proceed(request);
    }
  }
).addInterceptor(logging).build();
  retrofitBuilder=new Retrofit.Builder().addConverterFactory(GsonConverterFactory.create()).client(httpClient);
  retrofit=retrofitBuilder.baseUrl(URIs.BASE_URL + URIs.API_VERSION).build();
  accountRetrofit=retrofitBuilder.baseUrl(URIs.BASE_URL).build();
}","private void retrofitInitialization(){
  HttpLoggingInterceptor logging=new HttpLoggingInterceptor();
  logging.setLevel(HttpLoggingInterceptor.Level.BODY);
  httpClient=new OkHttpClient.Builder().addInterceptor(new Interceptor(){
    @Override public Response intercept(    Interceptor.Chain chain) throws IOException {
      Request request=chain.request().newBuilder().build();
      return chain.proceed(request);
    }
  }
).addInterceptor(logging).build();
  retrofitBuilder=new Retrofit.Builder().addConverterFactory(GsonConverterFactory.create()).client(httpClient);
  retrofit=retrofitBuilder.baseUrl(URIs.BASE_URL + URIs.API_VERSION).build();
  accountRetrofit=retrofitBuilder.baseUrl(URIs.BASE_URL).build();
  service=retrofit.create(RestAPI.class);
  accountService=accountRetrofit.create(AccountRestAPI.class);
}",0.9320388349514565
174252,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (this.gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.9950347567030784
174253,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (this.gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.9950347567030784
174254,"@Override public void onResponse(Call call,Response response){
  mRecyclerView.setVisibility(View.VISIBLE);
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  mRecyclerView.setVisibility(View.VISIBLE);
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (this.gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.9954421148587056
174255,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (this.gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.9950347567030784
174256,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<RequestModel> requestModels=(ArrayList<RequestModel>)response.body();
  this.requestModels.addAll(requestModels);
  adapter.notifyDataSetChanged();
  if (requestModels.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<RequestModel> requestModels=(ArrayList<RequestModel>)response.body();
  this.requestModels.addAll(requestModels);
  adapter.notifyDataSetChanged();
  if (this.requestModels.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.9954669084315504
174257,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<RequestModel> requestModels=(ArrayList<RequestModel>)response.body();
  this.requestModels.addAll(requestModels);
  adapter.notifyDataSetChanged();
  if (requestModels.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<RequestModel> requestModels=(ArrayList<RequestModel>)response.body();
  this.requestModels.addAll(requestModels);
  adapter.notifyDataSetChanged();
  if (this.requestModels.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.9954669084315504
174258,"@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      if (page > 1)       getBookmarks();
    }
  }
);
  getBookmarks();
}","@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      if (page > 1)       getBookmarks();
    }
  }
);
}",0.98125
174259,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_bookmark,container,false);
  ButterKnife.bind(this,rootView);
  init();
  gifts.clear();
  if (AppController.getStoredString(Constants.Authorization) != null) {
  }
 else {
    mLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_bookmark,container,false);
  ButterKnife.bind(this,rootView);
  init();
  gifts.clear();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    getBookmarks();
  }
 else {
    mLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}",0.9865951742627346
174260,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    mBookmarkTopLay.setVisibility(View.GONE);
    mBookmarkMainLay.setVisibility(View.VISIBLE);
    if (gifts.size() <= 0) {
      getBookmarks();
    }
  }
 else {
    mBookmarkTopLay.setVisibility(View.VISIBLE);
    mBookmarkMainLay.setVisibility(View.INVISIBLE);
  }
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    mBookmarkTopLay.setVisibility(View.GONE);
    mBookmarkMainLay.setVisibility(View.VISIBLE);
    if (gifts.size() <= 0 && startIndex == 0) {
      getBookmarks();
    }
  }
 else {
    mBookmarkTopLay.setVisibility(View.VISIBLE);
    mBookmarkMainLay.setVisibility(View.INVISIBLE);
  }
}",0.976629766297663
174261,"private void setListeners(){
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  enterVerificationCodeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String confirmationCode=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (!confirmationCode.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      apiRequest.login(confirmationCode);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
      secondBtnLay.setOnClickListener(notRecievedCode);
    }
  }
;
  enterPhoneNumber=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      apiRequest.register(phoneNumber);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
      secondBtnLay.setOnClickListener(enterVerificationCodeState);
    }
  }
;
  notRecievedCode=new View.OnClickListener(){
    @Override public void onClick(    View v){
      AppController.storeString(Constants.TELEPHONE,null);
      enterTelephoneNumber();
    }
  }
;
  enterVerificationCodeState=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      AppController.storeString(Constants.TELEPHONE,phoneNumber);
      enterVerificationCode();
    }
  }
;
  if (AppController.getStoredString(Constants.TELEPHONE) == null) {
    enterTelephoneNumber();
  }
 else {
    enterVerificationCode();
  }
}","private void setListeners(){
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  enterVerificationCodeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String confirmationCode=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (!confirmationCode.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      apiRequest.login(confirmationCode,DeviceInfo.getDeviceID(context));
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
      secondBtnLay.setOnClickListener(notRecievedCode);
    }
  }
;
  enterPhoneNumber=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      apiRequest.register(phoneNumber);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
      secondBtnLay.setOnClickListener(enterVerificationCodeState);
    }
  }
;
  notRecievedCode=new View.OnClickListener(){
    @Override public void onClick(    View v){
      AppController.storeString(Constants.TELEPHONE,null);
      enterTelephoneNumber();
    }
  }
;
  enterVerificationCodeState=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      AppController.storeString(Constants.TELEPHONE,phoneNumber);
      enterVerificationCode();
    }
  }
;
  if (AppController.getStoredString(Constants.TELEPHONE) == null) {
    enterTelephoneNumber();
  }
 else {
    enterVerificationCode();
  }
}",0.9928347514554412
174262,"@FormUrlEncoded @POST(""String_Node_Str"") Call<TokenOutput> login(@Field(""String_Node_Str"") String username,@Field(""String_Node_Str"") String password,@Field(""String_Node_Str"") String grant_type);","@FormUrlEncoded @POST(""String_Node_Str"") Call<TokenOutput> login(@Field(""String_Node_Str"") String username,@Field(""String_Node_Str"") String password,@Field(""String_Node_Str"") String registerationId,@Field(""String_Node_Str"") String deviceId,@Field(""String_Node_Str"") String grant_type);",0.8100208768267223
174263,"@GET(""String_Node_Str"") Call<Map<String,String>> getStatistics(@Header(Constants.ContentType) String contentType);","@GET(""String_Node_Str"") Call<StatisticsOutput> getStatistics(@Header(Constants.ContentType) String contentType);",0.8938053097345132
174264,"@Override public void onResponse(Call call,Response response){
  super.onResponse(call,response);
  Map<String,String> characteristics=(Map<String,String>)response.body();
  int i=0;
  for (  Map.Entry<String,String> entry : characteristics.entrySet()) {
    i++;
    if (i > 1) {
      break;
    }
    String key=entry.getKey();
    String value=entry.getValue();
    TextView valueTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    valueTxt.setText(value);
    valueTxt.setVisibility(View.VISIBLE);
    TextView keyTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    keyTxt.setText(key);
    keyTxt.setVisibility(View.VISIBLE);
  }
}","@Override public void onResponse(Call call,Response response){
  super.onResponse(call,response);
  StatisticsOutput statisticsOutput=(StatisticsOutput)response.body();
  int i=0;
  for (  Map.Entry<String,String> entry : statisticsOutput.statistics.entrySet()) {
    i++;
    if (i > 10) {
      break;
    }
    String key=entry.getKey();
    String value=entry.getValue();
    TextView valueTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    valueTxt.setText(value);
    valueTxt.setVisibility(View.VISIBLE);
    TextView keyTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    keyTxt.setText(key);
    keyTxt.setVisibility(View.VISIBLE);
  }
}",0.9253393665158371
174265,"public void getStatistics(){
  Call<Map<String,String>> call=AppController.service.getStatistics(Constants.JSON_TYPE);
  call.enqueue(new CallbackWithRetry<Map<String,String>>(call,mContext){
    @Override public void onResponse(    Call<Map<String,String>> call,    Response<Map<String,String>> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<Map<String,String>> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}","public void getStatistics(){
  Call<StatisticsOutput> call=AppController.service.getStatistics(Constants.JSON_TYPE);
  call.enqueue(new CallbackWithRetry<StatisticsOutput>(call,mContext){
    @Override public void onResponse(    Call<StatisticsOutput> call,    Response<StatisticsOutput> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<StatisticsOutput> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}",0.7996070726915521
174266,"public void login(String verificationCode){
  Call<TokenOutput> call=AppController.accountService.login(AppController.getStoredString(Constants.TELEPHONE),verificationCode,""String_Node_Str"");
  call.enqueue(new CallbackWithRetry<TokenOutput>(call,mContext){
    @Override public void onResponse(    Call<TokenOutput> call,    Response<TokenOutput> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<TokenOutput> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}","public void login(String verificationCode,String deviceId){
  Call<TokenOutput> call=AppController.accountService.login(AppController.getStoredString(Constants.TELEPHONE),verificationCode,AppController.getStoredString(Constants.FIREBASE_REG_TOKEN),deviceId,""String_Node_Str"");
  call.enqueue(new CallbackWithRetry<TokenOutput>(call,mContext){
    @Override public void onResponse(    Call<TokenOutput> call,    Response<TokenOutput> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<TokenOutput> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}",0.9293433083956776
174267,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  mBottomBar.onSaveInstanceState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mBottomBar != null)   mBottomBar.onSaveInstanceState(outState);
}",0.91875
174268,"private void init(String title,String body,ArrayList<String> textArray,final String version){
  titleTextView.setText(title);
  bodyTextView.setText(body);
  if (textArray != null) {
    StringBuilder strbuilder=new StringBuilder();
    strbuilder.append(""String_Node_Str"" + ""String_Node_Str"");
    for (int i=0; i < textArray.size(); i++) {
      strbuilder.append(""String_Node_Str"" + textArray.get(i) + ""String_Node_Str"");
    }
    contentTextView.setText(strbuilder.toString());
    contentTextView.setMovementMethod(new ScrollingMovementMethod());
  }
  cancelView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      cancelDownload();
    }
  }
);
  positiveBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final File file=new File(fileDownloadPath);
      updaterProgressbar.setVisibility(View.VISIBLE);
      cancelView.setVisibility(View.VISIBLE);
      progressPer.setVisibility(View.VISIBLE);
      negtiveBtn.setVisibility(View.GONE);
      positiveBtn.setVisibility(View.GONE);
      neverBtn.setVisibility(View.GONE);
      if (file.exists()) {
        installAPK(fileDownloadPath,context);
      }
 else {
        downloadAPK(0,mUpdateDetail.updateApk,mUpdateDetail.updateApk.getUrl());
      }
    }
  }
);
  if (isForcedUpdate) {
    negtiveBtn.setVisibility(View.GONE);
    neverBtn.setVisibility(View.GONE);
  }
 else {
    negtiveBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        dialog.dismiss();
      }
    }
);
    neverBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        AppController.storeString(SHARED_PREFERENCE_LAST_VERSION,version);
        dialog.dismiss();
      }
    }
);
  }
}","private void init(String title,String body,ArrayList<String> textArray,final String version){
  titleTextView.setText(title);
  bodyTextView.setText(body);
  if (textArray != null) {
    StringBuilder strbuilder=new StringBuilder();
    strbuilder.append(""String_Node_Str"" + ""String_Node_Str"");
    for (int i=0; i < textArray.size(); i++) {
      strbuilder.append(""String_Node_Str"" + textArray.get(i) + ""String_Node_Str"");
    }
    contentTextView.setText(strbuilder.toString());
    contentTextView.setMovementMethod(new ScrollingMovementMethod());
  }
  cancelView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      cancelDownload();
    }
  }
);
  positiveBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final File file=new File(fileDownloadPath);
      updaterProgressbar.setVisibility(View.VISIBLE);
      cancelView.setVisibility(View.VISIBLE);
      progressPer.setVisibility(View.VISIBLE);
      notNowBtn.setVisibility(View.GONE);
      positiveBtn.setVisibility(View.GONE);
      neverBtn.setVisibility(View.GONE);
      if (file.exists()) {
        installAPK(fileDownloadPath,context);
      }
 else {
        downloadAPK(0,mUpdateDetail.updateApk,mUpdateDetail.updateApk.getUrl());
      }
    }
  }
);
  if (isForcedUpdate) {
    notNowBtn.setVisibility(View.GONE);
    neverBtn.setVisibility(View.GONE);
  }
 else {
    notNowBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        dialog.dismiss();
      }
    }
);
    neverBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        AppController.storeString(Constants.VERSION_SKIP_UPDATE,version);
        dialog.dismiss();
      }
    }
);
  }
}",0.979223619464188
174269,"@Override public void onClick(View v){
  AppController.storeString(SHARED_PREFERENCE_LAST_VERSION,version);
  dialog.dismiss();
}","@Override public void onClick(View v){
  AppController.storeString(Constants.VERSION_SKIP_UPDATE,version);
  dialog.dismiss();
}",0.8326848249027238
174270,"private void findViews(){
  titleTextView=(TextView)dialog.findViewById(R.id.title_dialog_tv);
  contentTextView=(TextView)dialog.findViewById(R.id.notes_text_dialog_tv);
  updaterProgressbar=(ProgressBar)dialog.findViewById(R.id.update_progressbar);
  bodyTextView=(TextView)dialog.findViewById(R.id.main_text_dialog_tv);
  positiveBtn=(TextView)dialog.findViewById(R.id.posetive_btn_text);
  negtiveBtn=(TextView)dialog.findViewById(R.id.negative_btn_text);
  neverBtn=(TextView)dialog.findViewById(R.id.never_btn_text);
  progressPer=(TextView)dialog.findViewById(R.id.progressPercentage);
  cancelView=dialog.findViewById(R.id.cancel_lay);
}","private void findViews(){
  titleTextView=(TextView)dialog.findViewById(R.id.title_dialog_tv);
  contentTextView=(TextView)dialog.findViewById(R.id.notes_text_dialog_tv);
  updaterProgressbar=(ProgressBar)dialog.findViewById(R.id.update_progressbar);
  bodyTextView=(TextView)dialog.findViewById(R.id.main_text_dialog_tv);
  positiveBtn=(TextView)dialog.findViewById(R.id.posetive_btn_text);
  notNowBtn=(TextView)dialog.findViewById(R.id.not_now_btn_text);
  neverBtn=(TextView)dialog.findViewById(R.id.never_btn_text);
  progressPer=(TextView)dialog.findViewById(R.id.progressPercentage);
  cancelView=dialog.findViewById(R.id.cancel_lay);
}",0.9192546583850932
174271,"public void showUpdaterDialog(final Context context,String title,String body,ArrayList<String> textArray,String version,Intent[] intents,final boolean isForcedUpdate){
  this.isForcedUpdate=isForcedUpdate;
  String sharePrefAnswer=AppController.getStoredString(SHARED_PREFERENCE_LAST_VERSION);
  if (sharePrefAnswer != null && sharePrefAnswer.equals(getAppVersion(context)) && !isForcedUpdate)   return;
  this.intents=intents;
  this.context=context;
  mDownloadManager=DownloadManager.getInstance();
  mNotificationManager=NotificationManagerCompat.from(context);
  mDownloadDir=new File(Environment.getExternalStorageDirectory(),""String_Node_Str"");
  fileDownloadPath=mDownloadDir.getPath() + File.separator + mUpdateDetail.updateApk.getName()+ ""String_Node_Str"";
  builder=MaterialDialogBuilder.create(context);
  dialog=builder.customView(R.layout.updater_dialog,false).show();
  dialog.setCancelable(!isForcedUpdate);
  findViews();
  init(title,body,textArray,version);
}","public void showUpdaterDialog(final Context context,String title,String body,ArrayList<String> textArray,String version,Intent[] intents,final boolean isForcedUpdate){
  this.isForcedUpdate=isForcedUpdate;
  String sharePrefAnswer=AppController.getStoredString(Constants.VERSION_SKIP_UPDATE);
  if (sharePrefAnswer != null && (getAppVersion(context).equals(version) || sharePrefAnswer.equals(version)) && !isForcedUpdate)   return;
  this.intents=intents;
  this.context=context;
  mDownloadManager=DownloadManager.getInstance();
  mNotificationManager=NotificationManagerCompat.from(context);
  mDownloadDir=new File(Environment.getExternalStorageDirectory(),""String_Node_Str"");
  fileDownloadPath=mDownloadDir.getPath() + File.separator + mUpdateDetail.updateApk.getName()+ ""String_Node_Str"";
  builder=MaterialDialogBuilder.create(context);
  dialog=builder.customView(R.layout.updater_dialog,false).show();
  dialog.setCancelable(!isForcedUpdate);
  findViews();
  init(title,body,textArray,version);
}",0.9425403225806452
174272,"public static String getAppVersion(Context context){
  String version=""String_Node_Str"";
  try {
    PackageManager manager=context.getPackageManager();
    PackageInfo info=manager.getPackageInfo(context.getPackageName(),0);
    version=info.versionName;
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
  return version;
}","public static String getAppVersion(Context context){
  String version=""String_Node_Str"";
  try {
    PackageManager manager=context.getPackageManager();
    PackageInfo info=manager.getPackageInfo(context.getPackageName(),0);
    version=String.valueOf(info.versionCode);
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
  return version;
}",0.9347826086956522
174273,"private void cancelDownload(){
  mDownloadManager.cancel(mUpdateDetail.latestDownloadLink);
  progressPer.setText(""String_Node_Str"");
  positiveBtn.setEnabled(true);
  updaterProgressbar.setVisibility(View.GONE);
  progressPer.setVisibility(View.GONE);
  cancelView.setVisibility(View.GONE);
  positiveBtn.setVisibility(View.VISIBLE);
  if (!isForcedUpdate) {
    negtiveBtn.setVisibility(View.VISIBLE);
    neverBtn.setVisibility(View.VISIBLE);
  }
}","private void cancelDownload(){
  mDownloadManager.cancel(mUpdateDetail.latestDownloadLink);
  progressPer.setText(""String_Node_Str"");
  positiveBtn.setEnabled(true);
  updaterProgressbar.setVisibility(View.GONE);
  progressPer.setVisibility(View.GONE);
  cancelView.setVisibility(View.GONE);
  positiveBtn.setVisibility(View.VISIBLE);
  if (!isForcedUpdate) {
    notNowBtn.setVisibility(View.VISIBLE);
    neverBtn.setVisibility(View.VISIBLE);
  }
}",0.8990011098779135
174274,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_bottombar);
  ButterKnife.bind(this);
  context=this;
  currentVersionName=UpdateChecker.getAppVersion(context);
  homeFragment=HomeFragment.newInstance(Constants.HOME_PAGETYPE,null);
  searchFragment=HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null);
  categoriesGridFragment=new CategoriesGridFragment();
  myWallFragment=new MyWallFragment();
  settingToolbar();
  settingBottomBar(savedInstanceState);
  mToolbarNewGiftBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        startActivity(RegisterGiftActivity.createIntent());
      }
 else {
        startActivity(LoginActivity.createIntent());
      }
    }
  }
);
  mBottomBar.selectTabAtPosition(3,false);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.savedInstanceState=savedInstanceState;
  setContentView(R.layout.activity_bottombar);
  ButterKnife.bind(this);
  context=this;
  settingToolbar();
  currentVersionName=UpdateChecker.getAppVersion(context);
  mToolbarNewGiftBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        startActivity(RegisterGiftActivity.createIntent());
      }
 else {
        startActivity(LoginActivity.createIntent());
      }
    }
  }
);
  ApiRequest apiRequest=new ApiRequest(this,this);
  apiRequest.getUpdatedVersion();
}",0.7127532777115614
174275,"private void onUpdateVersionResponse(UpdateOutput updateOutput){
  boolean isForcedUpdate;
  if (updateOutput.force_update != null && updateOutput.force_update.equalsIgnoreCase(""String_Node_Str"")) {
    isForcedUpdate=true;
  }
 else {
    isForcedUpdate=false;
  }
  UpdateChecker updateChecker=new UpdateChecker(getResources().getString(R.string.app_name),updateOutput.version,updateOutput.apk_url,null,updateOutput.changes);
  if (!isForcedUpdate) {
  }
  if (currentVersionName.compareToIgnoreCase(updateChecker.mUpdateDetail.latestVersion) < 0) {
    Intent[] intents=new Intent[1];
    intents[0]=Intent.makeMainActivity(new ComponentName(AppController.getAppContext(),BottomBarActivity.class));
    updateChecker.showUpdaterDialog(context,getString(R.string.update_to_new_version),getString(R.string.exist_new_version),updateOutput.changes,updateOutput.version,intents,isForcedUpdate);
    AppController.getInstance().setIsCheckedUpdate(true);
  }
}","private void onUpdateVersionResponse(UpdateOutput updateOutput){
  boolean isForcedUpdate;
  if (updateOutput.force_update != null && updateOutput.force_update.equalsIgnoreCase(""String_Node_Str"")) {
    isForcedUpdate=true;
  }
 else {
    isForcedUpdate=false;
  }
  UpdateChecker updateChecker=new UpdateChecker(getResources().getString(R.string.app_name),updateOutput.version,updateOutput.apk_url,null,updateOutput.changes);
  if (!isForcedUpdate) {
    setContent();
  }
  if (DeviceInfo.getAppVersionCode() < Integer.valueOf(updateChecker.mUpdateDetail.latestVersion)) {
    Intent[] intents=new Intent[1];
    intents[0]=Intent.makeMainActivity(new ComponentName(AppController.getAppContext(),BottomBarActivity.class));
    updateChecker.showUpdaterDialog(context,getString(R.string.update_to_new_version),getString(R.string.exist_new_version),updateOutput.changes,updateOutput.version,intents,isForcedUpdate);
    AppController.getInstance().setIsCheckedUpdate(true);
  }
}",0.9359504132231404
174276,"@Override public void onResponse(Call call,Response response,String tag){
  if (response.body() instanceof RequestGiftOutput) {
    setCancelRequestBtn();
    Snackbari.showS(mRequestLay,""String_Node_Str"");
  }
 else   if (response.body() instanceof Gift) {
    gift=(Gift)response.body();
    setInfo();
    giftStatus=gift.status;
    if (gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
      setEditDeleteBtn();
    }
switch (gift.status) {
case GiftStatus.REJECTED_BY_ADMIN:
      showRejectedDialog();
    mDetailTitleTv.setText(""String_Node_Str"" + gift.title);
  break;
case GiftStatus.PUBLISHED:
if (!gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
  setRequestBtn();
}
break;
case GiftStatus.DONATED_TO_ME:
setCallSmsBtn();
break;
case GiftStatus.DONATED_TO_SOMEONE_ELSE:
hideAllBottomBtns();
mDetailTitleTv.setText(""String_Node_Str"" + gift.title);
break;
case GiftStatus.I_SENT_MY_REQUEST_FOR_IT:
setCancelRequestBtn();
break;
case GiftStatus.MY_REQUEST_REJECTED:
hideAllBottomBtns();
mDetailTitleTv.setText(""String_Node_Str"" + gift.title);
break;
}
if (gift.bookmark) {
mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark);
mBookmarkIc.setOnClickListener(removeFromWishList);
}
 else {
mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark_outline);
mBookmarkIc.setOnClickListener(addToWishList);
}
mBookmarkIc.setVisibility(View.VISIBLE);
}
 else if (response.body() instanceof ResponseBody) {
if (tag.equals(RequestName.SendRequestGift)) {
setCancelRequestBtn();
}
 else if (tag.equals(RequestName.DeleteGift)) {
Toasti.showS(""String_Node_Str"");
finish();
}
 else if (tag.equals(RequestName.DeleteMyRequest)) {
setRequestBtn();
}
 else if (tag.equals(RequestName.Bookmark)) {
}
 else if (tag.equals(RequestName.ReportGift)) {
Toasti.showS(""String_Node_Str"");
}
}
}","@Override public void onResponse(Call call,Response response,String tag){
  if (response.body() instanceof RequestGiftOutput) {
    setCancelRequestBtn();
    Snackbari.showS(mRequestLay,""String_Node_Str"");
  }
 else   if (response.body() instanceof Gift) {
    gift=(Gift)response.body();
    setInfo();
    giftStatus=gift.status;
    if (gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
      setEditDeleteBtn();
    }
switch (gift.status) {
case GiftStatus.REJECTED_BY_ADMIN:
      showRejectedDialog();
    mDetailTitleTv.setText(""String_Node_Str"" + gift.title);
  break;
case GiftStatus.PUBLISHED:
if (!gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
  setRequestBtn();
}
break;
case GiftStatus.DONATED_TO_ME:
setCallSmsBtn();
break;
case GiftStatus.DONATED_TO_SOMEONE_ELSE:
hideAllBottomBtns();
mDetailTitleTv.setText(""String_Node_Str"" + gift.title);
break;
case GiftStatus.I_SENT_MY_REQUEST_FOR_IT:
setCancelRequestBtn();
break;
case GiftStatus.MY_REQUEST_REJECTED:
hideAllBottomBtns();
mDetailTitleTv.setText(""String_Node_Str"" + gift.title);
break;
}
if (gift.bookmark) {
mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark);
mBookmarkIc.setOnClickListener(removeFromWishList);
}
 else {
mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark_outline);
mBookmarkIc.setOnClickListener(addToWishList);
}
mBookmarkIc.setVisibility(View.VISIBLE);
}
 else if (response.body() instanceof ResponseBody) {
if (tag.equals(RequestName.SendRequestGift)) {
setCancelRequestBtn();
}
 else if (tag.equals(RequestName.DeleteGift)) {
Toasti.showS(""String_Node_Str"");
finish();
}
 else if (tag.equals(RequestName.DeleteMyRequest)) {
setRequestBtn();
}
 else if (tag.equals(RequestName.Bookmark)) {
}
 else if (tag.equals(RequestName.ReportGift)) {
Snackbari.showS(mBookmarkIc,""String_Node_Str"");
}
}
}",0.9932560021580792
174277,"@Override public void onCreate(){
  super.onCreate();
  mInstance=this;
  AppController.context=getApplicationContext();
  preferences=this.getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  editor=preferences.edit();
  notificationManager=(NotificationManager)mInstance.getSystemService(Context.NOTIFICATION_SERVICE);
  retrofitInitialization();
}","@Override public void onCreate(){
  super.onCreate();
  mInstance=this;
  AppController.context=getApplicationContext();
  DownloadConfiguration configuration=new DownloadConfiguration();
  configuration.setMaxThreadNum(10);
  configuration.setThreadNum(3);
  DownloadManager.getInstance().init(getApplicationContext(),configuration);
  preferences=this.getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  editor=preferences.edit();
  notificationManager=(NotificationManager)mInstance.getSystemService(Context.NOTIFICATION_SERVICE);
  retrofitInitialization();
}",0.7673913043478261
174278,"@POST(""String_Node_Str"") Call<UpdateOutput> getUpdatedVersion(@Body UpdateInput updateInput);","@GET(""String_Node_Str"" + Constants.VERSION_NAME + ""String_Node_Str"") Call<UpdateOutput> getUpdatedVersion(@Path(Constants.VERSION_NAME) int versionName);",0.5691056910569106
174279,"@Override public void retry(){
  if (progressView != null)   progressView.setVisibility(View.VISIBLE);
  super.retry();
}","@Override public void retry(){
  super.retry();
}",0.5764705882352941
174280,"public void getUpdatedVersion(UpdateInput updateInput,final ProgressView progressView){
  Call<UpdateOutput> result=AppController.service.getUpdatedVersion(updateInput);
  result.enqueue(new CallbackWithRetry<UpdateOutput>(result,mContext){
    @Override public void onResponse(    Call<UpdateOutput> call,    Response<UpdateOutput> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void retry(){
      if (progressView != null)       progressView.setVisibility(View.VISIBLE);
      super.retry();
    }
    @Override public void onFailure(    Call<UpdateOutput> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}","public void getUpdatedVersion(){
  Call<UpdateOutput> result=AppController.service.getUpdatedVersion(DeviceInfo.getAppVersionCode());
  result.enqueue(new CallbackWithRetry<UpdateOutput>(result,mContext){
    @Override public void onResponse(    Call<UpdateOutput> call,    Response<UpdateOutput> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void retry(){
      super.retry();
    }
    @Override public void onFailure(    Call<UpdateOutput> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}",0.8648648648648649
174281,"@Override public void onFailed(DownloadException e){
  super.onFailed(e);
  cancelDownload();
}","@Override public void onFailed(DownloadException e){
  super.onFailed(e);
  cancelDownload();
  if (e.getErrorCode() == 108) {
    Toasti.showS(""String_Node_Str"");
  }
 else {
    Toasti.showS(""String_Node_Str"");
  }
}",0.6070287539936102
174282,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_gifts,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_gifts,container,false);
  ButterKnife.bind(this,rootView);
  init();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(2,false);
  }
 else {
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}",0.6582077716098335
174283,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(2,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
  }
}",0.6824254881808839
174284,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_requests,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_requests,container,false);
  ButterKnife.bind(this,rootView);
  init();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
  }
 else {
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}",0.65982636148382
174285,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(1,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
  }
}",0.6580773042616452
174286,"private void setListeners(){
  editTextIranSans.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence charSequence,    int i,    int i1,    int i2){
    }
    @Override public void onTextChanged(    CharSequence charSequence,    int i,    int i1,    int i2){
      if (level4Original.getPlaces().size() > 0) {
        level4.getPlaces().clear();
        for (        Place p : level4Original.getPlaces()) {
          if (p.name.startsWith(charSequence.toString())) {
            level4.addPlace(p);
          }
        }
      }
 else {
        level2.getPlaces().clear();
        for (        Place p : level2Original.getPlaces()) {
          if (p.name.startsWith(charSequence.toString())) {
            level2.addPlace(p);
          }
        }
      }
      choosePlaceAdapter.notifyDataSetChanged();
    }
    @Override public void afterTextChanged(    Editable editable){
    }
  }
);
}","private void setListeners(){
  editTextIranSans.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence charSequence,    int i,    int i1,    int i2){
    }
    @Override public void onTextChanged(    CharSequence charSequence,    int i,    int i1,    int i2){
      if (level4Original != null && level4Original.getPlaces().size() > 0) {
        level4.getPlaces().clear();
        for (        Place p : level4Original.getPlaces()) {
          if (p.name.startsWith(charSequence.toString())) {
            level4.addPlace(p);
          }
        }
      }
 else {
        level2.getPlaces().clear();
        for (        Place p : level2Original.getPlaces()) {
          if (p.name.startsWith(charSequence.toString())) {
            level2.addPlace(p);
          }
        }
      }
      choosePlaceAdapter.notifyDataSetChanged();
    }
    @Override public void afterTextChanged(    Editable editable){
    }
  }
);
}",0.9863731656184488
174287,"@Override public void onTextChanged(CharSequence charSequence,int i,int i1,int i2){
  if (level4Original.getPlaces().size() > 0) {
    level4.getPlaces().clear();
    for (    Place p : level4Original.getPlaces()) {
      if (p.name.startsWith(charSequence.toString())) {
        level4.addPlace(p);
      }
    }
  }
 else {
    level2.getPlaces().clear();
    for (    Place p : level2Original.getPlaces()) {
      if (p.name.startsWith(charSequence.toString())) {
        level2.addPlace(p);
      }
    }
  }
  choosePlaceAdapter.notifyDataSetChanged();
}","@Override public void onTextChanged(CharSequence charSequence,int i,int i1,int i2){
  if (level4Original != null && level4Original.getPlaces().size() > 0) {
    level4.getPlaces().clear();
    for (    Place p : level4Original.getPlaces()) {
      if (p.name.startsWith(charSequence.toString())) {
        level4.addPlace(p);
      }
    }
  }
 else {
    level2.getPlaces().clear();
    for (    Place p : level2Original.getPlaces()) {
      if (p.name.startsWith(charSequence.toString())) {
        level2.addPlace(p);
      }
    }
  }
  choosePlaceAdapter.notifyDataSetChanged();
}",0.9772727272727272
174288,"@POST(""String_Node_Str"") Call<ResponseBody> logout(@Header(Constants.ContentType) String contentType,@Header(Constants.Authorization) String authorization,@Path(""String_Node_Str"") String registerationId);","@POST(""String_Node_Str"") Call<ResponseBody> logout(@Header(Constants.ContentType) String contentType,@Header(Constants.Authorization) String authorization,@Body LogoutInput logoutInput);",0.8461538461538461
174289,"@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      getDonatedGifts();
    }
  }
);
  getDonatedGifts();
  if (getArguments() != null) {
    userId=getArguments().getString(Constants.USER_ID);
  }
  if (userId == null)   userId=AppController.getStoredString(Constants.USER_ID);
}","@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  if (getArguments() != null) {
    userId=getArguments().getString(Constants.USER_ID);
  }
  if (userId == null)   userId=AppController.getStoredString(Constants.USER_ID);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      getDonatedGifts();
    }
  }
);
  getDonatedGifts();
}",0.6435185185185185
174290,"@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      getReceivedGifts();
    }
  }
);
  getReceivedGifts();
  if (getArguments() != null) {
    userId=getArguments().getString(Constants.USER_ID);
  }
  if (userId == null)   userId=AppController.getStoredString(Constants.USER_ID);
}","@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  if (getArguments() != null) {
    userId=getArguments().getString(Constants.USER_ID);
  }
  if (userId == null)   userId=AppController.getStoredString(Constants.USER_ID);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      getReceivedGifts();
    }
  }
);
  getReceivedGifts();
}",0.7338461538461538
174291,"@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      getRegisteredGifts();
    }
  }
);
  getRegisteredGifts();
  if (getArguments() != null) {
    userId=getArguments().getString(Constants.USER_ID);
  }
  if (userId == null)   userId=AppController.getStoredString(Constants.USER_ID);
}","@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  if (getArguments() != null) {
    userId=getArguments().getString(Constants.USER_ID);
  }
  if (userId == null)   userId=AppController.getStoredString(Constants.USER_ID);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      getRegisteredGifts();
    }
  }
);
  getRegisteredGifts();
}",0.735474006116208
174292,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    mLog_in_out_lay.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        MaterialDialog.Builder builder=MaterialDialogBuilder.create(getContext()).customView(R.layout.dialog_simple_yes_no,false);
        final MaterialDialog dialog=builder.build();
        ((TextView)dialog.findViewById(R.id.message_textview)).setText(getContext().getResources().getString(R.string.dialog_exit_account));
        RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
        yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            apiRequest.logout();
            mLog_in_out_lay.setVisibility(View.INVISIBLE);
            AppController.storeString(Constants.Authorization,null);
            AppController.storeString(Constants.TELEPHONE,null);
            dialog.dismiss();
          }
        }
);
        RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
        noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            dialog.dismiss();
          }
        }
);
        dialog.show();
      }
    }
);
    mLog_in_out_txt.setText(""String_Node_Str"" + AppController.getStoredString(Constants.TELEPHONE) + ""String_Node_Str"");
  }
 else {
    mLog_in_out_txt.setText(""String_Node_Str"");
    mLog_in_out_lay.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(LoginActivity.createIntent());
      }
    }
);
  }
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    mLog_in_out_lay.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        MaterialDialog.Builder builder=MaterialDialogBuilder.create(getContext()).customView(R.layout.dialog_simple_yes_no,false);
        final MaterialDialog dialog=builder.build();
        ((TextView)dialog.findViewById(R.id.message_textview)).setText(getContext().getResources().getString(R.string.dialog_exit_account));
        RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
        yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            apiRequest.logout();
            AppController.storeString(Constants.Authorization,null);
            AppController.storeString(Constants.TELEPHONE,null);
            mLog_in_out_txt.setText(""String_Node_Str"");
            mLog_in_out_lay.setOnClickListener(new View.OnClickListener(){
              @Override public void onClick(              View v){
                startActivity(LoginActivity.createIntent());
              }
            }
);
            dialog.dismiss();
          }
        }
);
        RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
        noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            dialog.dismiss();
          }
        }
);
        dialog.show();
      }
    }
);
    mLog_in_out_txt.setText(""String_Node_Str"" + AppController.getStoredString(Constants.TELEPHONE) + ""String_Node_Str"");
  }
 else {
    mLog_in_out_txt.setText(""String_Node_Str"");
    mLog_in_out_lay.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(LoginActivity.createIntent());
      }
    }
);
  }
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
}",0.9142857142857144
174293,"private void setListeners(){
  mFirstRightIcon.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onBackPressed();
    }
  }
);
  addToWishList=new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark);
        mBookmarkIc.setOnClickListener(removeFromWishList);
        apiRequest.bookmark(giftId);
      }
 else {
        Toasti.showS(""String_Node_Str"");
      }
    }
  }
;
  removeFromWishList=new View.OnClickListener(){
    @Override public void onClick(    View v){
      mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark_outline);
      mBookmarkIc.setOnClickListener(addToWishList);
      apiRequest.bookmark(giftId);
    }
  }
;
  mBookmarkIc.setOnClickListener(addToWishList);
  mShareIc.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      shareIt();
    }
  }
);
  mReportLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      MaterialDialog.Builder builder=MaterialDialogBuilder.create(mContext);
      final MaterialDialog dialog=builder.customView(R.layout.dialog_report_gift,false).show();
      RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          String message=((EditTextIranSans)dialog.findViewById(R.id.message_et)).getText().toString();
          if (message != null && !message.equals(""String_Node_Str"")) {
            ReportInput reportInput=new ReportInput();
            reportInput.giftId=gift.giftId;
            reportInput.message=message;
            apiRequest.reportGift(reportInput);
            dialog.dismiss();
          }
 else {
            Toasti.showS(""String_Node_Str"");
          }
        }
      }
);
      RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          dialog.dismiss();
        }
      }
);
    }
  }
);
}","private void setListeners(){
  mFirstRightIcon.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onBackPressed();
    }
  }
);
  addToWishList=new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark);
        mBookmarkIc.setOnClickListener(removeFromWishList);
        apiRequest.bookmark(giftId);
      }
 else {
        Snackbari.showS(mBookmarkIc,""String_Node_Str"");
      }
    }
  }
;
  removeFromWishList=new View.OnClickListener(){
    @Override public void onClick(    View v){
      mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark_outline);
      mBookmarkIc.setOnClickListener(addToWishList);
      apiRequest.bookmark(giftId);
    }
  }
;
  mBookmarkIc.setOnClickListener(addToWishList);
  mShareIc.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      shareIt();
    }
  }
);
  mReportLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      MaterialDialog.Builder builder=MaterialDialogBuilder.create(mContext);
      final MaterialDialog dialog=builder.customView(R.layout.dialog_report_gift,false).show();
      RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
      yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          String message=((EditTextIranSans)dialog.findViewById(R.id.message_et)).getText().toString();
          if (message != null && !message.equals(""String_Node_Str"")) {
            ReportInput reportInput=new ReportInput();
            reportInput.giftId=gift.giftId;
            reportInput.message=message;
            apiRequest.reportGift(reportInput);
            dialog.dismiss();
          }
 else {
            Toasti.showS(""String_Node_Str"");
          }
        }
      }
);
      RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
      noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          dialog.dismiss();
        }
      }
);
    }
  }
);
}",0.9948100477475608
174294,"private void setListeners(){
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  enterVerificationCodeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String confirmationCode=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (!confirmationCode.trim().matches(regexStr)) {
        Toasti.showS(""String_Node_Str"");
        return;
      }
      apiRequest.login(confirmationCode);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
    }
  }
;
  enterPhoneNumber=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
        Toasti.showS(""String_Node_Str"");
        return;
      }
      apiRequest.register(phoneNumber);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
    }
  }
;
  not_recieved_code_btn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AppController.storeString(Constants.TELEPHONE,null);
      enterTelephoneNumber();
    }
  }
);
  if (AppController.getStoredString(Constants.TELEPHONE) == null) {
    enterTelephoneNumber();
  }
 else {
    enterVerificationCode();
  }
}","private void setListeners(){
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  enterVerificationCodeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String confirmationCode=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (!confirmationCode.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      apiRequest.login(confirmationCode);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
      secondBtnLay.setOnClickListener(notRecievedCode);
    }
  }
;
  enterPhoneNumber=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      apiRequest.register(phoneNumber);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
      secondBtnLay.setOnClickListener(enterVerificationCodeState);
    }
  }
;
  notRecievedCode=new View.OnClickListener(){
    @Override public void onClick(    View v){
      AppController.storeString(Constants.TELEPHONE,null);
      enterTelephoneNumber();
    }
  }
;
  enterVerificationCodeState=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
        Snackbari.showS(mBackBtn,""String_Node_Str"");
        return;
      }
      AppController.storeString(Constants.TELEPHONE,phoneNumber);
      enterVerificationCode();
    }
  }
;
  if (AppController.getStoredString(Constants.TELEPHONE) == null) {
    enterTelephoneNumber();
  }
 else {
    enterVerificationCode();
  }
}",0.7934668071654373
174295,"public void enterTelephoneNumber(){
  AppController.storeString(Constants.TELEPHONE,null);
  phoneConfirimationCodeEt.setHint(getString(R.string.hint_telephone_field));
  phoneConfirimationCodeEt.setText(""String_Node_Str"");
  login_get_verification_tv.setText(getString(R.string.sign_up));
  not_recieved_code_btn.setVisibility(View.INVISIBLE);
  loginGetVerificationBtn.setOnClickListener(enterPhoneNumber);
}","public void enterTelephoneNumber(){
  AppController.storeString(Constants.TELEPHONE,null);
  phoneConfirimationCodeEt.setHint(getString(R.string.hint_telephone_field));
  phoneConfirimationCodeEt.setText(""String_Node_Str"");
  login_get_verification_tv.setText(getString(R.string.sign_up));
  secondBtnTv.setText(""String_Node_Str"");
  secondBtnLay.setOnClickListener(enterVerificationCodeState);
  loginGetVerificationBtn.setOnClickListener(enterPhoneNumber);
}",0.832183908045977
174296,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  login_get_verification_tv.setVisibility(View.VISIBLE);
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    AppController.storeString(Constants.USER_ID,tokenOutput.userId);
    Toasti.showL(""String_Node_Str"" + NumberTranslator.toPersian(AppController.getStoredString(Constants.TELEPHONE)) + ""String_Node_Str"");
    finish();
  }
 else {
    enterVerificationCode();
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  login_get_verification_tv.setVisibility(View.VISIBLE);
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    AppController.storeString(Constants.USER_ID,tokenOutput.userId);
    Toasti.showS(""String_Node_Str"" + NumberTranslator.toPersian(AppController.getStoredString(Constants.TELEPHONE)) + ""String_Node_Str"");
    finish();
  }
 else   if (response.body() instanceof RegisterOutput) {
    String remainingSeconds=((RegisterOutput)response.body()).remainingSeconds;
    if (remainingSeconds != null && !remainingSeconds.equals(""String_Node_Str"")) {
      View view=this.getCurrentFocus();
      if (view != null) {
        InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(view.getWindowToken(),0);
      }
      Snackbari.showS(mToolbarTitleTextView,""String_Node_Str"" + remainingSeconds + ""String_Node_Str"");
    }
 else {
      enterVerificationCode();
    }
  }
}",0.7010816125860374
174297,"@Override public void onClick(View v){
  AppController.storeString(Constants.TELEPHONE,null);
  enterTelephoneNumber();
}","@Override public void onClick(View v){
  String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
  if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
    Snackbari.showS(mBackBtn,""String_Node_Str"");
    return;
  }
  AppController.storeString(Constants.TELEPHONE,phoneNumber);
  enterVerificationCode();
}",0.3820224719101123
174298,"public void enterVerificationCode(){
  phoneConfirimationCodeEt.setHint(getString(R.string.field_hint_verification_code));
  phoneConfirimationCodeEt.setText(""String_Node_Str"");
  login_get_verification_tv.setText(getString(R.string.sign_in));
  not_recieved_code_btn.setVisibility(View.VISIBLE);
  loginGetVerificationBtn.setOnClickListener(enterVerificationCodeListener);
}","public void enterVerificationCode(){
  phoneConfirimationCodeEt.setHint(getString(R.string.field_hint_verification_code));
  phoneConfirimationCodeEt.setText(""String_Node_Str"");
  login_get_verification_tv.setText(getString(R.string.sign_in));
  secondBtnTv.setText(getResources().getString(R.string.verification_not_received));
  secondBtnLay.setOnClickListener(notRecievedCode);
  loginGetVerificationBtn.setOnClickListener(enterVerificationCodeListener);
}",0.697841726618705
174299,"@Override public void onFailure(Call call,Throwable t){
  progressView.setVisibility(View.INVISIBLE);
  login_get_verification_tv.setVisibility(View.VISIBLE);
  Toasti.showS(""String_Node_Str"");
}","@Override public void onFailure(Call call,Throwable t){
  progressView.setVisibility(View.INVISIBLE);
  login_get_verification_tv.setVisibility(View.VISIBLE);
}",0.9014084507042254
174300,"@Override public void onClick(View view){
  Toasti.showS(""String_Node_Str"");
  giftImageUrls.remove(i);
  notifyDataSetChanged();
  ((UpdateImageGallery)mContext).onUpdateGallery();
}","@Override public void onClick(View view){
  giftImageUrls.remove(i);
  notifyDataSetChanged();
  ((UpdateImageGallery)mContext).onUpdateGallery();
}",0.8942598187311178
174301,"@Override public void onBindViewHolder(GiftGalleryHolder giftGalleryHolder,final int i){
  giftGalleryHolder.mCloseBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Toasti.showS(""String_Node_Str"");
      giftImageUrls.remove(i);
      notifyDataSetChanged();
      ((UpdateImageGallery)mContext).onUpdateGallery();
    }
  }
);
  Glide.with(mContext).load(giftImageUrls.get(i)).centerCrop().placeholder(R.color.background).crossFade().into(giftGalleryHolder.mImageView);
}","@Override public void onBindViewHolder(GiftGalleryHolder giftGalleryHolder,final int i){
  giftGalleryHolder.mCloseBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      giftImageUrls.remove(i);
      notifyDataSetChanged();
      ((UpdateImageGallery)mContext).onUpdateGallery();
    }
  }
);
  Glide.with(mContext).load(giftImageUrls.get(i)).centerCrop().placeholder(R.color.background).crossFade().into(giftGalleryHolder.mImageView);
}",0.4906771344455348
174302,"@POST(""String_Node_Str"") Call<ResponseBody> register(@Path(""String_Node_Str"") String telephone);","@POST(""String_Node_Str"") Call<RegisterOutput> register(@Path(""String_Node_Str"") String telephone);",0.9072164948453608
174303,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_bookmark,container,false);
  ButterKnife.bind(this,rootView);
  init();
  gifts.clear();
  if (AppController.getStoredString(Constants.Authorization) != null) {
  }
 else {
    mLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
  return rootView;
}",0.5853242320819113
174304,"@Override public void onResume(){
  super.onResume();
  gifts.clear();
  apiRequest.getBookmarkList(new StartLastIndex(startIndex + ""String_Node_Str"",startIndex + Constants.LIMIT + ""String_Node_Str""));
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    mBookmarkTopLay.setVisibility(View.GONE);
    mBookmarkMainLay.setVisibility(View.VISIBLE);
    if (gifts.size() <= 0) {
      apiRequest.getBookmarkList(new StartLastIndex(startIndex + ""String_Node_Str"",startIndex + Constants.LIMIT + ""String_Node_Str""));
    }
  }
 else {
    mBookmarkTopLay.setVisibility(View.VISIBLE);
    mBookmarkMainLay.setVisibility(View.INVISIBLE);
  }
}",0.5357643758765779
174305,"@Override public void onBackPressed(){
  if (getSupportFragmentManager().getBackStackEntryCount() > 0) {
    int index=getSupportFragmentManager().getBackStackEntryCount() - 1;
    FragmentManager.BackStackEntry backEntry=getSupportFragmentManager().getBackStackEntryAt(index);
    String tag=backEntry.getName();
    if (tag.equals(HomeFragment.class.getName() + Constants.HOME_PAGETYPE)) {
      finish();
    }
 else     if (tag.equals(BookmarkFragment.class.getName()) || tag.equals(StatisticFragment.class.getName()) || tag.equals(MyRequestsFragment.class.getName())|| tag.equals(MyGiftsFragment.class.getName())|| tag.equals(HomeFragment.class.getName() + CategoriesGridFragment.class.getName())) {
      super.onBackPressed();
    }
 else {
      mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
      replaceFragment(homeFragment,HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
    }
  }
}","@Override public void onBackPressed(){
  if (getSupportFragmentManager().getBackStackEntryCount() > 0) {
    int index=getSupportFragmentManager().getBackStackEntryCount() - 1;
    FragmentManager.BackStackEntry backEntry=getSupportFragmentManager().getBackStackEntryAt(index);
    String tag=backEntry.getName();
    if (tag.equals(HomeFragment.class.getName() + Constants.HOME_PAGETYPE)) {
      finish();
    }
 else     if (tag.equals(BookmarkFragment.class.getName()) || tag.equals(StatisticFragment.class.getName()) || tag.equals(MyRequestsFragment.class.getName())|| tag.equals(RequestsToAGiftFragment.class.getName())|| tag.equals(MyGiftsFragment.class.getName())|| tag.equals(HomeFragment.class.getName() + CategoriesGridFragment.class.getName())) {
      super.onBackPressed();
    }
 else {
      mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
      replaceFragment(homeFragment,HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
    }
  }
}",0.9728370221327968
174306,"private void setupViewPager(ViewPager viewPager){
  ViewPagerAdapter adapter=new ViewPagerAdapter(mainActivity.getSupportFragmentManager());
  RegisteredGiftsFragment registeredGiftsFragment=new RegisteredGiftsFragment();
  DonatedGiftsFragment donatedGiftsFragment=new DonatedGiftsFragment();
  ReceivedGiftsFragment receivedGiftsFragment=new ReceivedGiftsFragment();
  adapter.addFrag(registeredGiftsFragment,""String_Node_Str"");
  adapter.addFrag(donatedGiftsFragment,""String_Node_Str"");
  adapter.addFrag(receivedGiftsFragment,""String_Node_Str"");
  viewPager.setAdapter(adapter);
  adapter.notifyDataSetChanged();
}","private void setupViewPager(ViewPager viewPager){
  ViewPagerAdapter adapter=new ViewPagerAdapter(getChildFragmentManager());
  RegisteredGiftsFragment registeredGiftsFragment=new RegisteredGiftsFragment();
  DonatedGiftsFragment donatedGiftsFragment=new DonatedGiftsFragment();
  ReceivedGiftsFragment receivedGiftsFragment=new ReceivedGiftsFragment();
  adapter.addFrag(registeredGiftsFragment,""String_Node_Str"");
  adapter.addFrag(donatedGiftsFragment,""String_Node_Str"");
  adapter.addFrag(receivedGiftsFragment,""String_Node_Str"");
  viewPager.setAdapter(adapter);
  adapter.notifyDataSetChanged();
}",0.9746109746109746
174307,"private void setupViewPager(ViewPager viewPager){
  ViewPagerAdapter adapter=new ViewPagerAdapter(mainActivity.getSupportFragmentManager());
  SentRequestsFragment sentRequestsFragment=new SentRequestsFragment();
  ReceivedRequestsFragment receivedRequestsFragment=new ReceivedRequestsFragment();
  adapter.addFrag(sentRequestsFragment,""String_Node_Str"");
  adapter.addFrag(receivedRequestsFragment,""String_Node_Str"");
  viewPager.setAdapter(adapter);
  adapter.notifyDataSetChanged();
}","private void setupViewPager(ViewPager viewPager){
  ViewPagerAdapter adapter=new ViewPagerAdapter(getChildFragmentManager());
  SentRequestsFragment sentRequestsFragment=new SentRequestsFragment();
  ReceivedRequestsFragment receivedRequestsFragment=new ReceivedRequestsFragment();
  adapter.addFrag(sentRequestsFragment,""String_Node_Str"");
  adapter.addFrag(receivedRequestsFragment,""String_Node_Str"");
  viewPager.setAdapter(adapter);
  adapter.notifyDataSetChanged();
}",0.967674661105318
174308,"@Override public void onResponse(Call call,Response response){
  super.onResponse(call,response);
  Map<String,String> characteristics=(Map<String,String>)response.body();
  int i=0;
  for (  Map.Entry<String,String> entry : characteristics.entrySet()) {
    i++;
    if (i > 1) {
      break;
    }
    String key=entry.getKey();
    String value=entry.getValue();
    TextView valueTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getContext().getPackageName()));
    valueTxt.setText(value);
    valueTxt.setVisibility(View.VISIBLE);
    TextView keyTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getContext().getPackageName()));
    keyTxt.setText(key);
    keyTxt.setVisibility(View.VISIBLE);
  }
}","@Override public void onResponse(Call call,Response response){
  super.onResponse(call,response);
  Map<String,String> characteristics=(Map<String,String>)response.body();
  int i=0;
  for (  Map.Entry<String,String> entry : characteristics.entrySet()) {
    i++;
    if (i > 1) {
      break;
    }
    String key=entry.getKey();
    String value=entry.getValue();
    TextView valueTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    valueTxt.setText(value);
    valueTxt.setVisibility(View.VISIBLE);
    TextView keyTxt=(TextView)rootView.findViewById(AppController.getAppContext().getResources().getIdentifier(""String_Node_Str"" + i,""String_Node_Str"",getActivity().getPackageName()));
    keyTxt.setText(key);
    keyTxt.setVisibility(View.VISIBLE);
  }
}",0.9829157175398632
174309,"private void setRequestBtn(){
  mRequestLay.setVisibility(View.VISIBLE);
  mEditDeleteLay.setVisibility(View.GONE);
  mContactLay.setVisibility(View.GONE);
  mRequestProgressView.setVisibility(View.INVISIBLE);
  mRequestTv.setText(""String_Node_Str"");
  mRequestLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        MaterialDialog.Builder builder=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_simple_yes_no,false);
        final MaterialDialog dialog=builder.build();
        ((TextView)dialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
        RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
        yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            mRequestProgressView.setVisibility(View.VISIBLE);
            mRequestTv.setText(""String_Node_Str"");
            apiRequest.sendRequestGift(new RequestGiftInput(gift.giftId));
            dialog.dismiss();
          }
        }
);
        RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
        noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            dialog.dismiss();
          }
        }
);
        dialog.show();
      }
 else {
        Snackbari.showS(mRequestLay,""String_Node_Str"");
      }
    }
  }
);
}","private void setRequestBtn(){
  mRequestLay.setVisibility(View.VISIBLE);
  mEditDeleteLay.setVisibility(View.GONE);
  mContactLay.setVisibility(View.GONE);
  mRequestProgressView.setVisibility(View.INVISIBLE);
  mRequestTv.setText(""String_Node_Str"");
  mRequestLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        MaterialDialog.Builder builder=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_simple_yes_no,false);
        final MaterialDialog dialog=builder.build();
        ((TextView)dialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
        RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
        yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            mRequestProgressView.setVisibility(View.VISIBLE);
            mRequestTv.setText(""String_Node_Str"");
            apiRequest.sendRequestGift(new RequestGiftInput(gift.giftId));
            dialog.dismiss();
          }
        }
);
        RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
        noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            dialog.dismiss();
          }
        }
);
        dialog.show();
      }
 else {
        MaterialDialog.Builder builder=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_simple_yes_no,false);
        final MaterialDialog dialog=builder.build();
        ((TextView)dialog.findViewById(R.id.message_textview)).setText(""String_Node_Str"");
        RippleView yesBtnRipple=(RippleView)dialog.findViewById(R.id.yes_ripple_btn_cardview);
        yesBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            startActivity(LoginActivity.createIntent());
            dialog.dismiss();
          }
        }
);
        RippleView noBtnRipple=(RippleView)dialog.findViewById(R.id.no_ripple_btn_cardview);
        noBtnRipple.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
          @Override public void onComplete(          RippleView rippleView){
            dialog.dismiss();
          }
        }
);
        dialog.show();
      }
    }
  }
);
}",0.7663197729422895
174310,"private void init(){
  context=this;
  apiRequest=new ApiRequest(context,this);
  phoneConfirimationCodeEt.setRawInputType(Configuration.KEYBOARD_QWERTY);
  settingToolbar();
}","private void init(){
  context=this;
  apiRequest=new ApiRequest(context,this);
  if (!AppController.getStoredBoolean(Constants.CALLED_SETDEVICE_BEFORE,false)) {
    String deviceID=DeviceInfo.getDeviceID(this);
    Log.d(""String_Node_Str"",deviceID);
    apiRequest.setDevice(new SetDeviceInput(AppController.getStoredString(Constants.FIREBASE_REG_TOKEN),deviceID));
  }
  phoneConfirimationCodeEt.setRawInputType(Configuration.KEYBOARD_QWERTY);
  settingToolbar();
}",0.5474339035769828
174311,"@POST(""String_Node_Str"") Call<ResponseBody> logout(@Header(Constants.ContentType) String contentType,@Header(Constants.Authorization) String authorization);","@POST(""String_Node_Str"") Call<ResponseBody> logout(@Header(Constants.ContentType) String contentType,@Header(Constants.Authorization) String authorization,@Path(""String_Node_Str"") String registerationId);",0.8666666666666667
174312,"@POST(""String_Node_Str"") Call<SetDeviceOutput> setDevice(@Body SetDeviceInput setDeviceInput);","@POST(""String_Node_Str"") Call<ResponseBody> setDevice(@Header(Constants.ContentType) String contentType,@Body SetDeviceInput setDeviceInput);",0.6893617021276596
174313,"public void logout(){
  Call<ResponseBody> call=AppController.accountService.logout(Constants.JSON_TYPE,AppController.getStoredString(Constants.Authorization));
  call.enqueue(new CallbackWithRetry<ResponseBody>(call,mContext){
    @Override public void onResponse(    Call<ResponseBody> call,    Response<ResponseBody> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<ResponseBody> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}","public void logout(){
  Call<ResponseBody> call=AppController.accountService.logout(Constants.JSON_TYPE,AppController.getStoredString(Constants.Authorization),AppController.getStoredString(Constants.FIREBASE_REG_TOKEN));
  call.enqueue(new CallbackWithRetry<ResponseBody>(call,mContext){
    @Override public void onResponse(    Call<ResponseBody> call,    Response<ResponseBody> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<ResponseBody> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}",0.9466192170818504
174314,"public void setDevice(SetDeviceInput device){
  Call<SetDeviceOutput> result=AppController.accountService.setDevice(device);
  result.enqueue(new CallbackWithRetry<SetDeviceOutput>(result,mContext){
    @Override public void onResponse(    Call<SetDeviceOutput> call,    Response<SetDeviceOutput> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<SetDeviceOutput> call,    Throwable t){
      Toasti.showS(""String_Node_Str"");
    }
  }
);
}","public void setDevice(SetDeviceInput device){
  Call<ResponseBody> result=AppController.accountService.setDevice(Constants.JSON_TYPE,device);
  result.enqueue(new CallbackWithRetry<ResponseBody>(result,mContext){
    @Override public void onResponse(    Call<ResponseBody> call,    Response<ResponseBody> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<ResponseBody> call,    Throwable t){
      Toasti.showS(""String_Node_Str"");
    }
  }
);
}",0.8516746411483254
174315,"@Override public void onResponse(Call call,Response response){
}","@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof ResponseBody) {
    AppController.storeBoolean(Constants.CALLED_SETDEVICE_BEFORE,true);
  }
}",0.5059288537549407
174316,"@Override public void onFailure(Call call,Throwable t){
}","@Override public void onFailure(Call call,Throwable t){
  int i=0;
  Log.d(TAG,""String_Node_Str"");
}",0.7261146496815286
174317,"public void addFragment(Fragment fragment,String title){
  try {
    FragmentManager fragmentManager=getSupportFragmentManager();
    FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
    fragmentTransaction.add(R.id.container_body,fragment,title);
    fragmentTransaction.addToBackStack(title);
    fragmentTransaction.commit();
  }
 catch (  Exception e) {
  }
}","public void addFragment(Fragment fragment,String title){
  try {
    FragmentManager fragmentManager=getSupportFragmentManager();
    FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
    fragmentTransaction.add(R.id.container_body,fragment,title);
    fragmentTransaction.addToBackStack(title);
    fragmentTransaction.commit();
    fragmentManager.executePendingTransactions();
  }
 catch (  Exception e) {
  }
}",0.9397590361445785
174318,"public void replaceFragment(Fragment fragment,String title){
  try {
    FragmentManager fragmentManager=getSupportFragmentManager();
    FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
    fragmentTransaction.replace(R.id.container_body,fragment,title);
    fragmentTransaction.addToBackStack(title);
    fragmentTransaction.commit();
  }
 catch (  Exception e) {
  }
}","public void replaceFragment(Fragment fragment,String title){
  try {
    FragmentManager fragmentManager=getSupportFragmentManager();
    FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
    fragmentTransaction.replace(R.id.container_body,fragment,title);
    fragmentTransaction.addToBackStack(title);
    fragmentTransaction.commit();
    fragmentManager.executePendingTransactions();
  }
 catch (  Exception e) {
  }
}",0.9408983451536644
174319,"@Override public void onClick(View view){
  RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
  Bundle bundle=new Bundle();
  bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
  bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
  bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
  requestsToAGiftFragment.setArguments(bundle);
  ((BottomBarActivity)mContext).addFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
}","@Override public void onClick(View view){
  RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
  Bundle bundle=new Bundle();
  bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
  bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
  bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
  requestsToAGiftFragment.setArguments(bundle);
  ((BottomBarActivity)mContext).replaceFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
}",0.9901768172888016
174320,"@Override public void onBindViewHolder(final ReceiveGiftsRequestHolder myHolder,final int i){
  myHolder.mTitleTv.setText(gifts.get(i).title);
  myHolder.mUnseenMsgTv.setText(gifts.get(i).requestCount);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
      bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
      requestsToAGiftFragment.setArguments(bundle);
      ((BottomBarActivity)mContext).addFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}","@Override public void onBindViewHolder(final ReceiveGiftsRequestHolder myHolder,final int i){
  myHolder.mTitleTv.setText(gifts.get(i).title);
  myHolder.mUnseenMsgTv.setText(gifts.get(i).requestCount);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
      bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
      requestsToAGiftFragment.setArguments(bundle);
      ((BottomBarActivity)mContext).replaceFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}",0.9939613526570048
174321,"private void updateCurrentFragment(){
  if (!mShouldUpdateFragmentInitially && mFragmentManager != null && mFragmentContainer != 0 && mItems != null && mItems instanceof BottomBarFragment[]) {
    BottomBarFragment newFragment=((BottomBarFragment)mItems[mCurrentTabPosition]);
    if (mFragmentManager instanceof android.support.v4.app.FragmentManager && newFragment.getSupportFragment() != null) {
      ((android.support.v4.app.FragmentManager)mFragmentManager).beginTransaction().replace(mFragmentContainer,newFragment.getSupportFragment()).commit();
    }
 else     if (mFragmentManager instanceof android.app.FragmentManager && newFragment.getFragment() != null) {
      ((android.app.FragmentManager)mFragmentManager).beginTransaction().replace(mFragmentContainer,newFragment.getFragment()).commit();
    }
  }
  mShouldUpdateFragmentInitially=false;
}","private void updateCurrentFragment(){
  if (!mShouldUpdateFragmentInitially && mFragmentManager != null && mFragmentContainer != 0 && mItems != null && mItems instanceof BottomBarFragment[]) {
    BottomBarFragment newFragment=((BottomBarFragment)mItems[mCurrentTabPosition]);
    if (mFragmentManager instanceof android.support.v4.app.FragmentManager && newFragment.getSupportFragment() != null) {
      ((android.support.v4.app.FragmentManager)mFragmentManager).beginTransaction().replace(mFragmentContainer,newFragment.getSupportFragment()).commit();
    }
 else     if (mFragmentManager instanceof android.app.FragmentManager && newFragment.getFragment() != null) {
      ((android.app.FragmentManager)mFragmentManager).beginTransaction().replace(mFragmentContainer,newFragment.getFragment()).commit();
    }
    ((android.support.v4.app.FragmentManager)mFragmentManager).executePendingTransactions();
  }
  mShouldUpdateFragmentInitially=false;
}",0.9485903814262024
174322,"@Override public void onResponse(Call call,Response response,int position,String tag){
  if (response.body() instanceof StatusOutput) {
    if (tag.equals(RequestName.DenyRequest)) {
      requestModels.remove(position);
      notifyDataSetChanged();
    }
 else     if (tag.equals(RequestName.AcceptRequest)) {
      afterAcceptDialog=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_after_accept_request,false).build();
      TextView message=(TextView)afterAcceptDialog.findViewById(R.id.message_textview);
      message.setText(""String_Node_Str"" + requestModels.get(position).fromUser + ""String_Node_Str"");
      ImageView callIV=(ImageView)afterAcceptDialog.findViewById(R.id.call_iv);
      callIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      ImageView smsIV=(ImageView)afterAcceptDialog.findViewById(R.id.sms_iv);
      smsIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      ImageView profileIV=(ImageView)afterAcceptDialog.findViewById(R.id.profile_iv);
      profileIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      RippleView giftPageRv=(RippleView)afterAcceptDialog.findViewById(R.id.gift_page_ripple_btn);
      giftPageRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      RippleView okRv=(RippleView)afterAcceptDialog.findViewById(R.id.ok_ripple_btn);
      okRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      afterAcceptDialog.show();
    }
    yesNoDialog.dismiss();
  }
}","@Override public void onResponse(Call call,Response response,int position,String tag){
  if (response.body() instanceof ResponseBody) {
    if (tag.equals(RequestName.DenyRequest)) {
      requestModels.remove(position);
      notifyDataSetChanged();
    }
 else     if (tag.equals(RequestName.AcceptRequest)) {
      afterAcceptDialog=MaterialDialogBuilder.create(mContext).customView(R.layout.dialog_after_accept_request,false).build();
      TextView message=(TextView)afterAcceptDialog.findViewById(R.id.message_textview);
      message.setText(""String_Node_Str"" + requestModels.get(position).fromUser + ""String_Node_Str"");
      ImageView callIV=(ImageView)afterAcceptDialog.findViewById(R.id.call_iv);
      callIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      ImageView smsIV=(ImageView)afterAcceptDialog.findViewById(R.id.sms_iv);
      smsIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      ImageView profileIV=(ImageView)afterAcceptDialog.findViewById(R.id.profile_iv);
      profileIV.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      RippleView giftPageRv=(RippleView)afterAcceptDialog.findViewById(R.id.gift_page_ripple_btn);
      giftPageRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      RippleView okRv=(RippleView)afterAcceptDialog.findViewById(R.id.ok_ripple_btn);
      okRv.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
        @Override public void onComplete(        RippleView rippleView){
          Toasti.showS(""String_Node_Str"");
        }
      }
);
      afterAcceptDialog.show();
    }
    yesNoDialog.dismiss();
  }
}",0.9943369513921662
174323,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_information,container,false);
  ButterKnife.bind(this,rootView);
  init();
  setListeners();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_information,container,false);
  ButterKnife.bind(this,rootView);
  init();
  setListeners();
  return rootView;
}",0.800524934383202
174324,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  adapter=new GridCategoriesAdapter(context,categories);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.setLayoutManager(new GridLayoutManager(context,2));
  apiRequest.getCategories();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  adapter=new GridCategoriesAdapter(context,categories);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.setLayoutManager(new GridLayoutManager(context,2));
  apiRequest.getCategories();
  return rootView;
}",0.8633093525179856
174325,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.7912087912087912
174326,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_my_wall,container,false);
  ButterKnife.bind(this,rootView);
  init();
  setListeners();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_wall,container,false);
  ButterKnife.bind(this,rootView);
  init();
  setListeners();
  return rootView;
}",0.7984084880636605
174327,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_statistic,container,false);
  ButterKnife.bind(this,rootView);
  init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_statistic,container,false);
  ButterKnife.bind(this,rootView);
  init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
  return rootView;
}",0.8303571428571429
174328,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_my_gifts,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_gifts,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.7888888888888889
174329,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_my_requests,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_my_requests,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.790633608815427
174330,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  apiRequest.getRequestsToMyGifts(new StartLastIndex(startIndex + ""String_Node_Str"",startIndex + Constants.LIMIT + ""String_Node_Str""));
  return rootView;
}",0.8650793650793651
174331,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_requests_toagift,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_requests_toagift,container,false);
  ButterKnife.bind(this,rootView);
  requestModels.clear();
  init();
  return rootView;
}",0.9723756906077348
174332,"private void setInfo(){
  mTitleEt.setText(myGift.title);
  mPriceEt.setText(myGift.price);
  mDescriptionEt.setText(myGift.description);
  category=new Category();
  category.categoryId=myGift.categoryId;
  category.title=myGift.category;
  changeUIAfterCategorySelect();
  if (myGift.locationId != null) {
    city=new Place();
    city.id=myGift.locationId;
    city.name=myGift.location;
    if (!myGift.location.equals(""String_Node_Str"")) {
      mChooseCityBtnTxt.setText(myGift.location);
    }
  }
  if (myGift.regionId != null) {
    region=new Place();
    region.id=myGift.regionId;
    region.name=myGift.region;
    if (!myGift.region.equals(""String_Node_Str"")) {
      mChooseRegionBtnTxt.setText(myGift.region);
    }
  }
  findCityRegion();
  giftGalleryAdapter.notifyDataSetChanged();
  onUpdateGallery();
}","private void setInfo(){
  mTitleEt.setText(myGift.title);
  mPriceEt.setText(myGift.price);
  mDescriptionEt.setText(myGift.description);
  category=new Category();
  category.categoryId=myGift.categoryId;
  category.title=myGift.category;
  changeUIAfterCategorySelect();
  if (myGift.locationId != null) {
    city=new Place();
    city.id=myGift.locationId;
    city.name=myGift.location;
    if (myGift.location != null && !myGift.location.equals(""String_Node_Str"")) {
      mChooseCityBtnTxt.setText(myGift.location);
    }
  }
  if (myGift.regionId != null) {
    region=new Place();
    region.id=myGift.regionId;
    region.name=myGift.region;
    if (myGift.region != null && !myGift.region.equals(""String_Node_Str"")) {
      mChooseRegionBtnTxt.setText(myGift.region);
    }
  }
  findCityRegion();
  giftGalleryAdapter=new GiftGalleryAdapter(this,myGift.giftImages);
  mRecyclerView.setAdapter(giftGalleryAdapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,true));
  giftGalleryAdapter.notifyDataSetChanged();
  onUpdateGallery();
}",0.8592283628779979
174333,"public static Intent createIntent(){
  Intent intent=new Intent(AppController.getAppContext(),GiftDetailActivity.class);
  return intent;
}","public static Intent createIntent(){
  Intent intent=new Intent(AppController.getAppContext(),LoginActivity.class);
  return intent;
}",0.9523809523809524
174334,"public static Intent createIntent(){
  Intent intent=new Intent(AppController.getAppContext(),GiftDetailActivity.class);
  return intent;
}","public static Intent createIntent(){
  Intent intent=new Intent(AppController.getAppContext(),RegisterGiftActivity.class);
  return intent;
}",0.95
174335,"private void setListeners(){
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  enterVerificationCodeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      apiRequest.login(phoneConfirimationCodeEt.getText().toString());
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
    }
  }
;
  enterPhoneNumber=new View.OnClickListener(){
    @Override public void onClick(    View v){
      apiRequest.register(phoneConfirimationCodeEt.getText().toString());
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
    }
  }
;
  not_recieved_code_btn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AppController.storeString(Constants.TELEPHONE,null);
      enterTelephoneNumber();
    }
  }
);
  if (AppController.getStoredString(Constants.TELEPHONE) == null) {
    enterTelephoneNumber();
  }
 else {
    enterVerificationCode();
  }
}","private void setListeners(){
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  enterVerificationCodeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String confirmationCode=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (!confirmationCode.trim().matches(regexStr)) {
        Toasti.showS(""String_Node_Str"");
        return;
      }
      apiRequest.login(confirmationCode);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
    }
  }
;
  enterPhoneNumber=new View.OnClickListener(){
    @Override public void onClick(    View v){
      String phoneNumber=NumberTranslator.toEnglish(phoneConfirimationCodeEt.getText().toString());
      if (phoneNumber.length() != 11 || !phoneNumber.startsWith(""String_Node_Str"") || !phoneNumber.trim().matches(regexStr)) {
        Toasti.showS(""String_Node_Str"");
        return;
      }
      apiRequest.register(phoneNumber);
      progressView.setVisibility(View.VISIBLE);
      login_get_verification_tv.setVisibility(View.INVISIBLE);
    }
  }
;
  not_recieved_code_btn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AppController.storeString(Constants.TELEPHONE,null);
      enterTelephoneNumber();
    }
  }
);
  if (AppController.getStoredString(Constants.TELEPHONE) == null) {
    enterTelephoneNumber();
  }
 else {
    enterVerificationCode();
  }
}",0.7724750277469479
174336,"private void init(){
  context=this;
  apiRequest=new ApiRequest(context,this);
  settingToolbar();
}","private void init(){
  context=this;
  apiRequest=new ApiRequest(context,this);
  phoneConfirimationCodeEt.setRawInputType(Configuration.KEYBOARD_QWERTY);
  settingToolbar();
}",0.7292418772563177
174337,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  login_get_verification_tv.setVisibility(View.VISIBLE);
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    AppController.storeString(Constants.USER_ID,tokenOutput.userId);
    finish();
  }
 else {
    enterVerificationCode();
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  login_get_verification_tv.setVisibility(View.VISIBLE);
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    AppController.storeString(Constants.USER_ID,tokenOutput.userId);
    Toasti.showL(""String_Node_Str"" + NumberTranslator.toPersian(AppController.getStoredString(Constants.TELEPHONE)) + ""String_Node_Str"");
    finish();
  }
 else {
    enterVerificationCode();
  }
}",0.8957703927492447
174338,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.7912087912087912
174339,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.7912087912087912
174340,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.7912087912087912
174341,"private void setupViewPager(ViewPager viewPager){
  ViewPagerAdapter adapter=new ViewPagerAdapter(mainActivity.getSupportFragmentManager());
  SentRequestsFragment sentRequestsFragment=new SentRequestsFragment();
  ReceivedRequestsFragment receivedRequestsFragment=new ReceivedRequestsFragment();
  adapter.addFrag(receivedRequestsFragment,""String_Node_Str"");
  adapter.addFrag(sentRequestsFragment,""String_Node_Str"");
  viewPager.setAdapter(adapter);
  adapter.notifyDataSetChanged();
}","private void setupViewPager(ViewPager viewPager){
  ViewPagerAdapter adapter=new ViewPagerAdapter(mainActivity.getSupportFragmentManager());
  SentRequestsFragment sentRequestsFragment=new SentRequestsFragment();
  ReceivedRequestsFragment receivedRequestsFragment=new ReceivedRequestsFragment();
  adapter.addFrag(sentRequestsFragment,""String_Node_Str"");
  adapter.addFrag(receivedRequestsFragment,""String_Node_Str"");
  viewPager.setAdapter(adapter);
  adapter.notifyDataSetChanged();
}",0.9753593429158112
174342,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.7912087912087912
174343,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_requests_toagift,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_requests_toagift,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.7934782608695652
174344,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (rootView != null) {
    if (rootView.getParent() != null)     ((ViewGroup)rootView.getParent()).removeView(rootView);
    return rootView;
  }
  rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.7912087912087912
174345,"@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(2,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}","@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
}",0.3186046511627907
174346,"@Override public void onResume(){
  super.onResume();
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(2,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}",0.1580459770114942
174347,"@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(1,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}","@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
}",0.3058035714285714
174348,"@Override public void onResume(){
  super.onResume();
}","@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(1,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}",0.1502732240437158
174349,"public static void ShowNetwrokConnectionProblemDialog(final Context activity,final CallbackWithRetry callbackWithRetry){
  MaterialDialog.Builder builder=MaterialDialogBuilder.create(activity);
  final MaterialDialog dialog=builder.customView(R.layout.activity_no_internet_connection,false).show();
  final RippleView rippleBtnTry;
  rippleBtnTry=(RippleView)dialog.findViewById(R.id.ripple_btn_internet_retry_btn_cardview);
  rippleBtnTry.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
    @Override public void onComplete(    RippleView rippleView){
      if (ConnectionDetector.isConnectedToInternet()) {
        dialog.dismiss();
        callbackWithRetry.retry();
      }
 else {
        dialog.dismiss();
        dialog.show();
      }
    }
  }
);
  dialog.setCancelable(false);
}","public static void ShowNetwrokConnectionProblemDialog(final Context activity,final CallbackWithRetry callbackWithRetry){
  MaterialDialog.Builder builder=MaterialDialogBuilder.create(activity);
  final MaterialDialog dialog=builder.customView(R.layout.activity_no_internet_connection,false).show();
  final RippleView rippleBtnTry;
  rippleBtnTry=(RippleView)dialog.findViewById(R.id.ripple_btn_internet_retry_btn_cardview);
  rippleBtnTry.setOnRippleCompleteListener(new RippleView.OnRippleCompleteListener(){
    @Override public void onComplete(    RippleView rippleView){
      if (ConnectionDetector.isConnectedToInternet()) {
        dialog.dismiss();
        callbackWithRetry.retry();
      }
 else {
        dialog.dismiss();
        dialog.show();
      }
    }
  }
);
  dialog.setCancelable(true);
}",0.9956816779765576
174350,"private void setInfo(){
  mToolbarTitleTv.setText(gift.title);
  mDetailDescriptionTv.setText(gift.description);
  mDetailTitleTv.setText(gift.title);
  mDetailRegisterTimeTv.setText(gift.createDateTime);
  mDetailPriceTv.setText(gift.price);
  String place=findPlaceRecursion(gift.locationId);
  mDetailPlaceTv.setText(place);
  mDetailCategoryTv.setText(gift.category);
  setupViewPager(viewPager);
  mIndicator=new MyPageIndicator(this,pagesContainer,viewPager,R.drawable.indicator_circle);
  mIndicator.setPageCount(gift.giftImages != null ? gift.giftImages.size() : 0);
  mIndicator.show();
}","private void setInfo(){
  mToolbarTitleTv.setText(gift.title);
  mDetailDescriptionTv.setText(gift.description);
  mDetailTitleTv.setText(gift.title);
  mDetailRegisterTimeTv.setText(gift.createDateTime);
  mDetailPriceTv.setText(gift.price);
  String place=findPlaceRecursion(gift.locationId);
  mDetailPlaceTv.setText(place);
  mDetailCategoryTv.setText(gift.category);
  setupViewPager(viewPager);
  if (gift.giftImages.size() > 1) {
    mIndicator=new MyPageIndicator(this,pagesContainer,viewPager,R.drawable.indicator_circle);
    mIndicator.setPageCount(gift.giftImages != null ? gift.giftImages.size() : 0);
    mIndicator.show();
  }
 else {
    pagesContainer.setVisibility(View.GONE);
  }
}",0.920585967617579
174351,"@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof RequestGiftOutput) {
    cancelMyRequest();
    Snackbari.showS(bottomBarLayBtn,""String_Node_Str"");
  }
 else   if (response.body() instanceof Gift) {
    gift=(Gift)response.body();
    setInfo();
    giftStatus=gift.status;
    if (gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
      setDeleteBtn(getResources().getString(R.string.delete_gift));
    }
switch (gift.status) {
case GiftStatus.REJECTED_BY_ADMIN:
      setDeleteBtn(""String_Node_Str"");
    break;
case GiftStatus.PUBLISHED:
  if (!gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
    setRequestBtn();
  }
break;
case GiftStatus.DONATED_TO_ME:
callSmsBottomBarLayBtn.setVisibility(View.VISIBLE);
bottomBarLayBtn.setVisibility(View.GONE);
mCallBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
Toasti.showS(""String_Node_Str"");
}
}
);
mSmsBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
Toasti.showS(""String_Node_Str"");
}
}
);
break;
case GiftStatus.DONATED_TO_SOMEONE_ELSE:
callSmsBottomBarLayBtn.setVisibility(View.GONE);
bottomBarLayBtn.setVisibility(View.GONE);
mDetailTitleTv.setText(gift.title + ""String_Node_Str"");
break;
case GiftStatus.I_SENT_MY_REQUEST_FOR_IT:
cancelMyRequest();
break;
case GiftStatus.MY_REQUEST_REJECTED:
bottomBarLayBtn.setVisibility(View.VISIBLE);
mRequestTv.setText(""String_Node_Str"");
break;
}
if (gift.bookmark) {
mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark);
mBookmarkIc.setOnClickListener(removeFromWishList);
}
 else {
mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark_outline);
mBookmarkIc.setOnClickListener(addToWishList);
}
mBookmarkIc.setVisibility(View.VISIBLE);
}
 else if (response.body() instanceof ResponseBody) {
if (gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
Toasti.showS(""String_Node_Str"");
finish();
}
 else {
setRequestBtn();
}
}
}","@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof RequestGiftOutput) {
    cancelMyRequest();
    Snackbari.showS(bottomBarLayBtn,""String_Node_Str"");
  }
 else   if (response.body() instanceof Gift) {
    gift=(Gift)response.body();
    setInfo();
    giftStatus=gift.status;
    if (gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
      setDeleteBtn(getResources().getString(R.string.delete_gift));
    }
switch (gift.status) {
case GiftStatus.REJECTED_BY_ADMIN:
      setDeleteBtn(""String_Node_Str"");
    break;
case GiftStatus.PUBLISHED:
  if (!gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
    setRequestBtn();
  }
break;
case GiftStatus.DONATED_TO_ME:
callSmsBottomBarLayBtn.setVisibility(View.VISIBLE);
bottomBarLayBtn.setVisibility(View.GONE);
mCallBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
String uri=""String_Node_Str"" + ""String_Node_Str"";
Intent intent=new Intent(Intent.ACTION_DIAL);
intent.setData(Uri.parse(uri));
mContext.startActivity(intent);
}
}
);
mSmsBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
mContext.startActivity(new Intent(Intent.ACTION_VIEW,Uri.fromParts(""String_Node_Str"",""String_Node_Str"",null)));
}
}
);
break;
case GiftStatus.DONATED_TO_SOMEONE_ELSE:
callSmsBottomBarLayBtn.setVisibility(View.GONE);
bottomBarLayBtn.setVisibility(View.GONE);
mDetailTitleTv.setText(gift.title + ""String_Node_Str"");
break;
case GiftStatus.I_SENT_MY_REQUEST_FOR_IT:
cancelMyRequest();
break;
case GiftStatus.MY_REQUEST_REJECTED:
bottomBarLayBtn.setVisibility(View.VISIBLE);
mRequestTv.setText(""String_Node_Str"");
break;
}
if (gift.bookmark) {
mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark);
mBookmarkIc.setOnClickListener(removeFromWishList);
}
 else {
mBookmarkIc.setImageResource(R.mipmap.ic_action_action_bookmark_outline);
mBookmarkIc.setOnClickListener(addToWishList);
}
mBookmarkIc.setVisibility(View.VISIBLE);
}
 else if (response.body() instanceof ResponseBody) {
if (gift.userId.equals(AppController.getStoredString(Constants.USER_ID))) {
Toasti.showS(""String_Node_Str"");
finish();
}
 else {
setRequestBtn();
}
}
}",0.933768656716418
174352,"@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    finish();
  }
 else {
    enterVerificationCode();
  }
}","@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    AppController.storeString(Constants.USER_ID,tokenOutput.userId);
    finish();
  }
 else {
    enterVerificationCode();
  }
}",0.9242590559824369
174353,"@Override public ItemHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_ad_gift,null);
  ItemHolder mh=new ItemHolder(v);
  return mh;
}","@Override public GiftHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_ad_gift,null);
  GiftHolder mh=new GiftHolder(v);
  return mh;
}",0.943661971830986
174354,"@Override public void onBindViewHolder(ItemHolder myHolder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.background).crossFade().into(myHolder.getmItemIv());
  myHolder.getGiftTitleTv().setText(gifts.get(i).title + gifts.get(i).user);
  myHolder.getGiftLocationTv().setText(gifts.get(i).address);
  myHolder.getGiftCreatedTimeTv().setText(gifts.get(i).createDateTime);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mContext.startActivity(GiftDetailActivity.createIntent(gifts.get(i)));
    }
  }
);
}","@Override public void onBindViewHolder(GiftHolder myHolder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.background).crossFade().into(myHolder.getmItemIv());
  myHolder.getGiftTitleTv().setText(gifts.get(i).title + gifts.get(i).user);
  myHolder.getGiftLocationTv().setText(gifts.get(i).address);
  myHolder.getGiftCreatedTimeTv().setText(gifts.get(i).createDateTime);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mContext.startActivity(GiftDetailActivity.createIntent(gifts.get(i)));
    }
  }
);
}",0.995049504950495
174355,"@Override public void onClick(View view){
  RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
  Bundle bundle=new Bundle();
  bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
  bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
  requestsToAGiftFragment.setArguments(bundle);
  ((BottomBarActivity)mContext).addFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
}","@Override public void onClick(View view){
  RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
  Bundle bundle=new Bundle();
  bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
  bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
  bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
  requestsToAGiftFragment.setArguments(bundle);
  ((BottomBarActivity)mContext).addFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
}",0.9189765458422174
174356,"@Override public SentRequestItemHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_receive_requests,null);
  SentRequestItemHolder mh=new SentRequestItemHolder(v);
  return mh;
}","@Override public ReceiveGiftsRequestHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_receive_requests,null);
  ReceiveGiftsRequestHolder mh=new ReceiveGiftsRequestHolder(v);
  return mh;
}",0.8045977011494253
174357,"@Override public void onBindViewHolder(final SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(gifts.get(i).title);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
      requestsToAGiftFragment.setArguments(bundle);
      ((BottomBarActivity)mContext).addFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}","@Override public void onBindViewHolder(final ReceiveGiftsRequestHolder myHolder,final int i){
  myHolder.mTitleTv.setText(gifts.get(i).title);
  myHolder.mUnseenMsgTv.setText(gifts.get(i).requestCount);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      bundle.putString(Constants.GIFT_NAME,gifts.get(i).title);
      bundle.putString(Constants.GIFT_REQUEST_COUNT,gifts.get(i).requestCount);
      requestsToAGiftFragment.setArguments(bundle);
      ((BottomBarActivity)mContext).addFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}",0.8915343915343915
174358,"@GET(""String_Node_Str"") Call<ArrayList<Category>> getCategories();","@GET(""String_Node_Str"" + Constants.StartIndex + ""String_Node_Str""+ Constants.LastIndex+ ""String_Node_Str""+ Constants.DensityId+ ""String_Node_Str"") Call<ArrayList<Category>> getCategories(@Path(Constants.StartIndex) String startIndex,@Path(Constants.LastIndex) String lastIndex,@Path(Constants.DensityId) String DensityId);",0.3402061855670103
174359,"@GET(""String_Node_Str"" + Constants.LOCATION_ID + ""String_Node_Str""+ Constants.StartIndex+ ""String_Node_Str""+ Constants.LastIndex+ ""String_Node_Str"") Call<List<Gift>> getGifts(@Path(Constants.LOCATION_ID) String locationId,@Path(Constants.StartIndex) String startIndex,@Path(Constants.LastIndex) String lastIndex,@Query(Constants.CATEGORY_ID) String categoryId,@Query(Constants.SEARCH_TEXT) String searchText);","@GET(""String_Node_Str"" + Constants.CITY_ID + ""String_Node_Str""+ Constants.REGION_ID+ ""String_Node_Str""+ Constants.CATEGORY_ID+ ""String_Node_Str""+ Constants.StartIndex+ ""String_Node_Str""+ Constants.LastIndex+ ""String_Node_Str"") Call<List<Gift>> getGifts(@Path(Constants.CITY_ID) String locationId,@Path(Constants.REGION_ID) String regoin,@Path(Constants.CATEGORY_ID) String categoryId,@Path(Constants.StartIndex) String startIndex,@Path(Constants.LastIndex) String lastIndex,@Query(Constants.SEARCH_TEXT) String searchText);",0.6394849785407726
174360,"public RequestToMyGiftsAdapter(Context context,ArrayList<RequestModel> requestModels){
  this.requestModels=requestModels;
  this.mContext=context;
}","public RequestToMyGiftsAdapter(Context context,ArrayList<Gift> gifts){
  this.gifts=gifts;
  this.mContext=context;
}",0.7894736842105263
174361,"@Override public int getItemCount(){
  return (null != requestModels ? requestModels.size() : 0);
}","@Override public int getItemCount(){
  return (null != gifts ? gifts.size() : 0);
}",0.8461538461538461
174362,"@Override public void onBindViewHolder(SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(requestModels.get(i).gift);
}","@Override public void onBindViewHolder(SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(gifts.get(i).title);
}",0.9328621908127208
174363,"@Override protected void init(){
  super.init();
  adapter=new RequestToMyGiftsAdapter(context,requestModels);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  apiRequest.getRequestedToMyGifts(new StartLastIndex(startIndex + ""String_Node_Str"",startIndex + Constants.LIMIT + ""String_Node_Str""));
}","@Override protected void init(){
  super.init();
  adapter=new RequestToMyGiftsAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  apiRequest.getRequestedToMyGifts(new StartLastIndex(startIndex + ""String_Node_Str"",startIndex + Constants.LIMIT + ""String_Node_Str""));
}",0.979643765903308
174364,"@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<RequestModel> requestModels=(ArrayList<RequestModel>)response.body();
  this.requestModels.addAll(requestModels);
  adapter.notifyDataSetChanged();
  if (requestModels.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.9085714285714286
174365,"private void TabSelected(int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
    replaceFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  }
 else   if (menuItemId == R.id.bottomBarCategories) {
    mToolbarTitleTextView.setText(R.string.categories);
    replaceFragment(new CategoriesGridFragment(),CategoriesGridFragment.class.getName());
  }
 else   if (menuItemId == R.id.bottomBarSearch) {
    mToolbarTitleTextView.setText(R.string.search);
    replaceFragment(HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null),HomeFragment.class.getName() + Constants.SEARCH_PAGETYPE);
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
    mToolbarTitleTextView.setText(R.string.my_wall);
    replaceFragment(new MyWallFragment(),MyWallFragment.class.getName());
  }
}","private void TabSelected(int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
      replaceFragment(homeFragment,HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarCategories) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.categories);
      replaceFragment(categoriesGridFragment,CategoriesGridFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarSearch) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.search);
      replaceFragment(searchFragment,HomeFragment.class.getName() + Constants.SEARCH_PAGETYPE);
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.my_wall);
      replaceFragment(myWallFragment,MyWallFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
}",0.435512367491166
174366,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Fabric.with(this,new Crashlytics());
  setContentView(R.layout.activity_bottombar);
  ButterKnife.bind(this);
  context=this;
  settingToolbar();
  replaceFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  settingBottomBar(savedInstanceState);
  mToolbarNewGiftBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        startActivity(new Intent(context,RegisterGiftActivity.class));
      }
 else {
        startActivity(new Intent(context,LoginActivity.class));
      }
    }
  }
);
  mBottomBar.selectTabAtPosition(3,false);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Fabric.with(this,new Crashlytics());
  setContentView(R.layout.activity_bottombar);
  ButterKnife.bind(this);
  context=this;
  homeFragment=HomeFragment.newInstance(Constants.HOME_PAGETYPE,null);
  searchFragment=HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null);
  categoriesGridFragment=new CategoriesGridFragment();
  myWallFragment=new MyWallFragment();
  settingToolbar();
  replaceFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  settingBottomBar(savedInstanceState);
  mToolbarNewGiftBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        startActivity(new Intent(context,RegisterGiftActivity.class));
      }
 else {
        startActivity(new Intent(context,LoginActivity.class));
      }
    }
  }
);
  mBottomBar.selectTabAtPosition(3,false);
}",0.8162618796198522
174367,"private void TabSelected(int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
      replaceFragment(homeFragment,HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarCategories) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.categories);
      replaceFragment(categoriesGridFragment,CategoriesGridFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarSearch) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.search);
      replaceFragment(searchFragment,HomeFragment.class.getName() + Constants.SEARCH_PAGETYPE);
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.my_wall);
      replaceFragment(myWallFragment,MyWallFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
}","private void TabSelected(int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      unlock=true;
      mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
      replaceFragment(homeFragment,HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarCategories) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      unlock=true;
      mToolbarTitleTextView.setText(R.string.categories);
      replaceFragment(categoriesGridFragment,CategoriesGridFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarSearch) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      unlock=true;
      mToolbarTitleTextView.setText(R.string.search);
      replaceFragment(searchFragment,HomeFragment.class.getName() + Constants.SEARCH_PAGETYPE);
    }
    menuItemIdSelected=menuItemId;
  }
 else   if (menuItemId == R.id.bottomBarMyWall && unlock) {
    if (menuItemId != menuItemIdSelected) {
      clearStack();
      mToolbarTitleTextView.setText(R.string.my_wall);
      replaceFragment(myWallFragment,MyWallFragment.class.getName());
    }
    menuItemIdSelected=menuItemId;
  }
}",0.9749157618869336
174368,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Fabric.with(this,new Crashlytics());
  setContentView(R.layout.activity_bottombar);
  ButterKnife.bind(this);
  context=this;
  homeFragment=HomeFragment.newInstance(Constants.HOME_PAGETYPE,null);
  searchFragment=HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null);
  categoriesGridFragment=new CategoriesGridFragment();
  myWallFragment=new MyWallFragment();
  settingToolbar();
  replaceFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  settingBottomBar(savedInstanceState);
  mToolbarNewGiftBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        startActivity(new Intent(context,RegisterGiftActivity.class));
      }
 else {
        startActivity(new Intent(context,LoginActivity.class));
      }
    }
  }
);
  mBottomBar.selectTabAtPosition(3,false);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Fabric.with(this,new Crashlytics());
  setContentView(R.layout.activity_bottombar);
  ButterKnife.bind(this);
  context=this;
  homeFragment=HomeFragment.newInstance(Constants.HOME_PAGETYPE,null);
  searchFragment=HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null);
  categoriesGridFragment=new CategoriesGridFragment();
  myWallFragment=new MyWallFragment();
  settingToolbar();
  settingBottomBar(savedInstanceState);
  mToolbarNewGiftBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        startActivity(new Intent(context,RegisterGiftActivity.class));
      }
 else {
        startActivity(new Intent(context,LoginActivity.class));
      }
    }
  }
);
  mBottomBar.selectTabAtPosition(3,false);
}",0.935129740518962
174369,"private void TabSelected(int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
    setFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  }
 else   if (menuItemId == R.id.bottomBarCategories) {
    mToolbarTitleTextView.setText(R.string.categories);
    setFragment(new CategoriesGridFragment(),CategoriesGridFragment.class.getName());
  }
 else   if (menuItemId == R.id.bottomBarSearch) {
    mToolbarTitleTextView.setText(R.string.search);
    setFragment(HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null),HomeFragment.class.getName() + Constants.SEARCH_PAGETYPE);
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
    mToolbarTitleTextView.setText(R.string.my_wall);
    setFragment(new MyWallFragment(),MyWallFragment.class.getName());
  }
}","private void TabSelected(int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
    replaceFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  }
 else   if (menuItemId == R.id.bottomBarCategories) {
    mToolbarTitleTextView.setText(R.string.categories);
    replaceFragment(new CategoriesGridFragment(),CategoriesGridFragment.class.getName());
  }
 else   if (menuItemId == R.id.bottomBarSearch) {
    mToolbarTitleTextView.setText(R.string.search);
    replaceFragment(HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null),HomeFragment.class.getName() + Constants.SEARCH_PAGETYPE);
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
    mToolbarTitleTextView.setText(R.string.my_wall);
    replaceFragment(new MyWallFragment(),MyWallFragment.class.getName());
  }
}",0.979035639412998
174370,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Fabric.with(this,new Crashlytics());
  setContentView(R.layout.activity_bottombar);
  ButterKnife.bind(this);
  context=this;
  settingToolbar();
  setFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  settingBottomBar(savedInstanceState);
  mToolbarNewGiftBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        startActivity(new Intent(context,RegisterGiftActivity.class));
      }
 else {
        startActivity(new Intent(context,LoginActivity.class));
      }
    }
  }
);
  mBottomBar.selectTabAtPosition(3,false);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Fabric.with(this,new Crashlytics());
  setContentView(R.layout.activity_bottombar);
  ButterKnife.bind(this);
  context=this;
  settingToolbar();
  replaceFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  settingBottomBar(savedInstanceState);
  mToolbarNewGiftBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (AppController.getStoredString(Constants.Authorization) != null) {
        startActivity(new Intent(context,RegisterGiftActivity.class));
      }
 else {
        startActivity(new Intent(context,LoginActivity.class));
      }
    }
  }
);
  mBottomBar.selectTabAtPosition(3,false);
}",0.993939393939394
174371,"@Override public void onClick(View v){
  ((BottomBarActivity)mContext).setFragment(HomeFragment.newInstance(Constants.CATEGORY_PAGETYPE,categories.get(i)),HomeFragment.class.getName() + CategoriesGridFragment.class.getName());
}","@Override public void onClick(View v){
  ((BottomBarActivity)mContext).replaceFragment(HomeFragment.newInstance(Constants.CATEGORY_PAGETYPE,categories.get(i)),HomeFragment.class.getName() + CategoriesGridFragment.class.getName());
}",0.9782608695652174
174372,"@Override public void onBindViewHolder(CategoryGridHolder categoryGridHolder,final int i){
  categoryGridHolder.getmCategoryTv().setText(categories.get(i).title);
  categoryGridHolder.getmCategoryFontIcon().setText(fontIcons[i]);
  categoryGridHolder.mItemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)mContext).setFragment(HomeFragment.newInstance(Constants.CATEGORY_PAGETYPE,categories.get(i)),HomeFragment.class.getName() + CategoriesGridFragment.class.getName());
    }
  }
);
}","@Override public void onBindViewHolder(CategoryGridHolder categoryGridHolder,final int i){
  categoryGridHolder.getmCategoryTv().setText(categories.get(i).title);
  categoryGridHolder.getmCategoryFontIcon().setText(fontIcons[i]);
  categoryGridHolder.mItemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)mContext).replaceFragment(HomeFragment.newInstance(Constants.CATEGORY_PAGETYPE,categories.get(i)),HomeFragment.class.getName() + CategoriesGridFragment.class.getName());
    }
  }
);
}",0.9911190053285968
174373,"@Override public SentRequestItemHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_sent_request,null);
  SentRequestItemHolder mh=new SentRequestItemHolder(v);
  return mh;
}","@Override public SentRequestItemHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_sent_requests,null);
  SentRequestItemHolder mh=new SentRequestItemHolder(v);
  return mh;
}",0.9980119284294234
174374,"@Override public void onBindViewHolder(SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(requestModels.get(i).gift);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(i).fromUserId));
    }
  }
);
}","@Override public void onBindViewHolder(SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(requestModels.get(i).fromUser);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mContext.startActivity(UserProfileActivity.createIntent(requestModels.get(i).fromUserId));
    }
  }
);
}",0.9866310160427808
174375,"@Override public void onClick(View view){
  RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
  Bundle bundle=new Bundle();
  bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
  requestsToAGiftFragment.setArguments(bundle);
  ((BottomBarActivity)mContext).setFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
}","@Override public void onClick(View view){
  RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
  Bundle bundle=new Bundle();
  bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
  requestsToAGiftFragment.setArguments(bundle);
  ((BottomBarActivity)mContext).addFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
}",0.9919137466307276
174376,"@Override public SentRequestItemHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_sent_request,null);
  SentRequestItemHolder mh=new SentRequestItemHolder(v);
  return mh;
}","@Override public SentRequestItemHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_receive_requests,null);
  SentRequestItemHolder mh=new SentRequestItemHolder(v);
  return mh;
}",0.9762845849802372
174377,"@Override public void onBindViewHolder(final SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(gifts.get(i).title);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      requestsToAGiftFragment.setArguments(bundle);
      ((BottomBarActivity)mContext).setFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}","@Override public void onBindViewHolder(final SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(gifts.get(i).title);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      requestsToAGiftFragment.setArguments(bundle);
      ((BottomBarActivity)mContext).addFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}",0.995176848874598
174378,"@Override public SentRequestItemHolder onCreateViewHolder(ViewGroup viewGroup,int i){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_sent_request,null);
  SentRequestItemHolder mh=new SentRequestItemHolder(v);
  return mh;
}","@Override public SentRequestItemHolder onCreateViewHolder(ViewGroup viewGroup,int viewType){
  View v=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_sent_requests,null);
  SentRequestItemHolder mh=new SentRequestItemHolder(v);
  return mh;
}",0.9803921568627452
174379,"private void setListeners(){
  mLogoutLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      apiRequest.logout();
      mLogoutLay.setVisibility(View.INVISIBLE);
      AppController.storeString(Constants.Authorization,null);
      AppController.storeString(Constants.TELEPHONE,null);
    }
  }
);
  myGiftLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new MyGiftsFragment(),MyGiftsFragment.class.getName());
    }
  }
);
  myRequestsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new MyRequestsFragment(),MyRequestsFragment.class.getName());
    }
  }
);
  locationLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.setTargetFragment(MyWallFragment.this,0);
      choosePlaceDialogFragment.show(fm,""String_Node_Str"");
    }
  }
);
  statisticLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new StatisticFragment(),StatisticFragment.class.getName());
    }
  }
);
}","private void setListeners(){
  mLogoutLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      apiRequest.logout();
      mLogoutLay.setVisibility(View.INVISIBLE);
      AppController.storeString(Constants.Authorization,null);
      AppController.storeString(Constants.TELEPHONE,null);
    }
  }
);
  myGiftLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new MyGiftsFragment(),MyGiftsFragment.class.getName());
    }
  }
);
  myRequestsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new MyRequestsFragment(),MyRequestsFragment.class.getName());
    }
  }
);
  locationLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.setTargetFragment(MyWallFragment.this,0);
      choosePlaceDialogFragment.show(fm,""String_Node_Str"");
    }
  }
);
  statisticLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).replaceFragment(new StatisticFragment(),StatisticFragment.class.getName());
    }
  }
);
}",0.9898236092265944
174380,"@Override public void onClick(View v){
  ((BottomBarActivity)getActivity()).setFragment(new StatisticFragment(),StatisticFragment.class.getName());
}","@Override public void onClick(View v){
  ((BottomBarActivity)getActivity()).replaceFragment(new StatisticFragment(),StatisticFragment.class.getName());
}",0.9735099337748344
174381,"@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
}","@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(2,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}",0.3186046511627907
174382,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(2,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}","@Override public void onResume(){
  super.onResume();
}",0.1580459770114942
174383,"@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
}","@Override protected void init(){
  super.init();
  ((BottomBarActivity)getActivity()).mToolbarTitleTextView.setText(""String_Node_Str"");
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(1,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}",0.3058035714285714
174384,"@Override public void onResume(){
  super.onResume();
  if (AppController.getStoredString(Constants.Authorization) != null) {
    setupViewPager(mainVp);
    mainTabs.setupWithViewPager(mainVp);
    mainVp.setCurrentItem(1,false);
    myGiftTopLay.setVisibility(View.GONE);
    myGiftBottomLay.setVisibility(View.VISIBLE);
    mainVp.setCurrentItem(1,false);
  }
 else {
    myGiftTopLay.setVisibility(View.VISIBLE);
    myGiftBottomLay.setVisibility(View.INVISIBLE);
    myGiftLoginBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LoginActivity.class));
      }
    }
);
  }
}","@Override public void onResume(){
  super.onResume();
}",0.1502732240437158
174385,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_recyclerview,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_requests_toagift,container,false);
  ButterKnife.bind(this,rootView);
  init();
  return rootView;
}",0.9591836734693876
174386,"public SentRequestItemHolder(View itemView){
  super(itemView);
  this.itemView=itemView;
  mItemTitleTv=(TextView)itemView.findViewById(R.id.rw_sent_request_name_tv);
}","public SentRequestItemHolder(View itemView){
  super(itemView);
  this.itemView=itemView;
  rootLay=(RelativeLayout)itemView.findViewById(R.id.root_lay);
  mItemTitleTv=(TextView)itemView.findViewById(R.id.rw_sent_request_name_tv);
}",0.8407960199004975
174387,"private void setListeners(){
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  enterVerificationCodeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      Toasti.showS(""String_Node_Str"");
      apiRequest.getToken(phoneConfirimationCodeEt.getText().toString());
    }
  }
;
  enterPhoneNumber=new View.OnClickListener(){
    @Override public void onClick(    View v){
      apiRequest.register(phoneConfirimationCodeEt.getText().toString());
      enterVerificationCode();
    }
  }
;
  not_recieved_code_btn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      enterTelephoneNumber();
    }
  }
);
  if (AppController.getStoredString(Constants.TELEPHONE) == null) {
    enterTelephoneNumber();
    loginGetVerificationBtn.setOnClickListener(enterPhoneNumber);
  }
 else {
    enterVerificationCode();
    loginGetVerificationBtn.setOnClickListener(enterVerificationCodeListener);
  }
}","private void setListeners(){
  mBackBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onBackPressed();
    }
  }
);
  enterVerificationCodeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      Toasti.showS(""String_Node_Str"");
      apiRequest.getToken(phoneConfirimationCodeEt.getText().toString());
    }
  }
;
  enterPhoneNumber=new View.OnClickListener(){
    @Override public void onClick(    View v){
      apiRequest.register(phoneConfirimationCodeEt.getText().toString());
    }
  }
;
  not_recieved_code_btn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AppController.storeString(Constants.TELEPHONE,null);
      enterTelephoneNumber();
    }
  }
);
  if (AppController.getStoredString(Constants.TELEPHONE) == null) {
    enterTelephoneNumber();
    loginGetVerificationBtn.setOnClickListener(enterPhoneNumber);
  }
 else {
    enterVerificationCode();
    loginGetVerificationBtn.setOnClickListener(enterVerificationCodeListener);
  }
}",0.9097674418604652
174388,"@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    finish();
  }
}","@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof TokenOutput) {
    TokenOutput tokenOutput=(TokenOutput)response.body();
    AppController.storeString(Constants.Authorization,Constants.BEARER + ""String_Node_Str"" + tokenOutput.access_token);
    AppController.storeString(Constants.USERNAME,tokenOutput.userName);
    finish();
  }
 else {
    enterVerificationCode();
  }
}",0.9488139825218476
174389,"@Override public void onClick(View v){
  enterTelephoneNumber();
}","@Override public void onClick(View v){
  AppController.storeString(Constants.TELEPHONE,null);
  enterTelephoneNumber();
}",0.7058823529411765
174390,"@Override public void onBindViewHolder(SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(gifts.get(i).title);
}","@Override public void onBindViewHolder(SentRequestItemHolder myHolder,final int i){
  myHolder.mItemTitleTv.setText(gifts.get(i).title);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      RequestsToAGiftFragment requestsToAGiftFragment=new RequestsToAGiftFragment();
      Bundle bundle=new Bundle();
      bundle.putString(Constants.GIFT_ID,gifts.get(i).giftId);
      requestsToAGiftFragment.setArguments(bundle);
      ((BottomBarActivity)mContext).setFragment(requestsToAGiftFragment,RequestsToAGiftFragment.class.getName());
    }
  }
);
}",0.3660477453580902
174391,"private void setListeners(){
  mLogoutLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      apiRequest.logout();
      mLogoutLay.setVisibility(View.INVISIBLE);
      AppController.storeString(Constants.Authorization,null);
    }
  }
);
  myGiftLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new MyGiftsFragment(),MyGiftsFragment.class.getName());
    }
  }
);
  myRequestsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new MyRequestsFragment(),MyRequestsFragment.class.getName());
    }
  }
);
  locationLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.setTargetFragment(MyWallFragment.this,0);
      choosePlaceDialogFragment.show(fm,""String_Node_Str"");
    }
  }
);
  statisticLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new StatisticFragment(),StatisticFragment.class.getName());
    }
  }
);
}","private void setListeners(){
  mLogoutLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      apiRequest.logout();
      mLogoutLay.setVisibility(View.INVISIBLE);
      AppController.storeString(Constants.Authorization,null);
      AppController.storeString(Constants.TELEPHONE,null);
    }
  }
);
  myGiftLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new MyGiftsFragment(),MyGiftsFragment.class.getName());
    }
  }
);
  myRequestsLay.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new MyRequestsFragment(),MyRequestsFragment.class.getName());
    }
  }
);
  locationLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      ChoosePlaceDialogFragment choosePlaceDialogFragment=new ChoosePlaceDialogFragment();
      choosePlaceDialogFragment.setTargetFragment(MyWallFragment.this,0);
      choosePlaceDialogFragment.show(fm,""String_Node_Str"");
    }
  }
);
  statisticLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)getActivity()).setFragment(new StatisticFragment(),StatisticFragment.class.getName());
    }
  }
);
}",0.9794925269377824
174392,"@Override protected void init(){
  super.init();
  adapter=new RequestToMyGiftsAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  apiRequest.getRequestedToMyGifts(new StartLastIndex(startIndex + ""String_Node_Str"",startIndex + Constants.LIMIT + ""String_Node_Str""));
}","@Override protected void init(){
  super.init();
  adapter=new RequestToMyGiftsAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  apiRequest.getRequestsToMyGifts(new StartLastIndex(startIndex + ""String_Node_Str"",startIndex + Constants.LIMIT + ""String_Node_Str""));
}",0.996138996138996
174393,"@GET(""String_Node_Str"" + Constants.StartIndex + ""String_Node_Str""+ Constants.LastIndex+ ""String_Node_Str"") Call<ArrayList<BookmarkListOutput>> getBookmarkList(@Header(Constants.ContentType) String contentType,@Header(Constants.Authorization) String authorization,@Path(Constants.StartIndex) String startIndex,@Path(Constants.LastIndex) String lastIndex);","@GET(""String_Node_Str"" + Constants.StartIndex + ""String_Node_Str""+ Constants.LastIndex+ ""String_Node_Str"") Call<ArrayList<Gift>> getBookmarkList(@Header(Constants.ContentType) String contentType,@Header(Constants.Authorization) String authorization,@Path(Constants.StartIndex) String startIndex,@Path(Constants.LastIndex) String lastIndex);",0.9711815561959656
174394,"@Override public void onResponse(Call call,Response response){
  mRecyclerView.setVisibility(View.VISIBLE);
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<BookmarkListOutput> gifts=(ArrayList<BookmarkListOutput>)response.body();
  for (int i=0; i < gifts.size(); i++) {
    this.gifts.add(gifts.get(i).gift);
  }
  adapter.notifyDataSetChanged();
  if (gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}","@Override public void onResponse(Call call,Response response){
  mRecyclerView.setVisibility(View.VISIBLE);
  progressView.setVisibility(View.INVISIBLE);
  ArrayList<Gift> gifts=(ArrayList<Gift>)response.body();
  this.gifts.addAll(gifts);
  adapter.notifyDataSetChanged();
  if (gifts.size() > 0) {
    mRecyclerView.setVisibility(View.VISIBLE);
    mMessageTv.setVisibility(View.INVISIBLE);
  }
 else {
    mRecyclerView.setVisibility(View.INVISIBLE);
    mMessageTv.setVisibility(View.VISIBLE);
    mMessageTv.setText(""String_Node_Str"");
  }
}",0.8996598639455783
174395,"public void getBookmarkList(StartLastIndex startLastIndex){
  Call<ArrayList<BookmarkListOutput>> call=AppController.service.getBookmarkList(Constants.JSON_TYPE,AppController.getStoredString(Constants.Authorization),startLastIndex.startIndex,startLastIndex.lastIndex);
  call.enqueue(new CallbackWithRetry<ArrayList<BookmarkListOutput>>(call,mContext){
    @Override public void onResponse(    Call<ArrayList<BookmarkListOutput>> call,    Response<ArrayList<BookmarkListOutput>> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<ArrayList<BookmarkListOutput>> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}","public void getBookmarkList(StartLastIndex startLastIndex){
  Call<ArrayList<Gift>> call=AppController.service.getBookmarkList(Constants.JSON_TYPE,AppController.getStoredString(Constants.Authorization),startLastIndex.startIndex,startLastIndex.lastIndex);
  call.enqueue(new CallbackWithRetry<ArrayList<Gift>>(call,mContext){
    @Override public void onResponse(    Call<ArrayList<Gift>> call,    Response<ArrayList<Gift>> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
    @Override public void onFailure(    Call<ArrayList<Gift>> call,    Throwable t){
      super.onFailure(call,t);
    }
  }
);
}",0.925705794947994
174396,"@Override public void onFailure(Call<T> call,Throwable t){
  if (call.isCanceled()) {
  }
 else {
    if (t instanceof IOException) {
      ConnectionDetector.ShowNetwrokConnectionProblemDialog(context,this);
    }
  }
}","@Override public void onFailure(Call<T> call,Throwable t){
  if (call.isCanceled()) {
  }
 else {
    if (t instanceof IOException) {
      if (((Activity)context).hasWindowFocus()) {
        ConnectionDetector.ShowNetwrokConnectionProblemDialog(context,this);
      }
    }
  }
}",0.852
174397,"@Override public void onMenuTabSelected(@IdRes int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
    setFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
  }
 else   if (menuItemId == R.id.bottomBarCategories) {
    mToolbarTitleTextView.setText(R.string.categories);
    setFragment(new CategoriesGridFragment(),CategoriesGridFragment.class.getName());
  }
 else   if (menuItemId == R.id.bottomBarSearch) {
    mToolbarTitleTextView.setText(R.string.search);
    setFragment(HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null),HomeFragment.class.getName() + Constants.SEARCH_PAGETYPE);
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
    mToolbarTitleTextView.setText(R.string.my_wall);
    setFragment(new MyWallFragment(),MyWallFragment.class.getName());
  }
}","@Override public void onMenuTabSelected(@IdRes int menuItemId){
  TabSelected(menuItemId);
}",0.1528301886792452
174398,"private void settingBottomBar(Bundle savedInstanceState){
  mBottomBar=BottomBar.attach(this,savedInstanceState);
  mBottomBar.noTopOffset();
  mBottomBar.useFixedMode();
  mBottomBar.setTypeFace(""String_Node_Str"");
  mBottomBar.setItems(R.menu.menu_bottombar);
  mBottomBar.findViewById(R.id.bb_bottom_bar_background_view).setBackgroundColor(getResources().getColor(R.color.colorPrimaryDark));
  int color=getResources().getColor(R.color.white);
  ((ImageView)mBottomBar.findViewById(R.id.bb_bottom_bar_icon)).setColorFilter(color);
  mBottomBar.setOnMenuTabClickListener(new OnMenuTabClickListener(){
    @Override public void onMenuTabSelected(    @IdRes int menuItemId){
      if (menuItemId == R.id.bottomBarHome) {
        mToolbarTitleTextView.setText(""String_Node_Str"" + AppController.getStoredString(Constants.MY_LOCATION_NAME));
        setFragment(HomeFragment.newInstance(Constants.HOME_PAGETYPE,null),HomeFragment.class.getName() + Constants.HOME_PAGETYPE);
      }
 else       if (menuItemId == R.id.bottomBarCategories) {
        mToolbarTitleTextView.setText(R.string.categories);
        setFragment(new CategoriesGridFragment(),CategoriesGridFragment.class.getName());
      }
 else       if (menuItemId == R.id.bottomBarSearch) {
        mToolbarTitleTextView.setText(R.string.search);
        setFragment(HomeFragment.newInstance(Constants.SEARCH_PAGETYPE,null),HomeFragment.class.getName() + Constants.SEARCH_PAGETYPE);
      }
 else       if (menuItemId == R.id.bottomBarMyWall) {
        mToolbarTitleTextView.setText(R.string.my_wall);
        setFragment(new MyWallFragment(),MyWallFragment.class.getName());
      }
    }
    @Override public void onMenuTabReSelected(    @IdRes int menuItemId){
      if (menuItemId == R.id.bottomBarHome) {
        Toasti.showS(""String_Node_Str"");
      }
 else       if (menuItemId == R.id.bottomBarCategories) {
        Toasti.showS(""String_Node_Str"");
      }
 else       if (menuItemId == R.id.bottomBarSearch) {
        Toasti.showS(""String_Node_Str"");
      }
 else       if (menuItemId == R.id.bottomBarMyWall) {
        Toasti.showS(""String_Node_Str"");
      }
    }
  }
);
}","private void settingBottomBar(Bundle savedInstanceState){
  mBottomBar=BottomBar.attach(this,savedInstanceState);
  mBottomBar.noTopOffset();
  mBottomBar.useFixedMode();
  mBottomBar.setTypeFace(""String_Node_Str"");
  mBottomBar.setItems(R.menu.menu_bottombar);
  mBottomBar.findViewById(R.id.bb_bottom_bar_background_view).setBackgroundColor(getResources().getColor(R.color.colorPrimaryDark));
  int color=getResources().getColor(R.color.white);
  ((ImageView)mBottomBar.findViewById(R.id.bb_bottom_bar_icon)).setColorFilter(color);
  mBottomBar.setOnMenuTabClickListener(new OnMenuTabClickListener(){
    @Override public void onMenuTabSelected(    @IdRes int menuItemId){
      TabSelected(menuItemId);
    }
    @Override public void onMenuTabReSelected(    @IdRes int menuItemId){
      TabSelected(menuItemId);
    }
  }
);
}",0.5263865546218487
174399,"@Override public void onMenuTabReSelected(@IdRes int menuItemId){
  if (menuItemId == R.id.bottomBarHome) {
    Toasti.showS(""String_Node_Str"");
  }
 else   if (menuItemId == R.id.bottomBarCategories) {
    Toasti.showS(""String_Node_Str"");
  }
 else   if (menuItemId == R.id.bottomBarSearch) {
    Toasti.showS(""String_Node_Str"");
  }
 else   if (menuItemId == R.id.bottomBarMyWall) {
    Toasti.showS(""String_Node_Str"");
  }
}","@Override public void onMenuTabReSelected(@IdRes int menuItemId){
  TabSelected(menuItemId);
}",0.3186180422264875
174400,"private void setListeners(){
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
      if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return false;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HomeFilteringDialogFragment fragment=HomeFilteringDialogFragment.ShowME(getActivity().getSupportFragmentManager(),category,place);
      fragment.setTargetFragment(HomeFragment.this,0);
      fragment.show(getActivity().getSupportFragmentManager(),HomeFragment.class.getName());
    }
  }
);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      refreshItems();
    }
  }
);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
      getGifts();
    }
  }
);
  mSearchBackspaceBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSearchET.setText(""String_Node_Str"");
      mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
    }
  }
);
  mSearchET.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        mSearchBackspaceBtn.setVisibility(View.VISIBLE);
      }
    }
  }
);
  mSearchBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      searchText();
    }
  }
);
}","private void setListeners(){
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
      if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return false;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HomeFilteringDialogFragment fragment=HomeFilteringDialogFragment.ShowME(getActivity().getSupportFragmentManager(),category,place);
      fragment.setTargetFragment(HomeFragment.this,0);
      fragment.show(getActivity().getSupportFragmentManager(),HomeFragment.class.getName());
    }
  }
);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      refreshItems();
    }
  }
);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
      getGifts();
    }
  }
);
  mSearchBackspaceBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSearchET.setText(""String_Node_Str"");
      mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
    }
  }
);
  mSearchET.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        mSearchBackspaceBtn.setVisibility(View.VISIBLE);
      }
 else {
        mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
      }
    }
  }
);
  mSearchBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      searchText();
    }
  }
);
}",0.9821471078314687
174401,"@Override protected void init(){
  super.init();
  extractDataFromBundle();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  Drawable myIcon=getResources().getDrawable(R.mipmap.ic_backspace_black_24dp);
  myIcon.setColorFilter(getResources().getColor(R.color.dark_white),PorterDuff.Mode.SRC_ATOP);
  mSearchBackspaceBtn.setImageDrawable(myIcon);
  getGifts();
}","@Override protected void init(){
  super.init();
  extractDataFromBundle();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  setBackspaceSearchtxtIcon();
  getGifts();
}",0.6893203883495146
174402,"@Override public void afterTextChanged(Editable s){
  if (s.length() > 0) {
    mSearchBackspaceBtn.setVisibility(View.VISIBLE);
  }
}","@Override public void afterTextChanged(Editable s){
  if (s.length() > 0) {
    mSearchBackspaceBtn.setVisibility(View.VISIBLE);
  }
 else {
    mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
  }
}",0.8
174403,"@Override public void onBindViewHolder(ItemHolder myHolder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.background).crossFade().into(myHolder.getmItemIv());
  myHolder.getGiftTitleTv().setText(gifts.get(i).title);
  myHolder.getGiftLocationTv().setText(gifts.get(i).address);
  myHolder.getGiftCreatedTimeTv().setText(gifts.get(i).createDateTime);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mContext.startActivity(DetailActivity.createIntent(gifts.get(i)));
    }
  }
);
}","@Override public void onBindViewHolder(ItemHolder myHolder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.background).crossFade().into(myHolder.getmItemIv());
  myHolder.getGiftTitleTv().setText(gifts.get(i).title + gifts.get(i).user);
  myHolder.getGiftLocationTv().setText(gifts.get(i).address);
  myHolder.getGiftCreatedTimeTv().setText(gifts.get(i).createDateTime);
  myHolder.itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mContext.startActivity(DetailActivity.createIntent(gifts.get(i)));
    }
  }
);
}",0.9874055415617128
174404,"private void setListeners(){
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
      if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return false;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      FilterDialogFragment fragment=new FilterDialogFragment();
      fragment.show(fm,""String_Node_Str"");
    }
  }
);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      refreshItems();
    }
  }
);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(new LinearLayoutManager(context)){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
    }
  }
);
}","private void setListeners(){
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
      if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return false;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      FilterDialogFragment fragment=new FilterDialogFragment();
      fragment.show(fm,""String_Node_Str"");
    }
  }
);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      refreshItems();
    }
  }
);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
      getGifts();
    }
  }
);
}",0.9854945054945056
174405,"@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(context));
  apiRequest.getGifts(new GetGiftPathQuery(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null));
}","@Override protected void init(){
  super.init();
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  getGifts();
}",0.6256590509666081
174406,"@Override public void onLoadMore(int page,int totalItemsCount){
  pageNumber++;
}","@Override public void onLoadMore(int page,int totalItemsCount){
  pageNumber++;
  getGifts();
}",0.9204545454545454
174407,"void refreshItems(){
  pageNumber=1;
  gifts.clear();
  apiRequest.getGifts(new GetGiftPathQuery(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null));
  onItemsLoadComplete();
}","void refreshItems(){
  pageNumber=1;
  gifts.clear();
  startIndex=0;
  getGifts();
  onItemsLoadComplete();
}",0.64
174408,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_search,container,false);
  ButterKnife.bind(this,rootView);
  init();
  adapter=new GiftListAdapter(context,galleries);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(context));
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(new LinearLayoutManager(context)){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
    }
  }
);
  Drawable myIcon=getResources().getDrawable(R.mipmap.ic_backspace_black_24dp);
  myIcon.setColorFilter(getResources().getColor(R.color.dark_white),PorterDuff.Mode.SRC_ATOP);
  mSearchBackspaceBtn.setImageDrawable(myIcon);
  mSearchBackspaceBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSearchET.setText(""String_Node_Str"");
      mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
    }
  }
);
  mSearchET.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        mSearchBackspaceBtn.setVisibility(View.VISIBLE);
      }
    }
  }
);
  mSearchBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      sendRequest();
    }
  }
);
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
 else       if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return true;
    }
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_search,container,false);
  ButterKnife.bind(this,rootView);
  init();
  adapter=new GiftListAdapter(context,galleries);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
    }
  }
);
  Drawable myIcon=getResources().getDrawable(R.mipmap.ic_backspace_black_24dp);
  myIcon.setColorFilter(getResources().getColor(R.color.dark_white),PorterDuff.Mode.SRC_ATOP);
  mSearchBackspaceBtn.setImageDrawable(myIcon);
  mSearchBackspaceBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSearchET.setText(""String_Node_Str"");
      mSearchBackspaceBtn.setVisibility(View.INVISIBLE);
    }
  }
);
  mSearchET.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        mSearchBackspaceBtn.setVisibility(View.VISIBLE);
      }
    }
  }
);
  mSearchBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      sendRequest();
    }
  }
);
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
 else       if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return true;
    }
  }
);
  return rootView;
}",0.9752798507462688
174409,"private void setListeners(){
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(new LinearLayoutManager(context)){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      FilteringFragment filteringFragment=new FilteringFragment();
      filteringFragment.show(fm,""String_Node_Str"");
    }
  }
);
}","private void setListeners(){
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(linearLayoutManager){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      FilteringFragment filteringFragment=new FilteringFragment();
      filteringFragment.show(fm,""String_Node_Str"");
    }
  }
);
}",0.986400725294651
174410,"@Override protected void init(){
  super.init();
  extractDataFromBundle();
  adapter=new GiftListAdapter(context,galleries);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(context));
  apiRequest.getGifts(new GetGiftPathQuery(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",category.categoryId,null));
}","@Override protected void init(){
  super.init();
  extractDataFromBundle();
  adapter=new GiftListAdapter(context,galleries);
  mRecyclerView.setAdapter(adapter);
  linearLayoutManager=new LinearLayoutManager(context);
  mRecyclerView.setLayoutManager(linearLayoutManager);
  apiRequest.getGifts(new GetGiftPathQuery(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",category.categoryId,null));
}",0.906208718626156
174411,"@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeString(title);
  dest.writeString(address);
  dest.writeString(description);
  dest.writeString(price);
  dest.writeString(status);
  dest.writeString(userId);
  dest.writeString(categoryId);
  dest.writeString(category);
  dest.writeString(locationId);
  dest.writeString(location);
  dest.writeSerializable(giftImages);
  dest.writeString(giftId);
  dest.writeString(createDateTime);
  dest.writeString(createDate);
  dest.writeString(createTime);
}","@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeString(title);
  dest.writeString(address);
  dest.writeString(description);
  dest.writeString(price);
  dest.writeString(status);
  dest.writeString(userId);
  dest.writeString(user);
  dest.writeString(categoryId);
  dest.writeString(category);
  dest.writeString(locationId);
  dest.writeString(location);
  dest.writeSerializable(giftImages);
  dest.writeString(giftId);
  dest.writeString(createDateTime);
  dest.writeString(createDate);
  dest.writeString(createTime);
}",0.9757462686567164
174412,"private void init(){
  setupViewPager(viewPager);
  LinearLayout mLinearLayout=(LinearLayout)findViewById(R.id.pagesContainer);
  mIndicator=new MyPageIndicator(this,mLinearLayout,viewPager,R.drawable.indicator_circle);
  mIndicator.setPageCount(gift.giftImages.size());
  mIndicator.show();
}","private void init(){
  setupViewPager(viewPager);
  LinearLayout mLinearLayout=(LinearLayout)findViewById(R.id.pagesContainer);
  mIndicator=new MyPageIndicator(this,mLinearLayout,viewPager,R.drawable.indicator_circle);
  mIndicator.setPageCount(gift.giftImages != null ? gift.giftImages.size() : 0);
  mIndicator.show();
}",0.9512987012987012
174413,"@Override public int getCount(){
  return gift.giftImages.size();
}","@Override public int getCount(){
  return (gift.giftImages != null ? gift.giftImages.size() : 0);
}",0.8072289156626506
174414,"@Override public void onClick(View v){
  ((BottomBarActivity)mContext).setFragment(new GiftCategoryFilterFragment(),GiftCategoryFilterFragment.class.getName());
}","@Override public void onClick(View v){
  ((BottomBarActivity)mContext).setFragment(GiftCategoryFilterFragment.newInstance(categories.get(i)),GiftCategoryFilterFragment.class.getName());
}",0.9054441260744984
174415,"@Override public void onBindViewHolder(CategoryGridHolder categoryGridHolder,final int i){
  categoryGridHolder.getmCategoryTv().setText(categories.get(i).title);
  categoryGridHolder.getmCategoryFontIcon().setText(fontIcons[i]);
  categoryGridHolder.mItemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)mContext).setFragment(new GiftCategoryFilterFragment(),GiftCategoryFilterFragment.class.getName());
    }
  }
);
}","@Override public void onBindViewHolder(CategoryGridHolder categoryGridHolder,final int i){
  categoryGridHolder.getmCategoryTv().setText(categories.get(i).title);
  categoryGridHolder.getmCategoryFontIcon().setText(fontIcons[i]);
  categoryGridHolder.mItemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)mContext).setFragment(GiftCategoryFilterFragment.newInstance(categories.get(i)),GiftCategoryFilterFragment.class.getName());
    }
  }
);
}",0.916256157635468
174416,"@GET(""String_Node_Str"" + Constants.LOCATION_ID + ""String_Node_Str""+ Constants.StartIndex+ ""String_Node_Str""+ Constants.LastIndex+ ""String_Node_Str"") Call<List<Gift>> getGifts(@Path(Constants.LOCATION_ID) String locationId,@Path(Constants.StartIndex) String startIndex,@Path(Constants.LastIndex) String lastIndex);","@GET(""String_Node_Str"" + Constants.LOCATION_ID + ""String_Node_Str""+ Constants.StartIndex+ ""String_Node_Str""+ Constants.LastIndex+ ""String_Node_Str"") Call<List<Gift>> getGifts(@Path(Constants.LOCATION_ID) String locationId,@Path(Constants.StartIndex) String startIndex,@Path(Constants.LastIndex) String lastIndex,@Query(Constants.CATEGORY_ID) String categoryId,@Query(Constants.SEARCH_TEXT) String searchText);",0.8670360110803325
174417,"@Override public void onResponse(Call call,Response response){
  super.onResponse(call,response);
  Log.d(TAG,""String_Node_Str"");
  ArrayList<Category> categories=(ArrayList<Category>)response.body();
  this.categories.addAll(categories);
  adapter.notifyDataSetChanged();
}","@Override public void onResponse(Call call,Response response){
  super.onResponse(call,response);
  Log.d(TAG,""String_Node_Str"");
  ArrayList<Category> categories=(ArrayList<Category>)response.body();
  this.categories.clear();
  this.categories.addAll(categories);
  adapter.notifyDataSetChanged();
}",0.9530434782608695
174418,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_category,container,false);
  ButterKnife.bind(this,rootView);
  init();
  adapter=new GiftListAdapter(context,galleries);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(context));
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(new LinearLayoutManager(context)){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
    }
  }
);
  mFilterLayBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      FilteringFragment filteringFragment=new FilteringFragment();
      filteringFragment.show(fm,""String_Node_Str"");
    }
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_category,container,false);
  ButterKnife.bind(this,rootView);
  init();
  setListeners();
  return rootView;
}",0.432263116679718
174419,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_information,container,false);
  ButterKnife.bind(this,rootView);
  init();
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
 else       if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return true;
    }
  }
);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      refreshItems();
    }
  }
);
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(context));
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(new LinearLayoutManager(context)){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
    }
  }
);
  apiRequest.getGifts();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_information,container,false);
  ButterKnife.bind(this,rootView);
  init();
  mFilterLayBtn.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        filterIc.setAlpha(0.5f);
        filterTxt.setAlpha(0.5f);
      }
 else       if (event.getAction() == MotionEvent.ACTION_UP) {
        filterIc.setAlpha(1f);
        filterTxt.setAlpha(1f);
      }
      return true;
    }
  }
);
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      refreshItems();
    }
  }
);
  adapter=new GiftListAdapter(context,gifts);
  mRecyclerView.setAdapter(adapter);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(context));
  mRecyclerView.addOnScrollListener(new EndlessRecyclerViewScrollListener(new LinearLayoutManager(context)){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      pageNumber++;
    }
  }
);
  apiRequest.getGifts(new GetGiftPathQuery(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null));
  return rootView;
}",0.9678395762391222
174420,"void refreshItems(){
  pageNumber=1;
  gifts.clear();
  apiRequest.getGifts();
  onItemsLoadComplete();
}","void refreshItems(){
  pageNumber=1;
  gifts.clear();
  apiRequest.getGifts(new GetGiftPathQuery(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null));
  onItemsLoadComplete();
}",0.711864406779661
174421,"public void getGifts(){
  Call<List<Gift>> call=AppController.service.getGifts(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  call.enqueue(new CallbackWithRetry<List<Gift>>(call,mContext){
    @Override public void onResponse(    Call<List<Gift>> call,    Response<List<Gift>> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
  }
);
}","public void getGifts(GetGiftPathQuery getGiftPathQuery){
  Call<List<Gift>> call=AppController.service.getGifts(getGiftPathQuery.locationId,getGiftPathQuery.startIndex,getGiftPathQuery.lastIndex,getGiftPathQuery.categoryId,getGiftPathQuery.searchText);
  call.enqueue(new CallbackWithRetry<List<Gift>>(call,mContext){
    @Override public void onResponse(    Call<List<Gift>> call,    Response<List<Gift>> response){
      handlingOnResponse(new HandlingResponse(call,response,this));
    }
  }
);
}",0.7454545454545455
174422,"@Override public void onBindViewHolder(ItemHolder myHolder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.background).crossFade().into(myHolder.mItemIv);
  myHolder.getmItemTitleTv().setText(gifts.get(i).title);
}","@Override public void onBindViewHolder(ItemHolder myHolder,final int i){
  String image_url;
  if (gifts.get(i).giftImages != null && gifts.get(i).giftImages.size() > 0) {
    image_url=gifts.get(i).giftImages.get(0);
  }
 else {
    image_url=""String_Node_Str"";
  }
  Glide.with(mContext).load(image_url).centerCrop().placeholder(R.color.background).crossFade().into(myHolder.getmItemIv());
  myHolder.getGiftTitleTv().setText(gifts.get(i).title);
  myHolder.getGiftLocationTv().setText(gifts.get(i).address);
  myHolder.getGiftCreatedTimeTv().setText(gifts.get(i).createDateTime);
}",0.8563106796116505
174423,"public ItemHolder(View itemView){
  super(itemView);
  this.itemView=itemView;
  mItemTitleTv=(TextView)itemView.findViewById(R.id.row_title_textview);
  mItemIv=(ImageView)itemView.findViewById(R.id.row_imageview);
  itemView.setOnClickListener(this);
}","public ItemHolder(View itemView){
  super(itemView);
  this.itemView=itemView;
  mItemTitleTv=(TextView)itemView.findViewById(R.id.row_title_textview);
  mGiftLocationTv=(TextView)itemView.findViewById(R.id.row_ad_gift_location_tv);
  mGiftCreatedTimeTv=(TextView)itemView.findViewById(R.id.row_ad_gift_time_tv);
  mItemIv=(ImageView)itemView.findViewById(R.id.row_imageview);
  itemView.setOnClickListener(this);
}",0.7593423019431988
174424,"@Override public void onClick(View v){
  ((BottomBarActivity)mContext).setFragment(new GiftCategoryFilterFragment(),GiftCategoryFilterFragment.class.getName());
}","@Override public void onClick(View v){
}",0.396039603960396
174425,"@Override public void onBindViewHolder(CategoryDialogHolder categoryHolder,final int i){
  categoryHolder.getmCategoryTv().setText(categories.get(i).title);
  categoryHolder.mItemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ((BottomBarActivity)mContext).setFragment(new GiftCategoryFilterFragment(),GiftCategoryFilterFragment.class.getName());
    }
  }
);
}","@Override public void onBindViewHolder(CategoryDialogHolder categoryHolder,final int i){
  categoryHolder.getmCategoryTv().setText(categories.get(i).title);
  categoryHolder.mItemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}",0.8056338028169014
174426,"@GET(""String_Node_Str"") Call<List<Gift>> getGifts();","@GET(""String_Node_Str"") Call<List<Gift>> getGifts(@Path(""String_Node_Str"") String locationId,@Path(""String_Node_Str"") String startIndex,@Path(""String_Node_Str"") String lastIndex);",0.4502164502164502
174427,"void sendRequest(){
  Call<List<Gift>> call=AppController.service.getGifts();
  call.enqueue(new Callback<List<Gift>>(){
    @Override public void onResponse(    Call<List<Gift>> call,    Response<List<Gift>> response){
      progressView.setVisibility(View.INVISIBLE);
      gifts.addAll(response.body());
      adapter.notifyDataSetChanged();
      mRecyclerView.setVisibility(View.VISIBLE);
      mMessageTextView.setVisibility(View.INVISIBLE);
    }
    @Override public void onFailure(    Call<List<Gift>> call,    Throwable t){
      progressView.setVisibility(View.INVISIBLE);
      mRecyclerView.setVisibility(View.INVISIBLE);
      mMessageTextView.setText(""String_Node_Str"");
    }
  }
);
}","void sendRequest(){
  Call<List<Gift>> call=AppController.service.getGifts(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  call.enqueue(new Callback<List<Gift>>(){
    @Override public void onResponse(    Call<List<Gift>> call,    Response<List<Gift>> response){
      progressView.setVisibility(View.INVISIBLE);
      gifts.addAll(response.body());
      adapter.notifyDataSetChanged();
      mRecyclerView.setVisibility(View.VISIBLE);
      mMessageTextView.setVisibility(View.INVISIBLE);
    }
    @Override public void onFailure(    Call<List<Gift>> call,    Throwable t){
      progressView.setVisibility(View.INVISIBLE);
      mRecyclerView.setVisibility(View.INVISIBLE);
      mMessageTextView.setText(""String_Node_Str"");
    }
  }
);
}",0.9635237439779766
174428,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_register_gift);
  ButterKnife.bind(this);
  context=this;
  retrofitInitialization();
  settingToolbar();
  toolbarNewGiftBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_register_gift);
  ButterKnife.bind(this);
  context=this;
  retrofitInitialization();
  settingToolbar();
  mToolbarSendBtnTv.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}",0.978319783197832
174429,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_detail);
  ButterKnife.bind(this);
  CircleIndicator indicator=(CircleIndicator)findViewById(R.id.indicator);
  indicator.setViewPager(viewPager);
  setupViewPager(viewPager);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_detail);
  ButterKnife.bind(this);
  CircleIndicator indicator=(CircleIndicator)findViewById(R.id.indicator);
  setupViewPager(viewPager);
  indicator.setViewPager(viewPager);
}",0.8814102564102564
174430,"protected void init(String title){
  context=getActivity();
  mainActivity=(AppCompatActivity)getActivity();
  toolbarLayout=(RelativeLayout)((AppCompatActivity)context).findViewById(R.id.toolbar);
  mSecondIV=(ImageView)toolbarLayout.findViewById(R.id.toolbar_second_iv);
  mFirstIV=(ImageView)toolbarLayout.findViewById(R.id.toolbar_first_iv);
  mToolbarTitleTextView=(TextView)toolbarLayout.findViewById(R.id.toolbar_title_textView);
  mToolbarTitleTextView.setText(title);
  setHowToBack();
}","protected void init(){
  context=getActivity();
  mainActivity=(AppCompatActivity)getActivity();
  toolbarLayout=(RelativeLayout)((AppCompatActivity)context).findViewById(R.id.toolbar);
  mSecondIV=(ImageView)toolbarLayout.findViewById(R.id.toolbar_second_iv);
  mFirstIV=(ImageView)toolbarLayout.findViewById(R.id.toolbar_first_iv);
  mToolbarTitleTextView=(TextView)toolbarLayout.findViewById(R.id.toolbar_title_textView);
  setHowToBack();
}",0.1127659574468085
174431,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_information,container,false);
  ButterKnife.bind(this,rootView);
  init(""String_Node_Str"");
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  View rootView=inflater.inflate(R.layout.fragment_information,container,false);
  ButterKnife.bind(this,rootView);
  return rootView;
}",0.9541595925297114
174432,"public static void main(String[] args) throws Exception {
  Properties properties=Tools.loadProperties();
  final String consumerId=properties.getProperty(""String_Node_Str"");
  final String topic=properties.getProperty(""String_Node_Str"");
  String accessKey=properties.getProperty(""String_Node_Str"");
  String secretKey=properties.getProperty(""String_Node_Str"");
  Properties initProperties=new Properties();
  initProperties.put(PropertyKeyConst.ConsumerId,consumerId);
  initProperties.put(PropertyKeyConst.AccessKey,accessKey);
  initProperties.put(PropertyKeyConst.SecretKey,secretKey);
  Consumer consumer=ONSFactory.createConsumer(properties);
  consumer.subscribe(topic,""String_Node_Str"",new MessageListener(){
    public Action consume(    Message message,    ConsumeContext consumeContext){
      System.out.println(""String_Node_Str"" + message);
      return Action.CommitMessage;
    }
  }
);
  consumer.start();
  Thread.sleep(Integer.MAX_VALUE);
  consumer.shutdown();
  System.exit(0);
}","public static void main(String[] args) throws Exception {
  Properties properties=Tools.loadProperties();
  final String consumerId=properties.getProperty(""String_Node_Str"");
  final String topic=properties.getProperty(""String_Node_Str"");
  String accessKey=properties.getProperty(""String_Node_Str"");
  String secretKey=properties.getProperty(""String_Node_Str"");
  Properties initProperties=new Properties();
  initProperties.put(PropertyKeyConst.ConsumerId,consumerId);
  initProperties.put(PropertyKeyConst.AccessKey,accessKey);
  initProperties.put(PropertyKeyConst.SecretKey,secretKey);
  Consumer consumer=ONSFactory.createConsumer(initProperties);
  consumer.subscribe(topic,""String_Node_Str"",new MessageListener(){
    public Action consume(    Message message,    ConsumeContext consumeContext){
      System.out.println(""String_Node_Str"" + message);
      return Action.CommitMessage;
    }
  }
);
  consumer.start();
  Thread.sleep(Integer.MAX_VALUE);
  consumer.shutdown();
  System.exit(0);
}",0.997005988023952
174433,"public static void main(String[] args) throws Exception {
  Properties properties=Tools.loadProperties();
  final String groupId=properties.getProperty(""String_Node_Str"");
  final String producerId=properties.getProperty(""String_Node_Str"");
  final String topic=properties.getProperty(""String_Node_Str"");
  final int qosLevel=Integer.parseInt(properties.getProperty(""String_Node_Str""));
  final Boolean cleanSession=Boolean.parseBoolean(properties.getProperty(""String_Node_Str""));
  String targetClientId=groupId + ""String_Node_Str"";
  String accessKey=properties.getProperty(""String_Node_Str"");
  String secretKey=properties.getProperty(""String_Node_Str"");
  Properties initProperties=new Properties();
  initProperties.put(PropertyKeyConst.ProducerId,producerId);
  initProperties.put(PropertyKeyConst.AccessKey,accessKey);
  initProperties.put(PropertyKeyConst.SecretKey,secretKey);
  Producer producer=ONSFactory.createProducer(properties);
  producer.start();
  final Message msg=new Message(topic,""String_Node_Str"",""String_Node_Str"".getBytes());
  msg.putUserProperties(""String_Node_Str"",""String_Node_Str"" + qosLevel);
  msg.putUserProperties(""String_Node_Str"",String.valueOf(qosLevel));
  msg.putUserProperties(""String_Node_Str"",String.valueOf(cleanSession));
  SendResult result=producer.send(msg);
  System.out.println(result);
  final Message msg2=new Message(topic,""String_Node_Str"",""String_Node_Str"".getBytes());
  msg2.putUserProperties(""String_Node_Str"",""String_Node_Str"" + targetClientId);
  SendResult sendResult=producer.send(msg2);
  System.out.println(sendResult);
  producer.shutdown();
  System.exit(0);
}","public static void main(String[] args) throws Exception {
  Properties properties=Tools.loadProperties();
  final String groupId=properties.getProperty(""String_Node_Str"");
  final String producerId=properties.getProperty(""String_Node_Str"");
  final String topic=properties.getProperty(""String_Node_Str"");
  final int qosLevel=Integer.parseInt(properties.getProperty(""String_Node_Str""));
  final Boolean cleanSession=Boolean.parseBoolean(properties.getProperty(""String_Node_Str""));
  String targetClientId=groupId + ""String_Node_Str"";
  String accessKey=properties.getProperty(""String_Node_Str"");
  String secretKey=properties.getProperty(""String_Node_Str"");
  Properties initProperties=new Properties();
  initProperties.put(PropertyKeyConst.ProducerId,producerId);
  initProperties.put(PropertyKeyConst.AccessKey,accessKey);
  initProperties.put(PropertyKeyConst.SecretKey,secretKey);
  Producer producer=ONSFactory.createProducer(initProperties);
  producer.start();
  final Message msg=new Message(topic,""String_Node_Str"",""String_Node_Str"".getBytes());
  msg.putUserProperties(""String_Node_Str"",""String_Node_Str"" + qosLevel);
  msg.putUserProperties(""String_Node_Str"",String.valueOf(qosLevel));
  msg.putUserProperties(""String_Node_Str"",String.valueOf(cleanSession));
  SendResult result=producer.send(msg);
  System.out.println(result);
  final Message msg2=new Message(topic,""String_Node_Str"",""String_Node_Str"".getBytes());
  msg2.putUserProperties(""String_Node_Str"",""String_Node_Str"" + targetClientId);
  SendResult sendResult=producer.send(msg2);
  System.out.println(sendResult);
  producer.shutdown();
  System.exit(0);
}",0.9981572481572482
174434,"private Task fromPlan(EntityManager em,CreateTaskArg createArg,RouterObjectRef objectId) throws NotFoundException, CommsRouterException {
  Router router=getRouter(em,objectId);
  Task task=new Task(objectId);
  task.setRouter(router);
  task.setRequirements(app.entityMapper.attributes.fromDto(createArg.getRequirements()));
  if (createArg.getPlanRef() != null) {
    Plan plan=app.db.plan.get(em,RouterObjectRef.builder().setRef(createArg.getPlanRef()).setRouterRef(objectId.getRouterRef()).build());
    Route matchedRoute=null;
    List<Rule> rules=plan.getRules();
    for (    Rule rule : rules) {
      CommsRouterEvaluator evaluator=app.evaluatorFactory.provide(rule.getPredicate());
      evaluator.changeExpression(rule.getPredicate());
      matchedRoute=getMatchedRoute(task.getRef(),task.getRequirements(),rule,evaluator);
      if (matchedRoute != null) {
        task.setRule(rule);
        break;
      }
    }
    if (matchedRoute == null) {
      matchedRoute=plan.getDefaultRoute();
    }
    if (matchedRoute == null) {
      throw new NotFoundException(""String_Node_Str"" + createArg);
    }
    if (matchedRoute.getQueue() == null) {
      throw new NotFoundException(""String_Node_Str"");
    }
    task.setQueue(matchedRoute.getQueue());
    task.setPriority(matchedRoute.getPriority());
    task.setQueuedTimeout(matchedRoute.getTimeout());
    if (task.getQueuedTimeout() > 0) {
      task.setExpirationDate(new Date(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(task.getQueuedTimeout())));
    }
    task.setCurrentRoute(matchedRoute);
  }
 else {
    Queue queue=app.db.queue.get(em,RouterObjectRef.builder().setRef(createArg.getQueueRef()).setRouterRef(objectId.getRouterRef()).build());
    task.setQueue(queue);
  }
  return task;
}","private Task fromPlan(EntityManager em,CreateTaskArg createArg,RouterObjectRef objectId) throws NotFoundException, CommsRouterException {
  Router router=getRouter(em,objectId);
  Task task=new Task(objectId);
  task.setRouter(router);
  task.setRequirements(app.entityMapper.attributes.fromDto(createArg.getRequirements()));
  if (createArg.getPlanRef() != null) {
    Plan plan=app.db.plan.get(em,RouterObjectRef.builder().setRef(createArg.getPlanRef()).setRouterRef(objectId.getRouterRef()).build());
    Route matchedRoute=null;
    List<Rule> rules=plan.getRules();
    for (    Rule rule : rules) {
      CommsRouterEvaluator evaluator=app.evaluatorFactory.provide(rule.getPredicate());
      matchedRoute=getMatchedRoute(task.getRef(),task.getRequirements(),rule,evaluator);
      if (matchedRoute != null) {
        task.setRule(rule);
        break;
      }
    }
    if (matchedRoute == null) {
      matchedRoute=plan.getDefaultRoute();
    }
    if (matchedRoute == null) {
      throw new NotFoundException(""String_Node_Str"" + createArg);
    }
    if (matchedRoute.getQueue() == null) {
      throw new NotFoundException(""String_Node_Str"");
    }
    task.setQueue(matchedRoute.getQueue());
    task.setPriority(matchedRoute.getPriority());
    task.setQueuedTimeout(matchedRoute.getTimeout());
    if (task.getQueuedTimeout() > 0) {
      task.setExpirationDate(new Date(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(task.getQueuedTimeout())));
    }
    task.setCurrentRoute(matchedRoute);
  }
 else {
    Queue queue=app.db.queue.get(em,RouterObjectRef.builder().setRef(createArg.getQueueRef()).setRouterRef(objectId.getRouterRef()).build());
    task.setQueue(queue);
  }
  return task;
}",0.9842180774748924
174435,"private Task fromPlan(EntityManager em,CreateTaskArg createArg,RouterObjectRef objectId) throws NotFoundException, CommsRouterException {
  Router router=getRouter(em,objectId);
  Task task=new Task(objectId);
  task.setRouter(router);
  task.setRequirements(app.entityMapper.attributes.fromDto(createArg.getRequirements()));
  if (createArg.getPlanRef() != null) {
    Plan plan=app.db.plan.get(em,RouterObjectRef.builder().setRef(createArg.getPlanRef()).setRouterRef(objectId.getRouterRef()).build());
    Route matchedRoute=null;
    List<Rule> rules=plan.getRules();
    for (    Rule rule : rules) {
      CommsRouterEvaluator evaluator=app.evaluatorFactory.provide(rule.getPredicate());
      matchedRoute=getMatchedRoute(task.getRef(),task.getRequirements(),rule,evaluator);
      if (matchedRoute != null) {
        task.setRule(rule);
        break;
      }
    }
    if (matchedRoute == null) {
      matchedRoute=plan.getDefaultRoute();
    }
    if (matchedRoute == null) {
      throw new NotFoundException(""String_Node_Str"" + createArg);
    }
    if (matchedRoute.getQueue() == null) {
      throw new NotFoundException(""String_Node_Str"");
    }
    task.setQueue(matchedRoute.getQueue());
    task.setPriority(matchedRoute.getPriority());
    task.setQueuedTimeout(matchedRoute.getTimeout());
    if (task.getQueuedTimeout() > 0) {
      task.setExpirationDate(new Date(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(task.getQueuedTimeout())));
    }
    task.setCurrentRoute(matchedRoute);
  }
 else {
    Queue queue=app.db.queue.get(em,RouterObjectRef.builder().setRef(createArg.getQueueRef()).setRouterRef(objectId.getRouterRef()).build());
    task.setQueue(queue);
  }
  return task;
}","private Task fromPlan(EntityManager em,CreateTaskArg createArg,RouterObjectRef objectId) throws NotFoundException, CommsRouterException {
  Router router=getRouter(em,objectId);
  Task task=new Task(objectId);
  task.setRouter(router);
  task.setRequirements(app.entityMapper.attributes.fromDto(createArg.getRequirements()));
  if (createArg.getPlanRef() != null) {
    Plan plan=app.db.plan.get(em,RouterObjectRef.builder().setRef(createArg.getPlanRef()).setRouterRef(objectId.getRouterRef()).build());
    Route matchedRoute=null;
    CommsRouterEvaluator evaluator=app.evaluatorFactory.provide(null);
    List<Rule> rules=plan.getRules();
    for (    Rule rule : rules) {
      evaluator=evaluator.changeExpression(rule.getPredicate());
      matchedRoute=getMatchedRoute(task.getRef(),task.getRequirements(),rule,evaluator);
      if (matchedRoute != null) {
        task.setRule(rule);
        break;
      }
    }
    if (matchedRoute == null) {
      matchedRoute=plan.getDefaultRoute();
    }
    if (matchedRoute == null) {
      throw new NotFoundException(""String_Node_Str"" + createArg);
    }
    if (matchedRoute.getQueue() == null) {
      throw new NotFoundException(""String_Node_Str"");
    }
    task.setQueue(matchedRoute.getQueue());
    task.setPriority(matchedRoute.getPriority());
    task.setQueuedTimeout(matchedRoute.getTimeout());
    if (task.getQueuedTimeout() > 0) {
      task.setExpirationDate(new Date(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(task.getQueuedTimeout())));
    }
    task.setCurrentRoute(matchedRoute);
  }
 else {
    Queue queue=app.db.queue.get(em,RouterObjectRef.builder().setRef(createArg.getQueueRef()).setRouterRef(objectId.getRouterRef()).build());
    task.setQueue(queue);
  }
  return task;
}",0.9436457734330076
174436,"private ExpressionType determineType(String expression){
  if (expression == null) {
    return ExpressionType.FALSE;
  }
  expression=expression.trim().toLowerCase();
  if (expression.isEmpty() || expression.equals(""String_Node_Str"")) {
    return ExpressionType.FALSE;
  }
 else   if (expression.equals(""String_Node_Str"")) {
    return ExpressionType.TRUE;
  }
 else   if (expression.contains(""String_Node_Str"") || expression.contains(""String_Node_Str"") || expression.contains(""String_Node_Str"")|| expression.contains(""String_Node_Str"")|| expression.equals(""String_Node_Str"")) {
    return ExpressionType.JEVAL;
  }
 else {
    return ExpressionType.RSQL;
  }
}","private ExpressionType determineType(String expression){
  if (expression == null) {
    return ExpressionType.FALSE;
  }
  expression=expression.trim().toLowerCase();
  if (expression.isEmpty() || expression.equals(""String_Node_Str"")) {
    return ExpressionType.FALSE;
  }
 else   if (expression.equals(""String_Node_Str"")) {
    return ExpressionType.TRUE;
  }
 else   if (expression.contains(""String_Node_Str"") || expression.contains(""String_Node_Str"") || expression.contains(""String_Node_Str"")|| (expression.contains(""String_Node_Str"") && !expression.contains(""String_Node_Str""))|| expression.equals(""String_Node_Str"")) {
    return ExpressionType.JEVAL;
  }
 else {
    return ExpressionType.RSQL;
  }
}",0.9671772428884028
174437,"private Task fromPlan(EntityManager em,CreateTaskArg createArg,RouterObjectRef objectId) throws NotFoundException, CommsRouterException {
  Router router=getRouter(em,objectId);
  Task task=new Task(objectId);
  task.setRouter(router);
  task.setRequirements(app.entityMapper.attributes.fromDto(createArg.getRequirements()));
  if (createArg.getPlanRef() != null) {
    Plan plan=app.db.plan.get(em,RouterObjectRef.builder().setRef(createArg.getPlanRef()).setRouterRef(objectId.getRouterRef()).build());
    Route matchedRoute=null;
    CommsRouterEvaluator evaluator=app.evaluatorFactory.provide(null);
    List<Rule> rules=plan.getRules();
    for (    Rule rule : rules) {
      evaluator.changeExpression(rule.getPredicate());
      matchedRoute=getMatchedRoute(task.getRef(),task.getRequirements(),rule,evaluator);
      if (matchedRoute != null) {
        task.setRule(rule);
        break;
      }
    }
    if (matchedRoute == null) {
      matchedRoute=plan.getDefaultRoute();
    }
    if (matchedRoute == null) {
      throw new NotFoundException(""String_Node_Str"" + createArg);
    }
    if (matchedRoute.getQueue() == null) {
      throw new NotFoundException(""String_Node_Str"");
    }
    task.setQueue(matchedRoute.getQueue());
    task.setPriority(matchedRoute.getPriority());
    task.setQueuedTimeout(matchedRoute.getTimeout());
    if (task.getQueuedTimeout() > 0) {
      task.setExpirationDate(new Date(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(task.getQueuedTimeout())));
    }
    task.setCurrentRoute(matchedRoute);
  }
 else {
    Queue queue=app.db.queue.get(em,RouterObjectRef.builder().setRef(createArg.getQueueRef()).setRouterRef(objectId.getRouterRef()).build());
    task.setQueue(queue);
  }
  return task;
}","private Task fromPlan(EntityManager em,CreateTaskArg createArg,RouterObjectRef objectId) throws NotFoundException, CommsRouterException {
  Router router=getRouter(em,objectId);
  Task task=new Task(objectId);
  task.setRouter(router);
  task.setRequirements(app.entityMapper.attributes.fromDto(createArg.getRequirements()));
  if (createArg.getPlanRef() != null) {
    Plan plan=app.db.plan.get(em,RouterObjectRef.builder().setRef(createArg.getPlanRef()).setRouterRef(objectId.getRouterRef()).build());
    Route matchedRoute=null;
    List<Rule> rules=plan.getRules();
    for (    Rule rule : rules) {
      CommsRouterEvaluator evaluator=app.evaluatorFactory.provide(rule.getPredicate());
      evaluator.changeExpression(rule.getPredicate());
      matchedRoute=getMatchedRoute(task.getRef(),task.getRequirements(),rule,evaluator);
      if (matchedRoute != null) {
        task.setRule(rule);
        break;
      }
    }
    if (matchedRoute == null) {
      matchedRoute=plan.getDefaultRoute();
    }
    if (matchedRoute == null) {
      throw new NotFoundException(""String_Node_Str"" + createArg);
    }
    if (matchedRoute.getQueue() == null) {
      throw new NotFoundException(""String_Node_Str"");
    }
    task.setQueue(matchedRoute.getQueue());
    task.setPriority(matchedRoute.getPriority());
    task.setQueuedTimeout(matchedRoute.getTimeout());
    if (task.getQueuedTimeout() > 0) {
      task.setExpirationDate(new Date(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(task.getQueuedTimeout())));
    }
    task.setCurrentRoute(matchedRoute);
  }
 else {
    Queue queue=app.db.queue.get(em,RouterObjectRef.builder().setRef(createArg.getQueueRef()).setRouterRef(objectId.getRouterRef()).build());
    task.setQueue(queue);
  }
  return task;
}",0.9508941243258586
174438,"private void handleCustomerCompletedCallEvent(NexmoCallEvent callEvent){
  String tag=callEvent.getUuid();
  if (null != tag) {
    TaskDto task=getTaskByTag(tag);
    if (null != task) {
      if (task.getState() == TaskState.waiting) {
        updateTaskServiceState(task.getRef(),TaskState.canceled);
      }
      if (null != task.getUserContext()) {
        AttributeValueDto uuidDto=task.getUserContext().get(""String_Node_Str"");
        if (null != uuidDto) {
          String uuid=getStringFromAttributeValueDto(uuidDto);
          if (null != uuid) {
            hangupCall(uuid);
          }
 else {
            LOGGER.error(""String_Node_Str"");
          }
        }
 else {
          LOGGER.warn(""String_Node_Str"");
        }
      }
    }
 else {
      LOGGER.warn(""String_Node_Str"");
    }
  }
}","private void handleCustomerCompletedCallEvent(NexmoCallEvent callEvent){
  String tag=callEvent.getUuid();
  if (null != tag) {
    TaskDto task=getTaskByTag(tag);
    if (null != task) {
      boolean goodCallbackTask=false;
      AttributeGroupDto userContext=task.getUserContext();
      if (null != userContext) {
        AttributeValueDto kindDto=userContext.get(""String_Node_Str"");
        AttributeValueDto stateDto=userContext.get(""String_Node_Str"");
        if (null != kindDto && null != stateDto) {
          String kind=getStringFromAttributeValueDto(kindDto);
          String state=getStringFromAttributeValueDto(stateDto);
          if (kind.equalsIgnoreCase(""String_Node_Str"") && state.equalsIgnoreCase(""String_Node_Str"")) {
            goodCallbackTask=true;
          }
        }
      }
      if (!goodCallbackTask && task.getState() == TaskState.waiting) {
        updateTaskServiceState(task.getRef(),TaskState.canceled);
      }
      if (null != task.getUserContext()) {
        AttributeValueDto uuidDto=task.getUserContext().get(""String_Node_Str"");
        if (null != uuidDto) {
          String uuid=getStringFromAttributeValueDto(uuidDto);
          if (null != uuid) {
            hangupCall(uuid);
          }
 else {
            LOGGER.error(""String_Node_Str"");
          }
        }
 else {
          LOGGER.warn(""String_Node_Str"");
        }
      }
    }
 else {
      LOGGER.warn(""String_Node_Str"");
    }
  }
}",0.7137150466045273
174439,"/** 
 * .
 * @param uuid UUID
 * @return JSON
 */
@GET @Path(""String_Node_Str"") public String getNccoResponse(@PathParam(""String_Node_Str"") final String conversationId,@QueryParam(""String_Node_Str"") String uuid){
  LOGGER.debug(""String_Node_Str"",conversationId);
  NexMoCall call=conversationService.getInboundCallWithConversationId(uuid);
  NexMoConversation conversation=conversationService.getConversation(conversationId);
  if (null == conversation || null == call) {
    TalkNcco talkNcco=new TalkNcco(""String_Node_Str"");
    talkNcco.setLoop(1);
    NccoResponseBuilder builder=new NccoResponseBuilder();
    builder.appendNcco(talkNcco);
    NccoResponse nccoResponse=builder.getValue();
    LOGGER.debug(""String_Node_Str"",nccoResponse.toJson());
    return nccoResponse.toJson();
  }
  UpdateNexMoConversationArg updateArg=new UpdateNexMoConversationArg(NexMoConversationStatus.CONNECTED);
  conversationService.updateConversation(conversationId,updateArg);
  TalkNcco talkNcco=new TalkNcco(""String_Node_Str"");
  talkNcco.setLoop(1);
  ConversationNccoEx convNcco=new ConversationNccoEx(conversationId);
  NccoResponseBuilder builder=new NccoResponseBuilder();
  builder.appendNcco(talkNcco);
  builder.appendNcco(convNcco);
  NccoResponse nccoResponse=builder.getValue();
  LOGGER.debug(""String_Node_Str"",nccoResponse.toJson());
  return nccoResponse.toJson();
}","/** 
 * .
 * @param uuid UUID
 * @return JSON
 */
@GET @Path(""String_Node_Str"") public String getNccoResponse(@PathParam(""String_Node_Str"") final String conversationId,@QueryParam(""String_Node_Str"") String uuid){
  LOGGER.debug(""String_Node_Str"",conversationId);
  boolean customerIsWaiting=false;
  NexMoConversation conversation=conversationService.getConversation(conversationId);
  if (null != conversation) {
    NexMoCall caller=conversation.getCaller();
    if (null != caller && caller.getUuid() != null) {
      NexMoCall call=conversationService.getCallWithUuid(caller.getUuid());
      if (null != call) {
        customerIsWaiting=true;
      }
    }
  }
  if (!customerIsWaiting) {
    TalkNcco talkNcco=new TalkNcco(""String_Node_Str"");
    talkNcco.setLoop(1);
    NccoResponseBuilder builder=new NccoResponseBuilder();
    builder.appendNcco(talkNcco);
    NccoResponse nccoResponse=builder.getValue();
    LOGGER.debug(""String_Node_Str"",nccoResponse.toJson());
    return nccoResponse.toJson();
  }
  UpdateNexMoConversationArg updateArg=new UpdateNexMoConversationArg(NexMoConversationStatus.CONNECTED);
  conversationService.updateConversation(conversationId,updateArg);
  TalkNcco talkNcco=new TalkNcco(""String_Node_Str"");
  talkNcco.setLoop(1);
  ConversationNccoEx convNcco=new ConversationNccoEx(conversationId);
  NccoResponseBuilder builder=new NccoResponseBuilder();
  builder.appendNcco(talkNcco);
  builder.appendNcco(convNcco);
  NccoResponse nccoResponse=builder.getValue();
  LOGGER.debug(""String_Node_Str"",nccoResponse.toJson());
  return nccoResponse.toJson();
}",0.8067453625632378
174440,"@POST @Path(""String_Node_Str"") public void taskAnswer(@PathParam(""String_Node_Str"") String taskId,@QueryParam(""String_Node_Str"") final String conversationId,AgentDto agent){
  LOGGER.debug(""String_Node_Str"",taskId);
  LOGGER.debug(""String_Node_Str"",agent);
  boolean wouldConnectAgent=true;
  NexMoConversation conversation=null;
  do {
    conversation=conversationService.getConversation(conversationId);
    if (null == conversation) {
      LOGGER.error(""String_Node_Str"",conversationId);
      wouldConnectAgent=false;
      break;
    }
    Endpoint epAgent=NexMoModelFactory.createEndpoint(agent.getAddress());
    Endpoint epFrom=NexMoModelFactory.createEndpoint(configuration.getAssociatedPhone().toLog());
    String answerUrl=configuration.getCallbackBaseUrl() + ""String_Node_Str"" + conversation.getId();
    Call callRequest=new Call(epAgent,epFrom,answerUrl);
    try {
      CallEvent callEvent=nexMoService.getVoiceClient().createCall(callRequest);
      NexMoCall callee=new NexMoCall(callEvent.getUuid(),callEvent.getConversationUuid());
      callee.setDirection(callEvent.getDirection());
      callee.setStatus(callEvent.getStatus());
      UpdateNexMoConversationArg updateArg=new UpdateNexMoConversationArg(NexMoConversationStatus.CONNECTING);
      updateArg.setAgent(callee);
      conversationService.updateConversation(conversationId,updateArg);
    }
 catch (    IOException|NexmoClientException e) {
      LOGGER.error(""String_Node_Str"",e.getLocalizedMessage());
      wouldConnectAgent=false;
      e.printStackTrace();
    }
catch (    Exception ex) {
      LOGGER.error(""String_Node_Str"",ex.getLocalizedMessage());
      wouldConnectAgent=false;
      ex.printStackTrace();
    }
  }
 while (false);
  if (!wouldConnectAgent) {
    if (conversation != null) {
      UpdateNexMoConversationArg updateArg=new UpdateNexMoConversationArg(NexMoConversationStatus.STARTED);
      conversationService.updateConversation(conversation.getId(),updateArg);
    }
    UpdateTaskArg updateArg=new UpdateTaskArg();
    updateArg.setState(TaskState.completed);
    try {
      taskServiceClient.update(updateArg);
    }
 catch (    BadValueException|NotFoundException e1) {
      LOGGER.error(""String_Node_Str"",e1.getLocalizedMessage());
      e1.printStackTrace();
    }
catch (    Exception e2) {
      LOGGER.error(""String_Node_Str"",e2.getLocalizedMessage());
      e2.printStackTrace();
    }
  }
}","@POST @Path(""String_Node_Str"") public void taskAnswer(@PathParam(""String_Node_Str"") String taskId,@QueryParam(""String_Node_Str"") final String conversationId,AgentDto agent){
  LOGGER.debug(""String_Node_Str"",taskId);
  LOGGER.debug(""String_Node_Str"",agent);
  boolean wouldConnectAgent=true;
  NexMoConversation conversation=null;
  do {
    conversation=conversationService.getConversation(conversationId);
    if (null == conversation) {
      LOGGER.error(""String_Node_Str"",conversationId);
      wouldConnectAgent=false;
      break;
    }
    Endpoint epAgent=NexMoModelFactory.createEndpoint(agent.getAddress());
    Endpoint epFrom=NexMoModelFactory.createEndpoint(configuration.getAssociatedPhone().toLog());
    String answerUrl=configuration.getCallbackBaseUrl() + ""String_Node_Str"" + conversation.getId();
    Call callRequest=new Call(epAgent,epFrom,answerUrl);
    try {
      CallEvent callEvent=nexMoService.getVoiceClient().createCall(callRequest);
      NexMoCall callee=new NexMoCall(callEvent.getUuid(),callEvent.getConversationUuid());
      callee.setDirection(callEvent.getDirection());
      callee.setStatus(callEvent.getStatus());
      UpdateNexMoConversationArg updateArg=new UpdateNexMoConversationArg(NexMoConversationStatus.CONNECTING);
      updateArg.setAgent(callee);
      conversationService.updateConversation(conversationId,updateArg);
    }
 catch (    IOException|NexmoClientException e) {
      LOGGER.error(""String_Node_Str"",e.getLocalizedMessage());
      wouldConnectAgent=false;
      e.printStackTrace();
    }
catch (    Exception ex) {
      LOGGER.error(""String_Node_Str"",ex.getLocalizedMessage());
      wouldConnectAgent=false;
      ex.printStackTrace();
    }
  }
 while (false);
  if (!wouldConnectAgent) {
    if (conversation != null) {
      UpdateNexMoConversationArg updateArg=new UpdateNexMoConversationArg(NexMoConversationStatus.STARTED);
      conversationService.updateConversation(conversation.getId(),updateArg);
    }
    UpdateTaskArg updateArg=new UpdateTaskArg();
    updateArg.setState(TaskState.completed);
    try {
      RouterObjectId taskObjectId=new RouterObjectId(taskId,configuration.getCommsRouterId());
      taskServiceClient.update(updateArg,taskObjectId);
    }
 catch (    BadValueException|NotFoundException e1) {
      LOGGER.error(""String_Node_Str"",e1.getLocalizedMessage());
      e1.printStackTrace();
    }
catch (    Exception e2) {
      LOGGER.error(""String_Node_Str"",e2.getLocalizedMessage());
      e2.printStackTrace();
    }
  }
}",0.9660194174757282
174441,"/** 
 * .
 * @param from query parameter from
 * @param to query parameter to
 * @param uuid query parameter uuid
 * @return JSON formatted response
 */
@GET public String getAnswerNccoResponce(@QueryParam(""String_Node_Str"") String from,@QueryParam(""String_Node_Str"") String to,@QueryParam(""String_Node_Str"") String uuid) throws NotFoundException, MalformedURLException {
  LOGGER.debug(""String_Node_Str"",uuid);
  NexMoCall call=conversationService.getInboundCallWithConversationId(uuid);
  if (null == call) {
    NexMoCall newObj=new NexMoCall(uuid,uuid);
    newObj.setStatus(CallStatus.STARTED);
    newObj.setDirection(CallDirection.INBOUND);
    LOGGER.debug(""String_Node_Str"",newObj.getUuid());
    conversationService.updateCall(newObj);
    call=newObj.clone();
  }
  String conversationId=""String_Node_Str"" + UUID.randomUUID().toString();
  String taskId=UUID.randomUUID().toString();
  CreateTaskArg taskReq=new CreateTaskArg();
  taskReq.setId(taskId);
  taskReq.setRouterId(configuration.getCommsRouterId());
  URI uri=UriBuilder.fromPath(configuration.getCallbackBaseUrl()).path(""String_Node_Str"").path(taskId).queryParam(""String_Node_Str"",conversationId).build();
  taskReq.setCallbackUrl(uri.toURL());
  taskReq.setQueueId(queueId);
  AttributeGroupDto requirements=new AttributeGroupDto();
  requirements.put(""String_Node_Str"",new StringAttributeValueDto(""String_Node_Str""));
  requirements.put(""String_Node_Str"",new StringAttributeValueDto(""String_Node_Str""));
  requirements.put(""String_Node_Str"",new LongAttributeValueDto(20));
  taskReq.setRequirements(requirements);
  TaskDto task=null;
  try {
    task=taskServiceClient.create(taskReq);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  Exception ex) {
    ex.printStackTrace();
  }
  if (null == task) {
    TalkNcco talkNccoErr=new TalkNcco(""String_Node_Str"");
    talkNccoErr.setLoop(1);
    NccoResponseBuilder builder=new NccoResponseBuilder();
    builder.appendNcco(talkNccoErr);
    NccoResponse nccoResponse=builder.getValue();
    return nccoResponse.toJson();
  }
  conversationService.createConversation(conversationId,call,taskId);
  UpdateNexMoConversationArg updateArg=new UpdateNexMoConversationArg(NexMoConversationStatus.WAITING);
  conversationService.updateConversation(conversationId,updateArg);
  TalkNcco talkNcco=new TalkNcco(""String_Node_Str"");
  talkNcco.setLoop(1);
  ConversationNccoEx convNcco=new ConversationNccoEx(conversationId);
  convNcco.setMusicOnHoldUrl(configuration.getMusicOnHoldUrl());
  convNcco.setStartOnEnter(false);
  convNcco.setRecord(false);
  NccoResponseBuilder builder=new NccoResponseBuilder();
  builder.appendNcco(talkNcco);
  builder.appendNcco(convNcco);
  NccoResponse nccoResponse=builder.getValue();
  return nccoResponse.toJson();
}","/** 
 * .
 * @param from query parameter from
 * @param to query parameter to
 * @param uuid query parameter uuid
 * @return JSON formatted response
 */
@GET public String getAnswerNccoResponce(@QueryParam(""String_Node_Str"") String from,@QueryParam(""String_Node_Str"") String to,@QueryParam(""String_Node_Str"") String uuid) throws NotFoundException, MalformedURLException {
  LOGGER.debug(""String_Node_Str"",uuid);
  NexMoCall call=conversationService.getInboundCallWithConversationId(uuid);
  if (null == call) {
    NexMoCall newObj=new NexMoCall(uuid,uuid);
    newObj.setStatus(CallStatus.STARTED);
    newObj.setDirection(CallDirection.INBOUND);
    LOGGER.debug(""String_Node_Str"",newObj.getUuid());
    conversationService.updateCall(newObj);
    call=newObj.clone();
  }
  String conversationId=""String_Node_Str"" + UUID.randomUUID().toString();
  CreateTaskArg taskReq=new CreateTaskArg();
  RouterObjectId taskId=new RouterObjectId(UUID.randomUUID().toString(),configuration.getCommsRouterId());
  URI uri=UriBuilder.fromPath(configuration.getCallbackBaseUrl()).path(""String_Node_Str"").path(taskId.getId()).queryParam(""String_Node_Str"",conversationId).build();
  taskReq.setCallbackUrl(uri.toURL());
  taskReq.setQueueId(queueId);
  AttributeGroupDto requirements=new AttributeGroupDto();
  requirements.put(""String_Node_Str"",new StringAttributeValueDto(""String_Node_Str""));
  requirements.put(""String_Node_Str"",new StringAttributeValueDto(""String_Node_Str""));
  requirements.put(""String_Node_Str"",new LongAttributeValueDto(20));
  taskReq.setRequirements(requirements);
  TaskDto task=null;
  try {
    task=taskServiceClient.put(taskReq,taskId);
  }
 catch (  NotFoundException e) {
    e.printStackTrace();
  }
catch (  Exception ex) {
    ex.printStackTrace();
  }
  if (null == task) {
    TalkNcco talkNccoErr=new TalkNcco(""String_Node_Str"");
    talkNccoErr.setLoop(1);
    NccoResponseBuilder builder=new NccoResponseBuilder();
    builder.appendNcco(talkNccoErr);
    NccoResponse nccoResponse=builder.getValue();
    return nccoResponse.toJson();
  }
  conversationService.createConversation(conversationId,call,taskId.getId());
  UpdateNexMoConversationArg updateArg=new UpdateNexMoConversationArg(NexMoConversationStatus.WAITING);
  conversationService.updateConversation(conversationId,updateArg);
  TalkNcco talkNcco=new TalkNcco(""String_Node_Str"");
  talkNcco.setLoop(1);
  ConversationNccoEx convNcco=new ConversationNccoEx(conversationId);
  convNcco.setMusicOnHoldUrl(configuration.getMusicOnHoldUrl());
  convNcco.setStartOnEnter(false);
  convNcco.setRecord(false);
  NccoResponseBuilder builder=new NccoResponseBuilder();
  builder.appendNcco(talkNcco);
  builder.appendNcco(convNcco);
  NccoResponse nccoResponse=builder.getValue();
  return nccoResponse.toJson();
}",0.9604438875962056
174442,"private void updateTaskServiceState(String taskId,TaskState state){
  UpdateTaskArg updTaskReq=new UpdateTaskArg();
  updTaskReq.setId(taskId);
  updTaskReq.setState(state);
  try {
    LOGGER.trace(""String_Node_Str"",taskId);
    taskServiceClient.update(updTaskReq);
  }
 catch (  BadValueException|NotFoundException e) {
    LOGGER.error(""String_Node_Str"",e.getLocalizedMessage());
    e.printStackTrace();
  }
catch (  Exception ex) {
    LOGGER.error(""String_Node_Str"",ex.getLocalizedMessage());
    ex.printStackTrace();
  }
}","private void updateTaskServiceState(String taskId,TaskState state){
  UpdateTaskArg updTaskReq=new UpdateTaskArg();
  updTaskReq.setState(state);
  try {
    LOGGER.trace(""String_Node_Str"",taskId);
    taskServiceClient.update(updTaskReq,new RouterObjectId(taskId,configuration.getCommsRouterId()));
  }
 catch (  BadValueException|NotFoundException e) {
    LOGGER.error(""String_Node_Str"",e.getLocalizedMessage());
    e.printStackTrace();
  }
catch (  Exception ex) {
    LOGGER.error(""String_Node_Str"",ex.getLocalizedMessage());
    ex.printStackTrace();
  }
}",0.919561243144424
174443,"@Override public AgentDto create(CreateAgentArg createArg) throws NotFoundException {
  return null;
}","@Override public AgentDto create(CreateAgentArg createArg,RouterObjectId id) throws NotFoundException {
  return null;
}",0.918918918918919
174444,"@Override public void update(UpdateAgentArg updateArg) throws NotFoundException {
}","@Override public void update(UpdateAgentArg updateArg,RouterObjectId id) throws NotFoundException {
}",0.9021739130434784
174445,"@Override public PlanDto get(RouterObject routerObject) throws NotFoundException {
  return getItem(routerObject);
}","@Override public PlanDto get(RouterObject routerObject) throws NotFoundException {
  return getItem(new RouterObjectId(routerObject.getId(),routerObject.getRouterId()));
}",0.8083623693379791
174446,"@Override public PlanDto create(CreatePlanArg createArg){
  createArg.setRouterId(configuration.getCommsRouterId());
  return post(createArg);
}","@Override public PlanDto create(CreatePlanArg createArg){
  createArg.setRouterId(configuration.getCommsRouterId());
  return post(createArg,configuration.getCommsRouterId());
}",0.897196261682243
174447,"@Override public void update(UpdatePlanArg updateArg) throws NotFoundException {
  updateArg.setRouterId(configuration.getCommsRouterId());
  put(updateArg);
}","@Override public void update(UpdatePlanArg updateArg) throws NotFoundException {
  updateArg.setRouterId(configuration.getCommsRouterId());
  put(updateArg,new RouterObjectId(updateArg.getId(),configuration.getCommsRouterId()));
}",0.8174807197943444
174448,"@Override public void delete(RouterObject routerObject){
  routerObject.setRouterId(configuration.getCommsRouterId());
  super.delete(routerObject);
}","@Override public void delete(RouterObject routerObject){
  routerObject.setRouterId(configuration.getCommsRouterId());
  super.delete(new RouterObjectId(routerObject.getId(),routerObject.getRouterId()));
}",0.7774647887323943
174449,"@Override public QueueDto get(RouterObject routerObject) throws NotFoundException {
  return getItem(routerObject);
}","@Override public QueueDto get(RouterObject routerObject) throws NotFoundException {
  return getItem(new RouterObjectId(routerObject.getId(),routerObject.getRouterId()));
}",0.8096885813148789
174450,"@Override public void update(UpdateQueueArg updateArg) throws NotFoundException {
  updateArg.setRouterId(configuration.getCommsRouterId());
  put(updateArg);
}","@Override public void update(UpdateQueueArg updateArg) throws NotFoundException {
  put(updateArg,new RouterObjectId(updateArg.getId(),configuration.getCommsRouterId()));
}",0.8192771084337349
174451,"@Override public void delete(RouterObject routerObject){
  routerObject.setRouterId(configuration.getCommsRouterId());
  super.delete(routerObject);
}","@Override public void delete(RouterObject routerObject){
  routerObject.setRouterId(configuration.getCommsRouterId());
  super.delete(new RouterObjectId(routerObject.getId(),routerObject.getRouterId()));
}",0.7774647887323943
174452,"@Override public RouterDto get(String id) throws NotFoundException {
  return getItem(id);
}","@Override public RouterDto get(String id) throws NotFoundException {
  return getItem(new ApiObjectId(id));
}",0.9154228855721394
174453,"@Override public void update(UpdateRouterArg updateArg) throws NotFoundException {
  put(updateArg);
}","@Override public void update(UpdateRouterArg updateArg,ApiObjectId id) throws NotFoundException {
  post(updateArg,id);
}",0.905829596412556
174454,"@Override public void delete(String id){
  super.delete(id);
}","@Override public void delete(String id){
  super.delete(new ApiObjectId(id));
}",0.8794326241134752
174455,"public static List<Mail> readMails(Mailbox mailbox,MailFolder mailFolder) throws MessagingException {
  List<Mail> mails=new ArrayList<>();
  Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Server());
  props.put(""String_Node_Str"",mailbox.getAccount());
  props.put(""String_Node_Str"",""String_Node_Str"");
  Authenticator auth=new Authenticator(){
    @Override protected PasswordAuthentication getPasswordAuthentication(){
      System.out.println(mailbox.getAccount() + ""String_Node_Str"" + mailbox.getPassword());
      return new PasswordAuthentication(mailbox.getAccount(),mailbox.getPassword());
    }
  }
;
  Session session=Session.getDefaultInstance(props,auth);
  Store store=session.getStore(""String_Node_Str"");
  store.connect(mailbox.getPop3Server(),mailbox.getAccount(),mailbox.getPassword());
  Folder inbox=store.getFolder(""String_Node_Str"");
  inbox.open(Folder.READ_ONLY);
  javax.mail.Message[] messages=inbox.getMessages();
  for (  javax.mail.Message message : messages) {
    try {
      Mail mail=new Mail();
      StringBuffer txtBody=new StringBuffer();
      StringBuffer htmlBody=new StringBuffer();
      List<javax.mail.BodyPart> attachments=new ArrayList();
      mail.setFrom(""String_Node_Str"");
      mail.setTo(""String_Node_Str"");
      mail.setAttachments(new ArrayList<>());
      Arrays.asList(message.getFrom()).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setFrom(mail.getFrom() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setFrom(mail.getFrom() + address.toString() + ""String_Node_Str"");
        }
      }
);
      Arrays.asList(message.getRecipients(javax.mail.Message.RecipientType.TO)).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setTo(mail.getTo() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setTo(mail.getTo() + address.toString() + ""String_Node_Str"");
        }
      }
);
      mail.setContentType(message.getContentType());
      Object content=message.getContent();
      if (content instanceof MimeMultipart) {
        parseBodyParts((MimeMultipart)content,txtBody,htmlBody,attachments);
      }
 else {
        if (content instanceof javax.mail.BodyPart) {
          txtBody.append(getTxtPart((javax.mail.BodyPart)content));
        }
 else {
          txtBody.append(content);
        }
      }
      mail.setTextBody(txtBody.toString());
      mail.setHtmlBody(htmlBody.toString());
      mail.setSubject(message.getSubject());
      mail.setSendDate(message.getSentDate());
      mail.setMailFolder(mailFolder);
      mails.add(mail);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  inbox.close(false);
  store.close();
  return mails;
}","public static List<Mail> readMails(Mailbox mailbox,MailFolder mailFolder) throws MessagingException {
  if (!mailFolder.getFolderType().equals(MailFolder.FolderType.INBOX)) {
    return mailFolder.getMailList();
  }
  List<Mail> mails=new ArrayList<>();
  Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Server());
  props.put(""String_Node_Str"",mailbox.getAccount());
  props.put(""String_Node_Str"",""String_Node_Str"");
  Authenticator auth=new Authenticator(){
    @Override protected PasswordAuthentication getPasswordAuthentication(){
      System.out.println(mailbox.getAccount() + ""String_Node_Str"" + mailbox.getPassword());
      return new PasswordAuthentication(mailbox.getAccount(),mailbox.getPassword());
    }
  }
;
  Session session=Session.getDefaultInstance(props,auth);
  Store store=session.getStore(""String_Node_Str"");
  store.connect(mailbox.getPop3Server(),mailbox.getAccount(),mailbox.getPassword());
  Folder inbox=store.getFolder(""String_Node_Str"");
  inbox.open(Folder.READ_ONLY);
  javax.mail.Message[] messages=inbox.getMessages();
  for (  javax.mail.Message message : messages) {
    try {
      Mail mail=new Mail();
      StringBuffer txtBody=new StringBuffer();
      StringBuffer htmlBody=new StringBuffer();
      List<javax.mail.BodyPart> attachments=new ArrayList();
      mail.setFrom(""String_Node_Str"");
      mail.setTo(""String_Node_Str"");
      mail.setAttachments(new ArrayList<>());
      Arrays.asList(message.getFrom()).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setFrom(mail.getFrom() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setFrom(mail.getFrom() + address.toString() + ""String_Node_Str"");
        }
      }
);
      Arrays.asList(message.getRecipients(javax.mail.Message.RecipientType.TO)).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setTo(mail.getTo() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setTo(mail.getTo() + address.toString() + ""String_Node_Str"");
        }
      }
);
      mail.setContentType(message.getContentType());
      Object content=message.getContent();
      if (content instanceof MimeMultipart) {
        parseBodyParts((MimeMultipart)content,txtBody,htmlBody,attachments);
      }
 else {
        if (content instanceof javax.mail.BodyPart) {
          txtBody.append(getTxtPart((javax.mail.BodyPart)content));
        }
 else {
          txtBody.append(content);
        }
      }
      mail.setTextBody(txtBody.toString());
      mail.setHtmlBody(htmlBody.toString());
      mail.setSubject(message.getSubject());
      mail.setSendDate(message.getSentDate());
      mail.setMailFolder(mailFolder);
      mails.add(mail);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  inbox.close(false);
  store.close();
  return mails;
}",0.9823036324122943
174456,"@DeleteMapping(value=""String_Node_Str"") @Authorization public Response deleteAccounts(@RequestBody List<Integer> boxIds,@CurrentUser User user){
  return new Response<>(mailService.deleteAccounts(boxIds,user) ? 200 : 500);
}","@PostMapping(value=""String_Node_Str"") @Authorization public Response deleteAccounts(@RequestBody List<Integer> boxIds,@CurrentUser User user){
  return new Response<>(mailService.deleteAccounts(boxIds,user) ? 200 : 500);
}",0.9775784753363228
174457,"public static List<Mail> readMails(Mailbox mailbox,MailFolder mailFolder) throws MessagingException {
  List<Mail> mails=new ArrayList<>();
  Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Server());
  props.put(""String_Node_Str"",mailbox.getAccount());
  props.put(""String_Node_Str"",""String_Node_Str"");
  Authenticator auth=new Authenticator(){
    @Override protected PasswordAuthentication getPasswordAuthentication(){
      System.out.println(mailbox.getAccount() + ""String_Node_Str"" + mailbox.getPassword());
      return new PasswordAuthentication(mailbox.getAccount(),mailbox.getPassword());
    }
  }
;
  Session session=Session.getDefaultInstance(props,auth);
  Store store=session.getStore(""String_Node_Str"");
  store.connect(mailbox.getPop3Server(),mailbox.getAccount(),mailbox.getPassword());
  Folder inbox=store.getFolder(""String_Node_Str"");
  inbox.open(Folder.READ_ONLY);
  javax.mail.Message[] messages=inbox.getMessages();
  for (  javax.mail.Message message : messages) {
    try {
      Mail mail=new Mail();
      StringBuffer txtBody=new StringBuffer();
      StringBuffer htmlBody=new StringBuffer();
      List<javax.mail.BodyPart> attachments=new ArrayList();
      mail.setFrom(""String_Node_Str"");
      mail.setTo(""String_Node_Str"");
      mail.setAttachments(new ArrayList<>());
      Arrays.asList(message.getFrom()).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setFrom(mail.getFrom() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setFrom(mail.getFrom() + address.toString() + ""String_Node_Str"");
        }
      }
);
      Arrays.asList(message.getRecipients(javax.mail.Message.RecipientType.TO)).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setTo(mail.getTo() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setTo(mail.getTo() + address.toString() + ""String_Node_Str"");
        }
      }
);
      mail.setContentType(message.getContentType());
      Object content=message.getContent();
      if (content instanceof MimeMultipart) {
        parseBodyParts((MimeMultipart)content,txtBody,htmlBody,attachments);
      }
 else {
        getTxtPart((javax.mail.BodyPart)content);
      }
      mail.setTextBody(txtBody.toString());
      mail.setHtmlBody(htmlBody.toString());
      mail.setSubject(message.getSubject());
      mail.setSendDate(message.getSentDate());
      mail.setMailFolder(mailFolder);
      mails.add(mail);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  inbox.close(false);
  store.close();
  return mails;
}","public static List<Mail> readMails(Mailbox mailbox,MailFolder mailFolder) throws MessagingException {
  List<Mail> mails=new ArrayList<>();
  Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Server());
  props.put(""String_Node_Str"",mailbox.getAccount());
  props.put(""String_Node_Str"",""String_Node_Str"");
  Authenticator auth=new Authenticator(){
    @Override protected PasswordAuthentication getPasswordAuthentication(){
      System.out.println(mailbox.getAccount() + ""String_Node_Str"" + mailbox.getPassword());
      return new PasswordAuthentication(mailbox.getAccount(),mailbox.getPassword());
    }
  }
;
  Session session=Session.getDefaultInstance(props,auth);
  Store store=session.getStore(""String_Node_Str"");
  store.connect(mailbox.getPop3Server(),mailbox.getAccount(),mailbox.getPassword());
  Folder inbox=store.getFolder(""String_Node_Str"");
  inbox.open(Folder.READ_ONLY);
  javax.mail.Message[] messages=inbox.getMessages();
  for (  javax.mail.Message message : messages) {
    try {
      Mail mail=new Mail();
      StringBuffer txtBody=new StringBuffer();
      StringBuffer htmlBody=new StringBuffer();
      List<javax.mail.BodyPart> attachments=new ArrayList();
      mail.setFrom(""String_Node_Str"");
      mail.setTo(""String_Node_Str"");
      mail.setAttachments(new ArrayList<>());
      Arrays.asList(message.getFrom()).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setFrom(mail.getFrom() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setFrom(mail.getFrom() + address.toString() + ""String_Node_Str"");
        }
      }
);
      Arrays.asList(message.getRecipients(javax.mail.Message.RecipientType.TO)).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setTo(mail.getTo() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setTo(mail.getTo() + address.toString() + ""String_Node_Str"");
        }
      }
);
      mail.setContentType(message.getContentType());
      Object content=message.getContent();
      if (content instanceof MimeMultipart) {
        parseBodyParts((MimeMultipart)content,txtBody,htmlBody,attachments);
      }
 else {
        if (content instanceof javax.mail.BodyPart) {
          txtBody.append(getTxtPart((javax.mail.BodyPart)content));
        }
 else {
          txtBody.append(content);
        }
      }
      mail.setTextBody(txtBody.toString());
      mail.setHtmlBody(htmlBody.toString());
      mail.setSubject(message.getSubject());
      mail.setSendDate(message.getSentDate());
      mail.setMailFolder(mailFolder);
      mails.add(mail);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  inbox.close(false);
  store.close();
  return mails;
}",0.9778782496366866
174458,"@Override public boolean sendMail(Integer boxId,User user,Mail mail){
  Mailbox account=mailboxDAO.findOne(boxId);
  if (account != null && account.getUser().getId().equals(user.getId())) {
    MailFolder sent;
    Optional<MailFolder> first=account.getFolders().stream().filter(f -> f.getFolderType().equals(MailFolder.FolderType.SENT)).findFirst();
    if (first.isPresent()) {
      sent=first.get();
    }
 else {
      sent=new MailFolder();
      sent.setMailbox(account);
      sent.setMailList(new ArrayList<>());
      sent.setFolderType(MailFolder.FolderType.SENT);
      sent.setAlias(""String_Node_Str"");
    }
    try {
      MailUtils.sendMail(account,mail);
    }
 catch (    MessagingException e) {
      e.printStackTrace();
      return false;
    }
    sent.getMailList().add(mail);
    mailFolderDao.update(sent);
    return true;
  }
  return false;
}","@Override public boolean sendMail(Integer boxId,User user,Mail mail){
  Mailbox account=mailboxDAO.findOne(boxId);
  if (account != null && account.getUser().getId().equals(user.getId())) {
    MailFolder sent;
    Optional<MailFolder> first=account.getFolders().stream().filter(f -> f.getFolderType().equals(MailFolder.FolderType.SENT)).findFirst();
    if (first.isPresent()) {
      sent=first.get();
    }
 else {
      sent=new MailFolder();
      sent.setMailbox(account);
      sent.setMailList(new ArrayList<>());
      sent.setFolderType(MailFolder.FolderType.SENT);
      sent.setAlias(""String_Node_Str"");
    }
    try {
      MailUtils.sendMail(account,mail);
    }
 catch (    MessagingException e) {
      e.printStackTrace();
      return false;
    }
    mail.setMailFolder(sent);
    sent.getMailList().add(mail);
    mailFolderDao.update(sent);
    return true;
  }
  return false;
}",0.9830699774266366
174459,"@GetMapping(value=""String_Node_Str"") @Authorization public Response listMailsInFolder(@PathVariable(""String_Node_Str"") Integer boxId,@PathVariable(""String_Node_Str"") Integer folderId,@CurrentUser User user){
  return new Response<>(200);
}","@GetMapping(value=""String_Node_Str"") @Authorization public Response listMailsInFolder(@PathVariable(""String_Node_Str"") Integer boxId,@PathVariable(""String_Node_Str"") Integer folderId,@CurrentUser User user){
  return new Response<>(200,mailService.readMails(boxId,folderId,user));
}",0.9174664107485604
174460,"public static List<Mail> readMails(Mailbox mailbox,MailFolder mailFolder) throws MessagingException {
  if (!mailFolder.getFolderType().equals(MailFolder.FolderType.INBOX)) {
    return Collections.emptyList();
  }
  List<Mail> mails=new ArrayList<>();
  Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Server());
  props.put(""String_Node_Str"",mailbox.getAccount());
  props.put(""String_Node_Str"",""String_Node_Str"");
  Authenticator auth=new Authenticator(){
    @Override protected PasswordAuthentication getPasswordAuthentication(){
      System.out.println(mailbox.getAccount() + ""String_Node_Str"" + mailbox.getPassword());
      return new PasswordAuthentication(mailbox.getAccount(),mailbox.getPassword());
    }
  }
;
  Session session=Session.getDefaultInstance(props,auth);
  Store store=session.getStore(""String_Node_Str"");
  store.connect(mailbox.getPop3Server(),mailbox.getAccount(),mailbox.getPassword());
  Folder inbox=store.getFolder(""String_Node_Str"");
  try {
    inbox.open(Folder.READ_WRITE);
  }
 catch (  MessagingException e) {
    inbox.open(Folder.READ_ONLY);
  }
  javax.mail.Message[] messages=inbox.getMessages();
  for (  javax.mail.Message message : messages) {
    message.setFlag(Flags.Flag.DELETED,true);
    try {
      Mail mail=new Mail();
      StringBuffer txtBody=new StringBuffer();
      StringBuffer htmlBody=new StringBuffer();
      List<javax.mail.BodyPart> attachments=new ArrayList();
      mail.setFrom(""String_Node_Str"");
      mail.setTo(""String_Node_Str"");
      mail.setAttachments(new ArrayList<>());
      Arrays.asList(message.getFrom()).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setFrom(mail.getFrom() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setFrom(mail.getFrom() + address.toString() + ""String_Node_Str"");
        }
      }
);
      Arrays.asList(message.getRecipients(javax.mail.Message.RecipientType.TO)).forEach(address -> {
        if (address instanceof InternetAddress) {
          mail.setTo(mail.getTo() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
        }
 else {
          mail.setTo(mail.getTo() + address.toString() + ""String_Node_Str"");
        }
      }
);
      mail.setContentType(new ContentType(message.getContentType()).getBaseType());
      Object content=message.getContent();
      if (content instanceof MimeMultipart) {
        parseBodyParts((MimeMultipart)content,txtBody,htmlBody,attachments);
      }
 else {
        if (content instanceof javax.mail.BodyPart) {
          txtBody.append(getTxtPart((javax.mail.BodyPart)content));
        }
 else {
          txtBody.append(content);
        }
      }
      mail.setTextBody(txtBody.toString());
      mail.setHtmlBody(htmlBody.toString());
      mail.setSubject(message.getSubject());
      mail.setSendDate(message.getSentDate());
      mail.setMailFolder(mailFolder);
      mails.add(mail);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  inbox.close(true);
  store.close();
  return mails;
}","public static List<Mail> readMails(Mailbox mailbox,MailFolder mailFolder) throws MessagingException {
  if (!mailFolder.getFolderType().equals(MailFolder.FolderType.INBOX)) {
    return Collections.emptyList();
  }
  List<Mail> mails=new ArrayList<>();
  Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Port());
  props.put(""String_Node_Str"",mailbox.getPop3Server());
  props.put(""String_Node_Str"",mailbox.getAccount());
  props.put(""String_Node_Str"",""String_Node_Str"");
  Authenticator auth=new Authenticator(){
    @Override protected PasswordAuthentication getPasswordAuthentication(){
      System.out.println(mailbox.getAccount() + ""String_Node_Str"" + mailbox.getPassword());
      return new PasswordAuthentication(mailbox.getAccount(),mailbox.getPassword());
    }
  }
;
  Session session=Session.getDefaultInstance(props,auth);
  Store store=session.getStore(""String_Node_Str"");
  store.connect(mailbox.getPop3Server(),mailbox.getAccount(),mailbox.getPassword());
  Folder inbox=store.getFolder(""String_Node_Str"");
  try {
    inbox.open(Folder.READ_WRITE);
  }
 catch (  MessagingException e) {
    inbox.open(Folder.READ_ONLY);
  }
  javax.mail.Message[] messages=inbox.getMessages();
  for (  javax.mail.Message message : messages) {
    message.setFlag(Flags.Flag.DELETED,true);
    try {
      Mail mail=new Mail();
      StringBuffer txtBody=new StringBuffer();
      StringBuffer htmlBody=new StringBuffer();
      List<javax.mail.BodyPart> attachments=new ArrayList();
      mail.setFrom(""String_Node_Str"");
      mail.setTo(""String_Node_Str"");
      mail.setAttachments(new ArrayList<>());
      Address[] from=message.getFrom();
      if (from != null) {
        Arrays.asList(from).forEach(address -> {
          if (address instanceof InternetAddress) {
            mail.setFrom(mail.getFrom() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
          }
 else {
            mail.setFrom(mail.getFrom() + address.toString() + ""String_Node_Str"");
          }
        }
);
      }
      Address[] recipients=message.getRecipients(Message.RecipientType.TO);
      if (recipients != null) {
        Arrays.asList(recipients).forEach(address -> {
          if (address instanceof InternetAddress) {
            mail.setTo(mail.getTo() + ((InternetAddress)address).getPersonal() + ""String_Node_Str""+ ((InternetAddress)address).getAddress()+ ""String_Node_Str"");
          }
 else {
            mail.setTo(mail.getTo() + address.toString() + ""String_Node_Str"");
          }
        }
);
      }
      mail.setContentType(new ContentType(message.getContentType()).getBaseType());
      Object content=message.getContent();
      if (content instanceof MimeMultipart) {
        parseBodyParts((MimeMultipart)content,txtBody,htmlBody,attachments);
      }
 else {
        if (content instanceof javax.mail.BodyPart) {
          txtBody.append(getTxtPart((javax.mail.BodyPart)content));
        }
 else {
          txtBody.append(content);
        }
      }
      mail.setTextBody(txtBody.toString());
      mail.setHtmlBody(htmlBody.toString());
      mail.setSubject(message.getSubject());
      mail.setSendDate(message.getSentDate());
      mail.setMailFolder(mailFolder);
      mails.add(mail);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  inbox.close(true);
  store.close();
  return mails;
}",0.9660366633508596
174461,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public Response signUp(@RequestBody SignUpRequest request,HttpSession session){
  if (session.getAttribute(""String_Node_Str"") != null && session.getAttribute(""String_Node_Str"").equals(request.getCheckCode())) {
    User user=new User();
    user.setEmail(request.getEmail());
    user.setUserName(request.getUserName());
    user.setPassword(request.getPassword());
    user.setEnabled(true);
    if (userService.signUp(user)) {
      return new Response<>(200,""String_Node_Str"");
    }
    return new Response<>(500,""String_Node_Str"");
  }
 else {
    return new Response<>(501,""String_Node_Str"");
  }
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public Response signUp(@RequestBody SignUpRequest request,HttpSession session){
  if (session.getAttribute(""String_Node_Str"") != null && session.getAttribute(""String_Node_Str"").equals(request.getCheckCode())) {
    User user=new User();
    user.setEmail(request.getEmail());
    user.setUserName(request.getUserName());
    user.setPassword(request.getPassword());
    user.setEnabled(true);
    user.setRoot(false);
    if (userService.signUp(user)) {
      return new Response<>(200,""String_Node_Str"");
    }
    return new Response<>(500,""String_Node_Str"");
  }
 else {
    return new Response<>(501,""String_Node_Str"");
  }
}",0.9817117776152158
174462,"@Override public void saveOpenid(String openid){
  if (!applicationFormDAO.queryByOpenid(openid).isPresent()) {
    ApplicationForm applicationForm=new ApplicationForm();
    applicationForm.setOpenid(openid);
    applicationFormDAO.addForm(applicationForm);
  }
}","@Override public void saveOpenid(String openid){
  if (!applicationFormDAO.queryByOpenid(openid).isPresent()) {
    ApplicationForm applicationForm=new ApplicationForm();
    applicationForm.setPass(false);
    applicationForm.setBlock(false);
    applicationForm.setOpenid(openid);
    applicationFormDAO.addForm(applicationForm);
  }
}",0.8785357737104825
174463,"@PostMapping public String submit(@PathVariable String openid,@RequestParam(""String_Node_Str"") String name,@RequestParam(""String_Node_Str"") Long stuId,@RequestParam(""String_Node_Str"") String gender,@RequestParam(""String_Node_Str"") String nationality,@RequestParam(""String_Node_Str"") Long tel,@RequestParam(""String_Node_Str"") String email,@RequestParam(""String_Node_Str"") String introduce,@RequestParam(""String_Node_Str"") String description){
  if (!joinService.submitted(openid)) {
    ApplicationForm applicationForm=new ApplicationForm();
    applicationForm.setOpenid(openid);
    applicationForm.setDescription(description);
    applicationForm.setName(name);
    applicationForm.setIntroduce(introduce);
    applicationForm.setTel(tel);
    applicationForm.setEmail(email);
    applicationForm.setCreateDate(new Date());
    applicationForm.setStuId(stuId);
    applicationForm.setGender(gender);
    applicationForm.setNationality(nationality);
    joinService.submit(applicationForm);
  }
  return ""String_Node_Str"";
}","@PostMapping public String submit(@PathVariable String openid,@RequestParam(""String_Node_Str"") String name,@RequestParam(""String_Node_Str"") Long stuId,@RequestParam(""String_Node_Str"") String gender,@RequestParam(""String_Node_Str"") String nationality,@RequestParam(""String_Node_Str"") Long tel,@RequestParam(""String_Node_Str"") String email,@RequestParam(""String_Node_Str"") String introduce,@RequestParam(""String_Node_Str"") String description){
  Optional<ApplicationForm> optional=joinService.queryForm(openid);
  if (optional.isPresent() && optional.get().getName() == null) {
    ApplicationForm applicationForm=optional.get();
    applicationForm.setOpenid(openid);
    applicationForm.setDescription(description);
    applicationForm.setName(name);
    applicationForm.setIntroduce(introduce);
    applicationForm.setTel(tel);
    applicationForm.setEmail(email);
    applicationForm.setCreateDate(new Date());
    applicationForm.setStuId(stuId);
    applicationForm.setGender(gender);
    applicationForm.setNationality(nationality);
    joinService.submit(applicationForm);
  }
  return ""String_Node_Str"";
}",0.4379971923256902
174464,"@GetMapping public String join(@PathVariable String openid){
  if (joinService.submitted(openid)) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","@GetMapping public String join(@PathVariable String openid){
  Optional<ApplicationForm> applicationForm=joinService.queryForm(openid);
  if (applicationForm.isPresent() && applicationForm.get().getName() != null) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}",0.6108597285067874
174465,"@PostMapping(""String_Node_Str"") public String onMessageReceived(@RequestBody String data){
  EventMessage eventMessage=XMLConverUtil.convertToObject(EventMessage.class,data);
  if (eventMessage.getEvent() != null && eventMessage.getEvent().equals(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
  if (eventMessage.getContent().contains(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
 else   if (eventMessage.getContent().contains(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
  return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
}","@PostMapping(""String_Node_Str"") public String onMessageReceived(@RequestBody String data){
  EventMessage eventMessage=XMLConverUtil.convertToObject(EventMessage.class,data);
  if (eventMessage.getEvent() != null && eventMessage.getEvent().equals(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
  if (eventMessage.getContent().contains(""String_Node_Str"")) {
    String openid=eventMessage.getFromUserName();
    wechatService.saveOpenid(openid);
    XMLNewsMessage.Article t=new XMLNewsMessage.Article();
    t.setDescription(""String_Node_Str"");
    t.setPicurl(""String_Node_Str"");
    t.setTitle(""String_Node_Str"");
    t.setUrl(""String_Node_Str"" + eventMessage.getFromUserName());
    XMLNewsMessage xmlNewsMessage=new XMLNewsMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),Collections.singletonList(t));
    return xmlNewsMessage.toXML();
  }
 else   if (eventMessage.getContent().contains(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
  return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
}",0.6434540389972145
174466,"@Override public void submit(ApplicationForm applicationForm){
  applicationFormDAO.addForm(applicationForm);
}","@Override public void submit(ApplicationForm applicationForm){
  applicationFormDAO.updateForm(applicationForm);
}",0.9688888888888888
174467,"public WechatServiceImpl(@Value(""String_Node_Str"") String token){
  this.token=token;
}","@Autowired public WechatServiceImpl(ApplicationFormDAO applicationFormDAO,@Value(""String_Node_Str"") String token){
  this.applicationFormDAO=applicationFormDAO;
  this.token=token;
}",0.6468401486988847
174468,"@PostMapping(""String_Node_Str"") public String onMessageReceived(@RequestBody String data){
  EventMessage eventMessage=XMLConverUtil.convertToObject(EventMessage.class,data);
  if (eventMessage.getEvent().equals(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
  if (eventMessage.getContent().contains(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
 else   if (eventMessage.getContent().contains(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
  return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
}","@PostMapping(""String_Node_Str"") public String onMessageReceived(@RequestBody String data){
  EventMessage eventMessage=XMLConverUtil.convertToObject(EventMessage.class,data);
  if (eventMessage.getEvent() != null && eventMessage.getEvent().equals(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
  if (eventMessage.getContent().contains(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
 else   if (eventMessage.getContent().contains(""String_Node_Str"")) {
    return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
  }
  return new XMLTextMessage(eventMessage.getFromUserName(),eventMessage.getToUserName(),""String_Node_Str"").toXML();
}",0.979803808424697
174469,"@Override public void saveOpenid(String openid){
  ApplicationForm applicationForm=new ApplicationForm();
  applicationForm.setOpenid(openid);
  applicationFormDAO.addForm(applicationForm);
}","@Override public void saveOpenid(String openid){
  if (!applicationFormDAO.queryByOpenid(openid).isPresent()) {
    ApplicationForm applicationForm=new ApplicationForm();
    applicationForm.setOpenid(openid);
    applicationFormDAO.addForm(applicationForm);
  }
}",0.8395604395604396
174470,"private void renderHeldItem(EntityRuby entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
    boolean flag=handSide == EnumHandSide.LEFT;
    GlStateManager.translate((flag ? -1 : 1) / 16.0F,0.125F,-0.5F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
    GlStateManager.popMatrix();
  }
}","private void renderHeldItem(EntityRuby entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
    boolean flag=handSide == EnumHandSide.LEFT;
    GlStateManager.translate((float)(flag ? -1 : 1) / 16F,0.125F,-0.5F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
    GlStateManager.popMatrix();
  }
}",0.9930178432893716
174471,"public void doRenderLayer(EntityRuby entitylivingbaseIn,float limbSwing,float limbSwingAmount,float partialTicks,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  boolean flag=entitylivingbaseIn.getPrimaryHand() == EnumHandSide.RIGHT;
  ItemStack mainHand=flag ? entitylivingbaseIn.getHeldItemOffhand() : entitylivingbaseIn.getHeldItemMainhand();
  ItemStack offHand=flag ? entitylivingbaseIn.getHeldItemMainhand() : entitylivingbaseIn.getHeldItemOffhand();
  if (!mainHand.isEmpty() || !offHand.isEmpty()) {
    GlStateManager.pushMatrix();
    this.renderHeldItem(entitylivingbaseIn,mainHand,ItemCameraTransforms.TransformType.THIRD_PERSON_RIGHT_HAND,EnumHandSide.RIGHT);
    this.renderHeldItem(entitylivingbaseIn,offHand,ItemCameraTransforms.TransformType.THIRD_PERSON_LEFT_HAND,EnumHandSide.LEFT);
    GlStateManager.popMatrix();
  }
}","public void doRenderLayer(EntityRuby entitylivingbaseIn,float limbSwing,float limbSwingAmount,float partialTicks,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  boolean flag=entitylivingbaseIn.getPrimaryHand() == EnumHandSide.LEFT;
  ItemStack mainHand=flag ? entitylivingbaseIn.getHeldItemOffhand() : entitylivingbaseIn.getHeldItemMainhand();
  ItemStack offHand=flag ? entitylivingbaseIn.getHeldItemMainhand() : entitylivingbaseIn.getHeldItemOffhand();
  if (!mainHand.isEmpty() || !offHand.isEmpty()) {
    GlStateManager.pushMatrix();
    this.renderHeldItem(entitylivingbaseIn,mainHand,ItemCameraTransforms.TransformType.THIRD_PERSON_RIGHT_HAND,EnumHandSide.RIGHT);
    this.renderHeldItem(entitylivingbaseIn,offHand,ItemCameraTransforms.TransformType.THIRD_PERSON_LEFT_HAND,EnumHandSide.LEFT);
    GlStateManager.popMatrix();
  }
}",0.9959088252483927
174472,"/** 
 * Methods related to entity interaction.				
 */
public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (stack.getItem() == ModItems.GEM_STAFF || stack.getItem() == ModItems.COMMANDER_STAFF) {
        if (this.isTamed()) {
          if (player.isSneaking()) {
            if (this.isOwner(player)) {
              if (this.getHeldItemMainhand().getItem() == ModItems.COMMANDER_STAFF) {
                this.entityDropItem(this.getHeldItemMainhand(),0.0F);
                this.setHeldItem(EnumHand.MAIN_HAND,ItemStack.EMPTY);
                this.playObeySound();
              }
 else {
                this.alternateInteract(player);
                this.playObeySound();
              }
            }
          }
 else {
            if (this.isOwner(player)) {
              this.setSitting(player,!this.isSitting());
              this.playObeySound();
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
 else         if (stack.getItem() != ModItems.COMMANDER_STAFF) {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPath();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == Items.WATER_BUCKET && player.isSneaking()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setUniformColor(this.nativeColor);
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemTransferContract contract=(ItemTransferContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              if (contract.getOwner(stack).equals(this.getOwnerId())) {
                if (this.leader.equals(this.getOwnerId())) {
                  this.setLeader(player);
                }
                this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              }
 else {
                for (                UUID ownerId : this.jointOwners) {
                  if (contract.getOwner(stack).equals(ownerId)) {
                    if (this.leader.equals(this.getOwnerId())) {
                      this.setLeader(player);
                    }
                    try {
                      this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                    }
 catch (                    Exception e) {
                    }
                    ownerId=EntityPlayer.getUUID(player.getGameProfile());
                  }
                }
              }
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              this.setOwnerId(EntityPlayer.getUUID(player.getGameProfile()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.JOINT_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemJointContract contract=(ItemJointContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              for (              UUID ownerId : this.jointOwners) {
                try {
                  this.world.getPlayerEntityByUUID(ownerId).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                }
 catch (                Exception e) {
                }
              }
              this.jointOwners.add(EntityPlayer.getUUID(player.getGameProfile()));
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
        if (this.isTamed()) {
          ItemLiberationContract contract=(ItemLiberationContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setServitude(EntityGem.SERVE_NONE);
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
        if (this.isTamed()) {
          ItemAutonomyContract contract=(ItemAutonomyContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            this.setServitude(EntityGem.SERVE_ITSELF);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.WAR_DECLARATION) {
        if (this.isTamed()) {
          ItemWarDeclaration contract=(ItemWarDeclaration)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(true);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.PEACE_TREATY) {
        if (this.isTamed()) {
          ItemPeaceTreaty contract=(ItemPeaceTreaty)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(false);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (DyeUtils.isDye(stack) && this.canChangeUniformColorByDefault() && player.isSneaking()) {
        if (this.isTamed() && this.isOwner(player)) {
          this.setUniformColor(DyeUtils.metaFromStack(stack).orElse(0));
          this.uniformColorChanged=true;
          return true;
        }
      }
 else       if (DyeUtils.isDye(stack) && this.canChangeInsigniaColorByDefault()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setInsigniaColor(DyeUtils.metaFromStack(stack).orElse(0));
            return true;
          }
        }
      }
 else       if (this.isSoldier) {
        return super.processInteract(player,hand) || this.setAttackWeapon(player,hand,stack);
      }
    }
 else {
      ItemStack stack=player.getHeldItemOffhand();
      if (stack.getItem() == ModItems.COMMANDER_STAFF) {
        if (this.isTamed()) {
          if (this.isOwner(player) && this.getHeldItemMainhand().isEmpty()) {
            this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,stack.copy());
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.GEM_STAFF) {
        if (this.isTamed()) {
          if (this.isOwner(player) && player.isSneaking()) {
            this.setSelected(!this.isSelected());
          }
        }
      }
    }
  }
  return super.processInteract(player,hand);
}","/** 
 * Methods related to entity interaction.				
 */
public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (stack.getItem() == ModItems.GEM_STAFF || stack.getItem() == ModItems.COMMANDER_STAFF) {
        if (this.isTamed()) {
          if (player.isSneaking()) {
            if (this.isOwner(player)) {
              if (this.getHeldItemMainhand().getItem() == ModItems.COMMANDER_STAFF || !(this instanceof EntityPearl)) {
                this.entityDropItem(this.getHeldItemMainhand(),0.0F);
                this.setHeldItem(EnumHand.MAIN_HAND,ItemStack.EMPTY);
                this.playObeySound();
              }
 else {
                this.alternateInteract(player);
                this.playObeySound();
              }
            }
          }
 else {
            if (this.isOwner(player)) {
              this.setSitting(player,!this.isSitting());
              this.playObeySound();
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
 else         if (stack.getItem() != ModItems.COMMANDER_STAFF) {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPath();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == Items.WATER_BUCKET && player.isSneaking()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setUniformColor(this.nativeColor);
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemTransferContract contract=(ItemTransferContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              if (contract.getOwner(stack).equals(this.getOwnerId())) {
                if (this.leader.equals(this.getOwnerId())) {
                  this.setLeader(player);
                }
                this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              }
 else {
                for (                UUID ownerId : this.jointOwners) {
                  if (contract.getOwner(stack).equals(ownerId)) {
                    if (this.leader.equals(this.getOwnerId())) {
                      this.setLeader(player);
                    }
                    try {
                      this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                    }
 catch (                    Exception e) {
                    }
                    ownerId=EntityPlayer.getUUID(player.getGameProfile());
                  }
                }
              }
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              this.setOwnerId(EntityPlayer.getUUID(player.getGameProfile()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.JOINT_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemJointContract contract=(ItemJointContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              for (              UUID ownerId : this.jointOwners) {
                try {
                  this.world.getPlayerEntityByUUID(ownerId).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                }
 catch (                Exception e) {
                }
              }
              this.jointOwners.add(EntityPlayer.getUUID(player.getGameProfile()));
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
        if (this.isTamed()) {
          ItemLiberationContract contract=(ItemLiberationContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setServitude(EntityGem.SERVE_NONE);
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
        if (this.isTamed()) {
          ItemAutonomyContract contract=(ItemAutonomyContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            this.setServitude(EntityGem.SERVE_ITSELF);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.WAR_DECLARATION) {
        if (this.isTamed()) {
          ItemWarDeclaration contract=(ItemWarDeclaration)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(true);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.PEACE_TREATY) {
        if (this.isTamed()) {
          ItemPeaceTreaty contract=(ItemPeaceTreaty)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(false);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (DyeUtils.isDye(stack) && this.canChangeUniformColorByDefault() && player.isSneaking()) {
        if (this.isTamed() && this.isOwner(player)) {
          this.setUniformColor(DyeUtils.metaFromStack(stack).orElse(0));
          this.uniformColorChanged=true;
          return true;
        }
      }
 else       if (DyeUtils.isDye(stack) && this.canChangeInsigniaColorByDefault()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setInsigniaColor(DyeUtils.metaFromStack(stack).orElse(0));
            return true;
          }
        }
      }
 else       if (this.isSoldier) {
        return super.processInteract(player,hand) || this.setAttackWeapon(player,hand,stack);
      }
    }
 else {
      ItemStack stack=player.getHeldItemOffhand();
      if (stack.getItem() == ModItems.COMMANDER_STAFF) {
        if (this.isTamed()) {
          if (this.isOwner(player) && this.getHeldItemMainhand().isEmpty()) {
            this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,stack.copy());
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.GEM_STAFF) {
        if (this.isTamed()) {
          if (this.isOwner(player) && player.isSneaking()) {
            this.setSelected(!this.isSelected());
          }
        }
      }
    }
  }
  return super.processInteract(player,hand);
}",0.9987558548009368
174473,"public void onInventoryChanged(IInventory inventory){
  ItemStack firstItem=this.gemStorage.getStackInSlot(0);
  this.setItemStackToSlot(EntityEquipmentSlot.OFFHAND,firstItem);
}","public void onInventoryChanged(IInventory inventory){
  ItemStack firstItem=this.gemStorage.getStackInSlot(0);
  this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,firstItem);
}",0.9803921568627452
174474,"public RenderAquamarine(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelAquamarine(),0.25F);
  this.addLayer(new LayerAquamarineItem(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isBirthday()) {
    this.addLayer(new LayerBirthdayHat(this));
  }
 else   if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
 else   if (KAGIC.isChristmas()) {
    this.addLayer(new LayerSantaHat(this));
  }
}","public RenderAquamarine(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelAquamarine(),0.25F);
  this.addLayer(new LayerAquamarineItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isBirthday()) {
    this.addLayer(new LayerBirthdayHat(this));
  }
 else   if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
 else   if (KAGIC.isChristmas()) {
    this.addLayer(new LayerSantaHat(this));
  }
}",0.9005947323704333
174475,"public RenderBismuth(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelBismuth(),0.25F);
  this.addLayer(new LayerBismuthItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerNoDyeOverlay(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isBirthday()) {
    this.addLayer(new LayerBirthdayHat(this));
  }
 else   if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
 else   if (KAGIC.isChristmas()) {
    this.addLayer(new LayerSantaHat(this));
  }
}","public RenderBismuth(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelBismuth(),0.25F);
  this.addLayer(new LayerBismuthItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerNoDyeOverlay(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isBirthday()) {
    this.addLayer(new LayerBirthdayHat(this));
  }
 else   if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
 else   if (KAGIC.isChristmas()) {
    this.addLayer(new LayerSantaHat(this));
  }
}",0.96722621902478
174476,"private void renderHeldItem(EntityLivingBase entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(90.0F,0.0F,1.0F,0.0F);
    GlStateManager.rotate(210.0F,0.0F,0.0F,1.0F);
    boolean lefty=handSide == EnumHandSide.LEFT;
    GlStateManager.translate(0.725F,-0.7,lefty ? .5F : 0.0F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,lefty);
    GlStateManager.popMatrix();
  }
}","private void renderHeldItem(EntityLivingBase entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    if (stack.getItem() instanceof ItemEnchantedBook) {
      GlStateManager.pushMatrix();
      if (entity.isSneaking()) {
        GlStateManager.translate(0.0F,0.2F,0.0F);
      }
      this.setSide(handSide);
      GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
      GlStateManager.rotate(90.0F,0.0F,1.0F,0.0F);
      GlStateManager.rotate(210.0F,0.0F,0.0F,1.0F);
      boolean lefty=handSide == EnumHandSide.LEFT;
      GlStateManager.translate(0.725F,-0.7,lefty ? .5F : 0.0F);
      Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,lefty);
      GlStateManager.popMatrix();
    }
 else {
      GlStateManager.pushMatrix();
      if (entity.isSneaking()) {
        GlStateManager.translate(0.0F,0.2F,0.0F);
      }
      this.setSide(handSide);
      GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
      GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
      boolean flag=handSide == EnumHandSide.LEFT;
      GlStateManager.translate((float)(flag ? -1 : 1) / 16.0F,0.125F,-0.7F);
      Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
      GlStateManager.popMatrix();
    }
  }
}",0.6936936936936937
174477,"@Override public boolean spokenTo(EntityPlayer player,String message){
  player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
  return false;
}","@Override public boolean spokenTo(EntityPlayer player,String message){
  return false;
}",0.6717557251908397
174478,"public boolean shouldExecute(){
  if (this.gem.killsPlayers) {
    List<EntityLivingBase> list=this.gem.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class,this.gem.getEntityBoundingBox().grow(24.0D,8.0D,24.0D));
    double distance=Double.MAX_VALUE;
    for (    EntityLivingBase possibleTarget : list) {
      boolean canFight=false;
      if (this.gem != possibleTarget) {
        if (possibleTarget instanceof EntityGem) {
          canFight=!this.gem.isOwnedBySamePeople(((EntityGem)possibleTarget)) && ((EntityGem)possibleTarget).isTamed();
        }
 else         if (possibleTarget instanceof EntityPlayer) {
          canFight=!this.gem.isOwnedBy(possibleTarget);
        }
        if (canFight) {
          double newDistance=this.gem.getDistanceSq(possibleTarget);
          if (newDistance <= distance) {
            distance=newDistance;
            this.target=possibleTarget;
          }
        }
      }
    }
    return this.target != null;
  }
  return false;
}","public boolean shouldExecute(){
  if (this.gem.killsPlayers) {
    List<EntityLivingBase> list=this.gem.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class,this.gem.getEntityBoundingBox().grow(24.0D,8.0D,24.0D));
    double distance=Double.MAX_VALUE;
    for (    EntityLivingBase possibleTarget : list) {
      boolean canFight=false;
      if (this.gem != possibleTarget) {
        if (possibleTarget instanceof EntityGem) {
          canFight=!this.gem.isOwnedBySamePeople(((EntityGem)possibleTarget)) && ((EntityGem)possibleTarget).isTamed();
        }
 else         if (possibleTarget instanceof EntityPlayer) {
          canFight=!this.gem.isOwnedBy(possibleTarget);
        }
        canFight=canFight && this.gem != possibleTarget;
        if (canFight) {
          double newDistance=this.gem.getDistanceSq(possibleTarget);
          if (newDistance <= distance) {
            distance=newDistance;
            this.target=possibleTarget;
          }
        }
      }
    }
    return this.target != null;
  }
  return false;
}",0.9722086786933204
174479,"public EntityBismuth(World worldIn){
  super(worldIn);
  this.nativeColor=10;
  this.isImmuneToFire=true;
  this.initGemStorage();
  this.setSize(0.9F,2.3F);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(1,new EntityAICommandGems(this,0.6D));
  this.tasks.addTask(2,new EntityAIRestrictOpenDoor(this));
  this.tasks.addTask(3,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIAttackMelee(this,1.0d,true));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(8.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.droppedGemItem=ModItems.BISMUTH_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_BISMUTH_GEM;
}","public EntityBismuth(World worldIn){
  super(worldIn);
  this.nativeColor=7;
  this.isImmuneToFire=true;
  this.initGemStorage();
  this.setSize(0.9F,2.3F);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(1,new EntityAICommandGems(this,0.6D));
  this.tasks.addTask(2,new EntityAIRestrictOpenDoor(this));
  this.tasks.addTask(3,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIAttackMelee(this,1.0d,true));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(8.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.droppedGemItem=ModItems.BISMUTH_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_BISMUTH_GEM;
}",0.9989840839823908
174480,"/** 
 * Methods related to combat.                            
 */
public boolean attackEntityFrom(DamageSource source,float amount){
  if (!this.world.isRemote) {
    if (source.getTrueSource() instanceof EntityLivingBase && !this.isOwner((EntityLivingBase)source.getTrueSource())) {
      if (source.isMagicDamage()) {
        this.setAnger(this.getAnger() + 4 + (int)(amount / 2));
      }
 else {
        this.setAnger(this.getAnger() + 1 + (int)(amount / 4));
      }
    }
 else     if (source.isProjectile()) {
      this.setAnger(this.getAnger() + 2 + (int)(amount / 3));
    }
    if (this.isDefective()) {
      this.entityDropItem(this.getHeldItem(EnumHand.MAIN_HAND),0.0F);
      this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,ItemStack.EMPTY);
    }
  }
  return super.attackEntityFrom(source,amount);
}","/** 
 * Methods related to combat.                            
 */
public boolean attackEntityFrom(DamageSource source,float amount){
  if (!this.world.isRemote) {
    if (source.getTrueSource() instanceof EntityLivingBase && !this.isOwner((EntityLivingBase)source.getTrueSource())) {
      if (source.isMagicDamage()) {
        this.setAnger(this.getAnger() + 4 + (int)(amount / 2));
      }
 else {
        this.setAnger(this.getAnger() + 1 + (int)(amount / 4));
      }
    }
 else     if (source.isProjectile()) {
      this.setAnger(this.getAnger() + 2 + (int)(amount / 3));
    }
    if (this.isDefective() && this.ticksExisted < 20) {
      this.entityDropItem(this.getHeldItem(EnumHand.MAIN_HAND),0.0F);
      this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,ItemStack.EMPTY);
    }
  }
  return super.attackEntityFrom(source,amount);
}",0.9844311377245508
174481,"public void fall(float distance,float damageMultiplier){
  if (this.isDefective()) {
    this.entityDropItem(this.getHeldItem(EnumHand.MAIN_HAND),0.0F);
    this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,ItemStack.EMPTY);
  }
  super.fall(distance,damageMultiplier);
}","public void fall(float distance,float damageMultiplier){
  if (this.isDefective() && this.ticksExisted < 20) {
    this.entityDropItem(this.getHeldItem(EnumHand.MAIN_HAND),0.0F);
    this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,ItemStack.EMPTY);
  }
  super.fall(distance,damageMultiplier);
}",0.9547038327526132
174482,"public void jump(){
  if (this.isDefective() && !this.world.isRemote) {
    this.entityDropItem(this.getHeldItem(EnumHand.MAIN_HAND),0.0F);
    this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,ItemStack.EMPTY);
  }
  super.jump();
}","public void jump(){
  if (this.isDefective() && !this.world.isRemote && this.ticksExisted < 20) {
    this.entityDropItem(this.getHeldItem(EnumHand.MAIN_HAND),0.0F);
    this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,ItemStack.EMPTY);
  }
  super.jump();
}",0.9477911646586346
174483,"@Override public void itemDataToGemData(int data){
  this.setSpecial(data);
  this.setCustomNameTag(new TextComponentTranslation(""String_Node_Str"" + this.getSpecial() + ""String_Node_Str"").getUnformattedComponentText());
  this.setHairColor(this.getSkinColor());
  this.setSkinColor(this.generateSkinColor());
  this.setGemColor(this.generateGemColor());
  if (data == 16) {
    this.setCustomNameTag(new TextComponentTranslation(""String_Node_Str"").getUnformattedComponentText());
    this.setHairColor(0xF9D5BD);
    this.setUniformColor(1);
    this.nativeColor=1;
    this.setInsigniaColor(1);
  }
 else {
    this.setUniformColor(data);
    this.nativeColor=data;
    this.setInsigniaColor(data);
  }
}","@Override public void itemDataToGemData(int data){
  this.setSpecial(data);
  if (data == 16) {
    this.setCustomNameTag(new TextComponentTranslation(""String_Node_Str"").getUnformattedComponentText());
    this.setHairColor(0xF9D5BD);
    this.setSkinColor(this.generateSkinColor());
    this.setGemColor(this.generateGemColor());
    this.setUniformColor(1);
    this.nativeColor=1;
    this.setInsigniaColor(1);
  }
 else {
    this.setCustomNameTag(new TextComponentTranslation(""String_Node_Str"" + this.getSpecial() + ""String_Node_Str"").getUnformattedComponentText());
    this.setHairColor(data == 11 ? 0xB9F5FC : this.getSkinColor());
    this.setSkinColor(this.generateSkinColor());
    this.setGemColor(this.generateGemColor());
    this.setUniformColor(data);
    this.nativeColor=data;
    this.setInsigniaColor(data);
  }
}",0.5539661898569571
174484,"/** 
 * Methods related to rendering.                         
 */
@Override protected int generateSkinColor(){
  int colorIndex=this.getSpecial();
  int colorValue=0;
  if (this.getSpecial() < 16) {
    EnumDyeColor color=EnumDyeColor.values()[colorIndex];
    try {
      colorValue=ReflectionHelper.getPrivateValue(EnumDyeColor.class,color,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 catch (    Exception e) {
    }
  }
 else {
    colorValue=0xFF8D32;
  }
  return colorValue;
}","/** 
 * Methods related to rendering.                         
 */
@Override protected int generateSkinColor(){
  int colorIndex=this.getSpecial();
  int colorValue=0;
  if (this.getSpecial() == 11) {
    colorValue=0x7298EB;
  }
 else   if (this.getSpecial() < 16) {
    EnumDyeColor color=EnumDyeColor.values()[colorIndex];
    try {
      colorValue=ReflectionHelper.getPrivateValue(EnumDyeColor.class,color,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 catch (    Exception e) {
    }
  }
 else {
    colorValue=0xFF8D32;
  }
  return colorValue;
}",0.9364485981308412
174485,"@Override protected int generateGemColor(){
switch (this.getSpecial()) {
case 0:
    return 0xFFFFFF;
case 1:
  return 0xCB7226;
case 2:
return 0xAE48D4;
case 3:
return 0x215493;
case 4:
return 0xFEFE4C;
case 5:
return 0x469300;
case 6:
return 0xE8759B;
case 7:
return 0x939393;
case 8:
return 0x8F8F8F;
case 9:
return 0x6699B3;
case 10:
return 0x7B3BAE;
case 11:
return 0x3B54BA;
case 12:
return 0x4E341B;
case 13:
return 0x4C6519;
case 14:
return 0x963030;
case 15:
return 0x333333;
}
return 0xDE7565;
}","@Override protected int generateGemColor(){
switch (this.getSpecial()) {
case 0:
    return 0xFFFFFF;
case 4:
  return 0xFEFE4C;
case 6:
return 0xE8759B;
case 10:
return 0x7B3BAE;
case 11:
return 0x3B54BA;
case 13:
return 0x4C6519;
case 15:
return 0x333333;
}
return 0xDE7565;
}",0.5363984674329502
174486,"@Override public boolean spokenTo(EntityPlayer player,String message){
  player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
  return false;
}","@Override public boolean spokenTo(EntityPlayer player,String message){
  return false;
}",0.6717557251908397
174487,"public boolean apply(EntityLiving input){
  return input != null && !(input instanceof EntityShardFusion);
}","public boolean apply(EntityLivingBase input){
  return input != null && !(input instanceof EntityShardFusion);
}",0.9818181818181818
174488,"public EntityShardFusion(World world){
  super(world);
  this.isImmuneToFire=true;
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(2,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIMoveTowardsRestriction(this,1.0D));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.targetTasks.addTask(4,new EntityAINearestAttackableTarget<EntityLiving>(this,EntityLiving.class,10,true,false,new Predicate<EntityLiving>(){
    public boolean apply(    EntityLiving input){
      return input != null && !(input instanceof EntityShardFusion);
    }
  }
));
}","public EntityShardFusion(World world){
  super(world);
  this.isImmuneToFire=true;
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(2,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIMoveTowardsRestriction(this,1.0D));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.targetTasks.addTask(4,new EntityAINearestAttackableTarget<EntityLivingBase>(this,EntityLivingBase.class,10,true,false,new Predicate<EntityLivingBase>(){
    public boolean apply(    EntityLivingBase input){
      return input != null && !(input instanceof EntityShardFusion);
    }
  }
));
}",0.9923298178331736
174489,"@Override public void updateTask(){
  this.gem.getNavigator().tryMoveToXYZ(this.posX,this.posY,this.posZ,this.movementSpeed);
  if (this.gem.getDistanceSq(this.posX,this.posY,this.posZ) < 8 && !this.placed) {
    this.gem.breakBlock(new BlockPos(this.posX,this.posY,this.posZ));
    this.placed=true;
  }
}","@Override public void updateTask(){
  this.gem.getNavigator().tryMoveToXYZ(this.posX,this.posY,this.posZ,this.movementSpeed);
  if (this.gem.getDistanceSq(this.posX,this.posY,this.posZ) < 8) {
    this.placed=this.gem.breakBlock(new BlockPos(this.posX,this.posY,this.posZ));
  }
}",0.9146757679180888
174490,"@Override public boolean shouldContinueExecuting(){
  return !this.gem.getNavigator().noPath() && !this.gem.isDefective();
}","@Override public boolean shouldContinueExecuting(){
  return !this.gem.getNavigator().noPath() && !this.gem.isDefective() && !this.placed&& !this.gem.world.isAirBlock(new BlockPos(this.posX,this.posY,this.posZ));
}",0.7337278106508875
174491,"@Override public boolean shouldExecute(){
  boolean canExecute=false;
  List<EntityPearl> list=this.gem.world.<EntityPearl>getEntitiesWithinAABB(EntityPearl.class,this.gem.getEntityBoundingBox().grow(8.0D,4.0D,8.0D));
  for (  EntityPearl entity : list) {
    if (entity.isOwnedBySamePeople(this.gem)) {
      canExecute=this.gem.getHeldItemMainhand().getItem() instanceof ItemPickaxe;
      break;
    }
  }
  if (canExecute) {
    if (this.delay > 0) {
      --this.delay;
      return false;
    }
 else {
      this.delay=this.gem.getRNG().nextInt(20);
      return true;
    }
  }
  return false;
}","@Override public boolean shouldExecute(){
  boolean canExecute=false;
  List<EntityPearl> list=this.gem.world.<EntityPearl>getEntitiesWithinAABB(EntityPearl.class,this.gem.getEntityBoundingBox().grow(8.0D,4.0D,8.0D));
  for (  EntityPearl entity : list) {
    if (entity.isOwnedBySamePeople(this.gem)) {
      canExecute=this.gem.getHeldItemMainhand().getItem() instanceof ItemPickaxe;
      break;
    }
  }
  if (canExecute) {
    if (this.delay > 0) {
      --this.delay;
      return false;
    }
 else {
      this.delay=this.gem.getRNG().nextInt(20);
      boolean found=false;
      for (int x=-this.searchRadius; x <= this.searchRadius && !found; ++x) {
        for (int y=-2; y <= 2 && !found; ++y) {
          for (int z=-this.searchRadius; z <= this.searchRadius && !found; ++z) {
            BlockPos tempPos=this.gem.getPosition().add(new BlockPos(x,y,z));
            Block block=this.gem.world.getBlockState(tempPos).getBlock();
            if (block instanceof BlockOre) {
              boolean canBeSeen=false;
              for (int ox=-1; ox <= 1 && !canBeSeen; ++ox) {
                if (this.gem.world.isAirBlock(tempPos.add(ox,0,0))) {
                  canBeSeen=true;
                }
              }
              for (int oy=-1; oy <= 1 && !canBeSeen; ++oy) {
                if (this.gem.world.isAirBlock(tempPos.add(0,oy,0))) {
                  canBeSeen=true;
                }
              }
              for (int oz=-1; oz <= 1 && !canBeSeen; ++oz) {
                if (this.gem.world.isAirBlock(tempPos.add(0,0,oz))) {
                  canBeSeen=true;
                }
              }
              if (canBeSeen) {
                this.posX=tempPos.getX();
                this.posY=tempPos.getY();
                this.posZ=tempPos.getZ();
                found=true;
                break;
              }
            }
          }
        }
      }
      return true;
    }
  }
  return false;
}",0.4531864673485444
174492,"@Override public void startExecuting(){
  if (!this.gem.isDefective()) {
    boolean found=false;
    for (int x=-this.searchRadius; x <= this.searchRadius && !found; ++x) {
      for (int y=-2; y <= 2 && !found; ++y) {
        for (int z=-this.searchRadius; z <= this.searchRadius && !found; ++z) {
          BlockPos tempPos=this.gem.getPosition().add(new BlockPos(x,y,z));
          Block block=this.gem.world.getBlockState(tempPos).getBlock();
          if (block instanceof BlockOre) {
            boolean canBeSeen=false;
            for (int ox=-1; ox <= 1 && !canBeSeen; ++ox) {
              if (this.gem.world.isAirBlock(tempPos.add(ox,0,0))) {
                canBeSeen=true;
              }
            }
            for (int oy=-1; oy <= 1 && !canBeSeen; ++oy) {
              if (this.gem.world.isAirBlock(tempPos.add(0,oy,0))) {
                canBeSeen=true;
              }
            }
            for (int oz=-1; oz <= 1 && !canBeSeen; ++oz) {
              if (this.gem.world.isAirBlock(tempPos.add(0,0,oz))) {
                canBeSeen=true;
              }
            }
            if (canBeSeen) {
              this.posX=tempPos.getX();
              this.posY=tempPos.getY();
              this.posZ=tempPos.getZ();
              found=true;
              break;
            }
          }
        }
      }
    }
    if (found) {
      this.gem.getNavigator().tryMoveToXYZ(this.posX,this.posY,this.posZ,this.movementSpeed);
    }
  }
}","@Override public void startExecuting(){
  if (!this.gem.isDefective()) {
    this.gem.getNavigator().tryMoveToXYZ(this.posX,this.posY,this.posZ,this.movementSpeed);
  }
}",0.2082057562767912
174493,"@Override public void itemDataToGemData(int data){
  this.dataManager.set(COLOR,data);
  this.setUniformColor(data);
  this.nativeColor=data;
  this.setSkinColor(this.generateSkinColor());
  this.setHairStyle(this.generateHairStyle());
  this.setHairColor(this.generateHairColor());
  this.setGemColor(this.generateGemColor());
  this.setCustomNameTag(new TextComponentTranslation(String.format(""String_Node_Str"",data)).getUnformattedComponentText());
  if (data == 16) {
    this.setGemPlacement(GemPlacements.BACK_OF_HEAD.id);
    this.setGemCut(GemCuts.TEARDROP.id);
    this.setSpecial(1);
  }
 else {
    this.setSpecial(0);
  }
}","@Override public void itemDataToGemData(int data){
  this.dataManager.set(COLOR,data);
  this.setSkinColor(this.generateSkinColor());
  this.setHairStyle(this.generateHairStyle());
  this.setHairColor(this.generateHairColor());
  this.setGemColor(this.generateGemColor());
  this.setCustomNameTag(new TextComponentTranslation(String.format(""String_Node_Str"",data)).getUnformattedComponentText());
  if (data > 15) {
    this.setUniformColor(3);
    this.nativeColor=3;
    this.setSpecial(1);
  }
 else {
    this.setUniformColor(data);
    this.nativeColor=data;
    this.setSpecial(0);
  }
}",0.6824104234527687
174494,"public void readEntityFromNBT(NBTTagCompound compound){
  this.dataManager.set(COLOR,compound.getInteger(""String_Node_Str""));
  if (compound.hasKey(""String_Node_Str"")) {
    this.setSpecial(compound.getBoolean(""String_Node_Str"") ? 1 : 0);
    this.setGemPlacement(GemPlacements.BACK_OF_HEAD.id);
    this.setGemCut(GemCuts.TEARDROP.id);
  }
  super.readEntityFromNBT(compound);
}","public void readEntityFromNBT(NBTTagCompound compound){
  this.dataManager.set(COLOR,compound.getInteger(""String_Node_Str""));
  if (compound.hasKey(""String_Node_Str"")) {
    this.setSpecial(compound.getBoolean(""String_Node_Str"") ? 1 : 0);
    this.setGemPlacement(GemPlacements.BACK_OF_HEAD.id);
    this.setGemCut(GemCuts.TEARDROP.id);
    if (this.getUniformColor() > 15) {
      this.setUniformColor(3);
      this.nativeColor=3;
      this.setSpecial(1);
    }
  }
  super.readEntityFromNBT(compound);
}",0.8555304740406321
174495,"@EventHandler public void postInit(FMLPostInitializationEvent e){
  ModEntities.registerGemYields();
  KAGIC.addSkill(AlignGems.class);
  KAGIC.addSkill(BreedLivestock.class);
  KAGIC.addSkill(BuildBox.class);
  KAGIC.addSkill(BuildBridge.class);
  KAGIC.addSkill(BuildStairs.class);
  KAGIC.addSkill(BuildTower.class);
  KAGIC.addSkill(BuildWall.class);
  KAGIC.addSkill(BuildRamp.class);
  KAGIC.addSkill(CollectLiquids.class);
  KAGIC.addSkill(Come.class);
  KAGIC.addSkill(CutDownTrees.class);
  KAGIC.addSkill(Defend.class);
  KAGIC.addSkill(DumpChestsBismuth.class);
  KAGIC.addSkill(DumpChestsLapis.class);
  KAGIC.addSkill(DumpChestsPearl.class);
  KAGIC.addSkill(DumpChestsPeridot.class);
  KAGIC.addSkill(EnderPearlWarp.class);
  KAGIC.addSkill(FetchChestsBismuth.class);
  KAGIC.addSkill(FetchChestsPearl.class);
  KAGIC.addSkill(Follow.class);
  KAGIC.addSkill(Harvest.class);
  KAGIC.addSkill(HarvestAndReplant.class);
  KAGIC.addSkill(HarvestAndReplantNetherWart.class);
  KAGIC.addSkill(HarvestCacti.class);
  KAGIC.addSkill(HarvestMelons.class);
  KAGIC.addSkill(HarvestNetherWart.class);
  KAGIC.addSkill(HarvestPumpkins.class);
  KAGIC.addSkill(HarvestReeds.class);
  KAGIC.addSkill(KillOtherEntities.class);
  KAGIC.addSkill(Look.class);
  KAGIC.addSkill(MilkCows.class);
  KAGIC.addSkill(Mine.class);
  KAGIC.addSkill(MowGrass.class);
  KAGIC.addSkill(PickFlowers.class);
  KAGIC.addSkill(PlantSaplingsBismuth.class);
  KAGIC.addSkill(PlantSaplingsPearl.class);
  KAGIC.addSkill(PlantSaplingsPeridot.class);
  KAGIC.addSkill(SingSong.class);
  KAGIC.addSkill(Stop.class);
  KAGIC.addSkill(TameCats.class);
  KAGIC.addSkill(TameDogs.class);
  KAGIC.addSkill(TameParrots.class);
  KAGIC.addSkill(TellFuture.class);
  KAGIC.addSkill(TellFutureGarnet.class);
  KAGIC.addSkill(TellReport.class);
  KAGIC.addSkill(Warp.class);
}","@EventHandler public void postInit(FMLPostInitializationEvent e){
  ModEntities.registerGemYields();
  KAGIC.addSkill(AlignGems.class);
  KAGIC.addSkill(BreedLivestock.class);
  KAGIC.addSkill(BuildBox.class);
  KAGIC.addSkill(BuildBridge.class);
  KAGIC.addSkill(BuildStairs.class);
  KAGIC.addSkill(BuildTower.class);
  KAGIC.addSkill(BuildWall.class);
  KAGIC.addSkill(BuildRamp.class);
  KAGIC.addSkill(CollectLiquids.class);
  KAGIC.addSkill(Come.class);
  KAGIC.addSkill(CutDownTrees.class);
  KAGIC.addSkill(Defend.class);
  KAGIC.addSkill(DumpChestsBismuth.class);
  KAGIC.addSkill(DumpChestsLapis.class);
  KAGIC.addSkill(DumpChestsPearl.class);
  KAGIC.addSkill(DumpChestsPeridot.class);
  KAGIC.addSkill(EnderPearlWarp.class);
  KAGIC.addSkill(FetchChestsBismuth.class);
  KAGIC.addSkill(FetchChestsPearl.class);
  KAGIC.addSkill(Follow.class);
  KAGIC.addSkill(FuseTopaz.class);
  KAGIC.addSkill(Harvest.class);
  KAGIC.addSkill(HarvestAndReplant.class);
  KAGIC.addSkill(HarvestAndReplantNetherWart.class);
  KAGIC.addSkill(HarvestCacti.class);
  KAGIC.addSkill(HarvestMelons.class);
  KAGIC.addSkill(HarvestNetherWart.class);
  KAGIC.addSkill(HarvestPumpkins.class);
  KAGIC.addSkill(HarvestReeds.class);
  KAGIC.addSkill(KillOtherEntities.class);
  KAGIC.addSkill(Look.class);
  KAGIC.addSkill(MilkCows.class);
  KAGIC.addSkill(Mine.class);
  KAGIC.addSkill(MowGrass.class);
  KAGIC.addSkill(PickFlowers.class);
  KAGIC.addSkill(PlantSaplingsBismuth.class);
  KAGIC.addSkill(PlantSaplingsPearl.class);
  KAGIC.addSkill(PlantSaplingsPeridot.class);
  KAGIC.addSkill(SingSong.class);
  KAGIC.addSkill(Stop.class);
  KAGIC.addSkill(TameCats.class);
  KAGIC.addSkill(TameDogs.class);
  KAGIC.addSkill(TameParrots.class);
  KAGIC.addSkill(TellFuture.class);
  KAGIC.addSkill(TellFutureGarnet.class);
  KAGIC.addSkill(TellReport.class);
  KAGIC.addSkill(UnfuseTopaz.class);
  KAGIC.addSkill(Warp.class);
}",0.9808306709265175
174496,"@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    if (this.startedBuilding) {
      boolean placed=false;
      BlockPos nextPos=gem.getPosition();
      for (int y=0; y < this.height; ++y) {
        if (!gem.world.getBlockState(nextPos.up(y)).getBlock().isTopSolid(gem.world.getBlockState(nextPos.up(y)))) {
          placed=gem.placeBlock(this.bridgeBlock,nextPos.up(y));
          if (placed) {
            gem.setPosition(nextPos.getX(),nextPos.getY() + y + 1,nextPos.getZ());
            this.placeStack.shrink(1);
            if (this.placeStack.isEmpty()) {
              this.getBlock(gem);
            }
          }
 else {
            break;
          }
        }
      }
      this.startedBuilding=false;
      this.lastBlockPlace=0;
      this.limit=this.width;
    }
 else {
      if (this.sidePlaced < 4) {
        if (this.offset < this.limit) {
          boolean placed=false;
          BlockPos nextPos=gem.getPosition().add(this.direction[0],-this.height,this.direction[1]);
          gem.lookAt(nextPos.add(this.direction[0],0,this.direction[1]));
          for (int y=0; y < this.height; ++y) {
            if (!gem.world.getBlockState(nextPos.up(y)).getBlock().isTopSolid(gem.world.getBlockState(nextPos.up(y)))) {
              placed=gem.placeBlock(this.bridgeBlock,nextPos.up(y));
              if (placed) {
                this.placeStack.shrink(1);
                if (this.placeStack.isEmpty()) {
                  this.getBlock(gem);
                }
              }
            }
          }
          gem.tryToMoveTo(nextPos.up(this.height));
          this.lastBlockPlace=0;
          ++this.offset;
        }
 else {
          this.changeDirection(gem);
          this.offset=0;
          ++this.sidePlaced;
          if (this.sidePlaced % 2 == 0) {
            this.limit=this.width;
          }
 else {
            this.limit=this.depth;
          }
        }
      }
 else {
        this.stillBuilding=false;
      }
    }
  }
  ++this.lastBlockPlace;
}","@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    if (this.startedBuilding) {
      boolean placed=false;
      BlockPos nextPos=gem.getPosition();
      for (int y=0; y < this.height; ++y) {
        if (!gem.world.getBlockState(nextPos.up(y)).getBlock().isTopSolid(gem.world.getBlockState(nextPos.up(y)))) {
          placed=gem.placeBlock(this.bridgeBlock,nextPos.up(y));
          if (placed) {
            gem.setPosition(nextPos.getX(),nextPos.getY() + y + 1,nextPos.getZ());
            this.placeStack.shrink(1);
            if (this.placeStack.isEmpty()) {
              placed=this.getBlock(gem) && placed;
              if (!placed) {
                break;
              }
            }
          }
 else {
            break;
          }
        }
      }
      this.startedBuilding=false;
      this.lastBlockPlace=0;
      this.limit=this.width;
    }
 else {
      if (this.sidePlaced < 4) {
        if (this.offset < this.limit) {
          boolean placed=false;
          BlockPos nextPos=gem.getPosition().add(this.direction[0],-this.height,this.direction[1]);
          gem.lookAt(nextPos.add(this.direction[0],0,this.direction[1]));
          for (int y=0; y < this.height; ++y) {
            if (!gem.world.getBlockState(nextPos.up(y)).getBlock().isTopSolid(gem.world.getBlockState(nextPos.up(y)))) {
              placed=gem.placeBlock(this.bridgeBlock,nextPos.up(y));
              if (placed) {
                this.placeStack.shrink(1);
                if (this.placeStack.isEmpty()) {
                  this.getBlock(gem);
                }
              }
            }
          }
          gem.tryToMoveTo(nextPos.up(this.height));
          this.lastBlockPlace=0;
          ++this.offset;
        }
 else {
          this.changeDirection(gem);
          this.offset=0;
          ++this.sidePlaced;
          if (this.sidePlaced % 2 == 0) {
            this.limit=this.width;
          }
 else {
            this.limit=this.depth;
          }
        }
      }
 else {
        this.stillBuilding=false;
      }
    }
  }
  ++this.lastBlockPlace;
}",0.9789499153157512
174497,"@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    BlockPos nextPos=gem.getPosition().add(this.direction[0],-1,this.direction[1]);
    gem.lookAt(nextPos.add(this.direction[0],-1,this.direction[1]));
    boolean placed=false;
    for (int i=this.width / 2 * -1; i < Math.max(1,this.width / 2); ++i) {
      BlockPos placePos=nextPos.add(this.direction[1] * i,0,this.direction[0] * i);
      if (!gem.world.getBlockState(placePos).getBlock().isTopSolid(gem.world.getBlockState(placePos))) {
        placed=gem.placeBlock(this.bridgeBlock,placePos);
        if (placed) {
          this.placeStack.shrink(1);
          if (this.placeStack.isEmpty()) {
            this.getBlock(gem);
          }
        }
      }
    }
    gem.tryToMoveTo(nextPos.up());
    this.stillBuilding=placed;
    this.lastBlockPlace=0;
  }
  ++this.lastBlockPlace;
}","@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    BlockPos nextPos=gem.getPosition().add(this.direction[0],-1,this.direction[1]);
    gem.lookAt(nextPos.add(this.direction[0],-1,this.direction[1]));
    boolean placed=false;
    for (int i=this.width / 2 * -1; i < Math.max(1,this.width / 2); ++i) {
      BlockPos placePos=nextPos.add(this.direction[1] * i,0,this.direction[0] * i);
      if (!gem.world.getBlockState(placePos).getBlock().isTopSolid(gem.world.getBlockState(placePos))) {
        placed=gem.placeBlock(this.bridgeBlock,placePos);
        if (placed) {
          this.placeStack.shrink(1);
          if (this.placeStack.isEmpty()) {
            placed=this.getBlock(gem) && placed;
            if (!placed) {
              break;
            }
          }
        }
      }
    }
    gem.tryToMoveTo(nextPos.up());
    this.stillBuilding=placed;
    this.lastBlockPlace=0;
  }
  ++this.lastBlockPlace;
}",0.9359605911330048
174498,"@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    BlockPos nextPos=gem.getPosition().add(this.direction[0],0,this.direction[1]);
    gem.lookAt(nextPos.add(this.direction[0],-1,this.direction[1]));
    boolean placed=false;
    for (int i=this.width / 2 * -1; i < Math.max(1,this.width / 2); ++i) {
      BlockPos placePos=nextPos.add(this.direction[1] * i,-2,this.direction[0] * i);
      if (!gem.world.getBlockState(placePos).getBlock().isTopSolid(gem.world.getBlockState(placePos))) {
        placed=gem.placeBlock(this.bridgeBlock,placePos);
        if (placed) {
          this.placeStack.shrink(1);
          if (this.placeStack.isEmpty()) {
            this.getBlock(gem);
          }
        }
      }
    }
    gem.tryToMoveTo(nextPos.down());
    this.stillBuilding=placed;
    this.lastBlockPlace=0;
  }
  ++this.lastBlockPlace;
}","@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    BlockPos nextPos=gem.getPosition().add(this.direction[0],0,this.direction[1]);
    gem.lookAt(nextPos.add(this.direction[0],-1,this.direction[1]));
    boolean placed=false;
    for (int i=this.width / 2 * -1; i < Math.max(1,this.width / 2); ++i) {
      BlockPos placePos=nextPos.add(this.direction[1] * i,-2,this.direction[0] * i);
      if (!gem.world.getBlockState(placePos).getBlock().isTopSolid(gem.world.getBlockState(placePos))) {
        placed=gem.placeBlock(this.bridgeBlock,placePos);
        if (placed) {
          this.placeStack.shrink(1);
          if (this.placeStack.isEmpty()) {
            placed=this.getBlock(gem) && placed;
            if (!placed) {
              break;
            }
          }
        }
      }
    }
    gem.tryToMoveTo(nextPos.down());
    this.stillBuilding=placed;
    this.lastBlockPlace=0;
  }
  ++this.lastBlockPlace;
}",0.9361004915346806
174499,"@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    BlockPos nextPos=gem.getPosition().add(this.direction[0],0,this.direction[1]);
    gem.lookAt(nextPos.add(this.direction[0],1,this.direction[1]));
    boolean placed=false;
    for (int i=this.width / 2 * -1; i < Math.max(1,this.width / 2); ++i) {
      BlockPos placePos=nextPos.add(this.direction[1] * i,0,this.direction[0] * i);
      if (!gem.world.getBlockState(placePos).getBlock().isTopSolid(gem.world.getBlockState(placePos))) {
        placed=gem.placeBlock(this.bridgeBlock,placePos);
        if (placed) {
          this.placeStack.shrink(1);
          if (this.placeStack.isEmpty()) {
            this.getBlock(gem);
          }
        }
      }
    }
    gem.tryToMoveTo(nextPos.up());
    this.stillBuilding=placed;
    this.lastBlockPlace=0;
  }
  ++this.lastBlockPlace;
}","@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    BlockPos nextPos=gem.getPosition().add(this.direction[0],0,this.direction[1]);
    gem.lookAt(nextPos.add(this.direction[0],1,this.direction[1]));
    boolean placed=false;
    for (int i=this.width / 2 * -1; i < Math.max(1,this.width / 2); ++i) {
      BlockPos placePos=nextPos.add(this.direction[1] * i,0,this.direction[0] * i);
      if (!gem.world.getBlockState(placePos).getBlock().isTopSolid(gem.world.getBlockState(placePos))) {
        placed=gem.placeBlock(this.bridgeBlock,placePos);
        if (placed) {
          this.placeStack.shrink(1);
          if (this.placeStack.isEmpty()) {
            placed=this.getBlock(gem) && placed;
            if (!placed) {
              break;
            }
          }
        }
      }
    }
    gem.tryToMoveTo(nextPos.up());
    this.stillBuilding=placed;
    this.lastBlockPlace=0;
  }
  ++this.lastBlockPlace;
}",0.9358200767964892
174500,"@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    if (this.offset < this.height) {
      boolean placed=false;
      BlockPos nextPos=gem.getPosition().add(this.direction[0],0,this.direction[1]);
      gem.lookAt(nextPos.add(this.direction[0],4,this.direction[1]));
      placed=gem.placeBlock(this.bridgeBlock,nextPos.up(this.offset));
      if (placed) {
        gem.setPosition(nextPos.getX(),nextPos.getY() + 1,nextPos.getZ());
        this.placeStack.shrink(1);
        if (this.placeStack.isEmpty()) {
          this.getBlock(gem);
        }
      }
      this.stillBuilding=placed;
      this.lastBlockPlace=0;
    }
  }
  ++this.lastBlockPlace;
}","@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    if (this.offset < this.height) {
      boolean placed=false;
      BlockPos nextPos=gem.getPosition().add(this.direction[0],0,this.direction[1]);
      gem.lookAt(nextPos.add(this.direction[0],4,this.direction[1]));
      placed=gem.placeBlock(this.bridgeBlock,nextPos.up(this.offset));
      if (placed) {
        gem.setPosition(nextPos.getX(),nextPos.getY() + 1,nextPos.getZ());
        this.placeStack.shrink(1);
        if (this.placeStack.isEmpty()) {
          placed=this.getBlock(gem) && placed;
        }
      }
      this.stillBuilding=placed;
      this.lastBlockPlace=0;
    }
  }
  ++this.lastBlockPlace;
}",0.9877961234745154
174501,"@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    if (this.startedBuilding) {
      boolean placed=false;
      BlockPos nextPos=gem.getPosition();
      for (int y=0; y < this.height; ++y) {
        if (!gem.world.getBlockState(nextPos.up(y)).getBlock().isTopSolid(gem.world.getBlockState(nextPos.up(y)))) {
          placed=gem.placeBlock(this.bridgeBlock,nextPos.up(y));
          if (placed) {
            gem.setPosition(nextPos.getX(),nextPos.getY() + y + 1,nextPos.getZ());
            this.placeStack.shrink(1);
            if (this.placeStack.isEmpty()) {
              this.getBlock(gem);
            }
          }
 else {
            break;
          }
        }
      }
      this.startedBuilding=false;
      this.stillBuilding=placed;
      this.lastBlockPlace=0;
    }
 else {
      boolean placed=false;
      BlockPos nextPos=gem.getPosition().add(this.direction[0],-this.height,this.direction[1]);
      gem.lookAt(nextPos.add(this.direction[0],0,this.direction[1]));
      for (int y=0; y < this.height; ++y) {
        if (!gem.world.getBlockState(nextPos.up(y)).getBlock().isTopSolid(gem.world.getBlockState(nextPos.up(y)))) {
          placed=gem.placeBlock(this.bridgeBlock,nextPos.up(y));
          if (placed) {
            this.placeStack.shrink(1);
            if (this.placeStack.isEmpty()) {
              this.getBlock(gem);
            }
          }
 else {
            break;
          }
        }
      }
      gem.tryToMoveTo(nextPos.up(this.height));
      this.stillBuilding=placed;
      this.lastBlockPlace=0;
    }
  }
  ++this.lastBlockPlace;
}","@Override public void run(EntityBismuth gem){
  if (this.lastBlockPlace > 20) {
    if (this.startedBuilding) {
      boolean placed=false;
      BlockPos nextPos=gem.getPosition();
      for (int y=0; y < this.height; ++y) {
        if (!gem.world.getBlockState(nextPos.up(y)).getBlock().isTopSolid(gem.world.getBlockState(nextPos.up(y)))) {
          placed=gem.placeBlock(this.bridgeBlock,nextPos.up(y));
          if (placed) {
            gem.setPosition(nextPos.getX(),nextPos.getY() + y + 1,nextPos.getZ());
            this.placeStack.shrink(1);
            if (this.placeStack.isEmpty()) {
              placed=this.getBlock(gem) && placed;
              if (!placed) {
                break;
              }
            }
          }
 else {
            break;
          }
        }
      }
      this.startedBuilding=false;
      this.stillBuilding=placed;
      this.lastBlockPlace=0;
    }
 else {
      boolean placed=false;
      BlockPos nextPos=gem.getPosition().add(this.direction[0],-this.height,this.direction[1]);
      gem.lookAt(nextPos.add(this.direction[0],0,this.direction[1]));
      for (int y=0; y < this.height; ++y) {
        if (!gem.world.getBlockState(nextPos.up(y)).getBlock().isTopSolid(gem.world.getBlockState(nextPos.up(y)))) {
          placed=gem.placeBlock(this.bridgeBlock,nextPos.up(y));
          if (placed) {
            this.placeStack.shrink(1);
            if (this.placeStack.isEmpty()) {
              this.getBlock(gem);
            }
          }
 else {
            break;
          }
        }
      }
      gem.tryToMoveTo(nextPos.up(this.height));
      this.stillBuilding=placed;
      this.lastBlockPlace=0;
    }
  }
  ++this.lastBlockPlace;
}",0.9737872853269056
174502,"@Override public boolean proceed(EntityGem gem){
  return this.liquidLocation != null && gem.getHeldItem(EnumHand.MAIN_HAND).getItem() == Items.BUCKET;
}","@Override public boolean proceed(EntityGem gem){
  return this.liquidLocation != null && gem.getHeldItem(EnumHand.MAIN_HAND).getItem() == Items.BUCKET && gem.isSoldier;
}",0.9473684210526316
174503,"public KillOtherEntities(){
  this.TRIGGER_VERBS=new ArrayList<String>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  this.TRIGGER_NOUNS=new ArrayList<String>();
  this.canBeStopped=true;
  this.killsOnEnd=true;
  this.can(RunWith.TARGETTING);
  this.task(true);
}","public KillOtherEntities(){
  this.TRIGGER_VERBS=new ArrayList<String>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  this.TRIGGER_NOUNS=new ArrayList<String>();
  this.canBeStopped=true;
  this.killsOnEnd=true;
  this.can(RunWith.TARGETTING);
  this.task(true);
}",0.9470588235294116
174504,"@Override public boolean proceed(EntityGem gem){
  return this.otherCow != null && this.otherCow.getGrowingAge() == 0 && gem.getHeldItem(EnumHand.MAIN_HAND).getItem() == Items.BUCKET;
}","@Override public boolean proceed(EntityGem gem){
  return this.otherCow != null && this.otherCow.getGrowingAge() == 0 && gem.getHeldItem(EnumHand.MAIN_HAND).getItem() == Items.BUCKET && gem.isSoldier;
}",0.9560723514211886
174505,"public static void registerGemYields(){
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.77,""String_Node_Str"");
  EntityRuby.RUBY_YIELDS.put(Blocks.LAVA.getDefaultState(),0.55);
  EntityRuby.RUBY_YIELDS.put(Blocks.MAGMA.getDefaultState(),0.77);
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityRuby.RUBY_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,1.99,""String_Node_Str"");
  EntitySapphire.SAPPHIRE_YIELDS.put(Blocks.ICE.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.22,""String_Node_Str"");
  EntitySapphire.SAPPHIRE_YIELDS.put(Blocks.PACKED_ICE.getDefaultState(),0.99);
  EntitySapphire.SAPPHIRE_YIELDS.put(Blocks.SNOW.getDefaultState(),0.77);
  ModEntities.registerWithOreDictionary(EntitySapphire.SAPPHIRE_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,1.99,""String_Node_Str"");
  EntityPearl.PEARL_YIELDS.put(Blocks.CLAY.getDefaultState(),0.77);
  ModEntities.registerOreDictValue(EntityPearl.PEARL_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPearl.PEARL_YIELDS,0.55,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPearl.PEARL_YIELDS,0.77,""String_Node_Str"");
  EntityPearl.PEARL_YIELDS.put(Blocks.SOUL_SAND.getDefaultState(),0.44);
  EntityPearl.PEARL_YIELDS.put(Blocks.WATER.getDefaultState(),0.55);
  EntityPearl.PEARL_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.X),1.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.Y),1.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.Z),1.99);
  ModEntities.registerOreDictValue(EntityPearl.PEARL_YIELDS,5.99,""String_Node_Str"");
  EntityPearl.PEARL_YIELDS.put(Blocks.BLACK_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.BLUE_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.RED_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.YELLOW_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.GREEN_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.LIME_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.LIGHT_BLUE_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.WHITE_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.ORANGE_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.BROWN_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.GRAY_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.SILVER_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.CYAN_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.MAGENTA_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.PINK_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.PURPLE_SHULKER_BOX.getDefaultState(),5.99);
  ModEntities.registerWithOreDictionary(EntityPearl.PEARL_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EntityEnderPearl.ENDER_PEARL_YIELDS.put(Blocks.END_BRICKS.getDefaultState(),2.99);
  EntityEnderPearl.ENDER_PEARL_YIELDS.put(Blocks.END_STONE.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityBismuth.BISMUTH_YIELDS,""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.99,""String_Node_Str"");
  EntityPeridot.PERIDOT_YIELDS.put(Blocks.LAVA.getDefaultState(),0.33);
  EntityPeridot.PERIDOT_YIELDS.put(Blocks.MAGMA.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.55,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,5.99,""String_Node_Str"");
  EntityPeridot.PERIDOT_YIELDS.put(Blocks.END_BRICKS.getDefaultState(),5.99);
  ModEntities.registerWithOreDictionary(EntityPeridot.PERIDOT_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.33,""String_Node_Str"");
  EntityJasper.JASPER_YIELDS.put(Blocks.CLAY.getDefaultState(),0.22);
  EntityJasper.JASPER_YIELDS.put(Blocks.HARDENED_CLAY.getDefaultState(),0.44);
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.99,""String_Node_Str"");
  EntityJasper.JASPER_YIELDS.put(Blocks.STAINED_HARDENED_CLAY.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityJasper.JASPER_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.66,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityAmethyst.AMETHYST_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  EntityRoseQuartz.ROSE_QUARTZ_YIELDS.put(Blocks.PURPUR_BLOCK.getDefaultState(),0.11);
  EntityRoseQuartz.ROSE_QUARTZ_YIELDS.put(Blocks.PURPUR_PILLAR.getDefaultState(),0.11);
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,1.99,""String_Node_Str"");
  EntityRoseQuartz.ROSE_QUARTZ_YIELDS.put(Blocks.SANDSTONE.getDefaultState(),0.33);
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityLapisLazuli.LAPIS_LAZULI_YIELDS,0.44,""String_Node_Str"");
  EntityLapisLazuli.LAPIS_LAZULI_YIELDS.put(Blocks.WATER.getDefaultState(),0.22);
  ModEntities.registerWithOreDictionary(EntityLapisLazuli.LAPIS_LAZULI_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EntityCarnelian.CARNELIAN_YIELDS.put(Blocks.CLAY.getDefaultState(),0.22);
  EntityCarnelian.CARNELIAN_YIELDS.put(Blocks.HARDENED_CLAY.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.77,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,1.99,""String_Node_Str"");
  EntityCarnelian.CARNELIAN_YIELDS.put(Blocks.RED_SANDSTONE.getDefaultState(),0.66);
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityCarnelian.CARNELIAN_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityCitrine.CITRINE_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,0.88,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,1.99,""String_Node_Str"");
  EntityAgate.AGATE_YIELDS.put(Blocks.SOUL_SAND.getDefaultState(),0.77);
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,5.99,""String_Node_Str"");
  EntityAgate.AGATE_YIELDS.put(Blocks.END_BRICKS.getDefaultState(),5.99);
  ModEntities.registerWithOreDictionary(EntityAgate.AGATE_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EntityAquamarine.AQUAMARINE_YIELDS.put(Blocks.ICE.getDefaultState(),0.33);
  ModEntities.registerOreDictValue(EntityAquamarine.AQUAMARINE_YIELDS,0.66,""String_Node_Str"");
  EntityAquamarine.AQUAMARINE_YIELDS.put(Blocks.PACKED_ICE.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityAquamarine.AQUAMARINE_YIELDS,1.99,""String_Node_Str"");
  EntityAquamarine.AQUAMARINE_YIELDS.put(Blocks.WATER.getDefaultState(),0.11);
  ModEntities.registerWithOreDictionary(EntityAquamarine.AQUAMARINE_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,0.55,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,0.99,""String_Node_Str"");
  EntityHessonite.HESSONITE_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.X),0.99);
  EntityHessonite.HESSONITE_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.Y),0.99);
  EntityHessonite.HESSONITE_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.Z),0.99);
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.45,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityTopaz.TOPAZ_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRutile.RUTILE_YIELDS,0.99,""String_Node_Str"");
  EntityRutile.RUTILE_YIELDS.put(Blocks.LAVA.getDefaultState(),0.50);
  EntityRutile.RUTILE_YIELDS.put(Blocks.MAGMA.getDefaultState(),0.75);
  ModEntities.registerOreDictValue(EntityRutile.RUTILE_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRutile.RUTILE_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityRutile.RUTILE_YIELDS,""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRutile.RUTILE_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityZircon.ZIRCON_YIELDS,2.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityZircon.ZIRCON_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityZircon.ZIRCON_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityZircon.ZIRCON_YIELDS,0.45,""String_Node_Str"");
  EntityZircon.ZIRCON_YIELDS.put(Blocks.MAGMA.getDefaultState(),0.50);
  EntityZircon.ZIRCON_YIELDS.put(Blocks.LAVA.getDefaultState(),0.25);
  ModEntities.registerWithOreDictionary(EntityZircon.ZIRCON_YIELDS,""String_Node_Str"",""String_Node_Str"");
}","public static void registerGemYields(){
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.77,""String_Node_Str"");
  EntityRuby.RUBY_YIELDS.put(Blocks.LAVA.getDefaultState(),0.55);
  EntityRuby.RUBY_YIELDS.put(Blocks.MAGMA.getDefaultState(),0.77);
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityRuby.RUBY_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRuby.RUBY_YIELDS,1.99,""String_Node_Str"");
  EntitySapphire.SAPPHIRE_YIELDS.put(Blocks.ICE.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.22,""String_Node_Str"");
  EntitySapphire.SAPPHIRE_YIELDS.put(Blocks.PACKED_ICE.getDefaultState(),0.99);
  EntitySapphire.SAPPHIRE_YIELDS.put(Blocks.SNOW.getDefaultState(),0.77);
  ModEntities.registerWithOreDictionary(EntitySapphire.SAPPHIRE_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntitySapphire.SAPPHIRE_YIELDS,1.99,""String_Node_Str"");
  EntityPearl.PEARL_YIELDS.put(Blocks.CLAY.getDefaultState(),0.77);
  ModEntities.registerOreDictValue(EntityPearl.PEARL_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPearl.PEARL_YIELDS,0.55,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPearl.PEARL_YIELDS,0.77,""String_Node_Str"");
  EntityPearl.PEARL_YIELDS.put(Blocks.SOUL_SAND.getDefaultState(),0.44);
  EntityPearl.PEARL_YIELDS.put(Blocks.WATER.getDefaultState(),0.55);
  EntityPearl.PEARL_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.X),1.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.Y),1.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.Z),1.99);
  ModEntities.registerOreDictValue(EntityPearl.PEARL_YIELDS,5.99,""String_Node_Str"");
  EntityPearl.PEARL_YIELDS.put(Blocks.BLACK_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.BLUE_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.RED_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.YELLOW_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.GREEN_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.LIME_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.LIGHT_BLUE_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.WHITE_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.ORANGE_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.BROWN_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.GRAY_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.SILVER_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.CYAN_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.MAGENTA_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.PINK_SHULKER_BOX.getDefaultState(),5.99);
  EntityPearl.PEARL_YIELDS.put(Blocks.PURPLE_SHULKER_BOX.getDefaultState(),5.99);
  ModEntities.registerWithOreDictionary(EntityPearl.PEARL_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EntityEnderPearl.ENDER_PEARL_YIELDS.put(Blocks.END_BRICKS.getDefaultState(),2.99);
  EntityEnderPearl.ENDER_PEARL_YIELDS.put(Blocks.END_STONE.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityBismuth.BISMUTH_YIELDS,""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityBismuth.BISMUTH_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.99,""String_Node_Str"");
  EntityPeridot.PERIDOT_YIELDS.put(Blocks.LAVA.getDefaultState(),0.33);
  EntityPeridot.PERIDOT_YIELDS.put(Blocks.MAGMA.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.55,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,5.99,""String_Node_Str"");
  EntityPeridot.PERIDOT_YIELDS.put(Blocks.END_BRICKS.getDefaultState(),5.99);
  ModEntities.registerWithOreDictionary(EntityPeridot.PERIDOT_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityPeridot.PERIDOT_YIELDS,0.33,""String_Node_Str"");
  EntityJasper.JASPER_YIELDS.put(Blocks.CLAY.getDefaultState(),0.22);
  EntityJasper.JASPER_YIELDS.put(Blocks.HARDENED_CLAY.getDefaultState(),0.44);
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.99,""String_Node_Str"");
  EntityJasper.JASPER_YIELDS.put(Blocks.STAINED_HARDENED_CLAY.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityJasper.JASPER_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityJasper.JASPER_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.66,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.44,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAmethyst.AMETHYST_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityAmethyst.AMETHYST_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  EntityRoseQuartz.ROSE_QUARTZ_YIELDS.put(Blocks.PURPUR_BLOCK.getDefaultState(),0.11);
  EntityRoseQuartz.ROSE_QUARTZ_YIELDS.put(Blocks.PURPUR_PILLAR.getDefaultState(),0.11);
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,1.99,""String_Node_Str"");
  EntityRoseQuartz.ROSE_QUARTZ_YIELDS.put(Blocks.SANDSTONE.getDefaultState(),0.33);
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityRoseQuartz.ROSE_QUARTZ_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityLapisLazuli.LAPIS_LAZULI_YIELDS,0.44,""String_Node_Str"");
  EntityLapisLazuli.LAPIS_LAZULI_YIELDS.put(Blocks.WATER.getDefaultState(),0.22);
  ModEntities.registerWithOreDictionary(EntityLapisLazuli.LAPIS_LAZULI_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EntityCarnelian.CARNELIAN_YIELDS.put(Blocks.CLAY.getDefaultState(),0.22);
  EntityCarnelian.CARNELIAN_YIELDS.put(Blocks.HARDENED_CLAY.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.77,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,1.99,""String_Node_Str"");
  EntityCarnelian.CARNELIAN_YIELDS.put(Blocks.RED_SANDSTONE.getDefaultState(),0.66);
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCarnelian.CARNELIAN_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityCarnelian.CARNELIAN_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,0.33,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityCitrine.CITRINE_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityCitrine.CITRINE_YIELDS,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,0.88,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,1.99,""String_Node_Str"");
  EntityAgate.AGATE_YIELDS.put(Blocks.SOUL_SAND.getDefaultState(),0.77);
  ModEntities.registerOreDictValue(EntityAgate.AGATE_YIELDS,5.99,""String_Node_Str"");
  EntityAgate.AGATE_YIELDS.put(Blocks.END_BRICKS.getDefaultState(),5.99);
  ModEntities.registerWithOreDictionary(EntityAgate.AGATE_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EntityAquamarine.AQUAMARINE_YIELDS.put(Blocks.ICE.getDefaultState(),0.33);
  ModEntities.registerOreDictValue(EntityAquamarine.AQUAMARINE_YIELDS,0.66,""String_Node_Str"");
  EntityAquamarine.AQUAMARINE_YIELDS.put(Blocks.PACKED_ICE.getDefaultState(),0.99);
  ModEntities.registerOreDictValue(EntityAquamarine.AQUAMARINE_YIELDS,1.99,""String_Node_Str"");
  EntityAquamarine.AQUAMARINE_YIELDS.put(Blocks.WATER.getDefaultState(),0.11);
  ModEntities.registerWithOreDictionary(EntityAquamarine.AQUAMARINE_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,0.55,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,0.99,""String_Node_Str"");
  EntityHessonite.HESSONITE_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.X),0.99);
  EntityHessonite.HESSONITE_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.Y),0.99);
  EntityHessonite.HESSONITE_YIELDS.put(Blocks.BONE_BLOCK.getDefaultState().withProperty(BlockRotatedPillar.AXIS,EnumFacing.Axis.Z),0.99);
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,1.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityHessonite.HESSONITE_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.45,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.11,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityTopaz.TOPAZ_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityTopaz.TOPAZ_YIELDS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRutile.RUTILE_YIELDS,0.99,""String_Node_Str"");
  EntityRutile.RUTILE_YIELDS.put(Blocks.LAVA.getDefaultState(),0.50);
  EntityRutile.RUTILE_YIELDS.put(Blocks.MAGMA.getDefaultState(),0.75);
  ModEntities.registerOreDictValue(EntityRutile.RUTILE_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRutile.RUTILE_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerWithOreDictionary(EntityRutile.RUTILE_YIELDS,""String_Node_Str"",""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityRutile.RUTILE_YIELDS,0.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityZircon.ZIRCON_YIELDS,2.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityZircon.ZIRCON_YIELDS,5.99,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityZircon.ZIRCON_YIELDS,0.22,""String_Node_Str"");
  ModEntities.registerOreDictValue(EntityZircon.ZIRCON_YIELDS,0.66,""String_Node_Str"");
  EntityZircon.ZIRCON_YIELDS.put(Blocks.MAGMA.getDefaultState(),0.66);
  EntityZircon.ZIRCON_YIELDS.put(Blocks.LAVA.getDefaultState(),0.44);
  ModEntities.registerWithOreDictionary(EntityZircon.ZIRCON_YIELDS,""String_Node_Str"",""String_Node_Str"");
}",0.992448966532284
174506,"public EnumActionResult onItemUse(EntityPlayer playerIn,World worldIn,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){
  if (!worldIn.isRemote) {
    if (worldIn.rand.nextInt(16) == 0) {
      ItemStack stack=playerIn.getHeldItem(hand);
      Entity spawningEntity=new EntitySteven(worldIn);
      spawningEntity.setPosition(pos.getX() + 0.5,pos.getY() + 1.0,pos.getZ() + 0.5);
      worldIn.spawnEntity(spawningEntity);
      if (!playerIn.capabilities.isCreativeMode) {
        stack.damageItem(1,playerIn);
      }
    }
 else {
      if (worldIn.rand.nextInt(3) == 0) {
        worldIn.setWorldTime(worldIn.rand.nextInt(24000) - 12000);
      }
 else       if (worldIn.rand.nextBoolean()) {
        if (worldIn.isRaining()) {
          worldIn.getWorldInfo().setCleanWeatherTime(worldIn.rand.nextInt(12000) + 1200);
          worldIn.getWorldInfo().setThunderTime(0);
          worldIn.getWorldInfo().setRainTime(0);
          worldIn.getWorldInfo().setRaining(false);
        }
 else {
          worldIn.getWorldInfo().setCleanWeatherTime(0);
          worldIn.getWorldInfo().setThunderTime(worldIn.rand.nextInt(12000) + 1200);
          worldIn.getWorldInfo().setRainTime(worldIn.rand.nextInt(12000) + 1200);
          worldIn.getWorldInfo().setRaining(true);
        }
      }
 else {
        for (int x=-4; x < 4; ++x) {
          for (int y=-4; y < 4; ++y) {
            for (int z=-4; z < 4; ++z) {
              BlockPos newp=pos.add(x,y,z);
              if (worldIn.rand.nextInt(3) != 0) {
                InjectorResult.drainBlock(worldIn,newp);
              }
            }
          }
        }
      }
    }
    return EnumActionResult.SUCCESS;
  }
  return EnumActionResult.PASS;
}","public EnumActionResult onItemUse(EntityPlayer playerIn,World worldIn,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){
  if (!worldIn.isRemote) {
    if (worldIn.rand.nextInt(16) == 0) {
      ItemStack stack=playerIn.getHeldItem(hand);
      Entity spawningEntity=new EntitySteven(worldIn);
      spawningEntity.setPosition(pos.getX() + 0.5,pos.getY() + 1.0,pos.getZ() + 0.5);
      worldIn.spawnEntity(spawningEntity);
      if (!playerIn.capabilities.isCreativeMode) {
        stack.damageItem(1,playerIn);
      }
    }
 else {
      if (worldIn.rand.nextInt(3) == 0) {
        worldIn.setWorldTime(worldIn.rand.nextInt(24000) - 12000);
      }
 else       if (worldIn.rand.nextBoolean()) {
        if (worldIn.isRaining()) {
          worldIn.getWorldInfo().setCleanWeatherTime(worldIn.rand.nextInt(12000) + 12000);
          worldIn.getWorldInfo().setThunderTime(0);
          worldIn.getWorldInfo().setRainTime(0);
          worldIn.getWorldInfo().setRaining(false);
        }
 else {
          worldIn.getWorldInfo().setCleanWeatherTime(0);
          worldIn.getWorldInfo().setThunderTime(worldIn.rand.nextInt(12000) + 12000);
          worldIn.getWorldInfo().setRainTime(worldIn.rand.nextInt(12000) + 12000);
          worldIn.getWorldInfo().setRaining(true);
        }
      }
 else       if (worldIn.rand.nextBoolean()) {
        if (worldIn.rand.nextBoolean()) {
          worldIn.getWorldInfo().setWorldTime(worldIn.getWorldTime() + worldIn.rand.nextInt(12000) + 12000);
        }
 else {
          worldIn.getWorldInfo().setWorldTime(worldIn.getWorldTime() - worldIn.rand.nextInt(12000) + 12000);
        }
      }
 else {
        for (int x=-4; x < 4; ++x) {
          for (int y=-4; y < 4; ++y) {
            for (int z=-4; z < 4; ++z) {
              BlockPos newp=pos.add(x,y,z);
              if (worldIn.rand.nextInt(3) != 0) {
                InjectorResult.drainBlock(worldIn,newp);
              }
            }
          }
        }
      }
    }
    return EnumActionResult.SUCCESS;
  }
  return EnumActionResult.PASS;
}",0.909377462568952
174507,"public static InjectorResult create(World world,BlockPos pos,boolean drain){
  HashMap<Class<EntityGem>,Double> resultTable=new HashMap<Class<EntityGem>,Double>();
  HashMap<Class<EntityGem>,Double> defectivity=new HashMap<Class<EntityGem>,Double>();
  HashMap<Class<EntityGem>,Double> friction=new HashMap<Class<EntityGem>,Double>();
  float drainedCount=0F;
  float baseMinerals=0F;
  boolean drainedChecked=false;
  System.out.println(""String_Node_Str"");
  for (  String gemType : ModEntities.GEMS.keySet()) {
    Class<EntityGem> gemClass=null;
    HashMap<IBlockState,Double> yield=null;
    double defectivityMultiplier=1.0F;
    boolean fieldFound=false;
    try {
      gemClass=(Class<EntityGem>)ModEntities.GEMS.get(gemType);
      yield=(HashMap<IBlockState,Double>)gemClass.getField((gemType + ""String_Node_Str"").toUpperCase()).get(null);
      defectivityMultiplier=(double)gemClass.getField((gemType + ""String_Node_Str"").toUpperCase()).get(null);
      fieldFound=true;
    }
 catch (    Exception e) {
    }
    if (fieldFound) {
      try {
        double pressureFactor=1.0;
        double depthFactor=1.0;
        if (world.provider.isSurfaceWorld()) {
          try {
            depthFactor=(double)gemClass.getField((gemType + ""String_Node_Str"").toUpperCase()).get(null);
            if (depthFactor > 0) {
              pressureFactor=depthFactor / pos.getY();
              depthFactor=Math.min(1.0,pressureFactor);
            }
 else {
              depthFactor=1.0;
            }
          }
 catch (          Exception e) {
          }
        }
        double defectivityRate=1.0;
        double frictionFactor=0.0;
        for (int x=-4; x <= 4; ++x) {
          for (int y=-4; y <= 4; ++y) {
            for (int z=-4; z <= 4; ++z) {
              BlockPos ore=pos.add(x,y,z);
              IBlockState state=world.getBlockState(ore);
              try {
                if (!resultTable.containsKey(gemClass)) {
                  resultTable.put(gemClass,0.0);
                }
                if (yield.containsKey(state)) {
                  double result=yield.get(state);
                  if (result < 1.98) {
                    result*=depthFactor;
                  }
                  resultTable.put(gemClass,resultTable.get(gemClass) + result);
                  frictionFactor+=0.0036;
                  defectivityRate-=0.2;
                }
 else {
                  ItemStack stack=new ItemStack(state.getBlock(),1,state.getBlock().getMetaFromState(state));
                  if (!stack.isEmpty()) {
                    int[] oreIDs=OreDictionary.getOreIDs(stack);
                    for (                    int oreID : oreIDs) {
                      if (OreDictionary.getOreName(oreID).startsWith(""String_Node_Str"") || OreDictionary.getOreName(oreID).startsWith(""String_Node_Str"")) {
                        defectivityRate-=0.2;
                      }
                    }
                  }
                }
                if (!drainedChecked) {
                  Block block=state.getBlock();
                  if (block == ModBlocks.DRAINED_BLOCK || block == Blocks.GRAVEL || block == Blocks.AIR) {
                    drainedCount+=1;
                  }
                }
                if (state.getMaterial() == Material.GRASS) {
                  defectivityRate-=0.4;
                  if (!drainedChecked) {
                    baseMinerals+=1;
                  }
                }
 else                 if (state.getMaterial() == Material.SAND || state.getMaterial() == Material.GROUND) {
                  defectivityRate-=0.1;
                }
              }
 catch (              Exception e) {
                KAGIC.instance.chatInfoMessage(""String_Node_Str"" + state.getBlock().getUnlocalizedName() + ""String_Node_Str"");
              }
            }
          }
        }
        drainedChecked=true;
        defectivity.put(gemClass,Math.max(0.0,defectivityRate * defectivityMultiplier));
        resultTable.put(gemClass,resultTable.get(gemClass));
        friction.put(gemClass,frictionFactor * pressureFactor);
        System.out.println(gemType + ""String_Node_Str"" + resultTable.get(gemClass)+ ""String_Node_Str""+ defectivity.get(gemClass)+ ""String_Node_Str""+ friction.get(gemClass)+ ""String_Node_Str""+ depthFactor);
      }
 catch (      Exception e) {
        System.out.println(gemType + ""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
  boolean canSpawnGem=false;
  Class<? extends EntityGem> mostLikelyGem=null;
  double highestYield=0.0;
  for (  Class<EntityGem> gemClass : resultTable.keySet()) {
    if (!gemClass.getName().contains(""String_Node_Str"")) {
      boolean forget=world.rand.nextBoolean();
      if (resultTable.get(gemClass) > 0.1 && world.rand.nextInt((int)(resultTable.get(gemClass) * 10) + 1) == 0) {
        highestYield=resultTable.get(gemClass);
        mostLikelyGem=gemClass;
        canSpawnGem=true;
      }
 else {
        double result=resultTable.get(gemClass);
        if (result == highestYield && result > 0) {
          highestYield=forget ? resultTable.get(gemClass) : highestYield;
          mostLikelyGem=forget ? gemClass : mostLikelyGem;
          canSpawnGem=true;
        }
 else         if (result > highestYield && result > 0) {
          highestYield=resultTable.get(gemClass);
          mostLikelyGem=gemClass;
          canSpawnGem=true;
        }
      }
    }
  }
  boolean mineralSpawned=false;
  if (highestYield <= 0.0 && (drainedCount - baseMinerals) / (9F * 9F * 9F) < InjectorResult.drainedPercentage) {
    ChunkPos c=world.getChunkFromBlockCoords(pos).getPos();
    int chunkPos=(c.x + c.z) % ModEntities.MINERALS.size();
    mostLikelyGem=ModEntities.MINERALS.get(Math.abs(chunkPos));
    mineralSpawned=true;
    canSpawnGem=true;
  }
  EntityGem gemSpawned=null;
  if (canSpawnGem) {
    try {
      gemSpawned=(EntityGem)(mostLikelyGem.getConstructors()[0].newInstance(world));
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + e.getMessage());
      canSpawnGem=false;
    }
  }
  ExitHole exitHole=null;
  if (drain && gemSpawned != null) {
    Double gemFriction=friction.get(gemSpawned.getClass());
    if (gemFriction == null) {
      gemFriction=0.0;
    }
    exitHole=ExitHole.create(world,pos,Math.ceil(gemSpawned.height),gemFriction >= 1.0F);
    exitHole.emerge(world);
    gemSpawned.setPosition(pos.getX() + 0.5,pos.getY(),pos.getZ() + 0.5);
  }
  if (drain) {
    for (int x=-4; x <= 4; ++x) {
      for (int y=-4; y <= 4; ++y) {
        for (int z=-4; z <= 4; ++z) {
          if (world.rand.nextBoolean()) {
            BlockPos ore=pos.add(x,y,z);
            drainBlock(world,ore);
          }
        }
      }
    }
  }
  return new InjectorResult(gemSpawned,pos,mineralSpawned ? 1.0 : (gemSpawned == null ? 0.0 : defectivity.get(gemSpawned.getClass())),!canSpawnGem,canSpawnGem ? friction.get(gemSpawned.getClass()) >= 1.0F : false,exitHole);
}","public static InjectorResult create(World world,BlockPos pos,boolean drain){
  HashMap<Class<EntityGem>,Double> resultTable=new HashMap<Class<EntityGem>,Double>();
  HashMap<Class<EntityGem>,Double> defectivity=new HashMap<Class<EntityGem>,Double>();
  HashMap<Class<EntityGem>,Double> friction=new HashMap<Class<EntityGem>,Double>();
  float drainedCount=0F;
  float baseMinerals=0F;
  boolean drainedChecked=false;
  System.out.println(""String_Node_Str"");
  for (  String gemType : ModEntities.GEMS.keySet()) {
    Class<EntityGem> gemClass=null;
    HashMap<IBlockState,Double> yield=null;
    double defectivityMultiplier=1.0F;
    boolean fieldFound=false;
    try {
      gemClass=(Class<EntityGem>)ModEntities.GEMS.get(gemType);
      yield=(HashMap<IBlockState,Double>)gemClass.getField((gemType + ""String_Node_Str"").toUpperCase()).get(null);
      defectivityMultiplier=(double)gemClass.getField((gemType + ""String_Node_Str"").toUpperCase()).get(null);
      fieldFound=true;
    }
 catch (    Exception e) {
    }
    if (fieldFound) {
      try {
        double pressureFactor=1.0;
        double depthFactor=1.0;
        if (world.provider.isSurfaceWorld()) {
          try {
            depthFactor=(double)gemClass.getField((gemType + ""String_Node_Str"").toUpperCase()).get(null);
            if (depthFactor > 0) {
              pressureFactor=depthFactor / pos.getY();
              depthFactor=Math.min(1.0,pressureFactor);
            }
 else {
              depthFactor=1.0;
            }
          }
 catch (          Exception e) {
          }
        }
        double defectivityRate=1.0;
        double frictionFactor=0.0;
        for (int x=-4; x <= 4; ++x) {
          for (int y=-4; y <= 4; ++y) {
            for (int z=-4; z <= 4; ++z) {
              BlockPos ore=pos.add(x,y,z);
              IBlockState state=world.getBlockState(ore);
              try {
                if (!resultTable.containsKey(gemClass)) {
                  resultTable.put(gemClass,0.0);
                }
                if (yield.containsKey(state)) {
                  double result=yield.get(state);
                  if (result > 1.98) {
                    result*=Math.max(pressureFactor,1.0);
                  }
 else {
                    result*=depthFactor;
                  }
                  resultTable.put(gemClass,resultTable.get(gemClass) + result);
                  frictionFactor+=0.0036;
                  defectivityRate-=0.2;
                }
 else {
                  ItemStack stack=new ItemStack(state.getBlock(),1,state.getBlock().getMetaFromState(state));
                  if (!stack.isEmpty()) {
                    int[] oreIDs=OreDictionary.getOreIDs(stack);
                    for (                    int oreID : oreIDs) {
                      if (OreDictionary.getOreName(oreID).startsWith(""String_Node_Str"") || OreDictionary.getOreName(oreID).startsWith(""String_Node_Str"")) {
                        defectivityRate-=0.2;
                      }
                    }
                  }
                }
                if (!drainedChecked) {
                  Block block=state.getBlock();
                  if (block == ModBlocks.DRAINED_BLOCK || block == Blocks.GRAVEL || block == Blocks.AIR) {
                    drainedCount+=1;
                  }
                }
                if (state.getMaterial() == Material.GRASS) {
                  defectivityRate-=0.4;
                  if (!drainedChecked) {
                    baseMinerals+=1;
                  }
                }
 else                 if (state.getMaterial() == Material.SAND || state.getMaterial() == Material.GROUND) {
                  defectivityRate-=0.1;
                }
              }
 catch (              Exception e) {
                KAGIC.instance.chatInfoMessage(""String_Node_Str"" + state.getBlock().getUnlocalizedName() + ""String_Node_Str"");
              }
            }
          }
        }
        drainedChecked=true;
        defectivity.put(gemClass,Math.max(0.0,defectivityRate * defectivityMultiplier));
        resultTable.put(gemClass,resultTable.get(gemClass));
        friction.put(gemClass,frictionFactor * pressureFactor);
        System.out.println(gemType + ""String_Node_Str"" + resultTable.get(gemClass)+ ""String_Node_Str""+ defectivity.get(gemClass)+ ""String_Node_Str""+ friction.get(gemClass)+ ""String_Node_Str""+ depthFactor);
      }
 catch (      Exception e) {
        System.out.println(gemType + ""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
  boolean canSpawnGem=false;
  Class<? extends EntityGem> mostLikelyGem=null;
  double highestYield=0.0;
  for (  Class<EntityGem> gemClass : resultTable.keySet()) {
    if (!gemClass.getName().contains(""String_Node_Str"")) {
      boolean forget=world.rand.nextBoolean();
      if (resultTable.get(gemClass) > 0.1 && world.rand.nextInt((int)(resultTable.get(gemClass) * 10) + 1) == 0) {
        highestYield=resultTable.get(gemClass);
        mostLikelyGem=gemClass;
        canSpawnGem=true;
      }
 else {
        double result=resultTable.get(gemClass);
        if (result == highestYield && result > 0) {
          highestYield=forget ? resultTable.get(gemClass) : highestYield;
          mostLikelyGem=forget ? gemClass : mostLikelyGem;
          canSpawnGem=true;
        }
 else         if (result > highestYield && result > 0) {
          highestYield=resultTable.get(gemClass);
          mostLikelyGem=gemClass;
          canSpawnGem=true;
        }
      }
    }
  }
  boolean mineralSpawned=false;
  if (highestYield <= 0.0 && (drainedCount - baseMinerals) / (9F * 9F * 9F) < InjectorResult.drainedPercentage) {
    ChunkPos c=world.getChunkFromBlockCoords(pos).getPos();
    int chunkPos=(c.x + c.z) % ModEntities.MINERALS.size();
    mostLikelyGem=ModEntities.MINERALS.get(Math.abs(chunkPos));
    mineralSpawned=true;
    canSpawnGem=true;
  }
  EntityGem gemSpawned=null;
  if (canSpawnGem) {
    try {
      gemSpawned=(EntityGem)(mostLikelyGem.getConstructors()[0].newInstance(world));
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + e.getMessage());
      canSpawnGem=false;
    }
  }
  ExitHole exitHole=null;
  if (drain && gemSpawned != null) {
    Double gemFriction=friction.get(gemSpawned.getClass());
    if (gemFriction == null) {
      gemFriction=0.0;
    }
    exitHole=ExitHole.create(world,pos,Math.ceil(gemSpawned.height),gemFriction >= 1.0F);
    exitHole.emerge(world);
    gemSpawned.setPosition(pos.getX() + 0.5,pos.getY(),pos.getZ() + 0.5);
  }
  if (drain) {
    for (int x=-4; x <= 4; ++x) {
      for (int y=-4; y <= 4; ++y) {
        for (int z=-4; z <= 4; ++z) {
          if (world.rand.nextBoolean()) {
            BlockPos ore=pos.add(x,y,z);
            drainBlock(world,ore);
          }
        }
      }
    }
  }
  return new InjectorResult(gemSpawned,pos,mineralSpawned ? 1.0 : (gemSpawned == null ? 0.0 : defectivity.get(gemSpawned.getClass())),!canSpawnGem,canSpawnGem ? friction.get(gemSpawned.getClass()) >= 1.0F : false,exitHole);
}",0.9937402190923318
174508,"public void injectGemSeed(World worldIn,BlockPos pos){
  if (!(worldIn.getBlockState(pos.up()).getBlock() instanceof BlockIncubator)) {
    Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",true);
  }
 else   if (!(worldIn.getBlockState(pos.down()).getBlock() instanceof BlockGemDrill)) {
    Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",true);
  }
 else   if (this.isEquipped) {
    int newPosY=this.calcDistance(worldIn,pos);
    if (newPosY > 5) {
      worldIn.setBlockState(new BlockPos(pos.getX(),newPosY,pos.getZ()),ModBlocks.GEM_SEED.getDefaultState());
      worldIn.setBlockState(pos,ModBlocks.INJECTOR.getDefaultState().withProperty(FACING,worldIn.getBlockState(pos).getValue(FACING)));
      worldIn.playSound(pos.getX(),pos.getY(),pos.getZ(),SoundEvents.BLOCK_PISTON_EXTEND,SoundCategory.NEUTRAL,1.0F,1.0F,true);
      worldIn.playSound(null,pos,ModSounds.BLOCK_INJECTOR_FIRE,SoundCategory.BLOCKS,512.0F,1.0F);
      Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",false,pos.getX(),newPosY,pos.getZ());
      Injector.awardNearbyPlayers(worldIn,pos);
    }
 else {
      Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",true);
    }
  }
 else {
    Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",true);
  }
}","public void injectGemSeed(World worldIn,BlockPos pos){
  if (!(worldIn.getBlockState(pos.up()).getBlock() instanceof BlockIncubator)) {
    Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",true);
  }
 else   if (!(worldIn.getBlockState(pos.down()).getBlock() instanceof BlockGemDrill)) {
    Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",true);
  }
 else   if (this.isEquipped) {
    int newPosY=this.calcDistance(worldIn,pos);
    if (newPosY > 5) {
      worldIn.setBlockState(new BlockPos(pos.getX(),newPosY,pos.getZ()),ModBlocks.GEM_SEED.getDefaultState());
      worldIn.setBlockState(pos,ModBlocks.INJECTOR.getDefaultState().withProperty(FACING,worldIn.getBlockState(pos).getValue(FACING)));
      worldIn.playSound(pos.getX(),pos.getY(),pos.getZ(),SoundEvents.BLOCK_PISTON_EXTEND,SoundCategory.NEUTRAL,1.0F,1.0F,true);
      worldIn.playSound(null,pos,ModSounds.BLOCK_INJECTOR_FIRE,SoundCategory.BLOCKS,1000.0F,1.0F);
      Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",false,pos.getX(),newPosY,pos.getZ());
      Injector.awardNearbyPlayers(worldIn,pos);
    }
 else {
      Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",true);
    }
  }
 else {
    Injector.tellNearbyPlayers(worldIn,pos,""String_Node_Str"",true);
  }
}",0.9980276134122288
174509,"public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (this.isTamed()) {
        if (this.isOwner(player)) {
          if (DyeUtils.isDye(stack)) {
            return true;
          }
 else           if (!this.isCoreItem(stack) && stack.getItem() != Item.getItemFromBlock(Blocks.WOOL) && stack.getItem() != Items.SHEARS) {
            this.openGUI(player);
            this.playObeySound();
            return true;
          }
        }
      }
    }
  }
  return super.processInteract(player,hand);
}","public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (this.isTamed()) {
        if (this.isOwner(player)) {
          if (DyeUtils.isDye(stack)) {
            return true;
          }
        }
      }
    }
  }
  return super.processInteract(player,hand);
}",0.6347992351816444
174510,"public void itemDataToGemData(int data){
  this.setSpecial(data);
  this.setSkinColor(this.generateSkinColor());
  this.setHairStyle(this.generateHairStyle());
  this.setHairColor(this.generateHairColor());
  if (this.getSpecial() == 1) {
    this.nativeColor=11;
  }
 else {
    this.nativeColor=14;
  }
}","public void itemDataToGemData(int data){
  this.setSpecial(data);
  this.setSkinColor(this.generateSkinColor());
  this.setHairStyle(this.generateHairStyle());
  this.setHairColor(this.generateHairColor());
  this.setGemColor(this.generateGemColor());
  if (this.getSpecial() == 1) {
    this.nativeColor=11;
  }
 else {
    this.nativeColor=14;
  }
}",0.9315068493150684
174511,"public RenderAquamarine(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelAquamarine(),0.25F);
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isBirthday()) {
    this.addLayer(new LayerBirthdayHat(this));
  }
 else   if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
 else   if (KAGIC.isChristmas()) {
    this.addLayer(new LayerSantaHat(this));
  }
}","public RenderAquamarine(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelAquamarine(),0.25F);
  this.addLayer(new LayerAquamarineItem(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isBirthday()) {
    this.addLayer(new LayerBirthdayHat(this));
  }
 else   if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
 else   if (KAGIC.isChristmas()) {
    this.addLayer(new LayerSantaHat(this));
  }
}",0.9525691699604744
174512,"public RenderSapphire(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelSapphire(),0.25F);
  this.addLayer(new LayerSkin(this,0.25F));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerNoDyeOverlay(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this,0.5F));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isBirthday()) {
    this.addLayer(new LayerBirthdayHat(this));
  }
 else   if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
 else   if (KAGIC.isChristmas()) {
    this.addLayer(new LayerSantaHat(this));
  }
}","public RenderSapphire(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelSapphire(),0.25F);
  this.addLayer(new LayerSapphireItem(this));
  this.addLayer(new LayerSkin(this,0.25F));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerNoDyeOverlay(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this,0.5F));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isBirthday()) {
    this.addLayer(new LayerBirthdayHat(this));
  }
 else   if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
 else   if (KAGIC.isChristmas()) {
    this.addLayer(new LayerSantaHat(this));
  }
}",0.9638364779874212
174513,"private void renderHeldItem(EntityAgate entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
    boolean flag=handSide == EnumHandSide.LEFT;
    GlStateManager.translate((float)(flag ? -1 : 1) / 16.0F,0.125F,-0.6F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
    GlStateManager.popMatrix();
  }
}","private void renderHeldItem(EntityAgate entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
    boolean flag=handSide == EnumHandSide.LEFT;
    GlStateManager.translate((float)(flag ? -1 : 1) / 8.0F,0.125F,-0.6F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
    GlStateManager.popMatrix();
  }
}",0.9976905311778292
174514,"private void renderHeldItem(EntityBismuth entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
    boolean flag=handSide == EnumHandSide.LEFT;
    GlStateManager.translate((float)(flag ? -1 : 1) / 16.0F,0.125F,-0.6F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
    GlStateManager.popMatrix();
  }
}","private void renderHeldItem(EntityBismuth entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
    boolean flag=handSide == EnumHandSide.LEFT;
    GlStateManager.translate((float)(flag ? -1 : 1) / 3.25F,0.125F,-0.6F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
    GlStateManager.popMatrix();
  }
}",0.9938650306748468
174515,"private void renderHeldItem(EntityGem entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
    boolean flag=handSide == EnumHandSide.LEFT;
    GlStateManager.translate((float)(flag ? -1 : 1) / 16.0F,0.125F,-0.6F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
    GlStateManager.popMatrix();
  }
}","private void renderHeldItem(EntityGem entity,ItemStack stack,ItemCameraTransforms.TransformType camera,EnumHandSide handSide){
  if (!stack.isEmpty()) {
    GlStateManager.pushMatrix();
    if (entity.isSneaking()) {
      GlStateManager.translate(0.0F,0.2F,0.0F);
    }
    this.setSide(handSide);
    GlStateManager.rotate(-90.0F,1.0F,0.0F,0.0F);
    GlStateManager.rotate(180.0F,0.0F,1.0F,0.0F);
    boolean flag=handSide == EnumHandSide.LEFT;
    GlStateManager.translate((float)(flag ? -1 : 1) / 8.0F,0.125F,-0.6F);
    Minecraft.getMinecraft().getItemRenderer().renderItemSide(entity,stack,camera,flag);
    GlStateManager.popMatrix();
  }
}",0.9976833976833976
174516,"public boolean isOwner(EntityLivingBase entityIn){
  if (this.servitude == EntityGem.SERVE_HUMAN) {
    if (entityIn instanceof EntityPlayer) {
      EntityPlayer playerIn=(EntityPlayer)entityIn;
      if (playerIn.getUniqueID().equals(this.getOwnerId())) {
        return true;
      }
 else {
        for (        UUID ownerId : this.jointOwners) {
          if (playerIn.getUniqueID().equals(ownerId)) {
            return true;
          }
        }
      }
    }
    if (entityIn.getHeldItemMainhand().getItem() == ModItems.COMMANDER_STAFF) {
      return this.isOwnerId(ModItems.COMMANDER_STAFF.getOwner(entityIn.getHeldItemMainhand()));
    }
  }
 else   if (this.servitude == EntityGem.SERVE_BLUE_DIAMOND) {
    return entityIn instanceof EntityBlueDiamond;
  }
 else   if (this.servitude == EntityGem.SERVE_YELLOW_DIAMOND) {
    return entityIn instanceof EntityYellowDiamond;
  }
  return false;
}","public boolean isOwner(EntityLivingBase entityIn){
  if (entityIn != null) {
    if (this.servitude == EntityGem.SERVE_HUMAN) {
      if (entityIn instanceof EntityPlayer) {
        EntityPlayer playerIn=(EntityPlayer)entityIn;
        if (playerIn.getUniqueID().equals(this.getOwnerId())) {
          return true;
        }
 else {
          for (          UUID ownerId : this.jointOwners) {
            if (playerIn.getUniqueID().equals(ownerId)) {
              return true;
            }
          }
        }
      }
      if (entityIn.getHeldItemMainhand().getItem() == ModItems.COMMANDER_STAFF) {
        return this.isOwnerId(ModItems.COMMANDER_STAFF.getOwner(entityIn.getHeldItemMainhand()));
      }
    }
 else     if (this.servitude == EntityGem.SERVE_BLUE_DIAMOND) {
      return entityIn instanceof EntityBlueDiamond;
    }
 else     if (this.servitude == EntityGem.SERVE_YELLOW_DIAMOND) {
      return entityIn instanceof EntityYellowDiamond;
    }
  }
  return false;
}",0.8879492600422833
174517,"/** 
 * Methods related to entity combat.                     
 */
public boolean attackEntityFrom(DamageSource source,float amount){
  if (this.getHeldEntities().isEmpty() || source.isUnblockable()) {
    return super.attackEntityFrom(source,amount);
  }
  return false;
}","/** 
 * Methods related to entity combat.                     
 */
public boolean attackEntityFrom(DamageSource source,float amount){
  return super.attackEntityFrom(source,amount);
}",0.8026315789473685
174518,"/** 
 * Methods related to living.                            
 */
public void onLivingUpdate(){
  if (this.isFusion()) {
    this.whenFused();
  }
  if (!this.world.isRemote) {
    for (int i=0; i < this.heldEntities.size(); ++i) {
      EntityLivingBase entity=this.heldEntities.get(i);
      if (entity != null && entity.isEntityAlive()) {
        double[] offset=new double[]{0,this.height,0};
        if (this.isFusion()) {
switch (i) {
case 0:
            offset=new double[]{1,1,-1};
          break;
case 1:
        offset=new double[]{-1,1,-1};
      break;
case 2:
    offset=new double[]{1,1,1};
  break;
case 3:
offset=new double[]{-1,1,1};
break;
case 4:
offset=new double[]{1,2,-1};
break;
case 5:
offset=new double[]{-1,2,-1};
break;
case 6:
offset=new double[]{1,2,1};
break;
case 7:
offset=new double[]{-1,2,1};
break;
case 8:
offset=new double[]{0,1,-1};
break;
case 9:
offset=new double[]{0,1,1};
break;
case 10:
offset=new double[]{-1,1,0};
break;
case 11:
offset=new double[]{1,1,0};
break;
case 12:
offset=new double[]{0,2,-1};
break;
case 13:
offset=new double[]{0,2,1};
break;
case 14:
offset=new double[]{-1,2,0};
break;
case 15:
offset=new double[]{1,2,0};
break;
default :
offset=new double[]{0,1.5,0};
if (entity.ticksExisted % 10 == 0) {
entity.attackEntityFrom(DamageSource.IN_WALL,1.0F);
}
}
}
entity.setPositionAndRotation(this.posX + offset[0],this.posY + offset[1],this.posZ + offset[2],this.rotationYaw,this.rotationPitch);
entity.motionX=0;
entity.motionY=0;
entity.motionZ=0;
}
 else if (this.isFusion()) {
this.heldEntities.remove(i);
--i;
}
}
if (this.heldEntities.isEmpty()) {
this.addHeldEntity(null);
}
 else if (this.isFusion()) {
this.motionX=0;
this.motionZ=0;
}
}
super.onLivingUpdate();
}","/** 
 * Methods related to living.                            
 */
public void onLivingUpdate(){
  if (this.isFusion()) {
    this.whenFused();
  }
  if (!this.world.isRemote) {
    for (int i=0; i < this.heldEntities.size(); ++i) {
      EntityLivingBase entity=this.heldEntities.get(i);
      if (entity != null && (entity.isEntityAlive() || entity.getDistanceSq(this) < 16)) {
        double[] offset=new double[]{0,this.height,0};
        if (this.isFusion()) {
switch (i) {
case 0:
            offset=new double[]{1,1,-1};
          break;
case 1:
        offset=new double[]{-1,1,-1};
      break;
case 2:
    offset=new double[]{1,1,1};
  break;
case 3:
offset=new double[]{-1,1,1};
break;
case 4:
offset=new double[]{1,2,-1};
break;
case 5:
offset=new double[]{-1,2,-1};
break;
case 6:
offset=new double[]{1,2,1};
break;
case 7:
offset=new double[]{-1,2,1};
break;
case 8:
offset=new double[]{0,1,-1};
break;
case 9:
offset=new double[]{0,1,1};
break;
case 10:
offset=new double[]{-1,1,0};
break;
case 11:
offset=new double[]{1,1,0};
break;
case 12:
offset=new double[]{0,2,-1};
break;
case 13:
offset=new double[]{0,2,1};
break;
case 14:
offset=new double[]{-1,2,0};
break;
case 15:
offset=new double[]{1,2,0};
break;
default :
offset=new double[]{0,1.5,0};
if (entity.ticksExisted % 10 == 0) {
entity.attackEntityFrom(DamageSource.IN_WALL,1.0F);
}
}
}
entity.setPositionAndRotation(this.posX + offset[0],this.posY + offset[1],this.posZ + offset[2],this.rotationYaw,this.rotationPitch);
entity.motionX=0;
entity.motionY=0;
entity.motionZ=0;
}
 else if (this.isFusion()) {
this.heldEntities.remove(i);
--i;
}
}
if (this.heldEntities.isEmpty()) {
this.dataManager.set(HOLDING,false);
}
 else if (this.isFusion()) {
this.motionX=0;
this.motionZ=0;
}
}
super.onLivingUpdate();
}",0.976691301876066
174519,"public ModelLapisLazuli(){
  super(0.0F,0.0F,64,64);
  this.bipedHead=new ModelRenderer(this,0,0);
  this.bipedHead.addBox(-4F,-8F,-4F,8,8,8);
  this.bipedHead.setRotationPoint(0F,0F,0F);
  this.bipedHeadwear=new ModelRenderer(this,32,0);
  this.bipedHeadwear.addBox(-4F,-8F,-4F,8,8,8,1.1F);
  this.bipedHeadwear.setRotationPoint(0F,0F,0F);
  this.bipedBody=new ModelRenderer(this,8,16);
  this.bipedBody.addBox(-3F,0F,-2F,6,12,4);
  this.bipedBody.setRotationPoint(0F,0F,0F);
  this.bipedRightWing=new ModelRenderer(this,0,32);
  this.bipedRightWing.addBox(0F,-2F,2F,10,20,1);
  this.bipedRightWing.setRotationPoint(-5F,0.5F,0F);
  this.bipedLeftWing=new ModelRenderer(this,32,32);
  this.bipedLeftWing.addBox(-10F,-2F,2F,10,20,1);
  this.bipedLeftWing.setRotationPoint(-5F,0.5F,0F);
  this.bipedRightArm=new ModelRenderer(this,0,16);
  this.bipedRightArm.addBox(0F,0F,-1F,2,12,2);
  this.bipedRightArm.setRotationPoint(0F,0F,0F);
  this.bipedLeftArm=new ModelRenderer(this,0,16);
  this.bipedLeftArm.addBox(-2F,0F,-1F,2,12,2);
  this.bipedLeftArm.setRotationPoint(0F,0F,0F);
  this.bipedRightLeg=new ModelRenderer(this,28,16);
  this.bipedRightLeg.addBox(1F,0F,-1F,2,12,2);
  this.bipedRightLeg.setRotationPoint(0F,12F,0F);
  this.bipedLeftLeg=new ModelRenderer(this,28,16);
  this.bipedLeftLeg.addBox(-3F,0F,-1F,2,12,2);
  this.bipedLeftLeg.setRotationPoint(0F,12F,0F);
}","public ModelLapisLazuli(){
  super(0.0F,0.0F,64,64);
  this.bipedHead=(new ModelRenderer(this,0,0)).setTextureSize(64,128);
  this.bipedHead.addBox(-4F,-8F,-4F,8,8,8);
  this.bipedHead.setRotationPoint(0F,0F,0F);
  this.bipedHeadwear=(new ModelRenderer(this,32,0)).setTextureSize(64,128);
  this.bipedHeadwear.addBox(-4F,-8F,-4F,8,8,8,1.1F);
  this.bipedHeadwear.setRotationPoint(0F,0F,0F);
  this.bipedBody=(new ModelRenderer(this,8,16)).setTextureSize(64,128);
  this.bipedBody.addBox(-3F,0F,-2F,6,12,4);
  this.bipedBody.setRotationPoint(0F,0F,0F);
  this.bipedRightWing=(new ModelRenderer(this,0,32)).setTextureSize(64,128);
  this.bipedRightWing.addBox(0F,-2F,2F,10,20,1);
  this.bipedRightWing.setRotationPoint(-5F,0.5F,0F);
  this.bipedLeftWing=(new ModelRenderer(this,32,32)).setTextureSize(64,128);
  this.bipedLeftWing.addBox(-10F,-2F,2F,10,20,1);
  this.bipedLeftWing.setRotationPoint(-5F,0.5F,0F);
  this.bipedRightArm=(new ModelRenderer(this,0,16)).setTextureSize(64,128);
  this.bipedRightArm.addBox(0F,0F,-1F,2,12,2);
  this.bipedRightArm.setRotationPoint(0F,0F,0F);
  this.bipedLeftArm=(new ModelRenderer(this,0,16)).setTextureSize(64,128);
  this.bipedLeftArm.addBox(-2F,0F,-1F,2,12,2);
  this.bipedLeftArm.setRotationPoint(0F,0F,0F);
  this.bipedRightLeg=(new ModelRenderer(this,28,16)).setTextureSize(64,128);
  this.bipedRightLeg.addBox(1F,0F,-1F,2,12,2);
  this.bipedRightLeg.setRotationPoint(0F,12F,0F);
  this.bipedLeftLeg=(new ModelRenderer(this,28,16)).setTextureSize(64,128);
  this.bipedLeftLeg.addBox(-3F,0F,-1F,2,12,2);
  this.bipedLeftLeg.setRotationPoint(0F,12F,0F);
  if (KAGIC.isHalloween()) {
    float hatHeight=-1F;
    this.witchHat=(new ModelRenderer(this)).setTextureSize(64,128);
    this.witchHat.setRotationPoint(-6.0F,-10.03125F,-6.0F);
    this.witchHat.setTextureOffset(0,64).addBox(0.0F,hatHeight,0.0F,12,2,12);
    this.bipedHead.addChild(this.witchHat);
    ModelRenderer middle=(new ModelRenderer(this)).setTextureSize(64,128);
    middle.setRotationPoint(2.75F,-4.0F,3.0F);
    middle.setTextureOffset(0,78).addBox(0.0F,hatHeight,0.0F,7,4,7);
    middle.rotateAngleX=-0.05235988F;
    middle.rotateAngleZ=0.02617994F;
    this.witchHat.addChild(middle);
    ModelRenderer top=(new ModelRenderer(this)).setTextureSize(64,128);
    top.setRotationPoint(1.75F,-4.0F,2.0F);
    top.setTextureOffset(0,89).addBox(0.0F,hatHeight,0.0F,4,4,4);
    top.rotateAngleX=-0.10471976F;
    top.rotateAngleZ=0.05235988F;
    middle.addChild(top);
    ModelRenderer tip=(new ModelRenderer(this)).setTextureSize(64,128);
    tip.setRotationPoint(1.75F,-2.0F,2.0F);
    tip.setTextureOffset(0,97).addBox(0.0F,hatHeight,0.0F,1,2,1,0.25F);
    tip.rotateAngleX=-0.20943952F;
    tip.rotateAngleZ=0.10471976F;
    top.addChild(tip);
  }
 else {
    this.witchHat=null;
  }
}",0.6580459770114943
174520,"public void setRotationAngles(float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scaleFactor,Entity entityIn){
  super.setRotationAngles(limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scaleFactor,entityIn);
  float f=0.2617994F;
  float f1=-0.2617994F;
  float f2=0.0F;
  float f4=1.0F;
  if (entityIn.motionY < 0.0D) {
    Vec3d vec3d=(new Vec3d(entityIn.motionX,entityIn.motionY,entityIn.motionZ)).normalize();
    f4=1.0F - (float)Math.pow(-vec3d.y,1.5D);
  }
 else   if (entityIn.motionY > 0.0D) {
    Vec3d vec3d=(new Vec3d(entityIn.motionX,entityIn.motionY,entityIn.motionZ)).normalize();
    f4=1.0F + (float)Math.pow(vec3d.y,1.5D);
  }
  f=f4 * 0.34906584F + (1.0F - f4) * f;
  f1=f4 * -((float)Math.PI / 2F) + (1.0F - f4) * f1;
  this.bipedLeftWing.rotationPointX=5.0F;
  this.bipedLeftWing.rotationPointY=f2;
  this.bipedLeftWing.rotateAngleX=f;
  this.bipedLeftWing.rotateAngleZ=f1;
  this.bipedRightWing.rotationPointX=-this.bipedLeftWing.rotationPointX;
  this.bipedRightWing.rotationPointY=this.bipedLeftWing.rotationPointY;
  this.bipedRightWing.rotateAngleX=this.bipedLeftWing.rotateAngleX;
  this.bipedRightWing.rotateAngleZ=-this.bipedLeftWing.rotateAngleZ;
  if (entityIn.isBeingRidden()) {
    this.bipedLeftArm.rotateAngleX=(float)(-Math.PI / 2f);
    this.bipedRightArm.rotateAngleX=(float)(-Math.PI / 2f);
  }
}","@Override public void setRotationAngles(float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scaleFactor,Entity entityIn){
  super.setRotationAngles(limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scaleFactor,entityIn);
  float f=0.2617994F;
  float f1=-0.2617994F;
  float f2=0.0F;
  float f4=1.0F;
  if (entityIn.motionY < 0.0D) {
    Vec3d vec3d=(new Vec3d(entityIn.motionX,entityIn.motionY,entityIn.motionZ)).normalize();
    f4=1.0F - (float)Math.pow(-vec3d.y,1.5D);
  }
 else   if (entityIn.motionY > 0.0D) {
    Vec3d vec3d=(new Vec3d(entityIn.motionX,entityIn.motionY,entityIn.motionZ)).normalize();
    f4=1.0F + (float)Math.pow(vec3d.y,1.5D);
  }
  f=f4 * 0.34906584F + (1.0F - f4) * f;
  f1=f4 * -((float)Math.PI / 2F) + (1.0F - f4) * f1;
  this.bipedLeftWing.rotationPointX=5.0F;
  this.bipedLeftWing.rotationPointY=f2;
  this.bipedLeftWing.rotateAngleX=f;
  this.bipedLeftWing.rotateAngleZ=f1;
  this.bipedRightWing.rotationPointX=-this.bipedLeftWing.rotationPointX;
  this.bipedRightWing.rotationPointY=this.bipedLeftWing.rotationPointY;
  this.bipedRightWing.rotateAngleX=this.bipedLeftWing.rotateAngleX;
  this.bipedRightWing.rotateAngleZ=-this.bipedLeftWing.rotateAngleZ;
  if (entityIn.isBeingRidden()) {
    this.bipedLeftArm.rotateAngleX=(float)(-Math.PI / 2f);
    this.bipedRightArm.rotateAngleX=(float)(-Math.PI / 2f);
  }
}",0.996410624551328
174521,"public void render(Entity entityIn,float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  this.setRotationAngles(limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scale,entityIn);
  if (entityIn instanceof EntityLapisLazuli) {
    EntityLapisLazuli lapis=(EntityLapisLazuli)entityIn;
    if (!lapis.isDefective()) {
      this.bipedRightWing.render(scale);
      this.bipedLeftWing.render(scale);
    }
  }
  this.bipedHead.render(scale);
  this.bipedHeadwear.render(scale);
  this.bipedBody.render(scale);
  this.bipedRightArm.render(scale);
  this.bipedLeftArm.render(scale);
  this.bipedRightLeg.render(scale);
  this.bipedLeftLeg.render(scale);
}","@Override public void render(Entity entityIn,float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  this.setRotationAngles(limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scale,entityIn);
  if (entityIn instanceof EntityLapisLazuli) {
    EntityLapisLazuli lapis=(EntityLapisLazuli)entityIn;
    if (!lapis.isDefective()) {
      this.bipedRightWing.render(scale);
      this.bipedLeftWing.render(scale);
    }
  }
  this.bipedHead.render(scale);
  this.bipedHeadwear.render(scale);
  this.bipedBody.render(scale);
  this.bipedRightArm.render(scale);
  this.bipedLeftArm.render(scale);
  this.bipedRightLeg.render(scale);
  this.bipedLeftLeg.render(scale);
}",0.9929775280898876
174522,"public ModelQuartz(float modelSize,boolean isArmor){
  super(modelSize,0.0F,64,isArmor ? 32 : 64);
  this.bipedHead=new ModelRenderer(this,0,0);
  if (!isArmor) {
    this.bipedHead.addBox(-4F,-12F,-4F,8,8,8,modelSize);
  }
 else {
    this.bipedHead.addBox(-4F,-12F,-4F,8,8,8,modelSize + 0.5F);
  }
  this.bipedHead.setRotationPoint(0F,0F,0F);
  this.bipedHeadwear=new ModelRenderer(this,32,0);
  this.bipedHeadwear.addBox(-4F,-12F,-4F,8,8,8,modelSize + 1.1F);
  this.bipedHeadwear.setRotationPoint(0F,0F,0F);
  this.bipedBody=new ModelRenderer(this,16,16);
  this.bipedBody.addBox(-5F,-4F,-3F,10,16,6,modelSize);
  this.bipedBody.setRotationPoint(0F,0F,0F);
  this.bipedRightArm=new ModelRenderer(this,48,16);
  this.bipedRightArm.addBox(-4F,-4F,-2F,4,14,4,modelSize);
  this.bipedRightArm.setRotationPoint(0F,0F,0F);
  this.bipedLeftArm=new ModelRenderer(this,48,34);
  this.bipedLeftArm.addBox(0F,-4F,-2F,4,14,4,modelSize);
  this.bipedLeftArm.setRotationPoint(0F,0F,0F);
  this.bipedRightLeg=new ModelRenderer(this,0,16);
  this.bipedRightLeg.addBox(1F,0F,-2F,4,12,4,modelSize);
  this.bipedRightLeg.setRotationPoint(0F,0F,0F);
  this.bipedLeftLeg=new ModelRenderer(this,0,32);
  this.bipedLeftLeg.addBox(-5F,0F,-2F,4,12,4,modelSize);
  this.bipedLeftLeg.setRotationPoint(0F,0F,0F);
  this.bipedCape=new ModelRenderer(this,0,0);
  this.bipedCape.setTextureSize(64,32);
  this.bipedCape.addBox(-5.0F,-4.0F,-2.f,10,20,1,modelSize);
}","public ModelQuartz(float modelSize,boolean isArmor){
  super(modelSize,0.0F,64,isArmor ? 32 : 64);
  this.bipedHead=new ModelRenderer(this,0,0);
  if (!isArmor) {
    this.bipedHead.addBox(-4F,-12F,-4F,8,8,8,modelSize);
  }
 else {
    this.bipedHead.addBox(-4F,-12F,-4F,8,8,8,modelSize + 0.5F);
  }
  this.bipedHead.setRotationPoint(0F,0F,0F);
  this.bipedHeadwear=new ModelRenderer(this,32,0);
  this.bipedHeadwear.addBox(-4F,-12F,-4F,8,8,8,modelSize + 1.1F);
  this.bipedHeadwear.setRotationPoint(0F,0F,0F);
  this.bipedBody=new ModelRenderer(this,16,16);
  this.bipedBody.addBox(-5F,-4F,-3F,10,16,6,modelSize);
  this.bipedBody.setRotationPoint(0F,0F,0F);
  this.bipedRightArm=new ModelRenderer(this,48,16);
  this.bipedRightArm.addBox(-4F,-4F,-2F,4,14,4,modelSize);
  this.bipedRightArm.setRotationPoint(0F,0F,0F);
  this.bipedLeftArm=new ModelRenderer(this,48,34);
  this.bipedLeftArm.addBox(0F,-4F,-2F,4,14,4,modelSize);
  this.bipedLeftArm.setRotationPoint(0F,0F,0F);
  this.bipedRightLeg=new ModelRenderer(this,0,16);
  this.bipedRightLeg.addBox(1F,0F,-2F,4,12,4,modelSize);
  this.bipedRightLeg.setRotationPoint(0F,0F,0F);
  this.bipedLeftLeg=new ModelRenderer(this,0,32);
  this.bipedLeftLeg.addBox(-5F,0F,-2F,4,12,4,modelSize);
  this.bipedLeftLeg.setRotationPoint(0F,0F,0F);
  this.bipedCape=new ModelRenderer(this,0,0);
  this.bipedCape.setTextureSize(64,32);
  this.bipedCape.addBox(-5.0F,-4.0F,-2.f,10,20,1,modelSize);
  if (!isArmor && KAGIC.isHalloween()) {
    float hatHeight=-4F;
    this.witchHat=(new ModelRenderer(this)).setTextureSize(64,128);
    this.witchHat.setRotationPoint(-6.0F,-10.03125F,-6.0F);
    this.witchHat.setTextureOffset(0,64).addBox(0.0F,hatHeight,0.0F,12,2,12,modelSize);
    this.bipedHead.addChild(this.witchHat);
    ModelRenderer middle=(new ModelRenderer(this)).setTextureSize(64,128);
    middle.setRotationPoint(2.75F,-4.0F,3.0F);
    middle.setTextureOffset(0,78).addBox(0.0F,hatHeight,0.0F,7,4,7,modelSize);
    middle.rotateAngleX=-0.05235988F;
    middle.rotateAngleZ=0.02617994F;
    this.witchHat.addChild(middle);
    ModelRenderer top=(new ModelRenderer(this)).setTextureSize(64,128);
    top.setRotationPoint(1.75F,-4.0F,2.0F);
    top.setTextureOffset(0,89).addBox(0.0F,hatHeight,0.0F,4,4,4,modelSize);
    top.rotateAngleX=-0.10471976F;
    top.rotateAngleZ=0.05235988F;
    middle.addChild(top);
    ModelRenderer tip=(new ModelRenderer(this)).setTextureSize(64,128);
    tip.setRotationPoint(1.75F,-2.0F,2.0F);
    tip.setTextureOffset(0,97).addBox(0.0F,hatHeight,0.0F,1,2,1,0.25F);
    tip.rotateAngleX=-0.20943952F;
    tip.rotateAngleZ=0.10471976F;
    top.addChild(tip);
  }
 else {
    this.witchHat=null;
  }
}",0.6975953364100073
174523,"public RenderAmethyst(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.5F);
  for (Iterator<LayerRenderer<EntityAmethyst>> iter=this.layerRenderers.iterator(); iter.hasNext(); ) {
    LayerRenderer layer=iter.next();
    if (layer instanceof LayerHeldItem) {
      iter.remove();
    }
  }
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
  LayerBipedArmor amethystArmor=new LayerBipedArmor(this){
    @Override protected void initArmor(){
      this.modelLeggings=new ModelQuartz(0.5F,true);
      this.modelArmor=new ModelQuartz(1F,true);
    }
  }
;
  this.addLayer(amethystArmor);
}","public RenderAmethyst(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.5F);
  for (Iterator<LayerRenderer<EntityAmethyst>> iter=this.layerRenderers.iterator(); iter.hasNext(); ) {
    LayerRenderer layer=iter.next();
    if (layer instanceof LayerHeldItem) {
      iter.remove();
    }
  }
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
  LayerBipedArmor amethystArmor=new LayerBipedArmor(this){
    @Override protected void initArmor(){
      this.modelLeggings=new ModelQuartz(0.5F,true);
      this.modelArmor=new ModelQuartz(1F,true);
    }
  }
;
  this.addLayer(amethystArmor);
}",0.9587573647562936
174524,"public RenderCarnelian(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.5F);
  for (Iterator<LayerRenderer<EntityCarnelian>> iter=this.layerRenderers.iterator(); iter.hasNext(); ) {
    LayerRenderer layer=iter.next();
    if (layer instanceof LayerHeldItem) {
      iter.remove();
    }
  }
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
  LayerBipedArmor carnelianArmor=new LayerBipedArmor(this){
    @Override protected void initArmor(){
      this.modelLeggings=new ModelQuartz(0.5F,true);
      this.modelArmor=new ModelQuartz(1F,true);
    }
  }
;
  this.addLayer(carnelianArmor);
}","public RenderCarnelian(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.5F);
  for (Iterator<LayerRenderer<EntityCarnelian>> iter=this.layerRenderers.iterator(); iter.hasNext(); ) {
    LayerRenderer layer=iter.next();
    if (layer instanceof LayerHeldItem) {
      iter.remove();
    }
  }
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
  LayerBipedArmor carnelianArmor=new LayerBipedArmor(this){
    @Override protected void initArmor(){
      this.modelLeggings=new ModelQuartz(0.5F,true);
      this.modelArmor=new ModelQuartz(1F,true);
    }
  }
;
  this.addLayer(carnelianArmor);
}",0.9589333333333332
174525,"public RenderJasper(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.25F);
  for (Iterator<LayerRenderer<EntityJasper>> iter=this.layerRenderers.iterator(); iter.hasNext(); ) {
    LayerRenderer layer=iter.next();
    if (layer instanceof LayerHeldItem) {
      iter.remove();
    }
  }
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerJasperMark1(this));
  this.addLayer(new LayerJasperMark2(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
  LayerBipedArmor jasperArmor=new LayerBipedArmor(this){
    @Override protected void initArmor(){
      this.modelLeggings=new ModelQuartz(0.5F,true);
      this.modelArmor=new ModelQuartz(1F,true);
    }
  }
;
  this.addLayer(jasperArmor);
}","public RenderJasper(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.25F);
  for (Iterator<LayerRenderer<EntityJasper>> iter=this.layerRenderers.iterator(); iter.hasNext(); ) {
    LayerRenderer layer=iter.next();
    if (layer instanceof LayerHeldItem) {
      iter.remove();
    }
  }
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerJasperMark1(this));
  this.addLayer(new LayerJasperMark2(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
  LayerBipedArmor jasperArmor=new LayerBipedArmor(this){
    @Override protected void initArmor(){
      this.modelLeggings=new ModelQuartz(0.5F,true);
      this.modelArmor=new ModelQuartz(1F,true);
    }
  }
;
  this.addLayer(jasperArmor);
}",0.9621249385145104
174526,"public RenderLapisLazuli(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelLapisLazuli(),0.25F);
  this.addLayer(new LayerLapisLazuliItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerGemPlacement(this));
}","public RenderLapisLazuli(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelLapisLazuli(),0.25F);
  this.addLayer(new LayerLapisLazuliItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
}",0.9131905298759864
174527,"protected void preRenderCallback(EntityLapisLazuli entitylivingbaseIn,float partialTickTime){
  if (entitylivingbaseIn.isBeingRidden() && entitylivingbaseIn.canBeSteered()) {
    GlStateManager.translate(0F,-1F,1.25F);
    GlStateManager.rotate(90.0F,1,0,0);
  }
}","@Override protected void preRenderCallback(EntityLapisLazuli entitylivingbaseIn,float partialTickTime){
  if (entitylivingbaseIn.isBeingRidden() && entitylivingbaseIn.canBeSteered()) {
    GlStateManager.translate(0F,-1F,1.25F);
    GlStateManager.rotate(90.0F,1,0,0);
  }
}",0.9814126394052044
174528,"protected ResourceLocation getEntityTexture(EntityLapisLazuli entity){
  return new ResourceLocation(""String_Node_Str"");
}","@Override protected ResourceLocation getEntityTexture(EntityLapisLazuli entity){
  return new ResourceLocation(""String_Node_Str"");
}",0.9606299212598424
174529,"public RenderRoseQuartz(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.25F);
  for (Iterator<LayerRenderer<EntityRoseQuartz>> iter=this.layerRenderers.iterator(); iter.hasNext(); ) {
    LayerRenderer layer=iter.next();
    if (layer instanceof LayerHeldItem) {
      iter.remove();
    }
  }
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
  LayerBipedArmor roseQuartzArmor=new LayerBipedArmor(this){
    @Override protected void initArmor(){
      this.modelLeggings=new ModelQuartz(0.5F,true);
      this.modelArmor=new ModelQuartz(1F,true);
    }
  }
;
  this.addLayer(roseQuartzArmor);
}","public RenderRoseQuartz(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.25F);
  for (Iterator<LayerRenderer<EntityRoseQuartz>> iter=this.layerRenderers.iterator(); iter.hasNext(); ) {
    LayerRenderer layer=iter.next();
    if (layer instanceof LayerHeldItem) {
      iter.remove();
    }
  }
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
  if (KAGIC.isHalloween()) {
    this.addLayer(new LayerWitchHat(this));
  }
  LayerBipedArmor roseQuartzArmor=new LayerBipedArmor(this){
    @Override protected void initArmor(){
      this.modelLeggings=new ModelQuartz(0.5F,true);
      this.modelArmor=new ModelQuartz(1F,true);
    }
  }
;
  this.addLayer(roseQuartzArmor);
}",0.9591511936339524
174530,"public void doRenderLayer(EntityGem gem,float limbSwing,float limbSwingAmount,float partialTicks,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  this.gemRenderer.bindTexture(this.getTexture(gem));
  float[] afloat=EntitySheep.getDyeRgb(EnumDyeColor.values()[gem.getInsigniaColor()]);
  GlStateManager.color(afloat[0] * 2,afloat[1] * 2,afloat[2] * 2,0.99f);
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(SourceFactor.SRC_ALPHA,DestFactor.ONE_MINUS_SRC_ALPHA);
  this.gemModel.setModelAttributes(this.gemRenderer.getMainModel());
  this.gemModel.render(gem,limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scale);
  GlStateManager.disableBlend();
}","public void doRenderLayer(EntityGem gem,float limbSwing,float limbSwingAmount,float partialTicks,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  this.gemRenderer.bindTexture(this.getTexture(gem));
  float[] insigniaColor=EntitySheep.getDyeRgb(EnumDyeColor.values()[gem.getInsigniaColor()]);
  GlStateManager.color(insigniaColor[0] * 2,insigniaColor[1] * 2,insigniaColor[2] * 2,0.99f);
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(SourceFactor.SRC_ALPHA,DestFactor.ONE_MINUS_SRC_ALPHA);
  this.gemModel.setModelAttributes(this.gemRenderer.getMainModel());
  this.gemModel.render(gem,limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scale);
  GlStateManager.disableBlend();
}",0.9457142857142856
174531,"public boolean isCoreItem(ItemStack stack){
  if (stack.getItem() == ModItems.CRACKED_BLUE_DIAMOND_GEM || stack.getItem() == ModItems.CRACKED_YELLOW_DIAMOND_GEM || stack.getItem() == ModItems.BLUE_DIAMOND_GEM || stack.getItem() == ModItems.YELLOW_DIAMOND_GEM) {
    return true;
  }
 else   if (stack.getItem() == Items.DYE && (this.canChangeInsigniaColorByDefault() || this.canChangeUniformColorByDefault())) {
    return true;
  }
 else   if (stack.getItem() == ModItems.GEM_STAFF) {
    return true;
  }
 else   if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
    return true;
  }
 else   if (stack.getItem() == ModItems.JOINT_CONTRACT) {
    return true;
  }
 else   if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
    return true;
  }
 else   if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
    return true;
  }
 else   if (stack.getItem() == ModItems.WAR_DECLARATION) {
    return true;
  }
 else   if (stack.getItem() == ModItems.PEACE_TREATY) {
    return true;
  }
 else   if (stack.getItem() == Items.NAME_TAG) {
    return true;
  }
 else   if (stack.getItem() == Items.LEAD) {
    return true;
  }
  return false;
}","public boolean isCoreItem(ItemStack stack){
  if (stack.getItem() == ModItems.CRACKED_BLUE_DIAMOND_GEM || stack.getItem() == ModItems.CRACKED_YELLOW_DIAMOND_GEM || stack.getItem() == ModItems.BLUE_DIAMOND_GEM || stack.getItem() == ModItems.YELLOW_DIAMOND_GEM) {
    return true;
  }
 else   if (DyeUtils.isDye(stack) && (this.canChangeInsigniaColorByDefault() || this.canChangeUniformColorByDefault())) {
    return true;
  }
 else   if (stack.getItem() == ModItems.GEM_STAFF) {
    return true;
  }
 else   if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
    return true;
  }
 else   if (stack.getItem() == ModItems.JOINT_CONTRACT) {
    return true;
  }
 else   if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
    return true;
  }
 else   if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
    return true;
  }
 else   if (stack.getItem() == ModItems.WAR_DECLARATION) {
    return true;
  }
 else   if (stack.getItem() == ModItems.PEACE_TREATY) {
    return true;
  }
 else   if (stack.getItem() == Items.NAME_TAG) {
    return true;
  }
 else   if (stack.getItem() == Items.LEAD) {
    return true;
  }
  return false;
}",0.9785181937746602
174532,"/** 
 * Methods related to entity interaction.				
 */
public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (stack.getItem() == ModItems.GEM_STAFF) {
        if (this.isTamed()) {
          if (player.isSneaking()) {
            if (this.isOwnedBy(player)) {
              this.setSelected(!this.isSelected());
            }
            this.alternateInteract(player);
            this.playObeySound();
          }
 else {
            if (this.isOwner(player)) {
              this.setSitting(player);
              this.playObeySound();
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
 else {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.CRACKED_BLUE_DIAMOND_GEM || stack.getItem() == ModItems.CRACKED_YELLOW_DIAMOND_GEM || stack.getItem() == ModItems.BLUE_DIAMOND_GEM || stack.getItem() == ModItems.YELLOW_DIAMOND_GEM) {
        if (this.getServitude() != EntityGem.SERVE_HUMAN) {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemTransferContract contract=(ItemTransferContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              if (contract.getOwner(stack).equals(this.getOwnerId())) {
                if (this.leader.equals(this.getOwnerId())) {
                  this.setLeader(player);
                }
                this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              }
 else {
                for (                UUID ownerId : this.jointOwners) {
                  if (contract.getOwner(stack).equals(ownerId)) {
                    if (this.leader.equals(this.getOwnerId())) {
                      this.setLeader(player);
                    }
                    try {
                      this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                    }
 catch (                    Exception e) {
                    }
                    ownerId=EntityPlayer.getUUID(player.getGameProfile());
                  }
                }
              }
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              this.setOwnerId(EntityPlayer.getUUID(player.getGameProfile()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.JOINT_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemJointContract contract=(ItemJointContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              for (              UUID ownerId : this.jointOwners) {
                try {
                  this.world.getPlayerEntityByUUID(ownerId).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                }
 catch (                Exception e) {
                }
              }
              this.jointOwners.add(EntityPlayer.getUUID(player.getGameProfile()));
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
        if (this.isTamed()) {
          ItemLiberationContract contract=(ItemLiberationContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setServitude(EntityGem.SERVE_NONE);
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
        if (this.isTamed()) {
          ItemAutonomyContract contract=(ItemAutonomyContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            this.setServitude(EntityGem.SERVE_ITSELF);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.WAR_DECLARATION) {
        if (this.isTamed()) {
          ItemWarDeclaration contract=(ItemWarDeclaration)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(true);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.PEACE_TREATY) {
        if (this.isTamed()) {
          ItemPeaceTreaty contract=(ItemPeaceTreaty)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(false);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == Items.DYE && this.canChangeUniformColorByDefault() && player.isSneaking()) {
        if (this.isTamed() && this.isOwner(player)) {
          this.setUniformColor(15 - stack.getItemDamage());
          return true;
        }
      }
 else       if (stack.getItem() == Items.DYE && this.canChangeInsigniaColorByDefault()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setInsigniaColor(15 - stack.getItemDamage());
            return true;
          }
        }
      }
 else       if (this.isSoldier) {
        return super.processInteract(player,hand) || this.setAttackWeapon(player,hand,stack);
      }
    }
  }
  return super.processInteract(player,hand);
}","/** 
 * Methods related to entity interaction.				
 */
public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (stack.getItem() == ModItems.GEM_STAFF) {
        if (this.isTamed()) {
          if (player.isSneaking()) {
            if (this.isOwnedBy(player)) {
              this.setSelected(!this.isSelected());
            }
            this.alternateInteract(player);
            this.playObeySound();
          }
 else {
            if (this.isOwner(player)) {
              this.setSitting(player);
              this.playObeySound();
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
 else {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.CRACKED_BLUE_DIAMOND_GEM || stack.getItem() == ModItems.CRACKED_YELLOW_DIAMOND_GEM || stack.getItem() == ModItems.BLUE_DIAMOND_GEM || stack.getItem() == ModItems.YELLOW_DIAMOND_GEM) {
        if (this.getServitude() != EntityGem.SERVE_HUMAN) {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemTransferContract contract=(ItemTransferContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              if (contract.getOwner(stack).equals(this.getOwnerId())) {
                if (this.leader.equals(this.getOwnerId())) {
                  this.setLeader(player);
                }
                this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              }
 else {
                for (                UUID ownerId : this.jointOwners) {
                  if (contract.getOwner(stack).equals(ownerId)) {
                    if (this.leader.equals(this.getOwnerId())) {
                      this.setLeader(player);
                    }
                    try {
                      this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                    }
 catch (                    Exception e) {
                    }
                    ownerId=EntityPlayer.getUUID(player.getGameProfile());
                  }
                }
              }
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              this.setOwnerId(EntityPlayer.getUUID(player.getGameProfile()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.JOINT_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemJointContract contract=(ItemJointContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              for (              UUID ownerId : this.jointOwners) {
                try {
                  this.world.getPlayerEntityByUUID(ownerId).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                }
 catch (                Exception e) {
                }
              }
              this.jointOwners.add(EntityPlayer.getUUID(player.getGameProfile()));
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
        if (this.isTamed()) {
          ItemLiberationContract contract=(ItemLiberationContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setServitude(EntityGem.SERVE_NONE);
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
        if (this.isTamed()) {
          ItemAutonomyContract contract=(ItemAutonomyContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            this.setServitude(EntityGem.SERVE_ITSELF);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.WAR_DECLARATION) {
        if (this.isTamed()) {
          ItemWarDeclaration contract=(ItemWarDeclaration)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(true);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.PEACE_TREATY) {
        if (this.isTamed()) {
          ItemPeaceTreaty contract=(ItemPeaceTreaty)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(false);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (DyeUtils.isDye(stack) && this.canChangeUniformColorByDefault() && player.isSneaking()) {
        if (this.isTamed() && this.isOwner(player)) {
          this.setUniformColor(DyeUtils.metaFromStack(stack).orElse(0));
          return true;
        }
      }
 else       if (DyeUtils.isDye(stack) && this.canChangeInsigniaColorByDefault()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setInsigniaColor(DyeUtils.metaFromStack(stack).orElse(0));
            return true;
          }
        }
      }
 else       if (this.isSoldier) {
        return super.processInteract(player,hand) || this.setAttackWeapon(player,hand,stack);
      }
    }
  }
  return super.processInteract(player,hand);
}",0.9883259575766824
174533,"/** 
 * Methods related to entity interaction.				
 */
public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (stack.getItem() == ModItems.GEM_STAFF) {
        if (this.isTamed()) {
          if (player.isSneaking()) {
            this.setSelected(!this.isSelected());
            this.playObeySound();
          }
 else {
            if (this.isOwner(player)) {
              this.setSitting(player);
              this.playObeySound();
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
 else {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.CRACKED_BLUE_DIAMOND_GEM || stack.getItem() == ModItems.CRACKED_YELLOW_DIAMOND_GEM || stack.getItem() == ModItems.BLUE_DIAMOND_GEM || stack.getItem() == ModItems.YELLOW_DIAMOND_GEM) {
        if (this.getServitude() != EntityGem.SERVE_HUMAN) {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemTransferContract contract=(ItemTransferContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              if (contract.getOwner(stack).equals(this.getOwnerId())) {
                if (this.leader.equals(this.getOwnerId())) {
                  this.setLeader(player);
                }
                this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              }
 else {
                for (                UUID ownerId : this.jointOwners) {
                  if (contract.getOwner(stack).equals(ownerId)) {
                    if (this.leader.equals(this.getOwnerId())) {
                      this.setLeader(player);
                    }
                    try {
                      this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                    }
 catch (                    Exception e) {
                    }
                    ownerId=EntityPlayer.getUUID(player.getGameProfile());
                  }
                }
              }
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              this.setOwnerId(EntityPlayer.getUUID(player.getGameProfile()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.JOINT_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemJointContract contract=(ItemJointContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              for (              UUID ownerId : this.jointOwners) {
                try {
                  this.world.getPlayerEntityByUUID(ownerId).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                }
 catch (                Exception e) {
                }
              }
              this.jointOwners.add(EntityPlayer.getUUID(player.getGameProfile()));
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
        if (this.isTamed()) {
          ItemLiberationContract contract=(ItemLiberationContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setServitude(EntityGem.SERVE_NONE);
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
        if (this.isTamed()) {
          ItemAutonomyContract contract=(ItemAutonomyContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            this.setServitude(EntityGem.SERVE_ITSELF);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.WAR_DECLARATION) {
        if (this.isTamed()) {
          ItemWarDeclaration contract=(ItemWarDeclaration)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(true);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.PEACE_TREATY) {
        if (this.isTamed()) {
          ItemPeaceTreaty contract=(ItemPeaceTreaty)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(false);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == Items.DYE && this.canChangeUniformColorByDefault() && player.isSneaking()) {
        if (this.isTamed() && this.isOwner(player)) {
          this.setUniformColor(15 - stack.getItemDamage());
          return true;
        }
      }
 else       if (stack.getItem() == Items.DYE && this.canChangeInsigniaColorByDefault()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setInsigniaColor(15 - stack.getItemDamage());
            return true;
          }
        }
      }
 else       if (this.isSoldier) {
        return super.processInteract(player,hand) || this.setAttackWeapon(player,hand,stack);
      }
    }
  }
  return super.processInteract(player,hand);
}","/** 
 * Methods related to entity interaction.				
 */
public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (stack.getItem() == ModItems.GEM_STAFF) {
        if (this.isTamed()) {
          if (player.isSneaking()) {
            if (this.isOwnedBy(player)) {
              this.setSelected(!this.isSelected());
            }
            this.alternateInteract(player);
            this.playObeySound();
          }
 else {
            if (this.isOwner(player)) {
              this.setSitting(player);
              this.playObeySound();
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
 else {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.CRACKED_BLUE_DIAMOND_GEM || stack.getItem() == ModItems.CRACKED_YELLOW_DIAMOND_GEM || stack.getItem() == ModItems.BLUE_DIAMOND_GEM || stack.getItem() == ModItems.YELLOW_DIAMOND_GEM) {
        if (this.getServitude() != EntityGem.SERVE_HUMAN) {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemTransferContract contract=(ItemTransferContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              if (contract.getOwner(stack).equals(this.getOwnerId())) {
                if (this.leader.equals(this.getOwnerId())) {
                  this.setLeader(player);
                }
                this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              }
 else {
                for (                UUID ownerId : this.jointOwners) {
                  if (contract.getOwner(stack).equals(ownerId)) {
                    if (this.leader.equals(this.getOwnerId())) {
                      this.setLeader(player);
                    }
                    try {
                      this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                    }
 catch (                    Exception e) {
                    }
                    ownerId=EntityPlayer.getUUID(player.getGameProfile());
                  }
                }
              }
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              this.setOwnerId(EntityPlayer.getUUID(player.getGameProfile()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.JOINT_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemJointContract contract=(ItemJointContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              for (              UUID ownerId : this.jointOwners) {
                try {
                  this.world.getPlayerEntityByUUID(ownerId).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                }
 catch (                Exception e) {
                }
              }
              this.jointOwners.add(EntityPlayer.getUUID(player.getGameProfile()));
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
        if (this.isTamed()) {
          ItemLiberationContract contract=(ItemLiberationContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setServitude(EntityGem.SERVE_NONE);
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
        if (this.isTamed()) {
          ItemAutonomyContract contract=(ItemAutonomyContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            this.setServitude(EntityGem.SERVE_ITSELF);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.WAR_DECLARATION) {
        if (this.isTamed()) {
          ItemWarDeclaration contract=(ItemWarDeclaration)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(true);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.PEACE_TREATY) {
        if (this.isTamed()) {
          ItemPeaceTreaty contract=(ItemPeaceTreaty)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setKillsPlayers(false);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == Items.DYE && this.canChangeUniformColorByDefault() && player.isSneaking()) {
        if (this.isTamed() && this.isOwner(player)) {
          this.setUniformColor(15 - stack.getItemDamage());
          return true;
        }
      }
 else       if (stack.getItem() == Items.DYE && this.canChangeInsigniaColorByDefault()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setInsigniaColor(15 - stack.getItemDamage());
            return true;
          }
        }
      }
 else       if (this.isSoldier) {
        return super.processInteract(player,hand) || this.setAttackWeapon(player,hand,stack);
      }
    }
  }
  return super.processInteract(player,hand);
}",0.9960916545329144
174534,"@SuppressWarnings(""String_Node_Str"") public static InjectorResult create(World world,BlockPos pos,boolean drain){
  HashMap<Class<EntityGem>,Double> resultTable=new HashMap<Class<EntityGem>,Double>();
  HashMap<Class<EntityGem>,Double> defectivity=new HashMap<Class<EntityGem>,Double>();
  HashMap<Class<EntityGem>,Double> friction=new HashMap<Class<EntityGem>,Double>();
  boolean regionIsNotDrained=true;
  for (  String gem : ModEntities.GEMS.keySet()) {
    try {
      Class<EntityGem> gemClass=(Class<EntityGem>)ModEntities.GEMS.get(gem);
      HashMap<IBlockState,Double> yield=(HashMap<IBlockState,Double>)gemClass.getField((gem + ""String_Node_Str"").toUpperCase()).get(null);
      double defectivityRate=1.0;
      double frictionFactor=0.0;
      for (int x=-4; x <= 4; ++x) {
        for (int y=-4; y <= 4; ++y) {
          for (int z=-4; z <= 4; ++z) {
            BlockPos ore=pos.add(x,y,z);
            IBlockState state=world.getBlockState(ore);
            if (!resultTable.containsKey(gemClass)) {
              resultTable.put(gemClass,0.0);
            }
            if (yield.containsKey(state)) {
              resultTable.put(gemClass,resultTable.get(gemClass) + yield.get(state));
              frictionFactor+=0.0036;
              defectivityRate-=0.2;
            }
            if (state.getBlock() == ModBlocks.DRAINED_BLOCK) {
              regionIsNotDrained=false;
            }
            if (state.getMaterial() == Material.GRASS) {
              defectivityRate-=0.4;
            }
          }
        }
      }
      defectivity.put(gemClass,Math.max(0.0,Math.min(1.0,defectivityRate)));
      friction.put(gemClass,frictionFactor);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
  }
  boolean canSpawnGem=false;
  Class<? extends EntityGem> mostLikelyGem=null;
  double highestYield=0.0;
  for (  Class<EntityGem> gemClass : resultTable.keySet()) {
    if (!gemClass.getName().contains(""String_Node_Str"")) {
      boolean forget=world.rand.nextBoolean();
      if (resultTable.get(gemClass) > 0.1 && world.rand.nextInt((int)(resultTable.get(gemClass) * 10) + 1) == 0) {
        highestYield=resultTable.get(gemClass);
        mostLikelyGem=gemClass;
        canSpawnGem=true;
      }
 else {
        double result=resultTable.get(gemClass);
        if (result == highestYield && result > 0) {
          highestYield=forget ? resultTable.get(gemClass) : highestYield;
          mostLikelyGem=forget ? gemClass : mostLikelyGem;
          canSpawnGem=true;
        }
 else         if (result > highestYield && result > 0) {
          highestYield=resultTable.get(gemClass);
          mostLikelyGem=gemClass;
          canSpawnGem=true;
        }
      }
    }
  }
  if (highestYield <= 0.0 && regionIsNotDrained) {
    ChunkPos c=world.getChunkFromBlockCoords(pos).getPos();
    int chunkPos=(c.x + c.z) % ModEntities.MINERALS.size();
    mostLikelyGem=ModEntities.MINERALS.get(Math.abs(chunkPos));
    canSpawnGem=true;
  }
  EntityGem gemSpawned=null;
  try {
    gemSpawned=(EntityGem)(mostLikelyGem.getConstructors()[0].newInstance(world));
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + e.getMessage());
    canSpawnGem=false;
  }
  ExitHole exitHole=null;
  if (drain && gemSpawned != null) {
    exitHole=ExitHole.create(world,pos,Math.ceil(gemSpawned.height),friction.get(gemSpawned.getClass()) >= 1.0F);
    exitHole.emerge(world);
    gemSpawned.setPosition(pos.getX() + 0.5,pos.getY(),pos.getZ() + 0.5);
  }
  if (drain) {
    for (int x=-4; x <= 4; ++x) {
      for (int y=-4; y <= 4; ++y) {
        for (int z=-4; z <= 4; ++z) {
          if (world.rand.nextBoolean()) {
            BlockPos ore=pos.add(x,y,z);
            drainBlock(world,ore);
          }
        }
      }
    }
  }
  return new InjectorResult(gemSpawned,pos,gemSpawned == null ? 0.0 : defectivity.get(gemSpawned.getClass()),!canSpawnGem,friction.get(gemSpawned.getClass()) >= 1.0F,exitHole);
}","@SuppressWarnings(""String_Node_Str"") public static InjectorResult create(World world,BlockPos pos,boolean drain){
  HashMap<Class<EntityGem>,Double> resultTable=new HashMap<Class<EntityGem>,Double>();
  HashMap<Class<EntityGem>,Double> defectivity=new HashMap<Class<EntityGem>,Double>();
  HashMap<Class<EntityGem>,Double> friction=new HashMap<Class<EntityGem>,Double>();
  float drainedCount=0F;
  for (  String gem : ModEntities.GEMS.keySet()) {
    try {
      Class<EntityGem> gemClass=(Class<EntityGem>)ModEntities.GEMS.get(gem);
      HashMap<IBlockState,Double> yield=(HashMap<IBlockState,Double>)gemClass.getField((gem + ""String_Node_Str"").toUpperCase()).get(null);
      double defectivityRate=1.0;
      double frictionFactor=0.0;
      drainedCount=0F;
      for (int x=-4; x <= 4; ++x) {
        for (int y=-4; y <= 4; ++y) {
          for (int z=-4; z <= 4; ++z) {
            BlockPos ore=pos.add(x,y,z);
            IBlockState state=world.getBlockState(ore);
            if (!resultTable.containsKey(gemClass)) {
              resultTable.put(gemClass,0.0);
            }
            if (yield.containsKey(state)) {
              resultTable.put(gemClass,resultTable.get(gemClass) + yield.get(state));
              frictionFactor+=0.0036;
              defectivityRate-=0.2;
            }
            if (state.getBlock() == ModBlocks.DRAINED_BLOCK) {
              KAGIC.instance.chatInfoMessage(""String_Node_Str"" + drainedCount);
              drainedCount+=1;
            }
            if (state.getMaterial() == Material.GRASS) {
              defectivityRate-=0.4;
            }
          }
        }
      }
      defectivity.put(gemClass,Math.max(0.0,Math.min(1.0,defectivityRate)));
      friction.put(gemClass,frictionFactor);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
  }
  boolean canSpawnGem=false;
  Class<? extends EntityGem> mostLikelyGem=null;
  double highestYield=0.0;
  for (  Class<EntityGem> gemClass : resultTable.keySet()) {
    if (!gemClass.getName().contains(""String_Node_Str"")) {
      boolean forget=world.rand.nextBoolean();
      if (resultTable.get(gemClass) > 0.1 && world.rand.nextInt((int)(resultTable.get(gemClass) * 10) + 1) == 0) {
        highestYield=resultTable.get(gemClass);
        mostLikelyGem=gemClass;
        canSpawnGem=true;
      }
 else {
        double result=resultTable.get(gemClass);
        if (result == highestYield && result > 0) {
          highestYield=forget ? resultTable.get(gemClass) : highestYield;
          mostLikelyGem=forget ? gemClass : mostLikelyGem;
          canSpawnGem=true;
        }
 else         if (result > highestYield && result > 0) {
          highestYield=resultTable.get(gemClass);
          mostLikelyGem=gemClass;
          canSpawnGem=true;
        }
      }
    }
  }
  if (highestYield <= 0.0 && drainedCount / (9F * 9F * 9F) < InjectorResult.drainedPercentage) {
    ChunkPos c=world.getChunkFromBlockCoords(pos).getPos();
    int chunkPos=(c.x + c.z) % ModEntities.MINERALS.size();
    mostLikelyGem=ModEntities.MINERALS.get(Math.abs(chunkPos));
    canSpawnGem=true;
  }
  EntityGem gemSpawned=null;
  if (canSpawnGem) {
    try {
      gemSpawned=(EntityGem)(mostLikelyGem.getConstructors()[0].newInstance(world));
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + e.getMessage());
      canSpawnGem=false;
    }
  }
  ExitHole exitHole=null;
  if (drain && gemSpawned != null) {
    exitHole=ExitHole.create(world,pos,Math.ceil(gemSpawned.height),friction.get(gemSpawned.getClass()) >= 1.0F);
    exitHole.emerge(world);
    gemSpawned.setPosition(pos.getX() + 0.5,pos.getY(),pos.getZ() + 0.5);
  }
  if (drain) {
    for (int x=-4; x <= 4; ++x) {
      for (int y=-4; y <= 4; ++y) {
        for (int z=-4; z <= 4; ++z) {
          if (world.rand.nextBoolean()) {
            BlockPos ore=pos.add(x,y,z);
            drainBlock(world,ore);
          }
        }
      }
    }
  }
  return new InjectorResult(gemSpawned,pos,gemSpawned == null ? 0.0 : defectivity.get(gemSpawned.getClass()),!canSpawnGem,canSpawnGem ? friction.get(gemSpawned.getClass()) >= 1.0F : false,exitHole);
}",0.9592946007971976
174535,"@Override public void genTerrainBlocks(World world,Random rand,ChunkPrimer chunkPrimer,int chunkX,int chunkZ,double noiseVal){
  if (this.peakNoise == null || this.peakRoofNoise == null || this.worldSeed != world.getSeed()) {
    Random peakRandom=new Random(this.worldSeed);
    this.peakNoise=new NoiseGeneratorPerlin(peakRandom,4);
    this.peakRoofNoise=new NoiseGeneratorPerlin(peakRandom,1);
  }
  this.worldSeed=world.getSeed();
  double peakHeight=0.0D;
  int i=(chunkX & -128) + (chunkZ & 127);
  int j=(chunkZ & -128) + (chunkX & 127);
  double d0=Math.min(Math.abs(noiseVal) * .9,this.peakNoise.getValue((double)i * 0.5D,(double)j * 0.5D));
  if (d0 > 0.0D) {
    double d2=Math.abs(this.peakRoofNoise.getValue((double)i * 0.001953125D,(double)j * 0.001953125D));
    peakHeight=d0 * d0 * 2.5D;
    double peakOffset=Math.ceil(d2 * 50.0D) + 14.0D;
    if (peakHeight > peakOffset) {
      peakHeight=peakOffset;
    }
    peakHeight=peakHeight + 64.0D;
  }
  int x=chunkX & 15;
  int z=chunkZ & 15;
  int seaLevel=world.getSeaLevel();
  IBlockState fillerState=this.fillerBlock;
  int l=-1;
  for (int height=255; height >= 0; --height) {
    if (chunkPrimer.getBlockState(x,height,z).getMaterial() == Material.AIR && height < (int)peakHeight) {
      chunkPrimer.setBlockState(x,height,z,STONE);
    }
    if (height <= rand.nextInt(5)) {
      chunkPrimer.setBlockState(x,height,z,BEDROCK);
    }
 else {
      IBlockState iblockstate1=chunkPrimer.getBlockState(x,height,z);
      if (iblockstate1.getMaterial() == Material.AIR) {
        l=-1 - this.fillerDepth;
      }
 else       if (iblockstate1.getBlock() == Blocks.STONE) {
        if (l == -1 - this.fillerDepth) {
          chunkPrimer.setBlockState(x,height,z,this.topBlock);
          ++l;
        }
 else         if (l < 0) {
          chunkPrimer.setBlockState(x,height,z,this.fillerBlock);
          ++l;
        }
 else         if (l == 0) {
          l=1;
          chunkPrimer.setBlockState(x,height,z,this.fillerBlock);
        }
 else         if (l > 0) {
          chunkPrimer.setBlockState(x,height,z,STONE);
        }
      }
    }
  }
}","@Override public void genTerrainBlocks(World world,Random rand,ChunkPrimer chunkPrimer,int x,int z,double noiseVal){
  if (this.peakNoise == null || this.peakRoofNoise == null || this.worldSeed != world.getSeed()) {
    Random peakRandom=new Random(this.worldSeed);
    this.peakNoise=new NoiseGeneratorPerlin(peakRandom,16);
    this.peakRoofNoise=new NoiseGeneratorPerlin(peakRandom,4);
  }
  this.worldSeed=world.getSeed();
  double peakHeight=0.0D;
  int i=(x & -16) + (z & 15);
  int j=(z & -16) + (x & 15);
  double d0=Math.min(Math.abs(noiseVal),this.peakNoise.getValue((double)i * 0.5D,(double)j * 0.5D));
  if (d0 > 0.0D) {
    double d2=Math.abs(this.peakRoofNoise.getValue((double)i * 0.001953125D,(double)j * 0.001953125D));
    peakHeight=d0 * d0 * 2.5D;
    double peakOffset=Math.ceil(d2 * 50.0D) + 14.0D;
    if (peakHeight > peakOffset) {
      peakHeight=peakOffset;
    }
    peakHeight=peakHeight + 64.0D;
  }
  int chunkX=x & 15;
  int chunkZ=z & 15;
  int seaLevel=world.getSeaLevel();
  int l=-1;
  for (int height=255; height >= 0; --height) {
    if (chunkPrimer.getBlockState(chunkX,height,chunkZ).getMaterial() == Material.AIR && height < (int)peakHeight) {
      chunkPrimer.setBlockState(chunkX,height,chunkZ,STONE);
    }
    if (height <= rand.nextInt(5)) {
      chunkPrimer.setBlockState(chunkX,height,chunkZ,BEDROCK);
    }
 else {
      IBlockState iblockstate1=chunkPrimer.getBlockState(chunkX,height,chunkZ);
      if (iblockstate1.getMaterial() == Material.AIR) {
        l=-1 - this.fillerDepth;
      }
 else       if (iblockstate1.getBlock() == Blocks.STONE) {
        if (l == -1 - this.fillerDepth) {
          chunkPrimer.setBlockState(chunkX,height,chunkZ,this.topBlock);
          ++l;
        }
 else         if (l < 0) {
          chunkPrimer.setBlockState(chunkX,height,chunkZ,this.fillerBlock);
          ++l;
        }
 else         if (l == 0) {
          l=1;
          chunkPrimer.setBlockState(chunkX,height,chunkZ,this.fillerBlock);
        }
 else         if (l > 0) {
          chunkPrimer.setBlockState(chunkX,height,chunkZ,STONE);
        }
      }
    }
  }
}",0.8698727015558698
174536,"protected boolean checkCorners(World world,BlockPos pos,byte rotation){
  int xFar=pos.getX() + ((rotation % 2 == 0) ? this.width : this.length) - 1;
  int zFar=pos.getZ() + ((rotation % 2 == 0) ? this.length : this.width) - 1;
  BlockPos corner1=world.getTopSolidOrLiquidBlock(pos).down();
  BlockPos corner2=world.getTopSolidOrLiquidBlock(new BlockPos(xFar,255,0)).down();
  BlockPos corner3=world.getTopSolidOrLiquidBlock(new BlockPos(0,255,zFar)).down();
  BlockPos corner4=world.getTopSolidOrLiquidBlock(new BlockPos(xFar,255,zFar)).down();
  if (!allowedBlocks.contains(world.getBlockState(corner1))) {
    return false;
  }
  if (!allowedBlocks.contains(world.getBlockState(corner2)) || (Math.abs(corner2.getY() - corner1.getY())) > this.foundationDepth) {
    return false;
  }
  if (!allowedBlocks.contains(world.getBlockState(corner3)) || (Math.abs(corner3.getY() - corner1.getY())) > this.foundationDepth) {
    return false;
  }
  if (!allowedBlocks.contains(world.getBlockState(corner4)) || (Math.abs(corner4.getY() - corner1.getY())) > this.foundationDepth) {
    return false;
  }
  return true;
}","protected boolean checkCorners(World world,BlockPos pos,byte rotation){
  int xFar=pos.getX() + ((rotation % 2 == 0) ? this.width : this.length) - 1;
  int zFar=pos.getZ() + ((rotation % 2 == 0) ? this.length : this.width) - 1;
  BlockPos corner1=world.getTopSolidOrLiquidBlock(pos).down();
  BlockPos corner2=world.getTopSolidOrLiquidBlock(new BlockPos(xFar,255,pos.getZ())).down();
  BlockPos corner3=world.getTopSolidOrLiquidBlock(new BlockPos(pos.getX(),255,zFar)).down();
  BlockPos corner4=world.getTopSolidOrLiquidBlock(new BlockPos(xFar,255,zFar)).down();
  if (!allowedBlocks.contains(world.getBlockState(corner1))) {
    return false;
  }
  if (!allowedBlocks.contains(world.getBlockState(corner2)) || (Math.abs(corner2.getY() - corner1.getY())) > this.foundationDepth) {
    return false;
  }
  if (!allowedBlocks.contains(world.getBlockState(corner3)) || (Math.abs(corner3.getY() - corner1.getY())) > this.foundationDepth) {
    return false;
  }
  if (!allowedBlocks.contains(world.getBlockState(corner4)) || (Math.abs(corner4.getY() - corner1.getY())) > this.foundationDepth) {
    return false;
  }
  return true;
}",0.9901873327386262
174537,"@Override protected boolean checkCorners(World world,BlockPos pos,byte rotation){
  return true;
}","@Override protected boolean checkCorners(World world,BlockPos pos,byte rotation){
  int xFar=pos.getX() + ((rotation % 2 == 0) ? this.width : this.length) - 1;
  int zFar=pos.getZ() + ((rotation % 2 == 0) ? this.length : this.width) - 1;
  BlockPos corner1=pos;
  BlockPos corner2=new BlockPos(xFar,pos.getY(),pos.getZ());
  BlockPos corner3=new BlockPos(pos.getX(),pos.getY(),zFar);
  BlockPos corner4=new BlockPos(xFar,pos.getY(),zFar);
  if (!checkBiome(world,corner1)) {
    return false;
  }
  if (!checkBiome(world,corner2)) {
    return false;
  }
  if (!checkBiome(world,corner3)) {
    return false;
  }
  if (!checkBiome(world,corner4)) {
    return false;
  }
  return true;
}",0.2369426751592356
174538,"public int getMetaFromState(IBlockState state){
  return ((EnumFacing)state.getValue(FACING)).getIndex();
}","@Override public int getMetaFromState(IBlockState state){
  return ((EnumFacing)state.getValue(FACING)).getIndex();
}",0.9553571428571428
174539,"/** 
 * Methods related to block rendering.                   
 */
@SideOnly(Side.CLIENT) public BlockRenderLayer getBlockLayer(){
  return BlockRenderLayer.TRANSLUCENT;
}","/** 
 * Methods related to block rendering.                   
 */
@Override @SideOnly(Side.CLIENT) public BlockRenderLayer getBlockLayer(){
  return BlockRenderLayer.TRANSLUCENT;
}",0.9715909090909092
174540,"public IBlockState withMirror(IBlockState state,Mirror mirrorIn){
  return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
}","@Override public IBlockState withMirror(IBlockState state,Mirror mirrorIn){
  return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
}",0.9683544303797468
174541,"/** 
 * Methods related to block activation and interaction.  
 */
public boolean onBlockActivated(World worldIn,BlockPos pos,IBlockState state,EntityPlayer playerIn,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  if (!worldIn.isRemote) {
    ItemStack heldItem=playerIn.getHeldItem(hand);
    if (this.isEquipped && heldItem.isEmpty()) {
      worldIn.playSound(null,pos,ModSounds.BLOCK_INJECTOR_OPEN,SoundCategory.BLOCKS,0.3F,1.0F);
      worldIn.setBlockState(pos,ModBlocks.INJECTOR.getDefaultState().withProperty(FACING,worldIn.getBlockState(pos).getValue(FACING)));
      EntityItem activatedBase=new EntityItem(worldIn,pos.getX(),pos.getY() + 1,pos.getZ(),new ItemStack(ModItems.ACTIVATED_GEM_BASE));
      worldIn.spawnEntity(activatedBase);
    }
 else     if (!this.isEquipped) {
      if (heldItem.getItem() == ModItems.ACTIVATED_GEM_BASE) {
        worldIn.setBlockState(pos,ModBlocks.EQUIPPED_INJECTOR.getDefaultState().withProperty(FACING,worldIn.getBlockState(pos).getValue(FACING)));
        worldIn.playSound(null,pos,ModSounds.BLOCK_INJECTOR_CLOSE,SoundCategory.BLOCKS,0.3F,1.0F);
        if (!playerIn.capabilities.isCreativeMode) {
          heldItem.splitStack(1);
        }
        Injector.onGemBasePlacement(worldIn,pos);
      }
    }
    if (heldItem.getItem() instanceof ItemBlock) {
      return false;
    }
  }
  return true;
}","/** 
 * Methods related to block activation and interaction.  
 */
@Override public boolean onBlockActivated(World worldIn,BlockPos pos,IBlockState state,EntityPlayer playerIn,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  if (!worldIn.isRemote) {
    ItemStack heldItem=playerIn.getHeldItem(hand);
    if (this.isEquipped && heldItem.isEmpty()) {
      worldIn.playSound(null,pos,ModSounds.BLOCK_INJECTOR_OPEN,SoundCategory.BLOCKS,0.3F,1.0F);
      worldIn.setBlockState(pos,ModBlocks.INJECTOR.getDefaultState().withProperty(FACING,worldIn.getBlockState(pos).getValue(FACING)));
      EntityItem activatedBase=new EntityItem(worldIn,pos.getX(),pos.getY() + 1,pos.getZ(),new ItemStack(ModItems.ACTIVATED_GEM_BASE));
      worldIn.spawnEntity(activatedBase);
    }
 else     if (!this.isEquipped) {
      if (heldItem.getItem() == ModItems.ACTIVATED_GEM_BASE) {
        worldIn.setBlockState(pos,ModBlocks.EQUIPPED_INJECTOR.getDefaultState().withProperty(FACING,worldIn.getBlockState(pos).getValue(FACING)));
        worldIn.playSound(null,pos,ModSounds.BLOCK_INJECTOR_CLOSE,SoundCategory.BLOCKS,0.3F,1.0F);
        if (!playerIn.capabilities.isCreativeMode) {
          heldItem.splitStack(1);
        }
        Injector.onGemBasePlacement(worldIn,pos);
      }
    }
    if (heldItem.getItem() instanceof ItemBlock) {
      return false;
    }
  }
  return true;
}",0.9963768115942028
174542,"public boolean isFullCube(IBlockState state){
  return false;
}","@Override public boolean isFullCube(IBlockState state){
  return false;
}",0.9264705882352942
174543,"public ItemStack getItem(World worldIn,BlockPos pos,IBlockState state){
  return new ItemStack(ModBlocks.INJECTOR);
}","@Override public ItemStack getItem(World worldIn,BlockPos pos,IBlockState state){
  return new ItemStack(ModBlocks.INJECTOR);
}",0.9590163934426228
174544,"public void onBlockAdded(World worldIn,BlockPos pos,IBlockState state){
  super.onBlockAdded(worldIn,pos,state);
  this.setDefaultFacing(worldIn,pos,state);
  if (worldIn.isBlockPowered(pos) && this.isEquipped) {
    this.injectGemSeed(worldIn,pos);
  }
}","@Override public void onBlockAdded(World worldIn,BlockPos pos,IBlockState state){
  super.onBlockAdded(worldIn,pos,state);
  this.setDefaultFacing(worldIn,pos,state);
  if (worldIn.isBlockPowered(pos) && this.isEquipped) {
    this.injectGemSeed(worldIn,pos);
  }
}",0.9807692307692308
174545,"public IBlockState withRotation(IBlockState state,Rotation rot){
  return state.withProperty(FACING,rot.rotate((EnumFacing)state.getValue(FACING)));
}","@Override public IBlockState withRotation(IBlockState state,Rotation rot){
  return state.withProperty(FACING,rot.rotate((EnumFacing)state.getValue(FACING)));
}",0.967741935483871
174546,"protected BlockStateContainer createBlockState(){
  return new BlockStateContainer(this,new IProperty[]{FACING});
}","@Override protected BlockStateContainer createBlockState(){
  return new BlockStateContainer(this,new IProperty[]{FACING});
}",0.9583333333333334
174547,"public void onBlockPlacedBy(World worldIn,BlockPos pos,IBlockState state,EntityLivingBase placer,ItemStack stack){
  worldIn.setBlockState(pos,state.withProperty(FACING,placer.getHorizontalFacing().getOpposite()),2);
  Injector.onInjectorPlacement(worldIn,pos);
}","@Override public void onBlockPlacedBy(World worldIn,BlockPos pos,IBlockState state,EntityLivingBase placer,ItemStack stack){
  worldIn.setBlockState(pos,state.withProperty(FACING,placer.getHorizontalFacing().getOpposite()),2);
  Injector.onInjectorPlacement(worldIn,pos);
}",0.9813432835820896
174548,"public void neighborChanged(IBlockState state,World worldIn,BlockPos pos,Block blockIn,BlockPos p_189540_5_){
  if (worldIn.isBlockPowered(pos) && this.isEquipped) {
    this.injectGemSeed(worldIn,pos);
  }
}","@Override public void neighborChanged(IBlockState state,World worldIn,BlockPos pos,Block blockIn,BlockPos p_189540_5_){
  if (worldIn.isBlockPowered(pos) && this.isEquipped) {
    this.injectGemSeed(worldIn,pos);
  }
}",0.976525821596244
174549,"public IBlockState getStateFromMeta(int meta){
  EnumFacing enumfacing=EnumFacing.getFront(meta);
  if (enumfacing.getAxis() == EnumFacing.Axis.Y) {
    enumfacing=EnumFacing.NORTH;
  }
  return this.getDefaultState().withProperty(FACING,enumfacing);
}","@Override public IBlockState getStateFromMeta(int meta){
  EnumFacing enumfacing=EnumFacing.getFront(meta);
  if (enumfacing.getAxis() == EnumFacing.Axis.Y) {
    enumfacing=EnumFacing.NORTH;
  }
  return this.getDefaultState().withProperty(FACING,enumfacing);
}",0.980544747081712
174550,"public Item getItemDropped(IBlockState state,Random rand,int fortune){
  return Item.getItemFromBlock(ModBlocks.INJECTOR);
}","@Override public Item getItemDropped(IBlockState state,Random rand,int fortune){
  return Item.getItemFromBlock(ModBlocks.INJECTOR);
}",0.9612403100775194
174551,"public boolean isOpaqueCube(IBlockState state){
  return false;
}","@Override public boolean isOpaqueCube(IBlockState state){
  return false;
}",0.9285714285714286
174552,"@SideOnly(Side.CLIENT) public boolean shouldSideBeRendered(IBlockState blockState,IBlockAccess blockAccess,BlockPos pos,EnumFacing side){
  return true;
}","@Override @SideOnly(Side.CLIENT) public boolean shouldSideBeRendered(IBlockState blockState,IBlockAccess blockAccess,BlockPos pos,EnumFacing side){
  return true;
}",0.9685534591194968
174553,"@SuppressWarnings(""String_Node_Str"") public void applyGemPlacementBuffs(boolean initialSpawn){
switch (this.getGemPlacement()) {
case FOREHEAD:
    this.tasks.addTask(2,new EntityAIPredictFights(this,0.9D));
  break;
case MOUTH:
this.canTalk=false;
break;
case LEFT_HAND:
if (initialSpawn) {
this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getBaseValue() * 2.0D);
}
break;
case RIGHT_HAND:
if (initialSpawn) {
this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getBaseValue() * 2.0D);
}
break;
case BACK:
this.tasks.addTask(2,new EntityAIPanic(this,0.9D));
break;
case CHEST:
if (initialSpawn) {
this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue() * 2.5D);
}
break;
case BELLY:
if (this.fallbackServitude == -1 && this.rand.nextInt(8) == 0 && ModConfigs.canRebel) {
this.fallbackServitude=EntityGem.SERVE_REBELLION;
}
 else {
this.fallbackServitude=0;
}
break;
case RIGHT_KNEE:
this.setAIMoveSpeed(this.getAIMoveSpeed() * 1.2F);
break;
case LEFT_KNEE:
this.setAIMoveSpeed(this.getAIMoveSpeed() * 1.2F);
break;
}
}","@SuppressWarnings(""String_Node_Str"") public void applyGemPlacementBuffs(boolean initialSpawn){
switch (this.getGemPlacement()) {
case FOREHEAD:
    this.tasks.addTask(2,new EntityAIPredictFights(this,0.9D));
  break;
case MOUTH:
this.canTalk=false;
break;
case LEFT_HAND:
if (initialSpawn) {
this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getBaseValue() * 2.0D);
}
break;
case RIGHT_HAND:
if (initialSpawn) {
this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getBaseValue() * 2.0D);
}
break;
case BACK:
this.tasks.addTask(2,new EntityAIPanic(this,0.9D));
break;
case CHEST:
if (initialSpawn) {
this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue() * 2.5D);
this.setHealth(this.getMaxHealth());
}
break;
case BELLY:
if (this.fallbackServitude == -1 && this.rand.nextInt(8) == 0 && ModConfigs.canRebel) {
this.fallbackServitude=EntityGem.SERVE_REBELLION;
}
 else {
this.fallbackServitude=0;
}
break;
case RIGHT_KNEE:
this.setAIMoveSpeed(this.getAIMoveSpeed() * 1.2F);
break;
case LEFT_KNEE:
this.setAIMoveSpeed(this.getAIMoveSpeed() * 1.2F);
break;
}
}",0.98584003061615
174554,"public static ExitHole create(World world,BlockPos pos,double height,boolean meltRocks){
  ArrayList<BlockPos> blocksToDelete=new ArrayList<BlockPos>();
  float shortestLength=Float.MAX_VALUE;
  char direction='o';
  int brightestLight=0;
  for (int x=-9; x <= 9; ++x) {
    BlockPos check=pos.add(x,0,0);
    if (world.isAirBlock(check) && x <= shortestLength && world.getLight(check) >= brightestLight) {
      brightestLight=world.getLight(check);
      shortestLength=Math.abs(x);
      if (x == 0) {
        direction='o';
      }
 else       if (x > 0) {
        direction='e';
      }
 else {
        direction='w';
      }
    }
  }
  for (int y=0; y < height; ++y) {
    blocksToDelete.add(pos.up(y));
  }
  for (int z=-9; z <= 9; ++z) {
    BlockPos check=pos.add(0,0,z);
    if (world.isAirBlock(check) && z <= shortestLength && world.getLight(check) >= brightestLight) {
      brightestLight=world.getLight(check);
      shortestLength=Math.abs(z);
      if (z == 0) {
        direction='o';
      }
 else       if (z > 0) {
        direction='s';
      }
 else {
        direction='n';
      }
    }
  }
switch (direction) {
case 'n':
    for (int z=0; z <= shortestLength; ++z) {
      for (int y=0; y < height; ++y) {
        blocksToDelete.add(pos.add(0,y,-z));
      }
    }
  break;
case 's':
for (int z=0; z <= shortestLength; ++z) {
  for (int y=0; y < height; ++y) {
    blocksToDelete.add(pos.add(0,y,z));
  }
}
break;
case 'e':
for (int x=0; x <= shortestLength; ++x) {
for (int y=0; y < height; ++y) {
blocksToDelete.add(pos.add(x,y,0));
}
}
break;
case 'w':
for (int x=0; x <= shortestLength; ++x) {
for (int y=0; y <= height; ++y) {
blocksToDelete.add(pos.add(-x,y,0));
}
}
break;
}
return new ExitHole(blocksToDelete.toArray(new BlockPos[0]),blocksToDelete.size() <= height,meltRocks,pos.getY());
}","public static ExitHole create(World world,BlockPos pos,double height,boolean meltRocks){
  ArrayList<BlockPos> blocksToDelete=new ArrayList<BlockPos>();
  float shortestLength=Float.MAX_VALUE;
  char direction='o';
  int brightestLight=0;
  for (int x=-9; x <= 9; ++x) {
    BlockPos check=pos.add(x,0,0);
    if (world.isAirBlock(check) && Math.abs(x) <= shortestLength && world.getLight(check) >= brightestLight) {
      brightestLight=world.getLight(check);
      shortestLength=Math.abs(x);
      if (x == 0) {
        direction='o';
      }
 else       if (x > 0) {
        direction='e';
      }
 else {
        direction='w';
      }
    }
  }
  for (int y=0; y < height; ++y) {
    blocksToDelete.add(pos.up(y));
  }
  for (int z=-9; z <= 9; ++z) {
    BlockPos check=pos.add(0,0,z);
    if (world.isAirBlock(check) && Math.abs(z) <= shortestLength && world.getLight(check) >= brightestLight) {
      brightestLight=world.getLight(check);
      shortestLength=Math.abs(z);
      if (z == 0) {
        direction='o';
      }
 else       if (z > 0) {
        direction='s';
      }
 else {
        direction='n';
      }
    }
  }
switch (direction) {
case 'n':
    for (int z=0; z <= shortestLength; ++z) {
      for (int y=0; y < height; ++y) {
        blocksToDelete.add(pos.add(0,y,-z));
      }
    }
  break;
case 's':
for (int z=0; z <= shortestLength; ++z) {
  for (int y=0; y < height; ++y) {
    blocksToDelete.add(pos.add(0,y,z));
  }
}
break;
case 'e':
for (int x=0; x <= shortestLength; ++x) {
for (int y=0; y < height; ++y) {
blocksToDelete.add(pos.add(x,y,0));
}
}
break;
case 'w':
for (int x=0; x <= shortestLength; ++x) {
for (int y=0; y < height; ++y) {
blocksToDelete.add(pos.add(-x,y,0));
}
}
break;
}
return new ExitHole(blocksToDelete.toArray(new BlockPos[0]),blocksToDelete.size() <= height,meltRocks,pos.getY());
}",0.9942763695829926
174555,"public void emerge(World world){
  for (  BlockPos block : this.blocks) {
    world.destroyBlock(block,false);
    if (this.meltRocks && block.getY() == minY) {
      world.setBlockState(block,ModBlocks.ROCK_MELT.getDefaultState());
    }
  }
}","public void emerge(World world){
  for (  BlockPos block : this.blocks) {
    world.destroyBlock(block,false);
    if (this.meltRocks && block.getY() == minY && !world.isAirBlock(block.down())) {
      world.setBlockState(block,ModBlocks.ROCK_MELT.getDefaultState());
    }
  }
}",0.9330783938814532
174556,"public boolean attackEntityAsMob(Entity entityIn){
  float f=(float)this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue();
  int i=0;
  if (entityIn instanceof EntityLivingBase) {
    f+=EnchantmentHelper.getModifierForCreature(this.getHeldItemMainhand(),((EntityLivingBase)entityIn).getCreatureAttribute());
    i+=EnchantmentHelper.getKnockbackModifier(this);
  }
  boolean flag=entityIn.attackEntityFrom(DamageSource.causeMobDamage(this),f);
  this.swingArm(EnumHand.MAIN_HAND);
  if (flag) {
    if (i > 0 && entityIn instanceof EntityLivingBase) {
      ((EntityLivingBase)entityIn).knockBack(this,(float)i * 0.5F,(double)MathHelper.sin(this.rotationYaw * 0.017453292F),(double)(-MathHelper.cos(this.rotationYaw * 0.017453292F)));
      this.motionX*=0.6D;
      this.motionZ*=0.6D;
    }
    int j=EnchantmentHelper.getFireAspectModifier(this);
    if (j > 0) {
      entityIn.setFire(j * 4);
    }
    if (entityIn instanceof EntityPlayer) {
      EntityPlayer entityplayer=(EntityPlayer)entityIn;
      ItemStack itemstack=this.getHeldItemMainhand();
      ItemStack itemstack1=entityplayer.isHandActive() ? entityplayer.getActiveItemStack() : ItemStack.EMPTY;
      if (itemstack.getItem() instanceof ItemAxe && itemstack1.getItem() == Items.SHIELD) {
        float f1=0.25F + (float)EnchantmentHelper.getEfficiencyModifier(this) * 0.05F;
        if (this.rand.nextFloat() < f1) {
          entityplayer.getCooldownTracker().setCooldown(Items.SHIELD,100);
          this.world.setEntityState(entityplayer,(byte)30);
        }
      }
    }
    this.applyEnchantments(this,entityIn);
  }
  return flag;
}","public boolean attackEntityAsMob(Entity entityIn){
  float f=(float)this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue();
  int i=0;
  if (entityIn instanceof EntityLivingBase) {
    f+=EnchantmentHelper.getModifierForCreature(this.getHeldItemMainhand(),((EntityLivingBase)entityIn).getCreatureAttribute());
    i+=EnchantmentHelper.getKnockbackModifier(this);
    try {
      Field recentlyHit=ReflectionUtils.getFieldFromSuperclass(entityIn.getClass(),EntityLivingBase.class,""String_Node_Str"");
      recentlyHit.setAccessible(true);
      recentlyHit.setInt(entityIn,100);
      if (this.getOwner() != null) {
        Field attackingPlayer=ReflectionUtils.getFieldFromSuperclass(entityIn.getClass(),EntityLivingBase.class,""String_Node_Str"");
        attackingPlayer.setAccessible(true);
        attackingPlayer.set(entityIn,this.getOwner());
      }
 else {
        KAGIC.instance.chatInfoMessage(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      String errorReport=""String_Node_Str"";
      errorReport+=""String_Node_Str"";
      errorReport+=""String_Node_Str"";
      errorReport+=""String_Node_Str"" + ((EntityLivingBase)entityIn).getClass().getName();
      KAGIC.instance.chatInfoMessage(errorReport);
      e.printStackTrace();
    }
  }
  boolean flag=entityIn.attackEntityFrom(DamageSource.causeMobDamage(this),f);
  this.swingArm(EnumHand.MAIN_HAND);
  if (flag) {
    if (i > 0 && entityIn instanceof EntityLivingBase) {
      ((EntityLivingBase)entityIn).knockBack(this,(float)i * 0.5F,(double)MathHelper.sin(this.rotationYaw * 0.017453292F),(double)(-MathHelper.cos(this.rotationYaw * 0.017453292F)));
      this.motionX*=0.6D;
      this.motionZ*=0.6D;
    }
    int j=EnchantmentHelper.getFireAspectModifier(this);
    if (j > 0) {
      entityIn.setFire(j * 4);
    }
    if (entityIn instanceof EntityPlayer) {
      EntityPlayer entityplayer=(EntityPlayer)entityIn;
      ItemStack itemstack=this.getHeldItemMainhand();
      ItemStack itemstack1=entityplayer.isHandActive() ? entityplayer.getActiveItemStack() : ItemStack.EMPTY;
      if (itemstack.getItem() instanceof ItemAxe && itemstack1.getItem() == Items.SHIELD) {
        float f1=0.25F + (float)EnchantmentHelper.getEfficiencyModifier(this) * 0.05F;
        if (this.rand.nextFloat() < f1) {
          entityplayer.getCooldownTracker().setCooldown(Items.SHIELD,100);
          this.world.setEntityState(entityplayer,(byte)30);
        }
      }
    }
    this.applyEnchantments(this,entityIn);
  }
  return flag;
}",0.7859195402298851
174557,"/** 
 * Methods related to entity combat.					 
 */
public boolean shouldAttackEntity(EntityLivingBase attacker,EntityLivingBase victim){
  return this.isOnSameTeam(victim);
}","/** 
 * Methods related to entity combat.					 
 */
public boolean shouldAttackEntity(EntityLivingBase attacker,EntityLivingBase victim){
  return !this.isOnSameTeam(victim);
}",0.9971509971509972
174558,"public boolean attackEntityAsMob(Entity entityIn){
  if (!this.world.isRemote) {
    boolean smite=this.rand.nextInt(3) == 1;
    if (smite) {
      this.isImmuneToFire=true;
    }
 else {
      this.isImmuneToFire=false;
    }
    if (this.isCharged()) {
      AxisAlignedBB axisalignedbb=(new AxisAlignedBB(this.posX,this.posY,this.posZ,(this.posX + 1),(this.posY + 1),(this.posZ + 1))).grow(12.0,(double)this.world.getHeight(),12.0);
      List<EntityLivingBase> list=this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class,axisalignedbb);
      for (      EntityLivingBase entity : list) {
        if (!this.isOwner(entity)) {
          boolean shouldAttack=true;
          if (entity instanceof EntityGem) {
            EntityGem gem=(EntityGem)entity;
            if (this.getServitude() == gem.getServitude()) {
              if (this.getServitude() == EntityGem.SERVE_HUMAN) {
                shouldAttack=this.isOwnerId(gem.getOwnerId());
              }
 else {
                shouldAttack=false;
              }
            }
          }
          if (shouldAttack) {
            if (smite) {
              EntityLightningBolt lightningBolt=new EntityLightningBolt(this.world,entity.posX,entity.posY,entity.posZ,true);
              this.world.addWeatherEffect(lightningBolt);
              entity.setFire(12);
            }
            entity.addPotionEffect(new PotionEffect(MobEffects.MINING_FATIGUE,80));
            entity.addPotionEffect(new PotionEffect(MobEffects.SLOWNESS,80));
            entity.addPotionEffect(new PotionEffect(MobEffects.WEAKNESS,80));
          }
        }
      }
    }
 else {
      if (smite) {
        EntityLightningBolt lightningBolt=new EntityLightningBolt(this.world,entityIn.posX,entityIn.posY,entityIn.posZ,true);
        this.world.addWeatherEffect(lightningBolt);
        entityIn.setFire(12);
      }
      ((EntityLivingBase)entityIn).addPotionEffect(new PotionEffect(MobEffects.MINING_FATIGUE,80));
      ((EntityLivingBase)entityIn).addPotionEffect(new PotionEffect(MobEffects.SLOWNESS,80));
      ((EntityLivingBase)entityIn).addPotionEffect(new PotionEffect(MobEffects.WEAKNESS,80));
    }
  }
  return super.attackEntityAsMob(entityIn);
}","public boolean attackEntityAsMob(Entity entityIn){
  if (!this.world.isRemote) {
    boolean smite=this.rand.nextInt(3) == 1;
    if (smite) {
      this.isImmuneToFire=true;
    }
 else {
      this.isImmuneToFire=false;
    }
    if (this.isCharged()) {
      AxisAlignedBB axisalignedbb=(new AxisAlignedBB(this.posX,this.posY,this.posZ,(this.posX + 1),(this.posY + 1),(this.posZ + 1))).grow(12.0,(double)this.world.getHeight(),12.0);
      List<EntityLivingBase> list=this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class,axisalignedbb);
      for (      EntityLivingBase entity : list) {
        if (!this.isOwner(entity)) {
          boolean shouldAttack=true;
          if (entity instanceof EntityGem) {
            EntityGem gem=(EntityGem)entity;
            if (this.getServitude() == gem.getServitude()) {
              if (this.getServitude() == EntityGem.SERVE_HUMAN) {
                shouldAttack=!this.isOwnerId(gem.getOwnerId());
              }
 else {
                shouldAttack=false;
              }
            }
          }
          if (shouldAttack) {
            if (smite) {
              EntityLightningBolt lightningBolt=new EntityLightningBolt(this.world,entity.posX,entity.posY,entity.posZ,true);
              this.world.addWeatherEffect(lightningBolt);
              entity.setFire(12);
            }
            entity.addPotionEffect(new PotionEffect(MobEffects.MINING_FATIGUE,80));
            entity.addPotionEffect(new PotionEffect(MobEffects.SLOWNESS,80));
            entity.addPotionEffect(new PotionEffect(MobEffects.WEAKNESS,80));
          }
        }
      }
    }
 else {
      if (smite) {
        EntityLightningBolt lightningBolt=new EntityLightningBolt(this.world,entityIn.posX,entityIn.posY,entityIn.posZ,true);
        this.world.addWeatherEffect(lightningBolt);
        entityIn.setFire(12);
      }
      ((EntityLivingBase)entityIn).addPotionEffect(new PotionEffect(MobEffects.MINING_FATIGUE,80));
      ((EntityLivingBase)entityIn).addPotionEffect(new PotionEffect(MobEffects.SLOWNESS,80));
      ((EntityLivingBase)entityIn).addPotionEffect(new PotionEffect(MobEffects.WEAKNESS,80));
    }
  }
  return super.attackEntityAsMob(entityIn);
}",0.9997745208568208
174559,"public boolean attackEntityAsMob(Entity entityIn){
  if (!this.world.isRemote) {
    boolean smite=this.rand.nextInt(7) == 1;
    if (this.isCharged()) {
      AxisAlignedBB axisalignedbb=(new AxisAlignedBB(this.posX,this.posY,this.posZ,(this.posX + 1),(this.posY + 1),(this.posZ + 1))).expand(12.0,(double)this.world.getHeight(),12.0);
      List<EntityLivingBase> list=this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class,axisalignedbb);
      for (      EntityLivingBase entity : list) {
        if (!this.isOwner(entity)) {
          if (smite) {
            boolean shouldAttack=true;
            if (entity instanceof EntityGem) {
              EntityGem gem=(EntityGem)entity;
              if (this.getServitude() == gem.getServitude()) {
                if (this.getServitude() == EntityGem.SERVE_HUMAN && this.getOwner() != null) {
                  shouldAttack=this.isOwnerId(gem.getOwnerId());
                }
 else {
                  shouldAttack=false;
                }
              }
            }
            if (shouldAttack && this.world.getGameRules().getBoolean(""String_Node_Str"")) {
              Explosion explosion=new Explosion(this.world,this,entity.posX,entity.posY,entity.posZ,1,true,true);
              explosion.doExplosionA();
              explosion.doExplosionB(true);
            }
 else {
              entity.addPotionEffect(new PotionEffect(MobEffects.STRENGTH,80));
            }
          }
        }
      }
    }
 else {
      if (smite && this.world.getGameRules().getBoolean(""String_Node_Str"")) {
        Explosion explosion=new Explosion(this.world,this,entityIn.posX,entityIn.posY,entityIn.posZ,1,true,true);
        explosion.doExplosionA();
        explosion.doExplosionB(true);
      }
    }
  }
  return super.attackEntityAsMob(entityIn);
}","public boolean attackEntityAsMob(Entity entityIn){
  if (!this.world.isRemote) {
    boolean smite=this.rand.nextInt(7) == 1;
    if (this.isCharged()) {
      AxisAlignedBB axisalignedbb=(new AxisAlignedBB(this.posX,this.posY,this.posZ,(this.posX + 1),(this.posY + 1),(this.posZ + 1))).expand(12.0,(double)this.world.getHeight(),12.0);
      List<EntityLivingBase> list=this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class,axisalignedbb);
      for (      EntityLivingBase entity : list) {
        if (!this.isOwner(entity)) {
          if (smite) {
            boolean shouldAttack=true;
            if (entity instanceof EntityGem) {
              EntityGem gem=(EntityGem)entity;
              if (this.getServitude() == gem.getServitude()) {
                if (this.getServitude() == EntityGem.SERVE_HUMAN && this.getOwner() != null) {
                  shouldAttack=!this.isOwnerId(gem.getOwnerId());
                }
 else {
                  shouldAttack=false;
                }
              }
            }
            if (shouldAttack && this.world.getGameRules().getBoolean(""String_Node_Str"")) {
              Explosion explosion=new Explosion(this.world,this,entity.posX,entity.posY,entity.posZ,1,true,true);
              explosion.doExplosionA();
              explosion.doExplosionB(true);
            }
 else {
              entity.addPotionEffect(new PotionEffect(MobEffects.STRENGTH,80));
            }
          }
        }
      }
    }
 else {
      if (smite && this.world.getGameRules().getBoolean(""String_Node_Str"")) {
        Explosion explosion=new Explosion(this.world,this,entityIn.posX,entityIn.posY,entityIn.posZ,1,true,true);
        explosion.doExplosionA();
        explosion.doExplosionB(true);
      }
    }
  }
  return super.attackEntityAsMob(entityIn);
}",0.9997247453894852
174560,"/** 
 * Methods related to entity combat.                     
 */
public boolean attackEntityAsMob(Entity entityIn){
  if (!this.world.isRemote) {
    this.charge_ticks+=20;
    this.hit_count+=1;
    if (this.isCharged()) {
      AxisAlignedBB axisalignedbb=(new AxisAlignedBB(this.posX,this.posY,this.posZ,(this.posX + 1),(this.posY + 1),(this.posZ + 1))).grow(8.0,(double)this.world.getHeight(),8.0);
      List<EntityLivingBase> list=this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class,axisalignedbb);
      for (      EntityLivingBase entity : list) {
        if (!this.isOwner(entity)) {
          boolean shouldAttack=true;
          if (entity instanceof EntityGem) {
            EntityGem gem=(EntityGem)entity;
            if (this.getServitude() == gem.getServitude()) {
              if (this.getServitude() == EntityGem.SERVE_HUMAN && this.getOwner() != null) {
                shouldAttack=this.isOwnerId(gem.getOwnerId());
              }
 else {
                shouldAttack=false;
              }
            }
          }
          if (shouldAttack) {
            if (entity.attackEntityFrom(DamageSource.causeMobDamage(this),(float)(7 + this.rand.nextInt(15)))) {
              entity.motionY+=0.9D;
              this.applyEnchantments(this,entity);
            }
          }
        }
      }
    }
 else {
      if (entityIn.attackEntityFrom(DamageSource.causeMobDamage(this),(float)(10 + this.rand.nextInt(15)))) {
        entityIn.motionY+=0.4D;
        this.applyEnchantments(this,entityIn);
      }
    }
  }
  return super.attackEntityAsMob(entityIn);
}","/** 
 * Methods related to entity combat.                     
 */
public boolean attackEntityAsMob(Entity entityIn){
  if (!this.world.isRemote) {
    this.charge_ticks+=20;
    this.hit_count+=1;
    if (this.isCharged()) {
      AxisAlignedBB axisalignedbb=(new AxisAlignedBB(this.posX,this.posY,this.posZ,(this.posX + 1),(this.posY + 1),(this.posZ + 1))).grow(8.0,(double)this.world.getHeight(),8.0);
      List<EntityLivingBase> list=this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class,axisalignedbb);
      for (      EntityLivingBase entity : list) {
        if (!this.isOwner(entity)) {
          boolean shouldAttack=true;
          if (entity instanceof EntityGem) {
            EntityGem gem=(EntityGem)entity;
            if (this.getServitude() == gem.getServitude()) {
              if (this.getServitude() == EntityGem.SERVE_HUMAN && this.getOwner() != null) {
                shouldAttack=!this.isOwnerId(gem.getOwnerId());
              }
 else {
                shouldAttack=false;
              }
            }
          }
          if (shouldAttack) {
            if (entity.attackEntityFrom(DamageSource.causeMobDamage(this),(float)(7 + this.rand.nextInt(15)))) {
              entity.motionY+=0.9D;
              this.applyEnchantments(this,entity);
            }
          }
        }
      }
    }
 else {
      if (entityIn.attackEntityFrom(DamageSource.causeMobDamage(this),(float)(10 + this.rand.nextInt(15)))) {
        entityIn.motionY+=0.4D;
        this.applyEnchantments(this,entityIn);
      }
    }
  }
  return super.attackEntityAsMob(entityIn);
}",0.9996881821016528
174561,"@Override public void update(){
  ++(this.ticksSinceLastCheck);
  if (this.isValid() && (ticksSinceLastCheck & 10) == 0) {
    this.validateWarpPad();
    this.ticksSinceLastCheck=0;
  }
  if (this.warpTicksLeft > 0) {
    --this.warpTicksLeft;
    if (this.warpTicksLeft <= 0) {
      this.WARP();
    }
  }
  if (this.cooldownTicksLeft >= 0) {
    --this.cooldownTicksLeft;
    if (this.cooldownTicksLeft <= 0) {
      this.warping=false;
      this.setDirty();
    }
  }
}","@Override public void update(){
  ++(this.ticksSinceLastCheck);
  if (this.isValid() && (ticksSinceLastCheck & 10) == 0) {
    this.validateWarpPad();
    this.ticksSinceLastCheck=0;
  }
  if (this.warpTicksLeft > 0) {
    --this.warpTicksLeft;
    if (this.warpTicksLeft <= 0) {
      this.WARP();
    }
  }
  if (this.cooldownTicksLeft >= 0) {
    --this.cooldownTicksLeft;
  }
  if (this.cooldownTicksLeft <= 0) {
    this.warping=false;
    this.setDirty();
  }
}",0.9808917197452228
174562,"public ModelQuartz(){
  super(0.0F,0.0F,64,64);
  this.bipedHead=new ModelRenderer(this,0,0);
  this.bipedHead.addBox(-4F,-12F,-4F,8,8,8);
  this.bipedHead.setRotationPoint(0F,0F,0F);
  this.bipedHeadwear=new ModelRenderer(this,32,0);
  this.bipedHeadwear.addBox(-4F,-12F,-4F,8,8,8,1.1F);
  this.bipedHeadwear.setRotationPoint(0F,0F,0F);
  this.bipedBody=new ModelRenderer(this,16,16);
  this.bipedBody.addBox(-5F,-4F,-3F,10,16,6);
  this.bipedBody.setRotationPoint(0F,0F,0F);
  this.bipedRightArm=new ModelRenderer(this,48,16);
  this.bipedRightArm.addBox(-4F,-4F,-2F,4,14,4);
  this.bipedRightArm.setRotationPoint(0F,0F,0F);
  this.bipedLeftArm=new ModelRenderer(this,48,34);
  this.bipedLeftArm.addBox(0F,-4F,-2F,4,14,4);
  this.bipedLeftArm.setRotationPoint(0F,0F,0F);
  this.bipedRightLeg=new ModelRenderer(this,0,16);
  this.bipedRightLeg.addBox(1F,0F,-2F,4,12,4);
  this.bipedRightLeg.setRotationPoint(0F,0F,0F);
  this.bipedLeftLeg=new ModelRenderer(this,0,32);
  this.bipedLeftLeg.addBox(-5F,0F,-2F,4,12,4);
  this.bipedLeftLeg.setRotationPoint(0F,0F,0F);
}","public ModelQuartz(){
  super(0.0F,0.0F,64,64);
  this.bipedHead=new ModelRenderer(this,0,0);
  this.bipedHead.addBox(-4F,-12F,-4F,8,8,8);
  this.bipedHead.setRotationPoint(0F,0F,0F);
  this.bipedHeadwear=new ModelRenderer(this,32,0);
  this.bipedHeadwear.addBox(-4F,-12F,-4F,8,8,8,1.1F);
  this.bipedHeadwear.setRotationPoint(0F,0F,0F);
  this.bipedBody=new ModelRenderer(this,16,16);
  this.bipedBody.addBox(-5F,-4F,-3F,10,16,6);
  this.bipedBody.setRotationPoint(0F,0F,0F);
  this.bipedRightArm=new ModelRenderer(this,48,16);
  this.bipedRightArm.addBox(-4F,-4F,-2F,4,14,4);
  this.bipedRightArm.setRotationPoint(0F,0F,0F);
  this.bipedLeftArm=new ModelRenderer(this,48,34);
  this.bipedLeftArm.addBox(0F,-4F,-2F,4,14,4);
  this.bipedLeftArm.setRotationPoint(0F,0F,0F);
  this.bipedRightLeg=new ModelRenderer(this,0,16);
  this.bipedRightLeg.addBox(1F,0F,-2F,4,12,4);
  this.bipedRightLeg.setRotationPoint(0F,0F,0F);
  this.bipedLeftLeg=new ModelRenderer(this,0,32);
  this.bipedLeftLeg.addBox(-5F,0F,-2F,4,12,4);
  this.bipedLeftLeg.setRotationPoint(0F,0F,0F);
  this.bipedCape=new ModelRenderer(this,0,0);
  this.bipedCape.setTextureSize(64,32);
  this.bipedCape.addBox(-5.0F,-4.0F,-2.f,10,20,1);
}",0.9396209784045836
174563,"public RenderCarnelian(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.5F);
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerGemPlacement(this));
}","public RenderCarnelian(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelQuartz(),0.5F);
  this.addLayer(new LayerQuartzItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerQuartzCape(this));
  this.addLayer(new LayerGemPlacement(this));
}",0.9468599033816424
174564,"public RenderLapisLazuli(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelLapisLazuli(),0.25F);
  this.addLayer(new LayerLapisLazuliItem(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerGemPlacement(this));
}","public RenderLapisLazuli(){
  super(Minecraft.getMinecraft().getRenderManager(),new ModelLapisLazuli(),0.25F);
  this.addLayer(new LayerLapisLazuliItem(this));
  this.addLayer(new LayerSkin(this));
  this.addLayer(new LayerHair(this));
  this.addLayer(new LayerUniform(this));
  this.addLayer(new LayerInsignia(this));
  this.addLayer(new LayerVisor(this));
  this.addLayer(new LayerGemPlacement(this));
}",0.70995670995671
174565,"public void travel(float strafe,float up,float forward){
  if (this.getGemPlacement() == GemPlacements.NOSE) {
    if (this.getAttackTarget() != null || this.getRevengeTarget() != null) {
      forward*=2;
      strafe*=2;
    }
  }
  if (this.dimensionOfCreation == -1) {
    if (this.motionY > 0) {
      this.motionY*=2.0;
    }
 else {
      this.motionY*=0.5;
    }
  }
  super.travel(strafe,up,forward);
}","public void travel(float strafe,float up,float forward){
  if (this.getGemPlacement() == GemPlacements.NOSE) {
    if (this.getAttackTarget() != null || this.getRevengeTarget() != null) {
      forward*=2;
      strafe*=2;
    }
  }
  super.travel(strafe,up,forward);
}",0.7
174566,"/** 
 * Methods related to entity rendering.                  
 */
@SideOnly(Side.CLIENT) public int getBrightnessForRender(float partialTicks){
  return this.isSpaceBorn ? 15728880 : super.getBrightnessForRender(partialTicks);
}","/** 
 * Methods related to entity rendering.				  
 */
@SideOnly(Side.CLIENT) public int getBrightnessForRender(float partialTicks){
  return this.isSpaceBorn ? 15728880 : super.getBrightnessForRender(partialTicks);
}",0.9551569506726456
174567,"public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty,IEntityLivingData livingdata){
  this.setHealth(this.getMaxHealth());
  if (!this.isGemPlacementDefined() || !this.isCorrectGemPlacement()) {
    int placementIndex=this.rand.nextInt(this.placements.size());
    this.setGemPlacement(this.placements.get(placementIndex).id);
  }
  if (!this.isGemCutDefined() || !this.isCorrectGemCut()) {
    int cutIndex=this.rand.nextInt(this.cuts.size());
    this.setGemCut(this.cuts.get(cutIndex).id);
  }
  this.applyGemPlacementBuffs();
  this.setHasVisor(this.rand.nextInt(3) == 0);
  this.setDimensionOfCreation(this.dimension);
  this.setAttackAI();
  if (this.fallbackServitude == -1) {
    this.fallbackServitude=0;
  }
  this.pitch=0.7F + (this.rand.nextFloat() / 2);
  return super.onInitialSpawn(difficulty,livingdata);
}","public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty,IEntityLivingData livingdata){
  this.setHealth(this.getMaxHealth());
  if (!this.isGemPlacementDefined() || !this.isGemCutDefined() || !this.isCorrectCutPlacement()) {
    this.setNewCutPlacement();
  }
  this.applyGemPlacementBuffs();
  this.setHasVisor(this.rand.nextInt(3) == 0);
  this.setDimensionOfCreation(this.dimension);
  this.setAttackAI();
  if (this.fallbackServitude == -1) {
    this.fallbackServitude=0;
  }
  this.pitch=0.7F + (this.rand.nextFloat() / 2);
  return super.onInitialSpawn(difficulty,livingdata);
}",0.7913769123783032
174568,"public void readEntityFromNBT(NBTTagCompound compound){
  super.readEntityFromNBT(compound);
  if (compound.hasKey(""String_Node_Str"")) {
    this.setGemCut(compound.getInteger(""String_Node_Str""));
    this.setGemPlacement(compound.getInteger(""String_Node_Str""));
  }
 else {
    this.convertGems(compound.getInteger(""String_Node_Str""));
  }
  if (!this.isGemPlacementDefined() || !this.isCorrectGemPlacement()) {
    int placementIndex=this.rand.nextInt(this.placements.size());
    this.setGemPlacement(this.placements.get(placementIndex).id);
  }
  if (!this.isGemCutDefined() || !this.isCorrectGemCut()) {
    int cutIndex=this.rand.nextInt(this.cuts.size());
    this.setGemCut(this.cuts.get(cutIndex).id);
  }
  this.applyGemPlacementBuffs();
  this.setHasVisor(compound.getBoolean(""String_Node_Str""));
  if (compound.hasKey(""String_Node_Str"")) {
    this.setInsigniaColor(compound.getInteger(""String_Node_Str""));
  }
 else {
    this.setInsigniaColor(12);
  }
  this.setHairStyle(compound.getInteger(""String_Node_Str""));
  this.setDefective(compound.getBoolean(""String_Node_Str""));
  this.setPrimary(compound.getBoolean(""String_Node_Str""));
  NBTTagList fusionMembers=compound.getTagList(""String_Node_Str"",10);
  for (int i=0; i < fusionMembers.tagCount(); ++i) {
    this.fusionMembers.add(fusionMembers.getCompoundTagAt(i));
  }
  this.setFusionCount(compound.getInteger(""String_Node_Str""));
  this.setFusionPlacements(compound.getString(""String_Node_Str""));
  this.setSpecial(compound.getInteger(""String_Node_Str""));
  String ownerId;
  if (compound.hasKey(""String_Node_Str"",8)) {
    ownerId=compound.getString(""String_Node_Str"");
  }
 else {
    String tempId=compound.getString(""String_Node_Str"");
    ownerId=PreYggdrasilConverter.convertMobOwnerIfNeeded(this.getServer(),tempId);
  }
  if (!ownerId.isEmpty()) {
    this.setOwnerId(UUID.fromString(ownerId));
  }
  String leaderId;
  if (compound.hasKey(""String_Node_Str"",8)) {
    leaderId=compound.getString(""String_Node_Str"");
  }
 else {
    String tempId=compound.getString(""String_Node_Str"");
    leaderId=PreYggdrasilConverter.convertMobOwnerIfNeeded(this.getServer(),tempId);
  }
  if (!leaderId.isEmpty()) {
    this.setLeader(UUID.fromString(leaderId));
  }
  NBTTagList owners=compound.getTagList(""String_Node_Str"",10);
  for (int i=0; i < owners.tagCount(); ++i) {
    NBTTagCompound nbt=owners.getCompoundTagAt(i);
    String jointId;
    if (nbt.hasKey(""String_Node_Str"",8)) {
      jointId=nbt.getString(""String_Node_Str"");
    }
 else {
      String tempId=nbt.getString(""String_Node_Str"");
      jointId=PreYggdrasilConverter.convertMobOwnerIfNeeded(this.getServer(),tempId);
    }
    if (!jointId.isEmpty()) {
      this.jointOwners.add(UUID.fromString(jointId));
    }
  }
  if (compound.hasKey(""String_Node_Str"") && compound.hasKey(""String_Node_Str"") && compound.hasKey(""String_Node_Str"")) {
    this.restPosition=new BlockPos(compound.getDouble(""String_Node_Str""),compound.getDouble(""String_Node_Str""),compound.getDouble(""String_Node_Str""));
  }
  if (this.stayAI != null) {
    this.stayAI.setSitting(compound.getBoolean(""String_Node_Str""));
  }
  this.isSitting=compound.getBoolean(""String_Node_Str"");
  this.servitude=compound.getInteger(""String_Node_Str"");
  this.fallbackServitude=compound.getInteger(""String_Node_Str"");
  this.timeUntilBetrayal=compound.getInteger(""String_Node_Str"");
  this.wantsToFuse=compound.getBoolean(""String_Node_Str"");
  if (compound.hasKey(""String_Node_Str"")) {
    this.pitch=compound.getFloat(""String_Node_Str"");
  }
 else {
    this.pitch=0.7F + (this.rand.nextFloat() / 2);
  }
  if (compound.hasKey(""String_Node_Str"")) {
    this.setDimensionOfCreation(compound.getInteger(""String_Node_Str""));
  }
 else {
    this.setDimensionOfCreation(this.dimension);
  }
  this.setAttackAI();
}","public void readEntityFromNBT(NBTTagCompound compound){
  super.readEntityFromNBT(compound);
  if (compound.hasKey(""String_Node_Str"")) {
    this.setGemCut(compound.getInteger(""String_Node_Str""));
    this.setGemPlacement(compound.getInteger(""String_Node_Str""));
  }
 else {
    this.convertGems(compound.getInteger(""String_Node_Str""));
  }
  if (!this.isGemPlacementDefined() || !this.isGemCutDefined() || !this.isCorrectCutPlacement()) {
    this.setNewCutPlacement();
  }
  this.applyGemPlacementBuffs();
  this.setHasVisor(compound.getBoolean(""String_Node_Str""));
  if (compound.hasKey(""String_Node_Str"")) {
    this.setInsigniaColor(compound.getInteger(""String_Node_Str""));
  }
 else {
    this.setInsigniaColor(12);
  }
  this.setHairStyle(compound.getInteger(""String_Node_Str""));
  this.setDefective(compound.getBoolean(""String_Node_Str""));
  this.setPrimary(compound.getBoolean(""String_Node_Str""));
  NBTTagList fusionMembers=compound.getTagList(""String_Node_Str"",10);
  for (int i=0; i < fusionMembers.tagCount(); ++i) {
    this.fusionMembers.add(fusionMembers.getCompoundTagAt(i));
  }
  this.setFusionCount(compound.getInteger(""String_Node_Str""));
  this.setFusionPlacements(compound.getString(""String_Node_Str""));
  this.setSpecial(compound.getInteger(""String_Node_Str""));
  String ownerId;
  if (compound.hasKey(""String_Node_Str"",8)) {
    ownerId=compound.getString(""String_Node_Str"");
  }
 else {
    String tempId=compound.getString(""String_Node_Str"");
    ownerId=PreYggdrasilConverter.convertMobOwnerIfNeeded(this.getServer(),tempId);
  }
  if (!ownerId.isEmpty()) {
    this.setOwnerId(UUID.fromString(ownerId));
  }
  String leaderId;
  if (compound.hasKey(""String_Node_Str"",8)) {
    leaderId=compound.getString(""String_Node_Str"");
  }
 else {
    String tempId=compound.getString(""String_Node_Str"");
    leaderId=PreYggdrasilConverter.convertMobOwnerIfNeeded(this.getServer(),tempId);
  }
  if (!leaderId.isEmpty()) {
    this.setLeader(UUID.fromString(leaderId));
  }
  NBTTagList owners=compound.getTagList(""String_Node_Str"",10);
  for (int i=0; i < owners.tagCount(); ++i) {
    NBTTagCompound nbt=owners.getCompoundTagAt(i);
    String jointId;
    if (nbt.hasKey(""String_Node_Str"",8)) {
      jointId=nbt.getString(""String_Node_Str"");
    }
 else {
      String tempId=nbt.getString(""String_Node_Str"");
      jointId=PreYggdrasilConverter.convertMobOwnerIfNeeded(this.getServer(),tempId);
    }
    if (!jointId.isEmpty()) {
      this.jointOwners.add(UUID.fromString(jointId));
    }
  }
  if (compound.hasKey(""String_Node_Str"") && compound.hasKey(""String_Node_Str"") && compound.hasKey(""String_Node_Str"")) {
    this.restPosition=new BlockPos(compound.getDouble(""String_Node_Str""),compound.getDouble(""String_Node_Str""),compound.getDouble(""String_Node_Str""));
  }
  if (this.stayAI != null) {
    this.stayAI.setSitting(compound.getBoolean(""String_Node_Str""));
  }
  this.isSitting=compound.getBoolean(""String_Node_Str"");
  this.servitude=compound.getInteger(""String_Node_Str"");
  this.fallbackServitude=compound.getInteger(""String_Node_Str"");
  this.timeUntilBetrayal=compound.getInteger(""String_Node_Str"");
  this.wantsToFuse=compound.getBoolean(""String_Node_Str"");
  if (compound.hasKey(""String_Node_Str"")) {
    this.pitch=compound.getFloat(""String_Node_Str"");
  }
 else {
    this.pitch=0.7F + (this.rand.nextFloat() / 2);
  }
  if (compound.hasKey(""String_Node_Str"")) {
    this.setDimensionOfCreation(compound.getInteger(""String_Node_Str""));
  }
 else {
    this.setDimensionOfCreation(this.dimension);
  }
  this.setAttackAI();
}",0.9592944369063772
174569,"/** 
 * Methods related to entity loading.                    
 */
public void writeEntityToNBT(NBTTagCompound compound){
  super.writeEntityToNBT(compound);
  compound.setInteger(""String_Node_Str"",this.getGemPlacement().id);
  compound.setInteger(""String_Node_Str"",this.getGemCut().id);
  compound.setBoolean(""String_Node_Str"",this.hasVisor());
  compound.setInteger(""String_Node_Str"",this.getInsigniaColor());
  compound.setInteger(""String_Node_Str"",this.getHairStyle());
  compound.setBoolean(""String_Node_Str"",this.isDefective());
  compound.setBoolean(""String_Node_Str"",this.isPrimary());
  compound.setInteger(""String_Node_Str"",this.getSpecial());
  NBTTagList fusionMembers=new NBTTagList();
  for (int i=0; i < this.fusionMembers.size(); ++i) {
    fusionMembers.appendTag(this.fusionMembers.get(i));
  }
  compound.setInteger(""String_Node_Str"",this.getFusionCount());
  compound.setString(""String_Node_Str"",this.getFusionPlacements());
  compound.setTag(""String_Node_Str"",fusionMembers);
  if (this.getOwnerId() == null) {
    compound.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    compound.setString(""String_Node_Str"",this.getOwnerId().toString());
  }
  if (this.getLeader() == null) {
    compound.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    compound.setString(""String_Node_Str"",this.leader.toString());
  }
  NBTTagList owners=new NBTTagList();
  for (int i=0; i < this.jointOwners.size(); ++i) {
    UUID ownerId=this.jointOwners.get(i);
    NBTTagCompound nbt=new NBTTagCompound();
    nbt.setString(""String_Node_Str"",ownerId.toString());
    owners.appendTag(nbt);
  }
  compound.setTag(""String_Node_Str"",owners);
  if (this.restPosition != null) {
    compound.setDouble(""String_Node_Str"",this.restPosition.getX());
    compound.setDouble(""String_Node_Str"",this.restPosition.getY());
    compound.setDouble(""String_Node_Str"",this.restPosition.getZ());
  }
  compound.setBoolean(""String_Node_Str"",this.isSitting());
  compound.setInteger(""String_Node_Str"",this.servitude);
  compound.setInteger(""String_Node_Str"",this.fallbackServitude);
  compound.setInteger(""String_Node_Str"",this.timeUntilBetrayal);
  compound.setInteger(""String_Node_Str"",this.dimensionOfCreation);
  compound.setBoolean(""String_Node_Str"",this.wantsToFuse);
  compound.setFloat(""String_Node_Str"",this.pitch);
}","/** 
 * Methods related to entity loading.					
 */
public void writeEntityToNBT(NBTTagCompound compound){
  super.writeEntityToNBT(compound);
  compound.setInteger(""String_Node_Str"",this.getGemPlacement().id);
  compound.setInteger(""String_Node_Str"",this.getGemCut().id);
  compound.setBoolean(""String_Node_Str"",this.hasVisor());
  compound.setInteger(""String_Node_Str"",this.getInsigniaColor());
  compound.setInteger(""String_Node_Str"",this.getHairStyle());
  compound.setBoolean(""String_Node_Str"",this.isDefective());
  compound.setBoolean(""String_Node_Str"",this.isPrimary());
  compound.setInteger(""String_Node_Str"",this.getSpecial());
  NBTTagList fusionMembers=new NBTTagList();
  for (int i=0; i < this.fusionMembers.size(); ++i) {
    fusionMembers.appendTag(this.fusionMembers.get(i));
  }
  compound.setInteger(""String_Node_Str"",this.getFusionCount());
  compound.setString(""String_Node_Str"",this.getFusionPlacements());
  compound.setTag(""String_Node_Str"",fusionMembers);
  if (this.getOwnerId() == null) {
    compound.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    compound.setString(""String_Node_Str"",this.getOwnerId().toString());
  }
  if (this.getLeader() == null) {
    compound.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    compound.setString(""String_Node_Str"",this.leader.toString());
  }
  NBTTagList owners=new NBTTagList();
  for (int i=0; i < this.jointOwners.size(); ++i) {
    UUID ownerId=this.jointOwners.get(i);
    NBTTagCompound nbt=new NBTTagCompound();
    nbt.setString(""String_Node_Str"",ownerId.toString());
    owners.appendTag(nbt);
  }
  compound.setTag(""String_Node_Str"",owners);
  if (this.restPosition != null) {
    compound.setDouble(""String_Node_Str"",this.restPosition.getX());
    compound.setDouble(""String_Node_Str"",this.restPosition.getY());
    compound.setDouble(""String_Node_Str"",this.restPosition.getZ());
  }
  compound.setBoolean(""String_Node_Str"",this.isSitting());
  compound.setInteger(""String_Node_Str"",this.servitude);
  compound.setInteger(""String_Node_Str"",this.fallbackServitude);
  compound.setInteger(""String_Node_Str"",this.timeUntilBetrayal);
  compound.setInteger(""String_Node_Str"",this.dimensionOfCreation);
  compound.setBoolean(""String_Node_Str"",this.wantsToFuse);
  compound.setFloat(""String_Node_Str"",this.pitch);
}",0.9946294307196564
174570,"/** 
 * Methods related to entity combat.                     
 */
public boolean shouldAttackEntity(EntityLivingBase attacker,EntityLivingBase victim){
  return this.isOnSameTeam(victim);
}","/** 
 * Methods related to entity combat.					 
 */
public boolean shouldAttackEntity(EntityLivingBase attacker,EntityLivingBase victim){
  return this.isOnSameTeam(victim);
}",0.9315068493150684
174571,"/** 
 * Methods related to entity sound.                      
 */
public float getSoundPitch(){
  return this.pitch;
}","/** 
 * Methods related to entity sound.					  
 */
public float getSoundPitch(){
  return this.pitch;
}",0.8878923766816144
174572,"public boolean alternateInteract(EntityPlayer player){
  return false;
}","public boolean alternateInteract(EntityPlayer player){
  KAGIC.instance.chatInfoMessage(""String_Node_Str"" + this.getGemCut() + ""String_Node_Str""+ this.getGemPlacement());
  return false;
}",0.5538461538461539
174573,"/** 
 * Methods related to entity death.                      
 */
public void onDeath(DamageSource cause){
  if (!this.world.isRemote) {
    if (this.isFusion()) {
      this.unfuse();
      this.setDead();
    }
 else {
      ItemStack stack=new ItemStack(this.droppedGemItem);
      boolean shattered=false;
      boolean enchanted=false;
      if (cause.getEntity() instanceof EntityLivingBase) {
        ItemStack heldItem=((EntityLivingBase)cause.getEntity()).getHeldItemMainhand();
        if (heldItem.isItemEnchanted()) {
          NBTTagList enchantments=heldItem.getEnchantmentTagList();
          for (int i=0; i < enchantments.tagCount(); i++) {
            if (enchantments.getCompoundTagAt(i).getInteger(""String_Node_Str"") == Enchantment.getEnchantmentID(ModEnchantments.BREAKING_POINT)) {
              if (cause.getEntity() instanceof EntityPlayer) {
                EntityPlayer player=(EntityPlayer)cause.getEntity();
                player.addStat(ModAchievements.NOW_THATS_A_WEAPON);
              }
              stack=new ItemStack(this.droppedCrackedGemItem);
              enchanted=true;
              shattered=true;
            }
 else             if (enchantments.getCompoundTagAt(i).getInteger(""String_Node_Str"") == Enchantment.getEnchantmentID(ModEnchantments.FAIR_FIGHT)) {
              if (cause.getEntity() instanceof EntityPlayer) {
                EntityPlayer player=(EntityPlayer)cause.getEntity();
                player.addStat(ModAchievements.MY_BEST_WORK);
              }
              stack=new ItemStack(this.droppedGemItem);
              enchanted=true;
            }
          }
        }
 else         if (heldItem.getItem() == ModItems.GEM_STAFF) {
          stack=new ItemStack(this.droppedGemItem);
          enchanted=true;
        }
      }
      if (!enchanted) {
        if (this.rand.nextInt(80) == 0) {
          stack=new ItemStack(this.droppedCrackedGemItem);
          shattered=true;
        }
 else {
          stack=new ItemStack(this.droppedGemItem);
        }
      }
      if (shattered) {
        this.playSound(ModSounds.GEM_SHATTER,3.0F,1.0F);
        cause=new ShatterDamage();
      }
 else {
        this.playSound(ModSounds.GEM_POOF,3.0F,1.0F);
        cause=new PoofDamage();
      }
      if (cause.getEntity() instanceof EntitySlag) {
        cause=new SlagDamage();
      }
      if (this.world.getGameRules().getBoolean(""String_Node_Str"")) {
        for (        EntityPlayer playerIn : this.world.playerEntities) {
          if (EntityPlayer.getUUID(playerIn.getGameProfile()).equals(this.getOwnerId())) {
            playerIn.sendMessage(cause.getDeathMessage(this));
          }
 else {
            for (            UUID ownerId : this.jointOwners) {
              if (EntityPlayer.getUUID(playerIn.getGameProfile()).equals(ownerId)) {
                playerIn.sendMessage(cause.getDeathMessage(this));
              }
            }
          }
        }
      }
      if (!stack.isEmpty()) {
        ((ItemGem)stack.getItem()).setData(this,stack);
        this.entityDropItem(stack,0.0F);
      }
    }
  }
  super.onDeath(cause);
}","/** 
 * Methods related to entity death.					  
 */
public void onDeath(DamageSource cause){
  if (!this.world.isRemote) {
    if (this.isFusion()) {
      this.unfuse();
      this.setDead();
    }
 else {
      ItemStack stack=new ItemStack(this.droppedGemItem);
      boolean shattered=false;
      boolean enchanted=false;
      if (cause.getEntity() instanceof EntityLivingBase) {
        ItemStack heldItem=((EntityLivingBase)cause.getEntity()).getHeldItemMainhand();
        if (heldItem.isItemEnchanted()) {
          NBTTagList enchantments=heldItem.getEnchantmentTagList();
          for (int i=0; i < enchantments.tagCount(); i++) {
            if (enchantments.getCompoundTagAt(i).getInteger(""String_Node_Str"") == Enchantment.getEnchantmentID(ModEnchantments.BREAKING_POINT)) {
              if (cause.getEntity() instanceof EntityPlayer) {
                EntityPlayer player=(EntityPlayer)cause.getEntity();
                player.addStat(ModAchievements.NOW_THATS_A_WEAPON);
              }
              stack=new ItemStack(this.droppedCrackedGemItem);
              enchanted=true;
              shattered=true;
            }
 else             if (enchantments.getCompoundTagAt(i).getInteger(""String_Node_Str"") == Enchantment.getEnchantmentID(ModEnchantments.FAIR_FIGHT)) {
              if (cause.getEntity() instanceof EntityPlayer) {
                EntityPlayer player=(EntityPlayer)cause.getEntity();
                player.addStat(ModAchievements.MY_BEST_WORK);
              }
              stack=new ItemStack(this.droppedGemItem);
              enchanted=true;
            }
          }
        }
 else         if (heldItem.getItem() == ModItems.GEM_STAFF) {
          stack=new ItemStack(this.droppedGemItem);
          enchanted=true;
        }
      }
      if (!enchanted) {
        if (this.rand.nextInt(80) == 0) {
          stack=new ItemStack(this.droppedCrackedGemItem);
          shattered=true;
        }
 else {
          stack=new ItemStack(this.droppedGemItem);
        }
      }
      if (shattered) {
        this.playSound(ModSounds.GEM_SHATTER,3.0F,1.0F);
        cause=new ShatterDamage();
      }
 else {
        this.playSound(ModSounds.GEM_POOF,3.0F,1.0F);
        cause=new PoofDamage();
      }
      if (cause.getEntity() instanceof EntitySlag) {
        cause=new SlagDamage();
      }
      if (this.world.getGameRules().getBoolean(""String_Node_Str"")) {
        for (        EntityPlayer playerIn : this.world.playerEntities) {
          if (EntityPlayer.getUUID(playerIn.getGameProfile()).equals(this.getOwnerId())) {
            playerIn.sendMessage(cause.getDeathMessage(this));
          }
 else {
            for (            UUID ownerId : this.jointOwners) {
              if (EntityPlayer.getUUID(playerIn.getGameProfile()).equals(ownerId)) {
                playerIn.sendMessage(cause.getDeathMessage(this));
              }
            }
          }
        }
      }
      if (!stack.isEmpty()) {
        ((ItemGem)stack.getItem()).setData(this,stack);
        this.entityDropItem(stack,0.0F);
      }
    }
  }
  super.onDeath(cause);
}",0.9959787678944828
174574,"/** 
 * Methods related to entity rendering.                  
 */
@SideOnly(Side.CLIENT) public void handleStatusUpdate(byte id){
  if (id == 7) {
    this.playTameEffect();
  }
 else {
    super.handleStatusUpdate(id);
  }
}","/** 
 * Methods related to entity rendering.				  
 */
@SideOnly(Side.CLIENT) public void handleStatusUpdate(byte id){
  if (id == 7) {
    this.playTameEffect();
  }
 else {
    super.handleStatusUpdate(id);
  }
}",0.9545454545454546
174575,"/** 
 * Methods related to entity interaction.                
 */
public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (stack.getItem() == ModItems.GEM_STAFF) {
        if (this.isTamed()) {
          if (player.isSneaking()) {
            this.alternateInteract(player);
            this.playObeySound();
          }
 else {
            if (this.isOwner(player)) {
              this.setSitting(player);
              this.playObeySound();
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
 else {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.addStat(ModAchievements.I_MADE_YOU);
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.CRACKED_BLUE_DIAMOND_GEM || stack.getItem() == ModItems.CRACKED_YELLOW_DIAMOND_GEM || stack.getItem() == ModItems.BLUE_DIAMOND_GEM || stack.getItem() == ModItems.YELLOW_DIAMOND_GEM) {
        if (this.getServitude() != EntityGem.SERVE_HUMAN) {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemTransferContract contract=(ItemTransferContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              if (contract.getOwner(stack).equals(this.getOwnerId())) {
                if (this.leader.equals(this.getOwnerId())) {
                  this.setLeader(player);
                }
                this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              }
 else {
                for (                UUID ownerId : this.jointOwners) {
                  if (contract.getOwner(stack).equals(ownerId)) {
                    if (this.leader.equals(this.getOwnerId())) {
                      this.setLeader(player);
                    }
                    try {
                      this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                    }
 catch (                    Exception e) {
                    }
                    ownerId=EntityPlayer.getUUID(player.getGameProfile());
                  }
                }
              }
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              this.setOwnerId(EntityPlayer.getUUID(player.getGameProfile()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.JOINT_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemJointContract contract=(ItemJointContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              for (              UUID ownerId : this.jointOwners) {
                try {
                  this.world.getPlayerEntityByUUID(ownerId).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                }
 catch (                Exception e) {
                }
              }
              this.jointOwners.add(EntityPlayer.getUUID(player.getGameProfile()));
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
        if (this.isTamed()) {
          ItemLiberationContract contract=(ItemLiberationContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setServitude(EntityGem.SERVE_NONE);
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
        if (this.isTamed()) {
          ItemAutonomyContract contract=(ItemAutonomyContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            this.setServitude(EntityGem.SERVE_ITSELF);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == Items.DYE && this.canChangeInsigniaColorByDefault()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setInsigniaColor(15 - stack.getItemDamage());
            return true;
          }
        }
      }
 else       if (stack.isEmpty()) {
        this.setAttackWeapon(player,hand,stack);
      }
 else       if (this.isSoldier) {
        return super.processInteract(player,hand) || this.setAttackWeapon(player,hand,stack);
      }
    }
  }
  return super.processInteract(player,hand);
}","/** 
 * Methods related to entity interaction.				
 */
public boolean processInteract(EntityPlayer player,EnumHand hand){
  if (!this.world.isRemote) {
    if (hand == EnumHand.MAIN_HAND) {
      ItemStack stack=player.getHeldItemMainhand();
      if (stack.getItem() == ModItems.GEM_STAFF) {
        if (this.isTamed()) {
          if (player.isSneaking()) {
            this.alternateInteract(player);
            this.playObeySound();
          }
 else {
            if (this.isOwner(player)) {
              this.setSitting(player);
              this.playObeySound();
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
 else {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.addStat(ModAchievements.I_MADE_YOU);
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.CRACKED_BLUE_DIAMOND_GEM || stack.getItem() == ModItems.CRACKED_YELLOW_DIAMOND_GEM || stack.getItem() == ModItems.BLUE_DIAMOND_GEM || stack.getItem() == ModItems.YELLOW_DIAMOND_GEM) {
        if (this.getServitude() != EntityGem.SERVE_HUMAN) {
          this.setOwnerId(player.getUniqueID());
          this.setLeader(player);
          this.setServitude(EntityGem.SERVE_HUMAN);
          this.navigator.clearPathEntity();
          this.setAttackTarget(null);
          this.setHealth(this.getMaxHealth());
          this.playTameEffect();
          this.world.setEntityState(this,(byte)7);
          this.playObeySound();
          player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
          return true;
        }
      }
 else       if (stack.getItem() == ModItems.TRANSFER_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemTransferContract contract=(ItemTransferContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              if (contract.getOwner(stack).equals(this.getOwnerId())) {
                if (this.leader.equals(this.getOwnerId())) {
                  this.setLeader(player);
                }
                this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              }
 else {
                for (                UUID ownerId : this.jointOwners) {
                  if (contract.getOwner(stack).equals(ownerId)) {
                    if (this.leader.equals(this.getOwnerId())) {
                      this.setLeader(player);
                    }
                    try {
                      this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                    }
 catch (                    Exception e) {
                    }
                    ownerId=EntityPlayer.getUUID(player.getGameProfile());
                  }
                }
              }
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              this.setOwnerId(EntityPlayer.getUUID(player.getGameProfile()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.JOINT_CONTRACT) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
 else {
            ItemJointContract contract=(ItemJointContract)stack.getItem();
            if (this.isOwnerId(contract.getOwner(stack))) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
              for (              UUID ownerId : this.jointOwners) {
                try {
                  this.world.getPlayerEntityByUUID(ownerId).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                }
 catch (                Exception e) {
                }
              }
              this.jointOwners.add(EntityPlayer.getUUID(player.getGameProfile()));
              this.playObeySound();
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              if (!player.capabilities.isCreativeMode) {
                stack.shrink(1);
              }
              return true;
            }
 else {
              player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
              return true;
            }
          }
        }
      }
 else       if (stack.getItem() == ModItems.LIBERATION_CONTRACT) {
        if (this.isTamed()) {
          ItemLiberationContract contract=(ItemLiberationContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setServitude(EntityGem.SERVE_NONE);
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == ModItems.AUTONOMY_CONTRACT) {
        if (this.isTamed()) {
          ItemAutonomyContract contract=(ItemAutonomyContract)stack.getItem();
          if (this.isOwnerId(contract.getOwner(stack))) {
            if (contract.getOwner(stack).equals(this.getOwnerId())) {
              if (this.leader.equals(this.getOwnerId())) {
                this.setLeader(player);
              }
              this.getOwner().sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
            }
 else {
              for (              UUID ownerId : this.jointOwners) {
                if (contract.getOwner(stack).equals(ownerId)) {
                  if (this.leader.equals(this.getOwnerId())) {
                    this.setLeader(player);
                  }
                  try {
                    this.world.getPlayerEntityByUUID(EntityPlayer.getUUID(player.getGameProfile())).sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName(),player.getName()));
                  }
 catch (                  Exception e) {
                  }
                  ownerId=EntityPlayer.getUUID(player.getGameProfile());
                }
              }
            }
            this.playObeySound();
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            if (!player.capabilities.isCreativeMode) {
              stack.shrink(1);
            }
            this.setOwnerId((UUID)null);
            this.setLeader((UUID)null);
            this.setServitude(EntityGem.SERVE_ITSELF);
            return true;
          }
 else {
            player.sendMessage(new TextComponentTranslation(""String_Node_Str"",this.getName()));
            return true;
          }
        }
      }
 else       if (stack.getItem() == Items.DYE && this.canChangeInsigniaColorByDefault()) {
        if (this.isTamed()) {
          if (this.isOwner(player)) {
            this.setInsigniaColor(15 - stack.getItemDamage());
            return true;
          }
        }
      }
 else       if (stack.isEmpty()) {
        this.setAttackWeapon(player,hand,stack);
      }
 else       if (this.isSoldier) {
        return super.processInteract(player,hand) || this.setAttackWeapon(player,hand,stack);
      }
    }
  }
  return super.processInteract(player,hand);
}",0.9989452589389304
174576,"/** 
 * Methods related to entity living.                     
 */
public void onLivingUpdate(){
  if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getAttackTarget() instanceof EntityPlayer) {
    this.setAttackTarget(null);
  }
  if (this.isPeaceful) {
    this.setAttackTarget(null);
    this.isPeaceful=false;
  }
  if (this.isDefective()) {
    this.whenDefective();
  }
  if (this.fallbackServitude > 0) {
    if (this.timeUntilBetrayal > (this.rand.nextDouble() * 4) * 24000) {
      this.servitude=this.fallbackServitude;
    }
    ++this.timeUntilBetrayal;
  }
  super.onLivingUpdate();
}","/** 
 * Methods related to entity living.					 
 */
public void onLivingUpdate(){
  if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getAttackTarget() instanceof EntityPlayer) {
    this.setAttackTarget(null);
  }
  if (this.isPeaceful) {
    this.setAttackTarget(null);
    this.isPeaceful=false;
  }
  if (this.isDefective()) {
    this.whenDefective();
  }
  if (this.fallbackServitude > 0) {
    if (this.timeUntilBetrayal > (this.rand.nextDouble() * 4) * 24000) {
      this.servitude=this.fallbackServitude;
    }
    ++this.timeUntilBetrayal;
  }
  super.onLivingUpdate();
}",0.9793559042113956
174577,"protected boolean shouldMoveTo(World world,BlockPos pos){
  Block block=world.getBlockState(pos).getBlock();
  BlockPos cropPos=pos.up();
  IBlockState iblockstate=world.getBlockState(cropPos);
  Block crop=iblockstate.getBlock();
  if (block == Blocks.FARMLAND) {
    if (crop instanceof BlockBeetroot) {
      if (iblockstate.getValue(BlockBeetroot.BEETROOT_AGE) >= 3 && (this.currentTask == 0 || this.currentTask < 0)) {
        this.currentTask=0;
        return true;
      }
    }
 else     if (crop instanceof BlockCrops && iblockstate.getValue(BlockCrops.AGE) >= 7 && (this.currentTask == 0 || this.currentTask < 0)) {
      this.currentTask=0;
      return true;
    }
  }
 else   if (block == Blocks.SOUL_SAND) {
    if (crop instanceof BlockNetherWart && iblockstate.getValue(BlockNetherWart.AGE) >= 3 && (this.currentTask == 0 || this.currentTask < 0)) {
      this.currentTask=0;
      return true;
    }
  }
  if (iblockstate.getMaterial() == Material.AIR && (this.currentTask == 1 || this.currentTask < 0)) {
    this.currentTask=1;
    return true;
  }
  return false;
}","protected boolean shouldMoveTo(World world,BlockPos pos){
  Block block=world.getBlockState(pos).getBlock();
  BlockPos cropPos=pos.up();
  IBlockState iblockstate=world.getBlockState(cropPos);
  Block crop=iblockstate.getBlock();
  if (block == Blocks.FARMLAND) {
    if (crop instanceof BlockBeetroot) {
      if (iblockstate.getValue(BlockBeetroot.BEETROOT_AGE) >= 3 && (this.currentTask == 0 || this.currentTask < 0)) {
        this.currentTask=0;
        return true;
      }
    }
 else     if (crop instanceof BlockCrops && iblockstate.getValue(BlockCrops.AGE) >= 7 && (this.currentTask == 0 || this.currentTask < 0)) {
      this.currentTask=0;
      return true;
    }
  }
 else   if (block == Blocks.SOUL_SAND) {
    if (crop instanceof BlockNetherWart && iblockstate.getValue(BlockNetherWart.AGE) >= 3 && (this.currentTask == 0 || this.currentTask < 0)) {
      this.currentTask=0;
      return true;
    }
  }
  if (iblockstate.getMaterial() == Material.AIR && (this.currentTask == 1 || this.currentTask < 0)) {
    if (block == Blocks.FARMLAND && this.hasSeeds()) {
      this.currentTask=1;
      return true;
    }
 else     if (block == Blocks.SOUL_SAND && this.hasNetherWart()) {
      this.currentTask=1;
      return true;
    }
  }
  return false;
}",0.8993630573248408
174578,"public EntityAgate(World worldIn){
  super(worldIn);
  this.setSize(0.9F,2.3F);
  this.isSoldier=true;
  this.setValidCut(GemCuts.TEARDROP);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.FOREHEAD);
  this.setValidPlacement(GemPlacements.LEFT_EYE);
  this.setValidPlacement(GemPlacements.RIGHT_EYE);
  this.setValidPlacement(GemPlacements.NOSE);
  this.setValidPlacement(GemPlacements.LEFT_CHEEK);
  this.setValidPlacement(GemPlacements.RIGHT_CHEEK);
  this.setValidPlacement(GemPlacements.LEFT_SHOULDER);
  this.setValidPlacement(GemPlacements.RIGHT_SHOULDER);
  this.setValidPlacement(GemPlacements.LEFT_HAND);
  this.setValidPlacement(GemPlacements.RIGHT_HAND);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.setValidPlacement(GemPlacements.LEFT_THIGH);
  this.setValidPlacement(GemPlacements.RIGHT_THIGH);
  this.setValidPlacement(GemPlacements.LEFT_KNEE);
  this.setValidPlacement(GemPlacements.RIGHT_KNEE);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(2,new EntityAISitStill(this,1.0D));
  this.tasks.addTask(3,new EntityAIScareMobs(this));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(5,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(100.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(8.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.AGATE_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_AGATE_GEM;
  this.dataManager.register(COLOR,Integer.valueOf(new Random().nextInt(15)));
}","public EntityAgate(World worldIn){
  super(worldIn);
  this.setSize(0.9F,2.3F);
  this.isSoldier=true;
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_EYE);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_EYE);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.NOSE);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_CHEEK);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_CHEEK);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_SHOULDER);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_SHOULDER);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_HAND);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_HAND);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BELLY);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_THIGH);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_THIGH);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_KNEE);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_KNEE);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(2,new EntityAISitStill(this,1.0D));
  this.tasks.addTask(3,new EntityAIScareMobs(this));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(5,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(100.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(8.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.AGATE_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_AGATE_GEM;
  this.dataManager.register(COLOR,Integer.valueOf(new Random().nextInt(15)));
}",0.8186484174508126
174579,"public EntityAmethyst(World worldIn){
  super(worldIn);
  this.setSize(0.9F,2.3F);
  this.isSoldier=true;
  this.setValidCut(GemCuts.FACETED);
  this.setValidCut(GemCuts.SQUARE);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.FOREHEAD);
  this.setValidPlacement(GemPlacements.LEFT_EYE);
  this.setValidPlacement(GemPlacements.RIGHT_EYE);
  this.setValidPlacement(GemPlacements.NOSE);
  this.setValidPlacement(GemPlacements.LEFT_CHEEK);
  this.setValidPlacement(GemPlacements.RIGHT_CHEEK);
  this.setValidPlacement(GemPlacements.LEFT_SHOULDER);
  this.setValidPlacement(GemPlacements.RIGHT_SHOULDER);
  this.setValidPlacement(GemPlacements.LEFT_HAND);
  this.setValidPlacement(GemPlacements.RIGHT_HAND);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.setValidPlacement(GemPlacements.LEFT_THIGH);
  this.setValidPlacement(GemPlacements.RIGHT_THIGH);
  this.setValidPlacement(GemPlacements.LEFT_KNEE);
  this.setValidPlacement(GemPlacements.RIGHT_KNEE);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(2,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIMoveTowardsRestriction(this,1.0D));
  this.tasks.addTask(4,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.targetTasks.addTask(4,new EntityAINearestAttackableTarget<EntityLiving>(this,EntityLiving.class,10,true,false,new Predicate<EntityLiving>(){
    public boolean apply(    EntityLiving input){
      return input != null && IMob.VISIBLE_MOB_SELECTOR.apply(input);
    }
  }
));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(100.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(6.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.AMETHYST_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_AMETHYST_GEM;
  this.dataManager.register(CHARGED,false);
}","public EntityAmethyst(World worldIn){
  super(worldIn);
  this.setSize(0.9F,2.3F);
  this.isSoldier=true;
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_EYE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_EYE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.NOSE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_CHEEK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_CHEEK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_SHOULDER);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_SHOULDER);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_HAND);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_HAND);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BELLY);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_THIGH);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_THIGH);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_KNEE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_KNEE);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(2,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIMoveTowardsRestriction(this,1.0D));
  this.tasks.addTask(4,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.targetTasks.addTask(4,new EntityAINearestAttackableTarget<EntityLiving>(this,EntityLiving.class,10,true,false,new Predicate<EntityLiving>(){
    public boolean apply(    EntityLiving input){
      return input != null && IMob.VISIBLE_MOB_SELECTOR.apply(input);
    }
  }
));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(100.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(6.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.AMETHYST_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_AMETHYST_GEM;
  this.dataManager.register(CHARGED,false);
}",0.8396663577386468
174580,"public EntityAquamarine(World worldIn){
  super(worldIn);
  this.moveHelper=new EntityFlyHelper(this);
  this.setSize(0.4F,0.8F);
  this.seePastDoors();
  this.setValidCut(GemCuts.TINY);
  this.setValidCut(GemCuts.TEARDROP);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.FOREHEAD);
  this.setValidPlacement(GemPlacements.LEFT_EYE);
  this.setValidPlacement(GemPlacements.RIGHT_EYE);
  this.setValidPlacement(GemPlacements.LEFT_CHEEK);
  this.setValidPlacement(GemPlacements.RIGHT_CHEEK);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(2,new EntityAIScan(this));
  this.tasks.addTask(3,new EntityAIOpenDoor(this,true));
  this.tasks.addTask(3,new EntityAIAttackMelee(this,1.0D,true));
  this.tasks.addTask(3,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAILookIdle(this));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(2.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.AQUAMARINE_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_AQUAMARINE_GEM;
}","public EntityAquamarine(World worldIn){
  super(worldIn);
  this.moveHelper=new EntityFlyHelper(this);
  this.setSize(0.4F,0.8F);
  this.seePastDoors();
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_EYE);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_EYE);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_CHEEK);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_CHEEK);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(2,new EntityAIScan(this));
  this.tasks.addTask(3,new EntityAIOpenDoor(this,true));
  this.tasks.addTask(3,new EntityAIAttackMelee(this,1.0D,true));
  this.tasks.addTask(3,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAILookIdle(this));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(2.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.AQUAMARINE_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_AQUAMARINE_GEM;
}",0.8691006233303651
174581,"public EntityBismuth(World worldIn){
  super(worldIn);
  this.isImmuneToFire=true;
  this.setSize(0.9F,2.3F);
  this.setValidCut(GemCuts.BISMUTH);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(2,new EntityAIRestrictOpenDoor(this));
  this.tasks.addTask(3,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIAttackMelee(this,1.0d,true));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(18.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.droppedGemItem=ModItems.BISMUTH_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_BISMUTH_GEM;
}","public EntityBismuth(World worldIn){
  super(worldIn);
  this.isImmuneToFire=true;
  this.setSize(0.9F,2.3F);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.BISMUTH,GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(2,new EntityAIRestrictOpenDoor(this));
  this.tasks.addTask(3,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIAttackMelee(this,1.0d,true));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(4,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(18.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.droppedGemItem=ModItems.BISMUTH_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_BISMUTH_GEM;
}",0.956266078647556
174582,"public EntityCarnelian(World worldIn){
  super(worldIn);
  this.setSize(0.9F,2.3F);
  this.isImmuneToFire=true;
  this.isSoldier=true;
  this.setValidCut(GemCuts.FACETED);
  this.setValidCut(GemCuts.CABOCHON);
  this.setValidCut(GemCuts.SQUARE);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.FOREHEAD);
  this.setValidPlacement(GemPlacements.LEFT_EYE);
  this.setValidPlacement(GemPlacements.RIGHT_EYE);
  this.setValidPlacement(GemPlacements.NOSE);
  this.setValidPlacement(GemPlacements.LEFT_CHEEK);
  this.setValidPlacement(GemPlacements.RIGHT_CHEEK);
  this.setValidPlacement(GemPlacements.LEFT_SHOULDER);
  this.setValidPlacement(GemPlacements.RIGHT_SHOULDER);
  this.setValidPlacement(GemPlacements.LEFT_HAND);
  this.setValidPlacement(GemPlacements.RIGHT_HAND);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.setValidPlacement(GemPlacements.LEFT_THIGH);
  this.setValidPlacement(GemPlacements.RIGHT_THIGH);
  this.setValidPlacement(GemPlacements.LEFT_KNEE);
  this.setValidPlacement(GemPlacements.RIGHT_KNEE);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(2,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIMoveTowardsRestriction(this,1.0D));
  this.tasks.addTask(4,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.targetTasks.addTask(4,new EntityAINearestAttackableTarget<EntityLiving>(this,EntityLiving.class,10,true,false,new Predicate<EntityLiving>(){
    public boolean apply(    EntityLiving input){
      return input != null && IMob.VISIBLE_MOB_SELECTOR.apply(input);
    }
  }
));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(12.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.CARNELIAN_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_CARNELIAN_GEM;
  this.dataManager.register(CHARGED,false);
}","public EntityCarnelian(World worldIn){
  super(worldIn);
  this.setSize(0.9F,2.3F);
  this.isImmuneToFire=true;
  this.isSoldier=true;
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_EYE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_EYE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.NOSE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_CHEEK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_CHEEK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_SHOULDER);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_SHOULDER);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_HAND);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_HAND);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BELLY);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_THIGH);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_THIGH);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_KNEE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_KNEE);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.LEFT_EYE);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.RIGHT_EYE);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.NOSE);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.LEFT_CHEEK);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.RIGHT_CHEEK);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.LEFT_SHOULDER);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.RIGHT_SHOULDER);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.LEFT_HAND);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.RIGHT_HAND);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BELLY);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.LEFT_THIGH);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.RIGHT_THIGH);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.LEFT_KNEE);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.RIGHT_KNEE);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(2,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIMoveTowardsRestriction(this,1.0D));
  this.tasks.addTask(4,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.targetTasks.addTask(4,new EntityAINearestAttackableTarget<EntityLiving>(this,EntityLiving.class,10,true,false,new Predicate<EntityLiving>(){
    public boolean apply(    EntityLiving input){
      return input != null && IMob.VISIBLE_MOB_SELECTOR.apply(input);
    }
  }
));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(12.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.CARNELIAN_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_CARNELIAN_GEM;
  this.dataManager.register(CHARGED,false);
}",0.6890052356020943
174583,"public EntityJasper(World worldIn){
  super(worldIn);
  this.setSize(0.9F,2.3F);
  this.isSoldier=true;
  this.setValidCut(GemCuts.CABOCHON);
  this.setValidCut(GemCuts.TINY);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.FOREHEAD);
  this.setValidPlacement(GemPlacements.LEFT_EYE);
  this.setValidPlacement(GemPlacements.RIGHT_EYE);
  this.setValidPlacement(GemPlacements.NOSE);
  this.setValidPlacement(GemPlacements.LEFT_CHEEK);
  this.setValidPlacement(GemPlacements.RIGHT_CHEEK);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(2,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIMoveTowardsRestriction(this,1.0D));
  this.tasks.addTask(4,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.targetTasks.addTask(4,new EntityAINearestAttackableTarget<EntityLiving>(this,EntityLiving.class,10,true,false,new Predicate<EntityLiving>(){
    public boolean apply(    EntityLiving input){
      return input != null && IMob.VISIBLE_MOB_SELECTOR.apply(input);
    }
  }
));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(24.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.JASPER_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_JASPER_GEM;
  this.dataManager.register(CHARGED,false);
}","public EntityJasper(World worldIn){
  super(worldIn);
  this.setSize(0.9F,2.3F);
  this.isSoldier=true;
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.LEFT_EYE);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.RIGHT_EYE);
  this.setCutPlacement(GemCuts.TINY,GemPlacements.NOSE);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.LEFT_CHEEK);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.RIGHT_CHEEK);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(2,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(3,new EntityAIMoveTowardsRestriction(this,1.0D));
  this.tasks.addTask(4,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(5,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIDiamondHurtByTarget(this));
  this.targetTasks.addTask(2,new EntityAIDiamondHurtTarget(this));
  this.targetTasks.addTask(3,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.targetTasks.addTask(4,new EntityAINearestAttackableTarget<EntityLiving>(this,EntityLiving.class,10,true,false,new Predicate<EntityLiving>(){
    public boolean apply(    EntityLiving input){
      return input != null && IMob.VISIBLE_MOB_SELECTOR.apply(input);
    }
  }
));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(24.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
  this.droppedGemItem=ModItems.JASPER_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_JASPER_GEM;
  this.dataManager.register(CHARGED,false);
}",0.8723500225529995
174584,"public EntityLapisLazuli(World worldIn){
  super(worldIn);
  this.setSize(0.6F,1.9F);
  this.setValidCut(GemCuts.TEARDROP);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.FOREHEAD);
  this.setValidPlacement(GemPlacements.LEFT_EYE);
  this.setValidPlacement(GemPlacements.RIGHT_EYE);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIAvoidEntity<EntityCreeper>(this,EntityCreeper.class,new Predicate<EntityCreeper>(){
    public boolean apply(    EntityCreeper input){
      return ((EntityCreeper)input).getCreeperState() == 1;
    }
  }
,6.0F,1.0D,1.2D));
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(3,new EntityAIOpenDoor(this,true));
  this.tasks.addTask(4,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(5,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(5,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(6,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(80.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(8.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.droppedGemItem=ModItems.LAPIS_LAZULI_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_LAPIS_LAZULI_GEM;
}","public EntityLapisLazuli(World worldIn){
  super(worldIn);
  this.setSize(0.6F,1.9F);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.LEFT_EYE);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.RIGHT_EYE);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.TEARDROP,GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIAvoidEntity<EntityCreeper>(this,EntityCreeper.class,new Predicate<EntityCreeper>(){
    public boolean apply(    EntityCreeper input){
      return ((EntityCreeper)input).getCreeperState() == 1;
    }
  }
,6.0F,1.0D,1.2D));
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(3,new EntityAIOpenDoor(this,true));
  this.tasks.addTask(4,new EntityAIMoveTowardsTarget(this,0.414D,32.0F));
  this.tasks.addTask(5,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(5,new EntityAIWatchClosest(this,EntityMob.class,16.0F));
  this.tasks.addTask(6,new EntityAIStandGuard(this,0.6D));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.targetTasks.addTask(1,new EntityAIHurtByTarget(this,false,new Class[0]));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(80.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(8.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.droppedGemItem=ModItems.LAPIS_LAZULI_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_LAPIS_LAZULI_GEM;
}",0.8992112182296231
174585,"public EntityPadparadscha(World worldIn){
  super(worldIn);
  this.setSize(0.7F,1.6F);
  this.seePastDoors();
  this.setValidCut(GemCuts.FACETED);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.FOREHEAD);
  this.setValidPlacement(GemPlacements.LEFT_EYE);
  this.setValidPlacement(GemPlacements.RIGHT_EYE);
  this.setValidPlacement(GemPlacements.LEFT_CHEEK);
  this.setValidPlacement(GemPlacements.RIGHT_CHEEK);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(2,new EntityAIRetroVision(this));
  this.tasks.addTask(3,new EntityAIOpenDoor(this,true));
  this.tasks.addTask(4,new EntityAIWander(this,0.6D));
  this.tasks.addTask(5,new EntityAILookIdle(this));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(1.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3D);
  this.droppedGemItem=ModItems.PADPARADSCHA_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_PADPARADSCHA_GEM;
}","public EntityPadparadscha(World worldIn){
  super(worldIn);
  this.setSize(0.7F,1.6F);
  this.seePastDoors();
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_EYE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_EYE);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.LEFT_CHEEK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.RIGHT_CHEEK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.FACETED,GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(2,new EntityAIRetroVision(this));
  this.tasks.addTask(3,new EntityAIOpenDoor(this,true));
  this.tasks.addTask(4,new EntityAIWander(this,0.6D));
  this.tasks.addTask(5,new EntityAILookIdle(this));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(1.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3D);
  this.droppedGemItem=ModItems.PADPARADSCHA_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_PADPARADSCHA_GEM;
}",0.8370342491531803
174586,"public EntityPearl(World worldIn){
  super(worldIn);
  this.setSize(0.6F,1.9F);
  this.initGemStorage();
  this.seePastDoors();
  this.setValidCut(GemCuts.CABOCHON);
  this.setValidPlacement(GemPlacements.BACK_OF_HEAD);
  this.setValidPlacement(GemPlacements.FOREHEAD);
  this.setValidPlacement(GemPlacements.BACK);
  this.setValidPlacement(GemPlacements.CHEST);
  this.setValidPlacement(GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIAvoidEntity<EntityCreeper>(this,EntityCreeper.class,new Predicate<EntityCreeper>(){
    public boolean apply(    EntityCreeper input){
      return ((EntityCreeper)input).getCreeperState() == 1;
    }
  }
,6.0F,1.0D,1.2D));
  this.tasks.addTask(1,new EntityAIPickUpItems(this,0.9D));
  this.tasks.addTask(2,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(4,new EntityAIOpenDoor(this,true));
  this.tasks.addTask(5,new EntityAISitStill(this,1.0D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(1.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.droppedGemItem=ModItems.PEARL_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_PEARL_GEM;
  this.dataManager.register(COLOR,this.rand.nextInt(16));
  this.dataManager.register(HAIR_COLOR,this.dataManager.get(COLOR));
  this.dataManager.register(DRESS_STYLE,1);
  this.dataManager.register(NAKED,false);
}","public EntityPearl(World worldIn){
  super(worldIn);
  this.setSize(0.6F,1.9F);
  this.initGemStorage();
  this.seePastDoors();
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BACK_OF_HEAD);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.FOREHEAD);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BACK);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.CHEST);
  this.setCutPlacement(GemCuts.CABOCHON,GemPlacements.BELLY);
  this.stayAI=new EntityAIStay(this);
  this.tasks.addTask(1,new EntityAIAvoidEntity<EntityCreeper>(this,EntityCreeper.class,new Predicate<EntityCreeper>(){
    public boolean apply(    EntityCreeper input){
      return ((EntityCreeper)input).getCreeperState() == 1;
    }
  }
,6.0F,1.0D,1.2D));
  this.tasks.addTask(1,new EntityAIPickUpItems(this,0.9D));
  this.tasks.addTask(2,new EntityAIFollowDiamond(this,1.0D));
  this.tasks.addTask(4,new EntityAIOpenDoor(this,true));
  this.tasks.addTask(5,new EntityAISitStill(this,1.0D));
  this.tasks.addTask(6,new EntityAIWatchClosest(this,EntityPlayer.class,16.0F));
  this.tasks.addTask(7,new EntityAILookIdle(this));
  this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0D);
  this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(1.0D);
  this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
  this.droppedGemItem=ModItems.PEARL_GEM;
  this.droppedCrackedGemItem=ModItems.CRACKED_PEARL_GEM;
  this.dataManager.register(COLOR,this.rand.nextInt(16));
  this.dataManager.register(HAIR_COLOR,this.dataManager.get(COLOR));
  this.dataManager.register(DRESS_STYLE,1);
  this.dataManager.register(NAKED,false);
}",0.937105025579296
174587,"@SubscribeEvent(priority=EventPriority.HIGHEST) public static void onLivingHurt(LivingHurtEvent event){
  if (!event.getEntityLiving().world.isRemote) {
    if (event.getSource().getTrueSource() instanceof EntityPlayer && !(event.getSource() instanceof LSCDamageSource) && !event.getSource().isFireDamage()) {
      EntityPlayer player=(EntityPlayer)event.getSource().getTrueSource();
      EntityLivingBase enemy=event.getEntityLiving();
      ItemStack weapon=player.getHeldItem(player.getActiveHand());
      PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      Stats stats=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
      if (playerInfo != null && stats != null && weapon != ItemStack.EMPTY) {
        if (weapon.getItem() instanceof ItemSword) {
          playerMeleeAttack(event,player,enemy,weapon,playerInfo,stats);
        }
 else         if (weapon.getItem() instanceof ItemBow && event.getSource().getImmediateSource() instanceof EntityArrow) {
          playerMeleeAttack(event,player,enemy,weapon,playerInfo,stats);
        }
      }
    }
    if (event.getEntityLiving() instanceof EntityPlayer && (event.getSource().getTrueSource() instanceof EntityLivingBase || (event.getSource() instanceof LSCDamageSource) || event.getSource().isFireDamage())) {
      EntityPlayer player=(EntityPlayer)event.getEntityLiving();
      EntityLivingBase enemy=(EntityLivingBase)event.getSource().getTrueSource();
      PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      Stats stats=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
      if (playerInfo != null && stats != null) {
        LootSlashConquer.LOGGER.info(""String_Node_Str"" + event.getSource().damageType);
        if ((event.getSource() instanceof LSCDamageSource || event.getSource().isFireDamage()) || (event.getSource() instanceof LSCDamageSource && ((LSCDamageSource)event.getSource()).isChainedDamage())) {
          double damage=DamageUtils.applyElementalResistance(event.getAmount(),(LSCDamageSource)event.getSource(),player);
          event.setAmount((float)damage);
        }
 else {
          double damage=DamageUtils.applyArmorReductions(event.getAmount(),player,playerInfo);
          event.setAmount((float)damage);
          for (          ItemStack stack : player.getArmorInventoryList()) {
            NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
            if (Attribute.DURABLE.hasAttribute(nbt) && Math.random() < Attribute.DURABLE.getAmount(nbt))             stack.setItemDamage(stack.getItemDamage() + 1);
          }
        }
      }
    }
    if (event.getSource().getTrueSource() instanceof EntityPlayer && !(event.getEntityLiving() instanceof EntityPlayer)) {
    }
  }
}","@SubscribeEvent(priority=EventPriority.HIGHEST) public static void onLivingHurt(LivingHurtEvent event){
  if (!event.getEntityLiving().world.isRemote) {
    if (event.getSource().getTrueSource() instanceof EntityPlayer && !(event.getSource() instanceof LSCDamageSource) && !event.getSource().isFireDamage()) {
      EntityPlayer player=(EntityPlayer)event.getSource().getTrueSource();
      EntityLivingBase enemy=event.getEntityLiving();
      ItemStack weapon=player.getHeldItem(player.getActiveHand());
      PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      Stats stats=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
      if (playerInfo != null && stats != null && weapon != ItemStack.EMPTY) {
        if (weapon.getItem() instanceof ItemSword) {
          playerMeleeAttack(event,player,enemy,weapon,playerInfo,stats);
        }
 else         if (weapon.getItem() instanceof ItemBow && event.getSource().getImmediateSource() instanceof EntityArrow) {
          playerMeleeAttack(event,player,enemy,weapon,playerInfo,stats);
        }
      }
    }
    if (event.getEntityLiving() instanceof EntityPlayer && (event.getSource().getTrueSource() instanceof EntityLivingBase || (event.getSource() instanceof LSCDamageSource) || event.getSource().isFireDamage())) {
      EntityPlayer player=(EntityPlayer)event.getEntityLiving();
      PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      Stats stats=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
      if (playerInfo != null && stats != null) {
        LootSlashConquer.LOGGER.info(""String_Node_Str"" + event.getSource().damageType);
        if ((event.getSource() instanceof LSCDamageSource || event.getSource().isFireDamage()) || (event.getSource() instanceof LSCDamageSource && ((LSCDamageSource)event.getSource()).isChainedDamage())) {
          double damage=DamageUtils.applyElementalResistance(event.getAmount(),(LSCDamageSource)event.getSource(),player);
          event.setAmount((float)damage);
        }
 else {
          double damage=DamageUtils.applyArmorReductions(event.getAmount(),player,playerInfo);
          event.setAmount((float)damage);
          for (          ItemStack stack : player.getArmorInventoryList()) {
            NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
            if (Attribute.DURABLE.hasAttribute(nbt) && Math.random() < Attribute.DURABLE.getAmount(nbt))             stack.setItemDamage(stack.getItemDamage() + 1);
          }
        }
      }
    }
    if (event.getSource().getTrueSource() instanceof EntityPlayer && !(event.getEntityLiving() instanceof EntityPlayer)) {
    }
  }
}",0.9854299928926794
174588,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  LootSlashConquer.LOGGER.info(""String_Node_Str"");
  ModLootTables.register();
  ModCapabilities.registerCapabilities();
  ModEntities.registerEntities();
  ModLootFunctions.registerFunctions();
  ModPackets.registerPackets();
  proxy.preInit(event);
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  LootSlashConquer.LOGGER.info(""String_Node_Str"");
  ModLootTables.register();
  ModCapabilities.registerCapabilities();
  ModEntities.registerEntities();
  ModLootFunctions.registerFunctions();
  ModPackets.registerPackets();
  ReflectionUtils.setPrivateFinalValue(RangedAttribute.class,(RangedAttribute)SharedMonsterAttributes.MAX_HEALTH,10000000,""String_Node_Str"",""String_Node_Str"");
  ReflectionUtils.setPrivateFinalValue(RangedAttribute.class,(RangedAttribute)SharedMonsterAttributes.ATTACK_DAMAGE,100000,""String_Node_Str"",""String_Node_Str"");
  proxy.preInit(event);
}",0.6659729448491155
174589,"@SubscribeEvent public static void registerItemBlocks(RegistryEvent.Register<Item> event){
  event.getRegistry().register(new ItemBlock(DUNGEON_BRICK).setRegistryName(DUNGEON_BRICK.getRegistryName()));
  event.getRegistry().register(new ItemBlock(BOSS_DOOR).setRegistryName(BOSS_DOOR.getRegistryName()));
  event.getRegistry().register(new ItemBlock(COMMON_LOOT_CHEST).setRegistryName(COMMON_LOOT_CHEST.getRegistryName()));
  event.getRegistry().register(new ItemBlock(UNCOMMON_LOOT_CHEST).setRegistryName(UNCOMMON_LOOT_CHEST.getRegistryName()));
  event.getRegistry().register(new ItemBlock(RARE_LOOT_CHEST).setRegistryName(RARE_LOOT_CHEST.getRegistryName()));
  event.getRegistry().register(new ItemBlock(EPIC_LOOT_CHEST).setRegistryName(EPIC_LOOT_CHEST.getRegistryName()));
  event.getRegistry().register(new ItemBlock(LEGENDARY_LOOT_CHEST).setRegistryName(LEGENDARY_LOOT_CHEST.getRegistryName()));
  event.getRegistry().register(new ItemBlock(COMMON_JAR).setRegistryName(COMMON_JAR.getRegistryName()));
  event.getRegistry().register(new ItemBlock(UNCOMMON_JAR).setRegistryName(UNCOMMON_JAR.getRegistryName()));
  event.getRegistry().register(new ItemBlock(RARE_JAR).setRegistryName(RARE_JAR.getRegistryName()));
  event.getRegistry().register(new ItemBlock(EPIC_JAR).setRegistryName(EPIC_JAR.getRegistryName()));
  event.getRegistry().register(new ItemBlock(LEGENDARY_JAR).setRegistryName(LEGENDARY_JAR.getRegistryName()));
  event.getRegistry().register(new ItemBlock(COMMON_BARREL).setRegistryName(COMMON_BARREL.getRegistryName()));
  event.getRegistry().register(new ItemBlock(UNCOMMON_BARREL).setRegistryName(UNCOMMON_BARREL.getRegistryName()));
  event.getRegistry().register(new ItemBlock(RARE_BARREL).setRegistryName(RARE_BARREL.getRegistryName()));
  event.getRegistry().register(new ItemBlock(EPIC_BARREL).setRegistryName(EPIC_BARREL.getRegistryName()));
  event.getRegistry().register(new ItemBlock(LEGENDARY_BARREL).setRegistryName(LEGENDARY_BARREL.getRegistryName()));
  event.getRegistry().register(new ItemBlock(COMMON_CRATE).setRegistryName(COMMON_CRATE.getRegistryName()));
  event.getRegistry().register(new ItemBlock(UNCOMMON_CRATE).setRegistryName(UNCOMMON_CRATE.getRegistryName()));
  event.getRegistry().register(new ItemBlock(RARE_CRATE).setRegistryName(RARE_CRATE.getRegistryName()));
  event.getRegistry().register(new ItemBlock(EPIC_CRATE).setRegistryName(EPIC_CRATE.getRegistryName()));
  event.getRegistry().register(new ItemBlock(LEGENDARY_CRATE).setRegistryName(LEGENDARY_CRATE.getRegistryName()));
}","@SubscribeEvent public static void registerItemBlocks(RegistryEvent.Register<Item> event){
  event.getRegistry().register(new ItemBlock(DUNGEON_BRICK).setRegistryName(DUNGEON_BRICK.getRegistryName()));
  event.getRegistry().register(new ItemBlock(BOSS_DOOR).setRegistryName(BOSS_DOOR.getRegistryName()));
  if ((boolean)Launch.blackboard.get(""String_Node_Str"")) {
    event.getRegistry().register(new ItemBlock(COMMON_LOOT_CHEST).setRegistryName(COMMON_LOOT_CHEST.getRegistryName()));
    event.getRegistry().register(new ItemBlock(UNCOMMON_LOOT_CHEST).setRegistryName(UNCOMMON_LOOT_CHEST.getRegistryName()));
    event.getRegistry().register(new ItemBlock(RARE_LOOT_CHEST).setRegistryName(RARE_LOOT_CHEST.getRegistryName()));
    event.getRegistry().register(new ItemBlock(EPIC_LOOT_CHEST).setRegistryName(EPIC_LOOT_CHEST.getRegistryName()));
    event.getRegistry().register(new ItemBlock(LEGENDARY_LOOT_CHEST).setRegistryName(LEGENDARY_LOOT_CHEST.getRegistryName()));
    event.getRegistry().register(new ItemBlock(COMMON_JAR).setRegistryName(COMMON_JAR.getRegistryName()));
    event.getRegistry().register(new ItemBlock(UNCOMMON_JAR).setRegistryName(UNCOMMON_JAR.getRegistryName()));
    event.getRegistry().register(new ItemBlock(RARE_JAR).setRegistryName(RARE_JAR.getRegistryName()));
    event.getRegistry().register(new ItemBlock(EPIC_JAR).setRegistryName(EPIC_JAR.getRegistryName()));
    event.getRegistry().register(new ItemBlock(LEGENDARY_JAR).setRegistryName(LEGENDARY_JAR.getRegistryName()));
    event.getRegistry().register(new ItemBlock(COMMON_BARREL).setRegistryName(COMMON_BARREL.getRegistryName()));
    event.getRegistry().register(new ItemBlock(UNCOMMON_BARREL).setRegistryName(UNCOMMON_BARREL.getRegistryName()));
    event.getRegistry().register(new ItemBlock(RARE_BARREL).setRegistryName(RARE_BARREL.getRegistryName()));
    event.getRegistry().register(new ItemBlock(EPIC_BARREL).setRegistryName(EPIC_BARREL.getRegistryName()));
    event.getRegistry().register(new ItemBlock(LEGENDARY_BARREL).setRegistryName(LEGENDARY_BARREL.getRegistryName()));
    event.getRegistry().register(new ItemBlock(COMMON_CRATE).setRegistryName(COMMON_CRATE.getRegistryName()));
    event.getRegistry().register(new ItemBlock(UNCOMMON_CRATE).setRegistryName(UNCOMMON_CRATE.getRegistryName()));
    event.getRegistry().register(new ItemBlock(RARE_CRATE).setRegistryName(RARE_CRATE.getRegistryName()));
    event.getRegistry().register(new ItemBlock(EPIC_CRATE).setRegistryName(EPIC_CRATE.getRegistryName()));
    event.getRegistry().register(new ItemBlock(LEGENDARY_CRATE).setRegistryName(LEGENDARY_CRATE.getRegistryName()));
  }
}",0.9800812222007348
174590,"@SubscribeEvent public static void registerBlocks(RegistryEvent.Register<Block> event){
  event.getRegistry().register(DUNGEON_BRICK);
  event.getRegistry().register(BOSS_DOOR);
  event.getRegistry().register(COMMON_LOOT_CHEST);
  event.getRegistry().register(UNCOMMON_LOOT_CHEST);
  event.getRegistry().register(RARE_LOOT_CHEST);
  event.getRegistry().register(EPIC_LOOT_CHEST);
  event.getRegistry().register(LEGENDARY_LOOT_CHEST);
  event.getRegistry().register(COMMON_JAR);
  event.getRegistry().register(UNCOMMON_JAR);
  event.getRegistry().register(RARE_JAR);
  event.getRegistry().register(EPIC_JAR);
  event.getRegistry().register(LEGENDARY_JAR);
  event.getRegistry().register(COMMON_BARREL);
  event.getRegistry().register(UNCOMMON_BARREL);
  event.getRegistry().register(RARE_BARREL);
  event.getRegistry().register(EPIC_BARREL);
  event.getRegistry().register(LEGENDARY_BARREL);
  event.getRegistry().register(COMMON_CRATE);
  event.getRegistry().register(UNCOMMON_CRATE);
  event.getRegistry().register(RARE_CRATE);
  event.getRegistry().register(EPIC_CRATE);
  event.getRegistry().register(LEGENDARY_CRATE);
  GameRegistry.registerTileEntity(TileEntityLootChest.class,new ResourceLocation(Reference.MODID,""String_Node_Str""));
}","@SubscribeEvent public static void registerBlocks(RegistryEvent.Register<Block> event){
  event.getRegistry().register(DUNGEON_BRICK);
  event.getRegistry().register(BOSS_DOOR);
  if ((boolean)Launch.blackboard.get(""String_Node_Str"")) {
    event.getRegistry().register(COMMON_LOOT_CHEST);
    event.getRegistry().register(UNCOMMON_LOOT_CHEST);
    event.getRegistry().register(RARE_LOOT_CHEST);
    event.getRegistry().register(EPIC_LOOT_CHEST);
    event.getRegistry().register(LEGENDARY_LOOT_CHEST);
    event.getRegistry().register(COMMON_JAR);
    event.getRegistry().register(UNCOMMON_JAR);
    event.getRegistry().register(RARE_JAR);
    event.getRegistry().register(EPIC_JAR);
    event.getRegistry().register(LEGENDARY_JAR);
    event.getRegistry().register(COMMON_BARREL);
    event.getRegistry().register(UNCOMMON_BARREL);
    event.getRegistry().register(RARE_BARREL);
    event.getRegistry().register(EPIC_BARREL);
    event.getRegistry().register(LEGENDARY_BARREL);
    event.getRegistry().register(COMMON_CRATE);
    event.getRegistry().register(UNCOMMON_CRATE);
    event.getRegistry().register(RARE_CRATE);
    event.getRegistry().register(EPIC_CRATE);
    event.getRegistry().register(LEGENDARY_CRATE);
  }
  GameRegistry.registerTileEntity(TileEntityLootChest.class,new ResourceLocation(Reference.MODID,""String_Node_Str""));
}",0.8936170212765957
174591,"@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  this.drawDefaultBackground();
  super.drawScreen(mouseX,mouseY,partialTicks);
  DecimalFormat format=new DecimalFormat(""String_Node_Str"");
  EntityPlayer player=mc.player;
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
  if (player != null && playerInfo != null && statsCap != null) {
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2,20,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + I18n.format(""String_Node_Str"" + playerInfo.getPlayerClass()),this.width / 2 - 50,40,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerLevel(),this.width / 2 - 50,50,0xFFFFFF);
    String experience=I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerExperience()+ ""String_Node_Str""+ playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel());
    double percent=(((double)playerInfo.getPlayerExperience() * 100) / (double)(playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())));
    String percentString=""String_Node_Str"" + String.format(""String_Node_Str"",percent) + ""String_Node_Str"";
    this.drawString(this.fontRenderer,experience + percentString,this.width / 2 - 50,60,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getSkillPoints(),this.width / 2 - 50,70,0xFFFFFF);
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 + 120,120,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,140,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,150,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,160,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,170,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,180,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,190,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getStrengthStat() + playerInfo.getBonusStrengthStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusStrengthStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,140,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getAgilityStat() + playerInfo.getBonusAgilityStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusAgilityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,150,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getDexterityStat() + playerInfo.getBonusDexterityStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusDexterityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,160,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getIntelligenceStat() + playerInfo.getBonusIntelligenceStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusIntelligenceStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,170,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getWisdomStat() + playerInfo.getBonusWisdomStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusWisdomStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,180,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getFortitudeStat() + playerInfo.getBonusFortitudeStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusFortitudeStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,190,0xFFFFFF);
    double playerDamage=(Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getTotalStrength()) * (0.85 * 0.8);
    double magicalPower=(Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getTotalIntelligence()) * (0.85 * 0.8);
    playerDamage=playerDamage < 1 ? 0 : playerDamage;
    magicalPower=magicalPower < 1 ? 0 : magicalPower;
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 - 130,120,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format(playerDamage),this.width / 2 - 160,140,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format(magicalPower),this.width / 2 - 160,150,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format((Configs.playerCategory.attackSpeedMultiplier * (playerInfo.getTotalAgility()))),this.width / 2 - 160,160,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format(DamageUtils.getTotalArmor(player,playerInfo)),this.width / 2 - 160,170,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ((int)(statsCap.getCriticalChance() * 100))+ ""String_Node_Str"",this.width / 2 - 160,180,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ((int)(statsCap.getCriticalDamage() * 100))+ ""String_Node_Str"",this.width / 2 - 160,190,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(Configs.playerCategory.maxHealthMultiplier * (playerInfo.getTotalFortitude())),this.width / 2 - 160,200,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ statsCap.getHealthPerSecond(),this.width / 2 - 160,210,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(Configs.playerCategory.maxManaMultiplier * (playerInfo.getTotalWisdom())),this.width / 2 - 160,220,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ statsCap.getManaPerSecond(),this.width / 2 - 160,230,0xFFFFFF);
    drawTooltips(mouseX,mouseY);
  }
}","@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  this.drawDefaultBackground();
  super.drawScreen(mouseX,mouseY,partialTicks);
  DecimalFormat format=new DecimalFormat(""String_Node_Str"");
  EntityPlayer player=mc.player;
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
  if (player != null && playerInfo != null && statsCap != null) {
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2,20,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + I18n.format(""String_Node_Str"" + playerInfo.getPlayerClass()),this.width / 2 - 50,40,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerLevel(),this.width / 2 - 50,50,0xFFFFFF);
    String experience=I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerExperience()+ ""String_Node_Str""+ ExperienceUtils.getLevelUpExperience(playerInfo.getPlayerLevel());
    double percent=(((double)playerInfo.getPlayerExperience() * 100) / (double)(ExperienceUtils.getLevelUpExperience(playerInfo.getPlayerLevel())));
    String percentString=""String_Node_Str"" + String.format(""String_Node_Str"",percent) + ""String_Node_Str"";
    this.drawString(this.fontRenderer,experience + percentString,this.width / 2 - 50,60,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getSkillPoints(),this.width / 2 - 50,70,0xFFFFFF);
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 + 120,120,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,140,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,150,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,160,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,170,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,180,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 80,190,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getStrengthStat() + playerInfo.getBonusStrengthStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusStrengthStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,140,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getAgilityStat() + playerInfo.getBonusAgilityStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusAgilityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,150,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getDexterityStat() + playerInfo.getBonusDexterityStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusDexterityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,160,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getIntelligenceStat() + playerInfo.getBonusIntelligenceStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusIntelligenceStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,170,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getWisdomStat() + playerInfo.getBonusWisdomStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusWisdomStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,180,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + (playerInfo.getFortitudeStat() + playerInfo.getBonusFortitudeStat()) + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusFortitudeStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 150,190,0xFFFFFF);
    double playerDamage=(Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getTotalStrength()) * (0.85 * 0.8);
    double magicalPower=(Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getTotalIntelligence()) * (0.85 * 0.8);
    playerDamage=playerDamage < 1 ? 0 : playerDamage;
    magicalPower=magicalPower < 1 ? 0 : magicalPower;
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 - 130,120,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format(playerDamage),this.width / 2 - 160,140,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format(magicalPower),this.width / 2 - 160,150,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format((Configs.playerCategory.attackSpeedMultiplier * (playerInfo.getTotalAgility()))),this.width / 2 - 160,160,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format(DamageUtils.getTotalArmor(player,playerInfo)),this.width / 2 - 160,170,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ((int)(statsCap.getCriticalChance() * 100))+ ""String_Node_Str"",this.width / 2 - 160,180,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ((int)(statsCap.getCriticalDamage() * 100))+ ""String_Node_Str"",this.width / 2 - 160,190,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(Configs.playerCategory.maxHealthMultiplier * (playerInfo.getTotalFortitude())),this.width / 2 - 160,200,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ statsCap.getHealthPerSecond(),this.width / 2 - 160,210,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(Configs.playerCategory.maxManaMultiplier * (playerInfo.getTotalWisdom())),this.width / 2 - 160,220,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ statsCap.getManaPerSecond(),this.width / 2 - 160,230,0xFFFFFF);
    drawTooltips(mouseX,mouseY);
  }
}",0.99655599944896
174592,"public static double getRangedPower(PlayerInformation playerInfo){
  double multiplier=(Math.random() * (Configs.weaponCategory.damageMaxRandFactor - Configs.weaponCategory.damageMinRandFactor) + Configs.weaponCategory.damageMinRandFactor);
  return (Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getBonusDexterityStat()) * (0.85 * multiplier);
}","/** 
 * Returns the player's raw ranged power. This will take the player's Dexterity stat and run it through an algorithm to determine bonus damage. The result is already scaled by the player's Level.
 * @param playerInfo
 * @return
 */
public static double getRangedPower(PlayerInformation playerInfo){
  double multiplier=(Math.random() * (Configs.weaponCategory.damageMaxRandFactor - Configs.weaponCategory.damageMinRandFactor) + Configs.weaponCategory.damageMinRandFactor);
  return (Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getBonusDexterityStat()) * (0.85 * multiplier);
}",0.7674190382728164
174593,"public static double getMagicalPower(PlayerInformation playerInfo){
  double multiplier=(Math.random() * (Configs.weaponCategory.damageMaxRandFactor - Configs.weaponCategory.damageMinRandFactor) + Configs.weaponCategory.damageMinRandFactor);
  return (Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getTotalIntelligence()) * (0.85 * multiplier);
}","/** 
 * Returns the player's raw magical power. This will take the player's Intelligence stat and run it through an algorithm to determine bonus damage. The result is already scaled by the player's Level.
 * @param playerInfo
 * @return
 */
public static double getMagicalPower(PlayerInformation playerInfo){
  double multiplier=(Math.random() * (Configs.weaponCategory.damageMaxRandFactor - Configs.weaponCategory.damageMinRandFactor) + Configs.weaponCategory.damageMinRandFactor);
  return (Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getTotalIntelligence()) * (0.85 * multiplier);
}",0.7644183773216031
174594,"public static double applyArmorReductions(double damage,EntityPlayer player,PlayerInformation playerInfo){
  return damage * (damage / (damage + getTotalArmor(player,playerInfo)));
}","/** 
 * Applies custom armor reductions to the passed in damage value. This uses a custom algorithm separate from Vanilla's, allowing us to fully customize the damage algorithm and force all damage to use this instead of Vanilla's.
 * @param damage
 * @param player
 * @param playerInfo
 * @return
 */
public static double applyArmorReductions(double damage,EntityPlayer player,PlayerInformation playerInfo){
  return damage * (damage / (damage + getTotalArmor(player,playerInfo)));
}",0.5465465465465466
174595,"public static double applyElementalResistance(double damage,LSCDamageSource source,EntityPlayer player){
  double reducedDamage=damage;
  for (  ItemStack stack : player.getArmorInventoryList()) {
    if (stack.getItem() instanceof ItemArmor) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      if (source.isFireDamage() && Attribute.FIRE_RESIST.hasAttribute(nbt))       reducedDamage*=Attribute.FIRE_RESIST.getAmount(nbt);
 else       if (source.isFrostDamage() && Attribute.FROST_RESIST.hasAttribute(nbt))       reducedDamage*=Attribute.FROST_RESIST.getAmount(nbt);
 else       if (source.isLightningDamage() && Attribute.LIGHTNING_RESIST.hasAttribute(nbt))       reducedDamage*=Attribute.LIGHTNING_RESIST.getAmount(nbt);
    }
  }
  return reducedDamage;
}","/** 
 * Applies elemental resistances to the damage passed in. Note, this method only handles elemental resistances for the Player's Armor.
 * @param damage
 * @param source
 * @param player
 * @return
 */
public static double applyElementalResistance(double damage,LSCDamageSource source,EntityPlayer player){
  double reducedDamage=damage;
  for (  ItemStack stack : player.getArmorInventoryList()) {
    if (stack.getItem() instanceof ItemArmor) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      if (source.isFireDamage() && Attribute.FIRE_RESIST.hasAttribute(nbt))       reducedDamage*=Attribute.FIRE_RESIST.getAmount(nbt);
 else       if (source.isFrostDamage() && Attribute.FROST_RESIST.hasAttribute(nbt))       reducedDamage*=Attribute.FROST_RESIST.getAmount(nbt);
 else       if (source.isLightningDamage() && Attribute.LIGHTNING_RESIST.hasAttribute(nbt))       reducedDamage*=Attribute.LIGHTNING_RESIST.getAmount(nbt);
    }
  }
  return reducedDamage;
}",0.8821510297482837
174596,"public static double getMeleePower(PlayerInformation playerInfo){
  double multiplier=(Math.random() * (Configs.weaponCategory.damageMaxRandFactor - Configs.weaponCategory.damageMinRandFactor) + Configs.weaponCategory.damageMinRandFactor);
  return (Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getTotalStrength()) * (0.85 * multiplier);
}","/** 
 * Returns the player's raw melee power. This will take the player's Strength stat and run it through an algorithm to determine bonus damage. The result is already scaled by the player's Level.
 * @param playerInfo
 * @return
 */
public static double getMeleePower(PlayerInformation playerInfo){
  double multiplier=(Math.random() * (Configs.weaponCategory.damageMaxRandFactor - Configs.weaponCategory.damageMinRandFactor) + Configs.weaponCategory.damageMinRandFactor);
  return (Math.pow(Configs.weaponCategory.damageBaseFactor,playerInfo.getPlayerLevel()) + playerInfo.getTotalStrength()) * (0.85 * multiplier);
}",0.7661691542288557
174597,"public static double getTotalArmor(EntityPlayer player,PlayerInformation playerInfo){
  double totalArmorPoints=0;
  for (  ItemStack stack : player.getArmorInventoryList()) {
    if (stack.getItem() instanceof ItemArmor) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      totalArmorPoints+=nbt.getDouble(""String_Node_Str"");
    }
  }
  return totalArmorPoints;
}","/** 
 * Returns the total number of Armor Points on all the equipped pieces of armor the player currently has.
 * @param player
 * @param playerInfo
 * @return
 */
public static double getTotalArmor(EntityPlayer player,PlayerInformation playerInfo){
  double totalArmorPoints=0;
  for (  ItemStack stack : player.getArmorInventoryList()) {
    if (stack.getItem() instanceof ItemArmor) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      totalArmorPoints+=nbt.getDouble(""String_Node_Str"");
    }
  }
  return totalArmorPoints;
}",0.8209606986899564
174598,"public static void addExperience(EntityPlayer player,PlayerInformation playerInfo,EntityLivingBase enemy){
  int experience=0;
  EnemyInfo enemyInfo=(EnemyInfo)enemy.getCapability(CapabilityEnemyInfo.ENEMY_INFO,null);
  if (enemyInfo != null) {
    int enemyLevel=enemyInfo.getEnemyLevel();
    int enemyTier=enemyInfo.getEnemyTier();
    int rarity=1;
    if (enemy instanceof EntityMonster) {
      rarity=EntityMonster.rarity;
    }
    double baseFactor=Configs.monsterLevelTierCategory.experienceBaseFactor;
    double tierMultiplier=(Math.pow(enemyTier,Configs.monsterLevelTierCategory.experienceTierPower) / Configs.monsterLevelTierCategory.experienceTierDivisor + 1) + 0.5;
    double rarityMultiplier=(Math.pow(rarity,Configs.monsterLevelTierCategory.experienceRarityPower) / Configs.monsterLevelTierCategory.experienceRarityDivisor + 1) + 0.5;
    int multiplier=(int)((tierMultiplier * rarityMultiplier + 1) / Configs.monsterLevelTierCategory.experienceDivisor);
    experience=(int)(Math.pow(baseFactor,enemyLevel + 1) * (Configs.monsterLevelTierCategory.baseExperience + multiplier));
  }
  playerInfo.setPlayerExperience(playerInfo.getPlayerExperience() + experience);
  SPacketTitle packetActionbar=new SPacketTitle(SPacketTitle.Type.ACTIONBAR,new TextComponentString(""String_Node_Str"" + enemy.getName() + ""String_Node_Str""+ experience+ ""String_Node_Str""),-1,-1,-1);
  ((EntityPlayerMP)player).connection.sendPacket(packetActionbar);
  while (playerInfo.getPlayerExperience() > playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())) {
    int leftOverExperience=playerInfo.getPlayerExperience() - playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel());
    int skillPoints=0;
    playerInfo.setPlayerLevel(playerInfo.getPlayerLevel() + 1);
    playerInfo.setPlayerExperience(leftOverExperience);
    if (Configs.playerCategory.useTieredSkillPointDistribution) {
      if (playerInfo.getPlayerLevel() % 10 == 0)       skillPoints=Configs.playerCategory.skillPointsPer10Levels;
 else       if (playerInfo.getPlayerLevel() % 5 == 0)       skillPoints=Configs.playerCategory.skillPointsPer5Levels;
 else       skillPoints=Configs.playerCategory.skillPointsPerLevel;
    }
 else {
      skillPoints=Configs.playerCategory.skillPointsPerLevel;
    }
    SPacketTitle packetTitle=new SPacketTitle(SPacketTitle.Type.TITLE,new TextComponentString(""String_Node_Str"" + playerInfo.getPlayerLevel()));
    SPacketTitle packetSubtitle=new SPacketTitle(SPacketTitle.Type.SUBTITLE,new TextComponentString(""String_Node_Str"" + skillPoints + ""String_Node_Str""));
    ((EntityPlayerMP)player).connection.sendPacket(packetTitle);
    ((EntityPlayerMP)player).connection.sendPacket(packetSubtitle);
    if (Configs.playerCategory.spawnLevelUpParticles) {
      spawnLevelUpParticles(player.getEntityWorld(),player,playerInfo.getPlayerLevel());
    }
    playerInfo.setSkillPoints(playerInfo.getSkillPoints() + skillPoints);
  }
  LootSlashConquer.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)player);
}","public static void addExperience(EntityPlayer player,PlayerInformation playerInfo,EntityLivingBase enemy){
  int experience=0;
  EnemyInfo enemyInfo=(EnemyInfo)enemy.getCapability(CapabilityEnemyInfo.ENEMY_INFO,null);
  if (enemyInfo != null) {
    int enemyLevel=enemyInfo.getEnemyLevel();
    int enemyTier=enemyInfo.getEnemyTier();
    int rarity=1;
    if (enemy instanceof EntityMonster) {
      rarity=EntityMonster.rarity;
    }
    double baseFactor=Configs.monsterLevelTierCategory.experienceBaseFactor;
    double tierMultiplier=(Math.pow(enemyTier,Configs.monsterLevelTierCategory.experienceTierPower) / Configs.monsterLevelTierCategory.experienceTierDivisor + 1) + 0.5;
    double rarityMultiplier=(Math.pow(rarity,Configs.monsterLevelTierCategory.experienceRarityPower) / Configs.monsterLevelTierCategory.experienceRarityDivisor + 1) + 0.5;
    int multiplier=(int)((tierMultiplier * rarityMultiplier + 1) / Configs.monsterLevelTierCategory.experienceDivisor);
    experience=(int)(Math.pow(baseFactor,enemyLevel + 1) * (Configs.monsterLevelTierCategory.baseExperience + multiplier));
  }
  playerInfo.setPlayerExperience(playerInfo.getPlayerExperience() + experience);
  SPacketTitle packetActionbar=new SPacketTitle(SPacketTitle.Type.ACTIONBAR,new TextComponentString(""String_Node_Str"" + enemy.getName() + ""String_Node_Str""+ experience+ ""String_Node_Str""),-1,-1,-1);
  ((EntityPlayerMP)player).connection.sendPacket(packetActionbar);
  while (playerInfo.getPlayerExperience() > getLevelUpExperience(playerInfo.getPlayerLevel())) {
    int leftOverExperience=playerInfo.getPlayerExperience() - getLevelUpExperience(playerInfo.getPlayerLevel());
    int skillPoints=0;
    playerInfo.setPlayerLevel(playerInfo.getPlayerLevel() + 1);
    playerInfo.setPlayerExperience(leftOverExperience);
    if (Configs.playerCategory.useTieredSkillPointDistribution) {
      if (playerInfo.getPlayerLevel() % 10 == 0)       skillPoints=Configs.playerCategory.skillPointsPer10Levels;
 else       if (playerInfo.getPlayerLevel() % 5 == 0)       skillPoints=Configs.playerCategory.skillPointsPer5Levels;
 else       skillPoints=Configs.playerCategory.skillPointsPerLevel;
    }
 else {
      skillPoints=Configs.playerCategory.skillPointsPerLevel;
    }
    SPacketTitle packetTitle=new SPacketTitle(SPacketTitle.Type.TITLE,new TextComponentString(""String_Node_Str"" + playerInfo.getPlayerLevel()));
    SPacketTitle packetSubtitle=new SPacketTitle(SPacketTitle.Type.SUBTITLE,new TextComponentString(""String_Node_Str"" + skillPoints + ""String_Node_Str""));
    ((EntityPlayerMP)player).connection.sendPacket(packetTitle);
    ((EntityPlayerMP)player).connection.sendPacket(packetSubtitle);
    if (Configs.playerCategory.spawnLevelUpParticles) {
      spawnLevelUpParticles(player.getEntityWorld(),player,playerInfo.getPlayerLevel());
    }
    playerInfo.setSkillPoints(playerInfo.getSkillPoints() + skillPoints);
  }
  LootSlashConquer.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)player);
}",0.9963684384285244
174599,"@Override protected void actionPerformed(GuiButton button) throws IOException {
  EntityPlayer player=mc.player;
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (player != null && playerInfo != null) {
    if (button == warrior) {
      playerInfo.setPlayerClass(1);
      LootSlashConquer.network.sendToServer(new PacketClassSelection(1));
    }
 else     if (button == mage) {
      playerInfo.setPlayerClass(2);
      LootSlashConquer.network.sendToServer(new PacketClassSelection(2));
    }
 else     if (button == hunter) {
      playerInfo.setPlayerClass(3);
      LootSlashConquer.network.sendToServer(new PacketClassSelection(3));
    }
    playerInfo.setPlayerLevel(1);
    this.mc.player.closeScreen();
  }
}","@Override protected void actionPerformed(GuiButton button) throws IOException {
  EntityPlayer player=mc.player;
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (player != null && playerInfo != null) {
    if (button == warrior) {
      playerInfo.setPlayerClass(1);
      LootSlashConquer.network.sendToServer(new PacketClassSelection(1));
    }
 else     if (button == mage) {
      playerInfo.setPlayerClass(2);
      LootSlashConquer.network.sendToServer(new PacketClassSelection(2));
    }
 else     if (button == hunter) {
      playerInfo.setPlayerClass(3);
      LootSlashConquer.network.sendToServer(new PacketClassSelection(3));
    }
    this.mc.player.closeScreen();
  }
}",0.9782886334610472
174600,"@SubscribeEvent public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){
  PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
  if (playerInfo != null && playerInfo.getPlayerClass() == 0 && statsCap != null && statsCap.getMaxMana() == 0) {
    LootSlashConquer.network.sendTo(new PacketClassGui(),(EntityPlayerMP)event.player);
    statsCap.setMaxMana(Configs.playerCategory.maxMana);
    statsCap.setMana(statsCap.getMaxMana());
    statsCap.setManaPerSecond(Configs.playerCategory.manaPer5);
    statsCap.setHealthPerSecond(Configs.playerCategory.healthPer5);
    statsCap.setMagicalPower(0);
    statsCap.setCriticalChance(0);
    statsCap.setCriticalDamage(0);
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
  }
 else   if (playerInfo != null && statsCap != null && playerInfo.getPlayerClass() > 0) {
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
    LootSlashConquer.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)event.player);
  }
}","@SubscribeEvent public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){
  PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
  if (playerInfo != null && playerInfo.getPlayerClass() == 0 && statsCap != null && statsCap.getMaxMana() == 0) {
    LootSlashConquer.network.sendTo(new PacketClassGui(),(EntityPlayerMP)event.player);
    playerInfo.setPlayerLevel(1);
    statsCap.setMaxMana(Configs.playerCategory.maxMana);
    statsCap.setMana(statsCap.getMaxMana());
    statsCap.setManaPerSecond(Configs.playerCategory.manaPer5);
    statsCap.setHealthPerSecond(Configs.playerCategory.healthPer5);
    statsCap.setMagicalPower(0);
    statsCap.setCriticalChance(0);
    statsCap.setCriticalDamage(0);
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
  }
 else   if (playerInfo != null && statsCap != null && playerInfo.getPlayerClass() > 0) {
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
    LootSlashConquer.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)event.player);
  }
}",0.9866562009419152
174601,"/** 
 * Decreases the current mana count by the given amount. 
 */
public void decreaseMana(int mana){
  this.mana-=mana;
  if (this.mana < 0)   this.mana=0;
}","/** 
 * Decreases the current mana count by the given amount. 
 */
public void decreaseMana(int mana){
  this.setMana(this.getMana() - mana);
  if (this.mana < 0)   this.mana=0;
}",0.9053254437869822
174602,"/** 
 * Increases the current mana count by the given amount. 
 */
public void increaseMana(int mana){
  this.mana+=mana;
  if (this.mana > this.maxMana)   this.mana=this.maxMana;
}","/** 
 * Increases the current mana count by the given amount. 
 */
public void increaseMana(int mana){
  this.setMana(this.getMana() + mana);
  if (this.mana > this.maxMana)   this.mana=this.maxMana;
}",0.6178010471204188
174603,"@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase) {
      result.entityHit.setFire(seconds);
    }
    this.setDead();
  }
}","@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase && result.entityHit != player) {
      result.entityHit.setFire(seconds);
    }
    this.setDead();
  }
}",0.9488054607508531
174604,"@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase) {
      ((EntityLivingBase)result.entityHit).addPotionEffect(new PotionEffect(MobEffects.SLOWNESS,20 * seconds,1));
    }
    this.setDead();
  }
}","@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase && result.entityHit != player) {
      ((EntityLivingBase)result.entityHit).addPotionEffect(new PotionEffect(MobEffects.SLOWNESS,20 * seconds,1));
    }
    this.setDead();
  }
}",0.9590163934426228
174605,"@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityPlayer) {
      Stats statsCap=(Stats)result.entityHit.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        statsCap.decreaseMana(amount);
      }
    }
    this.setDead();
  }
}","@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityPlayer && result.entityHit != player) {
      Stats statsCap=(Stats)result.entityHit.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        statsCap.decreaseMana(amount);
      }
    }
    this.setDead();
  }
}",0.964200477326969
174606,"@Override public void onImpact(RayTraceResult result){
  if (!this.getEntityWorld().isRemote && player != null) {
    Stats stats=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
    PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase && stats != null && playerInfo != null) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      double damage=(Math.random() * (nbt.getInteger(""String_Node_Str"") - nbt.getInteger(""String_Node_Str""))) + (nbt.getInteger(""String_Node_Str""));
      damage=DamageUtils.applyDamageModifiers(playerInfo,damage,DamageType.MAGICAL);
      damage=DamageUtils.applyCriticalModifier(stats,damage,nbt);
      result.entityHit.attackEntityFrom(DamageSource.causePlayerDamage(player),(float)damage);
      result.entityHit.hurtResistantTime=0;
      WeaponUtils.useWeaponAttributes((float)damage,player,(EntityLivingBase)result.entityHit,stack,NBTHelper.loadStackNBT(stack));
    }
  }
}","@Override public void onImpact(RayTraceResult result){
  if (!this.getEntityWorld().isRemote && player != null) {
    Stats stats=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
    PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase && result.entityHit != player && stats != null && playerInfo != null) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      double damage=(Math.random() * (nbt.getInteger(""String_Node_Str"") - nbt.getInteger(""String_Node_Str""))) + (nbt.getInteger(""String_Node_Str""));
      damage=DamageUtils.applyDamageModifiers(playerInfo,damage,DamageType.MAGICAL);
      damage=DamageUtils.applyCriticalModifier(stats,damage,nbt);
      result.entityHit.attackEntityFrom(DamageSource.causePlayerDamage(player),(float)damage);
      result.entityHit.hurtResistantTime=0;
      WeaponUtils.useWeaponAttributes((float)damage,player,(EntityLivingBase)result.entityHit,stack,NBTHelper.loadStackNBT(stack));
    }
  }
}",0.9863138686131386
174607,"@SubscribeEvent public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){
  PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
  if (playerInfo != null && playerInfo.getPlayerClass() == 0 && statsCap != null && statsCap.getMaxMana() == 0) {
    LootSlashConquer.network.sendTo(new PacketClassGui(),(EntityPlayerMP)event.player);
    statsCap.setMaxMana(100);
    statsCap.setMana(statsCap.getMaxMana());
    statsCap.setManaPerSecond(10);
    statsCap.setHealthPerSecond(1);
    statsCap.setMagicalPower(0);
    statsCap.setCriticalChance(0);
    statsCap.setCriticalDamage(0);
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
  }
 else   if (playerInfo != null && playerInfo.getPlayerClass() > 0)   LootSlashConquer.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)event.player);
}","@SubscribeEvent public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){
  PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
  if (playerInfo != null && playerInfo.getPlayerClass() == 0 && statsCap != null && statsCap.getMaxMana() == 0) {
    LootSlashConquer.network.sendTo(new PacketClassGui(),(EntityPlayerMP)event.player);
    statsCap.setMaxMana(100);
    statsCap.setMana(statsCap.getMaxMana());
    statsCap.setManaPerSecond(10);
    statsCap.setHealthPerSecond(1);
    statsCap.setMagicalPower(0);
    statsCap.setCriticalChance(0);
    statsCap.setCriticalDamage(0);
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
  }
 else   if (playerInfo != null && playerInfo.getPlayerClass() > 0) {
    LootSlashConquer.LOGGER.info(statsCap);
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
    LootSlashConquer.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)event.player);
  }
}",0.9324384787472036
174608,"@Override public NBTBase writeNBT(Capability<IStats> capability,IStats instance,EnumFacing side){
  NBTTagCompound nbt=new NBTTagCompound();
  nbt.setInteger(""String_Node_Str"",instance.getMana());
  nbt.setInteger(""String_Node_Str"",instance.getMaxMana());
  nbt.setInteger(""String_Node_Str"",instance.getManaPerSecond());
  nbt.setDouble(""String_Node_Str"",instance.getMagicalPower());
  nbt.setInteger(""String_Node_Str"",instance.getHealthPerSecond());
  nbt.setDouble(""String_Node_Str"",instance.getCriticalChance());
  nbt.setDouble(""String_Node_Str"",instance.getCriticalDamage());
  return nbt;
}","@Override public NBTBase writeNBT(Capability<IStats> capability,IStats instance,EnumFacing side){
  NBTTagCompound nbt=new NBTTagCompound();
  nbt.setInteger(""String_Node_Str"",instance.getMaxMana());
  nbt.setInteger(""String_Node_Str"",instance.getMana());
  nbt.setInteger(""String_Node_Str"",instance.getManaPerSecond());
  nbt.setDouble(""String_Node_Str"",instance.getMagicalPower());
  nbt.setInteger(""String_Node_Str"",instance.getHealthPerSecond());
  nbt.setDouble(""String_Node_Str"",instance.getCriticalChance());
  nbt.setDouble(""String_Node_Str"",instance.getCriticalDamage());
  return nbt;
}",0.906040268456376
174609,"@SubscribeEvent public static void playerClone(PlayerEvent.Clone event){
  IStats oldStats=getStats(event.getOriginal());
  IStats newStats=getStats(event.getEntityLiving());
  if (newStats != null && oldStats != null) {
    newStats.setMana(oldStats.getMana());
    newStats.setMaxMana(oldStats.getMaxMana());
    newStats.setManaPerSecond(oldStats.getManaPerSecond());
    newStats.setMagicalPower(oldStats.getMagicalPower());
    newStats.setHealthPerSecond(oldStats.getHealthPerSecond());
    newStats.setCriticalChance(oldStats.getCriticalChance());
    newStats.setCriticalDamage(oldStats.getCriticalDamage());
  }
}","@SubscribeEvent public static void playerClone(PlayerEvent.Clone event){
  IStats oldStats=getStats(event.getOriginal());
  IStats newStats=getStats(event.getEntityLiving());
  if (newStats != null && oldStats != null) {
    newStats.setMaxMana(oldStats.getMaxMana());
    newStats.setMana(oldStats.getMana());
    newStats.setManaPerSecond(oldStats.getManaPerSecond());
    newStats.setMagicalPower(oldStats.getMagicalPower());
    newStats.setHealthPerSecond(oldStats.getHealthPerSecond());
    newStats.setCriticalChance(oldStats.getCriticalChance());
    newStats.setCriticalDamage(oldStats.getCriticalDamage());
  }
}",0.932475884244373
174610,"public static void register(){
  CapabilityManager.INSTANCE.register(IStats.class,new Capability.IStorage<IStats>(){
    @Override public NBTBase writeNBT(    Capability<IStats> capability,    IStats instance,    EnumFacing side){
      NBTTagCompound nbt=new NBTTagCompound();
      nbt.setInteger(""String_Node_Str"",instance.getMana());
      nbt.setInteger(""String_Node_Str"",instance.getMaxMana());
      nbt.setInteger(""String_Node_Str"",instance.getManaPerSecond());
      nbt.setDouble(""String_Node_Str"",instance.getMagicalPower());
      nbt.setInteger(""String_Node_Str"",instance.getHealthPerSecond());
      nbt.setDouble(""String_Node_Str"",instance.getCriticalChance());
      nbt.setDouble(""String_Node_Str"",instance.getCriticalDamage());
      return nbt;
    }
    @Override public void readNBT(    Capability<IStats> capability,    IStats instance,    EnumFacing side,    NBTBase nbt){
      NBTTagCompound compound=(NBTTagCompound)nbt;
      instance.setMana(compound.getInteger(""String_Node_Str""));
      instance.setMaxMana(compound.getInteger(""String_Node_Str""));
      instance.setManaPerSecond(compound.getInteger(""String_Node_Str""));
      instance.setMagicalPower(compound.getDouble(""String_Node_Str""));
      instance.setHealthPerSecond(compound.getInteger(""String_Node_Str""));
      instance.setCriticalChance(compound.getDouble(""String_Node_Str""));
      instance.setCriticalDamage(compound.getDouble(""String_Node_Str""));
    }
  }
,() -> new Stats(null));
}","public static void register(){
  CapabilityManager.INSTANCE.register(IStats.class,new Capability.IStorage<IStats>(){
    @Override public NBTBase writeNBT(    Capability<IStats> capability,    IStats instance,    EnumFacing side){
      NBTTagCompound nbt=new NBTTagCompound();
      nbt.setInteger(""String_Node_Str"",instance.getMaxMana());
      nbt.setInteger(""String_Node_Str"",instance.getMana());
      nbt.setInteger(""String_Node_Str"",instance.getManaPerSecond());
      nbt.setDouble(""String_Node_Str"",instance.getMagicalPower());
      nbt.setInteger(""String_Node_Str"",instance.getHealthPerSecond());
      nbt.setDouble(""String_Node_Str"",instance.getCriticalChance());
      nbt.setDouble(""String_Node_Str"",instance.getCriticalDamage());
      return nbt;
    }
    @Override public void readNBT(    Capability<IStats> capability,    IStats instance,    EnumFacing side,    NBTBase nbt){
      NBTTagCompound compound=(NBTTagCompound)nbt;
      instance.setMaxMana(compound.getInteger(""String_Node_Str""));
      instance.setMana(compound.getInteger(""String_Node_Str""));
      instance.setManaPerSecond(compound.getInteger(""String_Node_Str""));
      instance.setMagicalPower(compound.getDouble(""String_Node_Str""));
      instance.setHealthPerSecond(compound.getInteger(""String_Node_Str""));
      instance.setCriticalChance(compound.getDouble(""String_Node_Str""));
      instance.setCriticalDamage(compound.getDouble(""String_Node_Str""));
    }
  }
,() -> new Stats(null));
}",0.9546991210277216
174611,"@Override public void readNBT(Capability<IStats> capability,IStats instance,EnumFacing side,NBTBase nbt){
  NBTTagCompound compound=(NBTTagCompound)nbt;
  instance.setMana(compound.getInteger(""String_Node_Str""));
  instance.setMaxMana(compound.getInteger(""String_Node_Str""));
  instance.setManaPerSecond(compound.getInteger(""String_Node_Str""));
  instance.setMagicalPower(compound.getDouble(""String_Node_Str""));
  instance.setHealthPerSecond(compound.getInteger(""String_Node_Str""));
  instance.setCriticalChance(compound.getDouble(""String_Node_Str""));
  instance.setCriticalDamage(compound.getDouble(""String_Node_Str""));
}","@Override public void readNBT(Capability<IStats> capability,IStats instance,EnumFacing side,NBTBase nbt){
  NBTTagCompound compound=(NBTTagCompound)nbt;
  instance.setMaxMana(compound.getInteger(""String_Node_Str""));
  instance.setMana(compound.getInteger(""String_Node_Str""));
  instance.setManaPerSecond(compound.getInteger(""String_Node_Str""));
  instance.setMagicalPower(compound.getDouble(""String_Node_Str""));
  instance.setHealthPerSecond(compound.getInteger(""String_Node_Str""));
  instance.setCriticalChance(compound.getDouble(""String_Node_Str""));
  instance.setCriticalDamage(compound.getDouble(""String_Node_Str""));
}",0.9035369774919614
174612,"@SubscribeEvent public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){
  PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
  if (playerInfo != null && playerInfo.getPlayerClass() == 0 && statsCap != null && statsCap.getMaxMana() == 0) {
    LootSlashConquer.network.sendTo(new PacketClassGui(),(EntityPlayerMP)event.player);
    statsCap.setMaxMana(100);
    statsCap.setMana(statsCap.getMaxMana());
    statsCap.setManaPerSecond(10);
    statsCap.setHealthPerSecond(1);
    statsCap.setMagicalPower(0);
    statsCap.setCriticalChance(0);
    statsCap.setCriticalDamage(0);
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
  }
 else   if (playerInfo != null && playerInfo.getPlayerClass() > 0) {
    LootSlashConquer.LOGGER.info(statsCap);
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
    LootSlashConquer.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)event.player);
  }
}","@SubscribeEvent public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){
  PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
  if (playerInfo != null && playerInfo.getPlayerClass() == 0 && statsCap != null && statsCap.getMaxMana() == 0) {
    LootSlashConquer.network.sendTo(new PacketClassGui(),(EntityPlayerMP)event.player);
    statsCap.setMaxMana(100);
    statsCap.setMana(statsCap.getMaxMana());
    statsCap.setManaPerSecond(10);
    statsCap.setHealthPerSecond(1);
    statsCap.setMagicalPower(0);
    statsCap.setCriticalChance(0);
    statsCap.setCriticalDamage(0);
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
  }
 else   if (playerInfo != null && statsCap != null && playerInfo.getPlayerClass() > 0) {
    LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
    LootSlashConquer.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)event.player);
  }
}",0.9729043183742592
174613,"public PacketUpdateStats(Stats statsCap){
  this.mana=statsCap.getMana();
  this.maxMana=statsCap.getMaxMana();
  this.manaPerSecond=statsCap.getManaPerSecond();
  this.magicalPower=statsCap.getMagicalPower();
  this.healthPerSecond=statsCap.getHealthPerSecond();
  this.criticalChance=statsCap.getCriticalChance();
  this.criticalDamage=statsCap.getCriticalDamage();
}","public PacketUpdateStats(Stats statsCap){
  this.maxMana=statsCap.getMaxMana();
  this.mana=statsCap.getMana();
  this.manaPerSecond=statsCap.getManaPerSecond();
  this.magicalPower=statsCap.getMagicalPower();
  this.healthPerSecond=statsCap.getHealthPerSecond();
  this.criticalChance=statsCap.getCriticalChance();
  this.criticalDamage=statsCap.getCriticalDamage();
}",0.913279132791328
174614,"@Override public void toBytes(ByteBuf buf){
  buf.writeInt(mana);
  buf.writeInt(maxMana);
  buf.writeInt(manaPerSecond);
  buf.writeDouble(magicalPower);
  buf.writeInt(healthPerSecond);
  buf.writeDouble(criticalChance);
  buf.writeDouble(criticalDamage);
}","@Override public void toBytes(ByteBuf buf){
  buf.writeInt(maxMana);
  buf.writeInt(mana);
  buf.writeInt(manaPerSecond);
  buf.writeDouble(magicalPower);
  buf.writeInt(healthPerSecond);
  buf.writeDouble(criticalChance);
  buf.writeDouble(criticalDamage);
}",0.915057915057915
174615,"@Override public void fromBytes(ByteBuf buf){
  mana=buf.readInt();
  maxMana=buf.readInt();
  manaPerSecond=buf.readInt();
  magicalPower=buf.readDouble();
  healthPerSecond=buf.readInt();
  criticalChance=buf.readDouble();
  criticalDamage=buf.readDouble();
}","@Override public void fromBytes(ByteBuf buf){
  maxMana=buf.readInt();
  mana=buf.readInt();
  manaPerSecond=buf.readInt();
  magicalPower=buf.readDouble();
  healthPerSecond=buf.readInt();
  criticalChance=buf.readDouble();
  criticalDamage=buf.readDouble();
}",0.9157088122605364
174616,"@Override public IMessage onMessage(final PacketUpdateStats message,final MessageContext ctx){
  IThreadListener mainThread=Minecraft.getMinecraft();
  mainThread.addScheduledTask(new Runnable(){
    @Override public void run(){
      EntityPlayer player=Minecraft.getMinecraft().player;
      Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        statsCap.setMana(message.mana);
        statsCap.setMaxMana(message.maxMana);
        statsCap.setManaPerSecond(message.manaPerSecond);
        statsCap.setMagicalPower(message.magicalPower);
        statsCap.setHealthPerSecond(message.healthPerSecond);
        statsCap.setCriticalChance(message.criticalChance);
        statsCap.setCriticalDamage(message.criticalDamage);
      }
    }
  }
);
  return null;
}","@Override public IMessage onMessage(final PacketUpdateStats message,final MessageContext ctx){
  IThreadListener mainThread=Minecraft.getMinecraft();
  mainThread.addScheduledTask(new Runnable(){
    @Override public void run(){
      EntityPlayer player=Minecraft.getMinecraft().player;
      Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        statsCap.setMaxMana(message.maxMana);
        statsCap.setMana(message.mana);
        statsCap.setManaPerSecond(message.manaPerSecond);
        statsCap.setMagicalPower(message.magicalPower);
        statsCap.setHealthPerSecond(message.healthPerSecond);
        statsCap.setCriticalChance(message.criticalChance);
        statsCap.setCriticalDamage(message.criticalDamage);
      }
    }
  }
);
  return null;
}",0.951278928136419
174617,"@Override public void run(){
  EntityPlayer player=Minecraft.getMinecraft().player;
  Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
  if (statsCap != null) {
    statsCap.setMana(message.mana);
    statsCap.setMaxMana(message.maxMana);
    statsCap.setManaPerSecond(message.manaPerSecond);
    statsCap.setMagicalPower(message.magicalPower);
    statsCap.setHealthPerSecond(message.healthPerSecond);
    statsCap.setCriticalChance(message.criticalChance);
    statsCap.setCriticalDamage(message.criticalDamage);
  }
}","@Override public void run(){
  EntityPlayer player=Minecraft.getMinecraft().player;
  Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
  if (statsCap != null) {
    statsCap.setMaxMana(message.maxMana);
    statsCap.setMana(message.mana);
    statsCap.setManaPerSecond(message.manaPerSecond);
    statsCap.setMagicalPower(message.magicalPower);
    statsCap.setHealthPerSecond(message.healthPerSecond);
    statsCap.setCriticalChance(message.criticalChance);
    statsCap.setCriticalDamage(message.criticalDamage);
  }
}",0.9344262295081968
174618,"/** 
 * Set the type of the item to NBT for use in generating names. 
 */
public static void setTypes(ItemStack stack,NBTTagCompound nbt){
  if (stack.getItem() instanceof ItemSword) {
    if (stack.getItem() instanceof ItemMelee) {
      ItemMelee item=(ItemMelee)stack.getItem();
      nbt.setString(""String_Node_Str"",item.getType());
    }
 else     nbt.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (stack.getItem() instanceof ItemArmor) {
    if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.HEAD)     nbt.setString(""String_Node_Str"",""String_Node_Str"");
 else     if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.CHEST)     nbt.setString(""String_Node_Str"",""String_Node_Str"");
 else     if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.LEGS)     nbt.setString(""String_Node_Str"",""String_Node_Str"");
 else     if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.FEET)     nbt.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (stack.getItem() instanceof ItemBow) {
    nbt.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (stack.getItem() instanceof ItemMagical) {
    nbt.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (stack.getItem() instanceof ItemBauble) {
    ItemBauble item=(ItemBauble)stack.getItem();
    nbt.setString(""String_Node_Str"",item.getBaubleType(stack).toString().toLowerCase());
  }
}","/** 
 * Set the type of the item to NBT for use in generating names. 
 */
public static void setTypes(ItemStack stack,NBTTagCompound nbt){
  if (stack.getItem() instanceof ItemSword) {
    if (stack.getItem() instanceof ItemMelee) {
      ItemMelee item=(ItemMelee)stack.getItem();
      nbt.setString(""String_Node_Str"",item.getType());
    }
 else     nbt.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (stack.getItem() instanceof ItemArmor) {
    if (((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.HEAD)     nbt.setString(""String_Node_Str"",""String_Node_Str"");
 else     if (((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.CHEST)     nbt.setString(""String_Node_Str"",""String_Node_Str"");
 else     if (((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.LEGS)     nbt.setString(""String_Node_Str"",""String_Node_Str"");
 else     if (((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.FEET)     nbt.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (stack.getItem() instanceof ItemBow) {
    nbt.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (stack.getItem() instanceof ItemMagical) {
    nbt.setString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (stack.getItem() instanceof ItemBauble) {
    ItemBauble item=(ItemBauble)stack.getItem();
    nbt.setString(""String_Node_Str"",item.getBaubleType(stack).toString().toLowerCase());
  }
}",0.9655172413793104
174619,"@Override public void onLivingUpdate(){
  if (!this.world.isRemote && this.getHeldItemMainhand() == null) {
    LootSlashConquer.LOGGER.info(""String_Node_Str"");
    this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,this.getRandomWeapon());
  }
}","@Override public void onLivingUpdate(){
  super.onLivingUpdate();
  if (!this.world.isRemote && this.getHeldItemMainhand() == null) {
    LootSlashConquer.LOGGER.info(""String_Node_Str"");
    this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,this.getRandomWeapon());
  }
}",0.950191570881226
174620,"@SubscribeEvent public static void attachCapabilities(AttachCapabilitiesEvent<Entity> event){
  if (event.getObject() instanceof EntityPlayer) {
    final CurrentAbilities currentAbilities=new CurrentAbilities((EntityPlayer)event.getObject());
    event.addCapability(ID,createProvider(currentAbilities));
  }
}","public static void attachCapabilities(AttachCapabilitiesEvent<Entity> event){
  if (event.getObject() instanceof EntityPlayer) {
    final CurrentAbilities currentAbilities=new CurrentAbilities((EntityPlayer)event.getObject());
    event.addCapability(ID,createProvider(currentAbilities));
  }
}",0.9735973597359736
174621,"@SubscribeEvent public void onInput(InputEvent event){
  KeyBinding p=ClientProxy.bindingP;
  EntityPlayer player=Minecraft.getMinecraft().player;
  if (player != null && p.isPressed()) {
    player.openGui(LootSlashConquer.instance,GuiHandler.PLAYER_INFORMATION,player.getEntityWorld(),player.getPosition().getX(),player.getPosition().getY(),player.getPosition().getZ());
  }
}","@SubscribeEvent public static void onInput(InputEvent event){
  KeyBinding p=ClientProxy.bindingP;
  EntityPlayer player=Minecraft.getMinecraft().player;
  if (player != null && p.isPressed()) {
    player.openGui(LootSlashConquer.instance,GuiHandler.PLAYER_INFORMATION,player.getEntityWorld(),player.getPosition().getX(),player.getPosition().getY(),player.getPosition().getZ());
  }
  if (ClientProxy.openClass.isPressed()) {
    PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
    if (playerInfo != null && playerInfo.getPlayerClass() == 0) {
      player.openGui(LootSlashConquer.instance,GuiHandler.CLASS_SELECTION,player.getEntityWorld(),player.getPosition().getX(),player.getPosition().getY(),player.getPosition().getZ());
    }
  }
}",0.633696563285834
174622,"@SubscribeEvent public void onRenderLiving(RenderLivingEvent.Post<EntityLivingBase> event){
  EntityLivingBase entity=event.getEntity();
  EnemyInfo enemyInfo=(EnemyInfo)entity.getCapability(CapabilityEnemyInfo.ENEMY_INFO,null);
  if (entity instanceof IMob && enemyInfo != null) {
    Entity viewingEntity=event.getRenderer().getRenderManager().renderViewEntity;
    double entityX=(entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)event.getPartialRenderTick());
    double entityY=(entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)event.getPartialRenderTick());
    double entityZ=(entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)event.getPartialRenderTick());
    double viewingX=(viewingEntity.lastTickPosX + (viewingEntity.posX - viewingEntity.lastTickPosX) * (double)event.getPartialRenderTick());
    double viewingY=(viewingEntity.lastTickPosY + (viewingEntity.posY - viewingEntity.lastTickPosY) * (double)event.getPartialRenderTick());
    double viewingZ=(viewingEntity.lastTickPosZ + (viewingEntity.posZ - viewingEntity.lastTickPosZ) * (double)event.getPartialRenderTick());
    double x=entityX - viewingX;
    double y=entityY - viewingY;
    double z=entityZ - viewingZ;
    String test=EnemyTier.getEnemyTier(enemyInfo).getColor() + EnemyTier.getEnemyTier(enemyInfo).getName() + ""String_Node_Str""+ enemyInfo.getEnemyLevel();
    if (!entity.isInvisible()) {
      this.renderNameplate(entity,event.getRenderer().getRenderManager(),test,x,y + entity.height + 0.5,z,16);
    }
  }
}","@SubscribeEvent public static void onRenderLiving(RenderLivingEvent.Post<EntityLivingBase> event){
  EntityLivingBase entity=event.getEntity();
  EnemyInfo enemyInfo=(EnemyInfo)entity.getCapability(CapabilityEnemyInfo.ENEMY_INFO,null);
  if (entity instanceof IMob && enemyInfo != null) {
    Entity viewingEntity=event.getRenderer().getRenderManager().renderViewEntity;
    double entityX=(entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)event.getPartialRenderTick());
    double entityY=(entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)event.getPartialRenderTick());
    double entityZ=(entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)event.getPartialRenderTick());
    double viewingX=(viewingEntity.lastTickPosX + (viewingEntity.posX - viewingEntity.lastTickPosX) * (double)event.getPartialRenderTick());
    double viewingY=(viewingEntity.lastTickPosY + (viewingEntity.posY - viewingEntity.lastTickPosY) * (double)event.getPartialRenderTick());
    double viewingZ=(viewingEntity.lastTickPosZ + (viewingEntity.posZ - viewingEntity.lastTickPosZ) * (double)event.getPartialRenderTick());
    double x=entityX - viewingX;
    double y=entityY - viewingY;
    double z=entityZ - viewingZ;
    String test=EnemyTier.getEnemyTier(enemyInfo).getColor() + EnemyTier.getEnemyTier(enemyInfo).getName() + ""String_Node_Str""+ enemyInfo.getEnemyLevel();
    if (!entity.isInvisible()) {
      renderNameplate(entity,event.getRenderer().getRenderManager(),test,x,y + entity.height + 0.5,z,16);
    }
  }
}",0.996138996138996
174623,"/** 
 * Renders text above an entity to show their level and tier.
 * @param entity
 * @param render
 * @param str
 * @param x
 * @param y
 * @param z
 * @param maxDistance
 */
private void renderNameplate(EntityLivingBase entity,RenderManager render,String str,double x,double y,double z,int maxDistance){
  double distance=entity.getDistance(render.renderViewEntity);
  if (distance > maxDistance)   return;
  FontRenderer font=render.getFontRenderer();
  float playerYaw=render.playerViewY;
  float playerPitch=render.playerViewX;
  EntityRenderer.drawNameplate(font,str,(float)x,(float)y,(float)z,0,playerYaw,playerPitch,false,false);
}","/** 
 * Renders text above an entity to show their level and tier.
 * @param entity
 * @param render
 * @param str
 * @param x
 * @param y
 * @param z
 * @param maxDistance
 */
private static void renderNameplate(EntityLivingBase entity,RenderManager render,String str,double x,double y,double z,int maxDistance){
  double distance=entity.getDistance(render.renderViewEntity);
  if (distance > maxDistance)   return;
  FontRenderer font=render.getFontRenderer();
  float playerYaw=render.playerViewY;
  float playerPitch=render.playerViewX;
  EntityRenderer.drawNameplate(font,str,(float)x,(float)y,(float)z,0,playerYaw,playerPitch,false,false);
}",0.9945609945609946
174624,"@SubscribeEvent public void onRenderOverlayText(RenderGameOverlayEvent.Text event){
  EntityPlayer player=Minecraft.getMinecraft().player;
  World world=Minecraft.getMinecraft().world;
  IChunkLevelHolder chunkLevelHolder=world.getCapability(CapabilityChunkLevel.CHUNK_LEVEL,null);
  IChunkLevel chunkLevel=chunkLevelHolder.getChunkLevel(new ChunkPos(player.getPosition()));
  if (chunkLevelHolder != null && chunkLevel != null) {
    Minecraft.getMinecraft().fontRenderer.drawStringWithShadow(""String_Node_Str"" + chunkLevel.getChunkLevel(),10,10,0xFFFFFF);
  }
}","@SubscribeEvent public static void onRenderOverlayText(RenderGameOverlayEvent.Text event){
  EntityPlayer player=Minecraft.getMinecraft().player;
  World world=Minecraft.getMinecraft().world;
  IChunkLevelHolder chunkLevelHolder=world.getCapability(CapabilityChunkLevel.CHUNK_LEVEL,null);
  IChunkLevel chunkLevel=chunkLevelHolder.getChunkLevel(new ChunkPos(player.getPosition()));
  if (chunkLevelHolder != null && chunkLevel != null) {
    Minecraft.getMinecraft().fontRenderer.drawStringWithShadow(""String_Node_Str"" + chunkLevel.getChunkLevel(),10,10,0xFFFFFF);
  }
}",0.9938217122683142
174625,"@SubscribeEvent public void onRenderPlayer(RenderPlayerEvent.Pre event){
  if (event.getEntityPlayer().isInvisible()) {
    event.setCanceled(true);
  }
}","@SubscribeEvent public static void onRenderPlayer(RenderPlayerEvent.Pre event){
  if (event.getEntityPlayer().isInvisible()) {
    event.setCanceled(true);
  }
}",0.9777777777777776
174626,"private void registerItemModel(Item item){
  ModelLoader.setCustomModelResourceLocation(item,0,new ModelResourceLocation(item.getRegistryName(),""String_Node_Str""));
}","private static void registerItemModel(Item item){
  ModelLoader.setCustomModelResourceLocation(item,0,new ModelResourceLocation(item.getRegistryName(),""String_Node_Str""));
}",0.9793510324483776
174627,"@SubscribeEvent public static void onPlayerTick(PlayerTickEvent event){
  if (event.phase == Phase.START && !event.player.getEntityWorld().isRemote) {
    if (ticks % 10 == 0) {
      PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      if (event.player != null && playerInfo != null) {
        updateStats(event.player,playerInfo,4);
      }
      ticks=0;
    }
    if (regenTicks % 100 == 0) {
      Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        if (statsCap.getMana() < statsCap.getMaxMana()) {
          statsCap.increaseMana(statsCap.getManaPerSecond());
        }
        if (event.player.getHealth() < event.player.getMaxHealth()) {
          event.player.heal(statsCap.getHealthPerSecond());
        }
        LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
      }
      regenTicks=0;
    }
    ticks++;
    regenTicks++;
  }
}","@SubscribeEvent public static void onPlayerTick(PlayerTickEvent event){
  if (event.phase == Phase.START && !event.player.getEntityWorld().isRemote) {
    ticks++;
    regenTicks++;
    if (ticks % 10 == 0) {
      PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      if (event.player != null && playerInfo != null) {
        updateStats(event.player,playerInfo,4);
      }
      ticks=0;
    }
    if (regenTicks % 100 == 0) {
      Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        if (statsCap.getMana() < statsCap.getMaxMana()) {
          statsCap.increaseMana(statsCap.getManaPerSecond());
        }
        if (event.player.getHealth() < event.player.getMaxHealth()) {
          event.player.heal(statsCap.getHealthPerSecond());
        }
        LootSlashConquer.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
      }
      regenTicks=0;
    }
  }
}",0.9702495201535508
174628,"@Override public void init(FMLInitializationEvent event){
  bindingP=new KeyBinding(""String_Node_Str"",Keyboard.KEY_P,""String_Node_Str"");
  ClientRegistry.registerKeyBinding(bindingP);
}","@Override public void init(FMLInitializationEvent event){
  bindingP=new KeyBinding(""String_Node_Str"",Keyboard.KEY_P,""String_Node_Str"");
  openClass=new KeyBinding(""String_Node_Str"",Keyboard.KEY_O,""String_Node_Str"");
  ClientRegistry.registerKeyBinding(bindingP);
  ClientRegistry.registerKeyBinding(openClass);
}",0.7429718875502008
174629,"@Override public void preInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new ModItemModels());
  MinecraftForge.EVENT_BUS.register(new GuiMana());
  MinecraftForge.EVENT_BUS.register(new GuiHealth());
  MinecraftForge.EVENT_BUS.register(new EventRenderOverlayText());
  MinecraftForge.EVENT_BUS.register(new EventInput());
  MinecraftForge.EVENT_BUS.register(new EventItemTooltip());
  MinecraftForge.EVENT_BUS.register(new EventRenderPlayer());
  MinecraftForge.EVENT_BUS.register(new EventRenderLiving());
  registerRenderers();
}","@Override public void preInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new GuiMana());
  MinecraftForge.EVENT_BUS.register(new GuiHealth());
  registerRenderers();
}",0.5152722443559097
174630,"@Override public void onDeath(DamageSource cause){
  super.onDeath(cause);
  if (this.getHeldItemMainhand() != null) {
    this.entityDropItem(this.getHeldItemMainhand(),0);
  }
}","@Override public void onDeath(DamageSource cause){
  super.onDeath(cause);
  if (!this.world.isRemote && this.getHeldItemMainhand() != null) {
    this.entityDropItem(this.getHeldItemMainhand(),0);
  }
}",0.93717277486911
174631,"public EntityBarbarian(World world){
  super(world);
  this.setSize(1.0F,2.0F);
}","public EntityBarbarian(World world){
  super(world);
  this.setSize(1.0F,2.0F);
  this.initEntityAI();
}",0.8756756756756757
174632,"/** 
 * Returns a randomly generated ItemStack based on the tier of the monster.
 * @return
 */
private ItemStack getRandomWeapon(){
  EnemyInfo enemyInfo=(EnemyInfo)this.getCapability(CapabilityEnemyInfo.ENEMY_INFO,null);
  if (enemyInfo != null) {
    CustomLootContext context=new CustomLootContext.Builder(this.getServer().getWorld(this.dimension)).withChestPos(this.getPosition()).build();
    ItemStack stack=null;
    if (enemyInfo.getEnemyTier() == 1) {
      CustomLootTable commonTable=(CustomLootTable)this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=commonTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
 else     if (enemyInfo.getEnemyTier() == 2) {
      CustomLootTable uncommonTable=(CustomLootTable)this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=uncommonTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
 else     if (enemyInfo.getEnemyTier() == 3) {
      CustomLootTable rareTable=(CustomLootTable)this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=rareTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
 else     if (enemyInfo.getEnemyTier() == 4) {
      CustomLootTable epicTable=(CustomLootTable)this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=epicTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
 else     if (enemyInfo.getEnemyTier() == 5) {
      CustomLootTable legendaryTable=(CustomLootTable)this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=legendaryTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
    if (stack != null) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      ItemGenerator.create(stack,nbt,world,nbt.getInteger(""String_Node_Str""));
      stack.setTagCompound(nbt);
      NameGenerator.generateName(stack,nbt);
      return stack;
    }
  }
  LootSlashConquer.LOGGER.info(""String_Node_Str"");
  return null;
}","/** 
 * Returns a randomly generated ItemStack based on the tier of the monster.
 * @return
 */
private ItemStack getRandomWeapon(){
  EnemyInfo enemyInfo=(EnemyInfo)this.getCapability(CapabilityEnemyInfo.ENEMY_INFO,null);
  if (enemyInfo != null) {
    LootContext context=new LootContext.Builder(this.getServer().getWorld(this.dimension)).withLootedEntity(this).build();
    ItemStack stack=null;
    if (enemyInfo.getEnemyTier() == 1) {
      LootTable commonTable=this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=commonTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
 else     if (enemyInfo.getEnemyTier() == 2) {
      LootTable uncommonTable=this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=uncommonTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
 else     if (enemyInfo.getEnemyTier() == 3) {
      LootTable rareTable=this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=rareTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
 else     if (enemyInfo.getEnemyTier() == 4) {
      LootTable epicTable=this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=epicTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
 else     if (enemyInfo.getEnemyTier() == 5) {
      LootTable legendaryTable=this.world.getLootTableManager().getLootTableFromLocation(new ResourceLocation(Reference.MODID,""String_Node_Str""));
      List<ItemStack> items=legendaryTable.generateLootForPools(this.rand,context);
      stack=items.get(0);
    }
    if (stack != null) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      ItemGenerator.create(stack,nbt,world,nbt.getInteger(""String_Node_Str""));
      stack.setTagCompound(nbt);
      NameGenerator.generateName(stack,nbt);
      return stack;
    }
  }
  return null;
}",0.9188835586567816
174633,"/** 
 * Called to give the Barbarian a random melee weapon.
 */
@Override protected void setEquipmentBasedOnDifficulty(DifficultyInstance difficulty){
  this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,this.getRandomWeapon());
}","/** 
 * Called to give the Barbarian a random melee weapon.
 */
@Override protected void setEquipmentBasedOnDifficulty(DifficultyInstance difficulty){
  LootSlashConquer.LOGGER.info(""String_Node_Str"");
  this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,this.getRandomWeapon());
}",0.9009708737864076
174634,"@Override public boolean attackEntityAsMob(Entity enemy){
  ItemStack stack=this.getHeldItemMainhand();
  if (stack != null) {
    NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
    double damage=Math.random() * (nbt.getInteger(""String_Node_Str"") - nbt.getInteger(""String_Node_Str"")) + nbt.getInteger(""String_Node_Str"");
    boolean hasAttacked=enemy.attackEntityFrom(DamageSource.causeMobDamage(this),(float)damage);
    if (hasAttacked && enemy instanceof EntityLivingBase) {
      WeaponHelper.useWeaponAttributes((float)damage,this,(EntityLivingBase)enemy,stack,nbt);
      int knockback=EnchantmentHelper.getKnockbackModifier(this);
      if (knockback > 0) {
        ((EntityLivingBase)enemy).knockBack(this,(float)knockback * 0.5F,(double)MathHelper.sin(this.rotationYaw * 0.017453292F),(double)(-MathHelper.cos(this.rotationYaw * 0.017453292F)));
        this.motionX*=0.6D;
        this.motionZ*=0.6D;
      }
    }
    return hasAttacked;
  }
 else {
    return false;
  }
}","@Override public boolean attackEntityAsMob(Entity entity){
  ItemStack stack=this.getHeldItemMainhand();
  if (stack != null && entity instanceof EntityPlayer) {
    EntityPlayer enemy=(EntityPlayer)entity;
    NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
    double damage=Math.random() * (nbt.getInteger(""String_Node_Str"") - nbt.getInteger(""String_Node_Str"")) + nbt.getInteger(""String_Node_Str"");
    boolean hasAttacked=enemy.attackEntityFrom(DamageSource.causeMobDamage(this),(float)damage);
    LootSlashConquer.LOGGER.info(""String_Node_Str"" + damage);
    if (hasAttacked) {
      LootSlashConquer.LOGGER.info(""String_Node_Str"");
      WeaponHelper.useWeaponAttributes((float)damage,this,(EntityLivingBase)enemy,stack,nbt);
      int knockback=EnchantmentHelper.getKnockbackModifier(this);
      if (knockback > 0) {
        ((EntityLivingBase)enemy).knockBack(this,(float)knockback * 0.5F,(double)MathHelper.sin(this.rotationYaw * 0.017453292F),(double)(-MathHelper.cos(this.rotationYaw * 0.017453292F)));
        this.motionX*=0.6D;
        this.motionZ*=0.6D;
      }
    }
    return hasAttacked;
  }
 else {
    return false;
  }
}",0.8856607310215557
174635,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static void registerModProjectile(Class entityClass,String name){
  EntityRegistry.registerModEntity(new ResourceLocation(Reference.MODID,name),entityClass,name,id,LootSlashConquer.instance,64,10,true);
}","private static void registerModProjectile(Class<? extends Entity> entityClass,String name){
  EntityRegistry.registerModEntity(new ResourceLocation(Reference.MODID,name),entityClass,name,++id,LootSlashConquer.instance,64,10,true);
}",0.6666666666666666
174636,"public static void registerEntities(){
  registerModProjectile(EntityFireball.class,""String_Node_Str"");
  registerModProjectile(EntityIcebolt.class,""String_Node_Str"");
  registerModProjectile(EntityLightning.class,""String_Node_Str"");
}","public static void registerEntities(){
  registerModProjectile(EntityFireball.class,""String_Node_Str"");
  registerModProjectile(EntityIcebolt.class,""String_Node_Str"");
  registerModProjectile(EntityLightning.class,""String_Node_Str"");
  registerModEntity(EntityBarbarian.class,""String_Node_Str"");
  registerModEntity(EntityGhost.class,""String_Node_Str"");
  registerModEntity(EntityMummy.class,""String_Node_Str"");
  registerModEntity(EntityBandit.class,""String_Node_Str"");
  registerModEntity(EntityBanshee.class,""String_Node_Str"");
}",0.6127770534550195
174637,"@Override public ItemStack apply(ItemStack stack,Random rand,LootContext context){
  if (context instanceof CustomLootContext) {
    CustomLootContext customContext=(CustomLootContext)context;
    NBTTagCompound nbt;
    World world=context.getWorld();
    if (!stack.hasTagCompound())     nbt=new NBTTagCompound();
 else     nbt=stack.getTagCompound();
    if (customContext.getChestPos() != null) {
      BlockPos pos=customContext.getChestPos();
      ChunkPos chunkPos=new ChunkPos(pos);
      IChunkLevelHolder chunkLevelHolder=world.getCapability(CapabilityChunkLevel.CHUNK_LEVEL,null);
      IChunkLevel chunkLevel=chunkLevelHolder.getChunkLevel(chunkPos);
      nbt.setInteger(""String_Node_Str"",chunkLevel.getChunkLevel());
      stack.setTagCompound(nbt);
      return stack;
    }
 else {
      EntityLivingBase entity=(EntityLivingBase)customContext.getLootedEntity();
      EnemyInfo enemyLevel=(EnemyInfo)entity.getCapability(CapabilityEnemyInfo.ENEMY_INFO,null);
      nbt.setInteger(""String_Node_Str"",enemyLevel.getEnemyLevel());
      stack.setTagCompound(nbt);
      return stack;
    }
  }
  return stack;
}","@Override public ItemStack apply(ItemStack stack,Random rand,LootContext context){
  if (context instanceof CustomLootContext) {
    CustomLootContext customContext=(CustomLootContext)context;
    NBTTagCompound nbt;
    World world=context.getWorld();
    if (!stack.hasTagCompound())     nbt=new NBTTagCompound();
 else     nbt=stack.getTagCompound();
    if (customContext.getChestPos() != null) {
      BlockPos pos=customContext.getChestPos();
      ChunkPos chunkPos=new ChunkPos(pos);
      IChunkLevelHolder chunkLevelHolder=world.getCapability(CapabilityChunkLevel.CHUNK_LEVEL,null);
      IChunkLevel chunkLevel=chunkLevelHolder.getChunkLevel(chunkPos);
      nbt.setInteger(""String_Node_Str"",chunkLevel.getChunkLevel());
      stack.setTagCompound(nbt);
      return stack;
    }
  }
 else {
    NBTTagCompound nbt;
    if (!stack.hasTagCompound())     nbt=new NBTTagCompound();
 else     nbt=stack.getTagCompound();
    EntityLivingBase entity=(EntityLivingBase)context.getLootedEntity();
    EnemyInfo enemyLevel=(EnemyInfo)entity.getCapability(CapabilityEnemyInfo.ENEMY_INFO,null);
    LootSlashConquer.LOGGER.info(""String_Node_Str"");
    nbt.setInteger(""String_Node_Str"",enemyLevel.getEnemyLevel());
    stack.setTagCompound(nbt);
    return stack;
  }
  LootSlashConquer.LOGGER.info(""String_Node_Str"");
  return stack;
}",0.863876472978464
174638,"public ItemLEBauble(String name,BaubleType type){
  super();
  this.setRegistryName(Reference.MODID,name);
  this.setUnlocalizedName(name);
  this.setMaxStackSize(1);
  this.type=type;
}","public ItemLEBauble(String name,BaubleType type){
  super();
  this.setRegistryName(Reference.MODID,name);
  this.setUnlocalizedName(name);
  this.setCreativeTab(ModTabs.tabLE);
  this.setMaxStackSize(1);
  this.type=type;
}",0.9073170731707316
174639,"public ItemLEMagical(String name,boolean isStaff,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super();
  this.setRegistryName(Reference.MODID,name);
  this.setUnlocalizedName(name);
  this.setMaxStackSize(1);
  this.setNoRepair();
  this.setMaxDamage(durability);
  this.isStaff=isStaff;
  this.baseDamage=baseDamage;
  this.baseAttackSpeed=attackSpeed;
  this.manaPerUse=manaPerUse;
  this.addPropertyOverride(new ResourceLocation(""String_Node_Str""),new IItemPropertyGetter(){
    @SideOnly(Side.CLIENT) public float apply(    ItemStack stack,    @Nullable World world,    @Nullable EntityLivingBase entity){
      if (entity instanceof EntityPlayer) {
        EntityPlayer player=(EntityPlayer)entity;
        NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
        PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
        if (playerInfo != null) {
          double attackSpeed=nbt.getDouble(""String_Node_Str"") + (PlayerStatHelper.ATTACK_SPEED_MULTIPLIER * (playerInfo.getTotalAgility()));
          return player.isHandActive() && player.getActiveItemStack() == stack && player.getItemInUseCount() < (stack.getMaxItemUseDuration() - (1 / attackSpeed) * 20) ? 1 : 0;
        }
      }
      return 0;
    }
  }
);
}","public ItemLEMagical(String name,boolean isStaff,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super();
  this.setRegistryName(Reference.MODID,name);
  this.setUnlocalizedName(name);
  this.setCreativeTab(ModTabs.tabLE);
  this.setMaxStackSize(1);
  this.setNoRepair();
  this.setMaxDamage(durability);
  this.isStaff=isStaff;
  this.baseDamage=baseDamage;
  this.baseAttackSpeed=attackSpeed;
  this.manaPerUse=manaPerUse;
  this.addPropertyOverride(new ResourceLocation(""String_Node_Str""),new IItemPropertyGetter(){
    @SideOnly(Side.CLIENT) public float apply(    ItemStack stack,    @Nullable World world,    @Nullable EntityLivingBase entity){
      if (entity instanceof EntityPlayer) {
        EntityPlayer player=(EntityPlayer)entity;
        NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
        PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
        if (playerInfo != null) {
          double attackSpeed=nbt.getDouble(""String_Node_Str"") + (PlayerStatHelper.ATTACK_SPEED_MULTIPLIER * (playerInfo.getTotalAgility()));
          return player.isHandActive() && player.getActiveItemStack() == stack && player.getItemInUseCount() < (stack.getMaxItemUseDuration() - (1 / attackSpeed) * 20) ? 1 : 0;
        }
      }
      return 0;
    }
  }
);
}",0.985799701046338
174640,"@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  this.drawDefaultBackground();
  super.drawScreen(mouseX,mouseY,partialTicks);
  EntityPlayer player=mc.player;
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
  if (player != null && playerInfo != null && statsCap != null) {
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2,20,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + I18n.format(""String_Node_Str"" + playerInfo.getPlayerClass()),this.width / 2 - 50,40,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerLevel(),this.width / 2 - 50,50,0xFFFFFF);
    String experience=I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerExperience()+ ""String_Node_Str""+ playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel());
    double percent=(((double)playerInfo.getPlayerExperience() * 100) / (double)(playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())));
    String percentString=""String_Node_Str"" + String.format(""String_Node_Str"",percent) + ""String_Node_Str"";
    this.drawString(this.fontRenderer,experience + percentString,this.width / 2 - 50,60,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getSkillPoints(),this.width / 2 - 50,70,0xFFFFFF);
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 + 150,120,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,140,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,150,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,160,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,170,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,180,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,190,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getStrengthStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusStrengthStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,140,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getAgilityStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusAgilityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,150,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getDexterityStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusDexterityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,160,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getIntelligenceStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusIntelligenceStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,170,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getWisdomStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusWisdomStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,180,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getFortitudeStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusFortitudeStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,190,0xFFFFFF);
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 - 150,120,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(PlayerStatHelper.ATTACK_DAMAGE_MULTIPLIER * (playerInfo.getTotalStrength())),this.width / 2 - 190,140,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(PlayerStatHelper.MAGICAL_POWER_MULTIPLIER * (playerInfo.getTotalIntelligence())),this.width / 2 - 190,150,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (PlayerStatHelper.ATTACK_SPEED_MULTIPLIER * (playerInfo.getTotalAgility())),this.width / 2 - 190,160,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ player.getEntityAttribute(SharedMonsterAttributes.ARMOR).getAttributeValue(),this.width / 2 - 190,170,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ player.getEntityAttribute(SharedMonsterAttributes.ARMOR_TOUGHNESS).getAttributeValue(),this.width / 2 - 190,180,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(PlayerStatHelper.MAX_HEALTH_MULTIPLIER * (playerInfo.getTotalFortitude())),this.width / 2 - 190,190,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ statsCap.getHealthPerSecond(),this.width / 2 - 190,200,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(PlayerStatHelper.MAX_MANA_MULTIPLIER * (playerInfo.getTotalWisdom())),this.width / 2 - 190,210,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ statsCap.getManaPerSecond(),this.width / 2 - 190,220,0xFFFFFF);
  }
}","@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  this.drawDefaultBackground();
  super.drawScreen(mouseX,mouseY,partialTicks);
  DecimalFormat format=new DecimalFormat(""String_Node_Str"");
  EntityPlayer player=mc.player;
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
  if (player != null && playerInfo != null && statsCap != null) {
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2,20,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + I18n.format(""String_Node_Str"" + playerInfo.getPlayerClass()),this.width / 2 - 50,40,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerLevel(),this.width / 2 - 50,50,0xFFFFFF);
    String experience=I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerExperience()+ ""String_Node_Str""+ playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel());
    double percent=(((double)playerInfo.getPlayerExperience() * 100) / (double)(playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())));
    String percentString=""String_Node_Str"" + String.format(""String_Node_Str"",percent) + ""String_Node_Str"";
    this.drawString(this.fontRenderer,experience + percentString,this.width / 2 - 50,60,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getSkillPoints(),this.width / 2 - 50,70,0xFFFFFF);
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 + 150,120,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,140,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,150,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,160,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,170,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,180,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,190,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getStrengthStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusStrengthStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,140,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getAgilityStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusAgilityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,150,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getDexterityStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusDexterityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,160,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getIntelligenceStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusIntelligenceStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,170,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getWisdomStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusWisdomStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,180,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getFortitudeStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusFortitudeStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,190,0xFFFFFF);
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 - 150,120,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(PlayerStatHelper.ATTACK_DAMAGE_MULTIPLIER * (playerInfo.getTotalStrength())),this.width / 2 - 190,140,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(PlayerStatHelper.MAGICAL_POWER_MULTIPLIER * (playerInfo.getTotalIntelligence())),this.width / 2 - 190,150,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format((PlayerStatHelper.ATTACK_SPEED_MULTIPLIER * (playerInfo.getTotalAgility()))),this.width / 2 - 190,160,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format(player.getEntityAttribute(SharedMonsterAttributes.ARMOR).getAttributeValue()),this.width / 2 - 190,170,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ format.format(player.getEntityAttribute(SharedMonsterAttributes.ARMOR_TOUGHNESS).getAttributeValue()),this.width / 2 - 190,180,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(PlayerStatHelper.MAX_HEALTH_MULTIPLIER * (playerInfo.getTotalFortitude())),this.width / 2 - 190,190,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ statsCap.getHealthPerSecond(),this.width / 2 - 190,200,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ ""String_Node_Str""+ (int)(PlayerStatHelper.MAX_MANA_MULTIPLIER * (playerInfo.getTotalWisdom())),this.width / 2 - 190,210,0xFFFFFF);
    this.drawString(this.fontRenderer,TextFormatting.GRAY + I18n.format(""String_Node_Str"") + ""String_Node_Str""+ TextFormatting.WHITE+ statsCap.getManaPerSecond(),this.width / 2 - 190,220,0xFFFFFF);
  }
}",0.9918285538082022
174641,"@Override public ActionResult<ItemStack> onItemRightClick(World world,EntityPlayer player,EnumHand hand){
  Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (statsCap != null && playerInfo != null) {
    statsCap.setMana(50);
    if (statsCap.getMana() - this.manaPerUse >= 0 && playerInfo.getPlayerLevel() >= NBTHelper.loadStackNBT(player.inventory.getCurrentItem()).getInteger(""String_Node_Str"")) {
      player.setActiveHand(hand);
      return new ActionResult<ItemStack>(EnumActionResult.SUCCESS,player.inventory.getCurrentItem());
    }
  }
  player.sendMessage(new TextComponentString(TextFormatting.RED + ""String_Node_Str""));
  return new ActionResult<ItemStack>(EnumActionResult.FAIL,player.inventory.getCurrentItem());
}","@Override public ActionResult<ItemStack> onItemRightClick(World world,EntityPlayer player,EnumHand hand){
  Stats statsCap=(Stats)player.getCapability(CapabilityPlayerStats.STATS,null);
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (statsCap != null && playerInfo != null) {
    if (statsCap.getMana() - this.manaPerUse >= 0 && playerInfo.getPlayerLevel() >= NBTHelper.loadStackNBT(player.inventory.getCurrentItem()).getInteger(""String_Node_Str"")) {
      player.setActiveHand(hand);
      return new ActionResult<ItemStack>(EnumActionResult.SUCCESS,player.inventory.getCurrentItem());
    }
  }
  player.sendMessage(new TextComponentString(TextFormatting.RED + ""String_Node_Str""));
  return new ActionResult<ItemStack>(EnumActionResult.FAIL,player.inventory.getCurrentItem());
}",0.9851598173515982
174642,"private void fireProjectile(World world,EntityPlayer player,ItemStack stack,NBTTagCompound nbt,Vec3d look){
  if (Rune.getRune(nbt) == Rune.FIREBALL) {
    EntityFireball fireball=new EntityFireball(world,look.x,look.y,look.z,1F,0F,player,stack,2);
    fireball.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
    world.spawnEntity(fireball);
  }
 else   if (Rune.getRune(nbt) == Rune.ICEBOLT) {
    EntityIcebolt icebolt=new EntityIcebolt(world,look.x,look.y,look.z,1F,0F,player,stack,2);
    icebolt.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
    world.spawnEntity(icebolt);
  }
 else   if (Rune.getRune(nbt) == Rune.LIGHTNING) {
    EntityLightning lightning=new EntityLightning(world,look.x,look.y,look.z,1F,0F,player,stack,2);
    lightning.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
    world.spawnEntity(lightning);
  }
 else   if (Rune.getRune(nbt) == Rune.FIRESTORM) {
    for (int i=0; i < 4; i++) {
      EntityFireball fireball=new EntityFireball(world,look.x,look.y,look.z,1F,15F,player,stack,2);
      fireball.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
      world.spawnEntity(fireball);
    }
  }
 else   if (Rune.getRune(nbt) == Rune.BLIZZARD) {
    for (int i=0; i < 4; i++) {
      EntityIcebolt icebolt=new EntityIcebolt(world,look.x,look.y,look.z,1F,0.3F,player,stack,2);
      icebolt.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
      world.spawnEntity(icebolt);
    }
  }
 else   if (Rune.getRune(nbt) == Rune.DISCHARGE) {
    for (int i=0; i < 4; i++) {
      EntityLightning lightning=new EntityLightning(world,look.x,look.y,look.z,1F,0F,player,stack,2);
      lightning.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
      world.spawnEntity(lightning);
    }
  }
}","private void fireProjectile(World world,EntityPlayer player,ItemStack stack,NBTTagCompound nbt,Vec3d look){
  if (Rune.getRune(nbt) == Rune.FIREBALL) {
    EntityFireball fireball=new EntityFireball(world,look.x,look.y,look.z,1F,0F,player,stack,2);
    fireball.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
    world.spawnEntity(fireball);
  }
 else   if (Rune.getRune(nbt) == Rune.ICEBOLT) {
    EntityIcebolt icebolt=new EntityIcebolt(world,look.x,look.y,look.z,1F,0F,player,stack,2);
    icebolt.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
    world.spawnEntity(icebolt);
  }
 else   if (Rune.getRune(nbt) == Rune.LIGHTNING) {
    EntityLightning lightning=new EntityLightning(world,look.x,look.y,look.z,1F,0F,player,stack,2);
    lightning.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
    world.spawnEntity(lightning);
  }
 else   if (Rune.getRune(nbt) == Rune.FIRESTORM) {
    for (int i=0; i < 4; i++) {
      EntityFireball fireball=new EntityFireball(world,look.x,look.y,look.z,1F,15F,player,stack,2);
      fireball.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
      world.spawnEntity(fireball);
    }
  }
 else   if (Rune.getRune(nbt) == Rune.BLIZZARD) {
    for (int i=0; i < 4; i++) {
      EntityIcebolt icebolt=new EntityIcebolt(world,look.x,look.y,look.z,1F,15F,player,stack,2);
      icebolt.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
      world.spawnEntity(icebolt);
    }
  }
 else   if (Rune.getRune(nbt) == Rune.DISCHARGE) {
    for (int i=0; i < 4; i++) {
      EntityLightning lightning=new EntityLightning(world,look.x,look.y,look.z,1F,15F,player,stack,2);
      lightning.setPosition(player.posX + look.x,player.posY + look.y + 1.5,player.posZ + look.z);
      world.spawnEntity(lightning);
    }
  }
}",0.9979166666666668
174643,"public static void setMinMaxDamage(NBTTagCompound nbt,double damage){
  double rangeMultiplier=(nbt.getInteger(""String_Node_Str"") + 1) * 0.25;
  int range=(int)((Math.random() * 4 + 2) * rangeMultiplier / 1.5);
  int minDamage=(int)(damage - range);
  int maxDamage=(int)(damage + range);
  if (minDamage == maxDamage)   minDamage-=1;
  if (WeaponAttribute.MIN_DAMAGE.hasAttribute(nbt))   minDamage+=WeaponAttribute.MIN_DAMAGE.getAmount(nbt);
 else   if (WeaponAttribute.MAX_DAMAGE.hasAttribute(nbt))   maxDamage+=WeaponAttribute.MAX_DAMAGE.getAmount(nbt);
  nbt.setInteger(""String_Node_Str"",minDamage);
  nbt.setInteger(""String_Node_Str"",maxDamage);
}","public static void setMinMaxDamage(NBTTagCompound nbt,double damage){
  double rangeMultiplier=(nbt.getInteger(""String_Node_Str"") + 1) * 0.25;
  int range=(int)((Math.random() * 4 + 2) * rangeMultiplier / 1.5);
  int minDamage=(int)(damage - range);
  int maxDamage=(int)(damage + range);
  if (minDamage == maxDamage)   minDamage-=1;
  while (minDamage > maxDamage)   maxDamage+=1;
  if (WeaponAttribute.MIN_DAMAGE.hasAttribute(nbt))   minDamage+=WeaponAttribute.MIN_DAMAGE.getAmount(nbt);
 else   if (WeaponAttribute.MAX_DAMAGE.hasAttribute(nbt))   maxDamage+=WeaponAttribute.MAX_DAMAGE.getAmount(nbt);
  nbt.setInteger(""String_Node_Str"",minDamage);
  nbt.setInteger(""String_Node_Str"",maxDamage);
}",0.9644970414201184
174644,"public static void registerEvents(){
  MinecraftForge.EVENT_BUS.register(new ModBlocks());
  MinecraftForge.EVENT_BUS.register(new ModItems());
  MinecraftForge.EVENT_BUS.register(new ModWeapons());
  MinecraftForge.EVENT_BUS.register(new EventPlayerLoggedIn());
  MinecraftForge.EVENT_BUS.register(new EventLivingDeath());
  MinecraftForge.EVENT_BUS.register(new EventInput());
  MinecraftForge.EVENT_BUS.register(new EventLivingHurtAttack());
  MinecraftForge.EVENT_BUS.register(new EventItemTooltip());
  MinecraftForge.EVENT_BUS.register(new EventLoadLootTable());
  MinecraftForge.EVENT_BUS.register(new EventPlayerTick());
  MinecraftForge.EVENT_BUS.register(new EventEntityJoinWorld());
  MinecraftForge.EVENT_BUS.register(new EventContainerOpen());
}","public static void registerEvents(){
  MinecraftForge.EVENT_BUS.register(new ModBlocks());
  MinecraftForge.EVENT_BUS.register(new ModItems());
  MinecraftForge.EVENT_BUS.register(new ModWeapons());
  MinecraftForge.EVENT_BUS.register(new EventPlayerLoggedIn());
  MinecraftForge.EVENT_BUS.register(new EventLivingDeath());
  MinecraftForge.EVENT_BUS.register(new EventLivingHurtAttack());
  MinecraftForge.EVENT_BUS.register(new EventLoadLootTable());
  MinecraftForge.EVENT_BUS.register(new EventPlayerTick());
  MinecraftForge.EVENT_BUS.register(new EventEntityJoinWorld());
  MinecraftForge.EVENT_BUS.register(new EventContainerOpen());
}",0.9171428571428571
174645,"@Override public void preInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new ModItemModels());
  MinecraftForge.EVENT_BUS.register(new GuiMana());
  MinecraftForge.EVENT_BUS.register(new GuiHealth());
  MinecraftForge.EVENT_BUS.register(new EventRenderOverlayText());
}","@Override public void preInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new ModItemModels());
  MinecraftForge.EVENT_BUS.register(new GuiMana());
  MinecraftForge.EVENT_BUS.register(new GuiHealth());
  MinecraftForge.EVENT_BUS.register(new EventRenderOverlayText());
  MinecraftForge.EVENT_BUS.register(new EventInput());
  MinecraftForge.EVENT_BUS.register(new EventItemTooltip());
}",0.8361581920903954
174646,"public void procedurallyGenerate(TemplateManager manager,World world,BlockPos startingPos,ArrayList<PotentialPosition> potentialPositions){
  LostEclipse.LOGGER.debug(""String_Node_Str"");
  LostEclipse.LOGGER.debug(""String_Node_Str"" + depth + ""String_Node_Str""+ roomCount);
  ArrayList<PotentialPosition> nextPositions=potentialPositions;
  if (depth > maxDepth)   return;
 else {
    if (roomCount == 0) {
      int y=-8 * depth;
      if (depth == 1)       y-=5;
      nextPositions=generateStaircase(manager,world,startingPos.add(0,y,0));
    }
 else {
      nextPositions=generateRooms(manager,world,potentialPositions,depth);
    }
  }
  roomCount++;
  if (roomCount == maxRoomsPerDepth) {
    depth++;
    roomCount=0;
    nextPositions=null;
  }
  procedurallyGenerate(manager,world,startingPos,nextPositions);
}","public void procedurallyGenerate(TemplateManager manager,World world,BlockPos startingPos,ArrayList<PotentialPosition> potentialPositions){
  LostEclipse.LOGGER.debug(""String_Node_Str"");
  LostEclipse.LOGGER.debug(""String_Node_Str"" + depth + ""String_Node_Str""+ roomCount);
  ArrayList<PotentialPosition> nextPositions=potentialPositions;
  if (depth > maxDepth)   return;
 else {
    if (roomCount == 0) {
      int y=-14;
      if (depth > 1)       y-=8 * depth;
      nextPositions=generateStaircase(manager,world,startingPos.add(0,y,0));
    }
 else {
      nextPositions=generateRooms(manager,world,potentialPositions,depth);
    }
  }
  roomCount++;
  if (roomCount == maxRoomsPerDepth) {
    depth++;
    roomCount=0;
    nextPositions=null;
  }
  procedurallyGenerate(manager,world,startingPos,nextPositions);
}",0.969437652811736
174647,"@SubscribeEvent public void playerClone(PlayerEvent.Clone event){
  IPlayerInformation oldInfo=getPlayerInformation(event.getOriginal());
  IPlayerInformation newInfo=getPlayerInformation(event.getEntityLiving());
  if (newInfo != null && oldInfo != null) {
    newInfo.setPlayerClass(oldInfo.getPlayerClass());
    newInfo.setPlayerLevel(oldInfo.getPlayerLevel());
    newInfo.setPlayerExperience(oldInfo.getPlayerExperience());
    newInfo.setSkillPoints(oldInfo.getSkillPoints());
    newInfo.setStrengthStat(oldInfo.getStrengthStat());
    newInfo.setAgilityStat(oldInfo.getAgilityStat());
    newInfo.setDexterityStat(oldInfo.getDexterityStat());
    newInfo.setIntelligenceStat(oldInfo.getIntelligenceStat());
    newInfo.setWisdomStat(oldInfo.getWisdomStat());
    newInfo.setFortitudeStat(oldInfo.getFortitudeStat());
    newInfo.setBonusStrengthStat(oldInfo.getBonusStrengthStat());
    newInfo.setBonusAgilityStat(oldInfo.getBonusAgilityStat());
    newInfo.setBonusDexterityStat(oldInfo.getBonusDexterityStat());
    newInfo.setBonusIntelligenceStat(oldInfo.getBonusIntelligenceStat());
    newInfo.setBonusWisdomStat(oldInfo.getBonusWisdomStat());
    newInfo.setBonusFortitudeStat(oldInfo.getBonusFortitudeStat());
  }
}","@SubscribeEvent public void playerClone(PlayerEvent.Clone event){
  IPlayerInformation oldInfo=getPlayerInformation(event.getOriginal());
  IPlayerInformation newInfo=getPlayerInformation(event.getEntityLiving());
  if (newInfo != null && oldInfo != null) {
    newInfo.setPlayerClass(oldInfo.getPlayerClass());
    newInfo.setPlayerLevel(oldInfo.getPlayerLevel());
    newInfo.setPlayerExperience(oldInfo.getPlayerExperience());
    newInfo.setSkillPoints(oldInfo.getSkillPoints());
    newInfo.setStrengthStat(oldInfo.getStrengthStat());
    newInfo.setAgilityStat(oldInfo.getAgilityStat());
    newInfo.setDexterityStat(oldInfo.getDexterityStat());
    newInfo.setIntelligenceStat(oldInfo.getIntelligenceStat());
    newInfo.setWisdomStat(oldInfo.getWisdomStat());
    newInfo.setFortitudeStat(oldInfo.getFortitudeStat());
    newInfo.setBonusStrengthStat(oldInfo.getBonusStrengthStat());
    newInfo.setBonusAgilityStat(oldInfo.getBonusAgilityStat());
    newInfo.setBonusDexterityStat(oldInfo.getBonusDexterityStat());
    newInfo.setBonusIntelligenceStat(oldInfo.getBonusIntelligenceStat());
    newInfo.setBonusWisdomStat(oldInfo.getBonusWisdomStat());
    newInfo.setBonusFortitudeStat(oldInfo.getBonusFortitudeStat());
    LostEclipse.LOGGER.info(""String_Node_Str"");
    LostEclipse.network.sendTo(new PacketUpdatePlayerInformation((PlayerInformation)newInfo),(EntityPlayerMP)event.getEntityLiving());
  }
}",0.9309173272933182
174648,"@SubscribeEvent public void onPlayerTick(PlayerTickEvent event){
  if (event.phase == Phase.START && !event.player.getEntityWorld().isRemote) {
    if (ticks % 20 == 0) {
      PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      if (playerInfo != null) {
        if (event.player.inventory.getCurrentItem() != mainhand && playerInfo.getPlayerLevel() >= NBTHelper.loadStackNBT(event.player.inventory.getCurrentItem()).getInteger(""String_Node_Str"")) {
          updateStats(event.player,playerInfo);
          mainhand=event.player.inventory.getCurrentItem();
        }
        for (        ItemStack stack : event.player.inventory.armorInventory) {
          if (stack.getItem() instanceof ItemArmor && playerInfo.getPlayerLevel() >= NBTHelper.loadStackNBT(stack).getInteger(""String_Node_Str"")) {
            if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.HEAD && stack != helmet) {
              updateStats(event.player,playerInfo);
              helmet=stack;
            }
 else             if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.CHEST && stack != chestplate) {
              updateStats(event.player,playerInfo);
              chestplate=stack;
            }
 else             if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.LEGS && stack != leggings) {
              updateStats(event.player,playerInfo);
              leggings=stack;
            }
 else             if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.FEET && stack != boots) {
              updateStats(event.player,playerInfo);
              boots=stack;
            }
          }
        }
      }
      ticks=0;
    }
    if (regenTicks % 100 == 0) {
      Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        if (statsCap.getMana() < statsCap.getMaxMana()) {
          statsCap.increaseMana(statsCap.getManaPerSecond());
        }
        if (event.player.getHealth() < event.player.getMaxHealth()) {
          event.player.heal(statsCap.getHealthPerSecond());
        }
        LostEclipse.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
      }
      regenTicks=0;
    }
    ticks++;
    regenTicks++;
  }
}","@SubscribeEvent public void onPlayerTick(PlayerTickEvent event){
  if (event.phase == Phase.START && !event.player.getEntityWorld().isRemote) {
    if (ticks % 10 == 0) {
      PlayerInformation playerInfo=(PlayerInformation)event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      if (playerInfo != null) {
        if (event.player.inventory.getCurrentItem() != mainhand && playerInfo.getPlayerLevel() >= NBTHelper.loadStackNBT(event.player.inventory.getCurrentItem()).getInteger(""String_Node_Str"")) {
          updateStats(event.player,playerInfo);
          mainhand=event.player.inventory.getCurrentItem();
        }
        for (        ItemStack stack : event.player.inventory.armorInventory) {
          if (stack.getItem() instanceof ItemArmor && playerInfo.getPlayerLevel() >= NBTHelper.loadStackNBT(stack).getInteger(""String_Node_Str"")) {
            if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.HEAD && stack != helmet) {
              updateStats(event.player,playerInfo);
              helmet=stack;
            }
 else             if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.CHEST && stack != chestplate) {
              updateStats(event.player,playerInfo);
              chestplate=stack;
            }
 else             if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.LEGS && stack != leggings) {
              updateStats(event.player,playerInfo);
              leggings=stack;
            }
 else             if (((ItemArmor)stack.getItem()).getEquipmentSlot() == EntityEquipmentSlot.FEET && stack != boots) {
              updateStats(event.player,playerInfo);
              boots=stack;
            }
          }
        }
      }
      ticks=0;
    }
    if (regenTicks % 100 == 0) {
      Stats statsCap=(Stats)event.player.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        if (statsCap.getMana() < statsCap.getMaxMana()) {
          statsCap.increaseMana(statsCap.getManaPerSecond());
        }
        if (event.player.getHealth() < event.player.getMaxHealth()) {
          event.player.heal(statsCap.getHealthPerSecond());
        }
        LostEclipse.network.sendTo(new PacketUpdateStats(statsCap),(EntityPlayerMP)event.player);
      }
      regenTicks=0;
    }
    ticks++;
    regenTicks++;
  }
}",0.9995801847187238
174649,"@Override public IMessage onMessage(final PacketUpdatePlayerInformation message,final MessageContext ctx){
  IThreadListener mainThread=Minecraft.getMinecraft();
  mainThread.addScheduledTask(new Runnable(){
    @Override public void run(){
      EntityPlayer player=Minecraft.getMinecraft().player;
      PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      if (playerInfo != null) {
        playerInfo.setPlayerClass(message.playerClass);
        playerInfo.setPlayerLevel(message.level);
        playerInfo.setPlayerExperience(message.experience);
        playerInfo.setSkillPoints(message.skillPoints);
      }
    }
  }
);
  return null;
}","@Override public IMessage onMessage(final PacketUpdatePlayerInformation message,final MessageContext ctx){
  IThreadListener mainThread=Minecraft.getMinecraft();
  mainThread.addScheduledTask(new Runnable(){
    @Override public void run(){
      EntityPlayer player=Minecraft.getMinecraft().player;
      PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      if (playerInfo != null) {
        LostEclipse.LOGGER.info(""String_Node_Str"" + message.playerClass);
        playerInfo.setPlayerClass(message.playerClass);
        LostEclipse.LOGGER.info(playerInfo.getPlayerClass());
        playerInfo.setPlayerLevel(message.level);
        playerInfo.setPlayerExperience(message.experience);
        playerInfo.setSkillPoints(message.skillPoints);
      }
    }
  }
);
  return null;
}",0.881979695431472
174650,"@Override public void run(){
  EntityPlayer player=Minecraft.getMinecraft().player;
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (playerInfo != null) {
    playerInfo.setPlayerClass(message.playerClass);
    playerInfo.setPlayerLevel(message.level);
    playerInfo.setPlayerExperience(message.experience);
    playerInfo.setSkillPoints(message.skillPoints);
  }
}","@Override public void run(){
  EntityPlayer player=Minecraft.getMinecraft().player;
  PlayerInformation playerInfo=(PlayerInformation)player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (playerInfo != null) {
    LostEclipse.LOGGER.info(""String_Node_Str"" + message.playerClass);
    playerInfo.setPlayerClass(message.playerClass);
    LostEclipse.LOGGER.info(playerInfo.getPlayerClass());
    playerInfo.setPlayerLevel(message.level);
    playerInfo.setPlayerExperience(message.experience);
    playerInfo.setSkillPoints(message.skillPoints);
  }
}",0.826171875
174651,"public static ICapabilityProvider createProvider(IStats mana){
  return new SimpleCapabilityProvider<>(STATS,DEFAULT_FACING,mana);
}","public static ICapabilityProvider createProvider(IStats stats){
  return new SimpleCapabilityProvider<>(STATS,DEFAULT_FACING,stats);
}",0.9473684210526316
174652,"@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase) {
      result.entityHit.setFire(seconds);
    }
  }
}","@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase) {
      result.entityHit.setFire(seconds);
    }
    this.setDead();
  }
}",0.9626865671641792
174653,"@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase) {
      ((EntityLivingBase)result.entityHit).addPotionEffect(new PotionEffect(MobEffects.SLOWNESS,20 * seconds,1));
    }
  }
}","@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityLivingBase) {
      ((EntityLivingBase)result.entityHit).addPotionEffect(new PotionEffect(MobEffects.SLOWNESS,20 * seconds,1));
    }
    this.setDead();
  }
}",0.9706744868035192
174654,"@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityPlayer) {
      IStats statsCap=result.entityHit.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        statsCap.setMana(statsCap.getMana() - amount);
        if (statsCap.getMana() < 0)         statsCap.setMana(0);
      }
    }
  }
}","@Override public void onImpact(RayTraceResult result){
  super.onImpact(result);
  if (!this.getEntityWorld().isRemote) {
    if (result.entityHit != null && result.entityHit instanceof EntityPlayer) {
      IStats statsCap=result.entityHit.getCapability(CapabilityPlayerStats.STATS,null);
      if (statsCap != null) {
        statsCap.setMana(statsCap.getMana() - amount);
        if (statsCap.getMana() < 0)         statsCap.setMana(0);
      }
    }
    this.setDead();
  }
}",0.9786780383795308
174655,"@Override protected float getGravityVelocity(){
  return 0;
}","@Override protected float getGravityVelocity(){
  return 0F;
}",0.991869918699187
174656,"@Override public void onUpdate(){
  super.onUpdate();
  if (this.getEntityWorld().isRemote) {
    if (!this.inGround && !this.isDead) {
      this.getEntityWorld().spawnParticle(EnumParticleTypes.SPELL_INSTANT,this.posX,this.posY,this.posZ,0F,0F,0F,new int[0]);
    }
    if (this.inGround) {
      this.setDead();
    }
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (this.getEntityWorld().isRemote) {
    if (!this.inGround && !this.isDead) {
      this.getEntityWorld().spawnParticle(EnumParticleTypes.SPELL_INSTANT,this.posX,this.posY,this.posZ,0F,0F,0F,new int[0]);
    }
  }
}",0.9115191986644408
174657,"@Override public void preInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new ModItemModels());
  MinecraftForge.EVENT_BUS.register(new GuiMana());
}","@Override public void preInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new ModItemModels());
  MinecraftForge.EVENT_BUS.register(new GuiMana());
  MinecraftForge.EVENT_BUS.register(new GuiHealth());
}",0.8663366336633663
174658,"@Override public Object getClientGuiElement(int id,EntityPlayer player,World world,int x,int y,int z){
  if (id == CLASS_SELECTION)   return new GuiClassSelection();
  if (id == PLAYER_INFORMATION)   return new GuiPlayerInformation();
  if (id == MANA)   return new GuiMana();
  return null;
}","@Override public Object getClientGuiElement(int id,EntityPlayer player,World world,int x,int y,int z){
  if (id == CLASS_SELECTION)   return new GuiClassSelection();
  if (id == PLAYER_INFORMATION)   return new GuiPlayerInformation();
  if (id == MANA)   return new GuiMana();
  if (id == HEALTH)   return new GuiHealth();
  return null;
}",0.9272151898734176
174659,"public ItemLEMagical(String name,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super();
  this.setRegistryName(Reference.MODID,name);
  this.setUnlocalizedName(name);
  this.setMaxStackSize(1);
  this.setNoRepair();
  this.setMaxDamage(durability);
  this.baseDamage=baseDamage;
  this.baseAttackSpeed=attackSpeed;
  this.manaPerUse=manaPerUse;
}","public ItemLEMagical(String name,boolean isStaff,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super();
  this.setRegistryName(Reference.MODID,name);
  this.setUnlocalizedName(name);
  this.setMaxStackSize(1);
  this.setNoRepair();
  this.setMaxDamage(durability);
  this.isStaff=isStaff;
  this.baseDamage=baseDamage;
  this.baseAttackSpeed=attackSpeed;
  this.manaPerUse=manaPerUse;
}",0.9232736572890026
174660,"public ItemBlazefury(String name,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,baseDamage,attackSpeed,manaPerUse,durability);
}","public ItemBlazefury(String name,boolean isStaff,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,isStaff,baseDamage,attackSpeed,manaPerUse,durability);
}",0.9314285714285714
174661,"public ItemEpilogue(String name,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,baseDamage,attackSpeed,manaPerUse,durability);
}","public ItemEpilogue(String name,boolean isStaff,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,isStaff,baseDamage,attackSpeed,manaPerUse,durability);
}",0.9310344827586208
174662,"public ItemGazeOfTruth(String name,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,baseDamage,attackSpeed,manaPerUse,durability);
}","public ItemGazeOfTruth(String name,boolean isStaff,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,isStaff,baseDamage,attackSpeed,manaPerUse,durability);
}",0.9322033898305084
174663,"public ItemMoonlitRod(String name,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,baseDamage,attackSpeed,manaPerUse,durability);
}","public ItemMoonlitRod(String name,boolean isStaff,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,isStaff,baseDamage,attackSpeed,manaPerUse,durability);
}",0.9318181818181818
174664,"public ItemVisageOfWizardry(String name,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,baseDamage,attackSpeed,manaPerUse,durability);
}","public ItemVisageOfWizardry(String name,boolean isStaff,double baseDamage,double attackSpeed,int manaPerUse,int durability){
  super(name,isStaff,baseDamage,attackSpeed,manaPerUse,durability);
}",0.934065934065934
174665,"@Override public Multimap<String,AttributeModifier> getAttributeModifiers(EntityEquipmentSlot slot,ItemStack stack){
  final Multimap<String,AttributeModifier> modifiers=super.getAttributeModifiers(slot,stack);
  if (slot == EntityEquipmentSlot.MAINHAND) {
    replaceModifier(modifiers,SharedMonsterAttributes.ATTACK_DAMAGE,ATTACK_DAMAGE_MODIFIER,damageMultiplier);
    replaceModifier(modifiers,SharedMonsterAttributes.ATTACK_SPEED,ATTACK_SPEED_MODIFIER,speedMultiplier);
  }
  if (speedMultiplier < 1)   NBTHelper.loadStackNBT(stack).setString(""String_Node_Str"",""String_Node_Str"");
 else   NBTHelper.loadStackNBT(stack).setString(""String_Node_Str"",""String_Node_Str"");
  return modifiers;
}","@Override public Multimap<String,AttributeModifier> getAttributeModifiers(EntityEquipmentSlot slot,ItemStack stack){
  final Multimap<String,AttributeModifier> modifiers=super.getAttributeModifiers(slot,stack);
  if (slot == EntityEquipmentSlot.MAINHAND) {
    replaceModifier(modifiers,SharedMonsterAttributes.ATTACK_DAMAGE,ATTACK_DAMAGE_MODIFIER,damageMultiplier);
    replaceModifier(modifiers,SharedMonsterAttributes.ATTACK_SPEED,ATTACK_SPEED_MODIFIER,speedMultiplier);
  }
  return modifiers;
}",0.8110831234256927
174666,"public ItemLEAdvancedMelee(ToolMaterial material,String name,double damageMultiplier,double speedMultiplier){
  super(material,name);
  this.damageMultiplier=damageMultiplier;
  this.speedMultiplier=speedMultiplier;
}","public ItemLEAdvancedMelee(ToolMaterial material,String name,String type,double damageMultiplier,double speedMultiplier){
  super(material,name,type);
  this.damageMultiplier=damageMultiplier;
  this.speedMultiplier=speedMultiplier;
}",0.9623059866962306
174667,"public ItemLEMelee(ToolMaterial material,String name,CreativeTabs tab){
  super(material);
  this.setRegistryName(Reference.MODID,name);
  this.setUnlocalizedName(name);
  this.setCreativeTab(tab);
}","public ItemLEMelee(ToolMaterial material,String name,String type,CreativeTabs tab){
  super(material);
  this.setRegistryName(Reference.MODID,name);
  this.setUnlocalizedName(name);
  this.setCreativeTab(tab);
  this.type=type;
}",0.9299065420560748
174668,"public ItemAlakaslam(ToolMaterial material,String name,double damageMultiplier,double speedMultiplier){
  super(material,name,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}","public ItemAlakaslam(ToolMaterial material,String name,String type,double damageMultiplier,double speedMultiplier){
  super(material,name,type,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}",0.9592326139088728
174669,"public ItemAnnihilation(ToolMaterial material,String name,double damageMultiplier,double speedMultiplier){
  super(material,name,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}","public ItemAnnihilation(ToolMaterial material,String name,String type,double damageMultiplier,double speedMultiplier){
  super(material,name,type,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}",0.9598108747044918
174670,"public ItemDivineRapier(ToolMaterial material,String name){
  super(material,name);
  this.setCreativeTab(ModTabs.tabLE);
}","public ItemDivineRapier(ToolMaterial material,String name,String type){
  super(material,name,type);
  this.setCreativeTab(ModTabs.tabLE);
}",0.935361216730038
174671,"public ItemDoomshadow(ToolMaterial material,String name,double damageMultiplier,double speedMultiplier){
  super(material,name,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}","public ItemDoomshadow(ToolMaterial material,String name,String type,double damageMultiplier,double speedMultiplier){
  super(material,name,type,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}",0.9594272076372315
174672,"public ItemExcaliburRapier(ToolMaterial material,String name){
  super(material,name);
  this.setCreativeTab(ModTabs.tabLE);
}","public ItemExcaliburRapier(ToolMaterial material,String name,String type){
  super(material,name,type);
  this.setCreativeTab(ModTabs.tabLE);
}",0.9368029739776952
174673,"public ItemGoldenPummel(ToolMaterial material,String name,double damageMultiplier,double speedMultiplier){
  super(material,name,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}","public ItemGoldenPummel(ToolMaterial material,String name,String type,double damageMultiplier,double speedMultiplier){
  super(material,name,type,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}",0.9598108747044918
174674,"public ItemRequiem(ToolMaterial material,String name){
  super(material,name);
  this.setCreativeTab(ModTabs.tabLE);
}","public ItemRequiem(ToolMaterial material,String name,String type){
  super(material,name,type);
  this.setCreativeTab(ModTabs.tabLE);
}",0.932806324110672
174675,"public ItemShadowfall(ToolMaterial material,String name,double damageMultiplier,double speedMultiplier){
  super(material,name,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}","public ItemShadowfall(ToolMaterial material,String name,String type,double damageMultiplier,double speedMultiplier){
  super(material,name,type,damageMultiplier,speedMultiplier);
  this.setCreativeTab(ModTabs.tabLE);
}",0.9594272076372315
174676,"public static void generateName(ItemStack stack,NBTTagCompound nbt){
  if (Rarity.getRarity(nbt) == Rarity.COMMON)   return;
  String prefix=NameHelper.getRandomPrefix();
  String suffix=""String_Node_Str"";
  if (stack.getItem() instanceof ItemSword && !nbt.hasKey(""String_Node_Str""))   suffix=NameHelper.getSwordSuffix();
 else   if (stack.getItem() instanceof ItemSword && nbt.hasKey(""String_Node_Str"") && nbt.getString(""String_Node_Str"").equals(""String_Node_Str""))   suffix=NameHelper.getDaggerSuffix();
 else   if (stack.getItem() instanceof ItemSword && nbt.hasKey(""String_Node_Str"") && nbt.getString(""String_Node_Str"").equals(""String_Node_Str""))   suffix=NameHelper.getMaceSuffix();
 else   if (stack.getItem() instanceof ItemLEMagical)   suffix=NameHelper.getWandSuffix();
 else   if (stack.getItem() instanceof ItemArmor && ((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.HEAD)   suffix=NameHelper.getHelmetSuffix();
 else   if (stack.getItem() instanceof ItemArmor && ((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.CHEST)   suffix=NameHelper.getChestplateSuffix();
 else   if (stack.getItem() instanceof ItemArmor && ((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.LEGS)   suffix=NameHelper.getLeggingsSuffix();
 else   if (stack.getItem() instanceof ItemArmor && ((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.FEET)   suffix=NameHelper.getBootSuffix();
  stack.setStackDisplayName(Rarity.getRarity(nbt).getColor() + prefix + ""String_Node_Str""+ suffix);
}","public static void generateName(ItemStack stack,NBTTagCompound nbt){
  if (Rarity.getRarity(nbt) == Rarity.COMMON)   return;
  String prefix=NameHelper.getRandomPrefix();
  String suffix=""String_Node_Str"";
  if (stack.getItem() instanceof ItemLEMelee && ((ItemLEMelee)stack.getItem()).getType().equals(""String_Node_Str""))   suffix=NameHelper.getDaggerSuffix();
 else   if (stack.getItem() instanceof ItemLEMelee && ((ItemLEMelee)stack.getItem()).getType().equals(""String_Node_Str""))   suffix=NameHelper.getMaceSuffix();
 else   if (stack.getItem() instanceof ItemSword)   suffix=NameHelper.getSwordSuffix();
 else   if (stack.getItem() instanceof ItemLEMagical && !((ItemLEMagical)stack.getItem()).isStaff())   suffix=NameHelper.getWandSuffix();
 else   if (stack.getItem() instanceof ItemLEMagical && ((ItemLEMagical)stack.getItem()).isStaff())   suffix=NameHelper.getStaffSuffix();
 else   if (stack.getItem() instanceof ItemArmor && ((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.HEAD)   suffix=NameHelper.getHelmetSuffix();
 else   if (stack.getItem() instanceof ItemArmor && ((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.CHEST)   suffix=NameHelper.getChestplateSuffix();
 else   if (stack.getItem() instanceof ItemArmor && ((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.LEGS)   suffix=NameHelper.getLeggingsSuffix();
 else   if (stack.getItem() instanceof ItemArmor && ((ItemArmor)stack.getItem()).armorType == EntityEquipmentSlot.FEET)   suffix=NameHelper.getBootSuffix();
 else   if (stack.getItem() instanceof ItemLEBauble && ((IBauble)stack.getItem()).getBaubleType(stack) == BaubleType.AMULET)   suffix=NameHelper.getAmuletSuffix();
 else   if (stack.getItem() instanceof ItemLEBauble && ((IBauble)stack.getItem()).getBaubleType(stack) == BaubleType.RING)   suffix=NameHelper.getRingSuffix();
 else   if (stack.getItem() instanceof ItemLEBauble && ((IBauble)stack.getItem()).getBaubleType(stack) == BaubleType.BELT)   suffix=NameHelper.getBeltSuffix();
  stack.setStackDisplayName(Rarity.getRarity(nbt).getColor() + prefix + ""String_Node_Str""+ suffix);
}",0.592123381988433
174677,"@Override protected void actionPerformed(GuiButton button) throws IOException {
  EntityPlayer player=mc.player;
  IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (player != null && playerInfo != null && playerInfo.getSkillPoints() > 0) {
    if (button == plusStrength) {
      playerInfo.setStrengthStat(playerInfo.getStrengthStat() + 1);
      AttributeModifier strengthModifier=new AttributeModifier(UUID.fromString(PacketUpdateIncreaseStat.STRENGTH),""String_Node_Str"",2 + (playerInfo.getStrengthStat() + playerInfo.getBonusStrengthStat()),1);
      if (player.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getModifier(UUID.fromString(PacketUpdateIncreaseStat.STRENGTH)) != null) {
        player.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).removeModifier(UUID.fromString(PacketUpdateIncreaseStat.STRENGTH));
        player.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).applyModifier(strengthModifier);
      }
 else       player.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).applyModifier(strengthModifier);
      LostEclipse.LOGGER.info(""String_Node_Str"" + player.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue());
      LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(1));
    }
 else     if (button == plusAgility)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(2));
 else     if (button == plusDexterity)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(3));
 else     if (button == plusIntelligence)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(4));
 else     if (button == plusWisdom)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(5));
 else     if (button == plusFortitude)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(6));
    playerInfo.setSkillPoints(playerInfo.getSkillPoints() - 1);
  }
}","@Override protected void actionPerformed(GuiButton button) throws IOException {
  EntityPlayer player=mc.player;
  IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (player != null && playerInfo != null && playerInfo.getSkillPoints() > 0) {
    if (button == plusStrength) {
      playerInfo.setStrengthStat(playerInfo.getStrengthStat() + 1);
      LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(1));
    }
 else     if (button == plusAgility) {
      playerInfo.setAgilityStat(playerInfo.getAgilityStat() + 1);
      LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(2));
    }
 else     if (button == plusDexterity) {
      playerInfo.setDexterityStat(playerInfo.getDexterityStat() + 1);
      LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(3));
    }
 else     if (button == plusIntelligence) {
      playerInfo.setIntelligenceStat(playerInfo.getIntelligenceStat() + 1);
      LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(4));
    }
 else     if (button == plusWisdom) {
      playerInfo.setWisdomStat(playerInfo.getWisdomStat() + 1);
      LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(5));
    }
 else     if (button == plusFortitude) {
      playerInfo.setFortitudeStat(playerInfo.getFortitudeStat() + 1);
      LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(6));
    }
    playerInfo.setSkillPoints(playerInfo.getSkillPoints() - 1);
    PlayerStatHelper.updateAttributes(player);
  }
}",0.628
174678,"@SubscribeEvent public void onLivingDeath(LivingDeathEvent event){
  if (event.getSource().getTrueSource() instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)event.getSource().getTrueSource();
    EntityLivingBase enemy=event.getEntityLiving();
    IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
    if (playerInfo != null) {
      int experience=0;
      if (enemy instanceof EntityPlayer)       experience=50;
 else       experience=(int)(enemy.getMaxHealth() * 0.2);
      playerInfo.setPlayerExperience(playerInfo.getPlayerExperience() + experience + 1000);
      if (playerInfo.getPlayerExperience() > playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())) {
        playerInfo.setPlayerLevel(playerInfo.getPlayerLevel() + 1);
        playerInfo.setSkillPoints(playerInfo.getSkillPoints() + 1);
      }
      LostEclipse.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)player);
    }
  }
}","@SubscribeEvent public void onLivingDeath(LivingDeathEvent event){
  if (event.getSource().getTrueSource() instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)event.getSource().getTrueSource();
    EntityLivingBase enemy=event.getEntityLiving();
    IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
    if (playerInfo != null) {
      int experience=0;
      if (enemy instanceof EntityPlayer)       experience=50;
 else       experience=(int)(enemy.getMaxHealth() * 0.2);
      playerInfo.setPlayerExperience(playerInfo.getPlayerExperience() + experience + 1000);
      while (playerInfo.getPlayerExperience() > playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())) {
        playerInfo.setPlayerLevel(playerInfo.getPlayerLevel() + 1);
        playerInfo.setSkillPoints(playerInfo.getSkillPoints() + 1);
      }
      LostEclipse.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)player);
    }
  }
}",0.9965122072745392
174679,"@SubscribeEvent(priority=EventPriority.HIGHEST) public void onItemTooltip(ItemTooltipEvent event){
  ArrayList<String> tooltip=(ArrayList<String>)event.getToolTip();
  ItemStack stack=event.getItemStack();
  NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
  if (stack.getItem() instanceof ItemSword || stack.getItem() instanceof ItemArmor) {
    Rarity rarity=Rarity.getRarity(nbt);
    if (rarity != Rarity.DEFAULT) {
      tooltip.add(""String_Node_Str"");
      NBTTagList taglist=nbt.getTagList(""String_Node_Str"",10);
      NBTTagCompound damageNbt=taglist.getCompoundTagAt(0);
      NBTTagCompound speedNbt=taglist.getCompoundTagAt(1);
      DecimalFormat format=new DecimalFormat(""String_Node_Str"");
      tooltip.add(1,""String_Node_Str"" + nbt.getInteger(""String_Node_Str""));
      if (stack.getItem() instanceof ItemSword) {
        double playerDamage=event.getEntityPlayer().getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue();
        LostEclipse.LOGGER.info(playerDamage);
        tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + (nbt.getInteger(""String_Node_Str"") + (int)playerDamage)+ ""String_Node_Str""+ (nbt.getInteger(""String_Node_Str"") + (int)playerDamage)+ ""String_Node_Str"");
        tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(speedNbt.getDouble(""String_Node_Str""))+ ""String_Node_Str"");
      }
 else       if (stack.getItem() instanceof ItemArmor) {
        tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(damageNbt.getDouble(""String_Node_Str""))+ ""String_Node_Str"");
        tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(speedNbt.getDouble(""String_Node_Str""))+ ""String_Node_Str"");
      }
      tooltip.add(""String_Node_Str"");
      tooltip.add(""String_Node_Str"" + (stack.getMaxDamage() - stack.getItemDamage()) + ""String_Node_Str""+ stack.getMaxDamage());
      tooltip.add(""String_Node_Str"");
      tooltip.add(TextFormatting.ITALIC + ""String_Node_Str"");
      if (stack.getItem() instanceof ItemSword) {
        for (        WeaponAttribute attribute : WeaponAttribute.values()) {
          if (attribute.hasAttribute(nbt) && attribute.getAmount(nbt) < 1)           tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + String.format(""String_Node_Str"",attribute.getAmount(nbt) * 100)+ ""String_Node_Str""+ attribute.getName());
 else           if (attribute.hasAttribute(nbt) && attribute.getAmount(nbt) >= 1)           tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(attribute.getAmount(nbt))+ ""String_Node_Str""+ attribute.getName());
        }
      }
 else       if (stack.getItem() instanceof ItemArmor) {
        for (        ArmorAttribute attribute : ArmorAttribute.values()) {
          if (attribute.hasAttribute(nbt) && attribute.getAmount(nbt) < 1)           tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + String.format(""String_Node_Str"",attribute.getAmount(nbt) * 100)+ ""String_Node_Str""+ attribute.getName());
 else           if (attribute.hasAttribute(nbt) && attribute.getAmount(nbt) >= 1)           tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(attribute.getAmount(nbt))+ ""String_Node_Str""+ attribute.getName());
        }
      }
    }
  }
}","@SubscribeEvent(priority=EventPriority.HIGHEST) public void onItemTooltip(ItemTooltipEvent event){
  ArrayList<String> tooltip=(ArrayList<String>)event.getToolTip();
  ItemStack stack=event.getItemStack();
  NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
  if (event.getEntityPlayer() != null) {
    IPlayerInformation info=event.getEntityPlayer().getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
    if (info != null && (stack.getItem() instanceof ItemSword || stack.getItem() instanceof ItemArmor)) {
      Rarity rarity=Rarity.getRarity(nbt);
      if (rarity != Rarity.DEFAULT) {
        tooltip.add(""String_Node_Str"");
        NBTTagList taglist=nbt.getTagList(""String_Node_Str"",10);
        NBTTagCompound damageNbt=taglist.getCompoundTagAt(0);
        NBTTagCompound speedNbt=taglist.getCompoundTagAt(1);
        DecimalFormat format=new DecimalFormat(""String_Node_Str"");
        tooltip.add(1,""String_Node_Str"" + nbt.getInteger(""String_Node_Str""));
        if (stack.getItem() instanceof ItemSword) {
          double playerDamage=event.getEntityPlayer().getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue();
          double attackSpeed=speedNbt.getDouble(""String_Node_Str"") + 4 + (PlayerStatHelper.ATTACK_SPEED_MULTIPLIER * (double)(info.getAgilityStat() + info.getBonusAgilityStat()));
          tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + (nbt.getInteger(""String_Node_Str"") + (int)playerDamage)+ ""String_Node_Str""+ (nbt.getInteger(""String_Node_Str"") + (int)playerDamage)+ ""String_Node_Str"");
          tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(attackSpeed)+ ""String_Node_Str"");
        }
 else         if (stack.getItem() instanceof ItemArmor) {
          tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(damageNbt.getDouble(""String_Node_Str""))+ ""String_Node_Str"");
          tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(speedNbt.getDouble(""String_Node_Str""))+ ""String_Node_Str"");
        }
        tooltip.add(""String_Node_Str"");
        tooltip.add(""String_Node_Str"" + (stack.getMaxDamage() - stack.getItemDamage()) + ""String_Node_Str""+ stack.getMaxDamage());
        tooltip.add(""String_Node_Str"");
        tooltip.add(TextFormatting.ITALIC + ""String_Node_Str"");
        if (stack.getItem() instanceof ItemSword) {
          for (          WeaponAttribute attribute : WeaponAttribute.values()) {
            if (attribute.hasAttribute(nbt) && attribute.getAmount(nbt) < 1)             tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + String.format(""String_Node_Str"",attribute.getAmount(nbt) * 100)+ ""String_Node_Str""+ attribute.getName());
 else             if (attribute.hasAttribute(nbt) && attribute.getAmount(nbt) >= 1)             tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(attribute.getAmount(nbt))+ ""String_Node_Str""+ attribute.getName());
          }
        }
 else         if (stack.getItem() instanceof ItemArmor) {
          for (          ArmorAttribute attribute : ArmorAttribute.values()) {
            if (attribute.hasAttribute(nbt) && attribute.getAmount(nbt) < 1)             tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + String.format(""String_Node_Str"",attribute.getAmount(nbt) * 100)+ ""String_Node_Str""+ attribute.getName());
 else             if (attribute.hasAttribute(nbt) && attribute.getAmount(nbt) >= 1)             tooltip.add(TextFormatting.BLUE + ""String_Node_Str"" + format.format(attribute.getAmount(nbt))+ ""String_Node_Str""+ attribute.getName());
          }
        }
      }
    }
  }
}",0.9082380533567868
174680,"@SubscribeEvent public void onLivingDeath(LivingDeathEvent event){
  if (event.getSource().getTrueSource() instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)event.getSource().getTrueSource();
    EntityLivingBase enemy=event.getEntityLiving();
    IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
    if (playerInfo != null) {
      int experience=0;
      if (enemy instanceof EntityPlayer)       experience=50;
 else       experience=(int)(enemy.getMaxHealth() * 0.2);
      playerInfo.setPlayerExperience(playerInfo.getPlayerExperience() + experience);
      if (playerInfo.getPlayerExperience() > playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())) {
        playerInfo.setPlayerLevel(playerInfo.getPlayerLevel() + 1);
        playerInfo.setSkillPoints(playerInfo.getSkillPoints() + 1);
      }
      LostEclipse.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)player);
      LostEclipse.LOGGER.info(""String_Node_Str"" + event.getSource().damageType);
    }
  }
}","@SubscribeEvent public void onLivingDeath(LivingDeathEvent event){
  if (event.getSource().getTrueSource() instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)event.getSource().getTrueSource();
    EntityLivingBase enemy=event.getEntityLiving();
    IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
    if (playerInfo != null) {
      int experience=0;
      if (enemy instanceof EntityPlayer)       experience=50;
 else       experience=(int)(enemy.getMaxHealth() * 0.2);
      playerInfo.setPlayerExperience(playerInfo.getPlayerExperience() + experience);
      if (playerInfo.getPlayerExperience() > playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())) {
        playerInfo.setPlayerLevel(playerInfo.getPlayerLevel() + 1);
        playerInfo.setSkillPoints(playerInfo.getSkillPoints() + 1);
      }
      LostEclipse.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)player);
    }
  }
}",0.9608884596813134
174681,"@SubscribeEvent(priority=EventPriority.HIGHEST) public void onLivingHurt(LivingHurtEvent event){
  if (event.getSource().getTrueSource() instanceof EntityPlayer && !event.getSource().getTrueSource().getEntityWorld().isRemote) {
    EntityPlayer player=(EntityPlayer)event.getSource().getTrueSource();
    ItemStack stack=player.inventory.getCurrentItem();
    if (stack != null && stack.getItem() instanceof ItemSword && !(stack.getItem() instanceof ItemMHSAdvancedMelee)) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      double trueDamage=Math.random() * (nbt.getInteger(""String_Node_Str"") - nbt.getInteger(""String_Node_Str"")) + nbt.getInteger(""String_Node_Str"");
      event.setAmount((float)trueDamage);
    }
  }
  if (event.getEntityLiving() instanceof EntityPlayer && (event.getSource().getTrueSource() instanceof EntityLivingBase || event.getSource() == ModDamageSources.FROST || event.getSource() == ModDamageSources.LIGHTNING || event.getSource() == ModDamageSources.POISON)) {
    EntityPlayer player=(EntityPlayer)event.getEntityLiving();
    for (    ItemStack stack : player.inventory.armorInventory) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      if (event.getSource().getTrueSource() instanceof EntityLivingBase) {
      }
 else {
        if (ArmorAttribute.FROST_RESIST.hasAttribute(nbt) && event.getSource() == ModDamageSources.FROST)         event.setAmount((float)(event.getAmount() * ArmorAttribute.FROST_RESIST.getAmount(nbt)));
        if (ArmorAttribute.LIGHTNING_RESIST.hasAttribute(nbt) && event.getSource() == ModDamageSources.LIGHTNING)         event.setAmount((float)(event.getAmount() * ArmorAttribute.LIGHTNING_RESIST.getAmount(nbt)));
        if (ArmorAttribute.POISON_RESIST.hasAttribute(nbt) && event.getSource() == ModDamageSources.POISON)         event.setAmount((float)(event.getAmount() * ArmorAttribute.POISON_RESIST.getAmount(nbt)));
      }
      if (ArmorAttribute.DURABLE.hasAttribute(nbt) && Math.random() < ArmorAttribute.DURABLE.getAmount(nbt))       stack.setItemDamage(stack.getItemDamage() + 1);
    }
  }
}","@SubscribeEvent(priority=EventPriority.HIGHEST) public void onLivingHurt(LivingHurtEvent event){
  if (event.getSource().getTrueSource() instanceof EntityPlayer && !event.getSource().getTrueSource().getEntityWorld().isRemote) {
    EntityPlayer player=(EntityPlayer)event.getSource().getTrueSource();
    ItemStack stack=player.inventory.getCurrentItem();
    if (stack != null && stack.getItem() instanceof ItemSword && !(stack.getItem() instanceof ItemMHSAdvancedMelee)) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      double trueDamage=Math.random() * (nbt.getInteger(""String_Node_Str"") - nbt.getInteger(""String_Node_Str"")) + nbt.getInteger(""String_Node_Str"");
      event.setAmount((float)trueDamage);
    }
  }
  if (event.getEntityLiving() instanceof EntityPlayer && (event.getSource().getTrueSource() instanceof EntityLivingBase || event.getSource() == ModDamageSources.FROST || event.getSource() == ModDamageSources.LIGHTNING || event.getSource() == ModDamageSources.POISON)) {
    EntityPlayer player=(EntityPlayer)event.getEntityLiving();
    for (    ItemStack stack : player.inventory.armorInventory) {
      NBTTagCompound nbt=NBTHelper.loadStackNBT(stack);
      if (event.getSource().getTrueSource() instanceof EntityLivingBase) {
      }
 else {
        if (ArmorAttribute.FROST_RESIST.hasAttribute(nbt) && event.getSource() == ModDamageSources.FROST)         event.setAmount((float)(event.getAmount() - (event.getAmount() * ArmorAttribute.FROST_RESIST.getAmount(nbt))));
        if (ArmorAttribute.LIGHTNING_RESIST.hasAttribute(nbt) && event.getSource() == ModDamageSources.LIGHTNING)         event.setAmount((float)(event.getAmount() - (event.getAmount() * ArmorAttribute.LIGHTNING_RESIST.getAmount(nbt))));
        if (ArmorAttribute.POISON_RESIST.hasAttribute(nbt) && event.getSource() == ModDamageSources.POISON)         event.setAmount((float)(event.getAmount() - (event.getAmount() * ArmorAttribute.POISON_RESIST.getAmount(nbt))));
      }
      if (ArmorAttribute.DURABLE.hasAttribute(nbt) && Math.random() < ArmorAttribute.DURABLE.getAmount(nbt))       stack.setItemDamage(stack.getItemDamage() + 1);
    }
  }
}",0.9844339622641508
174682,"@Override public ItemStack apply(ItemStack stack,Random rand,LootContext context){
  if (context instanceof CustomLootContext) {
    CustomLootContext customContext=(CustomLootContext)context;
    BlockPos pos=customContext.getChestPos();
    NBTTagCompound nbt;
    if (!stack.hasTagCompound())     nbt=new NBTTagCompound();
 else     nbt=stack.getTagCompound();
    ItemGenerator.create(stack,nbt,pos);
    stack.setTagCompound(nbt);
    stack.setStackDisplayName(Rarity.getRarity(nbt).getColor() + stack.getDisplayName());
    return stack;
  }
  return stack;
}","@Override public ItemStack apply(ItemStack stack,Random rand,LootContext context){
  if (context instanceof CustomLootContext) {
    CustomLootContext customContext=(CustomLootContext)context;
    BlockPos pos;
    NBTTagCompound nbt;
    if (customContext.getChestPos() != null)     pos=customContext.getChestPos();
 else     pos=context.getLootedEntity().getPosition();
    if (!stack.hasTagCompound())     nbt=new NBTTagCompound();
 else     nbt=stack.getTagCompound();
    ItemGenerator.create(stack,nbt,pos);
    stack.setTagCompound(nbt);
    stack.setStackDisplayName(Rarity.getRarity(nbt).getColor() + stack.getDisplayName());
    return stack;
  }
  return stack;
}",0.8668280871670703
174683,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  ModCapabilities.registerCapabilities();
  MinecraftForge.EVENT_BUS.register(new EventPlayerLoggedIn());
  proxy.preInit(event);
  network=NetworkRegistry.INSTANCE.newSimpleChannel(Reference.MODID);
  network.registerMessage(PacketClassGui.Handler.class,PacketClassGui.class,0,Side.CLIENT);
  network.registerMessage(PacketClassSelection.Handler.class,PacketClassSelection.class,1,Side.SERVER);
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  ModCapabilities.registerCapabilities();
  ModEvents.registerEvents();
  proxy.preInit(event);
  network=NetworkRegistry.INSTANCE.newSimpleChannel(Reference.MODID);
  network.registerMessage(PacketClassGui.Handler.class,PacketClassGui.class,0,Side.CLIENT);
  network.registerMessage(PacketClassSelection.Handler.class,PacketClassSelection.class,1,Side.SERVER);
  network.registerMessage(PacketUpdatePlayerInformation.Handler.class,PacketUpdatePlayerInformation.class,2,Side.CLIENT);
}",0.7996070726915521
174684,"@Override protected void actionPerformed(GuiButton button) throws IOException {
  EntityPlayer player=mc.player;
  if (player != null) {
    if (button == warrior)     MineHackSlash.network.sendToServer(new PacketClassSelection(1));
 else     if (button == mage)     MineHackSlash.network.sendToServer(new PacketClassSelection(2));
 else     if (button == hunter)     MineHackSlash.network.sendToServer(new PacketClassSelection(3));
    this.mc.player.closeScreen();
  }
}","@Override protected void actionPerformed(GuiButton button) throws IOException {
  EntityPlayer player=mc.player;
  IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (player != null && playerInfo != null) {
    if (button == warrior) {
      playerInfo.setPlayerClass(1);
      MineHackSlash.network.sendToServer(new PacketClassSelection(1));
    }
 else     if (button == mage) {
      playerInfo.setPlayerClass(2);
      MineHackSlash.network.sendToServer(new PacketClassSelection(2));
    }
 else     if (button == hunter) {
      playerInfo.setPlayerClass(3);
      MineHackSlash.network.sendToServer(new PacketClassSelection(3));
    }
    playerInfo.setPlayerLevel(1);
    this.mc.player.closeScreen();
  }
}",0.7582329317269076
174685,"@SubscribeEvent public void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){
  IPlayerInformation playerInfo=event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (playerInfo != null && playerInfo.getPlayerClass() == 0)   MineHackSlash.network.sendTo(new PacketClassGui(),(EntityPlayerMP)event.player);
}","@SubscribeEvent public void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event){
  IPlayerInformation playerInfo=event.player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (playerInfo != null && playerInfo.getPlayerClass() == 0)   MineHackSlash.network.sendTo(new PacketClassGui(),(EntityPlayerMP)event.player);
 else   if (playerInfo != null && playerInfo.getPlayerClass() > 0)   MineHackSlash.network.sendTo(new PacketUpdatePlayerInformation(playerInfo),(EntityPlayerMP)event.player);
}",0.7972190034762456
174686,"@Override public IMessage onMessage(final PacketClassSelection message,final MessageContext ctx){
  IThreadListener mainThread=(WorldServer)ctx.getServerHandler().player.getEntityWorld();
  mainThread.addScheduledTask(new Runnable(){
    @Override public void run(){
      EntityPlayer player=ctx.getServerHandler().player;
      IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      if (playerInfo != null && !player.getEntityWorld().isRemote) {
        if (message.playerClass == 1)         playerInfo.setPlayerClass(1);
 else         if (message.playerClass == 2) {
          playerInfo.setPlayerClass(2);
          System.out.println(""String_Node_Str"");
        }
 else         if (message.playerClass == 3)         playerInfo.setPlayerClass(3);
      }
    }
  }
);
  return null;
}","@Override public IMessage onMessage(final PacketClassSelection message,final MessageContext ctx){
  IThreadListener mainThread=(WorldServer)ctx.getServerHandler().player.getEntityWorld();
  mainThread.addScheduledTask(new Runnable(){
    @Override public void run(){
      EntityPlayer player=ctx.getServerHandler().player;
      IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
      if (playerInfo != null && !player.getEntityWorld().isRemote) {
        if (message.playerClass == 1)         playerInfo.setPlayerClass(1);
 else         if (message.playerClass == 2)         playerInfo.setPlayerClass(2);
 else         if (message.playerClass == 3)         playerInfo.setPlayerClass(3);
        playerInfo.setPlayerLevel(1);
      }
    }
  }
);
  return null;
}",0.8033674082982561
174687,"@Override public void run(){
  EntityPlayer player=ctx.getServerHandler().player;
  IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (playerInfo != null && !player.getEntityWorld().isRemote) {
    if (message.playerClass == 1)     playerInfo.setPlayerClass(1);
 else     if (message.playerClass == 2) {
      playerInfo.setPlayerClass(2);
      System.out.println(""String_Node_Str"");
    }
 else     if (message.playerClass == 3)     playerInfo.setPlayerClass(3);
  }
}","@Override public void run(){
  EntityPlayer player=ctx.getServerHandler().player;
  IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (playerInfo != null && !player.getEntityWorld().isRemote) {
    if (message.playerClass == 1)     playerInfo.setPlayerClass(1);
 else     if (message.playerClass == 2)     playerInfo.setPlayerClass(2);
 else     if (message.playerClass == 3)     playerInfo.setPlayerClass(3);
    playerInfo.setPlayerLevel(1);
  }
}",0.7872954764196343
174688,"@Override public void init(FMLInitializationEvent event){
}","@Override public void init(FMLInitializationEvent event){
  bindingP=new KeyBinding(""String_Node_Str"",Keyboard.KEY_P,""String_Node_Str"");
  ClientRegistry.registerKeyBinding(bindingP);
}",0.4836065573770491
174689,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  ModLootTables.register();
  ModCapabilities.registerCapabilities();
  ModEvents.registerEvents();
  LootFunctionManager.registerFunction(new CreateStats.Serializer());
  proxy.preInit(event);
  network=NetworkRegistry.INSTANCE.newSimpleChannel(Reference.MODID);
  network.registerMessage(PacketClassGui.Handler.class,PacketClassGui.class,0,Side.CLIENT);
  network.registerMessage(PacketClassSelection.Handler.class,PacketClassSelection.class,1,Side.SERVER);
  network.registerMessage(PacketUpdatePlayerInformation.Handler.class,PacketUpdatePlayerInformation.class,2,Side.CLIENT);
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  ModLootTables.register();
  ModCapabilities.registerCapabilities();
  ModEvents.registerEvents();
  LootFunctionManager.registerFunction(new CreateStats.Serializer());
  proxy.preInit(event);
  network=NetworkRegistry.INSTANCE.newSimpleChannel(Reference.MODID);
  network.registerMessage(PacketClassGui.Handler.class,PacketClassGui.class,0,Side.CLIENT);
  network.registerMessage(PacketClassSelection.Handler.class,PacketClassSelection.class,1,Side.SERVER);
  network.registerMessage(PacketUpdatePlayerInformation.Handler.class,PacketUpdatePlayerInformation.class,2,Side.CLIENT);
  network.registerMessage(PacketUpdatePlayerStats.Handler.class,PacketUpdatePlayerStats.class,3,Side.CLIENT);
  network.registerMessage(PacketUpdateIncreaseStat.Handler.class,PacketUpdateIncreaseStat.class,4,Side.SERVER);
}",0.8543307086614174
174690,"@Override public NBTBase writeNBT(Capability<IPlayerInformation> capability,IPlayerInformation instance,EnumFacing side){
  NBTTagCompound nbt=new NBTTagCompound();
  nbt.setInteger(""String_Node_Str"",instance.getPlayerClass());
  nbt.setInteger(""String_Node_Str"",instance.getPlayerLevel());
  nbt.setInteger(""String_Node_Str"",instance.getPlayerExperience());
  nbt.setInteger(""String_Node_Str"",instance.getSkillPoints());
  nbt.setInteger(""String_Node_Str"",instance.getStrengthStat());
  nbt.setInteger(""String_Node_Str"",instance.getAgilityStat());
  nbt.setInteger(""String_Node_Str"",instance.getDexterityStat());
  nbt.setInteger(""String_Node_Str"",instance.getIntelligenceStat());
  nbt.setInteger(""String_Node_Str"",instance.getWisdomStat());
  nbt.setInteger(""String_Node_Str"",instance.getFortitudeStat());
  return nbt;
}","@Override public NBTBase writeNBT(Capability<IPlayerInformation> capability,IPlayerInformation instance,EnumFacing side){
  NBTTagCompound nbt=new NBTTagCompound();
  nbt.setInteger(""String_Node_Str"",instance.getPlayerClass());
  nbt.setInteger(""String_Node_Str"",instance.getPlayerLevel());
  nbt.setInteger(""String_Node_Str"",instance.getPlayerExperience());
  nbt.setInteger(""String_Node_Str"",instance.getSkillPoints());
  nbt.setInteger(""String_Node_Str"",instance.getStrengthStat());
  nbt.setInteger(""String_Node_Str"",instance.getAgilityStat());
  nbt.setInteger(""String_Node_Str"",instance.getDexterityStat());
  nbt.setInteger(""String_Node_Str"",instance.getIntelligenceStat());
  nbt.setInteger(""String_Node_Str"",instance.getWisdomStat());
  nbt.setInteger(""String_Node_Str"",instance.getFortitudeStat());
  nbt.setInteger(""String_Node_Str"",instance.getBonusStrengthStat());
  nbt.setInteger(""String_Node_Str"",instance.getBonusAgilityStat());
  nbt.setInteger(""String_Node_Str"",instance.getBonusDexterityStat());
  nbt.setInteger(""String_Node_Str"",instance.getBonusIntelligenceStat());
  nbt.setInteger(""String_Node_Str"",instance.getBonusWisdomStat());
  nbt.setInteger(""String_Node_Str"",instance.getBonusFortitudeStat());
  return nbt;
}",0.7951573849878935
174691,"@SubscribeEvent public void playerClone(PlayerEvent.Clone event){
  IPlayerInformation oldInfo=getPlayerInformation(event.getOriginal());
  IPlayerInformation newInfo=getPlayerInformation(event.getEntityLiving());
  if (newInfo != null && oldInfo != null) {
    newInfo.setPlayerClass(oldInfo.getPlayerClass());
    newInfo.setPlayerLevel(oldInfo.getPlayerLevel());
    newInfo.setPlayerExperience(oldInfo.getPlayerExperience());
    newInfo.setSkillPoints(oldInfo.getSkillPoints());
    newInfo.setStrengthStat(oldInfo.getStrengthStat());
    newInfo.setAgilityStat(oldInfo.getAgilityStat());
    newInfo.setDexterityStat(oldInfo.getDexterityStat());
    newInfo.setIntelligenceStat(oldInfo.getIntelligenceStat());
    newInfo.setWisdomStat(oldInfo.getWisdomStat());
    newInfo.setFortitudeStat(oldInfo.getFortitudeStat());
  }
}","@SubscribeEvent public void playerClone(PlayerEvent.Clone event){
  IPlayerInformation oldInfo=getPlayerInformation(event.getOriginal());
  IPlayerInformation newInfo=getPlayerInformation(event.getEntityLiving());
  if (newInfo != null && oldInfo != null) {
    newInfo.setPlayerClass(oldInfo.getPlayerClass());
    newInfo.setPlayerLevel(oldInfo.getPlayerLevel());
    newInfo.setPlayerExperience(oldInfo.getPlayerExperience());
    newInfo.setSkillPoints(oldInfo.getSkillPoints());
    newInfo.setStrengthStat(oldInfo.getStrengthStat());
    newInfo.setAgilityStat(oldInfo.getAgilityStat());
    newInfo.setDexterityStat(oldInfo.getDexterityStat());
    newInfo.setIntelligenceStat(oldInfo.getIntelligenceStat());
    newInfo.setWisdomStat(oldInfo.getWisdomStat());
    newInfo.setFortitudeStat(oldInfo.getFortitudeStat());
    newInfo.setBonusStrengthStat(oldInfo.getBonusStrengthStat());
    newInfo.setBonusAgilityStat(oldInfo.getBonusAgilityStat());
    newInfo.setBonusDexterityStat(oldInfo.getBonusDexterityStat());
    newInfo.setBonusIntelligenceStat(oldInfo.getBonusIntelligenceStat());
    newInfo.setBonusWisdomStat(oldInfo.getBonusWisdomStat());
    newInfo.setBonusFortitudeStat(oldInfo.getBonusFortitudeStat());
  }
}",0.8052325581395349
174692,"public static void register(){
  CapabilityManager.INSTANCE.register(IPlayerInformation.class,new Capability.IStorage<IPlayerInformation>(){
    @Override public NBTBase writeNBT(    Capability<IPlayerInformation> capability,    IPlayerInformation instance,    EnumFacing side){
      NBTTagCompound nbt=new NBTTagCompound();
      nbt.setInteger(""String_Node_Str"",instance.getPlayerClass());
      nbt.setInteger(""String_Node_Str"",instance.getPlayerLevel());
      nbt.setInteger(""String_Node_Str"",instance.getPlayerExperience());
      nbt.setInteger(""String_Node_Str"",instance.getSkillPoints());
      nbt.setInteger(""String_Node_Str"",instance.getStrengthStat());
      nbt.setInteger(""String_Node_Str"",instance.getAgilityStat());
      nbt.setInteger(""String_Node_Str"",instance.getDexterityStat());
      nbt.setInteger(""String_Node_Str"",instance.getIntelligenceStat());
      nbt.setInteger(""String_Node_Str"",instance.getWisdomStat());
      nbt.setInteger(""String_Node_Str"",instance.getFortitudeStat());
      return nbt;
    }
    @Override public void readNBT(    Capability<IPlayerInformation> capability,    IPlayerInformation instance,    EnumFacing side,    NBTBase nbt){
      NBTTagCompound compound=(NBTTagCompound)nbt;
      instance.setPlayerClass(compound.getInteger(""String_Node_Str""));
      instance.setPlayerLevel(compound.getInteger(""String_Node_Str""));
      instance.setPlayerExperience(compound.getInteger(""String_Node_Str""));
      instance.setSkillPoints(compound.getInteger(""String_Node_Str""));
      instance.setStrengthStat(compound.getInteger(""String_Node_Str""));
      instance.setAgilityStat(compound.getInteger(""String_Node_Str""));
      instance.setDexterityStat(compound.getInteger(""String_Node_Str""));
      instance.setIntelligenceStat(compound.getInteger(""String_Node_Str""));
      instance.setWisdomStat(compound.getInteger(""String_Node_Str""));
      instance.setFortitudeStat(compound.getInteger(""String_Node_Str""));
    }
  }
,() -> new PlayerInformation(null));
  MinecraftForge.EVENT_BUS.register(new EventHandler());
}","public static void register(){
  CapabilityManager.INSTANCE.register(IPlayerInformation.class,new Capability.IStorage<IPlayerInformation>(){
    @Override public NBTBase writeNBT(    Capability<IPlayerInformation> capability,    IPlayerInformation instance,    EnumFacing side){
      NBTTagCompound nbt=new NBTTagCompound();
      nbt.setInteger(""String_Node_Str"",instance.getPlayerClass());
      nbt.setInteger(""String_Node_Str"",instance.getPlayerLevel());
      nbt.setInteger(""String_Node_Str"",instance.getPlayerExperience());
      nbt.setInteger(""String_Node_Str"",instance.getSkillPoints());
      nbt.setInteger(""String_Node_Str"",instance.getStrengthStat());
      nbt.setInteger(""String_Node_Str"",instance.getAgilityStat());
      nbt.setInteger(""String_Node_Str"",instance.getDexterityStat());
      nbt.setInteger(""String_Node_Str"",instance.getIntelligenceStat());
      nbt.setInteger(""String_Node_Str"",instance.getWisdomStat());
      nbt.setInteger(""String_Node_Str"",instance.getFortitudeStat());
      nbt.setInteger(""String_Node_Str"",instance.getBonusStrengthStat());
      nbt.setInteger(""String_Node_Str"",instance.getBonusAgilityStat());
      nbt.setInteger(""String_Node_Str"",instance.getBonusDexterityStat());
      nbt.setInteger(""String_Node_Str"",instance.getBonusIntelligenceStat());
      nbt.setInteger(""String_Node_Str"",instance.getBonusWisdomStat());
      nbt.setInteger(""String_Node_Str"",instance.getBonusFortitudeStat());
      return nbt;
    }
    @Override public void readNBT(    Capability<IPlayerInformation> capability,    IPlayerInformation instance,    EnumFacing side,    NBTBase nbt){
      NBTTagCompound compound=(NBTTagCompound)nbt;
      instance.setPlayerClass(compound.getInteger(""String_Node_Str""));
      instance.setPlayerLevel(compound.getInteger(""String_Node_Str""));
      instance.setPlayerExperience(compound.getInteger(""String_Node_Str""));
      instance.setSkillPoints(compound.getInteger(""String_Node_Str""));
      instance.setStrengthStat(compound.getInteger(""String_Node_Str""));
      instance.setAgilityStat(compound.getInteger(""String_Node_Str""));
      instance.setDexterityStat(compound.getInteger(""String_Node_Str""));
      instance.setIntelligenceStat(compound.getInteger(""String_Node_Str""));
      instance.setWisdomStat(compound.getInteger(""String_Node_Str""));
      instance.setFortitudeStat(compound.getInteger(""String_Node_Str""));
      instance.setBonusStrengthStat(compound.getInteger(""String_Node_Str""));
      instance.setBonusAgilityStat(compound.getInteger(""String_Node_Str""));
      instance.setBonusDexterityStat(compound.getInteger(""String_Node_Str""));
      instance.setBonusIntelligenceStat(compound.getInteger(""String_Node_Str""));
      instance.setBonusWisdomStat(compound.getInteger(""String_Node_Str""));
      instance.setBonusFortitudeStat(compound.getInteger(""String_Node_Str""));
    }
  }
,() -> new PlayerInformation(null));
  MinecraftForge.EVENT_BUS.register(new EventHandler());
}",0.8200238379022646
174693,"@Override public void readNBT(Capability<IPlayerInformation> capability,IPlayerInformation instance,EnumFacing side,NBTBase nbt){
  NBTTagCompound compound=(NBTTagCompound)nbt;
  instance.setPlayerClass(compound.getInteger(""String_Node_Str""));
  instance.setPlayerLevel(compound.getInteger(""String_Node_Str""));
  instance.setPlayerExperience(compound.getInteger(""String_Node_Str""));
  instance.setSkillPoints(compound.getInteger(""String_Node_Str""));
  instance.setStrengthStat(compound.getInteger(""String_Node_Str""));
  instance.setAgilityStat(compound.getInteger(""String_Node_Str""));
  instance.setDexterityStat(compound.getInteger(""String_Node_Str""));
  instance.setIntelligenceStat(compound.getInteger(""String_Node_Str""));
  instance.setWisdomStat(compound.getInteger(""String_Node_Str""));
  instance.setFortitudeStat(compound.getInteger(""String_Node_Str""));
}","@Override public void readNBT(Capability<IPlayerInformation> capability,IPlayerInformation instance,EnumFacing side,NBTBase nbt){
  NBTTagCompound compound=(NBTTagCompound)nbt;
  instance.setPlayerClass(compound.getInteger(""String_Node_Str""));
  instance.setPlayerLevel(compound.getInteger(""String_Node_Str""));
  instance.setPlayerExperience(compound.getInteger(""String_Node_Str""));
  instance.setSkillPoints(compound.getInteger(""String_Node_Str""));
  instance.setStrengthStat(compound.getInteger(""String_Node_Str""));
  instance.setAgilityStat(compound.getInteger(""String_Node_Str""));
  instance.setDexterityStat(compound.getInteger(""String_Node_Str""));
  instance.setIntelligenceStat(compound.getInteger(""String_Node_Str""));
  instance.setWisdomStat(compound.getInteger(""String_Node_Str""));
  instance.setFortitudeStat(compound.getInteger(""String_Node_Str""));
  instance.setBonusStrengthStat(compound.getInteger(""String_Node_Str""));
  instance.setBonusAgilityStat(compound.getInteger(""String_Node_Str""));
  instance.setBonusDexterityStat(compound.getInteger(""String_Node_Str""));
  instance.setBonusIntelligenceStat(compound.getInteger(""String_Node_Str""));
  instance.setBonusWisdomStat(compound.getInteger(""String_Node_Str""));
  instance.setBonusFortitudeStat(compound.getInteger(""String_Node_Str""));
}",0.7963048498845265
174694,"@Override protected void actionPerformed(GuiButton button) throws IOException {
}","@Override protected void actionPerformed(GuiButton button) throws IOException {
  EntityPlayer player=mc.player;
  IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (player != null && playerInfo != null && playerInfo.getSkillPoints() > 0) {
    if (button == plusStrength)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(1));
 else     if (button == plusAgility)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(2));
 else     if (button == plusDexterity)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(3));
 else     if (button == plusIntelligence)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(4));
 else     if (button == plusWisdom)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(5));
 else     if (button == plusFortitude)     LostEclipse.network.sendToServer(new PacketUpdateIncreaseStat(6));
    playerInfo.setSkillPoints(playerInfo.getSkillPoints() - 1);
  }
}",0.147005444646098
174695,"@Override public void initGui(){
}","@Override public void initGui(){
  plusStrength=new GuiButton(0,this.width / 2 + 95,139,10,10,""String_Node_Str"");
  plusAgility=new GuiButton(1,this.width / 2 + 95,149,10,10,""String_Node_Str"");
  plusDexterity=new GuiButton(2,this.width / 2 + 95,159,10,10,""String_Node_Str"");
  plusIntelligence=new GuiButton(3,this.width / 2 + 95,169,10,10,""String_Node_Str"");
  plusWisdom=new GuiButton(4,this.width / 2 + 95,179,10,10,""String_Node_Str"");
  plusFortitude=new GuiButton(5,this.width / 2 + 95,189,10,10,""String_Node_Str"");
  this.buttonList.add(plusStrength);
  this.buttonList.add(plusAgility);
  this.buttonList.add(plusDexterity);
  this.buttonList.add(plusIntelligence);
  this.buttonList.add(plusWisdom);
  this.buttonList.add(plusFortitude);
}",0.0869565217391304
174696,"@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  this.drawDefaultBackground();
  super.drawScreen(mouseX,mouseY,partialTicks);
  EntityPlayer player=mc.player;
  IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (player != null && playerInfo != null) {
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2,20,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + I18n.format(""String_Node_Str"" + playerInfo.getPlayerClass()),this.width / 2 - 50,40,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerLevel(),this.width / 2 - 50,50,0xFFFFFF);
    String experience=I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerExperience()+ ""String_Node_Str""+ playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel());
    double percent=(((double)playerInfo.getPlayerExperience() * 100) / (double)(playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())));
    String percentString=""String_Node_Str"" + String.format(""String_Node_Str"",percent) + ""String_Node_Str"";
    this.drawString(this.fontRenderer,experience + percentString,this.width / 2 - 50,60,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getSkillPoints(),this.width / 2 - 50,70,0xFFFFFF);
  }
}","@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  this.drawDefaultBackground();
  super.drawScreen(mouseX,mouseY,partialTicks);
  EntityPlayer player=mc.player;
  IPlayerInformation playerInfo=player.getCapability(CapabilityPlayerInformation.PLAYER_INFORMATION,null);
  if (player != null && playerInfo != null) {
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2,20,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + I18n.format(""String_Node_Str"" + playerInfo.getPlayerClass()),this.width / 2 - 50,40,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerLevel(),this.width / 2 - 50,50,0xFFFFFF);
    String experience=I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getPlayerExperience()+ ""String_Node_Str""+ playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel());
    double percent=(((double)playerInfo.getPlayerExperience() * 100) / (double)(playerInfo.getLevelUpExperience(playerInfo.getPlayerLevel())));
    String percentString=""String_Node_Str"" + String.format(""String_Node_Str"",percent) + ""String_Node_Str"";
    this.drawString(this.fontRenderer,experience + percentString,this.width / 2 - 50,60,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"" + playerInfo.getSkillPoints(),this.width / 2 - 50,70,0xFFFFFF);
    this.drawCenteredString(this.fontRenderer,I18n.format(""String_Node_Str""),this.width / 2 + 150,120,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,140,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,150,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,160,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,170,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,180,0xFFFFFF);
    this.drawString(this.fontRenderer,I18n.format(""String_Node_Str"") + ""String_Node_Str"",this.width / 2 + 110,190,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getStrengthStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusStrengthStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,140,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getAgilityStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusAgilityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,150,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getDexterityStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusDexterityStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,160,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getIntelligenceStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusIntelligenceStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,170,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getWisdomStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusWisdomStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,180,0xFFFFFF);
    this.drawString(this.fontRenderer,""String_Node_Str"" + playerInfo.getFortitudeStat() + ""String_Node_Str""+ TextFormatting.GREEN+ ""String_Node_Str""+ playerInfo.getBonusFortitudeStat()+ TextFormatting.WHITE+ ""String_Node_Str"",this.width / 2 + 180,190,0xFFFFFF);
  }
}",0.5501018707167994
174697,"public static void registerEvents(){
  MinecraftForge.EVENT_BUS.register(new EventPlayerLoggedIn());
  MinecraftForge.EVENT_BUS.register(new EventLivingDeath());
  MinecraftForge.EVENT_BUS.register(new EventInput());
  MinecraftForge.EVENT_BUS.register(new EventLivingHurtAttack());
  MinecraftForge.EVENT_BUS.register(new EventItemTooltip());
  MinecraftForge.EVENT_BUS.register(new ModWeapons());
  MinecraftForge.EVENT_BUS.register(new EventLoadLootTable());
}","public static void registerEvents(){
  MinecraftForge.EVENT_BUS.register(new EventPlayerLoggedIn());
  MinecraftForge.EVENT_BUS.register(new EventLivingDeath());
  MinecraftForge.EVENT_BUS.register(new EventInput());
  MinecraftForge.EVENT_BUS.register(new EventLivingHurtAttack());
  MinecraftForge.EVENT_BUS.register(new EventItemTooltip());
  MinecraftForge.EVENT_BUS.register(new ModWeapons());
  MinecraftForge.EVENT_BUS.register(new EventLoadLootTable());
  MinecraftForge.EVENT_BUS.register(new EventPlayerTick());
}",0.9391480730223124
174698,"/** 
 * Creates a new Attribute Modifier tag list and adds it to the NBTTagCompound. Overrides default vanilla implementation.
 * @param nbt
 * @param sword
 */
public static void setAttributeModifiers(NBTTagCompound nbt,ItemStack stack){
  Item item=stack.getItem();
  if (item instanceof ItemSword) {
    Multimap<String,AttributeModifier> map=item.getAttributeModifiers(EntityEquipmentSlot.MAINHAND,stack);
    Collection<AttributeModifier> damageCollection=map.get(SharedMonsterAttributes.ATTACK_DAMAGE.getName());
    Collection<AttributeModifier> speedCollection=map.get(SharedMonsterAttributes.ATTACK_SPEED.getName());
    AttributeModifier damageModifier=(AttributeModifier)damageCollection.toArray()[0];
    AttributeModifier speedModifier=(AttributeModifier)speedCollection.toArray()[0];
    double baseDamage=damageModifier.getAmount();
    double baseSpeed=speedModifier.getAmount();
    double damage=ItemGeneratorHelper.getWeightedDamage(nbt,Rarity.getRarity(nbt),baseDamage);
    double speed=ItemGeneratorHelper.getWeightedAttackSpeed(Rarity.getRarity(nbt),baseSpeed);
    ItemGeneratorHelper.setMinMaxDamage(nbt,damage);
    AttributeModifier attackDamage=new AttributeModifier(ATTACK_DAMAGE,""String_Node_Str"",damage,0);
    AttributeModifier attackSpeed=new AttributeModifier(ATTACK_SPEED,""String_Node_Str"",speed,0);
    NBTTagCompound damageNbt=ItemGeneratorHelper.writeAttributeModifierToNBT(SharedMonsterAttributes.ATTACK_DAMAGE,attackDamage,EntityEquipmentSlot.MAINHAND);
    NBTTagCompound speedNbt=ItemGeneratorHelper.writeAttributeModifierToNBT(SharedMonsterAttributes.ATTACK_SPEED,attackSpeed,EntityEquipmentSlot.MAINHAND);
    NBTTagList list=new NBTTagList();
    list.appendTag(damageNbt);
    list.appendTag(speedNbt);
    nbt.setTag(""String_Node_Str"",list);
  }
 else   if (item instanceof ItemArmor) {
    Multimap<String,AttributeModifier> map=((ItemArmor)item).getAttributeModifiers(((ItemArmor)item).armorType,stack);
    Collection<AttributeModifier> armorCollection=map.get(SharedMonsterAttributes.ARMOR.getName());
    Collection<AttributeModifier> toughnessCollection=map.get(SharedMonsterAttributes.ARMOR_TOUGHNESS.getName());
    AttributeModifier armorModifier=(AttributeModifier)armorCollection.toArray()[0];
    AttributeModifier toughnessModifier=(AttributeModifier)toughnessCollection.toArray()[0];
    double baseArmor=armorModifier.getAmount();
    double baseToughness=toughnessModifier.getAmount();
    double newArmor=ItemGeneratorHelper.getWeightedArmor(Rarity.getRarity(nbt),baseArmor);
    double newToughness=ItemGeneratorHelper.getWeightedArmorToughness(Rarity.getRarity(nbt),baseToughness);
    AttributeModifier armor=new AttributeModifier(ARMOR,""String_Node_Str"",newArmor,0);
    AttributeModifier toughness=new AttributeModifier(ARMOR_TOUGHNESS,""String_Node_Str"",newToughness,0);
    NBTTagCompound armorNbt=ItemGeneratorHelper.writeAttributeModifierToNBT(SharedMonsterAttributes.ARMOR,armor,((ItemArmor)item).armorType);
    NBTTagCompound toughnessNbt=ItemGeneratorHelper.writeAttributeModifierToNBT(SharedMonsterAttributes.ARMOR_TOUGHNESS,toughness,((ItemArmor)item).armorType);
    NBTTagList list=new NBTTagList();
    list.appendTag(armorNbt);
    list.appendTag(toughnessNbt);
    nbt.setTag(""String_Node_Str"",list);
  }
}","/** 
 * Creates a new Attribute Modifier tag list and adds it to the NBTTagCompound. Overrides default vanilla implementation.
 * @param nbt
 * @param sword
 */
public static void setAttributeModifiers(NBTTagCompound nbt,ItemStack stack){
  Item item=stack.getItem();
  if (item instanceof ItemSword) {
    @SuppressWarnings(""String_Node_Str"") Multimap<String,AttributeModifier> map=item.getItemAttributeModifiers(EntityEquipmentSlot.MAINHAND);
    Collection<AttributeModifier> damageCollection=map.get(SharedMonsterAttributes.ATTACK_DAMAGE.getName());
    Collection<AttributeModifier> speedCollection=map.get(SharedMonsterAttributes.ATTACK_SPEED.getName());
    AttributeModifier damageModifier=(AttributeModifier)damageCollection.toArray()[0];
    AttributeModifier speedModifier=(AttributeModifier)speedCollection.toArray()[0];
    double baseDamage=damageModifier.getAmount();
    double baseSpeed=speedModifier.getAmount();
    double damage=ItemGeneratorHelper.getWeightedDamage(nbt,Rarity.getRarity(nbt),baseDamage);
    double speed=ItemGeneratorHelper.getWeightedAttackSpeed(Rarity.getRarity(nbt),baseSpeed);
    ItemGeneratorHelper.setMinMaxDamage(nbt,damage);
    AttributeModifier attackDamage=new AttributeModifier(ATTACK_DAMAGE,""String_Node_Str"",damage,0);
    AttributeModifier attackSpeed=new AttributeModifier(ATTACK_SPEED,""String_Node_Str"",speed,0);
    NBTTagCompound damageNbt=ItemGeneratorHelper.writeAttributeModifierToNBT(SharedMonsterAttributes.ATTACK_DAMAGE,attackDamage,EntityEquipmentSlot.MAINHAND);
    NBTTagCompound speedNbt=ItemGeneratorHelper.writeAttributeModifierToNBT(SharedMonsterAttributes.ATTACK_SPEED,attackSpeed,EntityEquipmentSlot.MAINHAND);
    NBTTagList list=new NBTTagList();
    list.appendTag(damageNbt);
    list.appendTag(speedNbt);
    nbt.setTag(""String_Node_Str"",list);
  }
 else   if (item instanceof ItemArmor) {
    Multimap<String,AttributeModifier> map=((ItemArmor)item).getAttributeModifiers(((ItemArmor)item).armorType,stack);
    Collection<AttributeModifier> armorCollection=map.get(SharedMonsterAttributes.ARMOR.getName());
    Collection<AttributeModifier> toughnessCollection=map.get(SharedMonsterAttributes.ARMOR_TOUGHNESS.getName());
    AttributeModifier armorModifier=(AttributeModifier)armorCollection.toArray()[0];
    AttributeModifier toughnessModifier=(AttributeModifier)toughnessCollection.toArray()[0];
    double baseArmor=armorModifier.getAmount();
    double baseToughness=toughnessModifier.getAmount();
    double newArmor=ItemGeneratorHelper.getWeightedArmor(Rarity.getRarity(nbt),baseArmor);
    double newToughness=ItemGeneratorHelper.getWeightedArmorToughness(Rarity.getRarity(nbt),baseToughness);
    AttributeModifier armor=new AttributeModifier(ARMOR,""String_Node_Str"",newArmor,0);
    AttributeModifier toughness=new AttributeModifier(ARMOR_TOUGHNESS,""String_Node_Str"",newToughness,0);
    NBTTagCompound armorNbt=ItemGeneratorHelper.writeAttributeModifierToNBT(SharedMonsterAttributes.ARMOR,armor,((ItemArmor)item).armorType);
    NBTTagCompound toughnessNbt=ItemGeneratorHelper.writeAttributeModifierToNBT(SharedMonsterAttributes.ARMOR_TOUGHNESS,toughness,((ItemArmor)item).armorType);
    NBTTagList list=new NBTTagList();
    list.appendTag(armorNbt);
    list.appendTag(toughnessNbt);
    nbt.setTag(""String_Node_Str"",list);
  }
}",0.9928927869348252
174699,"public static void addObject(GameObject gameObject){
  if (gameObject.getId() == 0x2c) {
    int worldFlag;
    short inventoryArg;
    if (gameObject.getArgs().get(0) == 1) {
      inventoryArg=gameObject.getArgs().get(1);
    }
 else     if (gameObject.getArgs().get(0) == 7) {
      inventoryArg=80;
    }
 else {
      inventoryArg=(short)(gameObject.getArgs().get(0) - 11);
      if (inventoryArg == 24) {
        TestByteOperation cogChestTest=gameObject.getTestByteOperations().get(0);
        cogChestTest.setIndex(2799);
        WriteByteOperation cogPuzzleFlag=gameObject.getWriteByteOperations().get(1);
        cogPuzzleFlag.setIndex(2799);
      }
    }
    WriteByteOperation flagUpdate=gameObject.getWriteByteOperations().get(0);
    if (flagUpdate.getIndex() == 333) {
      worldFlag=2707;
    }
 else     if (Settings.isRandomizeTrapItems() && flagUpdate.getIndex() == 60) {
      inventoryArg=0;
      worldFlag=2777;
      gameObject.getWriteByteOperations().clear();
      flagUpdate=new WriteByteOperation();
      flagUpdate.setIndex(2777);
      flagUpdate.setOp(ByteOp.ASSIGN_FLAG);
      flagUpdate.setValue(2);
      gameObject.getWriteByteOperations().add(flagUpdate);
      flagUpdate=new WriteByteOperation();
      flagUpdate.setIndex(2776);
      flagUpdate.setOp(ByteOp.ASSIGN_FLAG);
      flagUpdate.setValue(1);
      gameObject.getWriteByteOperations().add(flagUpdate);
      flagUpdate=new WriteByteOperation();
      flagUpdate.setIndex(2777);
      flagUpdate.setOp(ByteOp.ASSIGN_FLAG);
      flagUpdate.setValue(2);
      gameObject.getWriteByteOperations().add(flagUpdate);
      flagUpdate=new WriteByteOperation();
      flagUpdate.setIndex(2777);
      flagUpdate.setOp(ByteOp.ASSIGN_FLAG);
      flagUpdate.setValue(2);
      gameObject.getWriteByteOperations().add(flagUpdate);
    }
 else     if (Settings.isRandomizeTrapItems() && flagUpdate.getIndex() == 522) {
      inventoryArg=0;
      worldFlag=2778;
    }
 else {
      worldFlag=gameObject.getWriteByteOperations().get(0).getIndex();
    }
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    if (objects == null) {
      mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
      objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    }
    objects.add(gameObject);
  }
 else   if (gameObject.getId() == 0x2f) {
    short chestArg=gameObject.getArgs().get(1);
    int worldFlag=gameObject.getWriteByteOperations().get(0).getIndex();
    GameObjectId gameObjectId=new GameObjectId(chestArg,worldFlag);
    if (chestArg == 4) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 292) {
          flagToRemoveIndex=i;
          break;
        }
      }
      gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
    }
    List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    if (objects == null) {
      mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
      objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    }
    objects.add(gameObject);
  }
 else   if (gameObject.getId() == 0xb5) {
    short itemArg=gameObject.getArgs().get(0);
    if (itemArg == 70) {
      GameObjectId gameObjectId=new GameObjectId((short)70,209);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (itemArg == 81) {
      GameObjectId gameObjectId=new GameObjectId((short)81,267);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
  }
 else   if (gameObject.getId() == 0xc3) {
    short itemArg=gameObject.getArgs().get(3);
    if (itemArg == 93 || itemArg == 94 || itemArg == 95) {
      short worldFlag;
      if (itemArg == 93) {
        worldFlag=234;
      }
 else       if (itemArg == 94) {
        worldFlag=235;
      }
 else {
        worldFlag=236;
      }
      GameObjectId gameObjectId=new GameObjectId((short)itemArg,worldFlag);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
  }
 else   if (gameObject.getId() == 0x12) {
    Integer flagIndexToRemove=null;
    TestByteOperation flagTest;
    for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
      flagTest=gameObject.getTestByteOperations().get(i);
      if (flagTest.getIndex() == 335) {
        GameObjectId gameObjectId=new GameObjectId((short)96,335);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 219) {
        GameObjectId gameObjectId=new GameObjectId((short)70,219);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 501) {
        flagIndexToRemove=i;
        break;
      }
 else       if (flagTest.getIndex() == 296) {
        flagTest.setIndex(2795);
        flagTest.setValue((byte)1);
      }
    }
    if (flagIndexToRemove != null) {
      gameObject.getTestByteOperations().remove((int)flagIndexToRemove);
    }
  }
 else   if (gameObject.getId() == 0x0e) {
    ObjectContainer objectContainer=gameObject.getObjectContainer();
    if (objectContainer instanceof Screen) {
      Screen screen=(Screen)objectContainer;
      if (screen.getZoneIndex() == 3 && screen.getRoomIndex() == 0 && screen.getScreenIndex() == 1) {
        TestByteOperation testByteOperation=new TestByteOperation();
        testByteOperation.setIndex(12);
        testByteOperation.setOp(ByteOp.FLAG_EQUALS);
        testByteOperation.setValue((byte)0);
        gameObject.getTestByteOperations().add(testByteOperation);
      }
    }
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 335) {
        GameObjectId gameObjectId=new GameObjectId((short)96,335);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 219) {
        GameObjectId gameObjectId=new GameObjectId((short)70,219);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 299 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 8) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 298 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 7) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 297 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 6) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 296 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 5) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 295 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 13) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 294 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 3) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 293 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 11) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 292) {
        if (flagTest.getValue() == 2) {
          if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 0) {
            List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
            if (objects == null) {
              mantraTablets.put(""String_Node_Str"",new ArrayList<>());
              objects=mantraTablets.get(""String_Node_Str"");
            }
            objects.add(gameObject);
            break;
          }
        }
 else         if (flagTest.getValue() == 3) {
          flagTest.setIndex(2794);
          flagTest.setOp(ByteOp.FLAG_LT);
          flagTest.setValue((byte)1);
          break;
        }
 else         if (flagTest.getValue() == 4) {
          flagTest.setIndex(2794);
          flagTest.setValue((byte)1);
          break;
        }
      }
 else       if (flagTest.getIndex() == 570) {
        if (flagTest.getValue() == 3) {
          if (ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            gameObject.setX(gameObject.getX() - 60);
            break;
          }
          if (ByteOp.FLAG_LTEQ.equals(flagTest.getOp())) {
            flagTest.setValue((byte)4);
            flagTest.setOp(ByteOp.FLAG_LT);
            break;
          }
        }
 else         if (flagTest.getValue() != 4) {
          flagTest.setIndex(2799);
          break;
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x9b) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 218) {
        GameObjectId gameObjectId=new GameObjectId((short)70,218);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 267) {
        GameObjectId gameObjectId=new GameObjectId((short)81,267);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 292) {
        flagTest.setIndex(2794);
        flagTest.setValue((byte)1);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x9c) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 552) {
        flagTest.setIndex(259);
        flagTest.setOp(ByteOp.FLAG_LTEQ);
        flagTest.setValue((byte)1);
        GameObjectId gameObjectId=new GameObjectId((short)71,259);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 570) {
        if (flagTest.getValue() == 3) {
          if (ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            gameObject.setX(gameObject.getX() - 60);
            break;
          }
          if (ByteOp.FLAG_LTEQ.equals(flagTest.getOp())) {
            flagTest.setValue((byte)4);
            flagTest.setOp(ByteOp.FLAG_LT);
            break;
          }
        }
 else         if (flagTest.getValue() != 4) {
          flagTest.setIndex(2799);
          break;
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x6b) {
    Integer flagUpdateToRemove=null;
    for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
      if (gameObject.getWriteByteOperations().get(i).getIndex() == 810) {
        flagUpdateToRemove=i;
        break;
      }
    }
    if (flagUpdateToRemove != null) {
      gameObject.getWriteByteOperations().remove((int)flagUpdateToRemove);
    }
  }
 else   if (gameObject.getId() == 0x11) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 218) {
        GameObjectId gameObjectId=new GameObjectId((short)70,218);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagUpdate.getIndex() == 433) {
        flagUpdate.setIndex(46);
        break;
      }
 else       if (flagUpdate.getIndex() == 434) {
        flagUpdate.setIndex(47);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x14) {
    ObjectContainer objectContainer=gameObject.getObjectContainer();
    if (objectContainer instanceof Screen) {
      Screen screen=(Screen)objectContainer;
      if (screen.getZoneIndex() == 3 && screen.getRoomIndex() == 0 && screen.getScreenIndex() == 1) {
        if (gameObject.getTestByteOperations().get(0).getIndex() == 387) {
          gameObject.getWriteByteOperations().remove(0);
        }
 else         if (gameObject.getTestByteOperations().get(0).getIndex() == 392) {
          WriteByteOperation writeByteOperation=new WriteByteOperation();
          writeByteOperation.setIndex(387);
          writeByteOperation.setOp(ByteOp.ASSIGN_FLAG);
          writeByteOperation.setValue(1);
          gameObject.getWriteByteOperations().add(writeByteOperation);
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x71 || gameObject.getId() == 0x33) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 180) {
        GameObjectId gameObjectId=new GameObjectId((short)51,180);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x08) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 229) {
        GameObjectId gameObjectId=new GameObjectId((short)88,229);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 144) {
        GameObjectId gameObjectId=new GameObjectId((short)19,144);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 433) {
        flagTest.setIndex(46);
        gameObject.getWriteByteOperations().get(0).setIndex(46);
        break;
      }
 else       if (flagTest.getIndex() == 434) {
        flagTest.setIndex(47);
        gameObject.getWriteByteOperations().get(0).setIndex(47);
        break;
      }
 else       if (Settings.isRandomizeTrapItems()) {
        if (gameObject.getObjectContainer() instanceof Screen) {
          Screen screen=(Screen)gameObject.getObjectContainer();
          if (screen.getZoneIndex() == 11 && screen.getRoomIndex() == 4 && screen.getScreenIndex() == 3) {
            gameObject.getTestByteOperations().get(0).setIndex(2776);
            gameObject.getWriteByteOperations().get(0).setIndex(2776);
            gameObject.getWriteByteOperations().remove(1);
            GameObjectId gameObjectId=new GameObjectId((short)0,2777);
            List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
            if (objects == null) {
              mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
              objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
            }
            objects.add(gameObject);
            break;
          }
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x9e) {
    int languageBlock=gameObject.getArgs().get(0);
    if (Settings.isAutomaticGrailPoints()) {
      if (languageBlock == 41 || languageBlock == 75 || languageBlock == 104 || languageBlock == 136 || languageBlock == 149 || languageBlock == 170 || languageBlock == 188 || languageBlock == 221 || languageBlock == 250 || languageBlock == 275 || languageBlock == 291 || languageBlock == 305 || languageBlock == 323 || languageBlock == 339 || languageBlock == 206 || languageBlock == 358) {
        addGrailDetector(gameObject,getGrailFlag(languageBlock));
        return;
      }
 else       if (languageBlock == 231) {
        if (gameObject.getObjectContainer() instanceof Screen) {
          if (((Screen)gameObject.getObjectContainer()).getZoneIndex() == 9) {
            addGrailDetector(gameObject,108);
            return;
          }
 else {
            addGrailDetector(gameObject,117);
            return;
          }
        }
      }
    }
    if (languageBlock == 223) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 200) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 172) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 153) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 313) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 115) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 282) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 72) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 648) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 292 && flagTest.getValue() == 4) {
          flagTest.setIndex(2794);
          flagTest.setValue((byte)1);
          break;
        }
      }
    }
 else {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 209) {
          GameObjectId gameObjectId=new GameObjectId((short)70,209);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
 else         if (flagTest.getIndex() == 570) {
          if (flagTest.getValue() == 3) {
            if (ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
              flagTest.setOp(ByteOp.FLAG_LTEQ);
              gameObject.setX(gameObject.getX() - 60);
              break;
            }
            if (ByteOp.FLAG_LTEQ.equals(flagTest.getOp())) {
              flagTest.setValue((byte)4);
              flagTest.setOp(ByteOp.FLAG_LT);
              break;
            }
          }
 else           if (flagTest.getValue() != 4) {
            flagTest.setIndex(2799);
            break;
          }
        }
      }
    }
  }
 else   if (gameObject.getId() == 0xa0) {
    int blockNumber=gameObject.getArgs().get(4);
    if (gameObject.getArgs().get(3) == 1) {
      if (DataFromFile.getMapOfShopNameToShopBlock().values().contains(blockNumber)) {
        List<GameObject> objects=mapOfShopBlockToShopObjects.get(blockNumber);
        if (objects == null) {
          mapOfShopBlockToShopObjects.put(blockNumber,new ArrayList<>());
          objects=mapOfShopBlockToShopObjects.get(blockNumber);
        }
        objects.add(gameObject);
      }
    }
    if (blockNumber == 34) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 742) {
          GameObjectId gameObjectId=new GameObjectId((short)76,742);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (blockNumber == 185) {
      littleBrotherShopScreen=gameObject.getObjectContainer();
    }
 else     if (blockNumber == 490) {
      GameObjectId gameObjectId=new GameObjectId((short)76,742);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
      addAltSurfaceShopItemTimer(gameObject.getObjectContainer());
    }
 else     if (blockNumber == 693 || blockNumber == 915) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 554) {
          flagTest.setIndex(152);
          GameObjectId gameObjectId=new GameObjectId((short)22,152);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (blockNumber == 673) {
      GameObjectId gameObjectId=new GameObjectId((short)100,241);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (blockNumber == 677) {
      for (      WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
        if (flagUpdate.getIndex() == 299) {
          flagUpdate.setIndex(2795);
        }
      }
    }
 else     if (blockNumber == 689) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2784);
          flagTest.setOp(ByteOp.FLAG_EQUALS);
          flagTest.setValue((byte)0);
          break;
        }
      }
    }
 else     if (blockNumber == 690) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2784);
          flagTest.setOp(ByteOp.FLAG_GT);
          flagTest.setValue((byte)0);
          break;
        }
      }
    }
 else     if (blockNumber == 691) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2706);
          flagTest.setOp(ByteOp.FLAG_LT);
          flagTest.setValue((byte)2);
          GameObjectId gameObjectId=new GameObjectId((short)50,2706);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (blockNumber == 692) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2706);
          flagTest.setOp(ByteOp.FLAG_GTEQ);
          flagTest.setValue((byte)2);
          GameObjectId gameObjectId=new GameObjectId((short)50,2706);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
      TestByteOperation pepperCheck=new TestByteOperation();
      pepperCheck.setIndex(2784);
      pepperCheck.setOp(ByteOp.FLAG_GT);
      pepperCheck.setValue((byte)0);
      gameObject.getTestByteOperations().add(pepperCheck);
    }
 else     if (blockNumber == 484 || blockNumber == 1019 || gameObject.getArgs().get(4) == 1080 || gameObject.getArgs().get(4) == 1081) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 537) {
          flagToRemoveIndex=i;
          break;
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
      if (gameObject.getArgs().get(4) == 484) {
        addDiaryTalismanConversationTimers(gameObject.getObjectContainer());
        xelpudScreen=gameObject.getObjectContainer();
      }
    }
 else     if (blockNumber == 485) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        TestByteOperation flagTest=gameObject.getTestByteOperations().get(i);
        if (flagTest.getIndex() == 874) {
          flagToRemoveIndex=i;
        }
 else         if (flagTest.getIndex() == 123 && flagTest.getValue() == 56) {
          flagTest.setValue((byte)0);
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
      mulbrukScreen=gameObject.getObjectContainer();
    }
 else     if (blockNumber == 685 || blockNumber == 686) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 501) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          break;
        }
      }
    }
 else     if (blockNumber == 990) {
      TestByteOperation testByteOperation=new TestByteOperation();
      testByteOperation.setIndex(810);
      testByteOperation.setOp(ByteOp.FLAG_NOT_EQUAL);
      testByteOperation.setValue((byte)1);
      gameObject.getTestByteOperations().add(testByteOperation);
    }
 else     if (blockNumber == 694 || blockNumber == 695) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 570) {
          flagTest.setIndex(2799);
        }
      }
      for (      WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
        if (flagUpdate.getIndex() == 570) {
          flagUpdate.setIndex(2799);
        }
      }
    }
 else     if (blockNumber == 1011) {
      GameObjectId gameObjectId=new GameObjectId((short)74,262);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (blockNumber == 1013) {
      GameObjectId gameObjectId=new GameObjectId((short)74,262);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (blockNumber == 1082 || blockNumber == 1083 || blockNumber == 924) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 874) {
          flagToRemoveIndex=i;
          break;
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
    }
 else     if (blockNumber == 132) {
      addBackupGyoninFishShop(gameObject);
    }
  }
 else   if (gameObject.getId() == 0x93) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 241) {
        GameObjectId gameObjectId=new GameObjectId((short)100,241);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 171) {
        GameObjectId gameObjectId=new GameObjectId((short)42,171);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 262) {
        GameObjectId gameObjectId=new GameObjectId((short)74,262);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 299 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 8) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 298 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 7) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 297 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 6) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 296 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 5) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 295 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 13) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 294 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 3) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 293 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 11) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 292) {
        if (flagTest.getValue() == 2) {
          if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 0) {
            List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
            if (objects == null) {
              mantraTablets.put(""String_Node_Str"",new ArrayList<>());
              objects=mantraTablets.get(""String_Node_Str"");
            }
            objects.add(gameObject);
            break;
          }
        }
 else         if (flagTest.getValue() == 4) {
          flagTest.setIndex(2794);
          flagTest.setValue((byte)1);
        }
      }
 else       if (flagTest.getIndex() == 570) {
        if (flagTest.getValue() == 3) {
          if (ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            gameObject.setX(gameObject.getX() - 60);
            break;
          }
          if (ByteOp.FLAG_LTEQ.equals(flagTest.getOp())) {
            flagTest.setValue((byte)4);
            flagTest.setOp(ByteOp.FLAG_LT);
            break;
          }
        }
 else         if (flagTest.getValue() != 4) {
          flagTest.setIndex(2799);
          break;
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x0b) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 554 && flagUpdate.getValue() == 3) {
        for (        TestByteOperation flagTest : gameObject.getTestByteOperations()) {
          if (flagTest.getIndex() == 554 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp()) && flagTest.getValue() == 2) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            return;
          }
        }
      }
 else       if (flagUpdate.getIndex() == 844) {
        if (flagUpdate.getValue() == 8) {
          GameObjectId gameObjectId=new GameObjectId((short)74,262);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          return;
        }
 else         if (flagUpdate.getValue() == 1) {
          if (Settings.isRandomizeForbiddenTreasure() && Settings.isHTFullRandom()) {
            Integer flagToRemoveIndex=null;
            for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
              if (gameObject.getTestByteOperations().get(i).getIndex() == 258) {
                flagToRemoveIndex=i;
                break;
              }
            }
            if (flagToRemoveIndex != null) {
              gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
            }
            return;
          }
        }
      }
    }
    for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
      TestByteOperation flagTest=gameObject.getTestByteOperations().get(i);
      if (flagTest.getIndex() == 260) {
        GameObjectId gameObjectId=new GameObjectId((short)72,260);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
 else       if (flagTest.getIndex() == 742) {
        GameObjectId gameObjectId=new GameObjectId((short)76,742);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
 else       if (flagTest.getIndex() == 123 && flagTest.getValue() == 56) {
        flagTest.setValue((byte)0);
      }
 else       if (flagTest.getIndex() == 299) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 8) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 298) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 7) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 297) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 6) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 425) {
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 295) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 13) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 294) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 3) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 293) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 11) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 292) {
        if (flagTest.getValue() == 1) {
          if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 0) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            TestByteOperation testByteOperation=new TestByteOperation();
            testByteOperation.setIndex(2795);
            testByteOperation.setOp(ByteOp.FLAG_EQUALS);
            testByteOperation.setValue((byte)1);
            gameObject.getTestByteOperations().add(testByteOperation);
            List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
            if (objects == null) {
              mantraTablets.put(""String_Node_Str"",new ArrayList<>());
              objects=mantraTablets.get(""String_Node_Str"");
            }
            objects.add(gameObject);
            break;
          }
        }
 else         if (flagTest.getValue() == 4) {
          flagTest.setIndex(2794);
          flagTest.setValue((byte)1);
        }
      }
 else       if (flagTest.getIndex() == 570) {
        flagTest.setIndex(2799);
        for (        WriteByteOperation writeByteOperation : gameObject.getWriteByteOperations()) {
          if (writeByteOperation.getIndex() == 570) {
            writeByteOperation.setIndex(2799);
            break;
          }
        }
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0xbb) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 260) {
        GameObjectId gameObjectId=new GameObjectId((short)72,260);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
    }
  }
 else   if (gameObject.getId() == 0x0a) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 143) {
        GameObjectId gameObjectId=new GameObjectId((short)19,143);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
    }
  }
 else   if (gameObject.getId() == 0x4e) {
    for (    TestByteOperation testByteOperation : gameObject.getTestByteOperations()) {
      if (testByteOperation.getIndex() == 362 && ByteOp.FLAG_EQUALS.equals(testByteOperation.getOp())) {
        addBackupShrineDoor(gameObject.getObjectContainer());
      }
    }
  }
 else   if (gameObject.getId() == 0xc2) {
    short mantraNumber=gameObject.getArgs().get(0);
    if (mantraNumber > 1) {
      if (mantraNumber == 2) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 298) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 3) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 297) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 4) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 296) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 5) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 295) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 6) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 294) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 7) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 293) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 8) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 292) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 9) {
        for (        WriteByteOperation writeByteOperation : gameObject.getWriteByteOperations()) {
          if (writeByteOperation.getIndex() == 292) {
            writeByteOperation.setIndex(2794);
            writeByteOperation.setValue(1);
            break;
          }
        }
      }
      GameObject mantraCountTimer=new GameObject(gameObject.getObjectContainer());
      mantraCountTimer.setId((short)0x0b);
      mantraCountTimer.getArgs().add((short)0);
      mantraCountTimer.getArgs().add((short)0);
      mantraCountTimer.setX(-1);
      mantraCountTimer.setY(-1);
      TestByteOperation testByteOperation=new TestByteOperation();
      testByteOperation.setOp(ByteOp.FLAG_EQUALS);
      if (mantraNumber == 9) {
        testByteOperation.setIndex(2794);
        testByteOperation.setValue((byte)1);
      }
 else {
        testByteOperation.setIndex(gameObject.getTestByteOperations().get(0).getIndex());
        testByteOperation.setValue((byte)4);
      }
      mantraCountTimer.getTestByteOperations().add(testByteOperation);
      testByteOperation=new TestByteOperation();
      testByteOperation.setIndex(2792 - (299 - gameObject.getTestByteOperations().get(0).getIndex()));
      testByteOperation.setOp(ByteOp.FLAG_EQUALS);
      testByteOperation.setValue((byte)0);
      mantraCountTimer.getTestByteOperations().add(testByteOperation);
      WriteByteOperation writeByteOperation=new WriteByteOperation();
      writeByteOperation.setIndex(2793);
      writeByteOperation.setOp(ByteOp.ADD_FLAG);
      writeByteOperation.setValue(1);
      mantraCountTimer.getWriteByteOperations().add(writeByteOperation);
      writeByteOperation=new WriteByteOperation();
      writeByteOperation.setIndex(2792 - (299 - gameObject.getTestByteOperations().get(0).getIndex()));
      writeByteOperation.setOp(ByteOp.ASSIGN_FLAG);
      writeByteOperation.setValue(1);
      mantraCountTimer.getWriteByteOperations().add(writeByteOperation);
      gameObject.getObjectContainer().getObjects().add(mantraCountTimer);
      GameObject mantraTimer=new GameObject(gameObject.getObjectContainer());
      mantraTimer.setId((short)0x0b);
      mantraTimer.getArgs().add((short)0);
      mantraTimer.getArgs().add((short)0);
      mantraTimer.setX(-1);
      mantraTimer.setY(-1);
      testByteOperation=new TestByteOperation();
      testByteOperation.setIndex(2793);
      testByteOperation.setOp(ByteOp.FLAG_GTEQ);
      if (Settings.getEnabledGlitches().contains(""String_Node_Str"")) {
        testByteOperation.setValue((byte)5);
      }
 else {
        testByteOperation.setValue((byte)8);
      }
      mantraTimer.getTestByteOperations().add(testByteOperation);
      testByteOperation=new TestByteOperation();
      testByteOperation.setIndex(292);
      testByteOperation.setOp(ByteOp.FLAG_NOT_EQUAL);
      testByteOperation.setValue((byte)4);
      mantraTimer.getTestByteOperations().add(testByteOperation);
      writeByteOperation=new WriteByteOperation();
      writeByteOperation.setIndex(292);
      writeByteOperation.setOp(ByteOp.ASSIGN_FLAG);
      writeByteOperation.setValue(4);
      mantraTimer.getWriteByteOperations().add(writeByteOperation);
      gameObject.getObjectContainer().getObjects().add(mantraTimer);
    }
  }
}","public static void addObject(GameObject gameObject){
  if (gameObject.getId() == 0x2c) {
    int worldFlag;
    short inventoryArg;
    if (gameObject.getArgs().get(0) == 1) {
      inventoryArg=gameObject.getArgs().get(1);
    }
 else     if (gameObject.getArgs().get(0) == 7) {
      inventoryArg=80;
    }
 else {
      inventoryArg=(short)(gameObject.getArgs().get(0) - 11);
      if (inventoryArg == 24) {
        TestByteOperation cogChestTest=gameObject.getTestByteOperations().get(0);
        cogChestTest.setIndex(2799);
        WriteByteOperation cogPuzzleFlag=gameObject.getWriteByteOperations().get(1);
        cogPuzzleFlag.setIndex(2799);
      }
    }
    WriteByteOperation flagUpdate=gameObject.getWriteByteOperations().get(0);
    if (flagUpdate.getIndex() == 333) {
      worldFlag=2707;
    }
 else     if (Settings.isRandomizeTrapItems() && flagUpdate.getIndex() == 60) {
      inventoryArg=0;
      worldFlag=2777;
      gameObject.getWriteByteOperations().clear();
      flagUpdate=new WriteByteOperation();
      flagUpdate.setIndex(2777);
      flagUpdate.setOp(ByteOp.ASSIGN_FLAG);
      flagUpdate.setValue(2);
      gameObject.getWriteByteOperations().add(flagUpdate);
      flagUpdate=new WriteByteOperation();
      flagUpdate.setIndex(2776);
      flagUpdate.setOp(ByteOp.ASSIGN_FLAG);
      flagUpdate.setValue(1);
      gameObject.getWriteByteOperations().add(flagUpdate);
      flagUpdate=new WriteByteOperation();
      flagUpdate.setIndex(2777);
      flagUpdate.setOp(ByteOp.ASSIGN_FLAG);
      flagUpdate.setValue(2);
      gameObject.getWriteByteOperations().add(flagUpdate);
      flagUpdate=new WriteByteOperation();
      flagUpdate.setIndex(2777);
      flagUpdate.setOp(ByteOp.ASSIGN_FLAG);
      flagUpdate.setValue(2);
      gameObject.getWriteByteOperations().add(flagUpdate);
    }
 else     if (Settings.isRandomizeTrapItems() && flagUpdate.getIndex() == 522) {
      inventoryArg=0;
      worldFlag=2778;
    }
 else {
      worldFlag=gameObject.getWriteByteOperations().get(0).getIndex();
    }
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    if (objects == null) {
      mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
      objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    }
    objects.add(gameObject);
  }
 else   if (gameObject.getId() == 0x2f) {
    short chestArg=gameObject.getArgs().get(1);
    int worldFlag=gameObject.getWriteByteOperations().get(0).getIndex();
    GameObjectId gameObjectId=new GameObjectId(chestArg,worldFlag);
    if (chestArg == 4) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 292) {
          flagToRemoveIndex=i;
          break;
        }
      }
      gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
    }
    List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    if (objects == null) {
      mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
      objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    }
    objects.add(gameObject);
  }
 else   if (gameObject.getId() == 0xb5) {
    short itemArg=gameObject.getArgs().get(0);
    if (itemArg == 70) {
      GameObjectId gameObjectId=new GameObjectId((short)70,209);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (itemArg == 81) {
      GameObjectId gameObjectId=new GameObjectId((short)81,267);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
  }
 else   if (gameObject.getId() == 0xc3) {
    short itemArg=gameObject.getArgs().get(3);
    if (itemArg == 93 || itemArg == 94 || itemArg == 95) {
      short worldFlag;
      if (itemArg == 93) {
        worldFlag=234;
      }
 else       if (itemArg == 94) {
        worldFlag=235;
      }
 else {
        worldFlag=236;
      }
      GameObjectId gameObjectId=new GameObjectId((short)itemArg,worldFlag);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
  }
 else   if (gameObject.getId() == 0x12) {
    Integer flagIndexToRemove=null;
    TestByteOperation flagTest;
    for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
      flagTest=gameObject.getTestByteOperations().get(i);
      if (flagTest.getIndex() == 335) {
        GameObjectId gameObjectId=new GameObjectId((short)96,335);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 219) {
        GameObjectId gameObjectId=new GameObjectId((short)70,219);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 501) {
        flagIndexToRemove=i;
        break;
      }
 else       if (flagTest.getIndex() == 296) {
        flagTest.setIndex(2795);
        flagTest.setValue((byte)1);
      }
    }
    if (flagIndexToRemove != null) {
      gameObject.getTestByteOperations().remove((int)flagIndexToRemove);
    }
  }
 else   if (gameObject.getId() == 0x0e) {
    ObjectContainer objectContainer=gameObject.getObjectContainer();
    if (objectContainer instanceof Screen) {
      Screen screen=(Screen)objectContainer;
      if (screen.getZoneIndex() == 3 && screen.getRoomIndex() == 0 && screen.getScreenIndex() == 1) {
        TestByteOperation testByteOperation=new TestByteOperation();
        testByteOperation.setIndex(12);
        testByteOperation.setOp(ByteOp.FLAG_EQUALS);
        testByteOperation.setValue((byte)0);
        gameObject.getTestByteOperations().add(testByteOperation);
      }
    }
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 335) {
        GameObjectId gameObjectId=new GameObjectId((short)96,335);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 219) {
        GameObjectId gameObjectId=new GameObjectId((short)70,219);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 299 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 8) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 298 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 7) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 297 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 6) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 296 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 5) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 295 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 13) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 294 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 3) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 293 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 11) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 292) {
        if (flagTest.getValue() == 2) {
          if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 0) {
            List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
            if (objects == null) {
              mantraTablets.put(""String_Node_Str"",new ArrayList<>());
              objects=mantraTablets.get(""String_Node_Str"");
            }
            objects.add(gameObject);
            break;
          }
        }
 else         if (flagTest.getValue() == 3) {
          flagTest.setIndex(2794);
          flagTest.setOp(ByteOp.FLAG_LT);
          flagTest.setValue((byte)1);
          break;
        }
 else         if (flagTest.getValue() == 4) {
          flagTest.setIndex(2794);
          flagTest.setValue((byte)1);
          break;
        }
      }
 else       if (flagTest.getIndex() == 570) {
        if (flagTest.getValue() == 3) {
          if (ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            gameObject.setX(gameObject.getX() - 60);
            break;
          }
          if (ByteOp.FLAG_LTEQ.equals(flagTest.getOp())) {
            flagTest.setValue((byte)4);
            flagTest.setOp(ByteOp.FLAG_LT);
            break;
          }
        }
 else         if (flagTest.getValue() != 4) {
          flagTest.setIndex(2799);
          break;
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x9b) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 218) {
        GameObjectId gameObjectId=new GameObjectId((short)70,218);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 267) {
        GameObjectId gameObjectId=new GameObjectId((short)81,267);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 292) {
        flagTest.setIndex(2794);
        flagTest.setValue((byte)1);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x9c) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 552) {
        flagTest.setIndex(259);
        flagTest.setOp(ByteOp.FLAG_LTEQ);
        flagTest.setValue((byte)1);
        GameObjectId gameObjectId=new GameObjectId((short)71,259);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 570) {
        if (flagTest.getValue() == 3) {
          if (ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            gameObject.setX(gameObject.getX() - 60);
            break;
          }
          if (ByteOp.FLAG_LTEQ.equals(flagTest.getOp())) {
            flagTest.setValue((byte)4);
            flagTest.setOp(ByteOp.FLAG_LT);
            break;
          }
        }
 else         if (flagTest.getValue() != 4) {
          flagTest.setIndex(2799);
          break;
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x6b) {
    Integer flagUpdateToRemove=null;
    for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
      if (gameObject.getWriteByteOperations().get(i).getIndex() == 810) {
        flagUpdateToRemove=i;
        break;
      }
    }
    if (flagUpdateToRemove != null) {
      gameObject.getWriteByteOperations().remove((int)flagUpdateToRemove);
    }
  }
 else   if (gameObject.getId() == 0x11) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 218) {
        GameObjectId gameObjectId=new GameObjectId((short)70,218);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagUpdate.getIndex() == 433) {
        flagUpdate.setIndex(46);
        break;
      }
 else       if (flagUpdate.getIndex() == 434) {
        flagUpdate.setIndex(47);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x14) {
    ObjectContainer objectContainer=gameObject.getObjectContainer();
    if (objectContainer instanceof Screen) {
      Screen screen=(Screen)objectContainer;
      if (screen.getZoneIndex() == 3 && screen.getRoomIndex() == 0 && screen.getScreenIndex() == 1) {
        if (gameObject.getTestByteOperations().get(0).getIndex() == 387) {
          gameObject.getWriteByteOperations().remove(0);
        }
 else         if (gameObject.getTestByteOperations().get(0).getIndex() == 392) {
          WriteByteOperation writeByteOperation=new WriteByteOperation();
          writeByteOperation.setIndex(387);
          writeByteOperation.setOp(ByteOp.ASSIGN_FLAG);
          writeByteOperation.setValue(1);
          gameObject.getWriteByteOperations().add(writeByteOperation);
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x71 || gameObject.getId() == 0x33) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 180) {
        GameObjectId gameObjectId=new GameObjectId((short)51,180);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x08) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 229) {
        GameObjectId gameObjectId=new GameObjectId((short)88,229);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 144) {
        GameObjectId gameObjectId=new GameObjectId((short)19,144);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 433) {
        flagTest.setIndex(46);
        gameObject.getWriteByteOperations().get(0).setIndex(46);
        break;
      }
 else       if (flagTest.getIndex() == 434) {
        flagTest.setIndex(47);
        gameObject.getWriteByteOperations().get(0).setIndex(47);
        break;
      }
 else       if (Settings.isRandomizeTrapItems()) {
        if (gameObject.getObjectContainer() instanceof Screen) {
          Screen screen=(Screen)gameObject.getObjectContainer();
          if (screen.getZoneIndex() == 11 && screen.getRoomIndex() == 4 && screen.getScreenIndex() == 3) {
            gameObject.getTestByteOperations().get(0).setIndex(2776);
            gameObject.getWriteByteOperations().get(0).setIndex(2776);
            gameObject.getWriteByteOperations().remove(1);
            GameObjectId gameObjectId=new GameObjectId((short)0,2777);
            List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
            if (objects == null) {
              mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
              objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
            }
            objects.add(gameObject);
            break;
          }
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x9e) {
    int languageBlock=gameObject.getArgs().get(0);
    if (Settings.isAutomaticGrailPoints()) {
      if (languageBlock == 41 || languageBlock == 75 || languageBlock == 104 || languageBlock == 136 || languageBlock == 149 || languageBlock == 170 || languageBlock == 188 || languageBlock == 221 || languageBlock == 250 || languageBlock == 275 || languageBlock == 291 || languageBlock == 305 || languageBlock == 323 || languageBlock == 339 || languageBlock == 206 || languageBlock == 358) {
        addGrailDetector(gameObject,getGrailFlag(languageBlock));
        return;
      }
 else       if (languageBlock == 231) {
        if (gameObject.getObjectContainer() instanceof Screen) {
          if (((Screen)gameObject.getObjectContainer()).getZoneIndex() == 9) {
            addGrailDetector(gameObject,108);
            return;
          }
 else {
            addGrailDetector(gameObject,117);
            return;
          }
        }
      }
    }
    if (languageBlock == 223) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 200) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 172) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 153) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 313) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 115) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 282) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 72) {
      List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
      if (objects == null) {
        mantraTablets.put(""String_Node_Str"",new ArrayList<>());
        objects=mantraTablets.get(""String_Node_Str"");
      }
      objects.add(gameObject);
    }
 else     if (languageBlock == 648) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 292 && flagTest.getValue() == 4) {
          flagTest.setIndex(2794);
          flagTest.setValue((byte)1);
          break;
        }
      }
    }
 else {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 209) {
          GameObjectId gameObjectId=new GameObjectId((short)70,209);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
 else         if (flagTest.getIndex() == 570) {
          if (flagTest.getValue() == 3) {
            if (ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
              flagTest.setOp(ByteOp.FLAG_LTEQ);
              gameObject.setX(gameObject.getX() - 60);
              break;
            }
            if (ByteOp.FLAG_LTEQ.equals(flagTest.getOp())) {
              flagTest.setValue((byte)4);
              flagTest.setOp(ByteOp.FLAG_LT);
              break;
            }
          }
 else           if (flagTest.getValue() != 4) {
            flagTest.setIndex(2799);
            break;
          }
        }
      }
    }
  }
 else   if (gameObject.getId() == 0xa0) {
    int blockNumber=gameObject.getArgs().get(4);
    if (gameObject.getArgs().get(3) == 1) {
      if (DataFromFile.getMapOfShopNameToShopBlock().values().contains(blockNumber)) {
        List<GameObject> objects=mapOfShopBlockToShopObjects.get(blockNumber);
        if (objects == null) {
          mapOfShopBlockToShopObjects.put(blockNumber,new ArrayList<>());
          objects=mapOfShopBlockToShopObjects.get(blockNumber);
        }
        objects.add(gameObject);
      }
    }
    if (blockNumber == 34) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 742) {
          GameObjectId gameObjectId=new GameObjectId((short)76,742);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (blockNumber == 185) {
      littleBrotherShopScreen=gameObject.getObjectContainer();
    }
 else     if (blockNumber == 490) {
      GameObjectId gameObjectId=new GameObjectId((short)76,742);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
      addAltSurfaceShopItemTimer(gameObject.getObjectContainer());
    }
 else     if (blockNumber == 693 || blockNumber == 915) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 554) {
          flagTest.setIndex(152);
          GameObjectId gameObjectId=new GameObjectId((short)22,152);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (blockNumber == 673) {
      GameObjectId gameObjectId=new GameObjectId((short)100,241);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (blockNumber == 677) {
      for (      WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
        if (flagUpdate.getIndex() == 299) {
          flagUpdate.setIndex(2795);
        }
      }
    }
 else     if (blockNumber == 689) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2784);
          flagTest.setOp(ByteOp.FLAG_EQUALS);
          flagTest.setValue((byte)0);
          break;
        }
      }
    }
 else     if (blockNumber == 690) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2784);
          flagTest.setOp(ByteOp.FLAG_GT);
          flagTest.setValue((byte)0);
          break;
        }
      }
    }
 else     if (blockNumber == 691) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2706);
          flagTest.setOp(ByteOp.FLAG_LT);
          flagTest.setValue((byte)2);
          GameObjectId gameObjectId=new GameObjectId((short)50,2706);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (blockNumber == 692) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2706);
          flagTest.setOp(ByteOp.FLAG_GTEQ);
          flagTest.setValue((byte)2);
          GameObjectId gameObjectId=new GameObjectId((short)50,2706);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
      TestByteOperation pepperCheck=new TestByteOperation();
      pepperCheck.setIndex(2784);
      pepperCheck.setOp(ByteOp.FLAG_GT);
      pepperCheck.setValue((byte)0);
      gameObject.getTestByteOperations().add(pepperCheck);
    }
 else     if (blockNumber == 484 || blockNumber == 1019 || gameObject.getArgs().get(4) == 1080 || gameObject.getArgs().get(4) == 1081) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 537) {
          flagToRemoveIndex=i;
          break;
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
      if (gameObject.getArgs().get(4) == 484) {
        addDiaryTalismanConversationTimers(gameObject.getObjectContainer());
        xelpudScreen=gameObject.getObjectContainer();
      }
    }
 else     if (blockNumber == 485) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        TestByteOperation flagTest=gameObject.getTestByteOperations().get(i);
        if (flagTest.getIndex() == 874) {
          flagToRemoveIndex=i;
        }
 else         if (flagTest.getIndex() == 123 && flagTest.getValue() == 56) {
          flagTest.setValue((byte)0);
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
      mulbrukScreen=gameObject.getObjectContainer();
    }
 else     if (blockNumber == 685 || blockNumber == 686) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 501) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          break;
        }
      }
    }
 else     if (blockNumber == 990) {
      TestByteOperation testByteOperation=new TestByteOperation();
      testByteOperation.setIndex(810);
      testByteOperation.setOp(ByteOp.FLAG_NOT_EQUAL);
      testByteOperation.setValue((byte)1);
      gameObject.getTestByteOperations().add(testByteOperation);
    }
 else     if (blockNumber == 694 || blockNumber == 695) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 570) {
          flagTest.setIndex(2799);
        }
      }
      for (      WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
        if (flagUpdate.getIndex() == 570) {
          flagUpdate.setIndex(2799);
        }
      }
    }
 else     if (blockNumber == 1011) {
      GameObjectId gameObjectId=new GameObjectId((short)74,262);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (blockNumber == 1013) {
      GameObjectId gameObjectId=new GameObjectId((short)74,262);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (blockNumber == 1082 || blockNumber == 1083 || blockNumber == 924) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 874) {
          flagToRemoveIndex=i;
          break;
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
    }
 else     if (blockNumber == 132) {
      addBackupGyoninFishShop(gameObject);
    }
  }
 else   if (gameObject.getId() == 0x93) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 241) {
        GameObjectId gameObjectId=new GameObjectId((short)100,241);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 171) {
        GameObjectId gameObjectId=new GameObjectId((short)42,171);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 262) {
        GameObjectId gameObjectId=new GameObjectId((short)74,262);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 299 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 8) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 298 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 7) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 297 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 6) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 296 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 5) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 295 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 13) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 294 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 3) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 293 && flagTest.getValue() == 2) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 11) {
          List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
          if (objects == null) {
            mantraTablets.put(""String_Node_Str"",new ArrayList<>());
            objects=mantraTablets.get(""String_Node_Str"");
          }
          objects.add(gameObject);
          break;
        }
      }
 else       if (flagTest.getIndex() == 292) {
        if (flagTest.getValue() == 2) {
          if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 0) {
            List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
            if (objects == null) {
              mantraTablets.put(""String_Node_Str"",new ArrayList<>());
              objects=mantraTablets.get(""String_Node_Str"");
            }
            objects.add(gameObject);
            break;
          }
        }
 else         if (flagTest.getValue() == 4) {
          flagTest.setIndex(2794);
          flagTest.setValue((byte)1);
        }
      }
 else       if (flagTest.getIndex() == 570) {
        if (flagTest.getValue() == 3) {
          if (ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            gameObject.setX(gameObject.getX() - 60);
            break;
          }
          if (ByteOp.FLAG_LTEQ.equals(flagTest.getOp())) {
            flagTest.setValue((byte)4);
            flagTest.setOp(ByteOp.FLAG_LT);
            break;
          }
        }
 else         if (flagTest.getValue() != 4) {
          flagTest.setIndex(2799);
          break;
        }
      }
    }
  }
 else   if (gameObject.getId() == 0x0b) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 554 && flagUpdate.getValue() == 3) {
        for (        TestByteOperation flagTest : gameObject.getTestByteOperations()) {
          if (flagTest.getIndex() == 554 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp()) && flagTest.getValue() == 2) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            return;
          }
        }
      }
 else       if (flagUpdate.getIndex() == 844) {
        if (flagUpdate.getValue() == 8) {
          GameObjectId gameObjectId=new GameObjectId((short)74,262);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          return;
        }
 else         if (flagUpdate.getValue() == 1) {
          if ((Settings.isRandomizeForbiddenTreasure() && Settings.isHTFullRandom()) || Settings.isRandomizeDracuetShop()) {
            Integer flagToRemoveIndex=null;
            for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
              if (gameObject.getTestByteOperations().get(i).getIndex() == 258) {
                flagToRemoveIndex=i;
                break;
              }
            }
            if (flagToRemoveIndex != null) {
              gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
            }
            return;
          }
        }
      }
    }
    for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
      TestByteOperation flagTest=gameObject.getTestByteOperations().get(i);
      if (flagTest.getIndex() == 260) {
        GameObjectId gameObjectId=new GameObjectId((short)72,260);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
 else       if (flagTest.getIndex() == 742) {
        GameObjectId gameObjectId=new GameObjectId((short)76,742);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
 else       if (flagTest.getIndex() == 123 && flagTest.getValue() == 56) {
        flagTest.setValue((byte)0);
      }
 else       if (flagTest.getIndex() == 299) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 8) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 298) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 7) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 297) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 6) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 425) {
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 295) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 13) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 294) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 3) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 293) {
        if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 11) {
          flagTest.setOp(ByteOp.FLAG_LTEQ);
          TestByteOperation testByteOperation=new TestByteOperation();
          testByteOperation.setIndex(2795);
          testByteOperation.setOp(ByteOp.FLAG_EQUALS);
          testByteOperation.setValue((byte)1);
          gameObject.getTestByteOperations().add(testByteOperation);
          break;
        }
        List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
        if (objects == null) {
          mantraTablets.put(""String_Node_Str"",new ArrayList<>());
          objects=mantraTablets.get(""String_Node_Str"");
        }
        objects.add(gameObject);
      }
 else       if (flagTest.getIndex() == 292) {
        if (flagTest.getValue() == 1) {
          if (gameObject.getObjectContainer() instanceof Screen && ((Screen)gameObject.getObjectContainer()).getZoneIndex() == 0) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            TestByteOperation testByteOperation=new TestByteOperation();
            testByteOperation.setIndex(2795);
            testByteOperation.setOp(ByteOp.FLAG_EQUALS);
            testByteOperation.setValue((byte)1);
            gameObject.getTestByteOperations().add(testByteOperation);
            List<GameObject> objects=mantraTablets.get(""String_Node_Str"");
            if (objects == null) {
              mantraTablets.put(""String_Node_Str"",new ArrayList<>());
              objects=mantraTablets.get(""String_Node_Str"");
            }
            objects.add(gameObject);
            break;
          }
        }
 else         if (flagTest.getValue() == 4) {
          flagTest.setIndex(2794);
          flagTest.setValue((byte)1);
        }
      }
 else       if (flagTest.getIndex() == 570) {
        flagTest.setIndex(2799);
        for (        WriteByteOperation writeByteOperation : gameObject.getWriteByteOperations()) {
          if (writeByteOperation.getIndex() == 570) {
            writeByteOperation.setIndex(2799);
            break;
          }
        }
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0xbb) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 260) {
        GameObjectId gameObjectId=new GameObjectId((short)72,260);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
    }
  }
 else   if (gameObject.getId() == 0x0a) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 143) {
        GameObjectId gameObjectId=new GameObjectId((short)19,143);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
    }
  }
 else   if (gameObject.getId() == 0x4e) {
    for (    TestByteOperation testByteOperation : gameObject.getTestByteOperations()) {
      if (testByteOperation.getIndex() == 362 && ByteOp.FLAG_EQUALS.equals(testByteOperation.getOp())) {
        addBackupShrineDoor(gameObject.getObjectContainer());
      }
    }
  }
 else   if (gameObject.getId() == 0xc2) {
    short mantraNumber=gameObject.getArgs().get(0);
    if (mantraNumber > 1) {
      if (mantraNumber == 2) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 298) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 3) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 297) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 4) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 296) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 5) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 295) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 6) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 294) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 7) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 293) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 8) {
        Integer flagToRemoveIndex=null;
        for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
          if (gameObject.getWriteByteOperations().get(i).getIndex() == 292) {
            flagToRemoveIndex=i;
            break;
          }
        }
        if (flagToRemoveIndex != null) {
          gameObject.getWriteByteOperations().remove((int)flagToRemoveIndex);
        }
      }
 else       if (mantraNumber == 9) {
        for (        WriteByteOperation writeByteOperation : gameObject.getWriteByteOperations()) {
          if (writeByteOperation.getIndex() == 292) {
            writeByteOperation.setIndex(2794);
            writeByteOperation.setValue(1);
            break;
          }
        }
      }
      GameObject mantraCountTimer=new GameObject(gameObject.getObjectContainer());
      mantraCountTimer.setId((short)0x0b);
      mantraCountTimer.getArgs().add((short)0);
      mantraCountTimer.getArgs().add((short)0);
      mantraCountTimer.setX(-1);
      mantraCountTimer.setY(-1);
      TestByteOperation testByteOperation=new TestByteOperation();
      testByteOperation.setOp(ByteOp.FLAG_EQUALS);
      if (mantraNumber == 9) {
        testByteOperation.setIndex(2794);
        testByteOperation.setValue((byte)1);
      }
 else {
        testByteOperation.setIndex(gameObject.getTestByteOperations().get(0).getIndex());
        testByteOperation.setValue((byte)4);
      }
      mantraCountTimer.getTestByteOperations().add(testByteOperation);
      testByteOperation=new TestByteOperation();
      testByteOperation.setIndex(2792 - (299 - gameObject.getTestByteOperations().get(0).getIndex()));
      testByteOperation.setOp(ByteOp.FLAG_EQUALS);
      testByteOperation.setValue((byte)0);
      mantraCountTimer.getTestByteOperations().add(testByteOperation);
      WriteByteOperation writeByteOperation=new WriteByteOperation();
      writeByteOperation.setIndex(2793);
      writeByteOperation.setOp(ByteOp.ADD_FLAG);
      writeByteOperation.setValue(1);
      mantraCountTimer.getWriteByteOperations().add(writeByteOperation);
      writeByteOperation=new WriteByteOperation();
      writeByteOperation.setIndex(2792 - (299 - gameObject.getTestByteOperations().get(0).getIndex()));
      writeByteOperation.setOp(ByteOp.ASSIGN_FLAG);
      writeByteOperation.setValue(1);
      mantraCountTimer.getWriteByteOperations().add(writeByteOperation);
      gameObject.getObjectContainer().getObjects().add(mantraCountTimer);
      GameObject mantraTimer=new GameObject(gameObject.getObjectContainer());
      mantraTimer.setId((short)0x0b);
      mantraTimer.getArgs().add((short)0);
      mantraTimer.getArgs().add((short)0);
      mantraTimer.setX(-1);
      mantraTimer.setY(-1);
      testByteOperation=new TestByteOperation();
      testByteOperation.setIndex(2793);
      testByteOperation.setOp(ByteOp.FLAG_GTEQ);
      if (Settings.getEnabledGlitches().contains(""String_Node_Str"")) {
        testByteOperation.setValue((byte)5);
      }
 else {
        testByteOperation.setValue((byte)8);
      }
      mantraTimer.getTestByteOperations().add(testByteOperation);
      testByteOperation=new TestByteOperation();
      testByteOperation.setIndex(292);
      testByteOperation.setOp(ByteOp.FLAG_NOT_EQUAL);
      testByteOperation.setValue((byte)4);
      mantraTimer.getTestByteOperations().add(testByteOperation);
      writeByteOperation=new WriteByteOperation();
      writeByteOperation.setIndex(292);
      writeByteOperation.setOp(ByteOp.ASSIGN_FLAG);
      writeByteOperation.setValue(4);
      mantraTimer.getWriteByteOperations().add(writeByteOperation);
      gameObject.getObjectContainer().getObjects().add(mantraTimer);
    }
  }
}",0.9996658870698296
174700,"private static void determineRemovedItems(Random random){
  Set<String> removedItems=new HashSet<>(Settings.getRemovedItems());
  if (Settings.getMaxRandomRemovedItems() < 1) {
    Settings.setCurrentRemovedItems(new HashSet<>(0));
  }
  int totalItemsRemoved=Settings.getMinRandomRemovedItems();
  totalItemsRemoved+=random.nextInt(Settings.getMaxRandomRemovedItems() - totalItemsRemoved + 1);
  List<String> removableItems=DataFromFile.getRandomRemovableItems();
  int chosenRemovedItems=0;
  while (chosenRemovedItems < totalItemsRemoved) {
    int removedItemIndex=random.nextInt(removableItems.size());
    String removedItem=removableItems.get(removedItemIndex);
    if (!removedItems.contains(removedItem) && removableItems.contains(removedItem)) {
      removedItems.add(removedItem);
      ++chosenRemovedItems;
    }
  }
  Settings.setCurrentRemovedItems(removedItems);
}","private static void determineRemovedItems(Random random){
  Set<String> removedItems=new HashSet<>(Settings.getRemovedItems());
  if (Settings.getMaxRandomRemovedItems() < 1) {
    Settings.setCurrentRemovedItems(new HashSet<>(0));
  }
  int totalItemsRemoved=Settings.getMinRandomRemovedItems();
  totalItemsRemoved+=random.nextInt(Settings.getMaxRandomRemovedItems() - totalItemsRemoved + 1);
  List<String> removableItems=new ArrayList<>(DataFromFile.getRandomRemovableItems());
  int chosenRemovedItems=0;
  while (chosenRemovedItems < totalItemsRemoved && !removableItems.isEmpty()) {
    int removedItemIndex=random.nextInt(removableItems.size());
    String removedItem=removableItems.get(removedItemIndex);
    if (!removedItems.contains(removedItem)) {
      removedItems.add(removedItem);
      removableItems.remove(removedItem);
      ++chosenRemovedItems;
    }
  }
  Settings.setCurrentRemovedItems(removedItems);
}",0.918232044198895
174701,"private void handleNodeAccess(String nodeName,NodeType nodeType){
switch (nodeType) {
case ITEM_LOCATION:
    String item=itemRandomizer.getItem(nodeName);
  if (!Settings.getCurrentRemovedItems().contains(item)) {
    queuedUpdates.add(item);
  }
break;
case MAP_LOCATION:
case EVENT:
case EXIT:
case GLITCH:
queuedUpdates.add(nodeName);
break;
case SHOP:
for (String shopItem : shopRandomizer.getShopItems(nodeName)) {
if (!accessedNodes.contains(shopItem) && !queuedUpdates.contains(shopItem)) {
queuedUpdates.add(shopItem);
}
}
break;
}
}","private void handleNodeAccess(String nodeName,NodeType nodeType){
switch (nodeType) {
case ITEM_LOCATION:
    String item=itemRandomizer.getItem(nodeName);
  if (!Settings.getCurrentRemovedItems().contains(item)) {
    queuedUpdates.add(item);
  }
break;
case MAP_LOCATION:
case EVENT:
case EXIT:
case GLITCH:
queuedUpdates.add(nodeName);
break;
case SHOP:
for (String shopItem : shopRandomizer.getShopItems(nodeName)) {
if (!accessedNodes.contains(shopItem) && !queuedUpdates.contains(shopItem) && !Settings.getCurrentRemovedItems().contains(shopItem)) {
queuedUpdates.add(shopItem);
}
}
break;
}
}",0.9500438212094654
174702,"private static void updateChestContents(GameObject objectToModify,GameObjectId itemLocationData,GameObjectId itemNewContentsData,boolean itemChest){
  WriteByteOperation puzzleFlag=objectToModify.getWriteByteOperations().get(1);
  objectToModify.getWriteByteOperations().clear();
  if (itemChest) {
    boolean nonShrineMap=Settings.isReplaceMapsWithWeights() && itemNewContentsData.getInventoryArg() == 70 && itemNewContentsData.getWorldFlag() != 218;
    if (nonShrineMap) {
      objectToModify.getArgs().set(0,(short)2);
    }
 else {
      objectToModify.getArgs().set(0,(short)(itemNewContentsData.getInventoryArg() + 11));
    }
    objectToModify.getArgs().set(1,(short)1);
    if (Settings.isCoinChestGraphics()) {
      objectToModify.getArgs().set(2,(short)0);
    }
 else {
      objectToModify.getArgs().set(2,(short)1);
    }
    int newChestWorldFlag=nonShrineMap ? nextReplacedItemFlag : itemNewContentsData.getWorldFlag();
    for (    TestByteOperation flagTest : objectToModify.getTestByteOperations()) {
      if (flagTest.getIndex() == itemLocationData.getWorldFlag()) {
        flagTest.setIndex(newChestWorldFlag);
      }
    }
    WriteByteOperation updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    objectToModify.getWriteByteOperations().add(puzzleFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    if (nonShrineMap) {
      updateFlag.setValue(2);
    }
 else {
      updateFlag.setValue(1);
    }
    objectToModify.getWriteByteOperations().add(updateFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    if (nonShrineMap) {
      nextReplacedItemFlag+=1;
    }
  }
 else {
    objectToModify.getArgs().set(0,(short)1);
    objectToModify.getArgs().set(1,itemNewContentsData.getInventoryArg());
    objectToModify.getArgs().set(2,(short)0);
    for (    TestByteOperation flagTest : objectToModify.getTestByteOperations()) {
      if (flagTest.getIndex() == itemLocationData.getWorldFlag()) {
        flagTest.setIndex(itemNewContentsData.getWorldFlag());
      }
    }
    WriteByteOperation updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    objectToModify.getWriteByteOperations().add(puzzleFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ADD_FLAG);
    updateFlag.setIndex(119);
    updateFlag.setValue(1);
    objectToModify.getWriteByteOperations().add(updateFlag);
  }
}","private static void updateChestContents(GameObject objectToModify,GameObjectId itemLocationData,GameObjectId itemNewContentsData,boolean itemChest){
  WriteByteOperation puzzleFlag=objectToModify.getWriteByteOperations().get(1);
  objectToModify.getWriteByteOperations().clear();
  if (itemChest) {
    boolean nonShrineMap=Settings.isReplaceMapsWithWeights() && itemNewContentsData.getInventoryArg() == 70 && itemNewContentsData.getWorldFlag() != 218;
    if (nonShrineMap) {
      objectToModify.getArgs().set(0,(short)2);
    }
 else {
      objectToModify.getArgs().set(0,(short)(itemNewContentsData.getInventoryArg() + 11));
    }
    objectToModify.getArgs().set(1,(short)1);
    if (Settings.isCoinChestGraphics()) {
      objectToModify.getArgs().set(2,(short)0);
    }
 else {
      objectToModify.getArgs().set(2,(short)1);
    }
    Integer newChestWorldFlag;
    if (nonShrineMap) {
      newChestWorldFlag=mapOfWorldFlagToAssignedReplacementFlag.get(itemLocationData.getWorldFlag());
      if (newChestWorldFlag == null) {
        newChestWorldFlag=nextReplacedItemFlag++;
        mapOfWorldFlagToAssignedReplacementFlag.put(itemLocationData.getWorldFlag(),newChestWorldFlag);
      }
    }
 else {
      newChestWorldFlag=itemNewContentsData.getWorldFlag();
    }
    for (    TestByteOperation flagTest : objectToModify.getTestByteOperations()) {
      if (flagTest.getIndex() == itemLocationData.getWorldFlag()) {
        flagTest.setIndex(newChestWorldFlag);
      }
    }
    WriteByteOperation updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    objectToModify.getWriteByteOperations().add(puzzleFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    if (nonShrineMap) {
      updateFlag.setValue(2);
    }
 else {
      updateFlag.setValue(1);
    }
    objectToModify.getWriteByteOperations().add(updateFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
  }
 else {
    objectToModify.getArgs().set(0,(short)1);
    objectToModify.getArgs().set(1,itemNewContentsData.getInventoryArg());
    objectToModify.getArgs().set(2,(short)0);
    for (    TestByteOperation flagTest : objectToModify.getTestByteOperations()) {
      if (flagTest.getIndex() == itemLocationData.getWorldFlag()) {
        flagTest.setIndex(itemNewContentsData.getWorldFlag());
      }
    }
    WriteByteOperation updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    objectToModify.getWriteByteOperations().add(puzzleFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ADD_FLAG);
    updateFlag.setIndex(119);
    updateFlag.setValue(1);
    objectToModify.getWriteByteOperations().add(updateFlag);
  }
}",0.9367738041346008
174703,"public static void clearAll(){
  mapOfChestIdentifyingInfoToGameObject.clear();
  mapOfChestIdentifyingInfoToBlock.clear();
  mapOfShopBlockToShopObjects.clear();
  mantraTablets.clear();
  nextReplacedItemFlag=2708;
}","public static void clearAll(){
  mapOfChestIdentifyingInfoToGameObject.clear();
  mapOfChestIdentifyingInfoToBlock.clear();
  mapOfShopBlockToShopObjects.clear();
  mantraTablets.clear();
  mapOfWorldFlagToAssignedReplacementFlag.clear();
  nextReplacedItemFlag=2708;
}",0.8952772073921971
174704,"public short getPrice(String itemName){
  if (""String_Node_Str"".equals(itemName)) {
    if (!normalPriceWeightsPlaced) {
      normalPriceWeightsPlaced=true;
      return 10;
    }
    int priceRoll=random.nextInt(20);
    if (priceRoll == 0 || priceRoll == 1) {
      return 15;
    }
    if (priceRoll == 2) {
      return 20;
    }
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 20;
    }
    return 25;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 2) {
      return 35;
    }
    if (priceRoll == 2) {
      return 40;
    }
    return 45;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 70;
    }
    if (priceRoll == 3) {
      return 60;
    }
    return 80;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(2);
    if (priceRoll == 0) {
      return 40;
    }
    return 45;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 4) {
      return 30;
    }
    return 35;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 3) {
      return 400;
    }
    return 350;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getNonRandomizedItems().contains(""String_Node_Str"")) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getNonRandomizedItems().contains(""String_Node_Str"")) {
    return 60;
  }
  if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
 else   if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
 else   if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
  if (PRICE_TIER1.contains(itemName)) {
    return (short)(50 + 5 * random.nextInt(5));
  }
 else   if (PRICE_TIER2.contains(itemName)) {
    return (short)(80 + 10 * random.nextInt(5));
  }
 else   if (PRICE_TIER3.contains(itemName)) {
    return (short)(140 + 5 * random.nextInt(5));
  }
 else   if (PRICE_TIER4.contains(itemName)) {
    return (short)(180 + 10 * random.nextInt(5));
  }
 else   if (PRICE_TIER4.contains(itemName)) {
    return (short)(250 + 50 * random.nextInt(3));
  }
  return (short)(10 + 10 * random.nextInt(25) + 1);
}","public short getPrice(String itemName){
  if (""String_Node_Str"".equals(itemName)) {
    if (!normalPriceWeightsPlaced) {
      normalPriceWeightsPlaced=true;
      return 10;
    }
    int priceRoll=random.nextInt(20);
    if (priceRoll == 0 || priceRoll == 1) {
      return 15;
    }
    if (priceRoll == 2) {
      return 20;
    }
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 20;
    }
    return 25;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 2) {
      return 35;
    }
    if (priceRoll == 2) {
      return 40;
    }
    return 45;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 60;
    }
    if (priceRoll == 3) {
      return 50;
    }
    return 70;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(2);
    if (priceRoll == 0) {
      return 40;
    }
    return 45;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 4) {
      return 30;
    }
    return 35;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 3) {
      return 400;
    }
    return 350;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getNonRandomizedItems().contains(""String_Node_Str"")) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getNonRandomizedItems().contains(""String_Node_Str"")) {
    return 60;
  }
  if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
 else   if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
 else   if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
  if (PRICE_TIER1.contains(itemName)) {
    return (short)(50 + 5 * random.nextInt(5));
  }
 else   if (PRICE_TIER2.contains(itemName)) {
    return (short)(80 + 10 * random.nextInt(5));
  }
 else   if (PRICE_TIER3.contains(itemName)) {
    return (short)(140 + 5 * random.nextInt(5));
  }
 else   if (PRICE_TIER4.contains(itemName)) {
    return (short)(180 + 10 * random.nextInt(5));
  }
 else   if (PRICE_TIER5.contains(itemName)) {
    return (short)(250 + 50 * random.nextInt(3));
  }
  return (short)(10 + 10 * random.nextInt(25) + 1);
}",0.9904912836767036
174705,"public static void saveSettings() throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(""String_Node_Str""));
  writer.write(String.format(""String_Node_Str"",Settings.getShopRandomization().toString()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.getXmailerItem().toString()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isFullItemAccess()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isAutomaticHardmode()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRequireSoftwareComboForKeyFairy()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRequireIceCapeForLava()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRequireFlaresForExtinction()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRandomizeForbiddenTreasure()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRandomizeCoinChests()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isReplaceMapsWithWeights()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isCoinChestGraphics()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isAutomaticGrailPoints()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.getLaMulanaBaseDir()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.getLanguage()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.getBossDifficulty().name()));
  writer.newLine();
  for (  String item : DataFromFile.getAllItems()) {
    if (Settings.getInitiallyAccessibleItems().contains(item)) {
      writer.write(String.format(""String_Node_Str"",item,""String_Node_Str""));
    }
 else     if (Settings.getNonRandomizedItems().contains(item)) {
      writer.write(String.format(""String_Node_Str"",item,""String_Node_Str""));
    }
 else     if (Settings.getSurfaceItems().contains(item)) {
      writer.write(String.format(""String_Node_Str"",item,""String_Node_Str""));
    }
 else {
      writer.write(String.format(""String_Node_Str"",item,""String_Node_Str""));
    }
    writer.newLine();
  }
  for (  String glitchOption : DataFromFile.getAvailableGlitches()) {
    writer.write(String.format(""String_Node_Str"",glitchOption,Settings.getEnabledGlitches().contains(glitchOption)));
    writer.newLine();
  }
  for (  String dboostOption : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    writer.write(String.format(""String_Node_Str"",dboostOption,Settings.getEnabledDamageBoosts().contains(dboostOption)));
    writer.newLine();
  }
  writer.flush();
  writer.close();
}","public static void saveSettings() throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(""String_Node_Str""));
  writer.write(String.format(""String_Node_Str"",Settings.getShopRandomization().toString()));
  writer.newLine();
  if (Settings.getXmailerItem() != null) {
    writer.write(String.format(""String_Node_Str"",Settings.getXmailerItem()));
    writer.newLine();
  }
  writer.write(String.format(""String_Node_Str"",Settings.isFullItemAccess()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isAutomaticHardmode()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRequireSoftwareComboForKeyFairy()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRequireIceCapeForLava()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRequireFlaresForExtinction()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRandomizeForbiddenTreasure()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isRandomizeCoinChests()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isReplaceMapsWithWeights()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isCoinChestGraphics()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.isAutomaticGrailPoints()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.getLaMulanaBaseDir()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.getLanguage()));
  writer.newLine();
  writer.write(String.format(""String_Node_Str"",Settings.getBossDifficulty().name()));
  writer.newLine();
  for (  String item : DataFromFile.getAllItems()) {
    if (Settings.getInitiallyAccessibleItems().contains(item)) {
      writer.write(String.format(""String_Node_Str"",item,""String_Node_Str""));
    }
 else     if (Settings.getNonRandomizedItems().contains(item)) {
      writer.write(String.format(""String_Node_Str"",item,""String_Node_Str""));
    }
 else     if (Settings.getSurfaceItems().contains(item)) {
      writer.write(String.format(""String_Node_Str"",item,""String_Node_Str""));
    }
 else {
      writer.write(String.format(""String_Node_Str"",item,""String_Node_Str""));
    }
    writer.newLine();
  }
  for (  String glitchOption : DataFromFile.getAvailableGlitches()) {
    writer.write(String.format(""String_Node_Str"",glitchOption,Settings.getEnabledGlitches().contains(glitchOption)));
    writer.newLine();
  }
  for (  String dboostOption : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    writer.write(String.format(""String_Node_Str"",dboostOption,Settings.getEnabledDamageBoosts().contains(dboostOption)));
    writer.newLine();
  }
  writer.flush();
  writer.close();
}",0.9876586741889986
174706,"public static void readSettings() throws IOException {
  if (!(new File(""String_Node_Str"").exists())) {
    return;
  }
  BufferedReader reader;
  try {
    reader=new BufferedReader(new FileReader(""String_Node_Str""));
  }
 catch (  Exception ex) {
    FileUtils.log(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
    return;
  }
  if (reader == null) {
    return;
  }
  String line;
  String[] settingAndValue;
  List<String> enabledGlitches=new ArrayList<>();
  List<String> enabledDamageBoosts=new ArrayList<>();
  Set<String> initiallyAvailableItems=new HashSet<>();
  Set<String> nonRandomizedItems=new HashSet<>();
  Set<String> surfaceItems=new HashSet<>();
  while ((line=reader.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (""String_Node_Str"".equals(settingAndValue[1])) {
        initiallyAvailableItems.add(settingAndValue[0]);
      }
 else       if (""String_Node_Str"".equals(settingAndValue[1])) {
        nonRandomizedItems.add(settingAndValue[0]);
      }
 else       if (""String_Node_Str"".equals(settingAndValue[1])) {
        surfaceItems.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (Boolean.valueOf(settingAndValue[1])) {
        enabledGlitches.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (Boolean.valueOf(settingAndValue[1])) {
        enabledDamageBoosts.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setShopRandomization(line.split(""String_Node_Str"")[1],false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setXmailerItem(line.split(""String_Node_Str"")[1],false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setAutomaticHardmode(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setFullItemAccess(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRequireSoftwareComboForKeyFairy(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRequireIceCapeForLava(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRequireFlaresForExtinction(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRandomizeForbiddenTreasure(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRandomizeCoinChests(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setReplaceMapsWithWeights(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setCoinChestGraphics(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setAutomaticGrailPoints(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setLaMulanaBaseDir(line.substring(line.indexOf(""String_Node_Str"") + 1),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setLanguage(line.substring(line.indexOf(""String_Node_Str"") + 1),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setBossDifficulty(line.split(""String_Node_Str"")[1],false);
    }
  }
  Settings.setEnabledGlitches(enabledGlitches,false);
  Settings.setEnabledDamageBoosts(enabledDamageBoosts,false);
  Settings.setInitiallyAccessibleItems(initiallyAvailableItems,false);
  Settings.setNonRandomizedItems(nonRandomizedItems,false);
  Settings.setSurfaceItems(surfaceItems,false);
}","public static void readSettings() throws IOException {
  if (!(new File(""String_Node_Str"").exists())) {
    return;
  }
  BufferedReader reader;
  try {
    reader=new BufferedReader(new FileReader(""String_Node_Str""));
  }
 catch (  Exception ex) {
    FileUtils.log(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
    return;
  }
  String line;
  String[] settingAndValue;
  List<String> enabledGlitches=new ArrayList<>();
  List<String> enabledDamageBoosts=new ArrayList<>();
  Set<String> initiallyAvailableItems=new HashSet<>();
  Set<String> nonRandomizedItems=new HashSet<>();
  Set<String> surfaceItems=new HashSet<>();
  while ((line=reader.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (""String_Node_Str"".equals(settingAndValue[1])) {
        initiallyAvailableItems.add(settingAndValue[0]);
      }
 else       if (""String_Node_Str"".equals(settingAndValue[1])) {
        nonRandomizedItems.add(settingAndValue[0]);
      }
 else       if (""String_Node_Str"".equals(settingAndValue[1])) {
        surfaceItems.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (Boolean.valueOf(settingAndValue[1])) {
        enabledGlitches.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (Boolean.valueOf(settingAndValue[1])) {
        enabledDamageBoosts.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setShopRandomization(line.split(""String_Node_Str"")[1],false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setXmailerItem(line.split(""String_Node_Str"")[1],false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setAutomaticHardmode(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setFullItemAccess(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRequireSoftwareComboForKeyFairy(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRequireIceCapeForLava(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRequireFlaresForExtinction(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRandomizeForbiddenTreasure(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRandomizeCoinChests(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setReplaceMapsWithWeights(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setCoinChestGraphics(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setAutomaticGrailPoints(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setLaMulanaBaseDir(line.substring(line.indexOf(""String_Node_Str"") + 1),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setLanguage(line.substring(line.indexOf(""String_Node_Str"") + 1),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setBossDifficulty(line.split(""String_Node_Str"")[1],false);
    }
  }
  Settings.setEnabledGlitches(enabledGlitches,false);
  Settings.setEnabledDamageBoosts(enabledDamageBoosts,false);
  Settings.setInitiallyAccessibleItems(initiallyAvailableItems,false);
  Settings.setNonRandomizedItems(nonRandomizedItems,false);
  Settings.setSurfaceItems(surfaceItems,false);
}",0.995349918623576
174707,"public short getPrice(String itemName){
  if (""String_Node_Str"".equals(itemName)) {
    if (!normalPriceWeightsPlaced) {
      normalPriceWeightsPlaced=true;
      return 10;
    }
    int priceRoll=random.nextInt(20);
    if (priceRoll == 0 || priceRoll == 1) {
      return 15;
    }
    if (priceRoll == 2) {
      return 20;
    }
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 20;
    }
    return 25;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 2) {
      return 35;
    }
    if (priceRoll == 2) {
      return 40;
    }
    return 45;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 55;
    }
    if (priceRoll == 3) {
      return 60;
    }
    return 50;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(2);
    if (priceRoll == 0) {
      return 45;
    }
    return 40;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 4) {
      return 30;
    }
    return 35;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 3) {
      return 400;
    }
    return 350;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 5;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 5;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 5;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 5;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 5;
  }
  if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
 else   if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
 else   if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
  if (PRICE_TIER1.contains(itemName)) {
    return (short)(40 + 5 * random.nextInt(5));
  }
 else   if (PRICE_TIER2.contains(itemName)) {
    return (short)(70 + 10 * random.nextInt(5));
  }
 else   if (PRICE_TIER3.contains(itemName)) {
    return (short)(130 + 5 * random.nextInt(5));
  }
 else   if (PRICE_TIER4.contains(itemName)) {
    return (short)(170 + 10 * random.nextInt(5));
  }
  return (short)(10 + 10 * random.nextInt(25) + 1);
}","public short getPrice(String itemName){
  if (""String_Node_Str"".equals(itemName)) {
    if (!normalPriceWeightsPlaced) {
      normalPriceWeightsPlaced=true;
      return 10;
    }
    int priceRoll=random.nextInt(20);
    if (priceRoll == 0 || priceRoll == 1) {
      return 15;
    }
    if (priceRoll == 2) {
      return 20;
    }
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 20;
    }
    return 25;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 2) {
      return 35;
    }
    if (priceRoll == 2) {
      return 40;
    }
    return 45;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 55;
    }
    if (priceRoll == 3) {
      return 60;
    }
    return 50;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(2);
    if (priceRoll == 0) {
      return 45;
    }
    return 40;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 4) {
      return 30;
    }
    return 35;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 3) {
      return 400;
    }
    return 350;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName) && Settings.getSurfaceItems().contains(""String_Node_Str"")) {
    return 1;
  }
  if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
 else   if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
 else   if (itemName.contains(""String_Node_Str"")) {
    itemName=""String_Node_Str"";
  }
  if (PRICE_TIER1.contains(itemName)) {
    return (short)(40 + 5 * random.nextInt(5));
  }
 else   if (PRICE_TIER2.contains(itemName)) {
    return (short)(70 + 10 * random.nextInt(5));
  }
 else   if (PRICE_TIER3.contains(itemName)) {
    return (short)(130 + 5 * random.nextInt(5));
  }
 else   if (PRICE_TIER4.contains(itemName)) {
    return (short)(170 + 10 * random.nextInt(5));
  }
  return (short)(10 + 10 * random.nextInt(25) + 1);
}",0.9761694616063548
174708,"private static void updateChestContents(GameObject objectToModify,GameObjectId itemLocationData,GameObjectId itemNewContentsData,boolean itemChest){
  WriteByteOperation puzzleFlag=objectToModify.getWriteByteOperations().get(1);
  objectToModify.getWriteByteOperations().clear();
  if (itemChest) {
    boolean nonShrineMap=Settings.isReplaceMapsWithWeights() && itemNewContentsData.getInventoryArg() == 70 && itemNewContentsData.getWorldFlag() != 218;
    if (nonShrineMap) {
      objectToModify.getArgs().set(0,(short)2);
    }
 else {
      objectToModify.getArgs().set(0,(short)(itemNewContentsData.getInventoryArg() + 11));
    }
    objectToModify.getArgs().set(1,(short)1);
    if (Settings.isCoinChestGraphics()) {
      objectToModify.getArgs().set(2,(short)0);
    }
 else {
      objectToModify.getArgs().set(2,(short)1);
    }
    int newChestWorldFlag=nonShrineMap ? nextReplacedItemFlag : itemNewContentsData.getWorldFlag();
    for (    TestByteOperation flagTest : objectToModify.getTestByteOperations()) {
      if (flagTest.getIndex() == itemLocationData.getWorldFlag()) {
        flagTest.setIndex(newChestWorldFlag);
      }
    }
    WriteByteOperation updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    objectToModify.getWriteByteOperations().add(puzzleFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(1);
    objectToModify.getWriteByteOperations().add(updateFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    if (nonShrineMap) {
      nextReplacedItemFlag+=1;
    }
  }
 else {
    objectToModify.getArgs().set(0,(short)1);
    objectToModify.getArgs().set(1,itemNewContentsData.getInventoryArg());
    objectToModify.getArgs().set(2,(short)0);
    for (    TestByteOperation flagTest : objectToModify.getTestByteOperations()) {
      if (flagTest.getIndex() == itemLocationData.getWorldFlag()) {
        flagTest.setIndex(itemNewContentsData.getWorldFlag());
      }
    }
    WriteByteOperation updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    objectToModify.getWriteByteOperations().add(puzzleFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ADD_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(1);
    objectToModify.getWriteByteOperations().add(updateFlag);
  }
}","private static void updateChestContents(GameObject objectToModify,GameObjectId itemLocationData,GameObjectId itemNewContentsData,boolean itemChest){
  WriteByteOperation puzzleFlag=objectToModify.getWriteByteOperations().get(1);
  objectToModify.getWriteByteOperations().clear();
  if (itemChest) {
    boolean nonShrineMap=Settings.isReplaceMapsWithWeights() && itemNewContentsData.getInventoryArg() == 70 && itemNewContentsData.getWorldFlag() != 218;
    if (nonShrineMap) {
      objectToModify.getArgs().set(0,(short)2);
    }
 else {
      objectToModify.getArgs().set(0,(short)(itemNewContentsData.getInventoryArg() + 11));
    }
    objectToModify.getArgs().set(1,(short)1);
    if (Settings.isCoinChestGraphics()) {
      objectToModify.getArgs().set(2,(short)0);
    }
 else {
      objectToModify.getArgs().set(2,(short)1);
    }
    int newChestWorldFlag=nonShrineMap ? nextReplacedItemFlag : itemNewContentsData.getWorldFlag();
    for (    TestByteOperation flagTest : objectToModify.getTestByteOperations()) {
      if (flagTest.getIndex() == itemLocationData.getWorldFlag()) {
        flagTest.setIndex(newChestWorldFlag);
      }
    }
    WriteByteOperation updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    objectToModify.getWriteByteOperations().add(puzzleFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    if (nonShrineMap) {
      updateFlag.setValue(2);
    }
 else {
      updateFlag.setValue(1);
    }
    objectToModify.getWriteByteOperations().add(updateFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(newChestWorldFlag);
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    if (nonShrineMap) {
      nextReplacedItemFlag+=1;
    }
  }
 else {
    objectToModify.getArgs().set(0,(short)1);
    objectToModify.getArgs().set(1,itemNewContentsData.getInventoryArg());
    objectToModify.getArgs().set(2,(short)0);
    for (    TestByteOperation flagTest : objectToModify.getTestByteOperations()) {
      if (flagTest.getIndex() == itemLocationData.getWorldFlag()) {
        flagTest.setIndex(itemNewContentsData.getWorldFlag());
      }
    }
    WriteByteOperation updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    objectToModify.getWriteByteOperations().add(puzzleFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ASSIGN_FLAG);
    updateFlag.setIndex(itemNewContentsData.getWorldFlag());
    updateFlag.setValue(2);
    objectToModify.getWriteByteOperations().add(updateFlag);
    updateFlag=new WriteByteOperation();
    updateFlag.setOp(ByteOp.ADD_FLAG);
    updateFlag.setIndex(119);
    updateFlag.setValue(1);
    objectToModify.getWriteByteOperations().add(updateFlag);
  }
}",0.9820777160983346
174709,"public static void updateBlock(String itemLocation,String randomizedContents){
  Map<String,GameObjectId> nameToDataMap=DataFromFile.getMapOfItemToUsefulIdentifyingRcdData();
  GameObjectId itemNewContentsData=nameToDataMap.get(randomizedContents);
  GameObjectId itemLocationData=nameToDataMap.get(itemLocation);
  List<Block> blocksToModify=mapOfChestIdentifyingInfoToBlock.get(nameToDataMap.get(itemLocation));
  for (  Block block : blocksToModify) {
    for (    BlockContents blockContents : block.getBlockContents()) {
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData flagData=(BlockFlagData)blockContents;
        if (flagData.getWorldFlag() == itemLocationData.getWorldFlag()) {
          flagData.setWorldFlag((short)itemNewContentsData.getWorldFlag());
          flagData.setFlagValue((short)2);
        }
 else         if (flagData.getWorldFlag() == 552) {
          flagData.setWorldFlag((short)itemNewContentsData.getWorldFlag());
          flagData.setFlagValue((short)2);
        }
      }
 else       if (blockContents instanceof BlockItemData) {
        BlockItemData itemData=(BlockItemData)blockContents;
        if (itemData.getItemData() == itemLocationData.getInventoryArg()) {
          itemData.setItemData(itemNewContentsData.getInventoryArg());
        }
      }
    }
  }
}","public static void updateBlock(String itemLocation,String randomizedContents){
  Map<String,GameObjectId> nameToDataMap=DataFromFile.getMapOfItemToUsefulIdentifyingRcdData();
  GameObjectId itemNewContentsData=nameToDataMap.get(randomizedContents);
  GameObjectId itemLocationData=nameToDataMap.get(itemLocation);
  List<Block> blocksToModify=mapOfChestIdentifyingInfoToBlock.get(nameToDataMap.get(itemLocation));
  for (  Block block : blocksToModify) {
    for (    BlockContents blockContents : block.getBlockContents()) {
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData flagData=(BlockFlagData)blockContents;
        if (flagData.getWorldFlag() == itemLocationData.getWorldFlag()) {
          if (flagData.getWorldFlag() == 209) {
            flagData.setFlagValue((short)1);
          }
 else {
            flagData.setFlagValue((short)2);
          }
          flagData.setWorldFlag((short)itemNewContentsData.getWorldFlag());
        }
 else         if (flagData.getWorldFlag() == 552) {
          flagData.setWorldFlag((short)itemNewContentsData.getWorldFlag());
          flagData.setFlagValue((short)2);
        }
      }
 else       if (blockContents instanceof BlockItemData) {
        BlockItemData itemData=(BlockItemData)blockContents;
        if (itemData.getItemData() == itemLocationData.getInventoryArg()) {
          itemData.setItemData(itemNewContentsData.getInventoryArg());
        }
      }
    }
  }
}",0.923353724361281
174710,"private GameDataTracker(){
  nextReplacedItemFlag=2708;
}","private GameDataTracker(){
}",0.6588235294117647
174711,"public static void writeShopInventory(ShopBlock shopBlock,String shopItem1,String shopItem2,String shopItem3,ShopItemPriceCountRandomizer priceCountRandomizer){
  short shopItem1Flag=getFlag(shopItem1);
  short shopItem2Flag=getFlag(shopItem2);
  short shopItem3Flag=getFlag(shopItem3);
  shopBlock.getInventoryItemArgsList().getData().clear();
  shopBlock.getInventoryItemArgsList().getData().add(getInventoryItemArg(shopItem1));
  shopBlock.getInventoryItemArgsList().getData().add(getInventoryItemArg(shopItem2));
  shopBlock.getInventoryItemArgsList().getData().add(getInventoryItemArg(shopItem3));
  if (priceCountRandomizer == null) {
    List<Short> newCounts=new ArrayList<>();
    if (""String_Node_Str"".equals(shopItem1) || shopItem1.endsWith(""String_Node_Str"")) {
      newCounts.add(shopBlock.getInventoryCountList().getData().get(0));
    }
 else {
      newCounts.add((short)1);
    }
    if (""String_Node_Str"".equals(shopItem2) || shopItem2.endsWith(""String_Node_Str"")) {
      newCounts.add(shopBlock.getInventoryCountList().getData().get(1));
    }
 else {
      newCounts.add((short)1);
    }
    if (""String_Node_Str"".equals(shopItem3) || shopItem3.endsWith(""String_Node_Str"")) {
      newCounts.add(shopBlock.getInventoryCountList().getData().get(2));
    }
 else {
      newCounts.add((short)1);
    }
    shopBlock.getInventoryCountList().getData().clear();
    shopBlock.getInventoryCountList().getData().addAll(newCounts);
  }
 else {
    shopBlock.getInventoryPriceList().getData().clear();
    shopBlock.getInventoryCountList().getData().clear();
    Pair<Short,Short> itemPriceAndCount=priceCountRandomizer.getItemPriceAndCount(shopItem1);
    shopBlock.getInventoryPriceList().getData().add(itemPriceAndCount.getKey());
    shopBlock.getInventoryCountList().getData().add(itemPriceAndCount.getValue());
    itemPriceAndCount=priceCountRandomizer.getItemPriceAndCount(shopItem2);
    shopBlock.getInventoryPriceList().getData().add(itemPriceAndCount.getKey());
    shopBlock.getInventoryCountList().getData().add(itemPriceAndCount.getValue());
    itemPriceAndCount=priceCountRandomizer.getItemPriceAndCount(shopItem3);
    shopBlock.getInventoryPriceList().getData().add(itemPriceAndCount.getKey());
    shopBlock.getInventoryCountList().getData().add(itemPriceAndCount.getValue());
  }
  shopBlock.getFlagList().getData().clear();
  shopBlock.getFlagList().getData().add(shopItem1Flag);
  shopBlock.getFlagList().getData().add(shopItem2Flag);
  shopBlock.getFlagList().getData().add(shopItem3Flag);
  if (shopBlock.getBlockNumber() == 185) {
    if (!""String_Node_Str"".equals(shopItem1) || !shopItem1.endsWith(""String_Node_Str"")) {
      addLittleBrotherShopTimer(shopItem1Flag);
    }
    if (!""String_Node_Str"".equals(shopItem2) || !shopItem2.endsWith(""String_Node_Str"")) {
      addLittleBrotherShopTimer(shopItem2Flag);
    }
    if (!""String_Node_Str"".equals(shopItem3) || !shopItem3.endsWith(""String_Node_Str"")) {
      addLittleBrotherShopTimer(shopItem3Flag);
    }
  }
 else {
    shopBlock.getExitFlagList().getData().clear();
    shopBlock.getExitFlagList().getData().add(shopItem1Flag);
    shopBlock.getExitFlagList().getData().add(shopItem2Flag);
    shopBlock.getExitFlagList().getData().add(shopItem3Flag);
  }
  updateAskItemName(shopBlock.getString(3),shopItem1);
  updateAskItemName(shopBlock.getString(4),shopItem2);
  updateAskItemName(shopBlock.getString(5),shopItem3);
  List<Short> bunemonData=shopBlock.getBunemonText().getData();
  bunemonData.clear();
  updateBunemonText(bunemonData,shopItem1);
  bunemonData.add((short)32);
  bunemonData.add((short)262);
  bunemonData.add((short)32);
  updateBunemonText(bunemonData,shopItem2);
  bunemonData.add((short)32);
  bunemonData.add((short)262);
  bunemonData.add((short)32);
  updateBunemonText(bunemonData,shopItem3);
  if (shopBlock.getBlockNumber() == 185) {
  }
}","public static void writeShopInventory(ShopBlock shopBlock,String shopItem1,String shopItem2,String shopItem3,ShopItemPriceCountRandomizer priceCountRandomizer){
  short shopItem1Flag=getFlag(shopItem1);
  short shopItem2Flag=getFlag(shopItem2);
  short shopItem3Flag=getFlag(shopItem3);
  shopBlock.getInventoryItemArgsList().getData().clear();
  shopBlock.getInventoryItemArgsList().getData().add(getInventoryItemArg(shopItem1));
  shopBlock.getInventoryItemArgsList().getData().add(getInventoryItemArg(shopItem2));
  shopBlock.getInventoryItemArgsList().getData().add(getInventoryItemArg(shopItem3));
  if (priceCountRandomizer == null) {
    List<Short> newCounts=new ArrayList<>();
    if (""String_Node_Str"".equals(shopItem1) || shopItem1.endsWith(""String_Node_Str"")) {
      newCounts.add(shopBlock.getInventoryCountList().getData().get(0));
    }
 else {
      newCounts.add((short)1);
    }
    if (""String_Node_Str"".equals(shopItem2) || shopItem2.endsWith(""String_Node_Str"")) {
      newCounts.add(shopBlock.getInventoryCountList().getData().get(1));
    }
 else {
      newCounts.add((short)1);
    }
    if (""String_Node_Str"".equals(shopItem3) || shopItem3.endsWith(""String_Node_Str"")) {
      newCounts.add(shopBlock.getInventoryCountList().getData().get(2));
    }
 else {
      newCounts.add((short)1);
    }
    shopBlock.getInventoryCountList().getData().clear();
    shopBlock.getInventoryCountList().getData().addAll(newCounts);
  }
 else {
    shopBlock.getInventoryPriceList().getData().clear();
    shopBlock.getInventoryCountList().getData().clear();
    Pair<Short,Short> itemPriceAndCount=priceCountRandomizer.getItemPriceAndCount(shopItem1);
    shopBlock.getInventoryPriceList().getData().add(itemPriceAndCount.getKey());
    shopBlock.getInventoryCountList().getData().add(itemPriceAndCount.getValue());
    itemPriceAndCount=priceCountRandomizer.getItemPriceAndCount(shopItem2);
    shopBlock.getInventoryPriceList().getData().add(itemPriceAndCount.getKey());
    shopBlock.getInventoryCountList().getData().add(itemPriceAndCount.getValue());
    itemPriceAndCount=priceCountRandomizer.getItemPriceAndCount(shopItem3);
    shopBlock.getInventoryPriceList().getData().add(itemPriceAndCount.getKey());
    shopBlock.getInventoryCountList().getData().add(itemPriceAndCount.getValue());
  }
  shopBlock.getFlagList().getData().clear();
  shopBlock.getFlagList().getData().add(shopItem1Flag);
  shopBlock.getFlagList().getData().add(shopItem2Flag);
  shopBlock.getFlagList().getData().add(shopItem3Flag);
  if (shopBlock.getBlockNumber() == 185) {
    if (!""String_Node_Str"".equals(shopItem1) || !shopItem1.endsWith(""String_Node_Str"")) {
      addLittleBrotherShopTimer(shopItem1Flag);
    }
    if (!""String_Node_Str"".equals(shopItem2) || !shopItem2.endsWith(""String_Node_Str"")) {
      addLittleBrotherShopTimer(shopItem2Flag);
    }
    if (!""String_Node_Str"".equals(shopItem3) || !shopItem3.endsWith(""String_Node_Str"")) {
      addLittleBrotherShopTimer(shopItem3Flag);
    }
  }
 else {
    shopBlock.getExitFlagList().getData().clear();
    shopBlock.getExitFlagList().getData().add(shopItem1Flag);
    shopBlock.getExitFlagList().getData().add(shopItem2Flag);
    shopBlock.getExitFlagList().getData().add(shopItem3Flag);
  }
  if (shopBlock.getBlockNumber() == 490) {
    BlockStringData blockStringData=shopBlock.getString(6);
    blockStringData.getData().clear();
    blockStringData.getData().addAll(Arrays.asList((short)70,(short)8,(short)297,(short)315,(short)308,(short)321,(short)318,(short)326,(short)32,(short)320,(short)328,(short)310,(short)315,(short)264));
  }
  updateAskItemName(shopBlock.getString(3),shopItem1);
  updateAskItemName(shopBlock.getString(4),shopItem2);
  updateAskItemName(shopBlock.getString(5),shopItem3);
  List<Short> bunemonData=shopBlock.getBunemonText().getData();
  bunemonData.clear();
  updateBunemonText(bunemonData,shopItem1);
  bunemonData.add((short)32);
  bunemonData.add((short)262);
  bunemonData.add((short)32);
  updateBunemonText(bunemonData,shopItem2);
  bunemonData.add((short)32);
  bunemonData.add((short)262);
  bunemonData.add((short)32);
  updateBunemonText(bunemonData,shopItem3);
  if (shopBlock.getBlockNumber() == 185) {
  }
}",0.9567260138476756
174712,"public boolean validRequirements(String item,String location){
  if (location.contains(""String_Node_Str"")) {
    location=location.substring(0,location.indexOf(""String_Node_Str"") + 1);
  }
  NodeWithRequirements node=mapOfNodeNameToRequirementsObject.get(location);
  if (node == null) {
    FileUtils.log(""String_Node_Str"" + item);
  }
  if (item.contains(""String_Node_Str"")) {
    item=""String_Node_Str"";
  }
 else   if (item.contains(""String_Node_Str"")) {
    item=""String_Node_Str"";
  }
  return mapOfNodeNameToRequirementsObject.get(location).canContainItem(item);
}","public boolean validRequirements(String item,String location){
  if (location.contains(""String_Node_Str"")) {
    location=location.substring(0,location.indexOf(""String_Node_Str"") + 1);
  }
  NodeWithRequirements node=mapOfNodeNameToRequirementsObject.get(location);
  if (node == null) {
    FileUtils.log(""String_Node_Str"" + item);
  }
  if (item.contains(""String_Node_Str"")) {
    item=""String_Node_Str"";
  }
 else   if (item.contains(""String_Node_Str"")) {
    item=""String_Node_Str"";
  }
 else   if (item.contains(""String_Node_Str"")) {
    if (DataFromFile.LOCATIONS_RELATED_TO_BLOCKS.contains(location) && !""String_Node_Str"".equals(location)) {
      return false;
    }
    if (""String_Node_Str"".equals(location) || ""String_Node_Str"".equals(location) || ""String_Node_Str"".equals(location)) {
      return false;
    }
  }
  return mapOfNodeNameToRequirementsObject.get(location).canContainItem(item);
}",0.7726657645466847
174713,"public void updateFiles() throws Exception {
  List<String> locationsRelatedToBlocks=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  Map.Entry<String,String> locationAndItem : mapOfItemLocationToItem.entrySet()) {
    if (!locationAndItem.getKey().equals(locationAndItem.getValue())) {
      if (locationsRelatedToBlocks.contains(locationAndItem.getKey())) {
        GameDataTracker.updateBlock(locationAndItem.getKey(),locationAndItem.getValue());
      }
      GameDataTracker.writeLocationContents(locationAndItem.getKey(),locationAndItem.getValue());
    }
  }
}","public void updateFiles() throws Exception {
  for (  Map.Entry<String,String> locationAndItem : mapOfItemLocationToItem.entrySet()) {
    if (!locationAndItem.getKey().equals(locationAndItem.getValue())) {
      if (DataFromFile.LOCATIONS_RELATED_TO_BLOCKS.contains(locationAndItem.getKey())) {
        GameDataTracker.updateBlock(locationAndItem.getKey(),locationAndItem.getValue());
      }
      GameDataTracker.writeLocationContents(locationAndItem.getKey(),locationAndItem.getValue());
    }
  }
}",0.4907563025210084
174714,"public short getPrice(String itemName){
  if (""String_Node_Str"".equals(itemName)) {
    if (!normalPriceWeightsPlaced) {
      normalPriceWeightsPlaced=true;
      return 10;
    }
    int priceRoll=random.nextInt(20);
    if (priceRoll == 0 || priceRoll == 1) {
      return 15;
    }
    if (priceRoll == 2) {
      return 20;
    }
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 20;
    }
    return 25;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 2) {
      return 40;
    }
    if (priceRoll == 2) {
      return 45;
    }
    return 50;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 100;
    }
    if (priceRoll == 3) {
      return 80;
    }
    return 110;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(2);
    if (priceRoll == 0) {
      return 50;
    }
    return 55;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 4) {
      return 30;
    }
    return 40;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 3) {
      return 400;
    }
    return 350;
  }
  if (itemName.contains(""String_Node_Str"") || USELESS_ITEMS.contains(itemName)) {
    return (short)(20 + 10 * random.nextInt(5));
  }
  if (itemName.contains(""String_Node_Str"")) {
    return (short)(100 + 10 * random.nextInt(6));
  }
  if (itemName.contains(""String_Node_Str"")) {
    return (short)(100 + 50 * random.nextInt(3));
  }
  if (""String_Node_Str"".equals(itemName)) {
    return (short)(5 + 5 * random.nextInt(3));
  }
  if (""String_Node_Str"".equals(itemName) || ""String_Node_Str"".equals(itemName) || ""String_Node_Str"".equals(itemName)) {
    return (short)(80 + 10 * random.nextInt(5));
  }
  if (""String_Node_Str"".equals(itemName)) {
    return (short)(150 + 50 * random.nextInt(3));
  }
  if (""String_Node_Str"".equals(itemName)) {
    return (short)(100 + 50 * random.nextInt(3));
  }
  if (""String_Node_Str"".equals(itemName)) {
    return (short)(40 + 5 * random.nextInt(3));
  }
  if (itemName.equals(""String_Node_Str"") || itemName.equals(""String_Node_Str"") || itemName.equals(""String_Node_Str"")|| (""String_Node_Str"".equals(itemName) && Settings.getEnabledGlitches().contains(""String_Node_Str""))) {
    return (short)(30 + 10 * random.nextInt(5));
  }
  if (PROGRESSION_ITEMS.contains(itemName)) {
    return (short)(10 + 10 * random.nextInt(8));
  }
  if (PROGRESSION_ITEMS_WITH_UTILITY.contains(itemName)) {
    return (short)(50 + 5 * random.nextInt(11));
  }
  if (LUXURY_ITEMS.contains(itemName)) {
    return (short)(150 + 30 * random.nextInt(6));
  }
  if (USELESS_ITEMS.contains(itemName)) {
    return (short)(20 + 20 * random.nextInt(5));
  }
  return (short)(10 + 10 * random.nextInt(25) + 1);
}","public short getPrice(String itemName){
  if (""String_Node_Str"".equals(itemName)) {
    if (!normalPriceWeightsPlaced) {
      normalPriceWeightsPlaced=true;
      return 10;
    }
    int priceRoll=random.nextInt(20);
    if (priceRoll == 0 || priceRoll == 1) {
      return 15;
    }
    if (priceRoll == 2) {
      return 20;
    }
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return 10;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 20;
    }
    return 25;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 2) {
      return 40;
    }
    if (priceRoll == 2) {
      return 45;
    }
    return 50;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 3) {
      return 100;
    }
    if (priceRoll == 3) {
      return 80;
    }
    return 110;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(2);
    if (priceRoll == 0) {
      return 50;
    }
    return 55;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(5);
    if (priceRoll < 4) {
      return 30;
    }
    return 40;
  }
  if (""String_Node_Str"".equals(itemName)) {
    int priceRoll=random.nextInt(4);
    if (priceRoll < 3) {
      return 400;
    }
    return 350;
  }
  if (itemName.contains(""String_Node_Str"") || USELESS_ITEMS.contains(itemName)) {
    return (short)(20 + 10 * random.nextInt(5));
  }
  if (itemName.contains(""String_Node_Str"")) {
    return (short)(100 + 10 * random.nextInt(6));
  }
  if (itemName.contains(""String_Node_Str"")) {
    return (short)(100 + 50 * random.nextInt(3));
  }
  if (""String_Node_Str"".equals(itemName)) {
    return (short)(5 + 5 * random.nextInt(3));
  }
  if (""String_Node_Str"".equals(itemName) || ""String_Node_Str"".equals(itemName) || ""String_Node_Str"".equals(itemName)) {
    return (short)(80 + 10 * random.nextInt(5));
  }
  if (""String_Node_Str"".equals(itemName)) {
    int randomRoll=random.nextInt(5);
    if (randomRoll < 3) {
      return 250;
    }
    if (randomRoll == 3) {
      return 275;
    }
    return 300;
  }
  if (""String_Node_Str"".equals(itemName)) {
    return (short)(150 + 10 * random.nextInt(6));
  }
  if (""String_Node_Str"".equals(itemName)) {
    return (short)(40 + 5 * random.nextInt(3));
  }
  if (itemName.equals(""String_Node_Str"") || itemName.equals(""String_Node_Str"") || itemName.equals(""String_Node_Str"")|| (""String_Node_Str"".equals(itemName) && Settings.getEnabledGlitches().contains(""String_Node_Str""))|| PROGRESSION_ITEMS.contains(itemName)) {
    int randomRoll=random.nextInt(8);
    if (randomRoll < 2) {
      return 30;
    }
    if (randomRoll == 2) {
      return 50;
    }
    if (randomRoll == 3) {
      return 60;
    }
    if (randomRoll == 4) {
      return 70;
    }
    return 80;
  }
  if (PROGRESSION_ITEMS_WITH_UTILITY.contains(itemName)) {
    return (short)(50 + 5 * random.nextInt(11));
  }
  if (LUXURY_ITEMS.contains(itemName)) {
    return (short)(150 + 30 * random.nextInt(6));
  }
  if (USELESS_ITEMS.contains(itemName)) {
    return (short)(20 + 20 * random.nextInt(5));
  }
  return (short)(10 + 10 * random.nextInt(25) + 1);
}",0.9027043829654958
174715,"public static void addBlock(Block block){
  if (block.getBlockNumber() == 37) {
    short inventoryArg=(short)(100);
    int worldFlag=241;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 245) {
    short inventoryArg=(short)(30);
    int worldFlag=2702;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 247) {
    short inventoryArg=(short)(50);
    int worldFlag=2706;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 249) {
    short inventoryArg=(short)(22);
    int worldFlag=152;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 364) {
    short inventoryArg=(short)(86);
    int worldFlag=227;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    for (int i=0; i < block.getBlockContents().size(); i++) {
      BlockContents blockContents=block.getBlockContents().get(i);
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData blockFlagData=(BlockFlagData)blockContents;
        if (blockFlagData.getWorldFlag() == 227) {
          blockFlagData.setFlagValue((short)2);
        }
      }
    }
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 369) {
    Integer blockContentIndex=null;
    for (int i=0; i < block.getBlockContents().size(); i++) {
      BlockContents blockContents=block.getBlockContents().get(i);
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData blockFlagData=(BlockFlagData)blockContents;
        if (blockFlagData.getWorldFlag() == 740) {
          blockContentIndex=i;
        }
      }
    }
    block.getBlockContents().add(blockContentIndex + 1,new BlockFlagData((short)0x0040,(short)2796,(short)2));
    block.getBlockContents().add(blockContentIndex + 1,new BlockFlagData((short)0x0040,(short)807,(short)1));
  }
 else   if (block.getBlockNumber() == 371) {
    short inventoryArg=(short)(73);
    int worldFlag=261;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
    Integer flagIndex=null;
    for (int i=0; i < block.getBlockContents().size(); i++) {
      BlockContents blockContents=block.getBlockContents().get(i);
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData blockFlagData=(BlockFlagData)blockContents;
        if (blockFlagData.getWorldFlag() == 261) {
          blockFlagData.setWorldFlag((short)2797);
          blockFlagData.setFlagValue((short)2);
          flagIndex=i;
        }
      }
    }
    BlockFlagData blockFlagData=new BlockFlagData((short)0x0040,(short)261,(short)2);
    block.getBlockContents().add(flagIndex,blockFlagData);
  }
 else   if (block.getBlockNumber() == 397) {
    short inventoryArg=(short)(54);
    int worldFlag=2703;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 480) {
    CheckBlock checkBlock=(CheckBlock)block;
    Integer cmdToRemoveIndex1=null;
    Integer cmdToRemoveIndex2=null;
    for (int i=0; i < checkBlock.getFlagCheckReferences().size(); i++) {
      BlockListData blockListData=checkBlock.getFlagCheckReferences().get(i);
      if (blockListData.getData().get(2) == 1049) {
        cmdToRemoveIndex1=i;
      }
 else       if (blockListData.getData().get(2) == 371) {
        cmdToRemoveIndex2=i;
      }
    }
    checkBlock.getFlagCheckReferences().remove((int)cmdToRemoveIndex1);
    checkBlock.getFlagCheckReferences().remove((int)cmdToRemoveIndex2);
    BlockListData blockListData=new BlockListData((short)78,(short)4);
    blockListData.getData().add((short)2797);
    blockListData.getData().add((short)1);
    blockListData.getData().add((short)371);
    blockListData.getData().add((short)0);
    checkBlock.getFlagCheckReferences().add(0,blockListData);
    blockListData=new BlockListData((short)78,(short)4);
    blockListData.getData().add((short)2796);
    blockListData.getData().add((short)1);
    blockListData.getData().add((short)369);
    blockListData.getData().add((short)0);
    checkBlock.getFlagCheckReferences().add(0,blockListData);
  }
 else   if (block.getBlockNumber() == 482) {
    CheckBlock checkBlock=(CheckBlock)block;
    Integer cmdToRemoveIndex=null;
    for (int i=0; i < checkBlock.getFlagCheckReferences().size(); i++) {
      BlockListData blockListData=checkBlock.getFlagCheckReferences().get(i);
      if (blockListData.getData().get(2) == 373) {
        cmdToRemoveIndex=i;
      }
    }
    if (cmdToRemoveIndex != null) {
      checkBlock.getFlagCheckReferences().remove((int)cmdToRemoveIndex);
    }
  }
 else   if (block.getBlockNumber() == 486) {
    CheckBlock checkBlock=(CheckBlock)block;
    for (    BlockListData blockListData : checkBlock.getFlagCheckReferences()) {
      blockListData.getData().remove((int)blockListData.getData().size() - 1);
      blockListData.getData().add((short)0);
    }
  }
 else   if (block.getBlockNumber() == 716) {
    short inventoryArg=(short)(70);
    int worldFlag=209;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 1012) {
    short inventoryArg=(short)(74);
    int worldFlag=262;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
}","public static void addBlock(Block block){
  if (block.getBlockNumber() == 37) {
    short inventoryArg=(short)(100);
    int worldFlag=241;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 245) {
    short inventoryArg=(short)(30);
    int worldFlag=2702;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 247) {
    short inventoryArg=(short)(50);
    int worldFlag=2706;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 249) {
    short inventoryArg=(short)(22);
    int worldFlag=152;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 364) {
    short inventoryArg=(short)(86);
    int worldFlag=227;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    for (int i=0; i < block.getBlockContents().size(); i++) {
      BlockContents blockContents=block.getBlockContents().get(i);
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData blockFlagData=(BlockFlagData)blockContents;
        if (blockFlagData.getWorldFlag() == 227) {
          blockFlagData.setFlagValue((short)2);
        }
      }
    }
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 369) {
    Integer blockContentIndex=null;
    for (int i=0; i < block.getBlockContents().size(); i++) {
      BlockContents blockContents=block.getBlockContents().get(i);
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData blockFlagData=(BlockFlagData)blockContents;
        if (blockFlagData.getWorldFlag() == 740) {
          blockContentIndex=i;
        }
      }
    }
    block.getBlockContents().add(blockContentIndex + 1,new BlockFlagData((short)0x0040,(short)2796,(short)2));
    block.getBlockContents().add(blockContentIndex + 1,new BlockFlagData((short)0x0040,(short)807,(short)1));
  }
 else   if (block.getBlockNumber() == 371) {
    short inventoryArg=(short)(73);
    int worldFlag=261;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
    BlockFlagData blockFlagData;
    Integer flagIndexOfMulanaTalisman=null;
    for (int i=0; i < block.getBlockContents().size(); i++) {
      BlockContents blockContents=block.getBlockContents().get(i);
      if (blockContents instanceof BlockFlagData) {
        blockFlagData=(BlockFlagData)blockContents;
        if (blockFlagData.getWorldFlag() == 261) {
          blockFlagData.setWorldFlag((short)2797);
          blockFlagData.setFlagValue((short)2);
          flagIndexOfMulanaTalisman=i;
        }
      }
    }
    blockFlagData=new BlockFlagData((short)0x0040,(short)261,(short)2);
    block.getBlockContents().add(flagIndexOfMulanaTalisman,blockFlagData);
    Integer flagIndexToRemove=null;
    for (int i=0; i < block.getBlockContents().size(); i++) {
      BlockContents blockContents=block.getBlockContents().get(i);
      if (blockContents instanceof BlockFlagData) {
        blockFlagData=(BlockFlagData)blockContents;
        if (blockFlagData.getWorldFlag() == 530) {
          flagIndexToRemove=i;
        }
      }
    }
    if (flagIndexToRemove != null) {
      block.getBlockContents().remove((int)flagIndexToRemove);
    }
  }
 else   if (block.getBlockNumber() == 397) {
    short inventoryArg=(short)(54);
    int worldFlag=2703;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 480) {
    CheckBlock checkBlock=(CheckBlock)block;
    Integer cmdToRemoveIndex1=null;
    for (int i=0; i < checkBlock.getFlagCheckReferences().size(); i++) {
      BlockListData blockListData=checkBlock.getFlagCheckReferences().get(i);
      if (blockListData.getData().get(2) == 1049) {
        cmdToRemoveIndex1=i;
      }
    }
    checkBlock.getFlagCheckReferences().remove((int)cmdToRemoveIndex1);
    Integer cmdToRemoveIndex2=null;
    for (int i=0; i < checkBlock.getFlagCheckReferences().size(); i++) {
      BlockListData blockListData=checkBlock.getFlagCheckReferences().get(i);
      if (blockListData.getData().get(2) == 371) {
        cmdToRemoveIndex2=i;
      }
    }
    checkBlock.getFlagCheckReferences().remove((int)cmdToRemoveIndex2);
    BlockListData blockListData=new BlockListData((short)78,(short)4);
    blockListData.getData().add((short)2797);
    blockListData.getData().add((short)1);
    blockListData.getData().add((short)371);
    blockListData.getData().add((short)0);
    checkBlock.getFlagCheckReferences().add(0,blockListData);
    blockListData=new BlockListData((short)78,(short)4);
    blockListData.getData().add((short)2796);
    blockListData.getData().add((short)1);
    blockListData.getData().add((short)369);
    blockListData.getData().add((short)0);
    checkBlock.getFlagCheckReferences().add(0,blockListData);
  }
 else   if (block.getBlockNumber() == 482) {
    CheckBlock checkBlock=(CheckBlock)block;
    Integer cmdToRemoveIndex=null;
    for (int i=0; i < checkBlock.getFlagCheckReferences().size(); i++) {
      BlockListData blockListData=checkBlock.getFlagCheckReferences().get(i);
      if (blockListData.getData().get(2) == 373) {
        cmdToRemoveIndex=i;
      }
    }
    if (cmdToRemoveIndex != null) {
      checkBlock.getFlagCheckReferences().remove((int)cmdToRemoveIndex);
    }
  }
 else   if (block.getBlockNumber() == 486) {
    CheckBlock checkBlock=(CheckBlock)block;
    for (    BlockListData blockListData : checkBlock.getFlagCheckReferences()) {
      blockListData.getData().remove((int)blockListData.getData().size() - 1);
      blockListData.getData().add((short)0);
    }
  }
 else   if (block.getBlockNumber() == 716) {
    short inventoryArg=(short)(70);
    int worldFlag=209;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
 else   if (block.getBlockNumber() == 1012) {
    short inventoryArg=(short)(74);
    int worldFlag=262;
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<Block> blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    if (blocks == null) {
      mapOfChestIdentifyingInfoToBlock.put(gameObjectId,new ArrayList<>());
      blocks=mapOfChestIdentifyingInfoToBlock.get(gameObjectId);
    }
    blocks.add(block);
  }
}",0.94059101800086
174716,"public static void addObject(GameObject gameObject){
  if (gameObject.getId() == 0x2c) {
    short inventoryArg=(short)(gameObject.getArgs().get(0) - 11);
    int worldFlag=gameObject.getWriteByteOperations().get(0).getIndex();
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    if (objects == null) {
      mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
      objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    }
    objects.add(gameObject);
  }
 else   if (gameObject.getId() == 0x2f) {
    short chestArg=gameObject.getArgs().get(1);
    int worldFlag=gameObject.getWriteByteOperations().get(0).getIndex();
    GameObjectId gameObjectId=new GameObjectId(chestArg,worldFlag);
    if (chestArg == 4) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 292) {
          flagToRemoveIndex=i;
          break;
        }
      }
      gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
    }
    List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    if (objects == null) {
      mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
      objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    }
    objects.add(gameObject);
  }
 else   if (gameObject.getId() == 0xb5) {
    short itemArg=gameObject.getArgs().get(0);
    if (itemArg == 70) {
      GameObjectId gameObjectId=new GameObjectId((short)70,209);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (itemArg == 81) {
      GameObjectId gameObjectId=new GameObjectId((short)81,267);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
  }
 else   if (gameObject.getId() == 0xc3) {
    short itemArg=gameObject.getArgs().get(3);
    if (itemArg == 93 || itemArg == 94 || itemArg == 95) {
      short worldFlag;
      if (itemArg == 93) {
        worldFlag=234;
      }
 else       if (itemArg == 94) {
        worldFlag=235;
      }
 else {
        worldFlag=236;
      }
      GameObjectId gameObjectId=new GameObjectId((short)itemArg,worldFlag);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
  }
 else   if (gameObject.getId() == 0x12 || gameObject.getId() == 0x0e) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 335) {
        GameObjectId gameObjectId=new GameObjectId((short)96,335);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 219) {
        GameObjectId gameObjectId=new GameObjectId((short)70,219);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x9b) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 218) {
        GameObjectId gameObjectId=new GameObjectId((short)70,218);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 267) {
        GameObjectId gameObjectId=new GameObjectId((short)81,267);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
      }
    }
  }
 else   if (gameObject.getId() == 0x9c) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 552) {
        flagTest.setIndex(259);
        flagTest.setOp(ByteOp.FLAG_LTEQ);
        flagTest.setValue((byte)1);
        GameObjectId gameObjectId=new GameObjectId((short)71,259);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x6b) {
    Integer flagUpdateToRemove=null;
    for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
      if (gameObject.getWriteByteOperations().get(i).getIndex() == 810) {
        flagUpdateToRemove=i;
        break;
      }
    }
    if (flagUpdateToRemove != null) {
      gameObject.getWriteByteOperations().remove((int)flagUpdateToRemove);
    }
  }
 else   if (gameObject.getId() == 0x11) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 218) {
        GameObjectId gameObjectId=new GameObjectId((short)70,218);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x71 || gameObject.getId() == 0x33) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 180) {
        GameObjectId gameObjectId=new GameObjectId((short)51,180);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x08) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 229) {
        GameObjectId gameObjectId=new GameObjectId((short)88,229);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x9e) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 209) {
        GameObjectId gameObjectId=new GameObjectId((short)70,209);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0xa0) {
    if (gameObject.getArgs().get(4) == 34) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 742) {
          GameObjectId gameObjectId=new GameObjectId((short)76,742);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (gameObject.getArgs().get(4) == 185) {
      littleBrotherShopScreen=gameObject.getObjectContainer();
    }
 else     if (gameObject.getArgs().get(4) == 490) {
      GameObjectId gameObjectId=new GameObjectId((short)76,742);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
      addAltSurfaceShopItemTimer(gameObject.getObjectContainer());
    }
 else     if (gameObject.getArgs().get(4) == 693 || gameObject.getArgs().get(4) == 915) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 554) {
          flagTest.setIndex(152);
          GameObjectId gameObjectId=new GameObjectId((short)22,152);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (gameObject.getArgs().get(4) == 673) {
      GameObjectId gameObjectId=new GameObjectId((short)100,241);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (gameObject.getArgs().get(4) == 689 || gameObject.getArgs().get(4) == 690) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2702);
          if (flagTest.getValue() > 0 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_GTEQ);
          }
          GameObjectId gameObjectId=new GameObjectId((short)30,2702);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (gameObject.getArgs().get(4) == 691) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2706);
          if (flagTest.getValue() == 1 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
          }
          GameObjectId gameObjectId=new GameObjectId((short)50,2706);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (gameObject.getArgs().get(4) == 692) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2706);
          if (flagTest.getValue() == 1 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
          }
          GameObjectId gameObjectId=new GameObjectId((short)50,2706);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
      TestByteOperation pepperCheck=new TestByteOperation();
      pepperCheck.setIndex(2702);
      pepperCheck.setOp(ByteOp.FLAG_GTEQ);
      pepperCheck.setValue((byte)2);
      gameObject.getTestByteOperations().add(pepperCheck);
      GameObjectId gameObjectId=new GameObjectId((short)30,2702);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (gameObject.getArgs().get(4) == 484 || gameObject.getArgs().get(4) == 1019 || gameObject.getArgs().get(4) == 1080 || gameObject.getArgs().get(4) == 1081) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 537) {
          flagToRemoveIndex=i;
          break;
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
      if (gameObject.getArgs().get(4) == 484) {
        addDiaryTalismanConversationTimers(gameObject.getObjectContainer());
        xelpudScreen=gameObject.getObjectContainer();
      }
    }
 else     if (gameObject.getArgs().get(4) == 485) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        TestByteOperation flagTest=gameObject.getTestByteOperations().get(i);
        if (flagTest.getIndex() == 874) {
          flagToRemoveIndex=i;
        }
 else         if (flagTest.getIndex() == 123 && flagTest.getValue() == 56) {
          flagTest.setValue((byte)0);
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
      mulbrukScreen=gameObject.getObjectContainer();
    }
 else     if (gameObject.getArgs().get(4) == 1082 || gameObject.getArgs().get(4) == 1083 || gameObject.getArgs().get(4) == 924) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 874) {
          flagToRemoveIndex=i;
          break;
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
    }
  }
 else   if (gameObject.getId() == 0x93) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 241) {
        GameObjectId gameObjectId=new GameObjectId((short)100,241);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x0b) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 554 && flagUpdate.getValue() == 3) {
        for (        TestByteOperation flagTest : gameObject.getTestByteOperations()) {
          if (flagTest.getIndex() == 554 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp()) && flagTest.getValue() == 2) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            return;
          }
        }
      }
    }
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 260) {
        GameObjectId gameObjectId=new GameObjectId((short)72,260);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
 else       if (flagTest.getIndex() == 742) {
        GameObjectId gameObjectId=new GameObjectId((short)76,742);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
 else       if (flagTest.getIndex() == 123 && flagTest.getValue() == 56) {
        flagTest.setValue((byte)0);
      }
    }
  }
 else   if (gameObject.getId() == 0xbb) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 260) {
        GameObjectId gameObjectId=new GameObjectId((short)72,260);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
    }
  }
}","public static void addObject(GameObject gameObject){
  if (gameObject.getId() == 0x2c) {
    short inventoryArg=(short)(gameObject.getArgs().get(0) - 11);
    int worldFlag=gameObject.getWriteByteOperations().get(0).getIndex();
    GameObjectId gameObjectId=new GameObjectId(inventoryArg,worldFlag);
    List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    if (objects == null) {
      mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
      objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    }
    objects.add(gameObject);
  }
 else   if (gameObject.getId() == 0x2f) {
    short chestArg=gameObject.getArgs().get(1);
    int worldFlag=gameObject.getWriteByteOperations().get(0).getIndex();
    GameObjectId gameObjectId=new GameObjectId(chestArg,worldFlag);
    if (chestArg == 4) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 292) {
          flagToRemoveIndex=i;
          break;
        }
      }
      gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
    }
    List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    if (objects == null) {
      mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
      objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
    }
    objects.add(gameObject);
  }
 else   if (gameObject.getId() == 0xb5) {
    short itemArg=gameObject.getArgs().get(0);
    if (itemArg == 70) {
      GameObjectId gameObjectId=new GameObjectId((short)70,209);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (itemArg == 81) {
      GameObjectId gameObjectId=new GameObjectId((short)81,267);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
  }
 else   if (gameObject.getId() == 0xc3) {
    short itemArg=gameObject.getArgs().get(3);
    if (itemArg == 93 || itemArg == 94 || itemArg == 95) {
      short worldFlag;
      if (itemArg == 93) {
        worldFlag=234;
      }
 else       if (itemArg == 94) {
        worldFlag=235;
      }
 else {
        worldFlag=236;
      }
      GameObjectId gameObjectId=new GameObjectId((short)itemArg,worldFlag);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
  }
 else   if (gameObject.getId() == 0x12 || gameObject.getId() == 0x0e) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 335) {
        GameObjectId gameObjectId=new GameObjectId((short)96,335);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 219) {
        GameObjectId gameObjectId=new GameObjectId((short)70,219);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x9b) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 218) {
        GameObjectId gameObjectId=new GameObjectId((short)70,218);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 267) {
        GameObjectId gameObjectId=new GameObjectId((short)81,267);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
      }
    }
  }
 else   if (gameObject.getId() == 0x9c) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 552) {
        flagTest.setIndex(259);
        flagTest.setOp(ByteOp.FLAG_LTEQ);
        flagTest.setValue((byte)1);
        GameObjectId gameObjectId=new GameObjectId((short)71,259);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x6b) {
    Integer flagUpdateToRemove=null;
    for (int i=0; i < gameObject.getWriteByteOperations().size(); i++) {
      if (gameObject.getWriteByteOperations().get(i).getIndex() == 810) {
        flagUpdateToRemove=i;
        break;
      }
    }
    if (flagUpdateToRemove != null) {
      gameObject.getWriteByteOperations().remove((int)flagUpdateToRemove);
    }
  }
 else   if (gameObject.getId() == 0x11) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 218) {
        GameObjectId gameObjectId=new GameObjectId((short)70,218);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x71 || gameObject.getId() == 0x33) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 180) {
        GameObjectId gameObjectId=new GameObjectId((short)51,180);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x08) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 229) {
        GameObjectId gameObjectId=new GameObjectId((short)88,229);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x9e) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 209) {
        GameObjectId gameObjectId=new GameObjectId((short)70,209);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0xa0) {
    if (gameObject.getArgs().get(4) == 34) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 742) {
          GameObjectId gameObjectId=new GameObjectId((short)76,742);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (gameObject.getArgs().get(4) == 185) {
      littleBrotherShopScreen=gameObject.getObjectContainer();
    }
 else     if (gameObject.getArgs().get(4) == 490) {
      GameObjectId gameObjectId=new GameObjectId((short)76,742);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
      addAltSurfaceShopItemTimer(gameObject.getObjectContainer());
    }
 else     if (gameObject.getArgs().get(4) == 693 || gameObject.getArgs().get(4) == 915) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 554) {
          flagTest.setIndex(152);
          GameObjectId gameObjectId=new GameObjectId((short)22,152);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (gameObject.getArgs().get(4) == 673) {
      GameObjectId gameObjectId=new GameObjectId((short)100,241);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (gameObject.getArgs().get(4) == 689 || gameObject.getArgs().get(4) == 690) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2702);
          if (flagTest.getValue() > 0 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_GTEQ);
          }
          GameObjectId gameObjectId=new GameObjectId((short)30,2702);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (gameObject.getArgs().get(4) == 691) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2706);
          if (flagTest.getValue() == 1 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
          }
          GameObjectId gameObjectId=new GameObjectId((short)50,2706);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
    }
 else     if (gameObject.getArgs().get(4) == 692) {
      for (      TestByteOperation flagTest : gameObject.getTestByteOperations()) {
        if (flagTest.getIndex() == 552) {
          flagTest.setIndex(2706);
          if (flagTest.getValue() == 1 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp())) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
          }
          GameObjectId gameObjectId=new GameObjectId((short)50,2706);
          List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          if (objects == null) {
            mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
            objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
          }
          objects.add(gameObject);
          break;
        }
      }
      TestByteOperation pepperCheck=new TestByteOperation();
      pepperCheck.setIndex(2702);
      pepperCheck.setOp(ByteOp.FLAG_GTEQ);
      pepperCheck.setValue((byte)2);
      gameObject.getTestByteOperations().add(pepperCheck);
      GameObjectId gameObjectId=new GameObjectId((short)30,2702);
      List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      if (objects == null) {
        mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
        objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
      }
      objects.add(gameObject);
    }
 else     if (gameObject.getArgs().get(4) == 484 || gameObject.getArgs().get(4) == 1019 || gameObject.getArgs().get(4) == 1080 || gameObject.getArgs().get(4) == 1081) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 537) {
          flagToRemoveIndex=i;
          break;
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
      if (gameObject.getArgs().get(4) == 484) {
        addDiaryTalismanConversationTimers(gameObject.getObjectContainer());
        xelpudScreen=gameObject.getObjectContainer();
      }
    }
 else     if (gameObject.getArgs().get(4) == 485) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        TestByteOperation flagTest=gameObject.getTestByteOperations().get(i);
        if (flagTest.getIndex() == 874) {
          flagToRemoveIndex=i;
        }
 else         if (flagTest.getIndex() == 123 && flagTest.getValue() == 56) {
          flagTest.setValue((byte)0);
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
      mulbrukScreen=gameObject.getObjectContainer();
    }
 else     if (gameObject.getArgs().get(4) == 1082 || gameObject.getArgs().get(4) == 1083 || gameObject.getArgs().get(4) == 924) {
      Integer flagToRemoveIndex=null;
      for (int i=0; i < gameObject.getTestByteOperations().size(); i++) {
        if (gameObject.getTestByteOperations().get(i).getIndex() == 874) {
          flagToRemoveIndex=i;
          break;
        }
      }
      if (flagToRemoveIndex != null) {
        gameObject.getTestByteOperations().remove((int)flagToRemoveIndex);
      }
    }
  }
 else   if (gameObject.getId() == 0x93) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 241) {
        GameObjectId gameObjectId=new GameObjectId((short)100,241);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
 else       if (flagTest.getIndex() == 171) {
        GameObjectId gameObjectId=new GameObjectId((short)42,171);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        break;
      }
    }
  }
 else   if (gameObject.getId() == 0x0b) {
    for (    WriteByteOperation flagUpdate : gameObject.getWriteByteOperations()) {
      if (flagUpdate.getIndex() == 554 && flagUpdate.getValue() == 3) {
        for (        TestByteOperation flagTest : gameObject.getTestByteOperations()) {
          if (flagTest.getIndex() == 554 && ByteOp.FLAG_EQUALS.equals(flagTest.getOp()) && flagTest.getValue() == 2) {
            flagTest.setOp(ByteOp.FLAG_LTEQ);
            return;
          }
        }
      }
    }
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 260) {
        GameObjectId gameObjectId=new GameObjectId((short)72,260);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
 else       if (flagTest.getIndex() == 742) {
        GameObjectId gameObjectId=new GameObjectId((short)76,742);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
 else       if (flagTest.getIndex() == 123 && flagTest.getValue() == 56) {
        flagTest.setValue((byte)0);
      }
    }
  }
 else   if (gameObject.getId() == 0xbb) {
    for (    TestByteOperation flagTest : gameObject.getTestByteOperations()) {
      if (flagTest.getIndex() == 260) {
        GameObjectId gameObjectId=new GameObjectId((short)72,260);
        List<GameObject> objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        if (objects == null) {
          mapOfChestIdentifyingInfoToGameObject.put(gameObjectId,new ArrayList<>());
          objects=mapOfChestIdentifyingInfoToGameObject.get(gameObjectId);
        }
        objects.add(gameObject);
        return;
      }
    }
  }
}",0.9879857918930212
174717,"public CheckboxPanel(){
  super(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  fullItemAccess=new JCheckBox(""String_Node_Str"");
  fullItemAccess.setSelected(Settings.isFullItemAccess());
  add(fullItemAccess);
  enableDamageBoostRequirements=new JCheckBox(""String_Node_Str"");
  enableDamageBoostRequirements.setSelected(Settings.isRequireSoftwareComboForKeyFairy());
  add(enableDamageBoostRequirements);
  requireSoftwareComboForKeyFairy=new JCheckBox(""String_Node_Str"");
  requireSoftwareComboForKeyFairy.setSelected(Settings.isRequireSoftwareComboForKeyFairy());
  add(requireSoftwareComboForKeyFairy);
  randomizeForbiddenTreasure=new JCheckBox(""String_Node_Str"");
  randomizeForbiddenTreasure.setSelected(Settings.isRandomizeForbiddenTreasure());
  add(randomizeForbiddenTreasure);
  randomizeCoinChests=new JCheckBox(""String_Node_Str"");
  randomizeCoinChests.setSelected(Settings.isRandomizeCoinChests());
  add(randomizeCoinChests);
}","public CheckboxPanel(){
  super(new MigLayout(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  fullItemAccess=new JCheckBox(""String_Node_Str"");
  fullItemAccess.setSelected(Settings.isFullItemAccess());
  add(fullItemAccess);
  enableDamageBoostRequirements=new JCheckBox(""String_Node_Str"");
  enableDamageBoostRequirements.setSelected(Settings.isEnableDamageBoostRequirements());
  add(enableDamageBoostRequirements);
  requireSoftwareComboForKeyFairy=new JCheckBox(""String_Node_Str"");
  requireSoftwareComboForKeyFairy.setSelected(Settings.isRequireSoftwareComboForKeyFairy());
  add(requireSoftwareComboForKeyFairy);
  randomizeForbiddenTreasure=new JCheckBox(""String_Node_Str"");
  randomizeForbiddenTreasure.setSelected(Settings.isRandomizeForbiddenTreasure());
  add(randomizeForbiddenTreasure);
  randomizeCoinChests=new JCheckBox(""String_Node_Str"");
  randomizeCoinChests.setSelected(Settings.isRandomizeCoinChests());
  add(randomizeCoinChests);
}",0.9761904761904762
174718,"public static void readSettings() throws IOException {
  if (!(new File(""String_Node_Str"").exists())) {
    return;
  }
  BufferedReader reader;
  try {
    reader=new BufferedReader(new FileReader(""String_Node_Str""));
  }
 catch (  Exception ex) {
    FileUtils.log(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
    return;
  }
  if (reader == null) {
    return;
  }
  String line;
  String[] settingAndValue;
  List<String> enabledGlitches=new ArrayList<>();
  while ((line=reader.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (""String_Node_Str"".equals(settingAndValue[1])) {
        Settings.getInitiallyAvailableItems().add(settingAndValue[0]);
      }
      if (""String_Node_Str"".equals(settingAndValue[1])) {
        Settings.getNonRandomizedItems().add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (Boolean.valueOf(settingAndValue[1])) {
        enabledGlitches.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setShopRandomization(line.split(""String_Node_Str"")[1],false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setFullItemAccess(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRequireSoftwareComboForKeyFairy(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setEnableDamageBoostRequirements(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRandomizeForbiddenTreasure(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setLaMulanaBaseDir(line.substring(line.indexOf(""String_Node_Str"") + 1),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setBossDifficulty(line.split(""String_Node_Str"")[1],false);
    }
  }
  Settings.setEnabledGlitches(enabledGlitches,false);
}","public static void readSettings() throws IOException {
  if (!(new File(""String_Node_Str"").exists())) {
    return;
  }
  BufferedReader reader;
  try {
    reader=new BufferedReader(new FileReader(""String_Node_Str""));
  }
 catch (  Exception ex) {
    FileUtils.log(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
    return;
  }
  if (reader == null) {
    return;
  }
  String line;
  String[] settingAndValue;
  List<String> enabledGlitches=new ArrayList<>();
  Set<String> initiallyAvailableItems=new HashSet<>();
  Set<String> nonRandomizedItems=new HashSet<>();
  while ((line=reader.readLine()) != null) {
    if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (""String_Node_Str"".equals(settingAndValue[1])) {
        initiallyAvailableItems.add(settingAndValue[0]);
      }
      if (""String_Node_Str"".equals(settingAndValue[1])) {
        nonRandomizedItems.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      settingAndValue=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (Boolean.valueOf(settingAndValue[1])) {
        enabledGlitches.add(settingAndValue[0]);
      }
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setShopRandomization(line.split(""String_Node_Str"")[1],false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setFullItemAccess(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRequireSoftwareComboForKeyFairy(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setEnableDamageBoostRequirements(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setRandomizeForbiddenTreasure(Boolean.valueOf(line.split(""String_Node_Str"")[1]),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setLaMulanaBaseDir(line.substring(line.indexOf(""String_Node_Str"") + 1),false);
    }
 else     if (line.startsWith(""String_Node_Str"")) {
      Settings.setBossDifficulty(line.split(""String_Node_Str"")[1],false);
    }
  }
  Settings.setEnabledGlitches(enabledGlitches,false);
  Settings.setInitiallyAvailableItems(initiallyAvailableItems,false);
  Settings.setNonRandomizedItems(nonRandomizedItems,false);
}",0.9448688829238076
174719,"public static void main(String[] args){
  if (true) {
    Settings.startingSeed=401636804;
    Settings.randomizeShops=true;
    Settings.nonRandomizedItems.add(""String_Node_Str"");
    Settings.laMulanaBaseDir=""String_Node_Str"";
    Settings.rcdFileLocation=""String_Node_Str"";
    Settings.datFileLocation=""String_Node_Str"";
    File directory=new File(Long.toString(Settings.startingSeed));
    directory.mkdir();
    try {
      doTheThing();
    }
 catch (    Exception ex) {
      FileUtils.log(""String_Node_Str"" + ex.getMessage());
      ex.printStackTrace();
    }
    FileUtils.closeAll();
  }
 else {
    SwingUtilities.invokeLater(new RandomizerRunnable());
  }
}","public static void main(String[] args){
  if (true) {
    Settings.randomizeShops=true;
    Settings.nonRandomizedItems.add(""String_Node_Str"");
    Settings.laMulanaBaseDir=""String_Node_Str"";
    Settings.rcdFileLocation=""String_Node_Str"";
    Settings.datFileLocation=""String_Node_Str"";
    File directory=new File(Long.toString(Settings.startingSeed));
    directory.mkdir();
    try {
      doTheThing();
    }
 catch (    Exception ex) {
      FileUtils.log(""String_Node_Str"" + ex.getMessage());
      ex.printStackTrace();
    }
    FileUtils.closeAll();
  }
 else {
    SwingUtilities.invokeLater(new RandomizerRunnable());
  }
}",0.9716908951798012
174720,"public boolean updateForBosses(int attempt){
  List<Thread> threads=new ArrayList<>(accessibleBossNodes.size());
  List<AnkhJewelLockChecker> ankhJewelLockCheckers=new ArrayList<>();
  for (  String bossNode : accessibleBossNodes) {
    AnkhJewelLockChecker ankhJewelLockChecker=new AnkhJewelLockChecker(new AccessChecker(this),bossNode);
    ankhJewelLockCheckers.add(ankhJewelLockChecker);
    Thread thread=new Thread(ankhJewelLockChecker);
    threads.add(thread);
    thread.start();
  }
  try {
    for (    Thread thread : threads) {
      thread.join();
    }
  }
 catch (  InterruptedException ex) {
    FileUtils.log(""String_Node_Str"");
  }
  for (  AnkhJewelLockChecker ankhJewelLockChecker : ankhJewelLockCheckers) {
    if (!ankhJewelLockChecker.isEnoughAnkhJewelsToDefeatAllAccessibleBosses()) {
      return false;
    }
  }
  for (  String accessibleBoss : accessibleBossNodes) {
    markBossDefeated(accessibleBoss);
  }
  return true;
}","public boolean updateForBosses(int attempt){
  List<Thread> threads=new ArrayList<>(accessibleBossNodes.size());
  List<AnkhJewelLockChecker> ankhJewelLockCheckers=new ArrayList<>();
  for (  String bossNode : accessibleBossNodes) {
    AnkhJewelLockChecker ankhJewelLockChecker=new AnkhJewelLockChecker(new AccessChecker(this),bossNode);
    ankhJewelLockCheckers.add(ankhJewelLockChecker);
    Thread thread=new Thread(ankhJewelLockChecker);
    threads.add(thread);
    thread.start();
  }
  try {
    for (    Thread thread : threads) {
      thread.join();
    }
  }
 catch (  InterruptedException ex) {
    FileUtils.log(""String_Node_Str"");
  }
  for (  AnkhJewelLockChecker ankhJewelLockChecker : ankhJewelLockCheckers) {
    if (!ankhJewelLockChecker.isEnoughAnkhJewelsToDefeatAllAccessibleBosses()) {
      return false;
    }
  }
  NodeWithRequirements bossNode;
  List<String> copyAccessibleBossNodes=new ArrayList<>(accessibleBossNodes);
  for (  String accessibleBoss : copyAccessibleBossNodes) {
    bossNode=mapOfNodeNameToRequirementsObject.get(accessibleBoss.replace(""String_Node_Str"",""String_Node_Str""));
    if (bossNode != null && !accessedNodes.contains(accessibleBoss)) {
      markBossAccessed(accessibleBoss);
    }
  }
  return true;
}",0.8509485094850948
174721,"public void markBossDefeated(String bossEventNodeName){
  accessedNodes.add(bossEventNodeName);
  NodeWithRequirements node;
  Set<String> nodesToRemove=new HashSet<>();
  for (  String nodeName : mapOfNodeNameToRequirementsObject.keySet()) {
    node=mapOfNodeNameToRequirementsObject.get(nodeName);
    if (node.updateRequirements(bossEventNodeName)) {
      handleNodeAccess(nodeName,node.getType());
      nodesToRemove.add(nodeName);
    }
  }
  for (  String nodeToRemove : nodesToRemove) {
    mapOfNodeNameToRequirementsObject.remove(nodeToRemove);
  }
}","public void markBossDefeated(String bossEventNodeName){
  if (!accessibleBossNodes.contains(bossEventNodeName)) {
    return;
  }
  markBossAccessed(bossEventNodeName);
  String bossDefeatedNodeName=bossEventNodeName.replace(""String_Node_Str"",""String_Node_Str"");
  mapOfNodeNameToRequirementsObject.remove(bossDefeatedNodeName);
  accessedNodes.add(bossDefeatedNodeName);
  NodeWithRequirements node;
  Set<String> nodesToRemove=new HashSet<>();
  for (  String nodeName : mapOfNodeNameToRequirementsObject.keySet()) {
    node=mapOfNodeNameToRequirementsObject.get(nodeName);
    if (node.updateRequirements(bossDefeatedNodeName)) {
      handleNodeAccess(nodeName,node.getType());
      nodesToRemove.add(nodeName);
    }
  }
  for (  String nodeToRemove : nodesToRemove) {
    mapOfNodeNameToRequirementsObject.remove(nodeToRemove);
  }
}",0.7526728439059159
174722,"public AccessChecker(AccessChecker accessChecker){
  this.mapOfNodeNameToRequirementsObject=copyRequirementsMap(accessChecker.mapOfNodeNameToRequirementsObject);
  this.itemRandomizer=accessChecker.itemRandomizer;
  this.shopRandomizer=accessChecker.shopRandomizer;
  this.accessedNodes=new ArrayList<>(accessChecker.accessedNodes);
  this.numberOfAccessibleAnkhJewels=accessChecker.numberOfAccessibleAnkhJewels;
}","public AccessChecker(AccessChecker accessChecker){
  this.mapOfNodeNameToRequirementsObject=copyRequirementsMap(accessChecker.mapOfNodeNameToRequirementsObject);
  this.itemRandomizer=accessChecker.itemRandomizer;
  this.shopRandomizer=accessChecker.shopRandomizer;
  this.accessedNodes=new HashSet<>(accessChecker.accessedNodes);
  this.accessibleBossNodes=new HashSet<>(accessChecker.accessibleBossNodes);
  this.numberOfAccessibleAnkhJewels=accessChecker.numberOfAccessibleAnkhJewels;
}",0.8992248062015504
174723,"public static List<Block> getDatScriptInfo() throws Exception {
  DataInputStream dataInputStream=new DataInputStream(new FileInputStream(Settings.datFileLocation));
  List<Block> datBlocks=new ArrayList<>();
  int numberOfBlocks=(int)dataInputStream.readShort();
  Block block;
  for (int blockIndex=0; blockIndex < numberOfBlocks; blockIndex++) {
    int numberOfBytesInThisBlock=dataInputStream.readShort();
    if (DataFromFile.getMapOfShopNameToShopBlock().values().contains((Integer)blockIndex)) {
      block=buildShopBlock(blockIndex,dataInputStream,numberOfBytesInThisBlock / 2);
    }
 else {
      block=new Block(blockIndex);
      addBlockContentsToBlock(block,dataInputStream,numberOfBytesInThisBlock / 2);
    }
    datBlocks.add(block);
    GameDataTracker.addBlock(block);
  }
  return datBlocks;
}","public static List<Block> getDatScriptInfo() throws Exception {
  DataInputStream dataInputStream=new DataInputStream(new FileInputStream(Settings.datFileLocation));
  List<Block> datBlocks=new ArrayList<>();
  int numberOfBlocks=(int)dataInputStream.readShort();
  Block block;
  for (int blockIndex=0; blockIndex < numberOfBlocks; blockIndex++) {
    int numberOfBytesInThisBlock=dataInputStream.readShort();
    if (DataFromFile.getMapOfShopNameToShopBlock().values().contains((Integer)blockIndex)) {
      block=buildShopBlock(blockIndex,dataInputStream,numberOfBytesInThisBlock / 2);
    }
 else {
      block=new Block(blockIndex);
      addBlockContentsToBlock(block,dataInputStream,numberOfBytesInThisBlock / 2);
      if (blockIndex == 693) {
        Integer becomingSmallFlagIndex=null;
        BlockContents blockContents;
        for (int i=0; i < block.getBlockContents().size(); i++) {
          blockContents=block.getBlockContents().get(i);
          if (blockContents instanceof BlockFlagData && ((BlockFlagData)blockContents).getWorldFlag() == 554) {
            becomingSmallFlagIndex=i;
          }
          if (becomingSmallFlagIndex != null) {
            block.getBlockContents().remove(becomingSmallFlagIndex);
          }
        }
      }
    }
    datBlocks.add(block);
    GameDataTracker.addBlock(block);
  }
  return datBlocks;
}",0.7494252873563219
174724,"public static void updateBlock(String chestLocation,String chestContents){
  Map<String,GameObjectId> nameToDataMap=DataFromFile.getMapOfItemToUsefulIdentifyingRcdData();
  GameObjectId itemNewContentsData=nameToDataMap.get(chestContents);
  GameObjectId itemLocationData=nameToDataMap.get(chestLocation);
  List<Block> blocksToModify=mapOfChestIdentifyingInfoToBlock.get(nameToDataMap.get(chestLocation));
  for (  Block block : blocksToModify) {
    for (    BlockContents blockContents : block.getBlockContents()) {
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData flagData=(BlockFlagData)blockContents;
        if (flagData.getWorldFlag() == itemLocationData.getWorldFlag()) {
          flagData.setWorldFlag((short)itemNewContentsData.getWorldFlag());
          flagData.setFlagValue((short)2);
        }
      }
 else       if (blockContents instanceof BlockItemData) {
        BlockItemData itemData=(BlockItemData)blockContents;
        if (itemData.getItemData() == itemLocationData.getInventoryArg()) {
          itemData.setItemData(itemNewContentsData.getInventoryArg());
        }
      }
    }
  }
}","public static void updateBlock(String itemLocation,String randomizedContents){
  Map<String,GameObjectId> nameToDataMap=DataFromFile.getMapOfItemToUsefulIdentifyingRcdData();
  GameObjectId itemNewContentsData=nameToDataMap.get(randomizedContents);
  GameObjectId itemLocationData=nameToDataMap.get(itemLocation);
  List<Block> blocksToModify=mapOfChestIdentifyingInfoToBlock.get(nameToDataMap.get(itemLocation));
  for (  Block block : blocksToModify) {
    for (    BlockContents blockContents : block.getBlockContents()) {
      if (blockContents instanceof BlockFlagData) {
        BlockFlagData flagData=(BlockFlagData)blockContents;
        if (flagData.getWorldFlag() == itemLocationData.getWorldFlag()) {
          flagData.setWorldFlag((short)itemNewContentsData.getWorldFlag());
          flagData.setFlagValue((short)2);
        }
      }
 else       if (blockContents instanceof BlockItemData) {
        BlockItemData itemData=(BlockItemData)blockContents;
        if (itemData.getItemData() == itemLocationData.getInventoryArg()) {
          itemData.setItemData(itemNewContentsData.getInventoryArg());
        }
      }
    }
  }
}",0.9750328515111696
174725,"public static void writeRcd(List<Zone> rcdInfo) throws IOException {
  DataOutputStream dataOutputStream=new DataOutputStream(new FileOutputStream(""String_Node_Str""));
  dataOutputStream.writeShort(0);
  for (  Zone zone : rcdInfo) {
    dataOutputStream.writeByte(zone.getName().length());
    dataOutputStream.writeShort(zone.getObjects().size());
    dataOutputStream.writeChars(zone.getName());
    for (    GameObject obj : zone.getObjects()) {
      writeObject(obj,dataOutputStream);
    }
    for (    Room room : zone.getRooms()) {
      dataOutputStream.writeShort(room.getObjects().size());
      for (      GameObject obj : room.getObjects()) {
        writeObject(obj,dataOutputStream);
      }
      for (      Screen screen : room.getScreens()) {
        dataOutputStream.writeByte(screen.getName().length());
        dataOutputStream.writeShort(screen.getObjects().size());
        dataOutputStream.writeByte(getNoPositionScreenObjectCount(screen.getObjects()));
        for (        GameObject obj : room.getObjects()) {
          writeObject(obj,dataOutputStream);
        }
        dataOutputStream.writeChars(screen.getName());
        for (        ScreenExit exit : screen.getScreenExits()) {
          dataOutputStream.writeByte(exit.getZoneIndex());
          dataOutputStream.writeByte(exit.getRoomIndex());
          dataOutputStream.writeByte(exit.getScreenIndex());
        }
      }
    }
  }
  dataOutputStream.flush();
  dataOutputStream.close();
}","public static void writeRcd(List<Zone> rcdInfo) throws IOException {
  DataOutputStream dataOutputStream=new DataOutputStream(new FileOutputStream(""String_Node_Str""));
  dataOutputStream.writeShort(0);
  for (  Zone zone : rcdInfo) {
    dataOutputStream.writeByte(zone.getName().length());
    dataOutputStream.writeShort(zone.getObjects().size());
    dataOutputStream.writeChars(zone.getName());
    for (    GameObject obj : zone.getObjects()) {
      writeObject(obj,dataOutputStream);
    }
    for (    Room room : zone.getRooms()) {
      dataOutputStream.writeShort(room.getObjects().size());
      for (      GameObject obj : room.getObjects()) {
        writeObject(obj,dataOutputStream);
      }
      for (      Screen screen : room.getScreens()) {
        dataOutputStream.writeByte(screen.getName().length());
        dataOutputStream.writeShort(screen.getObjects().size());
        dataOutputStream.writeByte(getNoPositionScreenObjectCount(screen.getObjects()));
        for (        GameObject obj : screen.getObjects()) {
          writeObject(obj,dataOutputStream);
        }
        dataOutputStream.writeChars(screen.getName());
        for (        ScreenExit exit : screen.getScreenExits()) {
          dataOutputStream.writeByte(exit.getZoneIndex());
          dataOutputStream.writeByte(exit.getRoomIndex());
          dataOutputStream.writeByte(exit.getScreenIndex());
        }
      }
    }
  }
  dataOutputStream.flush();
  dataOutputStream.close();
}",0.9966193373901284
174726,"public static void main(final String[] args){
  try {
    final Injector injector=Guice.createInjector(new ElasticSearchModule());
    injector.getInstance(GrpcServer.class).start().awaitTermination();
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    throw new IllegalStateException(""String_Node_Str"",ex);
  }
}","/** 
 * Start the micro service.
 */
public static void main(final String[] args){
  try {
    final Injector injector=Guice.createInjector(new ElasticSearchModule());
    injector.getInstance(GrpcServer.class).start().awaitTermination();
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    throw new IllegalStateException(""String_Node_Str"",ex);
  }
}",0.9473684210526316
174727,"/** 
 * Calculate product score based on product price for demo only.
 * @param product        given product to be calculated
 * @param downloadStream the download stream for score
 */
public void calculateProductScore(Product product,PublishSubject<CalculateProductScoreResponse> downloadStream){
  downloadStream.onNext(CalculateProductScoreResponse.newBuilder().setProduct(product).setScore(new Double(product.getProductPrice()).longValue()).build());
}","/** 
 * Calculate product score based on product price for demo only.
 * @param product        given product to be calculated
 * @param downloadStream the download stream for score
 */
public void calculateProductScore(Product product,PublishSubject<CalculateProductScoreResponse> downloadStream){
  downloadStream.onNext(CalculateProductScoreResponse.newBuilder().setProduct(product).setScore((long)product.getProductPrice()).build());
}",0.9217002237136466
174728,"@Override public void execute(WebScriptRequest webScriptRequest,WebScriptResponse res) throws IOException {
  try {
    SearchSQLQuery searchQuery=extractJsonContent(webScriptRequest,assistant.getJsonHelper(),SearchSQLQuery.class);
    SearchParameters sparams=buildSearchParameters(searchQuery);
    ResultSet results=searchService.query(sparams);
    FilteringResultSet frs=(FilteringResultSet)results;
    SolrSQLJSONResultSet ssjr=(SolrSQLJSONResultSet)frs.getUnFilteredResultSet();
    if (searchQuery.getFormat().equalsIgnoreCase(""String_Node_Str"")) {
      res.getWriter().write(ssjr.getSolrResponse());
    }
 else {
      CollectionWithPagingInfo<TupleList> nodes=resultMapper.toCollectionWithPagingInfo(ssjr.getDocs(),searchQuery);
      renderJsonResponse(res,nodes,assistant.getJsonHelper());
    }
    setResponse(res,DEFAULT_SUCCESS);
  }
 catch (  Exception exception) {
    renderException(exception,res,assistant);
  }
}","@Override public void execute(WebScriptRequest webScriptRequest,WebScriptResponse res) throws IOException {
  try {
    SearchSQLQuery searchQuery=extractJsonContent(webScriptRequest,assistant.getJsonHelper(),SearchSQLQuery.class);
    SearchParameters sparams=buildSearchParameters(searchQuery);
    if (searchQuery.getFormat().equalsIgnoreCase(""String_Node_Str"")) {
      sparams.addExtraParameter(""String_Node_Str"",""String_Node_Str"");
    }
    ResultSet results=searchService.query(sparams);
    FilteringResultSet frs=(FilteringResultSet)results;
    SolrSQLJSONResultSet ssjr=(SolrSQLJSONResultSet)frs.getUnFilteredResultSet();
    if (searchQuery.getFormat().equalsIgnoreCase(""String_Node_Str"")) {
      res.getWriter().write(ssjr.getSolrResponse());
    }
 else {
      CollectionWithPagingInfo<TupleList> nodes=resultMapper.toCollectionWithPagingInfo(ssjr.getDocs(),searchQuery);
      renderJsonResponse(res,nodes,assistant.getJsonHelper());
    }
    setResponse(res,DEFAULT_SUCCESS);
  }
 catch (  Exception exception) {
    if (exception instanceof LuceneQueryParserException) {
      renderException(exception,res,assistant);
    }
 else {
      renderException(new WebScriptException(400,exception.getMessage()),res,assistant);
    }
  }
}",0.8498402555910544
174729,"public Person update(String personId,final Person person){
  validateUpdatePersonData(person);
  boolean isAdmin=isAdminAuthority();
  String currentUserId=AuthenticationUtil.getFullyAuthenticatedUser();
  if (!isAdmin && !currentUserId.equalsIgnoreCase(personId)) {
    throw new PermissionDeniedException();
  }
  final String personIdToUpdate=validatePerson(personId);
  final Map<QName,Serializable> properties=person.toProperties();
  updatePassword(isAdmin,personIdToUpdate,person);
  if (person.isEnabled() != null) {
    if (isAdminAuthority(personIdToUpdate)) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    MutableAuthenticationService mutableAuthenticationService=(MutableAuthenticationService)authenticationService;
    mutableAuthenticationService.setAuthenticationEnabled(personIdToUpdate,person.isEnabled());
  }
  NodeRef personNodeRef=personService.getPerson(personIdToUpdate,false);
  if (person.wasSet(Person.PROP_PERSON_DESCRIPTION)) {
    properties.remove(ContentModel.PROP_PERSONDESC);
    savePersonDescription(person.getDescription(),personNodeRef);
  }
  if (person.getProperties() != null) {
    Map<String,Object> customProps=person.getProperties();
    properties.putAll(nodes.mapToNodeProperties(customProps));
  }
  AuthenticationUtil.runAsSystem(new RunAsWork<Void>(){
    @Override public Void doWork() throws Exception {
      personService.setPersonProperties(personIdToUpdate,properties,false);
      return null;
    }
  }
);
  nodes.updateCustomAspects(personNodeRef,person.getAspectNames(),EXCLUDED_ASPECTS);
  return getPerson(personId);
}","public Person update(String personId,final Person person){
  validateUpdatePersonData(person);
  boolean isAdmin=isAdminAuthority();
  String currentUserId=AuthenticationUtil.getFullyAuthenticatedUser();
  if (!isAdmin && !currentUserId.equalsIgnoreCase(personId)) {
    throw new PermissionDeniedException();
  }
  final String personIdToUpdate=validatePerson(personId);
  final Map<QName,Serializable> properties=person.toProperties();
  updatePassword(isAdmin,personIdToUpdate,person);
  if (person.isEnabled() != null) {
    if (isAdminAuthority(personIdToUpdate)) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    MutableAuthenticationService mutableAuthenticationService=(MutableAuthenticationService)authenticationService;
    mutableAuthenticationService.setAuthenticationEnabled(personIdToUpdate,person.isEnabled());
  }
  NodeRef personNodeRef=personService.getPerson(personIdToUpdate,false);
  if (person.wasSet(Person.PROP_PERSON_DESCRIPTION)) {
    properties.remove(ContentModel.PROP_PERSONDESC);
    savePersonDescription(person.getDescription(),personNodeRef);
  }
  nodes.updateCustomAspects(personNodeRef,person.getAspectNames(),EXCLUDED_ASPECTS);
  if (person.getProperties() != null) {
    Map<String,Object> customProps=person.getProperties();
    properties.putAll(nodes.mapToNodeProperties(customProps));
  }
  AuthenticationUtil.runAsSystem(new RunAsWork<Void>(){
    @Override public Void doWork() throws Exception {
      personService.setPersonProperties(personIdToUpdate,properties,false);
      return null;
    }
  }
);
  return getPerson(personId);
}",0.7514018691588785
174730,"@Test public void testUpdatePerson_withCustomProps() throws Exception {
  publicApiClient.setRequestContext(new RequestContext(account1.getId(),account1Admin,""String_Node_Str""));
{
    Person person=createTestUpdatePerson();
    assertNull(person.getProperties().get(""String_Node_Str""));
    assertFalse(person.getAspectNames().contains(""String_Node_Str""));
    String json=qjson(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    person=people.update(person.getId(),json,200);
    assertEquals(""String_Node_Str"",person.getProperties().get(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
  }
{
    Person person=createTestUpdatePerson();
    person=people.update(person.getId(),qjson(""String_Node_Str""),200);
    assertEquals(""String_Node_Str"",person.getProperties().get(""String_Node_Str""));
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
  }
{
    Person person=createTestUpdatePerson();
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    person=people.update(person.getId(),qjson(""String_Node_Str""),200);
    assertNull(person.getAspectNames());
    NodeRef nodeRef=personService.getPerson(person.getId());
    Set<QName> aspects=nodeService.getAspects(nodeRef);
    assertTrue(aspects.contains(ContentModel.ASPECT_REFERENCEABLE));
    assertTrue(aspects.contains(ContentModel.ASPECT_LOCALIZED));
  }
{
    Person person=createTestUpdatePerson();
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    String json=qjson(""String_Node_Str"");
    person=people.update(person.getId(),json,200);
    AuthenticationUtil.setFullyAuthenticatedUser(""String_Node_Str"" + account1.getId());
    NodeRef nodeRef=personService.getPerson(person.getId(),false);
    nodeService.hasAspect(nodeRef,ContentModel.ASPECT_AUDITABLE);
    nodeService.hasAspect(nodeRef,ContentModel.ASPECT_TITLED);
    List<String> aspectNames=person.getAspectNames();
    assertEquals(1,aspectNames.size());
    assertTrue(aspectNames.contains(""String_Node_Str""));
    assertNull(person.getProperties());
  }
{
    Person person=createTestUpdatePerson();
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertEquals(1,person.getProperties().size());
    assertTrue(person.getProperties().containsKey(""String_Node_Str""));
    person=people.update(person.getId(),qjson(""String_Node_Str""),200);
    assertNull(person.getProperties());
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
  }
{
    Person person=createTestUpdatePerson();
    final String personId=person.getId();
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    String json=qjson(""String_Node_Str"");
    people.update(person.getId(),json,400);
    json=qjson(""String_Node_Str"");
    people.update(person.getId(),json,400);
    json=qjson(""String_Node_Str"");
    people.update(person.getId(),json,400);
    AuthenticationUtil.setFullyAuthenticatedUser(""String_Node_Str"" + account1.getId());
    NodeRef nodeRef=personService.getPerson(person.getId(),false);
    nodeService.hasAspect(nodeRef,ContentModel.ASPECT_AUDITABLE);
    nodeService.hasAspect(nodeRef,ContentModel.ASPECT_TITLED);
    person=people.getPerson(personId);
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertEquals(""String_Node_Str"",person.getProperties().get(""String_Node_Str""));
  }
}","@Test public void testUpdatePerson_withCustomProps() throws Exception {
  publicApiClient.setRequestContext(new RequestContext(account1.getId(),account1Admin,""String_Node_Str""));
{
    Person person=createTestUpdatePerson();
    assertNull(person.getProperties().get(""String_Node_Str""));
    assertFalse(person.getAspectNames().contains(""String_Node_Str""));
    String json=qjson(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    person=people.update(person.getId(),json,200);
    assertEquals(""String_Node_Str"",person.getProperties().get(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
  }
{
    Person person=createTestUpdatePerson();
    person=people.update(person.getId(),qjson(""String_Node_Str""),200);
    assertEquals(""String_Node_Str"",person.getProperties().get(""String_Node_Str""));
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
  }
{
    Person person=createTestUpdatePerson();
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    person=people.update(person.getId(),qjson(""String_Node_Str""),200);
    assertNull(person.getAspectNames());
    NodeRef nodeRef=personService.getPerson(person.getId());
    Set<QName> aspects=nodeService.getAspects(nodeRef);
    assertTrue(aspects.contains(ContentModel.ASPECT_REFERENCEABLE));
    assertTrue(aspects.contains(ContentModel.ASPECT_LOCALIZED));
  }
{
    Person person=createTestUpdatePerson();
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    String json=qjson(""String_Node_Str"");
    person=people.update(person.getId(),json,200);
    AuthenticationUtil.setFullyAuthenticatedUser(""String_Node_Str"" + account1.getId());
    NodeRef nodeRef=personService.getPerson(person.getId(),false);
    nodeService.hasAspect(nodeRef,ContentModel.ASPECT_AUDITABLE);
    nodeService.hasAspect(nodeRef,ContentModel.ASPECT_TITLED);
    List<String> aspectNames=person.getAspectNames();
    assertEquals(1,aspectNames.size());
    assertTrue(aspectNames.contains(""String_Node_Str""));
    assertNull(person.getProperties());
  }
{
    Person person=new Person();
    String personId=UUID.randomUUID().toString() + ""String_Node_Str"" + account1.getId();
    person.setUserName(personId);
    person.setFirstName(""String_Node_Str"");
    person.setEmail(personId);
    person.setEnabled(true);
    person.setPassword(""String_Node_Str"");
    person.setProperties(null);
    person.setAspectNames(null);
    person=people.create(person);
    assertNull(person.getAspectNames());
    assertNull(person.getProperties());
    String json=qjson(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    person=people.update(person.getId(),json,200);
    List<String> aspectNames=person.getAspectNames();
    assertEquals(2,aspectNames.size());
    assertTrue(aspectNames.contains(""String_Node_Str""));
    assertTrue(aspectNames.contains(""String_Node_Str""));
    assertEquals(2,person.getProperties().size());
    assertEquals(""String_Node_Str"",person.getProperties().get(""String_Node_Str""));
    assertEquals(""String_Node_Str"",person.getProperties().get(""String_Node_Str""));
  }
{
    Person person=createTestUpdatePerson();
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertEquals(1,person.getProperties().size());
    assertTrue(person.getProperties().containsKey(""String_Node_Str""));
    person=people.update(person.getId(),qjson(""String_Node_Str""),200);
    assertNull(person.getProperties());
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
  }
{
    Person person=createTestUpdatePerson();
    final String personId=person.getId();
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    String json=qjson(""String_Node_Str"");
    people.update(person.getId(),json,400);
    json=qjson(""String_Node_Str"");
    people.update(person.getId(),json,400);
    json=qjson(""String_Node_Str"");
    people.update(person.getId(),json,400);
    AuthenticationUtil.setFullyAuthenticatedUser(""String_Node_Str"" + account1.getId());
    NodeRef nodeRef=personService.getPerson(person.getId(),false);
    nodeService.hasAspect(nodeRef,ContentModel.ASPECT_AUDITABLE);
    nodeService.hasAspect(nodeRef,ContentModel.ASPECT_TITLED);
    person=people.getPerson(personId);
    assertEquals(2,person.getAspectNames().size());
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertTrue(person.getAspectNames().contains(""String_Node_Str""));
    assertEquals(""String_Node_Str"",person.getProperties().get(""String_Node_Str""));
  }
}",0.8838606327593111
174731,"@Test public void testSiteMembers() throws Exception {
  Iterator<TestNetwork> networksIt=getTestFixture().getNetworksIt();
  final TestNetwork testNetwork=networksIt.next();
  final List<String> networkPeople=testNetwork.getPersonIds();
  String personId=networkPeople.get(0);
  Sites sitesProxy=publicApiClient.sites();
{
    final List<SiteMember> expectedSiteMembers=new ArrayList<SiteMember>();
    TestSite testSite=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite testSite=testNetwork.createSite(SiteVisibility.PRIVATE);
        for (int i=1; i <= 5; i++) {
          String inviteeId=networkPeople.get(i);
          testSite.inviteToSite(inviteeId,SiteRole.SiteConsumer);
          SiteMember sm=new SiteMember(inviteeId,repoService.getPerson(inviteeId),testSite.getSiteId(),SiteRole.SiteConsumer.toString());
          expectedSiteMembers.add(sm);
        }
        return testSite;
      }
    }
,personId,testNetwork.getId());
{
      SiteMember sm=new SiteMember(personId,repoService.getPerson(personId),testSite.getSiteId(),SiteRole.SiteManager.toString());
      expectedSiteMembers.add(sm);
      Collections.sort(expectedSiteMembers);
    }
{
      int skipCount=0;
      int maxItems=2;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
{
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      HttpResponse response=sitesProxy.getAll(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,createParams(paging,Collections.singletonMap(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),SiteMember.parseSiteMembers(testSite.getSiteId(),response.getJsonResponse()));
      JSONObject source=sitesProxy.parseListSource(response.getJsonResponse());
      Site sourceSite=SiteImpl.parseSite(source);
      assertNotNull(sourceSite);
      testSite.expected(sourceSite);
    }
    try {
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.getSiteMembers(GUID.generate(),createParams(paging,null));
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.create(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",siteMember1.getMemberId(),siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.remove(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.updateSiteMember(testSite.getSiteId(),siteMember1);
      assertEquals(siteMember1.getRole(),ret.getRole());
      Person expectedSiteMember=repoService.getPerson(siteMember1.getMemberId());
      expectedSiteMember.expected(ret.getMember());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.getSingleSiteMember(testSite.getSiteId(),siteMember1.getMemberId());
      siteMember1.expected(ret);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network2=accountsIt.next();
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network2.createUser();
        people.add(person);
        return null;
      }
    }
,network2.getId());
    final TestPerson person1=people.get(0);
    final TestPerson person2=people.get(1);
    final TestPerson person3=people.get(2);
    final TestPerson person4=people.get(3);
    final TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PUBLIC);
        return site;
      }
    }
,person2.getId(),network1.getId());
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person3.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(""String_Node_Str"",SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(""String_Node_Str"",new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person4.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_UNAUTHORIZED,e.getHttpResponse().getStatusCode());
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteConsumer.toString());
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),sm);
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteConsumer.toString(),siteMember.getRole());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_CONFLICT,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(null,SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    List<SiteMember> expectedSiteMembers=site.getMembers();
{
      int skipCount=0;
      int maxItems=Integer.MAX_VALUE;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TestPerson person1=people.get(0);
    TestPerson person2=people.get(1);
    TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PRIVATE);
        return site;
      }
    }
,person2.getId(),network1.getId());
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      SiteMember toRemove=new SiteMember(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.removeSiteMember(site.getSiteId(),toRemove);
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),siteMember);
      }
      List<SiteMember> expectedSiteMembers=site.getMembers();
      assertFalse(expectedSiteMembers.contains(siteMember));
{
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person2.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_UNPROCESSABLE_ENTITY,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteContributor.toString());
        SiteMember ret=sitesProxy.createSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteContributor.toString(),ret.getRole());
        person1.expected(ret.getMember());
        sm=new SiteMember(person1.getId(),SiteRole.SiteCollaborator.toString());
        ret=sitesProxy.updateSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteCollaborator.toString(),ret.getRole());
        person1.expected(ret.getMember());
        expectedSiteMembers=site.getMembers();
        SiteMember toCheck=null;
        for (        SiteMember sm1 : expectedSiteMembers) {
          if (sm1.getMemberId().equals(person1.getId())) {
            toCheck=sm1;
          }
        }
        assertNotNull(toCheck);
        assertEquals(sm.getRole(),toCheck.getRole());
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
    }
  }
}","@Test public void testSiteMembers() throws Exception {
  Iterator<TestNetwork> networksIt=getTestFixture().getNetworksIt();
  final TestNetwork testNetwork=networksIt.next();
  final List<String> networkPeople=testNetwork.getPersonIds();
  String personId=networkPeople.get(0);
  Sites sitesProxy=publicApiClient.sites();
{
    final List<SiteMember> expectedSiteMembers=new ArrayList<SiteMember>();
    TestSite testSite=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite testSite=testNetwork.createSite(SiteVisibility.PRIVATE);
        for (int i=1; i <= 5; i++) {
          String inviteeId=networkPeople.get(i);
          testSite.inviteToSite(inviteeId,SiteRole.SiteConsumer);
          SiteMember sm=new SiteMember(inviteeId,repoService.getPerson(inviteeId),testSite.getSiteId(),SiteRole.SiteConsumer.toString());
          expectedSiteMembers.add(sm);
        }
        return testSite;
      }
    }
,personId,testNetwork.getId());
{
      SiteMember sm=new SiteMember(personId,repoService.getPerson(personId),testSite.getSiteId(),SiteRole.SiteManager.toString());
      expectedSiteMembers.add(sm);
      Collections.sort(expectedSiteMembers);
    }
{
      int skipCount=0;
      int maxItems=2;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
{
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      HttpResponse response=sitesProxy.getAll(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,createParams(paging,Collections.singletonMap(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),SiteMember.parseSiteMembers(testSite.getSiteId(),response.getJsonResponse()));
      JSONObject source=sitesProxy.parseListSource(response.getJsonResponse());
      Site sourceSite=SiteImpl.parseSite(source);
      assertNotNull(sourceSite);
      testSite.expected(sourceSite);
    }
    try {
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.getSiteMembers(GUID.generate(),createParams(paging,null));
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.create(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",siteMember1.getMemberId(),siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.remove(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.updateSiteMember(testSite.getSiteId(),siteMember1);
      assertEquals(siteMember1.getRole(),ret.getRole());
      Person expectedSiteMember=repoService.getPerson(siteMember1.getMemberId());
      expectedSiteMember.expected(ret.getMember());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.getSingleSiteMember(testSite.getSiteId(),siteMember1.getMemberId());
      siteMember1.expected(ret);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network2=accountsIt.next();
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network2.createUser();
        people.add(person);
        return null;
      }
    }
,network2.getId());
    final TestPerson person1=people.get(0);
    final TestPerson person2=people.get(1);
    final TestPerson person3=people.get(2);
    final TestPerson person4=people.get(3);
    final TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PUBLIC);
        return site;
      }
    }
,person2.getId(),network1.getId());
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person3.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(""String_Node_Str"",SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(""String_Node_Str"",new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person4.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_UNAUTHORIZED,e.getHttpResponse().getStatusCode());
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteConsumer.toString());
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),sm);
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteConsumer.toString(),siteMember.getRole());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_CONFLICT,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(null,SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    List<SiteMember> expectedSiteMembers=site.getMembers();
{
      int skipCount=0;
      int maxItems=Integer.MAX_VALUE;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TestPerson person1=people.get(0);
    TestPerson person2=people.get(1);
    TestPerson person3=people.get(2);
    TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PRIVATE);
        return site;
      }
    }
,person2.getId(),network1.getId());
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      SiteMember toRemove=new SiteMember(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.removeSiteMember(site.getSiteId(),toRemove);
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      siteMember.setSiteId(site.getSiteId());
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMemberAno=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person3.getId(),SiteRole.SiteCollaborator.toString()));
      assertEquals(person3.getId(),siteMemberAno.getMemberId());
      assertEquals(SiteRole.SiteCollaborator.toString(),siteMemberAno.getRole());
      siteMemberAno.setSiteId(site.getSiteId());
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteCollaborator.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_UNPROCESSABLE_ENTITY,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),new SiteMember(person3.getId()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_UNPROCESSABLE_ENTITY,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),siteMember);
      }
      List<SiteMember> expectedSiteMembers=site.getMembers();
      assertFalse(expectedSiteMembers.contains(siteMember));
      assertTrue(expectedSiteMembers.contains(siteMemberAno));
{
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person2.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_UNPROCESSABLE_ENTITY,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteContributor.toString());
        SiteMember ret=sitesProxy.createSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteContributor.toString(),ret.getRole());
        person1.expected(ret.getMember());
        sm=new SiteMember(person1.getId(),SiteRole.SiteCollaborator.toString());
        ret=sitesProxy.updateSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteCollaborator.toString(),ret.getRole());
        person1.expected(ret.getMember());
        expectedSiteMembers=site.getMembers();
        SiteMember toCheck=null;
        for (        SiteMember sm1 : expectedSiteMembers) {
          if (sm1.getMemberId().equals(person1.getId())) {
            toCheck=sm1;
          }
        }
        assertNotNull(toCheck);
        assertEquals(sm.getRole(),toCheck.getRole());
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
    }
  }
}",0.9628614916286148
174732,"public String validatePerson(String personId,boolean validateIsCurrentUser){
  if (personId.equalsIgnoreCase(DEFAULT_USER)) {
    personId=AuthenticationUtil.getFullyAuthenticatedUser();
  }
  personId=personService.getUserIdentifier(personId);
  if (personId == null) {
    throw new EntityNotFoundException(""String_Node_Str"");
  }
  if (validateIsCurrentUser) {
    String currentUserId=AuthenticationUtil.getFullyAuthenticatedUser();
    if (!currentUserId.equalsIgnoreCase(personId)) {
      throw new EntityNotFoundException(personId);
    }
  }
  return personId;
}","public String validatePerson(String personId,boolean validateIsCurrentUser){
  if (personId == null) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
  if (personId.equalsIgnoreCase(DEFAULT_USER)) {
    personId=AuthenticationUtil.getFullyAuthenticatedUser();
  }
  personId=personService.getUserIdentifier(personId);
  if (personId == null) {
    throw new EntityNotFoundException(""String_Node_Str"");
  }
  if (validateIsCurrentUser) {
    String currentUserId=AuthenticationUtil.getFullyAuthenticatedUser();
    if (!currentUserId.equalsIgnoreCase(personId)) {
      throw new EntityNotFoundException(personId);
    }
  }
  return personId;
}",0.9277010560519904
174733,"protected SiteMember addSiteMember(String siteId,String userId,final SiteRole siteRole) throws Exception {
  SiteMember siteMember=new SiteMember(userId,siteRole.name());
  HttpResponse response=publicApiClient.post(getScope(),""String_Node_Str"",siteId,""String_Node_Str"",null,siteMember.postJSON().toString());
  checkStatus(201,response.getStatusCode());
  return SiteMember.parseSiteMember(siteMember.getSiteId(),(JSONObject)response.getJsonResponse().get(""String_Node_Str""));
}","protected SiteMember addSiteMember(String siteId,String userId,final SiteRole siteRole) throws Exception {
  SiteMember siteMember=new SiteMember(userId,siteRole.name());
  HttpResponse response=publicApiClient.post(getScope(),""String_Node_Str"",siteId,""String_Node_Str"",null,siteMember.toJSON().toString());
  checkStatus(201,response.getStatusCode());
  return SiteMember.parseSiteMember(siteMember.getSiteId(),(JSONObject)response.getJsonResponse().get(""String_Node_Str""));
}",0.9937238493723848
174734,"@Test public void testSiteMembers() throws Exception {
  Iterator<TestNetwork> networksIt=getTestFixture().getNetworksIt();
  final TestNetwork testNetwork=networksIt.next();
  final List<String> networkPeople=testNetwork.getPersonIds();
  String personId=networkPeople.get(0);
  Sites sitesProxy=publicApiClient.sites();
{
    final List<SiteMember> expectedSiteMembers=new ArrayList<SiteMember>();
    TestSite testSite=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite testSite=testNetwork.createSite(SiteVisibility.PRIVATE);
        for (int i=1; i <= 5; i++) {
          String inviteeId=networkPeople.get(i);
          testSite.inviteToSite(inviteeId,SiteRole.SiteConsumer);
          SiteMember sm=new SiteMember(inviteeId,repoService.getPerson(inviteeId),testSite.getSiteId(),SiteRole.SiteConsumer.toString());
          expectedSiteMembers.add(sm);
        }
        return testSite;
      }
    }
,personId,testNetwork.getId());
{
      SiteMember sm=new SiteMember(personId,repoService.getPerson(personId),testSite.getSiteId(),SiteRole.SiteManager.toString());
      expectedSiteMembers.add(sm);
      Collections.sort(expectedSiteMembers);
    }
{
      int skipCount=0;
      int maxItems=2;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
{
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      HttpResponse response=sitesProxy.getAll(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,createParams(paging,Collections.singletonMap(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),SiteMember.parseSiteMembers(testSite.getSiteId(),response.getJsonResponse()));
      JSONObject source=sitesProxy.parseListSource(response.getJsonResponse());
      Site sourceSite=SiteImpl.parseSite(source);
      assertNotNull(sourceSite);
      testSite.expected(sourceSite);
    }
    try {
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.getSiteMembers(GUID.generate(),createParams(paging,null));
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.create(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",siteMember1.getMemberId(),siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.remove(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.updateSiteMember(testSite.getSiteId(),siteMember1);
      assertEquals(siteMember1.getRole(),ret.getRole());
      Person expectedSiteMember=repoService.getPerson(siteMember1.getMemberId());
      expectedSiteMember.expected(ret.getMember());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.getSingleSiteMember(testSite.getSiteId(),siteMember1.getMemberId());
      siteMember1.expected(ret);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network2=accountsIt.next();
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network2.createUser();
        people.add(person);
        return null;
      }
    }
,network2.getId());
    final TestPerson person1=people.get(0);
    final TestPerson person2=people.get(1);
    final TestPerson person3=people.get(2);
    final TestPerson person4=people.get(3);
    final TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PUBLIC);
        return site;
      }
    }
,person2.getId(),network1.getId());
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person3.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(""String_Node_Str"",SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(""String_Node_Str"",new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person4.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_UNAUTHORIZED,e.getHttpResponse().getStatusCode());
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteConsumer.toString());
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),sm);
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteConsumer.toString(),siteMember.getRole());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_CONFLICT,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    List<SiteMember> expectedSiteMembers=site.getMembers();
{
      int skipCount=0;
      int maxItems=Integer.MAX_VALUE;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TestPerson person1=people.get(0);
    TestPerson person2=people.get(1);
    TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PRIVATE);
        return site;
      }
    }
,person2.getId(),network1.getId());
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      SiteMember toRemove=new SiteMember(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.removeSiteMember(site.getSiteId(),toRemove);
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),siteMember);
      }
      List<SiteMember> expectedSiteMembers=site.getMembers();
      assertFalse(expectedSiteMembers.contains(siteMember));
{
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteContributor.toString());
        SiteMember ret=sitesProxy.createSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteContributor.toString(),ret.getRole());
        person1.expected(ret.getMember());
        sm=new SiteMember(person1.getId(),SiteRole.SiteCollaborator.toString());
        ret=sitesProxy.updateSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteCollaborator.toString(),ret.getRole());
        person1.expected(ret.getMember());
        expectedSiteMembers=site.getMembers();
        SiteMember toCheck=null;
        for (        SiteMember sm1 : expectedSiteMembers) {
          if (sm1.getMemberId().equals(person1.getId())) {
            toCheck=sm1;
          }
        }
        assertNotNull(toCheck);
        assertEquals(sm.getRole(),toCheck.getRole());
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
    }
  }
}","@Test public void testSiteMembers() throws Exception {
  Iterator<TestNetwork> networksIt=getTestFixture().getNetworksIt();
  final TestNetwork testNetwork=networksIt.next();
  final List<String> networkPeople=testNetwork.getPersonIds();
  String personId=networkPeople.get(0);
  Sites sitesProxy=publicApiClient.sites();
{
    final List<SiteMember> expectedSiteMembers=new ArrayList<SiteMember>();
    TestSite testSite=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite testSite=testNetwork.createSite(SiteVisibility.PRIVATE);
        for (int i=1; i <= 5; i++) {
          String inviteeId=networkPeople.get(i);
          testSite.inviteToSite(inviteeId,SiteRole.SiteConsumer);
          SiteMember sm=new SiteMember(inviteeId,repoService.getPerson(inviteeId),testSite.getSiteId(),SiteRole.SiteConsumer.toString());
          expectedSiteMembers.add(sm);
        }
        return testSite;
      }
    }
,personId,testNetwork.getId());
{
      SiteMember sm=new SiteMember(personId,repoService.getPerson(personId),testSite.getSiteId(),SiteRole.SiteManager.toString());
      expectedSiteMembers.add(sm);
      Collections.sort(expectedSiteMembers);
    }
{
      int skipCount=0;
      int maxItems=2;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
{
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      HttpResponse response=sitesProxy.getAll(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,createParams(paging,Collections.singletonMap(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),SiteMember.parseSiteMembers(testSite.getSiteId(),response.getJsonResponse()));
      JSONObject source=sitesProxy.parseListSource(response.getJsonResponse());
      Site sourceSite=SiteImpl.parseSite(source);
      assertNotNull(sourceSite);
      testSite.expected(sourceSite);
    }
    try {
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.getSiteMembers(GUID.generate(),createParams(paging,null));
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.create(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",siteMember1.getMemberId(),siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.remove(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.updateSiteMember(testSite.getSiteId(),siteMember1);
      assertEquals(siteMember1.getRole(),ret.getRole());
      Person expectedSiteMember=repoService.getPerson(siteMember1.getMemberId());
      expectedSiteMember.expected(ret.getMember());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.getSingleSiteMember(testSite.getSiteId(),siteMember1.getMemberId());
      siteMember1.expected(ret);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network2=accountsIt.next();
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network2.createUser();
        people.add(person);
        return null;
      }
    }
,network2.getId());
    final TestPerson person1=people.get(0);
    final TestPerson person2=people.get(1);
    final TestPerson person3=people.get(2);
    final TestPerson person4=people.get(3);
    final TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PUBLIC);
        return site;
      }
    }
,person2.getId(),network1.getId());
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person3.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(""String_Node_Str"",SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(""String_Node_Str"",new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person4.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_UNAUTHORIZED,e.getHttpResponse().getStatusCode());
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteConsumer.toString());
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),sm);
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteConsumer.toString(),siteMember.getRole());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_CONFLICT,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(null,SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    List<SiteMember> expectedSiteMembers=site.getMembers();
{
      int skipCount=0;
      int maxItems=Integer.MAX_VALUE;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TestPerson person1=people.get(0);
    TestPerson person2=people.get(1);
    TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PRIVATE);
        return site;
      }
    }
,person2.getId(),network1.getId());
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      SiteMember toRemove=new SiteMember(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.removeSiteMember(site.getSiteId(),toRemove);
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),siteMember);
      }
      List<SiteMember> expectedSiteMembers=site.getMembers();
      assertFalse(expectedSiteMembers.contains(siteMember));
{
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteContributor.toString());
        SiteMember ret=sitesProxy.createSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteContributor.toString(),ret.getRole());
        person1.expected(ret.getMember());
        sm=new SiteMember(person1.getId(),SiteRole.SiteCollaborator.toString());
        ret=sitesProxy.updateSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteCollaborator.toString(),ret.getRole());
        person1.expected(ret.getMember());
        expectedSiteMembers=site.getMembers();
        SiteMember toCheck=null;
        for (        SiteMember sm1 : expectedSiteMembers) {
          if (sm1.getMemberId().equals(person1.getId())) {
            toCheck=sm1;
          }
        }
        assertNotNull(toCheck);
        assertEquals(sm.getRole(),toCheck.getRole());
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
    }
  }
}",0.979882694732226
174735,"@Test public void testSiteMembers() throws Exception {
  Iterator<TestNetwork> networksIt=getTestFixture().getNetworksIt();
  final TestNetwork testNetwork=networksIt.next();
  final List<String> networkPeople=testNetwork.getPersonIds();
  String personId=networkPeople.get(0);
  Sites sitesProxy=publicApiClient.sites();
{
    final List<SiteMember> expectedSiteMembers=new ArrayList<SiteMember>();
    TestSite testSite=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite testSite=testNetwork.createSite(SiteVisibility.PRIVATE);
        for (int i=1; i <= 5; i++) {
          String inviteeId=networkPeople.get(i);
          testSite.inviteToSite(inviteeId,SiteRole.SiteConsumer);
          SiteMember sm=new SiteMember(inviteeId,repoService.getPerson(inviteeId),testSite.getSiteId(),SiteRole.SiteConsumer.toString());
          expectedSiteMembers.add(sm);
        }
        return testSite;
      }
    }
,personId,testNetwork.getId());
{
      SiteMember sm=new SiteMember(personId,repoService.getPerson(personId),testSite.getSiteId(),SiteRole.SiteManager.toString());
      expectedSiteMembers.add(sm);
      Collections.sort(expectedSiteMembers);
    }
{
      int skipCount=0;
      int maxItems=2;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
{
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      HttpResponse response=sitesProxy.getAll(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,createParams(paging,Collections.singletonMap(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),SiteMember.parseSiteMembers(testSite.getSiteId(),response.getJsonResponse()));
      JSONObject source=sitesProxy.parseListSource(response.getJsonResponse());
      Site sourceSite=SiteImpl.parseSite(source);
      assertNotNull(sourceSite);
      testSite.expected(sourceSite);
    }
    try {
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.getSiteMembers(GUID.generate(),createParams(paging,null));
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.create(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",siteMember1.getMemberId(),siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.remove(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.updateSiteMember(testSite.getSiteId(),siteMember1);
      assertEquals(siteMember1.getRole(),ret.getRole());
      Person expectedSiteMember=repoService.getPerson(siteMember1.getMemberId());
      expectedSiteMember.expected(ret.getMember());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.getSingleSiteMember(testSite.getSiteId(),siteMember1.getMemberId());
      siteMember1.expected(ret);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network2=accountsIt.next();
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network2.createUser();
        people.add(person);
        return null;
      }
    }
,network2.getId());
    final TestPerson person1=people.get(0);
    final TestPerson person2=people.get(1);
    final TestPerson person3=people.get(2);
    final TestPerson person4=people.get(3);
    final TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PUBLIC);
        return site;
      }
    }
,person2.getId(),network1.getId());
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person3.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(""String_Node_Str"",SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(""String_Node_Str"",new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person4.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_UNAUTHORIZED,e.getHttpResponse().getStatusCode());
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteConsumer.toString());
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),sm);
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteConsumer.toString(),siteMember.getRole());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_CONFLICT,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(null,SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    List<SiteMember> expectedSiteMembers=site.getMembers();
{
      int skipCount=0;
      int maxItems=Integer.MAX_VALUE;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TestPerson person1=people.get(0);
    TestPerson person2=people.get(1);
    TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PRIVATE);
        return site;
      }
    }
,person2.getId(),network1.getId());
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      SiteMember toRemove=new SiteMember(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.removeSiteMember(site.getSiteId(),toRemove);
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),siteMember);
      }
      List<SiteMember> expectedSiteMembers=site.getMembers();
      assertFalse(expectedSiteMembers.contains(siteMember));
{
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteContributor.toString());
        SiteMember ret=sitesProxy.createSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteContributor.toString(),ret.getRole());
        person1.expected(ret.getMember());
        sm=new SiteMember(person1.getId(),SiteRole.SiteCollaborator.toString());
        ret=sitesProxy.updateSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteCollaborator.toString(),ret.getRole());
        person1.expected(ret.getMember());
        expectedSiteMembers=site.getMembers();
        SiteMember toCheck=null;
        for (        SiteMember sm1 : expectedSiteMembers) {
          if (sm1.getMemberId().equals(person1.getId())) {
            toCheck=sm1;
          }
        }
        assertNotNull(toCheck);
        assertEquals(sm.getRole(),toCheck.getRole());
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
    }
  }
}","@Test public void testSiteMembers() throws Exception {
  Iterator<TestNetwork> networksIt=getTestFixture().getNetworksIt();
  final TestNetwork testNetwork=networksIt.next();
  final List<String> networkPeople=testNetwork.getPersonIds();
  String personId=networkPeople.get(0);
  Sites sitesProxy=publicApiClient.sites();
{
    final List<SiteMember> expectedSiteMembers=new ArrayList<SiteMember>();
    TestSite testSite=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite testSite=testNetwork.createSite(SiteVisibility.PRIVATE);
        for (int i=1; i <= 5; i++) {
          String inviteeId=networkPeople.get(i);
          testSite.inviteToSite(inviteeId,SiteRole.SiteConsumer);
          SiteMember sm=new SiteMember(inviteeId,repoService.getPerson(inviteeId),testSite.getSiteId(),SiteRole.SiteConsumer.toString());
          expectedSiteMembers.add(sm);
        }
        return testSite;
      }
    }
,personId,testNetwork.getId());
{
      SiteMember sm=new SiteMember(personId,repoService.getPerson(personId),testSite.getSiteId(),SiteRole.SiteManager.toString());
      expectedSiteMembers.add(sm);
      Collections.sort(expectedSiteMembers);
    }
{
      int skipCount=0;
      int maxItems=2;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
{
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(testSite.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      HttpResponse response=sitesProxy.getAll(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,createParams(paging,Collections.singletonMap(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"");
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),SiteMember.parseSiteMembers(testSite.getSiteId(),response.getJsonResponse()));
      JSONObject source=sitesProxy.parseListSource(response.getJsonResponse());
      Site sourceSite=SiteImpl.parseSite(source);
      assertNotNull(sourceSite);
      testSite.expected(sourceSite);
    }
    try {
      int skipCount=2;
      int maxItems=10;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.getSiteMembers(GUID.generate(),createParams(paging,null));
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.create(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",siteMember1.getMemberId(),siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.update(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,siteMember1.toJSON().toString(),""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      sitesProxy.remove(""String_Node_Str"",testSite.getSiteId(),""String_Node_Str"",null,""String_Node_Str"");
      fail();
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.updateSiteMember(testSite.getSiteId(),siteMember1);
      assertEquals(siteMember1.getRole(),ret.getRole());
      Person expectedSiteMember=repoService.getPerson(siteMember1.getMemberId());
      expectedSiteMember.expected(ret.getMember());
    }
{
      SiteMember siteMember1=expectedSiteMembers.get(0);
      publicApiClient.setRequestContext(new RequestContext(testNetwork.getId(),personId));
      SiteMember ret=sitesProxy.getSingleSiteMember(testSite.getSiteId(),siteMember1.getMemberId());
      siteMember1.expected(ret);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network2=accountsIt.next();
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network2.createUser();
        people.add(person);
        return null;
      }
    }
,network2.getId());
    final TestPerson person1=people.get(0);
    final TestPerson person2=people.get(1);
    final TestPerson person3=people.get(2);
    final TestPerson person4=people.get(3);
    final TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PUBLIC);
        return site;
      }
    }
,person2.getId(),network1.getId());
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person3.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(""String_Node_Str"",SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(""String_Node_Str"",new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_FORBIDDEN,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person4.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_UNAUTHORIZED,e.getHttpResponse().getStatusCode());
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteConsumer.toString());
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),sm);
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteConsumer.toString(),siteMember.getRole());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_CONFLICT,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person4.getId(),SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(e.getMessage(),HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(null,SiteRole.SiteContributor.toString()));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
    }
    List<SiteMember> expectedSiteMembers=site.getMembers();
{
      int skipCount=0;
      int maxItems=Integer.MAX_VALUE;
      Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
      ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
      checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
    }
  }
{
    Iterator<TestNetwork> accountsIt=getTestFixture().getNetworksIt();
    assertTrue(accountsIt.hasNext());
    final TestNetwork network1=accountsIt.next();
    assertTrue(accountsIt.hasNext());
    final List<TestPerson> people=new ArrayList<TestPerson>();
    TenantUtil.runAsSystemTenant(new TenantRunAsWork<Void>(){
      @Override public Void doWork() throws Exception {
        TestPerson person=network1.createUser();
        people.add(person);
        person=network1.createUser();
        people.add(person);
        return null;
      }
    }
,network1.getId());
    TestPerson person1=people.get(0);
    TestPerson person2=people.get(1);
    TestSite site=TenantUtil.runAsUserTenant(new TenantRunAsWork<TestSite>(){
      @Override public TestSite doWork() throws Exception {
        TestSite site=network1.createSite(SiteVisibility.PRIVATE);
        return site;
      }
    }
,person2.getId(),network1.getId());
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      SiteMember toRemove=new SiteMember(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person1.getId()));
      sitesProxy.removeSiteMember(site.getSiteId(),toRemove);
    }
{
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
      SiteMember siteMember=sitesProxy.createSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
      assertEquals(person1.getId(),siteMember.getMemberId());
      assertEquals(SiteRole.SiteContributor.toString(),siteMember.getRole());
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.removeSiteMember(site.getSiteId(),siteMember);
      }
      List<SiteMember> expectedSiteMembers=site.getMembers();
      assertFalse(expectedSiteMembers.contains(siteMember));
{
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(GUID.generate(),siteMember);
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(GUID.generate()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),""String_Node_Str""));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person1.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_BAD_REQUEST,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        sitesProxy.updateSiteMember(site.getSiteId(),new SiteMember(person2.getId(),SiteRole.SiteContributor.toString()));
        fail();
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_UNPROCESSABLE_ENTITY,e.getHttpResponse().getStatusCode());
      }
{
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        SiteMember sm=new SiteMember(person1.getId(),SiteRole.SiteContributor.toString());
        SiteMember ret=sitesProxy.createSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteContributor.toString(),ret.getRole());
        person1.expected(ret.getMember());
        sm=new SiteMember(person1.getId(),SiteRole.SiteCollaborator.toString());
        ret=sitesProxy.updateSiteMember(site.getSiteId(),sm);
        assertEquals(SiteRole.SiteCollaborator.toString(),ret.getRole());
        person1.expected(ret.getMember());
        expectedSiteMembers=site.getMembers();
        SiteMember toCheck=null;
        for (        SiteMember sm1 : expectedSiteMembers) {
          if (sm1.getMemberId().equals(person1.getId())) {
            toCheck=sm1;
          }
        }
        assertNotNull(toCheck);
        assertEquals(sm.getRole(),toCheck.getRole());
        int skipCount=0;
        int maxItems=Integer.MAX_VALUE;
        Paging paging=getPaging(skipCount,maxItems,expectedSiteMembers.size(),null);
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person2.getId()));
        ListResponse<SiteMember> siteMembers=sitesProxy.getSiteMembers(site.getSiteId(),createParams(paging,null));
        checkList(expectedSiteMembers.subList(skipCount,skipCount + paging.getExpectedPaging().getCount()),paging.getExpectedPaging(),siteMembers);
      }
    }
  }
}",0.9894725648660144
174736,"private SiteMembershipRequest getSiteMembershipRequest(ModeratedInvitation moderatedInvitation){
  SiteMembershipRequest siteMembershipRequest=null;
  ResourceType resourceType=moderatedInvitation.getResourceType();
  if (resourceType.equals(ResourceType.WEB_SITE)) {
    final String siteId=moderatedInvitation.getResourceName();
    SiteInfo siteInfo=AuthenticationUtil.runAsSystem(new RunAsWork<SiteInfo>(){
      @Override public SiteInfo doWork() throws Exception {
        SiteInfo siteInfo=sites.validateSite(siteId);
        return siteInfo;
      }
    }
);
    if (siteInfo.getVisibility().equals(SiteVisibility.MODERATED)) {
      siteMembershipRequest=new SiteMembershipRequest();
      String title=siteInfo.getTitle();
      siteMembershipRequest.setTitle(title);
      siteMembershipRequest.setId(siteId);
      siteMembershipRequest.setMessage(moderatedInvitation.getInviteeComments());
      siteMembershipRequest.setCreatedAt(moderatedInvitation.getCreatedAt());
      siteMembershipRequest.setModifiedAt(moderatedInvitation.getModifiedAt());
    }
  }
 else {
    logger.warn(""String_Node_Str"" + resourceType + ""String_Node_Str"");
  }
  return siteMembershipRequest;
}","private SiteMembershipRequest getSiteMembershipRequest(ModeratedInvitation moderatedInvitation){
  SiteMembershipRequest siteMembershipRequest=null;
  ResourceType resourceType=moderatedInvitation.getResourceType();
  if (resourceType.equals(ResourceType.WEB_SITE)) {
    final String siteId=moderatedInvitation.getResourceName();
    SiteInfo siteInfo=AuthenticationUtil.runAsSystem(new RunAsWork<SiteInfo>(){
      @Override public SiteInfo doWork() throws Exception {
        SiteInfo siteInfo=sites.validateSite(siteId);
        return siteInfo;
      }
    }
);
    if (siteInfo == null) {
      throw new EntityNotFoundException(siteId);
    }
    if (siteInfo.getVisibility().equals(SiteVisibility.MODERATED)) {
      siteMembershipRequest=new SiteMembershipRequest();
      String title=siteInfo.getTitle();
      siteMembershipRequest.setTitle(title);
      siteMembershipRequest.setId(siteId);
      siteMembershipRequest.setMessage(moderatedInvitation.getInviteeComments());
      siteMembershipRequest.setCreatedAt(moderatedInvitation.getCreatedAt());
      siteMembershipRequest.setModifiedAt(moderatedInvitation.getModifiedAt());
    }
  }
 else {
    logger.warn(""String_Node_Str"" + resourceType + ""String_Node_Str"");
  }
  return siteMembershipRequest;
}",0.9662189662189662
174737,"@Test public void testInvalidRequests() throws Exception {
{
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person12Id));
      SiteMembershipRequest siteMembershipRequest=new SiteMembershipRequest();
      siteMembershipRequest.setId(person1ModeratedSites.get(0).getSiteId());
      siteMembershipRequest.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.createSiteMembershipRequest(GUID.generate(),siteMembershipRequest);
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person12Id));
      SiteMembershipRequest siteMembershipRequest=new SiteMembershipRequest();
      siteMembershipRequest.setId(GUID.generate());
      siteMembershipRequest.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.createSiteMembershipRequest(person11Id,siteMembershipRequest);
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person12Id));
      SiteMembershipRequest siteMembershipRequest=new SiteMembershipRequest();
      siteMembershipRequest.setId(person1ModeratedSites.get(0).getSiteId());
      siteMembershipRequest.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.createSiteMembershipRequest(person11Id,siteMembershipRequest);
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      log(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      int skipCount=0;
      int maxItems=4;
      Paging paging=getPaging(skipCount,maxItems);
      siteMembershipRequestsProxy.getSiteMembershipRequests(person12Id,createParams(paging,null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      int skipCount=0;
      int maxItems=4;
      Paging paging=getPaging(skipCount,maxItems);
      siteMembershipRequestsProxy.getSiteMembershipRequests(GUID.generate(),createParams(paging,null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
{
{
        log(""String_Node_Str"");
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person14Id));
        SiteMembershipRequest siteMembershipRequest=new SiteMembershipRequest();
        siteMembershipRequest.setId(person1ModeratedSites.get(0).getSiteId());
        siteMembershipRequest.setMessage(""String_Node_Str"");
        siteMembershipRequestsProxy.createSiteMembershipRequest(person14Id,siteMembershipRequest);
        SiteMembershipRequest request=getSiteMembershipRequest(network1.getId(),person14Id,person14Id);
        try {
          publicApiClient.setRequestContext(new RequestContext(network1.getId(),person24Id));
          siteMembershipRequestsProxy.cancelSiteMembershipRequest(person14Id,request.getId());
          fail(""String_Node_Str"");
        }
 catch (        PublicApiException e) {
          assertEquals(HttpStatus.SC_UNAUTHORIZED,e.getHttpResponse().getStatusCode());
        }
        try {
          log(""String_Node_Str"");
          publicApiClient.setRequestContext(new RequestContext(network1.getId(),person14Id));
          siteMembershipRequestsProxy.cancelSiteMembershipRequest(GUID.generate(),request.getId());
          fail(""String_Node_Str"");
        }
 catch (        PublicApiException e) {
          assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
        }
      }
      try {
        log(""String_Node_Str"");
        log(""String_Node_Str"");
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person14Id));
        SiteMembershipRequest request=new SiteMembershipRequest();
        request.setId(GUID.generate());
        siteMembershipRequestsProxy.cancelSiteMembershipRequest(person14Id,request.getId());
        fail(""String_Node_Str"");
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person14Id));
        siteMembershipRequestsProxy.cancelSiteMembershipRequest(person14Id,GUID.generate());
        fail(""String_Node_Str"");
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
    }
    try {
      log(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      SiteMembershipRequest request=new SiteMembershipRequest();
      request.setId(GUID.generate());
      request.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.update(""String_Node_Str"",person11Id,""String_Node_Str"",null,request.toJSON().toString(),""String_Node_Str"");
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      log(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      SiteMembershipRequest request=new SiteMembershipRequest();
      request.setId(GUID.generate());
      request.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.updateSiteMembershipRequest(person11Id,request);
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
  }
}","@Test public void testInvalidRequests() throws Exception {
{
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person12Id));
      SiteMembershipRequest siteMembershipRequest=new SiteMembershipRequest();
      siteMembershipRequest.setId(person1ModeratedSites.get(0).getSiteId());
      siteMembershipRequest.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.createSiteMembershipRequest(GUID.generate(),siteMembershipRequest);
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person12Id));
      SiteMembershipRequest siteMembershipRequest=new SiteMembershipRequest();
      siteMembershipRequest.setId(GUID.generate());
      siteMembershipRequest.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.createSiteMembershipRequest(person11Id,siteMembershipRequest);
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person12Id));
      SiteMembershipRequest siteMembershipRequest=new SiteMembershipRequest();
      siteMembershipRequest.setId(person1ModeratedSites.get(0).getSiteId());
      siteMembershipRequest.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.createSiteMembershipRequest(person11Id,siteMembershipRequest);
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      log(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      int skipCount=0;
      int maxItems=4;
      Paging paging=getPaging(skipCount,maxItems);
      siteMembershipRequestsProxy.getSiteMembershipRequests(person12Id,createParams(paging,null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      int skipCount=0;
      int maxItems=4;
      Paging paging=getPaging(skipCount,maxItems);
      siteMembershipRequestsProxy.getSiteMembershipRequests(GUID.generate(),createParams(paging,null));
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
    try {
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      siteMembershipRequestsProxy.getSiteMembershipRequest(person11Id,GUID.generate());
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
{
{
        log(""String_Node_Str"");
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person14Id));
        SiteMembershipRequest siteMembershipRequest=new SiteMembershipRequest();
        siteMembershipRequest.setId(person1ModeratedSites.get(0).getSiteId());
        siteMembershipRequest.setMessage(""String_Node_Str"");
        siteMembershipRequestsProxy.createSiteMembershipRequest(person14Id,siteMembershipRequest);
        SiteMembershipRequest request=getSiteMembershipRequest(network1.getId(),person14Id,person14Id);
        try {
          publicApiClient.setRequestContext(new RequestContext(network1.getId(),person24Id));
          siteMembershipRequestsProxy.cancelSiteMembershipRequest(person14Id,request.getId());
          fail(""String_Node_Str"");
        }
 catch (        PublicApiException e) {
          assertEquals(HttpStatus.SC_UNAUTHORIZED,e.getHttpResponse().getStatusCode());
        }
        try {
          log(""String_Node_Str"");
          publicApiClient.setRequestContext(new RequestContext(network1.getId(),person14Id));
          siteMembershipRequestsProxy.cancelSiteMembershipRequest(GUID.generate(),request.getId());
          fail(""String_Node_Str"");
        }
 catch (        PublicApiException e) {
          assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
        }
      }
      try {
        log(""String_Node_Str"");
        log(""String_Node_Str"");
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person14Id));
        SiteMembershipRequest request=new SiteMembershipRequest();
        request.setId(GUID.generate());
        siteMembershipRequestsProxy.cancelSiteMembershipRequest(person14Id,request.getId());
        fail(""String_Node_Str"");
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
      try {
        publicApiClient.setRequestContext(new RequestContext(network1.getId(),person14Id));
        siteMembershipRequestsProxy.cancelSiteMembershipRequest(person14Id,GUID.generate());
        fail(""String_Node_Str"");
      }
 catch (      PublicApiException e) {
        assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
      }
    }
    try {
      log(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      SiteMembershipRequest request=new SiteMembershipRequest();
      request.setId(GUID.generate());
      request.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.update(""String_Node_Str"",person11Id,""String_Node_Str"",null,request.toJSON().toString(),""String_Node_Str"");
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_METHOD_NOT_ALLOWED,e.getHttpResponse().getStatusCode());
    }
    try {
      log(""String_Node_Str"");
      publicApiClient.setRequestContext(new RequestContext(network1.getId(),person11Id));
      SiteMembershipRequest request=new SiteMembershipRequest();
      request.setId(GUID.generate());
      request.setMessage(""String_Node_Str"");
      siteMembershipRequestsProxy.updateSiteMembershipRequest(person11Id,request);
      fail(""String_Node_Str"");
    }
 catch (    PublicApiException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getHttpResponse().getStatusCode());
    }
  }
}",0.9722443770936352
174738,"/** 
 * * This method gets all nodes from the archive which were originally contained within the specified StoreRef.
 * @param storeRef mandatory store ref
 * @param paging mandatory paging
 * @param filter optional filter
 * @return PagingResults<NodeRef>
 */
protected PagingResults<NodeRef> getArchivedNodesFrom(StoreRef storeRef,ScriptPagingDetails paging,String filter){
  NodeService nodeService=serviceRegistry.getNodeService();
  NodeRef archiveStoreRootNodeRef=nodeService.getStoreArchiveNode(storeRef);
  ArchivedNodesCannedQueryBuilder queryBuilder=new ArchivedNodesCannedQueryBuilder.Builder(archiveStoreRootNodeRef,paging).filter(filter).sortOrderAscending(false).build();
  PagingResults<NodeRef> result=nodeArchiveService.listArchivedNodes(queryBuilder);
  return result;
}","/** 
 * * This method gets all nodes from the archive which were originally contained within the specified StoreRef.
 * @param storeRef mandatory store ref
 * @param paging mandatory paging
 * @param filter optional filter
 */
protected PagingResults<NodeRef> getArchivedNodesFrom(StoreRef storeRef,ScriptPagingDetails paging,String filter){
  NodeService nodeService=serviceRegistry.getNodeService();
  NodeRef archiveStoreRootNodeRef=nodeService.getStoreArchiveNode(storeRef);
  ArchivedNodesCannedQueryBuilder queryBuilder=new ArchivedNodesCannedQueryBuilder.Builder(archiveStoreRootNodeRef,paging).filter(filter).sortOrderAscending(false).build();
  PagingResults<NodeRef> result=nodeArchiveService.listArchivedNodes(queryBuilder);
  return result;
}",0.9779507133592736
174739,"/** 
 * This method is used to inject   {@link org.alfresco.repo.web.scripts.archive.ArchivedNodesFilter node filters} on this GET call.
 * @param nodeFilters List<ArchivedNodesFilter>
 */
public void setArchivedNodeFilters(List<ArchivedNodesFilter> nodeFilters){
  this.nodeFilters=nodeFilters;
}","/** 
 * This method is used to inject   {@link org.alfresco.repo.web.scripts.archive.ArchivedNodesFilter node filters} on this GET call.
 */
public void setArchivedNodeFilters(List<ArchivedNodesFilter> nodeFilters){
  this.nodeFilters=nodeFilters;
}",0.912087912087912
174740,"/** 
 * Set the cache settings on the response
 * @param res WebScriptResponse
 * @param modified Date
 * @param eTag String
 * @param model Map<String, Object>
 */
protected void setResponseCache(WebScriptResponse res,Date modified,String eTag,Map<String,Object> model){
  Cache cache=new Cache();
  Object obj;
  if (model != null && (obj=model.get(KEY_CACHE_DIRECTIVE)) instanceof CacheDirective) {
    CacheDirective cacheDirective=(CacheDirective)obj;
    cache.setNeverCache(cacheDirective.isNeverCache());
    cache.setMustRevalidate(cacheDirective.isMustRevalidate());
    cache.setMaxAge(cacheDirective.getMaxAge());
    cache.setLastModified(cacheDirective.getLastModified());
    cache.setETag(cacheDirective.getETag());
    cache.setIsPublic(cacheDirective.isPublic());
  }
 else   if (model == null || !getBooleanValue(model.get(KEY_ALLOW_BROWSER_TO_CACHE))) {
    cache.setNeverCache(false);
    cache.setMustRevalidate(true);
    cache.setMaxAge(0L);
    cache.setLastModified(modified);
    cache.setETag(eTag);
  }
 else {
    cache.setNeverCache(false);
    cache.setMustRevalidate(false);
    cache.setMaxAge(Long.valueOf(31536000));
    cache.setLastModified(modified);
    cache.setETag(eTag);
  }
  res.setCache(cache);
}","/** 
 * Set the cache settings on the response
 * @param res WebScriptResponse
 * @param modified Date
 * @param eTag String
 */
protected void setResponseCache(WebScriptResponse res,Date modified,String eTag,Map<String,Object> model){
  Cache cache=new Cache();
  Object obj;
  if (model != null && (obj=model.get(KEY_CACHE_DIRECTIVE)) instanceof CacheDirective) {
    CacheDirective cacheDirective=(CacheDirective)obj;
    cache.setNeverCache(cacheDirective.isNeverCache());
    cache.setMustRevalidate(cacheDirective.isMustRevalidate());
    cache.setMaxAge(cacheDirective.getMaxAge());
    cache.setLastModified(cacheDirective.getLastModified());
    cache.setETag(cacheDirective.getETag());
    cache.setIsPublic(cacheDirective.isPublic());
  }
 else   if (model == null || !getBooleanValue(model.get(KEY_ALLOW_BROWSER_TO_CACHE))) {
    cache.setNeverCache(false);
    cache.setMustRevalidate(true);
    cache.setMaxAge(0L);
    cache.setLastModified(modified);
    cache.setETag(eTag);
  }
 else {
    cache.setNeverCache(false);
    cache.setMustRevalidate(false);
    cache.setMaxAge(Long.valueOf(31536000));
    cache.setLastModified(modified);
    cache.setETag(eTag);
  }
  res.setCache(cache);
}",0.9853061224489796
174741,"/** 
 * Sets the map of content transformer worker bean names to message formatting labels
 * @param knownWorkerBeanLabels Map<String, String>
 */
public void setKnownWorkerBeanLabels(Map<String,String> knownWorkerBeanLabels){
  this.knownWorkerBeanLabels=knownWorkerBeanLabels;
}","/** 
 * Sets the map of content transformer worker bean names to message formatting labels
 */
public void setKnownWorkerBeanLabels(Map<String,String> knownWorkerBeanLabels){
  this.knownWorkerBeanLabels=knownWorkerBeanLabels;
}",0.7480314960629921
174742,"/** 
 * Do the actual search
 * @param searchQuery Pair with query string in first and query language in second
 * @param sortAscending boolean
 * @param paging PagingRequest
 * @return PagingResults<TopicInfo>
 */
protected PagingResults<TopicInfo> doSearch(Pair<String,String> searchQuery,boolean sortAscending,PagingRequest paging){
  ResultSet resultSet=null;
  PagingResults<TopicInfo> pagedResults=new EmptyPagingResults<TopicInfo>();
  String sortOn=""String_Node_Str"";
  SearchParameters sp=new SearchParameters();
  sp.addStore(SPACES_STORE);
  sp.setQuery(searchQuery.getFirst());
  sp.setLanguage(searchQuery.getSecond());
  sp.addSort(sortOn,sortAscending);
  if (paging.getMaxItems() > 0) {
    sp.setLimit(paging.getMaxItems() * 10);
    sp.setLimitBy(LimitBy.FINAL_SIZE);
  }
  if (paging.getSkipCount() > 0) {
    sp.setSkipCount(paging.getSkipCount());
  }
  try {
    resultSet=searchService.query(sp);
    pagedResults=wrap(resultSet,paging);
  }
  finally {
    try {
      resultSet.close();
    }
 catch (    Exception e) {
    }
  }
  return pagedResults;
}","/** 
 * Do the actual search
 * @param searchQuery Pair with query string in first and query language in second
 * @param sortAscending boolean
 * @param paging PagingRequest
 */
protected PagingResults<TopicInfo> doSearch(Pair<String,String> searchQuery,boolean sortAscending,PagingRequest paging){
  ResultSet resultSet=null;
  PagingResults<TopicInfo> pagedResults=new EmptyPagingResults<TopicInfo>();
  String sortOn=""String_Node_Str"";
  SearchParameters sp=new SearchParameters();
  sp.addStore(SPACES_STORE);
  sp.setQuery(searchQuery.getFirst());
  sp.setLanguage(searchQuery.getSecond());
  sp.addSort(sortOn,sortAscending);
  if (paging.getMaxItems() > 0) {
    sp.setLimit(paging.getMaxItems() * 10);
    sp.setLimitBy(LimitBy.FINAL_SIZE);
  }
  if (paging.getSkipCount() > 0) {
    sp.setSkipCount(paging.getSkipCount());
  }
  try {
    resultSet=searchService.query(sp);
    pagedResults=wrap(resultSet,paging);
  }
  finally {
    try {
      resultSet.close();
    }
 catch (    Exception e) {
    }
  }
  return pagedResults;
}",0.9830348727615456
174743,"/** 
 * Wrap up search results as   {@link TopicInfo} instances
 * @param finalResults ResultSet
 * @param paging PagingRequest
 * @return PagingResults<TopicInfo>
 */
protected PagingResults<TopicInfo> wrap(final ResultSet finalResults,PagingRequest paging){
  int maxItems=paging.getMaxItems();
  Comparator<TopicInfo> lastPostDesc=new Comparator<TopicInfo>(){
    @Override public int compare(    TopicInfo t1,    TopicInfo t2){
      Date t1LastPostDate=t1.getCreatedAt();
      if (discussionService.getMostRecentPost(t1) != null) {
        t1LastPostDate=discussionService.getMostRecentPost(t1).getCreatedAt();
      }
      Date t2LastPostDate=t2.getCreatedAt();
      if (discussionService.getMostRecentPost(t2) != null) {
        t2LastPostDate=discussionService.getMostRecentPost(t2).getCreatedAt();
      }
      return t2LastPostDate.compareTo(t1LastPostDate);
    }
  }
;
  final Set<TopicInfo> topics=new TreeSet<TopicInfo>(lastPostDesc);
  for (  ResultSetRow row : finalResults) {
    Pair<TopicInfo,PostInfo> pair=discussionService.getForNodeRef(row.getNodeRef());
    TopicInfo topic=pair.getFirst();
    if (topic != null) {
      String path=nodeService.getPath(topic.getNodeRef()).toDisplayPath(nodeService,permissionService);
      String site=path.split(""String_Node_Str"")[3];
      TopicInfoImpl tii=(TopicInfoImpl)topic;
      tii.setShortSiteName(site);
      topics.add(tii);
      if (topics.size() >= maxItems) {
        break;
      }
    }
  }
  return new PagingResults<TopicInfo>(){
    @Override public boolean hasMoreItems(){
      try {
        return finalResults.hasMore();
      }
 catch (      UnsupportedOperationException e) {
        return false;
      }
    }
    @Override public Pair<Integer,Integer> getTotalResultCount(){
      int skipCount=0;
      int itemsRemainingAfterThisPage=0;
      try {
        skipCount=finalResults.getStart();
      }
 catch (      UnsupportedOperationException e) {
      }
      try {
        itemsRemainingAfterThisPage=finalResults.length();
      }
 catch (      UnsupportedOperationException e) {
      }
      final int totalItemsInUnpagedResultSet=skipCount + itemsRemainingAfterThisPage;
      return new Pair<Integer,Integer>(totalItemsInUnpagedResultSet,totalItemsInUnpagedResultSet);
    }
    @Override public List<TopicInfo> getPage(){
      return new ArrayList<TopicInfo>(topics);
    }
    @Override public String getQueryExecutionId(){
      return null;
    }
  }
;
}","/** 
 * Wrap up search results as   {@link TopicInfo} instances
 * @param finalResults ResultSet
 * @param paging PagingRequest
 */
protected PagingResults<TopicInfo> wrap(final ResultSet finalResults,PagingRequest paging){
  int maxItems=paging.getMaxItems();
  Comparator<TopicInfo> lastPostDesc=new Comparator<TopicInfo>(){
    @Override public int compare(    TopicInfo t1,    TopicInfo t2){
      Date t1LastPostDate=t1.getCreatedAt();
      if (discussionService.getMostRecentPost(t1) != null) {
        t1LastPostDate=discussionService.getMostRecentPost(t1).getCreatedAt();
      }
      Date t2LastPostDate=t2.getCreatedAt();
      if (discussionService.getMostRecentPost(t2) != null) {
        t2LastPostDate=discussionService.getMostRecentPost(t2).getCreatedAt();
      }
      return t2LastPostDate.compareTo(t1LastPostDate);
    }
  }
;
  final Set<TopicInfo> topics=new TreeSet<TopicInfo>(lastPostDesc);
  for (  ResultSetRow row : finalResults) {
    Pair<TopicInfo,PostInfo> pair=discussionService.getForNodeRef(row.getNodeRef());
    TopicInfo topic=pair.getFirst();
    if (topic != null) {
      String path=nodeService.getPath(topic.getNodeRef()).toDisplayPath(nodeService,permissionService);
      String site=path.split(""String_Node_Str"")[3];
      TopicInfoImpl tii=(TopicInfoImpl)topic;
      tii.setShortSiteName(site);
      topics.add(tii);
      if (topics.size() >= maxItems) {
        break;
      }
    }
  }
  return new PagingResults<TopicInfo>(){
    @Override public boolean hasMoreItems(){
      try {
        return finalResults.hasMore();
      }
 catch (      UnsupportedOperationException e) {
        return false;
      }
    }
    @Override public Pair<Integer,Integer> getTotalResultCount(){
      int skipCount=0;
      int itemsRemainingAfterThisPage=0;
      try {
        skipCount=finalResults.getStart();
      }
 catch (      UnsupportedOperationException e) {
      }
      try {
        itemsRemainingAfterThisPage=finalResults.length();
      }
 catch (      UnsupportedOperationException e) {
      }
      final int totalItemsInUnpagedResultSet=skipCount + itemsRemainingAfterThisPage;
      return new Pair<Integer,Integer>(totalItemsInUnpagedResultSet,totalItemsInUnpagedResultSet);
    }
    @Override public List<TopicInfo> getPage(){
      return new ArrayList<TopicInfo>(topics);
    }
    @Override public String getQueryExecutionId(){
      return null;
    }
  }
;
}",0.9926470588235294
174744,"/** 
 * Parses ISO8601 formatted Date Strings.
 * @param start If start is null then defaults to 1 month
 * @param end If end is null then it defaults to now();
 * @return Pair <Start,End>
 */
public static Pair<LocalDate,LocalDate> getStartAndEndDates(String start,String end){
  if (start == null)   return null;
  LocalDate startDate=LocalDate.parse(start);
  LocalDate endDate=end != null ? LocalDate.parse(end) : LocalDate.now();
  return new Pair<LocalDate,LocalDate>(startDate,endDate);
}","/** 
 * Parses ISO8601 formatted Date Strings.
 * @param start If start is null then defaults to 1 month
 * @param end If end is null then it defaults to now();
 */
public static Pair<LocalDate,LocalDate> getStartAndEndDates(String start,String end){
  if (start == null)   return null;
  LocalDate startDate=LocalDate.parse(start);
  LocalDate endDate=end != null ? LocalDate.parse(end) : LocalDate.now();
  return new Pair<LocalDate,LocalDate>(startDate,endDate);
}",0.9708939708939708
174745,"/** 
 * Setter for sharedLockTokens list.
 * @param sharedLockTokens Set<String>
 */
@Override public void setSharedLockTokens(Set<String> sharedLockTokens){
  if (!sharedLockTokens.isEmpty() && isExclusive()) {
    throw new IllegalStateException(""String_Node_Str"" + sharedLockTokens + ""String_Node_Str""+ toString()+ ""String_Node_Str"");
  }
  this.sharedLockTokens.clear();
  this.sharedLockTokens.addAll(sharedLockTokens);
}","/** 
 * Setter for sharedLockTokens list.
 */
@Override public void setSharedLockTokens(Set<String> sharedLockTokens){
  if (!sharedLockTokens.isEmpty() && isExclusive()) {
    throw new IllegalStateException(""String_Node_Str"" + sharedLockTokens + ""String_Node_Str""+ toString()+ ""String_Node_Str"");
  }
  this.sharedLockTokens.clear();
  this.sharedLockTokens.addAll(sharedLockTokens);
}",0.9520295202952028
174746,"/** 
 * Getter for sharedLockTokens list.
 * @return LinkedList<String>
 */
@Override public Set<String> getSharedLockTokens(){
  return sharedLockTokens;
}","/** 
 * Getter for sharedLockTokens list.
 */
@Override public Set<String> getSharedLockTokens(){
  return sharedLockTokens;
}",0.8936170212765957
174747,"/** 
 * Return the Alfresco property value for the specified WebDAV property
 * @param props Map<QName, Serializable>
 * @param davPropName String
 * @return Object
 */
public static Object getDAVPropertyValue(Map<QName,Serializable> props,String davPropName){
  QName propName=_propertyNameMap.get(davPropName);
  if (propName == null)   throw new AlfrescoRuntimeException(""String_Node_Str"" + davPropName);
  Object value=props.get(propName);
  if (value instanceof ContentData) {
    ContentData contentData=(ContentData)value;
    if (davPropName.equals(WebDAV.XML_GET_CONTENT_TYPE)) {
      value=contentData.getMimetype();
    }
 else     if (davPropName.equals(WebDAV.XML_GET_CONTENT_LENGTH)) {
      value=new Long(contentData.getSize());
    }
  }
  return value;
}","/** 
 * Return the Alfresco property value for the specified WebDAV property
 * @param davPropName String
 * @return Object
 */
public static Object getDAVPropertyValue(Map<QName,Serializable> props,String davPropName){
  QName propName=_propertyNameMap.get(davPropName);
  if (propName == null)   throw new AlfrescoRuntimeException(""String_Node_Str"" + davPropName);
  Object value=props.get(propName);
  if (value instanceof ContentData) {
    ContentData contentData=(ContentData)value;
    if (davPropName.equals(WebDAV.XML_GET_CONTENT_TYPE)) {
      value=contentData.getMimetype();
    }
 else     if (davPropName.equals(WebDAV.XML_GET_CONTENT_LENGTH)) {
      value=new Long(contentData.getSize());
    }
  }
  return value;
}",0.9727574750830564
174748,"/** 
 * Set the regular expression that will be applied to filenames during renames to detect whether clients are performing a renaming shuffle - common during file saving on various clients. <p/> <bALF-3856, ALF-7079, MNT-181</b>
 * @param renameShufflePattern      a regular expression filename match
 */
public void setRenameShufflePattern(Pattern renameShufflePattern){
  this.m_renameShufflePattern=renameShufflePattern;
}","/** 
 * Set the regular expression that will be applied to filenames during renames to detect whether clients are performing a renaming shuffle - common during file saving on various clients. <p/> <b>ALF-3856, ALF-7079, MNT-181</b>
 * @param renameShufflePattern      a regular expression filename match
 */
public void setRenameShufflePattern(Pattern renameShufflePattern){
  this.m_renameShufflePattern=renameShufflePattern;
}",0.9988304093567252
174749,"/** 
 * Set the headers passed to the gateway for authentication.
 * @param outboundHeaders Set<String>
 */
public void setOutboundHeaders(Set<String> outboundHeaders){
  if (outboundHeaders != null) {
    Set<String> trimmed=new HashSet<String>();
    for (    String value : outboundHeaders) {
      trimmed.add(value.toLowerCase(Locale.ENGLISH).trim());
    }
    outboundHeaders=trimmed;
  }
  this.outboundHeaderNames=outboundHeaders;
}","/** 
 * Set the headers passed to the gateway for authentication.
 */
public void setOutboundHeaders(Set<String> outboundHeaders){
  if (outboundHeaders != null) {
    Set<String> trimmed=new HashSet<String>();
    for (    String value : outboundHeaders) {
      trimmed.add(value.toLowerCase(Locale.ENGLISH).trim());
    }
    outboundHeaders=trimmed;
  }
  this.outboundHeaderNames=outboundHeaders;
}",0.9549763033175356
174750,"/** 
 * Inspects the entity resource and returns meta data about any addresssed/binary properties
 * @param api Api
 * @param resource Class<?>
 * @param entityPath String
 * @param metainfo List<ResourceMetadata>
 */
public static void inspectAddressedProperties(Api api,Class<?> resource,final String entityPath,List<ResourceMetadata> metainfo){
  final Map<String,List<ResourceOperation>> operationGroupedByProperty=new HashMap<String,List<ResourceOperation>>();
  MetaHelperAddressable helperForAddressProps=new MetaHelperAddressable(resource,entityPath,operationGroupedByProperty);
  findOperation(BinaryResourceAction.Read.class,HttpMethod.GET,helperForAddressProps);
  findOperation(BinaryResourceAction.Delete.class,HttpMethod.DELETE,helperForAddressProps);
  findOperation(BinaryResourceAction.Update.class,HttpMethod.PUT,helperForAddressProps);
  findOperation(BinaryResourceAction.ReadWithResponse.class,HttpMethod.GET,helperForAddressProps);
  findOperation(BinaryResourceAction.DeleteWithResponse.class,HttpMethod.DELETE,helperForAddressProps);
  findOperation(BinaryResourceAction.UpdateWithResponse.class,HttpMethod.PUT,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.Read.class,HttpMethod.GET,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.Delete.class,HttpMethod.DELETE,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.Update.class,HttpMethod.PUT,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.ReadWithResponse.class,HttpMethod.GET,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.DeleteWithResponse.class,HttpMethod.DELETE,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.UpdateWithResponse.class,HttpMethod.PUT,helperForAddressProps);
  boolean noAuth=resource.isAnnotationPresent(WebApiNoAuth.class);
  if (noAuth) {
    throw new IllegalArgumentException(""String_Node_Str"" + entityPath);
  }
  Set<Class<? extends ResourceAction>> apiNoAuth=helperForAddressProps.apiNoAuth;
  if (resource.isAnnotationPresent(WebApiDeleted.class)) {
    metainfo.add(new ResourceMetadata(ResourceDictionary.propertyResourceKey(entityPath,""String_Node_Str""),RESOURCE_TYPE.PROPERTY,null,inspectApi(resource),ALL_PROPERTY_RESOURCE_INTERFACES,apiNoAuth,null));
  }
 else {
    for (    Entry<String,List<ResourceOperation>> groupedOps : operationGroupedByProperty.entrySet()) {
      metainfo.add(new ResourceMetadata(groupedOps.getKey(),RESOURCE_TYPE.PROPERTY,groupedOps.getValue(),api,null,apiNoAuth,null));
    }
  }
}","/** 
 * Inspects the entity resource and returns meta data about any addresssed/binary properties
 * @param api Api
 * @param entityPath String
 */
public static void inspectAddressedProperties(Api api,Class<?> resource,final String entityPath,List<ResourceMetadata> metainfo){
  final Map<String,List<ResourceOperation>> operationGroupedByProperty=new HashMap<String,List<ResourceOperation>>();
  MetaHelperAddressable helperForAddressProps=new MetaHelperAddressable(resource,entityPath,operationGroupedByProperty);
  findOperation(BinaryResourceAction.Read.class,HttpMethod.GET,helperForAddressProps);
  findOperation(BinaryResourceAction.Delete.class,HttpMethod.DELETE,helperForAddressProps);
  findOperation(BinaryResourceAction.Update.class,HttpMethod.PUT,helperForAddressProps);
  findOperation(BinaryResourceAction.ReadWithResponse.class,HttpMethod.GET,helperForAddressProps);
  findOperation(BinaryResourceAction.DeleteWithResponse.class,HttpMethod.DELETE,helperForAddressProps);
  findOperation(BinaryResourceAction.UpdateWithResponse.class,HttpMethod.PUT,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.Read.class,HttpMethod.GET,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.Delete.class,HttpMethod.DELETE,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.Update.class,HttpMethod.PUT,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.ReadWithResponse.class,HttpMethod.GET,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.DeleteWithResponse.class,HttpMethod.DELETE,helperForAddressProps);
  findOperation(RelationshipResourceBinaryAction.UpdateWithResponse.class,HttpMethod.PUT,helperForAddressProps);
  boolean noAuth=resource.isAnnotationPresent(WebApiNoAuth.class);
  if (noAuth) {
    throw new IllegalArgumentException(""String_Node_Str"" + entityPath);
  }
  Set<Class<? extends ResourceAction>> apiNoAuth=helperForAddressProps.apiNoAuth;
  if (resource.isAnnotationPresent(WebApiDeleted.class)) {
    metainfo.add(new ResourceMetadata(ResourceDictionary.propertyResourceKey(entityPath,""String_Node_Str""),RESOURCE_TYPE.PROPERTY,null,inspectApi(resource),ALL_PROPERTY_RESOURCE_INTERFACES,apiNoAuth,null));
  }
 else {
    for (    Entry<String,List<ResourceOperation>> groupedOps : operationGroupedByProperty.entrySet()) {
      metainfo.add(new ResourceMetadata(groupedOps.getKey(),RESOURCE_TYPE.PROPERTY,groupedOps.getValue(),api,null,apiNoAuth,null));
    }
  }
}",0.9861932938856016
174751,"/** 
 * Inspects the resource to determine what api it belongs to. It does this by looking for the WebApi package annotation.
 * @param resource Class<?>
 * @return Api
 */
public static Api inspectApi(Class<?> resource){
  Package myPackage=resource.getPackage();
  Annotation annot=myPackage.getAnnotation(WebApi.class);
  if (annot != null) {
    Map<String,Object> annotAttribs=AnnotationUtils.getAnnotationAttributes(annot);
    String apiName=String.valueOf(annotAttribs.get(""String_Node_Str""));
    String apiScope=String.valueOf(annotAttribs.get(""String_Node_Str""));
    String apiVersion=String.valueOf(annotAttribs.get(""String_Node_Str""));
    return Api.valueOf(apiName,apiScope,apiVersion);
  }
  return null;
}","/** 
 * Inspects the resource to determine what api it belongs to. It does this by looking for the WebApi package annotation.
 * @return Api
 */
public static Api inspectApi(Class<?> resource){
  Package myPackage=resource.getPackage();
  Annotation annot=myPackage.getAnnotation(WebApi.class);
  if (annot != null) {
    Map<String,Object> annotAttribs=AnnotationUtils.getAnnotationAttributes(annot);
    String apiName=String.valueOf(annotAttribs.get(""String_Node_Str""));
    String apiScope=String.valueOf(annotAttribs.get(""String_Node_Str""));
    String apiVersion=String.valueOf(annotAttribs.get(""String_Node_Str""));
    return Api.valueOf(apiName,apiScope,apiVersion);
  }
  return null;
}",0.9802538787023978
174752,"/** 
 * Returns the method for the interface
 * @param resourceInterfaceWithOneMethod Class<? extends ResourceAction>
 * @param resource Class<?>
 * @return null or a Method
 */
public static Method findMethod(Class<? extends ResourceAction> resourceInterfaceWithOneMethod,Class<?> resource){
  Method[] resourceMethods=resourceInterfaceWithOneMethod.getMethods();
  if (resourceMethods == null || resourceMethods.length != 1) {
    throw new IllegalArgumentException(resourceInterfaceWithOneMethod + ""String_Node_Str"");
  }
  Method method=ReflectionUtils.findMethod(resource,resourceMethods[0].getName(),null);
  return method;
}","/** 
 * Returns the method for the interface
 * @return null or a Method
 */
public static Method findMethod(Class<? extends ResourceAction> resourceInterfaceWithOneMethod,Class<?> resource){
  Method[] resourceMethods=resourceInterfaceWithOneMethod.getMethods();
  if (resourceMethods == null || resourceMethods.length != 1) {
    throw new IllegalArgumentException(resourceInterfaceWithOneMethod + ""String_Node_Str"");
  }
  Method method=ReflectionUtils.findMethod(resource,resourceMethods[0].getName(),null);
  return method;
}",0.9130060292850992
174753,"/** 
 * Inspects the method and returns meta data about its operations
 * @param resource Class<?>
 * @param aMethod Method
 * @param httpMethod HttpMethod
 * @return ResourceOperation
 */
public static ResourceOperation inspectOperation(Class<?> resource,Method aMethod,HttpMethod httpMethod){
  Annotation annot=AnnotationUtils.findAnnotation(aMethod,WebApiDescription.class);
  List<ResourceParameter> parameters=new ArrayList<ResourceParameter>();
  parameters.addAll(inspectParameters(resource,aMethod,httpMethod));
  if (annot != null) {
    Map<String,Object> annotAttribs=AnnotationUtils.getAnnotationAttributes(annot);
    String title=String.valueOf(annotAttribs.get(""String_Node_Str""));
    String desc=String.valueOf(annotAttribs.get(""String_Node_Str""));
    Integer success=(Integer)annotAttribs.get(""String_Node_Str"");
    return new ResourceOperation(httpMethod,title,desc,parameters,validSuccessCode(httpMethod,success));
  }
 else {
    return new ResourceOperation(httpMethod,""String_Node_Str"",""String_Node_Str"",parameters,validSuccessCode(httpMethod,ResourceOperation.UNSET_STATUS));
  }
}","/** 
 * Inspects the method and returns meta data about its operations
 * @param aMethod Method
 * @param httpMethod HttpMethod
 * @return ResourceOperation
 */
public static ResourceOperation inspectOperation(Class<?> resource,Method aMethod,HttpMethod httpMethod){
  Annotation annot=AnnotationUtils.findAnnotation(aMethod,WebApiDescription.class);
  List<ResourceParameter> parameters=new ArrayList<ResourceParameter>();
  parameters.addAll(inspectParameters(resource,aMethod,httpMethod));
  if (annot != null) {
    Map<String,Object> annotAttribs=AnnotationUtils.getAnnotationAttributes(annot);
    String title=String.valueOf(annotAttribs.get(""String_Node_Str""));
    String desc=String.valueOf(annotAttribs.get(""String_Node_Str""));
    Integer success=(Integer)annotAttribs.get(""String_Node_Str"");
    return new ResourceOperation(httpMethod,title,desc,parameters,validSuccessCode(httpMethod,success));
  }
 else {
    return new ResourceOperation(httpMethod,""String_Node_Str"",""String_Node_Str"",parameters,validSuccessCode(httpMethod,ResourceOperation.UNSET_STATUS));
  }
}",0.8692870201096892
174754,"/** 
 * Finds the name of the entity using its annotation.
 * @param annotAttribs Map<String, Object>
 * @return the entity name/path
 */
protected static String findEntityNameByAnnotationAttributes(Map<String,Object> annotAttribs){
  Class<?> entityResourceRef=(Class<?>)annotAttribs.get(""String_Node_Str"");
  EntityResource entityAnnot=AnnotationUtils.findAnnotation(entityResourceRef,EntityResource.class);
  return findEntityName(entityAnnot);
}","/** 
 * Finds the name of the entity using its annotation.
 * @return the entity name/path
 */
protected static String findEntityNameByAnnotationAttributes(Map<String,Object> annotAttribs){
  Class<?> entityResourceRef=(Class<?>)annotAttribs.get(""String_Node_Str"");
  EntityResource entityAnnot=AnnotationUtils.findAnnotation(entityResourceRef,EntityResource.class);
  return findEntityName(entityAnnot);
}",0.9497076023391812
174755,"/** 
 * For a given class, looks for @EmbeddedEntityResource annotations, using the annotation produce a Map of the property name key and the entity key
 * @param anyClass Class<?>
 * @return A map of property key name and a value of the entity path name
 */
public static Map<String,Pair<String,Method>> findEmbeddedResources(Class<?> anyClass){
  Map<String,Pair<String,Method>> embeds=new HashMap<String,Pair<String,Method>>();
  List<Method> annotatedMethods=ResourceInspectorUtil.findMethodsByAnnotation(anyClass,EmbeddedEntityResource.class);
  if (annotatedMethods != null && !annotatedMethods.isEmpty()) {
    for (    Method annotatedMethod : annotatedMethods) {
      Annotation annot=AnnotationUtils.findAnnotation(annotatedMethod,EmbeddedEntityResource.class);
      if (annot != null) {
        Map<String,Object> annotAttribs=AnnotationUtils.getAnnotationAttributes(annot);
        String entityPath=findEntityNameByAnnotationAttributes(annotAttribs);
        String key=String.valueOf(annotAttribs.get(""String_Node_Str""));
        embeds.put(key,new Pair<String,Method>(entityPath,annotatedMethod));
      }
    }
  }
  return embeds;
}","/** 
 * For a given class, looks for @EmbeddedEntityResource annotations, using the annotation produce a Map of the property name key and the entity key
 * @return A map of property key name and a value of the entity path name
 */
public static Map<String,Pair<String,Method>> findEmbeddedResources(Class<?> anyClass){
  Map<String,Pair<String,Method>> embeds=new HashMap<String,Pair<String,Method>>();
  List<Method> annotatedMethods=ResourceInspectorUtil.findMethodsByAnnotation(anyClass,EmbeddedEntityResource.class);
  if (annotatedMethods != null && !annotatedMethods.isEmpty()) {
    for (    Method annotatedMethod : annotatedMethods) {
      Annotation annot=AnnotationUtils.findAnnotation(annotatedMethod,EmbeddedEntityResource.class);
      if (annot != null) {
        Map<String,Object> annotAttribs=AnnotationUtils.getAnnotationAttributes(annot);
        String entityPath=findEntityNameByAnnotationAttributes(annotAttribs);
        String key=String.valueOf(annotAttribs.get(""String_Node_Str""));
        embeds.put(key,new Pair<String,Method>(entityPath,annotatedMethod));
      }
    }
  }
  return embeds;
}",0.8381706244503079
174756,"/** 
 * Inspect a resource to find operations on it.
 * @param api Api
 * @param resource Class<?>
 * @param entityPath String
 * @param metainfo List<ResourceMetadata>
 */
public static void inspectOperations(Api api,Class<?> resource,final String entityPath,List<ResourceMetadata> metainfo){
  Map<String,Pair<ResourceOperation,Method>> operations=findOperations(entityPath,resource);
  if (operations != null && !operations.isEmpty()) {
    for (    Entry<String,Pair<ResourceOperation,Method>> opera : operations.entrySet()) {
      if (isDeleted(opera.getValue().getSecond())) {
        metainfo.add(new OperationResourceMetaData(opera.getKey(),api,new HashSet(Arrays.asList(opera.getValue().getFirst()))));
      }
 else {
        metainfo.add(new OperationResourceMetaData(opera.getKey(),Arrays.asList(opera.getValue().getFirst()),api,opera.getValue().getSecond()));
      }
    }
  }
}","/** 
 * Inspect a resource to find operations on it.
 * @param api Api
 * @param entityPath String
 */
public static void inspectOperations(Api api,Class<?> resource,final String entityPath,List<ResourceMetadata> metainfo){
  Map<String,Pair<ResourceOperation,Method>> operations=findOperations(entityPath,resource);
  if (operations != null && !operations.isEmpty()) {
    for (    Entry<String,Pair<ResourceOperation,Method>> opera : operations.entrySet()) {
      if (isDeleted(opera.getValue().getSecond())) {
        metainfo.add(new OperationResourceMetaData(opera.getKey(),api,new HashSet(Arrays.asList(opera.getValue().getFirst()))));
      }
 else {
        metainfo.add(new OperationResourceMetaData(opera.getKey(),Arrays.asList(opera.getValue().getFirst()),api,opera.getValue().getSecond()));
      }
    }
  }
}",0.6783216783216783
174757,"/** 
 * Indicates if this resource action is no longer supported.
 * @param resourceAction Class<? extends ResourceAction>
 * @return true if it is no longer supported
 */
public boolean isDeleted(Class<? extends ResourceAction> resourceAction){
  return apiDeleted.contains(resourceAction);
}","/** 
 * Indicates if this resource action is no longer supported.
 * @return true if it is no longer supported
 */
public boolean isDeleted(Class<? extends ResourceAction> resourceAction){
  return apiDeleted.contains(resourceAction);
}",0.6275992438563327
174758,"/** 
 * @param httpMethod HttpMethod
 * @param title String
 * @param description String
 * @param parameters List<ResourceParameter>
 * @param successStatus HTTP status
 */
public ResourceOperation(HttpMethod httpMethod,String title,String description,List<ResourceParameter> parameters,int successStatus){
  super();
  this.httpMethod=httpMethod;
  this.title=title;
  this.description=description;
  this.parameters=parameters;
  this.successStatus=successStatus;
}","/** 
 * @param httpMethod HttpMethod
 * @param title String
 * @param description String
 * @param successStatus HTTP status
 */
public ResourceOperation(HttpMethod httpMethod,String title,String description,List<ResourceParameter> parameters,int successStatus){
  super();
  this.httpMethod=httpMethod;
  this.title=title;
  this.description=description;
  this.parameters=parameters;
  this.successStatus=successStatus;
}",0.9494949494949496
174759,"/** 
 * Constructs the object based on the content as a List, the JSON can be an array or just a single value without the [] symbols
 * @param content Reader
 * @param requiredType Class<T>
 * @return A collection of the specified type
 * @throws IOException
 */
public <T>List<T> constructList(Reader content,Class<T> requiredType) throws IOException, JsonMappingException, JsonParseException {
  ObjectReader reader=objectMapper.reader(TypeFactory.defaultInstance().constructParametricType(List.class,requiredType));
  try {
    List<T> toReturn=reader.readValue(content);
    if (toReturn == null || toReturn.isEmpty()) {
      throw new InvalidArgumentException(""String_Node_Str"");
    }
    return toReturn;
  }
 catch (  IOException error) {
    throw new InvalidArgumentException(""String_Node_Str"" + error.getMessage());
  }
}","/** 
 * Constructs the object based on the content as a List, the JSON can be an array or just a single value without the [] symbols
 * @param content Reader
 * @return A collection of the specified type
 * @throws IOException
 */
public <T>List<T> constructList(Reader content,Class<T> requiredType) throws IOException, JsonMappingException, JsonParseException {
  ObjectReader reader=objectMapper.reader(TypeFactory.defaultInstance().constructParametricType(List.class,requiredType));
  try {
    List<T> toReturn=reader.readValue(content);
    if (toReturn == null || toReturn.isEmpty()) {
      throw new InvalidArgumentException(""String_Node_Str"");
    }
    return toReturn;
  }
 catch (  IOException error) {
    throw new InvalidArgumentException(""String_Node_Str"" + error.getMessage());
  }
}",0.9804161566707468
174760,"/** 
 * Constructs the object based on the content.
 * @param content Reader
 * @param requiredType Class<T>
 * @return T
 * @throws IOException
 */
public <T>T construct(Reader content,Class<T> requiredType) throws IOException, JsonMappingException, JsonParseException {
  ObjectReader reader=objectMapper.reader(requiredType);
  try {
    return reader.readValue(content);
  }
 catch (  IOException error) {
    throw new InvalidArgumentException(""String_Node_Str"" + error.getMessage());
  }
}","/** 
 * Constructs the object based on the content.
 * @param content Reader
 * @return T
 * @throws IOException
 */
public <T>T construct(Reader content,Class<T> requiredType) throws IOException, JsonMappingException, JsonParseException {
  ObjectReader reader=objectMapper.reader(requiredType);
  try {
    return reader.readValue(content);
  }
 catch (  IOException error) {
    throw new InvalidArgumentException(""String_Node_Str"" + error.getMessage());
  }
}",0.9665970772442588
174761,"/** 
 * Reads all the entries from the collection. Paging information is provided.
 * @param params - will never be null and will have the PAGING default values
 * @return CollectionWithPagingInfo<E>
 */
public CollectionWithPagingInfo<E> readAll(Parameters params,WithResponse withResponse);","/** 
 * Reads all the entries from the collection. Paging information is provided.
 * @param params - will never be null and will have the PAGING default values
 */
public CollectionWithPagingInfo<E> readAll(Parameters params,WithResponse withResponse);",0.8990825688073395
174762,"/** 
 * Reads all the relationship entities from the collection using the related entityResourceId. Paging information is provided.
 * @param entityResourceId Entity resource context for this relationship
 * @param params - will never be null and will have the PAGING default values
 * @return CollectionWithPagingInfo<E>
 */
public CollectionWithPagingInfo<E> readAll(String entityResourceId,Parameters params,WithResponse withResponse);","/** 
 * Reads all the relationship entities from the collection using the related entityResourceId. Paging information is provided.
 * @param entityResourceId Entity resource context for this relationship
 * @param params - will never be null and will have the PAGING default values
 */
public CollectionWithPagingInfo<E> readAll(String entityResourceId,Parameters params,WithResponse withResponse);",0.9342891278375148
174763,"/** 
 * A list of property names passed in the request using the json pointer syntax Specified by the ""INCLUDE"" request parameter.
 * @return List<String> the propertyNames
 */
List<String> getInclude();","/** 
 * A list of property names passed in the request using the json pointer syntax Specified by the ""INCLUDE"" request parameter.
 * @return the propertyNames
 */
List<String> getInclude();",0.9669211195928752
174764,"/** 
 * A list of property names passed in the request using the json pointer syntax Specified by the ""SELECT"" request parameter.
 * @return List<String> the propertyNames
 */
@Deprecated List<String> getSelectedProperties();","/** 
 * A list of property names passed in the request using the json pointer syntax Specified by the ""SELECT"" request parameter.
 */
@Deprecated List<String> getSelectedProperties();",0.8970588235294118
174765,"/** 
 * Takes the ""include"" parameter and turns it into a List<String> property names
 * @param includeParam String
 * @return List<String> bean property names potentially using JSON Pointer syntax
 */
@SuppressWarnings(""String_Node_Str"") public static List<String> getIncludeClause(String includeParam) throws InvalidArgumentException {
  return getClause(includeParam,""String_Node_Str"");
}","/** 
 * Takes the ""include"" parameter and turns it into a List<String> property names
 * @param includeParam String
 * @return bean property names potentially using JSON Pointer syntax
 */
@SuppressWarnings(""String_Node_Str"") public static List<String> getIncludeClause(String includeParam) throws InvalidArgumentException {
  return getClause(includeParam,""String_Node_Str"");
}",0.9830949284785436
174766,"/** 
 * Takes the ""select"" parameter and turns it into a List<String> property names
 * @param selectParam String
 * @return List<String> bean property names potentially using JSON Pointer syntax
 */
@SuppressWarnings(""String_Node_Str"") @Deprecated public static List<String> getSelectClause(String selectParam) throws InvalidArgumentException {
  return getClause(selectParam,""String_Node_Str"");
}","/** 
 * Takes the ""select"" parameter and turns it into a List<String> property names
 * @param selectParam String
 * @return bean property names potentially using JSON Pointer syntax
 */
@SuppressWarnings(""String_Node_Str"") @Deprecated public static List<String> getSelectClause(String selectParam) throws InvalidArgumentException {
  return getClause(selectParam,""String_Node_Str"");
}",0.983397190293742
174767,"/** 
 * Takes the Sort parameter as a String and parses it into a List of SortColumn objects. The format is a comma seperated list of ""columnName sortDirection"", e.g. ""name DESC, age ASC"".  It is not case sensitive and the sort direction is optional It default to sort ASCENDING.
 * @param sortParams - String passed in on the request
 * @return List<SortColumn> - the sort columns or an empty list if the params were invalid.
 */
public static List<SortColumn> getSort(String sortParams){
  if (sortParams != null) {
    StringTokenizer st=new StringTokenizer(sortParams,""String_Node_Str"");
    List<SortColumn> sortedColumns=new ArrayList<SortColumn>(st.countTokens());
    while (st.hasMoreTokens()) {
      String token=st.nextToken();
      StringTokenizer columnDesc=new StringTokenizer(token,""String_Node_Str"");
      if (columnDesc.countTokens() <= 2) {
        String columnName=columnDesc.nextToken();
        String sortOrder=SortColumn.ASCENDING;
        if (columnDesc.hasMoreTokens()) {
          String sortDef=columnDesc.nextToken().toUpperCase();
          if (SortColumn.ASCENDING.equals(sortDef) || SortColumn.DESCENDING.equals(sortDef)) {
            sortOrder=sortDef;
          }
 else {
            logger.debug(""String_Node_Str"" + sortDef + ""String_Node_Str""+ SortColumn.ASCENDING+ ""String_Node_Str""+ SortColumn.DESCENDING+ ""String_Node_Str"");
          }
        }
        sortedColumns.add(new SortColumn(columnName,SortColumn.ASCENDING.equals(sortOrder)));
      }
    }
    return sortedColumns;
  }
  return Collections.emptyList();
}","/** 
 * Takes the Sort parameter as a String and parses it into a List of SortColumn objects. The format is a comma seperated list of ""columnName sortDirection"", e.g. ""name DESC, age ASC"".  It is not case sensitive and the sort direction is optional It default to sort ASCENDING.
 * @param sortParams - String passed in on the request
 * @return - the sort columns or an empty list if the params were invalid.
 */
public static List<SortColumn> getSort(String sortParams){
  if (sortParams != null) {
    StringTokenizer st=new StringTokenizer(sortParams,""String_Node_Str"");
    List<SortColumn> sortedColumns=new ArrayList<SortColumn>(st.countTokens());
    while (st.hasMoreTokens()) {
      String token=st.nextToken();
      StringTokenizer columnDesc=new StringTokenizer(token,""String_Node_Str"");
      if (columnDesc.countTokens() <= 2) {
        String columnName=columnDesc.nextToken();
        String sortOrder=SortColumn.ASCENDING;
        if (columnDesc.hasMoreTokens()) {
          String sortDef=columnDesc.nextToken().toUpperCase();
          if (SortColumn.ASCENDING.equals(sortDef) || SortColumn.DESCENDING.equals(sortDef)) {
            sortOrder=sortDef;
          }
 else {
            logger.debug(""String_Node_Str"" + sortDef + ""String_Node_Str""+ SortColumn.ASCENDING+ ""String_Node_Str""+ SortColumn.DESCENDING+ ""String_Node_Str"");
          }
        }
        sortedColumns.add(new SortColumn(columnName,SortColumn.ASCENDING.equals(sortOrder)));
      }
    }
    return sortedColumns;
  }
  return Collections.emptyList();
}",0.994532003859762
174768,"/** 
 * Processes the resulting resource and returns the data to be displayed
 * @param resource ResourceWithMetadata
 * @param apiResources Map<String, ResourceWithMetadata>
 * @return Either a ExecutionResult or a CollectionWithPagingInfo
 */
public static Object processResult(ResourceWithMetadata resource,Map<String,ResourceWithMetadata> apiResources){
  List<ExecutionResult> results=new ArrayList();
  if (RESOURCE_TYPE.ENTITY.equals(resource.getMetaData().getType())) {
    results.add(new ExecutionResult(resource,null));
    for (    ResourceWithMetadata aResource : apiResources.values()) {
      if (resource.getMetaData().getUniqueId().equals(aResource.getMetaData().getParentResource())) {
        results.add(new ExecutionResult(aResource,null));
      }
    }
  }
  if (results.isEmpty()) {
    return new ExecutionResult(resource,null);
  }
 else {
    return CollectionWithPagingInfo.asPaged(Paging.DEFAULT,results);
  }
}","/** 
 * Processes the resulting resource and returns the data to be displayed
 * @param resource ResourceWithMetadata
 * @return Either a ExecutionResult or a CollectionWithPagingInfo
 */
public static Object processResult(ResourceWithMetadata resource,Map<String,ResourceWithMetadata> apiResources){
  List<ExecutionResult> results=new ArrayList();
  if (RESOURCE_TYPE.ENTITY.equals(resource.getMetaData().getType())) {
    results.add(new ExecutionResult(resource,null));
    for (    ResourceWithMetadata aResource : apiResources.values()) {
      if (resource.getMetaData().getUniqueId().equals(aResource.getMetaData().getParentResource())) {
        results.add(new ExecutionResult(aResource,null));
      }
    }
  }
  if (results.isEmpty()) {
    return new ExecutionResult(resource,null);
  }
 else {
    return CollectionWithPagingInfo.asPaged(Paging.DEFAULT,results);
  }
}",0.9687328579264948
174769,"/** 
 * @in
 */
public void execute(WebScriptRequest req,WebScriptResponse res) throws IOException {
  ContentReader textReader=null;
  Exception transformException=null;
  String nodeIDString=req.getParameter(""String_Node_Str"");
  if (nodeIDString == null) {
    throw new WebScriptException(""String_Node_Str"");
  }
  long nodeId=Long.valueOf(nodeIDString).longValue();
  String propertyQName=req.getParameter(""String_Node_Str"");
  QName propertyName=null;
  if (propertyQName == null) {
    propertyName=ContentModel.PROP_CONTENT;
  }
 else {
    propertyName=QName.createQName(propertyQName);
  }
  Pair<Long,NodeRef> pair=nodeDAO.getNodePair(nodeId);
  if (pair == null) {
    throw new WebScriptException(""String_Node_Str"");
  }
  NodeRef nodeRef=pair.getSecond();
  Date modified=(Date)nodeService.getProperty(nodeRef,ContentModel.PROP_MODIFIED);
  if (modified == null) {
    modified=new Date();
  }
  long modifiedSince=-1;
  String modifiedSinceStr=req.getHeader(""String_Node_Str"");
  if (modifiedSinceStr != null) {
    try {
      modifiedSince=dateFormat.parse(modifiedSinceStr).getTime();
    }
 catch (    Throwable e) {
      if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + modifiedSinceStr);
      }
    }
    if (modifiedSince > 0L) {
      long modDate=(modified.getTime() / 1000L) * 1000L;
      if (modDate <= modifiedSince) {
        res.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
        return;
      }
    }
  }
  ContentReader reader=contentService.getReader(nodeRef,propertyName);
  if (reader == null) {
    res.setStatus(HttpStatus.SC_NO_CONTENT);
    return;
  }
  try {
    TransformationOptions options=new TransformationOptions();
    options.setUse(""String_Node_Str"");
    options.setSourceNodeRef(nodeRef);
    transformerDebug.pushAvailable(reader.getContentUrl(),reader.getMimetype(),MimetypeMap.MIMETYPE_TEXT_PLAIN,options);
    long sourceSize=reader.getSize();
    List<ContentTransformer> transformers=contentService.getActiveTransformers(reader.getMimetype(),sourceSize,MimetypeMap.MIMETYPE_TEXT_PLAIN,options);
    transformerDebug.availableTransformers(transformers,sourceSize,options,""String_Node_Str"");
    if (transformers.isEmpty()) {
      res.setHeader(TRANSFORM_STATUS_HEADER,""String_Node_Str"");
      res.setStatus(HttpStatus.SC_NO_CONTENT);
      return;
    }
    ContentTransformer transformer=transformers.get(0);
    ContentWriter writer=contentService.getTempWriter();
    writer.setMimetype(MimetypeMap.MIMETYPE_TEXT_PLAIN);
    writer.setEncoding(""String_Node_Str"");
    try {
      long start=System.currentTimeMillis();
      transformer.transform(reader,writer);
      long transformDuration=System.currentTimeMillis() - start;
      res.setHeader(TRANSFORM_DURATION_HEADER,String.valueOf(transformDuration));
    }
 catch (    ContentIOException e) {
      transformException=e;
    }
    if (transformException == null) {
      textReader=writer.getReader();
      if (textReader == null || !textReader.exists()) {
        transformException=new ContentIOException(""String_Node_Str"" + ""String_Node_Str"" + transformer + ""String_Node_Str""+ ""String_Node_Str""+ writer);
      }
    }
    if (transformException != null) {
      res.setHeader(TRANSFORM_STATUS_HEADER,""String_Node_Str"");
      res.setHeader(TRANSFORM_EXCEPTION_HEADER,transformException.getMessage());
      res.setStatus(HttpStatus.SC_NO_CONTENT);
    }
 else {
      res.setStatus(HttpStatus.SC_OK);
      streamContentImpl(req,res,textReader,null,null,false,modified,String.valueOf(modified.getTime()),null,null);
    }
  }
  finally {
    transformerDebug.popAvailable();
  }
}","/** 
 * @in
 */
public void execute(WebScriptRequest req,WebScriptResponse res) throws IOException {
  ContentReader textReader=null;
  Exception transformException=null;
  String nodeIDString=req.getParameter(""String_Node_Str"");
  if (nodeIDString == null) {
    throw new WebScriptException(""String_Node_Str"");
  }
  long nodeId=Long.valueOf(nodeIDString).longValue();
  String propertyQName=req.getParameter(""String_Node_Str"");
  QName propertyName=null;
  if (propertyQName == null) {
    propertyName=ContentModel.PROP_CONTENT;
  }
 else {
    propertyName=QName.createQName(propertyQName);
  }
  Pair<Long,NodeRef> pair=nodeDAO.getNodePair(nodeId);
  if (pair == null) {
    res.setStatus(HttpStatus.SC_NO_CONTENT);
    return;
  }
  NodeRef nodeRef=pair.getSecond();
  Date modified=(Date)nodeService.getProperty(nodeRef,ContentModel.PROP_MODIFIED);
  if (modified == null) {
    modified=new Date();
  }
  long modifiedSince=-1;
  String modifiedSinceStr=req.getHeader(""String_Node_Str"");
  if (modifiedSinceStr != null) {
    try {
      modifiedSince=dateFormat.parse(modifiedSinceStr).getTime();
    }
 catch (    Throwable e) {
      if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + modifiedSinceStr);
      }
    }
    if (modifiedSince > 0L) {
      long modDate=(modified.getTime() / 1000L) * 1000L;
      if (modDate <= modifiedSince) {
        res.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
        return;
      }
    }
  }
  ContentReader reader=contentService.getReader(nodeRef,propertyName);
  if (reader == null) {
    res.setStatus(HttpStatus.SC_NO_CONTENT);
    return;
  }
  try {
    TransformationOptions options=new TransformationOptions();
    options.setUse(""String_Node_Str"");
    options.setSourceNodeRef(nodeRef);
    transformerDebug.pushAvailable(reader.getContentUrl(),reader.getMimetype(),MimetypeMap.MIMETYPE_TEXT_PLAIN,options);
    long sourceSize=reader.getSize();
    List<ContentTransformer> transformers=contentService.getActiveTransformers(reader.getMimetype(),sourceSize,MimetypeMap.MIMETYPE_TEXT_PLAIN,options);
    transformerDebug.availableTransformers(transformers,sourceSize,options,""String_Node_Str"");
    if (transformers.isEmpty()) {
      res.setHeader(TRANSFORM_STATUS_HEADER,""String_Node_Str"");
      res.setStatus(HttpStatus.SC_NO_CONTENT);
      return;
    }
    ContentTransformer transformer=transformers.get(0);
    ContentWriter writer=contentService.getTempWriter();
    writer.setMimetype(MimetypeMap.MIMETYPE_TEXT_PLAIN);
    writer.setEncoding(""String_Node_Str"");
    try {
      long start=System.currentTimeMillis();
      transformer.transform(reader,writer);
      long transformDuration=System.currentTimeMillis() - start;
      res.setHeader(TRANSFORM_DURATION_HEADER,String.valueOf(transformDuration));
    }
 catch (    ContentIOException e) {
      transformException=e;
    }
    if (transformException == null) {
      textReader=writer.getReader();
      if (textReader == null || !textReader.exists()) {
        transformException=new ContentIOException(""String_Node_Str"" + ""String_Node_Str"" + transformer + ""String_Node_Str""+ ""String_Node_Str""+ writer);
      }
    }
    if (transformException != null) {
      res.setHeader(TRANSFORM_STATUS_HEADER,""String_Node_Str"");
      res.setHeader(TRANSFORM_EXCEPTION_HEADER,transformException.getMessage());
      res.setStatus(HttpStatus.SC_NO_CONTENT);
    }
 else {
      res.setStatus(HttpStatus.SC_OK);
      streamContentImpl(req,res,textReader,null,null,false,modified,String.valueOf(modified.getTime()),null,null);
    }
  }
  finally {
    transformerDebug.popAvailable();
  }
}",0.9865236523652364
174770,"private SolrFacetProperties parseRequestForFacetProperties(WebScriptRequest req){
  JSONObject json=null;
  try {
    json=new JSONObject(new JSONTokener(req.getContent().getContent()));
    final String filterID=json.getString(PARAM_FILTER_ID);
    validateFilterID(filterID);
    final String facetQNameStr=json.getString(PARAM_FACET_QNAME);
    final QName facetQName=QName.createQName(facetQNameStr,namespaceService);
    final String displayName=json.getString(PARAM_DISPLAY_NAME);
    final String displayControl=json.getString(PARAM_DISPLAY_CONTROL);
    final int maxFilters=json.getInt(PARAM_MAX_FILTERS);
    final int hitThreshold=json.getInt(PARAM_HIT_THRESHOLD);
    final int minFilterValueLength=json.getInt(PARAM_MIN_FILTER_VALUE_LENGTH);
    final String sortBy=json.getString(PARAM_SORT_BY);
    final String scope=getValue(String.class,json.opt(PARAM_SCOPE),""String_Node_Str"");
    final boolean isEnabled=getValue(Boolean.class,json.opt(PARAM_IS_ENABLED),false);
    JSONArray scopedSitesJsonArray=getValue(JSONArray.class,json.opt(PARAM_SCOPED_SITES),null);
    final Set<String> scopedSites=getScopedSites(scopedSitesJsonArray);
    final JSONObject customPropJsonObj=getValue(JSONObject.class,json.opt(PARAM_CUSTOM_PROPERTIES),null);
    final Set<CustomProperties> customProps=getCustomProperties(customPropJsonObj);
    SolrFacetProperties fp=new SolrFacetProperties.Builder().filterID(filterID).facetQName(facetQName).displayName(displayName).displayControl(displayControl).maxFilters(maxFilters).hitThreshold(hitThreshold).minFilterValueLength(minFilterValueLength).sortBy(sortBy).scope(scope).isEnabled(isEnabled).scopedSites(scopedSites).customProperties(customProps).build();
    return fp;
  }
 catch (  IOException e) {
    throw new WebScriptException(Status.STATUS_BAD_REQUEST,""String_Node_Str"",e);
  }
catch (  JSONException e) {
    throw new WebScriptException(Status.STATUS_BAD_REQUEST,""String_Node_Str"",e);
  }
}","private SolrFacetProperties parseRequestForFacetProperties(WebScriptRequest req){
  JSONObject json=null;
  try {
    json=new JSONObject(new JSONTokener(req.getContent().getContent()));
    final String filterID=json.getString(PARAM_FILTER_ID);
    validateFilterID(filterID);
    final String facetQNameStr=json.getString(PARAM_FACET_QNAME);
    final QName facetQName=FacetQNameUtils.createQName(facetQNameStr,namespaceService);
    final String displayName=json.getString(PARAM_DISPLAY_NAME);
    final String displayControl=json.getString(PARAM_DISPLAY_CONTROL);
    final int maxFilters=json.getInt(PARAM_MAX_FILTERS);
    final int hitThreshold=json.getInt(PARAM_HIT_THRESHOLD);
    final int minFilterValueLength=json.getInt(PARAM_MIN_FILTER_VALUE_LENGTH);
    final String sortBy=json.getString(PARAM_SORT_BY);
    final String scope=getValue(String.class,json.opt(PARAM_SCOPE),""String_Node_Str"");
    final boolean isEnabled=getValue(Boolean.class,json.opt(PARAM_IS_ENABLED),false);
    JSONArray scopedSitesJsonArray=getValue(JSONArray.class,json.opt(PARAM_SCOPED_SITES),null);
    final Set<String> scopedSites=getScopedSites(scopedSitesJsonArray);
    final JSONObject customPropJsonObj=getValue(JSONObject.class,json.opt(PARAM_CUSTOM_PROPERTIES),null);
    final Set<CustomProperties> customProps=getCustomProperties(customPropJsonObj);
    SolrFacetProperties fp=new SolrFacetProperties.Builder().filterID(filterID).facetQName(facetQName).displayName(displayName).displayControl(displayControl).maxFilters(maxFilters).hitThreshold(hitThreshold).minFilterValueLength(minFilterValueLength).sortBy(sortBy).scope(scope).isEnabled(isEnabled).scopedSites(scopedSites).customProperties(customProps).build();
    return fp;
  }
 catch (  IOException e) {
    throw new WebScriptException(Status.STATUS_BAD_REQUEST,""String_Node_Str"",e);
  }
catch (  JSONException e) {
    throw new WebScriptException(Status.STATUS_BAD_REQUEST,""String_Node_Str"",e);
  }
}",0.997443762781186
174771,"private SolrFacetProperties parseRequestForFacetProperties(WebScriptRequest req){
  JSONObject json=null;
  try {
    json=new JSONObject(new JSONTokener(req.getContent().getContent()));
    final String filterID=json.getString(PARAM_FILTER_ID);
    final String facetQNameStr=getValue(String.class,json.opt(PARAM_FACET_QNAME),null);
    final QName facetQName=(facetQNameStr == null) ? null : QName.createQName(facetQNameStr,namespaceService);
    final String displayName=getValue(String.class,json.opt(PARAM_DISPLAY_NAME),null);
    final String displayControl=getValue(String.class,json.opt(PARAM_DISPLAY_CONTROL),null);
    final int maxFilters=getValue(Integer.class,json.opt(PARAM_MAX_FILTERS),-1);
    final int hitThreshold=getValue(Integer.class,json.opt(PARAM_HIT_THRESHOLD),-1);
    final int minFilterValueLength=getValue(Integer.class,json.opt(PARAM_MIN_FILTER_VALUE_LENGTH),-1);
    final String sortBy=getValue(String.class,json.opt(PARAM_SORT_BY),null);
    final String scope=getValue(String.class,json.opt(PARAM_SCOPE),null);
    final Boolean isEnabled=getValue(Boolean.class,json.opt(PARAM_IS_ENABLED),null);
    JSONArray scopedSitesJsonArray=getValue(JSONArray.class,json.opt(PARAM_SCOPED_SITES),null);
    final Set<String> scopedSites=getScopedSites(scopedSitesJsonArray);
    final JSONObject customPropJsonObj=getValue(JSONObject.class,json.opt(PARAM_CUSTOM_PROPERTIES),null);
    final Set<CustomProperties> customProps=getCustomProperties(customPropJsonObj);
    SolrFacetProperties fp=new SolrFacetProperties.Builder().filterID(filterID).facetQName(facetQName).displayName(displayName).displayControl(displayControl).maxFilters(maxFilters).hitThreshold(hitThreshold).minFilterValueLength(minFilterValueLength).sortBy(sortBy).scope(scope).isEnabled(isEnabled).scopedSites(scopedSites).customProperties(customProps).build();
    return fp;
  }
 catch (  IOException e) {
    throw new WebScriptException(Status.STATUS_BAD_REQUEST,""String_Node_Str"",e);
  }
catch (  JSONException e) {
    throw new WebScriptException(Status.STATUS_BAD_REQUEST,""String_Node_Str"",e);
  }
}","private SolrFacetProperties parseRequestForFacetProperties(WebScriptRequest req){
  JSONObject json=null;
  try {
    json=new JSONObject(new JSONTokener(req.getContent().getContent()));
    final String filterID=json.getString(PARAM_FILTER_ID);
    final String facetQNameStr=getValue(String.class,json.opt(PARAM_FACET_QNAME),null);
    final QName facetQName=(facetQNameStr == null) ? null : FacetQNameUtils.createQName(facetQNameStr,namespaceService);
    final String displayName=getValue(String.class,json.opt(PARAM_DISPLAY_NAME),null);
    final String displayControl=getValue(String.class,json.opt(PARAM_DISPLAY_CONTROL),null);
    final int maxFilters=getValue(Integer.class,json.opt(PARAM_MAX_FILTERS),-1);
    final int hitThreshold=getValue(Integer.class,json.opt(PARAM_HIT_THRESHOLD),-1);
    final int minFilterValueLength=getValue(Integer.class,json.opt(PARAM_MIN_FILTER_VALUE_LENGTH),-1);
    final String sortBy=getValue(String.class,json.opt(PARAM_SORT_BY),null);
    final String scope=getValue(String.class,json.opt(PARAM_SCOPE),null);
    final Boolean isEnabled=getValue(Boolean.class,json.opt(PARAM_IS_ENABLED),null);
    JSONArray scopedSitesJsonArray=getValue(JSONArray.class,json.opt(PARAM_SCOPED_SITES),null);
    final Set<String> scopedSites=getScopedSites(scopedSitesJsonArray);
    final JSONObject customPropJsonObj=getValue(JSONObject.class,json.opt(PARAM_CUSTOM_PROPERTIES),null);
    final Set<CustomProperties> customProps=getCustomProperties(customPropJsonObj);
    SolrFacetProperties fp=new SolrFacetProperties.Builder().filterID(filterID).facetQName(facetQName).displayName(displayName).displayControl(displayControl).maxFilters(maxFilters).hitThreshold(hitThreshold).minFilterValueLength(minFilterValueLength).sortBy(sortBy).scope(scope).isEnabled(isEnabled).scopedSites(scopedSites).customProperties(customProps).build();
    return fp;
  }
 catch (  IOException e) {
    throw new WebScriptException(Status.STATUS_BAD_REQUEST,""String_Node_Str"",e);
  }
catch (  JSONException e) {
    throw new WebScriptException(Status.STATUS_BAD_REQUEST,""String_Node_Str"",e);
  }
}",0.997622444127437
174772,"/** 
 * Exceute the WebDAV request
 * @exception WebDAVServerException
 */
protected void executeImpl() throws WebDAVServerException, Exception {
  FileFolderService fileFolderService=getFileFolderService();
  NodeRef rootNodeRef=getRootNodeRef();
  String path=getPath();
  String servletPath=getServletPath();
  FileInfo nodeInfo=null;
  try {
    nodeInfo=getDAVHelper().getNodeForPath(rootNodeRef,path,servletPath);
  }
 catch (  FileNotFoundException e) {
    throw new WebDAVServerException(HttpServletResponse.SC_NOT_FOUND);
  }
  FileInfo realNodeInfo=nodeInfo;
  if (realNodeInfo.isLink()) {
    Path pathToNode=getNodeService().getPath(nodeInfo.getLinkNodeRef());
    if (pathToNode.size() > 2) {
      pathToNode=pathToNode.subPath(2,pathToNode.size() - 1);
    }
    String rootURL=WebDAV.getURLForPath(m_request,pathToNode.toDisplayPath(getNodeService(),getPermissionService()),true);
    if (rootURL.endsWith(WebDAVHelper.PathSeperator) == false) {
      rootURL=rootURL + WebDAVHelper.PathSeperator;
    }
    String fname=(String)getNodeService().getProperty(nodeInfo.getLinkNodeRef(),ContentModel.PROP_NAME);
    String webDavUrl=m_request.getServerName() + ""String_Node_Str"" + m_request.getServerPort()+ rootURL+ WebDAVHelper.encodeURL(fname,m_userAgent);
    StringBuilder urlStr=new StringBuilder();
    urlStr.append(""String_Node_Str"");
    urlStr.append(""String_Node_Str"");
    urlStr.append(webDavUrl);
    urlStr.append(""String_Node_Str"");
    m_response.setHeader(WebDAV.HEADER_CONTENT_TYPE,""String_Node_Str"");
    m_response.setHeader(WebDAV.HEADER_CONTENT_LENGTH,String.valueOf(urlStr.length()));
    m_response.getWriter().write(urlStr.toString());
  }
 else   if (realNodeInfo.isFolder()) {
    if (!m_returnContent) {
      return;
    }
    m_response.setContentType(""String_Node_Str"");
    generateDirectoryListing(nodeInfo);
  }
 else {
    checkPreConditions(realNodeInfo);
    m_response.setHeader(WebDAV.HEADER_ETAG,getDAVHelper().makeQuotedETag(nodeInfo));
    Date modifiedDate=realNodeInfo.getModifiedDate();
    if (modifiedDate != null) {
      long modDate=DefaultTypeConverter.INSTANCE.longValue(modifiedDate);
      m_response.setHeader(WebDAV.HEADER_LAST_MODIFIED,WebDAV.formatHeaderDate(modDate));
    }
    ContentReader reader=fileFolderService.getReader(realNodeInfo.getNodeRef());
    reader=FileContentReader.getSafeContentReader((ContentReader)reader,I18NUtil.getMessage(FileContentReader.MSG_MISSING_CONTENT),realNodeInfo.getNodeRef(),reader);
    if (byteRanges != null && byteRanges.startsWith(RANGE_HEADER_UNIT_SPECIFIER)) {
      HttpRangeProcessor rangeProcessor=new HttpRangeProcessor(getContentService());
      String userAgent=m_request.getHeader(WebDAV.HEADER_USER_AGENT);
      if (m_returnContent) {
        rangeProcessor.processRange(m_response,reader,byteRanges.substring(6),realNodeInfo.getNodeRef(),ContentModel.PROP_CONTENT,reader.getMimetype(),userAgent);
      }
    }
 else {
      m_response.setHeader(WebDAV.HEADER_CONTENT_LENGTH,Long.toString(reader.getSize()));
      m_response.setHeader(WebDAV.HEADER_CONTENT_TYPE,reader.getMimetype());
      if (m_returnContent) {
        reader.getContent(m_response.getOutputStream());
      }
    }
  }
}","/** 
 * Exceute the WebDAV request
 * @exception WebDAVServerException
 */
protected void executeImpl() throws WebDAVServerException, Exception {
  FileFolderService fileFolderService=getFileFolderService();
  NodeRef rootNodeRef=getRootNodeRef();
  String path=getPath();
  String servletPath=getServletPath();
  FileInfo nodeInfo=null;
  try {
    nodeInfo=getDAVHelper().getNodeForPath(rootNodeRef,path,servletPath);
  }
 catch (  FileNotFoundException e) {
    throw new WebDAVServerException(HttpServletResponse.SC_NOT_FOUND);
  }
  FileInfo realNodeInfo=nodeInfo;
  if (realNodeInfo.isLink()) {
    Path pathToNode=getNodeService().getPath(nodeInfo.getLinkNodeRef());
    if (pathToNode.size() > 2) {
      pathToNode=pathToNode.subPath(2,pathToNode.size() - 1);
    }
    String rootURL=getDAVHelper().getURLForPath(m_request,pathToNode.toDisplayPath(getNodeService(),getPermissionService()),true);
    if (rootURL.endsWith(WebDAVHelper.PathSeperator) == false) {
      rootURL=rootURL + WebDAVHelper.PathSeperator;
    }
    String fname=(String)getNodeService().getProperty(nodeInfo.getLinkNodeRef(),ContentModel.PROP_NAME);
    String webDavUrl=m_request.getServerName() + ""String_Node_Str"" + m_request.getServerPort()+ rootURL+ WebDAVHelper.encodeURL(fname,m_userAgent);
    StringBuilder urlStr=new StringBuilder();
    urlStr.append(""String_Node_Str"");
    urlStr.append(""String_Node_Str"");
    urlStr.append(webDavUrl);
    urlStr.append(""String_Node_Str"");
    m_response.setHeader(WebDAV.HEADER_CONTENT_TYPE,""String_Node_Str"");
    m_response.setHeader(WebDAV.HEADER_CONTENT_LENGTH,String.valueOf(urlStr.length()));
    m_response.getWriter().write(urlStr.toString());
  }
 else   if (realNodeInfo.isFolder()) {
    if (!m_returnContent) {
      return;
    }
    m_response.setContentType(""String_Node_Str"");
    generateDirectoryListing(nodeInfo);
  }
 else {
    checkPreConditions(realNodeInfo);
    m_response.setHeader(WebDAV.HEADER_ETAG,getDAVHelper().makeQuotedETag(nodeInfo));
    Date modifiedDate=realNodeInfo.getModifiedDate();
    if (modifiedDate != null) {
      long modDate=DefaultTypeConverter.INSTANCE.longValue(modifiedDate);
      m_response.setHeader(WebDAV.HEADER_LAST_MODIFIED,WebDAV.formatHeaderDate(modDate));
    }
    ContentReader reader=fileFolderService.getReader(realNodeInfo.getNodeRef());
    reader=FileContentReader.getSafeContentReader((ContentReader)reader,I18NUtil.getMessage(FileContentReader.MSG_MISSING_CONTENT),realNodeInfo.getNodeRef(),reader);
    if (byteRanges != null && byteRanges.startsWith(RANGE_HEADER_UNIT_SPECIFIER)) {
      HttpRangeProcessor rangeProcessor=new HttpRangeProcessor(getContentService());
      String userAgent=m_request.getHeader(WebDAV.HEADER_USER_AGENT);
      if (m_returnContent) {
        rangeProcessor.processRange(m_response,reader,byteRanges.substring(6),realNodeInfo.getNodeRef(),ContentModel.PROP_CONTENT,reader.getMimetype(),userAgent);
      }
    }
 else {
      m_response.setHeader(WebDAV.HEADER_CONTENT_LENGTH,Long.toString(reader.getSize()));
      m_response.setHeader(WebDAV.HEADER_CONTENT_TYPE,reader.getMimetype());
      if (m_returnContent) {
        reader.getContent(m_response.getOutputStream());
      }
    }
  }
}",0.9978301301921884
174773,"protected void moveOrCopy(FileFolderService fileFolderService,NodeRef sourceNodeRef,NodeRef sourceParentNodeRef,NodeRef destParentNodeRef,String name) throws Exception {
  NodeRef rootNodeRef=getRootNodeRef();
  String sourcePath=getPath();
  List<String> sourcePathElements=getDAVHelper().splitAllPaths(sourcePath);
  FileInfo sourceFileInfo=null;
  String destPath=getDestinationPath();
  List<String> destPathElements=getDAVHelper().splitAllPaths(destPath);
  FileInfo destFileInfo=null;
  NodeService nodeService=getNodeService();
  try {
    sourceFileInfo=fileFolderService.resolveNamePath(rootNodeRef,sourcePathElements);
    destFileInfo=fileFolderService.resolveNamePath(rootNodeRef,destPathElements);
  }
 catch (  FileNotFoundException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + getPath());
    }
    if (sourceFileInfo == null) {
      throw new WebDAVServerException(HttpServletResponse.SC_NOT_FOUND);
    }
  }
  checkNode(sourceFileInfo);
  if (destFileInfo != null && (isShuffleOperation(sourceFileInfo) || isVersioned(destFileInfo))) {
    copyOnlyContent(sourceNodeRef,destFileInfo,fileFolderService);
  }
 else   if (nodeService.hasAspect(sourceNodeRef,ContentModel.ASPECT_WORKING_COPY)) {
    fileFolderService.copy(sourceNodeRef,destParentNodeRef,name);
  }
 else   if (destFileInfo != null && nodeService.hasAspect(destFileInfo.getNodeRef(),ContentModel.ASPECT_WORKING_COPY)) {
    copyOnlyContent(sourceNodeRef,destFileInfo,fileFolderService);
  }
 else {
    if (sourceParentNodeRef.equals(destParentNodeRef)) {
      try {
        fileFolderService.rename(sourceNodeRef,name);
      }
 catch (      AccessDeniedException e) {
        XMLWriter xml=createXMLWriter();
        Attributes nullAttr=getDAVHelper().getNullAttributes();
        xml.startElement(WebDAV.DAV_NS,WebDAV.XML_ERROR,WebDAV.XML_NS_ERROR,nullAttr);
        xml.write(DocumentHelper.createElement(WebDAV.XML_NS_CANNOT_MODIFY_PROTECTED_PROPERTY));
        xml.endElement(WebDAV.DAV_NS,WebDAV.XML_ERROR,WebDAV.XML_NS_ERROR);
        m_response.setStatus(HttpServletResponse.SC_CONFLICT);
        return;
      }
    }
 else {
      fileFolderService.moveFrom(sourceNodeRef,sourceParentNodeRef,destParentNodeRef,name);
    }
  }
}","protected void moveOrCopy(FileFolderService fileFolderService,NodeRef sourceNodeRef,NodeRef sourceParentNodeRef,NodeRef destParentNodeRef,String name) throws Exception {
  NodeRef rootNodeRef=getRootNodeRef();
  String sourcePath=getPath();
  List<String> sourcePathElements=getDAVHelper().splitAllPaths(sourcePath);
  FileInfo sourceFileInfo=null;
  String destPath=getDestinationPath();
  List<String> destPathElements=getDAVHelper().splitAllPaths(destPath);
  FileInfo destFileInfo=null;
  NodeService nodeService=getNodeService();
  try {
    sourceFileInfo=fileFolderService.resolveNamePath(rootNodeRef,sourcePathElements);
    destFileInfo=fileFolderService.resolveNamePath(rootNodeRef,destPathElements);
  }
 catch (  FileNotFoundException e) {
    if (sourceFileInfo == null) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + sourcePath);
      }
      throw new WebDAVServerException(HttpServletResponse.SC_NOT_FOUND);
    }
  }
  checkNode(sourceFileInfo);
  if (destFileInfo != null && (isShuffleOperation(sourceFileInfo) || isVersioned(destFileInfo))) {
    copyOnlyContent(sourceNodeRef,destFileInfo,fileFolderService);
  }
 else   if (nodeService.hasAspect(sourceNodeRef,ContentModel.ASPECT_WORKING_COPY)) {
    fileFolderService.copy(sourceNodeRef,destParentNodeRef,name);
  }
 else   if (destFileInfo != null && nodeService.hasAspect(destFileInfo.getNodeRef(),ContentModel.ASPECT_WORKING_COPY)) {
    copyOnlyContent(sourceNodeRef,destFileInfo,fileFolderService);
  }
 else {
    if (sourceParentNodeRef.equals(destParentNodeRef)) {
      try {
        fileFolderService.rename(sourceNodeRef,name);
      }
 catch (      AccessDeniedException e) {
        XMLWriter xml=createXMLWriter();
        Attributes nullAttr=getDAVHelper().getNullAttributes();
        xml.startElement(WebDAV.DAV_NS,WebDAV.XML_ERROR,WebDAV.XML_NS_ERROR,nullAttr);
        xml.write(DocumentHelper.createElement(WebDAV.XML_NS_CANNOT_MODIFY_PROTECTED_PROPERTY));
        xml.endElement(WebDAV.DAV_NS,WebDAV.XML_ERROR,WebDAV.XML_NS_ERROR);
        m_response.setStatus(HttpServletResponse.SC_CONFLICT);
        return;
      }
    }
 else {
      fileFolderService.moveFrom(sourceNodeRef,sourceParentNodeRef,destParentNodeRef,name);
    }
  }
}",0.9798628015047576
174774,"@Override protected Map<String,Object> executeImpl(WebScriptRequest req,Status status,Cache cache){
  Map<String,String> templateVars=req.getServiceMatch().getTemplateVars();
  Map<String,String[]> params=new TreeMap<String,String[]>();
  Map<String,String[]> headers=new TreeMap<String,String[]>();
  for (  String paramName : req.getParameterNames()) {
    params.put(paramName,req.getParameterValues(paramName));
  }
  for (  String header : req.getHeaderNames()) {
    headers.put(header,req.getHeaderValues(header));
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + templateVars);
    log.debug(""String_Node_Str"" + params);
    log.debug(""String_Node_Str"" + headers);
  }
  String channelNodeUuid=templateVars.get(""String_Node_Str"");
  String channelNodeStoreProtocol=templateVars.get(""String_Node_Str"");
  String channelNodeStoreId=templateVars.get(""String_Node_Str"");
  NodeRef channelNodeRef=new NodeRef(channelNodeStoreProtocol,channelNodeStoreId,channelNodeUuid);
  Channel channel=channelService.getChannelById(channelNodeRef.toString());
  ChannelType.AuthStatus authStatus=channel.getChannelType().acceptAuthorisationCallback(channel,headers,params);
  if (ChannelType.AuthStatus.RETRY.equals(authStatus)) {
    String authoriseUrl=channel.getChannelType().getAuthorisationUrls(channel,channelAuthHelper.getAuthoriseCallbackUrl(channelNodeRef));
    if (authoriseUrl == null) {
      authoriseUrl=channelAuthHelper.getDefaultAuthoriseUrl(channelNodeRef);
    }
    status.setCode(HttpServletResponse.SC_MOVED_TEMPORARILY);
    status.setLocation(authoriseUrl);
  }
  Map<String,Object> model=new TreeMap<String,Object>();
  model.put(""String_Node_Str"",authStatus.name());
  return model;
}","@Override protected Map<String,Object> executeImpl(WebScriptRequest req,Status status,Cache cache){
  Map<String,String> templateVars=req.getServiceMatch().getTemplateVars();
  Map<String,String[]> params=new TreeMap<String,String[]>();
  Map<String,String[]> headers=new TreeMap<String,String[]>();
  for (  String paramName : req.getParameterNames()) {
    params.put(paramName,req.getParameterValues(paramName));
  }
  for (  String header : req.getHeaderNames()) {
    headers.put(header,req.getHeaderValues(header));
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + templateVars);
    log.debug(""String_Node_Str"" + params);
    log.debug(""String_Node_Str"" + headers);
  }
  String channelNodeUuid=templateVars.get(""String_Node_Str"");
  String channelNodeStoreProtocol=templateVars.get(""String_Node_Str"");
  String channelNodeStoreId=templateVars.get(""String_Node_Str"");
  NodeRef channelNodeRef=new NodeRef(channelNodeStoreProtocol,channelNodeStoreId,channelNodeUuid);
  Channel channel=channelService.getChannelById(channelNodeRef.toString());
  ChannelType.AuthStatus authStatus=channel.getChannelType().acceptAuthorisationCallback(channel,headers,params);
  if (ChannelType.AuthStatus.RETRY.equals(authStatus)) {
    AuthUrlPair authoriseUrls=channel.getChannelType().getAuthorisationUrls(channel,channelAuthHelper.getAuthoriseCallbackUrl(channelNodeRef));
    String authRequestUrl=authoriseUrls.authorisationRequestUrl;
    if (authRequestUrl == null) {
      authRequestUrl=channelAuthHelper.getDefaultAuthoriseUrl(channelNodeRef);
    }
    status.setCode(HttpServletResponse.SC_MOVED_TEMPORARILY);
    status.setLocation(authRequestUrl);
  }
  Map<String,Object> model=new TreeMap<String,Object>();
  model.put(""String_Node_Str"",authStatus.name());
  return model;
}",0.9605001420858198
174775,"public void testWorkflowInstancesGet() throws Exception {
  personManager.setUser(USER1);
  WorkflowDefinition adhocDef=workflowService.getDefinitionByName(getAdhocWorkflowDefinitionName());
  Map<QName,Serializable> params=new HashMap<QName,Serializable>();
  params.put(WorkflowModel.ASSOC_ASSIGNEE,personManager.get(USER2));
  Date dueDate=new Date();
  params.put(WorkflowModel.PROP_WORKFLOW_DUE_DATE,dueDate);
  params.put(WorkflowModel.PROP_WORKFLOW_PRIORITY,1);
  params.put(WorkflowModel.ASSOC_PACKAGE,packageRef);
  params.put(WorkflowModel.PROP_CONTEXT,packageRef);
  WorkflowPath adhocPath=workflowService.startWorkflow(adhocDef.getId(),params);
  String WorkflowId=adhocPath.getInstance().getId();
  workflows.add(WorkflowId);
  WorkflowTask startTask=workflowService.getTasksForWorkflowPath(adhocPath.getId()).get(0);
  WorkflowInstance adhocInstance=startTask.getPath().getInstance();
  workflowService.endTask(startTask.getId(),null);
  Response response=sendRequest(new GetRequest(URL_WORKFLOW_INSTANCES),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  String jsonStr=response.getContentAsString();
  JSONObject json=new JSONObject(jsonStr);
  JSONArray result=json.getJSONArray(""String_Node_Str"");
  assertNotNull(result);
  int totalItems=result.length();
  for (int i=0; i < result.length(); i++) {
    checkSimpleWorkflowInstanceResponse(result.getJSONObject(i));
  }
  Response forDefinitionResponse=sendRequest(new GetRequest(MessageFormat.format(URL_WORKFLOW_INSTANCES_FOR_DEFINITION,adhocDef.getId())),200);
  assertEquals(Status.STATUS_OK,forDefinitionResponse.getStatus());
  String forDefinitionJsonStr=forDefinitionResponse.getContentAsString();
  JSONObject forDefinitionJson=new JSONObject(forDefinitionJsonStr);
  JSONArray forDefinitionResult=forDefinitionJson.getJSONArray(""String_Node_Str"");
  assertNotNull(forDefinitionResult);
  for (int i=0; i < forDefinitionResult.length(); i++) {
    checkSimpleWorkflowInstanceResponse(forDefinitionResult.getJSONObject(i));
  }
  Calendar hourAgoCal=Calendar.getInstance();
  hourAgoCal.setTime(dueDate);
  hourAgoCal.add(Calendar.HOUR_OF_DAY,-1);
  Date anHourAgo=hourAgoCal.getTime();
  Calendar hourLater=Calendar.getInstance();
  hourLater.setTime(dueDate);
  hourLater.add(Calendar.HOUR_OF_DAY,1);
  Date anHourLater=hourLater.getTime();
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + USER1);
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(anHourAgo));
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(anHourLater));
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(anHourAgo));
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(anHourLater));
  if (adhocInstance.getEndDate() != null) {
    checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(adhocInstance.getEndDate()));
    checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(adhocInstance.getEndDate()));
  }
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"");
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"");
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + getAdhocWorkflowDefinitionName());
  int maxItems=3;
  for (int skipCount=0; skipCount < totalItems; skipCount+=maxItems) {
    checkPaging(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + maxItems+ ""String_Node_Str""+ skipCount,totalItems,maxItems,skipCount);
  }
  String exclude=getAdhocWorkflowDefinitionName();
  response=sendRequest(new GetRequest(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + exclude),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  jsonStr=response.getContentAsString();
  json=new JSONObject(jsonStr);
  JSONArray results=json.getJSONArray(""String_Node_Str"");
  assertNotNull(results);
  boolean adhocWorkflowPresent=false;
  for (int i=0; i < results.length(); i++) {
    JSONObject workflowInstanceJSON=results.getJSONObject(i);
    String type=workflowInstanceJSON.getString(""String_Node_Str"");
    if (exclude.equals(type)) {
      adhocWorkflowPresent=true;
      break;
    }
  }
  assertFalse(""String_Node_Str"",adhocWorkflowPresent);
}","public void testWorkflowInstancesGet() throws Exception {
  wfTestHelper.setVisible(false);
  personManager.setUser(USER1);
  WorkflowDefinition adhocDef=workflowService.getDefinitionByName(getAdhocWorkflowDefinitionName());
  Map<QName,Serializable> params=new HashMap<QName,Serializable>();
  params.put(WorkflowModel.ASSOC_ASSIGNEE,personManager.get(USER2));
  Date dueDate=new Date();
  params.put(WorkflowModel.PROP_WORKFLOW_DUE_DATE,dueDate);
  params.put(WorkflowModel.PROP_WORKFLOW_PRIORITY,1);
  params.put(WorkflowModel.ASSOC_PACKAGE,packageRef);
  params.put(WorkflowModel.PROP_CONTEXT,packageRef);
  WorkflowPath adhocPath=workflowService.startWorkflow(adhocDef.getId(),params);
  String WorkflowId=adhocPath.getInstance().getId();
  workflows.add(WorkflowId);
  WorkflowTask startTask=workflowService.getTasksForWorkflowPath(adhocPath.getId()).get(0);
  WorkflowInstance adhocInstance=startTask.getPath().getInstance();
  workflowService.endTask(startTask.getId(),null);
  Response response=sendRequest(new GetRequest(URL_WORKFLOW_INSTANCES),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  String jsonStr=response.getContentAsString();
  JSONObject json=new JSONObject(jsonStr);
  JSONArray result=json.getJSONArray(""String_Node_Str"");
  assertNotNull(result);
  int totalItems=result.length();
  for (int i=0; i < result.length(); i++) {
    checkSimpleWorkflowInstanceResponse(result.getJSONObject(i));
  }
  Response forDefinitionResponse=sendRequest(new GetRequest(MessageFormat.format(URL_WORKFLOW_INSTANCES_FOR_DEFINITION,adhocDef.getId())),200);
  assertEquals(Status.STATUS_OK,forDefinitionResponse.getStatus());
  String forDefinitionJsonStr=forDefinitionResponse.getContentAsString();
  JSONObject forDefinitionJson=new JSONObject(forDefinitionJsonStr);
  JSONArray forDefinitionResult=forDefinitionJson.getJSONArray(""String_Node_Str"");
  assertNotNull(forDefinitionResult);
  for (int i=0; i < forDefinitionResult.length(); i++) {
    checkSimpleWorkflowInstanceResponse(forDefinitionResult.getJSONObject(i));
  }
  Calendar hourAgoCal=Calendar.getInstance();
  hourAgoCal.setTime(dueDate);
  hourAgoCal.add(Calendar.HOUR_OF_DAY,-1);
  Date anHourAgo=hourAgoCal.getTime();
  Calendar hourLater=Calendar.getInstance();
  hourLater.setTime(dueDate);
  hourLater.add(Calendar.HOUR_OF_DAY,1);
  Date anHourLater=hourLater.getTime();
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + USER1);
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(anHourAgo));
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(anHourLater));
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(anHourAgo));
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(anHourLater));
  if (adhocInstance.getEndDate() != null) {
    checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(adhocInstance.getEndDate()));
    checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + ISO8601DateFormat.format(adhocInstance.getEndDate()));
  }
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"");
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"");
  checkFiltering(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + getAdhocWorkflowDefinitionName());
  int maxItems=3;
  for (int skipCount=0; skipCount < totalItems; skipCount+=maxItems) {
    checkPaging(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + maxItems+ ""String_Node_Str""+ skipCount,totalItems,maxItems,skipCount);
  }
  String exclude=getAdhocWorkflowDefinitionName();
  response=sendRequest(new GetRequest(URL_WORKFLOW_INSTANCES + ""String_Node_Str"" + exclude),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  jsonStr=response.getContentAsString();
  json=new JSONObject(jsonStr);
  JSONArray results=json.getJSONArray(""String_Node_Str"");
  assertNotNull(results);
  boolean adhocWorkflowPresent=false;
  for (int i=0; i < results.length(); i++) {
    JSONObject workflowInstanceJSON=results.getJSONObject(i);
    String type=workflowInstanceJSON.getString(""String_Node_Str"");
    if (exclude.equals(type)) {
      adhocWorkflowPresent=true;
      break;
    }
  }
  assertFalse(""String_Node_Str"",adhocWorkflowPresent);
}",0.9960224613944784
174776,"@Override protected Map<String,Object> buildModel(WorkflowModelBuilder modelBuilder,WebScriptRequest req,Status status,Cache cache){
  Map<String,String> params=req.getServiceMatch().getTemplateVars();
  WorkflowState state=getState(req);
  Map<String,Object> filters=new HashMap<String,Object>(9);
  filters.put(PARAM_INITIATOR,req.getParameter(PARAM_INITIATOR));
  filters.put(PARAM_PRIORITY,req.getParameter(PARAM_PRIORITY));
  filters.put(PARAM_DEFINITION_NAME,req.getParameter(PARAM_DEFINITION_NAME));
  String excludeParam=req.getParameter(PARAM_EXCLUDE);
  if (excludeParam != null && excludeParam.length() > 0) {
    filters.put(PARAM_EXCLUDE,new ExcludeFilter(excludeParam));
  }
  processDateFilter(req,PARAM_DUE_BEFORE,filters);
  processDateFilter(req,PARAM_DUE_AFTER,filters);
  processDateFilter(req,PARAM_STARTED_BEFORE,filters);
  processDateFilter(req,PARAM_STARTED_AFTER,filters);
  processDateFilter(req,PARAM_COMPLETED_BEFORE,filters);
  processDateFilter(req,PARAM_COMPLETED_AFTER,filters);
  String workflowDefinitionId=params.get(VAR_DEFINITION_ID);
  if (workflowDefinitionId == null) {
    workflowDefinitionId=req.getParameter(PARAM_DEFINITION_ID);
  }
  if (state == null) {
    state=WorkflowState.ACTIVE;
  }
  List<WorkflowInstance> workflows=new ArrayList<WorkflowInstance>();
  if (workflowDefinitionId != null) {
    if (state == WorkflowState.ACTIVE) {
      workflows.addAll(workflowService.getActiveWorkflows(workflowDefinitionId));
    }
 else {
      workflows.addAll(workflowService.getCompletedWorkflows(workflowDefinitionId));
    }
  }
 else {
    List<WorkflowDefinition> workflowDefinitions=workflowService.getAllDefinitions();
    for (    WorkflowDefinition workflowDefinition : workflowDefinitions) {
      if (state == WorkflowState.ACTIVE) {
        workflows.addAll(workflowService.getActiveWorkflows(workflowDefinition.getId()));
      }
 else {
        workflows.addAll(workflowService.getCompletedWorkflows(workflowDefinition.getId()));
      }
    }
  }
  Collections.sort(workflows,workflowComparator);
  List<Map<String,Object>> results=new ArrayList<Map<String,Object>>(workflows.size());
  for (  WorkflowInstance workflow : workflows) {
    if (matches(workflow,filters,modelBuilder)) {
      results.add(modelBuilder.buildSimple(workflow));
    }
  }
  return createResultModel(req,""String_Node_Str"",results);
}","@Override protected Map<String,Object> buildModel(WorkflowModelBuilder modelBuilder,WebScriptRequest req,Status status,Cache cache){
  Map<String,String> params=req.getServiceMatch().getTemplateVars();
  WorkflowState state=getState(req);
  Map<String,Object> filters=new HashMap<String,Object>(9);
  filters.put(PARAM_INITIATOR,req.getParameter(PARAM_INITIATOR));
  filters.put(PARAM_PRIORITY,req.getParameter(PARAM_PRIORITY));
  filters.put(PARAM_DEFINITION_NAME,req.getParameter(PARAM_DEFINITION_NAME));
  String excludeParam=req.getParameter(PARAM_EXCLUDE);
  if (excludeParam != null && excludeParam.length() > 0) {
    filters.put(PARAM_EXCLUDE,new ExcludeFilter(excludeParam));
  }
  processDateFilter(req,PARAM_DUE_BEFORE,filters);
  processDateFilter(req,PARAM_DUE_AFTER,filters);
  processDateFilter(req,PARAM_STARTED_BEFORE,filters);
  processDateFilter(req,PARAM_STARTED_AFTER,filters);
  processDateFilter(req,PARAM_COMPLETED_BEFORE,filters);
  processDateFilter(req,PARAM_COMPLETED_AFTER,filters);
  String workflowDefinitionId=params.get(VAR_DEFINITION_ID);
  if (workflowDefinitionId == null) {
    workflowDefinitionId=req.getParameter(PARAM_DEFINITION_ID);
  }
  List<WorkflowInstance> workflows;
  if (state == null) {
    workflows=workflowService.getWorkflows(workflowDefinitionId);
  }
 else   if (state == WorkflowState.ACTIVE) {
    workflows=workflowService.getActiveWorkflows(workflowDefinitionId);
  }
 else {
    workflows=workflowService.getCompletedWorkflows(workflowDefinitionId);
  }
  Collections.sort(workflows,workflowComparator);
  List<Map<String,Object>> results=new ArrayList<Map<String,Object>>(workflows.size());
  for (  WorkflowInstance workflow : workflows) {
    if (matches(workflow,filters,modelBuilder)) {
      results.add(modelBuilder.buildSimple(workflow));
    }
  }
  return createResultModel(req,""String_Node_Str"",results);
}",0.8305882352941176
174777,"public void execute(WebScriptRequest req,WebScriptResponse res) throws IOException {
  if (!subscriptionService.isActive()) {
    res.setStatus(404);
    return;
  }
  try {
    String userId=req.getServiceMatch().getTemplateVars().get(""String_Node_Str"");
    Object obj=executeImpl(userId,req,res);
    if (obj instanceof JSONObject || obj instanceof JSONArray) {
      res.setContentEncoding(""String_Node_Str"");
      Writer writer=res.getWriter();
      if (obj instanceof JSONObject) {
        ((JSONObject)obj).write(writer);
      }
 else {
        ((JSONArray)obj).write(writer);
      }
      writer.flush();
    }
 else {
      res.setStatus(204);
    }
  }
 catch (  SubscriptionsDisabledException sde) {
    throw new WebScriptException(404,""String_Node_Str"",sde);
  }
catch (  NoSuchPersonException nspe) {
    throw new WebScriptException(404,""String_Node_Str"" + nspe.getUserName() + ""String_Node_Str"",nspe);
  }
catch (  PrivateSubscriptionListException psle) {
    throw new WebScriptException(403,""String_Node_Str"",psle);
  }
catch (  JSONException je) {
    throw new WebScriptException(500,""String_Node_Str"",je);
  }
}","public void execute(WebScriptRequest req,WebScriptResponse res) throws IOException {
  if (!subscriptionService.isActive()) {
    res.setStatus(404);
    return;
  }
  try {
    String userId=req.getServiceMatch().getTemplateVars().get(""String_Node_Str"");
    Object obj=executeImpl(userId,req,res);
    if (obj instanceof JSONObject || obj instanceof JSONArray) {
      res.setContentEncoding(Charset.defaultCharset().displayName());
      Writer writer=res.getWriter();
      if (obj instanceof JSONObject) {
        ((JSONObject)obj).write(writer);
      }
 else {
        ((JSONArray)obj).write(writer);
      }
      writer.flush();
    }
 else {
      res.setStatus(204);
    }
  }
 catch (  SubscriptionsDisabledException sde) {
    throw new WebScriptException(404,""String_Node_Str"",sde);
  }
catch (  NoSuchPersonException nspe) {
    throw new WebScriptException(404,""String_Node_Str"" + nspe.getUserName() + ""String_Node_Str"",nspe);
  }
catch (  PrivateSubscriptionListException psle) {
    throw new WebScriptException(403,""String_Node_Str"",psle);
  }
catch (  JSONException je) {
    throw new WebScriptException(500,""String_Node_Str"",je);
  }
}",0.9760139555167904
174778,"public void testWorkflowDefinitionsGet() throws Exception {
  Response response=sendRequest(new GetRequest(URL_WORKFLOW_DEFINITIONS),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  JSONObject json=new JSONObject(response.getContentAsString());
  JSONArray results=json.getJSONArray(""String_Node_Str"");
  assertNotNull(results);
  assertTrue(results.length() > 0);
  boolean adhocWorkflowPresent=false;
  for (int i=0; i < results.length(); i++) {
    JSONObject workflowDefinitionJSON=results.getJSONObject(i);
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    assertTrue(workflowDefinitionJSON.getString(""String_Node_Str"").length() > 0);
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    String url=workflowDefinitionJSON.getString(""String_Node_Str"");
    assertTrue(url.length() > 0);
    assertTrue(url.startsWith(""String_Node_Str""));
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    assertTrue(workflowDefinitionJSON.getString(""String_Node_Str"").length() > 0);
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    assertTrue(workflowDefinitionJSON.getString(""String_Node_Str"").length() > 0);
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    assertTrue(workflowDefinitionJSON.getString(""String_Node_Str"").length() > 0);
    if (getAdhocWorkflowDefinitionName().equals(workflowDefinitionJSON.getString(""String_Node_Str""))) {
      adhocWorkflowPresent=true;
    }
  }
  assertTrue(""String_Node_Str"",adhocWorkflowPresent);
  String exclude=getAdhocWorkflowDefinitionName();
  response=sendRequest(new GetRequest(URL_WORKFLOW_DEFINITIONS + ""String_Node_Str"" + exclude),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  json=new JSONObject(response.getContentAsString());
  results=json.getJSONArray(""String_Node_Str"");
  assertNotNull(results);
  adhocWorkflowPresent=false;
  for (int i=0; i < results.length(); i++) {
    JSONObject workflowDefinitionJSON=results.getJSONObject(i);
    String name=workflowDefinitionJSON.getString(""String_Node_Str"");
    if (exclude.equals(name)) {
      adhocWorkflowPresent=true;
      break;
    }
  }
  assertFalse(""String_Node_Str"",adhocWorkflowPresent);
  exclude=getAdhocWorkflowDefinitionName() + ""String_Node_Str"";
  response=sendRequest(new GetRequest(URL_WORKFLOW_DEFINITIONS + ""String_Node_Str"" + exclude),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  json=new JSONObject(response.getContentAsString());
  results=json.getJSONArray(""String_Node_Str"");
  assertNotNull(results);
  adhocWorkflowPresent=false;
  boolean wcmWorkflowsPresent=false;
  for (int i=0; i < results.length(); i++) {
    JSONObject workflowDefinitionJSON=results.getJSONObject(i);
    String name=workflowDefinitionJSON.getString(""String_Node_Str"");
    if (name.equals(getAdhocWorkflowDefinitionName())) {
      adhocWorkflowPresent=true;
    }
    if (name.startsWith(""String_Node_Str"")) {
      wcmWorkflowsPresent=true;
    }
  }
  assertFalse(""String_Node_Str"",adhocWorkflowPresent);
  assertFalse(""String_Node_Str"",wcmWorkflowsPresent);
}","public void testWorkflowDefinitionsGet() throws Exception {
  Response response=sendRequest(new GetRequest(URL_WORKFLOW_DEFINITIONS),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  JSONObject json=new JSONObject(response.getContentAsString());
  JSONArray results=json.getJSONArray(""String_Node_Str"");
  assertNotNull(results);
  assertTrue(results.length() > 0);
  boolean adhocWorkflowPresent=false;
  for (int i=0; i < results.length(); i++) {
    JSONObject workflowDefinitionJSON=results.getJSONObject(i);
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    assertTrue(workflowDefinitionJSON.getString(""String_Node_Str"").length() > 0);
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    String url=workflowDefinitionJSON.getString(""String_Node_Str"");
    assertTrue(url.length() > 0);
    assertTrue(url.startsWith(""String_Node_Str""));
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    assertTrue(workflowDefinitionJSON.getString(""String_Node_Str"").length() > 0);
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    String title=workflowDefinitionJSON.getString(""String_Node_Str"");
    assertTrue(title.length() > 0);
    assertTrue(workflowDefinitionJSON.has(""String_Node_Str""));
    String description=workflowDefinitionJSON.getString(""String_Node_Str"");
    assertTrue(description.length() > 0);
    if (getAdhocWorkflowDefinitionName().equals(workflowDefinitionJSON.getString(""String_Node_Str""))) {
      assertEquals(getAdhocWorkflowDefinitionTitle(),title);
      assertEquals(getAdhocWorkflowDefinitionDescription(),description);
      adhocWorkflowPresent=true;
    }
  }
  assertTrue(""String_Node_Str"",adhocWorkflowPresent);
  String exclude=getAdhocWorkflowDefinitionName();
  response=sendRequest(new GetRequest(URL_WORKFLOW_DEFINITIONS + ""String_Node_Str"" + exclude),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  json=new JSONObject(response.getContentAsString());
  results=json.getJSONArray(""String_Node_Str"");
  assertNotNull(results);
  adhocWorkflowPresent=false;
  for (int i=0; i < results.length(); i++) {
    JSONObject workflowDefinitionJSON=results.getJSONObject(i);
    String name=workflowDefinitionJSON.getString(""String_Node_Str"");
    if (exclude.equals(name)) {
      adhocWorkflowPresent=true;
      break;
    }
  }
  assertFalse(""String_Node_Str"",adhocWorkflowPresent);
  exclude=getAdhocWorkflowDefinitionName() + ""String_Node_Str"";
  response=sendRequest(new GetRequest(URL_WORKFLOW_DEFINITIONS + ""String_Node_Str"" + exclude),200);
  assertEquals(Status.STATUS_OK,response.getStatus());
  json=new JSONObject(response.getContentAsString());
  results=json.getJSONArray(""String_Node_Str"");
  assertNotNull(results);
  adhocWorkflowPresent=false;
  boolean wcmWorkflowsPresent=false;
  for (int i=0; i < results.length(); i++) {
    JSONObject workflowDefinitionJSON=results.getJSONObject(i);
    String name=workflowDefinitionJSON.getString(""String_Node_Str"");
    if (name.equals(getAdhocWorkflowDefinitionName())) {
      adhocWorkflowPresent=true;
    }
    if (name.startsWith(""String_Node_Str"")) {
      wcmWorkflowsPresent=true;
    }
  }
  assertFalse(""String_Node_Str"",adhocWorkflowPresent);
  assertFalse(""String_Node_Str"",wcmWorkflowsPresent);
}",0.8887496082732685
174779,"protected <T extends Element>T fetch(IRI href,Map<String,String> args) throws Exception {
  Request get=new GetRequest(href.toString()).setArgs(args);
  Response res=sendRequest(get,200);
  Assert.assertNotNull(res);
  String xml=res.getContentAsString();
  T result=parse(new StringReader(xml));
  Assert.assertNotNull(result);
  return result;
}","protected <T extends Element>T fetch(IRI href,Map<String,String> args) throws Exception {
  Request get=new GetRequest(href.toString()).setArgs(args);
  Response res=sendRequest(get,200);
  Assert.assertNotNull(res);
  String xml=res.getContentAsString();
  T result=this.<T>parse(new StringReader(xml));
  Assert.assertNotNull(result);
  return result;
}",0.9886039886039886
174780,"@Override protected void createDocument(final WebScriptResponse res,final String store,final String path,final InputStream content){
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      String avmPath=buildAVMPath(store,path);
      try {
        String[] parts=AVMNodeConverter.SplitBase(avmPath);
        String[] dirs=parts[0].split(""String_Node_Str"");
        String parentPath=dirs[0] + ""String_Node_Str"" + dirs[1];
        int index=2;
        while (index < dirs.length) {
          String dirPath=parentPath + ""String_Node_Str"" + dirs[index];
          if (avmService.lookup(-1,dirPath) == null) {
            avmService.createDirectory(parentPath,dirs[index]);
          }
          parentPath=dirPath;
          index++;
        }
        avmService.createFile(parts[0],parts[1],content);
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + avmPath);
      }
 catch (      AccessDeniedException ae) {
        res.setStatus(Status.STATUS_UNAUTHORIZED);
      }
catch (      AVMExistsException avmErr) {
        res.setStatus(Status.STATUS_CONFLICT);
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}","@Override protected void createDocument(final WebScriptResponse res,final String store,final String path,final InputStream content){
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      String avmPath=buildAVMPath(store,path);
      try {
        String[] parts=AVMNodeConverter.SplitBase(avmPath);
        String[] dirs=parts[0].split(""String_Node_Str"");
        String parentPath=dirs[0] + ""String_Node_Str"" + dirs[1];
        int index=2;
        while (index < dirs.length) {
          String dirPath=parentPath + ""String_Node_Str"" + dirs[index];
          if (avmService.lookup(-1,dirPath) == null) {
            avmService.createDirectory(parentPath,dirs[index]);
          }
          parentPath=dirPath;
          index++;
        }
        avmService.createFile(parts[0],parts[1],content);
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + avmPath + ""String_Node_Str""+ avmService.lookup(-1,avmPath).getLength());
      }
 catch (      AccessDeniedException ae) {
        res.setStatus(Status.STATUS_UNAUTHORIZED);
      }
catch (      AVMExistsException avmErr) {
        res.setStatus(Status.STATUS_CONFLICT);
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}",0.9754768392370572
174781,"@Override protected void updateDocument(final WebScriptResponse res,final String store,final String path,final InputStream content){
  final String avmPath=buildAVMPath(store,path);
  AVMNodeDescriptor desc=this.avmService.lookup(-1,avmPath);
  if (desc == null) {
    res.setStatus(Status.STATUS_NOT_FOUND);
    return;
  }
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      try {
        ContentWriter writer=avmService.getContentWriter(avmPath);
        writer.putContent(content);
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + avmPath);
      }
 catch (      AccessDeniedException ae) {
        res.setStatus(Status.STATUS_UNAUTHORIZED);
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}","@Override protected void updateDocument(final WebScriptResponse res,final String store,final String path,final InputStream content){
  final String avmPath=buildAVMPath(store,path);
  AVMNodeDescriptor desc=this.avmService.lookup(-1,avmPath);
  if (desc == null) {
    res.setStatus(Status.STATUS_NOT_FOUND);
    return;
  }
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      try {
        ContentWriter writer=avmService.getContentWriter(avmPath);
        writer.putContent(content);
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + avmPath + ""String_Node_Str""+ avmService.lookup(-1,avmPath).getLength());
      }
 catch (      AccessDeniedException ae) {
        res.setStatus(Status.STATUS_UNAUTHORIZED);
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}",0.9640205596801829
174782,"/** 
 * Execute the webscript based on the request parameters
 */
public void execute(WebScriptRequest req,WebScriptResponse res) throws IOException {
  if (!(req instanceof WebScriptServletRequest)) {
    throw new WebScriptException(""String_Node_Str"");
  }
  HttpServletRequest httpReq=((WebScriptServletRequest)req).getHttpServletRequest();
  String extPath=req.getExtensionPath();
  String methodName=null;
  String store=null;
  String webapp=null;
  StringBuilder pathBuilder=null;
  StringTokenizer tokenizer=new StringTokenizer(extPath,""String_Node_Str"");
  if (tokenizer.hasMoreTokens()) {
    methodName=tokenizer.nextToken();
    if (tokenizer.hasMoreTokens()) {
      String el=tokenizer.nextToken();
      if (TOKEN_STORE.equals(el)) {
        store=tokenizer.nextToken();
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
      if (TOKEN_WEBAPP.equals(el)) {
        webapp=tokenizer.nextToken();
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
      while (el != null) {
        if (pathBuilder == null) {
          pathBuilder=new StringBuilder(128);
        }
        pathBuilder.append('/');
        pathBuilder.append(el);
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
    }
  }
 else {
    throw new WebScriptException(""String_Node_Str"" + extPath);
  }
  if (store == null) {
    store=req.getParameter(REQUEST_PARAM_STORE);
    if (store == null) {
      store=this.defaultStore;
    }
    if (store == null) {
      throw new WebScriptException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (webapp == null) {
    webapp=req.getParameter(REQUEST_PARAM_WEBAPP);
  }
  if (webapp != null) {
    pathBuilder.insert(0,""String_Node_Str"" + webapp);
  }
  String path=pathBuilder.toString();
  long start=0;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + methodName.toUpperCase() + ""String_Node_Str""+ store+ ""String_Node_Str""+ path);
    start=System.nanoTime();
  }
  try {
    APIMethod method=APIMethod.valueOf(methodName.toUpperCase());
switch (method) {
case LASTMODIFIED:
      validatePath(path);
    lastModified(res,store,path);
  break;
case HAS:
validatePath(path);
hasDocument(res,store,path);
break;
case GET:
validatePath(path);
getDocument(res,store,path);
break;
case LIST:
listDocuments(res,store,path,false);
break;
case LISTALL:
listDocuments(res,store,path,true);
break;
case LISTPATTERN:
listDocuments(res,store,path,req.getParameter(""String_Node_Str""));
break;
case CREATE:
validatePath(path);
createDocument(res,store,path,httpReq.getInputStream());
break;
case UPDATE:
validatePath(path);
updateDocument(res,store,path,httpReq.getInputStream());
break;
case DELETE:
validatePath(path);
deleteDocument(res,store,path);
break;
}
}
 catch (IllegalArgumentException enumErr) {
throw new WebScriptException(""String_Node_Str"" + methodName);
}
catch (IOException ioErr) {
throw new WebScriptException(""String_Node_Str"" + ioErr.getMessage());
}
if (logger.isDebugEnabled()) {
long end=System.nanoTime();
logger.debug(""String_Node_Str"" + (end - start) / 1000000f + ""String_Node_Str"");
}
}","/** 
 * Execute the webscript based on the request parameters
 */
public void execute(WebScriptRequest req,WebScriptResponse res) throws IOException {
  if (!(req instanceof WebScriptServletRequest)) {
    throw new WebScriptException(""String_Node_Str"");
  }
  HttpServletRequest httpReq=((WebScriptServletRequest)req).getHttpServletRequest();
  String extPath=req.getExtensionPath();
  String methodName=null;
  String store=null;
  String webapp=null;
  StringBuilder pathBuilder=null;
  StringTokenizer tokenizer=new StringTokenizer(extPath,""String_Node_Str"");
  if (tokenizer.hasMoreTokens()) {
    methodName=tokenizer.nextToken();
    if (tokenizer.hasMoreTokens()) {
      String el=tokenizer.nextToken();
      if (TOKEN_STORE.equals(el)) {
        store=tokenizer.nextToken();
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
      if (TOKEN_WEBAPP.equals(el)) {
        webapp=tokenizer.nextToken();
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
      while (el != null) {
        if (pathBuilder == null) {
          pathBuilder=new StringBuilder(128);
        }
        pathBuilder.append('/');
        pathBuilder.append(el);
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
    }
  }
 else {
    throw new WebScriptException(""String_Node_Str"" + extPath);
  }
  if (store == null) {
    store=req.getParameter(REQUEST_PARAM_STORE);
    if (store == null) {
      store=this.defaultStore;
    }
    if (store == null) {
      throw new WebScriptException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (webapp == null) {
    webapp=req.getParameter(REQUEST_PARAM_WEBAPP);
  }
  if (webapp != null) {
    pathBuilder.insert(0,""String_Node_Str"" + webapp);
  }
  String path=pathBuilder.toString();
  long start=0;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + methodName.toUpperCase() + ""String_Node_Str""+ store+ ""String_Node_Str""+ path);
    start=System.nanoTime();
  }
  try {
    APIMethod method=APIMethod.valueOf(methodName.toUpperCase());
switch (method) {
case LASTMODIFIED:
      validatePath(path);
    lastModified(res,store,path);
  break;
case HAS:
validatePath(path);
hasDocument(res,store,path);
break;
case GET:
validatePath(path);
getDocument(res,store,path);
break;
case LIST:
listDocuments(res,store,path,false);
break;
case LISTALL:
listDocuments(res,store,path,true);
break;
case LISTPATTERN:
listDocuments(res,store,path,req.getParameter(""String_Node_Str""));
break;
case CREATE:
validatePath(path);
if (logger.isDebugEnabled()) logger.debug(""String_Node_Str"" + httpReq.getContentLength());
createDocument(res,store,path,httpReq.getInputStream());
break;
case UPDATE:
validatePath(path);
if (logger.isDebugEnabled()) logger.debug(""String_Node_Str"" + httpReq.getContentLength());
updateDocument(res,store,path,httpReq.getInputStream());
break;
case DELETE:
validatePath(path);
deleteDocument(res,store,path);
break;
}
}
 catch (IllegalArgumentException enumErr) {
throw new WebScriptException(""String_Node_Str"" + methodName);
}
catch (IOException ioErr) {
throw new WebScriptException(""String_Node_Str"" + ioErr.getMessage());
}
if (logger.isDebugEnabled()) {
long end=System.nanoTime();
logger.debug(""String_Node_Str"" + (end - start) / 1000000f + ""String_Node_Str"");
}
}",0.971861471861472
174783,"/** 
 * Checks specified in CMIS request parameters repository Id.
 * @param repositoryId repository id
 * @throws InvalidArgumentException repository diesn't exist
 */
protected void checkRepositoryId(String repositoryId) throws InvalidArgumentException {
  if (!this.descriptorService.getServerDescriptor().getId().equals(repositoryId)) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
}","/** 
 * Checks specified in CMIS request parameters repository Id.
 * @param repositoryId repository id
 * @throws InvalidArgumentException repository diesn't exist
 */
protected void checkRepositoryId(String repositoryId) throws InvalidArgumentException {
  if (!this.descriptorService.getCurrentRepositoryDescriptor().getId().equals(repositoryId)) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
}",0.9719853836784408
174784,"/** 
 * Gets information about the CMIS repository and the capabilities it supports.
 * @param parameters repositoryId: repository Id
 * @return CMIS repository Info
 * @throws PermissionDeniedException
 * @throws UpdateConflictException
 * @throws ObjectNotFoundException
 * @throws OperationNotSupportedException
 * @throws InvalidArgumentException
 * @throws RuntimeException
 * @throws ConstraintViolationException
 */
public CmisRepositoryInfoType getRepositoryInfo(GetRepositoryInfo parameters) throws PermissionDeniedException, UpdateConflictException, ObjectNotFoundException, OperationNotSupportedException, InvalidArgumentException, RuntimeException, ConstraintViolationException {
  Descriptor serverDescriptor=descriptorService.getServerDescriptor();
  if (serverDescriptor.getId().equals(parameters.getRepositoryId()) == false) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
  CmisRepositoryInfoType repositoryInfoType=new CmisRepositoryInfoType();
  repositoryInfoType.setRepositoryId(serverDescriptor.getId());
  repositoryInfoType.setRepositoryName(serverDescriptor.getName());
  repositoryInfoType.setRepositoryRelationship(""String_Node_Str"");
  repositoryInfoType.setRepositoryDescription(""String_Node_Str"");
  repositoryInfoType.setRootFolderId((String)cmisPropertyService.getProperty(cmisService.getDefaultRootNodeRef(),CMISMapping.PROP_OBJECT_ID));
  repositoryInfoType.setVendorName(""String_Node_Str"");
  repositoryInfoType.setProductName(""String_Node_Str"" + serverDescriptor.getEdition() + ""String_Node_Str"");
  repositoryInfoType.setProductVersion(serverDescriptor.getVersion());
  CmisRepositoryCapabilitiesType capabilities=new CmisRepositoryCapabilitiesType();
  capabilities.setCapabilityMultifiling(true);
  capabilities.setCapabilityUnfiling(false);
  capabilities.setCapabilityVersionSpecificFiling(false);
  capabilities.setCapabilityPWCUpdateable(true);
  capabilities.setCapabilityAllVersionsSearchable(cmisQueryService.getAllVersionsSearchable());
  capabilities.setCapabilityJoin(joinEnumMapping.get(cmisQueryService.getJoinSupport()));
  capabilities.setCapabilityFullText(fulltextEnumMapping.get(cmisQueryService.getFullTextSearchSupport()));
  repositoryInfoType.setCapabilities(capabilities);
  repositoryInfoType.setCmisVersionsSupported(cmisService.getCMISVersion());
  return repositoryInfoType;
}","/** 
 * Gets information about the CMIS repository and the capabilities it supports.
 * @param parameters repositoryId: repository Id
 * @return CMIS repository Info
 * @throws PermissionDeniedException
 * @throws UpdateConflictException
 * @throws ObjectNotFoundException
 * @throws OperationNotSupportedException
 * @throws InvalidArgumentException
 * @throws RuntimeException
 * @throws ConstraintViolationException
 */
public CmisRepositoryInfoType getRepositoryInfo(GetRepositoryInfo parameters) throws PermissionDeniedException, UpdateConflictException, ObjectNotFoundException, OperationNotSupportedException, InvalidArgumentException, RuntimeException, ConstraintViolationException {
  checkRepositoryId(parameters.getRepositoryId());
  Descriptor serverDescriptor=descriptorService.getCurrentRepositoryDescriptor();
  CmisRepositoryInfoType repositoryInfoType=new CmisRepositoryInfoType();
  repositoryInfoType.setRepositoryId(serverDescriptor.getId());
  repositoryInfoType.setRepositoryName(serverDescriptor.getName());
  repositoryInfoType.setRepositoryRelationship(""String_Node_Str"");
  repositoryInfoType.setRepositoryDescription(""String_Node_Str"");
  repositoryInfoType.setRootFolderId((String)cmisPropertyService.getProperty(cmisService.getDefaultRootNodeRef(),CMISMapping.PROP_OBJECT_ID));
  repositoryInfoType.setVendorName(""String_Node_Str"");
  repositoryInfoType.setProductName(""String_Node_Str"" + serverDescriptor.getEdition() + ""String_Node_Str"");
  repositoryInfoType.setProductVersion(serverDescriptor.getVersion());
  CmisRepositoryCapabilitiesType capabilities=new CmisRepositoryCapabilitiesType();
  capabilities.setCapabilityMultifiling(true);
  capabilities.setCapabilityUnfiling(false);
  capabilities.setCapabilityVersionSpecificFiling(false);
  capabilities.setCapabilityPWCUpdateable(true);
  capabilities.setCapabilityAllVersionsSearchable(cmisQueryService.getAllVersionsSearchable());
  capabilities.setCapabilityJoin(joinEnumMapping.get(cmisQueryService.getJoinSupport()));
  capabilities.setCapabilityFullText(fulltextEnumMapping.get(cmisQueryService.getFullTextSearchSupport()));
  repositoryInfoType.setCapabilities(capabilities);
  repositoryInfoType.setCmisVersionsSupported(cmisService.getCMISVersion());
  return repositoryInfoType;
}",0.9531823085221144
174785,"/** 
 * Gets the definition for specified object type
 * @param parameters repositoryId: repository Id; typeId: type Id;
 * @return CMIS type definition
 * @throws PermissionDeniedException
 * @throws UpdateConflictException
 * @throws ObjectNotFoundException
 * @throws OperationNotSupportedException
 * @throws TypeNotFoundException
 * @throws InvalidArgumentException
 * @throws RuntimeException
 * @throws ConstraintViolationException
 */
public GetTypeDefinitionResponse getTypeDefinition(GetTypeDefinition parameters) throws PermissionDeniedException, UpdateConflictException, ObjectNotFoundException, OperationNotSupportedException, TypeNotFoundException, InvalidArgumentException, RuntimeException, ConstraintViolationException {
  if (descriptorService.getServerDescriptor().getId().equals(parameters.getRepositoryId()) == false) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
  GetTypeDefinitionResponse response=new GetTypeDefinitionResponse();
  response.setType(getCmisTypeDefinition(parameters.getTypeId(),true));
  return response;
}","/** 
 * Gets the definition for specified object type
 * @param parameters repositoryId: repository Id; typeId: type Id;
 * @return CMIS type definition
 * @throws PermissionDeniedException
 * @throws UpdateConflictException
 * @throws ObjectNotFoundException
 * @throws OperationNotSupportedException
 * @throws TypeNotFoundException
 * @throws InvalidArgumentException
 * @throws RuntimeException
 * @throws ConstraintViolationException
 */
public GetTypeDefinitionResponse getTypeDefinition(GetTypeDefinition parameters) throws PermissionDeniedException, UpdateConflictException, ObjectNotFoundException, OperationNotSupportedException, TypeNotFoundException, InvalidArgumentException, RuntimeException, ConstraintViolationException {
  checkRepositoryId(parameters.getRepositoryId());
  GetTypeDefinitionResponse response=new GetTypeDefinitionResponse();
  response.setType(getCmisTypeDefinition(parameters.getTypeId(),true));
  return response;
}",0.9281110560237976
174786,"/** 
 * Gets a list of available repositories for this CMIS service endpoint.
 * @return collection of CmisRepositoryEntryType (repositoryId - repository Id, repositoryName: repository name, repositoryURI: Repository URI)
 * @throws RuntimeException
 * @throws InvalidArgumentException
 * @throws OperationNotSupportedException
 * @throws UpdateConflictException
 * @throws PermissionDeniedException
 */
public List<CmisRepositoryEntryType> getRepositories() throws RuntimeException, InvalidArgumentException, OperationNotSupportedException, UpdateConflictException, PermissionDeniedException {
  CmisRepositoryEntryType repositoryEntryType=new CmisRepositoryEntryType();
  Descriptor serverDescriptor=descriptorService.getServerDescriptor();
  repositoryEntryType.setRepositoryID(serverDescriptor.getId());
  repositoryEntryType.setRepositoryName(serverDescriptor.getName());
  return Collections.singletonList(repositoryEntryType);
}","/** 
 * Gets a list of available repositories for this CMIS service endpoint.
 * @return collection of CmisRepositoryEntryType (repositoryId - repository Id, repositoryName: repository name, repositoryURI: Repository URI)
 * @throws RuntimeException
 * @throws InvalidArgumentException
 * @throws OperationNotSupportedException
 * @throws UpdateConflictException
 * @throws PermissionDeniedException
 */
public List<CmisRepositoryEntryType> getRepositories() throws RuntimeException, InvalidArgumentException, OperationNotSupportedException, UpdateConflictException, PermissionDeniedException {
  CmisRepositoryEntryType repositoryEntryType=new CmisRepositoryEntryType();
  Descriptor serverDescriptor=descriptorService.getCurrentRepositoryDescriptor();
  repositoryEntryType.setRepositoryID(serverDescriptor.getId());
  repositoryEntryType.setRepositoryName(serverDescriptor.getName());
  return Collections.singletonList(repositoryEntryType);
}",0.987772461456672
174787,"/** 
 * Gets the list of all types in the repository.
 * @param parameters repositoryId: repository Id; typeId: type Id; returnPropertyDefinitions: false (default); maxItems: 0 = Repository-default number of items(Default);skipCount: 0 = start;
 * @return collection of CmisTypeDefinitionType and boolean hasMoreItems
 * @throws RuntimeException
 * @throws InvalidArgumentException
 * @throws ObjectNotFoundException
 * @throws ConstraintViolationException
 * @throws OperationNotSupportedException
 * @throws UpdateConflictException
 * @throws PermissionDeniedException
 */
public GetTypesResponse getTypes(GetTypes parameters) throws RuntimeException, InvalidArgumentException, ObjectNotFoundException, ConstraintViolationException, OperationNotSupportedException, UpdateConflictException, PermissionDeniedException {
  if (descriptorService.getServerDescriptor().getId().equals(parameters.getRepositoryId()) == false) {
    throw new InvalidArgumentException(""String_Node_Str"");
  }
  Collection<CMISTypeId> typeIds;
  if (parameters.getTypeId() == null) {
    typeIds=cmisDictionaryService.getAllObjectTypeIds();
  }
 else {
    typeIds=cmisDictionaryService.getChildTypeIds(cmisDictionaryService.getCMISMapping().getCmisTypeId(parameters.getTypeId().getValue()),true);
  }
  GetTypesResponse response=new GetTypesResponse();
  if (parameters.getMaxItems() != null) {
    response.setHasMoreItems(parameters.getMaxItems().getValue().intValue() < typeIds.size());
  }
  Cursor cursor=createCursor(typeIds.size(),parameters.getSkipCount() != null ? parameters.getSkipCount().getValue() : null,parameters.getMaxItems() != null ? parameters.getMaxItems().getValue() : null);
  Iterator<CMISTypeId> iterTypeIds=typeIds.iterator();
  for (int i=0; i < cursor.getStartRow(); i++) {
    iterTypeIds.next();
  }
  boolean returnPropertyDefinitions=parameters.getReturnPropertyDefinitions() == null ? false : parameters.getReturnPropertyDefinitions().getValue();
  List<JAXBElement<? extends CmisTypeDefinitionType>> types=response.getType();
  for (int i=cursor.getStartRow(); i <= cursor.getEndRow(); i++) {
    JAXBElement<? extends CmisTypeDefinitionType> element=getCmisTypeDefinition(iterTypeIds.next().getTypeId(),returnPropertyDefinitions);
    if (element != null) {
      types.add(element);
    }
  }
  return response;
}","/** 
 * Gets the list of all types in the repository.
 * @param parameters repositoryId: repository Id; typeId: type Id; returnPropertyDefinitions: false (default); maxItems: 0 = Repository-default number of items(Default);skipCount: 0 = start;
 * @return collection of CmisTypeDefinitionType and boolean hasMoreItems
 * @throws RuntimeException
 * @throws InvalidArgumentException
 * @throws ObjectNotFoundException
 * @throws ConstraintViolationException
 * @throws OperationNotSupportedException
 * @throws UpdateConflictException
 * @throws PermissionDeniedException
 */
public GetTypesResponse getTypes(GetTypes parameters) throws RuntimeException, InvalidArgumentException, ObjectNotFoundException, ConstraintViolationException, OperationNotSupportedException, UpdateConflictException, PermissionDeniedException {
  checkRepositoryId(parameters.getRepositoryId());
  Collection<CMISTypeId> typeIds;
  if (parameters.getTypeId() == null) {
    typeIds=cmisDictionaryService.getAllObjectTypeIds();
  }
 else {
    typeIds=cmisDictionaryService.getChildTypeIds(cmisDictionaryService.getCMISMapping().getCmisTypeId(parameters.getTypeId().getValue()),true);
  }
  GetTypesResponse response=new GetTypesResponse();
  if (parameters.getMaxItems() != null) {
    response.setHasMoreItems(parameters.getMaxItems().getValue().intValue() < typeIds.size());
  }
  Cursor cursor=createCursor(typeIds.size(),parameters.getSkipCount() != null ? parameters.getSkipCount().getValue() : null,parameters.getMaxItems() != null ? parameters.getMaxItems().getValue() : null);
  Iterator<CMISTypeId> iterTypeIds=typeIds.iterator();
  for (int i=0; i < cursor.getStartRow(); i++) {
    iterTypeIds.next();
  }
  boolean returnPropertyDefinitions=parameters.getReturnPropertyDefinitions() == null ? false : parameters.getReturnPropertyDefinitions().getValue();
  List<JAXBElement<? extends CmisTypeDefinitionType>> types=response.getType();
  for (int i=cursor.getStartRow(); i <= cursor.getEndRow(); i++) {
    JAXBElement<? extends CmisTypeDefinitionType> element=getCmisTypeDefinition(iterTypeIds.next().getTypeId(),returnPropertyDefinitions);
    if (element != null) {
      types.add(element);
    }
  }
  return response;
}",0.9601057967820146
174788,"@Override protected void listDocuments(WebScriptResponse res,final String store,String path,String pattern) throws IOException {
  String avmPath=buildAVMPath(store,path);
  AVMNodeDescriptor node=this.avmService.lookup(-1,avmPath);
  if (node == null) {
    res.setStatus(Status.STATUS_NOT_FOUND);
    return;
  }
  if (pattern == null || pattern.length() == 0) {
    pattern=""String_Node_Str"";
  }
  String matcher=pattern.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  final Pattern pat=Pattern.compile(matcher);
  String encPath=RepoStore.encodePathISO9075(path);
  final StringBuilder query=new StringBuilder(128);
  query.append(""String_Node_Str"").append(this.rootPath).append(encPath.length() != 0 ? ('/' + encPath) : ""String_Node_Str"").append(""String_Node_Str"").append(pattern);
  final Writer out=res.getWriter();
  final StoreRef avmStore=new StoreRef(StoreRef.PROTOCOL_AVM + StoreRef.URI_FILLER + store);
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      int cropPoint=store.length() + rootPath.length() + 1;
      ResultSet resultSet=searchService.query(avmStore,SearchService.LANGUAGE_LUCENE,query.toString());
      try {
        List<NodeRef> nodes=resultSet.getNodeRefs();
        for (        NodeRef nodeRef : nodes) {
          String path=AVMNodeConverter.ToAVMVersionPath(nodeRef).getSecond();
          String name=path.substring(path.lastIndexOf('/') + 1);
          if (pat.matcher(name).matches()) {
            out.write(path.substring(cropPoint));
            out.write(""String_Node_Str"");
          }
        }
      }
  finally {
        resultSet.close();
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}","@Override protected void listDocuments(WebScriptResponse res,final String store,String path,String pattern) throws IOException {
  String avmPath=buildAVMPath(store,path);
  AVMNodeDescriptor node=this.avmService.lookup(-1,avmPath);
  if (node == null) {
    res.setStatus(Status.STATUS_NOT_FOUND);
    return;
  }
  if (pattern == null || pattern.length() == 0) {
    pattern=""String_Node_Str"";
  }
  String matcher=pattern.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  try {
    traverseNode(res.getWriter(),store,node,Pattern.compile(matcher),true);
  }
 catch (  AccessDeniedException ae) {
    res.setStatus(Status.STATUS_UNAUTHORIZED);
  }
 finally {
    res.getWriter().close();
  }
}",0.4344746162927981
174789,"@Override protected void createDocument(final WebScriptResponse res,final String store,final String path,final InputStream content){
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      String avmPath=buildAVMPath(store,path);
      try {
        String[] parts=AVMNodeConverter.SplitBase(avmPath);
        String[] dirs=parts[0].split(""String_Node_Str"");
        String parentPath=dirs[0] + ""String_Node_Str"" + dirs[1];
        int index=2;
        while (index < dirs.length) {
          String dirPath=parentPath + ""String_Node_Str"" + dirs[index];
          if (avmService.lookup(-1,dirPath) == null) {
            avmService.createDirectory(parentPath,dirs[index]);
          }
          parentPath=dirPath;
          index++;
        }
        avmService.createFile(parts[0],parts[1],content);
        avmService.createSnapshot(store,""String_Node_Str"",path);
      }
 catch (      AccessDeniedException ae) {
        res.setStatus(Status.STATUS_UNAUTHORIZED);
      }
catch (      AVMExistsException avmErr) {
        res.setStatus(Status.STATUS_CONFLICT);
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}","@Override protected void createDocument(final WebScriptResponse res,final String store,final String path,final InputStream content){
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      String avmPath=buildAVMPath(store,path);
      try {
        String[] parts=AVMNodeConverter.SplitBase(avmPath);
        String[] dirs=parts[0].split(""String_Node_Str"");
        String parentPath=dirs[0] + ""String_Node_Str"" + dirs[1];
        int index=2;
        while (index < dirs.length) {
          String dirPath=parentPath + ""String_Node_Str"" + dirs[index];
          if (avmService.lookup(-1,dirPath) == null) {
            avmService.createDirectory(parentPath,dirs[index]);
          }
          parentPath=dirPath;
          index++;
        }
        avmService.createFile(parts[0],parts[1],content);
      }
 catch (      AccessDeniedException ae) {
        res.setStatus(Status.STATUS_UNAUTHORIZED);
      }
catch (      AVMExistsException avmErr) {
        res.setStatus(Status.STATUS_CONFLICT);
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}",0.9728601252609604
174790,"private void traverseNode(Writer out,String store,AVMNodeDescriptor node,boolean recurse) throws IOException {
  int cropPoint=store.length() + this.rootPath.length() + 1;
  SortedMap<String,AVMNodeDescriptor> listing=this.avmService.getDirectoryListing(node);
  for (  AVMNodeDescriptor n : listing.values()) {
    if (n.isFile()) {
      out.write(n.getPath().substring(cropPoint));
      out.write(""String_Node_Str"");
    }
 else     if (recurse && n.isDirectory()) {
      traverseNode(out,store,n,recurse);
    }
  }
}","/** 
 * Traverse a Node and recursively output the file paths it contains.
 * @param out       Writer for output - relative paths separated by newline characters
 * @param store     AVM Store name
 * @param node      The AVM Node to traverse
 * @param pattern   Optional Pattern to match filenames against
 * @param recurse   True to recurse sub-directories  
 * @throws IOException
 */
private void traverseNode(Writer out,String store,AVMNodeDescriptor node,Pattern pattern,boolean recurse) throws IOException {
  int cropPoint=store.length() + this.rootPath.length() + 1;
  SortedMap<String,AVMNodeDescriptor> listing=this.avmService.getDirectoryListing(node);
  for (  AVMNodeDescriptor n : listing.values()) {
    if (n.isFile()) {
      String path=n.getPath();
      if (pattern != null) {
        String name=path.substring(path.lastIndexOf('/') + 1);
        if (pattern.matcher(name).matches()) {
          out.write(path.substring(cropPoint));
          out.write(""String_Node_Str"");
        }
      }
 else {
        out.write(path.substring(cropPoint));
        out.write(""String_Node_Str"");
      }
    }
 else     if (recurse && n.isDirectory()) {
      traverseNode(out,store,n,pattern,recurse);
    }
  }
}",0.5693012600229095
174791,"@SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
  int cropPoint=store.length() + rootPath.length() + 1;
  ResultSet resultSet=searchService.query(avmStore,SearchService.LANGUAGE_LUCENE,query.toString());
  try {
    List<NodeRef> nodes=resultSet.getNodeRefs();
    for (    NodeRef nodeRef : nodes) {
      String path=AVMNodeConverter.ToAVMVersionPath(nodeRef).getSecond();
      String name=path.substring(path.lastIndexOf('/') + 1);
      if (pat.matcher(name).matches()) {
        out.write(path.substring(cropPoint));
        out.write(""String_Node_Str"");
      }
    }
  }
  finally {
    resultSet.close();
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
  try {
    avmService.removeNode(avmPath);
  }
 catch (  AccessDeniedException ae) {
    res.setStatus(Status.STATUS_UNAUTHORIZED);
  }
  return null;
}",0.2430323299888517
174792,"@Override protected void deleteDocument(final WebScriptResponse res,final String store,final String path){
  final String avmPath=buildAVMPath(store,path);
  AVMNodeDescriptor desc=this.avmService.lookup(-1,avmPath);
  if (desc == null) {
    res.setStatus(Status.STATUS_NOT_FOUND);
    return;
  }
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      try {
        avmService.removeNode(avmPath);
        avmService.createSnapshot(store,""String_Node_Str"",path);
      }
 catch (      AccessDeniedException ae) {
        res.setStatus(Status.STATUS_UNAUTHORIZED);
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}","@Override protected void deleteDocument(final WebScriptResponse res,final String store,final String path){
  final String avmPath=buildAVMPath(store,path);
  AVMNodeDescriptor desc=this.avmService.lookup(-1,avmPath);
  if (desc == null) {
    res.setStatus(Status.STATUS_NOT_FOUND);
    return;
  }
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    @SuppressWarnings(""String_Node_Str"") public Object doWork() throws Exception {
      try {
        avmService.removeNode(avmPath);
      }
 catch (      AccessDeniedException ae) {
        res.setStatus(Status.STATUS_UNAUTHORIZED);
      }
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
}",0.9535382416011436
174793,"/** 
 * @param store     the store id
 * @param path      root path relative
 * @return full AVM path to document including store and root path components
 */
private String buildAVMPath(String store,String path){
  if (path.startsWith(""String_Node_Str"")) {
    path=path.substring(1);
  }
  return store + ""String_Node_Str"" + this.rootPath+ (path != null ? encodePath(path) : ""String_Node_Str"");
}","/** 
 * @param store     the AVM store id
 * @param path      root path relative
 * @return full AVM path to document including store and root path components
 */
private String buildAVMPath(String store,String path){
  if (path.startsWith(""String_Node_Str"")) {
    path=path.substring(1);
  }
  return store + ""String_Node_Str"" + this.rootPath+ (path != null ? encodePath(path) : ""String_Node_Str"");
}",0.995
174794,"/** 
 * Execute the webscript based on the request parameters
 */
public void execute(WebScriptRequest req,WebScriptResponse res) throws IOException {
  if (!(req instanceof WebScriptServletRequest)) {
    throw new WebScriptException(""String_Node_Str"");
  }
  HttpServletRequest httpReq=((WebScriptServletRequest)req).getHttpServletRequest();
  String extPath=req.getExtensionPath();
  String methodName=null;
  String store=null;
  String webapp=null;
  StringBuilder pathBuilder=null;
  StringTokenizer tokenizer=new StringTokenizer(extPath,""String_Node_Str"");
  if (tokenizer.hasMoreTokens()) {
    methodName=tokenizer.nextToken();
    if (tokenizer.hasMoreTokens()) {
      String el=tokenizer.nextToken();
      if (TOKEN_STORE.equals(el)) {
        store=tokenizer.nextToken();
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
      if (TOKEN_WEBAPP.equals(el)) {
        webapp=tokenizer.nextToken();
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
      while (el != null) {
        if (pathBuilder == null) {
          pathBuilder=new StringBuilder(128);
        }
        pathBuilder.append(""String_Node_Str"");
        pathBuilder.append(el);
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
    }
  }
 else {
    throw new WebScriptException(""String_Node_Str"" + extPath);
  }
  if (store == null) {
    store=req.getParameter(REQUEST_PARAM_STORE);
    if (store == null) {
      store=this.defaultStore;
    }
    if (store == null) {
      throw new WebScriptException(""String_Node_Str"");
    }
  }
  if (webapp == null) {
    webapp=req.getParameter(REQUEST_PARAM_WEBAPP);
  }
  if (webapp != null) {
    pathBuilder.insert(0,""String_Node_Str"" + webapp);
  }
  String path=pathBuilder.toString();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + methodName);
    logger.debug(""String_Node_Str"" + store);
    logger.debug(""String_Node_Str"" + path);
  }
  try {
    APIMethod method=APIMethod.valueOf(methodName.toUpperCase());
switch (method) {
case LASTMODIFIED:
      validatePath(path);
    lastModified(res,store,path);
  break;
case HAS:
validatePath(path);
hasDocument(res,store,path);
break;
case GET:
validatePath(path);
getDocument(res,store,path);
break;
case LIST:
listDocuments(res,store,path,false);
break;
case LISTALL:
listDocuments(res,store,path,true);
break;
case LISTPATTERN:
listDocuments(res,store,path,req.getParameter(""String_Node_Str""));
break;
case CREATE:
validatePath(path);
createDocument(res,store,path,httpReq.getInputStream());
break;
case UPDATE:
validatePath(path);
updateDocument(res,store,path,httpReq.getInputStream());
break;
case DELETE:
validatePath(path);
deleteDocument(res,store,path);
break;
}
}
 catch (IllegalArgumentException enumErr) {
throw new WebScriptException(""String_Node_Str"" + methodName);
}
catch (IOException ioErr) {
throw new WebScriptException(""String_Node_Str"" + ioErr.getMessage());
}
}","/** 
 * Execute the webscript based on the request parameters
 */
public void execute(WebScriptRequest req,WebScriptResponse res) throws IOException {
  if (!(req instanceof WebScriptServletRequest)) {
    throw new WebScriptException(""String_Node_Str"");
  }
  HttpServletRequest httpReq=((WebScriptServletRequest)req).getHttpServletRequest();
  String extPath=req.getExtensionPath();
  String methodName=null;
  String store=null;
  String webapp=null;
  StringBuilder pathBuilder=null;
  StringTokenizer tokenizer=new StringTokenizer(extPath,""String_Node_Str"");
  if (tokenizer.hasMoreTokens()) {
    methodName=tokenizer.nextToken();
    if (tokenizer.hasMoreTokens()) {
      String el=tokenizer.nextToken();
      if (TOKEN_STORE.equals(el)) {
        store=tokenizer.nextToken();
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
      if (TOKEN_WEBAPP.equals(el)) {
        webapp=tokenizer.nextToken();
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
      while (el != null) {
        if (pathBuilder == null) {
          pathBuilder=new StringBuilder(128);
        }
        pathBuilder.append('/');
        pathBuilder.append(el);
        el=(tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null);
      }
    }
  }
 else {
    throw new WebScriptException(""String_Node_Str"" + extPath);
  }
  if (store == null) {
    store=req.getParameter(REQUEST_PARAM_STORE);
    if (store == null) {
      store=this.defaultStore;
    }
    if (store == null) {
      throw new WebScriptException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (webapp == null) {
    webapp=req.getParameter(REQUEST_PARAM_WEBAPP);
  }
  if (webapp != null) {
    pathBuilder.insert(0,""String_Node_Str"" + webapp);
  }
  String path=pathBuilder.toString();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + methodName);
    logger.debug(""String_Node_Str"" + store);
    logger.debug(""String_Node_Str"" + path);
  }
  try {
    APIMethod method=APIMethod.valueOf(methodName.toUpperCase());
switch (method) {
case LASTMODIFIED:
      validatePath(path);
    lastModified(res,store,path);
  break;
case HAS:
validatePath(path);
hasDocument(res,store,path);
break;
case GET:
validatePath(path);
getDocument(res,store,path);
break;
case LIST:
listDocuments(res,store,path,false);
break;
case LISTALL:
listDocuments(res,store,path,true);
break;
case LISTPATTERN:
listDocuments(res,store,path,req.getParameter(""String_Node_Str""));
break;
case CREATE:
validatePath(path);
createDocument(res,store,path,httpReq.getInputStream());
break;
case UPDATE:
validatePath(path);
updateDocument(res,store,path,httpReq.getInputStream());
break;
case DELETE:
validatePath(path);
deleteDocument(res,store,path);
break;
}
}
 catch (IllegalArgumentException enumErr) {
throw new WebScriptException(""String_Node_Str"" + methodName);
}
catch (IOException ioErr) {
throw new WebScriptException(""String_Node_Str"" + ioErr.getMessage());
}
}",0.9932818273429628
174795,"/** 
 * Processes 'accept' response from invitee
 * @param model model to add objects to, which will be passed to the template for rendering
 * @param inviteId ID of invite
 * @param inviteeUserName user name of invitee
 * @param siteShortName short name of site for which invitee is accepting invitation to join
 */
private void acceptInvite(Map<String,Object> model,String inviteId,String inviteeUserName,String siteShortName){
  completeInviteTask(QName.createQName(WF_TASK_INVITE_PENDING,this.namespaceService),WF_TRANSITION_ACCEPT);
  if ((this.mutableAuthenticationDao.userExists(inviteeUserName)) && (this.mutableAuthenticationDao.getEnabled(inviteeUserName) == false)) {
    this.mutableAuthenticationDao.setEnabled(inviteeUserName,true);
  }
  String inviteeSiteRole=getInviteeSiteRoleFromInvite(inviteId);
  RunAsWork<Boolean> setSiteMembershipWorker=new InviteResponse.SetSiteMembershipWorker(siteShortName,inviteeUserName,inviteeSiteRole);
  AuthenticationUtil.runAs(setSiteMembershipWorker,USER_ADMIN);
  completeInviteTask(QName.createQName(WF_TASK_ACCEPT_INVITE,this.namespaceService),WF_TRANSITION_ACCEPT_INVITE_END);
  model.put(MODEL_PROP_KEY_RESPONSE,RESPONSE_ACCEPT);
  model.put(MODEL_PROP_KEY_SITE_SHORT_NAME,siteShortName);
}","/** 
 * Processes 'accept' response from invitee
 * @param model model to add objects to, which will be passed to the template for rendering
 * @param inviteId ID of invite
 * @param inviteeUserName user name of invitee
 * @param siteShortName short name of site for which invitee is accepting invitation to join
 */
private void acceptInvite(Map<String,Object> model,String inviteId,String inviteeUserName,String siteShortName){
  completeInviteTask(inviteId,QName.createQName(WF_TASK_INVITE_PENDING,this.namespaceService),WF_TRANSITION_ACCEPT);
  if ((this.mutableAuthenticationDao.userExists(inviteeUserName)) && (this.mutableAuthenticationDao.getEnabled(inviteeUserName) == false)) {
    this.mutableAuthenticationDao.setEnabled(inviteeUserName,true);
  }
  String inviteeSiteRole=InviteHelper.getInviteeSiteRoleFromInvite(inviteId,this.workflowService,this.namespaceService);
  RunAsWork<Boolean> setSiteMembershipWorker=new InviteResponse.SetSiteMembershipWorker(siteShortName,inviteeUserName,inviteeSiteRole);
  AuthenticationUtil.runAs(setSiteMembershipWorker,USER_ADMIN);
  completeInviteTask(inviteId,QName.createQName(WF_TASK_ACCEPT_INVITE,this.namespaceService),WF_TRANSITION_ACCEPT_INVITE_END);
  model.put(MODEL_PROP_KEY_RESPONSE,RESPONSE_ACCEPT);
  model.put(MODEL_PROP_KEY_SITE_SHORT_NAME,siteShortName);
}",0.9712062256809338
174796,"/** 
 * Processes 'reject' invite response from invitee
 * @param model model to add objects to, which will be passed to the template for rendering
 * @param inviteId ID of invite
 * @param inviteeUserName user name of invitee
 * @param siteShortName short name of site for which invitee is rejecting invitation to join
 */
private void rejectInvite(Map<String,Object> model,String inviteId,String inviteeUserName,String siteShortName){
  completeInviteTask(QName.createQName(WF_TASK_INVITE_PENDING,this.namespaceService),WF_TRANSITION_REJECT);
  if ((this.mutableAuthenticationDao.userExists(inviteeUserName)) && (this.mutableAuthenticationDao.getEnabled(inviteeUserName) == false)) {
    this.mutableAuthenticationDao.deleteUser(inviteeUserName);
    if (this.personService.personExists(inviteeUserName)) {
      this.personService.deletePerson(inviteeUserName);
    }
  }
  completeInviteTask(QName.createQName(WF_TASK_REJECT_INVITE,this.namespaceService),WF_TRANSITION_REJECT_INVITE_END);
  model.put(MODEL_PROP_KEY_RESPONSE,RESPONSE_REJECT);
  model.put(MODEL_PROP_KEY_SITE_SHORT_NAME,siteShortName);
}","/** 
 * Processes 'reject' invite response from invitee
 * @param model model to add objects to, which will be passed to the template for rendering
 * @param inviteId ID of invite
 * @param inviteeUserName user name of invitee
 * @param siteShortName short name of site for which invitee is rejecting invitation to join
 */
private void rejectInvite(Map<String,Object> model,String inviteId,String inviteeUserName,String siteShortName){
  completeInviteTask(inviteId,QName.createQName(WF_TASK_INVITE_PENDING,this.namespaceService),WF_TRANSITION_REJECT);
  if ((this.mutableAuthenticationDao.userExists(inviteeUserName)) && (this.mutableAuthenticationDao.getEnabled(inviteeUserName) == false)) {
    this.mutableAuthenticationDao.deleteUser(inviteeUserName);
    if (this.personService.personExists(inviteeUserName)) {
      this.personService.deletePerson(inviteeUserName);
    }
  }
  completeInviteTask(inviteId,QName.createQName(WF_TASK_REJECT_INVITE,this.namespaceService),WF_TRANSITION_REJECT_INVITE_END);
  model.put(MODEL_PROP_KEY_RESPONSE,RESPONSE_REJECT);
  model.put(MODEL_PROP_KEY_SITE_SHORT_NAME,siteShortName);
}",0.9919354838709676
174797,"/** 
 * Complete the specified Invite Workflow Task and follow the given transition upon completing the task
 * @param fullTaskName qualified name of invite workflow task to complete
 * @param transitionId the task transition to take on completion of the task (or null, for the default transition)
 */
private void completeInviteTask(QName fullTaskName,String transitionId){
  WorkflowTaskQuery wfTaskQuery=new WorkflowTaskQuery();
  wfTaskQuery.setActive(Boolean.TRUE);
  wfTaskQuery.setTaskState(WorkflowTaskState.IN_PROGRESS);
  wfTaskQuery.setTaskName(fullTaskName);
  wfTaskQuery.setProcessName(QName.createQName(""String_Node_Str"",this.namespaceService));
  List<WorkflowTask> wf_invite_tasks=this.workflowService.queryTasks(wfTaskQuery);
  for (  WorkflowTask workflowTask : wf_invite_tasks) {
    this.workflowService.endTask(workflowTask.id,transitionId);
  }
}","/** 
 * Complete the specified Invite Workflow Task for the invite workflow  instance associated with the given invite ID, and follow the given transition upon completing the task
 * @param inviteId the invite ID of the invite workflow instance for whichwe want to complete the given task
 * @param fullTaskName qualified name of invite workflow task to complete
 * @param transitionId the task transition to take on completion of the task (or null, for the default transition)
 */
private void completeInviteTask(String inviteId,QName fullTaskName,String transitionId){
  WorkflowTaskQuery wfTaskQuery=new WorkflowTaskQuery();
  wfTaskQuery.setProcessId(inviteId);
  wfTaskQuery.setActive(Boolean.TRUE);
  wfTaskQuery.setTaskState(WorkflowTaskState.IN_PROGRESS);
  wfTaskQuery.setTaskName(fullTaskName);
  wfTaskQuery.setProcessName(QName.createQName(""String_Node_Str"",this.namespaceService));
  List<WorkflowTask> wf_invite_tasks=this.workflowService.queryTasks(wfTaskQuery);
  for (  WorkflowTask workflowTask : wf_invite_tasks) {
    this.workflowService.endTask(workflowTask.id,transitionId);
  }
}",0.8417849898580122
174798,"/** 
 * Maps the current HTTP request to a path that can be used to access a content repository
 * @param request HTTP request
 * @return A content repository path
 */
public static String getRepositoryPath(HttpServletRequest request){
  String strPath=request.getPathInfo();
  if (strPath == null) {
    strPath=request.getServletPath();
  }
  if (strPath == null || strPath.length() == 0) {
    strPath=RootPath;
  }
 else   if (strPath.endsWith(DIR_SEPARATOR)) {
    strPath=strPath.substring(0,strPath.length() - 1);
  }
  if (strPath.startsWith(request.getServletPath())) {
    int len=request.getServletPath().length();
    if (strPath.length() > len)     strPath=strPath.substring(len);
 else     strPath=RootPath;
  }
  return decodeURL(strPath);
}","/** 
 * Maps the current HTTP request to a path that can be used to access a content repository
 * @param request HTTP request
 * @return A content repository path
 */
public static String getRepositoryPath(HttpServletRequest request){
  String strPath=null;
  try {
    strPath=URLDecoder.decode(request.getRequestURI(),""String_Node_Str"");
  }
 catch (  Exception ex) {
  }
  String servletPath=request.getServletPath();
  int rootPos=strPath.indexOf(servletPath);
  if (rootPos != -1)   strPath=strPath.substring(rootPos);
  if (strPath == null) {
    strPath=request.getServletPath();
  }
  if (strPath == null || strPath.length() == 0) {
    strPath=RootPath;
  }
 else   if (strPath.endsWith(DIR_SEPARATOR)) {
    strPath=strPath.substring(0,strPath.length() - 1);
  }
  if (strPath.startsWith(request.getServletPath())) {
    int len=request.getServletPath().length();
    if (strPath.length() > len)     strPath=strPath.substring(len);
 else     strPath=RootPath;
  }
  return strPath;
}",0.8228571428571428
174799,"/** 
 * Returns a URL that could be used to access the given path.
 * @param request HttpServletRequest
 * @param path String
 * @param isCollection boolean
 * @return String
 */
public static String getURLForPath(HttpServletRequest request,String path,boolean isCollection){
  StringBuilder urlStr=new StringBuilder(request.getRequestURI());
  String servletPath=request.getServletPath();
  int rootPos=urlStr.indexOf(servletPath);
  if (rootPos != -1)   urlStr.setLength(rootPos + servletPath.length());
  if (urlStr.charAt(urlStr.length() - 1) != PathSeperatorChar)   urlStr.append(PathSeperator);
  if (path.equals(RootPath) == false) {
    if (path.startsWith(PathSeperator))     urlStr.append(path.substring(1));
 else     urlStr.append(path);
  }
  return urlStr.toString();
}","/** 
 * Returns a URL that could be used to access the given path.
 * @param request HttpServletRequest
 * @param path String
 * @param isCollection boolean
 * @return String
 */
public static String getURLForPath(HttpServletRequest request,String path,boolean isCollection){
  StringBuilder urlStr=new StringBuilder(request.getRequestURI());
  String servletPath=request.getServletPath();
  int rootPos=urlStr.indexOf(servletPath);
  if (rootPos != -1)   urlStr.setLength(rootPos + servletPath.length());
  if (urlStr.charAt(urlStr.length() - 1) != PathSeperatorChar)   urlStr.append(PathSeperator);
  if (path.equals(RootPath) == false) {
    if (path.startsWith(PathSeperator))     urlStr.append(path.substring(1));
 else     urlStr.append(path);
  }
  if (isCollection && urlStr.charAt(urlStr.length() - 1) != PathSeperatorChar)   urlStr.append(PathSeperator);
  String encUrlStr=null;
  try {
    encUrlStr=URLEncoder.encode(urlStr.toString(),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    logger.error(ex);
  }
  return encUrlStr;
}",0.8197076340010828
174800,"/** 
 * @see org.alfresco.repo.webservice.content.ContentServiceSoapPort#write(org.alfresco.repo.webservice.types.Reference,byte[])
 */
public Content write(Reference node,String property,byte[] content,ContentFormat format) throws RemoteException, ContentFault {
  UserTransaction tx=null;
  try {
    tx=Utils.getUserTransaction(MessageContext.getCurrentContext());
    tx.begin();
    NodeRef nodeRef=Utils.convertToNodeRef(node,this.nodeService,this.searchService,this.namespaceService);
    ContentWriter writer=this.contentService.getWriter(nodeRef,QName.createQName(property),true);
    if (format != null) {
      writer.setEncoding(format.getEncoding());
      writer.setMimetype(format.getMimetype());
    }
    writer.putContent(new String(content));
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + nodeRef.getId());
    }
    tx.commit();
    return createContent(nodeRef,property);
  }
 catch (  Throwable e) {
    try {
      if (tx != null) {
        tx.rollback();
      }
    }
 catch (    Exception ex) {
    }
    if (logger.isDebugEnabled()) {
      logger.error(""String_Node_Str"",e);
    }
    throw new ContentFault(0,e.getMessage());
  }
}","/** 
 * @see org.alfresco.repo.webservice.content.ContentServiceSoapPort#write(org.alfresco.repo.webservice.types.Reference,byte[])
 */
public Content write(Reference node,String property,byte[] content,ContentFormat format) throws RemoteException, ContentFault {
  UserTransaction tx=null;
  try {
    tx=Utils.getUserTransaction(MessageContext.getCurrentContext());
    tx.begin();
    NodeRef nodeRef=Utils.convertToNodeRef(node,this.nodeService,this.searchService,this.namespaceService);
    ContentWriter writer=this.contentService.getWriter(nodeRef,QName.createQName(property),true);
    if (format != null) {
      writer.setEncoding(format.getEncoding());
      writer.setMimetype(format.getMimetype());
    }
    InputStream is=new ByteArrayInputStream(content);
    writer.putContent(is);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + nodeRef.getId());
    }
    tx.commit();
    return createContent(nodeRef,property);
  }
 catch (  Throwable e) {
    try {
      if (tx != null) {
        tx.rollback();
      }
    }
 catch (    Exception ex) {
    }
    if (logger.isDebugEnabled()) {
      logger.error(""String_Node_Str"",e);
    }
    throw new ContentFault(0,e.getMessage());
  }
}",0.9689183588893494
174801,"/** 
 * Resolves the given parameters to a repository NodeRef
 * @param store The Store to search within
 * @param uuid The id of the node, or the id of the starting node if a path is also present
 * @param path The path to the required node, if a uuid is given the search starts from that node otherwise the search will start from the root node
 * @param nodeService NodeService to use
 * @param searchService SearchService to use
 * @param namespaceService NamespaceService to use
 * @return A repository NodeRef
 */
public static NodeRef resolveToNodeRef(Store store,String uuid,String path,NodeService nodeService,SearchService searchService,NamespaceService namespaceService){
  if (store == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  NodeRef nodeRef=null;
  NodeRef rootNodeRef=null;
  if (uuid == null) {
    rootNodeRef=nodeService.getRootNode(convertToStoreRef(store));
  }
 else {
    rootNodeRef=new NodeRef(convertToStoreRef(store),uuid);
  }
  if (path != null) {
    List<NodeRef> nodes=searchService.selectNodes(rootNodeRef,path,null,namespaceService,false);
    if (nodes.size() != 1) {
      StringBuilder builder=new StringBuilder(""String_Node_Str"");
      builder.append(store.getScheme().getValue()).append(""String_Node_Str"").append(store.getAddress());
      builder.append(""String_Node_Str"").append(uuid);
      builder.append(""String_Node_Str"").append(path).append(""String_Node_Str"");
      builder.append(nodes.size()).append(""String_Node_Str"");
      throw new IllegalStateException(builder.toString());
    }
    nodeRef=nodes.get(0);
  }
 else {
    nodeRef=rootNodeRef;
  }
  return nodeRef;
}","/** 
 * Resolves the given parameters to a repository NodeRef
 * @param store The Store to search within
 * @param uuid The id of the node, or the id of the starting node if a path is also present
 * @param path The path to the required node, if a uuid is given the search starts from that node otherwise the search will start from the root node
 * @param nodeService NodeService to use
 * @param searchService SearchService to use
 * @param namespaceService NamespaceService to use
 * @return A repository NodeRef
 */
public static NodeRef resolveToNodeRef(Store store,String uuid,String path,NodeService nodeService,SearchService searchService,NamespaceService namespaceService){
  if (store == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  NodeRef nodeRef=null;
  NodeRef rootNodeRef=null;
  if (uuid == null || uuid.length() == 0) {
    rootNodeRef=nodeService.getRootNode(convertToStoreRef(store));
  }
 else {
    rootNodeRef=new NodeRef(convertToStoreRef(store),uuid);
  }
  if (path != null && path.length() != 0) {
    List<NodeRef> nodes=searchService.selectNodes(rootNodeRef,path,null,namespaceService,false);
    if (nodes.size() != 1) {
      StringBuilder builder=new StringBuilder(""String_Node_Str"");
      builder.append(store.getScheme().getValue()).append(""String_Node_Str"").append(store.getAddress());
      builder.append(""String_Node_Str"").append(uuid);
      builder.append(""String_Node_Str"").append(path).append(""String_Node_Str"");
      builder.append(nodes.size()).append(""String_Node_Str"");
      throw new IllegalStateException(builder.toString());
    }
    nodeRef=nodes.get(0);
  }
 else {
    nodeRef=rootNodeRef;
  }
  return nodeRef;
}",0.9157202630005976
174802,"/** 
 * Utility method to convert from a string representation of a property value into the correct object representation.
 * @param dictionaryService     the dictionary service
 * @param propertyName          the qname of the property in question
 * @param propertyValue         the property vlaue as a string
 * @return                      the object value of the property
 */
public static Serializable getValueFromNamedValue(DictionaryService dictionaryService,QName propertyName,NamedValue namedValue){
  Serializable result=null;
  org.alfresco.service.cmr.dictionary.PropertyDefinition propDef=dictionaryService.getProperty(propertyName);
  if (propDef != null) {
    DataTypeDefinition propertyType=propDef.getDataType();
    if (propertyType != null) {
      if (namedValue.getIsMultiValue() == false) {
        if (logger.isDebugEnabled() == true) {
          logger.debug(""String_Node_Str"" + propertyName.toString() + ""String_Node_Str""+ namedValue.getValue());
        }
        result=(Serializable)DefaultTypeConverter.INSTANCE.convert(propertyType,namedValue.getValue());
      }
 else {
        String[] values=namedValue.getValues();
        if (logger.isDebugEnabled() == true) {
          logger.debug(""String_Node_Str"" + propertyName.toString() + ""String_Node_Str""+ values.toString());
        }
        if (values != null) {
          Collection<Serializable> collection=new ArrayList<Serializable>(values.length);
          for (          String value : values) {
            collection.add((Serializable)DefaultTypeConverter.INSTANCE.convert(propertyType,value));
          }
          if (logger.isDebugEnabled() == true) {
            logger.debug(""String_Node_Str"" + collection.toString());
          }
          result=(Serializable)collection;
        }
      }
    }
 else {
      if (logger.isDebugEnabled() == true) {
        logger.debug(""String_Node_Str"" + propertyName.toString() + ""String_Node_Str"");
      }
    }
  }
  return result;
}","/** 
 * Utility method to convert from a string representation of a property value into the correct object representation.
 * @param dictionaryService     the dictionary service
 * @param propertyName          the qname of the property in question
 * @param propertyValue         the property vlaue as a string
 * @return                      the object value of the property
 */
public static Serializable getValueFromNamedValue(DictionaryService dictionaryService,QName propertyName,NamedValue namedValue){
  Serializable result=null;
  org.alfresco.service.cmr.dictionary.PropertyDefinition propDef=dictionaryService.getProperty(propertyName);
  if (propDef != null) {
    DataTypeDefinition propertyType=propDef.getDataType();
    if (propertyType != null) {
      if (namedValue == null || namedValue.getIsMultiValue() == false) {
        if (logger.isDebugEnabled() == true) {
          logger.debug(""String_Node_Str"" + propertyName.toString() + ""String_Node_Str""+ namedValue.getValue());
        }
        result=(Serializable)DefaultTypeConverter.INSTANCE.convert(propertyType,namedValue.getValue());
      }
 else {
        String[] values=namedValue.getValues();
        if (logger.isDebugEnabled() == true) {
          logger.debug(""String_Node_Str"" + propertyName.toString() + ""String_Node_Str""+ values.toString());
        }
        if (values != null) {
          Collection<Serializable> collection=new ArrayList<Serializable>(values.length);
          for (          String value : values) {
            collection.add((Serializable)DefaultTypeConverter.INSTANCE.convert(propertyType,value));
          }
          if (logger.isDebugEnabled() == true) {
            logger.debug(""String_Node_Str"" + collection.toString());
          }
          result=(Serializable)collection;
        }
      }
    }
 else {
      if (logger.isDebugEnabled() == true) {
        logger.debug(""String_Node_Str"" + propertyName.toString() + ""String_Node_Str"");
      }
    }
  }
  return result;
}",0.994452849218356
174803,"public static QueryLanguageEnum fromValue(java.lang.String value) throws java.lang.IllegalArgumentException {
  QueryLanguageEnum enumeration=(QueryLanguageEnum)_table_.get(value);
  if (enumeration == null)   throw new java.lang.IllegalArgumentException();
  return enumeration;
}","public static QueryLanguageEnum fromValue(java.lang.String value) throws java.lang.IllegalArgumentException {
  QueryLanguageEnum enumeration=(QueryLanguageEnum)_table_.get(value);
  if (enumeration == null) {
    enumeration=lucene;
  }
  return enumeration;
}",0.8597785977859779
174804,"public static StoreEnum fromValue(java.lang.String value) throws java.lang.IllegalArgumentException {
  StoreEnum enumeration=(StoreEnum)_table_.get(value);
  if (enumeration == null)   throw new java.lang.IllegalArgumentException();
  return enumeration;
}","public static StoreEnum fromValue(java.lang.String value) throws java.lang.IllegalArgumentException {
  StoreEnum enumeration=(StoreEnum)_table_.get(value);
  if (enumeration == null) {
    enumeration=workspace;
  }
  return enumeration;
}",0.8490945674044266
174805,"@GET(""String_Node_Str"") void getNonceId(@Query(""String_Node_Str"") String controller,@Query(""String_Node_Str"") String method,Callback<NonceId> callback);","@GET(""String_Node_Str"") void getNonceId(@Query(""String_Node_Str"") String controller,@Query(""String_Node_Str"") String method,Callback<NonceIdResponse> callback);",0.9743589743589745
174806,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_login);
  mAuthApi=initAdapter();
  inputEmail=(EditText)findViewById(R.id.email);
  inputPassword=(EditText)findViewById(R.id.password);
  btnSignup=(Button)findViewById(R.id.btn_signup);
  btnLogin=(Button)findViewById(R.id.btn_login);
  btnReset=(Button)findViewById(R.id.btn_reset_password);
  btnLogin.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String email=inputEmail.getText().toString();
      String password=inputPassword.getText().toString();
      if (!validateForm(inputEmail,inputPassword)) {
        return;
      }
      signIn(email,password);
    }
  }
);
  btnReset.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(new Intent(getApplicationContext(),ResetPasswordActivity.class));
    }
  }
);
  btnSignup.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(new Intent(getApplicationContext(),SignupActivity.class));
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_login);
  mAuthApi=initAdapter();
  inputEmail=(EditText)findViewById(R.id.email);
  inputPassword=(EditText)findViewById(R.id.password);
  btnSignup=(Button)findViewById(R.id.btn_signup);
  btnLogin=(Button)findViewById(R.id.btn_login);
  btnReset=(Button)findViewById(R.id.btn_reset_password);
  btnLogin.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String email=inputEmail.getText().toString();
      String password=inputPassword.getText().toString();
      if (!validateForm(inputEmail,inputPassword)) {
        return;
      }
      signIn(email,password);
    }
  }
);
  btnReset.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(new Intent(getApplicationContext(),ResetPasswordActivity.class));
    }
  }
);
  btnSignup.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(new Intent(getApplicationContext(),SignupActivity.class));
      finish();
    }
  }
);
}",0.99323753169907
174807,"@Override public void onClick(View view){
  startActivity(new Intent(getApplicationContext(),SignupActivity.class));
}","@Override public void onClick(View view){
  startActivity(new Intent(getApplicationContext(),SignupActivity.class));
  finish();
}",0.9516129032258064
174808,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_signup);
  mAuthApi=initAdapter();
  btnSignIn=(Button)findViewById(R.id.sign_in_button);
  btnSignUp=(Button)findViewById(R.id.sign_up_button);
  inputUsername=(EditText)findViewById(R.id.username);
  inputEmail=(EditText)findViewById(R.id.email);
  inputPassword=(EditText)findViewById(R.id.password);
  btnResetPassword=(Button)findViewById(R.id.btn_reset_password);
  btnResetPassword.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(SignupActivity.this,ResetPasswordActivity.class));
    }
  }
);
  btnSignIn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      finish();
    }
  }
);
  btnSignUp.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String username=inputUsername.getText().toString().trim();
      String email=inputEmail.getText().toString().trim();
      String password=inputPassword.getText().toString().trim();
      if (mNonceId == null) {
        getNonceId(""String_Node_Str"",""String_Node_Str"");
      }
      if (TextUtils.isEmpty(username)) {
        inputUsername.setError(""String_Node_Str"");
      }
      if (TextUtils.isEmpty(email)) {
        inputEmail.setError(""String_Node_Str"");
        return;
      }
      if (TextUtils.isEmpty(password)) {
        inputPassword.setError(""String_Node_Str"");
        return;
      }
      if (password.length() < 6) {
        inputPassword.setError(""String_Node_Str"");
        return;
      }
      registerUser(username,email,password);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_signup);
  mAuthApi=initAdapter();
  btnSignIn=(Button)findViewById(R.id.sign_in_button);
  btnSignUp=(Button)findViewById(R.id.sign_up_button);
  inputUsername=(EditText)findViewById(R.id.username);
  inputEmail=(EditText)findViewById(R.id.email);
  inputPassword=(EditText)findViewById(R.id.password);
  btnResetPassword=(Button)findViewById(R.id.btn_reset_password);
  btnResetPassword.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(SignupActivity.this,ResetPasswordActivity.class));
    }
  }
);
  btnSignIn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      finish();
    }
  }
);
  btnSignUp.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String username=inputUsername.getText().toString().trim();
      String email=inputEmail.getText().toString().trim();
      String password=inputPassword.getText().toString().trim();
      if (TextUtils.isEmpty(username)) {
        inputUsername.setError(""String_Node_Str"");
      }
      if (TextUtils.isEmpty(email)) {
        inputEmail.setError(""String_Node_Str"");
        return;
      }
      if (TextUtils.isEmpty(password)) {
        inputPassword.setError(""String_Node_Str"");
        return;
      }
      if (password.length() < 6) {
        inputPassword.setError(""String_Node_Str"");
        return;
      }
      registerUser(username,email,password);
    }
  }
);
}",0.8270542865618511
174809,"@Override public void onClick(View v){
  String username=inputUsername.getText().toString().trim();
  String email=inputEmail.getText().toString().trim();
  String password=inputPassword.getText().toString().trim();
  if (mNonceId == null) {
    getNonceId(""String_Node_Str"",""String_Node_Str"");
  }
  if (TextUtils.isEmpty(username)) {
    inputUsername.setError(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(email)) {
    inputEmail.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    inputPassword.setError(""String_Node_Str"");
    return;
  }
  if (password.length() < 6) {
    inputPassword.setError(""String_Node_Str"");
    return;
  }
  registerUser(username,email,password);
}","@Override public void onClick(View v){
  String username=inputUsername.getText().toString().trim();
  String email=inputEmail.getText().toString().trim();
  String password=inputPassword.getText().toString().trim();
  if (TextUtils.isEmpty(username)) {
    inputUsername.setError(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(email)) {
    inputEmail.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    inputPassword.setError(""String_Node_Str"");
    return;
  }
  if (password.length() < 6) {
    inputPassword.setError(""String_Node_Str"");
    return;
  }
  registerUser(username,email,password);
}",0.3760177646188009
174810,"@Override protected void onStart(){
  super.onStart();
  getNonceId(""String_Node_Str"",""String_Node_Str"");
}","@Override protected void onStart(){
  super.onStart();
}",0.6871165644171779
174811,"@Override public void failure(RetrofitError error){
  showAuthError(R.id.error_text,""String_Node_Str"");
}","@Override public void failure(RetrofitError error){
  hideProgressDialog();
  Log.e(""String_Node_Str"",error.getLocalizedMessage());
  showAuthError(R.id.error_text,""String_Node_Str"");
}",0.7241379310344828
174812,"private void registerUser(final String username,final String email,String password){
  if (!AppUtils.isNetworkConnected(this)) {
    showErrorDialog();
  }
 else {
    showProgressDialog();
    if (mNonceId == null) {
      getNonceId(""String_Node_Str"",""String_Node_Str"");
    }
    mAuthApi.registerUser(username,email,mNonceId,username,""String_Node_Str"",password,new Callback<RegisterResponse>(){
      @Override public void success(      RegisterResponse registerResponse,      Response response){
        if (registerResponse.getStatus().equals(""String_Node_Str"")) {
          User user=new User(registerResponse.getUser_id(),username,email,username,true,registerResponse.getCookie());
          PreferenceUtil.writeUserToPreferences(getApplicationContext(),user);
          hideProgressDialog();
          startApp();
        }
 else {
          hideProgressDialog();
          showAuthError(R.id.error_text,registerResponse.getError());
        }
      }
      @Override public void failure(      RetrofitError error){
        showAuthError(R.id.error_text,""String_Node_Str"");
      }
    }
);
  }
}","private void registerUser(final String username,final String email,final String password){
  if (!AppUtils.isNetworkConnected(this)) {
    showErrorDialog();
  }
 else {
    showProgressDialog();
    mAuthApi.getNonceId(""String_Node_Str"",""String_Node_Str"",new Callback<NonceIdResponse>(){
      @Override public void success(      NonceIdResponse nonceIdResponse,      Response response){
        Log.e(""String_Node_Str"",nonceIdResponse.getNonce());
        if (nonceIdResponse.getStatus().equals(""String_Node_Str"")) {
          mNonceId=nonceIdResponse.getNonce();
          signUp(username,email,password);
        }
 else {
          hideProgressDialog();
          showAuthError(R.id.error_text,""String_Node_Str"");
        }
      }
      @Override public void failure(      RetrofitError error){
        Log.e(""String_Node_Str"",error.getLocalizedMessage());
        Toast.makeText(getApplicationContext(),error.getLocalizedMessage(),Toast.LENGTH_LONG).show();
      }
    }
);
  }
}",0.5726577437858509
174813,"private void attachFragment(){
  FragmentManager fm=getSupportFragmentManager();
  if (!mOtherActivity) {
    if (!mItem.isWebView()) {
      fm.beginTransaction().replace(R.id.container,FirebaseListFragment.newInstance(mItem.getUrl()),mItem.getName()).commit();
    }
 else {
      fm.beginTransaction().replace(R.id.container,WebFragment.newInstance(mItem.getUrl(),mItem.getName()),mItem.getName()).commit();
    }
  }
 else {
  }
}","private void attachFragment(){
  FragmentManager fm=getSupportFragmentManager();
  if (!mItem.isWebView()) {
    fm.beginTransaction().replace(R.id.container,FirebaseListFragment.newInstance(mItem.getUrl()),mItem.getName()).commit();
  }
 else {
    fm.beginTransaction().replace(R.id.container,WebFragment.newInstance(mItem.getUrl(),mItem.getName()),mItem.getName()).commit();
  }
}",0.3892288861689106
174814,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mItem=getIntent().getParcelableExtra(ITEM);
  setContentView(R.layout.activity_item);
  attachFragment();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mItem=getIntent().getParcelableExtra(ITEM);
  if (mItem == null) {
    mOtherActivity=false;
  }
 else {
    mOtherActivity=true;
  }
  setContentView(R.layout.activity_item);
  attachFragment();
}",0.8228346456692913
174815,"private void attachFragment(){
  FragmentManager fm=getSupportFragmentManager();
  if (!mItem.isWebView()) {
    fm.beginTransaction().replace(R.id.container,FirebaseListFragment.newInstance(mItem.getUrl()),mItem.getName()).commit();
  }
 else {
    fm.beginTransaction().replace(R.id.container,WebFragment.newInstance(mItem.getUrl(),mItem.getName()),mItem.getName()).commit();
  }
}","private void attachFragment(){
  FragmentManager fm=getSupportFragmentManager();
  if (!mOtherActivity) {
    if (!mItem.isWebView()) {
      fm.beginTransaction().replace(R.id.container,FirebaseListFragment.newInstance(mItem.getUrl()),mItem.getName()).commit();
    }
 else {
      fm.beginTransaction().replace(R.id.container,WebFragment.newInstance(mItem.getUrl(),mItem.getName()),mItem.getName()).commit();
    }
  }
 else {
  }
}",0.9375764993880048
174816,"public static Intent getStartIntent(Context context,HomeItem item){
  Intent starter=new Intent(context,ItemActivity.class);
  starter.putExtra(ITEM,item);
  return starter;
}","public static Intent getStartIntent(Context context){
  Intent starter=new Intent(context,ItemActivity.class);
  return starter;
}",0.8524590163934426
174817,"@Override public void onClick(View view){
switch (view.getId()) {
case R.id.send_email_mangoblogger:
    startEmailIntent();
  break;
case R.id.send_whatsapp_msg:
startWhatsappIntent();
break;
case R.id.find_location:
startLocationIntent();
break;
case R.id.facebook:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.twitter:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.youtube:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.linkedin:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.insta:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.share:
startShareIntent(getActivity(),""String_Node_Str"");
}
}","@Override public void onClick(View view){
switch (view.getId()) {
case R.id.send_email_mangoblogger:
    startEmailIntent();
  break;
case R.id.send_whatsapp_msg:
startWhatsappIntent();
break;
case R.id.find_location:
startLocationIntent();
break;
case R.id.facebook:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.twitter:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.youtube:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.linkedin:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.insta:
try {
startBrowserIntent(""String_Node_Str"");
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
e.printStackTrace();
}
break;
case R.id.share:
startShareIntent(getActivity(),getString(R.string.play_store_link) + ""String_Node_Str"");
}
}",0.9862617498192336
174818,"@Override public void onClick(View view){
  if (title.getText() != null) {
switch (view.getId()) {
case R.id.btnBookmark:
      break;
case R.id.btnShare:
    String shareBody=title.getText() + ""String_Node_Str"" + description.getText();
  AppUtils.startShareIntent(context,shareBody);
}
}
}","@Override public void onClick(View view){
  if (title.getText() != null) {
switch (view.getId()) {
case R.id.btnBookmark:
      break;
case R.id.btnShare:
    String shareBody=title.getText() + ""String_Node_Str"" + description.getText()+ context.getString(R.string.card_share_body_extra);
  AppUtils.startShareIntent(context,shareBody);
}
}
}",0.919175911251981
174819,"private void initPagerAdapter(){
  mPagerAdapter=new PagerAdapter(getSupportFragmentManager());
  mPagerAdapter.addFragment(WebFragment.newInstance(mAnalyticsUrl),""String_Node_Str"");
  mPagerAdapter.addFragment(WebFragment.newInstance(mUxtermsUrl),""String_Node_Str"");
  mPagerAdapter.addFragment(AboutFragment.newInstance(mAbout,mCountryCode,mContactNumber,mAddress,mGeoLatitude,mGeoLongitude),""String_Node_Str"");
  mViewPager.setAdapter(mPagerAdapter);
  mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageSelected(    int position){
      if (mPrevMenuItem != null) {
        mPrevMenuItem.setChecked(false);
      }
 else {
        mNavigation.getMenu().getItem(0).setChecked(false);
      }
      mNavigation.getMenu().getItem(position).setChecked(true);
      mPrevMenuItem=mNavigation.getMenu().getItem(position);
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
}","private void initPagerAdapter(){
  mPagerAdapter=new PagerAdapter(getSupportFragmentManager());
  mPagerAdapter.addFragment(WebFragment.newInstance(mAnalyticsUrl,""String_Node_Str""),""String_Node_Str"");
  mPagerAdapter.addFragment(WebFragment.newInstance(mUxtermsUrl,""String_Node_Str""),""String_Node_Str"");
  mPagerAdapter.addFragment(AboutFragment.newInstance(mAbout,mCountryCode,mContactNumber,mAddress,mGeoLatitude,mGeoLongitude),""String_Node_Str"");
  mViewPager.setAdapter(mPagerAdapter);
  mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageSelected(    int position){
      if (mPrevMenuItem != null) {
        mPrevMenuItem.setChecked(false);
      }
 else {
        mNavigation.getMenu().getItem(0).setChecked(false);
      }
      mNavigation.getMenu().getItem(position).setChecked(true);
      mPrevMenuItem=mNavigation.getMenu().getItem(position);
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
}",0.9827115559599636
174820,"public void onProgressChanged(WebView view,int progress){
  getActivity().setProgress(progress * 1000);
  super.onProgressChanged(view,progress);
  mProgressBar.setProgress(progress);
  mProgressBar.setVisibility(progress == 100 ? GONE : VISIBLE);
}","public void onProgressChanged(WebView view,int progress){
  super.onProgressChanged(view,progress);
  if (mProgressBar != null) {
    mProgressBar.setProgress(progress);
    mProgressBar.setVisibility(progress == 100 ? GONE : VISIBLE);
  }
}",0.8285714285714286
174821,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_analytics_terms,container,false);
  WebView myWebView=(WebView)rootView.findViewById(R.id.webview);
  mProgressBar=(ProgressBar)rootView.findViewById(R.id.progress);
  myWebView.setWebChromeClient(new WebChromeClient(){
    public void onProgressChanged(    WebView view,    int progress){
      getActivity().setProgress(progress * 1000);
      super.onProgressChanged(view,progress);
      mProgressBar.setProgress(progress);
      mProgressBar.setVisibility(progress == 100 ? GONE : VISIBLE);
    }
  }
);
  myWebView.setWebViewClient(new MyWebViewClient(getActivity()));
  myWebView.getSettings().setJavaScriptEnabled(true);
  myWebView.loadUrl(""String_Node_Str"");
  myWebView.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (event.getAction() == KeyEvent.ACTION_DOWN) {
        WebView webView=(WebView)v;
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
          if (webView.canGoBack()) {
            webView.goBack();
            return true;
          }
        break;
    }
  }
  return false;
}
}
);
return rootView;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_analytics_terms,container,false);
  WebView myWebView=(WebView)rootView.findViewById(R.id.webview);
  mProgressBar=(ProgressBar)rootView.findViewById(R.id.progress);
  myWebView.setWebChromeClient(new WebChromeClient(){
    public void onProgressChanged(    WebView view,    int progress){
      super.onProgressChanged(view,progress);
      if (mProgressBar != null) {
        mProgressBar.setProgress(progress);
        mProgressBar.setVisibility(progress == 100 ? GONE : VISIBLE);
      }
    }
  }
);
  myWebView.setWebViewClient(new MyWebViewClient(getActivity()));
  myWebView.getSettings().setJavaScriptEnabled(true);
  myWebView.loadUrl(""String_Node_Str"");
  myWebView.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (event.getAction() == KeyEvent.ACTION_DOWN) {
        WebView webView=(WebView)v;
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
          if (webView.canGoBack()) {
            webView.goBack();
            return true;
          }
        break;
    }
  }
  return false;
}
}
);
return rootView;
}",0.9600307455803228
174822,"public void onProgressChanged(WebView view,int progress){
  getActivity().setProgress(progress * 1000);
  super.onProgressChanged(view,progress);
  mProgressBar.setProgress(progress);
  mProgressBar.setVisibility(progress == 100 ? GONE : VISIBLE);
}","public void onProgressChanged(WebView view,int progress){
  super.onProgressChanged(view,progress);
  if (mProgressBar != null) {
    mProgressBar.setProgress(progress);
    mProgressBar.setVisibility(progress == 100 ? GONE : VISIBLE);
  }
}",0.8285714285714286
174823,"@Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_ux_terms,container,false);
  WebView myWebView=(WebView)rootView.findViewById(R.id.webview);
  mProgressBar=(ProgressBar)rootView.findViewById(R.id.progress);
  myWebView.setWebChromeClient(new WebChromeClient(){
    public void onProgressChanged(    WebView view,    int progress){
      getActivity().setProgress(progress * 1000);
      super.onProgressChanged(view,progress);
      mProgressBar.setProgress(progress);
      mProgressBar.setVisibility(progress == 100 ? GONE : VISIBLE);
    }
  }
);
  myWebView.setWebViewClient(new MyWebViewClient(getActivity()));
  myWebView.getSettings().setJavaScriptEnabled(true);
  myWebView.loadUrl(""String_Node_Str"");
  myWebView.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (event.getAction() == KeyEvent.ACTION_DOWN) {
        WebView webView=(WebView)v;
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
          if (webView.canGoBack()) {
            webView.goBack();
            return true;
          }
        break;
    }
  }
  return false;
}
}
);
return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_ux_terms,container,false);
  WebView myWebView=(WebView)rootView.findViewById(R.id.webview);
  mProgressBar=(ProgressBar)rootView.findViewById(R.id.progress);
  myWebView.setWebChromeClient(new WebChromeClient(){
    public void onProgressChanged(    WebView view,    int progress){
      super.onProgressChanged(view,progress);
      if (mProgressBar != null) {
        mProgressBar.setProgress(progress);
        mProgressBar.setVisibility(progress == 100 ? GONE : VISIBLE);
      }
    }
  }
);
  myWebView.setWebViewClient(new MyWebViewClient(getActivity()));
  myWebView.getSettings().setJavaScriptEnabled(true);
  myWebView.loadUrl(""String_Node_Str"");
  myWebView.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (event.getAction() == KeyEvent.ACTION_DOWN) {
        WebView webView=(WebView)v;
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
          if (webView.canGoBack()) {
            webView.goBack();
            return true;
          }
        break;
    }
  }
  return false;
}
}
);
return rootView;
}",0.9595015576323987
174824,"@Override public boolean onNavigationItemSelected(@NonNull MenuItem item){
switch (item.getItemId()) {
case R.id.navigation_home:
    mViewPager.setCurrentItem(0);
  setAnalyticsScreenName(mPagerAdapter.getPageTitle(0).toString(),WebFragment.class.getName());
initSnackBar();
return true;
case R.id.navigation_dashboard:
mViewPager.setCurrentItem(1);
setAnalyticsScreenName(mPagerAdapter.getPageTitle(1).toString(),WebFragment.class.getName());
initSnackBar();
return true;
case R.id.navigation_notifications:
mViewPager.setCurrentItem(2);
setAnalyticsScreenName(mPagerAdapter.getPageTitle(2).toString(),AboutFragment.class.getName());
return true;
}
return false;
}","@Override public boolean onNavigationItemSelected(@NonNull MenuItem item){
switch (item.getItemId()) {
case R.id.navigation_home:
    mViewPager.setCurrentItem(0);
  setAnalyticsScreenName(""String_Node_Str"",WebFragment.class.getName());
initSnackBar();
return true;
case R.id.navigation_dashboard:
mViewPager.setCurrentItem(1);
setAnalyticsScreenName(""String_Node_Str"",WebFragment.class.getName());
initSnackBar();
return true;
case R.id.navigation_notifications:
mViewPager.setCurrentItem(2);
setAnalyticsScreenName(""String_Node_Str"",AboutFragment.class.getName());
return true;
}
return false;
}",0.8646080760095012
174825,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_analytics_terms,container,false);
  WebView myWebView=(WebView)rootView.findViewById(R.id.webview);
  myWebView.setWebViewClient(new MyWebViewClient(getActivity()));
  myWebView.getSettings().setJavaScriptEnabled(true);
  myWebView.loadUrl(""String_Node_Str"");
  return rootView;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_analytics_terms,container,false);
  myWebView=(WebView)rootView.findViewById(R.id.webview);
  myWebView.setWebViewClient(new MyWebViewClient(getActivity()));
  myWebView.getSettings().setJavaScriptEnabled(true);
  myWebView.loadUrl(""String_Node_Str"");
  myWebView.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (event.getAction() == KeyEvent.ACTION_DOWN) {
        WebView webView=(WebView)v;
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
          if (webView.canGoBack()) {
            webView.goBack();
            return true;
          }
        break;
    }
  }
  return false;
}
}
);
return rootView;
}",0.654357459379616
174826,"@Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_ux_terms,container,false);
  WebView myWebView=(WebView)rootView.findViewById(R.id.webview);
  myWebView.setWebViewClient(new MyWebViewClient(getActivity()));
  myWebView.getSettings().setJavaScriptEnabled(true);
  myWebView.loadUrl(""String_Node_Str"");
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_ux_terms,container,false);
  WebView myWebView=(WebView)rootView.findViewById(R.id.webview);
  myWebView.setWebViewClient(new MyWebViewClient(getActivity()));
  myWebView.getSettings().setJavaScriptEnabled(true);
  myWebView.loadUrl(""String_Node_Str"");
  myWebView.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View v,    int keyCode,    KeyEvent event){
      if (event.getAction() == KeyEvent.ACTION_DOWN) {
        WebView webView=(WebView)v;
switch (keyCode) {
case KeyEvent.KEYCODE_BACK:
          if (webView.canGoBack()) {
            webView.goBack();
            return true;
          }
        break;
    }
  }
  return false;
}
}
);
return rootView;
}",0.6536144578313253
174827,"public static DexBackedDexFile readRawDexFile(byte[] buf,int offset,Opcodes opcodes) throws IOException {
  DexUtil.verifyDexHeader(buf,offset);
  if (opcodes == null) {
    int dexVersion=HeaderItem.getVersion(buf,offset);
    opcodes=OpcodeUtils.getOpcodesFromDexVersion(dexVersion);
  }
  ;
  return new DexBackedDexFile(opcodes,buf,0);
}","public static DexBackedDexFile readRawDexFile(byte[] buf,int offset,Opcodes opcodes) throws IOException {
  DexUtil.verifyDexHeader(buf,offset);
  if (opcodes == null) {
    int dexVersion=HeaderItem.getVersion(buf,offset);
    opcodes=OpcodeUtils.getOpcodesFromDexVersion(dexVersion);
  }
  ;
  return new DexBackedDexFile(opcodes,buf,offset);
}",0.9898107714701602
174828,"Observable emitReaction(final Reaction reaction){
  return Observable.just(reaction).create(new ObservableOnSubscribe(){
    @Override public void subscribe(    @NonNull ObservableEmitter e) throws Exception {
      for (      Class<?> parentClass : ACTIONS_CACHE.keySet()) {
        for (        Method method : ACTIONS_CACHE.get(parentClass)) {
          if (reaction.getType().equals(method.getAnnotation(React.class).reactionType())) {
            HashMap<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",method);
            map.put(""String_Node_Str"",parentClass);
            map.put(""String_Node_Str"",reaction);
            e.onNext(map);
          }
        }
      }
      e.onComplete();
    }
  }
);
}","Observable emitReaction(final Reaction reaction){
  return Observable.just(reaction).create(new ObservableOnSubscribe(){
    @Override public void subscribe(    @NonNull ObservableEmitter e) throws Exception {
      for (      Object parentClass : REACT_CACHE.keySet()) {
        for (        Method method : REACT_CACHE.get(parentClass)) {
          if (reaction.getType().equals(method.getAnnotation(React.class).reactionType())) {
            HashMap<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",method);
            map.put(""String_Node_Str"",parentClass);
            map.put(""String_Node_Str"",reaction);
            e.onNext(map);
          }
        }
      }
      e.onComplete();
    }
  }
);
}",0.9825970548862116
174829,"@Override public void subscribe(@NonNull ObservableEmitter e) throws Exception {
  for (  Class<?> parentClass : ACTIONS_CACHE.keySet()) {
    for (    Method method : ACTIONS_CACHE.get(parentClass)) {
      if (reaction.getType().equals(method.getAnnotation(React.class).reactionType())) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        map.put(""String_Node_Str"",method);
        map.put(""String_Node_Str"",parentClass);
        map.put(""String_Node_Str"",reaction);
        e.onNext(map);
      }
    }
  }
  e.onComplete();
}","@Override public void subscribe(@NonNull ObservableEmitter e) throws Exception {
  for (  Object parentClass : REACT_CACHE.keySet()) {
    for (    Method method : REACT_CACHE.get(parentClass)) {
      if (reaction.getType().equals(method.getAnnotation(React.class).reactionType())) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        map.put(""String_Node_Str"",method);
        map.put(""String_Node_Str"",parentClass);
        map.put(""String_Node_Str"",reaction);
        e.onNext(map);
      }
    }
  }
  e.onComplete();
}",0.97632058287796
174830,"public MethodsWithReactAnnotationHelperRunnable(Class<?> parentClass){
  this.parentClass=parentClass;
}","public MethodsWithReactAnnotationHelperRunnable(Object parentClass){
  this.parentClass=parentClass;
}",0.9320388349514565
174831,"public void run(){
  if (!ACTIONS_CACHE.containsKey(parentClass)) {
    Set<Method> classMethods=new HashSet<>();
    for (    Method method : parentClass.getDeclaredMethods()) {
      Class[] paramTypes=method.getParameterTypes();
      if (method.isAnnotationPresent(Action.class) && paramTypes.length == 1 && paramTypes[0].equals(FluxAction.class)) {
        classMethods.add(method);
      }
    }
    ACTIONS_CACHE.put(parentClass,classMethods);
  }
}","public void run(){
  if (!ACTIONS_CACHE.containsKey(parentClass)) {
    Set<Method> classMethods=new HashSet<>();
    for (    Method method : parentClass.getClass().getDeclaredMethods()) {
      Class[] paramTypes=method.getParameterTypes();
      if (method.isAnnotationPresent(Action.class) && paramTypes.length == 1 && paramTypes[0].equals(FluxAction.class)) {
        classMethods.add(method);
      }
    }
    ACTIONS_CACHE.put(parentClass,classMethods);
  }
}",0.9880823401950164
174832,"void registerActionSubscriber(Class<?> storeClass){
  ExecutorService storeExecutor=Executors.newFixedThreadPool(1);
  if (storeClass.isAnnotationPresent(Store.class)) {
    storeExecutor.execute(new MethodsWithActionAnnotationHelperRunnable(storeClass));
  }
}","void registerActionSubscriber(Object storeClass){
  ExecutorService storeExecutor=Executors.newFixedThreadPool(1);
  if (storeClass.getClass().isAnnotationPresent(Store.class)) {
    storeExecutor.execute(new MethodsWithActionAnnotationHelperRunnable(storeClass));
  }
}",0.9529190207156308
174833,"Observable emitAction(final FluxAction action){
  return Observable.just(action).create(new ObservableOnSubscribe(){
    @Override public void subscribe(    @NonNull ObservableEmitter e) throws Exception {
      for (      Class<?> parentClass : ACTIONS_CACHE.keySet()) {
        for (        Method method : ACTIONS_CACHE.get(parentClass)) {
          if (action.getType().equals(method.getAnnotation(Action.class).actionType())) {
            HashMap<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",method);
            map.put(""String_Node_Str"",parentClass);
            map.put(""String_Node_Str"",action);
            e.onNext(map);
          }
        }
      }
      e.onComplete();
    }
  }
);
}","Observable emitAction(final FluxAction action){
  return Observable.just(action).create(new ObservableOnSubscribe(){
    @Override public void subscribe(    @NonNull ObservableEmitter e) throws Exception {
      for (      Object parentClass : ACTIONS_CACHE.keySet()) {
        for (        Method method : ACTIONS_CACHE.get(parentClass)) {
          if (action.getType().equals(method.getAnnotation(Action.class).actionType())) {
            HashMap<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",method);
            map.put(""String_Node_Str"",parentClass);
            map.put(""String_Node_Str"",action);
            e.onNext(map);
          }
        }
      }
      e.onComplete();
    }
  }
);
}",0.9905405405405404
174834,"public void registerReactionSubscriber(Class<?> viewClass){
  ExecutorService reactionExecuter=Executors.newFixedThreadPool(1);
  reactionExecuter.execute(new MethodsWithReactAnnotationHelperRunnable(viewClass));
}","public void registerReactionSubscriber(Object viewClass){
  ExecutorService reactionExecuter=Executors.newFixedThreadPool(1);
  reactionExecuter.execute(new MethodsWithReactAnnotationHelperRunnable(viewClass));
}",0.9671361502347418
174835,"public MethodsWithActionAnnotationHelperRunnable(Class<?> parentClass){
  this.parentClass=parentClass;
}","public MethodsWithActionAnnotationHelperRunnable(Object parentClass){
  this.parentClass=parentClass;
}",0.9326923076923076
174836,"Observer getActionObserver(){
  return new Observer(){
    @Override public void onSubscribe(    @NonNull Disposable d){
    }
    @Override public void onNext(    @NonNull Object o){
      HashMap<String,Object> map=(HashMap<String,Object>)o;
      Method method=(Method)map.get(""String_Node_Str"");
      Class<?> parentClass=(Class<?>)map.get(""String_Node_Str"");
      FluxAction action=(FluxAction)map.get(""String_Node_Str"");
      try {
        method.invoke(parentClass,action);
      }
 catch (      Exception e) {
      }
    }
    @Override public void onError(    @NonNull Throwable e){
    }
    @Override public void onComplete(){
    }
  }
;
}","Observer getActionObserver(){
  return new Observer(){
    @Override public void onSubscribe(    @NonNull Disposable d){
    }
    @Override public void onNext(    @NonNull Object o){
      HashMap<String,Object> map=(HashMap<String,Object>)o;
      Method method=(Method)map.get(""String_Node_Str"");
      FluxAction action=(FluxAction)map.get(""String_Node_Str"");
      try {
        method.invoke(map.get(""String_Node_Str""),action);
      }
 catch (      Exception e) {
      }
    }
    @Override public void onError(    @NonNull Throwable e){
    }
    @Override public void onComplete(){
    }
  }
;
}",0.919047619047619
174837,"@Override public void onNext(@NonNull Object o){
  HashMap<String,Object> map=(HashMap<String,Object>)o;
  Method method=(Method)map.get(""String_Node_Str"");
  Class<?> parentClass=(Class<?>)map.get(""String_Node_Str"");
  FluxAction action=(FluxAction)map.get(""String_Node_Str"");
  try {
    method.invoke(parentClass,action);
  }
 catch (  Exception e) {
  }
}","@Override public void onNext(@NonNull Object o){
  HashMap<String,Object> map=(HashMap<String,Object>)o;
  Method method=(Method)map.get(""String_Node_Str"");
  FluxAction action=(FluxAction)map.get(""String_Node_Str"");
  try {
    method.invoke(map.get(""String_Node_Str""),action);
  }
 catch (  Exception e) {
  }
}",0.8541666666666666
174838,"Observer getReactionObserver(){
  return new Observer(){
    @Override public void onSubscribe(    @NonNull Disposable d){
    }
    @Override public void onNext(    @NonNull Object o){
      HashMap<String,Object> map=(HashMap<String,Object>)o;
      Method method=(Method)map.get(""String_Node_Str"");
      Class<?> parentClass=(Class<?>)map.get(""String_Node_Str"");
      Reaction reaction=(Reaction)map.get(""String_Node_Str"");
      try {
        method.invoke(parentClass,reaction);
      }
 catch (      Exception e) {
      }
    }
    @Override public void onError(    @NonNull Throwable e){
    }
    @Override public void onComplete(){
    }
  }
;
}","Observer getReactionObserver(){
  return new Observer(){
    @Override public void onSubscribe(    @NonNull Disposable d){
    }
    @Override public void onNext(    @NonNull Object o){
      HashMap<String,Object> map=(HashMap<String,Object>)o;
      Method method=(Method)map.get(""String_Node_Str"");
      Reaction reaction=(Reaction)map.get(""String_Node_Str"");
      try {
        method.invoke(map.get(""String_Node_Str""),reaction);
      }
 catch (      Exception e) {
      }
    }
    @Override public void onError(    @NonNull Throwable e){
    }
    @Override public void onComplete(){
    }
  }
;
}",0.8734177215189873
174839,"@Override public void onNext(@NonNull Object o){
  HashMap<String,Object> map=(HashMap<String,Object>)o;
  Method method=(Method)map.get(""String_Node_Str"");
  Class<?> parentClass=(Class<?>)map.get(""String_Node_Str"");
  Reaction reaction=(Reaction)map.get(""String_Node_Str"");
  try {
    method.invoke(parentClass,reaction);
  }
 catch (  Exception e) {
  }
}","@Override public void onNext(@NonNull Object o){
  HashMap<String,Object> map=(HashMap<String,Object>)o;
  Method method=(Method)map.get(""String_Node_Str"");
  Reaction reaction=(Reaction)map.get(""String_Node_Str"");
  try {
    method.invoke(map.get(""String_Node_Str""),reaction);
  }
 catch (  Exception e) {
  }
}",0.7142857142857143
174840,"public void addFetchCommand(InjectionType type,Command command){
  runLocked(logAdminCommandsLock.readLock(),() -> {
    addCommand(type,command);
    logMinecartCommands=true;
  }
);
}","public void addFetchCommand(InjectionType type,Command command){
  runLocked(logAdminCommandsLock.readLock(),() -> {
    addCommand(type,command);
    type.setLogCommands(this,true);
  }
);
}",0.9308510638297872
174841,"public void addFetchCommands(InjectionType type,Collection<? extends Command> commands){
  runLocked(logAdminCommandsLock.readLock(),() -> {
    addCommands(type,commands);
    logMinecartCommands=true;
  }
);
}","public void addFetchCommands(InjectionType type,Collection<? extends Command> commands){
  runLocked(logAdminCommandsLock.readLock(),() -> {
    addCommands(type,commands);
    type.setLogCommands(this,true);
  }
);
}",0.9018691588785048
174842,"@Override public void onSetup(File log,File world){
  try {
    connection=new InjectionConnection(log.toPath(),world.toPath(),""String_Node_Str"");
  }
 catch (  IOException|InterruptedException ex) {
    throw new UndeclaredThrowableException(ex);
  }
  connection.getLogObserver().setLogCheckFrequency(100,MILLISECONDS);
  connection.setFlushFrequency(50,MILLISECONDS);
  connection.getLogObserver().addLogListener(l -> {
    String text=l.getLine();
    String leadingText=""String_Node_Str"";
    if (!text.startsWith(""String_Node_Str"",11) || !text.contains(leadingText))     return;
    text=text.substring(text.indexOf(leadingText));
    String username=text.substring(leadingText.length(),text.indexOf(' ',leadingText.length()));
    int stage=-1;
    if (text.indexOf('1',leadingText.length() + username.length()) >= 0)     stage=1;
 else     if (text.indexOf('3',leadingText.length() + username.length()) >= 0)     stage=3;
    if (stage == 1) {
      if (playerInfo.containsKey(username)) {
        PGPlayerInfo player=playerInfo.get(username);
        for (double i=1; i <= MAX_REACH; i++) {
          Vec3D vec=player.transform.forward(i).plus(0,PGPlayerInfo.EYE_LEVEL,0);
          connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ vec+ ""String_Node_Str""+ username+ ""String_Node_Str""+ username+ ""String_Node_Str"");
        }
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str""+ username);
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"");
        connection.inject(IMPULSE,new Command(""String_Node_Str"" + username,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str""));
        connection.inject(IMPULSE,new Command(""String_Node_Str"" + username,""String_Node_Str"" + username + ""String_Node_Str""));
        connection.inject(IMPULSE,new Command(""String_Node_Str"" + username,""String_Node_Str"" + username + ""String_Node_Str""));
        connection.inject(IMPULSE,""String_Node_Str"");
      }
 else {
        playerInfo.put(username,new PGPlayerInfo(username));
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
      }
    }
 else     if (stage == 3) {
      if (playerInfo.containsKey(username)) {
        PGPlayerInfo player=playerInfo.get(username);
        player.active=false;
        Vec3D forward=player.transform.forward(1);
        forward=forward.minus(player.transform.asVector());
        forward=forward.mult(2 * MAX_REACH / player.distance);
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str""+ forward.x+ ""String_Node_Str""+ forward.y+ ""String_Node_Str""+ forward.z+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str""+ (MAX_REACH / player.distance)+ ""String_Node_Str""+ (int)(2 * (MAX_REACH - player.distance))+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username);
      }
 else {
        playerInfo.put(username,new PGPlayerInfo(username));
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
      }
    }
  }
);
  connection.getLogObserver().addLogListener(l -> {
    String line=l.getLine();
    String leadingText=""String_Node_Str"";
    if (!line.startsWith(""String_Node_Str"",11) || !line.contains(leadingText))     return;
    line=line.substring(line.indexOf(leadingText),line.length() - 1);
    String username=line.substring(38,line.indexOf(""String_Node_Str"",38));
    String rawChange=line.substring(38 + username.length() + 4);
    int change=Integer.parseInt(rawChange);
    PGPlayerInfo player;
    if (playerInfo.containsKey(username)) {
      player=playerInfo.get(username);
    }
 else {
      player=new PGPlayerInfo(username);
      playerInfo.put(username,player);
    }
    player.distance+=change * SCROLL_STEP;
    player.distance=Math.max(Math.min(player.distance,MAX_REACH),MIN_REACH);
  }
);
  connection.getLogObserver().addLogListener(e -> {
    String text=e.getLine();
    if (text.startsWith(""String_Node_Str"",11) && text.contains(""String_Node_Str"")) {
      String username=text.substring(34,text.indexOf(':',34));
      PGPlayerInfo player;
      if (playerInfo.containsKey(username)) {
        player=playerInfo.get(username);
      }
 else {
        player=new PGPlayerInfo(username);
        playerInfo.put(username,player);
      }
      Transform tr=getTransform(text);
      if (tr != null)       player.transform=tr;
    }
 else     if (text.startsWith(""String_Node_Str"",11) && text.contains(""String_Node_Str"")) {
      String name=text.substring(34,text.indexOf(':',34));
      if (!name.startsWith(""String_Node_Str""))       return;
      String username=name.substring(""String_Node_Str"".length());
      PGPlayerInfo player;
      if (playerInfo.containsKey(username)) {
        player=playerInfo.get(username);
      }
 else {
        player=new PGPlayerInfo(username);
        playerInfo.put(username,player);
      }
      Transform controller=player.transform;
      Transform controlled=getTransform(text);
      if (controlled == null)       return;
      player.distance=Math.sqrt(Math.pow(controlled.x - controller.x,2) + Math.pow(controlled.y - controller.y,2) + Math.pow(controlled.z - controller.z,2));
    }
    String enable=e.getReturnValueFor(""String_Node_Str"",true);
    if (enable != null) {
      String username=enable.substring(0,enable.indexOf(':'));
      if (playerInfo.containsKey(username)) {
        playerInfo.get(username).active=true;
      }
 else {
        playerInfo.put(username,new PGPlayerInfo(username));
      }
    }
    String disable=e.getReturnValueFor(""String_Node_Str"",true);
    if (disable != null) {
      String username=disable.substring(0,disable.indexOf(':'));
      if (playerInfo.containsKey(username)) {
        playerInfo.get(username).active=false;
      }
 else {
        playerInfo.put(username,new PGPlayerInfo(username));
      }
    }
  }
);
  Timer timer=new Timer(100,e -> {
    for (    PGPlayerInfo player : playerInfo.values()) {
      if (player.active) {
        Vec3D forward=player.transform.forward(player.distance).plus(0,PGPlayerInfo.EYE_LEVEL - 0.5,0);
        forward=forward.minus(player.transform.asVector());
        connection.inject(REPEAT,""String_Node_Str"" + player.username + ""String_Node_Str""+ player.username+ ""String_Node_Str""+ forward.x+ ""String_Node_Str""+ forward.y+ ""String_Node_Str""+ forward.z);
        connection.inject(REPEAT,""String_Node_Str"" + player.username + ""String_Node_Str""+ player.username+ ""String_Node_Str"");
        connection.inject(REPEAT,""String_Node_Str"" + player.username + ""String_Node_Str"");
      }
    }
  }
);
  timer.start();
}","@Override public void onSetup(File log,File world){
  try {
    connection=new InjectionConnection(log.toPath(),world.toPath(),""String_Node_Str"");
  }
 catch (  IOException|InterruptedException ex) {
    throw new UndeclaredThrowableException(ex);
  }
  connection.getLogObserver().setLogCheckFrequency(100,MILLISECONDS);
  connection.setFlushFrequency(50,MILLISECONDS);
  connection.getLogObserver().addLogListener(l -> {
    String text=l.getLine();
    String leadingText=""String_Node_Str"";
    if (!text.startsWith(""String_Node_Str"",11) || !text.contains(leadingText))     return;
    text=text.substring(text.indexOf(leadingText));
    String username=text.substring(leadingText.length(),text.indexOf(' ',leadingText.length()));
    int stage=-1;
    if (text.indexOf('1',leadingText.length() + username.length()) >= 0)     stage=1;
 else     if (text.indexOf('3',leadingText.length() + username.length()) >= 0)     stage=3;
    if (stage == 1) {
      if (playerInfo.containsKey(username)) {
        PGPlayerInfo player=playerInfo.get(username);
        for (double i=1; i <= MAX_REACH; i++) {
          Vec3D vec=player.transform.forward(i).plus(0,PGPlayerInfo.EYE_LEVEL,0);
          connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ vec+ ""String_Node_Str""+ username+ ""String_Node_Str""+ username+ ""String_Node_Str"");
        }
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str""+ username);
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"");
        connection.inject(IMPULSE,new Command(""String_Node_Str"" + username,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str""));
        connection.inject(IMPULSE,new Command(""String_Node_Str"" + username,""String_Node_Str"" + username + ""String_Node_Str""));
        connection.inject(IMPULSE,new Command(""String_Node_Str"" + username,""String_Node_Str"" + username + ""String_Node_Str""));
        connection.inject(IMPULSE,""String_Node_Str"");
      }
 else {
        playerInfo.put(username,new PGPlayerInfo(username));
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
      }
    }
 else     if (stage == 3) {
      if (playerInfo.containsKey(username)) {
        PGPlayerInfo player=playerInfo.get(username);
        player.active=false;
        Vec3D forward=player.transform.forward(1);
        forward=forward.minus(player.transform.asVector());
        forward=forward.mult(2 * MAX_REACH / player.distance);
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str""+ forward.x+ ""String_Node_Str""+ forward.y+ ""String_Node_Str""+ forward.z+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username+ ""String_Node_Str""+ (MAX_REACH / player.distance)+ ""String_Node_Str""+ (int)(2 * (MAX_REACH - player.distance))+ ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ username);
      }
 else {
        playerInfo.put(username,new PGPlayerInfo(username));
        connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str"");
      }
    }
  }
);
  connection.getLogObserver().addLogListener(l -> {
    String line=l.getLine();
    String leadingText=""String_Node_Str"";
    if (!line.startsWith(""String_Node_Str"",11) || !line.contains(leadingText))     return;
    line=line.substring(line.indexOf(leadingText),line.length() - 1);
    String username=line.substring(38,line.indexOf(""String_Node_Str"",38));
    String rawChange=line.substring(38 + username.length() + 4);
    int change=Integer.parseInt(rawChange);
    PGPlayerInfo player;
    if (playerInfo.containsKey(username)) {
      player=playerInfo.get(username);
    }
 else {
      player=new PGPlayerInfo(username);
      playerInfo.put(username,player);
    }
    player.distance+=change * SCROLL_STEP;
    player.distance=Math.max(Math.min(player.distance,MAX_REACH),MIN_REACH);
  }
);
  connection.getLogObserver().addLogListener(e -> {
    String text=e.getLine();
    if (text.startsWith(""String_Node_Str"",11) && text.contains(""String_Node_Str"")) {
      String username=text.substring(34,text.indexOf(':',34));
      PGPlayerInfo player;
      if (playerInfo.containsKey(username)) {
        player=playerInfo.get(username);
      }
 else {
        player=new PGPlayerInfo(username);
        playerInfo.put(username,player);
      }
      Transform tr=getTransform(text);
      if (tr != null)       player.transform=tr;
    }
 else     if (text.startsWith(""String_Node_Str"",11) && text.contains(""String_Node_Str"")) {
      String name=text.substring(34,text.indexOf(':',34));
      if (!name.startsWith(""String_Node_Str""))       return;
      String username=name.substring(""String_Node_Str"".length());
      PGPlayerInfo player;
      if (playerInfo.containsKey(username)) {
        player=playerInfo.get(username);
      }
 else {
        player=new PGPlayerInfo(username);
        playerInfo.put(username,player);
      }
      Transform controller=player.transform;
      Transform controlled=getTransform(text);
      if (controlled == null)       return;
      player.distance=Math.sqrt(Math.pow(controlled.x - controller.x,2) + Math.pow(controlled.y - controller.y,2) + Math.pow(controlled.z - controller.z,2));
    }
    String enable=e.getReturnValueFor(""String_Node_Str"",true);
    if (enable != null) {
      String username=enable.substring(0,enable.indexOf(':'));
      if (playerInfo.containsKey(username)) {
        playerInfo.get(username).active=true;
      }
 else {
        playerInfo.put(username,new PGPlayerInfo(username));
      }
    }
    String disable=e.getReturnValueFor(""String_Node_Str"",true);
    if (disable != null) {
      String username=disable.substring(0,disable.indexOf(':'));
      if (playerInfo.containsKey(username)) {
        playerInfo.get(username).active=false;
      }
 else {
        playerInfo.put(username,new PGPlayerInfo(username));
      }
    }
  }
);
  Timer timer=new Timer(100,e -> {
    for (    PGPlayerInfo player : playerInfo.values()) {
      if (player.active) {
        Vec3D forward=player.transform.forward(player.distance).plus(0,PGPlayerInfo.EYE_LEVEL - 0.5,0);
        forward=forward.minus(player.transform.asVector());
        connection.inject(REPEAT,""String_Node_Str"" + player.username + ""String_Node_Str""+ player.username+ ""String_Node_Str""+ forward.toRelativeString());
        connection.inject(REPEAT,""String_Node_Str"" + player.username + ""String_Node_Str""+ player.username+ ""String_Node_Str"");
        connection.inject(REPEAT,""String_Node_Str"" + player.username + ""String_Node_Str"");
      }
    }
  }
);
  timer.start();
}",0.994754664364916
174843,"@Override public void onSetup(File log,File world){
  try {
    connection=new InjectionConnection(log.toPath(),world.toPath(),""String_Node_Str"");
  }
 catch (  IOException|InterruptedException ex) {
    throw new UndeclaredThrowableException(ex);
  }
  warpLogFile=new File(world.getAbsolutePath() + File.separator + ""String_Node_Str"");
  connection.getLogObserver().setLogCheckFrequency(500,MILLISECONDS);
  connection.setFlushFrequency(500,MILLISECONDS);
  warps=new HashMap<>();
  try {
    if (!warpLogFile.exists())     warpLogFile.createNewFile();
  }
 catch (  IOException x) {
    x.printStackTrace();
  }
  load();
  connection.getLogObserver().addChatListener(m -> {
    if (m.getMessage().split(""String_Node_Str"",2)[0].equals(""String_Node_Str"")) {
      String[] args=m.getMessage().split(""String_Node_Str"");
      if (args.length < 2) {
        connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
      }
 else       if (args[1].equals(""String_Node_Str"")) {
        if (args.length < 3) {
          connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
        }
 else {
          if (reservedKeys.contains(args[2])) {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
          }
 else           if (warps.containsKey(args[2])) {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
          }
 else {
            int currentCommandID=commandID++;
            String name=""String_Node_Str"" + currentCommandID;
            connection.inject(MINECART,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ name+ ""String_Node_Str"");
            connection.inject(MINECART,""String_Node_Str"" + name + ""String_Node_Str""+ m.getSender());
            Consumer<SuccessEvent> listener=l -> {
              Transform warpTransform=new Transform();
              int posIndex=l.getMessage().indexOf(""String_Node_Str"");
              String rawPos=l.getMessage().substring(posIndex + ""String_Node_Str"".length());
              rawPos=rawPos.substring(0,rawPos.indexOf(""String_Node_Str""));
              rawPos=rawPos.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] pos=rawPos.split(""String_Node_Str"");
              warpTransform.x=Double.parseDouble(pos[0]);
              warpTransform.y=Double.parseDouble(pos[1]);
              warpTransform.z=Double.parseDouble(pos[2]);
              int rotIndex=l.getMessage().indexOf(""String_Node_Str"");
              String rawRot=l.getMessage().substring(rotIndex + ""String_Node_Str"".length());
              rawRot=rawRot.substring(0,rawRot.indexOf(""String_Node_Str""));
              rawRot=rawRot.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] rot=rawRot.split(""String_Node_Str"");
              warpTransform.yaw=Float.parseFloat(rot[0]);
              warpTransform.pitch=Float.parseFloat(rot[1]);
              warps.put(args[2],warpTransform);
              connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
              save();
            }
;
            connection.inject(MINECART,""String_Node_Str"" + name + ""String_Node_Str"",listener);
          }
        }
      }
 else       if (args[1].equals(""String_Node_Str"")) {
        if (args.length < 3) {
          connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
        }
 else {
          if (warps.containsKey(args[2])) {
            warps.remove(args[2]);
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
            save();
          }
 else {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
          }
        }
      }
 else       if (args[1].equals(""String_Node_Str"")) {
        if (warps.isEmpty())         connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
 else {
          StringBuilder list=new StringBuilder();
          for (          String key : warps.keySet()) {
            list.append(""String_Node_Str"");
            list.append(""String_Node_Str"");
            list.append(key);
            list.append(""String_Node_Str"");
            list.append(warps.get(key).toSimplifiedString());
            list.append(""String_Node_Str"");
            list.append(""String_Node_Str"");
            list.append(key);
            list.append(""String_Node_Str"");
            list.append(""String_Node_Str"");
            list.append(key);
            list.append(""String_Node_Str"");
            list.append(""String_Node_Str"");
          }
          connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ warps.size()+ ""String_Node_Str""+ list+ ""String_Node_Str"");
        }
      }
 else {
        if (args.length < 2) {
          connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
        }
 else {
          if (warps.containsKey(args[1])) {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ warps.get(args[1]));
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[1]+ ""String_Node_Str"");
          }
 else {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[1]+ ""String_Node_Str"");
          }
        }
      }
    }
  }
);
  connection.inject(IMPULSE,""String_Node_Str"");
}","@Override public void onSetup(File log,File world){
  try {
    connection=new InjectionConnection(log.toPath(),world.toPath(),""String_Node_Str"");
  }
 catch (  IOException|InterruptedException ex) {
    throw new UndeclaredThrowableException(ex);
  }
  warpLogFile=new File(world.getAbsolutePath() + File.separator + ""String_Node_Str"");
  connection.getLogObserver().setLogCheckFrequency(500,MILLISECONDS);
  connection.setFlushFrequency(500,MILLISECONDS);
  warps=new HashMap<>();
  try {
    if (!warpLogFile.exists())     warpLogFile.createNewFile();
  }
 catch (  IOException x) {
    x.printStackTrace();
  }
  load();
  connection.getLogObserver().addChatListener(m -> {
    if (m.getMessage().split(""String_Node_Str"",2)[0].equals(""String_Node_Str"")) {
      String[] args=m.getMessage().split(""String_Node_Str"");
      if (args.length < 2) {
        connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
      }
 else       if (args[1].equals(""String_Node_Str"")) {
        if (args.length < 3) {
          connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
        }
 else {
          if (reservedKeys.contains(args[2])) {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
          }
 else           if (warps.containsKey(args[2])) {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
          }
 else {
            int currentCommandID=commandID++;
            String name=""String_Node_Str"" + currentCommandID;
            connection.inject(MINECART,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ name+ ""String_Node_Str"");
            connection.inject(MINECART,""String_Node_Str"" + name + ""String_Node_Str""+ m.getSender());
            Consumer<SuccessEvent> listener=l -> {
              Transform warpTransform=new Transform();
              int posIndex=l.getMessage().indexOf(""String_Node_Str"");
              String rawPos=l.getMessage().substring(posIndex + ""String_Node_Str"".length());
              rawPos=rawPos.substring(0,rawPos.indexOf(""String_Node_Str""));
              rawPos=rawPos.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] pos=rawPos.split(""String_Node_Str"");
              warpTransform.x=Double.parseDouble(pos[0]);
              warpTransform.y=Double.parseDouble(pos[1]);
              warpTransform.z=Double.parseDouble(pos[2]);
              int rotIndex=l.getMessage().indexOf(""String_Node_Str"");
              String rawRot=l.getMessage().substring(rotIndex + ""String_Node_Str"".length());
              rawRot=rawRot.substring(0,rawRot.indexOf(""String_Node_Str""));
              rawRot=rawRot.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              String[] rot=rawRot.split(""String_Node_Str"");
              warpTransform.yaw=Float.parseFloat(rot[0]);
              warpTransform.pitch=Float.parseFloat(rot[1]);
              warps.put(args[2],warpTransform);
              connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
              save();
            }
;
            connection.inject(MINECART,""String_Node_Str"" + name + ""String_Node_Str"",listener);
          }
        }
      }
 else       if (args[1].equals(""String_Node_Str"")) {
        if (args.length < 3) {
          connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
        }
 else {
          if (warps.containsKey(args[2])) {
            warps.remove(args[2]);
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
            save();
          }
 else {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[2]+ ""String_Node_Str"");
          }
        }
      }
 else       if (args[1].equals(""String_Node_Str"")) {
        if (warps.isEmpty())         connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
 else {
          StringBuilder list=new StringBuilder();
          for (          String key : warps.keySet()) {
            list.append(""String_Node_Str"");
            list.append(""String_Node_Str"");
            list.append(key);
            list.append(""String_Node_Str"");
            list.append(warps.get(key).toSimplifiedString());
            list.append(""String_Node_Str"");
            list.append(""String_Node_Str"");
            list.append(key);
            list.append(""String_Node_Str"");
            list.append(""String_Node_Str"");
            list.append(key);
            list.append(""String_Node_Str"");
            list.append(""String_Node_Str"");
          }
          connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ warps.size()+ ""String_Node_Str""+ list+ ""String_Node_Str"");
        }
      }
 else {
        if (args.length < 2) {
          connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str"");
        }
 else {
          if (warps.containsKey(args[1])) {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ warps.get(args[1]).toString());
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[1]+ ""String_Node_Str"");
          }
 else {
            connection.inject(IMPULSE,""String_Node_Str"" + m.getSender() + ""String_Node_Str""+ args[1]+ ""String_Node_Str"");
          }
        }
      }
    }
  }
);
  connection.inject(IMPULSE,""String_Node_Str"");
}",0.999033306968978
174844,"public void updateEditPos(int index,InjectionConnection connection,LevelReader reader){
  for (double d=0; d <= 5; d+=0.25) {
    Vec3D forward=transform.forward(d);
    Vec3I pos=forward.plus(EYE_LEVEL,Y).floor();
    BlockType blockType=reader.getBlockAtPos(pos).type;
    List<BlockType> ignore=Arrays.asList(BlockType.AIR,BlockType.WATER,BlockType.FLOWING_WATER,BlockType.LAVA,BlockType.FLOWING_LAVA);
    if (!ignore.contains(blockType)) {
      connection.inject(IMPULSE,""String_Node_Str"" + pos + ""String_Node_Str"");
      connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ index+ ""String_Node_Str""+ pos+ ""String_Node_Str"");
      if (index == 1)       pos1=pos;
 else       if (index == 2)       pos2=pos;
      return;
    }
  }
}","public void updateEditPos(int index,InjectionConnection connection,LevelReader reader){
  for (double d=0; d <= 5; d+=0.25) {
    Vec3D forward=transform.forward(d);
    Vec3I pos=forward.plus(EYE_LEVEL,Y).floor();
    BlockType blockType=reader.getBlockAtPos(pos).type;
    List<BlockType> ignore=Arrays.asList(BlockType.AIR,BlockType.WATER,BlockType.FLOWING_WATER,BlockType.LAVA,BlockType.FLOWING_LAVA);
    if (!ignore.contains(blockType)) {
      connection.inject(IMPULSE,""String_Node_Str"" + pos.toAbsoluteString() + ""String_Node_Str"");
      connection.inject(IMPULSE,""String_Node_Str"" + username + ""String_Node_Str""+ index+ ""String_Node_Str""+ pos.toAbsoluteString()+ ""String_Node_Str"");
      if (index == 1)       pos1=pos;
 else       if (index == 2)       pos2=pos;
      return;
    }
  }
}",0.975703324808184
174845,"private static void recSplitFill(InjectionConnection connection,Vec3I pos,Vec3I size,String postCoordinateArgs){
  if (size.x > 32) {
    recSplitFill(connection,pos.plus(32,0,0),size.plus(-32,0,0),postCoordinateArgs);
    size=size.withX(32);
  }
  if (size.y > 32) {
    recSplitFill(connection,pos.plus(0,32,0),size.plus(0,-32,0),postCoordinateArgs);
    size=size.withY(32);
  }
  if (size.z > 32) {
    recSplitFill(connection,pos.plus(0,0,32),size.plus(0,0,-32),postCoordinateArgs);
    size=size.withZ(32);
  }
  if (size.x == 0 || size.y == 0 || size.z == 0)   return;
  connection.inject(IMPULSE,""String_Node_Str"" + pos + ""String_Node_Str""+ pos.plus(size.x - 1,size.y - 1,size.z - 1)+ ""String_Node_Str""+ postCoordinateArgs);
}","private static void recSplitFill(InjectionConnection connection,Vec3I pos,Vec3I size,String postCoordinateArgs){
  if (size.x > 32) {
    recSplitFill(connection,pos.plus(32,0,0),size.plus(-32,0,0),postCoordinateArgs);
    size=size.withX(32);
  }
  if (size.y > 32) {
    recSplitFill(connection,pos.plus(0,32,0),size.plus(0,-32,0),postCoordinateArgs);
    size=size.withY(32);
  }
  if (size.z > 32) {
    recSplitFill(connection,pos.plus(0,0,32),size.plus(0,0,-32),postCoordinateArgs);
    size=size.withZ(32);
  }
  if (size.x == 0 || size.y == 0 || size.z == 0)   return;
  connection.inject(IMPULSE,""String_Node_Str"" + pos.toAbsoluteString() + ""String_Node_Str""+ pos.plus(size.x - 1,size.y - 1,size.z - 1).toAbsoluteString()+ ""String_Node_Str""+ postCoordinateArgs);
}",0.9748010610079576
174846,"/** 
 * Read all new lines that have been added to a file since the last call to  {@link #readAddedLines(Charset,Consumer)} or alternatively the construction of the{@link LogFileReader}.
 * @param charset
 * @param lineConsumer the {@link Consumer} to be called for each line (without line seperator)
 */
public void readAddedLines(Charset charset,Consumer<String> lineConsumer){
  try (InputStream is=Files.newInputStream(logFile,StandardOpenOption.READ);BufferedReader reader=new BufferedReader(new InputStreamReader(is,charset))){
    long logFileSize=Files.size(logFile);
    if (bytesRead <= logFileSize) {
      is.skip(bytesRead);
    }
 else {
      LOGGER.info(""String_Node_Str"");
    }
    bytesRead=logFileSize;
    String line;
    while ((line=reader.readLine()) != null) {
      lineConsumer.accept(line);
    }
  }
 catch (  IOException ex) {
    LOGGER.info(""String_Node_Str"",ex);
    bytesRead=0;
  }
}","/** 
 * Read all new lines that have been added to a file since the last call to  {@link #readAddedLines(Charset,Consumer)} or alternatively the construction of the{@link LogFileReader}.
 * @param charset
 * @param lineConsumer the {@link Consumer} to be called for each line (without line seperator)
 */
public void readAddedLines(Charset charset,Consumer<String> lineConsumer){
  try (CountingInputStream is=new CountingInputStream(Files.newInputStream(logFile,StandardOpenOption.READ));BufferedReader reader=new BufferedReader(new InputStreamReader(is,charset))){
    if (bytesRead <= Files.size(logFile)) {
      is.skip(bytesRead);
    }
 else {
      LOGGER.info(""String_Node_Str"",logFile);
    }
    try {
      String line;
      while ((line=reader.readLine()) != null) {
        lineConsumer.accept(line);
      }
    }
 catch (    Exception ex) {
      LOGGER.warn(""String_Node_Str"",ex);
      throw ex;
    }
 finally {
      bytesRead=is.getCount();
    }
  }
 catch (  IOException ex) {
    LOGGER.info(""String_Node_Str"",ex);
    bytesRead=0;
  }
}",0.828874305906108
174847,"public DisplayWindow(String name,String defaultWorld,SetupListener l) throws HeadlessException {
  super(name);
  this.moduleName=name;
  this.listener=l;
  this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  JPanel setupPanel=new JPanel();
  setupPanel.setBackground(BACKGROUND);
  setupPanel.setLayout(new BoxLayout(setupPanel,BoxLayout.Y_AXIS));
  JLabel titleLabel=new JLabel(""String_Node_Str"" + name + ""String_Node_Str"");
  titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
  titleLabel.setForeground(FOREGROUND);
  titleLabel.setMaximumSize(new Dimension(400,50));
  titleLabel.setPreferredSize(new Dimension(400,50));
  titleLabel.setFont(titleLabel.getFont().deriveFont(16f));
  setupPanel.add(titleLabel);
  JLabel setupDirLabel=new JLabel(""String_Node_Str"");
  setupDirLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
  setupDirLabel.setForeground(FOREGROUND);
  setupDirLabel.setMaximumSize(new Dimension(400,40));
  setupDirLabel.setPreferredSize(new Dimension(400,20));
  setupPanel.add(setupDirLabel);
  JTextField directoryInput=new JTextField(MinecraftUtils.getDefaultMinecraftDir());
  directoryInput.setAlignmentX(Component.CENTER_ALIGNMENT);
  directoryInput.getDocument().putProperty(""String_Node_Str"",Boolean.TRUE);
  directoryInput.setBackground(BACKGROUND);
  directoryInput.setForeground(FOREGROUND);
  directoryInput.setCaretColor(FOREGROUND);
  directoryInput.setMaximumSize(new Dimension(400,25));
  directoryInput.setBorder(new CompoundBorder(new EmptyBorder(0,0,10,0),new CompoundBorder(new LineBorder(new Color(128,128,128)),new LineBorder(BACKGROUND,5))));
  setupPanel.add(directoryInput);
  JLabel setupSaveLabel=new JLabel(""String_Node_Str"");
  setupSaveLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
  setupSaveLabel.setForeground(FOREGROUND);
  setupSaveLabel.setMaximumSize(new Dimension(400,40));
  setupSaveLabel.setPreferredSize(new Dimension(400,20));
  setupPanel.add(setupSaveLabel);
  JTextField worldInput=new JTextField(defaultWorld);
  worldInput.setAlignmentX(Component.CENTER_ALIGNMENT);
  worldInput.getDocument().putProperty(""String_Node_Str"",Boolean.TRUE);
  worldInput.setBackground(BACKGROUND);
  worldInput.setForeground(FOREGROUND);
  worldInput.setCaretColor(FOREGROUND);
  worldInput.setMaximumSize(new Dimension(400,25));
  worldInput.setBorder(new CompoundBorder(new EmptyBorder(0,0,10,0),new CompoundBorder(new LineBorder(new Color(128,128,128)),new LineBorder(BACKGROUND,5))));
  setupPanel.add(worldInput);
  JButton confirm=new JButton(""String_Node_Str""){
    private final Color borderColor=new Color(150,150,150);
    private final Color rolloverColor=new Color(80,81,83);
    private final Color pressedColor=new Color(50,52,53);
    private final int borderThickness=1;
{
      this.setBorderPainted(false);
      this.setFocusPainted(false);
      this.setOpaque(false);
      this.setContentAreaFilled(false);
    }
    @Override protected void paintComponent(    Graphics g){
      g.setColor(borderColor);
      g.fillRect(0,0,this.getWidth(),this.getHeight());
      if (this.getModel().isPressed()) {
        g.setColor(pressedColor);
      }
 else       if (this.getModel().isRollover()) {
        g.setColor(rolloverColor);
      }
 else {
        g.setColor(this.getBackground());
      }
      g.fillRect(borderThickness,borderThickness,this.getWidth() - 2 * borderThickness,this.getHeight() - 2 * borderThickness);
      super.paintComponent(g);
    }
  }
;
  confirm.setBackground(new Color(70,72,75));
  confirm.setForeground(FOREGROUND);
  confirm.addActionListener(e -> {
    this.directory=directoryInput.getText();
    this.world=worldInput.getText();
    this.dispatchSetupEvent();
    this.updateContentPane();
  }
);
  setupPanel.add(confirm);
  JPanel endPadding=new JPanel();
  endPadding.setOpaque(false);
  setupPanel.add(endPadding);
  setupPanel.setPreferredSize(new Dimension(500,200));
  this.setContentPane(setupPanel);
  this.pack();
  this.setVisible(true);
}","public DisplayWindow(String name,String defaultWorld,SetupListener l) throws HeadlessException {
  super(name);
  this.moduleName=name;
  this.listener=l;
  this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  JPanel setupPanel=new JPanel();
  setupPanel.setBackground(BACKGROUND);
  setupPanel.setLayout(new BoxLayout(setupPanel,BoxLayout.Y_AXIS));
  JLabel titleLabel=new JLabel(""String_Node_Str"" + name + ""String_Node_Str"");
  titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
  titleLabel.setForeground(FOREGROUND);
  titleLabel.setMaximumSize(new Dimension(400,50));
  titleLabel.setPreferredSize(new Dimension(400,50));
  titleLabel.setFont(titleLabel.getFont().deriveFont(16f));
  setupPanel.add(titleLabel);
  JLabel setupDirLabel=new JLabel(""String_Node_Str"");
  setupDirLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
  setupDirLabel.setForeground(FOREGROUND);
  setupDirLabel.setMaximumSize(new Dimension(400,40));
  setupDirLabel.setPreferredSize(new Dimension(400,20));
  setupPanel.add(setupDirLabel);
  JTextField directoryInput=new JTextField(MinecraftUtils.getDefaultMinecraftDir());
  directoryInput.setAlignmentX(Component.CENTER_ALIGNMENT);
  directoryInput.getDocument().putProperty(""String_Node_Str"",Boolean.TRUE);
  directoryInput.setBackground(BACKGROUND);
  directoryInput.setForeground(FOREGROUND);
  directoryInput.setCaretColor(FOREGROUND);
  directoryInput.setMaximumSize(new Dimension(400,25));
  directoryInput.setBorder(new CompoundBorder(new EmptyBorder(0,0,10,0),new CompoundBorder(new LineBorder(new Color(128,128,128)),new LineBorder(BACKGROUND,5))));
  setupPanel.add(directoryInput);
  JLabel setupSaveLabel=new JLabel(""String_Node_Str"");
  setupSaveLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
  setupSaveLabel.setForeground(FOREGROUND);
  setupSaveLabel.setMaximumSize(new Dimension(400,40));
  setupSaveLabel.setPreferredSize(new Dimension(400,20));
  setupPanel.add(setupSaveLabel);
  JTextField worldInput=new JTextField(defaultWorld);
  worldInput.setAlignmentX(Component.CENTER_ALIGNMENT);
  worldInput.getDocument().putProperty(""String_Node_Str"",Boolean.TRUE);
  worldInput.setBackground(BACKGROUND);
  worldInput.setForeground(FOREGROUND);
  worldInput.setCaretColor(FOREGROUND);
  worldInput.setMaximumSize(new Dimension(400,25));
  worldInput.setBorder(new CompoundBorder(new EmptyBorder(0,0,10,0),new CompoundBorder(new LineBorder(new Color(128,128,128)),new LineBorder(BACKGROUND,5))));
  setupPanel.add(worldInput);
  JButton confirm=new JButton(""String_Node_Str""){
    private final Color borderColor=new Color(150,150,150);
    private final Color rolloverColor=new Color(80,81,83);
    private final Color pressedColor=new Color(50,52,53);
    private final int borderThickness=1;
{
      this.setBorderPainted(false);
      this.setFocusPainted(false);
      this.setOpaque(false);
      this.setContentAreaFilled(false);
    }
    @Override protected void paintComponent(    Graphics g){
      g.setColor(borderColor);
      g.fillRect(0,0,this.getWidth(),this.getHeight());
      if (this.getModel().isPressed()) {
        g.setColor(pressedColor);
      }
 else       if (this.getModel().isRollover()) {
        g.setColor(rolloverColor);
      }
 else {
        g.setColor(this.getBackground());
      }
      g.fillRect(borderThickness,borderThickness,this.getWidth() - 2 * borderThickness,this.getHeight() - 2 * borderThickness);
      super.paintComponent(g);
    }
  }
;
  confirm.setBackground(new Color(70,72,75));
  confirm.setForeground(FOREGROUND);
  Runnable confirmAction=() -> {
    this.directory=directoryInput.getText();
    this.world=worldInput.getText();
    this.dispatchSetupEvent();
    this.updateContentPane();
  }
;
  directoryInput.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        confirmAction.run();
      }
    }
  }
);
  worldInput.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        confirmAction.run();
      }
    }
  }
);
  confirm.addActionListener(e -> confirmAction.run());
  setupPanel.add(confirm);
  JPanel endPadding=new JPanel();
  endPadding.setOpaque(false);
  setupPanel.add(endPadding);
  setupPanel.setPreferredSize(new Dimension(500,200));
  this.setContentPane(setupPanel);
  this.pack();
  this.setVisible(true);
}",0.942660004758506
174848,"private KProgressHUD showProgressHUD(Integer maskTypeInteger,KProgressHUDStyle style,String status){
  Context context=this.reactContext.getCurrentActivity();
  if (context != null) {
    KProgressHUDMaskType maskType=getMaskTypeForInteger(maskTypeInteger);
    this.progressHUD=KProgressHUD.create(context).setCancellable(getIsCancellableForMaskType(maskType)).setDimAmount(getDimAmountForMaskType(maskType));
    setProgressHUDStyle(context,this.progressHUD,style);
    this.currentStyle=style;
    if (status != null) {
      this.progressHUD.setLabel(status);
    }
  }
  if (style == KProgressHUDStyle.Progress) {
    this.progressHUD.setMaxProgress(100);
    this.progressHUD.setProgress(0);
  }
  return this.progressHUD.show();
}","private KProgressHUD showProgressHUD(Integer maskTypeInteger,KProgressHUDStyle style,String status){
  Context context=this.reactContext.getCurrentActivity();
  if (context != null && this.progressHUD == null) {
    KProgressHUDMaskType maskType=getMaskTypeForInteger(maskTypeInteger);
    this.progressHUD=KProgressHUD.create(context).setCancellable(getIsCancellableForMaskType(maskType)).setDimAmount(getDimAmountForMaskType(maskType));
    setProgressHUDStyle(context,this.progressHUD,style);
    this.currentStyle=style;
    if (status != null) {
      this.progressHUD.setLabel(status);
    }
  }
  if (style == KProgressHUDStyle.Progress) {
    this.progressHUD.setMaxProgress(100);
    this.progressHUD.setProgress(0);
  }
  return this.progressHUD.show();
}",0.9813581890812252
174849,"private KProgressHUD showProgressHUD(Integer maskTypeInteger,KProgressHUDStyle style,String status){
  Context context=this.reactContext.getCurrentActivity();
  if (context != null && this.progressHUD == null) {
    KProgressHUDMaskType maskType=getMaskTypeForInteger(maskTypeInteger);
    this.progressHUD=KProgressHUD.create(context).setCancellable(getIsCancellableForMaskType(maskType)).setDimAmount(getDimAmountForMaskType(maskType));
    setProgressHUDStyle(context,this.progressHUD,style);
    this.currentStyle=style;
    if (status != null) {
      this.progressHUD.setLabel(status);
    }
  }
  if (style == KProgressHUDStyle.Progress) {
    this.progressHUD.setMaxProgress(100);
    this.progressHUD.setProgress(0);
  }
  return this.progressHUD.show();
}","private KProgressHUD showProgressHUD(Integer maskTypeInteger,KProgressHUDStyle style,String status){
  Context context=this.reactContext.getCurrentActivity();
  if (this.progressHUD == null) {
    this.progressHUD=KProgressHUD.create(context);
    if (this.progressHUD.isShowing()) {
      this.progressHUD.dismiss();
    }
    this.progressHUD=null;
  }
  if (context != null) {
    KProgressHUDMaskType maskType=getMaskTypeForInteger(maskTypeInteger);
    this.progressHUD=KProgressHUD.create(context).setCancellable(getIsCancellableForMaskType(maskType)).setDimAmount(getDimAmountForMaskType(maskType));
    setProgressHUDStyle(context,this.progressHUD,style);
    this.currentStyle=style;
    if (status != null) {
      this.progressHUD.setLabel(status);
    }
  }
  if (style == KProgressHUDStyle.Progress) {
    this.progressHUD.setMaxProgress(100);
    this.progressHUD.setProgress(0);
  }
  return this.progressHUD.show();
}",0.8680800942285041
174850,"/** 
 * Execute the opcode.
 */
public void execute(){
  WasmStack<DataTypeNumber> stack=instance.stack();
  if ((instance.stack().peek() instanceof Int32) == false) {
    throw new WasmRuntimeException(UUID.fromString(""String_Node_Str""),""String_Node_Str"");
  }
  Int32 value1=(Int32)stack.pop();
  if ((stack.peek() instanceof Int32) == false) {
    throw new WasmRuntimeException(UUID.fromString(""String_Node_Str""),""String_Node_Str"");
  }
  Int32 value2=(Int32)stack.pop();
  Int32 result=new Int32(value1.integerValue() + value2.integerValue());
  stack.push(result);
}","/** 
 * Execute the opcode.
 */
public void execute(){
  WasmStack<DataTypeNumber> stack=instance.stack();
  if ((stack.peek() instanceof Int32) == false) {
    throw new WasmRuntimeException(UUID.fromString(""String_Node_Str""),""String_Node_Str"");
  }
  Int32 value1=(Int32)stack.pop();
  if ((stack.peek() instanceof Int32) == false) {
    throw new WasmRuntimeException(UUID.fromString(""String_Node_Str""),""String_Node_Str"");
  }
  Int32 value2=(Int32)stack.pop();
  Int32 result=new Int32(value1.integerValue() + value2.integerValue());
  stack.push(result);
}",0.9814651368049426
174851,"/** 
 * Execute the opcode
 * @param index index in to the vector that contains the local variable.
 */
public void execute(UInt32 index){
  if ((index.integerValue() <= instance.localAll().size()) == false) {
    throw new WasmRuntimeException(UUID.fromString(""String_Node_Str""),""String_Node_Str"" + index.integerValue() + ""String_Node_Str"");
  }
  WasmStack<DataTypeNumber> stack=instance.stack();
  DataTypeNumber value=instance.localAll().get(index.integerValue());
  stack.push(value);
}","/** 
 * Execute the opcode
 * @param index index in to the vector that contains the local variable.
 */
public void execute(UInt32 index){
  if ((index.integerValue() < instance.localAll().size()) == false) {
    throw new WasmRuntimeException(UUID.fromString(""String_Node_Str""),""String_Node_Str"" + index.integerValue() + ""String_Node_Str"");
  }
  WasmStack<DataTypeNumber> stack=instance.stack();
  DataTypeNumber value=instance.localAll().get(index.integerValue());
  stack.push(value);
}",0.9989806320081548
174852,"/** 
 * This an end to end test
 */
@Test public void wasmTest(){
  assertTrue(wasm.validate());
  assertEquals(new Integer(1),wasm.getFunctionSignatures().getSize());
  assertEquals(2,wasm.exports().size());
  assertEquals(new ExternalKind(ExternalKind.memory),wasm.exports().get(0).getExternalKind());
  assertEquals(""String_Node_Str"",wasm.exports().get(0).getFieldName().getValue());
  assertEquals(new ExternalKind(ExternalKind.function),wasm.exports().get(1).getExternalKind());
  assertEquals(""String_Node_Str"",wasm.exports().get(1).getFieldName().getValue());
  WasmInstance instance=new WasmInstance(module);
  WasmFunction functionAdd32=instance.exportFunction(""String_Node_Str"");
  WasmVector<DataTypeNumber> returnAll=new WasmVector<>(1);
  WasmVector<DataTypeNumber> paramAll=new WasmVector<>(2);
  paramAll.add(new Int32(3));
  paramAll.add(new Int32(4));
  instance.call(functionAdd32,returnAll,paramAll);
  assertNotNull(returnAll);
  assertEquals(1,returnAll.size());
  assertEquals(new Int32(7),returnAll.get(0));
}","/** 
 * This an end to end test
 */
@Test public void wasmTest(){
  assertTrue(wasm.validate());
  assertEquals(new Integer(1),wasm.getFunctionSignatures().getSize());
  assertEquals(2,wasm.exports().size());
  assertEquals(new ExternalKind(ExternalKind.memory),wasm.exports().get(0).getExternalKind());
  assertEquals(""String_Node_Str"",wasm.exports().get(0).getFieldName().getValue());
  assertEquals(new ExternalKind(ExternalKind.function),wasm.exports().get(1).getExternalKind());
  assertEquals(""String_Node_Str"",wasm.exports().get(1).getFieldName().getValue());
  WasmInstance instance=new WasmInstance(module);
  assertNotNull(instance.stack());
  WasmFunction functionAdd32=instance.exportFunction(""String_Node_Str"");
  WasmVector<DataTypeNumber> returnAll=new WasmVector<>(1);
  WasmVector<DataTypeNumber> paramAll=new WasmVector<>(2);
  paramAll.add(new Int32(3));
  paramAll.add(new Int32(4));
  instance.call(functionAdd32,returnAll,paramAll);
  assertNotNull(returnAll);
  assertEquals(1,returnAll.size());
  assertEquals(new Int32(7),returnAll.get(0));
}",0.9833253930443068
174853,"/** 
 * @param form
 * @param paramCount
 * @param paramTypeAll
 * @param returnCount only zero or one.
 * @param returnTypeAll
 */
public FunctionType(ValueType form,UInt32 paramCount,WasmVector<ValueType> paramTypeAll,UInt32 returnCount,WasmVector<ValueType> returnTypeAll){
  super();
  this.form=form;
  this.paramCount=paramCount;
  this.paramTypeAll=paramTypeAll;
  this.returnCount=returnCount;
  this.returnTypeAll=returnTypeAll;
}","public FunctionType(ValueType form,UInt32 paramCount,WasmVector<ValueType> paramTypeAll,UInt32 returnCount,WasmVector<ValueType> returnTypeAll){
  super();
  this.form=form;
  this.paramCount=paramCount;
  this.paramTypeAll=paramTypeAll;
  this.returnCount=returnCount;
  this.returnTypeAll=returnTypeAll;
}",0.8230563002680965
174854,"/** 
 * @param payload
 */
public LocalEntry(BytesFile payload){
  count=new VarUInt32(payload);
  valueType=new ValueType(payload);
}","/** 
 * @param payload the input BytesFile.
 */
public LocalEntry(BytesFile payload){
  count=new VarUInt32(payload);
  valueType=new ValueType(payload);
}",0.9273356401384084
174855,"/** 
 * copied from : https://www.mkyong.com/java/how-to-convert-file-into-an-array-of-bytes/
 * @return The file as an array of bytes.
 */
public byte[] bytes() throws IOException {
  FileInputStream fileInputStream=null;
  byte[] bytesArray=null;
  try {
    File file=new File(filePath);
    bytesArray=new byte[(int)file.length()];
    fileInputStream=new FileInputStream(file);
    fileInputStream.read(bytesArray);
  }
  finally {
    if (fileInputStream != null) {
      fileInputStream.close();
    }
  }
  return bytesArray;
}","/** 
 * copied from : https://www.mkyong.com/java/how-to-convert-file-into-an-array-of-bytes/
 * @return The file as an array of bytes.
 * @throws IOException on Error.
 */
public byte[] bytes() throws IOException {
  FileInputStream fileInputStream=null;
  byte[] bytesArray=null;
  try {
    File file=new File(filePath);
    bytesArray=new byte[(int)file.length()];
    fileInputStream=new FileInputStream(file);
    fileInputStream.read(bytesArray);
  }
  finally {
    if (fileInputStream != null) {
      fileInputStream.close();
    }
  }
  return bytesArray;
}",0.8485947416137806
174856,"/** 
 * @param payload
 */
@Override public void instantiate(BytesFile payload){
  count=new VarUInt32(payload);
  functionAll=new ArrayList<>(count.integerValue());
  for (Integer index=0; index < count.integerValue(); index++) {
    FunctionBody function=new FunctionBody(payload);
    functionAll.add(index,function);
  }
}","/** 
 * @param payload the input BytesFile.
 */
@Override public void instantiate(BytesFile payload){
  count=new VarUInt32(payload);
  functionAll=new ArrayList<>(count.integerValue());
  for (Integer index=0; index < count.integerValue(); index++) {
    FunctionBody function=new FunctionBody(payload);
    functionAll.add(index,function);
  }
}",0.9687964338781576
174857,"/** 
 * @param payload
 */
@Override public void instantiate(BytesFile payload){
  count=new VarUInt32(payload);
  exports=new WasmVector<>(count.integerValue());
  for (Integer index=0; index < count.integerValue(); index++) {
    ExportEntry export=new ExportEntry(payload);
    exports.add(index,export);
  }
}","/** 
 * @param payload the input BytesFile.
 */
@Override public void instantiate(BytesFile payload){
  count=new VarUInt32(payload);
  exports=new WasmVector<>(count.integerValue());
  for (Integer index=0; index < count.integerValue(); index++) {
    ExportEntry export=new ExportEntry(payload);
    exports.add(index,export);
  }
}",0.9675425038639875
174858,"public @NonNull String[] getValue(){
  return value;
}","public @NonNull String getValue(){
  if (!hasValue()) {
    throw new IllegalStateException(""String_Node_Str"" + key + ""String_Node_Str"");
  }
  return value[0];
}",0.4814814814814814
174859,"protected IniRecord(@NonNull String key,@NonNull String... value){
  this.key=key.trim();
  this.value=value;
  trimValues();
}","protected IniRecord(@NonNull String key,@NonNull String... value){
  this.key=key.trim();
  setValue(value);
}",0.8607594936708861
174860,"private void compile(OutputStream outputStream) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(outputStream));
    boolean isEmpty=true;
    for (    IniGroup group : groups.values()) {
      if (!isEmpty) {
        writer.newLine();
      }
      writer.write(GROUP_START + group.getName() + GROUP_END);
      isEmpty=false;
      for (      IniRecord record : group.getRecords()) {
        String value=join(ARRAY_VALUE_DELIMITER,record.getValue());
        writer.newLine();
        writer.write(record.getKey() + KEY_VALUE_DIVIDER + value);
      }
    }
    writer.flush();
  }
  finally {
    safeClose(writer);
  }
}","private void compile(OutputStream outputStream) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(outputStream));
    boolean isEmpty=true;
    for (    IniGroup group : groups.values()) {
      if (!isEmpty) {
        writer.newLine();
      }
      writer.write(GROUP_START + group.getName() + GROUP_END);
      isEmpty=false;
      for (      IniRecord record : group.getRecords()) {
        String value=join(ARRAY_VALUE_DELIMITER,record.getValues());
        writer.newLine();
        writer.write(record.getKey() + KEY_VALUE_DIVIDER + value);
      }
    }
    writer.flush();
  }
  finally {
    safeClose(writer);
  }
}",0.9992737835875092
174861,"public @Nullable String[] getValues(@NonNull String name,@NonNull String key,@Nullable String[] defValue){
  String[] value=defValue;
  IniGroup group=getOrCreateGroup(name);
  IniRecord record=group.getRecord(key);
  if (record != null) {
    value=record.getValue();
  }
  return value;
}","public @Nullable String[] getValues(@NonNull String name,@NonNull String key,@Nullable String[] defValue){
  String[] value=defValue;
  IniGroup group=getOrCreateGroup(name);
  IniRecord record=group.getRecord(key);
  if (record != null) {
    value=record.getValues();
  }
  return value;
}",0.9982788296041308
174862,"public @Nullable String getValue(@NonNull String name,@NonNull String key,@Nullable String defValue){
  String value=defValue;
  IniGroup group=getOrCreateGroup(name);
  IniRecord record=group.getRecord(key);
  if (record != null && record.isArrayValue()) {
    value=record.getValue()[0];
  }
  return value;
}","public @Nullable String getValue(@NonNull String name,@NonNull String key,@Nullable String defValue){
  String value=defValue;
  IniGroup group=getOrCreateGroup(name);
  IniRecord record=group.getRecord(key);
  if (record != null && record.hasValue()) {
    value=record.getValue();
  }
  return value;
}",0.9821138211382112
174863,"public void saveData(){
  if (status != 0) {
    config.set(""String_Node_Str"",status);
    config.set(""String_Node_Str"",top.x + ""String_Node_Str"" + top.y+ ""String_Node_Str""+ top.z+ ""String_Node_Str""+ top.level.getFolderName());
    config.set(""String_Node_Str"",start.x + ""String_Node_Str"" + start.y+ ""String_Node_Str""+ start.z+ ""String_Node_Str""+ start.level.getFolderName());
    String l=""String_Node_Str"";
    for (    Map.Entry<Integer,HashMap<Integer,Position>> entry : line.entrySet()) {
      l+=entry.getKey() + ""String_Node_Str"";
      for (      Map.Entry<Integer,Position> entry1 : entry.getValue().entrySet()) {
        l+=entry1.getKey() + ""String_Node_Str"" + entry1.getValue().x+ ""String_Node_Str""+ entry1.getValue().y+ ""String_Node_Str""+ entry1.getValue().z+ ""String_Node_Str""+ entry1.getValue().level.getFolderName()+ ""String_Node_Str"";
      }
      l=l.substring(0,l.length() - 1);
      l+=""String_Node_Str"";
    }
    l=l.substring(0,l.length() - 1);
    config.set(""String_Node_Str"",l);
    config.set(""String_Node_Str"",first);
    config.save();
  }
}","public void saveData(){
  if (status != 0) {
    config.set(""String_Node_Str"",status);
    config.set(""String_Node_Str"",top.x + ""String_Node_Str"" + top.y+ ""String_Node_Str""+ top.z+ ""String_Node_Str""+ top.level.getFolderName());
    config.set(""String_Node_Str"",top2.x + ""String_Node_Str"" + top2.y+ ""String_Node_Str""+ top2.z+ ""String_Node_Str""+ top2.level.getFolderName());
    config.set(""String_Node_Str"",top3.x + ""String_Node_Str"" + top3.y+ ""String_Node_Str""+ top3.z+ ""String_Node_Str""+ top3.level.getFolderName());
    config.set(""String_Node_Str"",start.x + ""String_Node_Str"" + start.y+ ""String_Node_Str""+ start.z+ ""String_Node_Str""+ start.level.getFolderName());
    String l=""String_Node_Str"";
    for (    Map.Entry<Integer,HashMap<Integer,Position>> entry : line.entrySet()) {
      l+=entry.getKey() + ""String_Node_Str"";
      for (      Map.Entry<Integer,Position> entry1 : entry.getValue().entrySet()) {
        l+=entry1.getKey() + ""String_Node_Str"" + entry1.getValue().x+ ""String_Node_Str""+ entry1.getValue().y+ ""String_Node_Str""+ entry1.getValue().z+ ""String_Node_Str""+ entry1.getValue().level.getFolderName()+ ""String_Node_Str"";
      }
      l=l.substring(0,l.length() - 1);
      l+=""String_Node_Str"";
    }
    l=l.substring(0,l.length() - 1);
    config.set(""String_Node_Str"",l);
    config.set(""String_Node_Str"",first);
    config.set(""String_Node_Str"",second);
    config.set(""String_Node_Str"",third);
    config.save();
  }
}",0.85192536720921
174864,"@Override public void onEnable(){
  plugin=this;
  this.getServer().getPluginManager().registerEvents(new EventListener(),this);
  this.config=new Config(this.getDataFolder() + ""String_Node_Str"",Config.YAML);
  this.getServer().getScheduler().scheduleRepeatingTask(new CheckGameTimeout(this),20);
  if (!this.config.exists(""String_Node_Str"")) {
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",new HashMap<>());
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.save();
  }
  initCommand();
  status=Integer.parseInt(config.get(""String_Node_Str"").toString());
  if (status != 0) {
    String[] t=config.get(""String_Node_Str"").toString().split(""String_Node_Str"");
    top=new Position(Float.parseFloat(t[0]),Float.parseFloat(t[1]),Float.parseFloat(t[2]),this.getServer().getLevelByName(t[3]));
    String[] s=config.get(""String_Node_Str"").toString().split(""String_Node_Str"");
    start=new Position(Float.parseFloat(s[0]),Float.parseFloat(s[1]),Float.parseFloat(s[2]),this.getServer().getLevelByName(t[3]));
    String[] l=config.get(""String_Node_Str"").toString().split(""String_Node_Str"");
    for (    String l1 : l) {
      HashMap<Integer,Position> map=new HashMap<>();
      String[] l2=l1.split(""String_Node_Str"");
      String[] l3=l2[1].split(""String_Node_Str"");
      for (      String l4 : l3) {
        String[] l5=l4.split(""String_Node_Str"");
        String[] l6=l5[1].split(""String_Node_Str"");
        map.put(Integer.parseInt(l5[0]),new Position(Float.parseFloat(l6[0]),Float.parseFloat(l6[1]),Float.parseFloat(l6[2]),this.getServer().getLevelByName(l6[3])));
        if (Integer.parseInt(l5[0]) == 3) {
          line.put(Integer.parseInt(l2[0]),map);
        }
      }
    }
    first=Double.parseDouble(config.get(""String_Node_Str"").toString());
  }
 else {
    top=new Position();
    start=new Position();
    line=new HashMap();
    first=999;
  }
  this.player=null;
  this.getLogger().notice(""String_Node_Str"");
}","@Override public void onEnable(){
  plugin=this;
  this.getServer().getPluginManager().registerEvents(new EventListener(),this);
  this.config=new Config(this.getDataFolder() + ""String_Node_Str"",Config.YAML);
  this.getServer().getScheduler().scheduleRepeatingTask(new CheckGameTimeout(this),20);
  if (!this.config.exists(""String_Node_Str"")) {
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",new HashMap<>());
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.set(""String_Node_Str"",""String_Node_Str"");
    this.config.save();
  }
  initCommand();
  status=Integer.parseInt(config.get(""String_Node_Str"").toString());
  if (status != 0) {
    String[] t=config.get(""String_Node_Str"").toString().split(""String_Node_Str"");
    top=new Position(Float.parseFloat(t[0]),Float.parseFloat(t[1]),Float.parseFloat(t[2]),this.getServer().getLevelByName(t[3]));
    String[] t2=config.get(""String_Node_Str"").toString().split(""String_Node_Str"");
    top2=new Position(Float.parseFloat(t2[0]),Float.parseFloat(t2[1]),Float.parseFloat(t2[2]),this.getServer().getLevelByName(t2[3]));
    String[] t3=config.get(""String_Node_Str"").toString().split(""String_Node_Str"");
    top3=new Position(Float.parseFloat(t3[0]),Float.parseFloat(t3[1]),Float.parseFloat(t3[2]),this.getServer().getLevelByName(t3[3]));
    String[] s=config.get(""String_Node_Str"").toString().split(""String_Node_Str"");
    start=new Position(Float.parseFloat(s[0]),Float.parseFloat(s[1]),Float.parseFloat(s[2]),this.getServer().getLevelByName(t[3]));
    String[] l=config.get(""String_Node_Str"").toString().split(""String_Node_Str"");
    for (    String l1 : l) {
      HashMap<Integer,Position> map=new HashMap<>();
      String[] l2=l1.split(""String_Node_Str"");
      String[] l3=l2[1].split(""String_Node_Str"");
      for (      String l4 : l3) {
        String[] l5=l4.split(""String_Node_Str"");
        String[] l6=l5[1].split(""String_Node_Str"");
        map.put(Integer.parseInt(l5[0]),new Position(Float.parseFloat(l6[0]),Float.parseFloat(l6[1]),Float.parseFloat(l6[2]),this.getServer().getLevelByName(l6[3])));
        if (Integer.parseInt(l5[0]) == 3) {
          line.put(Integer.parseInt(l2[0]),map);
        }
      }
    }
    first=Double.parseDouble(config.get(""String_Node_Str"").toString());
    second=Double.parseDouble(config.get(""String_Node_Str"").toString());
    third=Double.parseDouble(config.get(""String_Node_Str"").toString());
  }
 else {
    top=new Position();
    top2=new Position();
    top3=new Position();
    start=new Position();
    line=new HashMap();
    first=999;
    second=999;
    third=999;
  }
  this.player=null;
  this.getLogger().notice(""String_Node_Str"");
}",0.8223607323724191
174865,"@EventHandler public void onPlayerInteractEvent(final PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  if (player.getName().equals(plugin.set)) {
switch (plugin.status) {
case 0:
      plugin.pos1=event.getBlock().getLocation();
    player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
plugin.status++;
break;
case 1:
if (plugin.pos1.getLevel().getFolderName().equals(event.getBlock().getLevel().getFolderName())) {
if (plugin.pos1.x == block.x) {
if (Math.abs(plugin.pos1.y - block.y) == 4 && Math.abs(plugin.pos1.z - block.z) == 3) {
  plugin.pos2=block.getLocation();
  int x1=(int)plugin.pos1.x;
  int y1;
  if (plugin.pos1.y > plugin.pos2.y) {
    y1=(int)plugin.pos2.y;
  }
 else {
    y1=(int)plugin.pos1.y;
  }
  int z1;
  if (plugin.pos1.z > plugin.pos2.z) {
    z1=(int)plugin.pos2.z;
  }
 else {
    z1=(int)plugin.pos1.z;
  }
  HashMap<Integer,HashMap<Integer,Position>> line;
  line=wtLine(x1,y1,z1,block.getLevel(),true);
  plugin.line=line;
  plugin.status++;
  wtBlock(line,player.getLevel());
  player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
}
 else {
  plugin.status=0;
  player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else if (plugin.pos1.z == block.z) {
if (Math.abs(plugin.pos1.y - block.y) == 4 && Math.abs(plugin.pos1.x - block.x) == 3) {
  plugin.pos2=block.getLocation();
  int z1=(int)plugin.pos1.z;
  int y1;
  if (plugin.pos1.y > plugin.pos2.y) {
    y1=(int)plugin.pos2.y;
  }
 else {
    y1=(int)plugin.pos1.y;
  }
  int x1;
  if (plugin.pos1.x > plugin.pos2.x) {
    x1=(int)plugin.pos2.x;
  }
 else {
    x1=(int)plugin.pos1.x;
  }
  HashMap<Integer,HashMap<Integer,Position>> line;
  line=wtLine(x1,y1,z1,block.getLevel(),false);
  plugin.line=line;
  plugin.status++;
  wtBlock(line,player.getLevel());
  player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
}
 else {
  plugin.status=0;
  player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else {
plugin.status=0;
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else {
plugin.status=0;
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 2:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.start=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 3:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.top=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
plugin.set=""String_Node_Str"";
plugin.saveData();
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
}
event.setCancelled();
}
 else if (plugin.player != null) {
if (plugin.status == 0) {
return;
}
if (player.getName().equals(plugin.player)) {
if (plugin.line.get(0).get(0).level.getFolderName().equals(block.getLevel().getFolderName()) && plugin.line.get(0).get(0).x <= block.x && plugin.line.get(0).get(0).y <= block.y && plugin.line.get(0).get(0).z <= block.z && plugin.line.get(4).get(3).x >= block.x && plugin.line.get(4).get(3).y >= block.y && plugin.line.get(4).get(3).z >= block.z) {
if (block.y == plugin.line.get(0).get(0).y) {
if (block.getId() == 35 && block.getDamage() == 0) {
for (Map.Entry<Integer,HashMap<Integer,Position>> entry : plugin.line.entrySet()) {
for (Map.Entry<Integer,Position> entry1 : entry.getValue().entrySet()) {
player.getLevel().setBlock(entry1.getValue(),Block.get(35,14));
}
}
plugin.player=null;
plugin.game=0;
plugin.StartTime=0;
player.sendTitle(""String_Node_Str"");
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
}
 else if (block.getId() == 35 && block.getDamage() == 15) {
if (plugin.game == 50) {
long nanotime=System.nanoTime() - plugin.StartTime;
BigDecimal b=new BigDecimal(((double)nanotime / 1000000000));
double gametime=b.setScale(8,BigDecimal.ROUND_HALF_UP).doubleValue();
player.sendTitle(TextFormat.GREEN + ""String_Node_Str"" + (float)gametime);
if (gametime < plugin.first) {
BlockEntity blockEntity=plugin.top.getLevel().getBlockEntity(plugin.top);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + player.getName(),TextFormat.AQUA + ""String_Node_Str"" + (float)gametime,TextFormat.WHITE + ""String_Node_Str"");
plugin.getServer().broadcastMessage(TextFormat.GOLD + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
}
plugin.player=null;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
ChangeBlock(plugin.game,player.getLevel());
plugin.game=0;
CheckGameTimeout.time=0;
}
 else {
CheckGameTimeout.time=0;
ChangeBlock(plugin.game,player.getLevel());
plugin.game++;
}
}
}
}
 else if (block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
plugin.player=null;
plugin.game=0;
plugin.StartTime=0;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
wtBlock(plugin.line,player.getLevel());
}
}
 else if (block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
player.sendMessage(TextFormat.YELLOW + ""String_Node_Str"");
}
}
 else if (plugin.status != 0 && block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
plugin.player=player.getName();
CheckGameTimeout.time=0;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.RED + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"" + player.getName(),TextFormat.WHITE + ""String_Node_Str"");
player.sendTitle(TextFormat.YELLOW + ""String_Node_Str"");
ChangeBlock(0,player.getLevel());
plugin.game++;
}
}","@EventHandler public void onPlayerInteractEvent(final PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  if (player.getName().equals(plugin.set)) {
switch (plugin.status) {
case 0:
      plugin.pos1=event.getBlock().getLocation();
    player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
plugin.status++;
break;
case 1:
if (plugin.pos1.getLevel().getFolderName().equals(event.getBlock().getLevel().getFolderName())) {
if (plugin.pos1.x == block.x) {
if (Math.abs(plugin.pos1.y - block.y) == 4 && Math.abs(plugin.pos1.z - block.z) == 3) {
  plugin.pos2=block.getLocation();
  int x1=(int)plugin.pos1.x;
  int y1;
  if (plugin.pos1.y > plugin.pos2.y) {
    y1=(int)plugin.pos2.y;
  }
 else {
    y1=(int)plugin.pos1.y;
  }
  int z1;
  if (plugin.pos1.z > plugin.pos2.z) {
    z1=(int)plugin.pos2.z;
  }
 else {
    z1=(int)plugin.pos1.z;
  }
  HashMap<Integer,HashMap<Integer,Position>> line;
  line=wtLine(x1,y1,z1,block.getLevel(),true);
  plugin.line=line;
  plugin.status++;
  wtBlock(line,player.getLevel());
  player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
}
 else {
  plugin.status=0;
  player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else if (plugin.pos1.z == block.z) {
if (Math.abs(plugin.pos1.y - block.y) == 4 && Math.abs(plugin.pos1.x - block.x) == 3) {
  plugin.pos2=block.getLocation();
  int z1=(int)plugin.pos1.z;
  int y1;
  if (plugin.pos1.y > plugin.pos2.y) {
    y1=(int)plugin.pos2.y;
  }
 else {
    y1=(int)plugin.pos1.y;
  }
  int x1;
  if (plugin.pos1.x > plugin.pos2.x) {
    x1=(int)plugin.pos2.x;
  }
 else {
    x1=(int)plugin.pos1.x;
  }
  HashMap<Integer,HashMap<Integer,Position>> line;
  line=wtLine(x1,y1,z1,block.getLevel(),false);
  plugin.line=line;
  plugin.status++;
  wtBlock(line,player.getLevel());
  player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
}
 else {
  plugin.status=0;
  player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else {
plugin.status=0;
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else {
plugin.status=0;
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 2:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.start=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 3:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.top=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
plugin.set=""String_Node_Str"";
plugin.saveData();
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
}
event.setCancelled();
}
 else if (plugin.player != null) {
if (plugin.status == 0) {
return;
}
if (player.getName().equals(plugin.player)) {
if (plugin.line.get(0).get(0).level.getFolderName().equals(block.getLevel().getFolderName()) && plugin.line.get(0).get(0).x <= block.x && plugin.line.get(0).get(0).y <= block.y && plugin.line.get(0).get(0).z <= block.z && plugin.line.get(4).get(3).x >= block.x && plugin.line.get(4).get(3).y >= block.y && plugin.line.get(4).get(3).z >= block.z) {
if (block.y == plugin.line.get(0).get(0).y) {
if (block.getId() == 35 && block.getDamage() == 0) {
for (Map.Entry<Integer,HashMap<Integer,Position>> entry : plugin.line.entrySet()) {
for (Map.Entry<Integer,Position> entry1 : entry.getValue().entrySet()) {
player.getLevel().setBlock(entry1.getValue(),Block.get(35,14));
}
}
plugin.player=null;
plugin.game=0;
plugin.StartTime=0;
player.sendTitle(""String_Node_Str"");
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
}
 else if (block.getId() == 35 && block.getDamage() == 15) {
if (plugin.game == 49) {
long nanotime=System.nanoTime() - plugin.StartTime;
BigDecimal b=new BigDecimal(((double)nanotime / 1000000000));
double gametime=b.setScale(8,BigDecimal.ROUND_HALF_UP).doubleValue();
player.sendTitle(TextFormat.GREEN + ""String_Node_Str"" + (float)gametime);
if (gametime < plugin.first) {
BlockEntity blockEntity=plugin.top.getLevel().getBlockEntity(plugin.top);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + player.getName(),TextFormat.AQUA + ""String_Node_Str"" + (float)gametime,TextFormat.WHITE + ""String_Node_Str"");
plugin.getServer().broadcastMessage(TextFormat.GOLD + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
}
plugin.player=null;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
ChangeBlock(plugin.game,player.getLevel());
plugin.game=0;
CheckGameTimeout.time=0;
}
 else {
CheckGameTimeout.time=0;
ChangeBlock(plugin.game,player.getLevel());
plugin.game++;
}
}
}
}
 else if (block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
plugin.player=null;
plugin.game=0;
plugin.StartTime=0;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
wtBlock(plugin.line,player.getLevel());
}
}
 else if (block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
player.sendMessage(TextFormat.YELLOW + ""String_Node_Str"");
}
}
 else if (plugin.status != 0 && block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
plugin.player=player.getName();
CheckGameTimeout.time=0;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.RED + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"" + player.getName(),TextFormat.WHITE + ""String_Node_Str"");
player.sendTitle(TextFormat.YELLOW + ""String_Node_Str"");
ChangeBlock(0,player.getLevel());
plugin.game++;
}
}",0.9997527506490296
174866,"@EventHandler public void onPlayerInteractEvent(final PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  if (player.getName().equals(plugin.set)) {
switch (plugin.status) {
case 0:
      plugin.pos1=event.getBlock().getLocation();
    player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
plugin.status++;
break;
case 1:
if (plugin.pos1.getLevel().getFolderName().equals(event.getBlock().getLevel().getFolderName())) {
if (plugin.pos1.x == block.x) {
if (Math.abs(plugin.pos1.y - block.y) == 4 && Math.abs(plugin.pos1.z - block.z) == 3) {
  plugin.pos2=block.getLocation();
  int x1=(int)plugin.pos1.x;
  int y1;
  if (plugin.pos1.y > plugin.pos2.y) {
    y1=(int)plugin.pos2.y;
  }
 else {
    y1=(int)plugin.pos1.y;
  }
  int z1;
  if (plugin.pos1.z > plugin.pos2.z) {
    z1=(int)plugin.pos2.z;
  }
 else {
    z1=(int)plugin.pos1.z;
  }
  HashMap<Integer,HashMap<Integer,Position>> line;
  line=wtLine(x1,y1,z1,block.getLevel(),true);
  plugin.line=line;
  plugin.status++;
  wtBlock(line,player.getLevel());
  player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
}
 else {
  plugin.status=0;
  player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else if (plugin.pos1.z == block.z) {
if (Math.abs(plugin.pos1.y - block.y) == 4 && Math.abs(plugin.pos1.x - block.x) == 3) {
  plugin.pos2=block.getLocation();
  int z1=(int)plugin.pos1.z;
  int y1;
  if (plugin.pos1.y > plugin.pos2.y) {
    y1=(int)plugin.pos2.y;
  }
 else {
    y1=(int)plugin.pos1.y;
  }
  int x1;
  if (plugin.pos1.x > plugin.pos2.x) {
    x1=(int)plugin.pos2.x;
  }
 else {
    x1=(int)plugin.pos1.x;
  }
  HashMap<Integer,HashMap<Integer,Position>> line;
  line=wtLine(x1,y1,z1,block.getLevel(),false);
  plugin.line=line;
  plugin.status++;
  wtBlock(line,player.getLevel());
  player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
}
 else {
  plugin.status=0;
  player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else {
plugin.status=0;
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else {
plugin.status=0;
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 2:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.start=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 3:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.top=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
plugin.set=""String_Node_Str"";
plugin.saveData();
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
}
event.setCancelled();
}
 else if (plugin.player != null) {
if (plugin.status == 0) {
return;
}
if (player.getName().equals(plugin.player)) {
if (plugin.line.get(0).get(0).level.getFolderName().equals(block.getLevel().getFolderName()) && plugin.line.get(0).get(0).x <= block.x && plugin.line.get(0).get(0).y <= block.y && plugin.line.get(0).get(0).z <= block.z && plugin.line.get(4).get(3).x >= block.x && plugin.line.get(4).get(3).y >= block.y && plugin.line.get(4).get(3).z >= block.z) {
if (block.y == plugin.line.get(0).get(0).y) {
if (block.getId() == 35 && block.getDamage() == 0) {
for (Map.Entry<Integer,HashMap<Integer,Position>> entry : plugin.line.entrySet()) {
for (Map.Entry<Integer,Position> entry1 : entry.getValue().entrySet()) {
player.getLevel().setBlock(entry1.getValue(),Block.get(35,14));
}
}
plugin.player=null;
plugin.game=0;
plugin.StartTime=0;
player.sendTitle(""String_Node_Str"");
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
}
 else if (block.getId() == 35 && block.getDamage() == 15) {
if (plugin.game == 49) {
long nanotime=System.nanoTime() - plugin.StartTime;
BigDecimal b=new BigDecimal(((double)nanotime / 1000000000));
double gametime=b.setScale(8,BigDecimal.ROUND_HALF_UP).doubleValue();
player.sendTitle(TextFormat.GREEN + ""String_Node_Str"" + (float)gametime);
if (gametime < plugin.first) {
BlockEntity blockEntity=plugin.top.getLevel().getBlockEntity(plugin.top);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + player.getName(),TextFormat.AQUA + ""String_Node_Str"" + (float)gametime,TextFormat.WHITE + ""String_Node_Str"");
plugin.getServer().broadcastMessage(TextFormat.GOLD + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
}
plugin.player=null;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
ChangeBlock(plugin.game,player.getLevel());
plugin.game=0;
CheckGameTimeout.time=0;
}
 else {
CheckGameTimeout.time=0;
ChangeBlock(plugin.game,player.getLevel());
plugin.game++;
}
}
}
}
 else if (block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
plugin.player=null;
plugin.game=0;
plugin.StartTime=0;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
wtBlock(plugin.line,player.getLevel());
}
}
 else if (block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
player.sendMessage(TextFormat.YELLOW + ""String_Node_Str"");
}
}
 else if (plugin.status != 0 && block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
plugin.player=player.getName();
CheckGameTimeout.time=0;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.RED + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"" + player.getName(),TextFormat.WHITE + ""String_Node_Str"");
player.sendTitle(TextFormat.YELLOW + ""String_Node_Str"");
ChangeBlock(0,player.getLevel());
plugin.game++;
}
}","@EventHandler public void onPlayerInteractEvent(final PlayerInteractEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  if (player.getName().equals(plugin.set)) {
switch (plugin.status) {
case 0:
      plugin.pos1=event.getBlock().getLocation();
    player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
plugin.status++;
break;
case 1:
if (plugin.pos1.getLevel().getFolderName().equals(event.getBlock().getLevel().getFolderName())) {
if (plugin.pos1.x == block.x) {
if (Math.abs(plugin.pos1.y - block.y) == 4 && Math.abs(plugin.pos1.z - block.z) == 3) {
  plugin.pos2=block.getLocation();
  int x1=(int)plugin.pos1.x;
  int y1;
  if (plugin.pos1.y > plugin.pos2.y) {
    y1=(int)plugin.pos2.y;
  }
 else {
    y1=(int)plugin.pos1.y;
  }
  int z1;
  if (plugin.pos1.z > plugin.pos2.z) {
    z1=(int)plugin.pos2.z;
  }
 else {
    z1=(int)plugin.pos1.z;
  }
  HashMap<Integer,HashMap<Integer,Position>> line;
  line=wtLine(x1,y1,z1,block.getLevel(),true);
  plugin.line=line;
  plugin.status++;
  wtBlock(line,player.getLevel());
  player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
}
 else {
  plugin.status=0;
  player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else if (plugin.pos1.z == block.z) {
if (Math.abs(plugin.pos1.y - block.y) == 4 && Math.abs(plugin.pos1.x - block.x) == 3) {
  plugin.pos2=block.getLocation();
  int z1=(int)plugin.pos1.z;
  int y1;
  if (plugin.pos1.y > plugin.pos2.y) {
    y1=(int)plugin.pos2.y;
  }
 else {
    y1=(int)plugin.pos1.y;
  }
  int x1;
  if (plugin.pos1.x > plugin.pos2.x) {
    x1=(int)plugin.pos2.x;
  }
 else {
    x1=(int)plugin.pos1.x;
  }
  HashMap<Integer,HashMap<Integer,Position>> line;
  line=wtLine(x1,y1,z1,block.getLevel(),false);
  plugin.line=line;
  plugin.status++;
  wtBlock(line,player.getLevel());
  player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
  player.setSubtitle(TextFormat.RED + ""String_Node_Str"" + event.getBlock().x+ ""String_Node_Str""+ event.getBlock().y+ ""String_Node_Str""+ event.getBlock().z);
}
 else {
  plugin.status=0;
  player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else {
plugin.status=0;
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
}
 else {
plugin.status=0;
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 2:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.start=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 3:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.top=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 4:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.top2=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
case 5:
if (block.getId() == 63 || block.getId() == 68 || block.getId() == 323) {
plugin.top3=block.getLocation();
BlockEntity blockEntity=block.getLevel().getBlockEntity(block.getLocation());
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
plugin.status++;
plugin.set=""String_Node_Str"";
plugin.saveData();
player.sendTitle(TextFormat.GOLD + ""String_Node_Str"");
}
 else {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
}
break;
}
event.setCancelled();
}
 else if (plugin.player != null) {
if (plugin.status == 0) {
return;
}
if (player.getName().equals(plugin.player)) {
if (plugin.line.get(0).get(0).level.getFolderName().equals(block.getLevel().getFolderName()) && plugin.line.get(0).get(0).x <= block.x && plugin.line.get(0).get(0).y <= block.y && plugin.line.get(0).get(0).z <= block.z && plugin.line.get(4).get(3).x >= block.x && plugin.line.get(4).get(3).y >= block.y && plugin.line.get(4).get(3).z >= block.z) {
if (block.y == plugin.line.get(0).get(0).y) {
if (block.getId() == 35 && block.getDamage() == 0) {
for (Map.Entry<Integer,HashMap<Integer,Position>> entry : plugin.line.entrySet()) {
for (Map.Entry<Integer,Position> entry1 : entry.getValue().entrySet()) {
player.getLevel().setBlock(entry1.getValue(),Block.get(35,14));
}
}
plugin.player=null;
plugin.game=0;
plugin.StartTime=0;
player.sendTitle(TextFormat.RED + ""String_Node_Str"");
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
}
 else if (block.getId() == 35 && block.getDamage() == 15) {
if (plugin.game == 49) {
long nanotime=System.nanoTime() - plugin.StartTime;
BigDecimal b=new BigDecimal(((double)nanotime / 1000000000));
double gametime=b.setScale(8,BigDecimal.ROUND_HALF_UP).doubleValue();
player.sendTitle(TextFormat.GREEN + ""String_Node_Str"" + (float)gametime);
if (gametime < plugin.first) {
plugin.first=gametime;
BlockEntity blockEntity=plugin.top.getLevel().getBlockEntity(plugin.top);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + player.getName(),TextFormat.AQUA + ""String_Node_Str"" + (float)gametime,TextFormat.WHITE + ""String_Node_Str"");
plugin.getServer().broadcastMessage(TextFormat.GOLD + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
}
 else if (gametime < plugin.second) {
plugin.second=gametime;
BlockEntity blockEntity=plugin.top2.getLevel().getBlockEntity(plugin.top2);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + player.getName(),TextFormat.AQUA + ""String_Node_Str"" + (float)gametime,TextFormat.WHITE + ""String_Node_Str"");
plugin.getServer().broadcastMessage(TextFormat.GOLD + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
}
 else if (gametime < plugin.third) {
plugin.third=gametime;
BlockEntity blockEntity=plugin.top3.getLevel().getBlockEntity(plugin.top3);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.YELLOW + player.getName(),TextFormat.AQUA + ""String_Node_Str"" + (float)gametime,TextFormat.WHITE + ""String_Node_Str"");
plugin.getServer().broadcastMessage(TextFormat.GOLD + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
}
plugin.player=null;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
ChangeBlock(plugin.game,player.getLevel());
plugin.game=0;
CheckGameTimeout.time=0;
}
 else {
CheckGameTimeout.time=0;
ChangeBlock(plugin.game,player.getLevel());
plugin.game++;
}
}
}
}
 else if (block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
player.sendMessage(TextFormat.RED + ""String_Node_Str"");
plugin.player=null;
plugin.game=0;
plugin.StartTime=0;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.GREEN + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"",TextFormat.WHITE + ""String_Node_Str"");
wtBlock(plugin.line,player.getLevel());
}
}
 else if (block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
player.sendMessage(TextFormat.YELLOW + ""String_Node_Str"");
}
}
 else if (plugin.status != 0 && block.getX() == plugin.start.x && block.getY() == plugin.start.y && block.getZ() == plugin.start.z && block.getLevel().getFolderName().equals(plugin.start.level.getFolderName())) {
plugin.player=player.getName();
CheckGameTimeout.time=0;
BlockEntity blockEntity=plugin.line.get(0).get(0).getLevel().getBlockEntity(plugin.start);
BlockEntitySign sign=new BlockEntitySign(blockEntity.chunk,blockEntity.namedTag);
sign.setText(TextFormat.GOLD + ""String_Node_Str"",TextFormat.RED + ""String_Node_Str"",TextFormat.AQUA + ""String_Node_Str"" + player.getName(),TextFormat.WHITE + ""String_Node_Str"");
player.sendTitle(TextFormat.YELLOW + ""String_Node_Str"");
ChangeBlock(0,player.getLevel());
plugin.game++;
}
}",0.7971754481260185
174867,"public static String getStringContent(IFile file) throws CoreException, IOException {
  BufferedReader r=new BufferedReader(new InputStreamReader(file.getContents(),StandardCharsets.UTF_8));
  String str=null;
  StringBuilder sb=new StringBuilder();
  while ((str=r.readLine()) != null) {
    sb.append(str);
  }
  return sb.toString();
}","public static String getStringContent(IFile file) throws CoreException, IOException {
  BufferedReader r=new BufferedReader(new InputStreamReader(file.getContents(),StandardCharsets.UTF_8));
  String str=null;
  StringBuilder sb=new StringBuilder();
  while ((str=r.readLine()) != null) {
    sb.append(str + '\n');
  }
  return sb.toString();
}",0.9897510980966324
174868,"@Override public void run(){
  try {
    if (sApplication != null) {
      return;
    }
    sApplication=getSystemApp();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
 finally {
    LOCK.notifyAll();
  }
}","@Override public void run(){
  try {
    if (sApplication != null) {
      return;
    }
    sApplication=getSystemApp();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
 finally {
synchronized (LOCK) {
      LOCK.notifyAll();
    }
  }
}",0.9227467811158798
174869,"public static void main(String[] args){
  try {
    Gpio led=new Gpio(4);
    Aio lightSensor=new Aio(0);
    led.dir(Dir.DIR_OUT);
    int on=0;
    long lightValue=0;
    String command=""String_Node_Str"";
    Socket clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
    BufferedReader in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    PrintWriter out=new PrintWriter(socket.getOutputStream());
    out.println(args[2] + ""String_Node_Str"" + args[3]);
    System.out.println(""String_Node_Str"");
    while (true) {
      lightValue=lightSensor.read();
      command=in.readLine().trim().toLowerCase();
      if (command.length() > 0)       System.out.println(command);
      if (command.equals(""String_Node_Str"")) {
        on=-1;
        led.write(0);
      }
 else       if (command.equals(""String_Node_Str"")) {
        on=1;
        led.write(1);
      }
 else       if (command.equals(""String_Node_Str""))       on=0;
      if (lightValue < 300 && on != -1) {
        led.write(1);
      }
 else       if (on != 1) {
        led.write(0);
      }
      wait1Msec(10);
    }
  }
 catch (  Exception e) {
  }
}","public static void main(String[] args){
  try {
    Gpio led=new Gpio(4);
    Aio lightSensor=new Aio(0);
    led.dir(Dir.DIR_OUT);
    int on=0;
    long lightValue=0;
    String command=""String_Node_Str"";
    Socket clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
    BufferedReader in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    PrintWriter out=new PrintWriter(clientSocket.getOutputStream());
    out.println(args[2] + ""String_Node_Str"" + args[3]);
    System.out.println(""String_Node_Str"");
    while (true) {
      lightValue=lightSensor.read();
      command=in.readLine().trim().toLowerCase();
      if (command.length() > 0)       System.out.println(command);
      if (command.equals(""String_Node_Str"")) {
        on=-1;
        led.write(0);
      }
 else       if (command.equals(""String_Node_Str"")) {
        on=1;
        led.write(1);
      }
 else       if (command.equals(""String_Node_Str""))       on=0;
      if (lightValue < 300 && on != -1) {
        led.write(1);
      }
 else       if (on != 1) {
        led.write(0);
      }
      wait1Msec(10);
    }
  }
 catch (  Exception e) {
  }
}",0.9965337954939342
174870,"public static void main(String[] args){
  try {
    Gpio led=new Gpio(4);
    Aio lightSensor=new Aio(0);
    led.dir(Dir.DIR_OUT);
    int on=0;
    long lightValue=0;
    String command=""String_Node_Str"";
    Socket clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
    BufferedReader in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    System.out.println(""String_Node_Str"");
    while (true) {
      lightValue=lightSensor.read();
      command=in.readLine().trim().toLowerCase();
      System.out.println(command);
      if (command.equals(""String_Node_Str""))       on=1;
 else       if (command.equals(""String_Node_Str""))       on=-1;
 else       if (command.equals(""String_Node_Str""))       on=0;
      if (lightValue < 200 && on != -1) {
        led.write(1);
      }
 else       if (on != 1) {
        led.write(0);
      }
      wait1Msec(10);
    }
  }
 catch (  Exception e) {
  }
}","public static void main(String[] args){
  try {
    Gpio led=new Gpio(4);
    Aio lightSensor=new Aio(0);
    led.dir(Dir.DIR_OUT);
    int on=0;
    long lightValue=0;
    String command=""String_Node_Str"";
    Socket clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
    BufferedReader in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    System.out.println(""String_Node_Str"");
    while (true) {
      lightValue=lightSensor.read();
      command=in.readLine().trim().toLowerCase();
      if (command.length() > 0)       System.out.println(command);
      if (command.equals(""String_Node_Str""))       on=-1;
 else       if (command.equals(""String_Node_Str""))       on=1;
 else       if (command.equals(""String_Node_Str""))       on=0;
      if (lightValue < 200 && on != -1) {
        led.write(1);
      }
 else       if (on != 1) {
        led.write(0);
      }
      wait1Msec(10);
    }
  }
 catch (  Exception e) {
  }
}",0.9820675105485231
174871,"public static void main(String[] args){
  Gpio led=new Gpio(4);
  Aio lightSensor=new Aio(0);
  led.dir(Dir.DIR_OUT);
  int on=0;
  long lightValue=0;
  String command=""String_Node_Str"";
  Socket clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
  BufferedReader in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
  while (true) {
    lightValue=lightSensor.read();
    command=in.readLine().trim().toLowerCase();
    if (command.equals(""String_Node_Str""))     on=1;
 else     if (command.equals(""String_Node_Str""))     on=-1;
 else     if (command.equals(""String_Node_Str""))     on=0;
    if (lightValue < 200 && on != -1) {
      led.write(1);
    }
 else     if (on != 1) {
      led.write(0);
    }
    wait1Msec(10);
  }
}","public static void main(String[] args){
  Gpio led=new Gpio(4);
  Aio lightSensor=new Aio(0);
  led.dir(Dir.DIR_OUT);
  int on=0;
  long lightValue=0;
  String command=""String_Node_Str"";
  Socket clientSocket;
  BufferedReader in;
  try {
    clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
    in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
  }
 catch (  Exception e) {
  }
  while (true) {
    lightValue=lightSensor.read();
    try {
      command=in.readLine().trim().toLowerCase();
    }
 catch (    Exception e) {
    }
    if (command.equals(""String_Node_Str""))     on=1;
 else     if (command.equals(""String_Node_Str""))     on=-1;
 else     if (command.equals(""String_Node_Str""))     on=0;
    if (lightValue < 200 && on != -1) {
      led.write(1);
    }
 else     if (on != 1) {
      led.write(0);
    }
    wait1Msec(10);
  }
}",0.8576642335766423
174872,"public static void main(String[] args){
  Gpio led=new Gpio(4);
  Aio lightSensor=new Aio(0);
  led.dir(Dir.DIR_OUT);
  int on=0;
  long lightValue=0;
  String command=""String_Node_Str"";
  Socket clientSocket;
  BufferedReader in;
  try {
    clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
    in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
  }
 catch (  Exception e) {
  }
  while (true) {
    lightValue=lightSensor.read();
    try {
      command=in.readLine().trim().toLowerCase();
    }
 catch (    Exception e) {
    }
    if (command.equals(""String_Node_Str""))     on=1;
 else     if (command.equals(""String_Node_Str""))     on=-1;
 else     if (command.equals(""String_Node_Str""))     on=0;
    if (lightValue < 200 && on != -1) {
      led.write(1);
    }
 else     if (on != 1) {
      led.write(0);
    }
    wait1Msec(10);
  }
}","public static void main(String[] args){
  Gpio led=new Gpio(4);
  Aio lightSensor=new Aio(0);
  led.dir(Dir.DIR_OUT);
  int on=0;
  long lightValue=0;
  String command=""String_Node_Str"";
  Socket clientSocket;
  BufferedReader in;
  try {
    clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
  }
 catch (  Exception e) {
  }
  try {
    in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
  }
 catch (  Exception e) {
  }
  while (true) {
    lightValue=lightSensor.read();
    try {
      command=in.readLine().trim().toLowerCase();
    }
 catch (    Exception e) {
    }
    if (command.equals(""String_Node_Str""))     on=1;
 else     if (command.equals(""String_Node_Str""))     on=-1;
 else     if (command.equals(""String_Node_Str""))     on=0;
    if (lightValue < 200 && on != -1) {
      led.write(1);
    }
 else     if (on != 1) {
      led.write(0);
    }
    wait1Msec(10);
  }
}",0.9772601220188576
174873,"public static void main(String[] args){
  Gpio led=new Gpio(4);
  Aio lightSensor=new Aio(0);
  led.dir(Dir.DIR_OUT);
  int on=0;
  long lightValue=0;
  String command=""String_Node_Str"";
  Socket clientSocket;
  BufferedReader in;
  try {
    clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
  }
 catch (  Exception e) {
  }
  try {
    in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
  }
 catch (  Exception e) {
  }
  while (true) {
    lightValue=lightSensor.read();
    try {
      command=in.readLine().trim().toLowerCase();
    }
 catch (    Exception e) {
    }
    if (command.equals(""String_Node_Str""))     on=1;
 else     if (command.equals(""String_Node_Str""))     on=-1;
 else     if (command.equals(""String_Node_Str""))     on=0;
    if (lightValue < 200 && on != -1) {
      led.write(1);
    }
 else     if (on != 1) {
      led.write(0);
    }
    wait1Msec(10);
  }
}","public static void main(String[] args){
  Gpio led=new Gpio(4);
  Aio lightSensor=new Aio(0);
  led.dir(Dir.DIR_OUT);
  int on=0;
  long lightValue=0;
  String command=""String_Node_Str"";
  Socket clientSocket=null;
  BufferedReader in=null;
  try {
    clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
  }
 catch (  Exception e) {
  }
  try {
    in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
  }
 catch (  Exception e) {
  }
  while (true) {
    lightValue=lightSensor.read();
    try {
      command=in.readLine().trim().toLowerCase();
    }
 catch (    Exception e) {
    }
    if (command.equals(""String_Node_Str""))     on=1;
 else     if (command.equals(""String_Node_Str""))     on=-1;
 else     if (command.equals(""String_Node_Str""))     on=0;
    if (lightValue < 200 && on != -1) {
      led.write(1);
    }
 else     if (on != 1) {
      led.write(0);
    }
    wait1Msec(10);
  }
}",0.9946062567421792
174874,"public static void main(String[] args){
}","public static void main(String[] args){
  Gpio led=new Gpio(4);
  Aio lightSensor=new Aio(0);
  led.dir(Dir.DIR_OUT);
  int on=0;
  long lightValue=0;
  String command=""String_Node_Str"";
  Socket clientSocket=new Socket(args[0],Integer.parseInt(args[1]));
  BufferedReader in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
  while (true) {
    lightValue=lightSensor.read();
    command=in.readLine().trim().toLowerCase();
    if (command.equals(""String_Node_Str""))     on=1;
 else     if (command.equals(""String_Node_Str""))     on=-1;
 else     if (command.equals(""String_Node_Str""))     on=0;
    if (lightValue < 200 && on != -1) {
      led.write(1);
    }
 else     if (on != 1) {
      led.write(0);
    }
    wait1Msec(10);
  }
}",0.1019900497512437
174875,"private void init(){
  Environment env=beanFactory.getBean(Environment.class);
  String package_=env.getProperty(MQ_CONSUMER_PACKAGES);
  if (null == package_) {
    throw new RuntimeException(String.format(""String_Node_Str"",MQ_CONSUMER_PACKAGES));
  }
  packages=package_.split(""String_Node_Str"");
  accessKey=env.getProperty(MqConstant.ACCESS_KEY);
  if (null == accessKey || accessKey.trim().isEmpty()) {
    throw new RuntimeException(String.format(""String_Node_Str"",MqConstant.ACCESS_KEY));
  }
  secretKey=env.getProperty(MqConstant.SECRET_KEY);
  if (null == secretKey || secretKey.trim().isEmpty()) {
    throw new RuntimeException(String.format(""String_Node_Str"",MqConstant.SECRET_KEY));
  }
  suffix=env.getProperty(MqConstant.MQ_SUFFIX);
  if (null == suffix || suffix.trim().isEmpty()) {
    throw new RuntimeException(String.format(""String_Node_Str"",MqConstant.MQ_SUFFIX));
  }
  String consumerThread=env.getProperty(MQ_CONSUMER_DEFAULT_THREAD);
  String consumerModel=env.getProperty(MQ_CONSUMER_DEFAULT_MODEL);
  String consumerMaxReconsume=env.getProperty(MQ_CONSUMER_DEFAULT_RECONSUME);
  String consumerSuspendTime=env.getProperty(MQ_CONSUMER_DEFAULT_SUSPEND_TIME);
  if (null != consumerThread) {
    defaultConsumerThread=Integer.valueOf(defaultConsumerThread);
  }
  if (null != consumerMaxReconsume) {
    defaultMaxReconsume=Integer.valueOf(consumerMaxReconsume);
  }
  if (null != consumerSuspendTime) {
    defaultSuspendTime=Integer.valueOf(consumerSuspendTime);
  }
  if (null != consumerModel && !consumerModel.isEmpty()) {
    defaultConsumerModel=consumerModel;
  }
}","private void init(){
  Environment env=beanFactory.getBean(Environment.class);
  String package_=env.getProperty(MQ_CONSUMER_PACKAGES);
  if (null == package_) {
    throw new RuntimeException(String.format(""String_Node_Str"",MQ_CONSUMER_PACKAGES));
  }
  packages=package_.split(""String_Node_Str"");
  accessKey=env.getProperty(MqConstant.ACCESS_KEY);
  if (null == accessKey || accessKey.trim().isEmpty()) {
    throw new RuntimeException(String.format(""String_Node_Str"",MqConstant.ACCESS_KEY));
  }
  secretKey=env.getProperty(MqConstant.SECRET_KEY);
  if (null == secretKey || secretKey.trim().isEmpty()) {
    throw new RuntimeException(String.format(""String_Node_Str"",MqConstant.SECRET_KEY));
  }
  suffix=env.getProperty(MqConstant.MQ_SUFFIX);
  if (null == suffix || suffix.trim().isEmpty()) {
    throw new RuntimeException(String.format(""String_Node_Str"",MqConstant.MQ_SUFFIX));
  }
  String consumerThread=env.getProperty(MQ_CONSUMER_DEFAULT_THREAD);
  String consumerModel=env.getProperty(MQ_CONSUMER_DEFAULT_MODEL);
  String consumerMaxReconsume=env.getProperty(MQ_CONSUMER_DEFAULT_MAX_RECONSUME);
  String consumerSuspendTime=env.getProperty(MQ_CONSUMER_DEFAULT_SUSPEND_TIME);
  if (null != consumerThread) {
    defaultConsumerThread=Integer.valueOf(defaultConsumerThread);
  }
  if (null != consumerMaxReconsume) {
    defaultMaxReconsume=Integer.valueOf(consumerMaxReconsume);
  }
  if (null != consumerSuspendTime) {
    defaultSuspendTime=Integer.valueOf(consumerSuspendTime);
  }
  if (null != consumerModel && !consumerModel.isEmpty()) {
    defaultConsumerModel=consumerModel;
  }
}",0.99875
174876,"Action apply(A a,B b) throws Exception ;","Action apply(A a,B b,C c) throws Exception ;",0.9523809523809524
174877,"default <A,B>T subscribeTag(String tag,ControllerMethods.ControllerMethod2<A,B> controllerMethod){
  return subscribeTag(tag,(ControllerMethods.ControllerMethod)controllerMethod);
}","default <A,B,C>T subscribeTag(String tag,ControllerMethods.ControllerMethod3<A,B,C> controllerMethod){
  return subscribeTag(tag,(ControllerMethods.ControllerMethod)controllerMethod);
}",0.9836065573770492
174878,"private ArgumentExtractor[] getExtractor(Method method,Class<?>[] parmTypes){
  final Annotation[][] paramAnnotations=method.getParameterAnnotations();
  ArgumentExtractor[] extractors=new ArgumentExtractor[parmTypes.length];
  for (int i=0; i < parmTypes.length; i++) {
    Class cls=parmTypes[i];
    if (Optional.class.isAssignableFrom(cls)) {
      throw new RuntimeException(String.format(""String_Node_Str"",method));
    }
    extractors[i]=ArgumentExtractors.getArgumentExtractor(cls,paramAnnotations[i],beanFactory);
  }
  return extractors;
}","private ArgumentExtractor[] getExtractor(Method method,Class<?>[] parmTypes){
  final Annotation[][] paramAnnotations=method.getParameterAnnotations();
  ArgumentExtractor[] extractors=new ArgumentExtractor[parmTypes.length];
  for (int i=0; i < parmTypes.length; i++) {
    Class cls=parmTypes[i];
    if (Optional.class.isAssignableFrom(cls)) {
      throw new RuntimeException(String.format(""String_Node_Str"",method));
    }
    extractors[i]=ArgumentExtractors.getArgumentExtractor(cls,paramAnnotations[i],beanFactory);
  }
  for (int i=0; i < extractors.length; i++) {
    if (extractors[i] == null) {
      extractors[i]=ArgumentExtractors.defaultExtractor;
      break;
    }
  }
  return extractors;
}",0.8435266084193804
174879,"public static ArgumentExtractor getArgumentExtractor(Class<?> parameterClass,Annotation[] annotations,DefaultListableBeanFactory beanFactory){
  ArgumentExtractor<?> extractor=STATIC_EXTRACTORS.get(parameterClass);
  if (extractor == null) {
    for (    Annotation annotation : annotations) {
      WithArgumentExtractor withArgumentExtractor=annotation.annotationType().getAnnotation(WithArgumentExtractor.class);
      if (withArgumentExtractor != null) {
        extractor=instantiateComponent(beanFactory,withArgumentExtractor.value(),annotation);
        extractor.init(annotation,parameterClass);
        return extractor;
      }
    }
  }
  if (extractor == null) {
    extractor=defaultExtractor;
  }
  return extractor;
}","public static ArgumentExtractor getArgumentExtractor(Class<?> parameterClass,Annotation[] annotations,DefaultListableBeanFactory beanFactory){
  ArgumentExtractor<?> extractor=STATIC_EXTRACTORS.get(parameterClass);
  if (extractor == null) {
    for (    Annotation annotation : annotations) {
      WithArgumentExtractor withArgumentExtractor=annotation.annotationType().getAnnotation(WithArgumentExtractor.class);
      if (withArgumentExtractor != null) {
        extractor=instantiateComponent(beanFactory,withArgumentExtractor.value(),annotation);
        extractor.init(annotation,parameterClass);
        return extractor;
      }
    }
  }
  return extractor;
}",0.9436117059243396
174880,"public void addTag(String tag,Method method){
  if (tagMap.containsKey(tag)) {
    logger.warn(String.format(""String_Node_Str"",cid,tag));
  }
  Class<?> cls=method.getDeclaringClass();
  final Tag t=new Tag();
  t.setInvokeCls(cls);
  t.setMethodName(method.getName());
  Reconsume mReconsume=method.getAnnotation(Reconsume.class);
  if (null != mReconsume) {
    t.setReconsume(mReconsume.value());
  }
 else {
    Reconsume cReconsume=cls.getAnnotation(Reconsume.class);
    if (null != cReconsume) {
      t.setReconsume(cReconsume.value());
    }
  }
  MethodAccess methodAccess=check.get(cls);
  if (null == methodAccess) {
    methodAccess=MethodAccess.get(cls);
    check.put(cls,methodAccess);
  }
  t.setMethodAccess(methodAccess);
  t.setArgumentExtractors(getExtractor(method,method.getParameterTypes()));
  Stream.of(tag.split(""String_Node_Str"")).forEach(tag_ -> tagMap.put(tag_.trim(),t));
}","public void addTag(String tag,Method method){
  if (tagMap.containsKey(tag)) {
    logger.warn(String.format(""String_Node_Str"",cid,tag));
  }
  Class<?> cls=method.getDeclaringClass();
  final Tag t=new Tag();
  t.setInvokeCls(cls);
  t.setMethodName(method.getName());
  Reconsume mReconsume=method.getAnnotation(Reconsume.class);
  if (null != mReconsume) {
    t.setReconsume(mReconsume.value());
  }
 else {
    Reconsume cReconsume=cls.getAnnotation(Reconsume.class);
    if (null != cReconsume) {
      t.setReconsume(cReconsume.value());
    }
  }
  MethodAccess methodAccess=check.get(cls);
  if (null == methodAccess) {
    methodAccess=MethodAccess.get(cls);
    check.put(cls,methodAccess);
  }
  t.setMethodAccess(methodAccess);
  t.setArgumentExtractors(ArgumentExtractors.getArgumentExtractor(method,method.getParameterTypes(),beanFactory));
  Stream.of(tag.split(""String_Node_Str"")).forEach(tag_ -> tagMap.put(tag_.trim(),t));
}",0.9767190037899296
174881,"public static ArgumentExtractor getArgumentExtractor(Class<?> parameterClass,Annotation[] annotations,DefaultListableBeanFactory beanFactory){
  ArgumentExtractor<?> extractor=STATIC_EXTRACTORS.get(parameterClass);
  if (extractor == null) {
    for (    Annotation annotation : annotations) {
      WithArgumentExtractor withArgumentExtractor=annotation.annotationType().getAnnotation(WithArgumentExtractor.class);
      if (withArgumentExtractor != null) {
        extractor=instantiateComponent(beanFactory,withArgumentExtractor.value(),annotation);
        extractor.init(annotation,parameterClass);
        return extractor;
      }
    }
  }
  return extractor;
}","public static ArgumentExtractor[] getArgumentExtractor(Method method,Class<?>[] parmTypes,DefaultListableBeanFactory beanFactory){
  final Annotation[][] paramAnnotations=method.getParameterAnnotations();
  ArgumentExtractor[] extractors=new ArgumentExtractor[parmTypes.length];
  int flag=0;
  for (int i=0; i < parmTypes.length; i++) {
    Class parameterClass=parmTypes[i];
    if (Optional.class.isAssignableFrom(parameterClass)) {
      throw new RuntimeException(String.format(""String_Node_Str"",method));
    }
    ArgumentExtractor<?> extractor=STATIC_EXTRACTORS.get(parameterClass);
    extractors[i]=extractor;
    if (extractor == null) {
      Annotation[] annotations=paramAnnotations[i];
      for (      Annotation annotation : annotations) {
        WithArgumentExtractor withArgumentExtractor=annotation.annotationType().getAnnotation(WithArgumentExtractor.class);
        if (withArgumentExtractor != null) {
          extractor=instantiateComponent(beanFactory,withArgumentExtractor.value(),annotation);
          extractor.init(annotation,parameterClass);
          flag++;
          break;
        }
      }
    }
    if (extractor == null) {
      extractor=defaultExtractor;
      flag++;
    }
    if (flag == 1) {
      extractors[i]=extractor;
    }
  }
  return extractors;
}",0.601015228426396
174882,"protected boolean initializeCamera(int width,int height){
  Log.d(TAG,""String_Node_Str"");
  boolean result=true;
synchronized (this) {
    mCamera=null;
    if (mCameraIndex == CAMERA_ID_ANY) {
      Log.d(TAG,""String_Node_Str"");
      try {
        mCamera=Camera.open();
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + e.getLocalizedMessage());
      }
      if (mCamera == null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
        boolean connected=false;
        for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
          Log.d(TAG,""String_Node_Str"" + Integer.valueOf(camIdx) + ""String_Node_Str"");
          try {
            mCamera=Camera.open(camIdx);
            connected=true;
          }
 catch (          RuntimeException e) {
            Log.e(TAG,""String_Node_Str"" + camIdx + ""String_Node_Str""+ e.getLocalizedMessage());
          }
          if (connected)           break;
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
        int localCameraIndex=mCameraIndex;
        if (mCameraIndex == CAMERA_ID_BACK) {
          Log.i(TAG,""String_Node_Str"");
          Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
          for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
            Camera.getCameraInfo(camIdx,cameraInfo);
            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
              localCameraIndex=camIdx;
              break;
            }
          }
        }
 else         if (mCameraIndex == CAMERA_ID_FRONT) {
          Log.i(TAG,""String_Node_Str"");
          Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
          for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
            Camera.getCameraInfo(camIdx,cameraInfo);
            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
              localCameraIndex=camIdx;
              break;
            }
          }
        }
        if (localCameraIndex == CAMERA_ID_BACK) {
          Log.e(TAG,""String_Node_Str"");
        }
 else         if (localCameraIndex == CAMERA_ID_FRONT) {
          Log.e(TAG,""String_Node_Str"");
        }
 else {
          Log.d(TAG,""String_Node_Str"" + Integer.valueOf(localCameraIndex) + ""String_Node_Str"");
          try {
            mCamera=Camera.open(localCameraIndex);
          }
 catch (          RuntimeException e) {
            Log.e(TAG,""String_Node_Str"" + localCameraIndex + ""String_Node_Str""+ e.getLocalizedMessage());
          }
        }
      }
    }
    if (mCamera == null)     return false;
    try {
      Camera.Parameters params=mCamera.getParameters();
      Log.d(TAG,""String_Node_Str"");
      List<android.hardware.Camera.Size> sizes=params.getSupportedPreviewSizes();
      if (sizes != null) {
        Size frameSize=calculateCameraFrameSize(sizes,new MagicCameraView.JavaCameraSizeAccessor(),width,height);
        params.setPreviewFormat(ImageFormat.NV21);
        Log.d(TAG,""String_Node_Str"" + Integer.valueOf((int)frameSize.width) + ""String_Node_Str""+ Integer.valueOf((int)frameSize.height));
        params.setPreviewSize((int)frameSize.width,(int)frameSize.height);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH && !android.os.Build.MODEL.equals(""String_Node_Str""))         params.setRecordingHint(true);
        List<String> FocusModes=params.getSupportedFocusModes();
        if (FocusModes != null && FocusModes.contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO)) {
          params.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
        }
        setPreviewFPS(30000,30000);
        mCamera.setParameters(params);
        params=mCamera.getParameters();
        mFrameWidth=params.getPreviewSize().width;
        mFrameHeight=params.getPreviewSize().height;
        if ((getLayoutParams().width == LayoutParams.MATCH_PARENT) && (getLayoutParams().height == LayoutParams.MATCH_PARENT))         mScale=Math.min(((float)height) / mFrameHeight,((float)width) / mFrameWidth);
 else         mScale=0;
        if (mFpsMeter != null) {
          mFpsMeter.setResolution(mFrameWidth,mFrameHeight);
        }
        int size=mFrameWidth * mFrameHeight;
        size=size * ImageFormat.getBitsPerPixel(params.getPreviewFormat()) / 8;
        mBuffer=new byte[size];
        mCamera.addCallbackBuffer(mBuffer);
        mCamera.setPreviewCallbackWithBuffer(this);
        mFrameChain=new Mat[2];
        mFrameChain[0]=new Mat(mFrameHeight + (mFrameHeight / 2),mFrameWidth,CvType.CV_8UC1);
        mFrameChain[1]=new Mat(mFrameHeight + (mFrameHeight / 2),mFrameWidth,CvType.CV_8UC1);
        AllocateCache();
        mCameraFrame=new MagicCameraView.JavaCameraFrame[2];
        mCameraFrame[0]=new MagicCameraView.JavaCameraFrame(mFrameChain[0],mFrameWidth,mFrameHeight);
        mCameraFrame[1]=new MagicCameraView.JavaCameraFrame(mFrameChain[1],mFrameWidth,mFrameHeight);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
          mSurfaceTexture=new SurfaceTexture(MAGIC_TEXTURE_ID);
          mCamera.setPreviewTexture(mSurfaceTexture);
        }
 else         mCamera.setPreviewDisplay(null);
        Log.d(TAG,""String_Node_Str"");
        mCamera.startPreview();
      }
 else       result=false;
    }
 catch (    Exception e) {
      result=false;
      e.printStackTrace();
    }
  }
  return result;
}","protected boolean initializeCamera(int width,int height){
  Log.d(TAG,""String_Node_Str"");
  boolean result=true;
synchronized (this) {
    mCamera=null;
    if (mCameraIndex == CAMERA_ID_ANY) {
      Log.d(TAG,""String_Node_Str"");
      try {
        mCamera=Camera.open();
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + e.getLocalizedMessage());
      }
      if (mCamera == null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
        boolean connected=false;
        for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
          Log.d(TAG,""String_Node_Str"" + Integer.valueOf(camIdx) + ""String_Node_Str"");
          try {
            mCamera=Camera.open(camIdx);
            connected=true;
          }
 catch (          RuntimeException e) {
            Log.e(TAG,""String_Node_Str"" + camIdx + ""String_Node_Str""+ e.getLocalizedMessage());
          }
          if (connected)           break;
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
        int localCameraIndex=mCameraIndex;
        if (mCameraIndex == CAMERA_ID_BACK) {
          Log.i(TAG,""String_Node_Str"");
          Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
          for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
            Camera.getCameraInfo(camIdx,cameraInfo);
            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
              localCameraIndex=camIdx;
              break;
            }
          }
        }
 else         if (mCameraIndex == CAMERA_ID_FRONT) {
          Log.i(TAG,""String_Node_Str"");
          Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
          for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
            Camera.getCameraInfo(camIdx,cameraInfo);
            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
              localCameraIndex=camIdx;
              break;
            }
          }
        }
        if (localCameraIndex == CAMERA_ID_BACK) {
          Log.e(TAG,""String_Node_Str"");
        }
 else         if (localCameraIndex == CAMERA_ID_FRONT) {
          Log.e(TAG,""String_Node_Str"");
        }
 else {
          Log.d(TAG,""String_Node_Str"" + Integer.valueOf(localCameraIndex) + ""String_Node_Str"");
          try {
            mCamera=Camera.open(localCameraIndex);
          }
 catch (          RuntimeException e) {
            Log.e(TAG,""String_Node_Str"" + localCameraIndex + ""String_Node_Str""+ e.getLocalizedMessage());
          }
        }
      }
    }
    if (mCamera == null)     return false;
    try {
      Camera.Parameters params=mCamera.getParameters();
      Log.d(TAG,""String_Node_Str"");
      List<android.hardware.Camera.Size> sizes=params.getSupportedPreviewSizes();
      if (sizes != null) {
        Size frameSize=calculateCameraFrameSize(sizes,new MagicCameraView.JavaCameraSizeAccessor(),width,height);
        params.setPreviewFormat(ImageFormat.NV21);
        Log.d(TAG,""String_Node_Str"" + Integer.valueOf((int)frameSize.width) + ""String_Node_Str""+ Integer.valueOf((int)frameSize.height));
        params.setPreviewSize((int)frameSize.width,(int)frameSize.height);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH && !android.os.Build.MODEL.equals(""String_Node_Str""))         params.setRecordingHint(true);
        List<String> FocusModes=params.getSupportedFocusModes();
        if (FocusModes != null && FocusModes.contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO)) {
          params.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
        }
        setPreviewFPS(30000,30000);
        mCamera.setParameters(params);
        params=mCamera.getParameters();
        mFrameWidth=params.getPreviewSize().width;
        mFrameHeight=params.getPreviewSize().height;
        if ((getLayoutParams().width == LayoutParams.MATCH_PARENT) && (getLayoutParams().height == LayoutParams.MATCH_PARENT))         mScale=Math.min(((float)height) / mFrameHeight,((float)width) / mFrameWidth);
 else         mScale=0;
        if (mFpsMeter != null) {
          mFpsMeter.setResolution(mFrameWidth,mFrameHeight);
        }
        int size=mFrameWidth * mFrameHeight;
        size=size * ImageFormat.getBitsPerPixel(params.getPreviewFormat()) / 8;
        mBuffer=new byte[size];
        mCamera.addCallbackBuffer(mBuffer);
        mCamera.setPreviewCallbackWithBuffer(this);
        mFrameChain=new Mat[2];
        mFrameChain[0]=new Mat(mFrameHeight + (mFrameHeight / 2),mFrameWidth,CvType.CV_8UC1);
        mFrameChain[1]=new Mat(mFrameHeight + (mFrameHeight / 2),mFrameWidth,CvType.CV_8UC1);
        AllocateCache();
        mCameraFrame=new MagicCameraView.MagicCameraFrame[2];
        mCameraFrame[0]=new MagicCameraView.MagicCameraFrame(mFrameChain[0],mFrameWidth,mFrameHeight);
        mCameraFrame[1]=new MagicCameraView.MagicCameraFrame(mFrameChain[1],mFrameWidth,mFrameHeight);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
          mSurfaceTexture=new SurfaceTexture(MAGIC_TEXTURE_ID);
          mCamera.setPreviewTexture(mSurfaceTexture);
        }
 else         mCamera.setPreviewDisplay(null);
        Log.d(TAG,""String_Node_Str"");
        mCamera.startPreview();
      }
 else       result=false;
    }
 catch (    Exception e) {
      result=false;
      e.printStackTrace();
    }
  }
  return result;
}",0.9975131251726996
174883,"protected boolean initializeCamera(int width,int height){
  Log.d(TAG,""String_Node_Str"");
  boolean result=true;
synchronized (this) {
    mCamera=null;
    if (mCameraIndex == CAMERA_ID_ANY) {
      Log.d(TAG,""String_Node_Str"");
      try {
        mCamera=Camera.open();
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + e.getLocalizedMessage());
      }
      if (mCamera == null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
        boolean connected=false;
        for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
          Log.d(TAG,""String_Node_Str"" + Integer.valueOf(camIdx) + ""String_Node_Str"");
          try {
            mCamera=Camera.open(camIdx);
            connected=true;
          }
 catch (          RuntimeException e) {
            Log.e(TAG,""String_Node_Str"" + camIdx + ""String_Node_Str""+ e.getLocalizedMessage());
          }
          if (connected)           break;
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
        int localCameraIndex=mCameraIndex;
        if (mCameraIndex == CAMERA_ID_BACK) {
          Log.i(TAG,""String_Node_Str"");
          Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
          for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
            Camera.getCameraInfo(camIdx,cameraInfo);
            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
              localCameraIndex=camIdx;
              break;
            }
          }
        }
 else         if (mCameraIndex == CAMERA_ID_FRONT) {
          Log.i(TAG,""String_Node_Str"");
          Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
          for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
            Camera.getCameraInfo(camIdx,cameraInfo);
            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
              localCameraIndex=camIdx;
              break;
            }
          }
        }
        if (localCameraIndex == CAMERA_ID_BACK) {
          Log.e(TAG,""String_Node_Str"");
        }
 else         if (localCameraIndex == CAMERA_ID_FRONT) {
          Log.e(TAG,""String_Node_Str"");
        }
 else {
          Log.d(TAG,""String_Node_Str"" + Integer.valueOf(localCameraIndex) + ""String_Node_Str"");
          try {
            mCamera=Camera.open(localCameraIndex);
          }
 catch (          RuntimeException e) {
            Log.e(TAG,""String_Node_Str"" + localCameraIndex + ""String_Node_Str""+ e.getLocalizedMessage());
          }
        }
      }
    }
    if (mCamera == null)     return false;
    try {
      Camera.Parameters params=mCamera.getParameters();
      Log.d(TAG,""String_Node_Str"");
      List<android.hardware.Camera.Size> sizes=params.getSupportedPreviewSizes();
      if (sizes != null) {
        Size frameSize=calculateCameraFrameSize(sizes,new MagicCameraView.JavaCameraSizeAccessor(),width,height);
        params.setPreviewFormat(ImageFormat.NV21);
        Log.d(TAG,""String_Node_Str"" + Integer.valueOf((int)frameSize.width) + ""String_Node_Str""+ Integer.valueOf((int)frameSize.height));
        params.setPreviewSize((int)frameSize.width,(int)frameSize.height);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH && !android.os.Build.MODEL.equals(""String_Node_Str""))         params.setRecordingHint(true);
        List<String> FocusModes=params.getSupportedFocusModes();
        if (FocusModes != null && FocusModes.contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO)) {
          params.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
        }
        setPreviewFPS(30000,30000);
        mCamera.setParameters(params);
        params=mCamera.getParameters();
        mFrameWidth=params.getPreviewSize().width;
        mFrameHeight=params.getPreviewSize().height;
        if ((getLayoutParams().width == LayoutParams.MATCH_PARENT) && (getLayoutParams().height == LayoutParams.MATCH_PARENT))         mScale=Math.min(((float)height) / mFrameHeight,((float)width) / mFrameWidth);
 else         mScale=0;
        if (mFpsMeter != null) {
          mFpsMeter.setResolution(mFrameWidth,mFrameHeight);
        }
        int size=mFrameWidth * mFrameHeight;
        size=size * ImageFormat.getBitsPerPixel(params.getPreviewFormat()) / 8;
        mBuffer=new byte[size];
        mCamera.addCallbackBuffer(mBuffer);
        mCamera.setPreviewCallbackWithBuffer(this);
        mFrameChain=new Mat[2];
        mFrameChain[0]=new Mat(mFrameHeight + (mFrameHeight / 2),mFrameWidth,CvType.CV_8UC1);
        mFrameChain[1]=new Mat(mFrameHeight + (mFrameHeight / 2),mFrameWidth,CvType.CV_8UC1);
        AllocateCache();
        mCameraFrame=new MagicCameraView.MagicCameraFrame[2];
        mCameraFrame[0]=new MagicCameraView.MagicCameraFrame(mFrameChain[0],mFrameWidth,mFrameHeight);
        mCameraFrame[1]=new MagicCameraView.MagicCameraFrame(mFrameChain[1],mFrameWidth,mFrameHeight);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
          mSurfaceTexture=new SurfaceTexture(MAGIC_TEXTURE_ID);
          mCamera.setPreviewTexture(mSurfaceTexture);
        }
 else         mCamera.setPreviewDisplay(null);
        Log.d(TAG,""String_Node_Str"");
        mCamera.startPreview();
      }
 else       result=false;
    }
 catch (    Exception e) {
      result=false;
      e.printStackTrace();
    }
  }
  return result;
}","protected boolean initializeCamera(int width,int height){
  Log.d(TAG,""String_Node_Str"");
  boolean result=true;
synchronized (this) {
    mCamera=null;
    if (mCameraIndex == CAMERA_ID_ANY) {
      Log.d(TAG,""String_Node_Str"");
      try {
        mCamera=Camera.open();
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + e.getLocalizedMessage());
      }
      if (mCamera == null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
        boolean connected=false;
        for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
          Log.d(TAG,""String_Node_Str"" + Integer.valueOf(camIdx) + ""String_Node_Str"");
          try {
            mCamera=Camera.open(camIdx);
            connected=true;
          }
 catch (          RuntimeException e) {
            Log.e(TAG,""String_Node_Str"" + camIdx + ""String_Node_Str""+ e.getLocalizedMessage());
          }
          if (connected)           break;
        }
      }
    }
 else {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
        int localCameraIndex=mCameraIndex;
        if (mCameraIndex == CAMERA_ID_BACK) {
          Log.i(TAG,""String_Node_Str"");
          Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
          for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
            Camera.getCameraInfo(camIdx,cameraInfo);
            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
              localCameraIndex=camIdx;
              break;
            }
          }
        }
 else         if (mCameraIndex == CAMERA_ID_FRONT) {
          Log.i(TAG,""String_Node_Str"");
          Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
          for (int camIdx=0; camIdx < Camera.getNumberOfCameras(); ++camIdx) {
            Camera.getCameraInfo(camIdx,cameraInfo);
            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
              localCameraIndex=camIdx;
              break;
            }
          }
        }
        if (localCameraIndex == CAMERA_ID_BACK) {
          Log.e(TAG,""String_Node_Str"");
        }
 else         if (localCameraIndex == CAMERA_ID_FRONT) {
          Log.e(TAG,""String_Node_Str"");
        }
 else {
          Log.d(TAG,""String_Node_Str"" + Integer.valueOf(localCameraIndex) + ""String_Node_Str"");
          try {
            mCamera=Camera.open(localCameraIndex);
          }
 catch (          RuntimeException e) {
            Log.e(TAG,""String_Node_Str"" + localCameraIndex + ""String_Node_Str""+ e.getLocalizedMessage());
          }
        }
      }
    }
    if (mCamera == null)     return false;
    try {
      Camera.Parameters params=mCamera.getParameters();
      Log.d(TAG,""String_Node_Str"");
      List<android.hardware.Camera.Size> sizes=params.getSupportedPreviewSizes();
      if (sizes != null) {
        Size frameSize=calculateCameraFrameSize(sizes,new JavaCameraSizeAccessor(),width,height);
        params.setPreviewFormat(ImageFormat.NV21);
        Log.d(TAG,""String_Node_Str"" + Integer.valueOf((int)frameSize.width) + ""String_Node_Str""+ Integer.valueOf((int)frameSize.height));
        params.setPreviewSize((int)frameSize.width,(int)frameSize.height);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH && !android.os.Build.MODEL.equals(""String_Node_Str""))         params.setRecordingHint(true);
        List<String> FocusModes=params.getSupportedFocusModes();
        if (FocusModes != null && FocusModes.contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO)) {
          params.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
        }
        mCamera.setParameters(params);
        params=mCamera.getParameters();
        mFrameWidth=params.getPreviewSize().width;
        mFrameHeight=params.getPreviewSize().height;
        if ((getLayoutParams().width == LayoutParams.MATCH_PARENT) && (getLayoutParams().height == LayoutParams.MATCH_PARENT))         mScale=Math.min(((float)height) / mFrameHeight,((float)width) / mFrameWidth);
 else         mScale=0;
        if (mFpsMeter != null) {
          mFpsMeter.setResolution(mFrameWidth,mFrameHeight);
        }
        int size=mFrameWidth * mFrameHeight;
        size=size * ImageFormat.getBitsPerPixel(params.getPreviewFormat()) / 8;
        mBuffer=new byte[size];
        mCamera.addCallbackBuffer(mBuffer);
        mCamera.setPreviewCallbackWithBuffer(this);
        mFrameChain=new Mat[2];
        mFrameChain[0]=new Mat(mFrameHeight + (mFrameHeight / 2),mFrameWidth,CvType.CV_8UC1);
        mFrameChain[1]=new Mat(mFrameHeight + (mFrameHeight / 2),mFrameWidth,CvType.CV_8UC1);
        AllocateCache();
        mCameraFrame=new MagicCameraFrame[2];
        mCameraFrame[0]=new MagicCameraFrame(mFrameChain[0],mFrameWidth,mFrameHeight);
        mCameraFrame[1]=new MagicCameraFrame(mFrameChain[1],mFrameWidth,mFrameHeight);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
          mSurfaceTexture=new SurfaceTexture(MAGIC_TEXTURE_ID);
          mCamera.setPreviewTexture(mSurfaceTexture);
        }
 else         mCamera.setPreviewDisplay(null);
        Log.d(TAG,""String_Node_Str"");
        mCamera.startPreview();
      }
 else       result=false;
    }
 catch (    Exception e) {
      result=false;
      e.printStackTrace();
    }
  }
  return result;
}",0.9907063197026024
174884,"public MatOfDouble getmProjectionCV(){
  if (mProjectionDirtyCV) {
    if (mProjectionCV == null) {
      mProjectionCV=new MatOfDouble();
      mProjectionCV.create(3,3,CvType.CV_64FC1);
    }
    final float fovAspectRatio=mFOVX / mFOVY;
    final double diagonalPx=Math.sqrt((Math.pow(mWidthPx,2.0) + Math.pow(mWidthPx / fovAspectRatio,2.0)));
    final double focalLengthPx=0.5 * diagonalPx / Math.sqrt(Math.pow(Math.tan(0.5 * mFOVX * Math.PI / 180f),2.0) + Math.pow(Math.tan(0.5 * mFOVY * Math.PI / 180f),2.0));
    mProjectionCV.put(0,0,focalLengthPx);
    mProjectionCV.put(0,1,0.0);
    mProjectionCV.put(0,2,0.5 * mWidthPx);
    mProjectionCV.put(1,0,0.0);
    mProjectionCV.put(1,1,focalLengthPx);
    mProjectionCV.put(1,2,0.5 * mHeightPx);
    mProjectionCV.put(2,0,0.0);
    mProjectionCV.put(2,1,0.0);
    mProjectionCV.put(2,2,1.0);
  }
  return mProjectionCV;
}","public MatOfDouble getmProjectionCV(){
  if (mProjectionDirtyCV) {
    if (mProjectionCV == null) {
      mProjectionCV=new MatOfDouble();
      mProjectionCV.create(3,3,CvType.CV_64FC1);
    }
    final float fovAspectRatio=mFOVX / mFOVY;
    final double diagonalPx=Math.sqrt((Math.pow(mWidthPx,2.0) + Math.pow(mWidthPx / fovAspectRatio,2.0)));
    final double diagonalFOV=Math.sqrt((Math.pow(mFOVX,2.0) + Math.pow(mFOVY,2.0)));
    final double focalLengthPx=diagonalPx / (2.0 * Math.tan(0.5 * diagonalFOV * Math.PI / 180f));
    mProjectionCV.put(0,0,focalLengthPx);
    mProjectionCV.put(0,1,0.0);
    mProjectionCV.put(0,2,0.5 * mWidthPx);
    mProjectionCV.put(1,0,0.0);
    mProjectionCV.put(1,1,focalLengthPx);
    mProjectionCV.put(1,2,0.5 * mHeightPx);
    mProjectionCV.put(2,0,0.0);
    mProjectionCV.put(2,1,0.0);
    mProjectionCV.put(2,2,1.0);
  }
  return mProjectionCV;
}",0.5206564799094511
174885,"private void findPose(){
  List<DMatch> matchesList=mMatches.toList();
  if (matchesList.size() < 4) {
    return;
  }
  List<KeyPoint> referenceKeypointsList=mReferenceKeypoints.toList();
  List<KeyPoint> sceneKeypointsList=mSceneKeypoints.toList();
  double maxDist=0.0;
  double minDist=Double.MAX_VALUE;
  for (  DMatch match : matchesList) {
    double dist=match.distance;
    if (dist < minDist) {
      minDist=dist;
    }
    if (dist > maxDist) {
      maxDist=dist;
    }
  }
  if (minDist > 50.0) {
    mTargetFound=false;
    return;
  }
 else   if (minDist > 25.0) {
    return;
  }
  ArrayList<Point> goodReferencePointsList=new ArrayList<Point>();
  ArrayList<Point> goodScenePointsList=new ArrayList<Point>();
  double maxGoodMatchDist=1.75 * minDist;
  for (  final DMatch match : matchesList) {
    if (match.distance < maxGoodMatchDist) {
      goodReferencePointsList.add(referenceKeypointsList.get(match.trainIdx).pt);
      goodScenePointsList.add(sceneKeypointsList.get(match.queryIdx).pt);
    }
  }
  if (goodReferencePointsList.size() < 4 || goodScenePointsList.size() < 4) {
    return;
  }
  final MatOfPoint2f goodReferencePoints=new MatOfPoint2f();
  goodReferencePoints.fromList(goodReferencePointsList);
  final MatOfPoint2f goodScenePoints=new MatOfPoint2f();
  goodScenePoints.fromList(goodScenePointsList);
  final Mat homography=Calib3d.findHomography(goodReferencePoints,goodScenePoints);
  Core.perspectiveTransform(mReferenceCorners,mCandidateSceneCorners,homography);
  mCandidateSceneCorners.convertTo(mIntSceneCorners,CvType.CV_32S);
  if (Imgproc.isContourConvex(mIntSceneCorners)) {
    return;
  }
  final double[] sceneCorner0=mCandidateSceneCorners.get(0,0);
  final double[] sceneCorner1=mCandidateSceneCorners.get(1,0);
  final double[] sceneCorner2=mCandidateSceneCorners.get(2,0);
  final double[] sceneCorner3=mCandidateSceneCorners.get(3,0);
  mSceneCorners2D.fromArray(new Point(sceneCorner0[0],sceneCorner0[1]),new Point(sceneCorner1[0],sceneCorner1[1]),new Point(sceneCorner2[0],sceneCorner2[1]),new Point(sceneCorner3[0],sceneCorner3[1]));
  final MatOfDouble projection=mCameraProjectionAdapter.getmProjectionCV();
  Calib3d.solvePnP(mReferenceCorners3D,mSceneCorners2D,projection,mDistCoeffs,mRVec,mTVec);
  final double[] rVecArray=mRVec.toArray();
  rVecArray[0]*=-1.0;
  mRVec.fromArray(rVecArray);
  Calib3d.Rodrigues(mRVec,mRotation);
  final double[] tVecArray=mTVec.toArray();
  mGLPose[0]=(float)mRotation.get(0,0)[0];
  mGLPose[1]=(float)mRotation.get(0,1)[0];
  mGLPose[2]=(float)mRotation.get(0,2)[0];
  mGLPose[3]=0f;
  mGLPose[4]=(float)mRotation.get(1,0)[0];
  mGLPose[5]=(float)mRotation.get(1,1)[0];
  mGLPose[6]=(float)mRotation.get(1,2)[0];
  mGLPose[7]=0f;
  mGLPose[8]=(float)mRotation.get(2,0)[0];
  mGLPose[9]=(float)mRotation.get(2,1)[0];
  mGLPose[10]=(float)mRotation.get(2,2)[0];
  mGLPose[11]=0f;
  mGLPose[12]=(float)tVecArray[0];
  mGLPose[13]=-(float)tVecArray[1];
  mGLPose[14]=-(float)tVecArray[2];
  mGLPose[15]=1f;
  mTargetFound=true;
}","private void findPose(){
  final List<DMatch> matchesList=mMatches.toList();
  if (matchesList.size() < 4) {
    return;
  }
  final List<KeyPoint> referenceKeypointsList=mReferenceKeypoints.toList();
  final List<KeyPoint> sceneKeypointsList=mSceneKeypoints.toList();
  double maxDist=0.0;
  double minDist=Double.MAX_VALUE;
  for (  final DMatch match : matchesList) {
    final double dist=match.distance;
    if (dist < minDist) {
      minDist=dist;
    }
    if (dist > maxDist) {
      maxDist=dist;
    }
  }
  if (minDist > 50.0) {
    mTargetFound=false;
    return;
  }
 else   if (minDist > 25.0) {
    return;
  }
  final List<Point> goodReferencePointsList=new ArrayList<Point>();
  final ArrayList<Point> goodScenePointsList=new ArrayList<Point>();
  final double maxGoodMatchDist=1.75 * minDist;
  for (  final DMatch match : matchesList) {
    if (match.distance < maxGoodMatchDist) {
      goodReferencePointsList.add(referenceKeypointsList.get(match.trainIdx).pt);
      goodScenePointsList.add(sceneKeypointsList.get(match.queryIdx).pt);
    }
  }
  if (goodReferencePointsList.size() < 4 || goodScenePointsList.size() < 4) {
    return;
  }
  final MatOfPoint2f goodReferencePoints=new MatOfPoint2f();
  goodReferencePoints.fromList(goodReferencePointsList);
  final MatOfPoint2f goodScenePoints=new MatOfPoint2f();
  goodScenePoints.fromList(goodScenePointsList);
  final Mat homography=Calib3d.findHomography(goodReferencePoints,goodScenePoints);
  Core.perspectiveTransform(mReferenceCorners,mCandidateSceneCorners,homography);
  mCandidateSceneCorners.convertTo(mIntSceneCorners,CvType.CV_32S);
  if (!Imgproc.isContourConvex(mIntSceneCorners)) {
    return;
  }
  final double[] sceneCorner0=mCandidateSceneCorners.get(0,0);
  final double[] sceneCorner1=mCandidateSceneCorners.get(1,0);
  final double[] sceneCorner2=mCandidateSceneCorners.get(2,0);
  final double[] sceneCorner3=mCandidateSceneCorners.get(3,0);
  mSceneCorners2D.fromArray(new Point(sceneCorner0[0],sceneCorner0[1]),new Point(sceneCorner1[0],sceneCorner1[1]),new Point(sceneCorner2[0],sceneCorner2[1]),new Point(sceneCorner3[0],sceneCorner3[1]));
  final MatOfDouble projection=mCameraProjectionAdapter.getmProjectionCV();
  Calib3d.solvePnP(mReferenceCorners3D,mSceneCorners2D,projection,mDistCoeffs,mRVec,mTVec);
  final double[] rVecArray=mRVec.toArray();
  rVecArray[0]*=-1.0;
  mRVec.fromArray(rVecArray);
  Calib3d.Rodrigues(mRVec,mRotation);
  final double[] tVecArray=mTVec.toArray();
  mGLPose[0]=(float)mRotation.get(0,0)[0];
  mGLPose[1]=(float)mRotation.get(0,1)[0];
  mGLPose[2]=(float)mRotation.get(0,2)[0];
  mGLPose[3]=0f;
  mGLPose[4]=(float)mRotation.get(1,0)[0];
  mGLPose[5]=(float)mRotation.get(1,1)[0];
  mGLPose[6]=(float)mRotation.get(1,2)[0];
  mGLPose[7]=0f;
  mGLPose[8]=(float)mRotation.get(2,0)[0];
  mGLPose[9]=(float)mRotation.get(2,1)[0];
  mGLPose[10]=(float)mRotation.get(2,2)[0];
  mGLPose[11]=0f;
  mGLPose[12]=(float)tVecArray[0];
  mGLPose[13]=-(float)tVecArray[1];
  mGLPose[14]=-(float)tVecArray[2];
  mGLPose[15]=1f;
  mTargetFound=true;
}",0.9682279724860792
174886,"@Override public void onDrawFrame(GL10 gl10){
  gl10.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  if (filter == null) {
    return;
  }
  if (cameraProjectionAdapter == null) {
    return;
  }
  float[] pose=filter.getGLPose();
  if (pose == null) {
    return;
  }
  final int adjustedWidth=(int)(mSurfaceHeight * cameraProjectionAdapter.getAspectRatio());
  final int marginX=(mSurfaceWidth - adjustedWidth) / 2;
  gl10.glViewport(marginX,0,adjustedWidth,mSurfaceHeight);
  gl10.glMatrixMode(GL10.GL_PROJECTION);
  float[] projection=cameraProjectionAdapter.getProjectionGL();
  gl10.glLoadMatrixf(projection,0);
  gl10.glMatrixMode(GL10.GL_MODELVIEW);
  gl10.glLoadMatrixf(pose,0);
  gl10.glScalef(scale,scale,scale);
  gl10.glTranslatef(0f,0f,0.5f);
  gl10.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl10.glEnableClientState(GL10.GL_COLOR_ARRAY);
  gl10.glVertexPointer(3,GL11.GL_FLOAT,0,VERTICES);
  gl10.glColorPointer(4,GL11.GL_UNSIGNED_BYTE,0,COLORS);
  gl10.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl10.glEnableClientState(GL10.GL_COLOR_ARRAY);
  gl10.glDrawElements(GL10.GL_TRIANGLES,36,GL10.GL_UNSIGNED_BYTE,TRIANGLES);
  gl10.glDisableClientState(GL10.GL_VERTEX_ARRAY);
  gl10.glDisableClientState(GL10.GL_COLOR_ARRAY);
}","@Override public void onDrawFrame(GL10 gl10){
  gl10.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  if (filter == null) {
    return;
  }
  if (cameraProjectionAdapter == null) {
    return;
  }
  float[] pose=filter.getGLPose();
  if (pose == null) {
    return;
  }
  final int adjustedWidth=(int)(mSurfaceHeight * cameraProjectionAdapter.getAspectRatio());
  final int marginX=(mSurfaceWidth - adjustedWidth) / 2;
  gl10.glViewport(marginX,0,adjustedWidth,mSurfaceHeight);
  gl10.glMatrixMode(GL10.GL_PROJECTION);
  float[] projection=cameraProjectionAdapter.getProjectionGL();
  gl10.glLoadMatrixf(projection,0);
  gl10.glMatrixMode(GL10.GL_MODELVIEW);
  gl10.glLoadMatrixf(pose,0);
  gl10.glScalef(scale,scale,scale);
  gl10.glTranslatef(0f,0f,0.5f);
  gl10.glVertexPointer(3,GL11.GL_FLOAT,0,VERTICES);
  gl10.glColorPointer(4,GL11.GL_UNSIGNED_BYTE,0,COLORS);
  gl10.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl10.glEnableClientState(GL10.GL_COLOR_ARRAY);
  gl10.glDrawElements(GL10.GL_TRIANGLES,36,GL10.GL_UNSIGNED_BYTE,TRIANGLES);
  gl10.glDisableClientState(GL10.GL_VERTEX_ARRAY);
  gl10.glDisableClientState(GL10.GL_COLOR_ARRAY);
}",0.9590739975196362
174887,"@Override public void onSurfaceCreated(GL10 gl10,EGLConfig eglConfig){
  gl10.glClearColor(0f,0f,0f,0f);
  gl10.glEnable(GL10.GL_CULL_FACE);
}","@Override public void onSurfaceCreated(final GL10 gl10,final EGLConfig eglConfig){
  gl10.glClearColor(0f,0f,0f,0f);
  gl10.glEnable(GL10.GL_CULL_FACE);
}",0.9594594594594594
174888,"public MatOfDouble getmProjectionCV(){
  if (mProjectionDirtyGL) {
    if (mProjectionCV == null) {
      mProjectionCV=new MatOfDouble();
      mProjectionCV.create(3,3,CvType.CV_64FC1);
    }
    final float fovAspectRatio=mFOVX / mFOVY;
    double diagonalPx=Math.sqrt((Math.pow(mWidthPx,2.0) + Math.pow(mWidthPx / fovAspectRatio,2.0)));
    double diagonalFOV=Math.sqrt((Math.pow(mFOVX,2.0) + Math.pow(mFOVY,2.0)));
    double focalLengthPx=diagonalPx / (2.0 * Math.tan(0.5 * diagonalFOV * Math.PI / 180f));
    mProjectionCV.put(0,0,focalLengthPx);
    mProjectionCV.put(0,1,0.0);
    mProjectionCV.put(0,2,0.5 * mWidthPx);
    mProjectionCV.put(1,0,0.0);
    mProjectionCV.put(1,1,focalLengthPx);
    mProjectionCV.put(1,2,0.5 * mHeightPx);
    mProjectionCV.put(2,0,0.0);
    mProjectionCV.put(2,1,0.0);
    mProjectionCV.put(2,2,1.0);
  }
  return mProjectionCV;
}","public MatOfDouble getmProjectionCV(){
  if (mProjectionDirtyCV) {
    if (mProjectionCV == null) {
      mProjectionCV=new MatOfDouble();
      mProjectionCV.create(3,3,CvType.CV_64FC1);
    }
    final float fovAspectRatio=mFOVX / mFOVY;
    final double diagonalPx=Math.sqrt((Math.pow(mWidthPx,2.0) + Math.pow(mWidthPx / fovAspectRatio,2.0)));
    final double focalLengthPx=0.5 * diagonalPx / Math.sqrt(Math.pow(Math.tan(0.5 * mFOVX * Math.PI / 180f),2.0) + Math.pow(Math.tan(0.5 * mFOVY * Math.PI / 180f),2.0));
    mProjectionCV.put(0,0,focalLengthPx);
    mProjectionCV.put(0,1,0.0);
    mProjectionCV.put(0,2,0.5 * mWidthPx);
    mProjectionCV.put(1,0,0.0);
    mProjectionCV.put(1,1,focalLengthPx);
    mProjectionCV.put(1,2,0.5 * mHeightPx);
    mProjectionCV.put(2,0,0.0);
    mProjectionCV.put(2,1,0.0);
    mProjectionCV.put(2,2,1.0);
  }
  return mProjectionCV;
}",0.5946255002858777
174889,"protected void draw(Mat src,Mat dst){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (dst != src) {
    src.copyTo(dst);
  }
  if (!mTargetFound) {
    int height=mReferenceImage.height();
    int width=mReferenceImage.width();
    final int maxDimension=Math.min(dst.width(),dst.height()) / 2;
    final double aspectRatio=width / (double)height;
    if (height > width) {
      height=maxDimension;
      width=(int)(height * aspectRatio);
    }
 else {
      width=maxDimension;
      height=(int)(width / aspectRatio);
    }
    final Mat dstROI=dst.submat(0,height,0,width);
    Imgproc.resize(mReferenceImage,dstROI,dstROI.size(),0.0,0.0,Imgproc.INTER_AREA);
    return;
  }
}","protected void draw(Mat src,Mat dst){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (dst != src) {
    src.copyTo(dst);
  }
  if (!mTargetFound) {
    int height=mReferenceImage.height();
    int width=mReferenceImage.width();
    final int maxDimension=Math.min(dst.width(),dst.height()) / 2;
    final double aspectRatio=width / (double)height;
    if (height > width) {
      height=maxDimension;
      width=(int)(height * aspectRatio);
    }
 else {
      width=maxDimension;
      height=(int)(width / aspectRatio);
    }
    final Mat dstROI=dst.submat(0,height,0,width);
    Imgproc.resize(mReferenceImage,dstROI,dstROI.size(),0.0,0.0,Imgproc.INTER_AREA);
  }
}",0.9911764705882352
174890,"@Override public synchronized void record(final Histogram histogram){
  long maxRecordedValue=histogram.getMaxValue();
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",maxRecordedValue,getMaxValue());
  }
  if (maxRecordedValue > getMaxValue()) {
    logger.warn(""String_Node_Str"",maxRecordedValue,getMaxValue());
    setConditionStatus(false);
  }
}","@Override public synchronized void record(final Histogram histogram){
  long maxRecordedValue=histogram.getMaxValue();
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",maxRecordedValue,getMaxValue());
  }
  if (maxRecordedValue > getMaxValue()) {
    logger.warn(""String_Node_Str"",maxRecordedValue,getMaxValue());
    setEvalFailed();
  }
}",0.956043956043956
174891,"/** 
 * Constructor
 * @param maxValue maximum value allowed
 */
public LatencyEvaluator(double maxValue){
  this.maxValue=maxValue;
}","/** 
 * Constructor
 * @param maxValue maximum value allowed
 */
protected LatencyEvaluator(double maxValue){
  this.maxValue=maxValue;
}",0.959409594095941
174892,"@Override public synchronized void record(final Histogram histogram){
  long maxRecordedValue=histogram.getValueAtPercentile(this.defaultPercentile);
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",maxRecordedValue,getMaxValue());
  }
  if (maxRecordedValue > getMaxValue()) {
    logger.warn(""String_Node_Str"",maxRecordedValue,getMaxValue());
    setConditionStatus(false);
  }
}","@Override public synchronized void record(final Histogram histogram){
  long maxRecordedValue=histogram.getValueAtPercentile(this.defaultPercentile);
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",maxRecordedValue,getMaxValue());
  }
  if (maxRecordedValue > getMaxValue()) {
    logger.warn(""String_Node_Str"",maxRecordedValue,getMaxValue());
    setEvalFailed();
  }
}",0.959493670886076
174893,"MessageInfo receiveMessages() throws JMSException {
  TextMessage message=(TextMessage)consumer.receive();
  if (message == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  MessageInfo ret=new MessageInfo();
  long ctime=message.getLongProperty(""String_Node_Str"");
  ret.setCreationTime(Instant.ofEpochMilli(ctime));
  return ret;
}","/** 
 * Returns the epoch millis.
 */
public long receiveMessages() throws JMSException {
  final Message message=consumer.receive();
  if (message == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  final long sendTime=message.getLongProperty(""String_Node_Str"");
  return sendTime;
}",0.6851851851851852
174894,"public void start(){
  startedEpochMillis=System.currentTimeMillis();
  logger.info(""String_Node_Str"");
  try {
    JMSReceiverClient client=new JMSReceiverClient();
    client.setUrl(url);
    workerStateInfo.setState(true,null,null);
    client.start();
    long count=0;
    while (duration.canContinue(this) && isRunning()) {
      final MessageInfo info=client.receiveMessages();
      final long now=System.currentTimeMillis();
      final long creationTime=info.getCreationTime().toEpochMilli();
      final long elapsedMillis=now - creationTime;
      latencyRecorder.recordValue(elapsedMillis);
      workerChannel.emitRate(creationTime,now);
      count++;
      messageCount.lazySet(count);
    }
    logger.info(""String_Node_Str"");
    workerStateInfo.setState(false,WorkerStateInfo.WorkerExitStatus.WORKER_EXIT_SUCCESS,null);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e.getMessage(),e);
    workerStateInfo.setState(false,WorkerStateInfo.WorkerExitStatus.WORKER_EXIT_FAILURE,e);
  }
}","public void start(){
  startedEpochMillis=System.currentTimeMillis();
  logger.info(""String_Node_Str"");
  try {
    JMSReceiverClient client=new JMSReceiverClient();
    client.setUrl(url);
    workerStateInfo.setState(true,null,null);
    client.start();
    long count=0;
    while (duration.canContinue(this) && isRunning()) {
      final long sendTimeEpochMillis=client.receiveMessages();
      final long now=System.currentTimeMillis();
      final long elapsedMillis=now - sendTimeEpochMillis;
      latencyRecorder.recordValue(elapsedMillis);
      workerChannel.emitRate(sendTimeEpochMillis,now);
      count++;
      messageCount.lazySet(count);
    }
    logger.info(""String_Node_Str"");
    workerStateInfo.setState(false,WorkerStateInfo.WorkerExitStatus.WORKER_EXIT_SUCCESS,null);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e.getMessage(),e);
    workerStateInfo.setState(false,WorkerStateInfo.WorkerExitStatus.WORKER_EXIT_FAILURE,e);
  }
}",0.91210447011552
174895,"void sendMessages() throws JMSException {
  TextMessage message=session.createTextMessage();
  String content=contentStrategy.getContent();
  long stime=System.currentTimeMillis();
  logger.trace(""String_Node_Str"",stime,content);
  message.setText(content);
  message.setLongProperty(""String_Node_Str"",stime);
  producer.send(message);
}","public void sendMessages() throws JMSException {
  TextMessage message=session.createTextMessage();
  final String content=contentStrategy.getContent();
  final long now=System.currentTimeMillis();
  message.setText(content);
  message.setLongProperty(""String_Node_Str"",now);
  producer.send(message);
}",0.678125
174896,"@Test public void testApply_Basic(){
  int numGames=3;
  int numCards=12;
  int maxCard=numCards;
  Strategy strategy=new NextCard();
  List<Player> players=new ArrayList<>();
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  players.add(p1);
  players.add(p2);
  players.add(p3);
  List<Player> newPlayers=new Tourney(numCards,numGames,false).apply(players);
  assertEquals(3,newPlayers.size());
  assertEquals(0,newPlayers.get(0).getNumCardsInHand());
  assertEquals(0,newPlayers.get(1).getNumCardsInHand());
  assertEquals(0,newPlayers.get(2).getNumCardsInHand());
  assertEquals(3,newPlayers.stream().map(p -> p.getPlayerStats().getNumGamesWon()).mapToInt(i -> i).sum());
}","@Test public void testApply_Basic(){
  int numGames=3;
  int numCards=12;
  int maxCard=numCards;
  Strategy strategy=Strategies.getNextCardStrategy();
  List<Player> players=new ArrayList<>();
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  players.add(p1);
  players.add(p2);
  players.add(p3);
  List<Player> newPlayers=new Tourney(numCards,numGames,false).apply(players);
  assertEquals(3,newPlayers.size());
  assertEquals(0,newPlayers.get(0).getNumCardsInHand());
  assertEquals(0,newPlayers.get(1).getNumCardsInHand());
  assertEquals(0,newPlayers.get(2).getNumCardsInHand());
  assertEquals(3,newPlayers.stream().map(p -> p.getPlayerStats().getNumGamesWon()).mapToInt(i -> i).sum());
}",0.9847238542890716
174897,"@Test public void testApply_Basic(){
  int numCards=12;
  int maxCard=numCards;
  Strategy strategy=new NextCard();
  List<Player> players=new ArrayList<>();
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  players.add(p1);
  players.add(p2);
  players.add(p3);
  List<Player> newPlayers=new Game(numCards,false).apply(players);
  assertEquals(3,newPlayers.size());
  assertEquals(0,newPlayers.get(0).getNumCardsInHand());
  assertEquals(0,newPlayers.get(1).getNumCardsInHand());
  assertEquals(0,newPlayers.get(2).getNumCardsInHand());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getNumGamesWon() == 1).count());
  assertEquals(2,newPlayers.stream().filter(p -> p.getPlayerStats().getNumGamesWon() == 0).count());
  int maxTotal=maxCard + (maxCard - 1) + (maxCard - 2);
  assertEquals(3,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() <= maxTotal).count());
  assertEquals(3,newPlayers.stream().map(p -> p.getPlayerStats().getNumRoundsWon()).mapToInt(i -> i).sum());
}","@Test public void testApply_Basic(){
  int numCards=12;
  int maxCard=numCards;
  List<Player> players=new ArrayList<>();
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  players.add(p1);
  players.add(p2);
  players.add(p3);
  List<Player> newPlayers=new Game(numCards,false).apply(players);
  assertEquals(3,newPlayers.size());
  assertEquals(0,newPlayers.get(0).getNumCardsInHand());
  assertEquals(0,newPlayers.get(1).getNumCardsInHand());
  assertEquals(0,newPlayers.get(2).getNumCardsInHand());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getNumGamesWon() == 1).count());
  assertEquals(2,newPlayers.stream().filter(p -> p.getPlayerStats().getNumGamesWon() == 0).count());
  int maxTotal=maxCard + (maxCard - 1) + (maxCard - 2);
  assertEquals(3,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() <= maxTotal).count());
  assertEquals(3,newPlayers.stream().map(p -> p.getPlayerStats().getNumRoundsWon()).mapToInt(i -> i).sum());
}",0.9844155844155844
174898,"@Test public void testPlay_Basic(){
  int numCards=12;
  int maxCard=numCards;
  Strategy strategy=new NextCard();
  List<Player> players=new ArrayList<>();
  Hand h1=new Hand(Arrays.asList(new Integer[]{1,5,9}));
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,h1);
  Hand h2=new Hand(Arrays.asList(new Integer[]{4,8,6}));
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,h2);
  Hand h3=new Hand(Arrays.asList(new Integer[]{7,2,3}));
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,h3);
  players.add(p1);
  players.add(p2);
  players.add(p3);
  Hand kitty=new Hand(Arrays.asList(new Integer[]{10,11,12}));
  List<Player> newPlayers=new Game(numCards,false).play(kitty,players.stream()).collect(toList());
  assertEquals(3,newPlayers.size());
  assertEquals(0,newPlayers.get(0).getNumCardsInHand());
  assertEquals(0,newPlayers.get(1).getNumCardsInHand());
  assertEquals(0,newPlayers.get(2).getNumCardsInHand());
  assertEquals(3,newPlayers.stream().filter(p -> p.getPlayerStats().getNumRoundsWon() == 1).count());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 10).count());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 11).count());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 12).count());
}","@Test public void testPlay_Basic(){
  int numCards=12;
  int maxCard=numCards;
  List<Player> players=new ArrayList<>();
  Hand h1=new Hand(Arrays.asList(new Integer[]{1,5,9}));
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,h1);
  Hand h2=new Hand(Arrays.asList(new Integer[]{4,8,6}));
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,h2);
  Hand h3=new Hand(Arrays.asList(new Integer[]{7,2,3}));
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,h3);
  players.add(p1);
  players.add(p2);
  players.add(p3);
  Hand kitty=new Hand(Arrays.asList(new Integer[]{10,11,12}));
  List<Player> newPlayers=new Game(numCards,false).play(kitty,players.stream()).collect(toList());
  assertEquals(3,newPlayers.size());
  assertEquals(0,newPlayers.get(0).getNumCardsInHand());
  assertEquals(0,newPlayers.get(1).getNumCardsInHand());
  assertEquals(0,newPlayers.get(2).getNumCardsInHand());
  assertEquals(3,newPlayers.stream().filter(p -> p.getPlayerStats().getNumRoundsWon() == 1).count());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 10).count());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 11).count());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 12).count());
}",0.9863325740318908
174899,"@Test public void testApply_Basic(){
  int numCards=12;
  int maxCard=numCards;
  Strategy strategy=new MaxCard();
  List<Player> players=new ArrayList<>();
  Hand h1=new Hand(Arrays.asList(new Integer[]{1,2,3}));
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,h1);
  Hand h2=new Hand(Arrays.asList(new Integer[]{4,5,6}));
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,h2);
  Hand h3=new Hand(Arrays.asList(new Integer[]{7,8,9}));
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,h3);
  players.add(p1);
  players.add(p2);
  players.add(p3);
  int prizeCard=10;
  List<Player> newPlayers=new Round(prizeCard).apply(players.stream()).collect(toList());
  assertEquals(3,newPlayers.size());
  assertEquals(2,newPlayers.get(0).getNumCardsInHand());
  assertEquals(2,newPlayers.get(1).getNumCardsInHand());
  assertEquals(2,newPlayers.get(2).getNumCardsInHand());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getNumRoundsWon() == 1).count());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 10).count());
  assertEquals(2,newPlayers.stream().filter(p -> p.getPlayerStats().getNumRoundsWon() == 0).count());
  assertEquals(2,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 0).count());
}","@Test public void testApply_Basic(){
  int numCards=12;
  int maxCard=numCards;
  List<Player> players=new ArrayList<>();
  Hand h1=new Hand(Arrays.asList(new Integer[]{1,2,3}));
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,h1);
  Hand h2=new Hand(Arrays.asList(new Integer[]{4,5,6}));
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,h2);
  Hand h3=new Hand(Arrays.asList(new Integer[]{7,8,9}));
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,h3);
  players.add(p1);
  players.add(p2);
  players.add(p3);
  int prizeCard=10;
  List<Player> newPlayers=new Round(prizeCard).apply(players.stream()).collect(toList());
  assertEquals(3,newPlayers.size());
  assertEquals(2,newPlayers.get(0).getNumCardsInHand());
  assertEquals(2,newPlayers.get(1).getNumCardsInHand());
  assertEquals(2,newPlayers.get(2).getNumCardsInHand());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getNumRoundsWon() == 1).count());
  assertEquals(1,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 10).count());
  assertEquals(2,newPlayers.stream().filter(p -> p.getPlayerStats().getNumRoundsWon() == 0).count());
  assertEquals(2,newPlayers.stream().filter(p -> p.getPlayerStats().getTotal() == 0).count());
}",0.9862258953168044
174900,"@Test public void testGetAllBids_Basic(){
  Round round=new Round();
  int numCards=12;
  int maxCard=numCards;
  Strategy strategy=new MaxCard();
  List<Player> players=new ArrayList<>();
  Hand h1=new Hand(Arrays.asList(new Integer[]{1,2,3}));
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,h1);
  Hand h2=new Hand(Arrays.asList(new Integer[]{4,5,6}));
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,h2);
  Hand h3=new Hand(Arrays.asList(new Integer[]{7,8,9}));
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,h3);
  players.add(p1);
  players.add(p2);
  players.add(p3);
  List<Bid> result=round.getAllBids(players.stream(),10);
  assertEquals(3,result.size());
}","@Test public void testGetAllBids_Basic(){
  Round round=new Round();
  int numCards=12;
  int maxCard=numCards;
  List<Player> players=new ArrayList<>();
  Hand h1=new Hand(Arrays.asList(new Integer[]{1,2,3}));
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,h1);
  Hand h2=new Hand(Arrays.asList(new Integer[]{4,5,6}));
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,h2);
  Hand h3=new Hand(Arrays.asList(new Integer[]{7,8,9}));
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,h3);
  players.add(p1);
  players.add(p2);
  players.add(p3);
  List<Bid> result=round.getAllBids(players.stream(),10);
  assertEquals(3,result.size());
}",0.9742836149889786
174901,"@Test public void testFindWinningBid_Basic(){
  Round round=new Round();
  int maxCard=50;
  Strategy strategy=new MaxCard();
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  int prizeCard=20;
  List<Bid> bids=new ArrayList<>();
  bids.add(new Bid(prizeCard,10,p1));
  bids.add(new Bid(prizeCard,12,p2));
  bids.add(new Bid(prizeCard,14,p3));
  Bid result=round.findWinningBid(bids);
  assertEquals(""String_Node_Str"",result.getBidder().getName());
}","@Test public void testFindWinningBid_Basic(){
  Round round=new Round();
  int maxCard=50;
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,new Hand());
  int prizeCard=20;
  List<Bid> bids=new ArrayList<>();
  bids.add(new Bid(prizeCard,10,p1));
  bids.add(new Bid(prizeCard,12,p2));
  bids.add(new Bid(prizeCard,14,p3));
  Bid result=round.findWinningBid(bids);
  assertEquals(""String_Node_Str"",result.getBidder().getName());
}",0.9707112970711296
174902,"@Test public void testDeal_Table_Basic(){
  Dealer dealer=new Dealer();
  int numCards=12;
  int maxCard=numCards;
  Strategy strategy=new MaxCard();
  List<Player> players=new ArrayList<>();
  Hand h1=new Hand(Arrays.asList(new Integer[]{1,2,3}));
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,h1);
  Hand h2=new Hand(Arrays.asList(new Integer[]{4,5,6}));
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,h2);
  Hand h3=new Hand(Arrays.asList(new Integer[]{7,8,9}));
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,h3);
  players.add(p1);
  players.add(p2);
  players.add(p3);
  Table table=dealer.deal(20,players);
  assertEquals(5,table.getKitty().cardsAsIntStream().count());
  assertEquals(5,table.getPlayers().get(0).getNumCardsInHand());
  assertEquals(5,table.getPlayers().get(1).getNumCardsInHand());
  assertEquals(5,table.getPlayers().get(2).getNumCardsInHand());
}","@Test public void testDeal_Table_Basic(){
  Dealer dealer=new Dealer();
  int numCards=12;
  int maxCard=numCards;
  List<Player> players=new ArrayList<>();
  Hand h1=new Hand(Arrays.asList(new Integer[]{1,2,3}));
  Player p1=new Player(""String_Node_Str"",strategy,maxCard,h1);
  Hand h2=new Hand(Arrays.asList(new Integer[]{4,5,6}));
  Player p2=new Player(""String_Node_Str"",strategy,maxCard,h2);
  Hand h3=new Hand(Arrays.asList(new Integer[]{7,8,9}));
  Player p3=new Player(""String_Node_Str"",strategy,maxCard,h3);
  players.add(p1);
  players.add(p2);
  players.add(p3);
  Table table=dealer.deal(20,players);
  assertEquals(5,table.getKitty().cardsAsIntStream().count());
  assertEquals(5,table.getPlayers().get(0).getNumCardsInHand());
  assertEquals(5,table.getPlayers().get(1).getNumCardsInHand());
  assertEquals(5,table.getPlayers().get(2).getNumCardsInHand());
}",0.9803260258572232
174903,"private Optional<String> determineCollectionFromId(final Optional<String> id){
  return id.map(i -> {
    final String[] split=i.split(""String_Node_Str"");
    return split.length == 2 ? split[0] : null;
  }
);
}","private Optional<String> determineCollectionFromId(final Optional<String> id){
  return id.map(i -> MetadataUtils.determineCollectionFromId(i));
}",0.6218487394957983
174904,"/** 
 * Test method for   {@link com.arangodb.springframework.core.util.MetadataUtils#determineDocumentKeyFromId(java.lang.String)}.
 */
@Test public void testDetermineDocumentKeyFromId(){
  String key=MetadataUtils.determineDocumentKeyFromId(COLLECTION_NAME + '/' + NUMERIC_ID);
  assertThat(key,is(NUMERIC_ID));
}","/** 
 * Test method for   {@link com.arangodb.springframework.core.util.MetadataUtils#determineDocumentKeyFromId(java.lang.String)}.
 */
@Test public void testDetermineDocumentKeyFromId(){
  String key=MetadataUtils.determineDocumentKeyFromId(COLLECTION_NAME + MetadataUtils.KEY_DELIMITER + KEY);
  assertThat(key,is(KEY));
}",0.9125
174905,"@Override public Object resolve(final String id,final Class<?> type,final Relations annotation){
  return template.query(""String_Node_Str"" + Math.max(1,annotation.minDepth()) + ""String_Node_Str""+ Math.max(1,annotation.maxDepth())+ ""String_Node_Str""+ annotation.direction()+ ""String_Node_Str"",new MapBuilder().put(""String_Node_Str"",id).put(""String_Node_Str"",Arrays.asList(annotation.edges()).stream().map((e) -> template.collection(e).name()).reduce((a,b) -> a + ""String_Node_Str"" + b).get()).put(""String_Node_Str"",type).get(),new AqlQueryOptions(),type).asListRemaining();
}","@Override public Object resolve(final String id,final Class<?> type,final Relations annotation){
  final ArangoCursor<?> result=template.query(""String_Node_Str"" + Math.max(1,annotation.minDepth()) + ""String_Node_Str""+ Math.max(1,annotation.maxDepth())+ ""String_Node_Str""+ annotation.direction()+ ""String_Node_Str"",new MapBuilder().put(""String_Node_Str"",id).put(""String_Node_Str"",Arrays.asList(annotation.edges()).stream().map((e) -> template.collection(e).name()).reduce((a,b) -> a + ""String_Node_Str"" + b).get()).put(""String_Node_Str"",type).get(),new AqlQueryOptions(),type);
  return result.hasNext() ? result.next() : null;
}",0.913477537437604
174906,"@Override public Object resolveMultiple(final String id,final Class<?> type,final Relations annotation){
  return annotation.lazy() ? proxy(id,Collection.class,annotation,(i,t,a) -> resolve(i,type,a)) : resolve(id,type,annotation);
}","@Override public Object resolveMultiple(final String id,final Class<?> type,final Relations annotation){
  return annotation.lazy() ? proxy(id,type,annotation,(i,t,a) -> resolve(i,type,a)) : resolve(id,type,annotation);
}",0.9559471365638766
174907,"private Object convertResult(final ArangoCursor<?> result,final ArangoParameterAccessor accessor){
  if (isExistsQuery()) {
    if (!result.hasNext()) {
      return false;
    }
    return (int)result.next() > 0;
  }
  final ArangoResultConverter resultConverter=new ArangoResultConverter(accessor,result,operations,domainClass);
  return resultConverter.convertResult(method.getReturnType().getType());
}","private Object convertResult(final ArangoCursor<?> result,final ArangoParameterAccessor accessor){
  if (isExistsQuery()) {
    if (!result.hasNext()) {
      return false;
    }
    return (int)(Integer)result.next() > 0;
  }
  final ArangoResultConverter resultConverter=new ArangoResultConverter(accessor,result,operations,domainClass);
  return resultConverter.convertResult(method.getReturnType().getType());
}",0.9890377588306942
174908,"public ArangoRepositoryFactoryBean(final Class<? extends T> repositoryInterface,final ArangoOperations arangoOperations){
  super(repositoryInterface);
  this.arangoOperations=arangoOperations;
}","@Autowired public ArangoRepositoryFactoryBean(final Class<? extends T> repositoryInterface){
  super(repositoryInterface);
}",0.7084639498432602
174909,void dropDatabase();,void dropDatabase() throws DataAccessException ;,0.5882352941176471
174910,"<T>T getDocument(final String id,final Class<T> type) throws DataAccessException ;","<T>T getDocument(String id,Class<T> type) throws DataAccessException ;",0.9210526315789472
174911,"<T>ArangoCursor<T> query(final String query,final Map<String,Object> bindVars,final AqlQueryOptions options,final Class<T> type) throws DataAccessException ;","<T>ArangoCursor<T> query(String query,Map<String,Object> bindVars,AqlQueryOptions options,Class<T> type) throws DataAccessException ;",0.9172413793103448
174912,"<T>Iterable<T> getDocuments(final Class<T> type,Iterable<String> strings);","<T>Iterable<T> getDocuments(Class<T> type,Iterable<String> strings) throws DataAccessException ;",0.8
174913,long count(final Class<?> type);,long count(Class<?> type);,0.896551724137931
174914,<T>DocumentCreateEntity<T> insertDocument(final T value) throws DataAccessException ;,<T>DocumentCreateEntity<T> insertDocument(T value) throws DataAccessException ;,0.9634146341463414
174915,void deleteDocuments(final Class<?> type);,void deleteDocuments(Class<?> type);,0.9230769230769232
174916,"<T>DocumentUpdateEntity<T> replaceDocument(final String id,final T value) throws DataAccessException ;","<T>DocumentUpdateEntity<T> replaceDocument(String id,T value) throws DataAccessException ;",0.9375
174917,"MultiDocumentEntity<DocumentCreateEntity<Object>> insertDocuments(final Collection<Object> values,Class<?> type) throws DataAccessException ;","MultiDocumentEntity<DocumentCreateEntity<Object>> insertDocuments(Collection<Object> values,Class<?> type) throws DataAccessException ;",0.9782608695652174
174918,void dropCollection(Class<?> type);,"/** 
 * @deprecated use {@link CollectionOperations#drop()} instead
 * @param type
 */
@Deprecated void dropCollection(Class<?> type) throws DataAccessException ;",0.3553299492385787
174919,"MultiDocumentEntity<DocumentUpdateEntity<Object>> updateDocuments(final Collection<Object> values,Class<?> type) throws DataAccessException ;","MultiDocumentEntity<DocumentUpdateEntity<Object>> updateDocuments(Collection<Object> values,Class<?> type) throws DataAccessException ;",0.9782608695652174
174920,"<T>DocumentDeleteEntity<Void> deleteDocument(final String id,Class<T> type) throws DataAccessException ;","<T>DocumentDeleteEntity<Void> deleteDocument(String id,Class<T> type) throws DataAccessException ;",0.9702970297029704
174921,"boolean exists(final String s,final Class<?> type);","boolean exists(String s,Class<?> type);",0.8666666666666667
174922,"MultiDocumentEntity<DocumentUpdateEntity<Object>> replaceDocuments(final Collection<Object> values,Class<?> type) throws DataAccessException ;","MultiDocumentEntity<DocumentUpdateEntity<Object>> replaceDocuments(Collection<Object> values,Class<?> type) throws DataAccessException ;",0.9784172661870504
174923,"<T>DocumentUpdateEntity<T> updateDocument(final String id,final T value) throws DataAccessException ;","<T>DocumentUpdateEntity<T> updateDocument(String id,T value) throws DataAccessException ;",0.936842105263158
174924,"protected void generateJsonMapper(TableDefinition table,JavaWriter out){
  out.tab(1).println(""String_Node_Str"");
  out.tab(1).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(2).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(1).println(""String_Node_Str"");
  out.println();
}","protected void generateJsonMapper(TableDefinition table,JavaWriter out){
  out.tab(1).println(""String_Node_Str"");
  out.tab(1).println(""String_Node_Str"",JsonObject.class.getName(),getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(2).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(1).println(""String_Node_Str"");
  out.println();
}",0.966952264381885
174925,"protected void generateJsonMapper(TableDefinition table,JavaWriter out){
  out.tab(1).println(""String_Node_Str"");
  out.tab(1).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(2).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(1).println(""String_Node_Str"");
  out.println();
}","protected void generateJsonMapper(TableDefinition table,JavaWriter out){
  out.tab(1).println(""String_Node_Str"");
  out.tab(1).println(""String_Node_Str"",JsonObject.class.getName(),getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(2).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(1).println(""String_Node_Str"");
  out.println();
}",0.966952264381885
174926,"protected void generateJsonMapper(TableDefinition table,JavaWriter out){
  out.tab(1).println(""String_Node_Str"");
  out.tab(1).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(2).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(1).println(""String_Node_Str"");
  out.println();
}","protected void generateJsonMapper(TableDefinition table,JavaWriter out){
  out.tab(1).println(""String_Node_Str"");
  out.tab(1).println(""String_Node_Str"",JsonObject.class.getName(),getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(2).println(""String_Node_Str"",getStrategy().getFullJavaClassName(table,GeneratorStrategy.Mode.POJO));
  out.tab(1).println(""String_Node_Str"");
  out.println();
}",0.966952264381885
174927,"private final List<Table<?>> getTables0(){
  return Arrays.<Table<?>>asList(Something.SOMETHING,Somethingcomposite.SOMETHINGCOMPOSITE);
}","private final List<Table<?>> getTables0(){
  return Arrays.<Table<?>>asList(Something.SOMETHING,Somethingcomposite.SOMETHINGCOMPOSITE,Somethingwithoutjson.SOMETHINGWITHOUTJSON);
}",0.8670886075949367
174928,"@Override public java.util.function.Function<JsonObject,generated.classic.async.vertx.tables.pojos.Something> jsonMapper(){
  return generated.classic.async.vertx.tables.pojos.Something::new;
}","@Override public java.util.function.Function<io.vertx.core.json.JsonObject,generated.classic.async.vertx.tables.pojos.Something> jsonMapper(){
  return generated.classic.async.vertx.tables.pojos.Something::new;
}",0.9530864197530864
174929,"@Override public java.util.function.Function<JsonObject,generated.classic.async.vertx.tables.pojos.Somethingcomposite> jsonMapper(){
  return generated.classic.async.vertx.tables.pojos.Somethingcomposite::new;
}","@Override public java.util.function.Function<io.vertx.core.json.JsonObject,generated.classic.async.vertx.tables.pojos.Somethingcomposite> jsonMapper(){
  return generated.classic.async.vertx.tables.pojos.Somethingcomposite::new;
}",0.9569160997732428
174930,"/** 
 * Exec the analysis process
 */
public Results call(){
  final Thread currentThread=Thread.currentThread();
  final String oldName=currentThread.getName();
  currentThread.setName(""String_Node_Str"" + gir.getImId());
  try {
    List<ComplexEditVDSVectorLayer> resultLayers=new ArrayList<>();
    String coastMaskName=analysis.getCoastMask() != null ? analysis.getCoastMask().getFileName() : ""String_Node_Str"";
    String iceMaskName=analysis.getIceMask() != null ? analysis.getIceMask().getFileName() : ""String_Node_Str"";
    notifyStartProcessListener(""String_Node_Str"" + coastMaskName + ""String_Node_Str""+ iceMaskName);
    SarImageReader reader=((SarImageReader)gir);
    String[] thresholdsString=StringUtils.join(analysis.getThresholdsParams(),""String_Node_Str"").split(""String_Node_Str"");
    BlackBorderAnalysis blackBorderAnalysis=runBBAnalysis();
    analysis.setBlackBorderAnalysis(blackBorderAnalysis);
    int numberofbands=gir.getNBand();
    int[] bands=new int[numberofbands];
    int noiseFloor=SumoPlatform.getApplication().getConfiguration().getNoiseFloor(0);
    int thresPixelMin=SumoPlatform.getApplication().getConfiguration().getThreshMinPixelValue(500);
    final KDistributionEstimation kdist=new KDistributionEstimation(ENL,noiseFloor,thresPixelMin);
    DetectedPixels mergePixels=new DetectedPixels(reader.getRangeSpacing(),reader.getAzimuthSpacing());
    DetectedPixels banddetectedpixels[]=new DetectedPixels[numberofbands];
    String timeStampStart=reader.getTimeStampStart();
    double azimuth=reader.getAzimuthSpacing();
    int xtileSize=analysis.getRealSizeX();
    int ytileSize=analysis.getRealSizeY();
    try {
      for (int band=0; band < numberofbands && !stop; band++) {
        notifyAnalysisBand(new StringBuilder().append(""String_Node_Str"").append(gir.getBandName(band)).toString());
        int vTiles=analysis.getVerTiles();
        notifyVDSAnalysis(""String_Node_Str"",vTiles);
        analysis.addProgressListener(this);
        banddetectedpixels[band]=analysis.analyse(kdist,band);
        if (numPointLimit != 0 && banddetectedpixels[band].getAllDetectedPixels().size() > numPointLimit) {
          logger.warn(""String_Node_Str"");
          return null;
        }
        if (mergePixels == null) {
          mergePixels=banddetectedpixels[band];
        }
 else {
          mergePixels.merge(banddetectedpixels[band]);
        }
        bands[band]=band;
        String polarization=reader.getBands()[band];
        if (numberofbands < 1 || displaybandanalysis) {
          notifyAgglomerating(new StringBuilder().append(""String_Node_Str"").append(polarization).toString());
          Boat[] boats=null;
          if (agglomerationMethodology.startsWith(""String_Node_Str"")) {
            banddetectedpixels[band].agglomerate();
            banddetectedpixels[band].computeBoatsAttributes(polarization);
          }
 else {
            if (stop)             break;
            boats=analysis.agglomerateNeighbours(banddetectedpixels[band],neighbouringDistance,neighbourTilesize,removelandconnectedpixels,(analysis.getCoastMask() != null) ? analysis.getCoastMask() : null,kdist,polarization,band);
          }
          String layerName=new StringBuilder(""String_Node_Str"").append(polarization).append(""String_Node_Str"").append(analysis.getThresholdParam(polarization)).toString();
          ComplexEditVDSVectorLayer vdsanalysisLayer=new ComplexEditVDSVectorLayer(LayerManager.getIstanceManager().getCurrentImageLayer(),layerName,""String_Node_Str"",new GeometryImage(""String_Node_Str"",""String_Node_Str"",timeStampStart,azimuth,boats),thresholdsString,ENL,buffer,bufferedMaskName,""String_Node_Str"" + band);
          vdsanalysisLayer.addDetectedPixels(banddetectedpixels[band].getAllDetectedPixels(),display);
          if (!agglomerationMethodology.startsWith(""String_Node_Str"")) {
            vdsanalysisLayer.addThreshAggPixels(banddetectedpixels[band].getThresholdaggregatePixels(),display);
            vdsanalysisLayer.addThresholdPixels(banddetectedpixels[band].getThresholdclipPixels(),display);
          }
          notifyCalcAzimuth(""String_Node_Str"");
          AzimuthAmbiguity azimuthAmbiguity=new AzimuthAmbiguity(boats,(SarImageReader)gir,band);
          azimuthAmbiguity.process();
          List<Geometry> az=azimuthAmbiguity.getAmbiguityboatgeometry();
          vdsanalysisLayer.addAzimuthAmbiguities(az,display);
          if (gir instanceof Sentinel1) {
            if (((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"") || ((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"")) {
              notifyCalcAzimuth(""String_Node_Str"");
              S1ArtefactsAmbiguity arAmbiguity=new S1ArtefactsAmbiguity(boats,(SarImageReader)gir,band);
              arAmbiguity.process();
              List<Geometry> artefactsA=arAmbiguity.getAmbiguityboatgeometry();
              vdsanalysisLayer.addArtefactsAmbiguities(artefactsA,display);
            }
          }
          if ((analysis.getCoastMask() != null)) {
            vdsanalysisLayer.addGeometries(""String_Node_Str"",Color.BLUE,1,GeometryImage.POLYGON,analysis.getCoastMask().getMaskGeometries(),true);
          }
          vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0xFF00FF),1,GeometryImage.LINESTRING,GeometryExtractor.getTiles(gir.getWidth(),gir.getHeight(),xtileSize,ytileSize),false);
          notifyLayerReady(vdsanalysisLayer);
          resultLayers.add(vdsanalysisLayer);
        }
      }
      if (stop) {
        return null;
      }
      if (bands.length > 1) {
        notifyAgglomerating(""String_Node_Str"");
        Boat[] boats=null;
        if (agglomerationMethodology.startsWith(""String_Node_Str"")) {
          mergePixels.agglomerate();
          mergePixels.computeBoatsAttributes(""String_Node_Str"");
        }
 else {
          boats=analysis.agglomerateNeighbours(mergePixels,neighbouringDistance,neighbourTilesize,removelandconnectedpixels,(analysis.getCoastMask() != null) ? analysis.getCoastMask() : null,kdist,""String_Node_Str"",bands);
        }
        if (stop) {
          return null;
        }
        ComplexEditVDSVectorLayer vdsanalysisLayer=new ComplexEditVDSVectorLayer(LayerManager.getIstanceManager().getCurrentImageLayer(),""String_Node_Str"",""String_Node_Str"",new GeometryImage(""String_Node_Str"",""String_Node_Str"",timeStampStart,azimuth,boats),thresholdsString,ENL,buffer,bufferedMaskName,""String_Node_Str"");
        boolean display=SumoPlatform.getApplication().getConfiguration().getDisplayPixel();
        if (!agglomerationMethodology.startsWith(""String_Node_Str"")) {
          vdsanalysisLayer.addThreshAggPixels(mergePixels.getThresholdaggregatePixels(),display);
          vdsanalysisLayer.addThresholdPixels(mergePixels.getThresholdclipPixels(),display);
        }
        vdsanalysisLayer.addDetectedPixels(mergePixels.getAllDetectedPixels(),display);
        if ((analysis.getCoastMask() != null)) {
          vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0x0000FF),1,GeometryImage.POLYGON,analysis.getCoastMask().getMaskGeometries(),true);
        }
        vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0xFF00FF),1,GeometryImage.LINESTRING,GeometryExtractor.getTiles(gir.getWidth(),gir.getHeight(),xtileSize,ytileSize),false);
        notifyCalcAzimuth(""String_Node_Str"");
        AzimuthAmbiguity azimuthAmbiguity=new AzimuthAmbiguity(boats,(SarImageReader)gir,bands);
        azimuthAmbiguity.process();
        List<Geometry> az=azimuthAmbiguity.getAmbiguityboatgeometry();
        vdsanalysisLayer.addAzimuthAmbiguities(az,display);
        if (gir instanceof Sentinel1) {
          if (((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"")) {
            notifyCalcAzimuth(""String_Node_Str"");
            S1ArtefactsAmbiguity arAmbiguity=new S1ArtefactsAmbiguity(boats,(SarImageReader)gir,bands);
            arAmbiguity.process();
            List<Geometry> artefactsA=arAmbiguity.getAmbiguityboatgeometry();
            vdsanalysisLayer.addArtefactsAmbiguities(artefactsA,display);
          }
        }
        notifyLayerReady(vdsanalysisLayer);
        resultLayers.add(vdsanalysisLayer);
      }
      notifyEndProcessListener();
    }
 catch (    Exception ee) {
      ee.printStackTrace();
    }
 finally {
      if (this.listeners != null)       removeAllProcessListener();
    }
    return new Results(reader,resultLayers);
  }
  finally {
    currentThread.setName(oldName);
  }
}","/** 
 * Exec the analysis process
 */
public Results call(){
  final Thread currentThread=Thread.currentThread();
  final String oldName=currentThread.getName();
  currentThread.setName(""String_Node_Str"" + gir.getImId());
  try {
    List<ComplexEditVDSVectorLayer> resultLayers=new ArrayList<>();
    String coastMaskName=analysis.getCoastMask() != null ? analysis.getCoastMask().getFileName() : ""String_Node_Str"";
    String iceMaskName=analysis.getIceMask() != null ? analysis.getIceMask().getFileName() : ""String_Node_Str"";
    notifyStartProcessListener(""String_Node_Str"" + coastMaskName + ""String_Node_Str""+ iceMaskName);
    SarImageReader reader=((SarImageReader)gir);
    String[] thresholdsString=StringUtils.join(analysis.getThresholdsParams(),""String_Node_Str"").split(""String_Node_Str"");
    BlackBorderAnalysis blackBorderAnalysis=runBBAnalysis();
    analysis.setBlackBorderAnalysis(blackBorderAnalysis);
    int numberofbands=gir.getNBand();
    int[] bands=new int[numberofbands];
    int noiseFloor=SumoPlatform.getApplication().getConfiguration().getNoiseFloor(0);
    int thresPixelMin=SumoPlatform.getApplication().getConfiguration().getThreshMinPixelValue(500);
    final KDistributionEstimation kdist=new KDistributionEstimation(ENL,noiseFloor,thresPixelMin);
    DetectedPixels mergePixels=new DetectedPixels(reader.getRangeSpacing(),reader.getAzimuthSpacing());
    DetectedPixels banddetectedpixels[]=new DetectedPixels[numberofbands];
    String timeStampStart=reader.getTimeStampStart();
    double azimuth=reader.getAzimuthSpacing();
    int xtileSize=analysis.getRealSizeX();
    int ytileSize=analysis.getRealSizeY();
    try {
      for (int band=0; band < numberofbands && !stop; band++) {
        notifyAnalysisBand(new StringBuilder().append(""String_Node_Str"").append(gir.getBandName(band)).toString());
        int vTiles=analysis.getVerTiles();
        notifyVDSAnalysis(""String_Node_Str"",vTiles);
        analysis.addProgressListener(this);
        banddetectedpixels[band]=analysis.analyse(kdist,band);
        if (numPointLimit != 0 && banddetectedpixels[band].getAllDetectedPixels().size() > numPointLimit) {
          logger.warn(""String_Node_Str"");
          return null;
        }
        if (mergePixels == null) {
          mergePixels=banddetectedpixels[band];
        }
 else {
          mergePixels.merge(banddetectedpixels[band]);
        }
        bands[band]=band;
        String polarization=reader.getBands()[band];
        if (numberofbands < 1 || displaybandanalysis) {
          notifyAgglomerating(new StringBuilder().append(""String_Node_Str"").append(polarization).toString());
          Boat[] boats=null;
          if (agglomerationMethodology.startsWith(""String_Node_Str"")) {
            banddetectedpixels[band].agglomerate();
            banddetectedpixels[band].computeBoatsAttributes(polarization);
          }
 else {
            if (stop)             break;
            boats=analysis.agglomerateNeighbours(banddetectedpixels[band],neighbouringDistance,neighbourTilesize,removelandconnectedpixels,(analysis.getCoastMask() != null) ? analysis.getCoastMask() : null,kdist,polarization,band);
          }
          String layerName=new StringBuilder(""String_Node_Str"").append(polarization).append(""String_Node_Str"").append(analysis.getThresholdParam(polarization)).toString();
          ComplexEditVDSVectorLayer vdsanalysisLayer=new ComplexEditVDSVectorLayer(LayerManager.getIstanceManager().getCurrentImageLayer(),layerName,""String_Node_Str"",new GeometryImage(""String_Node_Str"",""String_Node_Str"",timeStampStart,azimuth,boats),thresholdsString,ENL,buffer,bufferedMaskName,""String_Node_Str"" + band);
          vdsanalysisLayer.addDetectedPixels(banddetectedpixels[band].getAllDetectedPixels(),display);
          if (!agglomerationMethodology.startsWith(""String_Node_Str"")) {
            vdsanalysisLayer.addThreshAggPixels(banddetectedpixels[band].getThresholdaggregatePixels(),display);
            vdsanalysisLayer.addThresholdPixels(banddetectedpixels[band].getThresholdclipPixels(),display);
          }
          notifyCalcAzimuth(""String_Node_Str"");
          AzimuthAmbiguity azimuthAmbiguity=new AzimuthAmbiguity(boats,(SarImageReader)gir,band);
          azimuthAmbiguity.process();
          List<Geometry> az=azimuthAmbiguity.getAmbiguityboatgeometry();
          vdsanalysisLayer.addAzimuthAmbiguities(az,display);
          if (gir instanceof Sentinel1) {
            if (((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"")) {
              notifyCalcAzimuth(""String_Node_Str"");
              S1ArtefactsAmbiguity arAmbiguity=new S1ArtefactsAmbiguity(boats,(SarImageReader)gir,band);
              arAmbiguity.process();
              List<Geometry> artefactsA=arAmbiguity.getAmbiguityboatgeometry();
              vdsanalysisLayer.addArtefactsAmbiguities(artefactsA,display);
            }
          }
          if ((analysis.getCoastMask() != null)) {
            vdsanalysisLayer.addGeometries(""String_Node_Str"",Color.BLUE,1,GeometryImage.POLYGON,analysis.getCoastMask().getMaskGeometries(),true);
          }
          vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0xFF0391),1,GeometryImage.LINESTRING,GeometryExtractor.getTiles(gir.getWidth(),gir.getHeight(),xtileSize,ytileSize),false);
          notifyLayerReady(vdsanalysisLayer);
          resultLayers.add(vdsanalysisLayer);
        }
      }
      if (stop) {
        return null;
      }
      if (bands.length > 1) {
        notifyAgglomerating(""String_Node_Str"");
        Boat[] boats=null;
        if (agglomerationMethodology.startsWith(""String_Node_Str"")) {
          mergePixels.agglomerate();
          mergePixels.computeBoatsAttributes(""String_Node_Str"");
        }
 else {
          boats=analysis.agglomerateNeighbours(mergePixels,neighbouringDistance,neighbourTilesize,removelandconnectedpixels,(analysis.getCoastMask() != null) ? analysis.getCoastMask() : null,kdist,""String_Node_Str"",bands);
        }
        if (stop) {
          return null;
        }
        ComplexEditVDSVectorLayer vdsanalysisLayer=new ComplexEditVDSVectorLayer(LayerManager.getIstanceManager().getCurrentImageLayer(),""String_Node_Str"",""String_Node_Str"",new GeometryImage(""String_Node_Str"",""String_Node_Str"",timeStampStart,azimuth,boats),thresholdsString,ENL,buffer,bufferedMaskName,""String_Node_Str"");
        boolean display=SumoPlatform.getApplication().getConfiguration().getDisplayPixel();
        if (!agglomerationMethodology.startsWith(""String_Node_Str"")) {
          vdsanalysisLayer.addThreshAggPixels(mergePixels.getThresholdaggregatePixels(),display);
          vdsanalysisLayer.addThresholdPixels(mergePixels.getThresholdclipPixels(),display);
        }
        vdsanalysisLayer.addDetectedPixels(mergePixels.getAllDetectedPixels(),display);
        if ((analysis.getCoastMask() != null)) {
          vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0x0000FF),1,GeometryImage.POLYGON,analysis.getCoastMask().getMaskGeometries(),true);
        }
        vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0xFF00FF),1,GeometryImage.LINESTRING,GeometryExtractor.getTiles(gir.getWidth(),gir.getHeight(),xtileSize,ytileSize),false);
        notifyCalcAzimuth(""String_Node_Str"");
        AzimuthAmbiguity azimuthAmbiguity=new AzimuthAmbiguity(boats,(SarImageReader)gir,bands);
        azimuthAmbiguity.process();
        List<Geometry> az=azimuthAmbiguity.getAmbiguityboatgeometry();
        vdsanalysisLayer.addAzimuthAmbiguities(az,display);
        if (gir instanceof Sentinel1) {
          if (((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"")) {
            notifyCalcAzimuth(""String_Node_Str"");
            S1ArtefactsAmbiguity arAmbiguity=new S1ArtefactsAmbiguity(boats,(SarImageReader)gir,bands);
            arAmbiguity.process();
            List<Geometry> artefactsA=arAmbiguity.getAmbiguityboatgeometry();
            vdsanalysisLayer.addArtefactsAmbiguities(artefactsA,display);
          }
        }
        notifyLayerReady(vdsanalysisLayer);
        resultLayers.add(vdsanalysisLayer);
      }
      notifyEndProcessListener();
    }
 catch (    Exception ee) {
      ee.printStackTrace();
    }
 finally {
      if (this.listeners != null)       removeAllProcessListener();
    }
    return new Results(reader,resultLayers);
  }
  finally {
    currentThread.setName(oldName);
  }
}",0.6490066225165563
174931,"/** 
 * @param gLayer
 * @param projection
 * @param gir
 * @param thresholds
 * @param buffer
 * @param enl
 * @param landmask
 */
public static void saveNewXML(File output,ComplexEditVDSVectorLayer layer,String projection,SarImageReader gir,float[] thresholds,int buffer,float enl,String landmask,String runVersion,Integer runVersionNumber){
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  String start=gir.getTimeStampStart();
  start=start.replace(""String_Node_Str"",""String_Node_Str"");
  Timestamp tStart=Timestamp.valueOf(start);
  start=roundedMillis(start);
  String stop=gir.getTimeStampStop();
  stop=stop.replace(""String_Node_Str"",""String_Node_Str"");
  stop=roundedMillis(stop);
  VdsAnalysis vdsA=new VdsAnalysis();
  vdsA.setAlgorithm(""String_Node_Str"");
  vdsA.setBuffer(buffer);
  vdsA.setDetectorVersion(""String_Node_Str"");
  double enlround=Precision.round(enl,2);
  StringBuilder params=new StringBuilder(""String_Node_Str"").append(enlround).append(""String_Node_Str"");
  if (thresholds != null && thresholds.length > 0) {
    String th=Arrays.toString(thresholds);
    th=th.substring(1,th.length() - 1);
    params=params.append(th).append(""String_Node_Str"");
  }
  vdsA.setParameters(params.toString());
  vdsA.setRunTime(format.format(new Date()));
  vdsA.setRunVersion(runVersion);
  vdsA.setRunVersionNum(runVersionNumber);
  vdsA.setLandMaskRead(landmask);
  List<Geometry> ambiguity=new ArrayList<>();
  Additionalgeometries amb=layer.getGeometriesByTag(ComplexEditVDSVectorLayer.AZIMUTH_AMBIGUITY_TAG);
  if (amb != null)   ambiguity=amb.getGeometries();
  Additionalgeometries art=layer.getGeometriesByTag(ComplexEditVDSVectorLayer.ARTEFACTS_AMBIGUITY_TAG);
  List<Geometry> ambiguityArt=new ArrayList<>();
  if (art != null)   ambiguityArt=art.getGeometries();
  int targetNumber=0;
  VdsTarget target=new VdsTarget();
  List<Geometry> gg=layer.getGeometriclayer().getGeometries();
  vdsA.setNrDetections(gg.size());
  for (  Geometry geom : gg) {
    AttributesGeometry att=layer.getGeometriclayer().getAttributes(geom);
    Boat b=new Boat();
    targetNumber++;
    b.setTargetNumber(targetNumber);
    try {
      double[] pos=gir.getGeoTransform().getGeoFromPixel(geom.getCoordinate().x,geom.getCoordinate().y);
      b.setLat(Precision.round(pos[1],6));
      b.setLon(Precision.round(pos[0],6));
    }
 catch (    GeoTransformException e) {
      logger.warn(e);
    }
    double incAngle=gir.getIncidence((int)geom.getCoordinate().x);
    incAngle=Math.toDegrees(incAngle);
    b.setIncAng(Precision.round(incAngle,3));
    b.setXpixel(Precision.round(geom.getCoordinate().x,0));
    b.setYpixel(Precision.round(geom.getCoordinate().y,0));
    b.setDetecttime(format.format(tStart));
    if (ambiguity.contains(geom) || ambiguityArt.contains(geom)) {
      b.setReliability(3);
      if (ambiguity.contains(geom))       b.setFalseAlarmCause(""String_Node_Str"");
 else       b.setFalseAlarmCause(""String_Node_Str"");
    }
 else {
      b.setReliability(0);
    }
    int[] max=(int[])att.get(VDSSchema.MAXIMUM_VALUE);
    if (max != null) {
      String s=StringUtils.join(max,',');
      b.setMaxValue(s);
    }
    if (att.get(VDSSchema.ESTIMATED_LENGTH) != null) {
      double lenght=Precision.round((Double)att.get(VDSSchema.ESTIMATED_LENGTH),1);
      b.setLength(lenght);
      b.setWidth(Precision.round((Double)att.get(VDSSchema.ESTIMATED_WIDTH),1));
      b.setSizeClass(""String_Node_Str"");
      if (lenght > 70 && lenght <= 120)       b.setSizeClass(""String_Node_Str"");
 else       if (lenght > 120)       b.setSizeClass(""String_Node_Str"");
    }
    if (att.get(VDSSchema.NUMBER_OF_AGGREGATED_PIXELS) != null)     b.setNrPixels(((Double)att.get(VDSSchema.NUMBER_OF_AGGREGATED_PIXELS)).intValue());
    if (att.get(VDSSchema.ESTIMATED_HEADING) != null)     b.setHeadingNorth(Precision.round((Double)att.get(VDSSchema.ESTIMATED_HEADING),2,BigDecimal.ROUND_FLOOR));
    if (att.get(VDSSchema.SIGNIFICANCE) != null) {
      double[] significance=(double[])att.get(VDSSchema.SIGNIFICANCE);
      if (significance != null)       b.setSignificance(StringUtils.join(significance,','));
    }
    if (att.get(VDSSchema.THRESHOLD) != null) {
      double[] trhtile=(double[])att.get(VDSSchema.THRESHOLD);
      if (trhtile != null)       b.setThresholdTile(StringUtils.join(trhtile,','));
    }
    target.getBoat().add(b);
  }
  SatImageMetadata imageMeta=new SatImageMetadata();
  try {
    imageMeta.setGcps(getCorners(gir));
    imageMeta.setTimestampStart(tStart.toString());
    imageMeta.setTimeStart(format.format(tStart));
    Timestamp tStop=Timestamp.valueOf(stop);
    imageMeta.setTimeStop(format.format(tStop));
    String sensor=gir.getSensor();
    format=new SimpleDateFormat(""String_Node_Str"");
    String imId=sensor + ""String_Node_Str"" + format.format(tStart);
    imageMeta.setImId(imId);
    imageMeta.setImageName(((SarImageReader)gir).getImgName());
    imageMeta.setSensor(sensor);
    String pol=gir.getPolarization();
    imageMeta.setPol(pol.trim());
    String polNumeric=pol.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    if (polNumeric.endsWith(""String_Node_Str""))     polNumeric=polNumeric.substring(0,polNumeric.length() - 1);
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"").trim();
    imageMeta.setPolnumeric(polNumeric);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  Analysis an=new Analysis();
  an.setSatImageMetadata(imageMeta);
  an.setVdsAnalysis(vdsA);
  an.setVdsTarget(target);
  try {
    javax.xml.bind.JAXBContext jaxbCtx=javax.xml.bind.JAXBContext.newInstance(""String_Node_Str"");
    OutputStream os=new FileOutputStream(output);
    javax.xml.bind.Marshaller marshaller=jaxbCtx.createMarshaller();
    marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_ENCODING,""String_Node_Str"");
    marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
    marshaller.marshal(an,os);
    os.close();
  }
 catch (  javax.xml.bind.JAXBException|IOException ex) {
    logger.error(ex.getMessage(),ex);
  }
}","/** 
 * @param gLayer
 * @param projection
 * @param gir
 * @param thresholds
 * @param buffer
 * @param enl
 * @param landmask
 */
public static void saveNewXML(File output,ComplexEditVDSVectorLayer layer,String projection,SarImageReader gir,float[] thresholds,int buffer,float enl,String landmask,String runVersion,Integer runVersionNumber){
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  String start=gir.getTimeStampStart();
  start=start.replace(""String_Node_Str"",""String_Node_Str"");
  Timestamp tStart=Timestamp.valueOf(start);
  start=roundedMillis(start);
  String stop=gir.getTimeStampStop();
  stop=stop.replace(""String_Node_Str"",""String_Node_Str"");
  stop=roundedMillis(stop);
  VdsAnalysis vdsA=new VdsAnalysis();
  vdsA.setAlgorithm(""String_Node_Str"");
  vdsA.setBuffer(buffer);
  vdsA.setDetectorVersion(""String_Node_Str"");
  double enlround=Precision.round(enl,2);
  StringBuilder params=new StringBuilder(""String_Node_Str"").append(enlround).append(""String_Node_Str"");
  if (thresholds != null && thresholds.length > 0) {
    String th=Arrays.toString(thresholds);
    th=th.substring(1,th.length() - 1);
    params=params.append(th).append(""String_Node_Str"");
  }
  vdsA.setParameters(params.toString());
  vdsA.setRunTime(format.format(new Date()));
  vdsA.setRunVersion(runVersion);
  vdsA.setRunVersionNum(runVersionNumber);
  vdsA.setLandMaskRead(landmask);
  List<Geometry> ambiguity=new ArrayList<>();
  Additionalgeometries amb=layer.getGeometriesByTag(ComplexEditVDSVectorLayer.AZIMUTH_AMBIGUITY_TAG);
  if (amb != null)   ambiguity=amb.getGeometries();
  Additionalgeometries art=layer.getGeometriesByTag(ComplexEditVDSVectorLayer.ARTEFACTS_AMBIGUITY_TAG);
  List<Geometry> ambiguityArt=new ArrayList<>();
  if (art != null)   ambiguityArt=art.getGeometries();
  int targetNumber=0;
  VdsTarget target=new VdsTarget();
  List<Geometry> gg=layer.getGeometriclayer().getGeometries();
  vdsA.setNrDetections(gg.size());
  for (  Geometry geom : gg) {
    AttributesGeometry att=layer.getGeometriclayer().getAttributes(geom);
    Boat b=new Boat();
    targetNumber++;
    b.setTargetNumber(targetNumber);
    try {
      double[] pos=gir.getGeoTransform().getGeoFromPixel(geom.getCoordinate().x,geom.getCoordinate().y);
      b.setLat(Precision.round(pos[1],6));
      b.setLon(Precision.round(pos[0],6));
    }
 catch (    GeoTransformException e) {
      logger.warn(e);
    }
    double incAngle=gir.getIncidence((int)geom.getCoordinate().x);
    incAngle=Math.toDegrees(incAngle);
    b.setIncAng(Precision.round(incAngle,3));
    b.setXpixel(Precision.round(geom.getCoordinate().x,0));
    b.setYpixel(Precision.round(geom.getCoordinate().y,0));
    b.setDetecttime(format.format(tStart));
    if (ambiguity.contains(geom) || ambiguityArt.contains(geom)) {
      b.setReliability(3);
      if (ambiguity.contains(geom))       b.setFalseAlarmCause(""String_Node_Str"");
 else       b.setFalseAlarmCause(""String_Node_Str"");
    }
 else {
      b.setReliability(0);
    }
    int[] max=(int[])att.get(VDSSchema.MAXIMUM_VALUE);
    if (max != null) {
      String s=StringUtils.join(max,',');
      b.setMaxValue(s);
    }
    if (att.get(VDSSchema.ESTIMATED_LENGTH) != null) {
      double lenght=Precision.round((Double)att.get(VDSSchema.ESTIMATED_LENGTH),1);
      b.setLength(lenght);
      b.setWidth(Precision.round((Double)att.get(VDSSchema.ESTIMATED_WIDTH),1));
      b.setSizeClass(""String_Node_Str"");
      if (lenght > 70 && lenght <= 120)       b.setSizeClass(""String_Node_Str"");
 else       if (lenght > 120)       b.setSizeClass(""String_Node_Str"");
    }
    if (att.get(VDSSchema.NUMBER_OF_AGGREGATED_PIXELS) != null)     b.setNrPixels(((Double)att.get(VDSSchema.NUMBER_OF_AGGREGATED_PIXELS)).intValue());
    if (att.get(VDSSchema.ESTIMATED_HEADING) != null)     b.setHeadingRange(Precision.round((Double)att.get(VDSSchema.ESTIMATED_HEADING),2,BigDecimal.ROUND_FLOOR) - 90);
    b.setHeadingNorth(0);
    if (att.get(VDSSchema.SIGNIFICANCE) != null) {
      double[] significance=(double[])att.get(VDSSchema.SIGNIFICANCE);
      if (significance != null)       b.setSignificance(StringUtils.join(significance,','));
    }
    if (att.get(VDSSchema.THRESHOLD) != null) {
      double[] trhtile=(double[])att.get(VDSSchema.THRESHOLD);
      if (trhtile != null)       b.setThresholdTile(StringUtils.join(trhtile,','));
    }
    target.getBoat().add(b);
  }
  SatImageMetadata imageMeta=new SatImageMetadata();
  try {
    imageMeta.setGcps(getCorners(gir));
    imageMeta.setTimestampStart(tStart.toString());
    imageMeta.setTimeStart(format.format(tStart));
    Timestamp tStop=Timestamp.valueOf(stop);
    imageMeta.setTimeStop(format.format(tStop));
    String sensor=gir.getSensor();
    format=new SimpleDateFormat(""String_Node_Str"");
    String imId=sensor + ""String_Node_Str"" + format.format(tStart);
    imageMeta.setImId(imId);
    imageMeta.setImageName(((SarImageReader)gir).getImgName());
    imageMeta.setSensor(sensor);
    String pol=gir.getPolarization();
    imageMeta.setPol(pol.trim());
    String polNumeric=pol.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    if (polNumeric.endsWith(""String_Node_Str""))     polNumeric=polNumeric.substring(0,polNumeric.length() - 1);
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"").trim();
    imageMeta.setPolnumeric(polNumeric);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  Analysis an=new Analysis();
  an.setSatImageMetadata(imageMeta);
  an.setVdsAnalysis(vdsA);
  an.setVdsTarget(target);
  try {
    javax.xml.bind.JAXBContext jaxbCtx=javax.xml.bind.JAXBContext.newInstance(""String_Node_Str"");
    OutputStream os=new FileOutputStream(output);
    javax.xml.bind.Marshaller marshaller=jaxbCtx.createMarshaller();
    marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_ENCODING,""String_Node_Str"");
    marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
    marshaller.marshal(an,os);
    os.close();
  }
 catch (  javax.xml.bind.JAXBException|IOException ex) {
    logger.error(ex.getMessage(),ex);
  }
}",0.9967452568071764
174932,"/** 
 * Exec the analysis process
 */
public Results call(){
  final Thread currentThread=Thread.currentThread();
  final String oldName=currentThread.getName();
  currentThread.setName(""String_Node_Str"" + gir.getImId());
  try {
    List<ComplexEditVDSVectorLayer> resultLayers=new ArrayList<>();
    String coastMaskName=analysis.getCoastMask() != null ? analysis.getCoastMask().getFileName() : ""String_Node_Str"";
    String iceMaskName=analysis.getIceMask() != null ? analysis.getIceMask().getFileName() : ""String_Node_Str"";
    notifyStartProcessListener(""String_Node_Str"" + coastMaskName + ""String_Node_Str""+ iceMaskName);
    SarImageReader reader=((SarImageReader)gir);
    String[] thresholdsString=StringUtils.join(analysis.getThresholdsParams(),""String_Node_Str"").split(""String_Node_Str"");
    BlackBorderAnalysis blackBorderAnalysis=runBBAnalysis();
    analysis.setBlackBorderAnalysis(blackBorderAnalysis);
    int numberofbands=gir.getNBand();
    int[] bands=new int[numberofbands];
    int noiseFloor=SumoPlatform.getApplication().getConfiguration().getNoiseFloor(0);
    int thresPixelMin=SumoPlatform.getApplication().getConfiguration().getThreshMinPixelValue(500);
    final KDistributionEstimation kdist=new KDistributionEstimation(ENL,noiseFloor,thresPixelMin);
    DetectedPixels mergePixels=new DetectedPixels(reader.getRangeSpacing(),reader.getAzimuthSpacing());
    DetectedPixels banddetectedpixels[]=new DetectedPixels[numberofbands];
    String timeStampStart=reader.getTimeStampStart();
    double azimuth=reader.getAzimuthSpacing();
    int xtileSize=analysis.getRealSizeX();
    int ytileSize=analysis.getRealSizeY();
    try {
      for (int band=0; band < numberofbands && !stop; band++) {
        notifyAnalysisBand(new StringBuilder().append(""String_Node_Str"").append(gir.getBandName(band)).toString());
        int vTiles=analysis.getVerTiles();
        notifyVDSAnalysis(""String_Node_Str"",vTiles);
        analysis.addProgressListener(this);
        banddetectedpixels[band]=analysis.analyse(kdist,band);
        if (numPointLimit != 0 && banddetectedpixels[band].getAllDetectedPixels().size() > numPointLimit) {
          logger.warn(""String_Node_Str"");
          return null;
        }
        if (mergePixels == null) {
          mergePixels=banddetectedpixels[band];
        }
 else {
          mergePixels.merge(banddetectedpixels[band]);
        }
        bands[band]=band;
        String polarization=reader.getBands()[band];
        if (numberofbands < 1 || displaybandanalysis) {
          notifyAgglomerating(new StringBuilder().append(""String_Node_Str"").append(polarization).toString());
          Boat[] boats=null;
          if (agglomerationMethodology.startsWith(""String_Node_Str"")) {
            banddetectedpixels[band].agglomerate();
            banddetectedpixels[band].computeBoatsAttributes(polarization);
          }
 else {
            if (stop)             break;
            boats=analysis.agglomerateNeighbours(banddetectedpixels[band],neighbouringDistance,neighbourTilesize,removelandconnectedpixels,(analysis.getCoastMask() != null) ? analysis.getCoastMask() : null,kdist,polarization,band);
          }
          String layerName=new StringBuilder(""String_Node_Str"").append(polarization).append(""String_Node_Str"").append(analysis.getThresholdParam(polarization)).toString();
          ComplexEditVDSVectorLayer vdsanalysisLayer=new ComplexEditVDSVectorLayer(LayerManager.getIstanceManager().getCurrentImageLayer(),layerName,""String_Node_Str"",new GeometryImage(""String_Node_Str"",""String_Node_Str"",timeStampStart,azimuth,boats),thresholdsString,ENL,buffer,bufferedMaskName,""String_Node_Str"" + band);
          vdsanalysisLayer.addDetectedPixels(banddetectedpixels[band].getAllDetectedPixels(),display);
          if (!agglomerationMethodology.startsWith(""String_Node_Str"")) {
            vdsanalysisLayer.addThreshAggPixels(banddetectedpixels[band].getThresholdaggregatePixels(),display);
            vdsanalysisLayer.addThresholdPixels(banddetectedpixels[band].getThresholdclipPixels(),display);
          }
          notifyCalcAzimuth(""String_Node_Str"");
          AzimuthAmbiguity azimuthAmbiguity=new AzimuthAmbiguity(boats,(SarImageReader)gir,band);
          azimuthAmbiguity.process();
          List<Geometry> az=azimuthAmbiguity.getAmbiguityboatgeometry();
          vdsanalysisLayer.addAzimuthAmbiguities(az,display);
          if (gir instanceof Sentinel1) {
            if (((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"") || ((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"")) {
              notifyCalcAzimuth(""String_Node_Str"");
              S1ArtefactsAmbiguity arAmbiguity=new S1ArtefactsAmbiguity(boats,(SarImageReader)gir,band);
              arAmbiguity.process();
              List<Geometry> artefactsA=arAmbiguity.getAmbiguityboatgeometry();
              vdsanalysisLayer.addArtefactsAmbiguities(artefactsA,display);
            }
          }
          if ((analysis.getCoastMask() != null)) {
            vdsanalysisLayer.addGeometries(""String_Node_Str"",Color.BLUE,1,GeometryImage.POLYGON,analysis.getCoastMask().getMaskGeometries(),true);
          }
          vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0xFF00FF),1,GeometryImage.LINESTRING,GeometryExtractor.getTiles(gir.getWidth(),gir.getHeight(),xtileSize,ytileSize),false);
          notifyLayerReady(vdsanalysisLayer);
          resultLayers.add(vdsanalysisLayer);
        }
      }
      if (stop) {
        return null;
      }
      if (bands.length > 1) {
        notifyAgglomerating(""String_Node_Str"");
        Boat[] boats=null;
        if (agglomerationMethodology.startsWith(""String_Node_Str"")) {
          mergePixels.agglomerate();
          mergePixels.computeBoatsAttributes(""String_Node_Str"");
        }
 else {
          boats=analysis.agglomerateNeighbours(mergePixels,neighbouringDistance,neighbourTilesize,removelandconnectedpixels,(analysis.getCoastMask() != null) ? analysis.getCoastMask() : null,kdist,""String_Node_Str"",bands);
        }
        if (stop) {
          return null;
        }
        ComplexEditVDSVectorLayer vdsanalysisLayer=new ComplexEditVDSVectorLayer(LayerManager.getIstanceManager().getCurrentImageLayer(),""String_Node_Str"",""String_Node_Str"",new GeometryImage(""String_Node_Str"",""String_Node_Str"",timeStampStart,azimuth,boats),thresholdsString,ENL,buffer,bufferedMaskName,""String_Node_Str"");
        boolean display=SumoPlatform.getApplication().getConfiguration().getDisplayPixel();
        if (!agglomerationMethodology.startsWith(""String_Node_Str"")) {
          vdsanalysisLayer.addThreshAggPixels(mergePixels.getThresholdaggregatePixels(),display);
          vdsanalysisLayer.addThresholdPixels(mergePixels.getThresholdclipPixels(),display);
        }
        vdsanalysisLayer.addDetectedPixels(mergePixels.getAllDetectedPixels(),display);
        if ((analysis.getCoastMask() != null)) {
          vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0x0000FF),1,GeometryImage.POLYGON,analysis.getCoastMask().getMaskGeometries(),true);
        }
        vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0xFF00FF),1,GeometryImage.LINESTRING,GeometryExtractor.getTiles(gir.getWidth(),gir.getHeight(),xtileSize,ytileSize),false);
        notifyCalcAzimuth(""String_Node_Str"");
        AzimuthAmbiguity azimuthAmbiguity=new AzimuthAmbiguity(boats,(SarImageReader)gir,bands);
        azimuthAmbiguity.process();
        List<Geometry> az=azimuthAmbiguity.getAmbiguityboatgeometry();
        vdsanalysisLayer.addAzimuthAmbiguities(az,display);
        if (gir instanceof Sentinel1) {
          if (((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"")) {
            notifyCalcAzimuth(""String_Node_Str"");
            S1ArtefactsAmbiguity arAmbiguity=new S1ArtefactsAmbiguity(boats,(SarImageReader)gir,bands);
            arAmbiguity.process();
            List<Geometry> artefactsA=arAmbiguity.getAmbiguityboatgeometry();
            vdsanalysisLayer.addArtefactsAmbiguities(artefactsA,display);
          }
        }
        notifyLayerReady(vdsanalysisLayer);
        resultLayers.add(vdsanalysisLayer);
      }
      notifyEndProcessListener();
    }
 catch (    Exception ee) {
      ee.printStackTrace();
    }
 finally {
      if (this.listeners != null)       removeAllProcessListener();
    }
    return new Results(reader,resultLayers);
  }
  finally {
    currentThread.setName(oldName);
  }
}","/** 
 * Exec the analysis process
 */
public Results call(){
  final Thread currentThread=Thread.currentThread();
  final String oldName=currentThread.getName();
  currentThread.setName(""String_Node_Str"" + gir.getImId());
  try {
    List<ComplexEditVDSVectorLayer> resultLayers=new ArrayList<>();
    String coastMaskName=analysis.getCoastMask() != null ? analysis.getCoastMask().getFileName() : ""String_Node_Str"";
    String iceMaskName=analysis.getIceMask() != null ? analysis.getIceMask().getFileName() : ""String_Node_Str"";
    notifyStartProcessListener(""String_Node_Str"" + coastMaskName + ""String_Node_Str""+ iceMaskName);
    SarImageReader reader=((SarImageReader)gir);
    String[] thresholdsString=StringUtils.join(analysis.getThresholdsParams(),""String_Node_Str"").split(""String_Node_Str"");
    BlackBorderAnalysis blackBorderAnalysis=runBBAnalysis();
    analysis.setBlackBorderAnalysis(blackBorderAnalysis);
    int numberofbands=gir.getNBand();
    int[] bands=new int[numberofbands];
    int noiseFloor=SumoPlatform.getApplication().getConfiguration().getNoiseFloor(0);
    int thresPixelMin=SumoPlatform.getApplication().getConfiguration().getThreshMinPixelValue(500);
    final KDistributionEstimation kdist=new KDistributionEstimation(ENL,noiseFloor,thresPixelMin);
    DetectedPixels mergePixels=new DetectedPixels(reader.getRangeSpacing(),reader.getAzimuthSpacing());
    DetectedPixels banddetectedpixels[]=new DetectedPixels[numberofbands];
    String timeStampStart=reader.getTimeStampStart();
    double azimuth=reader.getAzimuthSpacing();
    int xtileSize=analysis.getRealSizeX();
    int ytileSize=analysis.getRealSizeY();
    try {
      for (int band=0; band < numberofbands && !stop; band++) {
        notifyAnalysisBand(new StringBuilder().append(""String_Node_Str"").append(gir.getBandName(band)).toString());
        int vTiles=analysis.getVerTiles();
        notifyVDSAnalysis(""String_Node_Str"",vTiles);
        analysis.addProgressListener(this);
        banddetectedpixels[band]=analysis.analyse(kdist,band);
        if (numPointLimit != 0 && banddetectedpixels[band].getAllDetectedPixels().size() > numPointLimit) {
          logger.warn(""String_Node_Str"");
          return null;
        }
        if (mergePixels == null) {
          mergePixels=banddetectedpixels[band];
        }
 else {
          mergePixels.merge(banddetectedpixels[band]);
        }
        bands[band]=band;
        String polarization=reader.getBands()[band];
        if (numberofbands < 1 || displaybandanalysis) {
          notifyAgglomerating(new StringBuilder().append(""String_Node_Str"").append(polarization).toString());
          Boat[] boats=null;
          if (agglomerationMethodology.startsWith(""String_Node_Str"")) {
            banddetectedpixels[band].agglomerate();
            banddetectedpixels[band].computeBoatsAttributes(polarization);
          }
 else {
            if (stop)             break;
            boats=analysis.agglomerateNeighbours(banddetectedpixels[band],neighbouringDistance,neighbourTilesize,removelandconnectedpixels,(analysis.getCoastMask() != null) ? analysis.getCoastMask() : null,kdist,polarization,band);
          }
          String layerName=new StringBuilder(""String_Node_Str"").append(polarization).append(""String_Node_Str"").append(analysis.getThresholdParam(polarization)).toString();
          ComplexEditVDSVectorLayer vdsanalysisLayer=new ComplexEditVDSVectorLayer(LayerManager.getIstanceManager().getCurrentImageLayer(),layerName,""String_Node_Str"",new GeometryImage(""String_Node_Str"",""String_Node_Str"",timeStampStart,azimuth,boats),thresholdsString,ENL,buffer,bufferedMaskName,""String_Node_Str"" + band);
          vdsanalysisLayer.addDetectedPixels(banddetectedpixels[band].getAllDetectedPixels(),display);
          if (!agglomerationMethodology.startsWith(""String_Node_Str"")) {
            vdsanalysisLayer.addThreshAggPixels(banddetectedpixels[band].getThresholdaggregatePixels(),display);
            vdsanalysisLayer.addThresholdPixels(banddetectedpixels[band].getThresholdclipPixels(),display);
          }
          notifyCalcAzimuth(""String_Node_Str"");
          AzimuthAmbiguity azimuthAmbiguity=new AzimuthAmbiguity(boats,(SarImageReader)gir,band);
          azimuthAmbiguity.process();
          List<Geometry> az=azimuthAmbiguity.getAmbiguityboatgeometry();
          vdsanalysisLayer.addAzimuthAmbiguities(az,display);
          if (gir instanceof Sentinel1) {
            if (((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"")) {
              notifyCalcAzimuth(""String_Node_Str"");
              S1ArtefactsAmbiguity arAmbiguity=new S1ArtefactsAmbiguity(boats,(SarImageReader)gir,band);
              arAmbiguity.process();
              List<Geometry> artefactsA=arAmbiguity.getAmbiguityboatgeometry();
              vdsanalysisLayer.addArtefactsAmbiguities(artefactsA,display);
            }
          }
          if ((analysis.getCoastMask() != null)) {
            vdsanalysisLayer.addGeometries(""String_Node_Str"",Color.BLUE,1,GeometryImage.POLYGON,analysis.getCoastMask().getMaskGeometries(),true);
          }
          vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0xFF0391),1,GeometryImage.LINESTRING,GeometryExtractor.getTiles(gir.getWidth(),gir.getHeight(),xtileSize,ytileSize),false);
          notifyLayerReady(vdsanalysisLayer);
          resultLayers.add(vdsanalysisLayer);
        }
      }
      if (stop) {
        return null;
      }
      if (bands.length > 1) {
        notifyAgglomerating(""String_Node_Str"");
        Boat[] boats=null;
        if (agglomerationMethodology.startsWith(""String_Node_Str"")) {
          mergePixels.agglomerate();
          mergePixels.computeBoatsAttributes(""String_Node_Str"");
        }
 else {
          boats=analysis.agglomerateNeighbours(mergePixels,neighbouringDistance,neighbourTilesize,removelandconnectedpixels,(analysis.getCoastMask() != null) ? analysis.getCoastMask() : null,kdist,""String_Node_Str"",bands);
        }
        if (stop) {
          return null;
        }
        ComplexEditVDSVectorLayer vdsanalysisLayer=new ComplexEditVDSVectorLayer(LayerManager.getIstanceManager().getCurrentImageLayer(),""String_Node_Str"",""String_Node_Str"",new GeometryImage(""String_Node_Str"",""String_Node_Str"",timeStampStart,azimuth,boats),thresholdsString,ENL,buffer,bufferedMaskName,""String_Node_Str"");
        boolean display=SumoPlatform.getApplication().getConfiguration().getDisplayPixel();
        if (!agglomerationMethodology.startsWith(""String_Node_Str"")) {
          vdsanalysisLayer.addThreshAggPixels(mergePixels.getThresholdaggregatePixels(),display);
          vdsanalysisLayer.addThresholdPixels(mergePixels.getThresholdclipPixels(),display);
        }
        vdsanalysisLayer.addDetectedPixels(mergePixels.getAllDetectedPixels(),display);
        if ((analysis.getCoastMask() != null)) {
          vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0x0000FF),1,GeometryImage.POLYGON,analysis.getCoastMask().getMaskGeometries(),true);
        }
        vdsanalysisLayer.addGeometries(""String_Node_Str"",new Color(0xFF00FF),1,GeometryImage.LINESTRING,GeometryExtractor.getTiles(gir.getWidth(),gir.getHeight(),xtileSize,ytileSize),false);
        notifyCalcAzimuth(""String_Node_Str"");
        AzimuthAmbiguity azimuthAmbiguity=new AzimuthAmbiguity(boats,(SarImageReader)gir,bands);
        azimuthAmbiguity.process();
        List<Geometry> az=azimuthAmbiguity.getAmbiguityboatgeometry();
        vdsanalysisLayer.addAzimuthAmbiguities(az,display);
        if (gir instanceof Sentinel1) {
          if (((Sentinel1)gir).getInstumentationMode().equalsIgnoreCase(""String_Node_Str"")) {
            notifyCalcAzimuth(""String_Node_Str"");
            S1ArtefactsAmbiguity arAmbiguity=new S1ArtefactsAmbiguity(boats,(SarImageReader)gir,bands);
            arAmbiguity.process();
            List<Geometry> artefactsA=arAmbiguity.getAmbiguityboatgeometry();
            vdsanalysisLayer.addArtefactsAmbiguities(artefactsA,display);
          }
        }
        notifyLayerReady(vdsanalysisLayer);
        resultLayers.add(vdsanalysisLayer);
      }
      notifyEndProcessListener();
    }
 catch (    Exception ee) {
      ee.printStackTrace();
    }
 finally {
      if (this.listeners != null)       removeAllProcessListener();
    }
    return new Results(reader,resultLayers);
  }
  finally {
    currentThread.setName(oldName);
  }
}",0.6490066225165563
174933,"/** 
 * @param gLayer
 * @param projection
 * @param gir
 * @param thresholds
 * @param buffer
 * @param enl
 * @param landmask
 */
public static void saveNewXML(File output,ComplexEditVDSVectorLayer layer,String projection,SarImageReader gir,float[] thresholds,int buffer,float enl,String landmask,String runVersion,Integer runVersionNumber){
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  String start=gir.getTimeStampStart();
  start=start.replace(""String_Node_Str"",""String_Node_Str"");
  Timestamp tStart=Timestamp.valueOf(start);
  start=roundedMillis(start);
  String stop=gir.getTimeStampStop();
  stop=stop.replace(""String_Node_Str"",""String_Node_Str"");
  stop=roundedMillis(stop);
  VdsAnalysis vdsA=new VdsAnalysis();
  vdsA.setAlgorithm(""String_Node_Str"");
  vdsA.setBuffer(buffer);
  vdsA.setDetectorVersion(""String_Node_Str"");
  double enlround=Precision.round(enl,2);
  StringBuilder params=new StringBuilder(""String_Node_Str"").append(enlround).append(""String_Node_Str"");
  if (thresholds != null && thresholds.length > 0) {
    String th=Arrays.toString(thresholds);
    th=th.substring(1,th.length() - 1);
    params=params.append(th).append(""String_Node_Str"");
  }
  vdsA.setParameters(params.toString());
  vdsA.setRunTime(format.format(new Date()));
  vdsA.setRunVersion(runVersion);
  vdsA.setRunVersionNum(runVersionNumber);
  vdsA.setLandMaskRead(landmask);
  List<Geometry> ambiguity=new ArrayList<>();
  Additionalgeometries amb=layer.getGeometriesByTag(ComplexEditVDSVectorLayer.AZIMUTH_AMBIGUITY_TAG);
  if (amb != null)   ambiguity=amb.getGeometries();
  Additionalgeometries art=layer.getGeometriesByTag(ComplexEditVDSVectorLayer.ARTEFACTS_AMBIGUITY_TAG);
  List<Geometry> ambiguityArt=new ArrayList<>();
  if (art != null)   ambiguityArt=art.getGeometries();
  int targetNumber=0;
  VdsTarget target=new VdsTarget();
  List<Geometry> gg=layer.getGeometriclayer().getGeometries();
  vdsA.setNrDetections(gg.size());
  for (  Geometry geom : gg) {
    AttributesGeometry att=layer.getGeometriclayer().getAttributes(geom);
    Boat b=new Boat();
    targetNumber++;
    b.setTargetNumber(targetNumber);
    try {
      double[] pos=gir.getGeoTransform().getGeoFromPixel(geom.getCoordinate().x,geom.getCoordinate().y);
      b.setLat(Precision.round(pos[1],6));
      b.setLon(Precision.round(pos[0],6));
    }
 catch (    GeoTransformException e) {
      logger.warn(e);
    }
    double incAngle=gir.getIncidence((int)geom.getCoordinate().x);
    incAngle=Math.toDegrees(incAngle);
    b.setIncAng(Precision.round(incAngle,3));
    b.setXpixel(Precision.round(geom.getCoordinate().x,0));
    b.setYpixel(Precision.round(geom.getCoordinate().y,0));
    b.setDetecttime(format.format(tStart));
    if (ambiguity.contains(geom) || ambiguityArt.contains(geom)) {
      b.setReliability(3);
      if (ambiguity.contains(geom))       b.setFalseAlarmCause(""String_Node_Str"");
 else       b.setFalseAlarmCause(""String_Node_Str"");
    }
 else {
      b.setReliability(0);
    }
    int[] max=(int[])att.get(VDSSchema.MAXIMUM_VALUE);
    if (max != null) {
      String s=StringUtils.join(max,',');
      b.setMaxValue(s);
    }
    if (att.get(VDSSchema.ESTIMATED_LENGTH) != null) {
      double lenght=Precision.round((Double)att.get(VDSSchema.ESTIMATED_LENGTH),1);
      b.setLength(lenght);
      b.setWidth(Precision.round((Double)att.get(VDSSchema.ESTIMATED_WIDTH),1));
      b.setSizeClass(""String_Node_Str"");
      if (lenght > 70 && lenght <= 120)       b.setSizeClass(""String_Node_Str"");
 else       if (lenght > 120)       b.setSizeClass(""String_Node_Str"");
    }
    if (att.get(VDSSchema.NUMBER_OF_AGGREGATED_PIXELS) != null)     b.setNrPixels(((Double)att.get(VDSSchema.NUMBER_OF_AGGREGATED_PIXELS)).intValue());
    if (att.get(VDSSchema.ESTIMATED_HEADING) != null)     b.setHeadingNorth(Precision.round((Double)att.get(VDSSchema.ESTIMATED_HEADING),2,BigDecimal.ROUND_FLOOR));
    if (att.get(VDSSchema.SIGNIFICANCE) != null) {
      double[] significance=(double[])att.get(VDSSchema.SIGNIFICANCE);
      if (significance != null)       b.setSignificance(StringUtils.join(significance,','));
    }
    if (att.get(VDSSchema.THRESHOLD) != null) {
      double[] trhtile=(double[])att.get(VDSSchema.THRESHOLD);
      if (trhtile != null)       b.setThresholdTile(StringUtils.join(trhtile,','));
    }
    target.getBoat().add(b);
  }
  SatImageMetadata imageMeta=new SatImageMetadata();
  try {
    imageMeta.setGcps(getCorners(gir));
    imageMeta.setTimestampStart(tStart.toString());
    imageMeta.setTimeStart(format.format(tStart));
    Timestamp tStop=Timestamp.valueOf(stop);
    imageMeta.setTimeStop(format.format(tStop));
    String sensor=gir.getSensor();
    format=new SimpleDateFormat(""String_Node_Str"");
    String imId=sensor + ""String_Node_Str"" + format.format(tStart);
    imageMeta.setImId(imId);
    imageMeta.setImageName(((SarImageReader)gir).getImgName());
    imageMeta.setSensor(sensor);
    String pol=gir.getPolarization();
    imageMeta.setPol(pol.trim());
    String polNumeric=pol.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    if (polNumeric.endsWith(""String_Node_Str""))     polNumeric=polNumeric.substring(0,polNumeric.length() - 1);
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"").trim();
    imageMeta.setPolnumeric(polNumeric);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  Analysis an=new Analysis();
  an.setSatImageMetadata(imageMeta);
  an.setVdsAnalysis(vdsA);
  an.setVdsTarget(target);
  try {
    javax.xml.bind.JAXBContext jaxbCtx=javax.xml.bind.JAXBContext.newInstance(""String_Node_Str"");
    OutputStream os=new FileOutputStream(output);
    javax.xml.bind.Marshaller marshaller=jaxbCtx.createMarshaller();
    marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_ENCODING,""String_Node_Str"");
    marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
    marshaller.marshal(an,os);
    os.close();
  }
 catch (  javax.xml.bind.JAXBException|IOException ex) {
    logger.error(ex.getMessage(),ex);
  }
}","/** 
 * @param gLayer
 * @param projection
 * @param gir
 * @param thresholds
 * @param buffer
 * @param enl
 * @param landmask
 */
public static void saveNewXML(File output,ComplexEditVDSVectorLayer layer,String projection,SarImageReader gir,float[] thresholds,int buffer,float enl,String landmask,String runVersion,Integer runVersionNumber){
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  String start=gir.getTimeStampStart();
  start=start.replace(""String_Node_Str"",""String_Node_Str"");
  Timestamp tStart=Timestamp.valueOf(start);
  start=roundedMillis(start);
  String stop=gir.getTimeStampStop();
  stop=stop.replace(""String_Node_Str"",""String_Node_Str"");
  stop=roundedMillis(stop);
  VdsAnalysis vdsA=new VdsAnalysis();
  vdsA.setAlgorithm(""String_Node_Str"");
  vdsA.setBuffer(buffer);
  vdsA.setDetectorVersion(""String_Node_Str"");
  double enlround=Precision.round(enl,2);
  StringBuilder params=new StringBuilder(""String_Node_Str"").append(enlround).append(""String_Node_Str"");
  if (thresholds != null && thresholds.length > 0) {
    String th=Arrays.toString(thresholds);
    th=th.substring(1,th.length() - 1);
    params=params.append(th).append(""String_Node_Str"");
  }
  vdsA.setParameters(params.toString());
  vdsA.setRunTime(format.format(new Date()));
  vdsA.setRunVersion(runVersion);
  vdsA.setRunVersionNum(runVersionNumber);
  vdsA.setLandMaskRead(landmask);
  List<Geometry> ambiguity=new ArrayList<>();
  Additionalgeometries amb=layer.getGeometriesByTag(ComplexEditVDSVectorLayer.AZIMUTH_AMBIGUITY_TAG);
  if (amb != null)   ambiguity=amb.getGeometries();
  Additionalgeometries art=layer.getGeometriesByTag(ComplexEditVDSVectorLayer.ARTEFACTS_AMBIGUITY_TAG);
  List<Geometry> ambiguityArt=new ArrayList<>();
  if (art != null)   ambiguityArt=art.getGeometries();
  int targetNumber=0;
  VdsTarget target=new VdsTarget();
  List<Geometry> gg=layer.getGeometriclayer().getGeometries();
  vdsA.setNrDetections(gg.size());
  for (  Geometry geom : gg) {
    AttributesGeometry att=layer.getGeometriclayer().getAttributes(geom);
    Boat b=new Boat();
    targetNumber++;
    b.setTargetNumber(targetNumber);
    try {
      double[] pos=gir.getGeoTransform().getGeoFromPixel(geom.getCoordinate().x,geom.getCoordinate().y);
      b.setLat(Precision.round(pos[1],6));
      b.setLon(Precision.round(pos[0],6));
    }
 catch (    GeoTransformException e) {
      logger.warn(e);
    }
    double incAngle=gir.getIncidence((int)geom.getCoordinate().x);
    incAngle=Math.toDegrees(incAngle);
    b.setIncAng(Precision.round(incAngle,3));
    b.setXpixel(Precision.round(geom.getCoordinate().x,0));
    b.setYpixel(Precision.round(geom.getCoordinate().y,0));
    b.setDetecttime(format.format(tStart));
    if (ambiguity.contains(geom) || ambiguityArt.contains(geom)) {
      b.setReliability(3);
      if (ambiguity.contains(geom))       b.setFalseAlarmCause(""String_Node_Str"");
 else       b.setFalseAlarmCause(""String_Node_Str"");
    }
 else {
      b.setReliability(0);
    }
    int[] max=(int[])att.get(VDSSchema.MAXIMUM_VALUE);
    if (max != null) {
      String s=StringUtils.join(max,',');
      b.setMaxValue(s);
    }
    if (att.get(VDSSchema.ESTIMATED_LENGTH) != null) {
      double lenght=Precision.round((Double)att.get(VDSSchema.ESTIMATED_LENGTH),1);
      b.setLength(lenght);
      b.setWidth(Precision.round((Double)att.get(VDSSchema.ESTIMATED_WIDTH),1));
      b.setSizeClass(""String_Node_Str"");
      if (lenght > 70 && lenght <= 120)       b.setSizeClass(""String_Node_Str"");
 else       if (lenght > 120)       b.setSizeClass(""String_Node_Str"");
    }
    if (att.get(VDSSchema.NUMBER_OF_AGGREGATED_PIXELS) != null)     b.setNrPixels(((Double)att.get(VDSSchema.NUMBER_OF_AGGREGATED_PIXELS)).intValue());
    if (att.get(VDSSchema.ESTIMATED_HEADING) != null)     b.setHeadingRange(Precision.round((Double)att.get(VDSSchema.ESTIMATED_HEADING),2,BigDecimal.ROUND_FLOOR) - 90);
    b.setHeadingNorth(0);
    if (att.get(VDSSchema.SIGNIFICANCE) != null) {
      double[] significance=(double[])att.get(VDSSchema.SIGNIFICANCE);
      if (significance != null)       b.setSignificance(StringUtils.join(significance,','));
    }
    if (att.get(VDSSchema.THRESHOLD) != null) {
      double[] trhtile=(double[])att.get(VDSSchema.THRESHOLD);
      if (trhtile != null)       b.setThresholdTile(StringUtils.join(trhtile,','));
    }
    target.getBoat().add(b);
  }
  SatImageMetadata imageMeta=new SatImageMetadata();
  try {
    imageMeta.setGcps(getCorners(gir));
    imageMeta.setTimestampStart(tStart.toString());
    imageMeta.setTimeStart(format.format(tStart));
    Timestamp tStop=Timestamp.valueOf(stop);
    imageMeta.setTimeStop(format.format(tStop));
    String sensor=gir.getSensor();
    format=new SimpleDateFormat(""String_Node_Str"");
    String imId=sensor + ""String_Node_Str"" + format.format(tStart);
    imageMeta.setImId(imId);
    imageMeta.setImageName(((SarImageReader)gir).getImgName());
    imageMeta.setSensor(sensor);
    String pol=gir.getPolarization();
    imageMeta.setPol(pol.trim());
    String polNumeric=pol.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"");
    if (polNumeric.endsWith(""String_Node_Str""))     polNumeric=polNumeric.substring(0,polNumeric.length() - 1);
    polNumeric=polNumeric.replace(""String_Node_Str"",""String_Node_Str"").trim();
    imageMeta.setPolnumeric(polNumeric);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  Analysis an=new Analysis();
  an.setSatImageMetadata(imageMeta);
  an.setVdsAnalysis(vdsA);
  an.setVdsTarget(target);
  try {
    javax.xml.bind.JAXBContext jaxbCtx=javax.xml.bind.JAXBContext.newInstance(""String_Node_Str"");
    OutputStream os=new FileOutputStream(output);
    javax.xml.bind.Marshaller marshaller=jaxbCtx.createMarshaller();
    marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_ENCODING,""String_Node_Str"");
    marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
    marshaller.marshal(an,os);
    os.close();
  }
 catch (  javax.xml.bind.JAXBException|IOException ex) {
    logger.error(ex.getMessage(),ex);
  }
}",0.9967452568071764
174934,"/** 
 * try to create the correct reader starting from file name
 * @param file
 * @return
 */
public static List<GeoImageReader> createReaderForName(String file,String geoAlgorithm){
  List<GeoImageReader> girList=new ArrayList<GeoImageReader>();
  try {
    File f=new File(file);
    String parent=f.getParent();
    if (parent != null && (parent.contains(""String_Node_Str"") || file.contains(""String_Node_Str""))) {
      H5File h5file=new H5File(file,H5File.READ);
      H5Group group=((H5Group)h5file.get(""String_Node_Str""));
      List<HObject> hObjs=group.getMemberList();
      Iterator<HObject> it=hObjs.iterator();
      while (it.hasNext()) {
        HObject obj=it.next();
        AbstractCosmoSkymedImage cosmo=null;
        if (obj.getName().equals(""String_Node_Str"")) {
          cosmo=CosmoSkyFactory.instanceCosmoSkymed(h5file,obj.getName(),null);
        }
 else {
          if (h5file.get(obj.getName() + ""String_Node_Str"") != null)           cosmo=CosmoSkyFactory.instanceCosmoSkymed(h5file,obj.getName() + ""String_Node_Str"",obj.getName());
        }
        if (cosmo != null) {
          if (cosmo.initialise()) {
            girList.add(cosmo);
            logger.info(""String_Node_Str"",new Object[]{file,cosmo.getClass()});
          }
          if (girList.size() > 1)           cosmo.setContainsMultipleImage(true);
        }
      }
    }
 else     if (parent.contains(""String_Node_Str"") || parent.contains(""String_Node_Str"")) {
      girList=Sentinel1Factory.instanceS1Reader(f,geoAlgorithm);
    }
 else {
      GeoImageReader gir=null;
      if (parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage(f);
      }
 else       if (parent.contains(""String_Node_Str"") || parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage_SLC(f);
      }
 else       if (parent.contains(""String_Node_Str"") && parent.contains(""String_Node_Str"")) {
        gir=new Radarsat2Image_SLC(f);
      }
 else       if (parent.contains(""String_Node_Str"") && !parent.contains(""String_Node_Str"")) {
        if (GDALUtilities.isGDALAvailable())         gir=new Radarsat2ImageGDAL(f);
 else         gir=new Radarsat2Image(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new Radarsat1Image(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new EnvisatImage_SLC(f);
      }
 else       if (new File(file).getName().equalsIgnoreCase(""String_Node_Str"")) {
        TiffAlosProperties props=new TiffAlosProperties(file);
        if (props.getProductFormat().equalsIgnoreCase(""String_Node_Str"")) {
          gir=new GDALAlosCeos(f);
        }
 else {
          gir=new AlosGeoTiff(f);
        }
      }
 else {
        return null;
      }
      if (gir.initialise()) {
        logger.info(""String_Node_Str"",new Object[]{file,gir.getClass()});
        girList.add(gir);
      }
 else {
        girList=null;
      }
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + file,ex);
    girList=null;
  }
 finally {
    return girList;
  }
}","/** 
 * try to create the correct reader starting from file name
 * @param file
 * @return
 */
public static List<GeoImageReader> createReaderForName(String file,String geoAlgorithm){
  List<GeoImageReader> girList=new ArrayList<GeoImageReader>();
  try {
    File f=new File(file);
    String parent=f.getParent();
    if (parent != null && (parent.contains(""String_Node_Str"") || file.contains(""String_Node_Str""))) {
      H5File h5file=new H5File(file,H5File.READ);
      H5Group group=((H5Group)h5file.get(""String_Node_Str""));
      List<HObject> hObjs=group.getMemberList();
      Iterator<HObject> it=hObjs.iterator();
      while (it.hasNext()) {
        HObject obj=it.next();
        AbstractCosmoSkymedImage cosmo=null;
        if (obj.getName().equals(""String_Node_Str"")) {
          cosmo=CosmoSkyFactory.instanceCosmoSkymed(h5file,obj.getName(),null);
        }
 else {
          if (h5file.get(obj.getName() + ""String_Node_Str"") != null)           cosmo=CosmoSkyFactory.instanceCosmoSkymed(h5file,obj.getName() + ""String_Node_Str"",obj.getName());
        }
        if (cosmo != null) {
          if (cosmo.initialise()) {
            girList.add(cosmo);
            logger.info(""String_Node_Str"",new Object[]{file,cosmo.getClass()});
          }
          if (girList.size() > 1)           cosmo.setContainsMultipleImage(true);
        }
      }
    }
 else     if (parent.contains(""String_Node_Str"") || parent.contains(""String_Node_Str"")) {
      girList=Sentinel1Factory.instanceS1Reader(f,geoAlgorithm);
    }
 else {
      GeoImageReader gir=null;
      if (parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage(f);
      }
 else       if (parent.contains(""String_Node_Str"") || parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage_SLC(f);
      }
 else       if (parent.contains(""String_Node_Str"") && parent.contains(""String_Node_Str"")) {
        if (GDALUtilities.isGDALAvailable())         gir=new Radarsat2Image_SLCGDAL(f);
 else         gir=new Radarsat2Image_SLC(f);
      }
 else       if (parent.contains(""String_Node_Str"") && !parent.contains(""String_Node_Str"")) {
        if (GDALUtilities.isGDALAvailable())         gir=new Radarsat2ImageGDAL(f);
 else         gir=new Radarsat2Image(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new Radarsat1Image(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new EnvisatImage_SLC(f);
      }
 else       if (new File(file).getName().equalsIgnoreCase(""String_Node_Str"")) {
        TiffAlosProperties props=new TiffAlosProperties(file);
        if (props.getProductFormat().equalsIgnoreCase(""String_Node_Str"")) {
          gir=new GDALAlosCeos(f);
        }
 else {
          gir=new AlosGeoTiff(f);
        }
      }
 else {
        return null;
      }
      if (gir.initialise()) {
        logger.info(""String_Node_Str"",new Object[]{file,gir.getClass()});
        girList.add(gir);
      }
 else {
        girList=null;
      }
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + file,ex);
    girList=null;
  }
 finally {
    return girList;
  }
}",0.8215859030837004
174935,"/** 
 * @param x
 * @param y
 * @param offsetx
 * @param offsety
 * @return
 */
public synchronized int[] readPixValues(int x,int y,int offsetx,int offsety){
  int pixels=offsetx * offsety;
  Band b=data.GetRasterBand(band);
  int buf_size=pixels;
  int[] dd=new int[buf_size];
  try {
    b.ReadRaster(x,y,offsetx,offsety,gdalconstConstants.GDT_UInt32,dd);
  }
 catch (  Exception ex2) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception ex) {
    }
    b.ReadRaster(x,y,offsetx,offsety,gdalconstConstants.GDT_UInt32,dd);
  }
  return dd;
}","public synchronized int[] readPixValues(int x,int y,int offsetx,int offsety){
  return readPixValues(x,y,offsetx,offsety,gdalconstConstants.GDT_UInt32,1);
}",0.4050632911392405
174936,"@Override public File getOverviewFile(){
  return new File(this.overviewImage);
}","@Override public File getOverviewFile(){
  try {
    return new File(this.overviewImage);
  }
 catch (  Exception e) {
    return null;
  }
}",0.7297297297297297
174937,"/** 
 * @param imageFile
 * @throws IOException
 */
protected void setFile(File imageFile) throws IOException {
  files=new String[1];
  File parent=imageFile;
  if (!parent.isDirectory()) {
    parent=imageFile.getParentFile();
  }
  for (  File f : parent.listFiles()) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      productxml=f;
      files[0]=f.getAbsolutePath();
    }
  }
  if (productxml == null)   throw new IOException(""String_Node_Str"");
  overviewImage=new StringBuilder(parent.getAbsolutePath()).append(""String_Node_Str"").toString();
}","/** 
 * @param imageFile
 * @throws IOException
 */
protected void setFile(File imageFile) throws IOException {
  files=new String[1];
  File parent=imageFile;
  if (!parent.isDirectory()) {
    parent=imageFile.getParentFile();
  }
  for (  File f : parent.listFiles()) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      productxml=f;
      files[0]=f.getAbsolutePath();
    }
  }
  if (productxml == null)   throw new IOException(""String_Node_Str"");
  overviewImage=new StringBuilder(parent.getAbsolutePath()).append(File.separator).append(""String_Node_Str"").toString();
}",0.9798422436459246
174938,"@Override public void preloadLineTile(int y,int length,int band){
  if (y < 0) {
    return;
  }
  preloadedInterval=new int[]{y,y + length};
  Rectangle rect=new Rectangle(0,y,getImage(band).getxSize(),length);
  TIFFImageReadParam tirp=new TIFFImageReadParam();
  tirp.setSourceRegion(rect);
  TIFF tiff=(TIFF)getImage(band);
  try {
    preloadedDataReal=tiff.read(0,tirp).getRaster().getSamples(0,0,rect.width,rect.height,0,(int[])null);
    preloadedDataImg=tiff.read(0,tirp).getRaster().getSamples(0,0,rect.width,rect.height,1,(int[])null);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
}","@Override public synchronized void preloadLineTile(int y,int length,int band){
  if (y < 0) {
    return;
  }
  preloadedInterval=new int[]{y,y + length};
  Rectangle rect=new Rectangle(0,y,getImage(band).getxSize(),length);
  TIFFImageReadParam tirp=new TIFFImageReadParam();
  tirp.setSourceRegion(rect);
  TIFF tiff=(TIFF)getImage(band);
  try {
    preloadedDataReal=tiff.read(0,tirp).getRaster().getSamples(0,0,rect.width,rect.height,0,(int[])null);
    preloadedDataImg=tiff.read(0,tirp).getRaster().getSamples(0,0,rect.width,rect.height,1,(int[])null);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
}",0.9896249002394254
174939,"public void setMaxValue(int value,String polarization){
  this.statisticsBoatForPolarization.get(polarization).maxValue=value;
}","public void setMaxValue(int value,String polarization){
  BoatStatisticMapPolarization.Statistics stats=this.statisticsBoatForPolarization.get(polarization);
  stats.maxValue=value;
  statisticsBoatForPolarization.put(polarization,stats);
}",0.6956521739130435
174940,"/** 
 * aggregate using the neighbours within tilesize
 * @param neighboursdistance
 * @param tilesize
 * @param removelandconnectedpixels
 * @param bands
 * @param mask
 * @param kdist
 * @throws IOException
 */
private void aggregate(DetectedPixels detPixels,int neighboursdistance,int tilesize,boolean removelandconnectedpixels,int[] bands,MaskGeometries mask,KDistributionEstimation kdist) throws IOException {
  int id=0;
  DetectedPixels.BoatPixel pixels[]=detPixels.getAllDetectedPixelsValues().toArray(new DetectedPixels.BoatPixel[0]);
  int count=0;
  for (  DetectedPixels.BoatPixel detectedPix : pixels) {
    count++;
    int xx=detectedPix.x;
    int yy=detectedPix.y;
    if ((count % 100) == 0) {
      if (logger.isInfoEnabled())       logger.info(new StringBuilder().append(""String_Node_Str"").append(count).append(""String_Node_Str"").append(xx).append(""String_Node_Str"").append(yy).toString());
    }
    boolean checked=false;
    for (    BoatConnectedPixelMap boatpixel : detPixels.listboatneighbours) {
      if (boatpixel.containsPixel(xx,yy)) {
        checked=true;
        break;
      }
    }
    if (checked) {
      continue;
    }
    int cornerx=Math.min(Math.max(0,xx - tilesize / 2),gir.getWidth() - tilesize);
    int cornery=Math.min(Math.max(0,yy - tilesize / 2),gir.getHeight() - tilesize);
    int boatx=xx - cornerx;
    int boaty=yy - cornery;
    int numberbands=bands.length;
    int[][] data=new int[numberbands][];
    for (int bandcounter=0; bandcounter < numberbands; bandcounter++) {
      data[bandcounter]=gir.read(cornerx,cornery,tilesize,tilesize,bands[bandcounter]);
    }
    int row=(cornery + 1) / this.verTilesImage;
    int col=(cornerx + 1) / this.horTilesImage;
    TileAnalysis ta=null;
    if (this.blackBorderAnalysis != null)     ta=this.blackBorderAnalysis.getAnalysisTile(row,col);
    double[][] statistics=AnalysisUtil.calculateImagemapStatistics(cornerx,cornery,tilesize,tilesize,row,col,bands,data,kdist,ta);
    double[][] thresholdvalues=new double[numberbands][2];
    boolean pixelabove=false;
    for (int bandcounter=0; bandcounter < numberbands; bandcounter++) {
      double mean=(statistics[bandcounter][1] + statistics[bandcounter][2] + statistics[bandcounter][3]+ statistics[bandcounter][4]) / 4;
      thresholdvalues[bandcounter][0]=mean + 3 * mean * statistics[bandcounter][0];
      thresholdvalues[bandcounter][1]=mean + 5 * mean * statistics[bandcounter][0];
      int value=data[bandcounter][boatx + boaty * tilesize];
      if (value > thresholdvalues[bandcounter][1]) {
        pixelabove=true;
      }
 else {
      }
    }
    if (pixelabove) {
      int[] dataMask=createDataMask(cornerx,cornery,tilesize,tilesize,0,0);
      BoatConnectedPixelMap boatpixel=null;
      try {
        boatpixel=new BoatConnectedPixelMap(cornerx,cornery,xx,yy,id++,data[0][boatx + boaty * tilesize]);
      }
 catch (      Exception e) {
        boatpixel=new BoatConnectedPixelMap(cornerx,cornery,xx,yy,id++,data[0][(boatx + boaty * tilesize) - 1]);
      }
      for (int iBand=0; iBand < numberbands; iBand++) {
        String bb=gir.getBandName(bands[iBand]);
        float thresholdBand=this.thresholdsBandParams.get(bb);
        TileAnalysis bbAnalysis=null;
        if (blackBorderAnalysis != null)         bbAnalysis=blackBorderAnalysis.getAnalysisTile(row,col);
        kdist.setImageData(cornerx,cornery,tilesize,tilesize,iBand,bbAnalysis);
        int[] newdata=gir.read(cornerx,cornery,tilesize,tilesize,bands[iBand]);
        kdist.estimate(newdata,newdata);
        double[] treshTile=kdist.getDetectThresh();
        double threshTotal=treshTile[0] + treshTile[1] + treshTile[2]+ treshTile[3];
        double threshWindowsVals[]=AnalysisUtil.calcThreshWindowVals(thresholdBand,treshTile);
        double tileAvg=0;
        int i=0;
        int y=-1;
        for (; i < data[iBand].length; i++) {
          int x=i % tilesize;
          if (x == 0)           y++;
          try {
            if (dataMask == null || dataMask[x + (y * tilesize)] == 0) {
              tileAvg=tileAvg + data[iBand][i];
            }
          }
 catch (          Exception e) {
            logger.warn(new StringBuilder(e.getMessage()).append(""String_Node_Str"").append(x).append(""String_Node_Str"").append(y).append(""String_Node_Str"").toString());
          }
        }
        tileAvg=tileAvg / i;
        double tileStdDev=treshTile[0] * threshTotal / treshTile[5];
        boatpixel.getStatMap().setTreshold(Precision.round((threshWindowsVals[0] + threshWindowsVals[1] + threshWindowsVals[2]+ threshWindowsVals[3]) / 4,3),bb);
        boatpixel.getStatMap().setTileStd(Precision.round(tileStdDev,3),bb);
        boatpixel.getStatMap().setTileAvg(Precision.round(tileAvg,3),bb);
      }
      detPixels.listboatneighbours.add(boatpixel);
      List<int[]> boataggregatedpixels=new ArrayList<int[]>();
      boolean result=detPixels.checkNeighbours(boataggregatedpixels,data,thresholdvalues,new int[]{boatx,boaty},neighboursdistance,tilesize,dataMask);
      boatpixel.setTouchesLandMask(result);
      for (      int[] pixel : boataggregatedpixels) {
        boatpixel.addConnectedPixel(pixel[0] + cornerx,pixel[1] + cornery,pixel[2],pixel[3] == 1 ? true : false);
      }
    }
  }
  if (removelandconnectedpixels) {
    List<BoatConnectedPixelMap> toRemove=new ArrayList<BoatConnectedPixelMap>();
    for (int i=0; i < detPixels.listboatneighbours.size(); i++) {
      BoatConnectedPixelMap boat=detPixels.listboatneighbours.get(i);
      if (boat.touchesLand()) {
        toRemove.add(boat);
      }
    }
    detPixels.listboatneighbours.removeAll(toRemove);
  }
}","/** 
 * aggregate using the neighbours within tilesize
 * @param neighboursdistance
 * @param tilesize
 * @param removelandconnectedpixels
 * @param bands
 * @param mask
 * @param kdist
 * @throws IOException
 */
private void aggregate(DetectedPixels detPixels,int neighboursdistance,int tilesize,boolean removelandconnectedpixels,int[] bands,MaskGeometries mask,KDistributionEstimation kdist) throws IOException {
  int id=0;
  DetectedPixels.BoatPixel pixels[]=detPixels.getAllDetectedPixelsValues().toArray(new DetectedPixels.BoatPixel[0]);
  int count=0;
  for (  DetectedPixels.BoatPixel detectedPix : pixels) {
    count++;
    int xx=detectedPix.x;
    int yy=detectedPix.y;
    if ((count % 100) == 0) {
      if (logger.isInfoEnabled())       logger.info(new StringBuilder().append(""String_Node_Str"").append(count).append(""String_Node_Str"").append(xx).append(""String_Node_Str"").append(yy).toString());
    }
    boolean checked=false;
    for (    BoatConnectedPixelMap boatpixel : detPixels.listboatneighbours) {
      if (boatpixel.containsPixel(xx,yy)) {
        checked=true;
        break;
      }
    }
    if (checked) {
      continue;
    }
    int cornerx=Math.min(Math.max(0,xx - tilesize / 2),gir.getWidth() - tilesize);
    int cornery=Math.min(Math.max(0,yy - tilesize / 2),gir.getHeight() - tilesize);
    int boatx=xx - cornerx;
    int boaty=yy - cornery;
    int numberbands=bands.length;
    int[][] data=new int[numberbands][];
    for (int bandcounter=0; bandcounter < numberbands; bandcounter++) {
      data[bandcounter]=gir.read(cornerx,cornery,tilesize,tilesize,bands[bandcounter]);
    }
    int row=(cornery + 1) / this.verTilesImage;
    int col=(cornerx + 1) / this.horTilesImage;
    TileAnalysis ta=null;
    if (this.blackBorderAnalysis != null)     ta=this.blackBorderAnalysis.getAnalysisTile(row,col);
    double[][] statistics=AnalysisUtil.calculateImagemapStatistics(cornerx,cornery,tilesize,tilesize,row,col,bands,data,kdist,ta);
    double[][] thresholdvalues=new double[numberbands][2];
    boolean pixelabove=false;
    for (int bandcounter=0; bandcounter < numberbands; bandcounter++) {
      double mean=(statistics[bandcounter][1] + statistics[bandcounter][2] + statistics[bandcounter][3]+ statistics[bandcounter][4]) / 4;
      thresholdvalues[bandcounter][0]=mean + 3 * mean * statistics[bandcounter][0];
      thresholdvalues[bandcounter][1]=mean + 5 * mean * statistics[bandcounter][0];
      int value=data[bandcounter][boatx + boaty * tilesize];
      if (value > thresholdvalues[bandcounter][1]) {
        pixelabove=true;
      }
 else {
      }
    }
    if (pixelabove) {
      int[] dataMask=createDataMask(cornerx,cornery,tilesize,tilesize,0,0);
      BoatConnectedPixelMap boatpixel=null;
      try {
        boatpixel=new BoatConnectedPixelMap(cornerx,cornery,xx,yy,id++,data[0][boatx + boaty * tilesize]);
      }
 catch (      Exception e) {
        boatpixel=new BoatConnectedPixelMap(cornerx,cornery,xx,yy,id++,data[0][(boatx + boaty * tilesize) - 1]);
      }
      for (int iBand=0; iBand < numberbands; iBand++) {
        String bb=gir.getBandName(bands[iBand]);
        float thresholdBand=this.thresholdsBandParams.get(bb);
        TileAnalysis bbAnalysis=null;
        if (blackBorderAnalysis != null)         bbAnalysis=blackBorderAnalysis.getAnalysisTile(row,col);
        kdist.setImageData(cornerx,cornery,tilesize,tilesize,iBand,bbAnalysis);
        int[] newdata=gir.read(cornerx,cornery,tilesize,tilesize,bands[iBand]);
        kdist.estimate(dataMask,newdata);
        double[] treshTile=kdist.getDetectThresh();
        double threshTotal=treshTile[0] + treshTile[1] + treshTile[2]+ treshTile[3];
        double threshWindowsVals[]=AnalysisUtil.calcThreshWindowVals(thresholdBand,treshTile);
        double tileAvg=0;
        int i=0;
        int y=-1;
        for (; i < data[iBand].length; i++) {
          int x=i % tilesize;
          if (x == 0)           y++;
          try {
            if (dataMask == null || dataMask[x + (y * tilesize)] == 0) {
              tileAvg=tileAvg + data[iBand][i];
            }
          }
 catch (          Exception e) {
            logger.warn(new StringBuilder(e.getMessage()).append(""String_Node_Str"").append(x).append(""String_Node_Str"").append(y).append(""String_Node_Str"").toString());
          }
        }
        tileAvg=tileAvg / i;
        double tileStdDev=treshTile[0] * threshTotal / treshTile[5];
        boatpixel.getStatMap().setTreshold(Precision.round((threshWindowsVals[0] + threshWindowsVals[1] + threshWindowsVals[2]+ threshWindowsVals[3]) / 4,3),bb);
        boatpixel.getStatMap().setTileStd(Precision.round(tileStdDev,3),bb);
        boatpixel.getStatMap().setTileAvg(Precision.round(tileAvg,3),bb);
      }
      detPixels.listboatneighbours.add(boatpixel);
      List<int[]> boataggregatedpixels=new ArrayList<int[]>();
      boolean result=detPixels.checkNeighbours(boataggregatedpixels,data,thresholdvalues,new int[]{boatx,boaty},neighboursdistance,tilesize,dataMask);
      boatpixel.setTouchesLandMask(result);
      for (      int[] pixel : boataggregatedpixels) {
        boatpixel.addConnectedPixel(pixel[0] + cornerx,pixel[1] + cornery,pixel[2],pixel[3] == 1 ? true : false);
      }
    }
  }
  if (removelandconnectedpixels) {
    List<BoatConnectedPixelMap> toRemove=new ArrayList<BoatConnectedPixelMap>();
    for (int i=0; i < detPixels.listboatneighbours.size(); i++) {
      BoatConnectedPixelMap boat=detPixels.listboatneighbours.get(i);
      if (boat.touchesLand()) {
        toRemove.add(boat);
      }
    }
    detPixels.listboatneighbours.removeAll(toRemove);
  }
}",0.998669623059867
174941,"/** 
 * try to create the correct reader starting from file name
 * @param file
 * @return
 */
public static List<GeoImageReader> createReaderForName(String file,String geoAlgorithm){
  List<GeoImageReader> girList=new ArrayList<GeoImageReader>();
  try {
    File f=new File(file);
    String parent=f.getParent();
    if (parent != null && (parent.contains(""String_Node_Str"") || file.contains(""String_Node_Str""))) {
      H5File h5file=new H5File(file,H5File.READ);
      H5Group group=((H5Group)h5file.get(""String_Node_Str""));
      List<HObject> hObjs=group.getMemberList();
      Iterator<HObject> it=hObjs.iterator();
      while (it.hasNext()) {
        HObject obj=it.next();
        AbstractCosmoSkymedImage cosmo=null;
        if (obj.getName().equals(""String_Node_Str"")) {
          cosmo=CosmoSkyFactory.instanceCosmoSkymed(h5file,obj.getName(),null);
        }
 else {
          if (h5file.get(obj.getName() + ""String_Node_Str"") != null)           cosmo=CosmoSkyFactory.instanceCosmoSkymed(h5file,obj.getName() + ""String_Node_Str"",obj.getName());
        }
        if (cosmo != null) {
          if (cosmo.initialise()) {
            girList.add(cosmo);
            logger.info(""String_Node_Str"",new Object[]{file,cosmo.getClass()});
          }
          if (girList.size() > 1)           cosmo.setContainsMultipleImage(true);
        }
      }
    }
 else     if (parent.contains(""String_Node_Str"") || parent.contains(""String_Node_Str"")) {
      girList=Sentinel1Factory.instanceS1Reader(f,geoAlgorithm);
    }
 else {
      GeoImageReader gir=null;
      if (parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage(f);
      }
 else       if (parent.contains(""String_Node_Str"") || parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage_SLC(f);
      }
 else       if (parent.contains(""String_Node_Str"") && parent.contains(""String_Node_Str"")) {
        gir=new Radarsat2Image_SLC(f);
      }
 else       if (parent.contains(""String_Node_Str"") && !parent.contains(""String_Node_Str"")) {
        if (GDALUtilities.isGDALAvailable())         gir=new Radarsat2ImageGDAL(f);
 else         gir=new Radarsat2Image(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new Radarsat1Image(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new EnvisatImage_SLC(f);
      }
 else       if (new File(file).getName().equalsIgnoreCase(""String_Node_Str"")) {
        TiffAlosProperties props=new TiffAlosProperties(file);
        if (props.getProductFormat().equalsIgnoreCase(""String_Node_Str"")) {
          gir=new GDALAlosCeos(f);
        }
 else {
          gir=new AlosGeoTiff(f);
        }
      }
 else {
        return null;
      }
      if (gir.initialise()) {
        logger.info(""String_Node_Str"",new Object[]{file,gir.getClass()});
        girList.add(gir);
      }
 else {
        girList=null;
      }
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + file,ex);
    girList=null;
  }
 finally {
    return girList;
  }
}","/** 
 * try to create the correct reader starting from file name
 * @param file
 * @return
 */
public static List<GeoImageReader> createReaderForName(String file,String geoAlgorithm){
  List<GeoImageReader> girList=new ArrayList<GeoImageReader>();
  try {
    File f=new File(file);
    String parent=f.getParent();
    if (parent != null && (parent.contains(""String_Node_Str"") || file.contains(""String_Node_Str""))) {
      H5File h5file=new H5File(file,H5File.READ);
      H5Group group=((H5Group)h5file.get(""String_Node_Str""));
      List<HObject> hObjs=group.getMemberList();
      Iterator<HObject> it=hObjs.iterator();
      while (it.hasNext()) {
        HObject obj=it.next();
        AbstractCosmoSkymedImage cosmo=null;
        if (obj.getName().equals(""String_Node_Str"")) {
          cosmo=CosmoSkyFactory.instanceCosmoSkymed(h5file,obj.getName(),null);
        }
 else {
          if (h5file.get(obj.getName() + ""String_Node_Str"") != null)           cosmo=CosmoSkyFactory.instanceCosmoSkymed(h5file,obj.getName() + ""String_Node_Str"",obj.getName());
        }
        if (cosmo != null) {
          if (cosmo.initialise()) {
            girList.add(cosmo);
            logger.info(""String_Node_Str"",new Object[]{file,cosmo.getClass()});
          }
          if (girList.size() > 1)           cosmo.setContainsMultipleImage(true);
        }
      }
    }
 else     if (parent.contains(""String_Node_Str"") || parent.contains(""String_Node_Str"")) {
      girList=Sentinel1Factory.instanceS1Reader(f,geoAlgorithm);
    }
 else {
      GeoImageReader gir=null;
      if (parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage(f);
      }
 else       if (parent.contains(""String_Node_Str"") || parent.contains(""String_Node_Str"")) {
        gir=new TerrasarXImage_SLC(f);
      }
 else       if (parent.contains(""String_Node_Str"") && parent.contains(""String_Node_Str"")) {
        if (GDALUtilities.isGDALAvailable())         gir=new Radarsat2Image_SLCGDAL(f);
 else         gir=new Radarsat2Image_SLC(f);
      }
 else       if (parent.contains(""String_Node_Str"") && !parent.contains(""String_Node_Str"")) {
        if (GDALUtilities.isGDALAvailable())         gir=new Radarsat2ImageGDAL(f);
 else         gir=new Radarsat2Image(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new Radarsat1Image(f);
      }
 else       if (parent.contains(""String_Node_Str"")) {
        gir=new EnvisatImage_SLC(f);
      }
 else       if (new File(file).getName().equalsIgnoreCase(""String_Node_Str"")) {
        TiffAlosProperties props=new TiffAlosProperties(file);
        if (props.getProductFormat().equalsIgnoreCase(""String_Node_Str"")) {
          gir=new GDALAlosCeos(f);
        }
 else {
          gir=new AlosGeoTiff(f);
        }
      }
 else {
        return null;
      }
      if (gir.initialise()) {
        logger.info(""String_Node_Str"",new Object[]{file,gir.getClass()});
        girList.add(gir);
      }
 else {
        girList=null;
      }
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + file,ex);
    girList=null;
  }
 finally {
    return girList;
  }
}",0.8215859030837004
174942,"/** 
 * @param x
 * @param y
 * @param offsetx
 * @param offsety
 * @return
 */
public synchronized int[] readPixValues(int x,int y,int offsetx,int offsety){
  int pixels=offsetx * offsety;
  Band b=data.GetRasterBand(band);
  int buf_size=pixels;
  int[] dd=new int[buf_size];
  try {
    b.ReadRaster(x,y,offsetx,offsety,gdalconstConstants.GDT_UInt32,dd);
  }
 catch (  Exception ex2) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception ex) {
    }
    b.ReadRaster(x,y,offsetx,offsety,gdalconstConstants.GDT_UInt32,dd);
  }
  return dd;
}","public synchronized int[] readPixValues(int x,int y,int offsetx,int offsety){
  return readPixValues(x,y,offsetx,offsety,gdalconstConstants.GDT_UInt32,1);
}",0.4050632911392405
174943,"@Override public File getOverviewFile(){
  return new File(this.overviewImage);
}","@Override public File getOverviewFile(){
  try {
    return new File(this.overviewImage);
  }
 catch (  Exception e) {
    return null;
  }
}",0.7297297297297297
174944,"/** 
 * @param imageFile
 * @throws IOException
 */
protected void setFile(File imageFile) throws IOException {
  files=new String[1];
  File parent=imageFile;
  if (!parent.isDirectory()) {
    parent=imageFile.getParentFile();
  }
  for (  File f : parent.listFiles()) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      productxml=f;
      files[0]=f.getAbsolutePath();
    }
  }
  if (productxml == null)   throw new IOException(""String_Node_Str"");
  overviewImage=new StringBuilder(parent.getAbsolutePath()).append(""String_Node_Str"").toString();
}","/** 
 * @param imageFile
 * @throws IOException
 */
protected void setFile(File imageFile) throws IOException {
  files=new String[1];
  File parent=imageFile;
  if (!parent.isDirectory()) {
    parent=imageFile.getParentFile();
  }
  for (  File f : parent.listFiles()) {
    if (f.getName().endsWith(""String_Node_Str"")) {
      productxml=f;
      files[0]=f.getAbsolutePath();
    }
  }
  if (productxml == null)   throw new IOException(""String_Node_Str"");
  overviewImage=new StringBuilder(parent.getAbsolutePath()).append(File.separator).append(""String_Node_Str"").toString();
}",0.9798422436459246
174945,"@Override public void preloadLineTile(int y,int length,int band){
  if (y < 0) {
    return;
  }
  preloadedInterval=new int[]{y,y + length};
  Rectangle rect=new Rectangle(0,y,getImage(band).getxSize(),length);
  TIFFImageReadParam tirp=new TIFFImageReadParam();
  tirp.setSourceRegion(rect);
  TIFF tiff=(TIFF)getImage(band);
  try {
    preloadedDataReal=tiff.read(0,tirp).getRaster().getSamples(0,0,rect.width,rect.height,0,(int[])null);
    preloadedDataImg=tiff.read(0,tirp).getRaster().getSamples(0,0,rect.width,rect.height,1,(int[])null);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
}","@Override public synchronized void preloadLineTile(int y,int length,int band){
  if (y < 0) {
    return;
  }
  preloadedInterval=new int[]{y,y + length};
  Rectangle rect=new Rectangle(0,y,getImage(band).getxSize(),length);
  TIFFImageReadParam tirp=new TIFFImageReadParam();
  tirp.setSourceRegion(rect);
  TIFF tiff=(TIFF)getImage(band);
  try {
    preloadedDataReal=tiff.read(0,tirp).getRaster().getSamples(0,0,rect.width,rect.height,0,(int[])null);
    preloadedDataImg=tiff.read(0,tirp).getRaster().getSamples(0,0,rect.width,rect.height,1,(int[])null);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
}",0.9896249002394254
174946,"public void setMaxValue(int value,String polarization){
  this.statisticsBoatForPolarization.get(polarization).maxValue=value;
}","public void setMaxValue(int value,String polarization){
  BoatStatisticMapPolarization.Statistics stats=this.statisticsBoatForPolarization.get(polarization);
  stats.maxValue=value;
  statisticsBoatForPolarization.put(polarization,stats);
}",0.6956521739130435
174947,"/** 
 * aggregate using the neighbours within tilesize
 * @param neighboursdistance
 * @param tilesize
 * @param removelandconnectedpixels
 * @param bands
 * @param mask
 * @param kdist
 * @throws IOException
 */
private void aggregate(DetectedPixels detPixels,int neighboursdistance,int tilesize,boolean removelandconnectedpixels,int[] bands,MaskGeometries mask,KDistributionEstimation kdist) throws IOException {
  int id=0;
  DetectedPixels.BoatPixel pixels[]=detPixels.getAllDetectedPixelsValues().toArray(new DetectedPixels.BoatPixel[0]);
  int count=0;
  for (  DetectedPixels.BoatPixel detectedPix : pixels) {
    count++;
    int xx=detectedPix.x;
    int yy=detectedPix.y;
    if ((count % 100) == 0) {
      if (logger.isInfoEnabled())       logger.info(new StringBuilder().append(""String_Node_Str"").append(count).append(""String_Node_Str"").append(xx).append(""String_Node_Str"").append(yy).toString());
    }
    boolean checked=false;
    for (    BoatConnectedPixelMap boatpixel : detPixels.listboatneighbours) {
      if (boatpixel.containsPixel(xx,yy)) {
        checked=true;
        break;
      }
    }
    if (checked) {
      continue;
    }
    int cornerx=Math.min(Math.max(0,xx - tilesize / 2),gir.getWidth() - tilesize);
    int cornery=Math.min(Math.max(0,yy - tilesize / 2),gir.getHeight() - tilesize);
    int boatx=xx - cornerx;
    int boaty=yy - cornery;
    int numberbands=bands.length;
    int[][] data=new int[numberbands][];
    for (int bandcounter=0; bandcounter < numberbands; bandcounter++) {
      data[bandcounter]=gir.read(cornerx,cornery,tilesize,tilesize,bands[bandcounter]);
    }
    int row=(cornery + 1) / this.verTilesImage;
    int col=(cornerx + 1) / this.horTilesImage;
    TileAnalysis ta=null;
    if (this.blackBorderAnalysis != null)     ta=this.blackBorderAnalysis.getAnalysisTile(row,col);
    double[][] statistics=AnalysisUtil.calculateImagemapStatistics(cornerx,cornery,tilesize,tilesize,row,col,bands,data,kdist,ta);
    double[][] thresholdvalues=new double[numberbands][2];
    boolean pixelabove=false;
    for (int bandcounter=0; bandcounter < numberbands; bandcounter++) {
      double mean=(statistics[bandcounter][1] + statistics[bandcounter][2] + statistics[bandcounter][3]+ statistics[bandcounter][4]) / 4;
      thresholdvalues[bandcounter][0]=mean + 3 * mean * statistics[bandcounter][0];
      thresholdvalues[bandcounter][1]=mean + 5 * mean * statistics[bandcounter][0];
      int value=data[bandcounter][boatx + boaty * tilesize];
      if (value > thresholdvalues[bandcounter][1]) {
        pixelabove=true;
      }
 else {
      }
    }
    if (pixelabove) {
      int[] dataMask=createDataMask(cornerx,cornery,tilesize,tilesize,0,0);
      BoatConnectedPixelMap boatpixel=null;
      try {
        boatpixel=new BoatConnectedPixelMap(cornerx,cornery,xx,yy,id++,data[0][boatx + boaty * tilesize]);
      }
 catch (      Exception e) {
        boatpixel=new BoatConnectedPixelMap(cornerx,cornery,xx,yy,id++,data[0][(boatx + boaty * tilesize) - 1]);
      }
      for (int iBand=0; iBand < numberbands; iBand++) {
        String bb=gir.getBandName(bands[iBand]);
        float thresholdBand=this.thresholdsBandParams.get(bb);
        TileAnalysis bbAnalysis=null;
        if (blackBorderAnalysis != null)         bbAnalysis=blackBorderAnalysis.getAnalysisTile(row,col);
        kdist.setImageData(cornerx,cornery,tilesize,tilesize,iBand,bbAnalysis);
        int[] newdata=gir.read(cornerx,cornery,tilesize,tilesize,bands[iBand]);
        kdist.estimate(newdata,newdata);
        double[] treshTile=kdist.getDetectThresh();
        double threshTotal=treshTile[0] + treshTile[1] + treshTile[2]+ treshTile[3];
        double threshWindowsVals[]=AnalysisUtil.calcThreshWindowVals(thresholdBand,treshTile);
        double tileAvg=0;
        int i=0;
        int y=-1;
        for (; i < data[iBand].length; i++) {
          int x=i % tilesize;
          if (x == 0)           y++;
          try {
            if (dataMask == null || dataMask[x + (y * tilesize)] == 0) {
              tileAvg=tileAvg + data[iBand][i];
            }
          }
 catch (          Exception e) {
            logger.warn(new StringBuilder(e.getMessage()).append(""String_Node_Str"").append(x).append(""String_Node_Str"").append(y).append(""String_Node_Str"").toString());
          }
        }
        tileAvg=tileAvg / i;
        double tileStdDev=treshTile[0] * threshTotal / treshTile[5];
        boatpixel.getStatMap().setTreshold(Precision.round((threshWindowsVals[0] + threshWindowsVals[1] + threshWindowsVals[2]+ threshWindowsVals[3]) / 4,3),bb);
        boatpixel.getStatMap().setTileStd(Precision.round(tileStdDev,3),bb);
        boatpixel.getStatMap().setTileAvg(Precision.round(tileAvg,3),bb);
      }
      detPixels.listboatneighbours.add(boatpixel);
      List<int[]> boataggregatedpixels=new ArrayList<int[]>();
      boolean result=detPixels.checkNeighbours(boataggregatedpixels,data,thresholdvalues,new int[]{boatx,boaty},neighboursdistance,tilesize,dataMask);
      boatpixel.setTouchesLandMask(result);
      for (      int[] pixel : boataggregatedpixels) {
        boatpixel.addConnectedPixel(pixel[0] + cornerx,pixel[1] + cornery,pixel[2],pixel[3] == 1 ? true : false);
      }
    }
  }
  if (removelandconnectedpixels) {
    List<BoatConnectedPixelMap> toRemove=new ArrayList<BoatConnectedPixelMap>();
    for (int i=0; i < detPixels.listboatneighbours.size(); i++) {
      BoatConnectedPixelMap boat=detPixels.listboatneighbours.get(i);
      if (boat.touchesLand()) {
        toRemove.add(boat);
      }
    }
    detPixels.listboatneighbours.removeAll(toRemove);
  }
}","/** 
 * aggregate using the neighbours within tilesize
 * @param neighboursdistance
 * @param tilesize
 * @param removelandconnectedpixels
 * @param bands
 * @param mask
 * @param kdist
 * @throws IOException
 */
private void aggregate(DetectedPixels detPixels,int neighboursdistance,int tilesize,boolean removelandconnectedpixels,int[] bands,MaskGeometries mask,KDistributionEstimation kdist) throws IOException {
  int id=0;
  DetectedPixels.BoatPixel pixels[]=detPixels.getAllDetectedPixelsValues().toArray(new DetectedPixels.BoatPixel[0]);
  int count=0;
  for (  DetectedPixels.BoatPixel detectedPix : pixels) {
    count++;
    int xx=detectedPix.x;
    int yy=detectedPix.y;
    if ((count % 100) == 0) {
      if (logger.isInfoEnabled())       logger.info(new StringBuilder().append(""String_Node_Str"").append(count).append(""String_Node_Str"").append(xx).append(""String_Node_Str"").append(yy).toString());
    }
    boolean checked=false;
    for (    BoatConnectedPixelMap boatpixel : detPixels.listboatneighbours) {
      if (boatpixel.containsPixel(xx,yy)) {
        checked=true;
        break;
      }
    }
    if (checked) {
      continue;
    }
    int cornerx=Math.min(Math.max(0,xx - tilesize / 2),gir.getWidth() - tilesize);
    int cornery=Math.min(Math.max(0,yy - tilesize / 2),gir.getHeight() - tilesize);
    int boatx=xx - cornerx;
    int boaty=yy - cornery;
    int numberbands=bands.length;
    int[][] data=new int[numberbands][];
    for (int bandcounter=0; bandcounter < numberbands; bandcounter++) {
      data[bandcounter]=gir.read(cornerx,cornery,tilesize,tilesize,bands[bandcounter]);
    }
    int row=(cornery + 1) / this.verTilesImage;
    int col=(cornerx + 1) / this.horTilesImage;
    TileAnalysis ta=null;
    if (this.blackBorderAnalysis != null)     ta=this.blackBorderAnalysis.getAnalysisTile(row,col);
    double[][] statistics=AnalysisUtil.calculateImagemapStatistics(cornerx,cornery,tilesize,tilesize,row,col,bands,data,kdist,ta);
    double[][] thresholdvalues=new double[numberbands][2];
    boolean pixelabove=false;
    for (int bandcounter=0; bandcounter < numberbands; bandcounter++) {
      double mean=(statistics[bandcounter][1] + statistics[bandcounter][2] + statistics[bandcounter][3]+ statistics[bandcounter][4]) / 4;
      thresholdvalues[bandcounter][0]=mean + 3 * mean * statistics[bandcounter][0];
      thresholdvalues[bandcounter][1]=mean + 5 * mean * statistics[bandcounter][0];
      int value=data[bandcounter][boatx + boaty * tilesize];
      if (value > thresholdvalues[bandcounter][1]) {
        pixelabove=true;
      }
 else {
      }
    }
    if (pixelabove) {
      int[] dataMask=createDataMask(cornerx,cornery,tilesize,tilesize,0,0);
      BoatConnectedPixelMap boatpixel=null;
      try {
        boatpixel=new BoatConnectedPixelMap(cornerx,cornery,xx,yy,id++,data[0][boatx + boaty * tilesize]);
      }
 catch (      Exception e) {
        boatpixel=new BoatConnectedPixelMap(cornerx,cornery,xx,yy,id++,data[0][(boatx + boaty * tilesize) - 1]);
      }
      for (int iBand=0; iBand < numberbands; iBand++) {
        String bb=gir.getBandName(bands[iBand]);
        float thresholdBand=this.thresholdsBandParams.get(bb);
        TileAnalysis bbAnalysis=null;
        if (blackBorderAnalysis != null)         bbAnalysis=blackBorderAnalysis.getAnalysisTile(row,col);
        kdist.setImageData(cornerx,cornery,tilesize,tilesize,iBand,bbAnalysis);
        int[] newdata=gir.read(cornerx,cornery,tilesize,tilesize,bands[iBand]);
        kdist.estimate(dataMask,newdata);
        double[] treshTile=kdist.getDetectThresh();
        double threshTotal=treshTile[0] + treshTile[1] + treshTile[2]+ treshTile[3];
        double threshWindowsVals[]=AnalysisUtil.calcThreshWindowVals(thresholdBand,treshTile);
        double tileAvg=0;
        int i=0;
        int y=-1;
        for (; i < data[iBand].length; i++) {
          int x=i % tilesize;
          if (x == 0)           y++;
          try {
            if (dataMask == null || dataMask[x + (y * tilesize)] == 0) {
              tileAvg=tileAvg + data[iBand][i];
            }
          }
 catch (          Exception e) {
            logger.warn(new StringBuilder(e.getMessage()).append(""String_Node_Str"").append(x).append(""String_Node_Str"").append(y).append(""String_Node_Str"").toString());
          }
        }
        tileAvg=tileAvg / i;
        double tileStdDev=treshTile[0] * threshTotal / treshTile[5];
        boatpixel.getStatMap().setTreshold(Precision.round((threshWindowsVals[0] + threshWindowsVals[1] + threshWindowsVals[2]+ threshWindowsVals[3]) / 4,3),bb);
        boatpixel.getStatMap().setTileStd(Precision.round(tileStdDev,3),bb);
        boatpixel.getStatMap().setTileAvg(Precision.round(tileAvg,3),bb);
      }
      detPixels.listboatneighbours.add(boatpixel);
      List<int[]> boataggregatedpixels=new ArrayList<int[]>();
      boolean result=detPixels.checkNeighbours(boataggregatedpixels,data,thresholdvalues,new int[]{boatx,boaty},neighboursdistance,tilesize,dataMask);
      boatpixel.setTouchesLandMask(result);
      for (      int[] pixel : boataggregatedpixels) {
        boatpixel.addConnectedPixel(pixel[0] + cornerx,pixel[1] + cornery,pixel[2],pixel[3] == 1 ? true : false);
      }
    }
  }
  if (removelandconnectedpixels) {
    List<BoatConnectedPixelMap> toRemove=new ArrayList<BoatConnectedPixelMap>();
    for (int i=0; i < detPixels.listboatneighbours.size(); i++) {
      BoatConnectedPixelMap boat=detPixels.listboatneighbours.get(i);
      if (boat.touchesLand()) {
        toRemove.add(boat);
      }
    }
    detPixels.listboatneighbours.removeAll(toRemove);
  }
}",0.998669623059867
174948,"public boolean contains(String fileName){
  if (fileName == null) {
    return false;
  }
  fileName=clean(fileName);
  java.io.File file;
  if (fileName.startsWith(getPath().getAbsolutePath())) {
    file=new java.io.File(fileName);
  }
 else {
    file=new File(new StringBuilder(getPath().getAbsolutePath()).append(""String_Node_Str"").append(fileName).toString());
  }
  if (file.exists()) {
    return true;
  }
  return false;
}","/** 
 * @param fileName
 * @return
 */
public boolean contains(String fileName){
  if (fileName == null) {
    return false;
  }
  fileName=clean(fileName);
  java.io.File file;
  if (fileName.startsWith(getPath().getAbsolutePath())) {
    file=new java.io.File(fileName);
  }
 else {
    file=new File(new StringBuilder(getPath().getAbsolutePath()).append(""String_Node_Str"").append(fileName).toString());
  }
  if (file.exists()) {
    return true;
  }
  return false;
}",0.956810631229236
174949,"public ServiceTile(File tilefile,int level,int i,int j){
  super();
  this.tileFile=tilefile;
  this.i=i;
  this.j=j;
  this.level=level;
}","public ServiceTile(String initfile,int level,int i,int j){
  super();
  this.initfile=initfile;
  this.i=i;
  this.j=j;
  this.level=level;
}",0.9
174950,"private boolean tryFileCache(GL2 gl,File file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  boolean ok=true;
  if (file.exists() && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(file);
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(file);
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file.getPath() + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file.getAbsolutePath(),t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}","private boolean tryFileCache(GL gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=new StringBuilder(""String_Node_Str"").append(level).append(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).toString();
  Cache cacheInstance=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  boolean ok=true;
  if (cacheInstance.contains(file) & !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file,t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}",0.762481089258699
174951,"/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL2 gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.glBegin(GL2.GL_POLYGON);
  gl.glTexCoord2f(coords.left(),coords.top());
  gl.glVertex2f(xmin,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.top());
  gl.glVertex2f(xmax,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.bottom());
  gl.glVertex2f(xmax,1 - ymax);
  gl.glTexCoord2f(coords.left(),coords.bottom());
  gl.glVertex2f(xmin,1 - ymax);
  gl.glEnd();
  texture.disable(gl);
}","/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.getGL2().glBegin(GL2.GL_QUADS);
  gl.getGL2().glTexCoord2f(coords.left(),coords.top());
  gl.getGL2().glVertex2f(xmin,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.top());
  gl.getGL2().glVertex2f(xmax,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.bottom());
  gl.getGL2().glVertex2f(xmax,1 - ymax);
  gl.getGL2().glTexCoord2f(coords.left(),coords.bottom());
  gl.getGL2().glVertex2f(xmin,1 - ymax);
  gl.getGL2().glEnd();
  texture.disable(gl);
}",0.9191430545957152
174952,"private void disposeSync(){
  poolExcutorService.shutdownNow();
  poolExcutorService=null;
  activeGir.dispose();
  activeGir=null;
  tcm.clear();
  tcm=null;
  submitedTiles.clear();
  submitedTiles=null;
  imagePool.dispose();
  imagePool=null;
  SumoPlatform.getApplication().getLayerManager().removeLayer(this);
}","private void disposeSync(){
  poolExcutorService.shutdownNow();
  poolExcutorService=null;
  activeGir.dispose();
  activeGir=null;
  tcm.clear();
  tcm=null;
  submitedTiles.clear();
  submitedTiles=null;
  SumoPlatform.getApplication().getLayerManager().removeLayer(this);
}",0.7689713322091062
174953,"@Override public void dispose(){
  disposed=true;
  if (poolExcutorService != null) {
    poolExcutorService.shutdownNow();
    poolExcutorService=null;
  }
  if (activeGir != null) {
    activeGir.dispose();
    activeGir=null;
  }
  if (tcm != null) {
    tcm.clear();
    tcm=null;
  }
  if (submitedTiles != null) {
    submitedTiles.clear();
    submitedTiles=null;
  }
  if (imagePool != null) {
    imagePool.dispose();
    imagePool=null;
  }
  SumoPlatform.getApplication().getLayerManager().removeLayer(this);
}","@Override public void dispose(){
  disposed=true;
  if (poolExcutorService != null) {
    poolExcutorService.shutdownNow();
    poolExcutorService=null;
  }
  if (activeGir != null) {
    activeGir.dispose();
    activeGir=null;
  }
  if (tcm != null) {
    tcm.clear();
    tcm=null;
  }
  if (submitedTiles != null) {
    submitedTiles.clear();
    submitedTiles=null;
  }
  SumoPlatform.getApplication().getLayerManager().removeLayer(this);
}",0.7991718426501035
174954,"/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.path.getAbsolutePath(),AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}","/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<Object[]>> remove1=new ArrayList<Future<Object[]>>();
  for (  Future<Object[]> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        Object[] o=f.get();
        submitedTiles.remove(o[1]);
        if (o.length > 2 && o[2] != null) {
          tcm.add((String)o[0],AWTTextureIO.newTexture(gl.getGLProfile(),(BufferedImage)o[2],false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}",0.7748513169073916
174955,"@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL2 gl=context.getGL().getGL2();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                final String file=new StringBuffer(""String_Node_Str"" + lll + ""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                final File f=c.newFile(file);
                if (!tryMemoryCache(gl,f.getAbsolutePath(),lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,f,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          final File f=c.newFile(file);
          if (!tryMemoryCache(gl,f.getAbsolutePath(),0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,f,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(f,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}","@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL gl=context.getGL();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.getGL2().glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                String file=new StringBuffer(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,file,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,file,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(initfile,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}",0.8967569175840524
174956,"/** 
 * @param gir
 */
public ImageLayer(GeoImageReader gir){
  iReader=ImageIO.getImageReadersByFormatName(""String_Node_Str"");
  pngReader=(ImageReader)iReader.next();
  this.activeGir=gir;
  poolSize=Integer.parseInt(ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
  submitedTiles=new ArrayList<String>();
  imagePool=new ImagePool(gir,poolSize);
  setName(gir);
  activeBand=0;
  levels=(int)(Math.sqrt(Math.max(gir.getWidth() / Constant.TILE_SIZE_DOUBLE,gir.getHeight() / Constant.TILE_SIZE_DOUBLE))) + 1;
  maxlevels=(int)(Math.sqrt(Math.max(gir.getWidth() / (Constant.TILE_SIZE_DOUBLE * 2),gir.getHeight() / (Constant.TILE_SIZE_DOUBLE * 2)))) + 1;
  curlevel=levels;
  xpadding=(((1 << levels) << 8) - gir.getWidth()) / 2;
  ypadding=(((1 << levels) << 8) - gir.getHeight()) / 2;
  String temp=SumoPlatform.getApplication().getConfiguration().getMaxTileBuffer();
  int maxBuffer=Integer.parseInt(temp);
  tcm=new TextureCacheManager(maxBuffer);
  setInitialContrast();
  maxnumberoftiles=SumoPlatform.getApplication().getConfiguration().getMaxNumOfTiles();
  createMatrixTileOrder();
  int tileSize=(int)(Constant.TILESIZE / gir.getPixelsize()[0]);
  if (tileSize < Constant.TILESIZEPIXELS)   tileSize=Constant.TILESIZEPIXELS;
  this.horizontalTilesImage=gir.getWidth() / tileSize;
  this.verticalTilesImage=gir.getHeight() / tileSize;
  this.realTileSizeX=gir.getWidth() / horizontalTilesImage;
  this.realTileSizeY=gir.getHeight() / verticalTilesImage;
}","/** 
 * @param gir
 */
public ImageLayer(GeoImageReader gir){
  iReader=ImageIO.getImageReadersByFormatName(""String_Node_Str"");
  pngReader=(ImageReader)iReader.next();
  this.activeGir=gir;
  poolSize=Integer.parseInt(ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str""));
  poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
  submitedTiles=new ArrayList<String>();
  setName(gir);
  activeBand=0;
  levels=(int)(Math.sqrt(Math.max(gir.getWidth() / Constant.TILE_SIZE_DOUBLE,gir.getHeight() / Constant.TILE_SIZE_DOUBLE))) + 1;
  maxlevels=(int)(Math.sqrt(Math.max(gir.getWidth() / (Constant.TILE_SIZE_DOUBLE * 2),gir.getHeight() / (Constant.TILE_SIZE_DOUBLE * 2)))) + 1;
  curlevel=levels;
  xpadding=(((1 << levels) << 8) - gir.getWidth()) / 2;
  ypadding=(((1 << levels) << 8) - gir.getHeight()) / 2;
  String temp=SumoPlatform.getApplication().getConfiguration().getMaxTileBuffer();
  int maxBuffer=Integer.parseInt(temp);
  tcm=new TextureCacheManager(maxBuffer);
  setInitialContrast();
  maxnumberoftiles=SumoPlatform.getApplication().getConfiguration().getMaxNumOfTiles();
  createMatrixTileOrder();
  int tileSize=(int)(Constant.TILESIZE / gir.getPixelsize()[0]);
  if (tileSize < Constant.TILESIZEPIXELS)   tileSize=Constant.TILESIZEPIXELS;
  this.horizontalTilesImage=gir.getWidth() / tileSize;
  this.verticalTilesImage=gir.getHeight() / tileSize;
  this.realTileSizeX=gir.getWidth() / horizontalTilesImage;
  this.realTileSizeY=gir.getHeight() / verticalTilesImage;
}",0.9870866141732284
174957,"public TileInfo call(){
  if (tileFile == null) {
    return null;
  }
  GeoImageReader gir2=imagePool.get();
  String next=buildTileId(level,i,j);
  if (gir2 == null) {
    return new TileInfo(next,tileFile,null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",tileFile);
    return new TileInfo(next,tileFile,out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,tileFile,null);
}","public Object[] call(){
  Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  StringBuilder ff=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).append(""String_Node_Str"");
  final File f=c.newFile(ff.toString());
  if (f == null) {
    return new Object[]{ff.toString(),null};
  }
  String next=new StringBuilder().append(level).append(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).toString();
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(activeGir,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",f);
    return new Object[]{f.getAbsolutePath(),next,out};
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
  }
  return new Object[]{f.getAbsolutePath(),next,null};
}",0.528101802757158
174958,"private boolean tryMemoryCache(GL2 gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}","private boolean tryMemoryCache(GL gl,String file,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}",0.9521829521829522
174959,"/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final File tileFile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(tileFile,level,i,j)));
  }
}","/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final String initfile,final int level,final int i,final int j){
  String tilesStr=new StringBuffer(level).append(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).toString();
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(initfile,level,i,j)));
  }
}",0.6270270270270271
174960,"public ServiceTile(String initfile,int level,int i,int j){
  super();
  this.initfile=initfile;
  this.i=i;
  this.j=j;
  this.level=level;
}","public ServiceTile(File tilefile,int level,int i,int j){
  super();
  this.tileFile=tilefile;
  this.i=i;
  this.j=j;
  this.level=level;
}",0.8928571428571429
174961,"private boolean tryFileCache(GL gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  Cache cacheInstance=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  boolean ok=true;
  if (cacheInstance.contains(file) && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file,t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}","private boolean tryFileCache(GL2 gl,File file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  boolean ok=true;
  if (file.exists() && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(file);
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(file);
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file.getPath() + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file.getAbsolutePath(),t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}",0.809197256958451
174962,"/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.getGL2().glBegin(GL2.GL_POLYGON);
  gl.getGL2().glTexCoord2f(coords.left(),coords.top());
  gl.getGL2().glVertex2f(xmin,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.top());
  gl.getGL2().glVertex2f(xmax,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.bottom());
  gl.getGL2().glVertex2f(xmax,1 - ymax);
  gl.getGL2().glTexCoord2f(coords.left(),coords.bottom());
  gl.getGL2().glVertex2f(xmin,1 - ymax);
  gl.getGL2().glEnd();
  texture.disable(gl);
}","/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL2 gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.glBegin(GL2.GL_POLYGON);
  gl.glTexCoord2f(coords.left(),coords.top());
  gl.glVertex2f(xmin,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.top());
  gl.glVertex2f(xmax,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.bottom());
  gl.glVertex2f(xmax,1 - ymax);
  gl.glTexCoord2f(coords.left(),coords.bottom());
  gl.glVertex2f(xmin,1 - ymax);
  gl.glEnd();
  texture.disable(gl);
}",0.9371980676328504
174963,"public TileInfo(String id,String absPath,BufferedImage img){
  idTile=id;
  path=absPath;
  pngImage=img;
}","public TileInfo(String id,File absPath,BufferedImage img){
  idTile=id;
  path=absPath;
  pngImage=img;
}",0.9622641509433962
174964,"/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.idTile,AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}","/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.path.getAbsolutePath(),AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}",0.9758203799654576
174965,"@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL gl=context.getGL();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.getGL2().glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                String file=new StringBuffer(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,file,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,file,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(initfile,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}","@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL2 gl=context.getGL().getGL2();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                final String file=new StringBuffer(""String_Node_Str"" + lll + ""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                final File f=c.newFile(file);
                if (!tryMemoryCache(gl,f.getAbsolutePath(),lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,f,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          final File f=c.newFile(file);
          if (!tryMemoryCache(gl,f.getAbsolutePath(),0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,f,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(f,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}",0.969942653747281
174966,"public TileInfo call(){
  Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  StringBuilder ff=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).append(""String_Node_Str"");
  final File f=c.newFile(ff.toString());
  if (f == null) {
    return new TileInfo(null,ff.toString(),null);
  }
  GeoImageReader gir2=imagePool.get();
  String next=new StringBuilder().append(level).append(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).toString();
  if (gir2 == null) {
    return new TileInfo(next,f.getAbsolutePath(),null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",f);
    return new TileInfo(next,f.getAbsolutePath(),out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,f.getAbsolutePath(),null);
}","public TileInfo call(){
  if (tileFile == null) {
    return null;
  }
  GeoImageReader gir2=imagePool.get();
  String next=buildTileId(level,i,j);
  if (gir2 == null) {
    return new TileInfo(next,tileFile,null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",tileFile);
    return new TileInfo(next,tileFile,out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,tileFile,null);
}",0.5569744597249509
174967,"private boolean tryMemoryCache(GL gl,String file,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}","private boolean tryMemoryCache(GL2 gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}",0.9521829521829522
174968,"/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final String initfile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(initfile,level,i,j)));
  }
}","/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final File tileFile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(tileFile,level,i,j)));
  }
}",0.9592875318066156
174969,"public ServiceTile(String initfile,int level,int i,int j){
  super();
  this.initfile=initfile;
  this.i=i;
  this.j=j;
  this.level=level;
}","public ServiceTile(File tilefile,int level,int i,int j){
  super();
  this.tileFile=tilefile;
  this.i=i;
  this.j=j;
  this.level=level;
}",0.8928571428571429
174970,"private boolean tryFileCache(GL gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  Cache cacheInstance=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  boolean ok=true;
  if (cacheInstance.contains(file) && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file,t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}","private boolean tryFileCache(GL2 gl,File file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  boolean ok=true;
  if (file.exists() && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(file);
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(file);
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file.getPath() + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file.getAbsolutePath(),t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}",0.809197256958451
174971,"/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.getGL2().glBegin(GL2.GL_POLYGON);
  gl.getGL2().glTexCoord2f(coords.left(),coords.top());
  gl.getGL2().glVertex2f(xmin,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.top());
  gl.getGL2().glVertex2f(xmax,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.bottom());
  gl.getGL2().glVertex2f(xmax,1 - ymax);
  gl.getGL2().glTexCoord2f(coords.left(),coords.bottom());
  gl.getGL2().glVertex2f(xmin,1 - ymax);
  gl.getGL2().glEnd();
  texture.disable(gl);
}","/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL2 gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.glBegin(GL2.GL_POLYGON);
  gl.glTexCoord2f(coords.left(),coords.top());
  gl.glVertex2f(xmin,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.top());
  gl.glVertex2f(xmax,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.bottom());
  gl.glVertex2f(xmax,1 - ymax);
  gl.glTexCoord2f(coords.left(),coords.bottom());
  gl.glVertex2f(xmin,1 - ymax);
  gl.glEnd();
  texture.disable(gl);
}",0.9371980676328504
174972,"public TileInfo(String id,String absPath,BufferedImage img){
  idTile=id;
  path=absPath;
  pngImage=img;
}","public TileInfo(String id,File absPath,BufferedImage img){
  idTile=id;
  path=absPath;
  pngImage=img;
}",0.9622641509433962
174973,"/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.idTile,AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}","/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.path.getAbsolutePath(),AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}",0.9758203799654576
174974,"@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL gl=context.getGL();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.getGL2().glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                String file=new StringBuffer(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,file,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,file,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(initfile,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}","@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL2 gl=context.getGL().getGL2();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                final String file=new StringBuffer(""String_Node_Str"" + lll + ""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                final File f=c.newFile(file);
                if (!tryMemoryCache(gl,f.getAbsolutePath(),lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,f,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          final File f=c.newFile(file);
          if (!tryMemoryCache(gl,f.getAbsolutePath(),0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,f,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(f,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}",0.969942653747281
174975,"public TileInfo call(){
  Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  StringBuilder ff=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).append(""String_Node_Str"");
  final File f=c.newFile(ff.toString());
  if (f == null) {
    return new TileInfo(null,ff.toString(),null);
  }
  GeoImageReader gir2=imagePool.get();
  String next=new StringBuilder().append(level).append(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).toString();
  if (gir2 == null) {
    return new TileInfo(next,f.getAbsolutePath(),null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",f);
    return new TileInfo(next,f.getAbsolutePath(),out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,f.getAbsolutePath(),null);
}","public TileInfo call(){
  if (tileFile == null) {
    return null;
  }
  GeoImageReader gir2=imagePool.get();
  String next=buildTileId(level,i,j);
  if (gir2 == null) {
    return new TileInfo(next,tileFile,null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",tileFile);
    return new TileInfo(next,tileFile,out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,tileFile,null);
}",0.5569744597249509
174976,"private boolean tryMemoryCache(GL gl,String file,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}","private boolean tryMemoryCache(GL2 gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}",0.9521829521829522
174977,"/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final String initfile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(initfile,level,i,j)));
  }
}","/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final File tileFile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(tileFile,level,i,j)));
  }
}",0.9592875318066156
174978,"/** 
 * @param idTile
 * @param texture
 */
public void add(String idTile,Texture texture){
  if (count > max) {
    map.remove(paths[index]);
    count--;
    index--;
  }
  map.put(idTile,texture);
  paths[index++]=idTile;
  if (index >= max) {
    index=0;
  }
  count++;
}","/** 
 * @param idTile
 * @param texture
 */
public void add(String path,Texture texture){
  if (count > max) {
    map.remove(paths[index]);
    count--;
    index--;
  }
  map.put(path,texture);
  paths[index++]=path;
  if (index >= max) {
    index=0;
  }
  count++;
}",0.945054945054945
174979,"public ServiceTile(String initfile,int level,int i,int j){
  super();
  this.initfile=initfile;
  this.i=i;
  this.j=j;
  this.level=level;
}","public ServiceTile(File tilefile,int level,int i,int j){
  super();
  this.tileFile=tilefile;
  this.i=i;
  this.j=j;
  this.level=level;
}",0.8928571428571429
174980,"private boolean tryFileCache(GL gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  Cache cacheInstance=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  boolean ok=true;
  if (cacheInstance.contains(file) && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file,t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}","private boolean tryFileCache(GL2 gl,File file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  boolean ok=true;
  if (file.exists() && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(file);
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(file);
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file.getPath() + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file.getAbsolutePath(),t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}",0.809197256958451
174981,"/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.getGL2().glBegin(GL2.GL_POLYGON);
  gl.getGL2().glTexCoord2f(coords.left(),coords.top());
  gl.getGL2().glVertex2f(xmin,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.top());
  gl.getGL2().glVertex2f(xmax,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.bottom());
  gl.getGL2().glVertex2f(xmax,1 - ymax);
  gl.getGL2().glTexCoord2f(coords.left(),coords.bottom());
  gl.getGL2().glVertex2f(xmin,1 - ymax);
  gl.getGL2().glEnd();
  texture.disable(gl);
}","/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL2 gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.glBegin(GL2.GL_POLYGON);
  gl.glTexCoord2f(coords.left(),coords.top());
  gl.glVertex2f(xmin,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.top());
  gl.glVertex2f(xmax,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.bottom());
  gl.glVertex2f(xmax,1 - ymax);
  gl.glTexCoord2f(coords.left(),coords.bottom());
  gl.glVertex2f(xmin,1 - ymax);
  gl.glEnd();
  texture.disable(gl);
}",0.9371980676328504
174982,"public TileInfo(String id,String absPath,BufferedImage img){
  idTile=id;
  path=absPath;
  pngImage=img;
}","public TileInfo(String id,File absPath,BufferedImage img){
  idTile=id;
  path=absPath;
  pngImage=img;
}",0.9622641509433962
174983,"/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.idTile,AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}","/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.path.getAbsolutePath(),AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}",0.9758203799654576
174984,"@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL gl=context.getGL();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.getGL2().glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                String file=new StringBuffer(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,file,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,file,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(initfile,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}","@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL2 gl=context.getGL().getGL2();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                final String file=new StringBuffer(""String_Node_Str"" + lll + ""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                final File f=c.newFile(file);
                if (!tryMemoryCache(gl,f.getAbsolutePath(),lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,f,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          final File f=c.newFile(file);
          if (!tryMemoryCache(gl,f.getAbsolutePath(),0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,f,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(f,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}",0.969942653747281
174985,"public TileInfo call(){
  Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  StringBuilder ff=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).append(""String_Node_Str"");
  final File f=c.newFile(ff.toString());
  if (f == null) {
    return new TileInfo(null,ff.toString(),null);
  }
  GeoImageReader gir2=imagePool.get();
  String next=new StringBuilder().append(level).append(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).toString();
  if (gir2 == null) {
    return new TileInfo(next,f.getAbsolutePath(),null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",f);
    return new TileInfo(next,f.getAbsolutePath(),out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,f.getAbsolutePath(),null);
}","public TileInfo call(){
  if (tileFile == null) {
    return null;
  }
  GeoImageReader gir2=imagePool.get();
  String next=buildTileId(level,i,j);
  if (gir2 == null) {
    return new TileInfo(next,tileFile,null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",tileFile);
    return new TileInfo(next,tileFile,out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,tileFile,null);
}",0.5569744597249509
174986,"private boolean tryMemoryCache(GL gl,String file,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}","private boolean tryMemoryCache(GL2 gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}",0.9521829521829522
174987,"/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final String initfile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(initfile,level,i,j)));
  }
}","/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final File tileFile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(tileFile,level,i,j)));
  }
}",0.9592875318066156
174988,"public ServiceTile(String initfile,int level,int i,int j){
  super();
  this.initfile=initfile;
  this.i=i;
  this.j=j;
  this.level=level;
}","public ServiceTile(File tilefile,int level,int i,int j){
  super();
  this.tileFile=tilefile;
  this.i=i;
  this.j=j;
  this.level=level;
}",0.8928571428571429
174989,"private boolean tryFileCache(GL gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  Cache cacheInstance=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  boolean ok=true;
  if (cacheInstance.contains(file) && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file,t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}","private boolean tryFileCache(GL2 gl,File file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  boolean ok=true;
  if (file.exists() && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(file);
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(file);
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file.getPath() + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file.getAbsolutePath(),t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}",0.809197256958451
174990,"/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.getGL2().glBegin(GL2.GL_POLYGON);
  gl.getGL2().glTexCoord2f(coords.left(),coords.top());
  gl.getGL2().glVertex2f(xmin,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.top());
  gl.getGL2().glVertex2f(xmax,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.bottom());
  gl.getGL2().glVertex2f(xmax,1 - ymax);
  gl.getGL2().glTexCoord2f(coords.left(),coords.bottom());
  gl.getGL2().glVertex2f(xmin,1 - ymax);
  gl.getGL2().glEnd();
  texture.disable(gl);
}","/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL2 gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.glBegin(GL2.GL_POLYGON);
  gl.glTexCoord2f(coords.left(),coords.top());
  gl.glVertex2f(xmin,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.top());
  gl.glVertex2f(xmax,1 - ymin);
  gl.glTexCoord2f(coords.right(),coords.bottom());
  gl.glVertex2f(xmax,1 - ymax);
  gl.glTexCoord2f(coords.left(),coords.bottom());
  gl.glVertex2f(xmin,1 - ymax);
  gl.glEnd();
  texture.disable(gl);
}",0.9371980676328504
174991,"public TileInfo(String id,String absPath,BufferedImage img){
  idTile=id;
  path=absPath;
  pngImage=img;
}","public TileInfo(String id,File absPath,BufferedImage img){
  idTile=id;
  path=absPath;
  pngImage=img;
}",0.9622641509433962
174992,"/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.idTile,AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}","/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.path.getAbsolutePath(),AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}",0.9758203799654576
174993,"@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL gl=context.getGL();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.getGL2().glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                String file=new StringBuffer(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,file,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(initfile,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          if (!tryMemoryCache(gl,file,xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,file,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(initfile,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}","@Override public void render(Object glContext){
  OpenGLContext context=(OpenGLContext)glContext;
  if (activeGir != null) {
    if (torescale) {
      torescale=false;
      tcm.clear();
    }
    GL2 gl=context.getGL().getGL2();
    updateFutures(gl);
    float zoom=context.getZoom();
    int width=context.getWidth();
    int height=context.getHeight();
    int x=context.getX();
    int y=context.getY();
    int xx=(int)(x + xpadding);
    int yy=(int)(y + ypadding);
    int max=maxnumberoftiles;
    Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    if (zoom >= 1) {
      curlevel=(int)Math.sqrt(zoom + 1);
      for (int lll=maxlevels; (lll > curlevel - 1); lll--) {
        if (lll > maxlevels) {
          break;
        }
        lll+=increaseLevel;
        if (lll < 0) {
          continue;
        }
        if (this.mylevel != curlevel) {
          this.mylevel=curlevel;
          poolExcutorService.shutdown();
          poolExcutorService=new ThreadPoolExecutor(1,poolSize,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
        }
        int w0=xx / ((1 << lll) << 8);
        int h0=yy / ((1 << lll) << 8);
        final String initfile=new StringBuffer(""String_Node_Str"").append((int)lll).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
        for (int k=0; k < max; k++) {
          for (int j=0; j < max; j++) {
            if (j + h0 < 0) {
              continue;
            }
            for (int i=0; i < max; i++) {
              if (i + w0 < 0) {
                continue;
              }
              if (arrayReadTilesOrder[i][j] == k) {
                float ymin=(float)(((j + h0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float ymax=(float)(((j + h0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - yy) / (height * zoom));
                float xmin=(float)(((i + w0) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                float xmax=(float)(((i + w0 + 1) * Constant.TILE_SIZE_DOUBLE * (1 << lll) - xx) / (1d * width * zoom));
                if (ymin > 1 || ymax < 0) {
                  continue;
                }
                if (xmin > 1 || xmax < 0) {
                  continue;
                }
                final String file=new StringBuffer(""String_Node_Str"" + lll + ""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
                final File f=c.newFile(file);
                if (!tryMemoryCache(gl,f.getAbsolutePath(),lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                  if (!tryFileCache(gl,f,lll,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
                    if (curlevel == 0 && lll == 0) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
 else                     if (curlevel == lll) {
                      addTileToQueue(f,lll,(i + w0),(j + h0));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (zoom > 0) {
      curlevel=0;
      int w0=xx / Constant.TILE_SIZE_IMG_LAYER;
      int h0=yy / Constant.TILE_SIZE_IMG_LAYER;
      final String initfile=new StringBuilder(c.getPath().toString()).append(""String_Node_Str"").append((activeGir instanceof TiledBufferedImage ? ((TiledBufferedImage)activeGir).getDescription() + ""String_Node_Str"" : ""String_Node_Str"")).toString();
      for (int j=0; j < max; j++) {
        if (j + h0 < 0) {
          continue;
        }
        for (int i=0; i < max; i++) {
          if (i + w0 < 0) {
            continue;
          }
          float ymin=(float)(((j + h0) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float ymax=(float)(((j + h0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - yy) / (height * zoom));
          float xmin=(float)(((i + w0) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          float xmax=(float)(((i + w0 + 1) * Constant.OVERVIEW_SIZE_DOUBLE - xx) / (1d * width * zoom));
          if (ymin > 1 || ymax < 0) {
            continue;
          }
          if (xmin > 1 || xmax < 0) {
            continue;
          }
          String file=new StringBuilder(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append((i + w0)).append(""String_Node_Str"").append((j + h0)).append(""String_Node_Str"").toString();
          final File f=c.newFile(file);
          if (!tryMemoryCache(gl,f.getAbsolutePath(),0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
            if (!tryFileCache(gl,f,0,(i + w0),(j + h0),xmin,xmax,ymin,ymax)) {
              addTileToQueue(f,0,(i + w0),(j + h0));
            }
          }
        }
      }
    }
    displayDownloading(futures.size());
    SumoPlatform.getApplication().refresh();
    if (this.disposed) {
      disposeSync();
    }
  }
}",0.969942653747281
174994,"public TileInfo call(){
  Cache c=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  StringBuilder ff=new StringBuilder(initfile).append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).append(""String_Node_Str"");
  final File f=c.newFile(ff.toString());
  if (f == null) {
    return new TileInfo(null,ff.toString(),null);
  }
  GeoImageReader gir2=imagePool.get();
  String next=new StringBuilder().append(level).append(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).toString();
  if (gir2 == null) {
    return new TileInfo(next,f.getAbsolutePath(),null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",f);
    return new TileInfo(next,f.getAbsolutePath(),out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,f.getAbsolutePath(),null);
}","public TileInfo call(){
  if (tileFile == null) {
    return null;
  }
  GeoImageReader gir2=imagePool.get();
  String next=buildTileId(level,i,j);
  if (gir2 == null) {
    return new TileInfo(next,tileFile,null);
  }
  try {
    int x=i * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - xpadding;
    int y=j * (1 << level) * Constant.TILE_SIZE_IMG_LAYER - ypadding;
    float zoom=(1 << level);
    final BufferedImage out=createImage(gir2,x,y,Constant.TILE_SIZE_IMG_LAYER,Constant.TILE_SIZE_IMG_LAYER,zoom);
    ImageIO.write(out,""String_Node_Str"",tileFile);
    return new TileInfo(next,tileFile,out);
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    imagePool.release(gir2);
  }
  return new TileInfo(next,tileFile,null);
}",0.5569744597249509
174995,"private boolean tryMemoryCache(GL gl,String file,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}","private boolean tryMemoryCache(GL2 gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  Texture t=tcm.getTexture(file);
  if (t != null) {
    bindTexture(gl,t,xmin,xmax,ymin,ymax);
    return true;
  }
  return false;
}",0.9521829521829522
174996,"/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final String initfile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(initfile,level,i,j)));
  }
}","/** 
 * @param initfile file tile
 * @param level	   zoom level
 * @param i
 * @param j
 */
public void addTileToQueue(final File tileFile,final int level,final int i,final int j){
  String tilesStr=this.buildTileId(level,i,j);
  if (!submitedTiles.contains(tilesStr)) {
    submitedTiles.add(tilesStr);
    futures.add(0,poolExcutorService.submit(new ServiceTile(tileFile,level,i,j)));
  }
}",0.9592875318066156
174997,"/** 
 * @param idTile
 * @param texture
 */
public void add(String idTile,Texture texture){
  if (count > max) {
    map.remove(paths[index]);
    count--;
    index--;
  }
  map.put(idTile,texture);
  paths[index++]=idTile;
  if (index >= max) {
    index=0;
  }
  count++;
}","/** 
 * @param idTile
 * @param texture
 */
public void add(String path,Texture texture){
  if (count > max) {
    map.remove(paths[index]);
    count--;
    index--;
  }
  map.put(path,texture);
  paths[index++]=path;
  if (index >= max) {
    index=0;
  }
  count++;
}",0.945054945054945
174998,"/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<Object[]>> remove1=new ArrayList<Future<Object[]>>();
  for (  Future<Object[]> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        Object[] o=f.get();
        submitedTiles.remove(o[1]);
        if (o.length > 2 && o[2] != null) {
          tcm.add((String)o[0],AWTTextureIO.newTexture(gl.getGLProfile(),(BufferedImage)o[2],false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}","/** 
 * @param gl
 */
private void updateFutures(GL gl){
  List<Future<TileInfo>> remove1=new ArrayList<Future<TileInfo>>();
  for (  Future<TileInfo> f : futures) {
    if (f.isDone() || f.isCancelled()) {
      remove1.add(f);
      try {
        TileInfo o=f.get();
        submitedTiles.remove(o.idTile);
        if (o.pngImage != null) {
          tcm.add(o.idTile,AWTTextureIO.newTexture(gl.getGLProfile(),o.pngImage,false));
        }
      }
 catch (      Exception ex) {
        logger.error(ex.getMessage(),ex);
      }
    }
  }
  futures.removeAll(remove1);
}",0.7717484926787253
174999,"private boolean tryFileCache(GL gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=new StringBuilder(""String_Node_Str"").append(level).append(""String_Node_Str"").append(getBandFolder(activeBand)).append(""String_Node_Str"").append(i).append(""String_Node_Str"").append(j).toString();
  Cache cacheInstance=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  boolean ok=true;
  if (cacheInstance.contains(file) & !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file,t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}","private boolean tryFileCache(GL gl,String file,int level,int i,int j,float xmin,float xmax,float ymin,float ymax){
  String tileId=this.buildTileId(level,i,j);
  Cache cacheInstance=CacheManager.getCacheInstance(activeGir.getDisplayName(activeBand));
  boolean ok=true;
  if (cacheInstance.contains(file) && !submitedTiles.contains(tileId)) {
    BufferedImage temp=null;
    try {
      try {
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
 catch (      Exception ex) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
        temp=ImageIO.read(cacheInstance.newFile(file));
      }
      if (temp == null) {
        ok=false;
      }
    }
 catch (    Exception ex) {
      ok=false;
      logger.warn(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    }
 finally {
      pngReader.dispose();
    }
    if (ok) {
      if (temp.getColorModel().getNumComponents() == 1) {
        temp=rescale.filter(temp,rescale.createCompatibleDestImage(temp,temp.getColorModel()));
      }
      Texture t=AWTTextureIO.newTexture(gl.getGLProfile(),temp,false);
      tcm.add(file,t);
      bindTexture(gl,t,xmin,xmax,ymin,ymax);
    }
  }
 else {
    ok=false;
  }
  return ok;
}",0.9266883351390394
175000,"/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.getGL2().glBegin(GL2.GL_QUADS);
  gl.getGL2().glTexCoord2f(coords.left(),coords.top());
  gl.getGL2().glVertex2f(xmin,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.top());
  gl.getGL2().glVertex2f(xmax,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.bottom());
  gl.getGL2().glVertex2f(xmax,1 - ymax);
  gl.getGL2().glTexCoord2f(coords.left(),coords.bottom());
  gl.getGL2().glVertex2f(xmin,1 - ymax);
  gl.getGL2().glEnd();
  texture.disable(gl);
}","/** 
 * @param gl
 * @param texture
 * @param xmin
 * @param xmax
 * @param ymin
 * @param ymax
 */
private void bindTexture(GL gl,Texture texture,float xmin,float xmax,float ymin,float ymax){
  texture.enable(gl);
  texture.bind(gl);
  TextureCoords coords=texture.getImageTexCoords();
  gl.getGL2().glBegin(GL2.GL_POLYGON);
  gl.getGL2().glTexCoord2f(coords.left(),coords.top());
  gl.getGL2().glVertex2f(xmin,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.top());
  gl.getGL2().glVertex2f(xmax,1 - ymin);
  gl.getGL2().glTexCoord2f(coords.right(),coords.bottom());
  gl.getGL2().glVertex2f(xmax,1 - ymax);
  gl.getGL2().glTexCoord2f(coords.left(),coords.bottom());
  gl.getGL2().glVertex2f(xmin,1 - ymax);
  gl.getGL2().glEnd();
  texture.disable(gl);
}",0.9921875
