record_number,buggy_code,fixed_code,code_similarity
166001,"@Override public void constructDimension(List<Pair<DimletKey,List<DimletKey>>> dimlets,Random random,DimensionInformation dimensionInformation){
  Set<DimletKey> biomeKeys=new HashSet<DimletKey>();
  List<Pair<DimletKey,List<DimletKey>>> biomeDimlets=DimensionInformation.extractType(DimletType.DIMLET_BIOME,dimlets);
  List<Pair<DimletKey,List<DimletKey>>> controllerDimlets=DimensionInformation.extractType(DimletType.DIMLET_CONTROLLER,dimlets);
  ControllerType controllerType;
  if (controllerDimlets.isEmpty()) {
    if (random.nextFloat() < DimletConfiguration.randomControllerChance) {
      List<DimletKey> keys=new ArrayList<DimletKey>(DimletObjectMapping.idToControllerType.keySet());
      DimletKey key=keys.get(random.nextInt(keys.size()));
      controllerType=DimletObjectMapping.idToControllerType.get(key);
    }
 else {
      if (biomeDimlets.isEmpty()) {
        controllerType=ControllerType.CONTROLLER_DEFAULT;
      }
 else       if (biomeDimlets.size() > 1) {
        controllerType=ControllerType.CONTROLLER_FILTERED;
      }
 else {
        controllerType=ControllerType.CONTROLLER_SINGLE;
      }
    }
  }
 else {
    DimletKey key=controllerDimlets.get(random.nextInt(controllerDimlets.size())).getLeft();
    controllerType=DimletObjectMapping.idToControllerType.get(key);
  }
  for (  Pair<DimletKey,List<DimletKey>> dimletWithModifiers : biomeDimlets) {
    DimletKey key=dimletWithModifiers.getKey();
    biomeKeys.add(key);
  }
  int neededBiomes=controllerType.getNeededBiomes();
  if (neededBiomes == -1) {
    if (biomeKeys.size() >= 2) {
      neededBiomes=biomeKeys.size();
    }
 else {
      neededBiomes=random.nextInt(10) + 3;
    }
  }
  while (biomeKeys.size() < neededBiomes) {
    DimletKey key;
    List<DimletKey> keys=new ArrayList<DimletKey>(DimletObjectMapping.idToBiome.keySet());
    key=keys.get(random.nextInt(keys.size()));
    while (biomeKeys.contains(key)) {
      key=keys.get(random.nextInt(keys.size()));
    }
    biomeKeys.add(key);
  }
  List<BiomeGenBase> biomes=dimensionInformation.getBiomes();
  biomes.clear();
  for (  DimletKey key : biomeKeys) {
    biomes.add(DimletObjectMapping.idToBiome.get(key));
  }
}","@Override public void constructDimension(List<Pair<DimletKey,List<DimletKey>>> dimlets,Random random,DimensionInformation dimensionInformation){
  Set<DimletKey> biomeKeys=new HashSet<DimletKey>();
  List<Pair<DimletKey,List<DimletKey>>> biomeDimlets=DimensionInformation.extractType(DimletType.DIMLET_BIOME,dimlets);
  List<Pair<DimletKey,List<DimletKey>>> controllerDimlets=DimensionInformation.extractType(DimletType.DIMLET_CONTROLLER,dimlets);
  ControllerType controllerType;
  if (controllerDimlets.isEmpty()) {
    if (random.nextFloat() < DimletConfiguration.randomControllerChance) {
      List<DimletKey> keys=new ArrayList<DimletKey>(DimletObjectMapping.idToControllerType.keySet());
      DimletKey key=keys.get(random.nextInt(keys.size()));
      controllerType=DimletObjectMapping.idToControllerType.get(key);
    }
 else {
      if (biomeDimlets.isEmpty()) {
        controllerType=ControllerType.CONTROLLER_DEFAULT;
      }
 else       if (biomeDimlets.size() > 1) {
        controllerType=ControllerType.CONTROLLER_FILTERED;
      }
 else {
        controllerType=ControllerType.CONTROLLER_SINGLE;
      }
    }
  }
 else {
    DimletKey key=controllerDimlets.get(random.nextInt(controllerDimlets.size())).getLeft();
    controllerType=DimletObjectMapping.idToControllerType.get(key);
  }
  dimensionInformation.setControllerType(controllerType);
  for (  Pair<DimletKey,List<DimletKey>> dimletWithModifiers : biomeDimlets) {
    DimletKey key=dimletWithModifiers.getKey();
    biomeKeys.add(key);
  }
  int neededBiomes=controllerType.getNeededBiomes();
  if (neededBiomes == -1) {
    if (biomeKeys.size() >= 2) {
      neededBiomes=biomeKeys.size();
    }
 else {
      neededBiomes=random.nextInt(10) + 3;
    }
  }
  while (biomeKeys.size() < neededBiomes) {
    DimletKey key;
    List<DimletKey> keys=new ArrayList<DimletKey>(DimletObjectMapping.idToBiome.keySet());
    key=keys.get(random.nextInt(keys.size()));
    while (biomeKeys.contains(key)) {
      key=keys.get(random.nextInt(keys.size()));
    }
    biomeKeys.add(key);
  }
  List<BiomeGenBase> biomes=dimensionInformation.getBiomes();
  biomes.clear();
  for (  DimletKey key : biomeKeys) {
    biomes.add(DimletObjectMapping.idToBiome.get(key));
  }
}",0.9868718877320054
166002,"public void setRadius(int radius){
  this.radius=radius;
  volume=-1;
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}","public void setRadius(int radius){
  this.radius=radius;
  volume=-1;
  environmentModules=null;
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}",0.9114754098360656
166003,"public void setMaxy(int maxy){
  this.maxy=maxy;
  volume=-1;
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}","public void setMaxy(int maxy){
  this.maxy=maxy;
  volume=-1;
  environmentModules=null;
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}",0.9065743944636678
166004,"public void setMiny(int miny){
  this.miny=miny;
  volume=-1;
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}","public void setMiny(int miny){
  this.miny=miny;
  volume=-1;
  environmentModules=null;
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}",0.9065743944636678
166005,"@Override public ItemStack transferStackInSlot(EntityPlayer player,int index){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(index);
  if (slot != null && slot.getHasStack()) {
    ItemStack origStack=slot.getStack();
    itemstack=origStack.copy();
    if (factory.isSpecificItemSlot(index)) {
      if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERINV,true)) {
        if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERHOTBAR,false)) {
          return null;
        }
      }
      slot.onSlotChange(origStack,itemstack);
    }
 else     if (factory.isOutputSlot(index) || factory.isInputSlot(index) || factory.isContainerSlot(index)) {
      if (!mergeItemStacks(origStack,SlotType.SLOT_SPECIFICITEM,false)) {
        if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERINV,true)) {
          if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERHOTBAR,false)) {
            return null;
          }
        }
      }
      slot.onSlotChange(origStack,itemstack);
    }
 else     if (factory.isGhostSlot(index) || factory.isGhostOutputSlot(index)) {
      return null;
    }
 else     if (factory.isPlayerInventorySlot(index)) {
      if (!mergeItemStacks(origStack,SlotType.SLOT_SPECIFICITEM,false)) {
        if (!mergeItemStacks(origStack,SlotType.SLOT_INPUT,false)) {
          if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERHOTBAR,false)) {
            return null;
          }
        }
      }
    }
 else     if (factory.isPlayerHotbarSlot(index)) {
      if (!mergeItemStacks(origStack,SlotType.SLOT_SPECIFICITEM,false)) {
        if (!mergeItemStacks(origStack,SlotType.SLOT_INPUT,false)) {
          if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERINV,false)) {
            return null;
          }
        }
      }
    }
 else {
      RFTools.log(""String_Node_Str"" + index);
    }
    if (origStack.stackSize == 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (origStack.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,origStack);
  }
  return itemstack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int index){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(index);
  if (slot != null && slot.getHasStack()) {
    ItemStack origStack=slot.getStack();
    itemstack=origStack.copy();
    if (factory.isSpecificItemSlot(index)) {
      if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERINV,true)) {
        if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERHOTBAR,false)) {
          return null;
        }
      }
      slot.onSlotChange(origStack,itemstack);
    }
 else     if (factory.isOutputSlot(index) || factory.isInputSlot(index) || factory.isContainerSlot(index)) {
      if (!mergeItemStacks(origStack,SlotType.SLOT_SPECIFICITEM,false)) {
        if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERINV,true)) {
          if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERHOTBAR,false)) {
            return null;
          }
        }
      }
      slot.onSlotChange(origStack,itemstack);
    }
 else     if (factory.isGhostSlot(index) || factory.isGhostOutputSlot(index)) {
      return null;
    }
 else     if (factory.isPlayerInventorySlot(index)) {
      if (!mergeItemStacks(origStack,SlotType.SLOT_SPECIFICITEM,false)) {
        if (!mergeItemStacks(origStack,SlotType.SLOT_INPUT,false)) {
          if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERHOTBAR,false)) {
            return null;
          }
        }
      }
    }
 else     if (factory.isPlayerHotbarSlot(index)) {
      if (!mergeItemStacks(origStack,SlotType.SLOT_SPECIFICITEM,false)) {
        if (!mergeItemStacks(origStack,SlotType.SLOT_INPUT,false)) {
          if (!mergeItemStacks(origStack,SlotType.SLOT_PLAYERINV,false)) {
            return null;
          }
        }
      }
    }
 else {
      RFTools.log(""String_Node_Str"" + index);
    }
    if (origStack.stackSize == 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (origStack.stackSize == itemstack.stackSize) {
      return null;
    }
    RFTools.log(""String_Node_Str"");
    slot.onPickupFromSlot(player,origStack);
  }
  return itemstack;
}",0.9914570479354532
166006,"@Override public int[] getInts(int x,int z,int width,int length){
  int[] ints=parent.getInts(x,z,width,length);
  Map<Integer,Integer> filterMap=getFilterFromType();
  if (filterMap != null) {
    int[] aint=IntCache.getIntCache(width * length);
    for (int i=0; i < width * length; ++i) {
      aint[i]=filterMap.get(ints[i]);
    }
    return aint;
  }
 else {
    return ints;
  }
}","@Override public int[] getInts(int x,int z,int width,int length){
  int[] ints=parent.getInts(x,z,width,length);
  Map<Integer,Integer> filterMap=getFilterFromType();
  if (filterMap != null) {
    int[] aint=IntCache.getIntCache(width * length);
    for (int i=0; i < width * length; ++i) {
      Integer biome=filterMap.get(ints[i]);
      if (biome != null) {
        aint[i]=biome;
      }
 else {
        aint[i]=ints[i];
      }
    }
    return aint;
  }
 else {
    return ints;
  }
}",0.7736063708759955
166007,"public void dump(EntityPlayer player){
  String digits=getDigitString();
  if (!digits.isEmpty()) {
    logDebug(player,""String_Node_Str"" + digits);
  }
  if (forcedDimensionSeed != 0) {
    logDebug(player,""String_Node_Str"" + forcedDimensionSeed);
  }
  if (baseSeed != 0) {
    logDebug(player,""String_Node_Str"" + baseSeed);
  }
  logDebug(player,""String_Node_Str"" + worldVersion);
  TerrainType terrainType=getTerrainType();
  logDebug(player,""String_Node_Str"" + terrainType.toString());
  logDebug(player,""String_Node_Str"" + new ItemStack(baseBlockForTerrain.getBlock(),1,baseBlockForTerrain.getMeta()).getDisplayName());
  if (featureTypes.contains(FeatureType.FEATURE_TENDRILS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(tendrilBlock.getBlock(),1,tendrilBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_ORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(sphereBlock.getBlock(),1,sphereBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LIQUIDORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(liquidSphereBlock.getBlock(),1,liquidSphereBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_CANYONS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(canyonBlock.getBlock(),1,canyonBlock.getMeta()).getDisplayName());
  }
  logDebug(player,""String_Node_Str"" + new ItemStack(fluidForTerrain).getDisplayName());
  logDebug(player,""String_Node_Str"" + (controllerType == null ? ""String_Node_Str"" : controllerType.name()));
  for (  BiomeGenBase biome : getBiomes()) {
    logDebug(player,""String_Node_Str"" + biome.biomeName);
  }
  for (  FeatureType featureType : getFeatureTypes()) {
    logDebug(player,""String_Node_Str"" + featureType.toString());
  }
  for (  BlockMeta block : extraOregen) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block.getBlock(),1,block.getMeta()).getDisplayName());
  }
  for (  Block block : fluidsForLakes) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LIQUIDORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(liquidSphereFluid).getDisplayName());
  }
  for (  StructureType structureType : getStructureTypes()) {
    logDebug(player,""String_Node_Str"" + structureType.toString());
  }
  for (  EffectType effectType : getEffectTypes()) {
    logDebug(player,""String_Node_Str"" + effectType.toString());
  }
  logDebug(player,""String_Node_Str"" + skyDescriptor.getSunBrightnessFactor());
  logDebug(player,""String_Node_Str"" + skyDescriptor.getStarBrightnessFactor());
  float r=skyDescriptor.getSkyColorFactorR();
  float g=skyDescriptor.getSkyColorFactorG();
  float b=skyDescriptor.getSkyColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  r=skyDescriptor.getFogColorFactorR();
  g=skyDescriptor.getFogColorFactorG();
  b=skyDescriptor.getFogColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  SkyType skyType=skyDescriptor.getSkyType();
  if (skyType != SkyType.SKY_NORMAL) {
    logDebug(player,""String_Node_Str"" + skyType.toString());
  }
  for (  CelestialBodyType bodyType : skyDescriptor.getCelestialBodies()) {
    logDebug(player,""String_Node_Str"" + bodyType.name());
  }
  if (weatherDescriptor.getRainStrength() > -0.5f) {
    logDebug(player,""String_Node_Str"" + weatherDescriptor.getRainStrength());
  }
  if (weatherDescriptor.getThunderStrength() > -0.5f) {
    logDebug(player,""String_Node_Str"" + weatherDescriptor.getThunderStrength());
  }
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() == null) {
        logDebug(player,""String_Node_Str"" + mob);
      }
 else {
        logDebug(player,""String_Node_Str"" + mob.getEntityClass().getName());
      }
    }
  }
  if (peaceful) {
    logDebug(player,""String_Node_Str"");
  }
  if (shelter) {
    logDebug(player,""String_Node_Str"");
  }
  if (respawnHere) {
    logDebug(player,""String_Node_Str"");
  }
  if (celestialAngle != null) {
    logDebug(player,""String_Node_Str"" + celestialAngle);
  }
  if (timeSpeed != null) {
    logDebug(player,""String_Node_Str"" + timeSpeed);
  }
  if (probeCounter > 0) {
    logDebug(player,""String_Node_Str"" + probeCounter);
  }
}","public void dump(EntityPlayer player){
  String digits=getDigitString();
  if (!digits.isEmpty()) {
    logDebug(player,""String_Node_Str"" + digits);
  }
  if (forcedDimensionSeed != 0) {
    logDebug(player,""String_Node_Str"" + forcedDimensionSeed);
  }
  if (baseSeed != 0) {
    logDebug(player,""String_Node_Str"" + baseSeed);
  }
  logDebug(player,""String_Node_Str"" + worldVersion);
  TerrainType terrainType=getTerrainType();
  logDebug(player,""String_Node_Str"" + terrainType.toString());
  logDebug(player,""String_Node_Str"" + new ItemStack(baseBlockForTerrain.getBlock(),1,baseBlockForTerrain.getMeta()).getDisplayName());
  if (featureTypes.contains(FeatureType.FEATURE_TENDRILS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(tendrilBlock.getBlock(),1,tendrilBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_ORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(sphereBlock.getBlock(),1,sphereBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LIQUIDORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(liquidSphereBlock.getBlock(),1,liquidSphereBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_CANYONS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(canyonBlock.getBlock(),1,canyonBlock.getMeta()).getDisplayName());
  }
  logDebug(player,""String_Node_Str"" + new ItemStack(fluidForTerrain).getDisplayName());
  logDebug(player,""String_Node_Str"" + (controllerType == null ? ""String_Node_Str"" : controllerType.name()));
  for (  BiomeGenBase biome : getBiomes()) {
    logDebug(player,""String_Node_Str"" + biome.biomeName);
  }
  for (  FeatureType featureType : getFeatureTypes()) {
    logDebug(player,""String_Node_Str"" + featureType.toString());
  }
  for (  BlockMeta block : extraOregen) {
    if (block != null) {
      logDebug(player,""String_Node_Str"" + new ItemStack(block.getBlock(),1,block.getMeta()).getDisplayName());
    }
  }
  for (  Block block : fluidsForLakes) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LIQUIDORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(liquidSphereFluid).getDisplayName());
  }
  for (  StructureType structureType : getStructureTypes()) {
    logDebug(player,""String_Node_Str"" + structureType.toString());
  }
  for (  EffectType effectType : getEffectTypes()) {
    logDebug(player,""String_Node_Str"" + effectType.toString());
  }
  logDebug(player,""String_Node_Str"" + skyDescriptor.getSunBrightnessFactor());
  logDebug(player,""String_Node_Str"" + skyDescriptor.getStarBrightnessFactor());
  float r=skyDescriptor.getSkyColorFactorR();
  float g=skyDescriptor.getSkyColorFactorG();
  float b=skyDescriptor.getSkyColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  r=skyDescriptor.getFogColorFactorR();
  g=skyDescriptor.getFogColorFactorG();
  b=skyDescriptor.getFogColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  SkyType skyType=skyDescriptor.getSkyType();
  if (skyType != SkyType.SKY_NORMAL) {
    logDebug(player,""String_Node_Str"" + skyType.toString());
  }
  for (  CelestialBodyType bodyType : skyDescriptor.getCelestialBodies()) {
    logDebug(player,""String_Node_Str"" + bodyType.name());
  }
  if (weatherDescriptor.getRainStrength() > -0.5f) {
    logDebug(player,""String_Node_Str"" + weatherDescriptor.getRainStrength());
  }
  if (weatherDescriptor.getThunderStrength() > -0.5f) {
    logDebug(player,""String_Node_Str"" + weatherDescriptor.getThunderStrength());
  }
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() == null) {
        logDebug(player,""String_Node_Str"" + mob);
      }
 else {
        logDebug(player,""String_Node_Str"" + mob.getEntityClass().getName());
      }
    }
  }
  if (peaceful) {
    logDebug(player,""String_Node_Str"");
  }
  if (shelter) {
    logDebug(player,""String_Node_Str"");
  }
  if (respawnHere) {
    logDebug(player,""String_Node_Str"");
  }
  if (celestialAngle != null) {
    logDebug(player,""String_Node_Str"" + celestialAngle);
  }
  if (timeSpeed != null) {
    logDebug(player,""String_Node_Str"" + timeSpeed);
  }
  if (probeCounter > 0) {
    logDebug(player,""String_Node_Str"" + probeCounter);
  }
}",0.9962435970404098
166008,"@Override public void constructDimension(List<Pair<DimletKey,List<DimletKey>>> dimlets,Random random,DimensionInformation dimensionInformation){
  TerrainType terrainType=dimensionInformation.getTerrainType();
  Set<FeatureType> featureTypes=dimensionInformation.getFeatureTypes();
  dimlets=DimensionInformation.extractType(DimletType.DIMLET_FEATURE,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomFeatureChance) {
      DimletKey key=DimletRandomizer.getRandomFeature(random,false);
      FeatureType featureType=DimletObjectMapping.idToFeatureType.get(key);
      if (!featureTypes.contains(featureType) && featureType.isTerrainSupported(terrainType)) {
        dimensionInformation.updateCostFactor(key);
        featureTypes.add(featureType);
        List<DimletKey> modifiers=Collections.emptyList();
        dimlets.add(Pair.of(key,modifiers));
      }
    }
  }
  Map<FeatureType,List<DimletKey>> modifiersForFeature=new HashMap<FeatureType,List<DimletKey>>();
  for (  Pair<DimletKey,List<DimletKey>> dimlet : dimlets) {
    DimletKey key=dimlet.getLeft();
    FeatureType featureType=DimletObjectMapping.idToFeatureType.get(key);
    featureTypes.add(featureType);
    modifiersForFeature.put(featureType,dimlet.getRight());
  }
  Block[] fluidsForLakes;
  if (featureTypes.contains(FeatureType.FEATURE_LAKES)) {
    List<BlockMeta> blocks=new ArrayList<BlockMeta>();
    List<Block> fluids=new ArrayList<Block>();
    DimensionInformation.getMaterialAndFluidModifiers(modifiersForFeature.get(FeatureType.FEATURE_LAKES),blocks,fluids);
    if (fluids.isEmpty()) {
      while (random.nextFloat() < DimletConfiguration.randomLakeFluidChance) {
        DimletKey key=DimletRandomizer.getRandomFluidBlock(random);
        dimensionInformation.updateCostFactor(key);
        fluids.add(DimletObjectMapping.idToFluid.get(key));
      }
    }
 else     if (fluids.size() == 1 && fluids.get(0) == null) {
      fluids.clear();
    }
    fluidsForLakes=fluids.toArray(new Block[fluids.size()]);
  }
 else {
    fluidsForLakes=new Block[0];
  }
  dimensionInformation.setFluidsForLakes(fluidsForLakes);
  BlockMeta[] extraOregen;
  if (featureTypes.contains(FeatureType.FEATURE_OREGEN)) {
    List<BlockMeta> blocks=new ArrayList<BlockMeta>();
    List<Block> fluids=new ArrayList<Block>();
    DimensionInformation.getMaterialAndFluidModifiers(modifiersForFeature.get(FeatureType.FEATURE_OREGEN),blocks,fluids);
    if (blocks.isEmpty()) {
      float chance=1.1f;
      while (random.nextFloat() < chance) {
        DimletKey key=DimletRandomizer.getRandomMaterialBlock(random,true);
        blocks.add(DimletObjectMapping.idToBlock.get(key));
        chance=chance * 0.80f;
      }
    }
    extraOregen=blocks.toArray(new BlockMeta[blocks.size()]);
  }
 else {
    extraOregen=new BlockMeta[0];
  }
  dimensionInformation.setExtraOregen(extraOregen);
  dimensionInformation.setTendrilBlock(dimensionInformation.getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_TENDRILS));
  dimensionInformation.setSphereBlock(dimensionInformation.getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_ORBS));
  dimensionInformation.setLiquidSphereBlock(dimensionInformation.getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_LIQUIDORBS));
  dimensionInformation.setLiquidSphereFluid(dimensionInformation.getFeatureLiquid(random,modifiersForFeature,FeatureType.FEATURE_LIQUIDORBS));
  dimensionInformation.setCanyonBlock(dimensionInformation.getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_CANYONS));
}","@Override public void constructDimension(List<Pair<DimletKey,List<DimletKey>>> dimlets,Random random,DimensionInformation dimensionInformation){
  TerrainType terrainType=dimensionInformation.getTerrainType();
  Set<FeatureType> featureTypes=dimensionInformation.getFeatureTypes();
  dimlets=DimensionInformation.extractType(DimletType.DIMLET_FEATURE,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomFeatureChance) {
      DimletKey key=DimletRandomizer.getRandomFeature(random,false);
      FeatureType featureType=DimletObjectMapping.idToFeatureType.get(key);
      if (!featureTypes.contains(featureType) && featureType.isTerrainSupported(terrainType)) {
        dimensionInformation.updateCostFactor(key);
        featureTypes.add(featureType);
        List<DimletKey> modifiers=Collections.emptyList();
        dimlets.add(Pair.of(key,modifiers));
      }
    }
  }
  Map<FeatureType,List<DimletKey>> modifiersForFeature=new HashMap<FeatureType,List<DimletKey>>();
  for (  Pair<DimletKey,List<DimletKey>> dimlet : dimlets) {
    DimletKey key=dimlet.getLeft();
    FeatureType featureType=DimletObjectMapping.idToFeatureType.get(key);
    featureTypes.add(featureType);
    modifiersForFeature.put(featureType,dimlet.getRight());
  }
  Block[] fluidsForLakes;
  if (featureTypes.contains(FeatureType.FEATURE_LAKES)) {
    List<BlockMeta> blocks=new ArrayList<BlockMeta>();
    List<Block> fluids=new ArrayList<Block>();
    DimensionInformation.getMaterialAndFluidModifiers(modifiersForFeature.get(FeatureType.FEATURE_LAKES),blocks,fluids);
    if (fluids.isEmpty()) {
      while (random.nextFloat() < DimletConfiguration.randomLakeFluidChance) {
        DimletKey key=DimletRandomizer.getRandomFluidBlock(random);
        dimensionInformation.updateCostFactor(key);
        fluids.add(DimletObjectMapping.idToFluid.get(key));
      }
    }
 else     if (fluids.size() == 1 && fluids.get(0) == null) {
      fluids.clear();
    }
    fluidsForLakes=fluids.toArray(new Block[fluids.size()]);
  }
 else {
    fluidsForLakes=new Block[0];
  }
  dimensionInformation.setFluidsForLakes(fluidsForLakes);
  BlockMeta[] extraOregen;
  if (featureTypes.contains(FeatureType.FEATURE_OREGEN)) {
    List<BlockMeta> blocks=new ArrayList<BlockMeta>();
    List<Block> fluids=new ArrayList<Block>();
    DimensionInformation.getMaterialAndFluidModifiers(modifiersForFeature.get(FeatureType.FEATURE_OREGEN),blocks,fluids);
    if (blocks.isEmpty()) {
      float chance=1.1f;
      while (random.nextFloat() < chance) {
        DimletKey key=DimletRandomizer.getRandomMaterialBlock(random,true);
        BlockMeta bm=DimletObjectMapping.idToBlock.get(key);
        if (bm != null) {
          blocks.add(bm);
          chance=chance * 0.80f;
        }
      }
    }
    extraOregen=blocks.toArray(new BlockMeta[blocks.size()]);
  }
 else {
    extraOregen=new BlockMeta[0];
  }
  dimensionInformation.setExtraOregen(extraOregen);
  dimensionInformation.setTendrilBlock(dimensionInformation.getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_TENDRILS));
  dimensionInformation.setSphereBlock(dimensionInformation.getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_ORBS));
  dimensionInformation.setLiquidSphereBlock(dimensionInformation.getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_LIQUIDORBS));
  dimensionInformation.setLiquidSphereFluid(dimensionInformation.getFeatureLiquid(random,modifiersForFeature,FeatureType.FEATURE_LIQUIDORBS));
  dimensionInformation.setCanyonBlock(dimensionInformation.getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_CANYONS));
}",0.9874292029285812
166009,"public List<Pair<DimletDescriptor,List<DimletDescriptor>>> getDimletsWithModifiers(){
  List<Pair<DimletDescriptor,List<DimletDescriptor>>> result=new ArrayList<Pair<DimletDescriptor,List<DimletDescriptor>>>();
  if (!descriptionString.isEmpty()) {
    List<DimletDescriptor> modifiers=new ArrayList<DimletDescriptor>();
    String[] opcodes=descriptionString.split(""String_Node_Str"");
    for (    String oc : opcodes) {
      DimletKey key;
      if (oc.startsWith(""String_Node_Str"")) {
        key=DimletKey.parseKey(oc.substring(1));
        modifiers.add(new DimletDescriptor(key.getType(),key));
      }
 else       if (oc.startsWith(""String_Node_Str"")) {
      }
 else {
        key=DimletKey.parseKey(oc);
        result.add(Pair.of(new DimletDescriptor(key.getType(),key),modifiers));
        modifiers=new ArrayList<DimletDescriptor>();
      }
    }
  }
  return result;
}","public List<Pair<DimletDescriptor,List<DimletDescriptor>>> getDimletsWithModifiers(){
  List<Pair<DimletDescriptor,List<DimletDescriptor>>> result=new ArrayList<Pair<DimletDescriptor,List<DimletDescriptor>>>();
  String ds=descriptionString;
  if (ds.startsWith(""String_Node_Str"")) {
    ds=ds.substring(1);
  }
  if (!ds.isEmpty()) {
    List<DimletDescriptor> modifiers=new ArrayList<DimletDescriptor>();
    String[] opcodes=ds.split(""String_Node_Str"");
    for (    String oc : opcodes) {
      DimletKey key;
      if (oc.startsWith(""String_Node_Str"")) {
        key=DimletKey.parseKey(oc.substring(1));
        modifiers.add(new DimletDescriptor(key.getType(),key));
      }
 else       if (oc.startsWith(""String_Node_Str"")) {
      }
 else {
        key=DimletKey.parseKey(oc);
        result.add(Pair.of(new DimletDescriptor(key.getType(),key),modifiers));
        modifiers=new ArrayList<DimletDescriptor>();
      }
    }
  }
  return result;
}",0.9265106151333696
166010,"public void preInit(FMLPreInitializationEvent e){
  modConfigDir=e.getModConfigurationDirectory();
  mainConfig=new Configuration(new File(modConfigDir.getPath() + File.separator + ""String_Node_Str"",""String_Node_Str""));
  dimletConfig=new Configuration(new File(modConfigDir.getPath() + File.separator + ""String_Node_Str"",""String_Node_Str""));
  dimletConfig.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_KNOWNDIMLETS,""String_Node_Str"");
  readMainConfig();
  PacketHandler.registerMessages();
  ModItems.init();
  ModBlocks.init();
  ModCrafting.init();
  ModDimensions.init();
}","public void preInit(FMLPreInitializationEvent e){
  modConfigDir=e.getModConfigurationDirectory();
  mainConfig=new Configuration(new File(modConfigDir.getPath() + File.separator + ""String_Node_Str"",""String_Node_Str""));
  readMainConfig();
  PacketHandler.registerMessages();
  ModItems.init();
  ModBlocks.init();
  ModCrafting.init();
  ModDimensions.init();
}",0.7589098532494759
166011,"public void postInit(FMLPostInitializationEvent e){
  mainConfig=null;
  dimletConfig=null;
  WrenchChecker.init();
}","public void postInit(FMLPostInitializationEvent e){
  mainConfig=null;
  WrenchChecker.init();
}",0.9014084507042254
166012,"private void readMainConfig(){
  Configuration cfg=mainConfig;
  try {
    cfg.load();
    cfg.addCustomCategoryComment(GeneralConfiguration.CATEGORY_GENERAL,""String_Node_Str"");
    cfg.addCustomCategoryComment(CrafterConfiguration.CATEGORY_CRAFTER,""String_Node_Str"");
    cfg.addCustomCategoryComment(StorageScannerConfiguration.CATEGORY_STORAGE_MONITOR,""String_Node_Str"");
    cfg.addCustomCategoryComment(NetworkMonitorConfiguration.CATEGORY_NETWORK_MONITOR,""String_Node_Str"");
    cfg.addCustomCategoryComment(TeleportConfiguration.CATEGORY_TELEPORTER,""String_Node_Str"");
    cfg.addCustomCategoryComment(EndergenicConfiguration.CATEGORY_ENDERGENIC,""String_Node_Str"");
    cfg.addCustomCategoryComment(ShieldConfiguration.CATEGORY_SHIELD,""String_Node_Str"");
    cfg.addCustomCategoryComment(DimletConfiguration.CATEGORY_DIMLETS,""String_Node_Str"");
    cfg.addCustomCategoryComment(DimletConstructionConfiguration.CATEGORY_DIMLET_CONSTRUCTION,""String_Node_Str"");
    cfg.addCustomCategoryComment(EnvironmentalConfiguration.CATEGORY_ENVIRONMENTAL,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_GENERAL,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_DIMLETSETTINGS,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_TYPERARIRTY,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_TYPETICKCOST,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_TYPERFCREATECOST,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_TYPERFMAINTAINCOST,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_MOBSPAWNS,""String_Node_Str"");
    GeneralConfiguration.init(cfg);
    NetworkMonitorConfiguration.init(cfg);
    CrafterConfiguration.init(cfg);
    StorageScannerConfiguration.init(cfg);
    TeleportConfiguration.init(cfg);
    EndergenicConfiguration.init(cfg);
    ShieldConfiguration.init(cfg);
    DimletConfiguration.init(cfg);
    DimletConstructionConfiguration.init(cfg);
    EnvironmentalConfiguration.init(cfg);
    ScreenConfiguration.init(cfg);
    KnownDimletConfiguration.initGeneralConfig(cfg);
    DimletRandomizer.initTypeRarity(cfg);
    DimletCosts.initTypeRfCreateCost(cfg);
    DimletCosts.initTypeRfMaintainCost(cfg);
    DimletCosts.initTypeTickCost(cfg);
  }
 catch (  Exception e1) {
    FMLLog.log(Level.ERROR,e1,""String_Node_Str"");
  }
 finally {
    if (cfg.hasChanged()) {
      cfg.save();
    }
  }
}","private void readMainConfig(){
  Configuration cfg=mainConfig;
  try {
    cfg.load();
    cfg.addCustomCategoryComment(GeneralConfiguration.CATEGORY_GENERAL,""String_Node_Str"");
    cfg.addCustomCategoryComment(CrafterConfiguration.CATEGORY_CRAFTER,""String_Node_Str"");
    cfg.addCustomCategoryComment(StorageScannerConfiguration.CATEGORY_STORAGE_MONITOR,""String_Node_Str"");
    cfg.addCustomCategoryComment(NetworkMonitorConfiguration.CATEGORY_NETWORK_MONITOR,""String_Node_Str"");
    cfg.addCustomCategoryComment(TeleportConfiguration.CATEGORY_TELEPORTER,""String_Node_Str"");
    cfg.addCustomCategoryComment(EndergenicConfiguration.CATEGORY_ENDERGENIC,""String_Node_Str"");
    cfg.addCustomCategoryComment(ShieldConfiguration.CATEGORY_SHIELD,""String_Node_Str"");
    cfg.addCustomCategoryComment(DimletConfiguration.CATEGORY_DIMLETS,""String_Node_Str"");
    cfg.addCustomCategoryComment(DimletConstructionConfiguration.CATEGORY_DIMLET_CONSTRUCTION,""String_Node_Str"");
    cfg.addCustomCategoryComment(EnvironmentalConfiguration.CATEGORY_ENVIRONMENTAL,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_GENERAL,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_TYPERARIRTY,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_TYPETICKCOST,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_TYPERFCREATECOST,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_TYPERFMAINTAINCOST,""String_Node_Str"");
    cfg.addCustomCategoryComment(KnownDimletConfiguration.CATEGORY_MOBSPAWNS,""String_Node_Str"");
    GeneralConfiguration.init(cfg);
    NetworkMonitorConfiguration.init(cfg);
    CrafterConfiguration.init(cfg);
    StorageScannerConfiguration.init(cfg);
    TeleportConfiguration.init(cfg);
    EndergenicConfiguration.init(cfg);
    ShieldConfiguration.init(cfg);
    DimletConfiguration.init(cfg);
    DimletConstructionConfiguration.init(cfg);
    EnvironmentalConfiguration.init(cfg);
    ScreenConfiguration.init(cfg);
    KnownDimletConfiguration.initGeneralConfig(cfg);
    DimletCosts.initTypeRfCreateCost(cfg);
    DimletCosts.initTypeRfMaintainCost(cfg);
    DimletCosts.initTypeTickCost(cfg);
  }
 catch (  Exception e1) {
    FMLLog.log(Level.ERROR,e1,""String_Node_Str"");
  }
 finally {
    if (cfg.hasChanged()) {
      cfg.save();
    }
  }
}",0.9722650231124808
166013,"@SubscribeEvent public void loadEvent(WorldEvent.Load evt){
  if (evt.world.isRemote) {
    return;
  }
  if (MinecraftServer.getServer().isDedicatedServer()) {
    if (evt.world.provider.dimensionId == 0 && !KnownDimletConfiguration.isInitialized()) {
      RFTools.log(""String_Node_Str"");
      KnownDimletConfiguration.initServer(evt.world);
      KnownDimletConfiguration.initCrafting(evt.world);
    }
  }
 else {
    if (!KnownDimletConfiguration.isInitialized()) {
      RFTools.log(""String_Node_Str"");
      KnownDimletConfiguration.initClient(evt.world);
      KnownDimletConfiguration.initCrafting(evt.world);
    }
  }
}","@SubscribeEvent public void loadEvent(WorldEvent.Load evt){
  if (evt.world.isRemote) {
    return;
  }
  if (MinecraftServer.getServer().isDedicatedServer()) {
    if (evt.world.provider.dimensionId == 0 && !KnownDimletConfiguration.isInitialized()) {
      RFTools.log(""String_Node_Str"");
      KnownDimletConfiguration.init(evt.world);
      KnownDimletConfiguration.initCrafting(evt.world);
    }
  }
 else {
    if (!KnownDimletConfiguration.isInitialized()) {
      RFTools.log(""String_Node_Str"");
      KnownDimletConfiguration.init(evt.world);
      KnownDimletConfiguration.initCrafting(evt.world);
    }
  }
}",0.9904
166014,"private static void initEnvModuleCrafting(){
  Object inkSac=Item.itemRegistry.getObjectById(351);
  String[] syringeMatcher=new String[]{""String_Node_Str"",""String_Node_Str""};
  String[] pickMatcher=new String[]{""String_Node_Str""};
  ItemStack ironGolemSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack ghastSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack chickenSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack batSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack horseSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack zombieSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack diamondPick=createEnchantedItem(Items.diamond_pickaxe,Enchantment.efficiency.effectId,3);
  ItemStack reds=new ItemStack(Items.redstone);
  ItemStack gold=new ItemStack(Items.gold_ingot);
  ItemStack ink=new ItemStack((Item)inkSac);
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,chickenSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.featherFallingEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,ironGolemSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.regenerationEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,horseSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.speedEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,diamondPick,null,reds,gold,reds,null,ink,null},new String[][]{null,pickMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.hasteEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,zombieSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.saturationEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,ghastSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.flightEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.regenerationEModuleItem),ironGolemSyringe,ironGolemSyringe,null},new String[][]{null,syringeMatcher,syringeMatcher,null},new ItemStack(ModItems.regenerationPlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.speedEModuleItem),horseSyringe,horseSyringe,null},new String[][]{null,syringeMatcher,syringeMatcher,null},new ItemStack(ModItems.speedPlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.hasteEModuleItem),diamondPick,null,null},new String[][]{null,pickMatcher,null,null},new ItemStack(ModItems.hastePlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.saturationEModuleItem),zombieSyringe,zombieSyringe,null},new String[][]{null,syringeMatcher,syringeMatcher,null},new ItemStack(ModItems.saturationPlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.featherFallingEModuleItem),chickenSyringe,batSyringe,null},new String[][]{null,syringeMatcher,syringeMatcher,null},new ItemStack(ModItems.featherFallingPlusEModuleItem)));
}","private static void initEnvModuleCrafting(){
  Object inkSac=Item.itemRegistry.getObjectById(351);
  String[] syringeMatcher=new String[]{""String_Node_Str"",""String_Node_Str""};
  String[] pickMatcher=new String[]{""String_Node_Str""};
  ItemStack ironGolemSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack ghastSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack chickenSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack batSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack horseSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack zombieSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack diamondPick=createEnchantedItem(Items.diamond_pickaxe,Enchantment.efficiency.effectId,3);
  ItemStack reds=new ItemStack(Items.redstone);
  ItemStack gold=new ItemStack(Items.gold_ingot);
  ItemStack ink=new ItemStack((Item)inkSac);
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,chickenSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.featherFallingEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,ironGolemSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.regenerationEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{new ItemStack(Items.saddle),horseSyringe,new ItemStack(Items.saddle),reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.speedEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,diamondPick,null,reds,gold,reds,null,ink,null},new String[][]{null,pickMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.hasteEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,zombieSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.saturationEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,ghastSyringe,null,reds,gold,reds,null,ink,null},new String[][]{null,syringeMatcher,null,null,null,null,null,null,null},new ItemStack(ModItems.flightEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.regenerationEModuleItem),ironGolemSyringe,ironGolemSyringe,null},new String[][]{null,syringeMatcher,syringeMatcher,null},new ItemStack(ModItems.regenerationPlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.speedEModuleItem),horseSyringe,horseSyringe,null},new String[][]{null,syringeMatcher,syringeMatcher,null},new ItemStack(ModItems.speedPlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.hasteEModuleItem),diamondPick,null,null},new String[][]{null,pickMatcher,null,null},new ItemStack(ModItems.hastePlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.saturationEModuleItem),zombieSyringe,zombieSyringe,null},new String[][]{null,syringeMatcher,syringeMatcher,null},new ItemStack(ModItems.saturationPlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.featherFallingEModuleItem),chickenSyringe,batSyringe,null},new String[][]{null,syringeMatcher,syringeMatcher,null},new ItemStack(ModItems.featherFallingPlusEModuleItem)));
}",0.9876508560202076
166015,"/** 
 * Here the information from the server arrives. This code is executed on the client.
 */
public void checkDimletConfigFromServer(Map<Integer,DimletKey> dimlets,World world){
  RFTools.log(""String_Node_Str"");
  DimletMapping mapping=DimletMapping.getDimletMapping(world);
  mapping.overrideServerMapping(dimlets);
  KnownDimletConfiguration.init(world,null);
  KnownDimletConfiguration.initCrafting(world);
}","/** 
 * Here the information from the server arrives. This code is executed on the client.
 */
public void checkDimletConfigFromServer(Map<Integer,DimletKey> dimlets,World world){
  RFTools.log(""String_Node_Str"");
  DimletMapping mapping=DimletMapping.getDimletMapping(world);
  mapping.overrideServerMapping(dimlets);
  KnownDimletConfiguration.init(world);
  KnownDimletConfiguration.initCrafting(world);
}",0.879415347137637
166016,"static void setupWeightedRandomList(Configuration cfg,DimletMapping mapping){
  float rarity0=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",500.0f).getDouble();
  float rarity1=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble();
  float rarity2=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble();
  float rarity3=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble();
  float rarity4=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble();
  float rarity5=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble();
  float rarity6=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble();
  randomDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomMobDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomMobDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomStructureDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomStructureDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomEffectDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomEffectDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomFeatureDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomFeatureDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  for (  Map.Entry<DimletKey,DimletEntry> entry : KnownDimletConfiguration.idToDimletEntry.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    DimletKey key=entry.getValue().getKey();
    if (key.getType() == DimletType.DIMLET_MATERIAL) {
      if (DimletObjectMapping.idToBlock.get(key) != null) {
        randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_LIQUID) {
      if (DimletObjectMapping.idToFluid.get(key) != null) {
        randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_MOBS) {
      MobDescriptor descriptor=DimletObjectMapping.idtoMob.get(key);
      if (descriptor != null && descriptor.getEntityClass() != null) {
        randomMobDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_EFFECT) {
      if (DimletObjectMapping.idToEffectType.get(key) != EffectType.EFFECT_NONE) {
        randomEffectDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_FEATURE) {
      if (DimletObjectMapping.idToFeatureType.get(key) != FeatureType.FEATURE_NONE) {
        randomFeatureDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_STRUCTURE) {
      if (DimletObjectMapping.idToStructureType.get(key) != StructureType.STRUCTURE_NONE) {
        randomStructureDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
  }
}","static void setupWeightedRandomList(){
  randomDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomMobDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomMobDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomStructureDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomStructureDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomEffectDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomEffectDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomFeatureDimlets=new WeightedRandomSelector<Integer,DimletKey>();
  setupRarity(randomFeatureDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  for (  Map.Entry<DimletKey,DimletEntry> entry : KnownDimletConfiguration.idToDimletEntry.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    DimletKey key=entry.getValue().getKey();
    if (key.getType() == DimletType.DIMLET_MATERIAL) {
      if (DimletObjectMapping.idToBlock.get(key) != null) {
        randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_LIQUID) {
      if (DimletObjectMapping.idToFluid.get(key) != null) {
        randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_MOBS) {
      MobDescriptor descriptor=DimletObjectMapping.idtoMob.get(key);
      if (descriptor != null && descriptor.getEntityClass() != null) {
        randomMobDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_EFFECT) {
      if (DimletObjectMapping.idToEffectType.get(key) != EffectType.EFFECT_NONE) {
        randomEffectDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_FEATURE) {
      if (DimletObjectMapping.idToFeatureType.get(key) != FeatureType.FEATURE_NONE) {
        randomFeatureDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (key.getType() == DimletType.DIMLET_STRUCTURE) {
      if (DimletObjectMapping.idToStructureType.get(key) != StructureType.STRUCTURE_NONE) {
        randomStructureDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
  }
}",0.875556237532607
166017,"private static List<DimletDescriptor> parseNewDescriptionString(String descriptionString){
  List<DimletDescriptor> result=new ArrayList<DimletDescriptor>();
  if (!descriptionString.isEmpty()) {
    String[] opcodes=descriptionString.substring(1).split(""String_Node_Str"");
    for (    String oc : opcodes) {
      DimletKey key;
      if (oc.startsWith(""String_Node_Str"")) {
        key=DimletKey.parseKey(oc.substring(1));
      }
 else       if (oc.startsWith(""String_Node_Str"")) {
        key=DimletKey.parseKey(oc.substring(1));
      }
 else {
        key=DimletKey.parseKey(oc);
      }
      result.add(new DimletDescriptor(key.getType(),key));
    }
  }
  return result;
}","private static List<DimletDescriptor> parseNewDescriptionString(String descriptionString){
  List<DimletDescriptor> result=new ArrayList<DimletDescriptor>();
  String ds=descriptionString.substring(1);
  if (!ds.isEmpty()) {
    String[] opcodes=ds.split(""String_Node_Str"");
    for (    String oc : opcodes) {
      DimletKey key;
      if (oc.startsWith(""String_Node_Str"")) {
        key=DimletKey.parseKey(oc.substring(1));
      }
 else       if (oc.startsWith(""String_Node_Str"")) {
        key=DimletKey.parseKey(oc.substring(1));
      }
 else {
        key=DimletKey.parseKey(oc);
      }
      result.add(new DimletDescriptor(key.getType(),key));
    }
  }
  return result;
}",0.6358974358974359
166018,"@SubscribeEvent public void onDisconnectedFromServerEvent(FMLNetworkEvent.ClientDisconnectionFromServerEvent event){
  System.out.println(""String_Node_Str"");
  RfToolsDimensionManager.unregisterDimensions();
  KnownDimletConfiguration.clean();
}","@SubscribeEvent public void onDisconnectedFromServerEvent(FMLNetworkEvent.ClientDisconnectionFromServerEvent event){
  RFTools.log(""String_Node_Str"");
  RfToolsDimensionManager.unregisterDimensions();
  KnownDimletConfiguration.clean();
}",0.9399585921325052
166019,"@EventHandler public void serverStopped(FMLServerStoppedEvent event){
  System.out.println(""String_Node_Str"");
  RfToolsDimensionManager.unregisterDimensions();
  TeleportDestinations.clearInstance();
  RfToolsDimensionManager.clearInstance();
  DimensionStorage.clearInstance();
  DimletMapping.clearInstance();
  RedstoneChannels.clearInstance();
}","@EventHandler public void serverStopped(FMLServerStoppedEvent event){
  System.out.println(""String_Node_Str"");
  RfToolsDimensionManager.cleanupDimensionInformation();
  TeleportDestinations.clearInstance();
  RfToolsDimensionManager.clearInstance();
  DimensionStorage.clearInstance();
  DimletMapping.clearInstance();
  RedstoneChannels.clearInstance();
}",0.9363507779349364
166020,"@SubscribeEvent public void unloadEvent(WorldEvent.Unload evt){
  int d=evt.world.provider.dimensionId;
  if (d != 0) {
    return;
  }
  if (!evt.world.isRemote) {
    if (MinecraftServer.getServer().isDedicatedServer()) {
      RfToolsDimensionManager.unregisterDimensions();
      KnownDimletConfiguration.clean();
    }
  }
}","@SubscribeEvent public void unloadEvent(WorldEvent.Unload evt){
  int d=evt.world.provider.dimensionId;
  if (d != 0) {
    return;
  }
  if (!evt.world.isRemote) {
    if (MinecraftServer.getServer().isDedicatedServer()) {
      RfToolsDimensionManager.cleanupDimensionInformation();
      KnownDimletConfiguration.clean();
    }
  }
}",0.8120300751879699
166021,"public static void unregisterDimensions(){
  if (instance != null) {
    RFTools.log(""String_Node_Str"");
    for (    Map.Entry<Integer,DimensionDescriptor> me : instance.getDimensions().entrySet()) {
      int id=me.getKey();
      RFTools.log(""String_Node_Str"" + id);
      if (DimensionManager.isDimensionRegistered(id)) {
        try {
          DimensionManager.unregisterDimension(id);
        }
 catch (        Exception e) {
          RFTools.log(""String_Node_Str"" + id);
        }
        try {
          DimensionManager.unregisterProviderType(id);
        }
 catch (        Exception e) {
          RFTools.log(""String_Node_Str"" + id);
        }
      }
    }
    instance.getDimensions().clear();
    instance.dimensionToID.clear();
    instance.dimensionInformation.clear();
    instance.reclaimedIds.clear();
  }
}","public static void unregisterDimensions(){
  for (  Map.Entry<Integer,DimensionDescriptor> me : instance.getDimensions().entrySet()) {
    int id=me.getKey();
    if (DimensionManager.isDimensionRegistered(id)) {
      RFTools.log(""String_Node_Str"" + id);
      try {
        DimensionManager.unregisterDimension(id);
      }
 catch (      Exception e) {
        RFTools.log(""String_Node_Str"" + id);
      }
      try {
        DimensionManager.unregisterProviderType(id);
      }
 catch (      Exception e) {
        RFTools.log(""String_Node_Str"" + id);
      }
    }
 else {
      RFTools.log(""String_Node_Str"" + id);
    }
  }
}",0.4084989718985606
166022,"public void syncFromServer(Map<Integer,DimensionDescriptor> dims,Map<Integer,DimensionInformation> dimInfo){
  System.out.println(""String_Node_Str"");
  if (dims.isEmpty() || dimInfo.isEmpty()) {
    RFTools.log(""String_Node_Str"");
  }
  for (  Map.Entry<Integer,DimensionDescriptor> entry : dims.entrySet()) {
    int id=entry.getKey();
    DimensionDescriptor descriptor=entry.getValue();
    if (dimensions.containsKey(id)) {
      dimensionToID.remove(dimensions.get(id));
    }
    dimensions.put(id,descriptor);
    dimensionToID.put(descriptor,id);
  }
  for (  Map.Entry<Integer,DimensionInformation> entry : dimInfo.entrySet()) {
    int id=entry.getKey();
    DimensionInformation info=entry.getValue();
    dimensionInformation.put(id,info);
  }
}","public void syncFromServer(Map<Integer,DimensionDescriptor> dims,Map<Integer,DimensionInformation> dimInfo){
  RFTools.log(""String_Node_Str"");
  if (dims.isEmpty() || dimInfo.isEmpty()) {
    RFTools.log(""String_Node_Str"");
  }
  for (  Map.Entry<Integer,DimensionDescriptor> entry : dims.entrySet()) {
    int id=entry.getKey();
    DimensionDescriptor descriptor=entry.getValue();
    if (dimensions.containsKey(id)) {
      dimensionToID.remove(dimensions.get(id));
    }
    dimensions.put(id,descriptor);
    dimensionToID.put(descriptor,id);
  }
  for (  Map.Entry<Integer,DimensionInformation> entry : dimInfo.entrySet()) {
    int id=entry.getKey();
    DimensionInformation info=entry.getValue();
    dimensionInformation.put(id,info);
  }
}",0.8878566688785667
166023,"private void setupFromNBT(NBTTagCompound tagCompound){
  terrainType=TerrainType.values()[tagCompound.getInteger(""String_Node_Str"")];
  featureTypes=toEnumSet(getIntArraySafe(tagCompound,""String_Node_Str""),FeatureType.values());
  structureTypes=toEnumSet(getIntArraySafe(tagCompound,""String_Node_Str""),StructureType.values());
  effectTypes=toEnumSet(getIntArraySafe(tagCompound,""String_Node_Str""),EffectType.values());
  biomes.clear();
  for (  int a : getIntArraySafe(tagCompound,""String_Node_Str"")) {
    biomes.add(BiomeGenBase.getBiome(a));
  }
  if (tagCompound.hasKey(""String_Node_Str"")) {
    controllerType=ControllerType.values()[tagCompound.getInteger(""String_Node_Str"")];
  }
 else {
    if (biomes.isEmpty()) {
      controllerType=ControllerType.CONTROLLER_DEFAULT;
    }
 else {
      controllerType=ControllerType.CONTROLLER_SINGLE;
    }
  }
  digitString=tagCompound.getString(""String_Node_Str"");
  forcedDimensionSeed=tagCompound.getLong(""String_Node_Str"");
  worldVersion=tagCompound.getInteger(""String_Node_Str"");
  baseBlockForTerrain=getBlockMeta(tagCompound,""String_Node_Str"");
  tendrilBlock=getBlockMeta(tagCompound,""String_Node_Str"");
  sphereBlock=getBlockMeta(tagCompound,""String_Node_Str"");
  liquidSphereBlock=getBlockMeta(tagCompound,""String_Node_Str"");
  liquidSphereFluid=(Block)Block.blockRegistry.getObjectById(tagCompound.getInteger(""String_Node_Str""));
  canyonBlock=getBlockMeta(tagCompound,""String_Node_Str"");
  fluidForTerrain=(Block)Block.blockRegistry.getObjectById(tagCompound.getInteger(""String_Node_Str""));
  readOresFromNBT(tagCompound);
  readFluidsFromNBT(tagCompound);
  peaceful=tagCompound.getBoolean(""String_Node_Str"");
  shelter=tagCompound.getBoolean(""String_Node_Str"");
  if (tagCompound.hasKey(""String_Node_Str"")) {
    celestialAngle=tagCompound.getFloat(""String_Node_Str"");
  }
 else {
    celestialAngle=null;
  }
  if (tagCompound.hasKey(""String_Node_Str"")) {
    timeSpeed=tagCompound.getFloat(""String_Node_Str"");
  }
 else {
    timeSpeed=null;
  }
  probeCounter=tagCompound.getInteger(""String_Node_Str"");
  actualRfCost=tagCompound.getInteger(""String_Node_Str"");
  skyDescriptor=new SkyDescriptor.Builder().fromNBT(tagCompound).build();
  calculateCelestialBodyDescriptors();
  extraMobs.clear();
  NBTTagList list=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < list.tagCount(); i++) {
    NBTTagCompound tc=list.getCompoundTagAt(i);
    String className=tc.getString(""String_Node_Str"");
    int chance=tc.getInteger(""String_Node_Str"");
    int minGroup=tc.getInteger(""String_Node_Str"");
    int maxGroup=tc.getInteger(""String_Node_Str"");
    int maxLoaded=tc.getInteger(""String_Node_Str"");
    Class<? extends EntityLiving> c=null;
    try {
      c=(Class<? extends EntityLiving>)Class.forName(className);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    MobDescriptor mob=new MobDescriptor(c,chance,minGroup,maxGroup,maxLoaded);
    extraMobs.add(mob);
  }
}","private void setupFromNBT(NBTTagCompound tagCompound){
  terrainType=TerrainType.values()[tagCompound.getInteger(""String_Node_Str"")];
  featureTypes=toEnumSet(getIntArraySafe(tagCompound,""String_Node_Str""),FeatureType.values());
  structureTypes=toEnumSet(getIntArraySafe(tagCompound,""String_Node_Str""),StructureType.values());
  effectTypes=toEnumSet(getIntArraySafe(tagCompound,""String_Node_Str""),EffectType.values());
  biomes.clear();
  for (  int a : getIntArraySafe(tagCompound,""String_Node_Str"")) {
    biomes.add(BiomeGenBase.getBiome(a));
  }
  if (tagCompound.hasKey(""String_Node_Str"")) {
    controllerType=ControllerType.values()[tagCompound.getInteger(""String_Node_Str"")];
  }
 else {
    if (biomes.isEmpty()) {
      controllerType=ControllerType.CONTROLLER_DEFAULT;
    }
 else {
      controllerType=ControllerType.CONTROLLER_SINGLE;
    }
  }
  digitString=tagCompound.getString(""String_Node_Str"");
  forcedDimensionSeed=tagCompound.getLong(""String_Node_Str"");
  baseSeed=tagCompound.getLong(""String_Node_Str"");
  worldVersion=tagCompound.getInteger(""String_Node_Str"");
  baseBlockForTerrain=getBlockMeta(tagCompound,""String_Node_Str"");
  tendrilBlock=getBlockMeta(tagCompound,""String_Node_Str"");
  sphereBlock=getBlockMeta(tagCompound,""String_Node_Str"");
  liquidSphereBlock=getBlockMeta(tagCompound,""String_Node_Str"");
  liquidSphereFluid=(Block)Block.blockRegistry.getObjectById(tagCompound.getInteger(""String_Node_Str""));
  canyonBlock=getBlockMeta(tagCompound,""String_Node_Str"");
  fluidForTerrain=(Block)Block.blockRegistry.getObjectById(tagCompound.getInteger(""String_Node_Str""));
  readOresFromNBT(tagCompound);
  readFluidsFromNBT(tagCompound);
  peaceful=tagCompound.getBoolean(""String_Node_Str"");
  shelter=tagCompound.getBoolean(""String_Node_Str"");
  if (tagCompound.hasKey(""String_Node_Str"")) {
    celestialAngle=tagCompound.getFloat(""String_Node_Str"");
  }
 else {
    celestialAngle=null;
  }
  if (tagCompound.hasKey(""String_Node_Str"")) {
    timeSpeed=tagCompound.getFloat(""String_Node_Str"");
  }
 else {
    timeSpeed=null;
  }
  probeCounter=tagCompound.getInteger(""String_Node_Str"");
  actualRfCost=tagCompound.getInteger(""String_Node_Str"");
  skyDescriptor=new SkyDescriptor.Builder().fromNBT(tagCompound).build();
  calculateCelestialBodyDescriptors();
  extraMobs.clear();
  NBTTagList list=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < list.tagCount(); i++) {
    NBTTagCompound tc=list.getCompoundTagAt(i);
    String className=tc.getString(""String_Node_Str"");
    int chance=tc.getInteger(""String_Node_Str"");
    int minGroup=tc.getInteger(""String_Node_Str"");
    int maxGroup=tc.getInteger(""String_Node_Str"");
    int maxLoaded=tc.getInteger(""String_Node_Str"");
    Class<? extends EntityLiving> c=null;
    try {
      c=(Class<? extends EntityLiving>)Class.forName(className);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    MobDescriptor mob=new MobDescriptor(c,chance,minGroup,maxGroup,maxLoaded);
    extraMobs.add(mob);
  }
}",0.9916132215096202
166024,"public DimensionInformation(String name,DimensionDescriptor descriptor,ByteBuf buf){
  this.name=name;
  this.descriptor=descriptor;
  terrainType=ByteBufTools.readEnum(buf,TerrainType.values());
  ByteBufTools.readEnumCollection(buf,featureTypes,FeatureType.values());
  ByteBufTools.readEnumCollection(buf,structureTypes,StructureType.values());
  ByteBufTools.readEnumCollection(buf,effectTypes,EffectType.values());
  biomes.clear();
  int size=buf.readInt();
  for (int i=0; i < size; i++) {
    biomes.add(BiomeGenBase.getBiome(buf.readInt()));
  }
  controllerType=ByteBufTools.readEnum(buf,ControllerType.values());
  digitString=ByteBufTools.readString(buf);
  forcedDimensionSeed=buf.readLong();
  worldVersion=buf.readInt();
  Block block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  int meta=buf.readInt();
  baseBlockForTerrain=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  tendrilBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  sphereBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  liquidSphereBlock=new BlockMeta(block,meta);
  liquidSphereFluid=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  canyonBlock=new BlockMeta(block,meta);
  fluidForTerrain=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  size=buf.readInt();
  List<BlockMeta> blocksMeta=new ArrayList<BlockMeta>();
  for (int i=0; i < size; i++) {
    Block b=(Block)Block.blockRegistry.getObjectById(buf.readInt());
    int m=buf.readInt();
    blocksMeta.add(new BlockMeta(b,m));
  }
  extraOregen=blocksMeta.toArray(new BlockMeta[blocksMeta.size()]);
  List<Block> blocks=new ArrayList<Block>();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    blocks.add((Block)Block.blockRegistry.getObjectById(buf.readInt()));
  }
  fluidsForLakes=blocks.toArray(new Block[blocks.size()]);
  peaceful=buf.readBoolean();
  shelter=buf.readBoolean();
  celestialAngle=ByteBufTools.readFloat(buf);
  timeSpeed=ByteBufTools.readFloat(buf);
  probeCounter=buf.readInt();
  actualRfCost=buf.readInt();
  skyDescriptor=new SkyDescriptor.Builder().fromBytes(buf).build();
  calculateCelestialBodyDescriptors();
  extraMobs.clear();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    String className=ByteBufTools.readString(buf);
    try {
      Class<? extends EntityLiving> c=(Class<? extends EntityLiving>)Class.forName(className);
      int chance=buf.readInt();
      int minGroup=buf.readInt();
      int maxGroup=buf.readInt();
      int maxLoaded=buf.readInt();
      MobDescriptor mob=new MobDescriptor(c,chance,minGroup,maxGroup,maxLoaded);
      extraMobs.add(mob);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  setupBiomeMapping();
}","public DimensionInformation(String name,DimensionDescriptor descriptor,ByteBuf buf){
  this.name=name;
  this.descriptor=descriptor;
  terrainType=ByteBufTools.readEnum(buf,TerrainType.values());
  ByteBufTools.readEnumCollection(buf,featureTypes,FeatureType.values());
  ByteBufTools.readEnumCollection(buf,structureTypes,StructureType.values());
  ByteBufTools.readEnumCollection(buf,effectTypes,EffectType.values());
  biomes.clear();
  int size=buf.readInt();
  for (int i=0; i < size; i++) {
    biomes.add(BiomeGenBase.getBiome(buf.readInt()));
  }
  controllerType=ByteBufTools.readEnum(buf,ControllerType.values());
  digitString=ByteBufTools.readString(buf);
  forcedDimensionSeed=buf.readLong();
  baseSeed=buf.readLong();
  worldVersion=buf.readInt();
  Block block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  int meta=buf.readInt();
  baseBlockForTerrain=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  tendrilBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  sphereBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  liquidSphereBlock=new BlockMeta(block,meta);
  liquidSphereFluid=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  canyonBlock=new BlockMeta(block,meta);
  fluidForTerrain=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  size=buf.readInt();
  List<BlockMeta> blocksMeta=new ArrayList<BlockMeta>();
  for (int i=0; i < size; i++) {
    Block b=(Block)Block.blockRegistry.getObjectById(buf.readInt());
    int m=buf.readInt();
    blocksMeta.add(new BlockMeta(b,m));
  }
  extraOregen=blocksMeta.toArray(new BlockMeta[blocksMeta.size()]);
  List<Block> blocks=new ArrayList<Block>();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    blocks.add((Block)Block.blockRegistry.getObjectById(buf.readInt()));
  }
  fluidsForLakes=blocks.toArray(new Block[blocks.size()]);
  peaceful=buf.readBoolean();
  shelter=buf.readBoolean();
  celestialAngle=ByteBufTools.readFloat(buf);
  timeSpeed=ByteBufTools.readFloat(buf);
  probeCounter=buf.readInt();
  actualRfCost=buf.readInt();
  skyDescriptor=new SkyDescriptor.Builder().fromBytes(buf).build();
  calculateCelestialBodyDescriptors();
  extraMobs.clear();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    String className=ByteBufTools.readString(buf);
    try {
      Class<? extends EntityLiving> c=(Class<? extends EntityLiving>)Class.forName(className);
      int chance=buf.readInt();
      int minGroup=buf.readInt();
      int maxGroup=buf.readInt();
      int maxLoaded=buf.readInt();
      MobDescriptor mob=new MobDescriptor(c,chance,minGroup,maxGroup,maxLoaded);
      extraMobs.add(mob);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  setupBiomeMapping();
}",0.99552164538066
166025,"public void toBytes(ByteBuf buf){
  ByteBufTools.writeEnum(buf,terrainType,TerrainType.TERRAIN_VOID);
  ByteBufTools.writeEnumCollection(buf,featureTypes);
  ByteBufTools.writeEnumCollection(buf,structureTypes);
  ByteBufTools.writeEnumCollection(buf,effectTypes);
  buf.writeInt(biomes.size());
  for (  BiomeGenBase entry : biomes) {
    buf.writeInt(entry.biomeID);
  }
  ByteBufTools.writeEnum(buf,controllerType,ControllerType.CONTROLLER_DEFAULT);
  ByteBufTools.writeString(buf,digitString);
  buf.writeLong(forcedDimensionSeed);
  buf.writeInt(worldVersion);
  buf.writeInt(Block.blockRegistry.getIDForObject(baseBlockForTerrain.getBlock()));
  buf.writeInt(baseBlockForTerrain.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(tendrilBlock.getBlock()));
  buf.writeInt(tendrilBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(sphereBlock.getBlock()));
  buf.writeInt(sphereBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(liquidSphereBlock.getBlock()));
  buf.writeInt(liquidSphereBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(liquidSphereFluid));
  buf.writeInt(Block.blockRegistry.getIDForObject(canyonBlock.getBlock()));
  buf.writeInt(canyonBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(fluidForTerrain));
  buf.writeInt(extraOregen.length);
  for (  BlockMeta block : extraOregen) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block.getBlock()));
    buf.writeInt(block.getMeta());
  }
  buf.writeInt(fluidsForLakes.length);
  for (  Block block : fluidsForLakes) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block));
  }
  buf.writeBoolean(peaceful);
  buf.writeBoolean(shelter);
  ByteBufTools.writeFloat(buf,celestialAngle);
  ByteBufTools.writeFloat(buf,timeSpeed);
  buf.writeInt(probeCounter);
  buf.writeInt(actualRfCost);
  skyDescriptor.toBytes(buf);
  buf.writeInt(extraMobs.size());
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() != null) {
        ByteBufTools.writeString(buf,mob.getEntityClass().getName());
        buf.writeInt(mob.getSpawnChance());
        buf.writeInt(mob.getMinGroup());
        buf.writeInt(mob.getMaxGroup());
        buf.writeInt(mob.getMaxLoaded());
      }
    }
  }
}","public void toBytes(ByteBuf buf){
  ByteBufTools.writeEnum(buf,terrainType,TerrainType.TERRAIN_VOID);
  ByteBufTools.writeEnumCollection(buf,featureTypes);
  ByteBufTools.writeEnumCollection(buf,structureTypes);
  ByteBufTools.writeEnumCollection(buf,effectTypes);
  buf.writeInt(biomes.size());
  for (  BiomeGenBase entry : biomes) {
    buf.writeInt(entry.biomeID);
  }
  ByteBufTools.writeEnum(buf,controllerType,ControllerType.CONTROLLER_DEFAULT);
  ByteBufTools.writeString(buf,digitString);
  buf.writeLong(forcedDimensionSeed);
  buf.writeLong(baseSeed);
  buf.writeInt(worldVersion);
  buf.writeInt(Block.blockRegistry.getIDForObject(baseBlockForTerrain.getBlock()));
  buf.writeInt(baseBlockForTerrain.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(tendrilBlock.getBlock()));
  buf.writeInt(tendrilBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(sphereBlock.getBlock()));
  buf.writeInt(sphereBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(liquidSphereBlock.getBlock()));
  buf.writeInt(liquidSphereBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(liquidSphereFluid));
  buf.writeInt(Block.blockRegistry.getIDForObject(canyonBlock.getBlock()));
  buf.writeInt(canyonBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(fluidForTerrain));
  buf.writeInt(extraOregen.length);
  for (  BlockMeta block : extraOregen) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block.getBlock()));
    buf.writeInt(block.getMeta());
  }
  buf.writeInt(fluidsForLakes.length);
  for (  Block block : fluidsForLakes) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block));
  }
  buf.writeBoolean(peaceful);
  buf.writeBoolean(shelter);
  ByteBufTools.writeFloat(buf,celestialAngle);
  ByteBufTools.writeFloat(buf,timeSpeed);
  buf.writeInt(probeCounter);
  buf.writeInt(actualRfCost);
  skyDescriptor.toBytes(buf);
  buf.writeInt(extraMobs.size());
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() != null) {
        ByteBufTools.writeString(buf,mob.getEntityClass().getName());
        buf.writeInt(mob.getSpawnChance());
        buf.writeInt(mob.getMinGroup());
        buf.writeInt(mob.getMaxGroup());
        buf.writeInt(mob.getMaxLoaded());
      }
    }
  }
}",0.9941163652211812
166026,"public void dump(EntityPlayer player){
  String digits=getDigitString();
  if (!digits.isEmpty()) {
    logDebug(player,""String_Node_Str"" + digits);
  }
  if (forcedDimensionSeed != 0) {
    logDebug(player,""String_Node_Str"" + forcedDimensionSeed);
  }
  logDebug(player,""String_Node_Str"" + worldVersion);
  TerrainType terrainType=getTerrainType();
  logDebug(player,""String_Node_Str"" + terrainType.toString());
  logDebug(player,""String_Node_Str"" + new ItemStack(baseBlockForTerrain.getBlock(),1,baseBlockForTerrain.getMeta()).getDisplayName());
  if (featureTypes.contains(FeatureType.FEATURE_TENDRILS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(tendrilBlock.getBlock(),1,tendrilBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_ORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(sphereBlock.getBlock(),1,sphereBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LIQUIDORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(liquidSphereBlock.getBlock(),1,liquidSphereBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_CANYONS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(canyonBlock.getBlock(),1,canyonBlock.getMeta()).getDisplayName());
  }
  logDebug(player,""String_Node_Str"" + new ItemStack(fluidForTerrain).getDisplayName());
  logDebug(player,""String_Node_Str"" + (controllerType == null ? ""String_Node_Str"" : controllerType.name()));
  for (  BiomeGenBase biome : getBiomes()) {
    logDebug(player,""String_Node_Str"" + biome.biomeName);
  }
  for (  FeatureType featureType : getFeatureTypes()) {
    logDebug(player,""String_Node_Str"" + featureType.toString());
  }
  for (  BlockMeta block : extraOregen) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block.getBlock(),1,block.getMeta()).getDisplayName());
  }
  for (  Block block : fluidsForLakes) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LIQUIDORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(liquidSphereFluid).getDisplayName());
  }
  for (  StructureType structureType : getStructureTypes()) {
    logDebug(player,""String_Node_Str"" + structureType.toString());
  }
  for (  EffectType effectType : getEffectTypes()) {
    logDebug(player,""String_Node_Str"" + effectType.toString());
  }
  logDebug(player,""String_Node_Str"" + skyDescriptor.getSunBrightnessFactor());
  logDebug(player,""String_Node_Str"" + skyDescriptor.getStarBrightnessFactor());
  float r=skyDescriptor.getSkyColorFactorR();
  float g=skyDescriptor.getSkyColorFactorG();
  float b=skyDescriptor.getSkyColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  r=skyDescriptor.getFogColorFactorR();
  g=skyDescriptor.getFogColorFactorG();
  b=skyDescriptor.getFogColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  SkyType skyType=skyDescriptor.getSkyType();
  if (skyType != SkyType.SKY_NORMAL) {
    logDebug(player,""String_Node_Str"" + skyType.toString());
  }
  for (  CelestialBodyType bodyType : skyDescriptor.getCelestialBodies()) {
    logDebug(player,""String_Node_Str"" + bodyType.name());
  }
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() == null) {
        logDebug(player,""String_Node_Str"" + mob);
      }
 else {
        logDebug(player,""String_Node_Str"" + mob.getEntityClass().getName());
      }
    }
  }
  if (peaceful) {
    logDebug(player,""String_Node_Str"");
  }
  if (shelter) {
    logDebug(player,""String_Node_Str"");
  }
  if (celestialAngle != null) {
    logDebug(player,""String_Node_Str"" + celestialAngle);
  }
  if (timeSpeed != null) {
    logDebug(player,""String_Node_Str"" + timeSpeed);
  }
  if (probeCounter > 0) {
    logDebug(player,""String_Node_Str"" + probeCounter);
  }
}","public void dump(EntityPlayer player){
  String digits=getDigitString();
  if (!digits.isEmpty()) {
    logDebug(player,""String_Node_Str"" + digits);
  }
  if (forcedDimensionSeed != 0) {
    logDebug(player,""String_Node_Str"" + forcedDimensionSeed);
  }
  if (baseSeed != 0) {
    logDebug(player,""String_Node_Str"" + baseSeed);
  }
  logDebug(player,""String_Node_Str"" + worldVersion);
  TerrainType terrainType=getTerrainType();
  logDebug(player,""String_Node_Str"" + terrainType.toString());
  logDebug(player,""String_Node_Str"" + new ItemStack(baseBlockForTerrain.getBlock(),1,baseBlockForTerrain.getMeta()).getDisplayName());
  if (featureTypes.contains(FeatureType.FEATURE_TENDRILS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(tendrilBlock.getBlock(),1,tendrilBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_ORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(sphereBlock.getBlock(),1,sphereBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LIQUIDORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(liquidSphereBlock.getBlock(),1,liquidSphereBlock.getMeta()).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_CANYONS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(canyonBlock.getBlock(),1,canyonBlock.getMeta()).getDisplayName());
  }
  logDebug(player,""String_Node_Str"" + new ItemStack(fluidForTerrain).getDisplayName());
  logDebug(player,""String_Node_Str"" + (controllerType == null ? ""String_Node_Str"" : controllerType.name()));
  for (  BiomeGenBase biome : getBiomes()) {
    logDebug(player,""String_Node_Str"" + biome.biomeName);
  }
  for (  FeatureType featureType : getFeatureTypes()) {
    logDebug(player,""String_Node_Str"" + featureType.toString());
  }
  for (  BlockMeta block : extraOregen) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block.getBlock(),1,block.getMeta()).getDisplayName());
  }
  for (  Block block : fluidsForLakes) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LIQUIDORBS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(liquidSphereFluid).getDisplayName());
  }
  for (  StructureType structureType : getStructureTypes()) {
    logDebug(player,""String_Node_Str"" + structureType.toString());
  }
  for (  EffectType effectType : getEffectTypes()) {
    logDebug(player,""String_Node_Str"" + effectType.toString());
  }
  logDebug(player,""String_Node_Str"" + skyDescriptor.getSunBrightnessFactor());
  logDebug(player,""String_Node_Str"" + skyDescriptor.getStarBrightnessFactor());
  float r=skyDescriptor.getSkyColorFactorR();
  float g=skyDescriptor.getSkyColorFactorG();
  float b=skyDescriptor.getSkyColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  r=skyDescriptor.getFogColorFactorR();
  g=skyDescriptor.getFogColorFactorG();
  b=skyDescriptor.getFogColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  SkyType skyType=skyDescriptor.getSkyType();
  if (skyType != SkyType.SKY_NORMAL) {
    logDebug(player,""String_Node_Str"" + skyType.toString());
  }
  for (  CelestialBodyType bodyType : skyDescriptor.getCelestialBodies()) {
    logDebug(player,""String_Node_Str"" + bodyType.name());
  }
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() == null) {
        logDebug(player,""String_Node_Str"" + mob);
      }
 else {
        logDebug(player,""String_Node_Str"" + mob.getEntityClass().getName());
      }
    }
  }
  if (peaceful) {
    logDebug(player,""String_Node_Str"");
  }
  if (shelter) {
    logDebug(player,""String_Node_Str"");
  }
  if (celestialAngle != null) {
    logDebug(player,""String_Node_Str"" + celestialAngle);
  }
  if (timeSpeed != null) {
    logDebug(player,""String_Node_Str"" + timeSpeed);
  }
  if (probeCounter > 0) {
    logDebug(player,""String_Node_Str"" + probeCounter);
  }
}",0.9902402402402404
166027,"public void writeToNBT(NBTTagCompound tagCompound){
  tagCompound.setString(""String_Node_Str"",getName());
  Coordinate spawnPoint=getSpawnPoint();
  if (spawnPoint != null) {
    Coordinate.writeToNBT(tagCompound,""String_Node_Str"",spawnPoint);
  }
  tagCompound.setInteger(""String_Node_Str"",getProbeCounter());
  tagCompound.setInteger(""String_Node_Str"",1);
  tagCompound.setInteger(""String_Node_Str"",terrainType == null ? TerrainType.TERRAIN_VOID.ordinal() : terrainType.ordinal());
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(featureTypes));
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(structureTypes));
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(effectTypes));
  List<Integer> c=new ArrayList<Integer>(biomes.size());
  for (  BiomeGenBase t : biomes) {
    c.add(t.biomeID);
  }
  tagCompound.setIntArray(""String_Node_Str"",ArrayUtils.toPrimitive(c.toArray(new Integer[c.size()])));
  tagCompound.setInteger(""String_Node_Str"",controllerType == null ? ControllerType.CONTROLLER_DEFAULT.ordinal() : controllerType.ordinal());
  tagCompound.setString(""String_Node_Str"",digitString);
  tagCompound.setLong(""String_Node_Str"",forcedDimensionSeed);
  tagCompound.setInteger(""String_Node_Str"",worldVersion);
  setBlockMeta(tagCompound,baseBlockForTerrain,""String_Node_Str"");
  setBlockMeta(tagCompound,tendrilBlock,""String_Node_Str"");
  setBlockMeta(tagCompound,sphereBlock,""String_Node_Str"");
  setBlockMeta(tagCompound,liquidSphereBlock,""String_Node_Str"");
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(liquidSphereFluid));
  setBlockMeta(tagCompound,canyonBlock,""String_Node_Str"");
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(fluidForTerrain));
  writeOresToNBT(tagCompound);
  writeFluidsToNBT(tagCompound);
  tagCompound.setBoolean(""String_Node_Str"",peaceful);
  tagCompound.setBoolean(""String_Node_Str"",shelter);
  if (celestialAngle != null) {
    tagCompound.setFloat(""String_Node_Str"",celestialAngle);
  }
  if (timeSpeed != null) {
    tagCompound.setFloat(""String_Node_Str"",timeSpeed);
  }
  tagCompound.setInteger(""String_Node_Str"",probeCounter);
  tagCompound.setInteger(""String_Node_Str"",actualRfCost);
  skyDescriptor.writeToNBT(tagCompound);
  NBTTagList list=new NBTTagList();
  for (  MobDescriptor mob : extraMobs) {
    NBTTagCompound tc=new NBTTagCompound();
    if (mob != null) {
      if (mob.getEntityClass() != null) {
        tc.setString(""String_Node_Str"",mob.getEntityClass().getName());
        tc.setInteger(""String_Node_Str"",mob.getSpawnChance());
        tc.setInteger(""String_Node_Str"",mob.getMinGroup());
        tc.setInteger(""String_Node_Str"",mob.getMaxGroup());
        tc.setInteger(""String_Node_Str"",mob.getMaxLoaded());
        list.appendTag(tc);
      }
    }
  }
  tagCompound.setTag(""String_Node_Str"",list);
}","public void writeToNBT(NBTTagCompound tagCompound){
  tagCompound.setString(""String_Node_Str"",getName());
  Coordinate spawnPoint=getSpawnPoint();
  if (spawnPoint != null) {
    Coordinate.writeToNBT(tagCompound,""String_Node_Str"",spawnPoint);
  }
  tagCompound.setInteger(""String_Node_Str"",getProbeCounter());
  tagCompound.setInteger(""String_Node_Str"",1);
  tagCompound.setInteger(""String_Node_Str"",terrainType == null ? TerrainType.TERRAIN_VOID.ordinal() : terrainType.ordinal());
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(featureTypes));
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(structureTypes));
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(effectTypes));
  List<Integer> c=new ArrayList<Integer>(biomes.size());
  for (  BiomeGenBase t : biomes) {
    c.add(t.biomeID);
  }
  tagCompound.setIntArray(""String_Node_Str"",ArrayUtils.toPrimitive(c.toArray(new Integer[c.size()])));
  tagCompound.setInteger(""String_Node_Str"",controllerType == null ? ControllerType.CONTROLLER_DEFAULT.ordinal() : controllerType.ordinal());
  tagCompound.setString(""String_Node_Str"",digitString);
  tagCompound.setLong(""String_Node_Str"",forcedDimensionSeed);
  tagCompound.setLong(""String_Node_Str"",baseSeed);
  tagCompound.setInteger(""String_Node_Str"",worldVersion);
  setBlockMeta(tagCompound,baseBlockForTerrain,""String_Node_Str"");
  setBlockMeta(tagCompound,tendrilBlock,""String_Node_Str"");
  setBlockMeta(tagCompound,sphereBlock,""String_Node_Str"");
  setBlockMeta(tagCompound,liquidSphereBlock,""String_Node_Str"");
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(liquidSphereFluid));
  setBlockMeta(tagCompound,canyonBlock,""String_Node_Str"");
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(fluidForTerrain));
  writeOresToNBT(tagCompound);
  writeFluidsToNBT(tagCompound);
  tagCompound.setBoolean(""String_Node_Str"",peaceful);
  tagCompound.setBoolean(""String_Node_Str"",shelter);
  if (celestialAngle != null) {
    tagCompound.setFloat(""String_Node_Str"",celestialAngle);
  }
  if (timeSpeed != null) {
    tagCompound.setFloat(""String_Node_Str"",timeSpeed);
  }
  tagCompound.setInteger(""String_Node_Str"",probeCounter);
  tagCompound.setInteger(""String_Node_Str"",actualRfCost);
  skyDescriptor.writeToNBT(tagCompound);
  NBTTagList list=new NBTTagList();
  for (  MobDescriptor mob : extraMobs) {
    NBTTagCompound tc=new NBTTagCompound();
    if (mob != null) {
      if (mob.getEntityClass() != null) {
        tc.setString(""String_Node_Str"",mob.getEntityClass().getName());
        tc.setInteger(""String_Node_Str"",mob.getSpawnChance());
        tc.setInteger(""String_Node_Str"",mob.getMinGroup());
        tc.setInteger(""String_Node_Str"",mob.getMaxGroup());
        tc.setInteger(""String_Node_Str"",mob.getMaxLoaded());
        list.appendTag(tc);
      }
    }
  }
  tagCompound.setTag(""String_Node_Str"",list);
}",0.991128891981214
166028,"@Override public IChunkProvider createChunkGenerator(){
  int dim=worldObj.provider.dimensionId;
  long seed=DimletConfiguration.randomizeSeed ? calculateSeed((long)(Math.random() * 10000 + 1),dim) : calculateSeed(worldObj.getSeed(),dim);
  return new GenericChunkProvider(worldObj,seed);
}","@Override public IChunkProvider createChunkGenerator(){
  int dim=worldObj.provider.dimensionId;
  setSeed(dim);
  return new GenericChunkProvider(worldObj,seed);
}",0.7224669603524229
166029,"@Override public void registerWorldChunkManager(){
  int dim=worldObj.provider.dimensionId;
  seed=DimletConfiguration.randomizeSeed ? calculateSeed((long)(Math.random() * 10000 + 1),dim) : calculateSeed(worldObj.getSeed(),dim);
  getDimensionInformation();
  storage=DimensionStorage.getDimensionStorage(worldObj);
  setupProviderInfo();
}","@Override public void registerWorldChunkManager(){
  getDimensionInformation();
  storage=DimensionStorage.getDimensionStorage(worldObj);
  setupProviderInfo();
}",0.6454183266932271
166030,"private DimensionInformation getDimensionInformation(){
  if (dimensionInformation == null) {
    int dim=worldObj.provider.dimensionId;
    dimensionInformation=RfToolsDimensionManager.getDimensionManager(worldObj).getDimensionInformation(dim);
    if (dimensionInformation == null) {
      RFTools.log(""String_Node_Str"" + dim + ""String_Node_Str"");
    }
 else {
      long forcedSeed=dimensionInformation.getForcedDimensionSeed();
      if (forcedSeed != 0) {
        RFTools.log(""String_Node_Str"" + dim + ""String_Node_Str""+ forcedSeed);
        seed=forcedSeed;
      }
      setupProviderInfo();
    }
  }
  return dimensionInformation;
}","private DimensionInformation getDimensionInformation(){
  if (dimensionInformation == null) {
    int dim=worldObj.provider.dimensionId;
    dimensionInformation=RfToolsDimensionManager.getDimensionManager(worldObj).getDimensionInformation(dim);
    if (dimensionInformation == null) {
      RFTools.log(""String_Node_Str"" + dim + ""String_Node_Str"");
    }
 else {
      setSeed(dim);
      setupProviderInfo();
    }
  }
  return dimensionInformation;
}",0.810958904109589
166031,"@Override public int compareTo(Object o){
  return 0;
}","@Override public int compareTo(Object o){
  return getCommandName().compareTo(((ICommand)o).getCommandName());
}",0.6467065868263473
166032,"@Override public void draw(Window window,int x,int y){
  super.draw(window,x,y);
  tabCounter=0;
  y+=3;
  int starty=y;
  int dx;
  for (  Line line : lines) {
    if (line.isNexttab()) {
      y=starty;
      x+=getBounds().width / 2;
      tabCounter++;
    }
 else     if (line.recipe != null) {
      y+=4;
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
      ShapedRecipes shapedRecipes=(ShapedRecipes)line.recipe;
      if (craftingGridImage != null) {
        GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
        mc.getTextureManager().bindTexture(craftingGridImage);
        gui.drawTexturedModalRect(25 + x,y,craftU,craftV,19 * 3,19 * 3);
      }
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 3; j++) {
          RenderHelper.renderObject(mc,26 + x + i * 18,1 + y + j * 18,shapedRecipes.recipeItems[i + j * 3],false);
        }
      }
      if (arrowImage != null) {
        GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
        mc.getTextureManager().bindTexture(arrowImage);
        gui.drawTexturedModalRect(x + 25 + 67,y + 18,arrowU,arrowV,16,16);
      }
      if (craftingGridImage != null) {
        GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
        mc.getTextureManager().bindTexture(craftingGridImage);
        gui.drawTexturedModalRect(x + 25 + 92,y + 16,craftU,craftV,18,18);
      }
      RenderHelper.renderObject(mc,x + 25 + 93,y + 17,shapedRecipes.getRecipeOutput(),false);
      y-=4;
    }
 else     if (line.line != null) {
      String s=""String_Node_Str"";
      int col=0xFF000000;
      dx=0;
      if (line.isBold()) {
        char c=167;
        s=Character.toString(c) + ""String_Node_Str"";
      }
      if (line.isLink()) {
        char c=167;
        s=Character.toString(c) + ""String_Node_Str"";
        col=0xFF0040AA;
        dx=25;
      }
      s+=line.line;
      mc.fontRenderer.drawString(mc.fontRenderer.trimStringToWidth(s,bounds.width - dx),x + dx + bounds.x,y + bounds.y,col);
    }
    y+=line.height;
  }
}","@Override public void draw(Window window,int x,int y){
  super.draw(window,x,y);
  tabCounter=0;
  y+=3;
  int starty=y;
  int dx;
  for (  Line line : lines) {
    if (line.isNexttab()) {
      y=starty;
      x+=getBounds().width / 2;
      tabCounter++;
    }
 else     if (line.recipe != null) {
      y+=4;
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
      ShapedRecipes shapedRecipes=(ShapedRecipes)line.recipe;
      if (craftingGridImage != null) {
        GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
        mc.getTextureManager().bindTexture(craftingGridImage);
        gui.drawTexturedModalRect(25 + x,y,craftU,craftV,19 * 3,19 * 3);
      }
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 3; j++) {
          if (i < shapedRecipes.recipeWidth && j < shapedRecipes.recipeHeight) {
            RenderHelper.renderObject(mc,26 + x + i * 18,1 + y + j * 18,shapedRecipes.recipeItems[i + j * 3],false);
          }
        }
      }
      if (arrowImage != null) {
        GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
        mc.getTextureManager().bindTexture(arrowImage);
        gui.drawTexturedModalRect(x + 25 + 67,y + 18,arrowU,arrowV,16,16);
      }
      if (craftingGridImage != null) {
        GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
        mc.getTextureManager().bindTexture(craftingGridImage);
        gui.drawTexturedModalRect(x + 25 + 92,y + 16,craftU,craftV,18,18);
      }
      RenderHelper.renderObject(mc,x + 25 + 93,y + 17,shapedRecipes.getRecipeOutput(),false);
      y-=4;
    }
 else     if (line.line != null) {
      String s=""String_Node_Str"";
      int col=0xFF000000;
      dx=0;
      if (line.isBold()) {
        char c=167;
        s=Character.toString(c) + ""String_Node_Str"";
      }
      if (line.isLink()) {
        char c=167;
        s=Character.toString(c) + ""String_Node_Str"";
        col=0xFF0040AA;
        dx=25;
      }
      s+=line.line;
      mc.fontRenderer.drawString(mc.fontRenderer.trimStringToWidth(s,bounds.width - dx),x + dx + bounds.x,y + bounds.y,col);
    }
    y+=line.height;
  }
}",0.9761486316846598
166033,"private static void initEnvModuleCrafting(){
  Object inkSac=Item.itemRegistry.getObjectById(351);
  ItemStack ironGolemSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack horseSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack zombieSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack diamondPick=createEnchantedItem(Items.diamond_pickaxe,Enchantment.efficiency.effectId,3);
  GameRegistry.addRecipe(new ItemStack(ModItems.regenerationEModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',ironGolemSyringe,'r',Items.redstone,'g',Items.gold_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.speedEModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',horseSyringe,'r',Items.redstone,'g',Items.gold_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.hasteEModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',diamondPick,'r',Items.redstone,'g',Items.gold_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.saturationEModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',zombieSyringe,'r',Items.redstone,'g',Items.gold_ingot,'b',inkSac);
  GameRegistry.addShapelessRecipe(new ItemStack(ModItems.regenerationPlusEModuleItem),ironGolemSyringe,ironGolemSyringe,new ItemStack(ModItems.regenerationEModuleItem));
  GameRegistry.addShapelessRecipe(new ItemStack(ModItems.speedPlusEModuleItem),horseSyringe,horseSyringe,new ItemStack(ModItems.speedEModuleItem));
  GameRegistry.addShapelessRecipe(new ItemStack(ModItems.hastePlusEModuleItem),diamondPick,new ItemStack(ModItems.hasteEModuleItem));
  GameRegistry.addShapelessRecipe(new ItemStack(ModItems.saturationPlusEModuleItem),zombieSyringe,zombieSyringe,new ItemStack(ModItems.saturationEModuleItem));
}","private static void initEnvModuleCrafting(){
  Object inkSac=Item.itemRegistry.getObjectById(351);
  ItemStack ironGolemSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack horseSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack zombieSyringe=createMobSyringe(""String_Node_Str"");
  ItemStack diamondPick=createEnchantedItem(Items.diamond_pickaxe,Enchantment.efficiency.effectId,3);
  ItemStack reds=new ItemStack(Items.redstone);
  ItemStack gold=new ItemStack(Items.gold_ingot);
  ItemStack ink=new ItemStack((Item)inkSac);
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,ironGolemSyringe,null,reds,gold,reds,null,ink,null},new ItemStack(ModItems.regenerationEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,horseSyringe,null,reds,gold,reds,null,ink,null},new ItemStack(ModItems.speedEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,diamondPick,null,reds,gold,reds,null,ink,null},new ItemStack(ModItems.hasteEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,zombieSyringe,null,reds,gold,reds,null,ink,null},new ItemStack(ModItems.saturationEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.regenerationEModuleItem),ironGolemSyringe,ironGolemSyringe,null},new ItemStack(ModItems.regenerationPlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.speedEModuleItem),horseSyringe,horseSyringe,null},new ItemStack(ModItems.speedPlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.hasteEModuleItem),diamondPick,null,null},new ItemStack(ModItems.hastePlusEModuleItem)));
  GameRegistry.addRecipe(new NBTMatchingRecipe(2,2,new ItemStack[]{new ItemStack(ModItems.saturationEModuleItem),zombieSyringe,zombieSyringe,null},new ItemStack(ModItems.saturationPlusEModuleItem)));
}",0.3494423791821561
166034,"private static void initDimletConstructionCrafting(){
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(ModItems.peaceEssenceItem),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str"")));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimletWorkbenchBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'u',ModItems.unknownDimlet,'c',Blocks.crafting_table,'r',Items.redstone,'g',Items.gold_nugget);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.biomeAbsorberBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'d',Blocks.dirt,'s',Blocks.sapling,'w',Blocks.wool);
  GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.biomeAbsorberBlock),new ItemStack(ModBlocks.biomeAbsorberBlock));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.materialAbsorberBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'d',Blocks.dirt,'c',Blocks.cobblestone,'s',Blocks.sand,'g',Blocks.gravel,'w',Blocks.wool);
  GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.materialAbsorberBlock),new ItemStack(ModBlocks.materialAbsorberBlock));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.liquidAbsorberBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'b',Items.bucket,'w',Blocks.wool);
  GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.liquidAbsorberBlock),new ItemStack(ModBlocks.liquidAbsorberBlock));
  GameRegistry.addRecipe(new ItemStack(ModItems.syringeItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'i',Items.iron_ingot,'b',Items.glass_bottle);
  ItemStack diamondPick=createEnchantedItem(Items.diamond_pickaxe,Enchantment.efficiency.effectId,3);
  GameRegistry.addRecipe(new ItemStack(ModItems.efficiencyEssenceItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',diamondPick,'s',Items.nether_star,'e',Items.ender_eye);
  ItemStack ironPick=createEnchantedItem(Items.iron_pickaxe,Enchantment.efficiency.effectId,2);
  GameRegistry.addRecipe(new ItemStack(ModItems.mediocreEfficiencyEssenceItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',ironPick,'s',Items.ghast_tear,'e',Items.ender_eye);
}","private static void initDimletConstructionCrafting(){
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(ModItems.peaceEssenceItem),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str"")));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimletWorkbenchBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'u',ModItems.unknownDimlet,'c',Blocks.crafting_table,'r',Items.redstone,'g',Items.gold_nugget);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.biomeAbsorberBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'d',Blocks.dirt,'s',Blocks.sapling,'w',Blocks.wool);
  GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.biomeAbsorberBlock),new ItemStack(ModBlocks.biomeAbsorberBlock));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.materialAbsorberBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'d',Blocks.dirt,'c',Blocks.cobblestone,'s',Blocks.sand,'g',Blocks.gravel,'w',Blocks.wool);
  GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.materialAbsorberBlock),new ItemStack(ModBlocks.materialAbsorberBlock));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.liquidAbsorberBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'b',Items.bucket,'w',Blocks.wool);
  GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.liquidAbsorberBlock),new ItemStack(ModBlocks.liquidAbsorberBlock));
  GameRegistry.addRecipe(new ItemStack(ModItems.syringeItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'i',Items.iron_ingot,'b',Items.glass_bottle);
  ItemStack diamondPick=createEnchantedItem(Items.diamond_pickaxe,Enchantment.efficiency.effectId,3);
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,diamondPick,null,new ItemStack(Items.ender_eye),new ItemStack(Items.nether_star),new ItemStack(Items.ender_eye),null,new ItemStack(Items.ender_eye),null},new ItemStack(ModItems.efficiencyEssenceItem)));
  ItemStack ironPick=createEnchantedItem(Items.iron_pickaxe,Enchantment.efficiency.effectId,2);
  GameRegistry.addRecipe(new NBTMatchingRecipe(3,3,new ItemStack[]{null,ironPick,null,new ItemStack(Items.ender_eye),new ItemStack(Items.ghast_tear),new ItemStack(Items.ender_eye),null,new ItemStack(Items.ender_eye),null},new ItemStack(ModItems.mediocreEfficiencyEssenceItem)));
}",0.8823975720789075
166035,"@Override protected void checkStateServer(){
  if (cachedX != xCoord || cachedY != yCoord || cachedZ != zCoord) {
    RFTools.log(""String_Node_Str"");
    TeleportDestinations destinations=TeleportDestinations.getDestinations(worldObj);
    destinations.removeDestination(new Coordinate(cachedX,cachedY,cachedZ),worldObj.provider.dimensionId);
    cachedX=xCoord;
    cachedY=yCoord;
    cachedZ=zCoord;
    GlobalCoordinate gc=new GlobalCoordinate(new Coordinate(xCoord,yCoord,zCoord),worldObj.provider.dimensionId);
    if (id == -1) {
      id=destinations.getNewId(gc);
    }
 else {
      destinations.assignId(gc,id);
    }
    destinations.addDestination(gc);
    destinations.save(worldObj);
    markDirty();
  }
}","@Override protected void checkStateServer(){
  if (cachedX != xCoord || cachedY != yCoord || cachedZ != zCoord) {
    TeleportDestinations destinations=TeleportDestinations.getDestinations(worldObj);
    destinations.removeDestination(new Coordinate(cachedX,cachedY,cachedZ),worldObj.provider.dimensionId);
    cachedX=xCoord;
    cachedY=yCoord;
    cachedZ=zCoord;
    GlobalCoordinate gc=new GlobalCoordinate(new Coordinate(xCoord,yCoord,zCoord),worldObj.provider.dimensionId);
    if (id == -1) {
      id=destinations.getNewId(gc);
    }
 else {
      destinations.assignId(gc,id);
    }
    destinations.addDestination(gc);
    destinations.save(worldObj);
    markDirty();
  }
}",0.9743954480796586
166036,"public GenericChunkProvider(World world,long seed){
  this.worldObj=world;
  dimensionInformation=RfToolsDimensionManager.getDimensionManager(world).getDimensionInformation(world.provider.dimensionId);
  this.worldType=world.getWorldInfo().getTerrainType();
  if (dimensionInformation.getTerrainType() == TerrainType.TERRAIN_AMPLIFIED) {
    worldType=WorldType.AMPLIFIED;
  }
 else   if (dimensionInformation.getTerrainType() == TerrainType.TERRAIN_FLAT) {
    worldType=WorldType.FLAT;
  }
  this.seed=seed;
  this.rand=new Random((seed + 516) * 314);
  terrainGeneratorMap.get(dimensionInformation.getTerrainType()).setup(world,this);
  extraSpawns=new ArrayList<BiomeGenBase.SpawnListEntry>();
  extraSpawnsMax=new ArrayList<Integer>();
  for (  MobDescriptor mob : dimensionInformation.getExtraMobs()) {
    Class<? extends EntityLiving> entityClass=mob.getEntityClass();
    extraSpawns.add(new BiomeGenBase.SpawnListEntry(entityClass,mob.getSpawnChance(),mob.getMinGroup(),mob.getMaxGroup()));
    extraSpawnsMax.add(mob.getMaxLoaded());
    System.out.println(""String_Node_Str"" + entityClass);
  }
}","public GenericChunkProvider(World world,long seed){
  this.worldObj=world;
  dimensionInformation=RfToolsDimensionManager.getDimensionManager(world).getDimensionInformation(world.provider.dimensionId);
  this.worldType=world.getWorldInfo().getTerrainType();
  if (dimensionInformation.getTerrainType() == TerrainType.TERRAIN_AMPLIFIED) {
    worldType=WorldType.AMPLIFIED;
  }
 else   if (dimensionInformation.getTerrainType() == TerrainType.TERRAIN_FLAT) {
    worldType=WorldType.FLAT;
  }
  this.seed=seed;
  this.rand=new Random((seed + 516) * 314);
switch (dimensionInformation.getTerrainType()) {
case TERRAIN_VOID:
    terrainGenerator=new VoidTerrainGenerator();
  break;
case TERRAIN_FLAT:
terrainGenerator=new FlatTerrainGenerator();
break;
case TERRAIN_AMPLIFIED:
terrainGenerator=new AmplifiedTerrainGenerator();
break;
case TERRAIN_NORMAL:
terrainGenerator=new NormalTerrainGenerator();
break;
case TERRAIN_CAVERN_OLD:
terrainGenerator=new CavernTerrainGenerator(CavernTerrainGenerator.CavernHeight.HEIGHT_256);
break;
case TERRAIN_ISLAND:
terrainGenerator=new IslandTerrainGenerator(IslandTerrainGenerator.NORMAL);
break;
case TERRAIN_ISLANDS:
terrainGenerator=new IslandTerrainGenerator(IslandTerrainGenerator.ISLANDS);
break;
case TERRAIN_CHAOTIC:
terrainGenerator=new IslandTerrainGenerator(IslandTerrainGenerator.CHAOTIC);
break;
case TERRAIN_PLATEAUS:
terrainGenerator=new IslandTerrainGenerator(IslandTerrainGenerator.PLATEAUS);
break;
case TERRAIN_GRID:
terrainGenerator=new GridTerrainGenerator();
break;
case TERRAIN_CAVERN:
terrainGenerator=new CavernTerrainGenerator(null);
break;
case TERRAIN_LOW_CAVERN:
terrainGenerator=new CavernTerrainGenerator(CavernTerrainGenerator.CavernHeight.HEIGHT_128);
break;
case TERRAIN_FLOODED_CAVERN:
terrainGenerator=new CavernTerrainGenerator(CavernTerrainGenerator.CavernHeight.HEIGHT_128);
break;
default :
terrainGenerator=new VoidTerrainGenerator();
break;
}
terrainGenerator.setup(world,this);
extraSpawns=new ArrayList<BiomeGenBase.SpawnListEntry>();
extraSpawnsMax=new ArrayList<Integer>();
for (MobDescriptor mob : dimensionInformation.getExtraMobs()) {
Class<? extends EntityLiving> entityClass=mob.getEntityClass();
extraSpawns.add(new BiomeGenBase.SpawnListEntry(entityClass,mob.getSpawnChance(),mob.getMinGroup(),mob.getMaxGroup()));
extraSpawnsMax.add(mob.getMaxLoaded());
System.out.println(""String_Node_Str"" + entityClass);
}
}",0.5789173789173789
166037,"/** 
 * Will return back a chunk, if it doesn't exist and its not a MP client it will generates all the blocks for the specified chunk from the map seed and chunk seed
 */
@Override public Chunk provideChunk(int chunkX,int chunkZ){
  this.rand.setSeed(chunkX * 341873128712L + chunkZ * 132897987541L + 123456);
  Block[] ablock=new Block[65536];
  byte[] abyte=new byte[65536];
  BaseTerrainGenerator terrainGenerator=terrainGeneratorMap.get(dimensionInformation.getTerrainType());
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().getBiomesForGeneration(this.biomesForGeneration,chunkX * 4 - 2,chunkZ * 4 - 2,10,10);
  terrainGenerator.generate(chunkX,chunkZ,ablock,abyte);
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,chunkX * 16,chunkZ * 16,16,16);
  terrainGenerator.replaceBlocksForBiome(chunkX,chunkZ,ablock,abyte,this.biomesForGeneration);
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_TENDRILS)) {
    this.tendrilGenerator.generate(this.worldObj,chunkX,chunkZ,ablock,abyte);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_CANYONS)) {
    this.canyonGenerator.generate(this.worldObj,chunkX,chunkZ,ablock,abyte);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_ORBS)) {
    this.sphereGenerator.generate(this.worldObj,chunkX,chunkZ,ablock,abyte);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_LIQUIDORBS)) {
    this.liquidSphereGenerator.generate(this.worldObj,chunkX,chunkZ,ablock,abyte);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_CAVES)) {
    this.caveGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_RAVINES)) {
    this.ravineGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_MINESHAFT)) {
    this.mineshaftGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_VILLAGE)) {
    this.villageGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_STRONGHOLD)) {
    this.strongholdGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_FORTRESS)) {
    this.genNetherBridge.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_SCATTERED)) {
    this.scatteredFeatureGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  Chunk chunk=new Chunk(this.worldObj,ablock,abyte,chunkX,chunkZ);
  byte[] abyte1=chunk.getBiomeArray();
  for (int k=0; k < abyte1.length; ++k) {
    abyte1[k]=(byte)this.biomesForGeneration[k].biomeID;
  }
  chunk.generateSkylightMap();
  return chunk;
}","/** 
 * Will return back a chunk, if it doesn't exist and its not a MP client it will generates all the blocks for the specified chunk from the map seed and chunk seed
 */
@Override public Chunk provideChunk(int chunkX,int chunkZ){
  this.rand.setSeed(chunkX * 341873128712L + chunkZ * 132897987541L + 123456);
  Block[] ablock=new Block[65536];
  byte[] abyte=new byte[65536];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().getBiomesForGeneration(this.biomesForGeneration,chunkX * 4 - 2,chunkZ * 4 - 2,10,10);
  terrainGenerator.generate(chunkX,chunkZ,ablock,abyte);
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,chunkX * 16,chunkZ * 16,16,16);
  terrainGenerator.replaceBlocksForBiome(chunkX,chunkZ,ablock,abyte,this.biomesForGeneration);
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_TENDRILS)) {
    this.tendrilGenerator.generate(this.worldObj,chunkX,chunkZ,ablock,abyte);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_CANYONS)) {
    this.canyonGenerator.generate(this.worldObj,chunkX,chunkZ,ablock,abyte);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_ORBS)) {
    this.sphereGenerator.generate(this.worldObj,chunkX,chunkZ,ablock,abyte);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_LIQUIDORBS)) {
    this.liquidSphereGenerator.generate(this.worldObj,chunkX,chunkZ,ablock,abyte);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_CAVES)) {
    this.caveGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasFeatureType(FeatureType.FEATURE_RAVINES)) {
    this.ravineGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_MINESHAFT)) {
    this.mineshaftGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_VILLAGE)) {
    this.villageGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_STRONGHOLD)) {
    this.strongholdGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_FORTRESS)) {
    this.genNetherBridge.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  if (dimensionInformation.hasStructureType(StructureType.STRUCTURE_SCATTERED)) {
    this.scatteredFeatureGenerator.func_151539_a(this,this.worldObj,chunkX,chunkZ,ablock);
  }
  Chunk chunk=new Chunk(this.worldObj,ablock,abyte,chunkX,chunkZ);
  byte[] abyte1=chunk.getBiomeArray();
  for (int k=0; k < abyte1.length; ++k) {
    abyte1[k]=(byte)this.biomesForGeneration[k].biomeID;
  }
  chunk.generateSkylightMap();
  return chunk;
}",0.9822282980177716
166038,"private void func_147423_a(int chunkX4,int chunkY4,int chunkZ4){
  this.noiseData4=this.noiseGen6.generateNoiseOctaves(this.noiseData4,chunkX4,chunkZ4,5,5,200.0D,200.0D,0.5D);
  this.noiseData1=this.noiseGen3.generateNoiseOctaves(this.noiseData1,chunkX4,chunkY4,chunkZ4,5,33,5,8.555150000000001D,4.277575000000001D,8.555150000000001D);
  this.noiseData2=this.noiseGen1.generateNoiseOctaves(this.noiseData2,chunkX4,chunkY4,chunkZ4,5,33,5,684.412D,684.412D,684.412D);
  this.noiseData3=this.noiseGen2.generateNoiseOctaves(this.noiseData3,chunkX4,chunkY4,chunkZ4,5,33,5,684.412D,684.412D,684.412D);
  int l=0;
  int i1=0;
  boolean domaze=false;
  boolean elevated=false;
  if (provider.dimensionInformation.hasFeatureType(FeatureType.FEATURE_MAZE)) {
    domaze=true;
    long s2=(((chunkX4 >> 2) + provider.seed + 13) * 314) + (chunkZ4 >> 2) * 17L;
    Random rand=new Random(s2);
    rand.nextFloat();
    elevated=((chunkX4 >> 2) & 1) == 0;
    if (rand.nextFloat() < .2f) {
      elevated=!elevated;
    }
  }
  for (int j1=0; j1 < 5; ++j1) {
    for (int k1=0; k1 < 5; ++k1) {
      float f=0.0F;
      float f1=0.0F;
      float f2=0.0F;
      byte b0=2;
      BiomeGenBase biomegenbase=provider.biomesForGeneration[j1 + 2 + (k1 + 2) * 10];
      for (int l1=-b0; l1 <= b0; ++l1) {
        for (int i2=-b0; i2 <= b0; ++i2) {
          BiomeGenBase biomegenbase1=provider.biomesForGeneration[j1 + l1 + 2+ (k1 + i2 + 2) * 10];
          float f3=biomegenbase1.rootHeight;
          float f4=biomegenbase1.heightVariation;
          if (domaze) {
            if (f3 > 0.0F && elevated) {
              if (provider.worldType == WorldType.AMPLIFIED) {
                f3=2.0F + f3 * 1.5f;
                f4=1.0F + f4 * 3.0f;
              }
 else {
                f3=2.0F + f3;
                f4=0.5F + f4 * 1.5f;
              }
            }
 else {
              if (provider.worldType == WorldType.AMPLIFIED && f3 > 0.0f) {
                f3=0.5F + f3 * 1.5F;
                f4=0.5F + f4 * 2.0F;
              }
 else {
                f4=f4 * 0.5F;
              }
            }
          }
 else {
            if (provider.worldType == WorldType.AMPLIFIED && f3 > 0.0F) {
              f3=1.0F + f3 * 2.0F;
              f4=1.0F + f4 * 4.0F;
            }
          }
          float f5=parabolicField[l1 + 2 + (i2 + 2) * 5] / (f3 + 2.0F);
          if (biomegenbase1.rootHeight > biomegenbase.rootHeight) {
            f5/=2.0F;
          }
          f+=f4 * f5;
          f1+=f3 * f5;
          f2+=f5;
        }
      }
      f/=f2;
      f1/=f2;
      f=f * 0.9F + 0.1F;
      f1=(f1 * 4.0F - 1.0F) / 8.0F;
      double d12=this.noiseData4[i1] / 8000.0D;
      if (d12 < 0.0D) {
        d12=-d12 * 0.3D;
      }
      d12=d12 * 3.0D - 2.0D;
      if (d12 < 0.0D) {
        d12/=2.0D;
        if (d12 < -1.0D) {
          d12=-1.0D;
        }
        d12/=1.4D;
        d12/=2.0D;
      }
 else {
        if (d12 > 1.0D) {
          d12=1.0D;
        }
        d12/=8.0D;
      }
      ++i1;
      double d13=f1;
      double d14=f;
      d13+=d12 * 0.2D;
      d13=d13 * 8.5D / 8.0D;
      double d5=8.5D + d13 * 4.0D;
      for (int j2=0; j2 < 33; ++j2) {
        double d6=(j2 - d5) * 12.0D * 128.0D / 256.0D / d14;
        if (d6 < 0.0D) {
          d6*=4.0D;
        }
        double d7=this.noiseData2[l] / 512.0D;
        double d8=this.noiseData3[l] / 512.0D;
        double d9=(this.noiseData1[l] / 10.0D + 1.0D) / 2.0D;
        double d10=MathHelper.denormalizeClamp(d7,d8,d9) - d6;
        if (j2 > 29) {
          double d11=((j2 - 29) / 3.0F);
          d10=d10 * (1.0D - d11) + -10.0D * d11;
        }
        this.noiseField[l]=d10;
        ++l;
      }
    }
  }
}","private void func_147423_a(int chunkX4,int chunkY4,int chunkZ4){
  this.noiseData4=this.noiseGen6.generateNoiseOctaves(this.noiseData4,chunkX4,chunkZ4,5,5,200.0D,200.0D,0.5D);
  this.noiseData1=this.noiseGen3.generateNoiseOctaves(this.noiseData1,chunkX4,chunkY4,chunkZ4,5,33,5,8.555150000000001D,4.277575000000001D,8.555150000000001D);
  this.noiseData2=this.noiseGen1.generateNoiseOctaves(this.noiseData2,chunkX4,chunkY4,chunkZ4,5,33,5,684.412D,684.412D,684.412D);
  this.noiseData3=this.noiseGen2.generateNoiseOctaves(this.noiseData3,chunkX4,chunkY4,chunkZ4,5,33,5,684.412D,684.412D,684.412D);
  int l=0;
  int i1=0;
  boolean domaze=false;
  boolean elevated=false;
  if (provider.dimensionInformation.hasFeatureType(FeatureType.FEATURE_MAZE)) {
    domaze=true;
    long s2=(((chunkX4 >> 2) + provider.seed + 13) * 314) + (chunkZ4 >> 2) * 17L;
    Random rand=new Random(s2);
    rand.nextFloat();
    elevated=((chunkX4 >> 2) & 1) == 0;
    if (rand.nextFloat() < .2f) {
      elevated=!elevated;
    }
  }
  if (provider.biomesForGeneration == null) {
    RFTools.log(""String_Node_Str"" + world.provider.dimensionId + ""String_Node_Str"");
    return;
  }
  for (int j1=0; j1 < 5; ++j1) {
    for (int k1=0; k1 < 5; ++k1) {
      float f=0.0F;
      float f1=0.0F;
      float f2=0.0F;
      byte b0=2;
      BiomeGenBase biomegenbase=provider.biomesForGeneration[j1 + 2 + (k1 + 2) * 10];
      for (int l1=-b0; l1 <= b0; ++l1) {
        for (int i2=-b0; i2 <= b0; ++i2) {
          BiomeGenBase biomegenbase1=provider.biomesForGeneration[j1 + l1 + 2+ (k1 + i2 + 2) * 10];
          float f3=biomegenbase1.rootHeight;
          float f4=biomegenbase1.heightVariation;
          if (domaze) {
            if (f3 > 0.0F && elevated) {
              if (provider.worldType == WorldType.AMPLIFIED) {
                f3=2.0F + f3 * 1.5f;
                f4=1.0F + f4 * 3.0f;
              }
 else {
                f3=2.0F + f3;
                f4=0.5F + f4 * 1.5f;
              }
            }
 else {
              if (provider.worldType == WorldType.AMPLIFIED && f3 > 0.0f) {
                f3=0.5F + f3 * 1.5F;
                f4=0.5F + f4 * 2.0F;
              }
 else {
                f4=f4 * 0.5F;
              }
            }
          }
 else {
            if (provider.worldType == WorldType.AMPLIFIED && f3 > 0.0F) {
              f3=1.0F + f3 * 2.0F;
              f4=1.0F + f4 * 4.0F;
            }
          }
          float f5=parabolicField[l1 + 2 + (i2 + 2) * 5] / (f3 + 2.0F);
          if (biomegenbase1.rootHeight > biomegenbase.rootHeight) {
            f5/=2.0F;
          }
          f+=f4 * f5;
          f1+=f3 * f5;
          f2+=f5;
        }
      }
      f/=f2;
      f1/=f2;
      f=f * 0.9F + 0.1F;
      f1=(f1 * 4.0F - 1.0F) / 8.0F;
      double d12=this.noiseData4[i1] / 8000.0D;
      if (d12 < 0.0D) {
        d12=-d12 * 0.3D;
      }
      d12=d12 * 3.0D - 2.0D;
      if (d12 < 0.0D) {
        d12/=2.0D;
        if (d12 < -1.0D) {
          d12=-1.0D;
        }
        d12/=1.4D;
        d12/=2.0D;
      }
 else {
        if (d12 > 1.0D) {
          d12=1.0D;
        }
        d12/=8.0D;
      }
      ++i1;
      double d13=f1;
      double d14=f;
      d13+=d12 * 0.2D;
      d13=d13 * 8.5D / 8.0D;
      double d5=8.5D + d13 * 4.0D;
      for (int j2=0; j2 < 33; ++j2) {
        double d6=(j2 - d5) * 12.0D * 128.0D / 256.0D / d14;
        if (d6 < 0.0D) {
          d6*=4.0D;
        }
        double d7=this.noiseData2[l] / 512.0D;
        double d8=this.noiseData3[l] / 512.0D;
        double d9=(this.noiseData1[l] / 10.0D + 1.0D) / 2.0D;
        double d10=MathHelper.denormalizeClamp(d7,d8,d9) - d6;
        if (j2 > 29) {
          double d11=((j2 - 29) / 3.0F);
          d10=d10 * (1.0D - d11) + -10.0D * d11;
        }
        this.noiseField[l]=d10;
        ++l;
      }
    }
  }
}",0.9804910418049104
166039,"@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  ForgeDirection k=BlockTools.getOrientationHoriz(meta);
  TileEntity te=world.getTileEntity(x + k.offsetX,y + k.offsetY,z + k.offsetZ);
  if (te instanceof EndergenicTileEntity) {
    EndergenicTileEntity endergenicTileEntity=(EndergenicTileEntity)te;
    endergenicTileEntity.removeMonitor(new Coordinate(x,y,z));
  }
  super.breakBlock(world,x,y,z,block,meta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  unregisterFromEndergenic(world,x,y,z);
  super.breakBlock(world,x,y,z,block,meta);
}",0.5200642054574639
166040,"@Override public ItemStack getCraftingResult(InventoryCrafting inventoryCrafting){
  ItemStack stack=super.getCraftingResult(inventoryCrafting);
  if (stack != null) {
    NBTTagCompound tagCompound=inventoryCrafting.getStackInSlot(takeNBTFromSlot).getTagCompound();
    if (extraNBT != null) {
      if (tagCompound == null) {
        tagCompound=new NBTTagCompound();
      }
 else {
        tagCompound=(NBTTagCompound)tagCompound.copy();
      }
      for (      Map.Entry<String,Object> entry : extraNBT.entrySet()) {
        Object value=entry.getValue();
        if (value instanceof Integer) {
          tagCompound.setInteger(entry.getKey(),(Integer)value);
        }
 else         if (value instanceof Boolean) {
          tagCompound.setBoolean(entry.getKey(),(Boolean)value);
        }
 else         if (value instanceof String) {
          tagCompound.setString(entry.getKey(),(String)value);
        }
 else         if (value instanceof Double) {
          tagCompound.setDouble(entry.getKey(),(Double)value);
        }
 else         if (value instanceof Float) {
          tagCompound.setFloat(entry.getKey(),(Float)value);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
    if (tagCompound != null) {
      stack.setTagCompound(tagCompound);
    }
  }
  return stack;
}","@Override public ItemStack getCraftingResult(InventoryCrafting inventoryCrafting){
  ItemStack stack=super.getCraftingResult(inventoryCrafting);
  if (stack != null) {
    NBTTagCompound tagCompound=getNBTFromObject(inventoryCrafting);
    if (extraNBT != null) {
      if (tagCompound == null) {
        tagCompound=new NBTTagCompound();
      }
 else {
        tagCompound=(NBTTagCompound)tagCompound.copy();
      }
      for (      Map.Entry<String,Object> entry : extraNBT.entrySet()) {
        Object value=entry.getValue();
        if (value instanceof Integer) {
          tagCompound.setInteger(entry.getKey(),(Integer)value);
        }
 else         if (value instanceof Boolean) {
          tagCompound.setBoolean(entry.getKey(),(Boolean)value);
        }
 else         if (value instanceof String) {
          tagCompound.setString(entry.getKey(),(String)value);
        }
 else         if (value instanceof Double) {
          tagCompound.setDouble(entry.getKey(),(Double)value);
        }
 else         if (value instanceof Float) {
          tagCompound.setFloat(entry.getKey(),(Float)value);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
    if (tagCompound != null) {
      stack.setTagCompound(tagCompound);
    }
  }
  return stack;
}",0.9678395762391222
166041,"@SubscribeEvent public void unloadEvent(WorldEvent.Unload evt){
  int d=evt.world.provider.dimensionId;
  if (d == 0) {
    RfToolsDimensionManager.unregisterDimensions();
    KnownDimletConfiguration.clean();
  }
}","@SubscribeEvent public void unloadEvent(WorldEvent.Unload evt){
  int d=evt.world.provider.dimensionId;
  if (d != 0) {
    return;
  }
  if (evt.world.isRemote) {
    if (MinecraftServer.getServer().isDedicatedServer()) {
      RfToolsDimensionManager.unregisterDimensions();
      KnownDimletConfiguration.clean();
    }
  }
}",0.7882136279926335
166042,"private boolean checkDimletCrafting(){
  ItemStack stackBase=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_BASE];
  if (stackBase == null) {
    return false;
  }
  ItemStack stackController=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_CONTROLLER];
  if (stackController == null) {
    return false;
  }
  ItemStack stackTypeController=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_TYPE_CONTROLLER];
  if (stackTypeController == null) {
    return false;
  }
  ItemStack stackMemory=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_MEMORY];
  if (stackMemory == null) {
    return false;
  }
  ItemStack stackEnergy=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_ENERGY];
  if (stackEnergy == null) {
    return false;
  }
  ItemStack stackEssence=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_ESSENCE];
  if (stackEssence == null) {
    return false;
  }
  NBTTagCompound essenceCompound=stackEssence.getTagCompound();
  DimletType type=DimletType.values()[stackTypeController.getItemDamage()];
switch (type) {
case DIMLET_BIOME:
    if (!isValidBiomeEssence(stackEssence,essenceCompound))     return false;
  int biomeDimlet=findBiomeDimlet(essenceCompound);
if (biomeDimlet == -1) {
  return false;
}
if (!matchDimletRecipe(biomeDimlet,stackController,stackMemory,stackEnergy)) {
return false;
}
inventoryHelper.setInventorySlotContents(1,DimletWorkbenchContainer.SLOT_OUTPUT,new ItemStack(ModItems.knownDimlet,1,biomeDimlet));
break;
case DIMLET_MOBS:
if (!isValidMobEssence(stackEssence,essenceCompound)) return false;
int mobDimlet=essenceCompound.getInteger(""String_Node_Str"");
if (!matchDimletRecipe(mobDimlet,stackController,stackMemory,stackEnergy)) {
return false;
}
inventoryHelper.setInventorySlotContents(1,DimletWorkbenchContainer.SLOT_OUTPUT,new ItemStack(ModItems.knownDimlet,1,mobDimlet));
break;
case DIMLET_SPECIAL:
if (!isValidSpecialEssence(stackEssence,essenceCompound)) return false;
int specialDimlet=findSpecialDimlet(stackEssence);
if (specialDimlet == -1) {
return false;
}
if (!matchDimletRecipe(specialDimlet,stackController,stackMemory,stackEnergy)) {
return false;
}
inventoryHelper.setInventorySlotContents(1,DimletWorkbenchContainer.SLOT_OUTPUT,new ItemStack(ModItems.knownDimlet,1,specialDimlet));
break;
case DIMLET_FOLIAGE:
case DIMLET_LIQUID:
case DIMLET_MATERIAL:
case DIMLET_SKY:
case DIMLET_STRUCTURE:
case DIMLET_TERRAIN:
case DIMLET_FEATURE:
case DIMLET_TIME:
case DIMLET_DIGIT:
case DIMLET_EFFECT:
case DIMLET_CONTROLLER:
return false;
}
return true;
}","private boolean checkDimletCrafting(){
  ItemStack stackBase=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_BASE];
  if (stackBase == null) {
    return false;
  }
  ItemStack stackController=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_CONTROLLER];
  if (stackController == null) {
    return false;
  }
  ItemStack stackTypeController=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_TYPE_CONTROLLER];
  if (stackTypeController == null) {
    return false;
  }
  ItemStack stackMemory=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_MEMORY];
  if (stackMemory == null) {
    return false;
  }
  ItemStack stackEnergy=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_ENERGY];
  if (stackEnergy == null) {
    return false;
  }
  ItemStack stackEssence=inventoryHelper.getStacks()[DimletWorkbenchContainer.SLOT_ESSENCE];
  if (stackEssence == null) {
    return false;
  }
  NBTTagCompound essenceCompound=stackEssence.getTagCompound();
  DimletType type=DimletType.values()[stackTypeController.getItemDamage()];
switch (type) {
case DIMLET_BIOME:
    if (!isValidBiomeEssence(stackEssence,essenceCompound))     return false;
  int biomeDimlet=findBiomeDimlet(essenceCompound);
if (biomeDimlet == -1) {
  return false;
}
if (!matchDimletRecipe(biomeDimlet,stackController,stackMemory,stackEnergy)) {
return false;
}
inventoryHelper.setInventorySlotContents(1,DimletWorkbenchContainer.SLOT_OUTPUT,new ItemStack(ModItems.knownDimlet,1,biomeDimlet));
break;
case DIMLET_MOBS:
if (!isValidMobEssence(stackEssence,essenceCompound)) return false;
String mob=essenceCompound.getString(""String_Node_Str"");
int mobDimlet=KnownDimletConfiguration.dimletToID.get(new DimletKey(DimletType.DIMLET_MOBS,mob));
if (!matchDimletRecipe(mobDimlet,stackController,stackMemory,stackEnergy)) {
return false;
}
inventoryHelper.setInventorySlotContents(1,DimletWorkbenchContainer.SLOT_OUTPUT,new ItemStack(ModItems.knownDimlet,1,mobDimlet));
break;
case DIMLET_SPECIAL:
if (!isValidSpecialEssence(stackEssence,essenceCompound)) return false;
int specialDimlet=findSpecialDimlet(stackEssence);
if (specialDimlet == -1) {
return false;
}
if (!matchDimletRecipe(specialDimlet,stackController,stackMemory,stackEnergy)) {
return false;
}
inventoryHelper.setInventorySlotContents(1,DimletWorkbenchContainer.SLOT_OUTPUT,new ItemStack(ModItems.knownDimlet,1,specialDimlet));
break;
case DIMLET_FOLIAGE:
case DIMLET_LIQUID:
case DIMLET_MATERIAL:
case DIMLET_SKY:
case DIMLET_STRUCTURE:
case DIMLET_TERRAIN:
case DIMLET_FEATURE:
case DIMLET_TIME:
case DIMLET_DIGIT:
case DIMLET_EFFECT:
case DIMLET_CONTROLLER:
return false;
}
return true;
}",0.9762633996937212
166043,"private boolean isValidBiomeEssence(ItemStack stackEssence,NBTTagCompound essenceCompound){
  Block essenceBlock=((ItemBlock)stackEssence.getItem()).field_150939_a;
  if (essenceBlock != ModBlocks.biomeAbsorberBlock) {
    return false;
  }
  if (essenceCompound == null) {
    return false;
  }
  int absorbing=essenceCompound.getInteger(""String_Node_Str"");
  int biome=essenceCompound.getInteger(""String_Node_Str"");
  if (absorbing > 0 || biome == -1) {
    return false;
  }
  return true;
}","private boolean isValidBiomeEssence(ItemStack stackEssence,NBTTagCompound essenceCompound){
  Block essenceBlock=getBlock(stackEssence);
  if (essenceBlock != ModBlocks.biomeAbsorberBlock) {
    return false;
  }
  if (essenceCompound == null) {
    return false;
  }
  int absorbing=essenceCompound.getInteger(""String_Node_Str"");
  int biome=essenceCompound.getInteger(""String_Node_Str"");
  if (absorbing > 0 || biome == -1) {
    return false;
  }
  return true;
}",0.95
166044,"private boolean isValidMobEssence(ItemStack stackEssence,NBTTagCompound essenceCompound){
  if (stackEssence.getItem() != ModItems.syringeItem) {
    return false;
  }
  if (essenceCompound == null) {
    return false;
  }
  int level=essenceCompound.getInteger(""String_Node_Str"");
  int mobId=essenceCompound.getInteger(""String_Node_Str"");
  if (level < DimletConstructionConfiguration.maxMobInjections || mobId <= 0) {
    return false;
  }
  return true;
}","private boolean isValidMobEssence(ItemStack stackEssence,NBTTagCompound essenceCompound){
  if (stackEssence.getItem() != ModItems.syringeItem) {
    return false;
  }
  if (essenceCompound == null) {
    return false;
  }
  int level=essenceCompound.getInteger(""String_Node_Str"");
  String mob=essenceCompound.getString(""String_Node_Str"");
  if (level < DimletConstructionConfiguration.maxMobInjections || mob == null) {
    return false;
  }
  return true;
}",0.9575625680087052
166045,"public static void init(){
  Object inkSac=Item.itemRegistry.getObjectById(351);
  GameRegistry.addRecipe(new ItemStack(ModItems.networkMonitorItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'i',Items.iron_ingot,'l',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.rfToolsManualItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'b',Items.book);
  GameRegistry.addRecipe(new ItemStack(ModItems.rfToolsManualDimensionItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'b',Items.book);
  ItemStack lapisStack=new ItemStack(Items.dye,1,4);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.machineFrame),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'i',Items.iron_ingot,'g',Items.gold_nugget,'l',lapisStack);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.machineBase),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'g',Items.gold_nugget,'s',Blocks.stone);
  Object redstoneTorch=Item.itemRegistry.getObject(""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(ModBlocks.monitorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'r',Items.redstone);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.crafterBlock1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'c',Blocks.crafting_table);
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack((Item)redstoneTorch),null,new ItemStack(Blocks.crafting_table),new ItemStack(ModBlocks.crafterBlock1),new ItemStack(Blocks.crafting_table),null,new ItemStack((Item)redstoneTorch),null},new ItemStack(ModBlocks.crafterBlock2),4));
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack((Item)redstoneTorch),null,new ItemStack(Blocks.crafting_table),new ItemStack(ModBlocks.crafterBlock2),new ItemStack(Blocks.crafting_table),null,new ItemStack((Item)redstoneTorch),null},new ItemStack(ModBlocks.crafterBlock3),4));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.machineInfuserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'s',ModItems.dimensionalShard,'r',Items.redstone,'d',Items.diamond);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.storageScannerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'o',Items.ender_pearl,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.relayBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.itemFilterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'p',Items.paper,'r',Items.redstone,'c',Blocks.chest);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.matterTransmitterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Items.ender_pearl,'r',Items.redstone,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.matterReceiverBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Items.ender_pearl,'r',Items.redstone,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dialingDeviceBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'r',Items.redstone,'T',redstoneTorch);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.destinationAnalyzerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Items.ender_pearl);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.sequencerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'T',redstoneTorch,'M',ModBlocks.machineBase);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.timerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.clock,'r',Items.redstone,'T',redstoneTorch,'M',ModBlocks.machineBase);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.enderMonitorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.ender_pearl,'r',Items.redstone,'T',redstoneTorch,'M',ModBlocks.machineBase);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionMonitorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'u',ModItems.unknownDimlet,'r',Items.redstone,'T',redstoneTorch,'M',ModBlocks.machineBase,'C',Items.comparator);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.endergenicBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'D',Items.diamond,'o',Items.ender_pearl);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.pearlInjectorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',Blocks.chest,'r',Items.redstone,'M',ModBlocks.machineFrame,'H',Blocks.hopper);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.shieldBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Blocks.obsidian,'r',Items.redstone,'T',redstoneTorch,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.shieldTemplateBlock,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',Blocks.wool,'l',lapisStack,'g',Blocks.glass);
  GameRegistry.addSmelting(ModBlocks.dimensionalShardBlock,new ItemStack(ModItems.dimensionalShard,4),1.0f);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimletResearcherBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'u',ModItems.unknownDimlet,'c',Items.comparator,'M',ModBlocks.machineFrame,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimletScramblerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'u',ModItems.unknownDimlet,'c',Items.repeater,'M',ModBlocks.machineFrame,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionEnscriberBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'p',Items.paper,'b',inkSac,'M',ModBlocks.machineFrame,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionBuilderBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.ender_pearl,'E',Items.emerald,'D',Items.diamond,'M',ModBlocks.machineFrame,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionEditorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.redstone,'E',Items.emerald,'D',Items.diamond,'M',ModBlocks.machineFrame,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.activityProbeBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.ender_pearl,'s',ModItems.dimensionalShard,'M',ModBlocks.machineFrame);
  GameRegistry.addRecipe(new ItemStack(ModItems.emptyDimensionTab),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',Items.paper,'r',Items.redstone);
  GameRegistry.addRecipe(new ItemStack(ModItems.dimensionMonitorItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'u',ModItems.unknownDimlet,'r',Items.redstone,'C',Items.comparator);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalBlankBlock,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',Blocks.stone,'*',ModItems.dimensionalShard);
  GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.dimensionalBlock),new ItemStack(ModBlocks.dimensionalBlankBlock));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalSmallBlocks,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalCrossBlock,5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalCross2Block,5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalPattern1Block,7),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock,'x',inkSac);
  ItemStack bonemealStack=new ItemStack(Items.dye,1,15);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalPattern2Block,7),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock,'x',bonemealStack);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.screenControllerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'o',Items.ender_pearl,'M',ModBlocks.machineFrame,'g',Blocks.glass);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.screenBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineBase,'g',Blocks.glass,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModItems.textModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',Items.paper,'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.clockModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.clock,'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.energyModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.dimensionModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.ender_pearl,'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.fluidModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.bucket,'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack(Items.ender_pearl),null,new ItemStack(Items.gold_ingot),new ItemStack(ModItems.energyModuleItem),new ItemStack(Items.gold_ingot),null,new ItemStack(Items.ender_pearl),null},new ItemStack(ModItems.energyPlusModuleItem),4));
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack(Items.ender_pearl),null,new ItemStack(Items.gold_ingot),new ItemStack(ModItems.fluidModuleItem),new ItemStack(Items.gold_ingot),null,new ItemStack(Items.ender_pearl),null},new ItemStack(ModItems.fluidPlusModuleItem),4));
  GameRegistry.addRecipe(new ItemStack(ModItems.dimletTemplate),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',ModItems.dimensionalShard,'p',Items.paper);
}","public static void init(){
  Object inkSac=Item.itemRegistry.getObjectById(351);
  GameRegistry.addRecipe(new ItemStack(ModItems.networkMonitorItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'i',Items.iron_ingot,'l',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.rfToolsManualItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'b',Items.book);
  GameRegistry.addRecipe(new ItemStack(ModItems.rfToolsManualDimensionItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'b',Items.book);
  ItemStack lapisStack=new ItemStack(Items.dye,1,4);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.machineFrame),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'i',Items.iron_ingot,'g',Items.gold_nugget,'l',lapisStack);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.machineBase),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'g',Items.gold_nugget,'s',Blocks.stone);
  Object redstoneTorch=Item.itemRegistry.getObject(""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(ModBlocks.monitorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'r',Items.redstone);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.crafterBlock1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'c',Blocks.crafting_table);
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack((Item)redstoneTorch),null,new ItemStack(Blocks.crafting_table),new ItemStack(ModBlocks.crafterBlock1),new ItemStack(Blocks.crafting_table),null,new ItemStack((Item)redstoneTorch),null},new ItemStack(ModBlocks.crafterBlock2),4));
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack((Item)redstoneTorch),null,new ItemStack(Blocks.crafting_table),new ItemStack(ModBlocks.crafterBlock2),new ItemStack(Blocks.crafting_table),null,new ItemStack((Item)redstoneTorch),null},new ItemStack(ModBlocks.crafterBlock3),4));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.machineInfuserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'s',ModItems.dimensionalShard,'r',Items.redstone,'d',Items.diamond);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.storageScannerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'o',Items.ender_pearl,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.relayBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.itemFilterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'T',redstoneTorch,'p',Items.paper,'r',Items.redstone,'c',Blocks.chest);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.matterTransmitterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Items.ender_pearl,'r',Items.redstone,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.matterReceiverBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Items.ender_pearl,'r',Items.redstone,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dialingDeviceBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'r',Items.redstone,'T',redstoneTorch);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.destinationAnalyzerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Items.ender_pearl);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.sequencerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'T',redstoneTorch,'M',ModBlocks.machineBase);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.timerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.clock,'r',Items.redstone,'T',redstoneTorch,'M',ModBlocks.machineBase);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.enderMonitorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.ender_pearl,'r',Items.redstone,'T',redstoneTorch,'M',ModBlocks.machineBase);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionMonitorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'u',ModItems.unknownDimlet,'r',Items.redstone,'T',redstoneTorch,'M',ModBlocks.machineBase,'C',Items.comparator);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.endergenicBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'D',Items.diamond,'o',Items.ender_pearl);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.pearlInjectorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',Blocks.chest,'r',Items.redstone,'M',ModBlocks.machineFrame,'H',Blocks.hopper);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.shieldBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Blocks.obsidian,'r',Items.redstone,'T',redstoneTorch,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.shieldTemplateBlock,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',Blocks.wool,'l',lapisStack,'g',Blocks.glass);
  GameRegistry.addSmelting(ModBlocks.dimensionalShardBlock,new ItemStack(ModItems.dimensionalShard,4),1.0f);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimletResearcherBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'u',ModItems.unknownDimlet,'c',Items.comparator,'M',ModBlocks.machineFrame,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimletScramblerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'u',ModItems.unknownDimlet,'c',Items.repeater,'M',ModBlocks.machineFrame,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionEnscriberBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'p',Items.paper,'b',inkSac,'M',ModBlocks.machineFrame,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionBuilderBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.ender_pearl,'E',Items.emerald,'D',Items.diamond,'M',ModBlocks.machineFrame,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionEditorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.redstone,'E',Items.emerald,'D',Items.diamond,'M',ModBlocks.machineFrame,'g',Items.gold_ingot);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.activityProbeBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.ender_pearl,'s',ModItems.dimensionalShard,'M',ModBlocks.machineFrame);
  GameRegistry.addRecipe(new ItemStack(ModItems.emptyDimensionTab),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',Items.paper,'r',Items.redstone);
  GameRegistry.addRecipe(new ItemStack(ModItems.dimensionMonitorItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'u',ModItems.unknownDimlet,'r',Items.redstone,'C',Items.comparator);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalBlankBlock,8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',Blocks.stone,'*',ModItems.dimensionalShard);
  GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.dimensionalBlock),new ItemStack(ModBlocks.dimensionalBlankBlock));
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalSmallBlocks,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalCrossBlock,5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalCross2Block,5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalPattern1Block,7),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock,'x',inkSac);
  ItemStack bonemealStack=new ItemStack(Items.dye,1,15);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.dimensionalPattern2Block,7),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'b',ModBlocks.dimensionalBlankBlock,'x',bonemealStack);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.screenControllerBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'o',Items.ender_pearl,'M',ModBlocks.machineFrame,'g',Blocks.glass);
  GameRegistry.addRecipe(new ItemStack(ModBlocks.screenBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineBase,'g',Blocks.glass,'i',Items.iron_ingot);
  GameRegistry.addRecipe(new ItemStack(ModItems.textModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',Items.paper,'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.clockModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.clock,'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.energyModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.dimensionModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.ender_pearl,'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new ItemStack(ModItems.fluidModuleItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.bucket,'r',Items.redstone,'i',Items.iron_ingot,'b',inkSac);
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack(Items.ender_pearl),null,new ItemStack(Items.gold_ingot),new ItemStack(ModItems.energyModuleItem),new ItemStack(Items.gold_ingot),null,new ItemStack(Items.ender_pearl),null},new ItemStack(ModItems.energyPlusModuleItem),4));
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack(Items.ender_pearl),null,new ItemStack(Items.gold_ingot),new ItemStack(ModItems.fluidModuleItem),new ItemStack(Items.gold_ingot),null,new ItemStack(Items.ender_pearl),null},new ItemStack(ModItems.fluidPlusModuleItem),4));
  GameRegistry.addRecipe(new ItemStack(ModItems.dimletTemplate),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',ModItems.dimensionalShard,'p',Items.paper);
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(ModItems.peaceEssenceItem),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str""),createMobEssenceItemStack(""String_Node_Str"")));
}",0.9768697351887188
166046,"@Override public boolean onLeftClickEntity(ItemStack stack,EntityPlayer player,Entity entity){
  int id=findSelectedMobId(entity);
  if (id != -1) {
    int prevId=-1;
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound != null) {
      prevId=tagCompound.getInteger(""String_Node_Str"");
    }
 else {
      tagCompound=new NBTTagCompound();
      stack.setTagCompound(tagCompound);
    }
    if (prevId != id) {
      tagCompound.setInteger(""String_Node_Str"",id);
      tagCompound.setInteger(""String_Node_Str"",1);
    }
 else {
      int level=tagCompound.getInteger(""String_Node_Str"");
      level++;
      if (level > DimletConstructionConfiguration.maxMobInjections) {
        level=DimletConstructionConfiguration.maxMobInjections;
      }
      tagCompound.setInteger(""String_Node_Str"",level);
    }
  }
  return super.onLeftClickEntity(stack,player,entity);
}","@Override public boolean onLeftClickEntity(ItemStack stack,EntityPlayer player,Entity entity){
  String mob=findSelectedMobName(entity);
  if (mob != null) {
    String prevMob=null;
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound != null) {
      prevMob=tagCompound.getString(""String_Node_Str"");
    }
 else {
      tagCompound=new NBTTagCompound();
      stack.setTagCompound(tagCompound);
    }
    if (prevMob == null || !prevMob.equals(mob)) {
      tagCompound.setString(""String_Node_Str"",mob);
      tagCompound.setInteger(""String_Node_Str"",1);
    }
 else {
      int level=tagCompound.getInteger(""String_Node_Str"");
      level++;
      if (level > DimletConstructionConfiguration.maxMobInjections) {
        level=DimletConstructionConfiguration.maxMobInjections;
      }
      tagCompound.setInteger(""String_Node_Str"",level);
    }
  }
  return super.onLeftClickEntity(stack,player,entity);
}",0.910989010989011
166047,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound != null) {
      int mobId=tagCompound.getInteger(""String_Node_Str"");
      if (mobId > 0) {
        DimletEntry entry=KnownDimletConfiguration.idToDimlet.get(mobId);
        if (entry != null) {
          RFTools.message(player,EnumChatFormatting.BLUE + ""String_Node_Str"" + entry.getKey().getName());
        }
      }
      int level=tagCompound.getInteger(""String_Node_Str"");
      level=level * 100 / DimletConstructionConfiguration.maxMobInjections;
      RFTools.message(player,EnumChatFormatting.BLUE + ""String_Node_Str"" + level+ ""String_Node_Str"");
    }
    return stack;
  }
  return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound != null) {
      String mob=tagCompound.getString(""String_Node_Str"");
      if (mob != null) {
        RFTools.message(player,EnumChatFormatting.BLUE + ""String_Node_Str"" + mob);
      }
      int level=tagCompound.getInteger(""String_Node_Str"");
      level=level * 100 / DimletConstructionConfiguration.maxMobInjections;
      RFTools.message(player,EnumChatFormatting.BLUE + ""String_Node_Str"" + level+ ""String_Node_Str"");
    }
    return stack;
  }
  return stack;
}",0.8847736625514403
166048,"@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,EntityPlayer player,List list,boolean whatIsThis){
  super.addInformation(itemStack,player,list,whatIsThis);
  NBTTagCompound tagCompound=itemStack.getTagCompound();
  if (tagCompound != null) {
    int mobId=tagCompound.getInteger(""String_Node_Str"");
    if (mobId > 0) {
      DimletEntry entry=KnownDimletConfiguration.idToDimlet.get(mobId);
      if (entry != null) {
        list.add(EnumChatFormatting.BLUE + ""String_Node_Str"" + entry.getKey().getName());
      }
    }
    int level=tagCompound.getInteger(""String_Node_Str"");
    level=level * 100 / DimletConstructionConfiguration.maxMobInjections;
    list.add(EnumChatFormatting.BLUE + ""String_Node_Str"" + level+ ""String_Node_Str"");
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"");
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"");
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"");
  }
 else {
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"");
  }
}","@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,EntityPlayer player,List list,boolean whatIsThis){
  super.addInformation(itemStack,player,list,whatIsThis);
  NBTTagCompound tagCompound=itemStack.getTagCompound();
  if (tagCompound != null) {
    String mob=tagCompound.getString(""String_Node_Str"");
    if (mob != null) {
      list.add(EnumChatFormatting.BLUE + ""String_Node_Str"" + mob);
    }
    int level=tagCompound.getInteger(""String_Node_Str"");
    level=level * 100 / DimletConstructionConfiguration.maxMobInjections;
    list.add(EnumChatFormatting.BLUE + ""String_Node_Str"" + level+ ""String_Node_Str"");
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"");
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"");
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"");
  }
 else {
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"");
  }
}",0.923728813559322
166049,"private static void initLiquidItems(Configuration cfg,Configuration mainCfg,Map<DimletKey,Integer> idsInConfig){
  Map<String,Fluid> fluidMap=FluidRegistry.getRegisteredFluids();
  for (  Map.Entry<String,Fluid> me : fluidMap.entrySet()) {
    if (me.getValue().canBePlacedInWorld()) {
      int id=registerDimlet(cfg,mainCfg,idsInConfig,new DimletKey(DimletType.DIMLET_LIQUID,me.getKey()));
      if (id != -1) {
        String displayName=new FluidStack(me.getValue(),1).getLocalizedName();
        DimletMapping.idToFluid.put(id,me.getValue().getBlock());
        idToDisplayName.put(id,DimletType.DIMLET_LIQUID.getName() + ""String_Node_Str"" + displayName+ ""String_Node_Str"");
      }
    }
  }
}","private static void initLiquidItems(Configuration cfg,Configuration mainCfg,Map<DimletKey,Integer> idsInConfig){
  Map<String,Fluid> fluidMap=FluidRegistry.getRegisteredFluids();
  for (  Map.Entry<String,Fluid> me : fluidMap.entrySet()) {
    if (me.getValue().canBePlacedInWorld()) {
      int id=registerDimlet(cfg,mainCfg,idsInConfig,new DimletKey(DimletType.DIMLET_LIQUID,me.getKey()));
      if (id != -1) {
        String displayName=null;
        try {
          displayName=new FluidStack(me.getValue(),1).getLocalizedName();
        }
 catch (        Exception e) {
          RFTools.logError(""String_Node_Str"");
          RFTools.logError(""String_Node_Str"" + me.getKey());
          RFTools.logError(""String_Node_Str"" + me.getValue().getUnlocalizedName());
          displayName=""String_Node_Str"" + me.getKey() + ""String_Node_Str"";
          e.printStackTrace();
        }
        DimletMapping.idToFluid.put(id,me.getValue().getBlock());
        idToDisplayName.put(id,DimletType.DIMLET_LIQUID.getName() + ""String_Node_Str"" + displayName+ ""String_Node_Str"");
      }
    }
  }
}",0.781442146450531
166050,"@SubscribeEvent public void loadEvent(WorldEvent.Load evt){
  System.out.println(""String_Node_Str"" + evt.world.isRemote);
  if (evt.world.provider.dimensionId != 0) {
    return;
  }
  if (evt.world.isRemote) {
    System.out.println(""String_Node_Str"");
    KnownDimletConfiguration.init();
    KnownDimletConfiguration.initCrafting();
  }
 else   if (MinecraftServer.getServer().isDedicatedServer()) {
    System.out.println(""String_Node_Str"");
    KnownDimletConfiguration.init();
    KnownDimletConfiguration.initCrafting();
  }
}","@SubscribeEvent public void loadEvent(WorldEvent.Load evt){
  System.out.println(""String_Node_Str"" + evt.world.isRemote + ""String_Node_Str""+ evt.world.provider.dimensionId);
  if (evt.world.isRemote) {
    System.out.println(""String_Node_Str"");
    KnownDimletConfiguration.init();
    KnownDimletConfiguration.initCrafting();
  }
 else   if (MinecraftServer.getServer().isDedicatedServer()) {
    if (evt.world.provider.dimensionId == 0) {
      System.out.println(""String_Node_Str"");
      KnownDimletConfiguration.init();
      KnownDimletConfiguration.initCrafting();
    }
  }
}",0.3028673835125448
166051,"public void init(FMLInitializationEvent e){
  ModEntities.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(RFTools.instance,new GuiProxy());
  MinecraftForge.EVENT_BUS.register(new WorldLoadEvent());
  FMLCommonHandler.instance().bus().register(new PlayerLoginEvent());
  FMLCommonHandler.instance().bus().register(new DimensionTickEvent());
}","public void init(FMLInitializationEvent e){
  ModEntities.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(RFTools.instance,new GuiProxy());
  FMLCommonHandler.instance().bus().register(new ClientDisconnectEvent());
  MinecraftForge.EVENT_BUS.register(new WorldLoadEvent());
  FMLCommonHandler.instance().bus().register(new PlayerLoginEvent());
  FMLCommonHandler.instance().bus().register(new DimensionTickEvent());
}",0.9027237354085604
166052,"@SubscribeEvent public void unloadEvent(WorldEvent.Unload evt){
  if (evt.world.isRemote) {
    return;
  }
  int d=evt.world.provider.dimensionId;
  if (d == 0) {
    RfToolsDimensionManager.unregisterDimensions();
  }
}","@SubscribeEvent public void unloadEvent(WorldEvent.Unload evt){
  int d=evt.world.provider.dimensionId;
  System.out.println(""String_Node_Str"" + d);
  if (d == 0) {
    RfToolsDimensionManager.unregisterDimensions();
    KnownDimletConfiguration.clean();
  }
}",0.7151767151767152
166053,"private static void clean(){
  lastId=0;
  idToDimlet.clear();
  dimletToID.clear();
  idToDisplayName.clear();
  craftableDimlets.clear();
  dimletBlackList.clear();
  dimletRandomNotAllowed.clear();
  DimletMapping.clean();
  DimletRandomizer.clean();
}","public static void clean(){
  lastId=0;
  idToDimlet.clear();
  dimletToID.clear();
  idToDisplayName.clear();
  craftableDimlets.clear();
  dimletBlackList.clear();
  dimletRandomNotAllowed.clear();
  DimletMapping.clean();
  DimletRandomizer.clean();
}",0.9783889980353636
166054,"@Override protected void checkStateServer(){
  if (!isValid()) {
    counter=1;
    return;
  }
  counter--;
  if (counter > 0) {
    return;
  }
  counter=20;
  TileEntity tileEntity=worldObj.getTileEntity(monitorX,monitorY,monitorZ);
  if (!EnergyTools.isEnergyTE(tileEntity)) {
    setInvalid();
    return;
  }
  EnergyTools.EnergyLevel energy=EnergyTools.getEnergyLevel(tileEntity);
  int maxEnergy=energy.getMaxEnergy();
  int ratio=0;
  boolean alarm=false;
  if (maxEnergy > 0) {
    int stored=energy.getEnergy();
    ratio=1 + (stored * 5) / maxEnergy;
    if (ratio < 1) {
      ratio=1;
    }
 else     if (ratio > 5) {
      ratio=5;
    }
switch (alarmMode) {
case MODE_OFF:
      alarm=false;
    break;
case MODE_LESS:
  alarm=((stored * 100 / maxEnergy) < alarmLevel);
break;
case MODE_MORE:
alarm=((stored * 100 / maxEnergy) > alarmLevel);
break;
}
}
Boolean v=inAlarm.getValue();
boolean alarmValue=v == null ? false : v;
if (getRflevel() != ratio || alarm != alarmValue) {
rflevel.setValue(ratio);
if (alarmValue != alarm) {
inAlarm.setValue(alarm);
}
notifyBlockUpdate();
}
}","@Override protected void checkStateServer(){
  if (!isValid()) {
    counter=1;
    return;
  }
  counter--;
  if (counter > 0) {
    return;
  }
  counter=20;
  TileEntity tileEntity=worldObj.getTileEntity(monitorX,monitorY,monitorZ);
  if (!EnergyTools.isEnergyTE(tileEntity)) {
    setInvalid();
    return;
  }
  EnergyTools.EnergyLevel energy=EnergyTools.getEnergyLevel(tileEntity);
  long maxEnergy=(long)energy.getMaxEnergy();
  int ratio=0;
  boolean alarm=false;
  if (maxEnergy > 0) {
    long stored=(long)energy.getEnergy();
    ratio=(int)(1 + (stored * 5) / maxEnergy);
    if (ratio < 1) {
      ratio=1;
    }
 else     if (ratio > 5) {
      ratio=5;
    }
switch (alarmMode) {
case MODE_OFF:
      alarm=false;
    break;
case MODE_LESS:
  alarm=((stored * 100 / maxEnergy) < alarmLevel);
break;
case MODE_MORE:
alarm=((stored * 100 / maxEnergy) > alarmLevel);
break;
}
}
Boolean v=inAlarm.getValue();
boolean alarmValue=v == null ? false : v;
if (getRflevel() != ratio || alarm != alarmValue) {
rflevel.setValue(ratio);
if (alarmValue != alarm) {
inAlarm.setValue(alarm);
}
notifyBlockUpdate();
}
}",0.9850881156800724
166055,"public static void renderLevel(FontRenderer fontRenderer,int xoffset,int currenty,String[] screenData,String label,boolean hidebar,boolean hidetext,boolean showpct,boolean showdiff,int poscolor,int negcolor,int gradient1,int gradient2){
  if (screenData == null) {
    return;
  }
  int maxContents=Integer.parseInt(screenData[1]);
  if (maxContents > 0) {
    if (!hidebar) {
      int contents=Integer.parseInt(screenData[0]);
      int width=80 - xoffset + 7 + 40;
      long value=(long)contents * width / maxContents;
      if (value < 0) {
        value=0;
      }
 else       if (value > width) {
        value=width;
      }
      RenderHelper.drawHorizontalGradientRect(xoffset,currenty,(int)(xoffset + value),currenty + 8,gradient1,gradient2);
    }
  }
  if (!hidetext) {
    if (showdiff) {
      if (screenData[2].startsWith(""String_Node_Str"")) {
        fontRenderer.drawString(screenData[2] + ""String_Node_Str"" + label+ ""String_Node_Str"",xoffset,currenty,negcolor);
      }
 else {
        fontRenderer.drawString(""String_Node_Str"" + screenData[2] + ""String_Node_Str""+ label+ ""String_Node_Str"",xoffset,currenty,poscolor);
      }
    }
 else     if (maxContents > 0) {
      if (showpct) {
        int contents=Integer.parseInt(screenData[0]);
        long value=(long)contents * 100 / (long)maxContents;
        if (value < 0) {
          value=0;
        }
 else         if (value > 100) {
          value=100;
        }
        fontRenderer.drawString(value + ""String_Node_Str"",xoffset,currenty,poscolor);
      }
 else {
        fontRenderer.drawString(screenData[0] + label,xoffset,currenty,poscolor);
      }
    }
  }
}","public static void renderLevel(FontRenderer fontRenderer,int xoffset,int currenty,String[] screenData,String label,boolean hidebar,boolean hidetext,boolean showpct,boolean showdiff,int poscolor,int negcolor,int gradient1,int gradient2){
  if (screenData == null) {
    return;
  }
  long maxContents=Long.parseLong(screenData[1]);
  if (maxContents > 0) {
    if (!hidebar) {
      long contents=Long.parseLong(screenData[0]);
      int width=80 - xoffset + 7 + 40;
      long value=contents * width / maxContents;
      if (value < 0) {
        value=0;
      }
 else       if (value > width) {
        value=width;
      }
      RenderHelper.drawHorizontalGradientRect(xoffset,currenty,(int)(xoffset + value),currenty + 8,gradient1,gradient2);
    }
  }
  if (!hidetext) {
    if (showdiff) {
      if (screenData[2].startsWith(""String_Node_Str"")) {
        fontRenderer.drawString(screenData[2] + ""String_Node_Str"" + label+ ""String_Node_Str"",xoffset,currenty,negcolor);
      }
 else {
        fontRenderer.drawString(""String_Node_Str"" + screenData[2] + ""String_Node_Str""+ label+ ""String_Node_Str"",xoffset,currenty,poscolor);
      }
    }
 else     if (maxContents > 0) {
      if (showpct) {
        long contents=Long.parseLong(screenData[0]);
        long value=contents * 100 / maxContents;
        if (value < 0) {
          value=0;
        }
 else         if (value > 100) {
          value=100;
        }
        fontRenderer.drawString(value + ""String_Node_Str"",xoffset,currenty,poscolor);
      }
 else {
        fontRenderer.drawString(screenData[0] + label,xoffset,currenty,poscolor);
      }
    }
  }
}",0.97148114075437
166056,"private void addMonitorPanel(Minecraft mc,Gui gui,final NBTTagCompound currentData,Panel panel){
  Panel monitorPanel=new Panel(mc,gui).setLayout(new HorizontalLayout()).setDesiredHeight(16);
  String monitoring;
  if (currentData.hasKey(""String_Node_Str"")) {
    int dim=currentData.getInteger(""String_Node_Str"");
    World world=RfToolsDimensionManager.getWorldForDimension(dim);
    int x=currentData.getInteger(""String_Node_Str"");
    int y=currentData.getInteger(""String_Node_Str"");
    int z=currentData.getInteger(""String_Node_Str"");
    monitoring=currentData.getString(""String_Node_Str"");
    Block block=world.getBlock(x,y,z);
    monitorPanel.addChild(new BlockRender(mc,gui).setRenderItem(block)).setDesiredWidth(20);
  }
 else {
    monitoring=""String_Node_Str"";
  }
  panel.addChild(monitorPanel);
  panel.addChild(new Label(mc,gui).setText(monitoring));
}","private void addMonitorPanel(Minecraft mc,Gui gui,final NBTTagCompound currentData,Panel panel){
  Panel monitorPanel=new Panel(mc,gui).setLayout(new HorizontalLayout()).setDesiredHeight(16);
  String monitoring;
  if (currentData.hasKey(""String_Node_Str"")) {
    int dim=currentData.getInteger(""String_Node_Str"");
    World world=mc.thePlayer.worldObj;
    int x=currentData.getInteger(""String_Node_Str"");
    int y=currentData.getInteger(""String_Node_Str"");
    int z=currentData.getInteger(""String_Node_Str"");
    monitoring=currentData.getString(""String_Node_Str"");
    Block block=world.getBlock(x,y,z);
    monitorPanel.addChild(new BlockRender(mc,gui).setRenderItem(block)).setDesiredWidth(20);
  }
 else {
    monitoring=""String_Node_Str"";
  }
  panel.addChild(monitorPanel);
  panel.addChild(new Label(mc,gui).setText(monitoring));
}",0.9591121495327104
166057,"private void renderModules(FontRenderer fontrenderer,ClientScreenModule.TransformMode mode,List<ClientScreenModule> modules,Map<Integer,String> screenData){
  float f3;
  int currenty=7;
  int moduleIndex=0;
  for (  ClientScreenModule module : modules) {
    if (module != null) {
      if (module.getTransformMode() != mode) {
        if (mode != ClientScreenModule.TransformMode.NONE) {
          GL11.glPopMatrix();
        }
        GL11.glPushMatrix();
        mode=module.getTransformMode();
switch (mode) {
case TEXT:
          GL11.glTranslatef(-0.5F,0.5F,0.07F);
        f3=0.0075F;
      GL11.glScalef(f3,-f3,f3);
    GL11.glNormal3f(0.0F,0.0F,-1.0F);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
break;
case ITEM:
f3=0.0075F;
GL11.glTranslatef(-0.5F,0.5F,0.07F);
GL11.glScalef(f3,-f3,-0.0001f);
break;
default :
break;
}
}
module.render(fontrenderer,currenty,screenData.get(moduleIndex));
currenty+=module.getHeight();
}
moduleIndex++;
}
if (mode != ClientScreenModule.TransformMode.NONE) {
GL11.glPopMatrix();
}
}","private void renderModules(FontRenderer fontrenderer,ClientScreenModule.TransformMode mode,List<ClientScreenModule> modules,Map<Integer,String> screenData){
  float f3;
  int currenty=7;
  int moduleIndex=0;
  for (  ClientScreenModule module : modules) {
    if (module != null) {
      int height=module.getHeight();
      if (currenty + height <= 124) {
        if (module.getTransformMode() != mode) {
          if (mode != ClientScreenModule.TransformMode.NONE) {
            GL11.glPopMatrix();
          }
          GL11.glPushMatrix();
          mode=module.getTransformMode();
switch (mode) {
case TEXT:
            GL11.glTranslatef(-0.5F,0.5F,0.07F);
          f3=0.0075F;
        GL11.glScalef(f3,-f3,f3);
      GL11.glNormal3f(0.0F,0.0F,-1.0F);
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  break;
case ITEM:
f3=0.0075F;
GL11.glTranslatef(-0.5F,0.5F,0.07F);
GL11.glScalef(f3,-f3,-0.0001f);
break;
default :
break;
}
}
module.render(fontrenderer,currenty,screenData.get(moduleIndex));
currenty+=height;
}
}
moduleIndex++;
}
if (mode != ClientScreenModule.TransformMode.NONE) {
GL11.glPopMatrix();
}
}",0.941286989196806
166058,"@Override public ItemStack decrStackSize(int index,int amount){
  clientScreenModules=null;
  return inventoryHelper.decrStackSize(index,amount);
}","@Override public ItemStack decrStackSize(int index,int amount){
  clientScreenModules=null;
  screenModules=null;
  return inventoryHelper.decrStackSize(index,amount);
}",0.930379746835443
166059,"private void readBufferFromNBT(NBTTagCompound tagCompound){
  NBTTagList bufferTagList=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < bufferTagList.tagCount(); i++) {
    NBTTagCompound nbtTagCompound=bufferTagList.getCompoundTagAt(i);
    inventoryHelper.getStacks()[i + ScreenContainer.SLOT_MODULES]=ItemStack.loadItemStackFromNBT(nbtTagCompound);
  }
  clientScreenModules=null;
}","private void readBufferFromNBT(NBTTagCompound tagCompound){
  NBTTagList bufferTagList=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < bufferTagList.tagCount(); i++) {
    NBTTagCompound nbtTagCompound=bufferTagList.getCompoundTagAt(i);
    inventoryHelper.getStacks()[i + ScreenContainer.SLOT_MODULES]=ItemStack.loadItemStackFromNBT(nbtTagCompound);
  }
  clientScreenModules=null;
  screenModules=null;
}",0.9748283752860412
166060,"public void updateModuleData(int slot,NBTTagCompound tagCompound){
  ItemStack stack=inventoryHelper.getStacks()[slot];
  stack.setTagCompound(tagCompound);
  markDirty();
}","public void updateModuleData(int slot,NBTTagCompound tagCompound){
  ItemStack stack=inventoryHelper.getStacks()[slot];
  stack.setTagCompound(tagCompound);
  screenModules=null;
  clientScreenModules=null;
  markDirty();
}",0.8737373737373737
166061,"@Override public void setInventorySlotContents(int index,ItemStack stack){
  inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,stack);
  clientScreenModules=null;
}","@Override public void setInventorySlotContents(int index,ItemStack stack){
  inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,stack);
  clientScreenModules=null;
  screenModules=null;
}",0.9441624365482234
166062,"@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  float f3;
  int meta=tileEntity.getBlockMetadata();
  f3=0.0F;
  if (meta == 2) {
    f3=180.0F;
  }
  if (meta == 4) {
    f3=90.0F;
  }
  if (meta == 5) {
    f3=-90.0F;
  }
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.75F,(float)z + 0.5F);
  GL11.glRotatef(-f3,0.0F,1.0F,0.0F);
  GL11.glTranslatef(0.0F,-0.2500F,-0.4375F);
  renderScreenBoard();
  FontRenderer fontrenderer=this.func_147498_b();
  ClientScreenModule.TransformMode mode=ClientScreenModule.TransformMode.NONE;
  GL11.glDepthMask(false);
  GL11.glDisable(GL11.GL_LIGHTING);
  int currenty=7;
  for (  ClientScreenModule module : modules) {
    if (module.getTransformMode() != mode) {
      if (mode != ClientScreenModule.TransformMode.NONE) {
        GL11.glPopMatrix();
      }
      GL11.glPushMatrix();
      mode=module.getTransformMode();
switch (mode) {
case TEXT:
        GL11.glTranslatef(-0.5F,0.5F,0.07F);
      f3=0.0075F;
    GL11.glScalef(f3,-f3,f3);
  GL11.glNormal3f(0.0F,0.0F,-1.0F);
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
break;
case ITEM:
GL11.glTranslatef(-0.5F,0.5F,0.07F);
GL11.glScalef(f3,-f3,-0.0001f);
break;
default :
break;
}
}
module.render(fontrenderer,currenty);
currenty+=module.getHeight();
}
if (mode != ClientScreenModule.TransformMode.NONE) {
GL11.glPopMatrix();
}
GL11.glDepthMask(true);
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
GL11.glPopMatrix();
}","@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  float f3;
  int meta=tileEntity.getBlockMetadata();
  f3=0.0F;
  if (meta == 2) {
    f3=180.0F;
  }
  if (meta == 4) {
    f3=90.0F;
  }
  if (meta == 5) {
    f3=-90.0F;
  }
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.75F,(float)z + 0.5F);
  GL11.glRotatef(-f3,0.0F,1.0F,0.0F);
  GL11.glTranslatef(0.0F,-0.2500F,-0.4375F);
  renderScreenBoard();
  FontRenderer fontrenderer=this.func_147498_b();
  ClientScreenModule.TransformMode mode=ClientScreenModule.TransformMode.NONE;
  GL11.glDepthMask(false);
  GL11.glDisable(GL11.GL_LIGHTING);
  int currenty=7;
  for (  ClientScreenModule module : modules) {
    if (module.getTransformMode() != mode) {
      if (mode != ClientScreenModule.TransformMode.NONE) {
        GL11.glPopMatrix();
      }
      GL11.glPushMatrix();
      mode=module.getTransformMode();
switch (mode) {
case TEXT:
        GL11.glTranslatef(-0.5F,0.5F,0.07F);
      f3=0.0075F;
    GL11.glScalef(f3,-f3,f3);
  GL11.glNormal3f(0.0F,0.0F,-1.0F);
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
break;
case ITEM:
f3=0.0075F;
GL11.glTranslatef(-0.5F,0.5F,0.07F);
GL11.glScalef(f3,-f3,-0.0001f);
break;
default :
break;
}
}
module.render(fontrenderer,currenty);
currenty+=module.getHeight();
}
if (mode != ClientScreenModule.TransformMode.NONE) {
GL11.glPopMatrix();
}
GL11.glDepthMask(true);
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
GL11.glPopMatrix();
}",0.9959514170040484
166063,"@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  float f3;
  int meta=tileEntity.getBlockMetadata();
  f3=0.0F;
  if (meta == 2) {
    f3=180.0F;
  }
  if (meta == 4) {
    f3=90.0F;
  }
  if (meta == 5) {
    f3=-90.0F;
  }
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.75F,(float)z + 0.5F);
  GL11.glRotatef(-f3,0.0F,1.0F,0.0F);
  GL11.glTranslatef(0.0F,-0.2500F,-0.4375F);
  renderScreenBoard();
  FontRenderer fontrenderer=this.func_147498_b();
  ClientScreenModule.TransformMode mode=ClientScreenModule.TransformMode.NONE;
  GL11.glDepthMask(false);
  int currenty=7;
  for (  ClientScreenModule module : modules) {
    if (module.getTransformMode() != mode) {
      if (mode != ClientScreenModule.TransformMode.NONE) {
        GL11.glPopMatrix();
      }
      GL11.glPushMatrix();
      mode=module.getTransformMode();
switch (mode) {
case TEXT:
        GL11.glTranslatef(-0.5F,0.5F,0.07F);
      f3=0.0075F;
    GL11.glScalef(f3,-f3,f3);
  GL11.glNormal3f(0.0F,0.0F,-1.0F);
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
break;
case ITEM:
GL11.glTranslatef(-0.5F,0.5F,0.07F);
GL11.glScalef(f3,-f3,-0.0001f);
break;
default :
break;
}
}
module.render(fontrenderer,currenty);
currenty+=module.getHeight();
}
if (mode != ClientScreenModule.TransformMode.NONE) {
GL11.glPopMatrix();
}
GL11.glDepthMask(true);
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
GL11.glPopMatrix();
}","@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  float f3;
  int meta=tileEntity.getBlockMetadata();
  f3=0.0F;
  if (meta == 2) {
    f3=180.0F;
  }
  if (meta == 4) {
    f3=90.0F;
  }
  if (meta == 5) {
    f3=-90.0F;
  }
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.75F,(float)z + 0.5F);
  GL11.glRotatef(-f3,0.0F,1.0F,0.0F);
  GL11.glTranslatef(0.0F,-0.2500F,-0.4375F);
  renderScreenBoard();
  FontRenderer fontrenderer=this.func_147498_b();
  ClientScreenModule.TransformMode mode=ClientScreenModule.TransformMode.NONE;
  GL11.glDepthMask(false);
  GL11.glDisable(GL11.GL_LIGHTING);
  int currenty=7;
  for (  ClientScreenModule module : modules) {
    if (module.getTransformMode() != mode) {
      if (mode != ClientScreenModule.TransformMode.NONE) {
        GL11.glPopMatrix();
      }
      GL11.glPushMatrix();
      mode=module.getTransformMode();
switch (mode) {
case TEXT:
        GL11.glTranslatef(-0.5F,0.5F,0.07F);
      f3=0.0075F;
    GL11.glScalef(f3,-f3,f3);
  GL11.glNormal3f(0.0F,0.0F,-1.0F);
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
break;
case ITEM:
GL11.glTranslatef(-0.5F,0.5F,0.07F);
GL11.glScalef(f3,-f3,-0.0001f);
break;
default :
break;
}
}
module.render(fontrenderer,currenty);
currenty+=module.getHeight();
}
if (mode != ClientScreenModule.TransformMode.NONE) {
GL11.glPopMatrix();
}
GL11.glDepthMask(true);
GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
GL11.glPopMatrix();
}",0.9876543209876544
166064,"@Override public void registerWorldChunkManager(){
  int dim=worldObj.provider.dimensionId;
  long seed=calculateSeed(worldObj.getSeed(),dim);
  getDimensionInformation();
  storage=DimensionStorage.getDimensionStorage(worldObj);
  if (dimensionInformation != null && !dimensionInformation.getBiomes().isEmpty()) {
    worldChunkMgr=new SingleBiomeWorldChunkManager(worldObj,seed,terrainType);
  }
 else {
    worldChunkMgr=new WorldChunkManager(seed,worldObj.getWorldInfo().getTerrainType());
  }
  hasNoSky=!dimensionInformation.getTerrainType().hasSky();
  if (worldObj.isRemote) {
    SkyType skyType=dimensionInformation.getSkyDescriptor().getSkyType();
    if (hasNoSky) {
      SkyRenderer.registerNoSky(this);
    }
 else     if (skyType == SkyType.SKY_ENDER) {
      SkyRenderer.registerEnderSky(this);
    }
 else     if (skyType == SkyType.SKY_INFERNO) {
      SkyRenderer.registerPlasmaSky(this);
    }
 else {
      SkyRenderer.registerSky(this,dimensionInformation);
    }
  }
}","@Override public void registerWorldChunkManager(){
  int dim=worldObj.provider.dimensionId;
  seed=calculateSeed(worldObj.getSeed(),dim);
  getDimensionInformation();
  storage=DimensionStorage.getDimensionStorage(worldObj);
  setupProviderInfo();
}",0.3690572119258662
166065,"private DimensionInformation getDimensionInformation(){
  if (dimensionInformation == null) {
    int dim=worldObj.provider.dimensionId;
    dimensionInformation=RfToolsDimensionManager.getDimensionManager(worldObj).getDimensionInformation(dim);
    if (dimensionInformation == null) {
      RFTools.log(""String_Node_Str"" + dim + ""String_Node_Str"");
    }
  }
  return dimensionInformation;
}","private DimensionInformation getDimensionInformation(){
  if (dimensionInformation == null) {
    int dim=worldObj.provider.dimensionId;
    dimensionInformation=RfToolsDimensionManager.getDimensionManager(worldObj).getDimensionInformation(dim);
    if (dimensionInformation == null) {
      RFTools.log(""String_Node_Str"" + dim + ""String_Node_Str"");
    }
 else {
      setupProviderInfo();
    }
  }
  return dimensionInformation;
}",0.9503030303030304
166066,"@Override public double getHorizon(){
  getDimensionInformation();
  if (dimensionInformation.getTerrainType().hasNoHorizon()) {
    return 0;
  }
 else {
    return super.getHorizon();
  }
}","@Override public double getHorizon(){
  getDimensionInformation();
  if (dimensionInformation != null && dimensionInformation.getTerrainType().hasNoHorizon()) {
    return 0;
  }
 else {
    return super.getHorizon();
  }
}",0.9227053140096618
166067,"@Override public boolean isSurfaceWorld(){
  getDimensionInformation();
  return dimensionInformation.getTerrainType().hasSky();
}","@Override public boolean isSurfaceWorld(){
  getDimensionInformation();
  if (dimensionInformation == null) {
    return super.isSurfaceWorld();
  }
  return dimensionInformation.getTerrainType().hasSky();
}",0.771513353115727
166068,"@Override public void replaceBlocksForBiome(int chunkX,int chunkZ,Block[] aBlock,byte[] abyte,BiomeGenBase[] biomeGenBases){
  ChunkProviderEvent.ReplaceBiomeBlocks event=new ChunkProviderEvent.ReplaceBiomeBlocks(provider,chunkX,chunkZ,aBlock,abyte,biomeGenBases,world);
  MinecraftForge.EVENT_BUS.post(event);
  if (event.getResult() == Event.Result.DENY) {
    for (int cx=0; cx < 16; ++cx) {
      for (int cz=0; cz < 16; ++cz) {
        int bottomIndex=((cz * 16) + cx) * (aBlock.length / 256);
        while (aBlock[bottomIndex] == Blocks.bedrock) {
          aBlock[bottomIndex++]=null;
        }
      }
    }
    return;
  }
  double d0=0.03125D;
  this.stoneNoise=this.noiseGen4.generateNoiseOctaves(this.stoneNoise,(chunkX * 16),(chunkZ * 16),16,16,d0 * 2.0D,d0 * 2.0D,1.0D);
  for (int k=0; k < 16; ++k) {
    for (int l=0; l < 16; ++l) {
      BiomeGenBase biomegenbase=biomeGenBases[l + k * 16];
      genBiomeTerrain(biomegenbase,aBlock,abyte,chunkX * 16 + k,chunkZ * 16 + l,this.stoneNoise[l + k * 16]);
    }
  }
}","@Override public void replaceBlocksForBiome(int chunkX,int chunkZ,Block[] aBlock,byte[] abyte,BiomeGenBase[] biomeGenBases){
  double d0=0.03125D;
  this.stoneNoise=this.noiseGen4.generateNoiseOctaves(this.stoneNoise,(chunkX * 16),(chunkZ * 16),16,16,d0 * 2.0D,d0 * 2.0D,1.0D);
  for (int k=0; k < 16; ++k) {
    for (int l=0; l < 16; ++l) {
      BiomeGenBase biomegenbase=biomeGenBases[l + k * 16];
      genBiomeTerrain(biomegenbase,aBlock,abyte,chunkX * 16 + k,chunkZ * 16 + l,this.stoneNoise[l + k * 16]);
    }
  }
}",0.6726804123711341
166069,"public final void genBiomeTerrain(BiomeGenBase biomegenbase,Block[] blocks,byte[] abyte,int x,int z,double noise){
  Block baseLiquid=provider.dimensionInformation.getFluidForTerrain();
  Block baseBlock=provider.dimensionInformation.getBaseBlockForTerrain().getBlock();
  byte baseMeta=provider.dimensionInformation.getBaseBlockForTerrain().getMeta();
  Block block=biomegenbase.topBlock;
  byte blockMeta=(byte)(biomegenbase.field_150604_aj & 255);
  Block block1=biomegenbase.fillerBlock;
  byte block1Meta=(byte)(biomegenbase.field_76754_C & 255);
  int k=-1;
  int l=(int)(noise / 3.0D + 3.0D + provider.rand.nextDouble() * 0.25D);
  int cx=x & 15;
  int cz=z & 15;
  int bottomIndex=((cz * 16) + cx) * (blocks.length / 256);
  for (int height=255; height >= 0; --height) {
    int index=bottomIndex + height;
    if (height <= 2) {
      blocks[index]=Blocks.air;
    }
 else {
      Block currentBlock=blocks[index];
      if (currentBlock != null && currentBlock.getMaterial() != Material.air) {
        if (currentBlock == baseBlock) {
          if (k == -1) {
            if (l <= 0) {
              block=null;
              blockMeta=0;
              block1=baseBlock;
              block1Meta=baseMeta;
            }
 else             if (height >= 59 && height <= 64) {
              block=biomegenbase.topBlock;
              blockMeta=(byte)(biomegenbase.field_150604_aj & 255);
              block1=baseBlock;
              block1Meta=baseMeta;
            }
            if (height < 63 && (block == null || block.getMaterial() == Material.air)) {
              if (biomegenbase.getFloatTemperature(x,height,z) < 0.15F) {
                block=Blocks.ice;
                blockMeta=0;
              }
 else {
                block=baseLiquid;
                blockMeta=0;
              }
            }
            k=l;
            if (height >= 62) {
              blocks[index]=block;
              abyte[index]=blockMeta;
            }
 else             if (height < 56 - l) {
              block=null;
              block1=baseBlock;
              block1Meta=baseMeta;
              blocks[index]=biomegenbase.fillerBlock;
              abyte[index]=(byte)(biomegenbase.field_76754_C & 266);
            }
 else {
              blocks[index]=block1;
              abyte[index]=block1Meta;
            }
          }
 else           if (k > 0) {
            --k;
            blocks[index]=block1;
            abyte[index]=block1Meta;
            if (k == 0 && block1 == Blocks.sand) {
              k=provider.rand.nextInt(4) + Math.max(0,height - 63);
              block1=Blocks.sandstone;
              block1Meta=0;
            }
          }
        }
      }
 else {
        k=-1;
      }
    }
  }
}","public final void genBiomeTerrain(BiomeGenBase biomegenbase,Block[] blocks,byte[] abyte,int x,int z,double noise){
  Block baseLiquid=provider.dimensionInformation.getFluidForTerrain();
  Block baseBlock=provider.dimensionInformation.getBaseBlockForTerrain().getBlock();
  byte baseMeta=provider.dimensionInformation.getBaseBlockForTerrain().getMeta();
  Block block=biomegenbase.topBlock;
  byte blockMeta=(byte)(biomegenbase.field_150604_aj & 255);
  Block block1=biomegenbase.fillerBlock;
  byte block1Meta=(byte)(biomegenbase.field_76754_C & 255);
  int k=-1;
  int l=(int)(noise / 3.0D + 3.0D + provider.rand.nextDouble() * 0.25D);
  int cx=x & 15;
  int cz=z & 15;
  int bottomIndex=((cz * 16) + cx) * (blocks.length / 256);
  for (int height=255; height >= 0; --height) {
    int index=bottomIndex + height;
    if (height <= 2) {
      blocks[index]=Blocks.air;
    }
 else {
      Block currentBlock=blocks[index];
      if (currentBlock == Blocks.bedrock && height <= 12) {
        blocks[index]=Blocks.air;
        k=-1;
      }
 else {
        if (currentBlock != null && currentBlock.getMaterial() != Material.air) {
          if (currentBlock == baseBlock) {
            if (k == -1) {
              if (l <= 0) {
                block=null;
                blockMeta=0;
                block1=baseBlock;
                block1Meta=baseMeta;
              }
 else               if (height >= 59 && height <= 64) {
                block=biomegenbase.topBlock;
                blockMeta=(byte)(biomegenbase.field_150604_aj & 255);
                block1=baseBlock;
                block1Meta=baseMeta;
              }
              if (height < 63 && (block == null || block.getMaterial() == Material.air)) {
                if (biomegenbase.getFloatTemperature(x,height,z) < 0.15F) {
                  block=Blocks.ice;
                  blockMeta=0;
                }
 else {
                  block=baseLiquid;
                  blockMeta=0;
                }
              }
              k=l;
              if (height >= 62) {
                blocks[index]=block;
                abyte[index]=blockMeta;
              }
 else               if (height < 56 - l) {
                block=null;
                block1=baseBlock;
                block1Meta=baseMeta;
                blocks[index]=biomegenbase.fillerBlock;
                abyte[index]=(byte)(biomegenbase.field_76754_C & 266);
              }
 else {
                blocks[index]=block1;
                abyte[index]=block1Meta;
              }
            }
 else             if (k > 0) {
              --k;
              blocks[index]=block1;
              abyte[index]=block1Meta;
              if (k == 0 && block1 == Blocks.sand) {
                k=provider.rand.nextInt(4) + Math.max(0,height - 63);
                block1=Blocks.sandstone;
                block1Meta=0;
              }
            }
          }
        }
 else {
          k=-1;
        }
      }
    }
  }
}",0.9124164614843476
166070,"private boolean placeResult(boolean internal,ItemStack result){
  int start;
  int stop;
  if (internal) {
    start=CrafterContainer.SLOT_BUFFER;
    stop=CrafterContainer.SLOT_BUFFER + CrafterContainer.BUFFER_SIZE;
  }
 else {
    start=CrafterContainer.SLOT_BUFFEROUT;
    stop=CrafterContainer.SLOT_BUFFEROUT + CrafterContainer.BUFFEROUT_SIZE;
  }
  return InventoryHelper.mergeItemStack(this,result,start,stop);
}","private boolean placeResult(boolean internal,ItemStack result){
  int start;
  int stop;
  if (internal) {
    start=CrafterContainer.SLOT_BUFFER;
    stop=CrafterContainer.SLOT_BUFFER + CrafterContainer.BUFFER_SIZE;
  }
 else {
    start=CrafterContainer.SLOT_BUFFEROUT;
    stop=CrafterContainer.SLOT_BUFFEROUT + CrafterContainer.BUFFEROUT_SIZE;
  }
  if (!InventoryHelper.checkIfStackCanBeMerged(this,result,start,stop)) {
    return false;
  }
  return InventoryHelper.mergeItemStack(this,result,start,stop);
}",0.8969957081545065
166071,"@Override public void replaceBlocksForBiome(int chunkX,int chunkZ,Block[] aBlock,byte[] abyte,BiomeGenBase[] biomeGenBases){
  ChunkProviderEvent.ReplaceBiomeBlocks event=new ChunkProviderEvent.ReplaceBiomeBlocks(provider,chunkX,chunkZ,aBlock,abyte,biomeGenBases,world);
  MinecraftForge.EVENT_BUS.post(event);
  if (event.getResult() == Event.Result.DENY) {
    return;
  }
  double d0=0.03125D;
  this.stoneNoise=this.noiseGen4.generateNoiseOctaves(this.stoneNoise,(chunkX * 16),(chunkZ * 16),16,16,d0 * 2.0D,d0 * 2.0D,1.0D);
  for (int k=0; k < 16; ++k) {
    for (int l=0; l < 16; ++l) {
      BiomeGenBase biomegenbase=biomeGenBases[l + k * 16];
      genBiomeTerrain(biomegenbase,aBlock,abyte,chunkX * 16 + k,chunkZ * 16 + l,this.stoneNoise[l + k * 16]);
    }
  }
}","@Override public void replaceBlocksForBiome(int chunkX,int chunkZ,Block[] aBlock,byte[] abyte,BiomeGenBase[] biomeGenBases){
  ChunkProviderEvent.ReplaceBiomeBlocks event=new ChunkProviderEvent.ReplaceBiomeBlocks(provider,chunkX,chunkZ,aBlock,abyte,biomeGenBases,world);
  MinecraftForge.EVENT_BUS.post(event);
  if (event.getResult() == Event.Result.DENY) {
    for (int cx=0; cx < 16; ++cx) {
      for (int cz=0; cz < 16; ++cz) {
        int bottomIndex=((cz * 16) + cx) * (aBlock.length / 256);
        while (aBlock[bottomIndex] == Blocks.bedrock) {
          aBlock[bottomIndex++]=null;
        }
      }
    }
    return;
  }
  double d0=0.03125D;
  this.stoneNoise=this.noiseGen4.generateNoiseOctaves(this.stoneNoise,(chunkX * 16),(chunkZ * 16),16,16,d0 * 2.0D,d0 * 2.0D,1.0D);
  for (int k=0; k < 16; ++k) {
    for (int l=0; l < 16; ++l) {
      BiomeGenBase biomegenbase=biomeGenBases[l + k * 16];
      genBiomeTerrain(biomegenbase,aBlock,abyte,chunkX * 16 + k,chunkZ * 16 + l,this.stoneNoise[l + k * 16]);
    }
  }
}",0.8568257491675916
166072,"public DimensionInformation(String name,DimensionDescriptor descriptor,ByteBuf buf){
  this.name=name;
  this.descriptor=descriptor;
  terrainType=ByteBufTools.readEnum(buf,TerrainType.values());
  ByteBufTools.readEnumCollection(buf,featureTypes,FeatureType.values());
  ByteBufTools.readEnumCollection(buf,structureTypes,StructureType.values());
  ByteBufTools.readEnumCollection(buf,effectTypes,EffectType.values());
  biomes.clear();
  int size=buf.readInt();
  for (int i=0; i < size; i++) {
    biomes.add(BiomeGenBase.getBiome(buf.readInt()));
  }
  controllerType=ByteBufTools.readEnum(buf,ControllerType.values());
  digitString=ByteBufTools.readString(buf);
  Block block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  int meta=buf.readInt();
  baseBlockForTerrain=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  tendrilBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  sphereBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  liquidSphereBlock=new BlockMeta(block,meta);
  liquidSphereFluid=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  canyonBlock=new BlockMeta(block,meta);
  fluidForTerrain=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  size=buf.readInt();
  List<BlockMeta> blocksMeta=new ArrayList<BlockMeta>();
  for (int i=0; i < size; i++) {
    Block b=(Block)Block.blockRegistry.getObjectById(buf.readInt());
    int m=buf.readInt();
    blocksMeta.add(new BlockMeta(b,m));
  }
  extraOregen=blocksMeta.toArray(new BlockMeta[blocksMeta.size()]);
  List<Block> blocks=new ArrayList<Block>();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    blocks.add((Block)Block.blockRegistry.getObjectById(buf.readInt()));
  }
  fluidsForLakes=blocks.toArray(new Block[blocks.size()]);
  peaceful=buf.readBoolean();
  celestialAngle=ByteBufTools.readFloat(buf);
  timeSpeed=ByteBufTools.readFloat(buf);
  probeCounter=buf.readInt();
  actualRfCost=buf.readInt();
  skyDescriptor=new SkyDescriptor.Builder().fromBytes(buf).build();
  calculateCelestialBodyDescriptors();
  extraMobs.clear();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    String className=ByteBufTools.readString(buf);
    try {
      Class<? extends EntityLiving> c=(Class<? extends EntityLiving>)Class.forName(className);
      int chance=buf.readInt();
      int minGroup=buf.readInt();
      int maxGroup=buf.readInt();
      int maxLoaded=buf.readInt();
      MobDescriptor mob=new MobDescriptor(c,chance,minGroup,maxGroup,maxLoaded);
      extraMobs.add(mob);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
  }
  setupBiomeMapping();
}","public DimensionInformation(String name,DimensionDescriptor descriptor,ByteBuf buf){
  this.name=name;
  this.descriptor=descriptor;
  terrainType=ByteBufTools.readEnum(buf,TerrainType.values());
  ByteBufTools.readEnumCollection(buf,featureTypes,FeatureType.values());
  ByteBufTools.readEnumCollection(buf,structureTypes,StructureType.values());
  ByteBufTools.readEnumCollection(buf,effectTypes,EffectType.values());
  biomes.clear();
  int size=buf.readInt();
  for (int i=0; i < size; i++) {
    biomes.add(BiomeGenBase.getBiome(buf.readInt()));
  }
  controllerType=ByteBufTools.readEnum(buf,ControllerType.values());
  digitString=ByteBufTools.readString(buf);
  Block block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  int meta=buf.readInt();
  baseBlockForTerrain=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  tendrilBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  sphereBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  liquidSphereBlock=new BlockMeta(block,meta);
  liquidSphereFluid=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  canyonBlock=new BlockMeta(block,meta);
  fluidForTerrain=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  size=buf.readInt();
  List<BlockMeta> blocksMeta=new ArrayList<BlockMeta>();
  for (int i=0; i < size; i++) {
    Block b=(Block)Block.blockRegistry.getObjectById(buf.readInt());
    int m=buf.readInt();
    blocksMeta.add(new BlockMeta(b,m));
  }
  extraOregen=blocksMeta.toArray(new BlockMeta[blocksMeta.size()]);
  List<Block> blocks=new ArrayList<Block>();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    blocks.add((Block)Block.blockRegistry.getObjectById(buf.readInt()));
  }
  fluidsForLakes=blocks.toArray(new Block[blocks.size()]);
  peaceful=buf.readBoolean();
  celestialAngle=ByteBufTools.readFloat(buf);
  timeSpeed=ByteBufTools.readFloat(buf);
  probeCounter=buf.readInt();
  actualRfCost=buf.readInt();
  skyDescriptor=new SkyDescriptor.Builder().fromBytes(buf).build();
  calculateCelestialBodyDescriptors();
  extraMobs.clear();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    String className=ByteBufTools.readString(buf);
    try {
      Class<? extends EntityLiving> c=(Class<? extends EntityLiving>)Class.forName(className);
      int chance=buf.readInt();
      int minGroup=buf.readInt();
      int maxGroup=buf.readInt();
      int maxLoaded=buf.readInt();
      MobDescriptor mob=new MobDescriptor(c,chance,minGroup,maxGroup,maxLoaded);
      extraMobs.add(mob);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  setupBiomeMapping();
}",0.9920935029219664
166073,"private void calculateMobs(List<Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>>> dimlets,Random random){
  dimlets=extractType(DimletType.DIMLET_MOBS,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomExtraMobsChance) {
      int id=DimletRandomizer.getRandomMob(random);
      actualRfCost+=calculateCostFactor(id);
      extraMobs.add(DimletMapping.idtoMob.get(id));
    }
  }
 else   if (dimlets.size() == 1 && DimletMapping.idtoMob.get(dimlets.get(0).getLeft().getId()) == null) {
  }
 else {
    for (    Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>> dimletWithModifiers : dimlets) {
      extraMobs.add(DimletMapping.idtoMob.get(dimletWithModifiers.getLeft().getId()));
    }
  }
}","private void calculateMobs(List<Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>>> dimlets,Random random){
  dimlets=extractType(DimletType.DIMLET_MOBS,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomExtraMobsChance) {
      int id=DimletRandomizer.getRandomMob(random);
      actualRfCost+=calculateCostFactor(id);
      extraMobs.add(DimletMapping.idtoMob.get(id));
    }
  }
 else {
    if (dimlets.size() == 1 && DimletMapping.idtoMob.get(dimlets.get(0).getLeft().getId()).getEntityClass() == null) {
    }
 else {
      for (      Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>> dimletWithModifiers : dimlets) {
        MobDescriptor descriptor=DimletMapping.idtoMob.get(dimletWithModifiers.getLeft().getId());
        if (descriptor.getEntityClass() != null) {
          extraMobs.add(descriptor);
        }
      }
    }
  }
}",0.845150311968236
166074,"public GenericBlock(Material material,Class<? extends TileEntity> tileEntityClass){
  super(material);
  this.tileEntityClass=tileEntityClass;
}","public GenericBlock(Material material,Class<? extends TileEntity> tileEntityClass){
  super(material);
  this.tileEntityClass=tileEntityClass;
  setHardness(2.0f);
  setStepSound(soundTypeMetal);
  setHarvestLevel(""String_Node_Str"",0);
}",0.7559055118110236
166075,"public static int findSuitableEmptySpot(World world,int x,int z){
  int y=world.getTopSolidOrLiquidBlock(x,z);
  if (y == -1) {
    return -1;
  }
  y--;
  Block block=world.getBlock(x,y + 1,z);
  while (block.getMaterial().isLiquid()) {
    y++;
    if (y > world.getHeight() - 10) {
      return -1;
    }
    block=world.getBlock(x,y + 1,z);
  }
  return y;
}","public static int findSuitableEmptySpot(World world,int x,int z){
  int y=world.getTopSolidOrLiquidBlock(x,z);
  if (y == -1) {
    return -1;
  }
  y--;
  if (y > world.getHeight() - 5) {
    y=world.getHeight() / 2;
  }
  Block block=world.getBlock(x,y + 1,z);
  while (block.getMaterial().isLiquid()) {
    y++;
    if (y > world.getHeight() - 10) {
      return -1;
    }
    block=world.getBlock(x,y + 1,z);
  }
  return y;
}",0.914141414141414
166076,"private void calculateFeatureType(List<Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>>> dimlets,Random random){
  dimlets=extractType(DimletType.DIMLET_FEATURE,dimlets);
  if (dimlets.isEmpty()) {
    for (    Map.Entry<Integer,FeatureType> entry : DimletMapping.idToFeatureType.entrySet()) {
      if (random.nextFloat() < DimletConfiguration.randomFeatureChance) {
        actualRfCost+=calculateCostFactor(entry.getKey());
        featureTypes.add(entry.getValue());
        List<DimensionDescriptor.DimletDescriptor> modifiers=Collections.emptyList();
        dimlets.add(Pair.of(new DimensionDescriptor.DimletDescriptor(DimletType.DIMLET_FEATURE,entry.getKey()),modifiers));
      }
    }
  }
  Map<FeatureType,List<DimensionDescriptor.DimletDescriptor>> modifiersForFeature=new HashMap<FeatureType,List<DimensionDescriptor.DimletDescriptor>>();
  for (  Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>> dimlet : dimlets) {
    FeatureType featureType=DimletMapping.idToFeatureType.get(dimlet.getLeft().getId());
    featureTypes.add(featureType);
    modifiersForFeature.put(featureType,dimlet.getRight());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LAKES)) {
    List<Block> blocks=new ArrayList<Block>();
    List<Block> fluids=new ArrayList<Block>();
    getMaterialAndFluidModifiers(modifiersForFeature.get(FeatureType.FEATURE_LAKES),blocks,fluids);
    if (fluids.isEmpty()) {
      while (random.nextFloat() < DimletConfiguration.randomLakeFluidChance) {
        int id=DimletRandomizer.getRandomFluidBlock(random);
        actualRfCost+=calculateCostFactor(id);
        fluids.add(DimletMapping.idToFluid.get(id));
      }
    }
 else     if (fluids.size() == 1 && fluids.get(0) == null) {
      fluids.clear();
    }
    fluidsForLakes=fluids.toArray(new Block[fluids.size()]);
  }
 else {
    fluidsForLakes=new Block[0];
  }
  if (featureTypes.contains(FeatureType.FEATURE_OREGEN)) {
    List<Block> blocks=new ArrayList<Block>();
    List<Block> fluids=new ArrayList<Block>();
    getMaterialAndFluidModifiers(modifiersForFeature.get(FeatureType.FEATURE_OREGEN),blocks,fluids);
    if (blocks.isEmpty()) {
      while (random.nextFloat() < DimletConfiguration.randomOregenMaterialChance) {
        int id=DimletRandomizer.getRandomMaterialBlock(random,true);
        actualRfCost+=calculateCostFactor(id);
        blocks.add(DimletMapping.idToBlock.get(id));
      }
    }
 else     if (blocks.size() == 1 && blocks.get(0) == null) {
      blocks.clear();
    }
    extraOregen=blocks.toArray(new Block[blocks.size()]);
  }
 else {
    extraOregen=new Block[0];
  }
  tendrilBlock=getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_TENDRILS);
  sphereBlock=getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_SPHERES);
  canyonBlock=getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_CANYONS);
}","private void calculateFeatureType(List<Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>>> dimlets,Random random){
  dimlets=extractType(DimletType.DIMLET_FEATURE,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomFeatureChance) {
      int id=DimletRandomizer.getRandomFeature(random,false);
      FeatureType featureType=DimletMapping.idToFeatureType.get(id);
      if (!featureTypes.contains(featureType)) {
        actualRfCost+=calculateCostFactor(id);
        featureTypes.add(featureType);
        List<DimensionDescriptor.DimletDescriptor> modifiers=Collections.emptyList();
        dimlets.add(Pair.of(new DimensionDescriptor.DimletDescriptor(DimletType.DIMLET_FEATURE,id),modifiers));
      }
    }
  }
  Map<FeatureType,List<DimensionDescriptor.DimletDescriptor>> modifiersForFeature=new HashMap<FeatureType,List<DimensionDescriptor.DimletDescriptor>>();
  for (  Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>> dimlet : dimlets) {
    FeatureType featureType=DimletMapping.idToFeatureType.get(dimlet.getLeft().getId());
    featureTypes.add(featureType);
    modifiersForFeature.put(featureType,dimlet.getRight());
  }
  if (featureTypes.contains(FeatureType.FEATURE_LAKES)) {
    List<Block> blocks=new ArrayList<Block>();
    List<Block> fluids=new ArrayList<Block>();
    getMaterialAndFluidModifiers(modifiersForFeature.get(FeatureType.FEATURE_LAKES),blocks,fluids);
    if (fluids.isEmpty()) {
      while (random.nextFloat() < DimletConfiguration.randomLakeFluidChance) {
        int id=DimletRandomizer.getRandomFluidBlock(random);
        actualRfCost+=calculateCostFactor(id);
        fluids.add(DimletMapping.idToFluid.get(id));
      }
    }
 else     if (fluids.size() == 1 && fluids.get(0) == null) {
      fluids.clear();
    }
    fluidsForLakes=fluids.toArray(new Block[fluids.size()]);
  }
 else {
    fluidsForLakes=new Block[0];
  }
  if (featureTypes.contains(FeatureType.FEATURE_OREGEN)) {
    List<Block> blocks=new ArrayList<Block>();
    List<Block> fluids=new ArrayList<Block>();
    getMaterialAndFluidModifiers(modifiersForFeature.get(FeatureType.FEATURE_OREGEN),blocks,fluids);
    if (blocks.isEmpty()) {
      while (random.nextFloat() < DimletConfiguration.randomOregenMaterialChance) {
        int id=DimletRandomizer.getRandomMaterialBlock(random,true);
        actualRfCost+=calculateCostFactor(id);
        blocks.add(DimletMapping.idToBlock.get(id));
      }
    }
 else     if (blocks.size() == 1 && blocks.get(0) == null) {
      blocks.clear();
    }
    extraOregen=blocks.toArray(new Block[blocks.size()]);
  }
 else {
    extraOregen=new Block[0];
  }
  tendrilBlock=getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_TENDRILS);
  sphereBlock=getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_SPHERES);
  canyonBlock=getFeatureBlock(random,modifiersForFeature,FeatureType.FEATURE_CANYONS);
}",0.9324095978371072
166077,"private void calculateEffects(List<Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>>> dimlets,Random random){
  dimlets=extractType(DimletType.DIMLET_EFFECT,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomStructureChance) {
      effectTypes.add(DimletRandomizer.getRandomEffect(random,false));
    }
  }
 else {
    for (    Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>> dimletWithModifier : dimlets) {
      EffectType effectType=DimletMapping.idToEffectType.get(dimletWithModifier.getLeft().getId());
      if (effectType != EffectType.EFFECT_NONE) {
        effectTypes.add(effectType);
      }
    }
  }
}","private void calculateEffects(List<Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>>> dimlets,Random random){
  dimlets=extractType(DimletType.DIMLET_EFFECT,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomEffectChance) {
      int id=DimletRandomizer.getRandomEffect(random,false);
      EffectType effectType=DimletMapping.idToEffectType.get(id);
      if (!effectTypes.contains(effectType)) {
        actualRfCost+=calculateCostFactor(id);
        effectTypes.add(effectType);
      }
    }
  }
 else {
    for (    Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>> dimletWithModifier : dimlets) {
      EffectType effectType=DimletMapping.idToEffectType.get(dimletWithModifier.getLeft().getId());
      if (effectType != EffectType.EFFECT_NONE) {
        effectTypes.add(effectType);
      }
    }
  }
}",0.8528347406513872
166078,"private float calculateCostFactor(int id){
  DimletEntry dimletEntry=KnownDimletConfiguration.idToDimlet.get(id);
  if (dimletEntry == null) {
    RFTools.logError(""String_Node_Str"" + id);
    return 0.0f;
  }
  return dimletEntry.getRfMaintainCost() * DimletConfiguration.afterCreationCostFactor;
}","private int calculateCostFactor(int id){
  DimletEntry dimletEntry=KnownDimletConfiguration.idToDimlet.get(id);
  if (dimletEntry == null) {
    RFTools.logError(""String_Node_Str"" + id);
    return 0;
  }
  return (int)(dimletEntry.getRfMaintainCost() * DimletConfiguration.afterCreationCostFactor);
}",0.9733333333333334
166079,"private void calculateMobs(List<Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>>> dimlets,Random random){
  dimlets=extractType(DimletType.DIMLET_MOBS,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomExtraMobsChance) {
      extraMobs.add(DimletRandomizer.getRandomMob(random));
    }
  }
 else   if (dimlets.size() == 1 && DimletMapping.idtoMob.get(dimlets.get(0).getLeft().getId()) == null) {
  }
 else {
    for (    Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>> dimletWithModifiers : dimlets) {
      extraMobs.add(DimletMapping.idtoMob.get(dimletWithModifiers.getLeft().getId()));
    }
  }
}","private void calculateMobs(List<Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>>> dimlets,Random random){
  dimlets=extractType(DimletType.DIMLET_MOBS,dimlets);
  if (dimlets.isEmpty()) {
    while (random.nextFloat() < DimletConfiguration.randomExtraMobsChance) {
      int id=DimletRandomizer.getRandomMob(random);
      actualRfCost+=calculateCostFactor(id);
      extraMobs.add(DimletMapping.idtoMob.get(id));
    }
  }
 else   if (dimlets.size() == 1 && DimletMapping.idtoMob.get(dimlets.get(0).getLeft().getId()) == null) {
  }
 else {
    for (    Pair<DimensionDescriptor.DimletDescriptor,List<DimensionDescriptor.DimletDescriptor>> dimletWithModifiers : dimlets) {
      extraMobs.add(DimletMapping.idtoMob.get(dimletWithModifiers.getLeft().getId()));
    }
  }
}",0.9064748201438848
166080,"public GenericChunkProvider(World world,long seed){
  this.worldObj=world;
  dimensionInformation=RfToolsDimensionManager.getDimensionManager(world).getDimensionInformation(world.provider.dimensionId);
  this.worldType=world.getWorldInfo().getTerrainType();
  if (dimensionInformation.getTerrainType() == TerrainType.TERRAIN_AMPLIFIED) {
    worldType=WorldType.AMPLIFIED;
  }
 else   if (dimensionInformation.getTerrainType() == TerrainType.TERRAIN_FLAT) {
    worldType=WorldType.FLAT;
  }
  this.rand=new Random((seed + 516) * 314);
  terrainGeneratorMap.get(dimensionInformation.getTerrainType()).setup(world,this);
  extraSpawns=new ArrayList<BiomeGenBase.SpawnListEntry>();
  extraSpawnsMax=new ArrayList<Integer>();
  for (  MobDescriptor mob : dimensionInformation.getExtraMobs()) {
    Class<? extends EntityLiving> entityClass=mob.getEntityClass();
    extraSpawns.add(new BiomeGenBase.SpawnListEntry(entityClass,mob.getSpawnChance(),mob.getMinGroup(),mob.getMaxGroup()));
    extraSpawnsMax.add(mob.getMaxLoaded());
    System.out.println(""String_Node_Str"" + entityClass);
  }
}","public GenericChunkProvider(World world,long seed){
  this.worldObj=world;
  dimensionInformation=RfToolsDimensionManager.getDimensionManager(world).getDimensionInformation(world.provider.dimensionId);
  this.worldType=world.getWorldInfo().getTerrainType();
  if (dimensionInformation.getTerrainType() == TerrainType.TERRAIN_AMPLIFIED) {
    worldType=WorldType.AMPLIFIED;
  }
 else   if (dimensionInformation.getTerrainType() == TerrainType.TERRAIN_FLAT) {
    worldType=WorldType.FLAT;
  }
  this.seed=seed;
  this.rand=new Random((seed + 516) * 314);
  terrainGeneratorMap.get(dimensionInformation.getTerrainType()).setup(world,this);
  extraSpawns=new ArrayList<BiomeGenBase.SpawnListEntry>();
  extraSpawnsMax=new ArrayList<Integer>();
  for (  MobDescriptor mob : dimensionInformation.getExtraMobs()) {
    Class<? extends EntityLiving> entityClass=mob.getEntityClass();
    extraSpawns.add(new BiomeGenBase.SpawnListEntry(entityClass,mob.getSpawnChance(),mob.getMinGroup(),mob.getMaxGroup()));
    extraSpawnsMax.add(mob.getMaxLoaded());
    System.out.println(""String_Node_Str"" + entityClass);
  }
}",0.9918032786885246
166081,"@Override public void generate(int chunkX,int chunkZ,Block[] aBlock){
  Block baseBlock=provider.dimensionInformation.getBaseBlockForTerrain();
  byte waterLevel=63;
  for (int x4=0; x4 < 4; ++x4) {
    for (int z4=0; z4 < 4; ++z4) {
      for (int height=0; height < 256; ++height) {
        for (int x=0; x < 4; ++x) {
          int index=((x + (x4 * 4)) << 12) | ((0 + (z4 * 4)) << 8) | height;
          short maxheight=256;
          index-=maxheight;
          for (int z=0; z < 4; ++z) {
            if (height < waterLevel) {
              aBlock[index+=maxheight]=baseBlock;
            }
 else {
              aBlock[index+=maxheight]=null;
            }
          }
        }
      }
    }
  }
}","@Override public void generate(int chunkX,int chunkZ,Block[] aBlock){
  Block baseBlock=provider.dimensionInformation.getBaseBlockForTerrain();
  byte waterLevel=63;
  boolean elevated=false;
  if (provider.dimensionInformation.hasFeatureType(FeatureType.FEATURE_MAZE)) {
    long s2=((chunkX + provider.seed + 13) * 314) + chunkZ * 17L;
    Random rand=new Random(s2);
    rand.nextFloat();
    elevated=(chunkX & 1) == 0;
    if (rand.nextFloat() < .2f) {
      elevated=!elevated;
    }
    if (elevated) {
      waterLevel=120;
    }
 else {
      waterLevel=40;
    }
  }
  for (int x4=0; x4 < 4; ++x4) {
    for (int z4=0; z4 < 4; ++z4) {
      for (int height=0; height < 256; ++height) {
        for (int x=0; x < 4; ++x) {
          int index=((x + (x4 * 4)) << 12) | ((0 + (z4 * 4)) << 8) | height;
          short maxheight=256;
          index-=maxheight;
          for (int z=0; z < 4; ++z) {
            if (height < waterLevel) {
              aBlock[index+=maxheight]=baseBlock;
            }
 else {
              aBlock[index+=maxheight]=null;
            }
          }
        }
      }
    }
  }
}",0.7745474492594624
166082,"private void func_147423_a(int chunkX4,int chunkY4,int chunkZ4){
  double d0=684.412D;
  double d1=684.412D;
  double d2=512.0D;
  double d3=512.0D;
  this.field_147426_g=this.noiseGen6.generateNoiseOctaves(this.field_147426_g,chunkX4,chunkZ4,5,5,200.0D,200.0D,0.5D);
  this.field_147427_d=this.noiseGen3.generateNoiseOctaves(this.field_147427_d,chunkX4,chunkY4,chunkZ4,5,33,5,8.555150000000001D,4.277575000000001D,8.555150000000001D);
  this.field_147428_e=this.noiseGen1.generateNoiseOctaves(this.field_147428_e,chunkX4,chunkY4,chunkZ4,5,33,5,684.412D,684.412D,684.412D);
  this.field_147425_f=this.noiseGen2.generateNoiseOctaves(this.field_147425_f,chunkX4,chunkY4,chunkZ4,5,33,5,684.412D,684.412D,684.412D);
  boolean flag1=false;
  boolean flag=false;
  int l=0;
  int i1=0;
  double d4=8.5D;
  for (int j1=0; j1 < 5; ++j1) {
    for (int k1=0; k1 < 5; ++k1) {
      float f=0.0F;
      float f1=0.0F;
      float f2=0.0F;
      byte b0=2;
      BiomeGenBase biomegenbase=provider.biomesForGeneration[j1 + 2 + (k1 + 2) * 10];
      for (int l1=-b0; l1 <= b0; ++l1) {
        for (int i2=-b0; i2 <= b0; ++i2) {
          BiomeGenBase biomegenbase1=provider.biomesForGeneration[j1 + l1 + 2+ (k1 + i2 + 2) * 10];
          float f3=biomegenbase1.rootHeight;
          float f4=biomegenbase1.heightVariation;
          if (provider.worldType == WorldType.AMPLIFIED && f3 > 0.0F) {
            f3=1.0F + f3 * 2.0F;
            f4=1.0F + f4 * 4.0F;
          }
          float f5=parabolicField[l1 + 2 + (i2 + 2) * 5] / (f3 + 2.0F);
          if (biomegenbase1.rootHeight > biomegenbase.rootHeight) {
            f5/=2.0F;
          }
          f+=f4 * f5;
          f1+=f3 * f5;
          f2+=f5;
        }
      }
      f/=f2;
      f1/=f2;
      f=f * 0.9F + 0.1F;
      f1=(f1 * 4.0F - 1.0F) / 8.0F;
      double d12=this.field_147426_g[i1] / 8000.0D;
      if (d12 < 0.0D) {
        d12=-d12 * 0.3D;
      }
      d12=d12 * 3.0D - 2.0D;
      if (d12 < 0.0D) {
        d12/=2.0D;
        if (d12 < -1.0D) {
          d12=-1.0D;
        }
        d12/=1.4D;
        d12/=2.0D;
      }
 else {
        if (d12 > 1.0D) {
          d12=1.0D;
        }
        d12/=8.0D;
      }
      ++i1;
      double d13=(double)f1;
      double d14=(double)f;
      d13+=d12 * 0.2D;
      d13=d13 * 8.5D / 8.0D;
      double d5=8.5D + d13 * 4.0D;
      for (int j2=0; j2 < 33; ++j2) {
        double d6=((double)j2 - d5) * 12.0D * 128.0D / 256.0D / d14;
        if (d6 < 0.0D) {
          d6*=4.0D;
        }
        double d7=this.field_147428_e[l] / 512.0D;
        double d8=this.field_147425_f[l] / 512.0D;
        double d9=(this.field_147427_d[l] / 10.0D + 1.0D) / 2.0D;
        double d10=MathHelper.denormalizeClamp(d7,d8,d9) - d6;
        if (j2 > 29) {
          double d11=(double)((float)(j2 - 29) / 3.0F);
          d10=d10 * (1.0D - d11) + -10.0D * d11;
        }
        this.field_147434_q[l]=d10;
        ++l;
      }
    }
  }
}","private void func_147423_a(int chunkX4,int chunkY4,int chunkZ4){
  double d0=684.412D;
  double d1=684.412D;
  double d2=512.0D;
  double d3=512.0D;
  this.field_147426_g=this.noiseGen6.generateNoiseOctaves(this.field_147426_g,chunkX4,chunkZ4,5,5,200.0D,200.0D,0.5D);
  this.field_147427_d=this.noiseGen3.generateNoiseOctaves(this.field_147427_d,chunkX4,chunkY4,chunkZ4,5,33,5,8.555150000000001D,4.277575000000001D,8.555150000000001D);
  this.field_147428_e=this.noiseGen1.generateNoiseOctaves(this.field_147428_e,chunkX4,chunkY4,chunkZ4,5,33,5,684.412D,684.412D,684.412D);
  this.field_147425_f=this.noiseGen2.generateNoiseOctaves(this.field_147425_f,chunkX4,chunkY4,chunkZ4,5,33,5,684.412D,684.412D,684.412D);
  boolean flag1=false;
  boolean flag=false;
  int l=0;
  int i1=0;
  double d4=8.5D;
  boolean domaze=false;
  boolean elevated=false;
  if (provider.dimensionInformation.hasFeatureType(FeatureType.FEATURE_MAZE)) {
    domaze=true;
    long s2=(((chunkX4 >> 2) + provider.seed + 13) * 314) + (chunkZ4 >> 2) * 17L;
    Random rand=new Random(s2);
    rand.nextFloat();
    elevated=((chunkX4 >> 2) & 1) == 0;
    if (rand.nextFloat() < .2f) {
      elevated=!elevated;
    }
  }
  for (int j1=0; j1 < 5; ++j1) {
    for (int k1=0; k1 < 5; ++k1) {
      float f=0.0F;
      float f1=0.0F;
      float f2=0.0F;
      byte b0=2;
      BiomeGenBase biomegenbase=provider.biomesForGeneration[j1 + 2 + (k1 + 2) * 10];
      for (int l1=-b0; l1 <= b0; ++l1) {
        for (int i2=-b0; i2 <= b0; ++i2) {
          BiomeGenBase biomegenbase1=provider.biomesForGeneration[j1 + l1 + 2+ (k1 + i2 + 2) * 10];
          float f3=biomegenbase1.rootHeight;
          float f4=biomegenbase1.heightVariation;
          if (domaze) {
            if (f3 > 0.0F && elevated) {
              if (provider.worldType == WorldType.AMPLIFIED) {
                f3=2.0F + f3 * 1.5f;
                f4=1.0F + f4 * 3.0f;
              }
 else {
                f3=2.0F + f3;
                f4=0.5F + f4 * 1.5f;
              }
            }
 else {
              if (provider.worldType == WorldType.AMPLIFIED && f3 > 0.0f) {
                f3=0.5F + f3 * 1.5F;
                f4=0.5F + f4 * 2.0F;
              }
 else {
                f4=f4 * 0.5F;
              }
            }
          }
 else {
            if (provider.worldType == WorldType.AMPLIFIED && f3 > 0.0F) {
              f3=1.0F + f3 * 2.0F;
              f4=1.0F + f4 * 4.0F;
            }
          }
          float f5=parabolicField[l1 + 2 + (i2 + 2) * 5] / (f3 + 2.0F);
          if (biomegenbase1.rootHeight > biomegenbase.rootHeight) {
            f5/=2.0F;
          }
          f+=f4 * f5;
          f1+=f3 * f5;
          f2+=f5;
        }
      }
      f/=f2;
      f1/=f2;
      f=f * 0.9F + 0.1F;
      f1=(f1 * 4.0F - 1.0F) / 8.0F;
      double d12=this.field_147426_g[i1] / 8000.0D;
      if (d12 < 0.0D) {
        d12=-d12 * 0.3D;
      }
      d12=d12 * 3.0D - 2.0D;
      if (d12 < 0.0D) {
        d12/=2.0D;
        if (d12 < -1.0D) {
          d12=-1.0D;
        }
        d12/=1.4D;
        d12/=2.0D;
      }
 else {
        if (d12 > 1.0D) {
          d12=1.0D;
        }
        d12/=8.0D;
      }
      ++i1;
      double d13=(double)f1;
      double d14=(double)f;
      d13+=d12 * 0.2D;
      d13=d13 * 8.5D / 8.0D;
      double d5=8.5D + d13 * 4.0D;
      for (int j2=0; j2 < 33; ++j2) {
        double d6=((double)j2 - d5) * 12.0D * 128.0D / 256.0D / d14;
        if (d6 < 0.0D) {
          d6*=4.0D;
        }
        double d7=this.field_147428_e[l] / 512.0D;
        double d8=this.field_147425_f[l] / 512.0D;
        double d9=(this.field_147427_d[l] / 10.0D + 1.0D) / 2.0D;
        double d10=MathHelper.denormalizeClamp(d7,d8,d9) - d6;
        if (j2 > 29) {
          double d11=(double)((float)(j2 - 29) / 3.0F);
          d10=d10 * (1.0D - d11) + -10.0D * d11;
        }
        this.field_147434_q[l]=d10;
        ++l;
      }
    }
  }
}",0.853189630061171
166083,"static void setupWeightedRandomList(Configuration cfg){
  float rarity0=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble();
  float rarity1=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble();
  float rarity2=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble();
  float rarity3=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble();
  float rarity4=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble();
  float rarity5=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble();
  randomDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomMobDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMobDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomEffectDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomEffectDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  for (  Map.Entry<Integer,DimletEntry> entry : KnownDimletConfiguration.idToDimlet.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    if (entry.getValue().getKey().getType() == DimletType.DIMLET_MATERIAL) {
      if (DimletMapping.idToBlock.get(entry.getKey()) != null) {
        randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_LIQUID) {
      if (DimletMapping.idToFluid.get(entry.getKey()) != null) {
        randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_MOBS) {
      if (DimletMapping.idtoMob.get(entry.getKey()) != null) {
        randomMobDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_EFFECT) {
      if (DimletMapping.idToEffectType.get(entry.getKey()) != EffectType.EFFECT_NONE) {
        randomEffectDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
  }
}","static void setupWeightedRandomList(Configuration cfg){
  float rarity0=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble();
  float rarity1=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble();
  float rarity2=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble();
  float rarity3=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble();
  float rarity4=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble();
  float rarity5=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble();
  randomDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomMobDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMobDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomEffectDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomEffectDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomFeatureDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomFeatureDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  for (  Map.Entry<Integer,DimletEntry> entry : KnownDimletConfiguration.idToDimlet.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    if (entry.getValue().getKey().getType() == DimletType.DIMLET_MATERIAL) {
      if (DimletMapping.idToBlock.get(entry.getKey()) != null) {
        randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_LIQUID) {
      if (DimletMapping.idToFluid.get(entry.getKey()) != null) {
        randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_MOBS) {
      if (DimletMapping.idtoMob.get(entry.getKey()) != null) {
        randomMobDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_EFFECT) {
      if (DimletMapping.idToEffectType.get(entry.getKey()) != EffectType.EFFECT_NONE) {
        randomEffectDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_FEATURE) {
      if (DimletMapping.idToFeatureType.get(entry.getKey()) != FeatureType.FEATURE_NONE) {
        randomFeatureDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
  }
}",0.9251101321585904
166084,"public static MobDescriptor getRandomMob(Random random){
  return DimletMapping.idtoMob.get(randomMobDimlets.select(random));
}","public static int getRandomMob(Random random){
  return randomMobDimlets.select(random);
}",0.8202764976958525
166085,"public static EffectType getRandomEffect(Random random,boolean allowRandom){
  Integer id=randomEffectDimlets.select(random);
  while ((!allowRandom) && KnownDimletConfiguration.idToDimlet.get(id).isRandomNotAllowed()) {
    id=randomEffectDimlets.select(random);
  }
  return DimletMapping.idToEffectType.get(id);
}","public static int getRandomEffect(Random random,boolean allowRandom){
  Integer id=randomEffectDimlets.select(random);
  while ((!allowRandom) && KnownDimletConfiguration.idToDimlet.get(id).isRandomNotAllowed()) {
    id=randomEffectDimlets.select(random);
  }
  return id;
}",0.9137055837563453
166086,"/** 
 * This initializes all dimlets based on all loaded mods. This should be called from postInit.
 */
public static void init(Configuration cfg){
  readBuiltinConfig();
  Map<DimletKey,Integer> idsInConfig=getDimletsFromConfig(cfg);
  initBiomeItems(cfg,idsInConfig);
  int idDigit0=initDigitItem(cfg,idsInConfig,0);
  int idDigit1=initDigitItem(cfg,idsInConfig,1);
  int idDigit2=initDigitItem(cfg,idsInConfig,2);
  int idDigit3=initDigitItem(cfg,idsInConfig,3);
  int idDigit4=initDigitItem(cfg,idsInConfig,4);
  int idDigit5=initDigitItem(cfg,idsInConfig,5);
  int idDigit6=initDigitItem(cfg,idsInConfig,6);
  int idDigit7=initDigitItem(cfg,idsInConfig,7);
  int idDigit8=initDigitItem(cfg,idsInConfig,8);
  int idDigit9=initDigitItem(cfg,idsInConfig,9);
  int idMaterialNone=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_MATERIAL,""String_Node_Str""));
  idToDisplayName.put(idMaterialNone,DimletType.DIMLET_MATERIAL.getName() + ""String_Node_Str"");
  DimletMapping.idToBlock.put(idMaterialNone,null);
  initMaterialItem(cfg,idsInConfig,Blocks.diamond_block);
  initMaterialItem(cfg,idsInConfig,Blocks.diamond_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.emerald_block);
  initMaterialItem(cfg,idsInConfig,Blocks.emerald_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.quartz_block);
  initMaterialItem(cfg,idsInConfig,Blocks.quartz_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.gold_block);
  initMaterialItem(cfg,idsInConfig,Blocks.gold_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.iron_block);
  initMaterialItem(cfg,idsInConfig,Blocks.iron_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.coal_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.lapis_block);
  initMaterialItem(cfg,idsInConfig,Blocks.lapis_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.coal_block);
  initMaterialItem(cfg,idsInConfig,Blocks.redstone_block);
  initMaterialItem(cfg,idsInConfig,Blocks.redstone_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.dirt);
  initMaterialItem(cfg,idsInConfig,Blocks.sandstone);
  initMaterialItem(cfg,idsInConfig,Blocks.end_stone);
  initMaterialItem(cfg,idsInConfig,Blocks.netherrack);
  initMaterialItem(cfg,idsInConfig,Blocks.cobblestone);
  initMaterialItem(cfg,idsInConfig,Blocks.obsidian);
  initMaterialItem(cfg,idsInConfig,Blocks.soul_sand);
  initMaterialItem(cfg,idsInConfig,Blocks.glass);
  initMaterialItem(cfg,idsInConfig,Blocks.stained_glass);
  initMaterialItem(cfg,idsInConfig,ModBlocks.dimensionalShardBlock);
  initFoliageItem(cfg,idsInConfig);
  int idLiquidNone=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_LIQUID,""String_Node_Str""));
  DimletMapping.idToFluid.put(idLiquidNone,null);
  idToDisplayName.put(idLiquidNone,DimletType.DIMLET_LIQUID.getName() + ""String_Node_Str"");
  initLiquidItems(cfg,idsInConfig);
  initSpecialItem(cfg,idsInConfig,""String_Node_Str"",SpecialType.SPECIAL_PEACEFUL);
  initSpecialItem(cfg,idsInConfig,""String_Node_Str"",SpecialType.SPECIAL_EFFICIENCY);
  int idDefaultMobs=initMobItem(cfg,idsInConfig,null,""String_Node_Str"",1,1,1,1);
  initMobItem(cfg,idsInConfig,EntityZombie.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntitySkeleton.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntityEnderman.class,""String_Node_Str"",20,2,4,20);
  initMobItem(cfg,idsInConfig,EntityBlaze.class,""String_Node_Str"",20,2,4,20);
  initMobItem(cfg,idsInConfig,EntityCreeper.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntityCaveSpider.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntityGhast.class,""String_Node_Str"",20,2,4,20);
  initMobItem(cfg,idsInConfig,EntityIronGolem.class,""String_Node_Str"",20,1,2,6);
  initMobItem(cfg,idsInConfig,EntityMagmaCube.class,""String_Node_Str"",50,2,4,30);
  initMobItem(cfg,idsInConfig,EntityPigZombie.class,""String_Node_Str"",20,2,4,10);
  initMobItem(cfg,idsInConfig,EntitySlime.class,""String_Node_Str"",50,2,4,30);
  initMobItem(cfg,idsInConfig,EntitySnowman.class,""String_Node_Str"",50,2,4,30);
  initMobItem(cfg,idsInConfig,EntitySpider.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntityWitch.class,""String_Node_Str"",10,1,1,20);
  initMobItem(cfg,idsInConfig,EntityBat.class,""String_Node_Str"",10,8,8,20);
  initMobItem(cfg,idsInConfig,EntityChicken.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityCow.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityHorse.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityMooshroom.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityOcelot.class,""String_Node_Str"",5,2,3,20);
  initMobItem(cfg,idsInConfig,EntityPig.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntitySheep.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntitySquid.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityWolf.class,""String_Node_Str"",10,3,4,20);
  int idNormalDay=initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(1.0f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(1.5f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(0.4f).skyColorFactor(0.6f,0.6f,0.6f).build());
  int idNormalNight=initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(1.0f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(1.5f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(0.4f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.2f,0.2f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,1.0f,0.2f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,0.2f,1.0f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,1.0f,0.2f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,1.0f,1.0f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.2f,1.0f).build());
  int idStructureNone=initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_NONE);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_VILLAGE);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_STRONGHOLD);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_DUNGEON);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_FORTRESS);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_MINESHAFT);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_SCATTERED);
  int idTerrainVoid=initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_VOID);
  int idTerrainFlat=initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_FLAT);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_AMPLIFIED);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_NORMAL);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_CAVES);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_ISLAND);
  int idFeatureNone=initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_NONE);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_CAVES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_RAVINES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_SPHERES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_OREGEN);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_LAKES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_TENDRILS);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_CANYONS);
  int idEffectNone=initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_NONE);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_POISON);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_POISON2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_POISON3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_REGENERATION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_REGENERATION2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_REGENERATION3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN4);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESPEED);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESPEED2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESPEED3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN4);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSPEED);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSPEED2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSPEED3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_INSTANTHEALTH);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HARM);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_JUMP);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_JUMP2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_JUMP3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_CONFUSION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_RESISTANCE);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_RESISTANCE2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_RESISTANCE3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_FIRERESISTANCE);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WATERBREATHING);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_INVISIBILITY);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_BLINDNESS);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_NIGHTVISION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HUNGER);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HUNGER2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HUNGER3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WEAKNESS);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WEAKNESS2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WEAKNESS3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WITHER);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WITHER2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WITHER3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_ABSORPTION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_ABSORPTION2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_ABSORPTION3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_SATURATION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_SATURATION2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_SATURATION3);
  int idNormalTime=initTimeItem(cfg,idsInConfig,""String_Node_Str"",null,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",0.0f,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",0.5f,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",0.2f,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",0.75f,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",null,2.0f);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",null,0.5f);
  ModItems.knownDimlet=new KnownDimlet();
  ModItems.knownDimlet.setUnlocalizedName(""String_Node_Str"");
  ModItems.knownDimlet.setCreativeTab(RFTools.tabRfToolsDimlets);
  GameRegistry.registerItem(ModItems.knownDimlet,""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(ModItems.dimletTemplate),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',ModItems.dimensionalShard,'p',Items.paper);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idEffectNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.apple,'p',Items.paper);
  craftableDimlets.add(idEffectNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idFeatureNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.string,'p',Items.paper);
  craftableDimlets.add(idFeatureNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idStructureNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.bone,'p',Items.paper);
  craftableDimlets.add(idStructureNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idTerrainVoid),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.brick,'p',Items.paper);
  craftableDimlets.add(idTerrainVoid);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idTerrainFlat),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.brick,'p',ModItems.dimletTemplate);
  craftableDimlets.add(idTerrainFlat);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idMaterialNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Blocks.dirt,'p',Items.paper);
  craftableDimlets.add(idMaterialNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idLiquidNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.bucket,'p',Items.paper);
  craftableDimlets.add(idLiquidNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idNormalDay),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.glowstone_dust,'p',ModItems.dimletTemplate);
  craftableDimlets.add(idNormalDay);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idNormalNight),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.coal,'p',Items.paper);
  craftableDimlets.add(idNormalNight);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDefaultMobs),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.rotten_flesh,'p',ModItems.dimletTemplate);
  craftableDimlets.add(idDefaultMobs);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idNormalTime),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.clock,'p',ModItems.dimletTemplate);
  craftableDimlets.add(idNormalTime);
  Object redstoneTorch=Item.itemRegistry.getObject(""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'t',redstoneTorch,'p',Items.paper);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'9',new ItemStack(ModItems.knownDimlet,1,idDigit9));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'0',new ItemStack(ModItems.knownDimlet,1,idDigit0));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(ModItems.knownDimlet,1,idDigit1));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'2',new ItemStack(ModItems.knownDimlet,1,idDigit2));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'3',new ItemStack(ModItems.knownDimlet,1,idDigit3));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'4',new ItemStack(ModItems.knownDimlet,1,idDigit4));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit6),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'5',new ItemStack(ModItems.knownDimlet,1,idDigit5));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit7),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'6',new ItemStack(ModItems.knownDimlet,1,idDigit6));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'7',new ItemStack(ModItems.knownDimlet,1,idDigit7));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit9),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'8',new ItemStack(ModItems.knownDimlet,1,idDigit8));
  craftableDimlets.add(idDigit0);
  craftableDimlets.add(idDigit1);
  craftableDimlets.add(idDigit2);
  craftableDimlets.add(idDigit3);
  craftableDimlets.add(idDigit4);
  craftableDimlets.add(idDigit5);
  craftableDimlets.add(idDigit6);
  craftableDimlets.add(idDigit7);
  craftableDimlets.add(idDigit8);
  craftableDimlets.add(idDigit9);
  DimletRandomizer.setupWeightedRandomList(cfg);
  setupChestLoot();
}","/** 
 * This initializes all dimlets based on all loaded mods. This should be called from postInit.
 */
public static void init(Configuration cfg){
  readBuiltinConfig();
  Map<DimletKey,Integer> idsInConfig=getDimletsFromConfig(cfg);
  initBiomeItems(cfg,idsInConfig);
  int idDigit0=initDigitItem(cfg,idsInConfig,0);
  int idDigit1=initDigitItem(cfg,idsInConfig,1);
  int idDigit2=initDigitItem(cfg,idsInConfig,2);
  int idDigit3=initDigitItem(cfg,idsInConfig,3);
  int idDigit4=initDigitItem(cfg,idsInConfig,4);
  int idDigit5=initDigitItem(cfg,idsInConfig,5);
  int idDigit6=initDigitItem(cfg,idsInConfig,6);
  int idDigit7=initDigitItem(cfg,idsInConfig,7);
  int idDigit8=initDigitItem(cfg,idsInConfig,8);
  int idDigit9=initDigitItem(cfg,idsInConfig,9);
  int idMaterialNone=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_MATERIAL,""String_Node_Str""));
  idToDisplayName.put(idMaterialNone,DimletType.DIMLET_MATERIAL.getName() + ""String_Node_Str"");
  DimletMapping.idToBlock.put(idMaterialNone,null);
  initMaterialItem(cfg,idsInConfig,Blocks.diamond_block);
  initMaterialItem(cfg,idsInConfig,Blocks.diamond_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.emerald_block);
  initMaterialItem(cfg,idsInConfig,Blocks.emerald_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.quartz_block);
  initMaterialItem(cfg,idsInConfig,Blocks.quartz_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.gold_block);
  initMaterialItem(cfg,idsInConfig,Blocks.gold_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.iron_block);
  initMaterialItem(cfg,idsInConfig,Blocks.iron_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.coal_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.lapis_block);
  initMaterialItem(cfg,idsInConfig,Blocks.lapis_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.coal_block);
  initMaterialItem(cfg,idsInConfig,Blocks.redstone_block);
  initMaterialItem(cfg,idsInConfig,Blocks.redstone_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.dirt);
  initMaterialItem(cfg,idsInConfig,Blocks.sandstone);
  initMaterialItem(cfg,idsInConfig,Blocks.end_stone);
  initMaterialItem(cfg,idsInConfig,Blocks.netherrack);
  initMaterialItem(cfg,idsInConfig,Blocks.cobblestone);
  initMaterialItem(cfg,idsInConfig,Blocks.obsidian);
  initMaterialItem(cfg,idsInConfig,Blocks.soul_sand);
  initMaterialItem(cfg,idsInConfig,Blocks.glass);
  initMaterialItem(cfg,idsInConfig,Blocks.stained_glass);
  initMaterialItem(cfg,idsInConfig,ModBlocks.dimensionalShardBlock);
  initFoliageItem(cfg,idsInConfig);
  int idLiquidNone=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_LIQUID,""String_Node_Str""));
  DimletMapping.idToFluid.put(idLiquidNone,null);
  idToDisplayName.put(idLiquidNone,DimletType.DIMLET_LIQUID.getName() + ""String_Node_Str"");
  initLiquidItems(cfg,idsInConfig);
  initSpecialItem(cfg,idsInConfig,""String_Node_Str"",SpecialType.SPECIAL_PEACEFUL);
  initSpecialItem(cfg,idsInConfig,""String_Node_Str"",SpecialType.SPECIAL_EFFICIENCY);
  int idDefaultMobs=initMobItem(cfg,idsInConfig,null,""String_Node_Str"",1,1,1,1);
  initMobItem(cfg,idsInConfig,EntityZombie.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntitySkeleton.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntityEnderman.class,""String_Node_Str"",20,2,4,20);
  initMobItem(cfg,idsInConfig,EntityBlaze.class,""String_Node_Str"",20,2,4,20);
  initMobItem(cfg,idsInConfig,EntityCreeper.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntityCaveSpider.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntityGhast.class,""String_Node_Str"",20,2,4,20);
  initMobItem(cfg,idsInConfig,EntityIronGolem.class,""String_Node_Str"",20,1,2,6);
  initMobItem(cfg,idsInConfig,EntityMagmaCube.class,""String_Node_Str"",50,2,4,30);
  initMobItem(cfg,idsInConfig,EntityPigZombie.class,""String_Node_Str"",20,2,4,10);
  initMobItem(cfg,idsInConfig,EntitySlime.class,""String_Node_Str"",50,2,4,30);
  initMobItem(cfg,idsInConfig,EntitySnowman.class,""String_Node_Str"",50,2,4,30);
  initMobItem(cfg,idsInConfig,EntitySpider.class,""String_Node_Str"",100,8,8,60);
  initMobItem(cfg,idsInConfig,EntityWitch.class,""String_Node_Str"",10,1,1,20);
  initMobItem(cfg,idsInConfig,EntityBat.class,""String_Node_Str"",10,8,8,20);
  initMobItem(cfg,idsInConfig,EntityChicken.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityCow.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityHorse.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityMooshroom.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityOcelot.class,""String_Node_Str"",5,2,3,20);
  initMobItem(cfg,idsInConfig,EntityPig.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntitySheep.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntitySquid.class,""String_Node_Str"",10,3,4,40);
  initMobItem(cfg,idsInConfig,EntityWolf.class,""String_Node_Str"",10,3,4,20);
  int idNormalDay=initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(1.0f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(1.5f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(0.4f).skyColorFactor(0.6f,0.6f,0.6f).build());
  int idNormalNight=initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(1.0f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(1.5f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(0.4f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.2f,0.2f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,1.0f,0.2f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,0.2f,1.0f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,1.0f,0.2f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,1.0f,1.0f).build());
  initSkyItem(cfg,idsInConfig,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.2f,1.0f).build());
  int idStructureNone=initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_NONE);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_VILLAGE);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_STRONGHOLD);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_DUNGEON);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_FORTRESS);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_MINESHAFT);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_SCATTERED);
  int idTerrainVoid=initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_VOID);
  int idTerrainFlat=initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_FLAT);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_AMPLIFIED);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_NORMAL);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_CAVES);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_ISLAND);
  int idFeatureNone=initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_NONE);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_CAVES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_RAVINES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_SPHERES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_OREGEN);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_LAKES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_TENDRILS);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_CANYONS);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_MAZE);
  int idEffectNone=initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_NONE);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_POISON);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_POISON2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_POISON3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_REGENERATION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_REGENERATION2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_REGENERATION3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN4);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESPEED);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESPEED2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_MOVESPEED3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN4);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSPEED);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSPEED2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DIGSPEED3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_INSTANTHEALTH);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HARM);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_JUMP);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_JUMP2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_JUMP3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_CONFUSION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_RESISTANCE);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_RESISTANCE2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_RESISTANCE3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_FIRERESISTANCE);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WATERBREATHING);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_INVISIBILITY);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_BLINDNESS);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_NIGHTVISION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HUNGER);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HUNGER2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HUNGER3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WEAKNESS);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WEAKNESS2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WEAKNESS3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WITHER);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WITHER2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_WITHER3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_ABSORPTION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_ABSORPTION2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_ABSORPTION3);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_SATURATION);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_SATURATION2);
  initEffectItem(cfg,idsInConfig,""String_Node_Str"",EffectType.EFFECT_SATURATION3);
  int idNormalTime=initTimeItem(cfg,idsInConfig,""String_Node_Str"",null,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",0.0f,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",0.5f,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",0.2f,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",0.75f,null);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",null,2.0f);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"",null,0.5f);
  ModItems.knownDimlet=new KnownDimlet();
  ModItems.knownDimlet.setUnlocalizedName(""String_Node_Str"");
  ModItems.knownDimlet.setCreativeTab(RFTools.tabRfToolsDimlets);
  GameRegistry.registerItem(ModItems.knownDimlet,""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(ModItems.dimletTemplate),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',ModItems.dimensionalShard,'p',Items.paper);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idEffectNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.apple,'p',Items.paper);
  craftableDimlets.add(idEffectNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idFeatureNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.string,'p',Items.paper);
  craftableDimlets.add(idFeatureNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idStructureNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.bone,'p',Items.paper);
  craftableDimlets.add(idStructureNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idTerrainVoid),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.brick,'p',Items.paper);
  craftableDimlets.add(idTerrainVoid);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idTerrainFlat),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.brick,'p',ModItems.dimletTemplate);
  craftableDimlets.add(idTerrainFlat);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idMaterialNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Blocks.dirt,'p',Items.paper);
  craftableDimlets.add(idMaterialNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idLiquidNone),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.bucket,'p',Items.paper);
  craftableDimlets.add(idLiquidNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idNormalDay),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.glowstone_dust,'p',ModItems.dimletTemplate);
  craftableDimlets.add(idNormalDay);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idNormalNight),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.coal,'p',Items.paper);
  craftableDimlets.add(idNormalNight);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDefaultMobs),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.rotten_flesh,'p',ModItems.dimletTemplate);
  craftableDimlets.add(idDefaultMobs);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idNormalTime),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.clock,'p',ModItems.dimletTemplate);
  craftableDimlets.add(idNormalTime);
  Object redstoneTorch=Item.itemRegistry.getObject(""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'t',redstoneTorch,'p',Items.paper);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'9',new ItemStack(ModItems.knownDimlet,1,idDigit9));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'0',new ItemStack(ModItems.knownDimlet,1,idDigit0));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'1',new ItemStack(ModItems.knownDimlet,1,idDigit1));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'2',new ItemStack(ModItems.knownDimlet,1,idDigit2));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'3',new ItemStack(ModItems.knownDimlet,1,idDigit3));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'4',new ItemStack(ModItems.knownDimlet,1,idDigit4));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit6),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'5',new ItemStack(ModItems.knownDimlet,1,idDigit5));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit7),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'6',new ItemStack(ModItems.knownDimlet,1,idDigit6));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'7',new ItemStack(ModItems.knownDimlet,1,idDigit7));
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idDigit9),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'8',new ItemStack(ModItems.knownDimlet,1,idDigit8));
  craftableDimlets.add(idDigit0);
  craftableDimlets.add(idDigit1);
  craftableDimlets.add(idDigit2);
  craftableDimlets.add(idDigit3);
  craftableDimlets.add(idDigit4);
  craftableDimlets.add(idDigit5);
  craftableDimlets.add(idDigit6);
  craftableDimlets.add(idDigit7);
  craftableDimlets.add(idDigit8);
  craftableDimlets.add(idDigit9);
  DimletRandomizer.setupWeightedRandomList(cfg);
  setupChestLoot();
}",0.9978833427109288
166087,"@Override public boolean execute(String command,Map<String,Argument> args){
  boolean rc=super.execute(command,args);
  if (rc) {
    return true;
  }
  if (CMD_SETMODE.equals(command)) {
    Integer index=args.get(""String_Node_Str"").getInteger();
    Integer input=args.get(""String_Node_Str"").getInteger();
    inputMode[index]=(byte)(int)input;
    markDirty();
    return true;
  }
  return false;
}","@Override public boolean execute(String command,Map<String,Argument> args){
  boolean rc=super.execute(command,args);
  if (rc) {
    return true;
  }
  if (CMD_SETMODE.equals(command)) {
    Integer index=args.get(""String_Node_Str"").getInteger();
    Integer input=args.get(""String_Node_Str"").getInteger();
    inputMode[index]=(byte)(int)input;
    markDirty();
    worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    return true;
  }
  return false;
}",0.9359720605355064
166088,"private void injectMobDimlet(int id){
  addToCost(id);
  extraMobs.add(DimletMapping.idtoMob.get(id));
}","private void injectMobDimlet(int id){
  addToCost(id);
  MobDescriptor mobDescriptor=DimletMapping.idtoMob.get(id);
  if (mobDescriptor != null && mobDescriptor.getEntityClass() != null) {
    extraMobs.add(mobDescriptor);
  }
}",0.4518072289156626
166089,"public void toBytes(ByteBuf buf){
  ByteBufTools.writeEnum(buf,terrainType,TerrainType.TERRAIN_VOID);
  ByteBufTools.writeEnumCollection(buf,featureTypes);
  ByteBufTools.writeEnumCollection(buf,structureTypes);
  ByteBufTools.writeEnumCollection(buf,effectTypes);
  buf.writeInt(biomes.size());
  for (  BiomeGenBase entry : biomes) {
    buf.writeInt(entry.biomeID);
  }
  ByteBufTools.writeString(buf,digitString);
  buf.writeInt(Block.blockRegistry.getIDForObject(baseBlockForTerrain));
  buf.writeInt(Block.blockRegistry.getIDForObject(tendrilBlock));
  buf.writeInt(Block.blockRegistry.getIDForObject(sphereBlock));
  buf.writeInt(Block.blockRegistry.getIDForObject(canyonBlock));
  buf.writeInt(Block.blockRegistry.getIDForObject(fluidForTerrain));
  buf.writeInt(extraOregen.length);
  for (  Block block : extraOregen) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block));
  }
  buf.writeInt(fluidsForLakes.length);
  for (  Block block : fluidsForLakes) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block));
  }
  buf.writeBoolean(peaceful);
  ByteBufTools.writeFloat(buf,celestialAngle);
  ByteBufTools.writeFloat(buf,timeSpeed);
  buf.writeInt(probeCounter);
  buf.writeInt(actualRfCost);
  skyDescriptor.toBytes(buf);
  buf.writeInt(extraMobs.size());
  for (  MobDescriptor mob : extraMobs) {
    ByteBufTools.writeString(buf,mob.getEntityClass().getName());
    buf.writeInt(mob.getSpawnChance());
    buf.writeInt(mob.getMinGroup());
    buf.writeInt(mob.getMaxGroup());
    buf.writeInt(mob.getMaxLoaded());
  }
}","public void toBytes(ByteBuf buf){
  ByteBufTools.writeEnum(buf,terrainType,TerrainType.TERRAIN_VOID);
  ByteBufTools.writeEnumCollection(buf,featureTypes);
  ByteBufTools.writeEnumCollection(buf,structureTypes);
  ByteBufTools.writeEnumCollection(buf,effectTypes);
  buf.writeInt(biomes.size());
  for (  BiomeGenBase entry : biomes) {
    buf.writeInt(entry.biomeID);
  }
  ByteBufTools.writeString(buf,digitString);
  buf.writeInt(Block.blockRegistry.getIDForObject(baseBlockForTerrain));
  buf.writeInt(Block.blockRegistry.getIDForObject(tendrilBlock));
  buf.writeInt(Block.blockRegistry.getIDForObject(sphereBlock));
  buf.writeInt(Block.blockRegistry.getIDForObject(canyonBlock));
  buf.writeInt(Block.blockRegistry.getIDForObject(fluidForTerrain));
  buf.writeInt(extraOregen.length);
  for (  Block block : extraOregen) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block));
  }
  buf.writeInt(fluidsForLakes.length);
  for (  Block block : fluidsForLakes) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block));
  }
  buf.writeBoolean(peaceful);
  ByteBufTools.writeFloat(buf,celestialAngle);
  ByteBufTools.writeFloat(buf,timeSpeed);
  buf.writeInt(probeCounter);
  buf.writeInt(actualRfCost);
  skyDescriptor.toBytes(buf);
  buf.writeInt(extraMobs.size());
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() != null) {
        ByteBufTools.writeString(buf,mob.getEntityClass().getName());
        buf.writeInt(mob.getSpawnChance());
        buf.writeInt(mob.getMinGroup());
        buf.writeInt(mob.getMaxGroup());
        buf.writeInt(mob.getMaxLoaded());
      }
    }
  }
}",0.9690140845070424
166090,"public void dump(EntityPlayer player){
  String digits=getDigitString();
  if (!digits.isEmpty()) {
    logDebug(player,""String_Node_Str"" + digits);
  }
  TerrainType terrainType=getTerrainType();
  logDebug(player,""String_Node_Str"" + terrainType.toString());
  logDebug(player,""String_Node_Str"" + new ItemStack(baseBlockForTerrain).getDisplayName());
  if (featureTypes.contains(FeatureType.FEATURE_TENDRILS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(tendrilBlock).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_SPHERES)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(sphereBlock).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_CANYONS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(canyonBlock).getDisplayName());
  }
  logDebug(player,""String_Node_Str"" + new ItemStack(fluidForTerrain).getDisplayName());
  for (  BiomeGenBase biome : getBiomes()) {
    logDebug(player,""String_Node_Str"" + biome.biomeName);
  }
  for (  FeatureType featureType : getFeatureTypes()) {
    logDebug(player,""String_Node_Str"" + featureType.toString());
  }
  for (  Block block : extraOregen) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block).getDisplayName());
  }
  for (  Block block : fluidsForLakes) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block).getDisplayName());
  }
  for (  StructureType structureType : getStructureTypes()) {
    logDebug(player,""String_Node_Str"" + structureType.toString());
  }
  for (  EffectType effectType : getEffectTypes()) {
    logDebug(player,""String_Node_Str"" + effectType.toString());
  }
  logDebug(player,""String_Node_Str"" + skyDescriptor.getSunBrightnessFactor());
  logDebug(player,""String_Node_Str"" + skyDescriptor.getStarBrightnessFactor());
  float r=skyDescriptor.getSkyColorFactorR();
  float g=skyDescriptor.getSkyColorFactorG();
  float b=skyDescriptor.getSkyColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  for (  MobDescriptor mob : extraMobs) {
    logDebug(player,""String_Node_Str"" + mob.getEntityClass().getName());
  }
  if (peaceful) {
    logDebug(player,""String_Node_Str"");
  }
  if (celestialAngle != null) {
    logDebug(player,""String_Node_Str"" + celestialAngle);
  }
  if (timeSpeed != null) {
    logDebug(player,""String_Node_Str"" + timeSpeed);
  }
  if (probeCounter > 0) {
    logDebug(player,""String_Node_Str"" + probeCounter);
  }
}","public void dump(EntityPlayer player){
  String digits=getDigitString();
  if (!digits.isEmpty()) {
    logDebug(player,""String_Node_Str"" + digits);
  }
  TerrainType terrainType=getTerrainType();
  logDebug(player,""String_Node_Str"" + terrainType.toString());
  logDebug(player,""String_Node_Str"" + new ItemStack(baseBlockForTerrain).getDisplayName());
  if (featureTypes.contains(FeatureType.FEATURE_TENDRILS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(tendrilBlock).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_SPHERES)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(sphereBlock).getDisplayName());
  }
  if (featureTypes.contains(FeatureType.FEATURE_CANYONS)) {
    logDebug(player,""String_Node_Str"" + new ItemStack(canyonBlock).getDisplayName());
  }
  logDebug(player,""String_Node_Str"" + new ItemStack(fluidForTerrain).getDisplayName());
  for (  BiomeGenBase biome : getBiomes()) {
    logDebug(player,""String_Node_Str"" + biome.biomeName);
  }
  for (  FeatureType featureType : getFeatureTypes()) {
    logDebug(player,""String_Node_Str"" + featureType.toString());
  }
  for (  Block block : extraOregen) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block).getDisplayName());
  }
  for (  Block block : fluidsForLakes) {
    logDebug(player,""String_Node_Str"" + new ItemStack(block).getDisplayName());
  }
  for (  StructureType structureType : getStructureTypes()) {
    logDebug(player,""String_Node_Str"" + structureType.toString());
  }
  for (  EffectType effectType : getEffectTypes()) {
    logDebug(player,""String_Node_Str"" + effectType.toString());
  }
  logDebug(player,""String_Node_Str"" + skyDescriptor.getSunBrightnessFactor());
  logDebug(player,""String_Node_Str"" + skyDescriptor.getStarBrightnessFactor());
  float r=skyDescriptor.getSkyColorFactorR();
  float g=skyDescriptor.getSkyColorFactorG();
  float b=skyDescriptor.getSkyColorFactorB();
  logDebug(player,""String_Node_Str"" + r + ""String_Node_Str""+ g+ ""String_Node_Str""+ b);
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() == null) {
        logDebug(player,""String_Node_Str"" + mob);
      }
 else {
        logDebug(player,""String_Node_Str"" + mob.getEntityClass().getName());
      }
    }
  }
  if (peaceful) {
    logDebug(player,""String_Node_Str"");
  }
  if (celestialAngle != null) {
    logDebug(player,""String_Node_Str"" + celestialAngle);
  }
  if (timeSpeed != null) {
    logDebug(player,""String_Node_Str"" + timeSpeed);
  }
  if (probeCounter > 0) {
    logDebug(player,""String_Node_Str"" + probeCounter);
  }
}",0.8968929348901643
166091,"public void writeToNBT(NBTTagCompound tagCompound){
  tagCompound.setString(""String_Node_Str"",getName());
  Coordinate spawnPoint=getSpawnPoint();
  if (spawnPoint != null) {
    Coordinate.writeToNBT(tagCompound,""String_Node_Str"",spawnPoint);
  }
  tagCompound.setInteger(""String_Node_Str"",getProbeCounter());
  tagCompound.setInteger(""String_Node_Str"",1);
  tagCompound.setInteger(""String_Node_Str"",terrainType == null ? TerrainType.TERRAIN_VOID.ordinal() : terrainType.ordinal());
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(featureTypes));
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(structureTypes));
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(effectTypes));
  List<Integer> c=new ArrayList<Integer>(biomes.size());
  for (  BiomeGenBase t : biomes) {
    c.add(t.biomeID);
  }
  tagCompound.setIntArray(""String_Node_Str"",ArrayUtils.toPrimitive(c.toArray(new Integer[c.size()])));
  tagCompound.setString(""String_Node_Str"",digitString);
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(baseBlockForTerrain));
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(tendrilBlock));
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(sphereBlock));
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(canyonBlock));
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(fluidForTerrain));
  c=new ArrayList<Integer>(extraOregen.length);
  for (  Block t : extraOregen) {
    c.add(Block.blockRegistry.getIDForObject(t));
  }
  tagCompound.setIntArray(""String_Node_Str"",ArrayUtils.toPrimitive(c.toArray(new Integer[c.size()])));
  c=new ArrayList<Integer>(fluidsForLakes.length);
  for (  Block t : fluidsForLakes) {
    c.add(Block.blockRegistry.getIDForObject(t));
  }
  tagCompound.setIntArray(""String_Node_Str"",ArrayUtils.toPrimitive(c.toArray(new Integer[c.size()])));
  tagCompound.setBoolean(""String_Node_Str"",peaceful);
  if (celestialAngle != null) {
    tagCompound.setFloat(""String_Node_Str"",celestialAngle);
  }
  if (timeSpeed != null) {
    tagCompound.setFloat(""String_Node_Str"",timeSpeed);
  }
  tagCompound.setInteger(""String_Node_Str"",probeCounter);
  tagCompound.setInteger(""String_Node_Str"",actualRfCost);
  skyDescriptor.writeToNBT(tagCompound);
  NBTTagList list=new NBTTagList();
  for (  MobDescriptor mob : extraMobs) {
    NBTTagCompound tc=new NBTTagCompound();
    tc.setString(""String_Node_Str"",mob.getEntityClass().getName());
    tc.setInteger(""String_Node_Str"",mob.getSpawnChance());
    tc.setInteger(""String_Node_Str"",mob.getMinGroup());
    tc.setInteger(""String_Node_Str"",mob.getMaxGroup());
    tc.setInteger(""String_Node_Str"",mob.getMaxLoaded());
    list.appendTag(tc);
  }
  tagCompound.setTag(""String_Node_Str"",list);
}","public void writeToNBT(NBTTagCompound tagCompound){
  tagCompound.setString(""String_Node_Str"",getName());
  Coordinate spawnPoint=getSpawnPoint();
  if (spawnPoint != null) {
    Coordinate.writeToNBT(tagCompound,""String_Node_Str"",spawnPoint);
  }
  tagCompound.setInteger(""String_Node_Str"",getProbeCounter());
  tagCompound.setInteger(""String_Node_Str"",1);
  tagCompound.setInteger(""String_Node_Str"",terrainType == null ? TerrainType.TERRAIN_VOID.ordinal() : terrainType.ordinal());
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(featureTypes));
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(structureTypes));
  tagCompound.setIntArray(""String_Node_Str"",toIntArray(effectTypes));
  List<Integer> c=new ArrayList<Integer>(biomes.size());
  for (  BiomeGenBase t : biomes) {
    c.add(t.biomeID);
  }
  tagCompound.setIntArray(""String_Node_Str"",ArrayUtils.toPrimitive(c.toArray(new Integer[c.size()])));
  tagCompound.setString(""String_Node_Str"",digitString);
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(baseBlockForTerrain));
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(tendrilBlock));
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(sphereBlock));
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(canyonBlock));
  tagCompound.setInteger(""String_Node_Str"",Block.blockRegistry.getIDForObject(fluidForTerrain));
  c=new ArrayList<Integer>(extraOregen.length);
  for (  Block t : extraOregen) {
    c.add(Block.blockRegistry.getIDForObject(t));
  }
  tagCompound.setIntArray(""String_Node_Str"",ArrayUtils.toPrimitive(c.toArray(new Integer[c.size()])));
  c=new ArrayList<Integer>(fluidsForLakes.length);
  for (  Block t : fluidsForLakes) {
    c.add(Block.blockRegistry.getIDForObject(t));
  }
  tagCompound.setIntArray(""String_Node_Str"",ArrayUtils.toPrimitive(c.toArray(new Integer[c.size()])));
  tagCompound.setBoolean(""String_Node_Str"",peaceful);
  if (celestialAngle != null) {
    tagCompound.setFloat(""String_Node_Str"",celestialAngle);
  }
  if (timeSpeed != null) {
    tagCompound.setFloat(""String_Node_Str"",timeSpeed);
  }
  tagCompound.setInteger(""String_Node_Str"",probeCounter);
  tagCompound.setInteger(""String_Node_Str"",actualRfCost);
  skyDescriptor.writeToNBT(tagCompound);
  NBTTagList list=new NBTTagList();
  for (  MobDescriptor mob : extraMobs) {
    NBTTagCompound tc=new NBTTagCompound();
    if (mob != null) {
      if (mob.getEntityClass() != null) {
        tc.setString(""String_Node_Str"",mob.getEntityClass().getName());
        tc.setInteger(""String_Node_Str"",mob.getSpawnChance());
        tc.setInteger(""String_Node_Str"",mob.getMinGroup());
        tc.setInteger(""String_Node_Str"",mob.getMaxGroup());
        tc.setInteger(""String_Node_Str"",mob.getMaxLoaded());
        list.appendTag(tc);
      }
    }
  }
  tagCompound.setTag(""String_Node_Str"",list);
}",0.9820900712919493
166092,"static void setupWeightedRandomList(Configuration cfg){
  float rarity0=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",500.0f).getDouble();
  float rarity1=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble();
  float rarity2=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble();
  float rarity3=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble();
  float rarity4=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble();
  float rarity5=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble();
  float rarity6=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble();
  randomDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomMobDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMobDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomEffectDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomEffectDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomFeatureDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomFeatureDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  for (  Map.Entry<Integer,DimletEntry> entry : KnownDimletConfiguration.idToDimlet.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    if (entry.getValue().getKey().getType() == DimletType.DIMLET_MATERIAL) {
      if (DimletMapping.idToBlock.get(entry.getKey()) != null) {
        randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_LIQUID) {
      if (DimletMapping.idToFluid.get(entry.getKey()) != null) {
        randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_MOBS) {
      if (DimletMapping.idtoMob.get(entry.getKey()) != null) {
        randomMobDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_EFFECT) {
      if (DimletMapping.idToEffectType.get(entry.getKey()) != EffectType.EFFECT_NONE) {
        randomEffectDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_FEATURE) {
      if (DimletMapping.idToFeatureType.get(entry.getKey()) != FeatureType.FEATURE_NONE) {
        randomFeatureDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
  }
}","static void setupWeightedRandomList(Configuration cfg){
  float rarity0=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",500.0f).getDouble();
  float rarity1=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble();
  float rarity2=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble();
  float rarity3=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble();
  float rarity4=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble();
  float rarity5=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble();
  float rarity6=(float)cfg.get(KnownDimletConfiguration.CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble();
  randomDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomMobDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMobDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomEffectDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomEffectDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  randomFeatureDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomFeatureDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5,rarity6);
  for (  Map.Entry<Integer,DimletEntry> entry : KnownDimletConfiguration.idToDimlet.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    if (entry.getValue().getKey().getType() == DimletType.DIMLET_MATERIAL) {
      if (DimletMapping.idToBlock.get(entry.getKey()) != null) {
        randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_LIQUID) {
      if (DimletMapping.idToFluid.get(entry.getKey()) != null) {
        randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_MOBS) {
      MobDescriptor descriptor=DimletMapping.idtoMob.get(entry.getKey());
      if (descriptor != null && descriptor.getEntityClass() != null) {
        randomMobDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_EFFECT) {
      if (DimletMapping.idToEffectType.get(entry.getKey()) != EffectType.EFFECT_NONE) {
        randomEffectDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_FEATURE) {
      if (DimletMapping.idToFeatureType.get(entry.getKey()) != FeatureType.FEATURE_NONE) {
        randomFeatureDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
  }
}",0.9809230769230768
166093,"@Override protected void checkStateServer(){
  ticker--;
  if (ticker > 0) {
    return;
  }
  ticker=5;
  ItemStack itemStack=inventoryHelper.getStacks()[0];
  if (itemStack == null || itemStack.stackSize == 0) {
    setState(-1,0);
    return;
  }
  NBTTagCompound tagCompound=itemStack.getTagCompound();
  int editTicksLeft=tagCompound.getInteger(""String_Node_Str"");
  if (editTicksLeft > 0) {
    setState(-1,0);
    return;
  }
  int ticksLeft=tagCompound.getInteger(""String_Node_Str"");
  int tickCost=tagCompound.getInteger(""String_Node_Str"");
  if (ticksLeft > 0) {
    ticksLeft=createDimensionTick(tagCompound,ticksLeft);
  }
 else {
    maintainDimensionTick(tagCompound);
  }
  setState(ticksLeft,tickCost);
}","@Override protected void checkStateServer(){
  ItemStack itemStack=inventoryHelper.getStacks()[0];
  if (itemStack == null || itemStack.stackSize == 0) {
    setState(-1,0);
    return;
  }
  NBTTagCompound tagCompound=itemStack.getTagCompound();
  int ticksLeft=tagCompound.getInteger(""String_Node_Str"");
  int tickCost=tagCompound.getInteger(""String_Node_Str"");
  if (ticksLeft > 0) {
    ticksLeft=createDimensionTick(tagCompound,ticksLeft);
  }
 else {
    maintainDimensionTick(tagCompound);
  }
  setState(ticksLeft,tickCost);
}",0.8341307814992025
166094,"public void save(World world){
  world.mapStorage.setData(DIMMANAGER_NAME,this);
  markDirty();
  if (!world.isRemote) {
    PacketHandler.INSTANCE.sendToAll(new PacketSyncDimensionInfo(dimensions,dimensionToID,dimensionInformation));
  }
}","public void save(World world){
  world.mapStorage.setData(DIMMANAGER_NAME,this);
  markDirty();
  syncDimInfoToClients(world);
}",0.6467391304347826
166095,"public void syncFromServer(Map<Integer,DimensionDescriptor> dimensions,Map<DimensionDescriptor,Integer> dimensionToID,Map<Integer,DimensionInformation> dimensionInformation){
  this.dimensions.clear();
  this.dimensions.putAll(dimensions);
  this.dimensionToID.clear();
  this.dimensionToID.putAll(dimensionToID);
  this.dimensionInformation.clear();
  this.dimensionInformation.putAll(dimensionInformation);
}","public void syncFromServer(Map<Integer,DimensionDescriptor> dimensions,Map<DimensionDescriptor,Integer> dimensionToID,Map<Integer,DimensionInformation> dimensionInformation){
  System.out.println(""String_Node_Str"");
  this.dimensions.clear();
  this.dimensions.putAll(dimensions);
  this.dimensionToID.clear();
  this.dimensionToID.putAll(dimensionToID);
  this.dimensionInformation.clear();
  this.dimensionInformation.putAll(dimensionInformation);
}",0.8501742160278746
166096,"@Override @SideOnly(Side.CLIENT) public Vec3 getSkyColor(Entity cameraEntity,float partialTicks){
  int dim=worldObj.provider.dimensionId;
  if (System.currentTimeMillis() - lastTime > 1000) {
    lastTime=System.currentTimeMillis();
    PacketHandler.INSTANCE.sendToServer(new PacketGetDimensionEnergy(dim));
  }
  float factor=calculatePowerBlackout(dim);
  float r=dimensionInformation.getSkyDescriptor().getSkyColorFactorR() * factor;
  float g=dimensionInformation.getSkyDescriptor().getSkyColorFactorG() * factor;
  float b=dimensionInformation.getSkyDescriptor().getSkyColorFactorB() * factor;
  Vec3 skyColor=super.getSkyColor(cameraEntity,partialTicks);
  return Vec3.createVectorHelper(skyColor.xCoord * r,skyColor.yCoord * g,skyColor.zCoord * b);
}","@Override @SideOnly(Side.CLIENT) public Vec3 getSkyColor(Entity cameraEntity,float partialTicks){
  int dim=worldObj.provider.dimensionId;
  if (System.currentTimeMillis() - lastTime > 1000) {
    lastTime=System.currentTimeMillis();
    PacketHandler.INSTANCE.sendToServer(new PacketGetDimensionEnergy(dim));
  }
  float factor=calculatePowerBlackout(dim);
  getDimensionInformation();
  float r;
  float g;
  float b;
  if (dimensionInformation == null) {
    r=g=b=1.0f;
  }
 else {
    r=dimensionInformation.getSkyDescriptor().getSkyColorFactorR() * factor;
    g=dimensionInformation.getSkyDescriptor().getSkyColorFactorG() * factor;
    b=dimensionInformation.getSkyDescriptor().getSkyColorFactorB() * factor;
  }
  Vec3 skyColor=super.getSkyColor(cameraEntity,partialTicks);
  return Vec3.createVectorHelper(skyColor.xCoord * r,skyColor.yCoord * g,skyColor.zCoord * b);
}",0.9035409035409036
166097,"@Override @SideOnly(Side.CLIENT) public float getSunBrightness(float par1){
  int dim=worldObj.provider.dimensionId;
  float factor=calculatePowerBlackout(dim);
  return super.getSunBrightness(par1) * dimensionInformation.getSkyDescriptor().getSunBrightnessFactor() * factor;
}","@Override @SideOnly(Side.CLIENT) public float getSunBrightness(float par1){
  getDimensionInformation();
  if (dimensionInformation == null) {
    return super.getSunBrightness(par1);
  }
  int dim=worldObj.provider.dimensionId;
  float factor=calculatePowerBlackout(dim);
  return super.getSunBrightness(par1) * dimensionInformation.getSkyDescriptor().getSunBrightnessFactor() * factor;
}",0.8318318318318318
166098,"@Override @SideOnly(Side.CLIENT) public float getStarBrightness(float par1){
  return super.getStarBrightness(par1) * dimensionInformation.getSkyDescriptor().getStarBrightnessFactor();
}","@Override @SideOnly(Side.CLIENT) public float getStarBrightness(float par1){
  getDimensionInformation();
  if (dimensionInformation == null) {
    return super.getStarBrightness(par1);
  }
  return super.getStarBrightness(par1) * dimensionInformation.getSkyDescriptor().getStarBrightnessFactor();
}",0.7670103092783506
166099,"@Override public void registerWorldChunkManager(){
  int dim=worldObj.provider.dimensionId;
  long seed=calculateSeed(worldObj.getSeed(),dim);
  dimensionInformation=RfToolsDimensionManager.getDimensionManager(worldObj).getDimensionInformation(dim);
  storage=DimensionStorage.getDimensionStorage(worldObj);
  if (dimensionInformation != null && !dimensionInformation.getBiomes().isEmpty()) {
    worldChunkMgr=new SingleBiomeWorldChunkManager(worldObj,seed,terrainType);
  }
 else {
    worldChunkMgr=new WorldChunkManager(seed,worldObj.getWorldInfo().getTerrainType());
  }
  hasNoSky=false;
}","@Override public void registerWorldChunkManager(){
  int dim=worldObj.provider.dimensionId;
  long seed=calculateSeed(worldObj.getSeed(),dim);
  getDimensionInformation();
  storage=DimensionStorage.getDimensionStorage(worldObj);
  if (dimensionInformation != null && !dimensionInformation.getBiomes().isEmpty()) {
    worldChunkMgr=new SingleBiomeWorldChunkManager(worldObj,seed,terrainType);
  }
 else {
    worldChunkMgr=new WorldChunkManager(seed,worldObj.getWorldInfo().getTerrainType());
  }
  hasNoSky=false;
}",0.920863309352518
166100,"@Override public float calculateCelestialAngle(long time,float p_76563_3_){
  if (dimensionInformation.getCelestialAngle() == null) {
    if (dimensionInformation.getTimeSpeed() == null) {
      return super.calculateCelestialAngle(time,p_76563_3_);
    }
 else {
      return super.calculateCelestialAngle((long)(time * dimensionInformation.getTimeSpeed()),p_76563_3_);
    }
  }
 else {
    return dimensionInformation.getCelestialAngle();
  }
}","@Override public float calculateCelestialAngle(long time,float p_76563_3_){
  getDimensionInformation();
  if (dimensionInformation == null) {
    return super.calculateCelestialAngle(time,p_76563_3_);
  }
  if (dimensionInformation.getCelestialAngle() == null) {
    if (dimensionInformation.getTimeSpeed() == null) {
      return super.calculateCelestialAngle(time,p_76563_3_);
    }
 else {
      return super.calculateCelestialAngle((long)(time * dimensionInformation.getTimeSpeed()),p_76563_3_);
    }
  }
 else {
    return dimensionInformation.getCelestialAngle();
  }
}",0.806640625
166101,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    int id=player.worldObj.provider.dimensionId;
    RfToolsDimensionManager dimensionManager=RfToolsDimensionManager.getDimensionManager(player.worldObj);
    DimensionInformation dimensionInformation=dimensionManager.getDimensionInformation(id);
    if (dimensionInformation == null) {
      RFTools.message(player,""String_Node_Str"");
    }
 else {
      if (System.currentTimeMillis() - lastTime > 500) {
        lastTime=System.currentTimeMillis();
        PacketHandler.INSTANCE.sendToServer(new PacketGetDimensionEnergy(id));
      }
      String name=dimensionInformation.getName();
      DimensionStorage storage=DimensionStorage.getDimensionStorage(player.getEntityWorld());
      int power=storage != null ? storage.getEnergyLevel(id) : 0;
      RFTools.message(player,EnumChatFormatting.BLUE + ""String_Node_Str"" + name+ ""String_Node_Str""+ id+ ""String_Node_Str""+ EnumChatFormatting.YELLOW+ ""String_Node_Str""+ power+ ""String_Node_Str"");
      if (player.isSneaking()) {
        RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"" + dimensionInformation.getDescriptor().getDescriptionString());
        System.out.println(""String_Node_Str"" + dimensionInformation.getDescriptor().getDescriptionString());
      }
    }
    return stack;
  }
  return stack;
}","@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (!world.isRemote) {
    int id=player.worldObj.provider.dimensionId;
    RfToolsDimensionManager dimensionManager=RfToolsDimensionManager.getDimensionManager(player.worldObj);
    DimensionInformation dimensionInformation=dimensionManager.getDimensionInformation(id);
    if (dimensionInformation == null) {
      RFTools.message(player,""String_Node_Str"");
    }
 else {
      String name=dimensionInformation.getName();
      DimensionStorage storage=DimensionStorage.getDimensionStorage(player.getEntityWorld());
      int power=storage != null ? storage.getEnergyLevel(id) : 0;
      RFTools.message(player,EnumChatFormatting.BLUE + ""String_Node_Str"" + name+ ""String_Node_Str""+ id+ ""String_Node_Str""+ EnumChatFormatting.YELLOW+ ""String_Node_Str""+ power+ ""String_Node_Str"");
      if (player.isSneaking()) {
        RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"" + dimensionInformation.getDescriptor().getDescriptionString());
        System.out.println(""String_Node_Str"" + dimensionInformation.getDescriptor().getDescriptionString());
      }
    }
    return stack;
  }
  return stack;
}",0.9275028768699656
166102,"@Override protected void checkStateServer(){
  if (researching > 0) {
    researching--;
    if (researching == 0) {
      int id=KnownDimletConfiguration.getRandomDimlet();
      InventoryHelper.mergeItemStack(this,new ItemStack(ModItems.knownDimlet,1,id),1,2);
    }
    markDirty();
  }
 else {
    ItemStack inputStack=inventoryHelper.getStacks()[0];
    ItemStack outputStack=inventoryHelper.getStacks()[1];
    if (inputStack != null && inputStack.getItem() == ModItems.unknownDimlet && outputStack == null) {
      startResearching();
    }
  }
}","@Override protected void checkStateServer(){
  if (researching > 0) {
    researching--;
    if (researching == 0) {
      int id=KnownDimletConfiguration.getRandomDimlet(worldObj.rand);
      InventoryHelper.mergeItemStack(this,new ItemStack(ModItems.knownDimlet,1,id),1,2);
    }
    markDirty();
  }
 else {
    ItemStack inputStack=inventoryHelper.getStacks()[0];
    ItemStack outputStack=inventoryHelper.getStacks()[1];
    if (inputStack != null && inputStack.getItem() == ModItems.unknownDimlet && outputStack == null) {
      startResearching();
    }
  }
}",0.9883824843610366
166103,"@Override protected void checkStateServer(){
  if (scrambling > 0) {
    scrambling--;
    if (scrambling == 0) {
      int id=KnownDimletConfiguration.getRandomDimlet(bonus);
      InventoryHelper.mergeItemStack(this,new ItemStack(ModItems.knownDimlet,1,id),3,4);
    }
    markDirty();
  }
 else {
    ItemStack input1=inventoryHelper.getStacks()[0];
    ItemStack input2=inventoryHelper.getStacks()[1];
    ItemStack input3=inventoryHelper.getStacks()[2];
    ItemStack outputStack=inventoryHelper.getStacks()[3];
    if (isValidInput(input1,input2,input3) && outputStack == null) {
      startScrambling();
    }
  }
}","@Override protected void checkStateServer(){
  if (scrambling > 0) {
    scrambling--;
    if (scrambling == 0) {
      int id=KnownDimletConfiguration.getRandomDimlet(bonus,worldObj.rand);
      InventoryHelper.mergeItemStack(this,new ItemStack(ModItems.knownDimlet,1,id),3,4);
    }
    markDirty();
  }
 else {
    ItemStack input1=inventoryHelper.getStacks()[0];
    ItemStack input2=inventoryHelper.getStacks()[1];
    ItemStack input3=inventoryHelper.getStacks()[2];
    ItemStack outputStack=inventoryHelper.getStacks()[3];
    if (isValidInput(input1,input2,input3) && outputStack == null) {
      startScrambling();
    }
  }
}",0.9888712241653418
166104,"private void calculateFeatureType(Map<DimletType,List<Integer>> dimlets,List<DimensionDescriptor.DimletDescriptor> modifiers,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_FEATURE);
  if (list.isEmpty()) {
    for (    FeatureType type : FeatureType.values()) {
      if (random.nextFloat() < .4f) {
        featureTypes.add(type);
      }
    }
  }
 else {
    for (    Integer id : list) {
      featureTypes.add(KnownDimletConfiguration.idToFeatureType.get(id));
    }
  }
  List<Block> blocks=new ArrayList<Block>();
  List<Block> fluids=new ArrayList<Block>();
  getMaterialAndFluidModifiers(modifiers,blocks,fluids);
  if (blocks.isEmpty()) {
    while (random.nextFloat() < 0.2f) {
      blocks.add(KnownDimletConfiguration.getRandomMaterialBlock());
    }
  }
 else   if (blocks.size() == 1 && blocks.get(0) == null) {
    blocks.clear();
  }
  extraOregen=blocks.toArray(new Block[blocks.size()]);
  if (fluids.isEmpty()) {
    while (random.nextFloat() < 0.2f) {
      fluids.add(KnownDimletConfiguration.getRandomFluidBlock());
    }
  }
 else   if (fluids.size() == 1 && fluids.get(0) == null) {
    fluids.clear();
  }
  fluidsForLakes=fluids.toArray(new Block[fluids.size()]);
}","private void calculateFeatureType(Map<DimletType,List<Integer>> dimlets,List<DimensionDescriptor.DimletDescriptor> modifiers,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_FEATURE);
  if (list.isEmpty()) {
    for (    FeatureType type : FeatureType.values()) {
      if (random.nextFloat() < .4f) {
        featureTypes.add(type);
      }
    }
  }
 else {
    for (    Integer id : list) {
      featureTypes.add(KnownDimletConfiguration.idToFeatureType.get(id));
    }
  }
  List<Block> blocks=new ArrayList<Block>();
  List<Block> fluids=new ArrayList<Block>();
  getMaterialAndFluidModifiers(modifiers,blocks,fluids);
  if (blocks.isEmpty()) {
    while (random.nextFloat() < 0.2f) {
      blocks.add(KnownDimletConfiguration.getRandomMaterialBlock(random));
    }
  }
 else   if (blocks.size() == 1 && blocks.get(0) == null) {
    blocks.clear();
  }
  extraOregen=blocks.toArray(new Block[blocks.size()]);
  if (fluids.isEmpty()) {
    while (random.nextFloat() < 0.2f) {
      fluids.add(KnownDimletConfiguration.getRandomFluidBlock(random));
    }
  }
 else   if (fluids.size() == 1 && fluids.get(0) == null) {
    fluids.clear();
  }
  fluidsForLakes=fluids.toArray(new Block[fluids.size()]);
}",0.9950738916256158
166105,"private void calculateTerrainType(Map<DimletType,List<Integer>> dimlets,List<DimensionDescriptor.DimletDescriptor> modifiers,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_TERRAIN);
  terrainType=TerrainType.TERRAIN_VOID;
  if (list.isEmpty()) {
    terrainType=TerrainType.values()[random.nextInt(TerrainType.values().length)];
  }
 else {
    terrainType=KnownDimletConfiguration.idToTerrainType.get(list.get(random.nextInt(list.size())));
  }
  List<Block> blocks=new ArrayList<Block>();
  List<Block> fluids=new ArrayList<Block>();
  getMaterialAndFluidModifiers(modifiers,blocks,fluids);
  if (!blocks.isEmpty()) {
    baseBlockForTerrain=blocks.get(random.nextInt(blocks.size()));
    if (baseBlockForTerrain == null) {
      baseBlockForTerrain=Blocks.stone;
    }
  }
 else {
    if (random.nextFloat() < 0.6f) {
      baseBlockForTerrain=Blocks.stone;
    }
 else {
      baseBlockForTerrain=KnownDimletConfiguration.getRandomMaterialBlock();
    }
  }
  if (!fluids.isEmpty()) {
    fluidForTerrain=fluids.get(random.nextInt(fluids.size()));
    if (fluidForTerrain == null) {
      fluidForTerrain=Blocks.water;
    }
  }
 else {
    if (random.nextFloat() < 0.6f) {
      fluidForTerrain=Blocks.water;
    }
 else {
      fluidForTerrain=KnownDimletConfiguration.getRandomFluidBlock();
    }
  }
}","private void calculateTerrainType(Map<DimletType,List<Integer>> dimlets,List<DimensionDescriptor.DimletDescriptor> modifiers,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_TERRAIN);
  terrainType=TerrainType.TERRAIN_VOID;
  if (list.isEmpty()) {
    terrainType=TerrainType.values()[random.nextInt(TerrainType.values().length)];
  }
 else {
    terrainType=KnownDimletConfiguration.idToTerrainType.get(list.get(random.nextInt(list.size())));
  }
  List<Block> blocks=new ArrayList<Block>();
  List<Block> fluids=new ArrayList<Block>();
  getMaterialAndFluidModifiers(modifiers,blocks,fluids);
  if (!blocks.isEmpty()) {
    baseBlockForTerrain=blocks.get(random.nextInt(blocks.size()));
    if (baseBlockForTerrain == null) {
      baseBlockForTerrain=Blocks.stone;
    }
  }
 else {
    if (random.nextFloat() < 0.6f) {
      baseBlockForTerrain=Blocks.stone;
    }
 else {
      baseBlockForTerrain=KnownDimletConfiguration.getRandomMaterialBlock(random);
    }
  }
  if (!fluids.isEmpty()) {
    fluidForTerrain=fluids.get(random.nextInt(fluids.size()));
    if (fluidForTerrain == null) {
      fluidForTerrain=Blocks.water;
    }
  }
 else {
    if (random.nextFloat() < 0.6f) {
      fluidForTerrain=Blocks.water;
    }
 else {
      fluidForTerrain=KnownDimletConfiguration.getRandomFluidBlock(random);
    }
  }
}",0.995505617977528
166106,"private void generateDungeon(World world,Random random,int midx,int starty,int midz){
  boolean do_small_antenna=random.nextInt(4) == 0;
  boolean do_extra_feature=random.nextInt(4) == 0;
  int color=random.nextInt(3);
  if (color == 0) {
    color=3;
  }
 else   if (color == 1) {
    color=9;
  }
 else {
    color=11;
  }
  for (int x=midx - 3; x <= midx + 3; x++) {
    for (int z=midz - 3; z <= midz + 3; z++) {
      boolean corner=(x == midx - 3 || x == midx + 3) && (z == midz - 3 || z == midz + 3);
      boolean xside=x == midx - 3 || x == midx + 3;
      boolean zside=z == midz - 3 || z == midz + 3;
      boolean antenna=(x == midx - 2 && z == midz - 2);
      boolean small_antenna=do_small_antenna && (x == midx + 2 && z == midz + 2);
      world.setBlock(x,starty,z,Blocks.double_stone_slab,0,2);
      if (corner) {
        world.setBlock(x,starty + 1,z,Blocks.quartz_block,0,2);
        world.setBlock(x,starty + 2,z,Blocks.quartz_block,0,2);
        world.setBlock(x,starty + 3,z,Blocks.quartz_block,0,2);
      }
 else       if (xside) {
        world.setBlock(x,starty + 1,z,Blocks.stained_hardened_clay,color,2);
        if (z >= midz - 1 && z <= midz + 1) {
          world.setBlock(x,starty + 2,z,Blocks.glass_pane,0,2);
        }
 else {
          world.setBlock(x,starty + 2,z,Blocks.stained_hardened_clay,color,2);
        }
        world.setBlock(x,starty + 3,z,Blocks.stained_hardened_clay,color,2);
      }
 else       if (zside) {
        world.setBlock(x,starty + 1,z,Blocks.stained_hardened_clay,color,2);
        world.setBlock(x,starty + 2,z,Blocks.stained_hardened_clay,color,2);
        world.setBlock(x,starty + 3,z,Blocks.stained_hardened_clay,color,2);
      }
 else {
        world.setBlockToAir(x,starty + 1,z);
        world.setBlockToAir(x,starty + 2,z);
        world.setBlockToAir(x,starty + 3,z);
      }
      if (antenna) {
        world.setBlock(x,starty + 4,z,Blocks.double_stone_slab,0,2);
        world.setBlock(x,starty + 5,z,Blocks.iron_bars,0,2);
        world.setBlock(x,starty + 6,z,Blocks.iron_bars,0,2);
        world.setBlock(x,starty + 7,z,Blocks.iron_bars,0,2);
        world.setBlock(x,starty + 8,z,Blocks.glowstone,0,2);
      }
 else       if (small_antenna) {
        world.setBlock(x,starty + 4,z,Blocks.double_stone_slab,0,2);
        world.setBlock(x,starty + 5,z,Blocks.iron_bars,0,2);
        world.setBlockToAir(x,starty + 6,z);
        world.setBlockToAir(x,starty + 7,z);
        world.setBlockToAir(x,starty + 8,z);
      }
 else {
        world.setBlock(x,starty + 4,z,Blocks.stone_slab,0,2);
        world.setBlockToAir(x,starty + 5,z);
        world.setBlockToAir(x,starty + 6,z);
        world.setBlockToAir(x,starty + 7,z);
        world.setBlockToAir(x,starty + 8,z);
      }
      WorldGenerationTools.fillEmptyWithStone(world,x,starty - 1,z);
    }
  }
  if (do_extra_feature) {
    if (!WorldGenerationTools.isSolid(world,midx + 4,starty,midz - 3)) {
      world.setBlock(midx + 4,starty,midz - 3,Blocks.iron_bars,0,2);
    }
    world.setBlock(midx + 4,starty + 1,midz - 3,Blocks.iron_bars,0,2);
    world.setBlock(midx + 4,starty + 2,midz - 3,Blocks.iron_bars,0,2);
    if (!WorldGenerationTools.isSolid(world,midx + 5,starty,midz - 3)) {
      world.setBlock(midx + 5,starty,midz - 3,Blocks.stained_hardened_clay,color,2);
    }
    world.setBlock(midx + 5,starty + 1,midz - 3,Blocks.stained_hardened_clay,color,2);
    world.setBlock(midx + 5,starty + 2,midz - 3,Blocks.stained_hardened_clay,color,2);
    WorldGenerationTools.fillEmptyWithStone(world,midx + 4,starty - 1,midz - 3);
    WorldGenerationTools.fillEmptyWithStone(world,midx + 5,starty - 1,midz - 3);
  }
  for (int x=midx - 3; x <= midx + 3; x++) {
    for (int y=starty + 1; y <= starty + 3; y++) {
      world.setBlockToAir(x,y,midz - 4);
    }
  }
  world.setBlock(midx - 1,starty,midz - 4,Blocks.double_stone_slab,0,2);
  world.setBlock(midx,starty,midz - 4,Blocks.double_stone_slab,0,2);
  world.setBlock(midx + 1,starty,midz - 4,Blocks.double_stone_slab,0,2);
  world.setBlock(midx,starty + 1,midz - 3,Blocks.iron_door,1,2);
  world.setBlock(midx,starty + 2,midz - 3,Blocks.iron_door,8,2);
  world.setBlock(midx - 1,starty + 2,midz - 4,Blocks.stone_button,4,2);
  world.setBlock(midx + 1,starty + 2,midz - 2,Blocks.stone_button,3,2);
  world.setBlock(midx,starty + 3,midz + 3,Blocks.redstone_lamp,0,2);
  world.setBlock(midx,starty + 3,midz + 2,Blocks.lever,4,2);
  world.setBlock(midx + 2,starty + 1,midz - 2,Blocks.chest,0,2);
  TileEntityChest chest=(TileEntityChest)world.getTileEntity(midx + 2,starty + 1,midz - 2);
  for (int i=0; i < random.nextInt(2) + 2; i++) {
    chest.setInventorySlotContents(random.nextInt(chest.getSizeInventory()),new ItemStack(ModItems.unknownDimlet,random.nextInt(6) + 3));
  }
  WeightedRandomSelector.Distribution<Integer> goodDistribution=KnownDimletConfiguration.randomDimlets.createDistribution(0.01f);
  for (int i=0; i < random.nextInt(2) + 1; i++) {
    chest.setInventorySlotContents(random.nextInt(chest.getSizeInventory()),new ItemStack(ModItems.knownDimlet,1,KnownDimletConfiguration.getRandomDimlet(goodDistribution)));
  }
  WeightedRandomSelector.Distribution<Integer> bestDistribution=KnownDimletConfiguration.randomDimlets.createDistribution(0.15f);
  EntityItemFrame frame1=spawnItemFrame(world,midx - 1,starty + 2,midz + 2);
  frame1.setDisplayedItem(new ItemStack(ModItems.knownDimlet,1,KnownDimletConfiguration.getRandomDimlet(bestDistribution)));
  EntityItemFrame frame2=spawnItemFrame(world,midx,starty + 2,midz + 2);
  frame2.setDisplayedItem(new ItemStack(ModItems.knownDimlet,1,KnownDimletConfiguration.getRandomDimlet(bestDistribution)));
  EntityItemFrame frame3=spawnItemFrame(world,midx + 1,starty + 2,midz + 2);
  frame3.setDisplayedItem(new ItemStack(ModItems.knownDimlet,1,KnownDimletConfiguration.getRandomDimlet(bestDistribution)));
}","private void generateDungeon(World world,Random random,int midx,int starty,int midz){
  boolean do_small_antenna=random.nextInt(4) == 0;
  boolean do_extra_feature=random.nextInt(4) == 0;
  int color=random.nextInt(3);
  if (color == 0) {
    color=3;
  }
 else   if (color == 1) {
    color=9;
  }
 else {
    color=11;
  }
  for (int x=midx - 3; x <= midx + 3; x++) {
    for (int z=midz - 3; z <= midz + 3; z++) {
      boolean corner=(x == midx - 3 || x == midx + 3) && (z == midz - 3 || z == midz + 3);
      boolean xside=x == midx - 3 || x == midx + 3;
      boolean zside=z == midz - 3 || z == midz + 3;
      boolean antenna=(x == midx - 2 && z == midz - 2);
      boolean small_antenna=do_small_antenna && (x == midx + 2 && z == midz + 2);
      world.setBlock(x,starty,z,Blocks.double_stone_slab,0,2);
      if (corner) {
        world.setBlock(x,starty + 1,z,Blocks.quartz_block,0,2);
        world.setBlock(x,starty + 2,z,Blocks.quartz_block,0,2);
        world.setBlock(x,starty + 3,z,Blocks.quartz_block,0,2);
      }
 else       if (xside) {
        world.setBlock(x,starty + 1,z,Blocks.stained_hardened_clay,color,2);
        if (z >= midz - 1 && z <= midz + 1) {
          world.setBlock(x,starty + 2,z,Blocks.glass_pane,0,2);
        }
 else {
          world.setBlock(x,starty + 2,z,Blocks.stained_hardened_clay,color,2);
        }
        world.setBlock(x,starty + 3,z,Blocks.stained_hardened_clay,color,2);
      }
 else       if (zside) {
        world.setBlock(x,starty + 1,z,Blocks.stained_hardened_clay,color,2);
        world.setBlock(x,starty + 2,z,Blocks.stained_hardened_clay,color,2);
        world.setBlock(x,starty + 3,z,Blocks.stained_hardened_clay,color,2);
      }
 else {
        world.setBlockToAir(x,starty + 1,z);
        world.setBlockToAir(x,starty + 2,z);
        world.setBlockToAir(x,starty + 3,z);
      }
      if (antenna) {
        world.setBlock(x,starty + 4,z,Blocks.double_stone_slab,0,2);
        world.setBlock(x,starty + 5,z,Blocks.iron_bars,0,2);
        world.setBlock(x,starty + 6,z,Blocks.iron_bars,0,2);
        world.setBlock(x,starty + 7,z,Blocks.iron_bars,0,2);
        world.setBlock(x,starty + 8,z,Blocks.glowstone,0,2);
      }
 else       if (small_antenna) {
        world.setBlock(x,starty + 4,z,Blocks.double_stone_slab,0,2);
        world.setBlock(x,starty + 5,z,Blocks.iron_bars,0,2);
        world.setBlockToAir(x,starty + 6,z);
        world.setBlockToAir(x,starty + 7,z);
        world.setBlockToAir(x,starty + 8,z);
      }
 else {
        world.setBlock(x,starty + 4,z,Blocks.stone_slab,0,2);
        world.setBlockToAir(x,starty + 5,z);
        world.setBlockToAir(x,starty + 6,z);
        world.setBlockToAir(x,starty + 7,z);
        world.setBlockToAir(x,starty + 8,z);
      }
      WorldGenerationTools.fillEmptyWithStone(world,x,starty - 1,z);
    }
  }
  if (do_extra_feature) {
    if (!WorldGenerationTools.isSolid(world,midx + 4,starty,midz - 3)) {
      world.setBlock(midx + 4,starty,midz - 3,Blocks.iron_bars,0,2);
    }
    world.setBlock(midx + 4,starty + 1,midz - 3,Blocks.iron_bars,0,2);
    world.setBlock(midx + 4,starty + 2,midz - 3,Blocks.iron_bars,0,2);
    if (!WorldGenerationTools.isSolid(world,midx + 5,starty,midz - 3)) {
      world.setBlock(midx + 5,starty,midz - 3,Blocks.stained_hardened_clay,color,2);
    }
    world.setBlock(midx + 5,starty + 1,midz - 3,Blocks.stained_hardened_clay,color,2);
    world.setBlock(midx + 5,starty + 2,midz - 3,Blocks.stained_hardened_clay,color,2);
    WorldGenerationTools.fillEmptyWithStone(world,midx + 4,starty - 1,midz - 3);
    WorldGenerationTools.fillEmptyWithStone(world,midx + 5,starty - 1,midz - 3);
  }
  for (int x=midx - 3; x <= midx + 3; x++) {
    for (int y=starty + 1; y <= starty + 3; y++) {
      world.setBlockToAir(x,y,midz - 4);
    }
  }
  world.setBlock(midx - 1,starty,midz - 4,Blocks.double_stone_slab,0,2);
  world.setBlock(midx,starty,midz - 4,Blocks.double_stone_slab,0,2);
  world.setBlock(midx + 1,starty,midz - 4,Blocks.double_stone_slab,0,2);
  world.setBlock(midx,starty + 1,midz - 3,Blocks.iron_door,1,2);
  world.setBlock(midx,starty + 2,midz - 3,Blocks.iron_door,8,2);
  world.setBlock(midx - 1,starty + 2,midz - 4,Blocks.stone_button,4,2);
  world.setBlock(midx + 1,starty + 2,midz - 2,Blocks.stone_button,3,2);
  world.setBlock(midx,starty + 3,midz + 3,Blocks.redstone_lamp,0,2);
  world.setBlock(midx,starty + 3,midz + 2,Blocks.lever,4,2);
  world.setBlock(midx + 2,starty + 1,midz - 2,Blocks.chest,0,2);
  TileEntityChest chest=(TileEntityChest)world.getTileEntity(midx + 2,starty + 1,midz - 2);
  for (int i=0; i < random.nextInt(2) + 2; i++) {
    chest.setInventorySlotContents(random.nextInt(chest.getSizeInventory()),new ItemStack(ModItems.unknownDimlet,random.nextInt(6) + 3));
  }
  WeightedRandomSelector.Distribution<Integer> goodDistribution=KnownDimletConfiguration.randomDimlets.createDistribution(0.01f);
  for (int i=0; i < random.nextInt(2) + 1; i++) {
    chest.setInventorySlotContents(random.nextInt(chest.getSizeInventory()),new ItemStack(ModItems.knownDimlet,1,KnownDimletConfiguration.getRandomDimlet(goodDistribution,random)));
  }
  WeightedRandomSelector.Distribution<Integer> bestDistribution=KnownDimletConfiguration.randomDimlets.createDistribution(0.15f);
  EntityItemFrame frame1=spawnItemFrame(world,midx - 1,starty + 2,midz + 2);
  frame1.setDisplayedItem(new ItemStack(ModItems.knownDimlet,1,KnownDimletConfiguration.getRandomDimlet(bestDistribution,random)));
  EntityItemFrame frame2=spawnItemFrame(world,midx,starty + 2,midz + 2);
  frame2.setDisplayedItem(new ItemStack(ModItems.knownDimlet,1,KnownDimletConfiguration.getRandomDimlet(bestDistribution,random)));
  EntityItemFrame frame3=spawnItemFrame(world,midx + 1,starty + 2,midz + 2);
  frame3.setDisplayedItem(new ItemStack(ModItems.knownDimlet,1,KnownDimletConfiguration.getRandomDimlet(bestDistribution,random)));
}",0.9976182374957469
166107,"public static int getRandomDimlet(WeightedRandomSelector.Distribution<Integer> distribution){
  return randomDimlets.select(distribution);
}","public static int getRandomDimlet(WeightedRandomSelector.Distribution<Integer> distribution,Random random){
  return randomDimlets.select(distribution,random);
}",0.9302325581395348
166108,"public static void dumpRarityDistribution(float bonus){
  Map<Integer,Integer> counter=new HashMap<Integer,Integer>();
  WeightedRandomSelector.Distribution<Integer> distribution=randomDimlets.createDistribution(bonus);
  for (  Integer id : dimletIds) {
    counter.put(id,0);
  }
  final int total=10000000;
  for (int i=0; i < total; i++) {
    int id=randomDimlets.select(distribution);
    counter.put(id,counter.get(id) + 1);
  }
  RFTools.log(""String_Node_Str"" + bonus);
  List<Pair<Integer,Integer>> sortedCounters=new ArrayList<Pair<Integer,Integer>>();
  for (  Map.Entry<Integer,Integer> entry : counter.entrySet()) {
    sortedCounters.add(Pair.of(entry.getValue(),entry.getKey()));
  }
  Collections.sort(sortedCounters);
  for (  Pair<Integer,Integer> entry : sortedCounters) {
    int count=entry.getKey();
    int id=entry.getValue();
    float percentage=count * 100.0f / total;
    RFTools.log(""String_Node_Str"" + id + ""String_Node_Str""+ idToDimlet.get(id).getKey().getName()+ ""String_Node_Str""+ idToDisplayName.get(id)+ ""String_Node_Str""+ count+ ""String_Node_Str""+ percentage+ ""String_Node_Str"");
  }
}","public static void dumpRarityDistribution(float bonus){
  Random random=new Random();
  Map<Integer,Integer> counter=new HashMap<Integer,Integer>();
  WeightedRandomSelector.Distribution<Integer> distribution=randomDimlets.createDistribution(bonus);
  for (  Integer id : dimletIds) {
    counter.put(id,0);
  }
  final int total=10000000;
  for (int i=0; i < total; i++) {
    int id=randomDimlets.select(distribution,random);
    counter.put(id,counter.get(id) + 1);
  }
  RFTools.log(""String_Node_Str"" + bonus);
  List<Pair<Integer,Integer>> sortedCounters=new ArrayList<Pair<Integer,Integer>>();
  for (  Map.Entry<Integer,Integer> entry : counter.entrySet()) {
    sortedCounters.add(Pair.of(entry.getValue(),entry.getKey()));
  }
  Collections.sort(sortedCounters);
  for (  Pair<Integer,Integer> entry : sortedCounters) {
    int count=entry.getKey();
    int id=entry.getValue();
    float percentage=count * 100.0f / total;
    RFTools.log(""String_Node_Str"" + id + ""String_Node_Str""+ idToDimlet.get(id).getKey().getName()+ ""String_Node_Str""+ idToDisplayName.get(id)+ ""String_Node_Str""+ count+ ""String_Node_Str""+ percentage+ ""String_Node_Str"");
  }
}",0.98376480912681
166109,"public static Block getRandomMaterialBlock(){
  return idToBlock.get(randomMaterialDimlets.select());
}","public static Block getRandomMaterialBlock(Random random){
  return idToBlock.get(randomMaterialDimlets.select(random));
}",0.9155555555555556
166110,"public static Block getRandomFluidBlock(){
  return idToFluid.get(randomLiquidDimlets.select());
}","public static Block getRandomFluidBlock(Random random){
  return idToFluid.get(randomLiquidDimlets.select(random));
}",0.9116279069767442
166111,"private static void setupWeightedRandomList(Configuration cfg){
  float rarity0=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble();
  float rarity1=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble();
  float rarity2=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble();
  float rarity3=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble();
  float rarity4=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble();
  float rarity5=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble();
  randomDimlets=new WeightedRandomSelector<Integer,Integer>(new Random());
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,Integer>(new Random());
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,Integer>(new Random());
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  for (  Map.Entry<Integer,DimletEntry> entry : idToDimlet.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    if (entry.getValue().getKey().getType() == DimletType.DIMLET_MATERIAL) {
      if (idToBlock.get(entry.getKey()) != null) {
        randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_LIQUID) {
      if (idToFluid.get(entry.getKey()) != null) {
        randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
  }
}","private static void setupWeightedRandomList(Configuration cfg){
  float rarity0=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble();
  float rarity1=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble();
  float rarity2=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble();
  float rarity3=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble();
  float rarity4=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble();
  float rarity5=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble();
  randomDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,Integer>();
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  for (  Map.Entry<Integer,DimletEntry> entry : idToDimlet.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    if (entry.getValue().getKey().getType() == DimletType.DIMLET_MATERIAL) {
      if (idToBlock.get(entry.getKey()) != null) {
        randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_LIQUID) {
      if (idToFluid.get(entry.getKey()) != null) {
        randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
      }
    }
  }
}",0.9890776699029126
166112,"/** 
 * Return a random element.
 */
public E select(){
  return select(defaultDistribution);
}","/** 
 * Return a random element.
 */
public E select(Random random){
  return select(defaultDistribution,random);
}",0.9047619047619048
166113,"public WeightedRandomSelector(Random random){
  this.random=random;
}","public WeightedRandomSelector(){
}",0.6601941747572816
166114,"private void calculateFeatureType(Map<DimletType,List<Integer>> dimlets,List<DimensionDescriptor.DimletDescriptor> modifiers,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_FEATURE);
  if (list.isEmpty()) {
    for (    FeatureType type : FeatureType.values()) {
      if (random.nextFloat() < .4f) {
        featureTypes.add(type);
      }
    }
  }
 else {
    for (    Integer id : list) {
      featureTypes.add(KnownDimletConfiguration.idToFeatureType.get(id));
    }
  }
  List<Block> blocks=new ArrayList<Block>();
  List<Block> fluids=new ArrayList<Block>();
  for (  DimensionDescriptor.DimletDescriptor modifier : modifiers) {
    if (modifier.getType() == DimletType.DIMLET_MATERIAL) {
      Block block=KnownDimletConfiguration.idToBlock.get(modifier.getId());
      blocks.add(block);
    }
 else     if (modifier.getType() == DimletType.DIMLET_LIQUID) {
      Block fluid=KnownDimletConfiguration.idToFluid.get(modifier.getId());
      fluids.add(fluid);
    }
  }
  extraOregen=blocks.toArray(new Block[blocks.size()]);
  fluidsForLakes=fluids.toArray(new Block[fluids.size()]);
}","private void calculateFeatureType(Map<DimletType,List<Integer>> dimlets,List<DimensionDescriptor.DimletDescriptor> modifiers,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_FEATURE);
  if (list.isEmpty()) {
    for (    FeatureType type : FeatureType.values()) {
      if (random.nextFloat() < .4f) {
        featureTypes.add(type);
      }
    }
  }
 else {
    for (    Integer id : list) {
      featureTypes.add(KnownDimletConfiguration.idToFeatureType.get(id));
    }
  }
  List<Block> blocks=new ArrayList<Block>();
  List<Block> fluids=new ArrayList<Block>();
  getMaterialAndFluidModifiers(modifiers,blocks,fluids);
  if (blocks.isEmpty()) {
    while (random.nextFloat() < 0.2f) {
      blocks.add(KnownDimletConfiguration.getRandomMaterialBlock());
    }
  }
  extraOregen=blocks.toArray(new Block[blocks.size()]);
  if (fluids.isEmpty()) {
    while (random.nextFloat() < 0.2f) {
      fluids.add(KnownDimletConfiguration.getRandomFluidBlock());
    }
  }
  fluidsForLakes=fluids.toArray(new Block[fluids.size()]);
}",0.6666666666666666
166115,"private void calculateBiomes(Map<DimletType,List<Integer>> dimlets,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_BIOME);
  for (  Integer id : list) {
    String biomeName=KnownDimletConfiguration.idToBiome.get(id);
    BiomeManager.BiomeEntry entry=findBiomeEntry(biomeName,BiomeManager.BiomeType.COOL);
    entry=entry != null ? entry : findBiomeEntry(biomeName,BiomeManager.BiomeType.WARM);
    entry=entry != null ? entry : findBiomeEntry(biomeName,BiomeManager.BiomeType.DESERT);
    entry=entry != null ? entry : findBiomeEntry(biomeName,BiomeManager.BiomeType.ICY);
    if (entry != null) {
      biomes.add(entry.biome);
    }
  }
}","private void calculateBiomes(Map<DimletType,List<Integer>> dimlets,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_BIOME);
  for (  Integer id : list) {
    biomes.add(KnownDimletConfiguration.idToBiome.get(id));
  }
}",0.512249443207127
166116,"private void calculateTerrainType(Map<DimletType,List<Integer>> dimlets,List<DimensionDescriptor.DimletDescriptor> modifiers,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_TERRAIN);
  terrainType=TerrainType.TERRAIN_VOID;
  if (list.isEmpty()) {
    terrainType=TerrainType.values()[random.nextInt(TerrainType.values().length)];
  }
 else {
    terrainType=KnownDimletConfiguration.idToTerrainType.get(list.get(random.nextInt(list.size())));
  }
  List<Block> blocks=new ArrayList<Block>();
  List<Block> fluids=new ArrayList<Block>();
  for (  DimensionDescriptor.DimletDescriptor modifier : modifiers) {
    if (modifier.getType() == DimletType.DIMLET_MATERIAL) {
      Block block=KnownDimletConfiguration.idToBlock.get(modifier.getId());
      blocks.add(block);
    }
 else     if (modifier.getType() == DimletType.DIMLET_LIQUID) {
      Block fluid=KnownDimletConfiguration.idToFluid.get(modifier.getId());
      fluids.add(fluid);
    }
  }
  if (!blocks.isEmpty()) {
    baseBlockForTerrain=blocks.get(random.nextInt(blocks.size()));
  }
 else {
    baseBlockForTerrain=Blocks.stone;
  }
  if (!fluids.isEmpty()) {
    fluidForTerrain=fluids.get(random.nextInt(fluids.size()));
  }
 else {
    fluidForTerrain=Blocks.water;
  }
}","private void calculateTerrainType(Map<DimletType,List<Integer>> dimlets,List<DimensionDescriptor.DimletDescriptor> modifiers,Random random){
  List<Integer> list=dimlets.get(DimletType.DIMLET_TERRAIN);
  terrainType=TerrainType.TERRAIN_VOID;
  if (list.isEmpty()) {
    terrainType=TerrainType.values()[random.nextInt(TerrainType.values().length)];
  }
 else {
    terrainType=KnownDimletConfiguration.idToTerrainType.get(list.get(random.nextInt(list.size())));
  }
  List<Block> blocks=new ArrayList<Block>();
  List<Block> fluids=new ArrayList<Block>();
  getMaterialAndFluidModifiers(modifiers,blocks,fluids);
  if (!blocks.isEmpty()) {
    baseBlockForTerrain=blocks.get(random.nextInt(blocks.size()));
  }
 else {
    if (random.nextFloat() < 0.6f) {
      baseBlockForTerrain=Blocks.stone;
    }
 else {
      baseBlockForTerrain=KnownDimletConfiguration.getRandomMaterialBlock();
    }
  }
  if (!fluids.isEmpty()) {
    fluidForTerrain=fluids.get(random.nextInt(fluids.size()));
  }
 else {
    if (random.nextFloat() < 0.6f) {
      fluidForTerrain=Blocks.water;
    }
 else {
      fluidForTerrain=KnownDimletConfiguration.getRandomFluidBlock();
    }
  }
}",0.5610561056105611
166117,"/** 
 * Get all dimlets which are currently already registered in the config file.
 * @param cfg
 * @return
 */
private static Map<DimletKey,Integer> getDimletsFromConfig(Configuration cfg){
  Map<DimletKey,Integer> idsInConfig;
  idsInConfig=new HashMap<DimletKey,Integer>();
  ConfigCategory category=cfg.getCategory(CATEGORY_KNOWNDIMLETS);
  for (  Map.Entry<String,Property> entry : category.entrySet()) {
    String key=entry.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int indexDotAfterType=key.indexOf('.',7);
      String typeName=key.substring(7,indexDotAfterType);
      DimletType type=DimletType.getTypeByName(typeName);
      String name=key.substring(indexDotAfterType + 1);
      Integer id=entry.getValue().getInt();
      if (id != -1) {
        if (id > lastId) {
          lastId=id;
        }
        idsInConfig.put(new DimletKey(type,name),id);
      }
    }
  }
  return idsInConfig;
}","/** 
 * Get all dimlets which are currently already registered in the config file.
 */
private static Map<DimletKey,Integer> getDimletsFromConfig(Configuration cfg){
  Map<DimletKey,Integer> idsInConfig;
  idsInConfig=new HashMap<DimletKey,Integer>();
  ConfigCategory category=cfg.getCategory(CATEGORY_KNOWNDIMLETS);
  for (  Map.Entry<String,Property> entry : category.entrySet()) {
    String key=entry.getKey();
    if (key.startsWith(""String_Node_Str"")) {
      int indexDotAfterType=key.indexOf('.',7);
      String typeName=key.substring(7,indexDotAfterType);
      DimletType type=DimletType.getTypeByName(typeName);
      String name=key.substring(indexDotAfterType + 1);
      Integer id=entry.getValue().getInt();
      if (id != -1) {
        if (id > lastId) {
          lastId=id;
        }
        idsInConfig.put(new DimletKey(type,name),id);
      }
    }
  }
  return idsInConfig;
}",0.9863013698630136
166118,"private static void initBiomeItems(Configuration cfg,Map<DimletKey,Integer> idsInConfig){
  BiomeGenBase[] biomeGenArray=BiomeGenBase.getBiomeGenArray();
  for (  BiomeGenBase biome : biomeGenArray) {
    if (biome != null) {
      String name=biome.biomeName;
      int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_BIOME,name));
      idToBiome.put(id,name);
      idToDisplayName.put(id,DimletType.DIMLET_BIOME.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
}","private static void initBiomeItems(Configuration cfg,Map<DimletKey,Integer> idsInConfig){
  BiomeGenBase[] biomeGenArray=BiomeGenBase.getBiomeGenArray();
  for (  BiomeGenBase biome : biomeGenArray) {
    if (biome != null) {
      String name=biome.biomeName;
      int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_BIOME,name));
      idToBiome.put(id,biome);
      idToDisplayName.put(id,DimletType.DIMLET_BIOME.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
}",0.9950347567030784
166119,"private static void setupWeightedRandomList(Configuration cfg){
  randomDimlets=new WeightedRandomSelector<Integer,Integer>(new Random());
  randomDimlets.addRarity(RARITY_0,(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble());
  randomDimlets.addRarity(RARITY_1,(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble());
  randomDimlets.addRarity(RARITY_2,(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble());
  randomDimlets.addRarity(RARITY_3,(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble());
  randomDimlets.addRarity(RARITY_4,(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble());
  randomDimlets.addRarity(RARITY_5,(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble());
  for (  Map.Entry<Integer,DimletEntry> entry : idToDimlet.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
  }
}","private static void setupWeightedRandomList(Configuration cfg){
  float rarity0=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",250.0f).getDouble();
  float rarity1=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",150.0f).getDouble();
  float rarity2=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",90.0f).getDouble();
  float rarity3=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",40.0f).getDouble();
  float rarity4=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",20.0f).getDouble();
  float rarity5=(float)cfg.get(CATEGORY_RARITY,""String_Node_Str"",1.0f).getDouble();
  randomDimlets=new WeightedRandomSelector<Integer,Integer>(new Random());
  setupRarity(randomDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomMaterialDimlets=new WeightedRandomSelector<Integer,Integer>(new Random());
  setupRarity(randomMaterialDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  randomLiquidDimlets=new WeightedRandomSelector<Integer,Integer>(new Random());
  setupRarity(randomLiquidDimlets,rarity0,rarity1,rarity2,rarity3,rarity4,rarity5);
  for (  Map.Entry<Integer,DimletEntry> entry : idToDimlet.entrySet()) {
    randomDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    if (entry.getValue().getKey().getType() == DimletType.DIMLET_MATERIAL) {
      randomMaterialDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    }
 else     if (entry.getValue().getKey().getType() == DimletType.DIMLET_LIQUID) {
      randomLiquidDimlets.addItem(entry.getValue().getRarity(),entry.getKey());
    }
  }
}",0.5194805194805194
166120,"private void groupDimletsAndModifiers(List<DimletDescriptor> descriptors,Map<DimletType,List<Integer>> dimlets,Map<DimletType,List<DimletDescriptor>> modifiers,List<DimletDescriptor> currentModifiers){
  for (  DimletDescriptor descriptor : descriptors) {
    DimletType type=descriptor.getType();
    int id=descriptor.getId();
    if (type.isModifier()) {
      currentModifiers.add(descriptor);
    }
 else {
      if (!currentModifiers.isEmpty()) {
        List<DimletDescriptor> newModifiers=new ArrayList<DimletDescriptor>();
        for (        DimletDescriptor modifier : currentModifiers) {
          if (type.isModifiedBy(modifier.getType())) {
            add(modifiers,type,modifier);
          }
 else {
            newModifiers.add(modifier);
          }
        }
        currentModifiers=newModifiers;
      }
      add(dimlets,type,id);
    }
  }
}","private void groupDimletsAndModifiers(List<DimletDescriptor> descriptors,Map<DimletType,List<Integer>> dimlets,Map<DimletType,List<DimletDescriptor>> modifiers,List<DimletDescriptor> currentModifiers){
  for (  DimletDescriptor descriptor : descriptors) {
    DimletType type=descriptor.getType();
    int id=descriptor.getId();
    if (type.isModifier()) {
      currentModifiers.add(descriptor);
    }
 else {
      if (!currentModifiers.isEmpty()) {
        List<DimletDescriptor> copy=new ArrayList<DimletDescriptor>(currentModifiers);
        for (        DimletDescriptor modifier : copy) {
          if (type.isModifiedBy(modifier.getType())) {
            add(modifiers,type,modifier);
            currentModifiers.remove(modifier);
          }
        }
      }
      add(dimlets,type,id);
    }
  }
}",0.837708830548926
166121,"public void postInit(FMLPostInitializationEvent e){
  KnownDimletConfiguration.init(dimletConfig);
  if (mainConfig.hasChanged()) {
    mainConfig.save();
  }
  if (dimletConfig.hasChanged()) {
    dimletConfig.save();
  }
  mainConfig=null;
  dimletConfig=null;
  WrenchChecker.init();
}","public void postInit(FMLPostInitializationEvent e){
  dimletConfig.load();
  KnownDimletConfiguration.init(dimletConfig);
  if (mainConfig.hasChanged()) {
    mainConfig.save();
  }
  if (dimletConfig.hasChanged()) {
    dimletConfig.save();
  }
  mainConfig=null;
  dimletConfig=null;
  WrenchChecker.init();
}",0.9616026711185308
166122,"private static int registerDimlet(Configuration cfg,DimletKey key){
  String k=""String_Node_Str"" + key.getType().getName() + ""String_Node_Str""+ key.getName();
  int id=-1;
  if (dimletBlackList.contains(key)) {
    id=cfg.get(CATEGORY_KNOWNDIMLETS,k,-1).getInt();
  }
 else {
    id=cfg.get(CATEGORY_KNOWNDIMLETS,k,lastId + 1).getInt();
    if (id > lastId) {
      lastId=id;
    }
  }
  if (id == -1) {
    return -1;
  }
  int rfCreateCost=checkCostConfig(cfg,""String_Node_Str"",key,dimletBuiltinRfCreate,typeRfCreateCost);
  int rfMaintainCost=checkCostConfig(cfg,""String_Node_Str"",key,dimletBuiltinRfMaintain,typeRfMaintainCost);
  int tickCost=checkCostConfig(cfg,""String_Node_Str"",key,dimletBuiltinTickCost,typeTickCost);
  int rarity=checkCostConfig(cfg,""String_Node_Str"",key,dimletBuiltinRarity,typeRarity);
  DimletEntry entry=new DimletEntry(key,rfCreateCost,rfMaintainCost,tickCost,rarity);
  registerDimletEntry(id,entry);
  return id;
}","private static int registerDimlet(Configuration cfg,Map<DimletKey,Integer> idsInConfig,DimletKey key){
  String k=""String_Node_Str"" + key.getType().getName() + ""String_Node_Str""+ key.getName();
  int id=-1;
  if (dimletBlackList.contains(key)) {
    id=cfg.get(CATEGORY_KNOWNDIMLETS,k,-1).getInt();
  }
 else {
    if (idsInConfig.containsKey(key)) {
      id=idsInConfig.get(key);
    }
 else {
      id=cfg.get(CATEGORY_KNOWNDIMLETS,k,lastId + 1).getInt();
      if (id > lastId) {
        lastId=id;
      }
    }
  }
  if (id == -1) {
    return -1;
  }
  int rfCreateCost=checkCostConfig(cfg,""String_Node_Str"",key,dimletBuiltinRfCreate,typeRfCreateCost);
  int rfMaintainCost=checkCostConfig(cfg,""String_Node_Str"",key,dimletBuiltinRfMaintain,typeRfMaintainCost);
  int tickCost=checkCostConfig(cfg,""String_Node_Str"",key,dimletBuiltinTickCost,typeTickCost);
  int rarity=checkCostConfig(cfg,""String_Node_Str"",key,dimletBuiltinRarity,typeRarity);
  DimletEntry entry=new DimletEntry(key,rfCreateCost,rfMaintainCost,tickCost,rarity);
  registerDimletEntry(id,entry);
  return id;
}",0.9340551181102362
166123,"private static void initLiquidItems(Configuration cfg){
  Map<String,Fluid> fluidMap=FluidRegistry.getRegisteredFluids();
  for (  Map.Entry<String,Fluid> me : fluidMap.entrySet()) {
    if (me.getValue().canBePlacedInWorld()) {
      int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_LIQUID,me.getKey()));
      String displayName=new FluidStack(me.getValue(),1).getLocalizedName();
      idToDisplayName.put(id,DimletType.DIMLET_LIQUID.getName() + ""String_Node_Str"" + displayName+ ""String_Node_Str"");
    }
  }
}","private static void initLiquidItems(Configuration cfg,Map<DimletKey,Integer> idsInConfig){
  Map<String,Fluid> fluidMap=FluidRegistry.getRegisteredFluids();
  for (  Map.Entry<String,Fluid> me : fluidMap.entrySet()) {
    if (me.getValue().canBePlacedInWorld()) {
      int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_LIQUID,me.getKey()));
      String displayName=new FluidStack(me.getValue(),1).getLocalizedName();
      idToDisplayName.put(id,DimletType.DIMLET_LIQUID.getName() + ""String_Node_Str"" + displayName+ ""String_Node_Str"");
    }
  }
}",0.9569202566452796
166124,"private static int initFeatureItem(Configuration cfg,String name,FeatureType featureType){
  int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_FEATURE,name));
  idToFeatureType.put(id,featureType);
  idToDisplayName.put(id,DimletType.DIMLET_FEATURE.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}","private static int initFeatureItem(Configuration cfg,Map<DimletKey,Integer> idsInConfig,String name,FeatureType featureType){
  int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_FEATURE,name));
  idToFeatureType.put(id,featureType);
  idToDisplayName.put(id,DimletType.DIMLET_FEATURE.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}",0.9333333333333332
166125,"private static void initMaterialItem(Configuration cfg,Block block){
  int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_MATERIAL,block.getUnlocalizedName()));
  ItemStack stack=new ItemStack(block);
  idToDisplayName.put(id,DimletType.DIMLET_MATERIAL.getName() + ""String_Node_Str"" + stack.getDisplayName()+ ""String_Node_Str"");
}","private static void initMaterialItem(Configuration cfg,Map<DimletKey,Integer> idsInConfig,Block block){
  int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_MATERIAL,block.getUnlocalizedName()));
  ItemStack stack=new ItemStack(block);
  idToDisplayName.put(id,DimletType.DIMLET_MATERIAL.getName() + ""String_Node_Str"" + stack.getDisplayName()+ ""String_Node_Str"");
}",0.9348127600554784
166126,"private static int initSkyItem(Configuration cfg,String name){
  int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_SKY,name));
  idToDisplayName.put(id,DimletType.DIMLET_SKY.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}","private static int initSkyItem(Configuration cfg,Map<DimletKey,Integer> idsInConfig,String name){
  int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_SKY,name));
  idToDisplayName.put(id,DimletType.DIMLET_SKY.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}",0.9153153153153152
166127,"private static int initStructureItem(Configuration cfg,String name,StructureType structureType){
  int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_STRUCTURE,name));
  idToStructureType.put(id,structureType);
  idToDisplayName.put(id,DimletType.DIMLET_STRUCTURE.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}","private static int initStructureItem(Configuration cfg,Map<DimletKey,Integer> idsInConfig,String name,StructureType structureType){
  int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_STRUCTURE,name));
  idToStructureType.put(id,structureType);
  idToDisplayName.put(id,DimletType.DIMLET_STRUCTURE.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}",0.9358799454297408
166128,"private static int initTerrainItem(Configuration cfg,String name,TerrainType terrainType){
  int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_TERRAIN,name));
  idToTerrainType.put(id,terrainType);
  idToDisplayName.put(id,DimletType.DIMLET_TERRAIN.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}","private static int initTerrainItem(Configuration cfg,Map<DimletKey,Integer> idsInConfig,String name,TerrainType terrainType){
  int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_TERRAIN,name));
  idToTerrainType.put(id,terrainType);
  idToDisplayName.put(id,DimletType.DIMLET_TERRAIN.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}",0.9333333333333332
166129,"/** 
 * This initializes all dimlets based on all loaded mods. This should be called from postInit.
 */
public static void init(Configuration cfg){
  readBuiltinConfig();
  initBiomeItems(cfg);
  initMaterialItem(cfg,Blocks.diamond_block);
  initMaterialItem(cfg,Blocks.diamond_ore);
  initMaterialItem(cfg,Blocks.gold_block);
  initMaterialItem(cfg,Blocks.gold_ore);
  initFoliageItem(cfg);
  initLiquidItems(cfg);
  initMobItem(cfg,EntityZombie.class,""String_Node_Str"");
  initMobItem(cfg,EntitySkeleton.class,""String_Node_Str"");
  initSkyItem(cfg,""String_Node_Str"");
  initSkyItem(cfg,""String_Node_Str"");
  int idStructureNone=initStructureItem(cfg,""String_Node_Str"",StructureType.STRUCTURE_NONE);
  initStructureItem(cfg,""String_Node_Str"",StructureType.STRUCTURE_VILLAGE);
  initStructureItem(cfg,""String_Node_Str"",StructureType.STRUCTURE_STRONGHOLD);
  initStructureItem(cfg,""String_Node_Str"",StructureType.STRUCTURE_DUNGEON);
  initStructureItem(cfg,""String_Node_Str"",StructureType.STRUCTURE_FORTRESS);
  initStructureItem(cfg,""String_Node_Str"",StructureType.STRUCTURE_MINESHAFT);
  initStructureItem(cfg,""String_Node_Str"",StructureType.STRUCTURE_SCATTERED);
  int idTerrainVoid=initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_VOID);
  int idTerrainFlat=initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_FLAT);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_AMPLIFIED);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_NORMAL);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_CAVES);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_ISLAND);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_SPHERES);
  int idFeatureNone=initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_NONE);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_CAVES);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_RAVINES);
  initTimeItem(cfg,""String_Node_Str"");
  initTimeItem(cfg,""String_Node_Str"");
  initTimeItem(cfg,""String_Node_Str"");
  ModItems.knownDimlet=new KnownDimlet();
  ModItems.knownDimlet.setUnlocalizedName(""String_Node_Str"");
  ModItems.knownDimlet.setCreativeTab(RFTools.tabRfToolsDimlets);
  GameRegistry.registerItem(ModItems.knownDimlet,""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(ModItems.dimletTemplate),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',ModItems.dimensionalShard,'p',Items.paper});
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idFeatureNone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.string,'p',Items.paper});
  craftableDimlets.add(idFeatureNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idStructureNone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.bone,'p',Items.paper});
  craftableDimlets.add(idStructureNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idTerrainVoid),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.brick,'p',Items.paper});
  craftableDimlets.add(idTerrainVoid);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idTerrainFlat),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.brick,'p',ModItems.dimletTemplate});
  craftableDimlets.add(idTerrainFlat);
  setupChestLoot();
}","/** 
 * This initializes all dimlets based on all loaded mods. This should be called from postInit.
 */
public static void init(Configuration cfg){
  readBuiltinConfig();
  Map<DimletKey,Integer> idsInConfig=getDimletsFromConfig(cfg);
  initBiomeItems(cfg,idsInConfig);
  initMaterialItem(cfg,idsInConfig,Blocks.diamond_block);
  initMaterialItem(cfg,idsInConfig,Blocks.diamond_ore);
  initMaterialItem(cfg,idsInConfig,Blocks.gold_block);
  initMaterialItem(cfg,idsInConfig,Blocks.gold_ore);
  initFoliageItem(cfg,idsInConfig);
  initLiquidItems(cfg,idsInConfig);
  initMobItem(cfg,idsInConfig,EntityZombie.class,""String_Node_Str"");
  initMobItem(cfg,idsInConfig,EntitySkeleton.class,""String_Node_Str"");
  initSkyItem(cfg,idsInConfig,""String_Node_Str"");
  initSkyItem(cfg,idsInConfig,""String_Node_Str"");
  int idStructureNone=initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_NONE);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_VILLAGE);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_STRONGHOLD);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_DUNGEON);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_FORTRESS);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_MINESHAFT);
  initStructureItem(cfg,idsInConfig,""String_Node_Str"",StructureType.STRUCTURE_SCATTERED);
  int idTerrainVoid=initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_VOID);
  int idTerrainFlat=initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_FLAT);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_AMPLIFIED);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_NORMAL);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_CAVES);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_ISLAND);
  initTerrainItem(cfg,idsInConfig,""String_Node_Str"",TerrainType.TERRAIN_SPHERES);
  int idFeatureNone=initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_NONE);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_CAVES);
  initFeatureItem(cfg,idsInConfig,""String_Node_Str"",FeatureType.FEATURE_RAVINES);
  initTimeItem(cfg,idsInConfig,""String_Node_Str"");
  initTimeItem(cfg,idsInConfig,""String_Node_Str"");
  initTimeItem(cfg,idsInConfig,""String_Node_Str"");
  ModItems.knownDimlet=new KnownDimlet();
  ModItems.knownDimlet.setUnlocalizedName(""String_Node_Str"");
  ModItems.knownDimlet.setCreativeTab(RFTools.tabRfToolsDimlets);
  GameRegistry.registerItem(ModItems.knownDimlet,""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(ModItems.dimletTemplate),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',ModItems.dimensionalShard,'p',Items.paper});
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idFeatureNone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.string,'p',Items.paper});
  craftableDimlets.add(idFeatureNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idStructureNone),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.bone,'p',Items.paper});
  craftableDimlets.add(idStructureNone);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idTerrainVoid),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.brick,'p',Items.paper});
  craftableDimlets.add(idTerrainVoid);
  GameRegistry.addRecipe(new ItemStack(ModItems.knownDimlet,1,idTerrainFlat),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.redstone,'w',Items.brick,'p',ModItems.dimletTemplate});
  craftableDimlets.add(idTerrainFlat);
  setupChestLoot();
}",0.9193415637860082
166130,"private static int initMobItem(Configuration cfg,Class<? extends EntityLiving> entity,String name){
  int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_MOBS,name));
  idToDisplayName.put(id,DimletType.DIMLET_MOBS.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}","private static int initMobItem(Configuration cfg,Map<DimletKey,Integer> idsInConfig,Class<? extends EntityLiving> entity,String name){
  int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_MOBS,name));
  idToDisplayName.put(id,DimletType.DIMLET_MOBS.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}",0.9257503949447078
166131,"private static void initFoliageItem(Configuration cfg){
  int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_FOLIAGE,""String_Node_Str""));
  idToDisplayName.put(id,""String_Node_Str"");
}","private static void initFoliageItem(Configuration cfg,Map<DimletKey,Integer> idsInConfig){
  int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_FOLIAGE,""String_Node_Str""));
  idToDisplayName.put(id,""String_Node_Str"");
}",0.8904428904428905
166132,"private static void initBiomeItems(Configuration cfg){
  BiomeGenBase[] biomeGenArray=BiomeGenBase.getBiomeGenArray();
  for (  BiomeGenBase biome : biomeGenArray) {
    if (biome != null) {
      String name=biome.biomeName;
      int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_BIOME,name));
      idToBiome.put(id,name);
      idToDisplayName.put(id,DimletType.DIMLET_BIOME.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
}","private static void initBiomeItems(Configuration cfg,Map<DimletKey,Integer> idsInConfig){
  BiomeGenBase[] biomeGenArray=BiomeGenBase.getBiomeGenArray();
  for (  BiomeGenBase biome : biomeGenArray) {
    if (biome != null) {
      String name=biome.biomeName;
      int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_BIOME,name));
      idToBiome.put(id,name);
      idToDisplayName.put(id,DimletType.DIMLET_BIOME.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
}",0.9509906152241918
166133,"private static int initTimeItem(Configuration cfg,String name){
  int id=registerDimlet(cfg,new DimletKey(DimletType.DIMLET_TIME,name));
  idToDisplayName.put(id,DimletType.DIMLET_TIME.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}","private static int initTimeItem(Configuration cfg,Map<DimletKey,Integer> idsInConfig,String name){
  int id=registerDimlet(cfg,idsInConfig,new DimletKey(DimletType.DIMLET_TIME,name));
  idToDisplayName.put(id,DimletType.DIMLET_TIME.getName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  return id;
}",0.9162210338680928
166134,"/** 
 * Do your mod setup. Build whatever data structures you care about. Register recipes.
 */
@EventHandler public void init(FMLInitializationEvent e){
  this.proxy.init(e);
}","/** 
 * Do your mod setup. Build whatever data structures you care about. Register recipes.
 */
@EventHandler public void init(FMLInitializationEvent e){
  this.proxy.init(e);
  channels=NetworkRegistry.INSTANCE.newChannel(""String_Node_Str"",DimensionSyncChannelHandler.instance);
}",0.7729257641921398
166135,"@SubscribeEvent public void unloadEvent(WorldEvent.Unload evt){
  if (evt.world.isRemote) {
    return;
  }
  RfToolsDimensionManager.unregisterDimensions();
}","@SubscribeEvent public void unloadEvent(WorldEvent.Unload evt){
  if (evt.world.isRemote) {
    return;
  }
  int d=evt.world.provider.dimensionId;
  if (d == 0) {
    RfToolsDimensionManager.unregisterDimensions();
  }
}",0.8368421052631579
166136,"private void performTeleport(){
  if (!isDestinationStillValid()) {
    applyBadEffectIfNeeded(10);
    RFTools.warn(teleportingPlayer,""String_Node_Str"");
    clearTeleport(200);
    return;
  }
  int currentId=teleportingPlayer.worldObj.provider.dimensionId;
  if (currentId != teleportDestination.getDimension()) {
    MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)teleportingPlayer,teleportDestination.getDimension());
  }
  Coordinate c=teleportDestination.getCoordinate();
  RFTools.message(teleportingPlayer,""String_Node_Str"");
  teleportingPlayer.setPositionAndUpdate(c.getX(),c.getY() + 1,c.getZ());
  int severity=consumeReceiverEnergy(c,teleportDestination.getDimension());
  if (!applyBadEffectIfNeeded(severity)) {
    if (TeleportConfiguration.teleportVolume >= 0.01) {
      worldObj.playSoundAtEntity(teleportingPlayer,RFTools.MODID + ""String_Node_Str"",TeleportConfiguration.teleportVolume,1.0f);
    }
  }
  teleportingPlayer=null;
}","private void performTeleport(){
  if (!isDestinationStillValid()) {
    applyBadEffectIfNeeded(10);
    RFTools.warn(teleportingPlayer,""String_Node_Str"");
    clearTeleport(200);
    return;
  }
  Coordinate c=teleportDestination.getCoordinate();
  int currentId=teleportingPlayer.worldObj.provider.dimensionId;
  if (currentId != teleportDestination.getDimension()) {
    WorldServer worldServerForDimension=MinecraftServer.getServer().worldServerForDimension(teleportDestination.getDimension());
    MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)teleportingPlayer,teleportDestination.getDimension(),new RfToolsTeleporter(worldServerForDimension,c.getX(),c.getY() + 1,c.getZ()));
  }
 else {
    teleportingPlayer.setPositionAndUpdate(c.getX(),c.getY() + 1,c.getZ());
  }
  RFTools.message(teleportingPlayer,""String_Node_Str"");
  int severity=consumeReceiverEnergy(c,teleportDestination.getDimension());
  if (!applyBadEffectIfNeeded(severity)) {
    if (TeleportConfiguration.teleportVolume >= 0.01) {
      worldObj.playSoundAtEntity(teleportingPlayer,RFTools.MODID + ""String_Node_Str"",TeleportConfiguration.teleportVolume,1.0f);
    }
  }
  teleportingPlayer=null;
}",0.7904461469130238
166137,"@Override public void execute(ICommandSender sender,String[] args){
  if (args.length < 5) {
    sender.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + ""String_Node_Str""));
    return;
  }
 else   if (args.length > 5) {
    sender.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + ""String_Node_Str""));
    return;
  }
  int dim=fetchInt(sender,args,1);
  int x=fetchInt(sender,args,2);
  int y=fetchInt(sender,args,3);
  int z=fetchInt(sender,args,4);
  if (sender instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)sender;
    int currentId=player.worldObj.provider.dimensionId;
    if (currentId != dim) {
      MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)player,dim);
    }
    player.setPositionAndUpdate(x,y,z);
  }
}","@Override public void execute(ICommandSender sender,String[] args){
  if (args.length < 5) {
    sender.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + ""String_Node_Str""));
    return;
  }
 else   if (args.length > 5) {
    sender.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + ""String_Node_Str""));
    return;
  }
  int dim=fetchInt(sender,args,1);
  int x=fetchInt(sender,args,2);
  int y=fetchInt(sender,args,3);
  int z=fetchInt(sender,args,4);
  if (sender instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)sender;
    int currentId=player.worldObj.provider.dimensionId;
    if (currentId != dim) {
      WorldServer worldServerForDimension=MinecraftServer.getServer().worldServerForDimension(dim);
      MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)player,dim,new RfToolsTeleporter(worldServerForDimension,x,y,z));
    }
 else {
      player.setPositionAndUpdate(x,y,z);
    }
  }
}",0.905954368391764
166138,"@Override public IMessage onMessage(PacketForceTeleport message,MessageContext ctx){
  EntityPlayer player=ctx.getServerHandler().playerEntity;
  int currentId=player.worldObj.provider.dimensionId;
  if (currentId != message.dim) {
    MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)player,message.dim);
  }
  player.setPositionAndUpdate(message.x,message.y + 1,message.z);
  return null;
}","@Override public IMessage onMessage(PacketForceTeleport message,MessageContext ctx){
  EntityPlayer player=ctx.getServerHandler().playerEntity;
  int currentId=player.worldObj.provider.dimensionId;
  if (currentId != message.dim) {
    WorldServer worldServerForDimension=MinecraftServer.getServer().worldServerForDimension(message.dim);
    MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)player,message.dim,new RfToolsTeleporter(worldServerForDimension,message.x,message.y + 1,message.z));
  }
 else {
    player.setPositionAndUpdate(message.x,message.y + 1,message.z);
  }
  return null;
}",0.8137164040778498
166139,"public static void registerMessages(){
  INSTANCE=NetworkRegistry.INSTANCE.newSimpleChannel(""String_Node_Str"");
  INSTANCE.registerMessage(PacketRFMonitor.class,PacketRFMonitor.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetAdjacentBlocks.class,PacketGetAdjacentBlocks.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketCrafter.class,PacketCrafter.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetInventory.class,PacketGetInventory.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketSearchItems.class,PacketSearchItems.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetConnectedBlocks.class,PacketGetConnectedBlocks.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetTransmitters.class,PacketGetTransmitters.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetReceivers.class,PacketGetReceivers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketServerCommand.class,PacketServerCommand.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketRequestIntegerFromServer.class,PacketRequestIntegerFromServer.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetAllReceivers.class,PacketGetAllReceivers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketForceTeleport.class,PacketForceTeleport.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetPlayers.class,PacketGetPlayers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetFilters.class,PacketGetFilters.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetDelightingInfo.class,PacketGetDelightingInfo.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketReturnEnergy.class,PacketReturnEnergy.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketInventoryReady.class,PacketInventoryReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketSearchReady.class,PacketSearchReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketAdjacentBlocksReady.class,PacketAdjacentBlocksReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketConnectedBlocksReady.class,PacketConnectedBlocksReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketTransmittersReady.class,PacketTransmittersReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketReceiversReady.class,PacketReceiversReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketIntegerFromServer.class,PacketIntegerFromServer.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketAllReceiversReady.class,PacketAllReceiversReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketPlayersReady.class,PacketPlayersReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketFiltersReady.class,PacketFiltersReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketDelightingInfoReady.class,PacketDelightingInfoReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketSyncDimensionInfo.class,PacketSyncDimensionInfo.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketGetDimensionEnergy.class,PacketGetDimensionEnergy.class,nextID(),Side.CLIENT);
}","public static void registerMessages(){
  INSTANCE=NetworkRegistry.INSTANCE.newSimpleChannel(""String_Node_Str"");
  INSTANCE.registerMessage(PacketRFMonitor.class,PacketRFMonitor.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetAdjacentBlocks.class,PacketGetAdjacentBlocks.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketCrafter.class,PacketCrafter.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetInventory.class,PacketGetInventory.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketSearchItems.class,PacketSearchItems.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetConnectedBlocks.class,PacketGetConnectedBlocks.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetTransmitters.class,PacketGetTransmitters.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetReceivers.class,PacketGetReceivers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketServerCommand.class,PacketServerCommand.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketRequestIntegerFromServer.class,PacketRequestIntegerFromServer.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetAllReceivers.class,PacketGetAllReceivers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketForceTeleport.class,PacketForceTeleport.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetPlayers.class,PacketGetPlayers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetFilters.class,PacketGetFilters.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetDelightingInfo.class,PacketGetDelightingInfo.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetDimensionEnergy.class,PacketGetDimensionEnergy.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketInventoryReady.class,PacketInventoryReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketSearchReady.class,PacketSearchReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketAdjacentBlocksReady.class,PacketAdjacentBlocksReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketConnectedBlocksReady.class,PacketConnectedBlocksReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketTransmittersReady.class,PacketTransmittersReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketReceiversReady.class,PacketReceiversReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketIntegerFromServer.class,PacketIntegerFromServer.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketAllReceiversReady.class,PacketAllReceiversReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketPlayersReady.class,PacketPlayersReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketFiltersReady.class,PacketFiltersReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketDelightingInfoReady.class,PacketDelightingInfoReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketSyncDimensionInfoHandler.class,PacketSyncDimensionInfo.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketReturnEnergyHandler.class,PacketReturnEnergy.class,nextID(),Side.CLIENT);
}",0.9750631313131312
166140,"public List<TeleportDestinationClientInfo> searchReceivers(){
  TeleportDestinations destinations=TeleportDestinations.getDestinations(worldObj);
  Set<TeleportDestination> duplicateChecker=new HashSet<TeleportDestination>();
  List<TeleportDestinationClientInfo> list=new ArrayList<TeleportDestinationClientInfo>(destinations.getValidDestinations());
  for (  TeleportDestinationClientInfo c : list) {
    duplicateChecker.add(new TeleportDestination(c.getCoordinate(),c.getDimension()));
  }
  RfToolsDimensionManager dimensionManager=RfToolsDimensionManager.getDimensionManager(worldObj);
  Map<Integer,DimensionDescriptor> dimensions=dimensionManager.getDimensions();
  for (  Map.Entry<Integer,DimensionDescriptor> me : dimensions.entrySet()) {
    Integer id=me.getKey();
    TeleportDestination c=new TeleportDestination(new Coordinate(0,70,0),id);
    if (!duplicateChecker.contains(c)) {
      duplicateChecker.add(c);
      TeleportDestinationClientInfo destinationClientInfo=new TeleportDestinationClientInfo(c);
      World w=DimensionManager.getWorld(id);
      String dimName=null;
      if (w != null) {
        dimName=DimensionManager.getProvider(id).getDimensionName();
      }
 else {
        DimensionInformation info=dimensionManager.getDimensionInformation(id);
        dimName=info.getName();
      }
      if (dimName == null || dimName.trim().isEmpty()) {
        dimName=""String_Node_Str"" + id;
      }
      destinationClientInfo.setDimensionName(dimName);
      list.add(destinationClientInfo);
    }
  }
  return list;
}","private List<TeleportDestinationClientInfo> searchReceivers(){
  TeleportDestinations destinations=TeleportDestinations.getDestinations(worldObj);
  Set<TeleportDestination> duplicateChecker=new HashSet<TeleportDestination>();
  List<TeleportDestinationClientInfo> list=new ArrayList<TeleportDestinationClientInfo>(destinations.getValidDestinations());
  for (  TeleportDestinationClientInfo c : list) {
    duplicateChecker.add(new TeleportDestination(c.getCoordinate(),c.getDimension()));
  }
  RfToolsDimensionManager dimensionManager=RfToolsDimensionManager.getDimensionManager(worldObj);
  Map<Integer,DimensionDescriptor> dimensions=dimensionManager.getDimensions();
  for (  Map.Entry<Integer,DimensionDescriptor> me : dimensions.entrySet()) {
    Integer id=me.getKey();
    TeleportDestination c=new TeleportDestination(new Coordinate(0,70,0),id);
    if (!duplicateChecker.contains(c)) {
      duplicateChecker.add(c);
      TeleportDestinationClientInfo destinationClientInfo=new TeleportDestinationClientInfo(c);
      World w=DimensionManager.getWorld(id);
      String dimName=null;
      if (w != null) {
        dimName=DimensionManager.getProvider(id).getDimensionName();
      }
 else {
        DimensionInformation info=dimensionManager.getDimensionInformation(id);
        dimName=info.getName();
      }
      if (dimName == null || dimName.trim().isEmpty()) {
        dimName=""String_Node_Str"" + id;
      }
      destinationClientInfo.setDimensionName(dimName);
      list.add(destinationClientInfo);
    }
  }
  return list;
}",0.9964504678928686
166141,"private int dial(String player,Coordinate transmitter,int transDim,Coordinate coordinate,int dimension){
  World transWorld=RfToolsDimensionManager.getDimensionManager(worldObj).getWorldForDimension(transDim);
  if (transWorld == null) {
    return DialingDeviceTileEntity.DIAL_INVALID_SOURCE_MASK;
  }
  MatterTransmitterTileEntity transmitterTileEntity=(MatterTransmitterTileEntity)transWorld.getTileEntity(transmitter.getX(),transmitter.getY(),transmitter.getZ());
  if (!transmitterTileEntity.checkAccess(player)) {
    return DialingDeviceTileEntity.DIAL_TRANSMITTER_NOACCESS;
  }
  if (coordinate == null) {
    clearBeam(transmitter,transWorld);
    transmitterTileEntity.setTeleportDestination(null);
    return DialingDeviceTileEntity.DIAL_INTERRUPTED;
  }
  TeleportDestinations destinations=TeleportDestinations.getDestinations(worldObj);
  TeleportDestination teleportDestination=destinations.getDestination(coordinate,dimension);
  if (teleportDestination == null) {
    return DialingDeviceTileEntity.DIAL_INVALID_DESTINATION_MASK;
  }
  Coordinate c=teleportDestination.getCoordinate();
  World recWorld=RfToolsDimensionManager.getDimensionManager(worldObj).getWorldForDimension(teleportDestination.getDimension());
  if (recWorld == null) {
    return DialingDeviceTileEntity.DIAL_INVALID_DESTINATION_MASK;
  }
  TileEntity tileEntity=recWorld.getTileEntity(c.getX(),c.getY(),c.getZ());
  if (!(tileEntity instanceof MatterReceiverTileEntity)) {
    return DialingDeviceTileEntity.DIAL_INVALID_DESTINATION_MASK;
  }
  MatterReceiverTileEntity matterReceiverTileEntity=(MatterReceiverTileEntity)tileEntity;
  if (!matterReceiverTileEntity.checkAccess(player)) {
    return DialingDeviceTileEntity.DIAL_RECEIVER_NOACCESS;
  }
  int cost=TeleportConfiguration.rfPerDial;
  if (getEnergyStored(ForgeDirection.DOWN) < cost) {
    return DialingDeviceTileEntity.DIAL_DIALER_POWER_LOW_MASK;
  }
  if (!makeBeam(transmitter,transWorld,1,4,2)) {
    return DialingDeviceTileEntity.DIAL_TRANSMITTER_BLOCKED_MASK;
  }
  extractEnergy(ForgeDirection.DOWN,cost,false);
  transmitterTileEntity.setTeleportDestination(teleportDestination);
  return DialingDeviceTileEntity.DIAL_OK;
}","private int dial(String player,Coordinate transmitter,int transDim,Coordinate coordinate,int dimension){
  World transWorld=RfToolsDimensionManager.getDimensionManager(worldObj).getWorldForDimension(transDim);
  if (transWorld == null) {
    return DialingDeviceTileEntity.DIAL_INVALID_SOURCE_MASK;
  }
  MatterTransmitterTileEntity transmitterTileEntity=(MatterTransmitterTileEntity)transWorld.getTileEntity(transmitter.getX(),transmitter.getY(),transmitter.getZ());
  if (!transmitterTileEntity.checkAccess(player)) {
    return DialingDeviceTileEntity.DIAL_TRANSMITTER_NOACCESS;
  }
  if (coordinate == null) {
    clearBeam(transmitter,transWorld);
    transmitterTileEntity.setTeleportDestination(null);
    return DialingDeviceTileEntity.DIAL_INTERRUPTED;
  }
  boolean rftoolsDimension[]=new boolean[]{false};
  TeleportDestination teleportDestination=findDestination(coordinate,dimension,rftoolsDimension);
  if (teleportDestination == null) {
    return DialingDeviceTileEntity.DIAL_INVALID_DESTINATION_MASK;
  }
  Coordinate c=teleportDestination.getCoordinate();
  World recWorld=RfToolsDimensionManager.getDimensionManager(worldObj).getWorldForDimension(teleportDestination.getDimension());
  if (recWorld == null) {
    recWorld=MinecraftServer.getServer().worldServerForDimension(teleportDestination.getDimension());
    if (recWorld == null) {
      return DialingDeviceTileEntity.DIAL_INVALID_DESTINATION_MASK;
    }
  }
  TileEntity tileEntity=recWorld.getTileEntity(c.getX(),c.getY(),c.getZ());
  if (!rftoolsDimension[0]) {
    if (!(tileEntity instanceof MatterReceiverTileEntity)) {
      return DialingDeviceTileEntity.DIAL_INVALID_DESTINATION_MASK;
    }
    MatterReceiverTileEntity matterReceiverTileEntity=(MatterReceiverTileEntity)tileEntity;
    if (!matterReceiverTileEntity.checkAccess(player)) {
      return DialingDeviceTileEntity.DIAL_RECEIVER_NOACCESS;
    }
  }
  int cost=TeleportConfiguration.rfPerDial;
  if (getEnergyStored(ForgeDirection.DOWN) < cost) {
    return DialingDeviceTileEntity.DIAL_DIALER_POWER_LOW_MASK;
  }
  if (!makeBeam(transmitter,transWorld,1,4,2)) {
    return DialingDeviceTileEntity.DIAL_TRANSMITTER_BLOCKED_MASK;
  }
  extractEnergy(ForgeDirection.DOWN,cost,false);
  transmitterTileEntity.setTeleportDestination(teleportDestination);
  return DialingDeviceTileEntity.DIAL_OK;
}",0.6836058329650906
166142,"private void performTeleport(){
  if (!TeleportDestinations.getDestinations(worldObj).isDestinationValid(teleportDestination)) {
    applyBadEffectIfNeeded(10);
    RFTools.warn(teleportingPlayer,""String_Node_Str"");
    clearTeleport(200);
    return;
  }
  int currentId=teleportingPlayer.worldObj.provider.dimensionId;
  if (currentId != teleportDestination.getDimension()) {
    MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)teleportingPlayer,teleportDestination.getDimension());
  }
  Coordinate c=teleportDestination.getCoordinate();
  RFTools.message(teleportingPlayer,""String_Node_Str"");
  teleportingPlayer.setPositionAndUpdate(c.getX(),c.getY() + 1,c.getZ());
  int severity=consumeReceiverEnergy(c,teleportDestination.getDimension());
  if (!applyBadEffectIfNeeded(severity)) {
    if (TeleportConfiguration.teleportVolume >= 0.01) {
      worldObj.playSoundAtEntity(teleportingPlayer,RFTools.MODID + ""String_Node_Str"",TeleportConfiguration.teleportVolume,1.0f);
    }
  }
  teleportingPlayer=null;
}","private void performTeleport(){
  if (!isDestinationStillValid()) {
    applyBadEffectIfNeeded(10);
    RFTools.warn(teleportingPlayer,""String_Node_Str"");
    clearTeleport(200);
    return;
  }
  int currentId=teleportingPlayer.worldObj.provider.dimensionId;
  if (currentId != teleportDestination.getDimension()) {
    MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)teleportingPlayer,teleportDestination.getDimension());
  }
  Coordinate c=teleportDestination.getCoordinate();
  RFTools.message(teleportingPlayer,""String_Node_Str"");
  teleportingPlayer.setPositionAndUpdate(c.getX(),c.getY() + 1,c.getZ());
  int severity=consumeReceiverEnergy(c,teleportDestination.getDimension());
  if (!applyBadEffectIfNeeded(severity)) {
    if (TeleportConfiguration.teleportVolume >= 0.01) {
      worldObj.playSoundAtEntity(teleportingPlayer,RFTools.MODID + ""String_Node_Str"",TeleportConfiguration.teleportVolume,1.0f);
    }
  }
  teleportingPlayer=null;
}",0.9528897523069452
166143,"private void handleLowPower(Integer id,int power){
  if (power <= 0) {
    WorldServer world=DimensionManager.getWorld(id);
    if (world != null) {
      for (      EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {
        player.attackEntityFrom(DamageSource.generic,1000.0f);
      }
    }
  }
 else   if (power < (DimletConfiguration.MAX_DIMENSION_POWER / 30)) {
    WorldServer world=DimensionManager.getWorld(id);
    if (world != null) {
      for (      EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {
        player.attackEntityFrom(DamageSource.generic,0.1f);
        player.addPotionEffect(new PotionEffect(Potion.confusion.getId(),20));
        player.addPotionEffect(new PotionEffect(Potion.harm.getId(),20));
        player.addPotionEffect(new PotionEffect(Potion.wither.getId(),20));
      }
    }
  }
 else   if (power < (DimletConfiguration.MAX_DIMENSION_POWER / 20)) {
    WorldServer world=DimensionManager.getWorld(id);
    if (world != null) {
      for (      EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {
        player.addPotionEffect(new PotionEffect(Potion.confusion.getId(),20));
        player.addPotionEffect(new PotionEffect(Potion.harm.getId(),20));
      }
    }
  }
 else   if (power < (DimletConfiguration.MAX_DIMENSION_POWER / 10)) {
    WorldServer world=DimensionManager.getWorld(id);
    if (world != null) {
      for (      EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {
        player.addPotionEffect(new PotionEffect(Potion.confusion.getId(),20));
      }
    }
  }
}","private void handleLowPower(Integer id,int power){
  if (power <= 0) {
    WorldServer world=DimensionManager.getWorld(id);
    if (world != null) {
      for (      EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {
        player.attackEntityFrom(DamageSource.generic,1000.0f);
      }
    }
  }
 else   if (power < (DimletConfiguration.MAX_DIMENSION_POWER / 30)) {
    WorldServer world=DimensionManager.getWorld(id);
    if (world != null) {
      for (      EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {
        player.attackEntityFrom(DamageSource.generic,0.1f);
        player.addPotionEffect(new PotionEffect(Potion.confusion.getId(),20));
        player.addPotionEffect(new PotionEffect(Potion.harm.getId(),20));
        player.addPotionEffect(new PotionEffect(Potion.poison.getId(),20));
      }
    }
  }
 else   if (power < (DimletConfiguration.MAX_DIMENSION_POWER / 20)) {
    WorldServer world=DimensionManager.getWorld(id);
    if (world != null) {
      for (      EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {
        player.addPotionEffect(new PotionEffect(Potion.confusion.getId(),20));
        player.addPotionEffect(new PotionEffect(Potion.harm.getId(),20));
      }
    }
  }
 else   if (power < (DimletConfiguration.MAX_DIMENSION_POWER / 10)) {
    WorldServer world=DimensionManager.getWorld(id);
    if (world != null) {
      for (      EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {
        player.addPotionEffect(new PotionEffect(Potion.confusion.getId(),20));
      }
    }
  }
}",0.9962073324905184
166144,"private void applyCamoToShield(){
  sendServerCommand(ShieldTileEntity.CMD_APPLYCAMO);
}","private void applyCamoToShield(){
  ItemStack stack=tileEntity.getStackInSlot(0);
  int pass=0;
  if (stack != null) {
    Block block=Block.getBlockFromItem(stack.getItem());
    if (block != null) {
      pass=block.getRenderBlockPass();
    }
  }
  sendServerCommand(ShieldTileEntity.CMD_APPLYCAMO,new Argument(""String_Node_Str"",pass));
}",0.4102564102564102
166145,"private Block calculateShieldBlock(){
  if (!shieldActive || powerTimeout > 0) {
    return Blocks.air;
  }
  if (ShieldRenderingMode.MODE_INVISIBLE.equals(shieldRenderingMode)) {
    return ModBlocks.invisibleShieldBlock;
  }
  if (ShieldRenderingMode.MODE_SHIELD.equals(shieldRenderingMode)) {
    return ModBlocks.shieldBlockNOpaquePass1;
  }
  Block camoBlock=calculateCamoBlock();
  if (camoBlock != null) {
    if (camoBlock.isOpaqueCube()) {
      if (camoBlock.getRenderBlockPass() == 1) {
        if (camoBlock.renderAsNormalBlock()) {
          return ModBlocks.shieldBlockOpaquePass1;
        }
 else {
          return ModBlocks.shieldBlockOpaquePass1NN;
        }
      }
 else {
        if (camoBlock.renderAsNormalBlock()) {
          return ModBlocks.shieldBlockOpaquePass0;
        }
 else {
          return ModBlocks.shieldBlockOpaquePass0NN;
        }
      }
    }
 else {
      if (camoBlock.getRenderBlockPass() == 1) {
        if (camoBlock.renderAsNormalBlock()) {
          return ModBlocks.shieldBlockNOpaquePass1;
        }
 else {
          return ModBlocks.shieldBlockNOpaquePass1NN;
        }
      }
 else {
        if (camoBlock.renderAsNormalBlock()) {
          return ModBlocks.shieldBlockNOpaquePass0;
        }
 else {
          return ModBlocks.shieldBlockNOpaquePass0NN;
        }
      }
    }
  }
  return ModBlocks.solidShieldBlock;
}","private Block calculateShieldBlock(){
  if (!shieldActive || powerTimeout > 0) {
    return Blocks.air;
  }
  if (ShieldRenderingMode.MODE_INVISIBLE.equals(shieldRenderingMode)) {
    return ModBlocks.invisibleShieldBlock;
  }
  if (ShieldRenderingMode.MODE_SHIELD.equals(shieldRenderingMode)) {
    return ModBlocks.shieldBlockNOpaquePass1;
  }
  Block camoBlock=calculateCamoBlock();
  if (camoBlock != null) {
    if (camoBlock.isOpaqueCube()) {
      if (camoRenderPass == 1) {
        if (camoBlock.renderAsNormalBlock()) {
          return ModBlocks.shieldBlockOpaquePass1;
        }
 else {
          return ModBlocks.shieldBlockOpaquePass1NN;
        }
      }
 else {
        if (camoBlock.renderAsNormalBlock()) {
          return ModBlocks.shieldBlockOpaquePass0;
        }
 else {
          return ModBlocks.shieldBlockOpaquePass0NN;
        }
      }
    }
 else {
      if (camoRenderPass == 1) {
        if (camoBlock.renderAsNormalBlock()) {
          return ModBlocks.shieldBlockNOpaquePass1;
        }
 else {
          return ModBlocks.shieldBlockNOpaquePass1NN;
        }
      }
 else {
        if (camoBlock.renderAsNormalBlock()) {
          return ModBlocks.shieldBlockNOpaquePass0;
        }
 else {
          return ModBlocks.shieldBlockNOpaquePass0NN;
        }
      }
    }
  }
  return ModBlocks.solidShieldBlock;
}",0.988243938280676
166146,"@Override public void readRestorableFromNBT(NBTTagCompound tagCompound){
  super.readRestorableFromNBT(tagCompound);
  readBufferFromNBT(tagCompound);
  int m=tagCompound.getInteger(""String_Node_Str"");
  shieldRenderingMode=ShieldRenderingMode.values()[m];
  m=tagCompound.getInteger(""String_Node_Str"");
  redstoneMode=RedstoneMode.values()[m];
  readFiltersFromNBT(tagCompound);
}","@Override public void readRestorableFromNBT(NBTTagCompound tagCompound){
  super.readRestorableFromNBT(tagCompound);
  readBufferFromNBT(tagCompound);
  int m=tagCompound.getInteger(""String_Node_Str"");
  shieldRenderingMode=ShieldRenderingMode.values()[m];
  m=tagCompound.getInteger(""String_Node_Str"");
  redstoneMode=RedstoneMode.values()[m];
  camoRenderPass=tagCompound.getInteger(""String_Node_Str"");
  readFiltersFromNBT(tagCompound);
}",0.927007299270073
166147,"@Override public void writeRestorableToNBT(NBTTagCompound tagCompound){
  super.writeRestorableToNBT(tagCompound);
  writeBufferToNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",shieldRenderingMode.ordinal());
  tagCompound.setByte(""String_Node_Str"",(byte)redstoneMode.ordinal());
  writeFiltersToNBT(tagCompound);
}","@Override public void writeRestorableToNBT(NBTTagCompound tagCompound){
  super.writeRestorableToNBT(tagCompound);
  writeBufferToNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",shieldRenderingMode.ordinal());
  tagCompound.setByte(""String_Node_Str"",(byte)redstoneMode.ordinal());
  tagCompound.setInteger(""String_Node_Str"",camoRenderPass);
  writeFiltersToNBT(tagCompound);
}",0.9164345403899722
166148,"private void enableButtons(){
  int sel=filterList.getSelected();
  int cnt=filterList.getMaximum();
  delFilter.setEnabled(sel != -1);
  upFilter.setEnabled(sel > 0);
  downFilter.setEnabled(sel < cnt - 1 && sel != -1);
  if (sel == -1) {
    addFilter.setText(""String_Node_Str"");
  }
 else {
    addFilter.setText(""String_Node_Str"");
  }
  player.setEnabled(""String_Node_Str"".equals(typeOptions.getCurrentChoice()));
}","private void enableButtons(){
  int sel=filterList.getSelected();
  int cnt=filterList.getMaximum();
  delFilter.setEnabled(sel != -1 && cnt > 0);
  upFilter.setEnabled(sel > 0 && cnt > 0);
  downFilter.setEnabled(sel < cnt - 1 && sel != -1 && cnt > 0);
  if (sel == -1) {
    addFilter.setText(""String_Node_Str"");
  }
 else {
    addFilter.setText(""String_Node_Str"");
  }
  player.setEnabled(""String_Node_Str"".equals(typeOptions.getCurrentChoice()));
}",0.9621993127147768
166149,"public void removeMonitor(Coordinate c){
  monitors.remove(c);
}","public void removeMonitor(Coordinate c){
  monitors.remove(c);
  markDirty();
}",0.8951048951048951
166150,"public void addMonitor(Coordinate c){
  monitors.add(c);
}","public void addMonitor(Coordinate c){
  monitors.add(c);
  markDirty();
}",0.8854961832061069
166151,"/** 
 * Something happens, we need to notify all ender monitors.
 * @param mode is the new mode
 */
private void fireMonitors(EnderMonitorMode mode){
  boolean cleanup=false;
  for (  Coordinate c : monitors) {
    TileEntity te=worldObj.getTileEntity(c.getX(),c.getY(),c.getZ());
    if (te instanceof EnderMonitorTileEntity) {
      EnderMonitorTileEntity enderMonitorTileEntity=(EnderMonitorTileEntity)te;
      enderMonitorTileEntity.fireFromEndergenic(mode);
    }
 else {
      cleanup=true;
    }
  }
  if (cleanup) {
    List<Coordinate> newMonitors=new ArrayList<Coordinate>();
    for (    Coordinate c : monitors) {
      TileEntity te=worldObj.getTileEntity(c.getX(),c.getY(),c.getZ());
      if (te instanceof EnderMonitorTileEntity) {
        newMonitors.add(c);
      }
    }
    monitors=newMonitors;
  }
}","/** 
 * Something happens, we need to notify all ender monitors.
 * @param mode is the new mode
 */
private void fireMonitors(EnderMonitorMode mode){
  boolean cleanup=false;
  for (  Coordinate c : monitors) {
    TileEntity te=worldObj.getTileEntity(c.getX(),c.getY(),c.getZ());
    if (te instanceof EnderMonitorTileEntity) {
      EnderMonitorTileEntity enderMonitorTileEntity=(EnderMonitorTileEntity)te;
      enderMonitorTileEntity.fireFromEndergenic(mode);
    }
 else {
      cleanup=true;
    }
  }
  if (cleanup) {
    List<Coordinate> newMonitors=new ArrayList<Coordinate>();
    for (    Coordinate c : monitors) {
      TileEntity te=worldObj.getTileEntity(c.getX(),c.getY(),c.getZ());
      if (te instanceof EnderMonitorTileEntity) {
        newMonitors.add(c);
      }
    }
    monitors=newMonitors;
    markDirty();
  }
}",0.9897652016857316
166152,"private void extractDimlets(){
  ItemStack realizedTab=inventoryHelper.getStacks()[DimensionEnscriberContainer.SLOT_TAB];
  NBTTagCompound tagCompound=realizedTab.getTagCompound();
  if (tagCompound != null) {
    int idx=DimensionEnscriberContainer.SLOT_DIMLETS;
    for (    DimletType type : DimletType.values()) {
      if (tagCompound.hasKey(type.getName())) {
        NBTTagIntArray tagIntArray=(NBTTagIntArray)tagCompound.getTag(type.getName());
        if (tagIntArray != null) {
          int[] dimlets=tagIntArray.func_150302_c();
          for (          int id : dimlets) {
            inventoryHelper.getStacks()[idx++]=new ItemStack(ModItems.knownDimlet,1,id);
          }
        }
      }
    }
  }
  inventoryHelper.getStacks()[DimensionEnscriberContainer.SLOT_TAB]=new ItemStack(ModItems.emptyDimensionTab);
  markDirty();
}","private void extractDimlets(){
  ItemStack realizedTab=inventoryHelper.getStacks()[DimensionEnscriberContainer.SLOT_TAB];
  NBTTagCompound tagCompound=realizedTab.getTagCompound();
  if (tagCompound != null) {
    int idx=DimensionEnscriberContainer.SLOT_DIMLETS;
    String descriptionString=tagCompound.getString(""String_Node_Str"");
    String[] opcodes=descriptionString.split(""String_Node_Str"");
    for (    String oc : opcodes) {
      Integer id=Integer.parseInt(oc.substring(1));
      inventoryHelper.getStacks()[idx++]=new ItemStack(ModItems.knownDimlet,1,id);
    }
  }
  inventoryHelper.getStacks()[DimensionEnscriberContainer.SLOT_TAB]=new ItemStack(ModItems.emptyDimensionTab);
  markDirty();
}",0.64
166153,"public Collection<TeleportDestinationClientInfo> getValidDestinations(){
  List<TeleportDestinationClientInfo> result=new ArrayList<TeleportDestinationClientInfo>();
  for (  TeleportDestination destination : destinations.values()) {
    TeleportDestinationClientInfo destinationClientInfo=new TeleportDestinationClientInfo(destination);
    String dimName=DimensionManager.getProvider(destination.getDimension()).getDimensionName();
    destinationClientInfo.setDimensionName(dimName);
    result.add(destinationClientInfo);
  }
  return result;
}","public Collection<TeleportDestinationClientInfo> getValidDestinations(){
  List<TeleportDestinationClientInfo> result=new ArrayList<TeleportDestinationClientInfo>();
  for (  TeleportDestination destination : destinations.values()) {
    TeleportDestinationClientInfo destinationClientInfo=new TeleportDestinationClientInfo(destination);
    World world=DimensionManager.getWorld(destination.getDimension());
    if (world != null) {
      String dimName=DimensionManager.getProvider(destination.getDimension()).getDimensionName();
      destinationClientInfo.setDimensionName(dimName);
      result.add(destinationClientInfo);
    }
  }
  return result;
}",0.9102990033222592
166154,"public List<TeleportDestination> searchReceivers(){
  TeleportDestinations destinations=TeleportDestinations.getDestinations(worldObj);
  return new ArrayList<TeleportDestination>(destinations.getValidDestinations());
}","public List<TeleportDestinationClientInfo> searchReceivers(){
  TeleportDestinations destinations=TeleportDestinations.getDestinations(worldObj);
  return new ArrayList<TeleportDestinationClientInfo>(destinations.getValidDestinations());
}",0.9563318777292577
166155,"@Override public void select(Widget parent,int index){
  clearSelectedStatus();
}","@Override public void select(Widget parent,int index){
  clearSelectedStatus();
  selectReceiverFromTransmitter();
}",0.8223350253807107
166156,"private void populateReceivers(){
  List<TeleportDestination> newReceivers=fromServer_receivers;
  if (newReceivers == null) {
    return;
  }
  if (newReceivers.equals(receivers)) {
    return;
  }
  receivers=new ArrayList<TeleportDestination>(newReceivers);
  receiverList.removeChildren();
  for (  TeleportDestination destination : receivers) {
    Coordinate coordinate=destination.getCoordinate();
    String dimName=DimensionManager.getProvider(destination.getDimension()).getDimensionName();
    Panel panel=new Panel(mc,this).setLayout(new HorizontalLayout());
    panel.addChild(new Label(mc,this).setText(destination.getName()).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setDesiredWidth(65));
    panel.addChild(new Label(mc,this).setDynamic(true).setText(coordinate.toString()));
    panel.addChild(new Label(mc,this).setText(dimName).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setDesiredWidth(55));
    receiverList.addChild(panel);
  }
}","private void populateReceivers(){
  List<TeleportDestinationClientInfo> newReceivers=fromServer_receivers;
  if (newReceivers == null) {
    return;
  }
  if (newReceivers.equals(receivers)) {
    return;
  }
  receivers=new ArrayList<TeleportDestinationClientInfo>(newReceivers);
  receiverList.removeChildren();
  for (  TeleportDestinationClientInfo destination : receivers) {
    Coordinate coordinate=destination.getCoordinate();
    String dimName=destination.getDimensionName();
    Panel panel=new Panel(mc,this).setLayout(new HorizontalLayout());
    panel.addChild(new Label(mc,this).setText(destination.getName()).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setDesiredWidth(65));
    panel.addChild(new Label(mc,this).setDynamic(true).setText(coordinate.toString()));
    panel.addChild(new Label(mc,this).setText(dimName).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setDesiredWidth(55));
    receiverList.addChild(panel);
  }
}",0.9499225606608156
166157,"@Override public void initGui(){
  super.initGui();
  int k=(this.width - DIALER_WIDTH) / 2;
  int l=(this.height - DIALER_HEIGHT) / 2;
  int maxEnergyStored=dialingDeviceTileEntity.getMaxEnergyStored(ForgeDirection.DOWN);
  energyBar=new EnergyBar(mc,this).setFilledRectThickness(1).setHorizontal().setDesiredWidth(80).setDesiredHeight(12).setMaxValue(maxEnergyStored).setShowText(true);
  energyBar.setValue(dialingDeviceTileEntity.getCurrentRF());
  transmitterList=new WidgetList(mc,this).setRowheight(18).setFilledRectThickness(1).setDesiredHeight(76).addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
      clearSelectedStatus();
      selectReceiverFromTransmitter();
    }
    @Override public void doubleClick(    Widget parent,    int index){
      hilightSelectedTransmitter(index);
    }
  }
);
  Slider transmitterSlider=new Slider(mc,this).setDesiredWidth(13).setVertical().setScrollable(transmitterList);
  Panel transmitterPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(transmitterList).addChild(transmitterSlider);
  receiverList=new WidgetList(mc,this).setRowheight(14).setFilledRectThickness(1).addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
      clearSelectedStatus();
    }
    @Override public void doubleClick(    Widget parent,    int index){
      hilightSelectedReceiver(index);
    }
  }
);
  Slider receiverSlider=new Slider(mc,this).setDesiredWidth(13).setVertical().setScrollable(receiverList);
  Panel receiverPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(receiverList).addChild(receiverSlider);
  dialButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setDesiredHeight(14).addButtonEvent(new ButtonEvent(){
    @Override public void buttonClicked(    Widget parent){
      dial();
    }
  }
);
  interruptButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"").setDesiredHeight(14).addButtonEvent(new ButtonEvent(){
    @Override public void buttonClicked(    Widget parent){
      interruptDial();
    }
  }
);
  analyzerAvailable=DialingDeviceTileEntity.isDestinationAnalyzerAvailable(mc.theWorld,dialingDeviceTileEntity.xCoord,dialingDeviceTileEntity.yCoord,dialingDeviceTileEntity.zCoord);
  statusButton=new Button(mc,this).setText(""String_Node_Str"").setDesiredHeight(14).setEnabled(analyzerAvailable).addButtonEvent(new ButtonEvent(){
    @Override public void buttonClicked(    Widget parent){
      checkStatus();
    }
  }
);
  if (analyzerAvailable) {
    statusButton.setTooltips(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statusButton.setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  Panel buttonPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(dialButton).addChild(interruptButton).addChild(statusButton).setDesiredHeight(16);
  statusLabel=new Label(mc,this);
  statusLabel.setDesiredWidth(180).setDesiredHeight(14).setFilledRectThickness(1);
  Panel statusPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"")).addChild(statusLabel).setDesiredHeight(16);
  Widget toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout()).addChild(energyBar).addChild(transmitterPanel).addChild(receiverPanel).addChild(buttonPanel).addChild(statusPanel);
  toplevel.setBounds(new Rectangle(k,l,DIALER_WIDTH,DIALER_HEIGHT));
  window=new com.mcjty.gui.Window(this,toplevel);
  Keyboard.enableRepeatEvents(true);
  listDirty=0;
  clearSelectedStatus();
  requestReceivers();
  requestTransmitters();
  dialingDeviceTileEntity.requestRfFromServer();
}","@Override public void initGui(){
  super.initGui();
  int k=(this.width - DIALER_WIDTH) / 2;
  int l=(this.height - DIALER_HEIGHT) / 2;
  int maxEnergyStored=dialingDeviceTileEntity.getMaxEnergyStored(ForgeDirection.DOWN);
  energyBar=new EnergyBar(mc,this).setFilledRectThickness(1).setHorizontal().setDesiredWidth(80).setDesiredHeight(12).setMaxValue(maxEnergyStored).setShowText(true);
  energyBar.setValue(dialingDeviceTileEntity.getCurrentRF());
  Panel transmitterPanel=setupTransmitterPanel();
  Panel receiverPanel=setupReceiverPanel();
  dialButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setDesiredHeight(14).addButtonEvent(new ButtonEvent(){
    @Override public void buttonClicked(    Widget parent){
      dial();
    }
  }
);
  interruptButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"").setDesiredHeight(14).addButtonEvent(new ButtonEvent(){
    @Override public void buttonClicked(    Widget parent){
      interruptDial();
    }
  }
);
  analyzerAvailable=DialingDeviceTileEntity.isDestinationAnalyzerAvailable(mc.theWorld,dialingDeviceTileEntity.xCoord,dialingDeviceTileEntity.yCoord,dialingDeviceTileEntity.zCoord);
  statusButton=new Button(mc,this).setText(""String_Node_Str"").setDesiredHeight(14).setEnabled(analyzerAvailable).addButtonEvent(new ButtonEvent(){
    @Override public void buttonClicked(    Widget parent){
      checkStatus();
    }
  }
);
  if (analyzerAvailable) {
    statusButton.setTooltips(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statusButton.setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  Panel buttonPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(dialButton).addChild(interruptButton).addChild(statusButton).setDesiredHeight(16);
  statusLabel=new Label(mc,this);
  statusLabel.setDesiredWidth(180).setDesiredHeight(14).setFilledRectThickness(1);
  Panel statusPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"")).addChild(statusLabel).setDesiredHeight(16);
  Widget toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout()).addChild(energyBar).addChild(transmitterPanel).addChild(receiverPanel).addChild(buttonPanel).addChild(statusPanel);
  toplevel.setBounds(new Rectangle(k,l,DIALER_WIDTH,DIALER_HEIGHT));
  window=new com.mcjty.gui.Window(this,toplevel);
  Keyboard.enableRepeatEvents(true);
  listDirty=0;
  clearSelectedStatus();
  requestReceivers();
  requestTransmitters();
  dialingDeviceTileEntity.requestRfFromServer();
}",0.7995053331272222
166158,"@Override public void doubleClick(Widget parent,int index){
  hilightSelectedReceiver(index);
}","@Override public void doubleClick(Widget parent,int index){
  hilightSelectedTransmitter(index);
}",0.932642487046632
166159,"@Override protected PacketReceiversReady createMessageToClient(int x,int y,int z,List<TeleportDestination> result){
  return new PacketReceiversReady(x,y,z,DialingDeviceTileEntity.CLIENTCMD_GETRECEIVERS,result);
}","@Override protected PacketReceiversReady createMessageToClient(int x,int y,int z,List<TeleportDestinationClientInfo> result){
  return new PacketReceiversReady(x,y,z,DialingDeviceTileEntity.CLIENTCMD_GETRECEIVERS,result);
}",0.9770642201834864
166160,"public PacketReceiversReady(int x,int y,int z,String command,List<TeleportDestination> list){
  super(x,y,z,command,list);
}","public PacketReceiversReady(int x,int y,int z,String command,List<TeleportDestinationClientInfo> list){
  super(x,y,z,command,list);
}",0.9612403100775194
166161,"@Override protected TeleportDestination createItem(ByteBuf buf){
  return new TeleportDestination(buf);
}","@Override protected TeleportDestinationClientInfo createItem(ByteBuf buf){
  return new TeleportDestinationClientInfo(buf);
}",0.9130434782608696
166162,"public Collection<TeleportDestination> getValidDestinations(){
  return destinations.values();
}","public Collection<TeleportDestinationClientInfo> getValidDestinations(){
  List<TeleportDestinationClientInfo> result=new ArrayList<TeleportDestinationClientInfo>();
  for (  TeleportDestination destination : destinations.values()) {
    TeleportDestinationClientInfo destinationClientInfo=new TeleportDestinationClientInfo(destination);
    String dimName=DimensionManager.getProvider(destination.getDimension()).getDimensionName();
    destinationClientInfo.setDimensionName(dimName);
    result.add(destinationClientInfo);
  }
  return result;
}",0.2826086956521739
166163,"private void populateList(){
  if (serverDestinationList == null) {
    return;
  }
  if (serverDestinationList.equals(destinationList)) {
    return;
  }
  destinationList=new ArrayList<TeleportDestination>(serverDestinationList);
  list.removeChildren();
  for (  TeleportDestination destination : destinationList) {
    Coordinate coordinate=destination.getCoordinate();
    Panel panel=new Panel(mc,this).setLayout(new HorizontalLayout());
    panel.addChild(new Label(mc,this).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setText(destination.getName()).setDesiredWidth(100));
    panel.addChild(new Label(mc,this).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setText(coordinate.toString()).setDesiredWidth(75));
    list.addChild(panel);
  }
}","private void populateList(){
  if (serverDestinationList == null) {
    return;
  }
  if (serverDestinationList.equals(destinationList)) {
    return;
  }
  destinationList=new ArrayList<TeleportDestinationClientInfo>(serverDestinationList);
  list.removeChildren();
  for (  TeleportDestinationClientInfo destination : destinationList) {
    Coordinate coordinate=destination.getCoordinate();
    Panel panel=new Panel(mc,this).setLayout(new HorizontalLayout());
    panel.addChild(new Label(mc,this).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setText(destination.getName()).setDesiredWidth(100));
    panel.addChild(new Label(mc,this).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setText(coordinate.toString()).setDesiredWidth(75));
    list.addChild(panel);
  }
}",0.987146529562982
166164,"private void teleport(int index){
  TeleportDestination destination=destinationList.get(index);
  Coordinate c=destination.getCoordinate();
  PacketHandler.INSTANCE.sendToServer(new PacketForceTeleport(c.getX(),c.getY(),c.getZ(),destination.getDimension()));
}","private void teleport(int index){
  TeleportDestinationClientInfo destination=destinationList.get(index);
  Coordinate c=destination.getCoordinate();
  PacketHandler.INSTANCE.sendToServer(new PacketForceTeleport(c.getX(),c.getY(),c.getZ(),destination.getDimension()));
}",0.981132075471698
166165,"public static void setReceivers(List<TeleportDestination> destinationList){
  serverDestinationList=new ArrayList<TeleportDestination>(destinationList);
}","public static void setReceivers(List<TeleportDestinationClientInfo> destinationList){
  serverDestinationList=new ArrayList<TeleportDestinationClientInfo>(destinationList);
}",0.9390243902439024
166166,"@Override public void fromBytes(ByteBuf buf){
  int size=buf.readInt();
  destinationList=new ArrayList<TeleportDestination>(size);
  for (int i=0; i < size; i++) {
    destinationList.add(new TeleportDestination(buf));
  }
}","@Override public void fromBytes(ByteBuf buf){
  int size=buf.readInt();
  destinationList=new ArrayList<TeleportDestinationClientInfo>(size);
  for (int i=0; i < size; i++) {
    destinationList.add(new TeleportDestinationClientInfo(buf));
  }
}",0.9574468085106383
166167,"public PacketAllReceiversReady(List<TeleportDestination> destinationList){
  this.destinationList=new ArrayList<TeleportDestination>();
  this.destinationList.addAll(destinationList);
}","public PacketAllReceiversReady(List<TeleportDestinationClientInfo> destinationList){
  this.destinationList=new ArrayList<TeleportDestinationClientInfo>();
  this.destinationList.addAll(destinationList);
}",0.9487179487179488
166168,"@Override public PacketAllReceiversReady onMessage(PacketGetAllReceivers message,MessageContext ctx){
  EntityPlayer player=ctx.getServerHandler().playerEntity;
  TeleportDestinations destinations=TeleportDestinations.getDestinations(player.worldObj);
  List<TeleportDestination> destinationList=new ArrayList<TeleportDestination>(destinations.getValidDestinations());
  return new PacketAllReceiversReady(destinationList);
}","@Override public PacketAllReceiversReady onMessage(PacketGetAllReceivers message,MessageContext ctx){
  EntityPlayer player=ctx.getServerHandler().playerEntity;
  TeleportDestinations destinations=TeleportDestinations.getDestinations(player.worldObj);
  List<TeleportDestinationClientInfo> destinationList=new ArrayList<TeleportDestinationClientInfo>(destinations.getValidDestinations());
  return new PacketAllReceiversReady(destinationList);
}",0.9770114942528736
166169,"private void performTeleport(){
  int currentId=teleportingPlayer.worldObj.provider.dimensionId;
  if (currentId != teleportDestination.getDimension()) {
    MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)teleportingPlayer,teleportDestination.getDimension());
  }
  Coordinate c=teleportDestination.getCoordinate();
  RFTools.message(teleportingPlayer,""String_Node_Str"");
  teleportingPlayer.setPositionAndUpdate(c.getX(),c.getY() + 1,c.getZ());
  int severity=consumeReceiverEnergy(c,teleportDestination.getDimension());
  if (!applyBadEffectIfNeeded(severity)) {
    if (TeleportConfiguration.teleportVolume >= 0.01) {
      worldObj.playSoundAtEntity(teleportingPlayer,RFTools.MODID + ""String_Node_Str"",TeleportConfiguration.teleportVolume,1.0f);
    }
  }
  teleportingPlayer=null;
}","private void performTeleport(){
  if (!TeleportDestinations.getDestinations(worldObj).isDestinationValid(teleportDestination)) {
    applyBadEffectIfNeeded(10);
    RFTools.warn(teleportingPlayer,""String_Node_Str"");
    clearTeleport(200);
    return;
  }
  int currentId=teleportingPlayer.worldObj.provider.dimensionId;
  if (currentId != teleportDestination.getDimension()) {
    MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension((EntityPlayerMP)teleportingPlayer,teleportDestination.getDimension());
  }
  Coordinate c=teleportDestination.getCoordinate();
  RFTools.message(teleportingPlayer,""String_Node_Str"");
  teleportingPlayer.setPositionAndUpdate(c.getX(),c.getY() + 1,c.getZ());
  int severity=consumeReceiverEnergy(c,teleportDestination.getDimension());
  if (!applyBadEffectIfNeeded(severity)) {
    if (TeleportConfiguration.teleportVolume >= 0.01) {
      worldObj.playSoundAtEntity(teleportingPlayer,RFTools.MODID + ""String_Node_Str"",TeleportConfiguration.teleportVolume,1.0f);
    }
  }
  teleportingPlayer=null;
}",0.8818565400843882
166170,"private boolean makeBeam(Coordinate c,World world,int dy1,int dy2,int errory){
  for (int dy=dy1; dy <= dy2; dy++) {
    Block b=world.getBlock(c.getX(),c.getY() + dy,c.getZ());
    if ((!b.isAir(world,xCoord,yCoord + dy,zCoord)) && !ModBlocks.teleportBeamBlock.equals(b)) {
      if (dy <= errory) {
        return false;
      }
 else {
        break;
      }
    }
  }
  Block b=world.getBlock(c.getX(),c.getY() + 1,c.getZ());
  if (b.isAir(world,c.getX(),c.getY() + 1,c.getZ()) || ModBlocks.teleportBeamBlock.equals(b)) {
    world.setBlock(c.getX(),c.getY() + 1,c.getZ(),ModBlocks.teleportBeamBlock,0,2);
  }
  return true;
}","private boolean makeBeam(Coordinate c,World world,int dy1,int dy2,int errory){
  for (int dy=dy1; dy <= dy2; dy++) {
    Block b=world.getBlock(c.getX(),c.getY() + dy,c.getZ());
    if ((!b.isAir(world,c.getX(),c.getY() + dy,c.getZ())) && !ModBlocks.teleportBeamBlock.equals(b)) {
      if (dy <= errory) {
        return false;
      }
 else {
        break;
      }
    }
  }
  Block b=world.getBlock(c.getX(),c.getY() + 1,c.getZ());
  if (b.isAir(world,c.getX(),c.getY() + 1,c.getZ()) || ModBlocks.teleportBeamBlock.equals(b)) {
    world.setBlock(c.getX(),c.getY() + 1,c.getZ(),ModBlocks.teleportBeamBlock,0,2);
  }
  return true;
}",0.9652448657187994
166171,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  boolean wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed) {
    if (world.isRemote) {
      EndergenicTileEntity endergenicTileEntity=(EndergenicTileEntity)world.getTileEntity(x,y,z);
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
      endergenicTileEntity.useWrench();
    }
    return true;
  }
 else {
    return super.onBlockActivated(world,x,y,z,player,side,sx,sy,sz);
  }
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  boolean wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed) {
    if (world.isRemote) {
      EndergenicTileEntity endergenicTileEntity=(EndergenicTileEntity)world.getTileEntity(x,y,z);
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
      endergenicTileEntity.useWrench(player);
    }
    return true;
  }
 else {
    return super.onBlockActivated(world,x,y,z,player,side,sx,sy,sz);
  }
}",0.9944649446494463
166172,"public void useWrench(){
  EndergenicTileEntity otherTE=RFTools.instance.clientInfo.getSelectedEndergenicTileEntity();
  if (otherTE == null) {
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(this);
    EndergenicTileEntity destinationTE=getDestinationTE();
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(destinationTE);
    if (destinationTE == null) {
      RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"");
    }
 else {
      int distance=getDistanceInTicks();
      RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"" + distance + ""String_Node_Str"");
    }
  }
 else   if (otherTE.equals(this)) {
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(null);
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(null);
  }
 else {
    Coordinate c=new Coordinate(xCoord,yCoord,zCoord);
    int distance=otherTE.calculateDistance(c);
    if (distance >= 5) {
      RFTools.warn(Minecraft.getMinecraft().thePlayer,""String_Node_Str"");
      return;
    }
    otherTE.setDestination(c);
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(null);
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(null);
    RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"" + otherTE.getDistanceInTicks() + ""String_Node_Str"");
  }
}","public void useWrench(EntityPlayer player){
  EndergenicTileEntity otherTE=RFTools.instance.clientInfo.getSelectedEndergenicTileEntity();
  if (otherTE == null) {
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(this);
    EndergenicTileEntity destinationTE=getDestinationTE();
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(destinationTE);
    if (destinationTE == null) {
      RFTools.message(player,""String_Node_Str"");
    }
 else {
      int distance=getDistanceInTicks();
      RFTools.message(player,""String_Node_Str"" + distance + ""String_Node_Str"");
    }
  }
 else   if (otherTE.equals(this)) {
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(null);
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(null);
  }
 else {
    Coordinate c=new Coordinate(xCoord,yCoord,zCoord);
    int distance=otherTE.calculateDistance(c);
    if (distance >= 5) {
      RFTools.warn(player,""String_Node_Str"");
      return;
    }
    otherTE.setDestination(c);
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(null);
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(null);
    RFTools.message(player,""String_Node_Str"" + otherTE.getDistanceInTicks() + ""String_Node_Str"");
  }
}",0.9471281856219096
166173,"@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float f){
  EndergenicTileEntity endergenicTileEntity=(EndergenicTileEntity)tileEntity;
  ResourceLocation txt;
  if (endergenicTileEntity == RFTools.instance.clientInfo.getSelectedEndergenicTileEntity()) {
    txt=redglow;
  }
 else   if (endergenicTileEntity == RFTools.instance.clientInfo.getDestinationEndergenicTileEntity()) {
    txt=blueglow;
  }
 else {
    return;
  }
  this.bindTexture(txt);
  Tessellator tessellator=Tessellator.instance;
  GL11.glPushMatrix();
  GL11.glTranslated(x,y,z);
  tessellator.startDrawingQuads();
  tessellator.setColorRGBA(255,255,255,128);
  tessellator.setBrightness(240);
  boolean blending=GL11.glIsEnabled(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.UP.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.DOWN.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.NORTH.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.SOUTH.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.WEST.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.EAST.ordinal(),1.1f,-0.05f);
  tessellator.draw();
  GL11.glPopMatrix();
  if (!blending) {
    GL11.glDisable(GL11.GL_BLEND);
  }
}","@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float f){
  EndergenicTileEntity endergenicTileEntity=(EndergenicTileEntity)tileEntity;
  ResourceLocation txt;
  if (endergenicTileEntity.equals(RFTools.instance.clientInfo.getSelectedEndergenicTileEntity())) {
    txt=redglow;
  }
 else   if (endergenicTileEntity.equals(RFTools.instance.clientInfo.getDestinationEndergenicTileEntity())) {
    txt=blueglow;
  }
 else {
    return;
  }
  this.bindTexture(txt);
  Tessellator tessellator=Tessellator.instance;
  GL11.glPushMatrix();
  GL11.glTranslated(x,y,z);
  tessellator.startDrawingQuads();
  tessellator.setColorRGBA(255,255,255,128);
  tessellator.setBrightness(240);
  boolean blending=GL11.glIsEnabled(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.UP.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.DOWN.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.NORTH.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.SOUTH.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.WEST.ordinal(),1.1f,-0.05f);
  DefaultISBRH.addSideFullTexture(tessellator,ForgeDirection.EAST.ordinal(),1.1f,-0.05f);
  tessellator.draw();
  GL11.glPopMatrix();
  if (!blending) {
    GL11.glDisable(GL11.GL_BLEND);
  }
}",0.9913621262458472
166174,"public void useWrench(){
  EndergenicTileEntity otherTE=RFTools.instance.clientInfo.getSelectedEndergenicTileEntity();
  if (otherTE == null) {
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(this);
    EndergenicTileEntity destinationTE=getDestinationTE();
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(destinationTE);
    if (destinationTE == null) {
      RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"");
    }
 else {
      int distance=getDistanceInTicks();
      RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"" + distance + ""String_Node_Str"");
    }
  }
 else   if (otherTE == this) {
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(null);
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(null);
  }
 else {
    otherTE.setDestination(new Coordinate(xCoord,yCoord,zCoord));
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(null);
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(null);
    RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"" + otherTE.getDistanceInTicks() + ""String_Node_Str"");
  }
}","public void useWrench(){
  EndergenicTileEntity otherTE=RFTools.instance.clientInfo.getSelectedEndergenicTileEntity();
  if (otherTE == null) {
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(this);
    EndergenicTileEntity destinationTE=getDestinationTE();
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(destinationTE);
    if (destinationTE == null) {
      RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"");
    }
 else {
      int distance=getDistanceInTicks();
      RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"" + distance + ""String_Node_Str"");
    }
  }
 else   if (otherTE.equals(this)) {
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(null);
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(null);
  }
 else {
    otherTE.setDestination(new Coordinate(xCoord,yCoord,zCoord));
    RFTools.instance.clientInfo.setSelectedEndergenicTileEntity(null);
    RFTools.instance.clientInfo.setDestinationEndergenicTileEntity(null);
    RFTools.message(Minecraft.getMinecraft().thePlayer,""String_Node_Str"" + otherTE.getDistanceInTicks() + ""String_Node_Str"");
  }
}",0.994456289978678
166175,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  Tessellator tessellator=Tessellator.instance;
  tessellator.setColorOpaque(255,255,255);
  tessellator.addTranslation(x,y,z);
  int meta=0;
  if (world != null) {
    meta=world.getBlockMetadata(x,y,z);
  }
  ForgeDirection k=BlockTools.getOrientationHoriz(meta);
  addSideHeight(block,tessellator,Constants.SIDE_NORTH,meta,.3);
  addSideHeight(block,tessellator,Constants.SIDE_SOUTH,meta,.3);
  addSideHeight(block,tessellator,Constants.SIDE_WEST,meta,.3);
  addSideHeight(block,tessellator,Constants.SIDE_EAST,meta,.3);
  addSideHeightWithRotation(block,tessellator,Constants.SIDE_UP,meta,.3,k);
  addSideHeight(block,tessellator,Constants.SIDE_DOWN,meta,.3);
  tessellator.addTranslation(-x,-y,-z);
  return true;
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  Tessellator tessellator=Tessellator.instance;
  tessellator.setColorOpaque(255,255,255);
  tessellator.addTranslation(x,y,z);
  tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
  int meta=0;
  if (world != null) {
    meta=world.getBlockMetadata(x,y,z);
  }
  ForgeDirection k=BlockTools.getOrientationHoriz(meta);
  addSideHeight(block,tessellator,Constants.SIDE_NORTH,meta,.3);
  addSideHeight(block,tessellator,Constants.SIDE_SOUTH,meta,.3);
  addSideHeight(block,tessellator,Constants.SIDE_WEST,meta,.3);
  addSideHeight(block,tessellator,Constants.SIDE_EAST,meta,.3);
  addSideHeightWithRotation(block,tessellator,Constants.SIDE_UP,meta,.3,k);
  addSideHeight(block,tessellator,Constants.SIDE_DOWN,meta,.3);
  tessellator.addTranslation(-x,-y,-z);
  return true;
}",0.9570621468926552
166176,"@Override protected void checkStateServer(){
  if (!isValid()) {
    counter=1;
    return;
  }
  counter--;
  if (counter > 0) {
    return;
  }
  counter=20;
  TileEntity tileEntity=worldObj.getTileEntity(monitorX,monitorY,monitorZ);
  if (!(tileEntity instanceof IEnergyHandler)) {
    setInvalid();
    return;
  }
  IEnergyHandler handler=(IEnergyHandler)tileEntity;
  int maxEnergy=handler.getMaxEnergyStored(ForgeDirection.DOWN);
  int ratio=0;
  boolean alarm=false;
  if (maxEnergy > 0) {
    int stored=handler.getEnergyStored(ForgeDirection.DOWN);
    ratio=1 + (stored * 5) / maxEnergy;
    if (ratio < 1) {
      ratio=1;
    }
 else     if (ratio > 5) {
      ratio=5;
    }
switch (alarmMode) {
case MODE_OFF:
      alarm=false;
    break;
case MODE_LESS:
  alarm=((stored * 100 / maxEnergy) < alarmLevel);
break;
case MODE_MORE:
alarm=((stored * 100 / maxEnergy) > alarmLevel);
break;
}
}
Boolean v=inAlarm.getValue();
boolean alarmValue=v == null ? false : v;
if (rflevel.getValue() != ratio || alarm != alarmValue) {
rflevel.setValue(ratio);
if (alarmValue != alarm) {
inAlarm.setValue(alarm);
}
notifyBlockUpdate();
}
}","@Override protected void checkStateServer(){
  if (!isValid()) {
    counter=1;
    return;
  }
  counter--;
  if (counter > 0) {
    return;
  }
  counter=20;
  TileEntity tileEntity=worldObj.getTileEntity(monitorX,monitorY,monitorZ);
  if (!(tileEntity instanceof IEnergyHandler)) {
    setInvalid();
    return;
  }
  IEnergyHandler handler=(IEnergyHandler)tileEntity;
  int maxEnergy=handler.getMaxEnergyStored(ForgeDirection.DOWN);
  int ratio=0;
  boolean alarm=false;
  if (maxEnergy > 0) {
    int stored=handler.getEnergyStored(ForgeDirection.DOWN);
    ratio=1 + (stored * 5) / maxEnergy;
    if (ratio < 1) {
      ratio=1;
    }
 else     if (ratio > 5) {
      ratio=5;
    }
switch (alarmMode) {
case MODE_OFF:
      alarm=false;
    break;
case MODE_LESS:
  alarm=((stored * 100 / maxEnergy) < alarmLevel);
break;
case MODE_MORE:
alarm=((stored * 100 / maxEnergy) > alarmLevel);
break;
}
}
Boolean v=inAlarm.getValue();
boolean alarmValue=v == null ? false : v;
if (getRflevel() != ratio || alarm != alarmValue) {
rflevel.setValue(ratio);
if (alarmValue != alarm) {
inAlarm.setValue(alarm);
}
notifyBlockUpdate();
}
}",0.9938325991189428
166177,"public int getRflevel(){
  return rflevel.getValue();
}","public int getRflevel(){
  Integer value=rflevel.getValue();
  if (value == null) {
    return 0;
  }
  return value;
}",0.5747126436781609
166178,"@Override public void writeToNBT(NBTTagCompound tagCompound){
  super.writeToNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",monitorX);
  tagCompound.setInteger(""String_Node_Str"",monitorY);
  tagCompound.setInteger(""String_Node_Str"",monitorZ);
  tagCompound.setInteger(""String_Node_Str"",rflevel.getValue());
  tagCompound.setByte(""String_Node_Str"",(byte)alarmMode.getIndex());
  tagCompound.setByte(""String_Node_Str"",(byte)alarmLevel);
  Boolean value=inAlarm.getValue();
  tagCompound.setBoolean(""String_Node_Str"",value == null ? false : value);
}","@Override public void writeToNBT(NBTTagCompound tagCompound){
  super.writeToNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",monitorX);
  tagCompound.setInteger(""String_Node_Str"",monitorY);
  tagCompound.setInteger(""String_Node_Str"",monitorZ);
  tagCompound.setInteger(""String_Node_Str"",getRflevel());
  tagCompound.setByte(""String_Node_Str"",(byte)alarmMode.getIndex());
  tagCompound.setByte(""String_Node_Str"",(byte)alarmLevel);
  Boolean value=inAlarm.getValue();
  tagCompound.setBoolean(""String_Node_Str"",value == null ? false : value);
}",0.9874551971326164
166179,"public static void registerMessages(){
  INSTANCE=NetworkRegistry.INSTANCE.newSimpleChannel(""String_Node_Str"");
  INSTANCE.registerMessage(PacketRFMonitor.class,PacketRFMonitor.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetAdjacentBlocks.class,PacketGetAdjacentBlocks.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketCrafter.class,PacketCrafter.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetInventory.class,PacketGetInventory.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketSearchItems.class,PacketSearchItems.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetConnectedBlocks.class,PacketGetConnectedBlocks.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetTransmitters.class,PacketGetTransmitters.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetReceivers.class,PacketGetReceivers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketServerCommand.class,PacketServerCommand.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketRequestIntegerFromServer.class,PacketRequestIntegerFromServer.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetAllReceivers.class,PacketGetAllReceivers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketForceTeleport.class,PacketForceTeleport.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketInventoryReady.class,PacketInventoryReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketSearchReady.class,PacketSearchReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketAdjacentBlocksReady.class,PacketAdjacentBlocksReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketConnectedBlocksReady.class,PacketConnectedBlocksReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketTransmittersReady.class,PacketTransmittersReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketReceiversReady.class,PacketReceiversReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketIntegerFromServer.class,PacketIntegerFromServer.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketAllReceiversReady.class,PacketAllReceiversReady.class,nextID(),Side.CLIENT);
}","public static void registerMessages(){
  INSTANCE=NetworkRegistry.INSTANCE.newSimpleChannel(""String_Node_Str"");
  INSTANCE.registerMessage(PacketRFMonitor.class,PacketRFMonitor.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetAdjacentBlocks.class,PacketGetAdjacentBlocks.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketCrafter.class,PacketCrafter.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetInventory.class,PacketGetInventory.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketSearchItems.class,PacketSearchItems.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetConnectedBlocks.class,PacketGetConnectedBlocks.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetTransmitters.class,PacketGetTransmitters.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetReceivers.class,PacketGetReceivers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketServerCommand.class,PacketServerCommand.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketRequestIntegerFromServer.class,PacketRequestIntegerFromServer.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetAllReceivers.class,PacketGetAllReceivers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketForceTeleport.class,PacketForceTeleport.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketGetPlayers.class,PacketGetPlayers.class,nextID(),Side.SERVER);
  INSTANCE.registerMessage(PacketInventoryReady.class,PacketInventoryReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketSearchReady.class,PacketSearchReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketAdjacentBlocksReady.class,PacketAdjacentBlocksReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketConnectedBlocksReady.class,PacketConnectedBlocksReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketTransmittersReady.class,PacketTransmittersReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketReceiversReady.class,PacketReceiversReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketIntegerFromServer.class,PacketIntegerFromServer.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketAllReceiversReady.class,PacketAllReceiversReady.class,nextID(),Side.CLIENT);
  INSTANCE.registerMessage(PacketPlayersReady.class,PacketPlayersReady.class,nextID(),Side.CLIENT);
}",0.8703145196036192
166180,"private boolean mergeItemStacks(ItemStack itemStack,SlotType slotType,boolean reverse){
  SlotRanges ranges=factory.getSlotRangesMap().get(slotType);
  for (  Range<Integer> r : ranges.asRanges()) {
    Integer start=r.lowerEndpoint();
    int end=r.upperEndpoint() + 1;
    if (mergeItemStack(itemStack,start,end,reverse)) {
      return true;
    }
  }
  return false;
}","private boolean mergeItemStacks(ItemStack itemStack,SlotType slotType,boolean reverse){
  SlotRanges ranges=factory.getSlotRangesMap().get(slotType);
  if (ranges == null) {
    return false;
  }
  for (  Range<Integer> r : ranges.asRanges()) {
    Integer start=r.lowerEndpoint();
    int end=r.upperEndpoint() + 1;
    if (mergeItemStack(itemStack,start,end,reverse)) {
      return true;
    }
  }
  return false;
}",0.9417721518987342
166181,"@Override public void readFromNBT(NBTTagCompound tagCompound){
  super.readFromNBT(tagCompound);
  prevIn=tagCompound.getBoolean(""String_Node_Str"");
}","@Override public void readFromNBT(NBTTagCompound tagCompound){
  super.readFromNBT(tagCompound);
  prevIn=tagCompound.getBoolean(""String_Node_Str"");
  readBufferFromNBT(tagCompound);
}",0.8982035928143712
166182,"@Override public void writeToNBT(NBTTagCompound tagCompound){
  super.writeToNBT(tagCompound);
  tagCompound.setBoolean(""String_Node_Str"",prevIn);
}","@Override public void writeToNBT(NBTTagCompound tagCompound){
  super.writeToNBT(tagCompound);
  tagCompound.setBoolean(""String_Node_Str"",prevIn);
  writeBufferToNBT(tagCompound);
}",0.8996960486322189
166183,"private boolean takePearl(){
  for (  ItemStack stack : stacks) {
    if (Items.ender_pearl.equals(stack.getItem()) && stack.stackSize > 0) {
      stack.stackSize--;
      markDirty();
      return true;
    }
  }
  return false;
}","private boolean takePearl(){
  for (int i=0; i < stacks.length; i++) {
    ItemStack stack=stacks[i];
    if (stack != null && Items.ender_pearl.equals(stack.getItem()) && stack.stackSize > 0) {
      decrStackSize(i,1);
      return true;
    }
  }
  return false;
}",0.7735470941883767
166184,"private boolean mergeItemStacks(ItemStack itemStack,SlotType slotType,boolean reverse){
  SlotRanges ranges=factory.getSlotRangesMap().get(slotType);
  if (ranges == null) {
    return false;
  }
  for (  Range<Integer> r : ranges.asRanges()) {
    Integer start=r.lowerEndpoint();
    int end=r.upperEndpoint() + 1;
    if (mergeItemStack(itemStack,start,end,reverse)) {
      return true;
    }
  }
  return false;
}","private boolean mergeItemStacks(ItemStack itemStack,SlotType slotType,boolean reverse){
  SlotRanges ranges=factory.getSlotRangesMap().get(slotType);
  if (ranges == null) {
    return false;
  }
  for (  Range<Integer> r : ranges.asRanges()) {
    Integer start=r.lowerEndpoint();
    int end=r.upperEndpoint();
    if (mergeItemStack(itemStack,start,end,reverse)) {
      return true;
    }
  }
  return false;
}",0.9951923076923076
166185,"@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  super.breakBlock(world,x,y,z,block,meta);
  if (world.isRemote) {
    return;
  }
  TeleportDestinations destinations=TeleportDestinations.getDestinations(world);
  destinations.removeDestination(new Coordinate(x,y,z),0);
  destinations.save(world);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  super.breakBlock(world,x,y,z,block,meta);
  if (world.isRemote) {
    return;
  }
  TeleportDestinations destinations=TeleportDestinations.getDestinations(world);
  destinations.removeDestination(new Coordinate(x,y,z),world.provider.dimensionId);
  destinations.save(world);
}",0.961593172119488
166186,"@Override public void registerBlockIcons(IIconRegister iconRegister){
  iconBottom=iconRegister.registerIcon(RFTools.MODID + ""String_Node_Str"" + ""String_Node_Str"");
  iconSide=iconRegister.registerIcon(RFTools.MODID + ""String_Node_Str"" + ""String_Node_Str"");
}","@Override public void registerBlockIcons(IIconRegister iconRegister){
  iconTop=iconRegister.registerIcon(RFTools.MODID + ""String_Node_Str"" + ""String_Node_Str"");
  iconSide=iconRegister.registerIcon(RFTools.MODID + ""String_Node_Str"" + ""String_Node_Str"");
}",0.9825242718446602
166187,"@Override public IIcon getIcon(int side,int meta){
  if (side == ForgeDirection.DOWN.ordinal()) {
    return iconBottom;
  }
 else {
    return iconSide;
  }
}","@Override public IIcon getIcon(int side,int meta){
  if (side == ForgeDirection.UP.ordinal()) {
    return iconTop;
  }
 else {
    return iconSide;
  }
}",0.9584664536741214
166188,"@Override protected void checkStateServer(){
  super.checkStateServer();
  int meta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  int rf;
  if (BlockTools.getRedstoneSignal(meta)) {
    rf=rfOn;
  }
 else {
    rf=rfOff;
  }
  if (rf <= 0) {
    return;
  }
  for (int i=0; i < 6; i++) {
    ForgeDirection dir=ForgeDirection.getOrientation(i);
    TileEntity te=worldObj.getTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (te instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)te;
      ForgeDirection opposite=dir.getOpposite();
      if (handler.canConnectEnergy(opposite)) {
        int received=handler.receiveEnergy(opposite,rf,false);
        rf-=received;
        if (rf <= 0) {
          return;
        }
      }
    }
  }
}","@Override protected void checkStateServer(){
  super.checkStateServer();
  int meta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord);
  int rf;
  if (BlockTools.getRedstoneSignal(meta)) {
    rf=rfOn;
  }
 else {
    rf=rfOff;
  }
  if (rf <= 0) {
    return;
  }
  int energyStored=getEnergyStored(ForgeDirection.DOWN);
  if (energyStored <= 0) {
    return;
  }
  for (int i=0; i < 6; i++) {
    ForgeDirection dir=ForgeDirection.getOrientation(i);
    TileEntity te=worldObj.getTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (te instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)te;
      ForgeDirection opposite=dir.getOpposite();
      if (handler.canConnectEnergy(opposite)) {
        int rfToGive;
        if (rf <= energyStored) {
          rfToGive=rf;
        }
 else {
          rfToGive=energyStored;
        }
        int received=handler.receiveEnergy(opposite,rfToGive,false);
        energyStored-=extractEnergy(ForgeDirection.DOWN,received,false);
        if (energyStored <= 0) {
          return;
        }
      }
    }
  }
}",0.8195686480799579
166189,"private void loadConfiguration(FMLPreInitializationEvent e){
  Configuration cfg=new Configuration(e.getSuggestedConfigurationFile());
  try {
    cfg.load();
    cfg.addCustomCategoryComment(CATEGORY_CRAFTER,""String_Node_Str"");
    cfg.addCustomCategoryComment(CATEGORY_STORAGE_MONITOR,""String_Node_Str"");
    cfg.addCustomCategoryComment(CATEGORY_NETWORK_MONITOR,""String_Node_Str"");
    CrafterBlockTileEntity3.rfPerOperation=cfg.get(CATEGORY_CRAFTER,""String_Node_Str"",CrafterBlockTileEntity3.rfPerOperation,""String_Node_Str"").getInt();
    CrafterBlockTileEntity3.speedOperations=cfg.get(CATEGORY_CRAFTER,""String_Node_Str"",CrafterBlockTileEntity3.speedOperations,""String_Node_Str"").getInt();
    StorageScannerTileEntity.rfPerOperation=cfg.get(CATEGORY_STORAGE_MONITOR,""String_Node_Str"",StorageScannerTileEntity.rfPerOperation,""String_Node_Str"").getInt();
    StorageScannerTileEntity.scansPerOperation=cfg.get(CATEGORY_STORAGE_MONITOR,""String_Node_Str"",StorageScannerTileEntity.scansPerOperation,""String_Node_Str"").getInt();
    GuiStorageScanner.hilightTime=cfg.get(CATEGORY_STORAGE_MONITOR,""String_Node_Str"",GuiStorageScanner.hilightTime,""String_Node_Str"").getInt();
    GuiNetworkMonitor.hilightTime=cfg.get(CATEGORY_NETWORK_MONITOR,""String_Node_Str"",GuiNetworkMonitor.hilightTime,""String_Node_Str"").getInt();
  }
 catch (  Exception e1) {
    FMLLog.log(Level.ERROR,e1,""String_Node_Str"");
  }
 finally {
    if (cfg.hasChanged()) {
      cfg.save();
    }
  }
}","private void loadConfiguration(FMLPreInitializationEvent e){
  Configuration cfg=new Configuration(e.getSuggestedConfigurationFile());
  try {
    cfg.load();
    cfg.addCustomCategoryComment(CATEGORY_CRAFTER,""String_Node_Str"");
    cfg.addCustomCategoryComment(CATEGORY_STORAGE_MONITOR,""String_Node_Str"");
    cfg.addCustomCategoryComment(CATEGORY_NETWORK_MONITOR,""String_Node_Str"");
    CrafterBlockTileEntity3.rfPerOperation=cfg.get(CATEGORY_CRAFTER,""String_Node_Str"",CrafterBlockTileEntity3.rfPerOperation,""String_Node_Str"").getInt();
    CrafterBlockTileEntity3.speedOperations=cfg.get(CATEGORY_CRAFTER,""String_Node_Str"",CrafterBlockTileEntity3.speedOperations,""String_Node_Str"").getInt();
    StorageScannerTileEntity.rfPerOperation=cfg.get(CATEGORY_STORAGE_MONITOR,""String_Node_Str"",StorageScannerTileEntity.rfPerOperation,""String_Node_Str"").getInt();
    StorageScannerTileEntity.scansPerOperation=cfg.get(CATEGORY_STORAGE_MONITOR,""String_Node_Str"",StorageScannerTileEntity.scansPerOperation,""String_Node_Str"").getInt();
    StorageScannerTileEntity.hilightTime=cfg.get(CATEGORY_STORAGE_MONITOR,""String_Node_Str"",StorageScannerTileEntity.hilightTime,""String_Node_Str"").getInt();
    NetworkMonitorItem.hilightTime=cfg.get(CATEGORY_NETWORK_MONITOR,""String_Node_Str"",NetworkMonitorItem.hilightTime,""String_Node_Str"").getInt();
  }
 catch (  Exception e1) {
    FMLLog.log(Level.ERROR,e1,""String_Node_Str"");
  }
 finally {
    if (cfg.hasChanged()) {
      cfg.save();
    }
  }
}",0.909275558564658
166190,"private void hilightSelectedContainer(int index){
  if (index == -1) {
    return;
  }
  SyncedValueList<InvBlockInfo> inventories=storageScannerTileEntity.getInventories();
  Coordinate c=inventories.get(index).getCoordinate();
  RFTools.instance.hilightBlock(c,mc.theWorld.getTotalWorldTime() + 20 * hilightTime);
  mc.getMinecraft().thePlayer.closeScreen();
}","private void hilightSelectedContainer(int index){
  if (index == -1) {
    return;
  }
  SyncedValueList<InvBlockInfo> inventories=storageScannerTileEntity.getInventories();
  Coordinate c=inventories.get(index).getCoordinate();
  RFTools.instance.hilightBlock(c,mc.theWorld.getTotalWorldTime() + 20 * StorageScannerTileEntity.hilightTime);
  mc.getMinecraft().thePlayer.closeScreen();
}",0.9666221628838452
166191,"private void hilightBlock(int index){
  if (index == -1) {
    return;
  }
  Coordinate c=indexToCoordinate.get(index);
  RFTools.instance.hilightBlock(c,mc.theWorld.getTotalWorldTime() + 20 * hilightTime);
  mc.getMinecraft().thePlayer.closeScreen();
}","private void hilightBlock(int index){
  if (index == -1) {
    return;
  }
  Coordinate c=indexToCoordinate.get(index);
  RFTools.instance.hilightBlock(c,mc.theWorld.getTotalWorldTime() + 20 * NetworkMonitorItem.hilightTime);
  mc.getMinecraft().thePlayer.closeScreen();
}",0.88
166192,"@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  CrafterBlockTileEntity crafterBlockTileEntity=(CrafterBlockTileEntity)world.getTileEntity(x,y,z);
  if (crafterBlockTileEntity != null) {
    BlockTools.emptyInventoryInWorld(world,x,y,z,block,crafterBlockTileEntity);
  }
  super.breakBlock(world,x,y,z,block,meta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  CrafterBlockTileEntity crafterBlockTileEntity=(CrafterBlockTileEntity)world.getTileEntity(x,y,z);
  if (crafterBlockTileEntity != null) {
    for (int i=CrafterContainerFactory.SLOT_CRAFTINPUT; i <= CrafterContainerFactory.SLOT_CRAFTOUTPUT; i++) {
      crafterBlockTileEntity.setInventorySlotContents(i,null);
    }
    BlockTools.emptyInventoryInWorld(world,x,y,z,block,crafterBlockTileEntity);
  }
  super.breakBlock(world,x,y,z,block,meta);
}",0.7986501687289089
166193,"@Override public Widget mouseClick(int x,int y,int button){
  int newSelected=-1;
  int top=0;
  for (int i=first; i < first + getCountSelected() && i < children.size(); i++) {
    Rectangle r=new Rectangle(0,top,bounds.width,rowheight);
    if (r.contains(x,y)) {
      newSelected=i;
      break;
    }
    top+=rowheight;
  }
  if (newSelected != selected) {
    selected=newSelected;
    fireSelectionEvents(selected);
  }
  return null;
}","@Override public Widget mouseClick(int x,int y,int button){
  int newSelected=-1;
  int top=bounds.y;
  for (int i=first; i < first + getCountSelected() && i < children.size(); i++) {
    Rectangle r=new Rectangle(bounds.x,top,bounds.width,rowheight);
    if (r.contains(x,y)) {
      newSelected=i;
      break;
    }
    top+=rowheight;
  }
  if (newSelected != selected) {
    selected=newSelected;
    fireSelectionEvents(selected);
  }
  return null;
}",0.98
166194,"private void layoutBuffer(){
  int leftCol=12;
  int topRow=89;
  addSlotBox(SlotType.SLOT_INPUT,CONTAINER_INVENTORY,SLOT_BUFFER,leftCol,topRow,12,18,2,18);
  for (int py=0; py < 2; py++) {
    addSlot(SlotType.SLOT_OUTPUT,CONTAINER_INVENTORY,SLOT_BUFFEROUT + py,leftCol + 13 * 18,topRow + py * 18);
  }
}","private void layoutBuffer(){
  int leftCol=12;
  int topRow=89;
  addSlotBox(SlotType.SLOT_INPUT,CONTAINER_INVENTORY,SLOT_BUFFER,leftCol,topRow,12,18,2,18);
  for (int py=0; py < 2; py++) {
    addSlot(SlotType.SLOT_OUTPUT,CONTAINER_INVENTORY,SLOT_BUFFEROUT + py,leftCol + 12 * 18,topRow + py * 18);
  }
}",0.99672131147541
166195,"@Override public ItemStack transferStackInSlot(EntityPlayer player,int index){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(index);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (factory.isOutputSlot(index) || factory.isInputSlot(index)) {
      if (!mergeItemStacks(itemstack1,SlotType.SLOT_PLAYERINV,true)) {
        return null;
      }
      slot.onSlotChange(itemstack1,itemstack);
    }
 else     if (factory.isGhostSlot(index)) {
      return null;
    }
 else     if (factory.isPlayerInventorySlot(index)) {
      if (!mergeItemStacks(itemstack1,SlotType.SLOT_INPUT,false)) {
        if (!mergeItemStacks(itemstack1,SlotType.SLOT_PLAYERHOTBAR,false)) {
          return null;
        }
      }
    }
 else     if (factory.isPlayerHotbarSlot(index)) {
      if (!mergeItemStacks(itemstack1,SlotType.SLOT_INPUT,false)) {
        if (!mergeItemStacks(itemstack1,SlotType.SLOT_PLAYERINV,false)) {
          return null;
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"");
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,itemstack1);
  }
  return itemstack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int index){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(index);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (factory.isOutputSlot(index) || factory.isInputSlot(index)) {
      if (!mergeItemStacks(itemstack1,SlotType.SLOT_PLAYERINV,true)) {
        return null;
      }
      slot.onSlotChange(itemstack1,itemstack);
    }
 else     if (factory.isGhostSlot(index) || factory.isGhostOutputSlot(index)) {
      return null;
    }
 else     if (factory.isPlayerInventorySlot(index)) {
      if (!mergeItemStacks(itemstack1,SlotType.SLOT_INPUT,false)) {
        if (!mergeItemStacks(itemstack1,SlotType.SLOT_PLAYERHOTBAR,false)) {
          return null;
        }
      }
    }
 else     if (factory.isPlayerHotbarSlot(index)) {
      if (!mergeItemStacks(itemstack1,SlotType.SLOT_INPUT,false)) {
        if (!mergeItemStacks(itemstack1,SlotType.SLOT_PLAYERINV,false)) {
          return null;
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"");
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,itemstack1);
  }
  return itemstack;
}",0.9870782483847812
166196,"public void generateSlots(){
  for (  SlotFactory slotFactory : factory.getSlots()) {
    Slot slot;
    if (slotFactory.getSlotType() == SlotType.SLOT_GHOST) {
      slot=new GhostSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
 else {
      slot=new Slot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
    addSlotToContainer(slot);
  }
}","public void generateSlots(){
  for (  SlotFactory slotFactory : factory.getSlots()) {
    Slot slot;
    if (slotFactory.getSlotType() == SlotType.SLOT_GHOST) {
      slot=new GhostSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
 else     if (slotFactory.getSlotType() == SlotType.SLOT_GHOSTOUT) {
      slot=new GhostOutputSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
 else {
      slot=new Slot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
    addSlotToContainer(slot);
  }
}",0.8165680473372781
166197,"@Override public ItemStack decrStackSize(int index,int amount){
  if (CrafterContainerFactory.getInstance().isGhostSlot(index)) {
    ItemStack old=stacks[index];
    stacks[index]=null;
    if (old == null) {
      return null;
    }
    old.stackSize=0;
    return old;
  }
 else {
    if (stacks[index] != null) {
      if (stacks[index].stackSize <= amount) {
        ItemStack old=stacks[index];
        stacks[index]=null;
        markDirty();
        return old;
      }
      ItemStack its=stacks[index].splitStack(amount);
      if (stacks[index].stackSize == 0) {
        stacks[index]=null;
      }
      markDirty();
      return its;
    }
    return null;
  }
}","@Override public ItemStack decrStackSize(int index,int amount){
  if (CrafterContainerFactory.getInstance().isGhostSlot(index) || CrafterContainerFactory.getInstance().isGhostOutputSlot(index)) {
    ItemStack old=stacks[index];
    stacks[index]=null;
    if (old == null) {
      return null;
    }
    old.stackSize=0;
    return old;
  }
 else {
    if (stacks[index] != null) {
      if (stacks[index].stackSize <= amount) {
        ItemStack old=stacks[index];
        stacks[index]=null;
        markDirty();
        return old;
      }
      ItemStack its=stacks[index].splitStack(amount);
      if (stacks[index].stackSize == 0) {
        stacks[index]=null;
      }
      markDirty();
      return its;
    }
    return null;
  }
}",0.9533898305084746
166198,"@Override public void setInventorySlotContents(int index,ItemStack stack){
  if (CrafterContainerFactory.getInstance().isGhostSlot(index)) {
    if (stack != null) {
      stacks[index]=stack.copy();
      if (index < 9) {
        stacks[index].stackSize=1;
      }
    }
 else {
      stacks[index]=null;
    }
  }
 else {
    stacks[index]=stack;
    if (stack != null && stack.stackSize > getInventoryStackLimit()) {
      stack.stackSize=getInventoryStackLimit();
    }
    markDirty();
  }
}","@Override public void setInventorySlotContents(int index,ItemStack stack){
  if (CrafterContainerFactory.getInstance().isGhostSlot(index)) {
    if (stack != null) {
      stacks[index]=stack.copy();
      if (index < 9) {
        stacks[index].stackSize=1;
      }
    }
 else {
      stacks[index]=null;
    }
  }
 else   if (CrafterContainerFactory.getInstance().isGhostOutputSlot(index)) {
    if (stack != null) {
      stacks[index]=stack.copy();
    }
 else {
      stacks[index]=null;
    }
  }
 else {
    stacks[index]=stack;
    if (stack != null && stack.stackSize > getInventoryStackLimit()) {
      stack.stackSize=getInventoryStackLimit();
    }
    markDirty();
  }
}",0.8413910093299406
166199,"private void layoutCraftingGrid(){
  int leftCol=193;
  int topRow=7;
  addSlotBox(SlotType.SLOT_GHOST,CONTAINER_INVENTORY,SLOT_CRAFTINPUT,leftCol,topRow,3,18,3,18);
  addSlot(SlotType.SLOT_GHOST,CONTAINER_INVENTORY,SLOT_CRAFTOUTPUT,leftCol,65);
}","private void layoutCraftingGrid(){
  int leftCol=193;
  int topRow=7;
  addSlotBox(SlotType.SLOT_GHOST,CONTAINER_INVENTORY,SLOT_CRAFTINPUT,leftCol,topRow,3,18,3,18);
  addSlot(SlotType.SLOT_GHOSTOUT,CONTAINER_INVENTORY,SLOT_CRAFTOUTPUT,leftCol,65);
}",0.993963782696177
166200,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sidex,float sidey,float sidez){
  adjacentBlocks.clear();
  if (world.isRemote) {
    player.openGui(RFTools.instance,RFTools.GUI_RF_MONITOR,player.worldObj,x,y,z);
    return true;
  }
 else {
    findAdjacentBlocks(adjacentBlocks,world,x,y,z);
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sidex,float sidey,float sidez){
  adjacentBlocks.clear();
  if (world.isRemote) {
    player.openGui(RFTools.instance,RFTools.GUI_RF_MONITOR,player.worldObj,x,y,z);
    return true;
  }
 else {
    findAdjacentBlocks(adjacentBlocks,world,x,y,z);
  }
  return true;
}",0.9906291834002676
166201,"private void findConnectedBlocks(HashMap<Coordinate,BlockInfo> connectedBlocks,World world,int x,int y,int z,boolean first){
  if (y < 0 || y >= world.getActualHeight()) {
    return;
  }
  Coordinate c=new Coordinate(x,y,z);
  if (connectedBlocks.containsKey(c)) {
    return;
  }
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity != null) {
    Block block=world.getBlock(x,y,z);
    connectedBlocks.put(c,new BlockInfo(tileEntity,block,first));
    findConnectedBlocks(connectedBlocks,world,x + 1,y,z,false);
    findConnectedBlocks(connectedBlocks,world,x - 1,y,z,false);
    findConnectedBlocks(connectedBlocks,world,x,y - 1,z,false);
    findConnectedBlocks(connectedBlocks,world,x,y + 1,z,false);
    findConnectedBlocks(connectedBlocks,world,x,y,z - 1,false);
    findConnectedBlocks(connectedBlocks,world,x,y,z + 1,false);
  }
}","private void findConnectedBlocks(HashMap<Coordinate,BlockInfo> connectedBlocks,World world,int x,int y,int z,boolean first){
  if (y < 0 || y >= world.getActualHeight()) {
    return;
  }
  Coordinate c=new Coordinate(x,y,z);
  if (connectedBlocks.containsKey(c)) {
    return;
  }
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity != null) {
    if (tileEntity instanceof IEnergyHandler) {
      Block block=world.getBlock(x,y,z);
      connectedBlocks.put(c,new BlockInfo(tileEntity,block,first));
      findConnectedBlocks(connectedBlocks,world,x + 1,y,z,false);
      findConnectedBlocks(connectedBlocks,world,x - 1,y,z,false);
      findConnectedBlocks(connectedBlocks,world,x,y - 1,z,false);
      findConnectedBlocks(connectedBlocks,world,x,y + 1,z,false);
      findConnectedBlocks(connectedBlocks,world,x,y,z - 1,false);
      findConnectedBlocks(connectedBlocks,world,x,y,z + 1,false);
    }
  }
}",0.9607182940516272
166202,"@Override public Widget mouseClick(int x,int y,int button){
  super.mouseClick(x,y,button);
  dragging=true;
  dx=x - bounds.x;
  dy=y - bounds.y;
  return this;
}","@Override public Widget mouseClick(int x,int y,int button){
  super.mouseClick(x,y,button);
  dragging=true;
  int divider=scrollable.getMaximum() - scrollable.getCountSelected();
  int first;
  if (horizontal) {
    int size=calculateKnobSize(divider,bounds.width);
    first=calculateKnobOffset(divider,size,bounds.width);
    dx=x - bounds.x - first;
    dy=0;
  }
 else {
    int size=calculateKnobSize(divider,bounds.height);
    first=calculateKnobOffset(divider,size,bounds.height);
    dx=0;
    dy=y - bounds.y - first;
  }
  return this;
}",0.3707865168539326
166203,"private void updateScrollable(int x,int y){
  int first;
  int divider=scrollable.getMaximum() - scrollable.getCountSelected();
  if (divider <= 0) {
    first=0;
  }
 else {
    if (horizontal) {
      int size=(scrollable.getCountSelected() * (bounds.width - 4)) / scrollable.getMaximum();
      first=((x - bounds.x - dx) * divider) / (bounds.width - 4 - size);
    }
 else {
      int size=(scrollable.getCountSelected() * (bounds.height - 4)) / scrollable.getMaximum();
      first=((y - bounds.y - dy) * divider) / (bounds.height - 4 - size);
    }
  }
  if (first > divider) {
    first=divider;
  }
  if (first < 0) {
    first=0;
  }
  scrollable.setFirstSelected(first);
}","private void updateScrollable(int x,int y){
  int first;
  int divider=scrollable.getMaximum() - scrollable.getCountSelected();
  if (divider <= 0) {
    first=0;
  }
 else {
    if (horizontal) {
      int size=calculateKnobSize(divider,bounds.width);
      first=((x - bounds.x - dx) * divider) / (bounds.width - 4 - size);
    }
 else {
      int size=calculateKnobSize(divider,bounds.height);
      first=((y - bounds.y - dy) * divider) / (bounds.height - 4 - size);
    }
  }
  if (first > divider) {
    first=divider;
  }
  if (first < 0) {
    first=0;
  }
  scrollable.setFirstSelected(first);
}",0.7729393468118196
166204,"@Override public void draw(int x,int y){
  super.draw(x,y);
  int xx=x + bounds.x;
  int yy=y + bounds.y;
  Gui.drawRect(xx,yy,xx + bounds.width - 1,yy + bounds.height - 1,0xff000000);
  int divider=scrollable.getMaximum() - scrollable.getCountSelected();
  if (horizontal) {
    int size;
    int first;
    if (divider <= 0) {
      size=bounds.width - 4;
      first=0;
    }
 else {
      size=(scrollable.getCountSelected() * (bounds.width - 4)) / scrollable.getMaximum();
      first=(scrollable.getFirstSelected() * (bounds.width - 4 - size)) / divider;
    }
    Gui.drawRect(xx + 2 + first,yy + 2,xx + 2 + first+ size - 1,yy + bounds.height - 4,0xff777777);
  }
 else {
    int size;
    int first;
    if (divider <= 0) {
      size=bounds.height - 4;
      first=0;
    }
 else {
      size=(scrollable.getCountSelected() * (bounds.height - 4)) / scrollable.getMaximum();
      first=(scrollable.getFirstSelected() * (bounds.height - 4 - size)) / divider;
    }
    Gui.drawRect(xx + 2,yy + 2 + first,xx + bounds.width - 4,yy + 2 + first+ size - 1,0xff777777);
  }
}","@Override public void draw(int x,int y){
  super.draw(x,y);
  int xx=x + bounds.x;
  int yy=y + bounds.y;
  Gui.drawRect(xx,yy,xx + bounds.width - 1,yy + bounds.height - 1,0xff000000);
  int divider=scrollable.getMaximum() - scrollable.getCountSelected();
  if (horizontal) {
    int size=calculateKnobSize(divider,bounds.width);
    int first=calculateKnobOffset(divider,size,bounds.width);
    Gui.drawRect(xx + 2 + first,yy + 2,xx + 2 + first+ size - 1,yy + bounds.height - 4,0xff777777);
  }
 else {
    int size=calculateKnobSize(divider,bounds.height);
    int first=calculateKnobOffset(divider,size,bounds.height);
    Gui.drawRect(xx + 2,yy + 2 + first,xx + bounds.width - 4,yy + 2 + first+ size - 1,0xff777777);
  }
}",0.3671658347199112
166205,"@Override public ServicePolicies getServicePoliciesIfUpdated(long lastKnownVersion,long lastActivationTimeInMillis) throws Exception {
  String basedir=System.getProperty(""String_Node_Str"");
  if (basedir == null) {
    basedir=new File(""String_Node_Str"").getCanonicalPath();
  }
  java.nio.file.Path cachePath=FileSystems.getDefault().getPath(basedir,""String_Node_Str"" + cacheFilename);
  byte[] cacheBytes=Files.readAllBytes(cachePath);
  return gson.fromJson(new String(cacheBytes),ServicePolicies.class);
}","@Override public ServicePolicies getServicePoliciesIfUpdated(long lastKnownVersion,long lastActivationTimeInMillis) throws Exception {
  String basedir=System.getProperty(""String_Node_Str"");
  if (basedir == null) {
    basedir=new File(""String_Node_Str"").getCanonicalPath();
  }
  java.nio.file.Path cachePath=FileSystems.getDefault().getPath(basedir,""String_Node_Str"" + cacheFilename);
  byte[] cacheBytes=Files.readAllBytes(cachePath);
  return gson.fromJson(new String(cacheBytes,Charset.defaultCharset()),ServicePolicies.class);
}",0.9741626794258372
166206,"private void goUpGroupHierarchyLdap(Set<String> groupDNs,int groupHierarchyLevels) throws Throwable {
  if (groupHierarchyLevels <= 0 || groupDNs.isEmpty()) {
    return;
  }
  Set<String> nextLevelGroups=new HashSet<String>();
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    String groupFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      groupFilter+=customFilter + ""String_Node_Str"";
    }
    StringBuilder filter=new StringBuilder();
    for (    String groupDN : groupDNs) {
      filter.append(""String_Node_Str"").append(groupMemberAttributeName).append(""String_Node_Str"").append(groupDN).append(""String_Node_Str"");
    }
    filter.append(""String_Node_Str"");
    groupFilter+=config.escapeSearchFilter(filter.toString());
    LOG.info(""String_Node_Str"" + groupFilter);
    for (int ou=0; ou < groupSearchBase.length; ou++) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(groupSearchBase[ou],groupFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            nextLevelGroups.add(groupEntry.getNameInNamespace());
            String gName=(String)groupNameAttr.get();
            Attribute groupMemberAttr=groupEntry.getAttributes().get(groupMemberAttributeName);
            int userCount=0;
            if (groupMemberAttr == null || groupMemberAttr.size() <= 0) {
              LOG.info(""String_Node_Str"" + gName);
              continue;
            }
            NamingEnumeration<?> userEnum=groupMemberAttr.getAll();
            while (userEnum.hasMore()) {
              String originalUserFullName=(String)userEnum.next();
              if (originalUserFullName == null || originalUserFullName.trim().isEmpty()) {
                continue;
              }
              userCount++;
              originalUserFullName=originalUserFullName.toLowerCase();
              if (userNameMap.get(originalUserFullName) != null) {
                groupUserTable.put(gName,originalUserFullName,userNameMap.get(originalUserFullName));
              }
 else {
                groupUserTable.put(gName,originalUserFullName,originalUserFullName);
              }
              groupNameMap.put(groupEntry.getNameInNamespace().toLowerCase(),gName);
            }
            LOG.info(""String_Node_Str"" + gName + ""String_Node_Str""+ userCount);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (int i=0; i < controls.length; i++) {
              if (controls[i] instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      RuntimeException re) {
        LOG.error(""String_Node_Str"",re);
        throw re;
      }
catch (      Exception t) {
        LOG.error(""String_Node_Str"",t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
  }
 catch (  RuntimeException re) {
    LOG.error(""String_Node_Str"",re);
    throw re;
  }
 finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
  goUpGroupHierarchyLdap(nextLevelGroups,groupHierarchyLevels - 1);
}","private void goUpGroupHierarchyLdap(Set<String> groupDNs,int groupHierarchyLevels) throws Throwable {
  if (groupHierarchyLevels <= 0 || groupDNs.isEmpty()) {
    return;
  }
  Set<String> nextLevelGroups=new HashSet<String>();
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    String groupFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      groupFilter+=customFilter + ""String_Node_Str"";
    }
    StringBuilder filter=new StringBuilder();
    for (    String groupDN : groupDNs) {
      filter.append(""String_Node_Str"").append(groupMemberAttributeName).append(""String_Node_Str"").append(groupDN).append(""String_Node_Str"");
    }
    filter.append(""String_Node_Str"");
    groupFilter+=filter;
    LOG.info(""String_Node_Str"" + groupFilter);
    for (int ou=0; ou < groupSearchBase.length; ou++) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(groupSearchBase[ou],groupFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            nextLevelGroups.add(groupEntry.getNameInNamespace());
            String gName=(String)groupNameAttr.get();
            Attribute groupMemberAttr=groupEntry.getAttributes().get(groupMemberAttributeName);
            int userCount=0;
            if (groupMemberAttr == null || groupMemberAttr.size() <= 0) {
              LOG.info(""String_Node_Str"" + gName);
              continue;
            }
            NamingEnumeration<?> userEnum=groupMemberAttr.getAll();
            while (userEnum.hasMore()) {
              String originalUserFullName=(String)userEnum.next();
              if (originalUserFullName == null || originalUserFullName.trim().isEmpty()) {
                continue;
              }
              userCount++;
              originalUserFullName=originalUserFullName.toLowerCase();
              if (userNameMap.get(originalUserFullName) != null) {
                groupUserTable.put(gName,originalUserFullName,userNameMap.get(originalUserFullName));
              }
 else {
                groupUserTable.put(gName,originalUserFullName,originalUserFullName);
              }
              groupNameMap.put(groupEntry.getNameInNamespace().toLowerCase(),gName);
            }
            LOG.info(""String_Node_Str"" + gName + ""String_Node_Str""+ userCount);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (int i=0; i < controls.length; i++) {
              if (controls[i] instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      RuntimeException re) {
        LOG.error(""String_Node_Str"",re);
        throw re;
      }
catch (      Exception t) {
        LOG.error(""String_Node_Str"",t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
  }
 catch (  RuntimeException re) {
    LOG.error(""String_Node_Str"",re);
    throw re;
  }
 finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
  goUpGroupHierarchyLdap(nextLevelGroups,groupHierarchyLevels - 1);
}",0.9953365774533658
166207,"private void goUpGroupHierarchyLdap(Set<String> groupDNs,int groupHierarchyLevels,UserInfo userInfo) throws Throwable {
  LOG.debug(""String_Node_Str"" + groupDNs);
  if (groupHierarchyLevels <= 0 || groupDNs.isEmpty()) {
    return;
  }
  Set<String> nextLevelGroups=new HashSet<String>();
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    String groupFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      groupFilter+=customFilter + ""String_Node_Str"";
    }
    StringBuilder filter=new StringBuilder();
    for (    String groupDN : groupDNs) {
      filter.append(""String_Node_Str"").append(groupMemberAttributeName).append(""String_Node_Str"").append(groupDN).append(""String_Node_Str"");
    }
    filter.append(""String_Node_Str"");
    groupFilter+=config.escapeSearchFilter(filter.toString());
    LOG.debug(""String_Node_Str"" + groupFilter);
    for (    String ou : groupSearchBase) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(ou,groupFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            String groupDN=groupEntry.getNameInNamespace();
            nextLevelGroups.add(groupDN);
            String gName=(String)groupNameAttr.get();
            if (groupNameCaseConversionFlag) {
              if (groupNameLowerCaseFlag) {
                gName=gName.toLowerCase();
              }
 else {
                gName=gName.toUpperCase();
              }
            }
            if (groupNameRegExInst != null) {
              gName=groupNameRegExInst.transform(gName);
            }
            userInfo.addGroup(gName);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (            Control control : controls) {
              if (control instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)control;
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(PAGE_SIZE,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      RuntimeException re) {
        LOG.error(""String_Node_Str"",re);
        throw re;
      }
catch (      Exception t) {
        LOG.error(""String_Node_Str"",t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
  }
 catch (  RuntimeException re) {
    LOG.error(""String_Node_Str"",re);
    throw re;
  }
 finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
  goUpGroupHierarchyLdap(nextLevelGroups,groupHierarchyLevels - 1,userInfo);
}","private void goUpGroupHierarchyLdap(Set<String> groupDNs,int groupHierarchyLevels,UserInfo userInfo) throws Throwable {
  LOG.debug(""String_Node_Str"" + groupDNs);
  if (groupHierarchyLevels <= 0 || groupDNs.isEmpty()) {
    return;
  }
  Set<String> nextLevelGroups=new HashSet<String>();
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    String groupFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      groupFilter+=customFilter + ""String_Node_Str"";
    }
    StringBuilder filter=new StringBuilder();
    for (    String groupDN : groupDNs) {
      filter.append(""String_Node_Str"").append(groupMemberAttributeName).append(""String_Node_Str"").append(groupDN).append(""String_Node_Str"");
    }
    filter.append(""String_Node_Str"");
    groupFilter+=filter;
    LOG.debug(""String_Node_Str"" + groupFilter);
    for (    String ou : groupSearchBase) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(ou,groupFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            String groupDN=groupEntry.getNameInNamespace();
            nextLevelGroups.add(groupDN);
            String gName=(String)groupNameAttr.get();
            if (groupNameCaseConversionFlag) {
              if (groupNameLowerCaseFlag) {
                gName=gName.toLowerCase();
              }
 else {
                gName=gName.toUpperCase();
              }
            }
            if (groupNameRegExInst != null) {
              gName=groupNameRegExInst.transform(gName);
            }
            userInfo.addGroup(gName);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (            Control control : controls) {
              if (control instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)control;
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(PAGE_SIZE,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      RuntimeException re) {
        LOG.error(""String_Node_Str"",re);
        throw re;
      }
catch (      Exception t) {
        LOG.error(""String_Node_Str"",t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
  }
 catch (  RuntimeException re) {
    LOG.error(""String_Node_Str"",re);
    throw re;
  }
 finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
  goUpGroupHierarchyLdap(nextLevelGroups,groupHierarchyLevels - 1,userInfo);
}",0.994547178757705
166208,"private void goUpGroupHierarchyLdap(Set<String> groupDNs,int groupHierarchyLevels) throws Throwable {
  if (groupHierarchyLevels <= 0 || groupDNs.isEmpty()) {
    return;
  }
  Set<String> nextLevelGroups=new HashSet<String>();
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    String groupFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      groupFilter+=customFilter + ""String_Node_Str"";
    }
    StringBuilder filter=new StringBuilder();
    for (    String groupDN : groupDNs) {
      filter.append(""String_Node_Str"").append(groupMemberAttributeName).append(""String_Node_Str"").append(groupDN).append(""String_Node_Str"");
    }
    filter.append(""String_Node_Str"");
    groupFilter+=filter;
    LOG.info(""String_Node_Str"" + groupFilter);
    for (int ou=0; ou < groupSearchBase.length; ou++) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(groupSearchBase[ou],groupFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            nextLevelGroups.add(groupEntry.getNameInNamespace());
            String gName=(String)groupNameAttr.get();
            Attribute groupMemberAttr=groupEntry.getAttributes().get(groupMemberAttributeName);
            int userCount=0;
            if (groupMemberAttr == null || groupMemberAttr.size() <= 0) {
              LOG.info(""String_Node_Str"" + gName);
              continue;
            }
            NamingEnumeration<?> userEnum=groupMemberAttr.getAll();
            while (userEnum.hasMore()) {
              String originalUserFullName=(String)userEnum.next();
              if (originalUserFullName == null || originalUserFullName.trim().isEmpty()) {
                continue;
              }
              userCount++;
              originalUserFullName=originalUserFullName.toLowerCase();
              if (userNameMap.get(originalUserFullName) != null) {
                groupUserTable.put(gName,originalUserFullName,userNameMap.get(originalUserFullName));
              }
 else {
                groupUserTable.put(gName,originalUserFullName,originalUserFullName);
              }
              groupNameMap.put(groupEntry.getNameInNamespace().toLowerCase(),gName);
            }
            LOG.info(""String_Node_Str"" + gName + ""String_Node_Str""+ userCount);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (int i=0; i < controls.length; i++) {
              if (controls[i] instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      RuntimeException re) {
        LOG.error(""String_Node_Str"",re);
        throw re;
      }
catch (      Exception t) {
        LOG.error(""String_Node_Str"",t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
  }
 catch (  RuntimeException re) {
    LOG.error(""String_Node_Str"",re);
    throw re;
  }
 finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
  goUpGroupHierarchyLdap(nextLevelGroups,groupHierarchyLevels - 1);
}","private void goUpGroupHierarchyLdap(Set<String> groupDNs,int groupHierarchyLevels) throws Throwable {
  if (groupHierarchyLevels <= 0 || groupDNs.isEmpty()) {
    return;
  }
  Set<String> nextLevelGroups=new HashSet<String>();
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    String groupFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      groupFilter+=customFilter + ""String_Node_Str"";
    }
    StringBuilder filter=new StringBuilder();
    for (    String groupDN : groupDNs) {
      filter.append(""String_Node_Str"").append(groupMemberAttributeName).append(""String_Node_Str"").append(groupDN).append(""String_Node_Str"");
    }
    filter.append(""String_Node_Str"");
    groupFilter+=config.escapeSearchFilter(filter.toString());
    LOG.info(""String_Node_Str"" + groupFilter);
    for (int ou=0; ou < groupSearchBase.length; ou++) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(groupSearchBase[ou],groupFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            nextLevelGroups.add(groupEntry.getNameInNamespace());
            String gName=(String)groupNameAttr.get();
            Attribute groupMemberAttr=groupEntry.getAttributes().get(groupMemberAttributeName);
            int userCount=0;
            if (groupMemberAttr == null || groupMemberAttr.size() <= 0) {
              LOG.info(""String_Node_Str"" + gName);
              continue;
            }
            NamingEnumeration<?> userEnum=groupMemberAttr.getAll();
            while (userEnum.hasMore()) {
              String originalUserFullName=(String)userEnum.next();
              if (originalUserFullName == null || originalUserFullName.trim().isEmpty()) {
                continue;
              }
              userCount++;
              originalUserFullName=originalUserFullName.toLowerCase();
              if (userNameMap.get(originalUserFullName) != null) {
                groupUserTable.put(gName,originalUserFullName,userNameMap.get(originalUserFullName));
              }
 else {
                groupUserTable.put(gName,originalUserFullName,originalUserFullName);
              }
              groupNameMap.put(groupEntry.getNameInNamespace().toLowerCase(),gName);
            }
            LOG.info(""String_Node_Str"" + gName + ""String_Node_Str""+ userCount);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (int i=0; i < controls.length; i++) {
              if (controls[i] instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      RuntimeException re) {
        LOG.error(""String_Node_Str"",re);
        throw re;
      }
catch (      Exception t) {
        LOG.error(""String_Node_Str"",t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
  }
 catch (  RuntimeException re) {
    LOG.error(""String_Node_Str"",re);
    throw re;
  }
 finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
  goUpGroupHierarchyLdap(nextLevelGroups,groupHierarchyLevels - 1);
}",0.9953365774533658
166209,"private void goUpGroupHierarchyLdap(Set<String> groupDNs,int groupHierarchyLevels,UserInfo userInfo) throws Throwable {
  LOG.debug(""String_Node_Str"" + groupDNs);
  if (groupHierarchyLevels <= 0 || groupDNs.isEmpty()) {
    return;
  }
  Set<String> nextLevelGroups=new HashSet<String>();
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    String groupFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      groupFilter+=customFilter + ""String_Node_Str"";
    }
    StringBuilder filter=new StringBuilder();
    for (    String groupDN : groupDNs) {
      filter.append(""String_Node_Str"").append(groupMemberAttributeName).append(""String_Node_Str"").append(groupDN).append(""String_Node_Str"");
    }
    filter.append(""String_Node_Str"");
    groupFilter+=filter;
    LOG.debug(""String_Node_Str"" + groupFilter);
    for (    String ou : groupSearchBase) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(ou,groupFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            String groupDN=groupEntry.getNameInNamespace();
            nextLevelGroups.add(groupDN);
            String gName=(String)groupNameAttr.get();
            if (groupNameCaseConversionFlag) {
              if (groupNameLowerCaseFlag) {
                gName=gName.toLowerCase();
              }
 else {
                gName=gName.toUpperCase();
              }
            }
            if (groupNameRegExInst != null) {
              gName=groupNameRegExInst.transform(gName);
            }
            userInfo.addGroup(gName);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (            Control control : controls) {
              if (control instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)control;
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(PAGE_SIZE,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      RuntimeException re) {
        LOG.error(""String_Node_Str"",re);
        throw re;
      }
catch (      Exception t) {
        LOG.error(""String_Node_Str"",t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
  }
 catch (  RuntimeException re) {
    LOG.error(""String_Node_Str"",re);
    throw re;
  }
 finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
  goUpGroupHierarchyLdap(nextLevelGroups,groupHierarchyLevels - 1,userInfo);
}","private void goUpGroupHierarchyLdap(Set<String> groupDNs,int groupHierarchyLevels,UserInfo userInfo) throws Throwable {
  LOG.debug(""String_Node_Str"" + groupDNs);
  if (groupHierarchyLevels <= 0 || groupDNs.isEmpty()) {
    return;
  }
  Set<String> nextLevelGroups=new HashSet<String>();
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    String groupFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      groupFilter+=customFilter + ""String_Node_Str"";
    }
    StringBuilder filter=new StringBuilder();
    for (    String groupDN : groupDNs) {
      filter.append(""String_Node_Str"").append(groupMemberAttributeName).append(""String_Node_Str"").append(groupDN).append(""String_Node_Str"");
    }
    filter.append(""String_Node_Str"");
    groupFilter+=config.escapeSearchFilter(filter.toString());
    LOG.debug(""String_Node_Str"" + groupFilter);
    for (    String ou : groupSearchBase) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(ou,groupFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            String groupDN=groupEntry.getNameInNamespace();
            nextLevelGroups.add(groupDN);
            String gName=(String)groupNameAttr.get();
            if (groupNameCaseConversionFlag) {
              if (groupNameLowerCaseFlag) {
                gName=gName.toLowerCase();
              }
 else {
                gName=gName.toUpperCase();
              }
            }
            if (groupNameRegExInst != null) {
              gName=groupNameRegExInst.transform(gName);
            }
            userInfo.addGroup(gName);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (            Control control : controls) {
              if (control instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)control;
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(PAGE_SIZE,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      RuntimeException re) {
        LOG.error(""String_Node_Str"",re);
        throw re;
      }
catch (      Exception t) {
        LOG.error(""String_Node_Str"",t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
  }
 catch (  RuntimeException re) {
    LOG.error(""String_Node_Str"",re);
    throw re;
  }
 finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
  goUpGroupHierarchyLdap(nextLevelGroups,groupHierarchyLevels - 1,userInfo);
}",0.994547178757705
166210,"public static void initResourceMap(){
  if (resourcemapProperties == null) {
    resourcemapProperties=new Properties();
    InputStream in=HadoopConfigHolder.class.getClassLoader().getResourceAsStream(RESOURCEMAP_PROP_FILE);
    if (in != null) {
      try {
        resourcemapProperties.load(in);
        for (        Map.Entry<Object,Object> entry : resourcemapProperties.entrySet()) {
          String key=(String)entry.getKey();
          String value=(String)entry.getValue();
          if (RANGER_SECTION_NAME.equals(value)) {
            rangerInternalPropertyKeys.add(key);
          }
        }
      }
 catch (      IOException e) {
        throw new HadoopException(""String_Node_Str"" + RESOURCEMAP_PROP_FILE + ""String_Node_Str"",e);
      }
 finally {
        if (in != null) {
          try {
            in.close();
          }
 catch (          IOException ioe) {
          }
        }
      }
    }
 else {
      throw new HadoopException(""String_Node_Str"" + RESOURCEMAP_PROP_FILE + ""String_Node_Str"");
    }
  }
}","private static void initResourceMap(){
  Properties props=new Properties();
  InputStream in=HadoopConfigHolder.class.getClassLoader().getResourceAsStream(RESOURCEMAP_PROP_FILE);
  if (in != null) {
    try {
      props.load(in);
      for (      Map.Entry<Object,Object> entry : props.entrySet()) {
        String value=(String)entry.getValue();
        if (RANGER_SECTION_NAME.equals(value)) {
          String key=(String)entry.getKey();
          rangerInternalPropertyKeys.add(key);
        }
      }
      resourcemapProperties=props;
    }
 catch (    IOException e) {
      throw new HadoopException(""String_Node_Str"" + RESOURCEMAP_PROP_FILE + ""String_Node_Str"",e);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
 else {
    throw new HadoopException(""String_Node_Str"" + RESOURCEMAP_PROP_FILE + ""String_Node_Str"");
  }
}",0.7176350662589195
166211,"/** 
 * Checks that the <b>file</b> access is <b>blocked</b> for the given user in the given groups. Throws an exception, if not.
 */
public void checkAccessBlocked(FsAction access,String userName,String... groups) throws AccessControlException {
  try {
    checkAccess(access,userName,groups);
    Assert.fail(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ userName+ ""String_Node_Str""+ groups);
  }
 catch (  AccessControlException ace) {
    Assert.assertNotNull(ace);
  }
}","/** 
 * Checks that the <b>file</b> access is <b>blocked</b> for the given user in the given groups. Throws an exception, if not.
 */
public void checkAccessBlocked(FsAction access,String userName,String... groups) throws AccessControlException {
  try {
    checkAccess(access,userName,groups);
    Assert.fail(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ userName+ ""String_Node_Str""+ Arrays.asList(groups));
  }
 catch (  AccessControlException ace) {
    Assert.assertNotNull(ace);
  }
}",0.9735553379040156
166212,"private boolean validatePolicyItems(List<? extends RangerPolicyItem> policyItems){
  boolean isPolicyItemValid=true;
  if (CollectionUtils.isNotEmpty(policyItems)) {
    for (    RangerPolicyItem policyItem : policyItems) {
      if (policyItem == null) {
        isPolicyItemValid=false;
        break;
      }
      if (CollectionUtils.isEmpty(policyItem.getUsers()) && CollectionUtils.isEmpty(policyItem.getGroups())) {
        isPolicyItemValid=false;
        break;
      }
      if (policyItem.getUsers() != null && (policyItem.getUsers().contains(null) || policyItem.getUsers().contains(""String_Node_Str""))) {
        isPolicyItemValid=false;
        break;
      }
      if (policyItem.getGroups() != null && (policyItem.getGroups().contains(null) || policyItem.getGroups().contains(""String_Node_Str""))) {
        isPolicyItemValid=false;
        break;
      }
      if (CollectionUtils.isEmpty(policyItem.getAccesses()) || policyItem.getAccesses().contains(null) || policyItem.getAccesses().contains(""String_Node_Str"")) {
        isPolicyItemValid=false;
        break;
      }
    }
  }
  return isPolicyItemValid;
}","private boolean validatePolicyItems(List<? extends RangerPolicyItem> policyItems){
  if (CollectionUtils.isNotEmpty(policyItems)) {
    for (    RangerPolicyItem policyItem : policyItems) {
      if (policyItem == null) {
        return false;
      }
      if (CollectionUtils.isEmpty(policyItem.getUsers()) && CollectionUtils.isEmpty(policyItem.getGroups())) {
        return false;
      }
      if (policyItem.getUsers() != null && (policyItem.getUsers().contains(null) || policyItem.getUsers().contains(""String_Node_Str""))) {
        return false;
      }
      if (policyItem.getGroups() != null && (policyItem.getGroups().contains(null) || policyItem.getGroups().contains(""String_Node_Str""))) {
        return false;
      }
      if (CollectionUtils.isEmpty(policyItem.getAccesses()) || policyItem.getAccesses().contains(null)) {
        return false;
      }
      for (      RangerPolicyItemAccess itemAccesses : policyItem.getAccesses()) {
        if (itemAccesses.getType() == null || itemAccesses.getIsAllowed() == null) {
          return false;
        }
      }
    }
  }
  return true;
}",0.7431645002241147
166213,"@Transactional(readOnly=false,propagation=Propagation.REQUIRED) public VXUser createServiceConfigUser(String userName){
  if (userName == null || ""String_Node_Str"".equalsIgnoreCase(userName) || userName.trim().isEmpty()) {
    logger.error(""String_Node_Str"" + userName);
    throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  VXUser vXUser=null;
  VXPortalUser vXPortalUser=null;
  XXUser xxUser=daoManager.getXXUser().findByUserName(userName);
  XXPortalUser xXPortalUser=daoManager.getXXPortalUser().findByLoginId(userName);
  String actualPassword=""String_Node_Str"";
  if (xxUser != null) {
    vXUser=xUserService.populateViewBean(xxUser);
    return vXUser;
  }
  if (xxUser == null) {
    vXUser=new VXUser();
    vXUser.setName(userName);
    vXUser.setUserSource(RangerCommonEnums.USER_EXTERNAL);
    vXUser.setDescription(vXUser.getName());
    actualPassword=vXUser.getPassword();
  }
  if (xXPortalUser == null) {
    vXPortalUser=new VXPortalUser();
    vXPortalUser.setLoginId(userName);
    vXPortalUser.setEmailAddress(vXUser.getEmailAddress());
    vXPortalUser.setFirstName(vXUser.getFirstName());
    vXPortalUser.setLastName(vXUser.getLastName());
    vXPortalUser.setPassword(vXUser.getPassword());
    vXPortalUser.setUserSource(RangerCommonEnums.USER_EXTERNAL);
    ArrayList<String> roleList=new ArrayList<String>();
    roleList.add(RangerConstants.ROLE_USER);
    vXPortalUser.setUserRoleList(roleList);
    xXPortalUser=userMgr.mapVXPortalUserToXXPortalUser(vXPortalUser);
    xXPortalUser=userMgr.createUser(xXPortalUser,RangerCommonEnums.STATUS_ENABLED,roleList);
  }
  VXUser createdXUser=null;
  if (xxUser == null && vXUser != null) {
    try {
      createdXUser=xUserService.createResource(vXUser);
    }
 catch (    Exception ex) {
      logger.error(""String_Node_Str"" + createdXUser.getName(),ex);
    }
  }
  if (createdXUser != null) {
    try {
      logger.info(""String_Node_Str"" + createdXUser.getName());
      createdXUser.setPassword(actualPassword);
      List<XXTrxLog> trxLogList=xUserService.getTransactionLog(createdXUser,""String_Node_Str"");
      String hiddenPassword=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
      createdXUser.setPassword(hiddenPassword);
      xaBizUtil.createTrxLog(trxLogList);
      if (xXPortalUser != null) {
        vXPortalUser=userMgr.mapXXPortalUserToVXPortalUserForDefaultAccount(xXPortalUser);
        assignPermissionToUser(vXPortalUser,true);
      }
    }
 catch (    Exception ex) {
      logger.error(""String_Node_Str"" + createdXUser.getName(),ex);
    }
  }
 else {
    xxUser=daoManager.getXXUser().findByUserName(userName);
    if (xxUser != null) {
      createdXUser=xUserService.populateViewBean(xxUser);
    }
  }
  return createdXUser;
}","@Transactional(readOnly=false,propagation=Propagation.REQUIRED) public VXUser createServiceConfigUser(String userName){
  if (userName == null || ""String_Node_Str"".equalsIgnoreCase(userName) || userName.trim().isEmpty()) {
    logger.error(""String_Node_Str"" + userName);
    throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  VXUser vXUser=null;
  VXPortalUser vXPortalUser=null;
  XXUser xxUser=daoManager.getXXUser().findByUserName(userName);
  XXPortalUser xXPortalUser=daoManager.getXXPortalUser().findByLoginId(userName);
  String actualPassword=""String_Node_Str"";
  if (xxUser != null) {
    vXUser=xUserService.populateViewBean(xxUser);
    return vXUser;
  }
  if (xxUser == null) {
    vXUser=new VXUser();
    vXUser.setName(userName);
    vXUser.setUserSource(RangerCommonEnums.USER_EXTERNAL);
    vXUser.setDescription(vXUser.getName());
    actualPassword=vXUser.getPassword();
  }
  if (xXPortalUser == null) {
    vXPortalUser=new VXPortalUser();
    vXPortalUser.setLoginId(userName);
    vXPortalUser.setEmailAddress(vXUser.getEmailAddress());
    vXPortalUser.setFirstName(vXUser.getFirstName());
    vXPortalUser.setLastName(vXUser.getLastName());
    vXPortalUser.setPassword(vXUser.getPassword());
    vXPortalUser.setUserSource(RangerCommonEnums.USER_EXTERNAL);
    ArrayList<String> roleList=new ArrayList<String>();
    roleList.add(RangerConstants.ROLE_USER);
    vXPortalUser.setUserRoleList(roleList);
    xXPortalUser=userMgr.mapVXPortalUserToXXPortalUser(vXPortalUser);
    xXPortalUser=userMgr.createUser(xXPortalUser,RangerCommonEnums.STATUS_ENABLED,roleList);
  }
  VXUser createdXUser=null;
  if (xxUser == null && vXUser != null) {
    try {
      createdXUser=xUserService.createResource(vXUser);
    }
 catch (    Exception ex) {
      logger.error(""String_Node_Str"" + vXUser.getName(),ex);
    }
  }
  if (createdXUser != null) {
    try {
      logger.info(""String_Node_Str"" + createdXUser.getName());
      createdXUser.setPassword(actualPassword);
      List<XXTrxLog> trxLogList=xUserService.getTransactionLog(createdXUser,""String_Node_Str"");
      String hiddenPassword=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
      createdXUser.setPassword(hiddenPassword);
      xaBizUtil.createTrxLog(trxLogList);
      if (xXPortalUser != null) {
        vXPortalUser=userMgr.mapXXPortalUserToVXPortalUserForDefaultAccount(xXPortalUser);
        assignPermissionToUser(vXPortalUser,true);
      }
    }
 catch (    Exception ex) {
      logger.error(""String_Node_Str"" + createdXUser.getName(),ex);
    }
  }
 else {
    xxUser=daoManager.getXXUser().findByUserName(userName);
    if (xxUser != null) {
      createdXUser=xUserService.populateViewBean(xxUser);
    }
  }
  return createdXUser;
}",0.9985704074338814
166214,"public VXUser updateXUser(VXUser vXUser){
  if (vXUser == null || vXUser.getName() == null || ""String_Node_Str"".equalsIgnoreCase(vXUser.getName()) || vXUser.getName().trim().isEmpty()) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  checkAccess(vXUser.getName());
  VXPortalUser oldUserProfile=userMgr.getUserProfileByLoginId(vXUser.getName());
  VXPortalUser vXPortalUser=new VXPortalUser();
  if (oldUserProfile != null && oldUserProfile.getId() != null) {
    vXPortalUser.setId(oldUserProfile.getId());
  }
  vXPortalUser.setFirstName(vXUser.getFirstName());
  if (""String_Node_Str"".equalsIgnoreCase(vXPortalUser.getFirstName())) {
    vXPortalUser.setFirstName(""String_Node_Str"");
  }
  vXPortalUser.setLastName(vXUser.getLastName());
  if (""String_Node_Str"".equalsIgnoreCase(vXPortalUser.getLastName())) {
    vXPortalUser.setLastName(""String_Node_Str"");
  }
  vXPortalUser.setEmailAddress(vXUser.getEmailAddress());
  vXPortalUser.setLoginId(vXUser.getName());
  vXPortalUser.setStatus(vXUser.getStatus());
  vXPortalUser.setUserRoleList(vXUser.getUserRoleList());
  if (vXPortalUser.getFirstName() != null && vXPortalUser.getLastName() != null && !vXPortalUser.getFirstName().trim().isEmpty() && !vXPortalUser.getLastName().trim().isEmpty()) {
    vXPortalUser.setPublicScreenName(vXPortalUser.getFirstName() + ""String_Node_Str"" + vXPortalUser.getLastName());
  }
 else {
    vXPortalUser.setPublicScreenName(vXUser.getName());
  }
  vXPortalUser.setUserSource(vXUser.getUserSource());
  String hiddenPasswordString=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  String password=vXUser.getPassword();
  if (oldUserProfile != null && password != null && password.equals(hiddenPasswordString)) {
    vXPortalUser.setPassword(oldUserProfile.getPassword());
  }
 else   if (oldUserProfile != null && oldUserProfile.getUserSource() == RangerCommonEnums.USER_EXTERNAL && password != null) {
    vXPortalUser.setPassword(oldUserProfile.getPassword());
    logger.debug(""String_Node_Str"");
  }
 else   if (password != null) {
    validatePassword(vXUser);
    vXPortalUser.setPassword(password);
  }
  Collection<Long> groupIdList=vXUser.getGroupIdList();
  XXPortalUser xXPortalUser=new XXPortalUser();
  xXPortalUser=userMgr.updateUserWithPass(vXPortalUser);
  Collection<String> roleListUpdatedProfile=new ArrayList<String>();
  if (oldUserProfile != null && oldUserProfile.getId() != null) {
    if (vXUser != null && vXUser.getUserRoleList() != null) {
      Collection<String> roleListOldProfile=oldUserProfile.getUserRoleList();
      Collection<String> roleListNewProfile=vXUser.getUserRoleList();
      if (roleListNewProfile != null && roleListOldProfile != null) {
        for (        String role : roleListNewProfile) {
          if (role != null && !roleListOldProfile.contains(role)) {
            roleListUpdatedProfile.add(role);
          }
        }
      }
    }
  }
  if (roleListUpdatedProfile != null && roleListUpdatedProfile.size() > 0) {
    vXPortalUser.setUserRoleList(roleListUpdatedProfile);
    List<XXUserPermission> xuserPermissionList=daoManager.getXXUserPermission().findByUserPermissionId(vXPortalUser.getId());
    if (xuserPermissionList != null && xuserPermissionList.size() > 0) {
      for (      XXUserPermission xXUserPermission : xuserPermissionList) {
        if (xXUserPermission != null) {
          try {
            xUserPermissionService.deleteResource(xXUserPermission.getId());
          }
 catch (          Exception e) {
            logger.error(e.getMessage());
          }
        }
      }
    }
    assignPermissionToUser(vXPortalUser,true);
  }
  Collection<String> roleList=new ArrayList<String>();
  if (xXPortalUser != null) {
    roleList=userMgr.getRolesForUser(xXPortalUser);
  }
  if (roleList == null || roleList.size() == 0) {
    roleList=new ArrayList<String>();
    roleList.add(RangerConstants.ROLE_USER);
  }
  vXUser=xUserService.updateResource(vXUser);
  vXUser.setUserRoleList(roleList);
  if (oldUserProfile.getUserSource() == RangerCommonEnums.USER_APP) {
    vXUser.setPassword(password);
  }
 else   if (oldUserProfile.getUserSource() == RangerCommonEnums.USER_EXTERNAL) {
    vXUser.setPassword(oldUserProfile.getPassword());
  }
  List<XXTrxLog> trxLogList=xUserService.getTransactionLog(vXUser,oldUserProfile,""String_Node_Str"");
  vXUser.setPassword(hiddenPasswordString);
  Long userId=vXUser.getId();
  List<Long> groupUsersToRemove=new ArrayList<Long>();
  if (groupIdList != null) {
    SearchCriteria searchCriteria=new SearchCriteria();
    searchCriteria.addParam(""String_Node_Str"",userId);
    VXGroupUserList vXGroupUserList=xGroupUserService.searchXGroupUsers(searchCriteria);
    List<VXGroupUser> vXGroupUsers=vXGroupUserList.getList();
    if (vXGroupUsers != null) {
      for (      Long groupId : groupIdList) {
        boolean found=false;
        for (        VXGroupUser vXGroupUser : vXGroupUsers) {
          if (groupId.equals(vXGroupUser.getParentGroupId())) {
            found=true;
            break;
          }
        }
        if (!found) {
          VXGroupUser vXGroupUser=createXGroupUser(userId,groupId);
          trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
        }
      }
      for (      VXGroupUser vXGroupUser : vXGroupUsers) {
        boolean found=false;
        for (        Long groupId : groupIdList) {
          if (groupId.equals(vXGroupUser.getParentGroupId())) {
            trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
            found=true;
            break;
          }
        }
        if (!found) {
          trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
          groupUsersToRemove.add(vXGroupUser.getId());
        }
      }
    }
 else {
      for (      Long groupId : groupIdList) {
        VXGroupUser vXGroupUser=createXGroupUser(userId,groupId);
        trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
      }
    }
    vXUser.setGroupIdList(groupIdList);
  }
 else {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + userId);
  }
  xaBizUtil.createTrxLog(trxLogList);
  for (  Long groupUserId : groupUsersToRemove) {
    xGroupUserService.deleteResource(groupUserId);
  }
  return vXUser;
}","public VXUser updateXUser(VXUser vXUser){
  if (vXUser == null || vXUser.getName() == null || ""String_Node_Str"".equalsIgnoreCase(vXUser.getName()) || vXUser.getName().trim().isEmpty()) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  checkAccess(vXUser.getName());
  VXPortalUser oldUserProfile=userMgr.getUserProfileByLoginId(vXUser.getName());
  VXPortalUser vXPortalUser=new VXPortalUser();
  if (oldUserProfile != null && oldUserProfile.getId() != null) {
    vXPortalUser.setId(oldUserProfile.getId());
  }
  vXPortalUser.setFirstName(vXUser.getFirstName());
  if (""String_Node_Str"".equalsIgnoreCase(vXPortalUser.getFirstName())) {
    vXPortalUser.setFirstName(""String_Node_Str"");
  }
  vXPortalUser.setLastName(vXUser.getLastName());
  if (""String_Node_Str"".equalsIgnoreCase(vXPortalUser.getLastName())) {
    vXPortalUser.setLastName(""String_Node_Str"");
  }
  vXPortalUser.setEmailAddress(vXUser.getEmailAddress());
  vXPortalUser.setLoginId(vXUser.getName());
  vXPortalUser.setStatus(vXUser.getStatus());
  vXPortalUser.setUserRoleList(vXUser.getUserRoleList());
  if (vXPortalUser.getFirstName() != null && vXPortalUser.getLastName() != null && !vXPortalUser.getFirstName().trim().isEmpty() && !vXPortalUser.getLastName().trim().isEmpty()) {
    vXPortalUser.setPublicScreenName(vXPortalUser.getFirstName() + ""String_Node_Str"" + vXPortalUser.getLastName());
  }
 else {
    vXPortalUser.setPublicScreenName(vXUser.getName());
  }
  vXPortalUser.setUserSource(vXUser.getUserSource());
  String hiddenPasswordString=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  String password=vXUser.getPassword();
  if (oldUserProfile != null && password != null && password.equals(hiddenPasswordString)) {
    vXPortalUser.setPassword(oldUserProfile.getPassword());
  }
 else   if (oldUserProfile != null && oldUserProfile.getUserSource() == RangerCommonEnums.USER_EXTERNAL && password != null) {
    vXPortalUser.setPassword(oldUserProfile.getPassword());
    logger.debug(""String_Node_Str"");
  }
 else   if (password != null) {
    validatePassword(vXUser);
    vXPortalUser.setPassword(password);
  }
  Collection<Long> groupIdList=vXUser.getGroupIdList();
  XXPortalUser xXPortalUser=new XXPortalUser();
  xXPortalUser=userMgr.updateUserWithPass(vXPortalUser);
  Collection<String> roleListUpdatedProfile=new ArrayList<String>();
  if (oldUserProfile != null && oldUserProfile.getId() != null) {
    if (vXUser != null && vXUser.getUserRoleList() != null) {
      Collection<String> roleListOldProfile=oldUserProfile.getUserRoleList();
      Collection<String> roleListNewProfile=vXUser.getUserRoleList();
      if (roleListNewProfile != null && roleListOldProfile != null) {
        for (        String role : roleListNewProfile) {
          if (role != null && !roleListOldProfile.contains(role)) {
            roleListUpdatedProfile.add(role);
          }
        }
      }
    }
  }
  if (roleListUpdatedProfile != null && roleListUpdatedProfile.size() > 0) {
    vXPortalUser.setUserRoleList(roleListUpdatedProfile);
    List<XXUserPermission> xuserPermissionList=daoManager.getXXUserPermission().findByUserPermissionId(vXPortalUser.getId());
    if (xuserPermissionList != null && xuserPermissionList.size() > 0) {
      for (      XXUserPermission xXUserPermission : xuserPermissionList) {
        if (xXUserPermission != null) {
          try {
            xUserPermissionService.deleteResource(xXUserPermission.getId());
          }
 catch (          Exception e) {
            logger.error(e.getMessage());
          }
        }
      }
    }
    assignPermissionToUser(vXPortalUser,true);
  }
  Collection<String> roleList=new ArrayList<String>();
  if (xXPortalUser != null) {
    roleList=userMgr.getRolesForUser(xXPortalUser);
  }
  if (roleList == null || roleList.size() == 0) {
    roleList=new ArrayList<String>();
    roleList.add(RangerConstants.ROLE_USER);
  }
  vXUser=xUserService.updateResource(vXUser);
  vXUser.setUserRoleList(roleList);
  if (oldUserProfile != null) {
    if (oldUserProfile.getUserSource() == RangerCommonEnums.USER_APP) {
      vXUser.setPassword(password);
    }
 else     if (oldUserProfile.getUserSource() == RangerCommonEnums.USER_EXTERNAL) {
      vXUser.setPassword(oldUserProfile.getPassword());
    }
  }
  List<XXTrxLog> trxLogList=xUserService.getTransactionLog(vXUser,oldUserProfile,""String_Node_Str"");
  vXUser.setPassword(hiddenPasswordString);
  Long userId=vXUser.getId();
  List<Long> groupUsersToRemove=new ArrayList<Long>();
  if (groupIdList != null) {
    SearchCriteria searchCriteria=new SearchCriteria();
    searchCriteria.addParam(""String_Node_Str"",userId);
    VXGroupUserList vXGroupUserList=xGroupUserService.searchXGroupUsers(searchCriteria);
    List<VXGroupUser> vXGroupUsers=vXGroupUserList.getList();
    if (vXGroupUsers != null) {
      for (      Long groupId : groupIdList) {
        boolean found=false;
        for (        VXGroupUser vXGroupUser : vXGroupUsers) {
          if (groupId.equals(vXGroupUser.getParentGroupId())) {
            found=true;
            break;
          }
        }
        if (!found) {
          VXGroupUser vXGroupUser=createXGroupUser(userId,groupId);
          trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
        }
      }
      for (      VXGroupUser vXGroupUser : vXGroupUsers) {
        boolean found=false;
        for (        Long groupId : groupIdList) {
          if (groupId.equals(vXGroupUser.getParentGroupId())) {
            trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
            found=true;
            break;
          }
        }
        if (!found) {
          trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
          groupUsersToRemove.add(vXGroupUser.getId());
        }
      }
    }
 else {
      for (      Long groupId : groupIdList) {
        VXGroupUser vXGroupUser=createXGroupUser(userId,groupId);
        trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
      }
    }
    vXUser.setGroupIdList(groupIdList);
  }
 else {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + userId);
  }
  xaBizUtil.createTrxLog(trxLogList);
  for (  Long groupUserId : groupUsersToRemove) {
    xGroupUserService.deleteResource(groupUserId);
  }
  return vXUser;
}",0.9962703962703964
166215,"public SearchFilter getSearchFilter(HttpServletRequest request,List<SortField> sortFields){
  if (request == null) {
    return null;
  }
  SearchFilter ret=new SearchFilter();
  if (MapUtils.isEmpty(request.getParameterMap())) {
    ret.setParams(new HashMap<String,String>());
  }
  ret.setParam(SearchFilter.SERVICE_TYPE,request.getParameter(SearchFilter.SERVICE_TYPE));
  ret.setParam(SearchFilter.SERVICE_TYPE_ID,request.getParameter(SearchFilter.SERVICE_TYPE_ID));
  ret.setParam(SearchFilter.SERVICE_NAME,request.getParameter(SearchFilter.SERVICE_NAME));
  ret.setParam(SearchFilter.SERVICE_NAME_PARTIAL,request.getParameter(SearchFilter.SERVICE_NAME_PARTIAL));
  ret.setParam(SearchFilter.SERVICE_ID,request.getParameter(SearchFilter.SERVICE_ID));
  ret.setParam(SearchFilter.POLICY_NAME,request.getParameter(SearchFilter.POLICY_NAME));
  ret.setParam(SearchFilter.POLICY_NAME_PARTIAL,request.getParameter(SearchFilter.POLICY_NAME_PARTIAL));
  ret.setParam(SearchFilter.POLICY_ID,request.getParameter(SearchFilter.POLICY_ID));
  ret.setParam(SearchFilter.IS_ENABLED,request.getParameter(SearchFilter.IS_ENABLED));
  ret.setParam(SearchFilter.IS_RECURSIVE,request.getParameter(SearchFilter.IS_RECURSIVE));
  ret.setParam(SearchFilter.USER,request.getParameter(SearchFilter.USER));
  ret.setParam(SearchFilter.GROUP,request.getParameter(SearchFilter.GROUP));
  ret.setParam(SearchFilter.POL_RESOURCE,request.getParameter(SearchFilter.POL_RESOURCE));
  ret.setParam(SearchFilter.RESOURCE_SIGNATURE,request.getParameter(SearchFilter.RESOURCE_SIGNATURE));
  ret.setParam(SearchFilter.POLICY_TYPE,request.getParameter(SearchFilter.POLICY_TYPE));
  ret.setParam(SearchFilter.POLICY_LABEL,request.getParameter(SearchFilter.POLICY_LABEL));
  ret.setParam(SearchFilter.POLICY_LABELS_PARTIAL,request.getParameter(SearchFilter.POLICY_LABELS_PARTIAL));
  ret.setParam(SearchFilter.PLUGIN_HOST_NAME,request.getParameter(SearchFilter.PLUGIN_HOST_NAME));
  ret.setParam(SearchFilter.PLUGIN_APP_TYPE,request.getParameter(SearchFilter.PLUGIN_APP_TYPE));
  ret.setParam(SearchFilter.PLUGIN_ENTITY_TYPE,request.getParameter(SearchFilter.PLUGIN_ENTITY_TYPE));
  ret.setParam(SearchFilter.PLUGIN_IP_ADDRESS,request.getParameter(SearchFilter.PLUGIN_IP_ADDRESS));
  for (  Map.Entry<String,String[]> e : request.getParameterMap().entrySet()) {
    String name=e.getKey();
    String[] values=e.getValue();
    if (!StringUtils.isEmpty(name) && !ArrayUtils.isEmpty(values) && name.startsWith(SearchFilter.RESOURCE_PREFIX)) {
      ret.setParam(name,values[0]);
    }
  }
  ret.setParam(SearchFilter.RESOURCE_MATCH_SCOPE,request.getParameter(SearchFilter.RESOURCE_MATCH_SCOPE));
  extractCommonCriteriasForFilter(request,ret,sortFields);
  return ret;
}","public SearchFilter getSearchFilter(HttpServletRequest request,List<SortField> sortFields){
  Validate.notNull(request,""String_Node_Str"");
  SearchFilter ret=new SearchFilter();
  if (MapUtils.isEmpty(request.getParameterMap())) {
    ret.setParams(new HashMap<String,String>());
  }
  ret.setParam(SearchFilter.SERVICE_TYPE,request.getParameter(SearchFilter.SERVICE_TYPE));
  ret.setParam(SearchFilter.SERVICE_TYPE_ID,request.getParameter(SearchFilter.SERVICE_TYPE_ID));
  ret.setParam(SearchFilter.SERVICE_NAME,request.getParameter(SearchFilter.SERVICE_NAME));
  ret.setParam(SearchFilter.SERVICE_NAME_PARTIAL,request.getParameter(SearchFilter.SERVICE_NAME_PARTIAL));
  ret.setParam(SearchFilter.SERVICE_ID,request.getParameter(SearchFilter.SERVICE_ID));
  ret.setParam(SearchFilter.POLICY_NAME,request.getParameter(SearchFilter.POLICY_NAME));
  ret.setParam(SearchFilter.POLICY_NAME_PARTIAL,request.getParameter(SearchFilter.POLICY_NAME_PARTIAL));
  ret.setParam(SearchFilter.POLICY_ID,request.getParameter(SearchFilter.POLICY_ID));
  ret.setParam(SearchFilter.IS_ENABLED,request.getParameter(SearchFilter.IS_ENABLED));
  ret.setParam(SearchFilter.IS_RECURSIVE,request.getParameter(SearchFilter.IS_RECURSIVE));
  ret.setParam(SearchFilter.USER,request.getParameter(SearchFilter.USER));
  ret.setParam(SearchFilter.GROUP,request.getParameter(SearchFilter.GROUP));
  ret.setParam(SearchFilter.POL_RESOURCE,request.getParameter(SearchFilter.POL_RESOURCE));
  ret.setParam(SearchFilter.RESOURCE_SIGNATURE,request.getParameter(SearchFilter.RESOURCE_SIGNATURE));
  ret.setParam(SearchFilter.POLICY_TYPE,request.getParameter(SearchFilter.POLICY_TYPE));
  ret.setParam(SearchFilter.POLICY_LABEL,request.getParameter(SearchFilter.POLICY_LABEL));
  ret.setParam(SearchFilter.POLICY_LABELS_PARTIAL,request.getParameter(SearchFilter.POLICY_LABELS_PARTIAL));
  ret.setParam(SearchFilter.PLUGIN_HOST_NAME,request.getParameter(SearchFilter.PLUGIN_HOST_NAME));
  ret.setParam(SearchFilter.PLUGIN_APP_TYPE,request.getParameter(SearchFilter.PLUGIN_APP_TYPE));
  ret.setParam(SearchFilter.PLUGIN_ENTITY_TYPE,request.getParameter(SearchFilter.PLUGIN_ENTITY_TYPE));
  ret.setParam(SearchFilter.PLUGIN_IP_ADDRESS,request.getParameter(SearchFilter.PLUGIN_IP_ADDRESS));
  for (  Map.Entry<String,String[]> e : request.getParameterMap().entrySet()) {
    String name=e.getKey();
    String[] values=e.getValue();
    if (!StringUtils.isEmpty(name) && !ArrayUtils.isEmpty(values) && name.startsWith(SearchFilter.RESOURCE_PREFIX)) {
      ret.setParam(name,values[0]);
    }
  }
  ret.setParam(SearchFilter.RESOURCE_MATCH_SCOPE,request.getParameter(SearchFilter.RESOURCE_MATCH_SCOPE));
  extractCommonCriteriasForFilter(request,ret,sortFields);
  return ret;
}",0.9873880460610492
166216,"public SearchFilter getSearchFilterFromLegacyRequest(HttpServletRequest request,List<SortField> sortFields){
  if (request == null) {
    return null;
  }
  SearchFilter ret=new SearchFilter();
  if (MapUtils.isEmpty(request.getParameterMap())) {
    ret.setParams(new HashMap<String,String>());
  }
  String repositoryType=request.getParameter(""String_Node_Str"");
  if (repositoryType != null) {
    repositoryType=repositoryType.toLowerCase();
  }
  String repositoryId=request.getParameter(""String_Node_Str"");
  if (repositoryId == null) {
    repositoryId=request.getParameter(""String_Node_Str"");
  }
  ret.setParam(SearchFilter.SERVICE_TYPE,repositoryType);
  ret.setParam(SearchFilter.SERVICE_NAME,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.SERVICE_ID,repositoryId);
  ret.setParam(SearchFilter.POLICY_NAME,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.USER,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.GROUP,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.IS_ENABLED,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.IS_RECURSIVE,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.POL_RESOURCE,request.getParameter(SearchFilter.POL_RESOURCE));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  extractCommonCriteriasForFilter(request,ret,sortFields);
  return ret;
}","public SearchFilter getSearchFilterFromLegacyRequest(HttpServletRequest request,List<SortField> sortFields){
  Validate.notNull(request,""String_Node_Str"");
  SearchFilter ret=new SearchFilter();
  if (MapUtils.isEmpty(request.getParameterMap())) {
    ret.setParams(new HashMap<String,String>());
  }
  String repositoryType=request.getParameter(""String_Node_Str"");
  if (repositoryType != null) {
    repositoryType=repositoryType.toLowerCase();
  }
  String repositoryId=request.getParameter(""String_Node_Str"");
  if (repositoryId == null) {
    repositoryId=request.getParameter(""String_Node_Str"");
  }
  ret.setParam(SearchFilter.SERVICE_TYPE,repositoryType);
  ret.setParam(SearchFilter.SERVICE_NAME,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.SERVICE_ID,repositoryId);
  ret.setParam(SearchFilter.POLICY_NAME,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.USER,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.GROUP,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.IS_ENABLED,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.IS_RECURSIVE,request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.POL_RESOURCE,request.getParameter(SearchFilter.POL_RESOURCE));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  ret.setParam(SearchFilter.RESOURCE_PREFIX + ""String_Node_Str"",request.getParameter(""String_Node_Str""));
  extractCommonCriteriasForFilter(request,ret,sortFields);
  return ret;
}",0.980321194299932
166217,"public VXPolicyList rangerPolicyListToPublic(List<RangerPolicy> rangerPolicyList,SearchFilter filter){
  RangerService service=null;
  List<VXPolicy> vXPolicyList=new ArrayList<VXPolicy>();
  VXPolicyList vXPolicyListObj=new VXPolicyList(new ArrayList<VXPolicy>());
  if (CollectionUtils.isNotEmpty(rangerPolicyList)) {
    int totalCount=rangerPolicyList.size();
    int startIndex=filter == null ? 0 : filter.getStartIndex();
    int pageSize=filter == null ? totalCount : filter.getMaxRows();
    int toIndex=Math.min(startIndex + pageSize,totalCount);
    String sortType=filter == null ? null : filter.getSortType();
    String sortBy=filter == null ? null : filter.getSortBy();
    for (int i=startIndex; i < toIndex; i++) {
      RangerPolicy policy=rangerPolicyList.get(i);
      try {
        service=svcStore.getServiceByName(policy.getService());
      }
 catch (      Exception excp) {
        throw restErrorUtil.createRESTException(HttpServletResponse.SC_BAD_REQUEST,excp.getMessage(),true);
      }
      if (service == null) {
        throw restErrorUtil.createRESTException(HttpServletResponse.SC_NOT_FOUND,RangerServiceNotFoundException.buildExceptionMsg(policy.getService()),true);
      }
      VXPolicy vXPolicy=toVXPolicy(policy,service);
      if (vXPolicy != null) {
        vXPolicyList.add(vXPolicy);
      }
    }
    vXPolicyListObj=new VXPolicyList(vXPolicyList);
    vXPolicyListObj.setPageSize(pageSize);
    vXPolicyListObj.setResultSize(vXPolicyList.size());
    vXPolicyListObj.setStartIndex(startIndex);
    vXPolicyListObj.setTotalCount(totalCount);
    vXPolicyListObj.setSortBy(sortBy);
    vXPolicyListObj.setSortType(sortType);
  }
  return vXPolicyListObj;
}","public VXPolicyList rangerPolicyListToPublic(List<RangerPolicy> rangerPolicyList,SearchFilter filter){
  RangerService service=null;
  List<VXPolicy> vXPolicyList=new ArrayList<VXPolicy>();
  VXPolicyList vXPolicyListObj=new VXPolicyList(new ArrayList<VXPolicy>());
  if (CollectionUtils.isNotEmpty(rangerPolicyList)) {
    int totalCount=rangerPolicyList.size();
    int startIndex=filter.getStartIndex();
    int pageSize=filter.getMaxRows();
    int toIndex=Math.min(startIndex + pageSize,totalCount);
    String sortType=filter.getSortType();
    String sortBy=filter.getSortBy();
    for (int i=startIndex; i < toIndex; i++) {
      RangerPolicy policy=rangerPolicyList.get(i);
      try {
        service=svcStore.getServiceByName(policy.getService());
      }
 catch (      Exception excp) {
        throw restErrorUtil.createRESTException(HttpServletResponse.SC_BAD_REQUEST,excp.getMessage(),true);
      }
      if (service == null) {
        throw restErrorUtil.createRESTException(HttpServletResponse.SC_NOT_FOUND,RangerServiceNotFoundException.buildExceptionMsg(policy.getService()),true);
      }
      VXPolicy vXPolicy=toVXPolicy(policy,service);
      if (vXPolicy != null) {
        vXPolicyList.add(vXPolicy);
      }
    }
    vXPolicyListObj=new VXPolicyList(vXPolicyList);
    vXPolicyListObj.setPageSize(pageSize);
    vXPolicyListObj.setResultSize(vXPolicyList.size());
    vXPolicyListObj.setStartIndex(startIndex);
    vXPolicyListObj.setTotalCount(totalCount);
    vXPolicyListObj.setSortBy(sortBy);
    vXPolicyListObj.setSortType(sortType);
  }
  return vXPolicyListObj;
}",0.9293725371324644
166218,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  XXServiceDefWithAssignedId other=(XXServiceDefWithAssignedId)obj;
  if (id == null) {
    if (other.id != null)     return false;
  }
 else   if (!id.equals(other.id))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  XXServiceDef other=(XXServiceDef)obj;
  if (id == null) {
    if (other.id != null)     return false;
  }
 else   if (!id.equals(other.id))   return false;
  return true;
}",0.6066481994459834
166219,"@GET @Path(""String_Node_Str"") @Produces({""String_Node_Str"",""String_Node_Str""}) public VXPolicyList searchPolicies(@Context HttpServletRequest request){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  SearchFilter filter=searchUtil.getSearchFilterFromLegacyRequest(request,policyService.sortFields);
  int savedStartIndex=filter == null ? 0 : filter.getStartIndex();
  int savedMaxRows=filter == null ? Integer.MAX_VALUE : filter.getMaxRows();
  if (filter != null) {
    filter.setStartIndex(0);
    filter.setMaxRows(Integer.MAX_VALUE);
  }
  List<RangerPolicy> rangerPolicyList=serviceREST.getPolicies(filter);
  if (filter != null) {
    filter.setStartIndex(savedStartIndex);
    filter.setMaxRows(savedMaxRows);
  }
  VXPolicyList vXPolicyList=null;
  if (rangerPolicyList != null) {
    vXPolicyList=serviceUtil.rangerPolicyListToPublic(rangerPolicyList,filter);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + vXPolicyList);
  }
  return vXPolicyList;
}","@GET @Path(""String_Node_Str"") @Produces({""String_Node_Str"",""String_Node_Str""}) public VXPolicyList searchPolicies(@Context HttpServletRequest request){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  SearchFilter filter=searchUtil.getSearchFilterFromLegacyRequest(request,policyService.sortFields);
  int savedStartIndex=filter.getStartIndex();
  int savedMaxRows=filter.getMaxRows();
  filter.setStartIndex(0);
  filter.setMaxRows(Integer.MAX_VALUE);
  List<RangerPolicy> rangerPolicyList=serviceREST.getPolicies(filter);
  filter.setStartIndex(savedStartIndex);
  filter.setMaxRows(savedMaxRows);
  VXPolicyList vXPolicyList=null;
  if (rangerPolicyList != null) {
    vXPolicyList=serviceUtil.rangerPolicyListToPublic(rangerPolicyList,filter);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + vXPolicyList);
  }
  return vXPolicyList;
}",0.440713536201469
166220,"private RangerPolicyList toRangerPolicyList(List<RangerPolicy> policyList,SearchFilter filter){
  RangerPolicyList ret=new RangerPolicyList();
  if (CollectionUtils.isNotEmpty(policyList)) {
    int totalCount=policyList.size();
    int startIndex=filter == null ? 0 : filter.getStartIndex();
    int pageSize=filter == null ? totalCount : filter.getMaxRows();
    int toIndex=Math.min(startIndex + pageSize,totalCount);
    String sortType=filter == null ? null : filter.getSortType();
    String sortBy=filter == null ? null : filter.getSortBy();
    List<RangerPolicy> retList=new ArrayList<RangerPolicy>();
    for (int i=startIndex; i < toIndex; i++) {
      retList.add(policyList.get(i));
    }
    ret.setPolicies(retList);
    ret.setPageSize(pageSize);
    ret.setResultSize(retList.size());
    ret.setStartIndex(startIndex);
    ret.setTotalCount(totalCount);
    ret.setSortBy(sortBy);
    ret.setSortType(sortType);
  }
  return ret;
}","private RangerPolicyList toRangerPolicyList(List<RangerPolicy> policyList,SearchFilter filter){
  RangerPolicyList ret=new RangerPolicyList();
  if (CollectionUtils.isNotEmpty(policyList)) {
    int totalCount=policyList.size();
    int startIndex=filter.getStartIndex();
    int pageSize=filter.getMaxRows();
    int toIndex=Math.min(startIndex + pageSize,totalCount);
    String sortType=filter.getSortType();
    String sortBy=filter.getSortBy();
    List<RangerPolicy> retList=new ArrayList<RangerPolicy>();
    for (int i=startIndex; i < toIndex; i++) {
      retList.add(policyList.get(i));
    }
    ret.setPolicies(retList);
    ret.setPageSize(pageSize);
    ret.setResultSize(retList.size());
    ret.setStartIndex(startIndex);
    ret.setTotalCount(totalCount);
    ret.setSortBy(sortBy);
    ret.setSortType(sortType);
  }
  return ret;
}",0.9071706503613118
166221,"private void initDBConnectivity(){
  try {
    DB_PROPERTIES=new HashMap<String,String>();
    DB_PROPERTIES.put(JPA_DB_DIALECT,conf.get(PROPERTY_PREFIX + DB_DIALECT));
    DB_PROPERTIES.put(JPA_DB_DRIVER,conf.get(PROPERTY_PREFIX + DB_DRIVER));
    DB_PROPERTIES.put(JPA_DB_URL,conf.get(PROPERTY_PREFIX + DB_URL));
    DB_PROPERTIES.put(JPA_DB_USER,conf.get(PROPERTY_PREFIX + DB_USER));
    DB_PROPERTIES.put(JPA_DB_PASSWORD,conf.get(PROPERTY_PREFIX + DB_PASSWORD));
    if (getDBFlavor(conf) == DB_FLAVOR_MYSQL) {
      updateDBSSLURL();
    }
    entityManagerFactory=Persistence.createEntityManagerFactory(""String_Node_Str"",DB_PROPERTIES);
    daoManager=new DaoManager();
    daoManager.setEntityManagerFactory(entityManagerFactory);
    daoManager.getEntityManager();
    logger.info(""String_Node_Str"" + isDbConnected());
  }
 catch (  Exception excp) {
    excp.printStackTrace();
  }
}","private void initDBConnectivity(){
  try {
    jpaProperties.put(JPA_DB_DIALECT,conf.get(PROPERTY_PREFIX + DB_DIALECT));
    jpaProperties.put(JPA_DB_DRIVER,conf.get(PROPERTY_PREFIX + DB_DRIVER));
    jpaProperties.put(JPA_DB_URL,conf.get(PROPERTY_PREFIX + DB_URL));
    jpaProperties.put(JPA_DB_USER,conf.get(PROPERTY_PREFIX + DB_USER));
    jpaProperties.put(JPA_DB_PASSWORD,conf.get(PROPERTY_PREFIX + DB_PASSWORD));
    if (getDBFlavor(conf) == DB_FLAVOR_MYSQL) {
      updateDBSSLURL();
    }
    entityManagerFactory=Persistence.createEntityManagerFactory(""String_Node_Str"",jpaProperties);
    daoManager=new DaoManager();
    daoManager.setEntityManagerFactory(entityManagerFactory);
    daoManager.getEntityManager();
    logger.info(""String_Node_Str"" + isDbConnected());
  }
 catch (  Exception excp) {
    excp.printStackTrace();
  }
}",0.8824884792626728
166222,"public int getDBFlavor(Configuration newConfig){
  String[] propertyNames={PROPERTY_PREFIX + DB_DIALECT,PROPERTY_PREFIX + DB_DRIVER,PROPERTY_PREFIX + DB_URL};
  for (  String propertyName : propertyNames) {
    String propertyValue=DB_PROPERTIES.get(propertyName);
    if (StringUtils.isBlank(propertyValue)) {
      continue;
    }
    if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_MYSQL;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_ORACLE;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_POSTGRES;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_SQLSERVER;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_SQLSERVER;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_SQLANYWHERE;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_SQLANYWHERE;
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + propertyName + ""String_Node_Str""+ propertyValue);
      }
    }
  }
  logger.error(""String_Node_Str"");
  return DB_FLAVOR_UNKNOWN;
}","private int getDBFlavor(Configuration newConfig){
  String[] propertyNames={PROPERTY_PREFIX + DB_DIALECT,PROPERTY_PREFIX + DB_DRIVER,PROPERTY_PREFIX + DB_URL};
  for (  String propertyName : propertyNames) {
    String propertyValue=newConfig.get(propertyName);
    if (StringUtils.isBlank(propertyValue)) {
      continue;
    }
    if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_MYSQL;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_ORACLE;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_POSTGRES;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_SQLSERVER;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_SQLSERVER;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_SQLANYWHERE;
    }
 else     if (StringUtils.containsIgnoreCase(propertyValue,""String_Node_Str"")) {
      return DB_FLAVOR_SQLANYWHERE;
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + propertyName + ""String_Node_Str""+ propertyValue);
      }
    }
  }
  logger.error(""String_Node_Str"");
  return DB_FLAVOR_UNKNOWN;
}",0.9880995311936532
166223,"private void updateDBSSLURL(){
  if (conf != null && conf.get(PROPERTY_PREFIX + DB_SSL_ENABLED) != null) {
    String db_ssl_enabled=conf.get(PROPERTY_PREFIX + DB_SSL_ENABLED);
    if (StringUtils.isEmpty(db_ssl_enabled) || !""String_Node_Str"".equalsIgnoreCase(db_ssl_enabled)) {
      db_ssl_enabled=""String_Node_Str"";
    }
    db_ssl_enabled=db_ssl_enabled.toLowerCase();
    if (""String_Node_Str"".equalsIgnoreCase(db_ssl_enabled)) {
      String db_ssl_required=conf.get(PROPERTY_PREFIX + DB_SSL_REQUIRED);
      if (StringUtils.isEmpty(db_ssl_required) || !""String_Node_Str"".equalsIgnoreCase(db_ssl_required)) {
        db_ssl_required=""String_Node_Str"";
      }
      db_ssl_required=db_ssl_required.toLowerCase();
      String db_ssl_verifyServerCertificate=conf.get(PROPERTY_PREFIX + DB_SSL_VerifyServerCertificate);
      if (StringUtils.isEmpty(db_ssl_verifyServerCertificate) || !""String_Node_Str"".equalsIgnoreCase(db_ssl_verifyServerCertificate)) {
        db_ssl_verifyServerCertificate=""String_Node_Str"";
      }
      db_ssl_verifyServerCertificate=db_ssl_verifyServerCertificate.toLowerCase();
      conf.set(PROPERTY_PREFIX + DB_SSL_ENABLED,db_ssl_enabled);
      conf.set(PROPERTY_PREFIX + DB_SSL_REQUIRED,db_ssl_required);
      conf.set(PROPERTY_PREFIX + DB_SSL_VerifyServerCertificate,db_ssl_verifyServerCertificate);
      String ranger_jpa_jdbc_url=conf.get(PROPERTY_PREFIX + DB_URL);
      if (!StringUtils.isEmpty(ranger_jpa_jdbc_url)) {
        StringBuffer ranger_jpa_jdbc_url_ssl=new StringBuffer(ranger_jpa_jdbc_url);
        ranger_jpa_jdbc_url_ssl.append(""String_Node_Str"" + db_ssl_enabled + ""String_Node_Str""+ db_ssl_required+ ""String_Node_Str""+ db_ssl_verifyServerCertificate);
        conf.set(PROPERTY_PREFIX + DB_URL,ranger_jpa_jdbc_url_ssl.toString());
        DB_PROPERTIES.put(JPA_DB_URL,conf.get(PROPERTY_PREFIX + DB_URL));
        logger.info(PROPERTY_PREFIX + DB_URL + ""String_Node_Str""+ ranger_jpa_jdbc_url_ssl.toString());
      }
      if (""String_Node_Str"".equalsIgnoreCase(db_ssl_verifyServerCertificate)) {
        if (conf != null) {
          String keystore=conf.get(PROPERTY_PREFIX + DB_SSL_KEYSTORE);
          if (!StringUtils.isEmpty(keystore)) {
            Path path=Paths.get(keystore);
            if (Files.exists(path) && Files.isReadable(path)) {
              System.setProperty(""String_Node_Str"",conf.get(PROPERTY_PREFIX + DB_SSL_KEYSTORE));
              System.setProperty(""String_Node_Str"",conf.get(PROPERTY_PREFIX + DB_SSL_KEYSTORE_PASSWORD));
              System.setProperty(""String_Node_Str"",KeyStore.getDefaultType());
            }
 else {
              logger.debug(""String_Node_Str"" + keystore + ""String_Node_Str"");
            }
          }
 else {
            logger.debug(""String_Node_Str"" + PROPERTY_PREFIX + DB_SSL_KEYSTORE+ ""String_Node_Str"");
          }
          String truststore=conf.get(PROPERTY_PREFIX + DB_SSL_TRUSTSTORE);
          if (!StringUtils.isEmpty(truststore)) {
            Path path=Paths.get(truststore);
            if (Files.exists(path) && Files.isReadable(path)) {
              System.setProperty(""String_Node_Str"",conf.get(PROPERTY_PREFIX + DB_SSL_TRUSTSTORE));
              System.setProperty(""String_Node_Str"",conf.get(PROPERTY_PREFIX + DB_SSL_TRUSTSTORE_PASSWORD));
              System.setProperty(""String_Node_Str"",KeyStore.getDefaultType());
            }
 else {
              logger.debug(""String_Node_Str"" + truststore + ""String_Node_Str"");
            }
          }
 else {
            logger.debug(""String_Node_Str"" + PROPERTY_PREFIX + DB_SSL_TRUSTSTORE+ ""String_Node_Str"");
          }
        }
      }
    }
  }
}","private void updateDBSSLURL(){
  if (conf != null && conf.get(PROPERTY_PREFIX + DB_SSL_ENABLED) != null) {
    final String db_ssl_enabled=normalize(conf.get(PROPERTY_PREFIX + DB_SSL_ENABLED));
    if (""String_Node_Str"".equalsIgnoreCase(db_ssl_enabled)) {
      final String db_ssl_required=normalize(conf.get(PROPERTY_PREFIX + DB_SSL_REQUIRED));
      final String db_ssl_verifyServerCertificate=normalize(conf.get(PROPERTY_PREFIX + DB_SSL_VerifyServerCertificate));
      conf.set(PROPERTY_PREFIX + DB_SSL_ENABLED,db_ssl_enabled);
      conf.set(PROPERTY_PREFIX + DB_SSL_REQUIRED,db_ssl_required);
      conf.set(PROPERTY_PREFIX + DB_SSL_VerifyServerCertificate,db_ssl_verifyServerCertificate);
      String ranger_jpa_jdbc_url=conf.get(PROPERTY_PREFIX + DB_URL);
      if (!StringUtils.isEmpty(ranger_jpa_jdbc_url)) {
        String ranger_jpa_jdbc_url_ssl=ranger_jpa_jdbc_url + ""String_Node_Str"" + db_ssl_enabled+ ""String_Node_Str""+ db_ssl_required+ ""String_Node_Str""+ db_ssl_verifyServerCertificate;
        conf.set(PROPERTY_PREFIX + DB_URL,ranger_jpa_jdbc_url_ssl);
        jpaProperties.put(JPA_DB_URL,conf.get(PROPERTY_PREFIX + DB_URL));
        logger.info(PROPERTY_PREFIX + DB_URL + ""String_Node_Str""+ ranger_jpa_jdbc_url_ssl);
      }
      if (""String_Node_Str"".equalsIgnoreCase(db_ssl_verifyServerCertificate)) {
        String keystore=conf.get(PROPERTY_PREFIX + DB_SSL_KEYSTORE);
        if (!StringUtils.isEmpty(keystore)) {
          Path path=Paths.get(keystore);
          if (Files.exists(path) && Files.isReadable(path)) {
            System.setProperty(""String_Node_Str"",conf.get(PROPERTY_PREFIX + DB_SSL_KEYSTORE));
            System.setProperty(""String_Node_Str"",conf.get(PROPERTY_PREFIX + DB_SSL_KEYSTORE_PASSWORD));
            System.setProperty(""String_Node_Str"",KeyStore.getDefaultType());
          }
 else {
            logger.debug(""String_Node_Str"" + keystore + ""String_Node_Str"");
          }
        }
 else {
          logger.debug(""String_Node_Str"" + PROPERTY_PREFIX + DB_SSL_KEYSTORE+ ""String_Node_Str"");
        }
        String truststore=conf.get(PROPERTY_PREFIX + DB_SSL_TRUSTSTORE);
        if (!StringUtils.isEmpty(truststore)) {
          Path path=Paths.get(truststore);
          if (Files.exists(path) && Files.isReadable(path)) {
            System.setProperty(""String_Node_Str"",conf.get(PROPERTY_PREFIX + DB_SSL_TRUSTSTORE));
            System.setProperty(""String_Node_Str"",conf.get(PROPERTY_PREFIX + DB_SSL_TRUSTSTORE_PASSWORD));
            System.setProperty(""String_Node_Str"",KeyStore.getDefaultType());
          }
 else {
            logger.debug(""String_Node_Str"" + truststore + ""String_Node_Str"");
          }
        }
 else {
          logger.debug(""String_Node_Str"" + PROPERTY_PREFIX + DB_SSL_TRUSTSTORE+ ""String_Node_Str"");
        }
      }
    }
  }
}",0.8293816829381683
166224,"public static void validateConnectionConfigs(Map<String,String> configs) throws IllegalArgumentException {
  String lookupPrincipal=null;
  try {
    lookupPrincipal=SecureClientLogin.getPrincipal(configs.get(""String_Node_Str""),java.net.InetAddress.getLocalHost().getCanonicalHostName());
  }
 catch (  Exception e) {
  }
  String lookupKeytab=configs.get(""String_Node_Str"");
  if (StringUtils.isEmpty(lookupPrincipal) || StringUtils.isEmpty(lookupKeytab)) {
    String username=configs.get(""String_Node_Str"");
    if ((username == null || username.isEmpty())) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    String password=configs.get(""String_Node_Str"");
    if ((password == null || password.isEmpty())) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  String authentication=configs.get(""String_Node_Str"");
  if ((authentication == null || authentication.isEmpty())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String fsDefaultName=configs.get(""String_Node_Str"");
  fsDefaultName=(fsDefaultName == null) ? ""String_Node_Str"" : fsDefaultName.trim();
  if (fsDefaultName.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    String[] fsDefaultNameElements=fsDefaultName.split(""String_Node_Str"");
    for (    String fsDefaultNameElement : fsDefaultNameElements) {
      if (fsDefaultNameElement.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + fsDefaultNameElement + ""String_Node_Str"");
      }
    }
    if (fsDefaultNameElements != null && fsDefaultNameElements.length >= 2) {
      String cluster=""String_Node_Str"";
      String clusters=""String_Node_Str"";
      configs.put(""String_Node_Str"",""String_Node_Str"");
      configs.put(""String_Node_Str"",""String_Node_Str"" + configs.get(""String_Node_Str""));
      configs.put(""String_Node_Str"" + configs.get(""String_Node_Str""),""String_Node_Str"");
      for (int i=0; i < fsDefaultNameElements.length; i++) {
        cluster=""String_Node_Str"" + (i + 1);
        configs.put(""String_Node_Str"" + configs.get(""String_Node_Str"") + ""String_Node_Str""+ cluster,fsDefaultNameElements[i]);
        if (i == (fsDefaultNameElements.length - 1)) {
          clusters+=cluster;
        }
 else {
          clusters+=cluster + ""String_Node_Str"";
        }
      }
      configs.put(""String_Node_Str"" + configs.get(""String_Node_Str""),clusters);
    }
  }
  String dfsNameservices=configs.get(""String_Node_Str"");
  dfsNameservices=(dfsNameservices == null) ? ""String_Node_Str"" : dfsNameservices.trim();
  if (!dfsNameservices.isEmpty()) {
    String[] dfsNameserviceElements=dfsNameservices.split(""String_Node_Str"");
    for (    String dfsNameserviceElement : dfsNameserviceElements) {
      String proxyProvider=configs.get(""String_Node_Str"" + dfsNameserviceElement);
      proxyProvider=(proxyProvider == null) ? ""String_Node_Str"" : proxyProvider.trim();
      if (proxyProvider.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + dfsNameserviceElement + ""String_Node_Str"");
      }
      String dfsNameNodes=configs.get(""String_Node_Str"" + dfsNameserviceElement);
      dfsNameNodes=(dfsNameNodes == null) ? ""String_Node_Str"" : dfsNameNodes.trim();
      if (dfsNameNodes.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + dfsNameserviceElement + ""String_Node_Str"");
      }
      String[] dfsNameNodeElements=dfsNameNodes.split(""String_Node_Str"");
      for (      String dfsNameNodeElement : dfsNameNodeElements) {
        String nameNodeUrlKey=""String_Node_Str"" + dfsNameserviceElement + ""String_Node_Str""+ dfsNameNodeElement.trim();
        String nameNodeUrl=configs.get(nameNodeUrlKey);
        nameNodeUrl=(nameNodeUrl == null) ? ""String_Node_Str"" : nameNodeUrl.trim();
        if (nameNodeUrl.isEmpty()) {
          throw new IllegalArgumentException(""String_Node_Str"" + nameNodeUrlKey + ""String_Node_Str"");
        }
      }
    }
  }
}","public static void validateConnectionConfigs(Map<String,String> configs) throws IllegalArgumentException {
  String lookupPrincipal=null;
  try {
    lookupPrincipal=SecureClientLogin.getPrincipal(configs.get(""String_Node_Str""),java.net.InetAddress.getLocalHost().getCanonicalHostName());
  }
 catch (  Exception e) {
  }
  String lookupKeytab=configs.get(""String_Node_Str"");
  if (StringUtils.isEmpty(lookupPrincipal) || StringUtils.isEmpty(lookupKeytab)) {
    String username=configs.get(""String_Node_Str"");
    if ((username == null || username.isEmpty())) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    String password=configs.get(""String_Node_Str"");
    if ((password == null || password.isEmpty())) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  String authentication=configs.get(""String_Node_Str"");
  if ((authentication == null || authentication.isEmpty())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String fsDefaultName=configs.get(""String_Node_Str"");
  fsDefaultName=(fsDefaultName == null) ? ""String_Node_Str"" : fsDefaultName.trim();
  if (fsDefaultName.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    String[] fsDefaultNameElements=fsDefaultName.split(""String_Node_Str"");
    for (    String fsDefaultNameElement : fsDefaultNameElements) {
      if (fsDefaultNameElement.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + fsDefaultNameElement + ""String_Node_Str"");
      }
    }
    if (fsDefaultNameElements != null && fsDefaultNameElements.length >= 2) {
      String cluster=""String_Node_Str"";
      StringBuilder clusters=new StringBuilder();
      configs.put(""String_Node_Str"",""String_Node_Str"");
      configs.put(""String_Node_Str"",""String_Node_Str"" + configs.get(""String_Node_Str""));
      configs.put(""String_Node_Str"" + configs.get(""String_Node_Str""),""String_Node_Str"");
      for (int i=0; i < fsDefaultNameElements.length; i++) {
        cluster=""String_Node_Str"" + (i + 1);
        configs.put(""String_Node_Str"" + configs.get(""String_Node_Str"") + ""String_Node_Str""+ cluster,fsDefaultNameElements[i]);
        if (i == (fsDefaultNameElements.length - 1)) {
          clusters.append(cluster);
        }
 else {
          clusters.append(cluster).append(""String_Node_Str"");
        }
      }
      configs.put(""String_Node_Str"" + configs.get(""String_Node_Str""),clusters.toString());
    }
  }
  String dfsNameservices=configs.get(""String_Node_Str"");
  dfsNameservices=(dfsNameservices == null) ? ""String_Node_Str"" : dfsNameservices.trim();
  if (!dfsNameservices.isEmpty()) {
    String[] dfsNameserviceElements=dfsNameservices.split(""String_Node_Str"");
    for (    String dfsNameserviceElement : dfsNameserviceElements) {
      String proxyProvider=configs.get(""String_Node_Str"" + dfsNameserviceElement);
      proxyProvider=(proxyProvider == null) ? ""String_Node_Str"" : proxyProvider.trim();
      if (proxyProvider.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + dfsNameserviceElement + ""String_Node_Str"");
      }
      String dfsNameNodes=configs.get(""String_Node_Str"" + dfsNameserviceElement);
      dfsNameNodes=(dfsNameNodes == null) ? ""String_Node_Str"" : dfsNameNodes.trim();
      if (dfsNameNodes.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + dfsNameserviceElement + ""String_Node_Str"");
      }
      String[] dfsNameNodeElements=dfsNameNodes.split(""String_Node_Str"");
      for (      String dfsNameNodeElement : dfsNameNodeElements) {
        String nameNodeUrlKey=""String_Node_Str"" + dfsNameserviceElement + ""String_Node_Str""+ dfsNameNodeElement.trim();
        String nameNodeUrl=configs.get(nameNodeUrlKey);
        nameNodeUrl=(nameNodeUrl == null) ? ""String_Node_Str"" : nameNodeUrl.trim();
        if (nameNodeUrl.isEmpty()) {
          throw new IllegalArgumentException(""String_Node_Str"" + nameNodeUrlKey + ""String_Node_Str"");
        }
      }
    }
  }
}",0.9557259460796438
166225,"@Override public void init() throws Throwable {
  deltaSyncUserTime=0;
  deltaSyncGroupTime=0;
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  deltaSyncUserTimeStamp=dateFormat.format(new Date(0));
  deltaSyncGroupTimeStamp=dateFormat.format(new Date(0));
  setConfig();
}","@Override public void init() throws Throwable {
  deltaSyncUserTime=0;
  deltaSyncGroupTime=0;
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  deltaSyncUserTimeStamp=dateFormat.format(new Date(0));
  deltaSyncGroupTimeStamp=dateFormat.format(new Date(0));
  userNameMap=new HashMap<String,String>();
  setConfig();
}",0.9297124600638976
166226,"@Override public void updateSink(UserGroupSink sink) throws Throwable {
  LOG.info(""String_Node_Str"");
  groupUserTable=HashBasedTable.create();
  if (!groupSearchFirstEnabled) {
    LOG.info(""String_Node_Str"");
    getUsers(sink);
    if (groupSearchEnabled) {
      getGroups(sink);
    }
  }
 else {
    LOG.info(""String_Node_Str"");
    getGroups(sink);
    if (userSearchEnabled) {
      LOG.info(""String_Node_Str"");
      getUsers(sink);
    }
  }
  if (groupUserTable.isEmpty()) {
    return;
  }
  Iterator<String> groupUserTableIterator=groupUserTable.rowKeySet().iterator();
  while (groupUserTableIterator.hasNext()) {
    String groupName=groupUserTableIterator.next();
    Map<String,String> groupUsersMap=groupUserTable.row(groupName);
    Set<String> userSet=new HashSet<String>();
    for (    Map.Entry<String,String> entry : groupUsersMap.entrySet()) {
      String transformUserName=userNameTransform(entry.getKey());
      userSet.add(transformUserName);
    }
    List<String> userList=new ArrayList<>(userSet);
    String transformGroupName=groupNameTransform(groupName);
    try {
      sink.addOrUpdateGroup(transformGroupName,userList);
    }
 catch (    Throwable t) {
      LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformGroupName+ ""String_Node_Str""+ userList);
    }
  }
}","@Override public void updateSink(UserGroupSink sink) throws Throwable {
  LOG.info(""String_Node_Str"");
  groupUserTable=HashBasedTable.create();
  if (!groupSearchFirstEnabled) {
    LOG.info(""String_Node_Str"");
    getUsers(sink);
    if (groupSearchEnabled) {
      getGroups(sink);
    }
  }
 else {
    LOG.info(""String_Node_Str"");
    getGroups(sink);
    if (userSearchEnabled) {
      LOG.info(""String_Node_Str"");
      getUsers(sink);
    }
  }
  if (groupUserTable.isEmpty()) {
    return;
  }
  Iterator<String> groupUserTableIterator=groupUserTable.rowKeySet().iterator();
  while (groupUserTableIterator.hasNext()) {
    String groupName=groupUserTableIterator.next();
    Map<String,String> groupUsersMap=groupUserTable.row(groupName);
    Set<String> userSet=new HashSet<String>();
    for (    Map.Entry<String,String> entry : groupUsersMap.entrySet()) {
      userSet.add(entry.getValue());
    }
    List<String> userList=new ArrayList<>(userSet);
    String transformGroupName=groupNameTransform(groupName);
    try {
      sink.addOrUpdateGroup(transformGroupName,userList);
    }
 catch (    Throwable t) {
      LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformGroupName+ ""String_Node_Str""+ userList);
    }
  }
}",0.960185543100116
166227,"private void getUsers(UserGroupSink sink) throws Throwable {
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    extendedUserSearchFilter=""String_Node_Str"" + userObjectClass + ""String_Node_Str""+ deltaSyncUserTime+ ""String_Node_Str""+ deltaSyncUserTimeStamp+ ""String_Node_Str"";
    if (userSearchFilter != null && !userSearchFilter.trim().isEmpty()) {
      String customFilter=userSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      extendedUserSearchFilter=""String_Node_Str"" + extendedUserSearchFilter + customFilter+ ""String_Node_Str"";
    }
 else {
      extendedUserSearchFilter=""String_Node_Str"" + extendedUserSearchFilter + ""String_Node_Str"";
    }
    LOG.info(""String_Node_Str"" + extendedUserSearchFilter);
    long highestdeltaSyncUserTime=deltaSyncUserTime;
    for (int ou=0; ou < userSearchBase.length; ou++) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          userSearchResultEnum=ldapContext.search(userSearchBase[ou],extendedUserSearchFilter,userSearchControls);
          while (userSearchResultEnum.hasMore()) {
            final SearchResult userEntry=userSearchResultEnum.next();
            if (userEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            Attributes attributes=userEntry.getAttributes();
            if (attributes == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"" + userEntry.getNameInNamespace() + ""String_Node_Str"");
              }
              continue;
            }
            Attribute userNameAttr=attributes.get(userNameAttribute);
            if (userNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(userNameAttribute + ""String_Node_Str"" + userEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            String userName=(String)userNameAttr.get();
            if (userName == null || userName.trim().isEmpty()) {
              if (LOG.isInfoEnabled()) {
                LOG.info(userNameAttribute + ""String_Node_Str"" + userEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            Attribute timeStampAttr=attributes.get(""String_Node_Str"");
            if (timeStampAttr != null) {
              String uSNChangedVal=(String)timeStampAttr.get();
              long currentDeltaSyncTime=Long.parseLong(uSNChangedVal);
              LOG.info(""String_Node_Str"" + uSNChangedVal + ""String_Node_Str""+ currentDeltaSyncTime);
              if (currentDeltaSyncTime > highestdeltaSyncUserTime) {
                highestdeltaSyncUserTime=currentDeltaSyncTime;
              }
            }
 else {
              timeStampAttr=attributes.get(""String_Node_Str"");
              if (timeStampAttr != null) {
                String timeStampVal=(String)timeStampAttr.get();
                Date parseDate=dateFormat.parse(timeStampVal);
                long currentDeltaSyncTime=parseDate.getTime();
                LOG.info(""String_Node_Str"" + timeStampVal + ""String_Node_Str""+ currentDeltaSyncTime);
                if (currentDeltaSyncTime > highestdeltaSyncUserTime) {
                  highestdeltaSyncUserTime=currentDeltaSyncTime;
                  deltaSyncUserTimeStamp=timeStampVal;
                }
              }
            }
            if (!groupSearchFirstEnabled) {
              String transformUserName=userNameTransform(userName);
              try {
                sink.addOrUpdateUser(transformUserName);
              }
 catch (              Throwable t) {
                LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformUserName);
              }
              Set<String> groups=new HashSet<String>();
              if (!groupSearchEnabled) {
                for (                String useGroupNameAttribute : userGroupNameAttributeSet) {
                  Attribute userGroupfAttribute=userEntry.getAttributes().get(useGroupNameAttribute);
                  if (userGroupfAttribute != null) {
                    NamingEnumeration<?> groupEnum=userGroupfAttribute.getAll();
                    while (groupEnum.hasMore()) {
                      String gName=getShortGroupName((String)groupEnum.next());
                      String transformGroupName=groupNameTransform(gName);
                      groups.add(transformGroupName);
                    }
                  }
                }
              }
              List<String> groupList=new ArrayList<String>(groups);
              try {
                sink.addOrUpdateUser(transformUserName,groupList);
              }
 catch (              Throwable t) {
                LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformUserName+ ""String_Node_Str""+ groupList);
              }
              counter++;
              if (counter <= 2000) {
                if (LOG.isInfoEnabled()) {
                  LOG.info(""String_Node_Str"" + counter + ""String_Node_Str""+ userName+ ""String_Node_Str""+ groupList);
                }
                if (counter == 2000) {
                  LOG.info(""String_Node_Str"");
                }
              }
 else {
                if (LOG.isTraceEnabled()) {
                  LOG.trace(""String_Node_Str"" + counter + ""String_Node_Str""+ userName+ ""String_Node_Str""+ groupList);
                }
 else {
                  if (counter % 100 == 0) {
                    LOG.info(""String_Node_Str"" + counter + ""String_Node_Str"");
                  }
                }
              }
            }
 else {
              String userFullName=(userEntry.getNameInNamespace()).toLowerCase();
              LOG.debug(""String_Node_Str"" + userFullName + ""String_Node_Str"");
              if (groupUserTable.containsColumn(userFullName) || groupUserTable.containsColumn(userName)) {
                String transformUserName=userNameTransform(userName);
                try {
                  sink.addOrUpdateUser(transformUserName);
                }
 catch (                Throwable t) {
                  LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformUserName);
                }
              }
            }
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (int i=0; i < controls.length; i++) {
              if (controls[i] instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(PAGE_SIZE,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      Throwable t) {
        LOG.error(""String_Node_Str"" + t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
    if (deltaSyncUserTime < highestdeltaSyncUserTime) {
      deltaSyncUserTime=highestdeltaSyncUserTime + 1;
      deltaSyncUserTimeStamp=dateFormat.format(new Date(highestdeltaSyncUserTime + 60l));
    }
  }
  finally {
    if (userSearchResultEnum != null) {
      userSearchResultEnum.close();
    }
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
}","private void getUsers(UserGroupSink sink) throws Throwable {
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    extendedUserSearchFilter=""String_Node_Str"" + userObjectClass + ""String_Node_Str""+ deltaSyncUserTime+ ""String_Node_Str""+ deltaSyncUserTimeStamp+ ""String_Node_Str"";
    if (userSearchFilter != null && !userSearchFilter.trim().isEmpty()) {
      String customFilter=userSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      extendedUserSearchFilter=""String_Node_Str"" + extendedUserSearchFilter + customFilter+ ""String_Node_Str"";
    }
 else {
      extendedUserSearchFilter=""String_Node_Str"" + extendedUserSearchFilter + ""String_Node_Str"";
    }
    LOG.info(""String_Node_Str"" + extendedUserSearchFilter);
    long highestdeltaSyncUserTime=deltaSyncUserTime;
    for (int ou=0; ou < userSearchBase.length; ou++) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          userSearchResultEnum=ldapContext.search(userSearchBase[ou],extendedUserSearchFilter,userSearchControls);
          while (userSearchResultEnum.hasMore()) {
            final SearchResult userEntry=userSearchResultEnum.next();
            if (userEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            Attributes attributes=userEntry.getAttributes();
            if (attributes == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"" + userEntry.getNameInNamespace() + ""String_Node_Str"");
              }
              continue;
            }
            Attribute userNameAttr=attributes.get(userNameAttribute);
            if (userNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(userNameAttribute + ""String_Node_Str"" + userEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            String userFullName=(userEntry.getNameInNamespace()).toLowerCase();
            String userName=(String)userNameAttr.get();
            if (userName == null || userName.trim().isEmpty()) {
              if (LOG.isInfoEnabled()) {
                LOG.info(userNameAttribute + ""String_Node_Str"" + userEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            Attribute timeStampAttr=attributes.get(""String_Node_Str"");
            if (timeStampAttr != null) {
              String uSNChangedVal=(String)timeStampAttr.get();
              long currentDeltaSyncTime=Long.parseLong(uSNChangedVal);
              LOG.info(""String_Node_Str"" + uSNChangedVal + ""String_Node_Str""+ currentDeltaSyncTime);
              if (currentDeltaSyncTime > highestdeltaSyncUserTime) {
                highestdeltaSyncUserTime=currentDeltaSyncTime;
              }
            }
 else {
              timeStampAttr=attributes.get(""String_Node_Str"");
              if (timeStampAttr != null) {
                String timeStampVal=(String)timeStampAttr.get();
                Date parseDate=dateFormat.parse(timeStampVal);
                long currentDeltaSyncTime=parseDate.getTime();
                LOG.info(""String_Node_Str"" + timeStampVal + ""String_Node_Str""+ currentDeltaSyncTime);
                if (currentDeltaSyncTime > highestdeltaSyncUserTime) {
                  highestdeltaSyncUserTime=currentDeltaSyncTime;
                  deltaSyncUserTimeStamp=timeStampVal;
                }
              }
            }
            if (!groupSearchFirstEnabled) {
              String transformUserName=userNameTransform(userName);
              try {
                sink.addOrUpdateUser(transformUserName);
              }
 catch (              Throwable t) {
                LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformUserName);
              }
              userNameMap.put(userFullName,transformUserName);
              Set<String> groups=new HashSet<String>();
              if (!groupSearchEnabled) {
                for (                String useGroupNameAttribute : userGroupNameAttributeSet) {
                  Attribute userGroupfAttribute=userEntry.getAttributes().get(useGroupNameAttribute);
                  if (userGroupfAttribute != null) {
                    NamingEnumeration<?> groupEnum=userGroupfAttribute.getAll();
                    while (groupEnum.hasMore()) {
                      String gName=getShortGroupName((String)groupEnum.next());
                      String transformGroupName=groupNameTransform(gName);
                      groups.add(transformGroupName);
                    }
                  }
                }
              }
              List<String> groupList=new ArrayList<String>(groups);
              try {
                sink.addOrUpdateUser(transformUserName,groupList);
              }
 catch (              Throwable t) {
                LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformUserName+ ""String_Node_Str""+ groupList);
              }
              counter++;
              if (counter <= 2000) {
                if (LOG.isInfoEnabled()) {
                  LOG.info(""String_Node_Str"" + counter + ""String_Node_Str""+ userName+ ""String_Node_Str""+ groupList);
                }
                if (counter == 2000) {
                  LOG.info(""String_Node_Str"");
                }
              }
 else {
                if (LOG.isTraceEnabled()) {
                  LOG.trace(""String_Node_Str"" + counter + ""String_Node_Str""+ userName+ ""String_Node_Str""+ groupList);
                }
 else {
                  if (counter % 100 == 0) {
                    LOG.info(""String_Node_Str"" + counter + ""String_Node_Str"");
                  }
                }
              }
            }
 else {
              LOG.debug(""String_Node_Str"" + userFullName + ""String_Node_Str"");
              if (groupUserTable.containsColumn(userFullName) || groupUserTable.containsColumn(userName)) {
                String transformUserName=userNameTransform(userName);
                try {
                  sink.addOrUpdateUser(transformUserName);
                }
 catch (                Throwable t) {
                  LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformUserName);
                }
                userNameMap.put(userFullName,transformUserName);
                Map<String,String> userMap=groupUserTable.column(userFullName);
                for (                Map.Entry<String,String> entry : userMap.entrySet()) {
                  LOG.debug(""String_Node_Str"" + entry.getValue() + ""String_Node_Str""+ transformUserName+ ""String_Node_Str""+ entry.getKey());
                  groupUserTable.put(entry.getKey(),userFullName,transformUserName);
                }
              }
            }
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (int i=0; i < controls.length; i++) {
              if (controls[i] instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(PAGE_SIZE,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      Exception t) {
        LOG.error(""String_Node_Str"" + t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
    if (deltaSyncUserTime < highestdeltaSyncUserTime) {
      deltaSyncUserTime=highestdeltaSyncUserTime + 1;
      deltaSyncUserTimeStamp=dateFormat.format(new Date(highestdeltaSyncUserTime + 60l));
    }
  }
  finally {
    if (userSearchResultEnum != null) {
      userSearchResultEnum.close();
    }
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
}",0.9574568104360088
166228,"private void getGroups(UserGroupSink sink) throws Throwable {
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    extendedGroupSearchFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      extendedGroupSearchFilter=extendedGroupSearchFilter + customFilter;
    }
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    extendedAllGroupsSearchFilter=""String_Node_Str"" + extendedGroupSearchFilter + ""String_Node_Str""+ deltaSyncGroupTime+ ""String_Node_Str""+ deltaSyncGroupTimeStamp+ ""String_Node_Str"";
    LOG.info(""String_Node_Str"" + extendedAllGroupsSearchFilter);
    long highestdeltaSyncGroupTime=deltaSyncGroupTime;
    for (int ou=0; ou < groupSearchBase.length; ou++) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(groupSearchBase[ou],extendedAllGroupsSearchFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            String gName=(String)groupNameAttr.get();
            String transformGroupName=groupNameTransform(gName);
            if (groupSearchFirstEnabled) {
              LOG.debug(""String_Node_Str"" + transformGroupName);
              sink.addOrUpdateGroup(transformGroupName);
            }
            Attribute timeStampAttr=groupEntry.getAttributes().get(""String_Node_Str"");
            if (timeStampAttr != null) {
              String uSNChangedVal=(String)timeStampAttr.get();
              long currentDeltaSyncTime=Long.parseLong(uSNChangedVal);
              if (currentDeltaSyncTime > highestdeltaSyncGroupTime) {
                highestdeltaSyncGroupTime=currentDeltaSyncTime;
              }
            }
 else {
              timeStampAttr=groupEntry.getAttributes().get(""String_Node_Str"");
              if (timeStampAttr != null) {
                String timeStampVal=(String)timeStampAttr.get();
                Date parseDate=dateFormat.parse(timeStampVal);
                long currentDeltaSyncTime=parseDate.getTime();
                LOG.info(""String_Node_Str"" + timeStampVal + ""String_Node_Str""+ currentDeltaSyncTime);
                if (currentDeltaSyncTime > highestdeltaSyncGroupTime) {
                  highestdeltaSyncGroupTime=currentDeltaSyncTime;
                  deltaSyncGroupTimeStamp=timeStampVal;
                }
              }
            }
            Attribute groupMemberAttr=groupEntry.getAttributes().get(groupMemberAttributeName);
            int userCount=0;
            if (groupMemberAttr == null || groupMemberAttr.size() <= 0) {
              LOG.info(""String_Node_Str"" + gName);
              continue;
            }
            NamingEnumeration<?> userEnum=groupMemberAttr.getAll();
            while (userEnum.hasMore()) {
              String originalUserFullName=(String)userEnum.next();
              if (originalUserFullName == null || originalUserFullName.trim().isEmpty()) {
                continue;
              }
              userCount++;
              String userName=getShortUserName(originalUserFullName);
              if (groupSearchFirstEnabled && !userSearchEnabled) {
                String transformUserName=userNameTransform(userName);
                try {
                  sink.addOrUpdateUser(transformUserName);
                }
 catch (                Throwable t) {
                  LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformUserName);
                }
              }
              groupUserTable.put(gName,userName,userName);
            }
            LOG.info(""String_Node_Str"" + gName + ""String_Node_Str""+ userCount);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (int i=0; i < controls.length; i++) {
              if (controls[i] instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(PAGE_SIZE,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      Throwable t) {
        LOG.error(""String_Node_Str"" + t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
    if (deltaSyncGroupTime < highestdeltaSyncGroupTime) {
      deltaSyncGroupTime=highestdeltaSyncGroupTime + 1;
      deltaSyncGroupTimeStamp=dateFormat.format(new Date(highestdeltaSyncGroupTime + 60000l));
    }
  }
  finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
}","private void getGroups(UserGroupSink sink) throws Throwable {
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  try {
    createLdapContext();
    int total;
    if (pagedResultsEnabled) {
      ldapContext.setRequestControls(new Control[]{new PagedResultsControl(pagedResultsSize,Control.NONCRITICAL)});
    }
    extendedGroupSearchFilter=""String_Node_Str"" + groupObjectClass + ""String_Node_Str"";
    if (groupSearchFilter != null && !groupSearchFilter.trim().isEmpty()) {
      String customFilter=groupSearchFilter.trim();
      if (!customFilter.startsWith(""String_Node_Str"")) {
        customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
      }
      extendedGroupSearchFilter=extendedGroupSearchFilter + customFilter;
    }
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    extendedAllGroupsSearchFilter=""String_Node_Str"" + extendedGroupSearchFilter + ""String_Node_Str""+ deltaSyncGroupTime+ ""String_Node_Str""+ deltaSyncGroupTimeStamp+ ""String_Node_Str"";
    LOG.info(""String_Node_Str"" + extendedAllGroupsSearchFilter);
    long highestdeltaSyncGroupTime=deltaSyncGroupTime;
    for (int ou=0; ou < groupSearchBase.length; ou++) {
      byte[] cookie=null;
      int counter=0;
      try {
        do {
          groupSearchResultEnum=ldapContext.search(groupSearchBase[ou],extendedAllGroupsSearchFilter,groupSearchControls);
          while (groupSearchResultEnum.hasMore()) {
            final SearchResult groupEntry=groupSearchResultEnum.next();
            if (groupEntry == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(""String_Node_Str"");
              }
              continue;
            }
            counter++;
            Attribute groupNameAttr=groupEntry.getAttributes().get(groupNameAttribute);
            if (groupNameAttr == null) {
              if (LOG.isInfoEnabled()) {
                LOG.info(groupNameAttribute + ""String_Node_Str"" + groupEntry.getNameInNamespace()+ ""String_Node_Str"");
              }
              continue;
            }
            String gName=(String)groupNameAttr.get();
            String transformGroupName=groupNameTransform(gName);
            if (groupSearchFirstEnabled) {
              LOG.debug(""String_Node_Str"" + transformGroupName);
              sink.addOrUpdateGroup(transformGroupName);
            }
            Attribute timeStampAttr=groupEntry.getAttributes().get(""String_Node_Str"");
            if (timeStampAttr != null) {
              String uSNChangedVal=(String)timeStampAttr.get();
              long currentDeltaSyncTime=Long.parseLong(uSNChangedVal);
              if (currentDeltaSyncTime > highestdeltaSyncGroupTime) {
                highestdeltaSyncGroupTime=currentDeltaSyncTime;
              }
            }
 else {
              timeStampAttr=groupEntry.getAttributes().get(""String_Node_Str"");
              if (timeStampAttr != null) {
                String timeStampVal=(String)timeStampAttr.get();
                Date parseDate=dateFormat.parse(timeStampVal);
                long currentDeltaSyncTime=parseDate.getTime();
                LOG.info(""String_Node_Str"" + timeStampVal + ""String_Node_Str""+ currentDeltaSyncTime);
                if (currentDeltaSyncTime > highestdeltaSyncGroupTime) {
                  highestdeltaSyncGroupTime=currentDeltaSyncTime;
                  deltaSyncGroupTimeStamp=timeStampVal;
                }
              }
            }
            Attribute groupMemberAttr=groupEntry.getAttributes().get(groupMemberAttributeName);
            int userCount=0;
            if (groupMemberAttr == null || groupMemberAttr.size() <= 0) {
              LOG.info(""String_Node_Str"" + gName);
              continue;
            }
            NamingEnumeration<?> userEnum=groupMemberAttr.getAll();
            while (userEnum.hasMore()) {
              String originalUserFullName=(String)userEnum.next();
              if (originalUserFullName == null || originalUserFullName.trim().isEmpty()) {
                continue;
              }
              userCount++;
              String userName=getShortUserName(originalUserFullName);
              originalUserFullName=originalUserFullName.toLowerCase();
              if (groupSearchFirstEnabled && !userSearchEnabled) {
                String transformUserName=userNameTransform(userName);
                try {
                  sink.addOrUpdateUser(transformUserName);
                }
 catch (                Throwable t) {
                  LOG.error(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ transformUserName);
                }
                userNameMap.put(originalUserFullName,transformUserName);
              }
              if (userNameMap.get(originalUserFullName) != null) {
                groupUserTable.put(gName,originalUserFullName,userNameMap.get(originalUserFullName));
              }
 else {
                groupUserTable.put(gName,originalUserFullName,originalUserFullName);
              }
            }
            LOG.info(""String_Node_Str"" + gName + ""String_Node_Str""+ userCount);
          }
          Control[] controls=ldapContext.getResponseControls();
          if (controls != null) {
            for (int i=0; i < controls.length; i++) {
              if (controls[i] instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
                total=prrc.getResultSize();
                if (total != 0) {
                  LOG.debug(""String_Node_Str"" + total);
                }
 else {
                  LOG.debug(""String_Node_Str"");
                }
                cookie=prrc.getCookie();
              }
            }
          }
 else {
            LOG.debug(""String_Node_Str"");
          }
          if (pagedResultsEnabled) {
            ldapContext.setRequestControls(new Control[]{new PagedResultsControl(PAGE_SIZE,cookie,Control.CRITICAL)});
          }
        }
 while (cookie != null);
        LOG.info(""String_Node_Str"" + counter);
      }
 catch (      Exception t) {
        LOG.error(""String_Node_Str"" + t);
        LOG.info(""String_Node_Str"" + counter);
      }
    }
    if (deltaSyncGroupTime < highestdeltaSyncGroupTime) {
      deltaSyncGroupTime=highestdeltaSyncGroupTime + 1;
      deltaSyncGroupTimeStamp=dateFormat.format(new Date(highestdeltaSyncGroupTime + 60000l));
    }
  }
  finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
    closeLdapContext();
  }
}",0.9668643732700672
166229,"@Test public void testGroupBasedWithSingleOU() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(99,sink.getTotalUsers());
  assertEquals(12,sink.getTotalGroups());
}","@Test public void testGroupBasedWithSingleOU() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(99,sink.getTotalUsers());
  assertEquals(12,sink.getTotalGroups());
}",0.9682741116751268
166230,"@Test public void testGBWithUserSearchDisabled() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(2,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testGBWithUserSearchDisabled() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(2,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.9683143219264893
166231,"@Test public void testUpdateSinkMultipleOUs() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(1,sink.getTotalGroups());
}","@Test public void testUpdateSinkMultipleOUs() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(1,sink.getTotalGroups());
}",0.966711051930759
166232,"@Test public void testShortUserNameWithGroupBased() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setUserSearchEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalUsers());
  assertEquals(3,sink.getTotalGroups());
}","@Test public void testShortUserNameWithGroupBased() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setUserSearchEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalUsers());
  assertEquals(3,sink.getTotalGroups());
}",0.968394437420986
166233,"@Test public void testMultipleOUGroupsWithGroupSearch() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(11,sink.getTotalGroups());
}","@Test public void testMultipleOUGroupsWithGroupSearch() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(11,sink.getTotalGroups());
}",0.9671916010498688
166234,"@Test public void testUpdateSinkShortUserName() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setUserSearchEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalUsers());
  assertEquals(3,sink.getTotalGroups());
}","@Test public void testUpdateSinkShortUserName() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setUserSearchEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalUsers());
  assertEquals(3,sink.getTotalGroups());
}",0.9683143219264893
166235,"@Test public void testMultipleOUInvalidOU() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(110,sink.getTotalUsers());
  assertEquals(0,sink.getTotalGroups());
}","@Test public void testMultipleOUInvalidOU() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(110,sink.getTotalUsers());
  assertEquals(0,sink.getTotalGroups());
}",0.9666221628838452
166236,"@Test public void testUpdateSinkTotalUsers() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setPagedResultsEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(109,sink.getTotalUsers());
}","@Test public void testUpdateSinkTotalUsers() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setPagedResultsEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(109,sink.getTotalUsers());
}",0.9642346208869814
166237,"@Test public void testUpdateSinkWithoutPagedResults() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setPagedResultsEnabled(false);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(109,sink.getTotalUsers());
}","@Test public void testUpdateSinkWithoutPagedResults() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setPagedResultsEnabled(false);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(109,sink.getTotalUsers());
}",0.9647390691114246
166238,"@Test public void testUpdateSinkGroupFilter() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalGroups());
}","@Test public void testUpdateSinkGroupFilter() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalGroups());
}",0.9647390691114246
166239,"@Test public void testGBWithInvalidOU() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalUsers());
  assertEquals(1,sink.getTotalGroups());
}","@Test public void testGBWithInvalidOU() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalUsers());
  assertEquals(1,sink.getTotalGroups());
}",0.967948717948718
166240,"@Test public void testUpdateSinkMultipleOUGroups() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testUpdateSinkMultipleOUGroups() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.966931216931217
166241,"@Test public void testGroupBasedWithAllUsersAndGroups() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(100,sink.getTotalUsers());
  assertEquals(13,sink.getTotalGroups());
}","@Test public void testGroupBasedWithAllUsersAndGroups() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(100,sink.getTotalUsers());
  assertEquals(13,sink.getTotalGroups());
}",0.966078697421981
166242,"@Test public void testUpdateSinkWithEmptyUserSearchBase() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setPagedResultsEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
}","@Test public void testUpdateSinkWithEmptyUserSearchBase() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setPagedResultsEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
}",0.9648876404494382
166243,"@Test public void testUpdateSinkUserFilter() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(12,sink.getTotalUsers());
}","@Test public void testUpdateSinkUserFilter() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(12,sink.getTotalUsers());
}",0.96206373292868
166244,"@Test public void testUpdateSinkTotalGroups() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(10,sink.getTotalGroups());
}","@Test public void testUpdateSinkTotalGroups() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(10,sink.getTotalGroups());
}",0.9647887323943662
166245,"@Test public void testGroupBasedWithNoUsers() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(0,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testGroupBasedWithNoUsers() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(0,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.9681528662420382
166246,"@Test public void testUpdateSinkMultipleOUsNoGroupSearch() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(12,sink.getTotalGroups());
}","@Test public void testUpdateSinkMultipleOUsNoGroupSearch() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(12,sink.getTotalGroups());
}",0.9673629242819844
166247,"@Test public void testUpdateSinkGroupSearchDisable() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(11,sink.getTotalGroups());
}","@Test public void testUpdateSinkGroupSearchDisable() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setGroupSearchFirstEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(11,sink.getTotalGroups());
}",0.9651810584958216
166248,"@Test public void testGroupBasedAllUsers() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(2,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testGroupBasedAllUsers() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(2,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.9664429530201344
166249,"@Test public void testMultipleOUGroupsNoGroupSearch() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setGroupSearchFirstEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(12,sink.getTotalGroups());
}","@Test public void testMultipleOUGroupsNoGroupSearch() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(false);
  config.setGroupSearchFirstEnabled(true);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(12,sink.getTotalGroups());
}",0.9671052631578948
166250,"@Test public void testGBWithNoUsersAndUserSearchDisabled() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(0,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testGBWithNoUsersAndUserSearchDisabled() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(false);
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(0,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.9687108886107636
166251,"@Test public void testDeltaGroupBasedWithUserFilter() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testDeltaGroupBasedWithUserFilter() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(1,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.9713631156930126
166252,"@Test public void testDeltaGroupBasedWithNoUsers() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(0,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testDeltaGroupBasedWithNoUsers() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(true);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(0,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.971264367816092
166253,"@Test public void testDeltaUpdateSinkMultipleOUGroups() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testDeltaUpdateSinkMultipleOUGroups() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(111,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.9702734839476812
166254,"@Test public void testDeltaUpdateSinkTotalGroups() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(10,sink.getTotalGroups());
}","@Test public void testDeltaUpdateSinkTotalGroups() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(10,sink.getTotalGroups());
}",0.9685534591194968
166255,"@Test public void testDeltaGBWithUserSearchDisabled() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(false);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(2,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}","@Test public void testDeltaGBWithUserSearchDisabled() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(true);
  config.setUserSearchEnabled(false);
  config.setDeltaSync(true);
  ldapBuilder=config.getUserGroupSource();
  ldapBuilder.init();
  LdapPolicyMgrUserGroupBuilderTest sink=new LdapPolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(2,sink.getTotalUsers());
  assertEquals(2,sink.getTotalGroups());
}",0.971395881006865
166256,"@Test public void testUpdateSinkWithUserGroupMapping() throws Throwable {
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  config.setProperty(UserGroupSyncConfig.SYNC_MAPPING_USERNAME,""String_Node_Str"");
  config.setProperty(UserGroupSyncConfig.SYNC_MAPPING_GROUPNAME,""String_Node_Str"");
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(10,sink.getTotalGroups());
  for (  String user : sink.getAllUsers()) {
    assertFalse(user.contains(""String_Node_Str""));
  }
  for (  String group : sink.getAllGroups()) {
    assertFalse(group.contains(""String_Node_Str""));
  }
}","@Test public void testUpdateSinkWithUserGroupMapping() throws Throwable {
  config.setUserNameAttribute(""String_Node_Str"");
  config.setUserSearchBase(""String_Node_Str"");
  config.setUserSearchFilter(""String_Node_Str"");
  config.setGroupSearchBase(""String_Node_Str"");
  config.setGroupSearchFilter(""String_Node_Str"");
  config.setUserGroupMemberAttributeName(""String_Node_Str"");
  config.setUserObjectClass(""String_Node_Str"");
  config.setGroupObjectClass(""String_Node_Str"");
  config.setGroupSearchEnabled(true);
  config.setGroupSearchFirstEnabled(false);
  config.setProperty(UserGroupSyncConfig.SYNC_MAPPING_USERNAME,""String_Node_Str"");
  config.setProperty(UserGroupSyncConfig.SYNC_MAPPING_GROUPNAME,""String_Node_Str"");
  ldapBuilder.init();
  PolicyMgrUserGroupBuilderTest sink=new PolicyMgrUserGroupBuilderTest();
  sink.init();
  ldapBuilder.updateSink(sink);
  assertEquals(10,sink.getTotalGroups());
  for (  String user : sink.getAllUsers()) {
    assertFalse(user.contains(""String_Node_Str""));
  }
  for (  String group : sink.getAllGroups()) {
    assertFalse(group.contains(""String_Node_Str""));
  }
}",0.9770431588613406
166257,"public boolean isSsl(String _baseUrl){
  return StringUtils.isEmpty(_baseUrl) ? false : _baseUrl.toLowerCase().startsWith(""String_Node_Str"");
}","public boolean isSsl(String _baseUrl){
  return !StringUtils.isEmpty(_baseUrl) && _baseUrl.toLowerCase().startsWith(""String_Node_Str"");
}",0.9571428571428572
166258,"private boolean checkAccess(RangerAtlasAccessRequest request){
  boolean isAccessAllowed=false;
  RangerBasePlugin plugin=atlasPlugin;
  if (plugin != null) {
    RangerAccessResult rangerResult=plugin.isAccessAllowed(request);
    isAccessAllowed=(rangerResult == null) ? false : rangerResult.getIsAllowed();
  }
 else {
    isAccessAllowed=false;
    LOG.warn(""String_Node_Str"" + plugin + ""String_Node_Str"");
  }
  return isAccessAllowed;
}","private boolean checkAccess(RangerAtlasAccessRequest request){
  boolean isAccessAllowed=false;
  RangerBasePlugin plugin=atlasPlugin;
  if (plugin != null) {
    RangerAccessResult rangerResult=plugin.isAccessAllowed(request);
    isAccessAllowed=rangerResult != null && rangerResult.getIsAllowed();
  }
 else {
    isAccessAllowed=false;
    LOG.warn(""String_Node_Str"" + plugin + ""String_Node_Str"");
  }
  return isAccessAllowed;
}",0.9371428571428572
166259,"@Override public boolean checkPermission(AccessType accessType,PrivilegedEntity entity,UserGroupInformation ugi){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accessType + ""String_Node_Str""+ toString(entity)+ ""String_Node_Str""+ ugi+ ""String_Node_Str"");
  }
  boolean ret=false;
  RangerYarnPlugin plugin=yarnPlugin;
  RangerYarnAuditHandler auditHandler=null;
  RangerAccessResult result=null;
  String clusterName=yarnPlugin.getClusterName();
  RangerPerfTracer perf=null;
  RangerPerfTracer yarnAclPerf=null;
  if (plugin != null) {
    if (RangerPerfTracer.isPerfTraceEnabled(PERF_YARNAUTH_REQUEST_LOG)) {
      perf=RangerPerfTracer.getPerfTracer(PERF_YARNAUTH_REQUEST_LOG,""String_Node_Str"" + entity + ""String_Node_Str"");
    }
    RangerYarnAccessRequest request=new RangerYarnAccessRequest(entity,getRangerAccessType(accessType),accessType.name(),ugi,clusterName);
    auditHandler=new RangerYarnAuditHandler();
    result=plugin.isAccessAllowed(request,auditHandler);
  }
  if (RangerYarnAuthorizer.yarnAuthEnabled && (result == null || !result.getIsAccessDetermined())) {
    if (RangerPerfTracer.isPerfTraceEnabled(PERF_YARNAUTH_REQUEST_LOG)) {
      yarnAclPerf=RangerPerfTracer.getPerfTracer(PERF_YARNAUTH_REQUEST_LOG,""String_Node_Str"" + entity + ""String_Node_Str"");
    }
    ret=isAllowedByYarnAcl(accessType,entity,ugi,auditHandler);
  }
 else {
    ret=result == null ? false : result.getIsAllowed();
  }
  if (auditHandler != null) {
    auditHandler.flushAudit();
  }
  RangerPerfTracer.log(yarnAclPerf);
  RangerPerfTracer.log(perf);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accessType + ""String_Node_Str""+ toString(entity)+ ""String_Node_Str""+ ugi+ ""String_Node_Str""+ ret);
  }
  return ret;
}","@Override public boolean checkPermission(AccessType accessType,PrivilegedEntity entity,UserGroupInformation ugi){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accessType + ""String_Node_Str""+ toString(entity)+ ""String_Node_Str""+ ugi+ ""String_Node_Str"");
  }
  boolean ret=false;
  RangerYarnPlugin plugin=yarnPlugin;
  RangerYarnAuditHandler auditHandler=null;
  RangerAccessResult result=null;
  String clusterName=yarnPlugin.getClusterName();
  RangerPerfTracer perf=null;
  RangerPerfTracer yarnAclPerf=null;
  if (plugin != null) {
    if (RangerPerfTracer.isPerfTraceEnabled(PERF_YARNAUTH_REQUEST_LOG)) {
      perf=RangerPerfTracer.getPerfTracer(PERF_YARNAUTH_REQUEST_LOG,""String_Node_Str"" + entity + ""String_Node_Str"");
    }
    RangerYarnAccessRequest request=new RangerYarnAccessRequest(entity,getRangerAccessType(accessType),accessType.name(),ugi,clusterName);
    auditHandler=new RangerYarnAuditHandler();
    result=plugin.isAccessAllowed(request,auditHandler);
  }
  if (RangerYarnAuthorizer.yarnAuthEnabled && (result == null || !result.getIsAccessDetermined())) {
    if (RangerPerfTracer.isPerfTraceEnabled(PERF_YARNAUTH_REQUEST_LOG)) {
      yarnAclPerf=RangerPerfTracer.getPerfTracer(PERF_YARNAUTH_REQUEST_LOG,""String_Node_Str"" + entity + ""String_Node_Str"");
    }
    ret=isAllowedByYarnAcl(accessType,entity,ugi,auditHandler);
  }
 else {
    ret=result != null && result.getIsAllowed();
  }
  if (auditHandler != null) {
    auditHandler.flushAudit();
  }
  RangerPerfTracer.log(yarnAclPerf);
  RangerPerfTracer.log(perf);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accessType + ""String_Node_Str""+ toString(entity)+ ""String_Node_Str""+ ugi+ ""String_Node_Str""+ ret);
  }
  return ret;
}",0.992283509574164
166260,"/** 
 * @param serviceName
 * @param context
 * @return
 */
public List<String> getResources(ResourceLookupContext context){
}","public List<String> getResources(ResourceLookupContext context){
}",0.6875
166261,"private String getFileLocation(String fileName){
  String ret=null;
  URL lurl=RangerConfiguration.class.getClassLoader().getResource(fileName);
  if (lurl == null) {
    lurl=RangerConfiguration.class.getClassLoader().getResource(""String_Node_Str"" + fileName);
  }
  if (lurl != null) {
    ret=lurl.getFile();
  }
  return ret;
}","private URL getFileLocation(String fileName){
  URL lurl=RangerConfiguration.class.getClassLoader().getResource(fileName);
  if (lurl == null) {
    lurl=RangerConfiguration.class.getClassLoader().getResource(""String_Node_Str"" + fileName);
  }
  return lurl;
}",0.7749576988155669
166262,"private boolean addResourceIfReadable(String aResourceName){
  boolean ret=false;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + aResourceName + ""String_Node_Str"");
  }
  String fName=getFileLocation(aResourceName);
  if (fName != null) {
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"" + aResourceName + ""String_Node_Str""+ fName);
    }
    File f=new File(fName);
    if (f.exists() && f.canRead()) {
      URL fUrl=null;
      try {
        fUrl=f.toURI().toURL();
        addResource(fUrl);
        ret=true;
      }
 catch (      MalformedURLException e) {
        LOG.error(""String_Node_Str"" + aResourceName + ""String_Node_Str""+ aResourceName);
      }
    }
 else {
      LOG.error(""String_Node_Str"" + aResourceName + ""String_Node_Str"");
    }
  }
 else {
    LOG.error(""String_Node_Str"" + aResourceName + ""String_Node_Str"");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + aResourceName + ""String_Node_Str""+ ret);
  }
  return ret;
}","private boolean addResourceIfReadable(String aResourceName){
  boolean ret=false;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + aResourceName + ""String_Node_Str"");
  }
  URL fUrl=getFileLocation(aResourceName);
  if (fUrl != null) {
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"" + aResourceName + ""String_Node_Str""+ fUrl);
    }
    try {
      addResource(fUrl);
      ret=true;
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + aResourceName + ""String_Node_Str""+ fUrl);
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + fUrl,e);
      }
    }
  }
 else {
    LOG.error(""String_Node_Str"" + aResourceName + ""String_Node_Str"");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + aResourceName + ""String_Node_Str""+ ret);
  }
  return ret;
}",0.4917853231106243
166263,"private void runTestsFromResourceFiles(String[] resourceNames) throws Exception {
  for (  String resourceName : resourceNames) {
    InputStream inStream=this.getClass().getResourceAsStream(resourceName);
    InputStreamReader reader=new InputStreamReader(inStream);
    runTests(reader);
  }
}","private void runTestsFromResourceFiles(String[] resourceNames) throws Exception {
  for (  String resourceName : resourceNames) {
    InputStream inStream=this.getClass().getResourceAsStream(resourceName);
    InputStreamReader reader=new InputStreamReader(inStream,Charset.defaultCharset());
    runTests(reader);
  }
}",0.959349593495935
166264,"@Test public void test24getServicePoliciesIfUpdated() throws Exception {
  HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
  String serviceName=""String_Node_Str"";
  Long lastKnownVersion=1L;
  String pluginId=""String_Node_Str"";
  try {
    Mockito.doNothing().when(assetMgr).createPluginInfo(serviceName,pluginId,null,1,1L,lastKnownVersion,1,0);
  }
 catch (  Exception e) {
  }
  ServicePolicies dbServicePolicies=serviceREST.getServicePoliciesIfUpdated(serviceName,lastKnownVersion,0L,pluginId,request);
  Assert.assertNull(dbServicePolicies);
}","@Test public void test24getServicePoliciesIfUpdated() throws Exception {
  HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
  String serviceName=""String_Node_Str"";
  Long lastKnownVersion=1L;
  String pluginId=""String_Node_Str"";
  Mockito.doNothing().when(assetMgr).createPluginInfo(serviceName,pluginId,null,1,1L,lastKnownVersion,1,0);
  ServicePolicies dbServicePolicies=serviceREST.getServicePoliciesIfUpdated(serviceName,lastKnownVersion,0L,pluginId,request);
  Assert.assertNull(dbServicePolicies);
}",0.960514233241506
166265,"@Test public void testTransform() throws Throwable {
  userRegexPatterns.add(""String_Node_Str"");
  userNameRegEx.populateReplacementPatterns(userNameBaseProperty,userRegexPatterns);
  assertEquals(""String_Node_Str"",userNameRegEx.transform(""String_Node_Str""));
  assertEquals(""String_Node_Str"",groupNameRegEx.transform(""String_Node_Str""));
}","@Test public void testTransform() throws Throwable {
  userRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  userNameRegEx.populateReplacementPatterns(userNameBaseProperty,userRegexPatterns);
  groupNameRegEx.populateReplacementPatterns(groupNameBaseProperty,groupRegexPatterns);
  assertEquals(""String_Node_Str"",userNameRegEx.transform(""String_Node_Str""));
  assertEquals(""String_Node_Str"",groupNameRegEx.transform(""String_Node_Str""));
}",0.8364083640836408
166266,"@Test public void testTransform1() throws Throwable {
  userRegexPatterns.add(""String_Node_Str"");
  userRegexPatterns.add(""String_Node_Str"");
  userNameRegEx.populateReplacementPatterns(userNameBaseProperty,userRegexPatterns);
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupNameRegEx.populateReplacementPatterns(userNameBaseProperty,groupRegexPatterns);
  assertEquals(""String_Node_Str"",userNameRegEx.transform(""String_Node_Str""));
  assertEquals(""String_Node_Str"",groupNameRegEx.transform(""String_Node_Str""));
}","@Test public void testTransform1() throws Throwable {
  userRegexPatterns.add(""String_Node_Str"");
  userRegexPatterns.add(""String_Node_Str"");
  userNameRegEx.populateReplacementPatterns(userNameBaseProperty,userRegexPatterns);
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupNameRegEx.populateReplacementPatterns(groupNameBaseProperty,groupRegexPatterns);
  assertEquals(""String_Node_Str"",userNameRegEx.transform(""String_Node_Str""));
  assertEquals(""String_Node_Str"",groupNameRegEx.transform(""String_Node_Str""));
}",0.9925925925925926
166267,"@Test public void testGroupNameTransform() throws Throwable {
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupNameRegEx.populateReplacementPatterns(userNameBaseProperty,groupRegexPatterns);
  assertEquals(""String_Node_Str"",groupNameRegEx.transform(""String_Node_Str""));
}","@Test public void testGroupNameTransform() throws Throwable {
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupNameRegEx.populateReplacementPatterns(groupNameBaseProperty,groupRegexPatterns);
  assertEquals(""String_Node_Str"",groupNameRegEx.transform(""String_Node_Str""));
}",0.9859154929577464
166268,"@org.junit.AfterClass public static void cleanup() throws Exception {
  if (kafkaServer != null) {
    kafkaServer.shutdown();
  }
  if (zkServer != null) {
    zkServer.stop();
  }
  File clientKeystoreFile=new File(clientKeystorePath);
  if (clientKeystoreFile.exists()) {
    clientKeystoreFile.delete();
  }
  File serviceKeystoreFile=new File(serviceKeystorePath);
  if (serviceKeystoreFile.exists()) {
    serviceKeystoreFile.delete();
  }
  File truststoreFile=new File(truststorePath);
  if (truststoreFile.exists()) {
    truststoreFile.delete();
  }
}","@org.junit.AfterClass public static void cleanup() throws Exception {
  if (kafkaServer != null) {
    kafkaServer.shutdown();
  }
  if (zkServer != null) {
    zkServer.stop();
  }
  File clientKeystoreFile=new File(clientKeystorePath);
  if (clientKeystoreFile.exists()) {
    FileUtils.forceDelete(clientKeystoreFile);
  }
  File serviceKeystoreFile=new File(serviceKeystorePath);
  if (serviceKeystoreFile.exists()) {
    FileUtils.forceDelete(serviceKeystoreFile);
  }
  File truststoreFile=new File(truststorePath);
  if (truststoreFile.exists()) {
    FileUtils.forceDelete(truststoreFile);
  }
}",0.8350515463917526
166269,"@org.junit.BeforeClass public static void setup() throws Exception {
  String basedir=System.getProperty(""String_Node_Str"");
  if (basedir == null) {
    basedir=new File(""String_Node_Str"").getCanonicalPath();
  }
  File f=new File(basedir + ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",f.getPath());
  String serviceDN=""String_Node_Str"";
  String clientDN=""String_Node_Str"";
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  keystore.load(null,""String_Node_Str"".toCharArray());
  serviceKeystorePath=KafkaTestUtils.createAndStoreKey(serviceDN,serviceDN,BigInteger.valueOf(30),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keystore);
  clientKeystorePath=KafkaTestUtils.createAndStoreKey(clientDN,clientDN,BigInteger.valueOf(31),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keystore);
  File truststoreFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  keystore.store(new FileOutputStream(truststoreFile),""String_Node_Str"".toCharArray());
  truststorePath=truststoreFile.getPath();
  zkServer=new TestingServer();
  ServerSocket serverSocket=new ServerSocket(0);
  port=serverSocket.getLocalPort();
  serverSocket.close();
  final Properties props=new Properties();
  props.put(""String_Node_Str"",1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",zkServer.getConnectString());
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",Boolean.TRUE.toString());
  props.put(""String_Node_Str"",""String_Node_Str"" + port);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",serviceKeystorePath);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",truststorePath);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  UserGroupInformation.createUserForTesting(""String_Node_Str"",new String[]{""String_Node_Str""});
  KafkaConfig config=new KafkaConfig(props);
  kafkaServer=new KafkaServerStartable(config);
  kafkaServer.startup();
  ZkClient zkClient=new ZkClient(zkServer.getConnectString(),30000,30000,ZKStringSerializer$.MODULE$);
  final ZkUtils zkUtils=new ZkUtils(zkClient,new ZkConnection(zkServer.getConnectString()),false);
  AdminUtils.createTopic(zkUtils,""String_Node_Str"",1,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
  AdminUtils.createTopic(zkUtils,""String_Node_Str"",1,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
}","@org.junit.BeforeClass public static void setup() throws Exception {
  String basedir=System.getProperty(""String_Node_Str"");
  if (basedir == null) {
    basedir=new File(""String_Node_Str"").getCanonicalPath();
  }
  File f=new File(basedir + ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",f.getPath());
  String serviceDN=""String_Node_Str"";
  String clientDN=""String_Node_Str"";
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  keystore.load(null,""String_Node_Str"".toCharArray());
  serviceKeystorePath=KafkaTestUtils.createAndStoreKey(serviceDN,serviceDN,BigInteger.valueOf(30),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keystore);
  clientKeystorePath=KafkaTestUtils.createAndStoreKey(clientDN,clientDN,BigInteger.valueOf(31),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keystore);
  File truststoreFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  try (OutputStream output=new FileOutputStream(truststoreFile)){
    keystore.store(output,""String_Node_Str"".toCharArray());
  }
   truststorePath=truststoreFile.getPath();
  zkServer=new TestingServer();
  ServerSocket serverSocket=new ServerSocket(0);
  port=serverSocket.getLocalPort();
  serverSocket.close();
  final Properties props=new Properties();
  props.put(""String_Node_Str"",1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",zkServer.getConnectString());
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",Boolean.TRUE.toString());
  props.put(""String_Node_Str"",""String_Node_Str"" + port);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",serviceKeystorePath);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",truststorePath);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  UserGroupInformation.createUserForTesting(""String_Node_Str"",new String[]{""String_Node_Str""});
  KafkaConfig config=new KafkaConfig(props);
  kafkaServer=new KafkaServerStartable(config);
  kafkaServer.startup();
  ZkClient zkClient=new ZkClient(zkServer.getConnectString(),30000,30000,ZKStringSerializer$.MODULE$);
  final ZkUtils zkUtils=new ZkUtils(zkClient,new ZkConnection(zkServer.getConnectString()),false);
  AdminUtils.createTopic(zkUtils,""String_Node_Str"",1,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
  AdminUtils.createTopic(zkUtils,""String_Node_Str"",1,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
}",0.9869748669968812
166270,"@org.junit.AfterClass public static void cleanup() throws Exception {
  if (kafkaServer != null) {
    kafkaServer.shutdown();
  }
  if (zkServer != null) {
    zkServer.stop();
  }
  File clientKeystoreFile=new File(clientKeystorePath);
  if (clientKeystoreFile.exists()) {
    clientKeystoreFile.delete();
  }
  File serviceKeystoreFile=new File(serviceKeystorePath);
  if (serviceKeystoreFile.exists()) {
    serviceKeystoreFile.delete();
  }
  File truststoreFile=new File(truststorePath);
  if (truststoreFile.exists()) {
    truststoreFile.delete();
  }
  if (tempDir != null) {
    FileUtils.deleteDirectory(tempDir.toFile());
  }
}","@org.junit.AfterClass public static void cleanup() throws Exception {
  if (kafkaServer != null) {
    kafkaServer.shutdown();
  }
  if (zkServer != null) {
    zkServer.stop();
  }
  File clientKeystoreFile=new File(clientKeystorePath);
  if (clientKeystoreFile.exists()) {
    FileUtils.forceDelete(clientKeystoreFile);
  }
  File serviceKeystoreFile=new File(serviceKeystorePath);
  if (serviceKeystoreFile.exists()) {
    FileUtils.forceDelete(serviceKeystoreFile);
  }
  File truststoreFile=new File(truststorePath);
  if (truststoreFile.exists()) {
    FileUtils.forceDelete(truststoreFile);
  }
  if (tempDir != null) {
    FileUtils.deleteDirectory(tempDir.toFile());
  }
}",0.8545454545454545
166271,"@org.junit.BeforeClass public static void setup() throws Exception {
  String serviceDN=""String_Node_Str"";
  String clientDN=""String_Node_Str"";
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  keystore.load(null,""String_Node_Str"".toCharArray());
  serviceKeystorePath=KafkaTestUtils.createAndStoreKey(serviceDN,serviceDN,BigInteger.valueOf(30),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keystore);
  clientKeystorePath=KafkaTestUtils.createAndStoreKey(clientDN,clientDN,BigInteger.valueOf(31),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keystore);
  File truststoreFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  keystore.store(new FileOutputStream(truststoreFile),""String_Node_Str"".toCharArray());
  truststorePath=truststoreFile.getPath();
  zkServer=new TestingServer();
  ServerSocket serverSocket=new ServerSocket(0);
  port=serverSocket.getLocalPort();
  serverSocket.close();
  tempDir=Files.createTempDirectory(""String_Node_Str"");
  final Properties props=new Properties();
  props.put(""String_Node_Str"",1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",tempDir.toString());
  props.put(""String_Node_Str"",zkServer.getConnectString());
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",Boolean.TRUE.toString());
  props.put(""String_Node_Str"",""String_Node_Str"" + port);
  props.put(""String_Node_Str"",serviceKeystorePath);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",truststorePath);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  UserGroupInformation.createUserForTesting(clientDN,new String[]{""String_Node_Str""});
  UserGroupInformation.createUserForTesting(serviceDN,new String[]{""String_Node_Str""});
  KafkaConfig config=new KafkaConfig(props);
  kafkaServer=new KafkaServerStartable(config);
  kafkaServer.startup();
  ZkClient zkClient=new ZkClient(zkServer.getConnectString(),30000,30000,ZKStringSerializer$.MODULE$);
  final ZkUtils zkUtils=new ZkUtils(zkClient,new ZkConnection(zkServer.getConnectString()),false);
  AdminUtils.createTopic(zkUtils,""String_Node_Str"",1,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
  AdminUtils.createTopic(zkUtils,""String_Node_Str"",1,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
}","@org.junit.BeforeClass public static void setup() throws Exception {
  String serviceDN=""String_Node_Str"";
  String clientDN=""String_Node_Str"";
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  keystore.load(null,""String_Node_Str"".toCharArray());
  serviceKeystorePath=KafkaTestUtils.createAndStoreKey(serviceDN,serviceDN,BigInteger.valueOf(30),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keystore);
  clientKeystorePath=KafkaTestUtils.createAndStoreKey(clientDN,clientDN,BigInteger.valueOf(31),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keystore);
  File truststoreFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  try (OutputStream output=new FileOutputStream(truststoreFile)){
    keystore.store(output,""String_Node_Str"".toCharArray());
  }
   truststorePath=truststoreFile.getPath();
  zkServer=new TestingServer();
  ServerSocket serverSocket=new ServerSocket(0);
  port=serverSocket.getLocalPort();
  serverSocket.close();
  tempDir=Files.createTempDirectory(""String_Node_Str"");
  final Properties props=new Properties();
  props.put(""String_Node_Str"",1);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",port);
  props.put(""String_Node_Str"",tempDir.toString());
  props.put(""String_Node_Str"",zkServer.getConnectString());
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",Boolean.TRUE.toString());
  props.put(""String_Node_Str"",""String_Node_Str"" + port);
  props.put(""String_Node_Str"",serviceKeystorePath);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",truststorePath);
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  UserGroupInformation.createUserForTesting(clientDN,new String[]{""String_Node_Str""});
  UserGroupInformation.createUserForTesting(serviceDN,new String[]{""String_Node_Str""});
  KafkaConfig config=new KafkaConfig(props);
  kafkaServer=new KafkaServerStartable(config);
  kafkaServer.startup();
  ZkClient zkClient=new ZkClient(zkServer.getConnectString(),30000,30000,ZKStringSerializer$.MODULE$);
  final ZkUtils zkUtils=new ZkUtils(zkClient,new ZkConnection(zkServer.getConnectString()),false);
  AdminUtils.createTopic(zkUtils,""String_Node_Str"",1,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
  AdminUtils.createTopic(zkUtils,""String_Node_Str"",1,1,new Properties(),RackAwareMode.Enforced$.MODULE$);
}",0.9861625414149288
166272,"public static String createAndStoreKey(String subjectName,String issuerName,BigInteger serial,String keystorePassword,String keystoreAlias,String keyPassword,KeyStore trustStore) throws Exception {
  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance(""String_Node_Str"");
  keyPairGenerator.initialize(2048,new SecureRandom());
  KeyPair keyPair=keyPairGenerator.generateKeyPair();
  Date currentDate=new Date();
  Date expiryDate=new Date(currentDate.getTime() + 365L * 24L * 60L* 60L* 1000L);
  X509v3CertificateBuilder certBuilder=new X509v3CertificateBuilder(new X500Name(RFC4519Style.INSTANCE,issuerName),serial,currentDate,expiryDate,new X500Name(RFC4519Style.INSTANCE,subjectName),SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));
  ContentSigner contentSigner=new JcaContentSignerBuilder(""String_Node_Str"").build(keyPair.getPrivate());
  X509Certificate certificate=new JcaX509CertificateConverter().getCertificate(certBuilder.build(contentSigner));
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  keystore.load(null,keystorePassword.toCharArray());
  keystore.setKeyEntry(keystoreAlias,keyPair.getPrivate(),keyPassword.toCharArray(),new Certificate[]{certificate});
  File keystoreFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  keystore.store(new FileOutputStream(keystoreFile),keystorePassword.toCharArray());
  trustStore.setCertificateEntry(keystoreAlias,certificate);
  return keystoreFile.getPath();
}","public static String createAndStoreKey(String subjectName,String issuerName,BigInteger serial,String keystorePassword,String keystoreAlias,String keyPassword,KeyStore trustStore) throws Exception {
  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance(""String_Node_Str"");
  keyPairGenerator.initialize(2048,new SecureRandom());
  KeyPair keyPair=keyPairGenerator.generateKeyPair();
  Date currentDate=new Date();
  Date expiryDate=new Date(currentDate.getTime() + 365L * 24L * 60L* 60L* 1000L);
  X509v3CertificateBuilder certBuilder=new X509v3CertificateBuilder(new X500Name(RFC4519Style.INSTANCE,issuerName),serial,currentDate,expiryDate,new X500Name(RFC4519Style.INSTANCE,subjectName),SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));
  ContentSigner contentSigner=new JcaContentSignerBuilder(""String_Node_Str"").build(keyPair.getPrivate());
  X509Certificate certificate=new JcaX509CertificateConverter().getCertificate(certBuilder.build(contentSigner));
  KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
  keystore.load(null,keystorePassword.toCharArray());
  keystore.setKeyEntry(keystoreAlias,keyPair.getPrivate(),keyPassword.toCharArray(),new Certificate[]{certificate});
  File keystoreFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  try (OutputStream output=new FileOutputStream(keystoreFile)){
    keystore.store(output,keystorePassword.toCharArray());
  }
   trustStore.setCertificateEntry(keystoreAlias,certificate);
  return keystoreFile.getPath();
}",0.975787728026534
166273,"private void createGenericUser(){
  VXUser genericUser=new VXUser();
  genericUser.setName(RangerPolicyEngine.USER_CURRENT);
  xUserService.createXUserWithOutLogin(genericUser);
}","private void createGenericUser(){
  VXUser genericUser=new VXUser();
  genericUser.setName(RangerPolicyEngine.USER_CURRENT);
  genericUser.setDescription(RangerPolicyEngine.USER_CURRENT);
  xUserService.createXUserWithOutLogin(genericUser);
}",0.850356294536817
166274,"String getDataMaskName(Long dataMaskDefId){
  String ret=null;
  if (dataMaskDefId != null) {
    ret=dataMasks.get(dataMaskDefId);
    if (ret == null) {
      XXDataMaskTypeDef xDataMaskDef=daoMgr.getXXDataMaskTypeDef().getById(dataMaskDefId);
      if (xDataMaskDef != null) {
        ret=xDataMaskDef.getName();
        resourceDefs.put(dataMaskDefId,ret);
      }
    }
  }
  return ret;
}","String getDataMaskName(Long dataMaskDefId){
  String ret=null;
  if (dataMaskDefId != null) {
    ret=dataMasks.get(dataMaskDefId);
    if (ret == null) {
      XXDataMaskTypeDef xDataMaskDef=daoMgr.getXXDataMaskTypeDef().getById(dataMaskDefId);
      if (xDataMaskDef != null) {
        ret=xDataMaskDef.getName();
        dataMasks.put(dataMaskDefId,ret);
      }
    }
  }
  return ret;
}",0.975796178343949
166275,"public void init(Properties prop,String basePropertyName);","void init(Properties prop,String basePropertyName);",0.9357798165137616
166276,"/** 
 * Name for this provider. Used only during logging. Uniqueness is not guaranteed
 */
public String getName();","/** 
 * Name for this provider. Used only during logging. Uniqueness is not guaranteed
 */
String getName();",0.968609865470852
166277,public void stop();,void stop();,0.7741935483870968
166278,public void flush();,void flush();,0.7878787878787878
166279,public boolean log(Collection<AuditEventBase> events);,boolean log(Collection<AuditEventBase> events);,0.9306930693069309
166280,public boolean logJSON(Collection<String> events);,boolean logJSON(Collection<String> events);,0.9247311827956988
166281,public void start();,void start();,0.7878787878787878
166282,public void waitToComplete(long timeout);,void waitToComplete(long timeout);,0.9066666666666666
166283,public boolean add(T log);,boolean add(T log);,0.8444444444444444
166284,public void stop();,void stop();,0.7741935483870968
166285,public void start(LogDestination<T> destination);,void start(LogDestination<T> destination);,0.9230769230769232
166286,public boolean isEmpty();,boolean isEmpty();,0.8372093023255814
166287,"/** 
 * Name for the destination
 * @return
 */
public String getName();","/** 
 * Name for the destination
 * @return
 */
String getName();",0.948905109489051
166288,public void stop();,void stop();,0.7741935483870968
166289,public boolean flush();,boolean flush();,0.8205128205128205
166290,public void start();,void start();,0.7878787878787878
166291,public boolean send(AuditEventBase[] logs) throws AuditMessageException ;,boolean send(AuditEventBase[] logs) throws AuditMessageException ;,0.9496402877697842
166292,public boolean sendStringified(String[] logs) throws AuditMessageException ;,boolean sendStringified(String[] logs) throws AuditMessageException ;,0.9517241379310344
166293,public abstract String getValue(String name);,String getValue(String name);,0.7837837837837838
166294,public abstract String getOwnerUser();,String getOwnerUser();,0.7333333333333333
166295,public RangerServiceDef getServiceDef();,RangerServiceDef getServiceDef();,0.9041095890410958
166296,public abstract boolean exists(String name);,boolean exists(String name);,0.7777777777777778
166297,public String getLeafName();,String getLeafName();,0.8571428571428571
166298,public String getAsString();,String getAsString();,0.8571428571428571
166299,public Set<String> getKeys();,Set<String> getKeys();,0.8627450980392157
166300,public RangerAccessResource getReadOnlyCopy();,RangerAccessResource getReadOnlyCopy();,0.9176470588235294
166301,"public Map<String,String> getAsMap();","Map<String,String> getAsMap();",0.8955223880597015
166302,"boolean isCurrentFilename(String filename){
  return mBufferFilename != null && filename != null && filename.equals(mBufferFilename);
}","boolean isCurrentFilename(String filename){
  return filename != null && filename.equals(mBufferFilename);
}",0.8888888888888888
166303,"public final String getResource(){
  String ret=null;
  Object val=getRequestContext().get(RangerAccessRequestUtil.KEY_CONTEXT_RESOURCE);
  if (val != null) {
    if (val instanceof RangerAccessResource) {
      ret=((RangerAccessResource)val).getAsString();
    }
 else {
      ret=val.toString();
    }
  }
  return ret;
}","public String getResource(){
  String ret=null;
  Object val=getRequestContext().get(RangerAccessRequestUtil.KEY_CONTEXT_RESOURCE);
  if (val != null) {
    if (val instanceof RangerAccessResource) {
      ret=((RangerAccessResource)val).getAsString();
    }
 else {
      ret=val.toString();
    }
  }
  return ret;
}",0.9906542056074766
166304,"public final boolean isAccessTypeAny(){
  return accessRequest.isAccessTypeAny();
}","public boolean isAccessTypeAny(){
  return accessRequest.isAccessTypeAny();
}",0.9625
166305,"public final boolean isAccessedBefore(String attributeName){
  boolean ret=true;
  Date accessDate=getAccessTime();
  Date expiryDate=getAsDate(getAttributeValue(attributeName));
  if (expiryDate == null || accessDate.after(expiryDate)) {
    ret=false;
  }
  return ret;
}","public boolean isAccessedBefore(String attributeName){
  boolean ret=true;
  Date accessDate=getAccessTime();
  Date expiryDate=getAsDate(getAttributeValue(attributeName));
  if (expiryDate == null || accessDate.after(expiryDate)) {
    ret=false;
  }
  return ret;
}",0.9888888888888888
166306,"public final String getAttributeValue(final String attributeName){
  String ret=null;
  if (StringUtils.isNotBlank(attributeName)) {
    RangerTag tag=getCurrentTag();
    Map<String,String> attributes=null;
    if (tag != null) {
      attributes=tag.getAttributes();
    }
    if (attributes != null) {
      ret=attributes.get(attributeName);
    }
  }
  return ret;
}","public String getAttributeValue(final String attributeName){
  String ret=null;
  if (StringUtils.isNotBlank(attributeName)) {
    RangerTag tag=getCurrentTag();
    Map<String,String> attributes=null;
    if (tag != null) {
      attributes=tag.getAttributes();
    }
    if (attributes != null) {
      ret=attributes.get(attributeName);
    }
  }
  return ret;
}",0.9918478260869564
166307,"public final void setResult(final boolean result){
  this.result=result;
}","public void setResult(final boolean result){
  this.result=result;
}",0.9577464788732394
166308,"public final String getUser(){
  return accessRequest.getUser();
}","public String getUser(){
  return accessRequest.getUser();
}",0.9523809523809524
166309,"public final Map<String,String> getTagAttributes(final String tagType){
  Map<String,String> ret=null;
  if (StringUtils.isNotBlank(tagType)) {
    List<RangerTag> tagObjectList=getAllTags();
    if (CollectionUtils.isNotEmpty(tagObjectList)) {
      for (      RangerTag tag : tagObjectList) {
        if (tag.getType().equals(tagType)) {
          ret=tag.getAttributes();
          break;
        }
      }
    }
  }
  return ret;
}","public Map<String,String> getTagAttributes(final String tagType){
  Map<String,String> ret=null;
  if (StringUtils.isNotBlank(tagType)) {
    List<RangerTag> tagObjectList=getAllTags();
    if (CollectionUtils.isNotEmpty(tagObjectList)) {
      for (      RangerTag tag : tagObjectList) {
        if (tag.getType().equals(tagType)) {
          ret=tag.getAttributes();
          break;
        }
      }
    }
  }
  return ret;
}",0.9930555555555556
166310,"public final RangerTag getCurrentTag(){
  RangerTag ret=null;
  Object val=getRequestContext().get(RangerAccessRequestUtil.KEY_CONTEXT_TAG_OBJECT);
  if (val != null && val instanceof RangerTag) {
    ret=(RangerTag)val;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"");
    }
  }
  return ret;
}","public RangerTag getCurrentTag(){
  RangerTag ret=null;
  Object val=getRequestContext().get(RangerAccessRequestUtil.KEY_CONTEXT_TAG_OBJECT);
  if (val != null && val instanceof RangerTag) {
    ret=(RangerTag)val;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"");
    }
  }
  return ret;
}",0.9907120743034056
166311,"public final Set<String> getAllTagTypes(){
  Set<String> allTagTypes=null;
  List<RangerTag> tagObjectList=getAllTags();
  if (CollectionUtils.isNotEmpty(tagObjectList)) {
    for (    RangerTag tag : tagObjectList) {
      String tagType=tag.getType();
      if (allTagTypes == null) {
        allTagTypes=new HashSet<String>();
      }
      allTagTypes.add(tagType);
    }
  }
  return allTagTypes;
}","public Set<String> getAllTagTypes(){
  Set<String> allTagTypes=null;
  List<RangerTag> tagObjectList=getAllTags();
  if (CollectionUtils.isNotEmpty(tagObjectList)) {
    for (    RangerTag tag : tagObjectList) {
      String tagType=tag.getType();
      if (allTagTypes == null) {
        allTagTypes=new HashSet<String>();
      }
      allTagTypes.add(tagType);
    }
  }
  return allTagTypes;
}",0.9925
166312,"public final Date getTagAttributeAsDate(String tagType,String attributeName){
  String attrValue=getAttributeValue(tagType,attributeName);
  return getAsDate(attrValue);
}","public Date getTagAttributeAsDate(String tagType,String attributeName){
  String attrValue=getAttributeValue(tagType,attributeName);
  return getAsDate(attrValue);
}",0.9821428571428572
166313,"public final Date getAsDate(String value){
  Date ret=null;
  if (StringUtils.isNotBlank(value)) {
    SimpleDateFormat df=new SimpleDateFormat(DATETIME_FORMAT_PATTERN);
    try {
      Date expiryDate=df.parse(value);
      if (expiryDate == null) {
        LOG.error(""String_Node_Str"" + value + ""String_Node_Str""+ DATETIME_FORMAT_PATTERN);
      }
 else {
        ret=StringUtil.getUTCDateForLocalDate(expiryDate);
      }
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"" + value + ""String_Node_Str""+ ex);
    }
  }
  return ret;
}","public Date getAsDate(String value){
  Date ret=null;
  if (StringUtils.isNotBlank(value)) {
    SimpleDateFormat df=new SimpleDateFormat(DATETIME_FORMAT_PATTERN);
    try {
      Date expiryDate=df.parse(value);
      if (expiryDate == null) {
        LOG.error(""String_Node_Str"" + value + ""String_Node_Str""+ DATETIME_FORMAT_PATTERN);
      }
 else {
        ret=StringUtil.getUTCDateForLocalDate(expiryDate);
      }
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"" + value + ""String_Node_Str""+ ex);
    }
  }
  return ret;
}",0.994535519125683
166314,"public final Date getAccessTime(){
  return accessRequest.getAccessTime();
}","public Date getAccessTime(){
  return accessRequest.getAccessTime();
}",0.958904109589041
166315,"public final String getAction(){
  return accessRequest.getAction();
}","public String getAction(){
  return accessRequest.getAction();
}",0.9552238805970148
166316,"public final boolean isAccessedAfter(String attributeName){
  boolean ret=false;
  Date accessDate=getAccessTime();
  Date expiryDate=getAsDate(getAttributeValue(attributeName));
  if (expiryDate == null || accessDate.after(expiryDate) || accessDate.equals(expiryDate)) {
    ret=true;
  }
  return ret;
}","public boolean isAccessedAfter(String attributeName){
  boolean ret=false;
  Date accessDate=getAccessTime();
  Date expiryDate=getAsDate(getAttributeValue(attributeName));
  if (expiryDate == null || accessDate.after(expiryDate) || accessDate.equals(expiryDate)) {
    ret=true;
  }
  return ret;
}",0.9900662251655628
166317,"public final String getClientType(){
  return accessRequest.getClientType();
}","public String getClientType(){
  return accessRequest.getClientType();
}",0.96
166318,"public final String getCurrentTagType(){
  RangerTag tagObject=getCurrentTag();
  return (tagObject != null) ? tagObject.getType() : null;
}","public String getCurrentTagType(){
  RangerTag tagObject=getCurrentTag();
  return (tagObject != null) ? tagObject.getType() : null;
}",0.978102189781022
166319,"public final String getClientIPAddress(){
  return accessRequest.getClientIPAddress();
}","public String getClientIPAddress(){
  return accessRequest.getClientIPAddress();
}",0.9647058823529412
166320,"public final String getRequestContextAttribute(String attributeName){
  String ret=null;
  if (StringUtils.isNotBlank(attributeName)) {
    Object val=getRequestContext().get(attributeName);
    if (val != null) {
      ret=val.toString();
    }
  }
  return ret;
}","public String getRequestContextAttribute(String attributeName){
  String ret=null;
  if (StringUtils.isNotBlank(attributeName)) {
    Object val=getRequestContext().get(attributeName);
    if (val != null) {
      ret=val.toString();
    }
  }
  return ret;
}",0.3091603053435114
166321,"public final Set<String> getAttributeNames(final String tagType){
  Set<String> ret=null;
  Map<String,String> attributes=getTagAttributes(tagType);
  if (attributes != null) {
    ret=attributes.keySet();
  }
  return ret;
}","public Set<String> getAttributeNames(final String tagType){
  Set<String> ret=null;
  Map<String,String> attributes=getTagAttributes(tagType);
  if (attributes != null) {
    ret=attributes.keySet();
  }
  return ret;
}",0.9864864864864864
166322,"public final boolean getResult(){
  return result;
}","public boolean getResult(){
  return result;
}",0.9387755102040816
166323,"public final String getRequestData(){
  return accessRequest.getRequestData();
}","public String getRequestData(){
  return accessRequest.getRequestData();
}",0.961038961038961
166324,"public final Map<String,Object> getRequestContext(){
  return accessRequest.getContext();
}","public Map<String,Object> getRequestContext(){
  return accessRequest.getContext();
}",0.9659090909090908
166325,"public final Set<String> getUserGroups(){
  return accessRequest.getUserGroups();
}","public Set<String> getUserGroups(){
  return accessRequest.getUserGroups();
}",0.9625
166326,"public final String getSessionId(){
  return accessRequest.getSessionId();
}","public String getSessionId(){
  return accessRequest.getSessionId();
}",0.958904109589041
166327,"public final boolean isAccessTypeDelegatedAdmin(){
  return accessRequest.isAccessTypeDelegatedAdmin();
}","public boolean isAccessTypeDelegatedAdmin(){
  return accessRequest.isAccessTypeDelegatedAdmin();
}",0.9705882352941176
166328,"public void getAllUsers(LdapContext ldapContext) throws Throwable {
  int noOfUsers=0;
  Attribute userNameAttr=null;
  Attribute groupMemberAttr;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  Set<String> userSearchAttributes=new HashSet<>();
  if (userNameAttribute != null) {
    userSearchAttributes.add(userNameAttribute);
  }
  if (userGroupMemberName != null) {
    userSearchAttributes.add(userGroupMemberName);
  }
  if (userSearchAttributes.size() > 0) {
    userSearchControls.setReturningAttributes(userSearchAttributes.toArray(new String[userSearchAttributes.size()]));
  }
 else {
    userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  }
  String extendedUserSearchFilter=""String_Node_Str"" + userObjClassName + ""String_Node_Str"";
  if (userSearchFilter != null && !userSearchFilter.trim().isEmpty()) {
    String customFilter=userSearchFilter.trim();
    if (!customFilter.startsWith(""String_Node_Str"")) {
      customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
    }
    extendedUserSearchFilter=""String_Node_Str"" + extendedUserSearchFilter + customFilter+ ""String_Node_Str"";
  }
  byte[] cookie=null;
  logFile.println();
  logFile.println(""String_Node_Str"");
  try {
    do {
      userSearchResultEnum=ldapContext.search(userSearchBase,extendedUserSearchFilter,userSearchControls);
      while (userSearchResultEnum.hasMore()) {
        final SearchResult userEntry=userSearchResultEnum.next();
        if (userEntry == null) {
          logFile.println(""String_Node_Str"");
          continue;
        }
        Attributes attributes=userEntry.getAttributes();
        if (attributes == null) {
          logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
          continue;
        }
        if (userNameAttribute == null || userNameAttribute.isEmpty()) {
          for (int i=0; i < userNameAttrValues.length; i++) {
            userNameAttr=attributes.get(userNameAttrValues[i]);
            if (userNameAttr != null) {
              userNameAttribute=userNameAttrValues[i];
              break;
            }
          }
          if (userNameAttr == null) {
            logFile.print(""String_Node_Str"");
            for (int i=0; i < userNameAttrValues.length; i++) {
              logFile.print(userNameAttrValues[i] + ""String_Node_Str"");
            }
            logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
            continue;
          }
        }
 else {
          userNameAttr=attributes.get(userNameAttribute);
          if (userNameAttr == null) {
            logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
            continue;
          }
        }
        String userName=userNameAttr.get().toString();
        if (userName == null || userName.trim().isEmpty()) {
          logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
          continue;
        }
        userName=userName.toLowerCase();
        Set<String> groups=new HashSet<>();
        groupMemberAttr=attributes.get(userGroupMemberName);
        if (groupMemberAttr != null) {
          NamingEnumeration<?> groupEnum=groupMemberAttr.getAll();
          while (groupEnum.hasMore()) {
            String groupRes=groupEnum.next().toString();
            groups.add(groupRes);
            if (groupName == null || groupName.isEmpty()) {
              groupName=groupRes;
            }
          }
        }
        if (noOfUsers < 20) {
          logFile.println(""String_Node_Str"" + userName + ""String_Node_Str""+ groups);
        }
        noOfUsers++;
      }
      Control[] controls=ldapContext.getResponseControls();
      if (controls != null) {
        for (int i=0; i < controls.length; i++) {
          if (controls[i] instanceof PagedResultsResponseControl) {
            PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
            cookie=prrc.getCookie();
          }
        }
      }
 else {
        logFile.println(""String_Node_Str"");
      }
      if (config.isPagedResultsEnabled()) {
        ldapContext.setRequestControls(new Control[]{new PagedResultsControl(config.getPagedResultsSize(),cookie,Control.CRITICAL)});
      }
    }
 while (cookie != null);
    logFile.println(""String_Node_Str"" + noOfUsers);
  }
 catch (  NamingException ne) {
    String msg=""String_Node_Str"";
    if ((config.getUserNameAttribute() != null && !config.getUserNameAttribute().isEmpty()) || (config.getUserObjectClass() != null && !config.getUserObjectClass().isEmpty()) || (config.getGroupNameAttribute() != null && !config.getGroupNameAttribute().isEmpty())|| (config.getUserSearchBase() != null && !config.getUserSearchBase().isEmpty())|| (config.getUserSearchFilter() != null && !config.getUserSearchFilter().isEmpty())) {
      throw new Exception(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      throw new Exception(msg + ne);
    }
  }
 finally {
    if (userSearchResultEnum != null) {
      userSearchResultEnum.close();
    }
  }
}","public void getAllUsers(LdapContext ldapContext) throws Throwable {
  int noOfUsers=0;
  Attribute userNameAttr=null;
  Attribute groupMemberAttr=null;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  Set<String> userSearchAttributes=new HashSet<>();
  if (userNameAttribute != null) {
    userSearchAttributes.add(userNameAttribute);
  }
  if (userGroupMemberName != null) {
    userSearchAttributes.add(userGroupMemberName);
  }
  if (userSearchAttributes.size() > 0) {
    userSearchControls.setReturningAttributes(userSearchAttributes.toArray(new String[userSearchAttributes.size()]));
  }
 else {
    userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  }
  String extendedUserSearchFilter=""String_Node_Str"" + userObjClassName + ""String_Node_Str"";
  if (userSearchFilter != null && !userSearchFilter.trim().isEmpty()) {
    String customFilter=userSearchFilter.trim();
    if (!customFilter.startsWith(""String_Node_Str"")) {
      customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
    }
    extendedUserSearchFilter=""String_Node_Str"" + extendedUserSearchFilter + customFilter+ ""String_Node_Str"";
  }
  byte[] cookie=null;
  logFile.println();
  logFile.println(""String_Node_Str"");
  try {
    do {
      userSearchResultEnum=ldapContext.search(userSearchBase,extendedUserSearchFilter,userSearchControls);
      while (userSearchResultEnum.hasMore()) {
        final SearchResult userEntry=userSearchResultEnum.next();
        if (userEntry == null) {
          logFile.println(""String_Node_Str"");
          continue;
        }
        Attributes attributes=userEntry.getAttributes();
        if (attributes == null) {
          logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
          continue;
        }
        if (userNameAttribute == null || userNameAttribute.isEmpty()) {
          for (int i=0; i < userNameAttrValues.length; i++) {
            userNameAttr=attributes.get(userNameAttrValues[i]);
            if (userNameAttr != null) {
              userNameAttribute=userNameAttrValues[i];
              break;
            }
          }
          if (userNameAttr == null) {
            logFile.print(""String_Node_Str"");
            for (int i=0; i < userNameAttrValues.length; i++) {
              logFile.print(userNameAttrValues[i] + ""String_Node_Str"");
            }
            logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
            continue;
          }
        }
 else {
          userNameAttr=attributes.get(userNameAttribute);
          if (userNameAttr == null) {
            logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
            continue;
          }
        }
        String userName=userNameAttr.get().toString();
        if (userName == null || userName.trim().isEmpty()) {
          logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
          continue;
        }
        userName=userName.toLowerCase();
        Set<String> groups=new HashSet<>();
        groupMemberAttr=attributes.get(userGroupMemberName);
        if (groupMemberAttr != null) {
          NamingEnumeration<?> groupEnum=groupMemberAttr.getAll();
          while (groupEnum.hasMore()) {
            String groupRes=groupEnum.next().toString();
            groups.add(groupRes);
            if (groupName == null || groupName.isEmpty()) {
              groupName=groupRes;
            }
          }
        }
        if (noOfUsers < 20) {
          logFile.println(""String_Node_Str"" + userName + ""String_Node_Str""+ groups);
        }
        noOfUsers++;
      }
      Control[] controls=ldapContext.getResponseControls();
      if (controls != null) {
        for (int i=0; i < controls.length; i++) {
          if (controls[i] instanceof PagedResultsResponseControl) {
            PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
            cookie=prrc.getCookie();
          }
        }
      }
 else {
        logFile.println(""String_Node_Str"");
      }
      if (config.isPagedResultsEnabled()) {
        ldapContext.setRequestControls(new Control[]{new PagedResultsControl(config.getPagedResultsSize(),cookie,Control.CRITICAL)});
      }
    }
 while (cookie != null);
    logFile.println(""String_Node_Str"" + noOfUsers);
  }
 catch (  NamingException ne) {
    String msg=""String_Node_Str"";
    if ((config.getUserNameAttribute() != null && !config.getUserNameAttribute().isEmpty()) || (config.getUserObjectClass() != null && !config.getUserObjectClass().isEmpty()) || (config.getGroupNameAttribute() != null && !config.getGroupNameAttribute().isEmpty())|| (config.getUserSearchBase() != null && !config.getUserSearchBase().isEmpty())|| (config.getUserSearchFilter() != null && !config.getUserSearchFilter().isEmpty())) {
      throw new Exception(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      throw new Exception(msg + ne);
    }
  }
 finally {
    if (userSearchResultEnum != null) {
      userSearchResultEnum.close();
    }
  }
}",0.9995291458706091
166329,"private void findAdvUserProperties(LdapContext ldapContext,boolean isOutputNeeded) throws Throwable {
  int noOfUsers;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  if (userNameAttribute != null && !userNameAttribute.isEmpty()) {
    Set<String> userSearchAttributes=new HashSet<>();
    userSearchAttributes.add(userNameAttribute);
    userSearchAttributes.add(userGroupMemberName);
    userSearchAttributes.add(""String_Node_Str"");
    userSearchControls.setReturningAttributes(userSearchAttributes.toArray(new String[userSearchAttributes.size()]));
  }
 else {
    userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  }
  String extendedUserSearchFilter=""String_Node_Str"" + userObjClassName + ""String_Node_Str"";
  try {
    HashMap<String,Integer> ouOccurences=new HashMap<>();
    userSearchResultEnum=ldapContext.search(searchBase,extendedUserSearchFilter,userSearchControls);
    noOfUsers=0;
    while (userSearchResultEnum.hasMore()) {
      if (noOfUsers >= 20) {
        break;
      }
      final SearchResult userEntry=userSearchResultEnum.next();
      if (userEntry == null) {
        logFile.println(""String_Node_Str"");
        continue;
      }
      Attributes attributes=userEntry.getAttributes();
      if (attributes == null) {
        logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
        continue;
      }
      String dnValue;
      Attribute dnAttr=attributes.get(""String_Node_Str"");
      if (dnAttr != null) {
        dnValue=dnAttr.get().toString();
        String ouStr=""String_Node_Str"";
        int indexOfOU=dnValue.indexOf(ouStr);
        if (indexOfOU > 0) {
          dnValue=dnValue.substring(indexOfOU);
        }
 else {
          dnValue=dnValue.substring(dnValue.indexOf(""String_Node_Str"") + 1);
        }
      }
 else {
        dnValue=userEntry.getNameInNamespace();
        dnValue=dnValue.substring(dnValue.indexOf(""String_Node_Str"") + 1);
      }
      Integer ouOccrs=ouOccurences.get(dnValue);
      if (ouOccrs == null) {
        ouOccrs=Integer.valueOf(0);
      }
      int val=ouOccrs.intValue();
      ouOccrs=Integer.valueOf(++val);
      ouOccurences.put(dnValue,ouOccrs);
      noOfUsers++;
    }
    if (!ouOccurences.isEmpty()) {
      Set<String> keys=ouOccurences.keySet();
      int maxOUOccr=0;
      for (      String key : keys) {
        int ouOccurVal=ouOccurences.get(key).intValue();
        logFile.println(""String_Node_Str"" + key + ""String_Node_Str""+ ouOccurVal);
        if (ouOccurVal > maxOUOccr) {
          maxOUOccr=ouOccurVal;
          userSearchBase=key;
        }
      }
    }
    userSearchFilter=userNameAttribute + ""String_Node_Str"";
    if (isOutputNeeded) {
      installProps.println(""String_Node_Str"" + userSearchBase);
      installProps.println(""String_Node_Str"" + userSearchFilter);
      ambariProps.println(""String_Node_Str"" + userSearchBase);
      ambariProps.println(""String_Node_Str"" + userSearchFilter);
    }
  }
 catch (  NamingException ne) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if ((config.getUserNameAttribute() != null && !config.getUserNameAttribute().isEmpty()) || (config.getUserObjectClass() != null && !config.getUserObjectClass().isEmpty()) || (config.getGroupNameAttribute() != null && !config.getGroupNameAttribute().isEmpty())) {
      throw new Exception(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      throw new Exception(msg + ne);
    }
  }
 finally {
    if (userSearchResultEnum != null) {
      userSearchResultEnum.close();
    }
  }
}","private void findAdvUserProperties(LdapContext ldapContext,boolean isOutputNeeded) throws Throwable {
  int noOfUsers;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  if (userNameAttribute != null && !userNameAttribute.isEmpty()) {
    Set<String> userSearchAttributes=new HashSet<>();
    userSearchAttributes.add(userNameAttribute);
    userSearchAttributes.add(userGroupMemberName);
    userSearchAttributes.add(""String_Node_Str"");
    userSearchControls.setReturningAttributes(userSearchAttributes.toArray(new String[userSearchAttributes.size()]));
  }
 else {
    userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  }
  String extendedUserSearchFilter=""String_Node_Str"" + userObjClassName + ""String_Node_Str"";
  try {
    HashMap<String,Integer> ouOccurences=new HashMap<>();
    if (userSearchBase == null || userSearchBase.isEmpty()) {
      userSearchResultEnum=ldapContext.search(searchBase,extendedUserSearchFilter,userSearchControls);
    }
 else {
      userSearchResultEnum=ldapContext.search(userSearchBase,extendedUserSearchFilter,userSearchControls);
    }
    noOfUsers=0;
    while (userSearchResultEnum.hasMore()) {
      if (noOfUsers >= 20) {
        break;
      }
      final SearchResult userEntry=userSearchResultEnum.next();
      if (userEntry == null) {
        logFile.println(""String_Node_Str"");
        continue;
      }
      Attributes attributes=userEntry.getAttributes();
      if (attributes == null) {
        logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
        continue;
      }
      String dnValue;
      Attribute dnAttr=attributes.get(""String_Node_Str"");
      if (dnAttr != null) {
        dnValue=dnAttr.get().toString();
        String ouStr=""String_Node_Str"";
        int indexOfOU=dnValue.indexOf(ouStr);
        if (indexOfOU > 0) {
          dnValue=dnValue.substring(indexOfOU);
        }
 else {
          dnValue=dnValue.substring(dnValue.indexOf(""String_Node_Str"") + 1);
        }
      }
 else {
        dnValue=userEntry.getNameInNamespace();
        dnValue=dnValue.substring(dnValue.indexOf(""String_Node_Str"") + 1);
      }
      Integer ouOccrs=ouOccurences.get(dnValue);
      if (ouOccrs == null) {
        ouOccrs=Integer.valueOf(0);
      }
      int val=ouOccrs.intValue();
      ouOccrs=Integer.valueOf(++val);
      ouOccurences.put(dnValue,ouOccrs);
      noOfUsers++;
    }
    if (!ouOccurences.isEmpty()) {
      Set<String> keys=ouOccurences.keySet();
      int maxOUOccr=0;
      for (      String key : keys) {
        int ouOccurVal=ouOccurences.get(key).intValue();
        logFile.println(""String_Node_Str"" + key + ""String_Node_Str""+ ouOccurVal);
        if (ouOccurVal > maxOUOccr) {
          maxOUOccr=ouOccurVal;
          userSearchBase=key;
        }
      }
    }
    if (userSearchFilter == null || userSearchFilter.isEmpty()) {
      userSearchFilter=userNameAttribute + ""String_Node_Str"";
    }
    if (isOutputNeeded) {
      installProps.println(""String_Node_Str"" + userSearchBase);
      installProps.println(""String_Node_Str"" + userSearchFilter);
      ambariProps.println(""String_Node_Str"" + userSearchBase);
      ambariProps.println(""String_Node_Str"" + userSearchFilter);
    }
  }
 catch (  NamingException ne) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    if ((config.getUserNameAttribute() != null && !config.getUserNameAttribute().isEmpty()) || (config.getUserObjectClass() != null && !config.getUserObjectClass().isEmpty()) || (config.getGroupNameAttribute() != null && !config.getGroupNameAttribute().isEmpty())) {
      throw new Exception(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      throw new Exception(msg + ne);
    }
  }
 finally {
    if (userSearchResultEnum != null) {
      userSearchResultEnum.close();
    }
  }
}",0.8203739522888459
166330,"private void findAdvGroupProperties(LdapContext ldapContext) throws Throwable {
  int noOfGroups=0;
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  SearchControls groupSearchControls=new SearchControls();
  groupSearchControls.setSearchScope(config.getGroupSearchScope());
  Set<String> groupSearchAttributes=new HashSet<>();
  groupSearchAttributes.add(groupNameAttrName);
  groupSearchAttributes.add(groupMemberName);
  groupSearchAttributes.add(""String_Node_Str"");
  groupSearchControls.setReturningAttributes(groupSearchAttributes.toArray(new String[groupSearchAttributes.size()]));
  String extendedGroupSearchFilter=""String_Node_Str"" + groupObjClassName + ""String_Node_Str"";
  try {
    HashMap<String,Integer> ouOccurences=new HashMap<>();
    groupSearchResultEnum=ldapContext.search(searchBase,extendedGroupSearchFilter,groupSearchControls);
    while (groupSearchResultEnum.hasMore()) {
      if (noOfGroups >= 20) {
        break;
      }
      final SearchResult groupEntry=groupSearchResultEnum.next();
      if (groupEntry == null) {
        continue;
      }
      Attributes groupAttributes=groupEntry.getAttributes();
      if (groupAttributes == null) {
        logFile.println(""String_Node_Str"" + groupEntry.getNameInNamespace());
        continue;
      }
      String dnValue;
      Attribute dnAttr=groupAttributes.get(""String_Node_Str"");
      if (dnAttr != null) {
        dnValue=dnAttr.get().toString();
        String ouStr=""String_Node_Str"";
        int indexOfOU=dnValue.indexOf(ouStr);
        if (indexOfOU > 0) {
          dnValue=dnValue.substring(indexOfOU);
        }
 else {
          dnValue=dnValue.substring(dnValue.indexOf(""String_Node_Str"") + 1);
        }
      }
 else {
        dnValue=groupEntry.getNameInNamespace();
        dnValue=dnValue.substring(dnValue.indexOf(""String_Node_Str"") + 1);
      }
      Integer ouOccrs=ouOccurences.get(dnValue);
      if (ouOccrs == null) {
        ouOccrs=Integer.valueOf(0);
      }
      int val=ouOccrs.intValue();
      ouOccrs=Integer.valueOf(++val);
      ouOccurences.put(dnValue,ouOccrs);
      noOfGroups++;
    }
    if (!ouOccurences.isEmpty()) {
      Set<String> keys=ouOccurences.keySet();
      int maxOUOccr=0;
      for (      String key : keys) {
        int ouOccurVal=ouOccurences.get(key).intValue();
        logFile.println(""String_Node_Str"" + key + ""String_Node_Str""+ ouOccurVal);
        if (ouOccurVal > maxOUOccr) {
          maxOUOccr=ouOccurVal;
          groupSearchBase=key;
        }
      }
    }
    groupSearchFilter=groupNameAttrName + ""String_Node_Str"";
    installProps.println(""String_Node_Str"" + groupSearchBase);
    installProps.println(""String_Node_Str"" + groupSearchFilter);
    ambariProps.println(""String_Node_Str"" + groupSearchBase);
    ambariProps.println(""String_Node_Str"" + groupSearchFilter);
  }
  finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
  }
}","private void findAdvGroupProperties(LdapContext ldapContext) throws Throwable {
  int noOfGroups=0;
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  SearchControls groupSearchControls=new SearchControls();
  groupSearchControls.setSearchScope(config.getGroupSearchScope());
  Set<String> groupSearchAttributes=new HashSet<>();
  groupSearchAttributes.add(groupNameAttrName);
  groupSearchAttributes.add(groupMemberName);
  groupSearchAttributes.add(""String_Node_Str"");
  groupSearchControls.setReturningAttributes(groupSearchAttributes.toArray(new String[groupSearchAttributes.size()]));
  String extendedGroupSearchFilter=""String_Node_Str"" + groupObjClassName + ""String_Node_Str"";
  try {
    HashMap<String,Integer> ouOccurences=new HashMap<>();
    if (groupSearchBase == null || groupSearchBase.isEmpty()) {
      groupSearchResultEnum=ldapContext.search(searchBase,extendedGroupSearchFilter,groupSearchControls);
    }
 else {
      groupSearchResultEnum=ldapContext.search(groupSearchBase,extendedGroupSearchFilter,groupSearchControls);
    }
    while (groupSearchResultEnum.hasMore()) {
      if (noOfGroups >= 20) {
        break;
      }
      final SearchResult groupEntry=groupSearchResultEnum.next();
      if (groupEntry == null) {
        continue;
      }
      Attributes groupAttributes=groupEntry.getAttributes();
      if (groupAttributes == null) {
        logFile.println(""String_Node_Str"" + groupEntry.getNameInNamespace());
        continue;
      }
      String dnValue;
      Attribute dnAttr=groupAttributes.get(""String_Node_Str"");
      if (dnAttr != null) {
        dnValue=dnAttr.get().toString();
        String ouStr=""String_Node_Str"";
        int indexOfOU=dnValue.indexOf(ouStr);
        if (indexOfOU > 0) {
          dnValue=dnValue.substring(indexOfOU);
        }
 else {
          dnValue=dnValue.substring(dnValue.indexOf(""String_Node_Str"") + 1);
        }
      }
 else {
        dnValue=groupEntry.getNameInNamespace();
        dnValue=dnValue.substring(dnValue.indexOf(""String_Node_Str"") + 1);
      }
      Integer ouOccrs=ouOccurences.get(dnValue);
      if (ouOccrs == null) {
        ouOccrs=Integer.valueOf(0);
      }
      int val=ouOccrs.intValue();
      ouOccrs=Integer.valueOf(++val);
      ouOccurences.put(dnValue,ouOccrs);
      noOfGroups++;
    }
    if (!ouOccurences.isEmpty()) {
      Set<String> keys=ouOccurences.keySet();
      int maxOUOccr=0;
      for (      String key : keys) {
        int ouOccurVal=ouOccurences.get(key).intValue();
        logFile.println(""String_Node_Str"" + key + ""String_Node_Str""+ ouOccurVal);
        if (ouOccurVal > maxOUOccr) {
          maxOUOccr=ouOccurVal;
          groupSearchBase=key;
        }
      }
    }
    if (groupSearchFilter == null || groupSearchFilter.isEmpty()) {
      groupSearchFilter=groupNameAttrName + ""String_Node_Str"";
    }
    installProps.println(""String_Node_Str"" + groupSearchBase);
    installProps.println(""String_Node_Str"" + groupSearchFilter);
    ambariProps.println(""String_Node_Str"" + groupSearchBase);
    ambariProps.println(""String_Node_Str"" + groupSearchFilter);
  }
  finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
  }
}",0.9557608167233836
166331,"private void findBasicUserProperties(LdapContext ldapContext,boolean isOutputNeeded) throws Throwable {
  String bindDn=config.getLdapBindDn();
  String userSFilter=config.getUserSearchFilter();
  String userSBase=config.getUserSearchBase();
  Attribute userNameAttr=null;
  Attribute groupMemberAttr;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  int noOfUsers=0;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  try {
    if (userSBase == null || userSBase.isEmpty()) {
      if (bindDn.contains(""String_Node_Str"")) {
        userSBase=bindDn.substring(bindDn.indexOf(""String_Node_Str"") + 1);
        userSBase=""String_Node_Str"".concat(userSBase);
        userSBase=userSBase.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        userSBase=bindDn.substring(bindDn.indexOf(""String_Node_Str"") + 1);
      }
    }
    if (userSFilter == null || userSFilter.isEmpty()) {
      if (bindDn.contains(""String_Node_Str"")) {
        userSFilter=""String_Node_Str"" + bindDn;
      }
 else {
        int cnEndIndex=bindDn.indexOf(""String_Node_Str"");
        userSFilter=bindDn.substring(0,cnEndIndex);
      }
    }
    try {
      userSearchResultEnum=ldapContext.search(userSBase,userSFilter,userSearchControls);
      while (userSearchResultEnum.hasMore()) {
        if (noOfUsers >= 1) {
          break;
        }
        final SearchResult userEntry=userSearchResultEnum.next();
        if (userEntry == null) {
          logFile.println(""String_Node_Str"");
          continue;
        }
        Attributes attributes=userEntry.getAttributes();
        if (attributes == null) {
          logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
          continue;
        }
        if (userNameAttribute == null || userNameAttribute.isEmpty()) {
          for (int i=0; i < userNameAttrValues.length; i++) {
            userNameAttr=attributes.get(userNameAttrValues[i]);
            if (userNameAttr != null) {
              userNameAttribute=userNameAttrValues[i];
              break;
            }
          }
          if (userNameAttr == null) {
            logFile.print(""String_Node_Str"");
            for (int i=0; i < userNameAttrValues.length; i++) {
              logFile.print(userNameAttrValues[i] + ""String_Node_Str"");
            }
            logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
            continue;
          }
        }
 else {
          userNameAttr=attributes.get(userNameAttribute);
          if (userNameAttr == null) {
            logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
            continue;
          }
        }
        String userName=(String)userNameAttr.get();
        if (userName == null || userName.trim().isEmpty()) {
          logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
          continue;
        }
        userName=userName.toLowerCase();
        Attribute userObjClassAttr=attributes.get(""String_Node_Str"");
        NamingEnumeration<?> userObjClassEnum=userObjClassAttr.getAll();
        String userObjClass=null;
        while (userObjClassEnum.hasMore()) {
          userObjClass=userObjClassEnum.next().toString();
          if (userObjClassName == null || userObjClassName.isEmpty()) {
            if (userObjClass != null) {
              for (int i=0; i < userObjClassValues.length; i++) {
                if (userObjClass.equalsIgnoreCase(userObjClassValues[i])) {
                  userObjClassName=userObjClass;
                  break;
                }
              }
            }
 else {
              logFile.println(""String_Node_Str"" + userName);
            }
          }
        }
        if (userObjClassName == null || userObjClassName.isEmpty()) {
          userObjClassName=userObjClass;
        }
        for (int i=0; i < userGroupMemAttrValues.length; i++) {
          groupMemberAttr=attributes.get(userGroupMemAttrValues[i]);
          if (groupMemberAttr != null) {
            userGroupMemberName=userGroupMemAttrValues[i];
            groupName=groupMemberAttr.get(0).toString();
            break;
          }
        }
        noOfUsers++;
      }
    }
 catch (    NamingException ne) {
      String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      if ((config.getUserSearchBase() != null && !config.getUserSearchBase().isEmpty()) || (config.getUserSearchFilter() != null && !config.getUserSearchFilter().isEmpty())) {
        throw new Exception(msg + ""String_Node_Str"");
      }
 else {
        throw new Exception(msg + ne);
      }
    }
    if (isOutputNeeded) {
      installProps.println(""String_Node_Str"");
      installProps.println(""String_Node_Str"" + userNameAttribute);
      installProps.println(""String_Node_Str"" + userObjClassName);
      installProps.println(""String_Node_Str"" + userGroupMemberName);
      ambariProps.println(""String_Node_Str"");
      ambariProps.println(""String_Node_Str"" + userNameAttribute);
      ambariProps.println(""String_Node_Str"" + userObjClassName);
      ambariProps.println(""String_Node_Str"" + userGroupMemberName);
    }
  }
  finally {
    try {
      if (userSearchResultEnum != null) {
        userSearchResultEnum.close();
      }
    }
 catch (    NamingException ne) {
      throw new Exception(""String_Node_Str"" + ne);
    }
  }
}","private void findBasicUserProperties(LdapContext ldapContext,boolean isOutputNeeded) throws Throwable {
  String bindDn=config.getLdapBindDn();
  String userSFilter=config.getUserSearchFilter();
  String userSBase=config.getUserSearchBase();
  Attribute userNameAttr=null;
  Attribute groupMemberAttr;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  int noOfUsers=0;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  try {
    if (userSBase == null || userSBase.isEmpty()) {
      if (bindDn.contains(""String_Node_Str"")) {
        userSBase=bindDn.substring(bindDn.indexOf(""String_Node_Str"") + 1);
        userSBase=""String_Node_Str"".concat(userSBase);
        userSBase=userSBase.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        userSBase=bindDn.substring(bindDn.indexOf(""String_Node_Str"") + 1);
      }
    }
    if (userSFilter == null || userSFilter.isEmpty()) {
      if (bindDn.contains(""String_Node_Str"")) {
        userSFilter=""String_Node_Str"" + bindDn;
      }
 else {
        int cnEndIndex=bindDn.indexOf(""String_Node_Str"");
        userSFilter=bindDn.substring(0,cnEndIndex);
      }
    }
    try {
      userSearchResultEnum=ldapContext.search(userSBase,userSFilter,userSearchControls);
      while (userSearchResultEnum.hasMore()) {
        if (noOfUsers >= 5) {
          break;
        }
        final SearchResult userEntry=userSearchResultEnum.next();
        if (userEntry == null) {
          logFile.println(""String_Node_Str"");
          continue;
        }
        Attributes attributes=userEntry.getAttributes();
        if (attributes == null) {
          logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
          continue;
        }
        if (userNameAttribute == null || userNameAttribute.isEmpty()) {
          for (int i=0; i < userNameAttrValues.length; i++) {
            userNameAttr=attributes.get(userNameAttrValues[i]);
            if (userNameAttr != null) {
              userNameAttribute=userNameAttrValues[i];
              break;
            }
          }
          if (userNameAttr == null) {
            logFile.print(""String_Node_Str"");
            for (int i=0; i < userNameAttrValues.length; i++) {
              logFile.print(userNameAttrValues[i] + ""String_Node_Str"");
            }
            logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
            continue;
          }
        }
 else {
          userNameAttr=attributes.get(userNameAttribute);
          if (userNameAttr == null) {
            logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
            continue;
          }
        }
        String userName=(String)userNameAttr.get();
        if (userName == null || userName.trim().isEmpty()) {
          logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
          continue;
        }
        userName=userName.toLowerCase();
        Attribute userObjClassAttr=attributes.get(""String_Node_Str"");
        NamingEnumeration<?> userObjClassEnum=userObjClassAttr.getAll();
        String userObjClass=null;
        while (userObjClassEnum.hasMore()) {
          userObjClass=userObjClassEnum.next().toString();
          if (userObjClassName == null || userObjClassName.isEmpty()) {
            if (userObjClass != null) {
              for (int i=0; i < userObjClassValues.length; i++) {
                if (userObjClass.equalsIgnoreCase(userObjClassValues[i])) {
                  userObjClassName=userObjClass;
                  break;
                }
              }
            }
 else {
              logFile.println(""String_Node_Str"" + userName);
            }
          }
        }
        if (userObjClassName == null || userObjClassName.isEmpty()) {
          userObjClassName=userObjClass;
        }
        for (int i=0; i < userGroupMemAttrValues.length; i++) {
          groupMemberAttr=attributes.get(userGroupMemAttrValues[i]);
          if (groupMemberAttr != null) {
            userGroupMemberName=userGroupMemAttrValues[i];
            groupName=groupMemberAttr.get(0).toString();
            break;
          }
        }
        noOfUsers++;
      }
    }
 catch (    NamingException ne) {
      String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      if ((config.getUserSearchBase() != null && !config.getUserSearchBase().isEmpty()) || (config.getUserSearchFilter() != null && !config.getUserSearchFilter().isEmpty())) {
        throw new Exception(msg + ""String_Node_Str"");
      }
 else {
        throw new Exception(msg + ne);
      }
    }
    if (isOutputNeeded) {
      installProps.println(""String_Node_Str"");
      installProps.println(""String_Node_Str"" + userNameAttribute);
      installProps.println(""String_Node_Str"" + userObjClassName);
      installProps.println(""String_Node_Str"" + userGroupMemberName);
      ambariProps.println(""String_Node_Str"");
      ambariProps.println(""String_Node_Str"" + userNameAttribute);
      ambariProps.println(""String_Node_Str"" + userObjClassName);
      ambariProps.println(""String_Node_Str"" + userGroupMemberName);
    }
  }
  finally {
    try {
      if (userSearchResultEnum != null) {
        userSearchResultEnum.close();
      }
    }
 catch (    NamingException ne) {
      throw new Exception(""String_Node_Str"" + ne);
    }
  }
}",0.9998211091234348
166332,"@Test public void test_isValid_happyPath() throws Exception {
  Object[][] serviceDefInput=new Object[][]{{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"",false},{""String_Node_Str"",false},{""String_Node_Str"",true}};
  List<RangerServiceConfigDef> configDefs=_utils.createServiceConditionDefs(serviceDefInput);
  RangerServiceDef serviceDef=mock(RangerServiceDef.class);
  when(serviceDef.getConfigs()).thenReturn(configDefs);
  RangerService service=mock(RangerService.class);
  when(service.getName()).thenReturn(""String_Node_Str"");
  when(service.getType()).thenReturn(""String_Node_Str"");
  String[] configs=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Map<String,String> configMap=_utils.createMap(configs);
  when(service.getConfigs()).thenReturn(configMap);
  when(_store.getServiceByName(""String_Node_Str"")).thenReturn(null);
  when(_store.getServiceDefByName(""String_Node_Str"")).thenReturn(serviceDef);
  assertTrue(_validator.isValid(service,Action.CREATE,_failures));
  when(service.getId()).thenReturn(7L);
  RangerService existingService=mock(RangerService.class);
  when(existingService.getId()).thenReturn(new Long(7L));
  when(_store.getService(7L)).thenReturn(existingService);
  when(_store.getServiceByName(""String_Node_Str"")).thenReturn(existingService);
  assertTrue(_validator.isValid(service,Action.UPDATE,_failures));
  when(_store.getServiceByName(""String_Node_Str"")).thenReturn(null);
  assertTrue(_validator.isValid(service,Action.UPDATE,_failures));
}","@Test public void test_isValid_happyPath() throws Exception {
  Object[][] serviceDefInput=new Object[][]{{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"",false},{""String_Node_Str"",false},{""String_Node_Str"",true}};
  List<RangerServiceConfigDef> configDefs=_utils.createServiceConditionDefs(serviceDefInput);
  RangerServiceDef serviceDef=mock(RangerServiceDef.class);
  when(serviceDef.getConfigs()).thenReturn(configDefs);
  RangerService service=mock(RangerService.class);
  when(service.getName()).thenReturn(""String_Node_Str"");
  when(service.getType()).thenReturn(""String_Node_Str"");
  String[] configs=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Map<String,String> configMap=_utils.createMap(configs);
  when(service.getConfigs()).thenReturn(configMap);
  when(_store.getServiceByName(""String_Node_Str"")).thenReturn(null);
  when(_store.getServiceDefByName(""String_Node_Str"")).thenReturn(serviceDef);
  assertTrue(_validator.isValid(service,Action.CREATE,_failures));
  when(service.getId()).thenReturn(7L);
  RangerService existingService=mock(RangerService.class);
  when(existingService.getId()).thenReturn(Long.valueOf(7L));
  when(_store.getService(7L)).thenReturn(existingService);
  when(_store.getServiceByName(""String_Node_Str"")).thenReturn(existingService);
  assertTrue(_validator.isValid(service,Action.UPDATE,_failures));
  when(_store.getServiceByName(""String_Node_Str"")).thenReturn(null);
  assertTrue(_validator.isValid(service,Action.UPDATE,_failures));
}",0.9961538461538462
166333,"synchronized private PrintWriter getLogFileStream() throws Throwable {
  closeFileIfNeeded();
  if (logWriter == null) {
    Date currentTime=new Date();
    String fileName=MiscUtil.replaceTokens(logFileNameFormat,currentTime.getTime());
    String parentFolder=MiscUtil.replaceTokens(logFolder,currentTime.getTime());
    Configuration conf=createConfiguration();
    String fullPath=parentFolder + org.apache.hadoop.fs.Path.SEPARATOR + fileName;
    String defaultPath=fullPath;
    URI uri=URI.create(fullPath);
    FileSystem fileSystem=FileSystem.get(uri,conf);
    Path hdfPath=new Path(fullPath);
    logger.info(""String_Node_Str"" + fullPath + ""String_Node_Str""+ MiscUtil.getUGILoginUser());
    int i=0;
    while (fileSystem.exists(hdfPath)) {
      i++;
      int lastDot=defaultPath.lastIndexOf('.');
      String baseName=defaultPath.substring(0,lastDot);
      String extension=defaultPath.substring(lastDot);
      fullPath=baseName + ""String_Node_Str"" + i+ extension;
      hdfPath=new Path(fullPath);
      logger.info(""String_Node_Str"" + fullPath);
    }
    logger.info(""String_Node_Str"" + fullPath);
    createParents(hdfPath,fileSystem);
    logger.info(""String_Node_Str"" + fullPath);
    FSDataOutputStream ostream=fileSystem.create(hdfPath);
    logWriter=new PrintWriter(ostream);
    fileCreateTime=new Date();
    currentFileName=fullPath;
  }
  return logWriter;
}","synchronized private PrintWriter getLogFileStream() throws Throwable {
  closeFileIfNeeded();
  if (logWriter == null) {
    Date currentTime=new Date();
    String fileName=MiscUtil.replaceTokens(logFileNameFormat,currentTime.getTime());
    String parentFolder=MiscUtil.replaceTokens(logFolder,currentTime.getTime());
    Configuration conf=createConfiguration();
    String fullPath=parentFolder + Path.SEPARATOR + fileName;
    String defaultPath=fullPath;
    URI uri=URI.create(fullPath);
    FileSystem fileSystem=FileSystem.get(uri,conf);
    Path hdfPath=new Path(fullPath);
    logger.info(""String_Node_Str"" + fullPath + ""String_Node_Str""+ MiscUtil.getUGILoginUser());
    int i=0;
    while (fileSystem.exists(hdfPath)) {
      i++;
      int lastDot=defaultPath.lastIndexOf('.');
      String baseName=defaultPath.substring(0,lastDot);
      String extension=defaultPath.substring(lastDot);
      fullPath=baseName + ""String_Node_Str"" + i+ extension;
      hdfPath=new Path(fullPath);
      logger.info(""String_Node_Str"" + fullPath);
    }
    logger.info(""String_Node_Str"" + fullPath);
    createParents(hdfPath,fileSystem);
    logger.info(""String_Node_Str"" + fullPath);
    FSDataOutputStream ostream=fileSystem.create(hdfPath);
    logWriter=new PrintWriter(ostream);
    fileCreateTime=new Date();
    currentFileName=fullPath;
  }
  return logWriter;
}",0.9923940601231438
166334,"/** 
 * @param userName
 * @return
 */
static public Set<String> getGroupsForRequestUser(String userName){
  if (userName == null) {
    return null;
  }
  try {
    UserGroupInformation ugi=UserGroupInformation.createRemoteUser(userName);
    String groups[]=ugi.getGroupNames();
    if (groups != null && groups.length > 0) {
      java.util.Set<String> groupsSet=new java.util.HashSet<String>();
      for (int i=0; i < groups.length; i++) {
        groupsSet.add(groups[i]);
      }
      return groupsSet;
    }
  }
 catch (  Throwable e) {
    logErrorMessageByInterval(logger,""String_Node_Str"" + userName,e);
  }
  return null;
}","/** 
 * @param userName
 * @return
 */
static public Set<String> getGroupsForRequestUser(String userName){
  if (userName == null) {
    return null;
  }
  try {
    UserGroupInformation ugi=UserGroupInformation.createRemoteUser(userName);
    String groups[]=ugi.getGroupNames();
    if (groups != null && groups.length > 0) {
      Set<String> groupsSet=new java.util.HashSet<String>();
      for (int i=0; i < groups.length; i++) {
        groupsSet.add(groups[i]);
      }
      return groupsSet;
    }
  }
 catch (  Throwable e) {
    logErrorMessageByInterval(logger,""String_Node_Str"" + userName,e);
  }
  return null;
}",0.9920760697305864
166335,"public static UserGroupInformation createUGIFromSubject(Subject subject) throws IOException {
  logger.info(""String_Node_Str"" + (subject == null ? ""String_Node_Str"" : ""String_Node_Str""));
  UserGroupInformation ugi=null;
  if (subject != null) {
    logger.info(""String_Node_Str"" + subject.getPrincipals().size());
    java.util.Set<Principal> principals=subject.getPrincipals();
    for (    Principal principal : principals) {
      logger.info(""String_Node_Str"" + principal.getName());
    }
    try {
      UserGroupInformation.getLoginUser();
      logger.info(""String_Node_Str"" + UserGroupInformation.getLoginUser());
    }
 catch (    Throwable t) {
      logger.error(t);
    }
    ugi=UserGroupInformation.getUGIFromSubject(subject);
    logger.info(""String_Node_Str"" + ugi.getUserName() + ""String_Node_Str""+ ugi);
  }
 else {
    logger.info(""String_Node_Str"");
  }
  return ugi;
}","public static UserGroupInformation createUGIFromSubject(Subject subject) throws IOException {
  logger.info(""String_Node_Str"" + (subject == null ? ""String_Node_Str"" : ""String_Node_Str""));
  UserGroupInformation ugi=null;
  if (subject != null) {
    logger.info(""String_Node_Str"" + subject.getPrincipals().size());
    Set<Principal> principals=subject.getPrincipals();
    for (    Principal principal : principals) {
      logger.info(""String_Node_Str"" + principal.getName());
    }
    try {
      UserGroupInformation.getLoginUser();
      logger.info(""String_Node_Str"" + UserGroupInformation.getLoginUser());
    }
 catch (    Throwable t) {
      logger.error(t);
    }
    ugi=UserGroupInformation.getUGIFromSubject(subject);
    logger.info(""String_Node_Str"" + ugi.getUserName() + ""String_Node_Str""+ ugi);
  }
 else {
    logger.info(""String_Node_Str"");
  }
  return ugi;
}",0.9943566591422122
166336,"private void openFile(){
  mLogger.debug(""String_Node_Str"");
  closeFile();
  mNextRolloverTime=MiscUtil.getNextRolloverTime(mNextRolloverTime,(mRolloverIntervalSeconds * 1000L));
  long startTime=MiscUtil.getRolloverStartTime(mNextRolloverTime,(mRolloverIntervalSeconds * 1000L));
  mHdfsFilename=MiscUtil.replaceTokens(mDirectory + org.apache.hadoop.fs.Path.SEPARATOR + mFile,startTime);
  FSDataOutputStream ostream=null;
  FileSystem fileSystem=null;
  Path pathLogfile=null;
  Configuration conf=null;
  boolean bOverwrite=false;
  try {
    mLogger.debug(""String_Node_Str"" + mHdfsFilename);
    URI uri=URI.create(mHdfsFilename);
    conf=createConfiguration();
    pathLogfile=new Path(mHdfsFilename);
    fileSystem=FileSystem.get(uri,conf);
    try {
      if (fileSystem.exists(pathLogfile)) {
        if (mIsAppend) {
          mLogger.info(""String_Node_Str"" + mHdfsFilename);
          ostream=fileSystem.append(pathLogfile);
        }
 else {
          mHdfsFilename=getNewFilename(mHdfsFilename,fileSystem);
          pathLogfile=new Path(mHdfsFilename);
        }
      }
      if (ostream == null) {
        mLogger.info(""String_Node_Str"" + mHdfsFilename);
        createParents(pathLogfile,fileSystem);
        ostream=fileSystem.create(pathLogfile,bOverwrite);
      }
    }
 catch (    IOException excp) {
      String failedFilename=mHdfsFilename;
      mHdfsFilename=getNewFilename(mHdfsFilename,fileSystem);
      pathLogfile=new Path(mHdfsFilename);
      mLogger.info(""String_Node_Str"" + failedFilename + ""String_Node_Str""+ mHdfsFilename);
    }
    if (ostream == null) {
      mLogger.info(""String_Node_Str"" + mHdfsFilename);
      createParents(pathLogfile,fileSystem);
      ostream=fileSystem.create(pathLogfile,bOverwrite);
    }
  }
 catch (  Throwable ex) {
    mLogger.warn(""String_Node_Str"",ex);
  }
  mWriter=createWriter(ostream);
  if (mWriter != null) {
    mLogger.debug(""String_Node_Str"" + mHdfsFilename);
    mFsDataOutStream=ostream;
    mNextFlushTime=System.currentTimeMillis() + (mFlushIntervalSeconds * 1000L);
    mLastOpenFailedTime=0;
  }
 else {
    mLogger.warn(""String_Node_Str"" + mHdfsFilename);
    mHdfsFilename=null;
    mLastOpenFailedTime=System.currentTimeMillis();
  }
  mLogger.debug(""String_Node_Str"" + mHdfsFilename + ""String_Node_Str"");
}","private void openFile(){
  mLogger.debug(""String_Node_Str"");
  closeFile();
  mNextRolloverTime=MiscUtil.getNextRolloverTime(mNextRolloverTime,(mRolloverIntervalSeconds * 1000L));
  long startTime=MiscUtil.getRolloverStartTime(mNextRolloverTime,(mRolloverIntervalSeconds * 1000L));
  mHdfsFilename=MiscUtil.replaceTokens(mDirectory + Path.SEPARATOR + mFile,startTime);
  FSDataOutputStream ostream=null;
  FileSystem fileSystem=null;
  Path pathLogfile=null;
  Configuration conf=null;
  boolean bOverwrite=false;
  try {
    mLogger.debug(""String_Node_Str"" + mHdfsFilename);
    URI uri=URI.create(mHdfsFilename);
    conf=createConfiguration();
    pathLogfile=new Path(mHdfsFilename);
    fileSystem=FileSystem.get(uri,conf);
    try {
      if (fileSystem.exists(pathLogfile)) {
        if (mIsAppend) {
          mLogger.info(""String_Node_Str"" + mHdfsFilename);
          ostream=fileSystem.append(pathLogfile);
        }
 else {
          mHdfsFilename=getNewFilename(mHdfsFilename,fileSystem);
          pathLogfile=new Path(mHdfsFilename);
        }
      }
      if (ostream == null) {
        mLogger.info(""String_Node_Str"" + mHdfsFilename);
        createParents(pathLogfile,fileSystem);
        ostream=fileSystem.create(pathLogfile,bOverwrite);
      }
    }
 catch (    IOException excp) {
      String failedFilename=mHdfsFilename;
      mHdfsFilename=getNewFilename(mHdfsFilename,fileSystem);
      pathLogfile=new Path(mHdfsFilename);
      mLogger.info(""String_Node_Str"" + failedFilename + ""String_Node_Str""+ mHdfsFilename);
    }
    if (ostream == null) {
      mLogger.info(""String_Node_Str"" + mHdfsFilename);
      createParents(pathLogfile,fileSystem);
      ostream=fileSystem.create(pathLogfile,bOverwrite);
    }
  }
 catch (  Throwable ex) {
    mLogger.warn(""String_Node_Str"",ex);
  }
  mWriter=createWriter(ostream);
  if (mWriter != null) {
    mLogger.debug(""String_Node_Str"" + mHdfsFilename);
    mFsDataOutStream=ostream;
    mNextFlushTime=System.currentTimeMillis() + (mFlushIntervalSeconds * 1000L);
    mLastOpenFailedTime=0;
  }
 else {
    mLogger.warn(""String_Node_Str"" + mHdfsFilename);
    mHdfsFilename=null;
    mLastOpenFailedTime=System.currentTimeMillis();
  }
  mLogger.debug(""String_Node_Str"" + mHdfsFilename + ""String_Node_Str"");
}",0.9954178485708052
166337,"private InputStream getFileInputStream(String path) throws FileNotFoundException {
  InputStream ret=null;
  File f=new File(path);
  if (f.exists()) {
    ret=new FileInputStream(f);
  }
 else {
    ret=getClass().getResourceAsStream(path);
    if (ret == null) {
      if (!path.startsWith(""String_Node_Str"")) {
        ret=getClass().getResourceAsStream(""String_Node_Str"" + path);
      }
    }
    if (ret == null) {
      ret=ClassLoader.getSystemClassLoader().getResourceAsStream(path);
      if (ret == null) {
        if (!path.startsWith(""String_Node_Str"")) {
          ret=ClassLoader.getSystemResourceAsStream(""String_Node_Str"" + path);
        }
      }
    }
  }
  return ret;
}","private InputStream getFileInputStream(String path) throws FileNotFoundException {
  InputStream ret=null;
  File f=new File(path);
  if (f.exists()) {
    ret=new FileInputStream(f);
  }
 else {
    ret=PolicyMgrUserGroupBuilder.class.getResourceAsStream(path);
    if (ret == null) {
      if (!path.startsWith(""String_Node_Str"")) {
        ret=getClass().getResourceAsStream(""String_Node_Str"" + path);
      }
    }
    if (ret == null) {
      ret=ClassLoader.getSystemClassLoader().getResourceAsStream(path);
      if (ret == null) {
        if (!path.startsWith(""String_Node_Str"")) {
          ret=ClassLoader.getSystemResourceAsStream(""String_Node_Str"" + path);
        }
      }
    }
  }
  return ret;
}",0.9707769066286528
166338,"@Override public void onLogoutSuccess(HttpServletRequest request,HttpServletResponse response,Authentication authentication) throws IOException, ServletException {
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  String jsonStr=""String_Node_Str"";
  try {
    VXResponse vXResponse=new VXResponse();
    vXResponse.setStatusCode(HttpServletResponse.SC_OK);
    vXResponse.setMsgDesc(""String_Node_Str"");
    jsonStr=jsonUtil.writeObjectAsString(vXResponse);
    response.setStatus(HttpServletResponse.SC_OK);
    response.getWriter().write(jsonStr);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + jsonStr);
    }
  }
 catch (  IOException e) {
    logger.info(""String_Node_Str"");
  }
}","@Override public void onLogoutSuccess(HttpServletRequest request,HttpServletResponse response,Authentication authentication) throws IOException, ServletException {
  request.getServletContext().removeAttribute(request.getRequestedSessionId());
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  String jsonStr=""String_Node_Str"";
  try {
    VXResponse vXResponse=new VXResponse();
    vXResponse.setStatusCode(HttpServletResponse.SC_OK);
    vXResponse.setMsgDesc(""String_Node_Str"");
    jsonStr=jsonUtil.writeObjectAsString(vXResponse);
    response.setStatus(HttpServletResponse.SC_OK);
    response.getWriter().write(jsonStr);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + jsonStr);
    }
  }
 catch (  IOException e) {
    logger.info(""String_Node_Str"");
  }
}",0.9538638985005768
166339,"@Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException authException) throws IOException, ServletException {
  String ajaxRequestHeader=request.getHeader(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ajaxRequestHeader);
  }
  String requestURL=(request.getRequestURL() != null) ? request.getRequestURL().toString() : ""String_Node_Str"";
  String servletPath=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  String reqServletPath=configUtil.getWebAppRootURL() + ""String_Node_Str"" + servletPath;
  if (""String_Node_Str"".equals(ajaxRequestHeader)) {
    try {
      VXResponse vXResponse=new VXResponse();
      vXResponse.setStatusCode(SC_AUTHENTICATION_TIMEOUT);
      vXResponse.setMsgDesc(""String_Node_Str"");
      response.setStatus(SC_AUTHENTICATION_TIMEOUT);
      response.getWriter().write(jsonUtil.writeObjectAsString(vXResponse));
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"");
    }
    return;
  }
 else {
    try {
      VXResponse vXResponse=new VXResponse();
      vXResponse.setStatusCode(HttpServletResponse.SC_UNAUTHORIZED);
      vXResponse.setMsgDesc(""String_Node_Str"");
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      response.getWriter().write(jsonUtil.writeObjectAsString(vXResponse));
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"");
    }
  }
  if (ajaxRequestHeader != null && ajaxRequestHeader.equalsIgnoreCase(""String_Node_Str"")) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ajaxReturnCode + ""String_Node_Str""+ request.getRequestURI());
    }
    response.sendError(ajaxReturnCode,""String_Node_Str"");
  }
 else   if (!(requestURL.startsWith(reqServletPath))) {
    if (requestURL.contains(RangerSSOAuthenticationFilter.LOCAL_LOGIN_URL)) {
      if (request.getSession() != null)       request.getSession().setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    super.commence(request,response,authException);
  }
}","@Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException authException) throws IOException, ServletException {
  String ajaxRequestHeader=request.getHeader(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ajaxRequestHeader);
  }
  String requestURL=(request.getRequestURL() != null) ? request.getRequestURL().toString() : ""String_Node_Str"";
  String servletPath=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  String reqServletPath=configUtil.getWebAppRootURL() + ""String_Node_Str"" + servletPath;
  if (""String_Node_Str"".equals(ajaxRequestHeader)) {
    try {
      VXResponse vXResponse=new VXResponse();
      vXResponse.setStatusCode(SC_AUTHENTICATION_TIMEOUT);
      vXResponse.setMsgDesc(""String_Node_Str"");
      response.setStatus(SC_AUTHENTICATION_TIMEOUT);
      response.getWriter().write(jsonUtil.writeObjectAsString(vXResponse));
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"");
    }
    return;
  }
 else {
    try {
      VXResponse vXResponse=new VXResponse();
      vXResponse.setStatusCode(HttpServletResponse.SC_UNAUTHORIZED);
      vXResponse.setMsgDesc(""String_Node_Str"");
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      response.getWriter().write(jsonUtil.writeObjectAsString(vXResponse));
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"");
    }
  }
  if (ajaxRequestHeader != null && ajaxRequestHeader.equalsIgnoreCase(""String_Node_Str"")) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ajaxReturnCode + ""String_Node_Str""+ request.getRequestURI());
    }
    response.sendError(ajaxReturnCode,""String_Node_Str"");
  }
 else   if (!(requestURL.startsWith(reqServletPath))) {
    if (requestURL.contains(RangerSSOAuthenticationFilter.LOCAL_LOGIN_URL)) {
      if (request.getSession() != null)       request.getSession().setAttribute(""String_Node_Str"",""String_Node_Str"");
      request.getServletContext().setAttribute(request.getSession().getId(),""String_Node_Str"");
    }
    super.commence(request,response,authException);
  }
}",0.9779005524861878
166340,"@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  RangerSecurityContext context=RangerContextHolder.getSecurityContext();
  UserSessionBase session=context != null ? context.getUserSession() : null;
  ssoEnabled=session != null ? session.isSSOEnabled() : PropertiesUtil.getBooleanProperty(""String_Node_Str"",false);
  String userAgent=((HttpServletRequest)servletRequest).getHeader(""String_Node_Str"");
  if (((HttpServletRequest)servletRequest).getSession() != null) {
    if (((HttpServletRequest)servletRequest).getSession().getAttribute(""String_Node_Str"") != null) {
      ssoEnabled=false;
      servletRequest.setAttribute(""String_Node_Str"",false);
      filterChain.doFilter(servletRequest,servletResponse);
      return;
    }
  }
  if (ssoEnabled && !((HttpServletRequest)servletRequest).getRequestURI().contains(LOCAL_LOGIN_URL) && isWebUserAgent(userAgent)) {
    if (jwtProperties != null && !isAuthenticated()) {
      HttpServletRequest httpServletRequest=(HttpServletRequest)servletRequest;
      HttpServletResponse httpServletResponse=(HttpServletResponse)servletResponse;
      String serializedJWT=getJWTFromCookie(httpServletRequest);
      if (serializedJWT != null) {
        SignedJWT jwtToken=null;
        try {
          jwtToken=SignedJWT.parse(serializedJWT);
          boolean valid=validateToken(jwtToken);
          if (valid) {
            String userName=jwtToken.getJWTClaimsSet().getSubject();
            LOG.info(""String_Node_Str"" + userName);
            String rangerLdapDefaultRole=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
            if (userName != null && !userName.trim().isEmpty()) {
              final List<GrantedAuthority> grantedAuths=new ArrayList<>();
              grantedAuths.add(new SimpleGrantedAuthority(rangerLdapDefaultRole));
              final UserDetails principal=new User(userName,""String_Node_Str"",grantedAuths);
              final Authentication finalAuthentication=new UsernamePasswordAuthenticationToken(principal,""String_Node_Str"",grantedAuths);
              WebAuthenticationDetails webDetails=new WebAuthenticationDetails(httpServletRequest);
              ((AbstractAuthenticationToken)finalAuthentication).setDetails(webDetails);
              RangerAuthenticationProvider authenticationProvider=new RangerAuthenticationProvider();
              authenticationProvider.setSsoEnabled(ssoEnabled);
              final Authentication authentication=authenticationProvider.authenticate(finalAuthentication);
              SecurityContextHolder.getContext().setAuthentication(authentication);
            }
            filterChain.doFilter(servletRequest,httpServletResponse);
          }
 else {
            String ssourl=constructLoginURL(httpServletRequest);
            if (LOG.isDebugEnabled())             LOG.debug(""String_Node_Str"" + ssourl);
            httpServletResponse.sendRedirect(ssourl);
          }
        }
 catch (        ParseException e) {
          LOG.warn(""String_Node_Str"",e);
        }
      }
 else {
        String ssourl=constructLoginURL(httpServletRequest);
        if (LOG.isDebugEnabled())         LOG.debug(""String_Node_Str"" + ssourl);
        httpServletResponse.sendRedirect(ssourl);
      }
    }
 else {
      filterChain.doFilter(servletRequest,servletResponse);
    }
  }
 else   if (ssoEnabled && ((HttpServletRequest)servletRequest).getRequestURI().contains(LOCAL_LOGIN_URL) && isWebUserAgent(userAgent)&& isAuthenticated()) {
    String url=((HttpServletRequest)servletRequest).getRequestURI().replace(LOCAL_LOGIN_URL + ""String_Node_Str"",""String_Node_Str"");
    url=url.replace(LOCAL_LOGIN_URL,""String_Node_Str"");
    LOG.warn(""String_Node_Str"");
    ((HttpServletResponse)servletResponse).sendRedirect(url);
  }
 else {
    filterChain.doFilter(servletRequest,servletResponse);
  }
}","@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)servletRequest;
  if (httpRequest.getRequestedSessionId() != null && !httpRequest.isRequestedSessionIdValid()) {
    if (httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()) != null && httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()).toString().equals(""String_Node_Str"")) {
      ssoEnabled=false;
      httpRequest.getSession().setAttribute(""String_Node_Str"",""String_Node_Str"");
      httpRequest.getServletContext().removeAttribute(httpRequest.getRequestedSessionId());
    }
  }
  RangerSecurityContext context=RangerContextHolder.getSecurityContext();
  UserSessionBase session=context != null ? context.getUserSession() : null;
  ssoEnabled=session != null ? session.isSSOEnabled() : PropertiesUtil.getBooleanProperty(""String_Node_Str"",false);
  String userAgent=httpRequest.getHeader(""String_Node_Str"");
  if (httpRequest.getSession() != null) {
    if (httpRequest.getSession().getAttribute(""String_Node_Str"") != null) {
      ssoEnabled=false;
      servletRequest.setAttribute(""String_Node_Str"",false);
      filterChain.doFilter(servletRequest,servletResponse);
      return;
    }
  }
  if (ssoEnabled && !httpRequest.getRequestURI().contains(LOCAL_LOGIN_URL) && isWebUserAgent(userAgent)) {
    if (jwtProperties != null && !isAuthenticated()) {
      HttpServletResponse httpServletResponse=(HttpServletResponse)servletResponse;
      String serializedJWT=getJWTFromCookie(httpRequest);
      if (serializedJWT != null) {
        SignedJWT jwtToken=null;
        try {
          jwtToken=SignedJWT.parse(serializedJWT);
          boolean valid=validateToken(jwtToken);
          if (valid) {
            String userName=jwtToken.getJWTClaimsSet().getSubject();
            LOG.info(""String_Node_Str"" + userName);
            String rangerLdapDefaultRole=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
            if (userName != null && !userName.trim().isEmpty()) {
              final List<GrantedAuthority> grantedAuths=new ArrayList<>();
              grantedAuths.add(new SimpleGrantedAuthority(rangerLdapDefaultRole));
              grantedAuths.add(new SimpleGrantedAuthority(""String_Node_Str""));
              grantedAuths.add(new SimpleGrantedAuthority(""String_Node_Str""));
              final UserDetails principal=new User(userName,""String_Node_Str"",grantedAuths);
              final Authentication finalAuthentication=new UsernamePasswordAuthenticationToken(principal,""String_Node_Str"",grantedAuths);
              WebAuthenticationDetails webDetails=new WebAuthenticationDetails(httpRequest);
              ((AbstractAuthenticationToken)finalAuthentication).setDetails(webDetails);
              RangerAuthenticationProvider authenticationProvider=new RangerAuthenticationProvider();
              authenticationProvider.setSsoEnabled(ssoEnabled);
              final Authentication authentication=authenticationProvider.authenticate(finalAuthentication);
              SecurityContextHolder.getContext().setAuthentication(authentication);
            }
            filterChain.doFilter(servletRequest,httpServletResponse);
          }
 else {
            String ssourl=constructLoginURL(httpRequest);
            if (LOG.isDebugEnabled())             LOG.debug(""String_Node_Str"" + ssourl);
            httpServletResponse.sendRedirect(ssourl);
          }
        }
 catch (        ParseException e) {
          LOG.warn(""String_Node_Str"",e);
        }
      }
 else {
        String ssourl=constructLoginURL(httpRequest);
        if (LOG.isDebugEnabled())         LOG.debug(""String_Node_Str"" + ssourl);
        httpServletResponse.sendRedirect(ssourl);
      }
    }
 else {
      filterChain.doFilter(servletRequest,servletResponse);
    }
  }
 else   if (ssoEnabled && ((HttpServletRequest)servletRequest).getRequestURI().contains(LOCAL_LOGIN_URL) && isWebUserAgent(userAgent)&& isAuthenticated()) {
    String url=((HttpServletRequest)servletRequest).getRequestURI().replace(LOCAL_LOGIN_URL + ""String_Node_Str"",""String_Node_Str"");
    url=url.replace(LOCAL_LOGIN_URL,""String_Node_Str"");
    LOG.warn(""String_Node_Str"");
    ((HttpServletResponse)servletResponse).sendRedirect(url);
  }
 else {
    filterChain.doFilter(servletRequest,servletResponse);
  }
}",0.87147782665557
166341,"public static void main(String[] args) throws IOException {
  if (args.length == 0) {
    System.err.println(""String_Node_Str"");
    showUsage();
    System.exit(1);
  }
 else {
    String keyStoreFileName=args[0];
    File f=new File(keyStoreFileName);
    if (!f.exists()) {
      f.createNewFile();
    }
    String keyStoreType=(args.length == 2 ? args[1] : DEFAULT_KEYSTORE_TYPE);
    try {
      KeyStore.getInstance(keyStoreType);
    }
 catch (    KeyStoreException e) {
      System.err.println(""String_Node_Str"" + keyStoreType + ""String_Node_Str"");
      showUsage();
      System.exit(1);
    }
    new Ranger2JKSUtil().doExportKeysFromJKS(keyStoreFileName,keyStoreType);
    System.out.println(""String_Node_Str"" + keyStoreFileName);
    System.exit(0);
  }
}","public static void main(String[] args) throws IOException {
  if (args.length == 0) {
    System.err.println(""String_Node_Str"");
    showUsage();
    System.exit(1);
  }
 else {
    String keyStoreFileName=args[0];
    File f=new File(keyStoreFileName);
    if (!f.exists()) {
      boolean ret=f.createNewFile();
      if (!ret) {
        System.err.println(""String_Node_Str"" + args[0]);
      }
    }
    String keyStoreType=(args.length == 2 ? args[1] : DEFAULT_KEYSTORE_TYPE);
    try {
      KeyStore.getInstance(keyStoreType);
    }
 catch (    KeyStoreException e) {
      System.err.println(""String_Node_Str"" + keyStoreType + ""String_Node_Str"");
      showUsage();
      System.exit(1);
    }
    new Ranger2JKSUtil().doExportKeysFromJKS(keyStoreFileName,keyStoreType);
    System.out.println(""String_Node_Str"" + keyStoreFileName);
    System.exit(0);
  }
}",0.9418960244648318
166342,"@Override public void engineDeleteEntry(String alias) throws KeyStoreException {
synchronized (keyEntries) {
    dbOperationDelete(convertAlias(alias));
    keyEntries.remove(convertAlias(alias));
    deltaEntries.remove(convertAlias(alias));
  }
}","@Override public void engineDeleteEntry(String alias) throws KeyStoreException {
synchronized (keyEntries) {
    dbOperationDelete(convertAlias(alias));
    keyEntries.remove(convertAlias(alias));
  }
synchronized (deltaEntries) {
    deltaEntries.remove(convertAlias(alias));
  }
}",0.9358490566037736
166343,"public void addKeyEntry(String alias,Key key,char[] password,String cipher,int bitLength,String description,int version,String attributes) throws KeyStoreException {
synchronized (deltaEntries) {
    try {
      Class<?> c=null;
      Object o=null;
      try {
        c=Class.forName(""String_Node_Str"");
        Constructor<?> constructor=c.getDeclaredConstructor(char[].class);
        constructor.setAccessible(true);
        o=constructor.newInstance(password);
      }
 catch (      ClassNotFoundException|NoSuchMethodException|SecurityException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
        logger.error(e.getMessage());
        throw new KeyStoreException(e.getMessage());
      }
      SecretKeyEntry entry=new SecretKeyEntry();
      entry.date=new Date();
      Method m=c.getDeclaredMethod(""String_Node_Str"",Key.class);
      m.setAccessible(true);
      entry.sealedKey=(SealedObject)m.invoke(o,key);
      entry.cipher_field=cipher;
      entry.bit_length=bitLength;
      entry.description=description;
      entry.version=version;
      entry.attributes=attributes;
      deltaEntries.put(alias.toLowerCase(),entry);
      keyEntries.put(alias.toLowerCase(),entry);
    }
 catch (    Exception e) {
      logger.error(e.getMessage());
      throw new KeyStoreException(e.getMessage());
    }
  }
}","public void addKeyEntry(String alias,Key key,char[] password,String cipher,int bitLength,String description,int version,String attributes) throws KeyStoreException {
  SecretKeyEntry entry=new SecretKeyEntry();
synchronized (deltaEntries) {
    try {
      Class<?> c=null;
      Object o=null;
      try {
        c=Class.forName(""String_Node_Str"");
        Constructor<?> constructor=c.getDeclaredConstructor(char[].class);
        constructor.setAccessible(true);
        o=constructor.newInstance(password);
      }
 catch (      ClassNotFoundException|NoSuchMethodException|SecurityException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
        logger.error(e.getMessage());
        throw new KeyStoreException(e.getMessage());
      }
      entry.date=new Date();
      Method m=c.getDeclaredMethod(""String_Node_Str"",Key.class);
      m.setAccessible(true);
      entry.sealedKey=(SealedObject)m.invoke(o,key);
      entry.cipher_field=cipher;
      entry.bit_length=bitLength;
      entry.description=description;
      entry.version=version;
      entry.attributes=attributes;
      deltaEntries.put(alias.toLowerCase(),entry);
    }
 catch (    Exception e) {
      logger.error(e.getMessage());
      throw new KeyStoreException(e.getMessage());
    }
  }
synchronized (keyEntries) {
    try {
      keyEntries.put(alias.toLowerCase(),entry);
    }
 catch (    Exception e) {
      logger.error(e.getMessage());
      throw new KeyStoreException(e.getMessage());
    }
  }
}",0.9088416723783412
166344,"public void createTrxLog(List<XXTrxLog> trxLogList){
  if (trxLogList == null) {
    return;
  }
  UserSessionBase usb=ContextUtil.getCurrentUserSession();
  Long authSessionId=null;
  if (usb != null) {
    authSessionId=ContextUtil.getCurrentUserSession().getSessionId();
  }
  Long trxId=guidUtil.genLong();
  for (  XXTrxLog xTrxLog : trxLogList) {
    if (xTrxLog != null) {
      if (""String_Node_Str"".equalsIgnoreCase(xTrxLog.getAttributeName().trim())) {
        if (xTrxLog.getPreviousValue() != null && !xTrxLog.getPreviousValue().trim().isEmpty() && !""String_Node_Str"".equalsIgnoreCase(xTrxLog.getPreviousValue().trim())) {
          xTrxLog.setPreviousValue(AppConstants.Masked_String);
        }
        if (xTrxLog.getNewValue() != null && !xTrxLog.getNewValue().trim().isEmpty() && !""String_Node_Str"".equalsIgnoreCase(xTrxLog.getNewValue().trim())) {
          xTrxLog.setNewValue(AppConstants.Masked_String);
        }
      }
      xTrxLog.setTransactionId(trxId.toString());
      if (authSessionId != null) {
        xTrxLog.setSessionId(""String_Node_Str"" + authSessionId);
      }
      xTrxLog.setSessionType(""String_Node_Str"");
      xTrxLog.setRequestId(trxId.toString());
      daoManager.getXXTrxLog().create(xTrxLog);
    }
  }
}","public void createTrxLog(List<XXTrxLog> trxLogList){
  if (trxLogList == null) {
    return;
  }
  UserSessionBase usb=ContextUtil.getCurrentUserSession();
  Long authSessionId=null;
  if (usb != null) {
    authSessionId=ContextUtil.getCurrentUserSession().getSessionId();
  }
  Long trxId=guidUtil.genLong();
  for (  XXTrxLog xTrxLog : trxLogList) {
    if (xTrxLog != null) {
      if (""String_Node_Str"".equalsIgnoreCase(StringUtil.trim(xTrxLog.getAttributeName()))) {
        if (xTrxLog.getPreviousValue() != null && !xTrxLog.getPreviousValue().trim().isEmpty() && !""String_Node_Str"".equalsIgnoreCase(xTrxLog.getPreviousValue().trim())) {
          xTrxLog.setPreviousValue(AppConstants.Masked_String);
        }
        if (xTrxLog.getNewValue() != null && !xTrxLog.getNewValue().trim().isEmpty() && !""String_Node_Str"".equalsIgnoreCase(xTrxLog.getNewValue().trim())) {
          xTrxLog.setNewValue(AppConstants.Masked_String);
        }
      }
      xTrxLog.setTransactionId(trxId.toString());
      if (authSessionId != null) {
        xTrxLog.setSessionId(""String_Node_Str"" + authSessionId);
      }
      xTrxLog.setSessionType(""String_Node_Str"");
      xTrxLog.setRequestId(trxId.toString());
      daoManager.getXXTrxLog().create(xTrxLog);
    }
  }
}",0.9912698412698412
166345,"private boolean compareTwoPolicyName(String value,String oldValue){
  if (value == null && oldValue == null) {
    return org.apache.commons.lang.StringUtils.equals(value,oldValue);
  }
  if (value != null && oldValue != null && value.trim().isEmpty() && oldValue.trim().isEmpty()) {
    return true;
  }
  if (stringUtil.isEmpty(value) || stringUtil.isEmpty(oldValue)) {
    return false;
  }
  if (!value.equals(oldValue)) {
    return false;
  }
  return true;
}","private boolean compareTwoPolicyName(String value,String oldValue){
  return org.apache.commons.lang.StringUtils.equals(value,oldValue);
}",0.4577114427860697
166346,"public List<String> getAllRegexPatterns(String baseProperty){
  List<String> regexPatterns=new ArrayList<String>();
  if (prop != null) {
    Enumeration<?> propertyNames=prop.propertyNames();
    while (propertyNames != null && propertyNames.hasMoreElements()) {
      String propertyName=(String)propertyNames.nextElement();
      if (propertyName != null && propertyName.contains(baseProperty)) {
        regexPatterns.add(prop.getProperty(propertyName));
      }
    }
  }
  return regexPatterns;
}","public List<String> getAllRegexPatterns(String baseProperty){
  List<String> regexPatterns=new ArrayList<String>();
  if (prop != null) {
    String baseRegex=prop.getProperty(baseProperty);
    if (baseRegex == null) {
      return regexPatterns;
    }
    regexPatterns.add(baseRegex);
    int i=1;
    String nextRegex=prop.getProperty(baseProperty + ""String_Node_Str"" + i);
    ;
    while (nextRegex != null) {
      regexPatterns.add(nextRegex);
      i++;
      nextRegex=prop.getProperty(baseProperty + ""String_Node_Str"" + i);
    }
  }
  return regexPatterns;
}",0.4197761194029851
166347,"protected void populateReplacementPatterns(String baseProperty,List<String> regexPatterns){
  replacementPattern=new LinkedHashMap<String,String>();
  Pattern p=Pattern.compile(""String_Node_Str"");
  for (  String regexPattern : regexPatterns) {
    Matcher m=p.matcher(regexPattern);
    if (!m.matches()) {
      logger.warn(""String_Node_Str"" + regexPattern + ""String_Node_Str"");
    }
    m=m.reset();
    while (m.find()) {
      String matchPattern=m.group(1);
      String replacement=m.group(2);
      if (matchPattern != null && !matchPattern.isEmpty() && replacement != null) {
        replacementPattern.put(matchPattern,Matcher.quoteReplacement(replacement));
        if (logger.isDebugEnabled()) {
          logger.debug(baseProperty + ""String_Node_Str"" + matchPattern+ ""String_Node_Str""+ replacement);
        }
      }
    }
  }
}","protected void populateReplacementPatterns(String baseProperty,List<String> regexPatterns){
  replacementPattern=new LinkedHashMap<String,String>();
  Pattern p=Pattern.compile(""String_Node_Str"");
  for (  String regexPattern : regexPatterns) {
    Matcher m=p.matcher(regexPattern);
    if (!m.matches()) {
      logger.warn(""String_Node_Str"" + regexPattern + ""String_Node_Str"");
    }
    m=m.reset();
    while (m.find()) {
      String matchPattern=m.group(1);
      String replacement=m.group(2);
      if (matchPattern != null && !matchPattern.isEmpty() && replacement != null) {
        replacementPattern.put(matchPattern,replacement);
        if (logger.isDebugEnabled()) {
          logger.debug(baseProperty + ""String_Node_Str"" + matchPattern+ ""String_Node_Str""+ replacement);
        }
      }
    }
  }
}",0.9710843373493976
166348,"@Test public void testTransform1(){
  userRegexPatterns.add(""String_Node_Str"");
  userRegexPatterns.add(""String_Node_Str"");
  userNameRegEx.populateReplacementPatterns(userNameBaseProperty,userRegexPatterns);
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupNameRegEx.populateReplacementPatterns(userNameBaseProperty,groupRegexPatterns);
  assertEquals(""String_Node_Str"",userNameRegEx.transform(""String_Node_Str""));
  assertEquals(""String_Node_Str"",groupNameRegEx.transform(""String_Node_Str""));
}","@Test public void testTransform1(){
  userRegexPatterns.add(""String_Node_Str"");
  userRegexPatterns.add(""String_Node_Str"");
  userNameRegEx.populateReplacementPatterns(userNameBaseProperty,userRegexPatterns);
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupRegexPatterns.add(""String_Node_Str"");
  groupNameRegEx.populateReplacementPatterns(userNameBaseProperty,groupRegexPatterns);
  assertEquals(""String_Node_Str"",userNameRegEx.transform(""String_Node_Str""));
  assertEquals(""String_Node_Str"",groupNameRegEx.transform(""String_Node_Str""));
}",0.9602824360105914
166349,"public static RangerPluginClassLoader getInstance(String pluginType,Class<?> pluginClass) throws Exception {
  RangerPluginClassLoader ret=me;
  if (ret == null) {
synchronized (RangerPluginClassLoader.class) {
      ret=me;
      if (ret == null) {
        me=ret=new RangerPluginClassLoader(pluginType,pluginClass);
      }
    }
  }
  return ret;
}","public static RangerPluginClassLoader getInstance(final String pluginType,final Class<?> pluginClass) throws Exception {
  RangerPluginClassLoader ret=me;
  if (ret == null) {
synchronized (RangerPluginClassLoader.class) {
      ret=me;
      if (ret == null) {
        me=ret=AccessController.doPrivileged(new PrivilegedExceptionAction<RangerPluginClassLoader>(){
          public RangerPluginClassLoader run() throws Exception {
            return new RangerPluginClassLoader(pluginType,pluginClass);
          }
        }
);
      }
    }
  }
  return ret;
}",0.7697368421052632
166350,"public RangerPluginClassLoader(String pluginType,Class<?> pluginClass) throws Exception {
  super(RangerPluginClassLoaderUtil.getInstance().getPluginFilesForServiceTypeAndPluginclass(pluginType,pluginClass),null);
  componentClassLoader=new MyClassLoader(Thread.currentThread().getContextClassLoader());
}","public RangerPluginClassLoader(String pluginType,Class<?> pluginClass) throws Exception {
  super(RangerPluginClassLoaderUtil.getInstance().getPluginFilesForServiceTypeAndPluginclass(pluginType,pluginClass),null);
  componentClassLoader=AccessController.doPrivileged(new PrivilegedAction<MyClassLoader>(){
    public MyClassLoader run(){
      return new MyClassLoader(Thread.currentThread().getContextClassLoader());
    }
  }
);
}",0.8276797829036635
166351,"public static KnoxClient getKnoxClient(String serviceName,Map<String,String> configs){
  KnoxClient knoxClient=null;
  LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ configs);
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (configs != null && !configs.isEmpty()) {
    String knoxUrl=configs.get(""String_Node_Str"");
    String knoxAdminUser=configs.get(""String_Node_Str"");
    String knoxAdminPassword=configs.get(""String_Node_Str"");
    knoxClient=new KnoxClient(knoxUrl,knoxAdminUser,knoxAdminPassword);
  }
 else {
    String msgDesc=""String_Node_Str"";
    LOG.error(msgDesc);
    HadoopException hdpException=new HadoopException(msgDesc);
    hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
    throw hdpException;
  }
  return knoxClient;
}","public static KnoxClient getKnoxClient(String serviceName,Map<String,String> configs){
  KnoxClient knoxClient=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName);
    LOG.debug(""String_Node_Str"" + BaseClient.getMaskedConfigMap(configs));
  }
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (configs != null && !configs.isEmpty()) {
    String knoxUrl=configs.get(""String_Node_Str"");
    String knoxAdminUser=configs.get(""String_Node_Str"");
    String knoxAdminPassword=configs.get(""String_Node_Str"");
    knoxClient=new KnoxClient(knoxUrl,knoxAdminUser,knoxAdminPassword);
  }
 else {
    String msgDesc=""String_Node_Str"";
    LOG.error(msgDesc);
    HadoopException hdpException=new HadoopException(msgDesc);
    hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
    throw hdpException;
  }
  return knoxClient;
}",0.4025374855824682
166352,"public static KMSClient getKmsClient(String serviceName,Map<String,String> configs){
  KMSClient kmsClient=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ configs);
  }
  String errMsg=errMessage;
  if (configs == null || configs.isEmpty()) {
    String msgDesc=""String_Node_Str"";
    LOG.error(msgDesc);
    HadoopException hdpException=new HadoopException(msgDesc);
    hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
    throw hdpException;
  }
 else {
    String kmsUrl=configs.get(""String_Node_Str"");
    String kmsUserName=configs.get(""String_Node_Str"");
    String kmsPassWord=configs.get(""String_Node_Str"");
    kmsClient=new KMSClient(kmsUrl,kmsUserName,kmsPassWord);
  }
  return kmsClient;
}","public static KMSClient getKmsClient(String serviceName,Map<String,String> configs){
  KMSClient kmsClient=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName);
    LOG.debug(""String_Node_Str"" + BaseClient.getMaskedConfigMap(configs));
  }
  String errMsg=errMessage;
  if (configs == null || configs.isEmpty()) {
    String msgDesc=""String_Node_Str"";
    LOG.error(msgDesc);
    HadoopException hdpException=new HadoopException(msgDesc);
    hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
    throw hdpException;
  }
 else {
    String kmsUrl=configs.get(""String_Node_Str"");
    String kmsUserName=configs.get(""String_Node_Str"");
    String kmsPassWord=configs.get(""String_Node_Str"");
    kmsClient=new KMSClient(kmsUrl,kmsUserName,kmsPassWord);
  }
  return kmsClient;
}",0.791871921182266
166353,"public void createTrxLog(List<XXTrxLog> trxLogList){
  if (trxLogList == null) {
    return;
  }
  UserSessionBase usb=ContextUtil.getCurrentUserSession();
  Long authSessionId=null;
  if (usb != null) {
    authSessionId=ContextUtil.getCurrentUserSession().getSessionId();
  }
  Long trxId=guidUtil.genLong();
  for (  XXTrxLog xTrxLog : trxLogList) {
    xTrxLog.setTransactionId(trxId.toString());
    if (authSessionId != null) {
      xTrxLog.setSessionId(""String_Node_Str"" + authSessionId);
    }
    xTrxLog.setSessionType(""String_Node_Str"");
    xTrxLog.setRequestId(trxId.toString());
    daoManager.getXXTrxLog().create(xTrxLog);
  }
}","public void createTrxLog(List<XXTrxLog> trxLogList){
  if (trxLogList == null) {
    return;
  }
  UserSessionBase usb=ContextUtil.getCurrentUserSession();
  Long authSessionId=null;
  if (usb != null) {
    authSessionId=ContextUtil.getCurrentUserSession().getSessionId();
  }
  Long trxId=guidUtil.genLong();
  for (  XXTrxLog xTrxLog : trxLogList) {
    if (xTrxLog != null) {
      if (""String_Node_Str"".equalsIgnoreCase(xTrxLog.getAttributeName().trim())) {
        if (xTrxLog.getPreviousValue() != null && !xTrxLog.getPreviousValue().trim().isEmpty() && !""String_Node_Str"".equalsIgnoreCase(xTrxLog.getPreviousValue().trim())) {
          xTrxLog.setPreviousValue(AppConstants.Masked_String);
        }
        if (xTrxLog.getNewValue() != null && !xTrxLog.getNewValue().trim().isEmpty() && !""String_Node_Str"".equalsIgnoreCase(xTrxLog.getNewValue().trim())) {
          xTrxLog.setNewValue(AppConstants.Masked_String);
        }
      }
      xTrxLog.setTransactionId(trxId.toString());
      if (authSessionId != null) {
        xTrxLog.setSessionId(""String_Node_Str"" + authSessionId);
      }
      xTrxLog.setSessionType(""String_Node_Str"");
      xTrxLog.setRequestId(trxId.toString());
      daoManager.getXXTrxLog().create(xTrxLog);
    }
  }
}",0.5936842105263158
166354,"public void checkAdminAccess(){
  UserSessionBase sess=ContextUtil.getCurrentUserSession();
  if (sess != null) {
    if (sess != null && sess.isUserAdmin()) {
      return;
    }
  }
  throw restErrorUtil.create403RESTException(""String_Node_Str"" + ""String_Node_Str"" + (sess != null ? sess.getXXPortalUser().getId() : ""String_Node_Str""));
}","public void checkAdminAccess(){
  UserSessionBase sess=ContextUtil.getCurrentUserSession();
  if (sess != null && sess.isUserAdmin()) {
    return;
  }
  throw restErrorUtil.create403RESTException(""String_Node_Str"" + ""String_Node_Str"" + (sess != null ? sess.getXXPortalUser().getId() : ""String_Node_Str""));
}",0.9506172839506172
166355,"/** 
 * @param userProfile
 * @return
 */
public XXPortalUser updateUser(VXPortalUser userProfile){
  XXPortalUser gjUser=daoManager.getXXPortalUser().getById(userProfile.getId());
  if (gjUser == null) {
    logger.error(""String_Node_Str"" + userProfile);
    return null;
  }
  checkAccess(gjUser);
  boolean updateUser=false;
  if (userProfile.getStatus() != gjUser.getStatus()) {
    updateUser=true;
  }
  String emailAddress=userProfile.getEmailAddress();
  if (stringUtil.isEmpty(emailAddress)) {
    String randomString=guidUtil.genGUID();
    userProfile.setEmailAddress(randomString);
    updateUser=true;
  }
 else {
    if (stringUtil.validateEmail(emailAddress)) {
      XXPortalUser checkUser=daoManager.getXXPortalUser().findByEmailAddress(emailAddress);
      if (checkUser != null) {
        String loginId=userProfile.getLoginId();
        if (loginId == null) {
          throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
        }
 else         if (!loginId.equals(checkUser.getLoginId())) {
          throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
        }
 else {
          userProfile.setEmailAddress(emailAddress);
          updateUser=true;
        }
      }
 else {
        userProfile.setEmailAddress(emailAddress);
        updateUser=true;
      }
    }
 else {
      throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
    }
  }
  if (!stringUtil.isEmpty(userProfile.getFirstName()) && !userProfile.getFirstName().equals(gjUser.getFirstName())) {
    userProfile.setFirstName(stringUtil.toCamelCaseAllWords(userProfile.getFirstName()));
    updateUser=true;
  }
  if (userProfile.getLastName() != null && !userProfile.getLastName().equals(gjUser.getLastName())) {
    userProfile.setLastName(stringUtil.toCamelCaseAllWords(userProfile.getLastName()));
    updateUser=true;
  }
  if (!stringUtil.isEmpty(userProfile.getPublicScreenName()) && !userProfile.getPublicScreenName().equals(gjUser.getPublicScreenName())) {
    userProfile.setPublicScreenName(userProfile.getFirstName() + ""String_Node_Str"" + userProfile.getLastName());
    updateUser=true;
  }
  updateRoles(userProfile.getId(),userProfile.getUserRoleList());
  if (updateUser) {
    List<XXTrxLog> trxLogList=xPortalUserService.getTransactionLog(userProfile,gjUser,""String_Node_Str"");
    userProfile.setPassword(gjUser.getPassword());
    userProfile=xPortalUserService.updateResource(userProfile);
    sessionMgr.resetUserSessionForProfiles(ContextUtil.getCurrentUserSession());
    msBizUtil.createTrxLog(trxLogList);
  }
  return gjUser;
}","/** 
 * @param userProfile
 * @return
 */
public XXPortalUser updateUser(VXPortalUser userProfile){
  XXPortalUser gjUser=daoManager.getXXPortalUser().getById(userProfile.getId());
  if (gjUser == null) {
    logger.error(""String_Node_Str"" + userProfile);
    return null;
  }
  checkAccess(gjUser);
  boolean updateUser=false;
  if (userProfile.getStatus() != gjUser.getStatus()) {
    updateUser=true;
  }
  String emailAddress=userProfile.getEmailAddress();
  if (stringUtil.isEmpty(emailAddress)) {
    String randomString=guidUtil.genGUID();
    userProfile.setEmailAddress(randomString);
    updateUser=true;
  }
 else {
    if (stringUtil.validateEmail(emailAddress)) {
      XXPortalUser checkUser=daoManager.getXXPortalUser().findByEmailAddress(emailAddress);
      if (checkUser != null) {
        String loginId=userProfile.getLoginId();
        if (loginId == null) {
          throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
        }
 else         if (!loginId.equals(checkUser.getLoginId())) {
          throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
        }
 else {
          userProfile.setEmailAddress(emailAddress);
          updateUser=true;
        }
      }
 else {
        userProfile.setEmailAddress(emailAddress);
        updateUser=true;
      }
    }
 else {
      throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
    }
  }
  if (!stringUtil.isEmpty(userProfile.getFirstName()) && !userProfile.getFirstName().equals(gjUser.getFirstName())) {
    userProfile.setFirstName(stringUtil.toCamelCaseAllWords(userProfile.getFirstName()));
    updateUser=true;
  }
  if (userProfile.getLastName() != null && !userProfile.getLastName().equals(gjUser.getLastName())) {
    userProfile.setLastName(stringUtil.toCamelCaseAllWords(userProfile.getLastName()));
    updateUser=true;
  }
  if (!stringUtil.isEmpty(userProfile.getPublicScreenName()) && !userProfile.getPublicScreenName().equals(gjUser.getPublicScreenName())) {
    userProfile.setPublicScreenName(userProfile.getFirstName() + ""String_Node_Str"" + userProfile.getLastName());
    updateUser=true;
  }
  updateRoles(userProfile.getId(),userProfile.getUserRoleList());
  if (updateUser) {
    List<XXTrxLog> trxLogList=xPortalUserService.getTransactionLog(userProfile,gjUser,""String_Node_Str"");
    userProfile.setPassword(gjUser.getPassword());
    xPortalUserService.updateResource(userProfile);
    sessionMgr.resetUserSessionForProfiles(ContextUtil.getCurrentUserSession());
    msBizUtil.createTrxLog(trxLogList);
  }
  return gjUser;
}",0.9977728285077953
166356,"public VXUserGroupInfo createXUserGroupFromMap(VXUserGroupInfo vXUserGroupInfo){
  checkAdminAccess();
  VXUserGroupInfo vxUGInfo=new VXUserGroupInfo();
  VXUser vXUser=vXUserGroupInfo.getXuserInfo();
  vXUser=xUserService.createXUserWithOutLogin(vXUser);
  vxUGInfo.setXuserInfo(vXUser);
  List<VXGroup> vxg=new ArrayList<VXGroup>();
  for (  VXGroup vXGroup : vXUserGroupInfo.getXgroupInfo()) {
    VXGroup VvXGroup=xGroupService.createXGroupWithOutLogin(vXGroup);
    vxg.add(VvXGroup);
    VXGroupUser vXGroupUser=new VXGroupUser();
    vXGroupUser.setUserId(vXUser.getId());
    vXGroupUser.setName(VvXGroup.getName());
    vXGroupUser=xGroupUserService.createXGroupUserWithOutLogin(vXGroupUser);
  }
  vxUGInfo.setXgroupInfo(vxg);
  return vxUGInfo;
}","public VXUserGroupInfo createXUserGroupFromMap(VXUserGroupInfo vXUserGroupInfo){
  checkAdminAccess();
  VXUserGroupInfo vxUGInfo=new VXUserGroupInfo();
  VXUser vXUser=vXUserGroupInfo.getXuserInfo();
  vXUser=xUserService.createXUserWithOutLogin(vXUser);
  vxUGInfo.setXuserInfo(vXUser);
  List<VXGroup> vxg=new ArrayList<VXGroup>();
  for (  VXGroup vXGroup : vXUserGroupInfo.getXgroupInfo()) {
    VXGroup VvXGroup=xGroupService.createXGroupWithOutLogin(vXGroup);
    vxg.add(VvXGroup);
    VXGroupUser vXGroupUser=new VXGroupUser();
    vXGroupUser.setUserId(vXUser.getId());
    vXGroupUser.setName(VvXGroup.getName());
    vXGroupUser=xGroupUserService.createXGroupUserWithOutLogin(vXGroupUser);
  }
  VXPortalUser vXPortalUser=userMgr.getUserProfileByLoginId(vXUser.getName());
  if (vXPortalUser != null) {
    assignPermissionToUser(vXPortalUser,true);
  }
  vxUGInfo.setXgroupInfo(vxg);
  return vxUGInfo;
}",0.90442054958184
166357,"public VXModuleDef updateXModuleDefPermission(VXModuleDef vXModuleDef){
  List<VXGroupPermission> groupPermListNew=vXModuleDef.getGroupPermList();
  List<VXUserPermission> userPermListNew=vXModuleDef.getUserPermList();
  List<VXGroupPermission> groupPermListOld=new ArrayList<VXGroupPermission>();
  List<VXUserPermission> userPermListOld=new ArrayList<VXUserPermission>();
  XXModuleDef xModuleDef=daoManager.getXXModuleDef().getById(vXModuleDef.getId());
  VXModuleDef vModuleDefPopulateOld=xModuleDefService.populateViewBean(xModuleDef);
  List<XXGroupPermission> xgroupPermissionList=daoManager.getXXGroupPermission().findByModuleId(vXModuleDef.getId(),true);
  for (  XXGroupPermission xGrpPerm : xgroupPermissionList) {
    VXGroupPermission vXGrpPerm=xGroupPermissionService.populateViewBean(xGrpPerm);
    groupPermListOld.add(vXGrpPerm);
  }
  vModuleDefPopulateOld.setGroupPermList(groupPermListOld);
  List<XXUserPermission> xuserPermissionList=daoManager.getXXUserPermission().findByModuleId(vXModuleDef.getId(),true);
  for (  XXUserPermission xUserPerm : xuserPermissionList) {
    VXUserPermission vUserPerm=xUserPermissionService.populateViewBean(xUserPerm);
    userPermListOld.add(vUserPerm);
  }
  vModuleDefPopulateOld.setUserPermList(userPermListOld);
  if (groupPermListOld != null && groupPermListNew != null) {
    for (    VXGroupPermission newVXGroupPerm : groupPermListNew) {
      boolean isExist=false;
      for (      VXGroupPermission oldVXGroupPerm : groupPermListOld) {
        if (newVXGroupPerm.getModuleId().equals(oldVXGroupPerm.getModuleId()) && newVXGroupPerm.getGroupId().equals(oldVXGroupPerm.getGroupId())) {
          if (newVXGroupPerm.getIsAllowed() != oldVXGroupPerm.getIsAllowed()) {
            oldVXGroupPerm.setIsAllowed(newVXGroupPerm.getIsAllowed());
            oldVXGroupPerm=this.updateXGroupPermission(oldVXGroupPerm);
          }
          isExist=true;
        }
      }
      if (!isExist) {
        newVXGroupPerm=this.createXGroupPermission(newVXGroupPerm);
      }
    }
  }
  if (userPermListOld != null && userPermListNew != null) {
    for (    VXUserPermission newVXUserPerm : userPermListNew) {
      boolean isExist=false;
      for (      VXUserPermission oldVXUserPerm : userPermListOld) {
        if (newVXUserPerm.getModuleId().equals(oldVXUserPerm.getModuleId()) && newVXUserPerm.getUserId().equals(oldVXUserPerm.getUserId())) {
          if (newVXUserPerm.getIsAllowed() != oldVXUserPerm.getIsAllowed()) {
            oldVXUserPerm.setIsAllowed(newVXUserPerm.getIsAllowed());
            oldVXUserPerm=this.updateXUserPermission(oldVXUserPerm);
          }
          isExist=true;
        }
      }
      if (!isExist) {
        newVXUserPerm=this.createXUserPermission(newVXUserPerm);
      }
    }
  }
  vXModuleDef=xModuleDefService.updateResource(vXModuleDef);
  return vXModuleDef;
}","public VXModuleDef updateXModuleDefPermission(VXModuleDef vXModuleDef){
  List<VXGroupPermission> groupPermListNew=vXModuleDef.getGroupPermList();
  List<VXUserPermission> userPermListNew=vXModuleDef.getUserPermList();
  List<VXGroupPermission> groupPermListOld=new ArrayList<VXGroupPermission>();
  List<VXUserPermission> userPermListOld=new ArrayList<VXUserPermission>();
  XXModuleDef xModuleDef=daoManager.getXXModuleDef().getById(vXModuleDef.getId());
  VXModuleDef vModuleDefPopulateOld=xModuleDefService.populateViewBean(xModuleDef);
  List<XXGroupPermission> xgroupPermissionList=daoManager.getXXGroupPermission().findByModuleId(vXModuleDef.getId(),true);
  for (  XXGroupPermission xGrpPerm : xgroupPermissionList) {
    VXGroupPermission vXGrpPerm=xGroupPermissionService.populateViewBean(xGrpPerm);
    groupPermListOld.add(vXGrpPerm);
  }
  vModuleDefPopulateOld.setGroupPermList(groupPermListOld);
  List<XXUserPermission> xuserPermissionList=daoManager.getXXUserPermission().findByModuleId(vXModuleDef.getId(),true);
  for (  XXUserPermission xUserPerm : xuserPermissionList) {
    VXUserPermission vUserPerm=xUserPermissionService.populateViewBean(xUserPerm);
    userPermListOld.add(vUserPerm);
  }
  vModuleDefPopulateOld.setUserPermList(userPermListOld);
  if (groupPermListOld != null && groupPermListNew != null) {
    for (    VXGroupPermission newVXGroupPerm : groupPermListNew) {
      boolean isExist=false;
      for (      VXGroupPermission oldVXGroupPerm : groupPermListOld) {
        if (newVXGroupPerm.getModuleId().equals(oldVXGroupPerm.getModuleId()) && newVXGroupPerm.getGroupId().equals(oldVXGroupPerm.getGroupId())) {
          if (!newVXGroupPerm.getIsAllowed().equals(oldVXGroupPerm.getIsAllowed())) {
            oldVXGroupPerm.setIsAllowed(newVXGroupPerm.getIsAllowed());
            oldVXGroupPerm=this.updateXGroupPermission(oldVXGroupPerm);
          }
          isExist=true;
        }
      }
      if (!isExist) {
        newVXGroupPerm=this.createXGroupPermission(newVXGroupPerm);
      }
    }
  }
  if (userPermListOld != null && userPermListNew != null) {
    for (    VXUserPermission newVXUserPerm : userPermListNew) {
      boolean isExist=false;
      for (      VXUserPermission oldVXUserPerm : userPermListOld) {
        if (newVXUserPerm.getModuleId().equals(oldVXUserPerm.getModuleId()) && newVXUserPerm.getUserId().equals(oldVXUserPerm.getUserId())) {
          if (!newVXUserPerm.getIsAllowed().equals(oldVXUserPerm.getIsAllowed())) {
            oldVXUserPerm.setIsAllowed(newVXUserPerm.getIsAllowed());
            oldVXUserPerm=this.updateXUserPermission(oldVXUserPerm);
          }
          isExist=true;
        }
      }
      if (!isExist) {
        newVXUserPerm=this.createXUserPermission(newVXUserPerm);
      }
    }
  }
  vXModuleDef=xModuleDefService.updateResource(vXModuleDef);
  return vXModuleDef;
}",0.67654234925061
166358,"public VXUser updateXUser(VXUser vXUser){
  if (vXUser == null || vXUser.getName() == null || vXUser.getName().trim().isEmpty()) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  checkAccess(vXUser.getName());
  VXPortalUser oldUserProfile=userMgr.getUserProfileByLoginId(vXUser.getName());
  VXPortalUser vXPortalUser=new VXPortalUser();
  if (oldUserProfile != null && oldUserProfile.getId() != null) {
    vXPortalUser.setId(oldUserProfile.getId());
  }
  vXPortalUser.setFirstName(vXUser.getFirstName());
  vXPortalUser.setLastName(vXUser.getLastName());
  vXPortalUser.setEmailAddress(vXUser.getEmailAddress());
  vXPortalUser.setLoginId(vXUser.getName());
  vXPortalUser.setStatus(vXUser.getStatus());
  vXPortalUser.setUserRoleList(vXUser.getUserRoleList());
  vXPortalUser.setPublicScreenName(vXUser.getFirstName() + ""String_Node_Str"" + vXUser.getLastName());
  vXPortalUser.setUserSource(vXUser.getUserSource());
  String hiddenPasswordString=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  String password=vXUser.getPassword();
  if (oldUserProfile != null && password != null && password.equals(hiddenPasswordString)) {
    vXPortalUser.setPassword(oldUserProfile.getPassword());
  }
  vXPortalUser.setPassword(password);
  Collection<Long> groupIdList=vXUser.getGroupIdList();
  XXPortalUser xXPortalUser=new XXPortalUser();
  xXPortalUser=userMgr.updateUserWithPass(vXPortalUser);
  Collection<String> roleListUpdatedProfile=new ArrayList<String>();
  if (oldUserProfile != null && oldUserProfile.getId() != null) {
    if (vXUser != null && vXUser.getUserRoleList() != null) {
      Collection<String> roleListOldProfile=oldUserProfile.getUserRoleList();
      Collection<String> roleListNewProfile=vXUser.getUserRoleList();
      if (roleListNewProfile != null && roleListOldProfile != null) {
        for (        String role : roleListNewProfile) {
          if (role != null && !roleListOldProfile.contains(role)) {
            roleListUpdatedProfile.add(role);
          }
        }
      }
    }
  }
  if (roleListUpdatedProfile != null && roleListUpdatedProfile.size() > 0) {
    vXPortalUser.setUserRoleList(roleListUpdatedProfile);
    List<XXUserPermission> xuserPermissionList=daoManager.getXXUserPermission().findByUserPermissionId(vXPortalUser.getId());
    if (xuserPermissionList != null && xuserPermissionList.size() > 0) {
      for (      XXUserPermission xXUserPermission : xuserPermissionList) {
        if (xXUserPermission != null) {
          try {
            xUserPermissionService.deleteResource(xXUserPermission.getId());
          }
 catch (          Exception e) {
            logger.error(e.getMessage());
          }
        }
      }
    }
    assignPermissionToUser(vXPortalUser,true);
  }
  Collection<String> roleList=new ArrayList<String>();
  if (xXPortalUser != null) {
    roleList=userMgr.getRolesForUser(xXPortalUser);
  }
  if (roleList == null || roleList.size() == 0) {
    roleList.add(RangerConstants.ROLE_USER);
  }
  vXUser=xUserService.updateResource(vXUser);
  vXUser.setUserRoleList(roleList);
  vXUser.setPassword(password);
  List<XXTrxLog> trxLogList=xUserService.getTransactionLog(vXUser,oldUserProfile,""String_Node_Str"");
  vXUser.setPassword(hiddenPasswordString);
  Long userId=vXUser.getId();
  List<Long> groupUsersToRemove=new ArrayList<Long>();
  if (groupIdList != null) {
    SearchCriteria searchCriteria=new SearchCriteria();
    searchCriteria.addParam(""String_Node_Str"",userId);
    VXGroupUserList vXGroupUserList=xGroupUserService.searchXGroupUsers(searchCriteria);
    List<VXGroupUser> vXGroupUsers=vXGroupUserList.getList();
    if (vXGroupUsers != null) {
      for (      Long groupId : groupIdList) {
        boolean found=false;
        for (        VXGroupUser vXGroupUser : vXGroupUsers) {
          if (groupId.equals(vXGroupUser.getParentGroupId())) {
            found=true;
            break;
          }
        }
        if (!found) {
          VXGroupUser vXGroupUser=createXGroupUser(userId,groupId);
          trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
        }
      }
      for (      VXGroupUser vXGroupUser : vXGroupUsers) {
        boolean found=false;
        for (        Long groupId : groupIdList) {
          if (groupId.equals(vXGroupUser.getParentGroupId())) {
            trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
            found=true;
            break;
          }
        }
        if (!found) {
          trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
          groupUsersToRemove.add(vXGroupUser.getId());
        }
      }
    }
 else {
      for (      Long groupId : groupIdList) {
        VXGroupUser vXGroupUser=createXGroupUser(userId,groupId);
        trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
      }
    }
    vXUser.setGroupIdList(groupIdList);
  }
 else {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + userId);
  }
  xaBizUtil.createTrxLog(trxLogList);
  for (  Long groupUserId : groupUsersToRemove) {
    xGroupUserService.deleteResource(groupUserId);
  }
  return vXUser;
}","public VXUser updateXUser(VXUser vXUser){
  if (vXUser == null || vXUser.getName() == null || vXUser.getName().trim().isEmpty()) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  checkAccess(vXUser.getName());
  VXPortalUser oldUserProfile=userMgr.getUserProfileByLoginId(vXUser.getName());
  VXPortalUser vXPortalUser=new VXPortalUser();
  if (oldUserProfile != null && oldUserProfile.getId() != null) {
    vXPortalUser.setId(oldUserProfile.getId());
  }
  vXPortalUser.setFirstName(vXUser.getFirstName());
  vXPortalUser.setLastName(vXUser.getLastName());
  vXPortalUser.setEmailAddress(vXUser.getEmailAddress());
  vXPortalUser.setLoginId(vXUser.getName());
  vXPortalUser.setStatus(vXUser.getStatus());
  vXPortalUser.setUserRoleList(vXUser.getUserRoleList());
  vXPortalUser.setPublicScreenName(vXUser.getFirstName() + ""String_Node_Str"" + vXUser.getLastName());
  vXPortalUser.setUserSource(vXUser.getUserSource());
  String hiddenPasswordString=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  String password=vXUser.getPassword();
  if (oldUserProfile != null && password != null && password.equals(hiddenPasswordString)) {
    vXPortalUser.setPassword(oldUserProfile.getPassword());
  }
  vXPortalUser.setPassword(password);
  Collection<Long> groupIdList=vXUser.getGroupIdList();
  XXPortalUser xXPortalUser=new XXPortalUser();
  xXPortalUser=userMgr.updateUserWithPass(vXPortalUser);
  Collection<String> roleListUpdatedProfile=new ArrayList<String>();
  if (oldUserProfile != null && oldUserProfile.getId() != null) {
    if (vXUser != null && vXUser.getUserRoleList() != null) {
      Collection<String> roleListOldProfile=oldUserProfile.getUserRoleList();
      Collection<String> roleListNewProfile=vXUser.getUserRoleList();
      if (roleListNewProfile != null && roleListOldProfile != null) {
        for (        String role : roleListNewProfile) {
          if (role != null && !roleListOldProfile.contains(role)) {
            roleListUpdatedProfile.add(role);
          }
        }
      }
    }
  }
  if (roleListUpdatedProfile != null && roleListUpdatedProfile.size() > 0) {
    vXPortalUser.setUserRoleList(roleListUpdatedProfile);
    List<XXUserPermission> xuserPermissionList=daoManager.getXXUserPermission().findByUserPermissionId(vXPortalUser.getId());
    if (xuserPermissionList != null && xuserPermissionList.size() > 0) {
      for (      XXUserPermission xXUserPermission : xuserPermissionList) {
        if (xXUserPermission != null) {
          try {
            xUserPermissionService.deleteResource(xXUserPermission.getId());
          }
 catch (          Exception e) {
            logger.error(e.getMessage());
          }
        }
      }
    }
    assignPermissionToUser(vXPortalUser,true);
  }
  Collection<String> roleList=new ArrayList<String>();
  if (xXPortalUser != null) {
    roleList=userMgr.getRolesForUser(xXPortalUser);
  }
  if (roleList == null || roleList.size() == 0) {
    roleList=new ArrayList<String>();
    roleList.add(RangerConstants.ROLE_USER);
  }
  vXUser=xUserService.updateResource(vXUser);
  vXUser.setUserRoleList(roleList);
  vXUser.setPassword(password);
  List<XXTrxLog> trxLogList=xUserService.getTransactionLog(vXUser,oldUserProfile,""String_Node_Str"");
  vXUser.setPassword(hiddenPasswordString);
  Long userId=vXUser.getId();
  List<Long> groupUsersToRemove=new ArrayList<Long>();
  if (groupIdList != null) {
    SearchCriteria searchCriteria=new SearchCriteria();
    searchCriteria.addParam(""String_Node_Str"",userId);
    VXGroupUserList vXGroupUserList=xGroupUserService.searchXGroupUsers(searchCriteria);
    List<VXGroupUser> vXGroupUsers=vXGroupUserList.getList();
    if (vXGroupUsers != null) {
      for (      Long groupId : groupIdList) {
        boolean found=false;
        for (        VXGroupUser vXGroupUser : vXGroupUsers) {
          if (groupId.equals(vXGroupUser.getParentGroupId())) {
            found=true;
            break;
          }
        }
        if (!found) {
          VXGroupUser vXGroupUser=createXGroupUser(userId,groupId);
          trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
        }
      }
      for (      VXGroupUser vXGroupUser : vXGroupUsers) {
        boolean found=false;
        for (        Long groupId : groupIdList) {
          if (groupId.equals(vXGroupUser.getParentGroupId())) {
            trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
            found=true;
            break;
          }
        }
        if (!found) {
          trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
          groupUsersToRemove.add(vXGroupUser.getId());
        }
      }
    }
 else {
      for (      Long groupId : groupIdList) {
        VXGroupUser vXGroupUser=createXGroupUser(userId,groupId);
        trxLogList.addAll(xGroupUserService.getTransactionLog(vXGroupUser,""String_Node_Str""));
      }
    }
    vXUser.setGroupIdList(groupIdList);
  }
 else {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + userId);
  }
  xaBizUtil.createTrxLog(trxLogList);
  for (  Long groupUserId : groupUsersToRemove) {
    xGroupUserService.deleteResource(groupUserId);
  }
  return vXUser;
}",0.9964198228754476
166359,"@Override public void serialize(Date date,JsonGenerator gen,SerializerProvider provider) throws IOException, JsonProcessingException {
  String formattedDate=dateFormat.format(date);
  gen.writeString(formattedDate);
}","@Override public void serialize(Date date,JsonGenerator gen,SerializerProvider provider) throws IOException, JsonProcessingException {
  String formattedDate=new SimpleDateFormat(DATE_FORMAT).format(date);
  gen.writeString(formattedDate);
}",0.9455337690631808
166360,"/** 
 * constructor
 */
@SuppressWarnings(""String_Node_Str"") public AbstractBaseResourceService(){
  Class klass=getClass();
  ParameterizedType genericSuperclass=(ParameterizedType)klass.getGenericSuperclass();
  TypeVariable<Class<?>> var[]=klass.getTypeParameters();
  if (genericSuperclass.getActualTypeArguments()[0] instanceof Class) {
    tEntityClass=(Class<T>)genericSuperclass.getActualTypeArguments()[0];
    tViewClass=(Class<V>)genericSuperclass.getActualTypeArguments()[1];
  }
 else   if (var.length > 0) {
    tEntityClass=(Class<T>)var[0].getBounds()[0];
    tViewClass=(Class<V>)var[1].getBounds()[0];
  }
 else {
    logger.fatal(""String_Node_Str"",new Throwable());
  }
  if (tEntityClass != null) {
    className=tEntityClass.getName();
  }
  if (tViewClass != null) {
    viewClassName=tViewClass.getName();
  }
  countQueryStr=""String_Node_Str"" + tEntityClass.getName() + ""String_Node_Str"";
  queryStr=""String_Node_Str"" + className + ""String_Node_Str"";
  distinctCountQueryStr=""String_Node_Str"" + tEntityClass.getName() + ""String_Node_Str"";
  distinctQueryStr=""String_Node_Str"" + className + ""String_Node_Str"";
  sortFields.add(new SortField(""String_Node_Str"",""String_Node_Str"",true,SORT_ORDER.ASC));
  registerService(this);
}","/** 
 * constructor
 */
@SuppressWarnings(""String_Node_Str"") public AbstractBaseResourceService(){
  Class klass=getClass();
  ParameterizedType genericSuperclass=(ParameterizedType)klass.getGenericSuperclass();
  TypeVariable<Class<?>> var[]=klass.getTypeParameters();
  if (genericSuperclass.getActualTypeArguments()[0] instanceof Class) {
    tEntityClass=(Class<T>)genericSuperclass.getActualTypeArguments()[0];
    tViewClass=(Class<V>)genericSuperclass.getActualTypeArguments()[1];
  }
 else   if (var.length > 0) {
    tEntityClass=(Class<T>)var[0].getBounds()[0];
    tViewClass=(Class<V>)var[1].getBounds()[0];
  }
 else {
    logger.fatal(""String_Node_Str"",new Throwable());
  }
  if (tEntityClass != null) {
    className=tEntityClass.getName();
  }
  if (tViewClass != null) {
    viewClassName=tViewClass.getName();
  }
  countQueryStr=""String_Node_Str"" + className + ""String_Node_Str"";
  queryStr=""String_Node_Str"" + className + ""String_Node_Str"";
  distinctCountQueryStr=""String_Node_Str"" + className + ""String_Node_Str"";
  distinctQueryStr=""String_Node_Str"" + className + ""String_Node_Str"";
  sortFields.add(new SortField(""String_Node_Str"",""String_Node_Str"",true,SORT_ORDER.ASC));
  registerService(this);
}",0.9749190938511328
166361,"@SuppressWarnings(""String_Node_Str"") public RangerBaseModelService(){
  Class klass=getClass();
  ParameterizedType genericSuperclass=(ParameterizedType)klass.getGenericSuperclass();
  TypeVariable<Class<?>> var[]=klass.getTypeParameters();
  if (genericSuperclass.getActualTypeArguments()[0] instanceof Class) {
    tEntityClass=(Class<T>)genericSuperclass.getActualTypeArguments()[0];
    tViewClass=(Class<V>)genericSuperclass.getActualTypeArguments()[1];
  }
 else   if (var.length > 0) {
    tEntityClass=(Class<T>)var[0].getBounds()[0];
    tViewClass=(Class<V>)var[1].getBounds()[0];
  }
 else {
    LOG.fatal(""String_Node_Str"",new Throwable());
  }
  if (tEntityClass != null) {
    tClassName=tEntityClass.getName();
  }
  populateExistingBaseFields=false;
  countQueryStr=""String_Node_Str"" + tEntityClass.getName() + ""String_Node_Str"";
  queryStr=""String_Node_Str"" + tClassName + ""String_Node_Str"";
}","@SuppressWarnings(""String_Node_Str"") public RangerBaseModelService(){
  Class klass=getClass();
  ParameterizedType genericSuperclass=(ParameterizedType)klass.getGenericSuperclass();
  TypeVariable<Class<?>> var[]=klass.getTypeParameters();
  if (genericSuperclass.getActualTypeArguments()[0] instanceof Class) {
    tEntityClass=(Class<T>)genericSuperclass.getActualTypeArguments()[0];
    tViewClass=(Class<V>)genericSuperclass.getActualTypeArguments()[1];
  }
 else   if (var.length > 0) {
    tEntityClass=(Class<T>)var[0].getBounds()[0];
    tViewClass=(Class<V>)var[1].getBounds()[0];
  }
 else {
    LOG.fatal(""String_Node_Str"",new Throwable());
  }
  if (tEntityClass != null) {
    tClassName=tEntityClass.getName();
  }
  populateExistingBaseFields=false;
  countQueryStr=""String_Node_Str"" + tClassName + ""String_Node_Str"";
  queryStr=""String_Node_Str"" + tClassName + ""String_Node_Str"";
}",0.9834070796460176
166362,"public VXResource mapPublicToXAObject(VXPolicy vXPolicy,int operationContext){
  VXResource vXResource=new VXResource();
  vXResource=super.mapBaseAttributesToXAObject(vXPolicy,vXResource);
  vXResource.setName(vXPolicy.getResourceName());
  vXResource.setPolicyName(vXPolicy.getPolicyName());
  vXResource.setDescription(vXPolicy.getDescription());
  vXResource.setResourceType(getResourceType(vXPolicy));
  XXAsset xAsset=xaDaoMgr.getXXAsset().findByAssetName(vXPolicy.getRepositoryName());
  if (xAsset == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  vXResource.setAssetId(xAsset.getId());
  if (operationContext == AbstractBaseResourceService.OPERATION_UPDATE_CONTEXT) {
    XXResource xxResource=xaDaoMgr.getXXResource().getById(vXPolicy.getId());
    if (xxResource == null) {
      logger.error(""String_Node_Str"" + vXPolicy.getId());
      throw restErrorUtil.createRESTException(""String_Node_Str"" + vXResource.getId(),MessageEnums.DATA_NOT_FOUND);
    }
    xxResource.setUpdateTime(DateUtil.getUTCDate());
    xResourceService.mapBaseAttributesToViewBean(xxResource,vXResource);
    SearchCriteria scAuditMap=new SearchCriteria();
    scAuditMap.addParam(""String_Node_Str"",xxResource.getId());
    VXAuditMapList vXAuditMapList=xAuditMapService.searchXAuditMaps(scAuditMap);
    List<VXAuditMap> auditList=new ArrayList<VXAuditMap>();
    if (vXAuditMapList.getListSize() > 0 && vXPolicy.getIsAuditEnabled()) {
      auditList.addAll(vXAuditMapList.getVXAuditMaps());
    }
 else     if (vXAuditMapList.getListSize() == 0 && vXPolicy.getIsAuditEnabled()) {
      VXAuditMap vXAuditMap=new VXAuditMap();
      vXAuditMap.setAuditType(AppConstants.XA_AUDIT_TYPE_ALL);
      auditList.add(vXAuditMap);
    }
    List<VXPermMap> permMapList=mapPermObjToPermList(vXPolicy.getPermMapList(),vXPolicy);
    vXResource.setAuditList(auditList);
    vXResource.setPermMapList(permMapList);
  }
 else   if (operationContext == AbstractBaseResourceService.OPERATION_CREATE_CONTEXT) {
    if (vXPolicy.getIsAuditEnabled()) {
      VXAuditMap vXAuditMap=new VXAuditMap();
      vXAuditMap.setAuditType(AppConstants.XA_AUDIT_TYPE_ALL);
      List<VXAuditMap> auditList=new ArrayList<VXAuditMap>();
      auditList.add(vXAuditMap);
      vXResource.setAuditList(auditList);
    }
    if (!stringUtil.isEmpty(vXPolicy.getPermMapList())) {
      List<VXPermMap> permMapList=mapPermObjToPermList(vXPolicy.getPermMapList());
      vXResource.setPermMapList(permMapList);
    }
  }
  vXResource.setDatabases(vXPolicy.getDatabases());
  vXResource.setTables(vXPolicy.getTables());
  vXResource.setColumnFamilies(vXPolicy.getColumnFamilies());
  vXResource.setColumns(vXPolicy.getColumns());
  vXResource.setUdfs(vXPolicy.getUdfs());
  vXResource.setAssetName(vXPolicy.getRepositoryName());
  int assetType=AppConstants.getEnumFor_AssetType(vXPolicy.getRepositoryType());
  if (assetType == 0 || assetType == AppConstants.ASSET_UNKNOWN) {
    assetType=xAsset.getAssetType();
    vXPolicy.setRepositoryType(AppConstants.getLabelFor_AssetType(assetType));
  }
  vXResource.setAssetType(assetType);
  int resourceStatus=AppConstants.STATUS_ENABLED;
  if (!vXPolicy.getIsEnabled()) {
    resourceStatus=AppConstants.STATUS_DISABLED;
  }
  vXResource.setResourceStatus(resourceStatus);
  vXResource.setCheckParentPermission(AppConstants.BOOL_FALSE);
  vXResource.setTopologies(vXPolicy.getTopologies());
  vXResource.setServices(vXPolicy.getServices());
  if (vXPolicy.getRepositoryType().equalsIgnoreCase(AppConstants.getLabelFor_AssetType(AppConstants.ASSET_HIVE))) {
    vXResource.setTableType(AppConstants.getEnumFor_PolicyType(vXPolicy.getTableType()));
    vXResource.setColumnType(AppConstants.getEnumFor_PolicyType(vXPolicy.getColumnType()));
  }
  if (vXPolicy.getRepositoryType().equalsIgnoreCase(AppConstants.getLabelFor_AssetType(AppConstants.ASSET_HDFS))) {
    vXResource.setIsRecursive(AppConstants.getEnumFor_BooleanValue(vXPolicy.getIsRecursive()));
  }
  return vXResource;
}","public VXResource mapPublicToXAObject(VXPolicy vXPolicy,int operationContext){
  VXResource vXResource=new VXResource();
  vXResource=super.mapBaseAttributesToXAObject(vXPolicy,vXResource);
  vXResource.setName(vXPolicy.getResourceName());
  vXResource.setPolicyName(vXPolicy.getPolicyName());
  vXResource.setDescription(vXPolicy.getDescription());
  vXResource.setResourceType(getResourceType(vXPolicy));
  XXAsset xAsset=xaDaoMgr.getXXAsset().findByAssetName(vXPolicy.getRepositoryName());
  if (xAsset == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  vXResource.setAssetId(xAsset.getId());
  if (operationContext == AbstractBaseResourceService.OPERATION_UPDATE_CONTEXT) {
    XXResource xxResource=xaDaoMgr.getXXResource().getById(vXPolicy.getId());
    if (xxResource == null) {
      logger.error(""String_Node_Str"" + vXPolicy.getId());
      throw restErrorUtil.createRESTException(""String_Node_Str"" + vXResource.getId(),MessageEnums.DATA_NOT_FOUND);
    }
    xxResource.setUpdateTime(DateUtil.getUTCDate());
    xResourceService.mapBaseAttributesToViewBean(xxResource,vXResource);
    SearchCriteria scAuditMap=new SearchCriteria();
    scAuditMap.addParam(""String_Node_Str"",xxResource.getId());
    VXAuditMapList vXAuditMapList=xAuditMapService.searchXAuditMaps(scAuditMap);
    List<VXAuditMap> auditList=new ArrayList<VXAuditMap>();
    if (vXAuditMapList.getListSize() > 0 && vXPolicy.getIsAuditEnabled()) {
      auditList.addAll(vXAuditMapList.getVXAuditMaps());
    }
 else     if (vXAuditMapList.getListSize() == 0 && vXPolicy.getIsAuditEnabled()) {
      VXAuditMap vXAuditMap=new VXAuditMap();
      vXAuditMap.setAuditType(AppConstants.XA_AUDIT_TYPE_ALL);
      auditList.add(vXAuditMap);
    }
    List<VXPermMap> permMapList=mapPermObjToPermList(vXPolicy.getPermMapList(),vXPolicy);
    vXResource.setAuditList(auditList);
    vXResource.setPermMapList(permMapList);
  }
 else   if (operationContext == AbstractBaseResourceService.OPERATION_CREATE_CONTEXT) {
    if (vXPolicy.getIsAuditEnabled()) {
      VXAuditMap vXAuditMap=new VXAuditMap();
      vXAuditMap.setAuditType(AppConstants.XA_AUDIT_TYPE_ALL);
      List<VXAuditMap> auditList=new ArrayList<VXAuditMap>();
      auditList.add(vXAuditMap);
      vXResource.setAuditList(auditList);
    }
    if (!stringUtil.isEmpty(vXPolicy.getPermMapList())) {
      List<VXPermMap> permMapList=mapPermObjToPermList(vXPolicy.getPermMapList());
      vXResource.setPermMapList(permMapList);
    }
  }
  vXResource.setDatabases(vXPolicy.getDatabases());
  vXResource.setTables(vXPolicy.getTables());
  vXResource.setColumnFamilies(vXPolicy.getColumnFamilies());
  vXResource.setColumns(vXPolicy.getColumns());
  vXResource.setUdfs(vXPolicy.getUdfs());
  vXResource.setAssetName(vXPolicy.getRepositoryName());
  int assetType=AppConstants.getEnumFor_AssetType(vXPolicy.getRepositoryType());
  if (assetType == AppConstants.ASSET_UNKNOWN) {
    assetType=xAsset.getAssetType();
    vXPolicy.setRepositoryType(AppConstants.getLabelFor_AssetType(assetType));
  }
  vXResource.setAssetType(assetType);
  int resourceStatus=AppConstants.STATUS_ENABLED;
  if (!vXPolicy.getIsEnabled()) {
    resourceStatus=AppConstants.STATUS_DISABLED;
  }
  vXResource.setResourceStatus(resourceStatus);
  vXResource.setCheckParentPermission(AppConstants.BOOL_FALSE);
  vXResource.setTopologies(vXPolicy.getTopologies());
  vXResource.setServices(vXPolicy.getServices());
  if (vXPolicy.getRepositoryType().equalsIgnoreCase(AppConstants.getLabelFor_AssetType(AppConstants.ASSET_HIVE))) {
    vXResource.setTableType(AppConstants.getEnumFor_PolicyType(vXPolicy.getTableType()));
    vXResource.setColumnType(AppConstants.getEnumFor_PolicyType(vXPolicy.getColumnType()));
  }
  if (vXPolicy.getRepositoryType().equalsIgnoreCase(AppConstants.getLabelFor_AssetType(AppConstants.ASSET_HDFS))) {
    vXResource.setIsRecursive(AppConstants.getEnumFor_BooleanValue(vXPolicy.getIsRecursive()));
  }
  return vXResource;
}",0.9977783263391756
166363,"@Test public void test11CreateXUser(){
  setup();
  VXUser vxUser=vxUser();
  Collection<String> userRoleList=new ArrayList<String>();
  userRoleList.add(""String_Node_Str"");
  vxUser.setUserRoleList(userRoleList);
  ArrayList<String> userRoleListVXPortaUser=new ArrayList<String>();
  VXPortalUser vXPortalUser=new VXPortalUser();
  vXPortalUser.setUserRoleList(userRoleListVXPortaUser);
  Mockito.when(xUserService.createResource(vxUser)).thenReturn(vxUser);
  XXModuleDefDao value=Mockito.mock(XXModuleDefDao.class);
  Mockito.when(daoManager.getXXModuleDef()).thenReturn(value);
  List<XXModuleDef> lsvalue=new ArrayList<XXModuleDef>();
  Mockito.when(userMgr.createDefaultAccountUser((VXPortalUser)Mockito.anyObject())).thenReturn(vXPortalUser);
  VXUser dbUser=xUserMgr.createXUser(vxUser);
  Assert.assertNotNull(dbUser);
  userId=dbUser.getId();
  Assert.assertEquals(userId,dbUser.getId());
  Assert.assertEquals(dbUser.getDescription(),vxUser.getDescription());
  Assert.assertEquals(dbUser.getName(),vxUser.getName());
  Assert.assertEquals(dbUser.getUserRoleList(),vxUser.getUserRoleList());
  Assert.assertEquals(dbUser.getGroupNameList(),vxUser.getGroupNameList());
  Mockito.verify(xUserService).createResource(vxUser);
  Mockito.when(xUserService.readResourceWithOutLogin(userId)).thenReturn(vxUser);
  VXUser dbvxUser=xUserMgr.getXUser(userId);
  Mockito.verify(userMgr).createDefaultAccountUser((VXPortalUser)Mockito.anyObject());
  Mockito.verify(daoManager).getXXModuleDef();
  Assert.assertNotNull(dbvxUser);
  Assert.assertEquals(userId,dbvxUser.getId());
  Assert.assertEquals(dbvxUser.getDescription(),vxUser.getDescription());
  Assert.assertEquals(dbvxUser.getName(),vxUser.getName());
  Assert.assertEquals(dbvxUser.getUserRoleList(),vxUser.getUserRoleList());
  Assert.assertEquals(dbvxUser.getGroupNameList(),vxUser.getGroupNameList());
  Mockito.verify(xUserService).readResourceWithOutLogin(userId);
}","@Test public void test11CreateXUser(){
  setup();
  VXUser vxUser=vxUser();
  Collection<String> userRoleList=new ArrayList<String>();
  userRoleList.add(""String_Node_Str"");
  vxUser.setUserRoleList(userRoleList);
  ArrayList<String> userRoleListVXPortaUser=new ArrayList<String>();
  VXPortalUser vXPortalUser=new VXPortalUser();
  vXPortalUser.setUserRoleList(userRoleListVXPortaUser);
  Mockito.when(xUserService.createResource(vxUser)).thenReturn(vxUser);
  XXModuleDefDao value=Mockito.mock(XXModuleDefDao.class);
  Mockito.when(daoManager.getXXModuleDef()).thenReturn(value);
  Mockito.when(userMgr.createDefaultAccountUser((VXPortalUser)Mockito.anyObject())).thenReturn(vXPortalUser);
  VXUser dbUser=xUserMgr.createXUser(vxUser);
  Assert.assertNotNull(dbUser);
  userId=dbUser.getId();
  Assert.assertEquals(userId,dbUser.getId());
  Assert.assertEquals(dbUser.getDescription(),vxUser.getDescription());
  Assert.assertEquals(dbUser.getName(),vxUser.getName());
  Assert.assertEquals(dbUser.getUserRoleList(),vxUser.getUserRoleList());
  Assert.assertEquals(dbUser.getGroupNameList(),vxUser.getGroupNameList());
  Mockito.verify(xUserService).createResource(vxUser);
  Mockito.when(xUserService.readResourceWithOutLogin(userId)).thenReturn(vxUser);
  VXUser dbvxUser=xUserMgr.getXUser(userId);
  Mockito.verify(userMgr).createDefaultAccountUser((VXPortalUser)Mockito.anyObject());
  Mockito.verify(daoManager).getXXModuleDef();
  Assert.assertNotNull(dbvxUser);
  Assert.assertEquals(userId,dbvxUser.getId());
  Assert.assertEquals(dbvxUser.getDescription(),vxUser.getDescription());
  Assert.assertEquals(dbvxUser.getName(),vxUser.getName());
  Assert.assertEquals(dbvxUser.getUserRoleList(),vxUser.getUserRoleList());
  Assert.assertEquals(dbvxUser.getGroupNameList(),vxUser.getGroupNameList());
  Mockito.verify(xUserService).readResourceWithOutLogin(userId);
}",0.9847528916929548
166364,"@Test public void test6populateXXToRangerResourceDef(){
  XXResourceDefDao xResourceDefDao=Mockito.mock(XXResourceDefDao.class);
  XXResourceDef resourceDefObj=new XXResourceDef();
  resourceDefObj.setAddedByUserId(Id);
  resourceDefObj.setCreateTime(new Date());
  resourceDefObj.setDefid(Id);
  resourceDefObj.setDescription(""String_Node_Str"");
  resourceDefObj.setId(Id);
  Mockito.when(daoManager.getXXResourceDef()).thenReturn(xResourceDefDao);
  Mockito.when(xResourceDefDao.getById(resourceDefObj.getId())).thenReturn(resourceDefObj);
  RangerResourceDef dbRangerResourceDef=rangerServiceDefService.populateXXToRangerResourceDef(resourceDefObj);
  Assert.assertNotNull(dbRangerResourceDef);
  Assert.assertEquals(dbRangerResourceDef.getName(),resourceDefObj.getName());
  Assert.assertEquals(dbRangerResourceDef.getDescription(),resourceDefObj.getDescription());
  Assert.assertEquals(dbRangerResourceDef.getType(),resourceDefObj.getType());
  Assert.assertEquals(dbRangerResourceDef.getParent(),resourceDefObj.getParent());
  Assert.assertEquals(dbRangerResourceDef.getRbKeyDescription(),resourceDefObj.getRbkeydescription());
  Mockito.verify(daoManager).getXXResourceDef();
}","@Test public void test6populateXXToRangerResourceDef(){
  XXResourceDefDao xResourceDefDao=Mockito.mock(XXResourceDefDao.class);
  XXResourceDef resourceDefObj=new XXResourceDef();
  resourceDefObj.setAddedByUserId(Id);
  resourceDefObj.setCreateTime(new Date());
  resourceDefObj.setDefid(Id);
  resourceDefObj.setDescription(""String_Node_Str"");
  resourceDefObj.setId(Id);
  Mockito.when(daoManager.getXXResourceDef()).thenReturn(xResourceDefDao);
  Mockito.when(xResourceDefDao.getById(resourceDefObj.getId())).thenReturn(resourceDefObj);
  RangerResourceDef dbRangerResourceDef=rangerServiceDefService.populateXXToRangerResourceDef(resourceDefObj);
  Assert.assertNotNull(dbRangerResourceDef);
  Assert.assertEquals(dbRangerResourceDef.getName(),resourceDefObj.getName());
  Assert.assertEquals(dbRangerResourceDef.getDescription(),resourceDefObj.getDescription());
  Assert.assertEquals(dbRangerResourceDef.getType(),resourceDefObj.getType());
  Assert.assertEquals(dbRangerResourceDef.getRbKeyDescription(),resourceDefObj.getRbkeydescription());
  Mockito.verify(daoManager).getXXResourceDef();
}",0.9278530826410144
166365,"public static StormClient getStormClient(String serviceName,Map<String,String> configs){
  StormClient stormClient=null;
  LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ configs);
  String errMsg=errMessage;
  if (configs == null || configs.isEmpty()) {
    String msgDesc=""String_Node_Str"";
    LOG.error(msgDesc);
    HadoopException hdpException=new HadoopException(msgDesc);
    hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
    throw hdpException;
  }
 else {
    String stormUrl=configs.get(""String_Node_Str"");
    String stormAdminUser=configs.get(""String_Node_Str"");
    String stormAdminPassword=configs.get(""String_Node_Str"");
    stormClient=new StormClient(stormUrl,stormAdminUser,stormAdminPassword);
  }
  return stormClient;
}","public static StormClient getStormClient(String serviceName,Map<String,String> configs){
  StormClient stormClient=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName);
    LOG.debug(""String_Node_Str"" + BaseClient.getMaskedConfigMap(configs));
  }
  String errMsg=errMessage;
  if (configs == null || configs.isEmpty()) {
    String msgDesc=""String_Node_Str"";
    LOG.error(msgDesc);
    HadoopException hdpException=new HadoopException(msgDesc);
    hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
    throw hdpException;
  }
 else {
    String stormUrl=configs.get(""String_Node_Str"");
    String stormAdminUser=configs.get(""String_Node_Str"");
    String stormAdminPassword=configs.get(""String_Node_Str"");
    stormClient=new StormClient(stormUrl,stormAdminUser,stormAdminPassword);
  }
  return stormClient;
}",0.7463942307692307
166366,"public void initParams(Properties options){
  String val=(String)options.get(JAAS_ENABLED_PARAM);
  if (val != null) {
    remoteLoginEnabled=val.trim().equalsIgnoreCase(""String_Node_Str"");
    if (!remoteLoginEnabled) {
      System.err.println(""String_Node_Str"" + JAAS_ENABLED_PARAM + ""String_Node_Str""+ val+ ""String_Node_Str"");
      return;
    }
  }
 else {
    remoteLoginEnabled=true;
  }
  val=(String)options.get(DEBUG_PARAM);
  if (val != null && (!val.equalsIgnoreCase(""String_Node_Str""))) {
    debug=true;
  }
 else {
    debug=false;
  }
  remoteHostName=(String)options.get(REMOTE_LOGIN_HOST_PARAM);
  log(""String_Node_Str"" + remoteHostName);
  val=(String)options.get(REMOTE_LOGIN_AUTH_SERVICE_PORT_PARAM);
  if (val != null) {
    remoteHostAuthServicePort=Integer.parseInt(val.trim());
  }
  log(""String_Node_Str"" + remoteHostAuthServicePort);
  val=(String)options.get(SSL_ENABLED_PARAM);
  SSLEnabled=(val != null) && val.trim().equalsIgnoreCase(""String_Node_Str"");
  log(""String_Node_Str"" + SSLEnabled);
  if (SSLEnabled) {
    trustStorePath=(String)options.get(SSL_TRUSTSTORE_PATH_PARAM);
    log(""String_Node_Str"" + trustStorePath);
    if (trustStorePath != null) {
      trustStorePathPassword=(String)options.get(SSL_TRUSTSTORE_PATH_PASSWORD_PARAM);
      if (trustStorePathPassword == null) {
        trustStorePathPassword=""String_Node_Str"";
      }
      log(""String_Node_Str"" + trustStorePathPassword);
    }
    keyStorePath=(String)options.get(SSL_KEYSTORE_PATH_PARAM);
    log(""String_Node_Str"" + keyStorePath);
    if (keyStorePath != null) {
      keyStorePathPassword=(String)options.get(SSL_KEYSTORE_PATH_PASSWORD_PARAM);
      if (keyStorePathPassword == null) {
        keyStorePathPassword=""String_Node_Str"";
      }
      log(""String_Node_Str"" + keyStorePathPassword);
    }
    String certValidationFlag=(String)options.get(SERVER_CERT_VALIDATION_PARAM);
    serverCertValidation=(!(certValidationFlag != null && (""String_Node_Str"".equalsIgnoreCase(certValidationFlag.trim().toLowerCase()))));
    log(""String_Node_Str"" + serverCertValidation);
  }
}","public void initParams(Properties options){
  String val=(String)options.get(JAAS_ENABLED_PARAM);
  if (val != null) {
    remoteLoginEnabled=val.trim().equalsIgnoreCase(""String_Node_Str"");
    if (!remoteLoginEnabled) {
      System.err.println(""String_Node_Str"" + JAAS_ENABLED_PARAM + ""String_Node_Str""+ val+ ""String_Node_Str"");
      return;
    }
  }
 else {
    remoteLoginEnabled=true;
  }
  val=(String)options.get(DEBUG_PARAM);
  if (val != null && (!val.equalsIgnoreCase(""String_Node_Str""))) {
    debug=true;
  }
 else {
    debug=false;
  }
  remoteHostName=(String)options.get(REMOTE_LOGIN_HOST_PARAM);
  log(""String_Node_Str"" + remoteHostName);
  val=(String)options.get(REMOTE_LOGIN_AUTH_SERVICE_PORT_PARAM);
  if (val != null) {
    remoteHostAuthServicePort=Integer.parseInt(val.trim());
  }
  log(""String_Node_Str"" + remoteHostAuthServicePort);
  val=(String)options.get(SSL_ENABLED_PARAM);
  SSLEnabled=(val != null) && val.trim().equalsIgnoreCase(""String_Node_Str"");
  log(""String_Node_Str"" + SSLEnabled);
  if (SSLEnabled) {
    trustStorePath=(String)options.get(SSL_TRUSTSTORE_PATH_PARAM);
    log(""String_Node_Str"" + trustStorePath);
    if (trustStorePath != null) {
      trustStorePathPassword=(String)options.get(SSL_TRUSTSTORE_PATH_PASSWORD_PARAM);
      if (trustStorePathPassword == null) {
        trustStorePathPassword=""String_Node_Str"";
      }
      log(""String_Node_Str"");
    }
    keyStorePath=(String)options.get(SSL_KEYSTORE_PATH_PARAM);
    log(""String_Node_Str"" + keyStorePath);
    if (keyStorePath != null) {
      keyStorePathPassword=(String)options.get(SSL_KEYSTORE_PATH_PASSWORD_PARAM);
      if (keyStorePathPassword == null) {
        keyStorePathPassword=""String_Node_Str"";
      }
      log(""String_Node_Str"");
    }
    String certValidationFlag=(String)options.get(SERVER_CERT_VALIDATION_PARAM);
    serverCertValidation=(!(certValidationFlag != null && (""String_Node_Str"".equalsIgnoreCase(certValidationFlag.trim().toLowerCase()))));
    log(""String_Node_Str"" + serverCertValidation);
  }
}",0.9884001933301112
166367,"public static boolean validateAsIP(String ipAddress,boolean ipInDotNotation){
  if (!ipInDotNotation) {
    return StringUtils.isNumeric(ipAddress);
  }
  boolean ret=false;
  try {
    byte[] bytes=InetAddress.getByName(ipAddress).getAddress();
    ret=true;
  }
 catch (  UnknownHostException exception) {
    LOG.error(""String_Node_Str"" + ipAddress);
  }
  return ret;
}","public static boolean validateAsIP(String ipAddress,boolean ipInDotNotation){
  if (!ipInDotNotation) {
    return StringUtils.isNumeric(ipAddress);
  }
  boolean ret=false;
  try {
    InetAddress.getByName(ipAddress).getAddress();
    ret=true;
  }
 catch (  UnknownHostException exception) {
    LOG.error(""String_Node_Str"" + ipAddress);
  }
  return ret;
}",0.9822646657571624
166368,"public RangerGeolocationData(final long fromIPAddress,final long toIPAddress,final String[] locationData){
  this.fromIPAddress=fromIPAddress;
  this.toIPAddress=toIPAddress;
  this.locationData=locationData;
}","private RangerGeolocationData(final long fromIPAddress,final long toIPAddress,final String[] locationData){
  this.fromIPAddress=fromIPAddress;
  this.toIPAddress=toIPAddress;
  this.locationData=locationData;
}",0.973871733966746
166369,"@Override public int compareTo(final RangerGeolocationData other){
  int ret=Long.compare(fromIPAddress,other.fromIPAddress);
  if (ret == 0) {
    ret=Long.compare(toIPAddress,other.toIPAddress);
  }
  return ret;
}","@Override public int compareTo(final RangerGeolocationData other){
  int ret=(other == null) ? 1 : 0;
  if (ret == 0) {
    ret=Long.compare(fromIPAddress,other.fromIPAddress);
    if (ret == 0) {
      ret=Long.compare(toIPAddress,other.toIPAddress);
      if (ret == 0) {
        ret=Integer.compare(locationData.length,other.locationData.length);
        for (int i=0; ret == 0 && i < locationData.length; i++) {
          ret=stringCompareTo(locationData[i],other.locationData[i]);
        }
      }
    }
  }
  return ret;
}",0.5798657718120805
166370,"ValuePrinter(String fileName,boolean pretty){
  this.fileName=fileName;
  this.pretty=pretty;
}","ValuePrinter(String fileName){
  this.fileName=fileName;
}",0.7581699346405228
166371,"public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(getGuid()).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(serviceName).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (resourceElements != null) {
    for (    Map.Entry<String,RangerPolicy.RangerPolicyResource> e : resourceElements.entrySet()) {
      sb.append(e.getKey()).append(""String_Node_Str"");
      e.getValue().toString(sb);
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(resourceSignature).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}","public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  super.toString(sb);
  sb.append(""String_Node_Str"").append(getGuid()).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(serviceName).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (resourceElements != null) {
    for (    Map.Entry<String,RangerPolicy.RangerPolicyResource> e : resourceElements.entrySet()) {
      sb.append(e.getKey()).append(""String_Node_Str"");
      e.getValue().toString(sb);
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(resourceSignature).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}",0.9844632768361582
166372,"public void setName(String name){
  this.name=name == null ? new String() : name;
}","public void setName(String name){
  this.name=name == null ? ""String_Node_Str"" : name;
}",0.9005847953216374
166373,"public void setSource(String source){
  this.source=source == null ? new String() : source;
}","public void setSource(String source){
  this.source=source == null ? ""String_Node_Str"" : source;
}",0.9109947643979056
166374,"public void setType(String type){
  this.type=type == null ? new String() : type;
}","public void setType(String type){
  this.type=type == null ? ""String_Node_Str"" : type;
}",0.9005847953216374
166375,"public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(resourceId).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(tagId);
  sb.append(""String_Node_Str"");
  return sb;
}","public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  super.toString(sb);
  sb.append(""String_Node_Str"").append(resourceId).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(tagId);
  sb.append(""String_Node_Str"");
  return sb;
}",0.9578544061302682
166376,"private List<RangerPolicy.RangerPolicyItem> normalizeAndPrunePolicyItems(List<RangerPolicy.RangerPolicyItem> policyItems,final String componentType){
  if (CollectionUtils.isNotEmpty(policyItems)) {
    final String prefix=componentType + AbstractServiceStore.COMPONENT_ACCESSTYPE_SEPARATOR;
    List<RangerPolicy.RangerPolicyItem> itemsToPrune=null;
    for (    RangerPolicy.RangerPolicyItem policyItem : policyItems) {
      List<RangerPolicy.RangerPolicyItemAccess> policyItemAccesses=policyItem.getAccesses();
      if (CollectionUtils.isNotEmpty(policyItemAccesses)) {
        List<RangerPolicy.RangerPolicyItemAccess> accessesToPrune=null;
        for (        RangerPolicy.RangerPolicyItemAccess access : policyItemAccesses) {
          String accessType=access.getType();
          if (StringUtils.startsWith(accessType,prefix)) {
            String newAccessType=StringUtils.removeStart(accessType,prefix);
            access.setType(newAccessType);
          }
 else           if (accessType.contains(AbstractServiceStore.COMPONENT_ACCESSTYPE_SEPARATOR)) {
            if (accessesToPrune == null) {
              accessesToPrune=new ArrayList<RangerPolicy.RangerPolicyItemAccess>();
            }
            accessesToPrune.add(access);
          }
        }
        if (accessesToPrune != null) {
          policyItemAccesses.removeAll(accessesToPrune);
        }
        if (policyItemAccesses.isEmpty() && !policyItem.getDelegateAdmin()) {
          if (itemsToPrune != null) {
            itemsToPrune=new ArrayList<RangerPolicy.RangerPolicyItem>();
          }
          itemsToPrune.add(policyItem);
        }
      }
    }
    if (itemsToPrune != null) {
      policyItems.removeAll(itemsToPrune);
    }
  }
  return policyItems;
}","private List<RangerPolicy.RangerPolicyItem> normalizeAndPrunePolicyItems(List<RangerPolicy.RangerPolicyItem> policyItems,final String componentType){
  if (CollectionUtils.isNotEmpty(policyItems)) {
    final String prefix=componentType + AbstractServiceStore.COMPONENT_ACCESSTYPE_SEPARATOR;
    List<RangerPolicy.RangerPolicyItem> itemsToPrune=null;
    for (    RangerPolicy.RangerPolicyItem policyItem : policyItems) {
      List<RangerPolicy.RangerPolicyItemAccess> policyItemAccesses=policyItem.getAccesses();
      if (CollectionUtils.isNotEmpty(policyItemAccesses)) {
        List<RangerPolicy.RangerPolicyItemAccess> accessesToPrune=null;
        for (        RangerPolicy.RangerPolicyItemAccess access : policyItemAccesses) {
          String accessType=access.getType();
          if (StringUtils.startsWith(accessType,prefix)) {
            String newAccessType=StringUtils.removeStart(accessType,prefix);
            access.setType(newAccessType);
          }
 else           if (accessType.contains(AbstractServiceStore.COMPONENT_ACCESSTYPE_SEPARATOR)) {
            if (accessesToPrune == null) {
              accessesToPrune=new ArrayList<RangerPolicy.RangerPolicyItemAccess>();
            }
            accessesToPrune.add(access);
          }
        }
        if (accessesToPrune != null) {
          policyItemAccesses.removeAll(accessesToPrune);
        }
        if (policyItemAccesses.isEmpty() && !policyItem.getDelegateAdmin()) {
          if (itemsToPrune == null) {
            itemsToPrune=new ArrayList<RangerPolicy.RangerPolicyItem>();
          }
          itemsToPrune.add(policyItem);
        }
      }
    }
    if (itemsToPrune != null) {
      policyItems.removeAll(itemsToPrune);
    }
  }
  return policyItems;
}",0.8646487721302113
166377,"@Override public void init(){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  String errorText=""String_Node_Str"";
  if (policyResources != null && policyResources.size() > 0 && serviceDef != null) {
    Set<String> policyResourceKeySet=policyResources.keySet();
    RangerServiceDefHelper serviceDefHelper=new RangerServiceDefHelper(serviceDef,false);
    Set<List<RangerResourceDef>> validResourceHierarchies=serviceDefHelper.getResourceHierarchies();
    for (    List<RangerResourceDef> validResourceHierarchy : validResourceHierarchies) {
      Set<String> resourceDefNameSet=serviceDefHelper.getAllResourceNames(validResourceHierarchy);
      if ((Sets.difference(policyResourceKeySet,resourceDefNameSet)).isEmpty()) {
        firstValidResourceDefHierarchy=validResourceHierarchy;
        break;
      }
    }
    if (firstValidResourceDefHierarchy != null) {
      List<String> resourceDefNameOrderedList=serviceDefHelper.getAllResourceNamesOrdered(firstValidResourceDefHierarchy);
      boolean foundGapsInResourceSpecs=false;
      boolean skipped=false;
      for (      String resourceDefName : resourceDefNameOrderedList) {
        RangerPolicyResource policyResource=policyResources.get(resourceDefName);
        if (policyResource == null) {
          skipped=true;
        }
 else         if (skipped) {
          foundGapsInResourceSpecs=true;
          break;
        }
      }
      if (foundGapsInResourceSpecs) {
        errorText=""String_Node_Str"";
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"");
        }
        firstValidResourceDefHierarchy=null;
      }
 else {
        matchers=new HashMap<String,RangerResourceMatcher>();
        for (        RangerResourceDef resourceDef : firstValidResourceDefHierarchy) {
          String resourceName=resourceDef.getName();
          RangerPolicyResource policyResource=policyResources.get(resourceName);
          if (policyResource != null) {
            RangerResourceMatcher matcher=createResourceMatcher(resourceDef,policyResource);
            if (matcher != null) {
              matchers.put(resourceName,matcher);
            }
 else {
              LOG.error(""String_Node_Str"" + resourceName);
            }
          }
 else {
            if (LOG.isDebugEnabled()) {
              LOG.debug(""String_Node_Str"" + resourceName + ""String_Node_Str"");
            }
          }
        }
      }
    }
 else {
      errorText=""String_Node_Str"";
    }
  }
 else {
    errorText=""String_Node_Str"";
  }
  if (matchers == null) {
    Set<String> policyResourceKeys=policyResources == null ? null : policyResources.keySet();
    String keysString=""String_Node_Str"";
    if (CollectionUtils.isNotEmpty(policyResourceKeys)) {
      for (      String policyResourceKeyName : policyResourceKeys) {
        keysString+=""String_Node_Str"" + policyResourceKeyName + ""String_Node_Str"";
      }
    }
    String serviceDefName=serviceDef == null ? ""String_Node_Str"" : serviceDef.getName();
    String validHierarchy=""String_Node_Str"";
    if (CollectionUtils.isNotEmpty(firstValidResourceDefHierarchy)) {
      RangerServiceDefHelper serviceDefHelper=new RangerServiceDefHelper(serviceDef,false);
      List<String> resourceDefNameOrderedList=serviceDefHelper.getAllResourceNamesOrdered(firstValidResourceDefHierarchy);
      for (      String resourceDefName : resourceDefNameOrderedList) {
        validHierarchy+=""String_Node_Str"" + resourceDefName + ""String_Node_Str"";
      }
    }
    LOG.warn(""String_Node_Str"" + errorText + ""String_Node_Str""+ serviceDefName+ ""String_Node_Str""+ keysString+ ""String_Node_Str""+ validHierarchy+ ""String_Node_Str"");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
}","@Override public void init(){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  String errorText=""String_Node_Str"";
  if (policyResources != null && policyResources.size() > 0 && serviceDef != null) {
    Set<String> policyResourceKeySet=policyResources.keySet();
    RangerServiceDefHelper serviceDefHelper=new RangerServiceDefHelper(serviceDef,false);
    Set<List<RangerResourceDef>> validResourceHierarchies=serviceDefHelper.getResourceHierarchies();
    for (    List<RangerResourceDef> validResourceHierarchy : validResourceHierarchies) {
      Set<String> resourceDefNameSet=serviceDefHelper.getAllResourceNames(validResourceHierarchy);
      if ((Sets.difference(policyResourceKeySet,resourceDefNameSet)).isEmpty()) {
        firstValidResourceDefHierarchy=validResourceHierarchy;
        break;
      }
    }
    if (firstValidResourceDefHierarchy != null) {
      List<String> resourceDefNameOrderedList=serviceDefHelper.getAllResourceNamesOrdered(firstValidResourceDefHierarchy);
      boolean foundGapsInResourceSpecs=false;
      boolean skipped=false;
      for (      String resourceDefName : resourceDefNameOrderedList) {
        RangerPolicyResource policyResource=policyResources.get(resourceDefName);
        if (policyResource == null) {
          skipped=true;
        }
 else         if (skipped) {
          foundGapsInResourceSpecs=true;
          break;
        }
      }
      if (foundGapsInResourceSpecs) {
        errorText=""String_Node_Str"";
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"");
        }
        firstValidResourceDefHierarchy=null;
      }
 else {
        matchers=new HashMap<String,RangerResourceMatcher>();
        for (        RangerResourceDef resourceDef : firstValidResourceDefHierarchy) {
          String resourceName=resourceDef.getName();
          RangerPolicyResource policyResource=policyResources.get(resourceName);
          if (policyResource != null) {
            RangerResourceMatcher matcher=createResourceMatcher(resourceDef,policyResource);
            if (matcher != null) {
              matchers.put(resourceName,matcher);
            }
 else {
              LOG.error(""String_Node_Str"" + resourceName);
            }
          }
 else {
            if (LOG.isDebugEnabled()) {
              LOG.debug(""String_Node_Str"" + resourceName + ""String_Node_Str"");
            }
          }
        }
      }
    }
 else {
      errorText=""String_Node_Str"";
    }
  }
 else {
    errorText=""String_Node_Str"";
  }
  if (matchers == null) {
    Set<String> policyResourceKeys=policyResources == null ? null : policyResources.keySet();
    StringBuffer sb=new StringBuffer();
    if (CollectionUtils.isNotEmpty(policyResourceKeys)) {
      for (      String policyResourceKeyName : policyResourceKeys) {
        sb.append(""String_Node_Str"").append(policyResourceKeyName).append(""String_Node_Str"");
      }
    }
    String keysString=sb.toString();
    String serviceDefName=serviceDef == null ? ""String_Node_Str"" : serviceDef.getName();
    String validHierarchy=""String_Node_Str"";
    if (CollectionUtils.isNotEmpty(firstValidResourceDefHierarchy)) {
      RangerServiceDefHelper serviceDefHelper=new RangerServiceDefHelper(serviceDef,false);
      List<String> resourceDefNameOrderedList=serviceDefHelper.getAllResourceNamesOrdered(firstValidResourceDefHierarchy);
      for (      String resourceDefName : resourceDefNameOrderedList) {
        validHierarchy+=""String_Node_Str"" + resourceDefName + ""String_Node_Str"";
      }
    }
    LOG.warn(""String_Node_Str"" + errorText + ""String_Node_Str""+ serviceDefName+ ""String_Node_Str""+ keysString+ ""String_Node_Str""+ validHierarchy+ ""String_Node_Str"");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
}",0.9655264208704912
166378,"@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  if (_policyResource != null) {
    builder.append(""String_Node_Str"");
    if (_policyResource.getValues() != null) {
      List<String> values=new ArrayList<String>(_policyResource.getValues());
      Collections.sort(values);
      builder.append(values);
    }
  }
  builder.append(""String_Node_Str"");
  if (_policyResource.getIsExcludes() == null) {
    builder.append(Boolean.FALSE);
  }
 else {
    builder.append(_policyResource.getIsExcludes());
  }
  builder.append(""String_Node_Str"");
  if (_policyResource.getIsRecursive() == null) {
    builder.append(Boolean.FALSE);
  }
 else {
    builder.append(_policyResource.getIsRecursive());
  }
  builder.append(""String_Node_Str"");
  return builder.toString();
}","@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  if (_policyResource != null) {
    builder.append(""String_Node_Str"");
    if (_policyResource.getValues() != null) {
      List<String> values=new ArrayList<String>(_policyResource.getValues());
      Collections.sort(values);
      builder.append(values);
    }
    builder.append(""String_Node_Str"");
    if (_policyResource.getIsExcludes() == null) {
      builder.append(Boolean.FALSE);
    }
 else {
      builder.append(_policyResource.getIsExcludes());
    }
    builder.append(""String_Node_Str"");
    if (_policyResource.getIsRecursive() == null) {
      builder.append(Boolean.FALSE);
    }
 else {
      builder.append(_policyResource.getIsRecursive());
    }
  }
  builder.append(""String_Node_Str"");
  return builder.toString();
}",0.983490566037736
166379,"@Override public List<RangerTagResourceMap> getTagResourceMapsForResourceGuid(String resourceGuid) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceGuid + ""String_Node_Str"");
  }
  SearchFilter filter=new SearchFilter();
  RangerServiceResource resource=getServiceResourceByGuid(resourceGuid);
  filter.setParam(SearchFilter.TAG_RESOURCE_ID,resource.getId().toString());
  List<RangerTagResourceMap> ret=getTagResourceMaps(filter);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceGuid + ""String_Node_Str""+ ret);
  }
  return ret;
}","@Override public List<RangerTagResourceMap> getTagResourceMapsForResourceGuid(String resourceGuid) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceGuid + ""String_Node_Str"");
  }
  List<RangerTagResourceMap> ret=null;
  RangerServiceResource resource=getServiceResourceByGuid(resourceGuid);
  if (resource != null) {
    SearchFilter filter=new SearchFilter();
    filter.setParam(SearchFilter.TAG_RESOURCE_ID,resource.getId().toString());
    ret=getTagResourceMaps(filter);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceGuid + ""String_Node_Str""+ ret);
  }
  return ret;
}",0.7922705314009661
166380,"@Override public boolean initialize(Properties properties){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  boolean ret=true;
  if (properties == null || MapUtils.isEmpty(properties)) {
    LOG.error(""String_Node_Str"");
    this.properties=new Properties();
  }
 else {
    this.properties=properties;
  }
  Properties atlasProperties=new Properties();
  InputStream inputStream=getClass().getClassLoader().getResourceAsStream(TAGSYNC_ATLAS_PROPERTIES_FILE_NAME);
  if (inputStream != null) {
    try {
      atlasProperties.load(inputStream);
    }
 catch (    IOException ioException) {
      ret=false;
      LOG.error(""String_Node_Str"" + TAGSYNC_ATLAS_PROPERTIES_FILE_NAME);
    }
  }
 else {
    ret=false;
    LOG.error(""String_Node_Str"");
  }
  if (ret) {
    if (StringUtils.isBlank(atlasProperties.getProperty(TAGSYNC_ATLAS_KAFKA_ENDPOINTS))) {
      ret=false;
      LOG.error(""String_Node_Str"" + TAGSYNC_ATLAS_KAFKA_ENDPOINTS + ""String_Node_Str"");
    }
    if (StringUtils.isBlank(atlasProperties.getProperty(TAGSYNC_ATLAS_ZOOKEEPER_ENDPOINT))) {
      ret=false;
      LOG.error(""String_Node_Str"" + TAGSYNC_ATLAS_ZOOKEEPER_ENDPOINT + ""String_Node_Str"");
    }
    if (StringUtils.isBlank(atlasProperties.getProperty(TAGSYNC_ATLAS_CONSUMER_GROUP))) {
      ret=false;
      LOG.error(""String_Node_Str"" + TAGSYNC_ATLAS_CONSUMER_GROUP + ""String_Node_Str"");
    }
  }
  if (ret) {
    NotificationModule notificationModule=new NotificationModule();
    Injector injector=Guice.createInjector(notificationModule);
    EntityNotificationConsumerProvider consumerProvider=injector.getInstance(EntityNotificationConsumerProvider.class);
    consumerTask=new ConsumerRunnable(consumerProvider.get());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + ret);
  }
  return ret;
}","@Override public boolean initialize(Properties properties){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  boolean ret=true;
  if (properties == null || MapUtils.isEmpty(properties)) {
    LOG.error(""String_Node_Str"");
    this.properties=new Properties();
  }
 else {
    this.properties=properties;
  }
  Properties atlasProperties=new Properties();
  InputStream inputStream=getClass().getClassLoader().getResourceAsStream(TAGSYNC_ATLAS_PROPERTIES_FILE_NAME);
  if (inputStream != null) {
    try {
      atlasProperties.load(inputStream);
    }
 catch (    Exception exception) {
      ret=false;
      LOG.error(""String_Node_Str"" + TAGSYNC_ATLAS_PROPERTIES_FILE_NAME,exception);
    }
 finally {
      try {
        inputStream.close();
      }
 catch (      IOException ioException) {
        LOG.error(""String_Node_Str"",ioException);
      }
    }
  }
 else {
    ret=false;
    LOG.error(""String_Node_Str"");
  }
  if (ret) {
    if (StringUtils.isBlank(atlasProperties.getProperty(TAGSYNC_ATLAS_KAFKA_ENDPOINTS))) {
      ret=false;
      LOG.error(""String_Node_Str"" + TAGSYNC_ATLAS_KAFKA_ENDPOINTS + ""String_Node_Str"");
    }
    if (StringUtils.isBlank(atlasProperties.getProperty(TAGSYNC_ATLAS_ZOOKEEPER_ENDPOINT))) {
      ret=false;
      LOG.error(""String_Node_Str"" + TAGSYNC_ATLAS_ZOOKEEPER_ENDPOINT + ""String_Node_Str"");
    }
    if (StringUtils.isBlank(atlasProperties.getProperty(TAGSYNC_ATLAS_CONSUMER_GROUP))) {
      ret=false;
      LOG.error(""String_Node_Str"" + TAGSYNC_ATLAS_CONSUMER_GROUP + ""String_Node_Str"");
    }
  }
  if (ret) {
    NotificationModule notificationModule=new NotificationModule();
    Injector injector=Guice.createInjector(notificationModule);
    EntityNotificationConsumerProvider consumerProvider=injector.getInstance(EntityNotificationConsumerProvider.class);
    consumerTask=new ConsumerRunnable(consumerProvider.get());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + ret);
  }
  return ret;
}",0.9514563106796116
166381,"@Override public boolean initialize(Properties properties){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  if (properties == null || MapUtils.isEmpty(properties)) {
    LOG.error(""String_Node_Str"");
    this.properties=new Properties();
  }
 else {
    this.properties=properties;
  }
  boolean ret=true;
  if (StringUtils.isBlank(TagSyncConfig.getTagSourceFileName(properties))) {
    ret=false;
    LOG.error(""String_Node_Str"");
  }
  if (ret) {
    long fileModTimeCheckIntervalInMs=TagSyncConfig.getTagSourceFileModTimeCheckIntervalInMillis(properties);
    if (fileModTimeCheckIntervalInMs <= 0L) {
      LOG.info(""String_Node_Str"" + fileModTimeCheckIntervalInMs + ""String_Node_Str"");
      LOG.info(""String_Node_Str"");
      fileModTimeCheckIntervalInMs=60 * 1000;
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + fileModTimeCheckIntervalInMs + ""String_Node_Str"");
      }
    }
    sourceFileName=TagSyncConfig.getTagSourceFileName(properties);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + sourceFileName);
    }
    String realFileName=TagSyncConfig.getResourceFileName(sourceFileName);
    if (realFileName != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + realFileName);
      }
      sourceFileName=realFileName;
    }
 else {
      LOG.error(sourceFileName + ""String_Node_Str"");
      ret=false;
    }
  }
  if (ret) {
    try {
      gson=new GsonBuilder().setDateFormat(""String_Node_Str"").setPrettyPrinting().create();
    }
 catch (    Throwable excp) {
      LOG.fatal(""String_Node_Str"",excp);
      ret=false;
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + sourceFileName + ""String_Node_Str""+ ret);
  }
  return ret;
}","@Override public boolean initialize(Properties props){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  if (props == null || MapUtils.isEmpty(props)) {
    LOG.error(""String_Node_Str"");
    this.properties=new Properties();
  }
 else {
    this.properties=props;
  }
  boolean ret=true;
  if (StringUtils.isBlank(TagSyncConfig.getTagSourceFileName(properties))) {
    ret=false;
    LOG.error(""String_Node_Str"");
  }
  if (ret) {
    long fileModTimeCheckIntervalInMs=TagSyncConfig.getTagSourceFileModTimeCheckIntervalInMillis(properties);
    if (fileModTimeCheckIntervalInMs <= 0L) {
      LOG.info(""String_Node_Str"" + fileModTimeCheckIntervalInMs + ""String_Node_Str"");
      LOG.info(""String_Node_Str"");
      fileModTimeCheckIntervalInMs=60 * 1000;
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + fileModTimeCheckIntervalInMs + ""String_Node_Str"");
      }
    }
    sourceFileName=TagSyncConfig.getTagSourceFileName(properties);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + sourceFileName);
    }
    String realFileName=TagSyncConfig.getResourceFileName(sourceFileName);
    if (realFileName != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + realFileName);
      }
      sourceFileName=realFileName;
    }
 else {
      LOG.error(sourceFileName + ""String_Node_Str"");
      ret=false;
    }
  }
  if (ret) {
    try {
      gson=new GsonBuilder().setDateFormat(""String_Node_Str"").setPrettyPrinting().create();
    }
 catch (    Throwable excp) {
      LOG.fatal(""String_Node_Str"",excp);
      ret=false;
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + sourceFileName + ""String_Node_Str""+ ret);
  }
  return ret;
}",0.994343891402715
166382,"private static void retrieveUsers(LdapContext ldapContext,UserSync userSyncObj) throws Throwable {
  String msg;
  if (userSyncObj.getUserNameAttribute() == null || userSyncObj.getUserNameAttribute().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if (userSyncObj.getUserObjClassName() == null || userSyncObj.getUserObjClassName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if (userSyncObj.getUserGroupMemberName() == null || userSyncObj.getUserGroupMemberName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if ((userSyncObj.getUserSearchBase() == null || userSyncObj.getUserSearchBase().isEmpty()) && (userSyncObj.getSearchBase() == null || userSyncObj.getSearchBase().isEmpty())) {
    msg=""String_Node_Str"" + ""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  userSyncObj.getAllUsers(ldapContext);
}","private static void retrieveUsers(LdapContext ldapContext,UserSync userSyncObj) throws Throwable {
  String msg;
  if (userSyncObj.getUserNameAttribute() == null || userSyncObj.getUserNameAttribute().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if (userSyncObj.getUserObjClassName() == null || userSyncObj.getUserObjClassName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if ((userSyncObj.getUserSearchBase() == null || userSyncObj.getUserSearchBase().isEmpty()) && (userSyncObj.getSearchBase() == null || userSyncObj.getSearchBase().isEmpty())) {
    msg=""String_Node_Str"" + ""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  userSyncObj.getAllUsers(ldapContext);
}",0.6915451895043732
166383,"private static void retrieveGroups(LdapContext ldapContext,UserSync userSyncObj) throws Throwable {
  String msg;
  if (userSyncObj.getGroupNameAttrName() == null || userSyncObj.getGroupNameAttrName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if (userSyncObj.getGroupObjClassName() == null || userSyncObj.getGroupObjClassName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if (userSyncObj.getUserGroupMemberName() == null || userSyncObj.getUserGroupMemberName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if ((userSyncObj.getGroupSearchBase() == null || userSyncObj.getGroupSearchBase().isEmpty()) && (userSyncObj.getSearchBase() == null || userSyncObj.getSearchBase().isEmpty())) {
    msg=""String_Node_Str"" + ""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  userSyncObj.getAllGroups(ldapContext);
}","private static void retrieveGroups(LdapContext ldapContext,UserSync userSyncObj) throws Throwable {
  String msg;
  if (userSyncObj.getGroupNameAttrName() == null || userSyncObj.getGroupNameAttrName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if (userSyncObj.getGroupObjClassName() == null || userSyncObj.getGroupObjClassName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if (userSyncObj.getGroupMemberName() == null || userSyncObj.getGroupMemberName().isEmpty()) {
    msg=""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  if ((userSyncObj.getGroupSearchBase() == null || userSyncObj.getGroupSearchBase().isEmpty()) && (userSyncObj.getSearchBase() == null || userSyncObj.getSearchBase().isEmpty())) {
    msg=""String_Node_Str"" + ""String_Node_Str"";
    throw new NullArgumentException(msg);
  }
  userSyncObj.getAllGroups(ldapContext);
}",0.9957805907172996
166384,"public void getAllUsers(LdapContext ldapContext) throws Throwable {
  int noOfUsers=0;
  Attribute userNameAttr=null;
  String groupName=null;
  Attribute groupMemberAttr;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  Set<String> userSearchAttributes=new HashSet<>();
  if (userNameAttribute != null) {
    userSearchAttributes.add(userNameAttribute);
  }
  if (userGroupMemberName != null) {
    userSearchAttributes.add(userGroupMemberName);
  }
  if (userSearchAttributes.size() > 0) {
    userSearchControls.setReturningAttributes(userSearchAttributes.toArray(new String[userSearchAttributes.size()]));
  }
 else {
    userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  }
  String extendedUserSearchFilter=""String_Node_Str"" + userObjClassName + ""String_Node_Str"";
  if (userSearchFilter != null && !userSearchFilter.trim().isEmpty()) {
    String customFilter=userSearchFilter.trim();
    if (!customFilter.startsWith(""String_Node_Str"")) {
      customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
    }
    extendedUserSearchFilter=""String_Node_Str"" + extendedUserSearchFilter + customFilter+ ""String_Node_Str"";
  }
  byte[] cookie=null;
  logFile.println();
  logFile.println(""String_Node_Str"");
  try {
    do {
      userSearchResultEnum=ldapContext.search(userSearchBase,extendedUserSearchFilter,userSearchControls);
      while (userSearchResultEnum.hasMore()) {
        final SearchResult userEntry=userSearchResultEnum.next();
        if (userEntry == null) {
          logFile.println(""String_Node_Str"");
          continue;
        }
        Attributes attributes=userEntry.getAttributes();
        if (attributes == null) {
          logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
          continue;
        }
        if (userNameAttribute == null || userNameAttribute.isEmpty()) {
          for (int i=0; i < userNameAttrValues.length; i++) {
            userNameAttr=attributes.get(userNameAttrValues[i]);
            if (userNameAttr != null) {
              userNameAttribute=userNameAttrValues[i];
              break;
            }
          }
          if (userNameAttr == null) {
            logFile.print(""String_Node_Str"");
            for (int i=0; i < userNameAttrValues.length; i++) {
              logFile.print(userNameAttrValues[i] + ""String_Node_Str"");
            }
            logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
            continue;
          }
        }
 else {
          userNameAttr=attributes.get(userNameAttribute);
          if (userNameAttr == null) {
            logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
            continue;
          }
        }
        String userName=userNameAttr.get().toString();
        if (userName == null || userName.trim().isEmpty()) {
          logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
          continue;
        }
        userName=userName.toLowerCase();
        Set<String> groups=new HashSet<>();
        groupMemberAttr=attributes.get(userGroupMemberName);
        if (groupMemberAttr != null) {
          NamingEnumeration<?> groupEnum=groupMemberAttr.getAll();
          while (groupEnum.hasMore()) {
            String groupRes=groupEnum.next().toString();
            groups.add(groupRes);
            if (groupName == null || groupName.isEmpty()) {
              groupName=groupRes;
            }
          }
        }
        if (noOfUsers < 20) {
          logFile.println(""String_Node_Str"" + userName + ""String_Node_Str""+ groups);
        }
        noOfUsers++;
      }
      Control[] controls=ldapContext.getResponseControls();
      if (controls != null) {
        for (int i=0; i < controls.length; i++) {
          if (controls[i] instanceof PagedResultsResponseControl) {
            PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
            cookie=prrc.getCookie();
          }
        }
      }
 else {
        logFile.println(""String_Node_Str"");
      }
      if (config.isPagedResultsEnabled()) {
        ldapContext.setRequestControls(new Control[]{new PagedResultsControl(config.getPagedResultsSize(),cookie,Control.CRITICAL)});
      }
    }
 while (cookie != null);
    logFile.println(""String_Node_Str"" + noOfUsers);
  }
 catch (  NamingException ne) {
    String msg=""String_Node_Str"";
    if ((config.getUserNameAttribute() != null && !config.getUserNameAttribute().isEmpty()) || (config.getUserObjectClass() != null && !config.getUserObjectClass().isEmpty()) || (config.getGroupNameAttribute() != null && !config.getGroupNameAttribute().isEmpty())|| (config.getUserSearchBase() != null && !config.getUserSearchBase().isEmpty())|| (config.getUserSearchFilter() != null && !config.getUserSearchFilter().isEmpty())) {
      throw new Exception(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      throw new Exception(msg + ne);
    }
  }
 finally {
    if (userSearchResultEnum != null) {
      userSearchResultEnum.close();
    }
  }
}","public void getAllUsers(LdapContext ldapContext) throws Throwable {
  int noOfUsers=0;
  Attribute userNameAttr=null;
  Attribute groupMemberAttr;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  Set<String> userSearchAttributes=new HashSet<>();
  if (userNameAttribute != null) {
    userSearchAttributes.add(userNameAttribute);
  }
  if (userGroupMemberName != null) {
    userSearchAttributes.add(userGroupMemberName);
  }
  if (userSearchAttributes.size() > 0) {
    userSearchControls.setReturningAttributes(userSearchAttributes.toArray(new String[userSearchAttributes.size()]));
  }
 else {
    userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  }
  String extendedUserSearchFilter=""String_Node_Str"" + userObjClassName + ""String_Node_Str"";
  if (userSearchFilter != null && !userSearchFilter.trim().isEmpty()) {
    String customFilter=userSearchFilter.trim();
    if (!customFilter.startsWith(""String_Node_Str"")) {
      customFilter=""String_Node_Str"" + customFilter + ""String_Node_Str"";
    }
    extendedUserSearchFilter=""String_Node_Str"" + extendedUserSearchFilter + customFilter+ ""String_Node_Str"";
  }
  byte[] cookie=null;
  logFile.println();
  logFile.println(""String_Node_Str"");
  try {
    do {
      userSearchResultEnum=ldapContext.search(userSearchBase,extendedUserSearchFilter,userSearchControls);
      while (userSearchResultEnum.hasMore()) {
        final SearchResult userEntry=userSearchResultEnum.next();
        if (userEntry == null) {
          logFile.println(""String_Node_Str"");
          continue;
        }
        Attributes attributes=userEntry.getAttributes();
        if (attributes == null) {
          logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
          continue;
        }
        if (userNameAttribute == null || userNameAttribute.isEmpty()) {
          for (int i=0; i < userNameAttrValues.length; i++) {
            userNameAttr=attributes.get(userNameAttrValues[i]);
            if (userNameAttr != null) {
              userNameAttribute=userNameAttrValues[i];
              break;
            }
          }
          if (userNameAttr == null) {
            logFile.print(""String_Node_Str"");
            for (int i=0; i < userNameAttrValues.length; i++) {
              logFile.print(userNameAttrValues[i] + ""String_Node_Str"");
            }
            logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
            continue;
          }
        }
 else {
          userNameAttr=attributes.get(userNameAttribute);
          if (userNameAttr == null) {
            logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
            continue;
          }
        }
        String userName=userNameAttr.get().toString();
        if (userName == null || userName.trim().isEmpty()) {
          logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
          continue;
        }
        userName=userName.toLowerCase();
        Set<String> groups=new HashSet<>();
        groupMemberAttr=attributes.get(userGroupMemberName);
        if (groupMemberAttr != null) {
          NamingEnumeration<?> groupEnum=groupMemberAttr.getAll();
          while (groupEnum.hasMore()) {
            String groupRes=groupEnum.next().toString();
            groups.add(groupRes);
            if (groupName == null || groupName.isEmpty()) {
              groupName=groupRes;
            }
          }
        }
        if (noOfUsers < 20) {
          logFile.println(""String_Node_Str"" + userName + ""String_Node_Str""+ groups);
        }
        noOfUsers++;
      }
      Control[] controls=ldapContext.getResponseControls();
      if (controls != null) {
        for (int i=0; i < controls.length; i++) {
          if (controls[i] instanceof PagedResultsResponseControl) {
            PagedResultsResponseControl prrc=(PagedResultsResponseControl)controls[i];
            cookie=prrc.getCookie();
          }
        }
      }
 else {
        logFile.println(""String_Node_Str"");
      }
      if (config.isPagedResultsEnabled()) {
        ldapContext.setRequestControls(new Control[]{new PagedResultsControl(config.getPagedResultsSize(),cookie,Control.CRITICAL)});
      }
    }
 while (cookie != null);
    logFile.println(""String_Node_Str"" + noOfUsers);
  }
 catch (  NamingException ne) {
    String msg=""String_Node_Str"";
    if ((config.getUserNameAttribute() != null && !config.getUserNameAttribute().isEmpty()) || (config.getUserObjectClass() != null && !config.getUserObjectClass().isEmpty()) || (config.getGroupNameAttribute() != null && !config.getGroupNameAttribute().isEmpty())|| (config.getUserSearchBase() != null && !config.getUserSearchBase().isEmpty())|| (config.getUserSearchFilter() != null && !config.getUserSearchFilter().isEmpty())) {
      throw new Exception(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      throw new Exception(msg + ne);
    }
  }
 finally {
    if (userSearchResultEnum != null) {
      userSearchResultEnum.close();
    }
  }
}",0.997650155089764
166385,"private void findBasicGroupProperties(LdapContext ldapContext) throws Throwable {
  int noOfGroups;
  Attribute groupNameAttr;
  String groupBase;
  String groupFilter;
  Attribute groupMemberAttr;
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  SearchControls groupSearchControls=new SearchControls();
  groupSearchControls.setSearchScope(config.getGroupSearchScope());
  try {
    int baseIndex=groupName.indexOf(""String_Node_Str"");
    groupBase=groupName.substring(baseIndex + 1);
    groupFilter=groupName.substring(0,baseIndex);
    groupSearchResultEnum=ldapContext.search(groupBase,groupFilter,groupSearchControls);
    noOfGroups=0;
    while (groupSearchResultEnum.hasMore()) {
      if (noOfGroups >= 1) {
        break;
      }
      final SearchResult groupEntry=groupSearchResultEnum.next();
      if (groupEntry == null) {
        continue;
      }
      Attributes groupAttributes=groupEntry.getAttributes();
      if (groupAttributes == null) {
        logFile.println(""String_Node_Str"" + groupEntry.getNameInNamespace());
        continue;
      }
      Attribute groupObjClassAttr=groupAttributes.get(""String_Node_Str"");
      if (groupObjClassAttr != null) {
        NamingEnumeration<?> groupObjClassEnum=groupObjClassAttr.getAll();
        while (groupObjClassEnum.hasMore()) {
          String groupObjClassStr=groupObjClassEnum.next().toString();
          for (int i=0; i < groupObjectClassValues.length; i++) {
            if (groupObjClassStr.equalsIgnoreCase(groupObjectClassValues[i])) {
              groupObjClassName=groupObjClassStr;
              break;
            }
          }
        }
      }
 else {
        logFile.println(""String_Node_Str"" + groupEntry.getNameInNamespace());
        continue;
      }
      if (groupNameAttrName == null || groupNameAttrName.isEmpty()) {
        for (int i=0; i < groupNameAttrValues.length; i++) {
          groupNameAttr=groupAttributes.get(groupNameAttrValues[i]);
          if (groupNameAttr != null) {
            groupNameAttrName=groupNameAttrValues[i];
            break;
          }
        }
      }
      for (int i=0; i < groupMemAttrValues.length; i++) {
        groupMemberAttr=groupAttributes.get(groupMemAttrValues[i]);
        if (groupMemberAttr != null) {
          groupMemberName=groupMemAttrValues[i];
          break;
        }
      }
      noOfGroups++;
    }
    installProps.println(""String_Node_Str"");
    installProps.println(""String_Node_Str"" + groupMemberName);
    installProps.println(""String_Node_Str"" + groupNameAttrName);
    installProps.println(""String_Node_Str"" + groupObjClassName);
    ambariProps.println(""String_Node_Str"");
    ambariProps.println(""String_Node_Str"" + groupMemberName);
    ambariProps.println(""String_Node_Str"" + groupNameAttrName);
    ambariProps.println(""String_Node_Str"" + groupObjClassName);
  }
  finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
  }
}","private void findBasicGroupProperties(LdapContext ldapContext) throws Throwable {
  int noOfGroups;
  Attribute groupNameAttr;
  String groupBase;
  String groupFilter;
  Attribute groupMemberAttr;
  NamingEnumeration<SearchResult> groupSearchResultEnum=null;
  SearchControls groupSearchControls=new SearchControls();
  groupSearchControls.setSearchScope(config.getGroupSearchScope());
  try {
    if (groupName == null || groupName.isEmpty()) {
      groupSearchResultEnum=ldapContext.search(searchBase,null);
    }
 else {
      int baseIndex=groupName.indexOf(""String_Node_Str"");
      groupBase=groupName.substring(baseIndex + 1);
      groupFilter=groupName.substring(0,baseIndex);
      groupSearchResultEnum=ldapContext.search(groupBase,groupFilter,groupSearchControls);
    }
    noOfGroups=0;
    while (groupSearchResultEnum.hasMore()) {
      if (noOfGroups >= 1) {
        break;
      }
      final SearchResult groupEntry=groupSearchResultEnum.next();
      if (groupEntry == null) {
        continue;
      }
      Attributes groupAttributes=groupEntry.getAttributes();
      if (groupAttributes == null) {
        logFile.println(""String_Node_Str"" + groupEntry.getNameInNamespace());
        continue;
      }
      Attribute groupObjClassAttr=groupAttributes.get(""String_Node_Str"");
      if (groupObjClassAttr != null) {
        NamingEnumeration<?> groupObjClassEnum=groupObjClassAttr.getAll();
        while (groupObjClassEnum.hasMore()) {
          String groupObjClassStr=groupObjClassEnum.next().toString();
          for (int i=0; i < groupObjectClassValues.length; i++) {
            if (groupObjClassStr.equalsIgnoreCase(groupObjectClassValues[i])) {
              groupObjClassName=groupObjClassStr;
              break;
            }
          }
        }
      }
 else {
        logFile.println(""String_Node_Str"" + groupEntry.getNameInNamespace());
        continue;
      }
      if (groupNameAttrName == null || groupNameAttrName.isEmpty()) {
        for (int i=0; i < groupNameAttrValues.length; i++) {
          groupNameAttr=groupAttributes.get(groupNameAttrValues[i]);
          if (groupNameAttr != null) {
            groupNameAttrName=groupNameAttrValues[i];
            break;
          }
        }
      }
      for (int i=0; i < groupMemAttrValues.length; i++) {
        groupMemberAttr=groupAttributes.get(groupMemAttrValues[i]);
        if (groupMemberAttr != null) {
          groupMemberName=groupMemAttrValues[i];
          break;
        }
      }
      noOfGroups++;
    }
    installProps.println(""String_Node_Str"");
    installProps.println(""String_Node_Str"" + groupMemberName);
    installProps.println(""String_Node_Str"" + groupNameAttrName);
    installProps.println(""String_Node_Str"" + groupObjClassName);
    ambariProps.println(""String_Node_Str"");
    ambariProps.println(""String_Node_Str"" + groupMemberName);
    ambariProps.println(""String_Node_Str"" + groupNameAttrName);
    ambariProps.println(""String_Node_Str"" + groupObjClassName);
  }
  finally {
    if (groupSearchResultEnum != null) {
      groupSearchResultEnum.close();
    }
  }
}",0.976044936395176
166386,"private void findBasicUserProperties(LdapContext ldapContext,boolean isOutputNeeded) throws Throwable {
  String bindDn=config.getLdapBindDn();
  String userSFilter=config.getUserSearchFilter();
  String userSBase=config.getUserSearchBase();
  Attribute userNameAttr=null;
  Attribute groupMemberAttr;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  int noOfUsers=0;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  try {
    if (userSBase == null || userSBase.isEmpty()) {
      if (bindDn.contains(""String_Node_Str"")) {
        userSBase=bindDn.substring(bindDn.indexOf(""String_Node_Str"") + 1);
        userSBase=""String_Node_Str"".concat(userSBase);
        userSBase=userSBase.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        userSBase=bindDn.substring(bindDn.indexOf(""String_Node_Str"") + 1);
      }
    }
    if (userSFilter == null || userSFilter.isEmpty()) {
      if (bindDn.contains(""String_Node_Str"")) {
        userSFilter=""String_Node_Str"" + bindDn;
      }
 else {
        int cnEndIndex=bindDn.indexOf(""String_Node_Str"");
        userSFilter=bindDn.substring(0,cnEndIndex);
      }
    }
    try {
      userSearchResultEnum=ldapContext.search(userSBase,userSFilter,userSearchControls);
      while (userSearchResultEnum.hasMore()) {
        if (noOfUsers >= 1) {
          break;
        }
        final SearchResult userEntry=userSearchResultEnum.next();
        if (userEntry == null) {
          logFile.println(""String_Node_Str"");
          continue;
        }
        Attributes attributes=userEntry.getAttributes();
        if (attributes == null) {
          logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
          continue;
        }
        if (userNameAttribute == null || userNameAttribute.isEmpty()) {
          for (int i=0; i < userNameAttrValues.length; i++) {
            userNameAttr=attributes.get(userNameAttrValues[i]);
            if (userNameAttr != null) {
              userNameAttribute=userNameAttrValues[i];
              break;
            }
          }
          if (userNameAttr == null) {
            logFile.print(""String_Node_Str"");
            for (int i=0; i < userNameAttrValues.length; i++) {
              logFile.print(userNameAttrValues[i] + ""String_Node_Str"");
            }
            logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
            continue;
          }
        }
 else {
          userNameAttr=attributes.get(userNameAttribute);
          if (userNameAttr == null) {
            logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
            continue;
          }
        }
        String userName=(String)userNameAttr.get();
        if (userName == null || userName.trim().isEmpty()) {
          logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
          continue;
        }
        userName=userName.toLowerCase();
        Attribute userObjClassAttr=attributes.get(""String_Node_Str"");
        NamingEnumeration<?> userObjClassEnum=userObjClassAttr.getAll();
        String userObjClass=null;
        while (userObjClassEnum.hasMore()) {
          userObjClass=userObjClassEnum.next().toString();
          if (userObjClassName == null || userObjClassName.isEmpty()) {
            if (userObjClass != null) {
              for (int i=0; i < userObjClassValues.length; i++) {
                if (userObjClass.equalsIgnoreCase(userObjClassValues[i])) {
                  userObjClassName=userObjClass;
                  break;
                }
              }
            }
 else {
              logFile.println(""String_Node_Str"" + userName);
            }
          }
        }
        if (userObjClassName == null || userObjClassName.isEmpty()) {
          userObjClassName=userObjClass;
        }
        for (int i=0; i < userGroupMemAttrValues.length; i++) {
          groupMemberAttr=attributes.get(userGroupMemAttrValues[i]);
          if (groupMemberAttr != null) {
            userGroupMemberName=userGroupMemAttrValues[i];
            groupName=groupMemberAttr.get(1).toString();
            break;
          }
        }
        noOfUsers++;
      }
    }
 catch (    NamingException ne) {
      String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      if ((config.getUserSearchBase() != null && !config.getUserSearchBase().isEmpty()) || (config.getUserSearchFilter() != null && !config.getUserSearchFilter().isEmpty())) {
        throw new Exception(msg + ""String_Node_Str"");
      }
 else {
        throw new Exception(msg + ne);
      }
    }
    if (isOutputNeeded) {
      installProps.println(""String_Node_Str"");
      installProps.println(""String_Node_Str"" + userNameAttribute);
      installProps.println(""String_Node_Str"" + userObjClassName);
      installProps.println(""String_Node_Str"" + userGroupMemberName);
      ambariProps.println(""String_Node_Str"");
      ambariProps.println(""String_Node_Str"" + userNameAttribute);
      ambariProps.println(""String_Node_Str"" + userObjClassName);
      ambariProps.println(""String_Node_Str"" + userGroupMemberName);
    }
  }
  finally {
    try {
      if (userSearchResultEnum != null) {
        userSearchResultEnum.close();
      }
    }
 catch (    NamingException ne) {
      throw new Exception(""String_Node_Str"" + ne);
    }
  }
}","private void findBasicUserProperties(LdapContext ldapContext,boolean isOutputNeeded) throws Throwable {
  String bindDn=config.getLdapBindDn();
  String userSFilter=config.getUserSearchFilter();
  String userSBase=config.getUserSearchBase();
  Attribute userNameAttr=null;
  Attribute groupMemberAttr;
  SearchControls userSearchControls=new SearchControls();
  userSearchControls.setSearchScope(config.getUserSearchScope());
  userSearchControls.setReturningAttributes(new java.lang.String[]{""String_Node_Str"",""String_Node_Str""});
  int noOfUsers=0;
  NamingEnumeration<SearchResult> userSearchResultEnum=null;
  try {
    if (userSBase == null || userSBase.isEmpty()) {
      if (bindDn.contains(""String_Node_Str"")) {
        userSBase=bindDn.substring(bindDn.indexOf(""String_Node_Str"") + 1);
        userSBase=""String_Node_Str"".concat(userSBase);
        userSBase=userSBase.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        userSBase=bindDn.substring(bindDn.indexOf(""String_Node_Str"") + 1);
      }
    }
    if (userSFilter == null || userSFilter.isEmpty()) {
      if (bindDn.contains(""String_Node_Str"")) {
        userSFilter=""String_Node_Str"" + bindDn;
      }
 else {
        int cnEndIndex=bindDn.indexOf(""String_Node_Str"");
        userSFilter=bindDn.substring(0,cnEndIndex);
      }
    }
    try {
      userSearchResultEnum=ldapContext.search(userSBase,userSFilter,userSearchControls);
      while (userSearchResultEnum.hasMore()) {
        if (noOfUsers >= 1) {
          break;
        }
        final SearchResult userEntry=userSearchResultEnum.next();
        if (userEntry == null) {
          logFile.println(""String_Node_Str"");
          continue;
        }
        Attributes attributes=userEntry.getAttributes();
        if (attributes == null) {
          logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
          continue;
        }
        if (userNameAttribute == null || userNameAttribute.isEmpty()) {
          for (int i=0; i < userNameAttrValues.length; i++) {
            userNameAttr=attributes.get(userNameAttrValues[i]);
            if (userNameAttr != null) {
              userNameAttribute=userNameAttrValues[i];
              break;
            }
          }
          if (userNameAttr == null) {
            logFile.print(""String_Node_Str"");
            for (int i=0; i < userNameAttrValues.length; i++) {
              logFile.print(userNameAttrValues[i] + ""String_Node_Str"");
            }
            logFile.println(""String_Node_Str"" + userEntry.getNameInNamespace());
            continue;
          }
        }
 else {
          userNameAttr=attributes.get(userNameAttribute);
          if (userNameAttr == null) {
            logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
            continue;
          }
        }
        String userName=(String)userNameAttr.get();
        if (userName == null || userName.trim().isEmpty()) {
          logFile.println(""String_Node_Str"" + userNameAttribute + ""String_Node_Str""+ userEntry.getNameInNamespace());
          continue;
        }
        userName=userName.toLowerCase();
        Attribute userObjClassAttr=attributes.get(""String_Node_Str"");
        NamingEnumeration<?> userObjClassEnum=userObjClassAttr.getAll();
        String userObjClass=null;
        while (userObjClassEnum.hasMore()) {
          userObjClass=userObjClassEnum.next().toString();
          if (userObjClassName == null || userObjClassName.isEmpty()) {
            if (userObjClass != null) {
              for (int i=0; i < userObjClassValues.length; i++) {
                if (userObjClass.equalsIgnoreCase(userObjClassValues[i])) {
                  userObjClassName=userObjClass;
                  break;
                }
              }
            }
 else {
              logFile.println(""String_Node_Str"" + userName);
            }
          }
        }
        if (userObjClassName == null || userObjClassName.isEmpty()) {
          userObjClassName=userObjClass;
        }
        for (int i=0; i < userGroupMemAttrValues.length; i++) {
          groupMemberAttr=attributes.get(userGroupMemAttrValues[i]);
          if (groupMemberAttr != null) {
            userGroupMemberName=userGroupMemAttrValues[i];
            groupName=groupMemberAttr.get(0).toString();
            break;
          }
        }
        noOfUsers++;
      }
    }
 catch (    NamingException ne) {
      String msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      if ((config.getUserSearchBase() != null && !config.getUserSearchBase().isEmpty()) || (config.getUserSearchFilter() != null && !config.getUserSearchFilter().isEmpty())) {
        throw new Exception(msg + ""String_Node_Str"");
      }
 else {
        throw new Exception(msg + ne);
      }
    }
    if (isOutputNeeded) {
      installProps.println(""String_Node_Str"");
      installProps.println(""String_Node_Str"" + userNameAttribute);
      installProps.println(""String_Node_Str"" + userObjClassName);
      installProps.println(""String_Node_Str"" + userGroupMemberName);
      ambariProps.println(""String_Node_Str"");
      ambariProps.println(""String_Node_Str"" + userNameAttribute);
      ambariProps.println(""String_Node_Str"" + userObjClassName);
      ambariProps.println(""String_Node_Str"" + userGroupMemberName);
    }
  }
  finally {
    try {
      if (userSearchResultEnum != null) {
        userSearchResultEnum.close();
      }
    }
 catch (    NamingException ne) {
      throw new Exception(""String_Node_Str"" + ne);
    }
  }
}",0.9998211091234348
166387,"public RangerPolicyList getPaginatedServicePolicies(String serviceName,SearchFilter filter) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  RangerPolicyList ret=null;
  try {
    if (filter == null) {
      filter=new SearchFilter();
    }
    filter.setParam(SearchFilter.SERVICE_NAME,serviceName);
    ret=getPaginatedPolicies(filter);
  }
 catch (  Exception excp) {
    LOG.error(""String_Node_Str"" + serviceName + ""String_Node_Str"",excp);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ ((ret == null) ? 0 : ret.getListSize()));
  }
  return ret;
}","public RangerPolicyList getPaginatedServicePolicies(String serviceName,SearchFilter filter) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  if (filter == null) {
    filter=new SearchFilter();
  }
  filter.setParam(SearchFilter.SERVICE_NAME,serviceName);
  RangerPolicyList ret=getPaginatedPolicies(filter);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ ((ret == null) ? 0 : ret.getListSize()));
  }
  return ret;
}",0.814086814086814
166388,"@Override public List<RangerPolicy> getServicePolicies(String serviceName,SearchFilter filter) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  List<RangerPolicy> ret=new ArrayList<RangerPolicy>();
  try {
    if (filter == null) {
      filter=new SearchFilter();
    }
    filter.setParam(SearchFilter.SERVICE_NAME,serviceName);
    ret=getPolicies(filter);
  }
 catch (  Exception excp) {
    LOG.error(""String_Node_Str"" + serviceName + ""String_Node_Str"",excp);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ ((ret == null) ? 0 : ret.size()));
  }
  return ret;
}","@Override public List<RangerPolicy> getServicePolicies(String serviceName,SearchFilter filter) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  if (filter == null) {
    filter=new SearchFilter();
  }
  filter.setParam(SearchFilter.SERVICE_NAME,serviceName);
  List<RangerPolicy> ret=getPolicies(filter);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ ((ret == null) ? 0 : ret.size()));
  }
  return ret;
}",0.7908496732026143
166389,"@Test public void test32getServicePolicies() throws Exception {
  SearchFilter filter=new SearchFilter();
  filter.setParam(SearchFilter.POLICY_NAME,""String_Node_Str"");
  filter.setParam(SearchFilter.SERVICE_NAME,""String_Node_Str"");
  XXService xService=xService();
  XXServiceDao xServiceDao=Mockito.mock(XXServiceDao.class);
  Mockito.when(daoManager.getXXService()).thenReturn(xServiceDao);
  Mockito.when(xServiceDao.getById(Id)).thenReturn(xService);
  List<RangerPolicy> dbRangerPolicy=serviceDBStore.getServicePolicies(Id,filter);
  Assert.assertNotNull(dbRangerPolicy);
  Mockito.verify(daoManager).getXXService();
}","@Test public void test32getServicePolicies() throws Exception {
  SearchFilter filter=new SearchFilter();
  filter.setParam(SearchFilter.POLICY_NAME,""String_Node_Str"");
  filter.setParam(SearchFilter.SERVICE_NAME,""String_Node_Str"");
  XXService xService=xService();
  XXServiceDao xServiceDao=Mockito.mock(XXServiceDao.class);
  Mockito.when(daoManager.getXXService()).thenReturn(xServiceDao);
  Mockito.when(xServiceDao.getById(Id)).thenReturn(xService);
  thrown.expect(Exception.class);
  List<RangerPolicy> dbRangerPolicy=serviceDBStore.getServicePolicies(Id,filter);
  Mockito.verify(daoManager).getXXService();
}",0.9404186795491144
166390,"@Test public void test37getPaginatedServicePolicies() throws Exception {
  SearchFilter filter=new SearchFilter();
  filter.setParam(SearchFilter.POLICY_NAME,""String_Node_Str"");
  filter.setParam(SearchFilter.SERVICE_NAME,""String_Node_Str"");
  RangerService rangerService=rangerService();
  XXService xService=xService();
  XXServiceDao xServiceDao=Mockito.mock(XXServiceDao.class);
  Mockito.when(daoManager.getXXService()).thenReturn(xServiceDao);
  Mockito.when(xServiceDao.getById(Id)).thenReturn(xService);
  RangerPolicyList dbRangerPolicyList=serviceDBStore.getPaginatedServicePolicies(rangerService.getId(),filter);
  Assert.assertNull(dbRangerPolicyList);
  Mockito.verify(daoManager).getXXService();
}","@Test public void test37getPaginatedServicePolicies() throws Exception {
  SearchFilter filter=new SearchFilter();
  filter.setParam(SearchFilter.POLICY_NAME,""String_Node_Str"");
  filter.setParam(SearchFilter.SERVICE_NAME,""String_Node_Str"");
  RangerService rangerService=rangerService();
  XXService xService=xService();
  XXServiceDao xServiceDao=Mockito.mock(XXServiceDao.class);
  Mockito.when(daoManager.getXXService()).thenReturn(xServiceDao);
  Mockito.when(xServiceDao.getById(Id)).thenReturn(xService);
  thrown.expect(Exception.class);
  RangerPolicyList dbRangerPolicyList=serviceDBStore.getPaginatedServicePolicies(rangerService.getId(),filter);
  Mockito.verify(daoManager).getXXService();
}",0.9469964664310954
166391,"@Test public void testAuditBatchQueueDestDownFlipFlop(){
  logger.debug(""String_Node_Str"");
  int messageToSend=10;
  String basePropName=""String_Node_Str"" + MiscUtil.generateUniqueId();
  int batchSize=messageToSend / 3;
  int queueSize=messageToSend * 2;
  int intervalMS=3000;
  Properties props=new Properties();
  props.put(basePropName + ""String_Node_Str"" + BaseAuditHandler.PROP_NAME,""String_Node_Str"" + MiscUtil.generateUniqueId());
  props.put(basePropName + ""String_Node_Str"" + AuditQueue.PROP_BATCH_SIZE,""String_Node_Str"" + batchSize);
  props.put(basePropName + ""String_Node_Str"" + AuditQueue.PROP_QUEUE_SIZE,""String_Node_Str"" + queueSize);
  props.put(basePropName + ""String_Node_Str"" + AuditQueue.PROP_BATCH_INTERVAL,""String_Node_Str"" + intervalMS);
  int destRetryMS=10;
  props.put(basePropName + ""String_Node_Str"" + AuditQueue.PROP_FILE_SPOOL_ENABLE,""String_Node_Str"" + true);
  props.put(basePropName + ""String_Node_Str"" + AuditFileSpool.PROP_FILE_SPOOL_LOCAL_DIR,""String_Node_Str"");
  props.put(basePropName + ""String_Node_Str"" + AuditFileSpool.PROP_FILE_SPOOL_DEST_RETRY_MS,""String_Node_Str"" + destRetryMS);
  TestConsumer testConsumer=new TestConsumer();
  testConsumer.isDown=false;
  AuditBatchQueue queue=new AuditBatchQueue(testConsumer);
  queue.init(props,basePropName);
  queue.start();
  try {
    queue.log(createEvent());
    queue.log(createEvent());
    queue.log(createEvent());
    Thread.sleep(1000);
    testConsumer.isDown=true;
    Thread.sleep(1000);
    queue.log(createEvent());
    queue.log(createEvent());
    queue.log(createEvent());
    Thread.sleep(1000);
    testConsumer.isDown=false;
    Thread.sleep(1000);
    queue.log(createEvent());
    queue.log(createEvent());
    queue.log(createEvent());
    Thread.sleep(1000);
    testConsumer.isDown=true;
    Thread.sleep(1000);
    queue.log(createEvent());
    Thread.sleep(1000);
    testConsumer.isDown=false;
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
  }
  queue.waitToComplete(5000);
  queue.stop();
  queue.waitToComplete();
  assertEquals(""String_Node_Str"",messageToSend,testConsumer.getCountTotal());
  assertEquals(""String_Node_Str"",messageToSend,testConsumer.getSumTotal());
  assertNull(""String_Node_Str"",testConsumer.isInSequence());
}","@Test public void testAuditBatchQueueDestDownFlipFlop(){
  logger.debug(""String_Node_Str"");
  int messageToSend=10;
  String basePropName=""String_Node_Str"" + MiscUtil.generateUniqueId();
  int batchSize=messageToSend / 3;
  int queueSize=messageToSend * 2;
  int intervalMS=5000;
  Properties props=new Properties();
  props.put(basePropName + ""String_Node_Str"" + BaseAuditHandler.PROP_NAME,""String_Node_Str"" + MiscUtil.generateUniqueId());
  props.put(basePropName + ""String_Node_Str"" + AuditQueue.PROP_BATCH_SIZE,""String_Node_Str"" + batchSize);
  props.put(basePropName + ""String_Node_Str"" + AuditQueue.PROP_QUEUE_SIZE,""String_Node_Str"" + queueSize);
  props.put(basePropName + ""String_Node_Str"" + AuditQueue.PROP_BATCH_INTERVAL,""String_Node_Str"" + intervalMS);
  int destRetryMS=10;
  props.put(basePropName + ""String_Node_Str"" + AuditQueue.PROP_FILE_SPOOL_ENABLE,""String_Node_Str"" + true);
  props.put(basePropName + ""String_Node_Str"" + AuditFileSpool.PROP_FILE_SPOOL_LOCAL_DIR,""String_Node_Str"");
  props.put(basePropName + ""String_Node_Str"" + AuditFileSpool.PROP_FILE_SPOOL_DEST_RETRY_MS,""String_Node_Str"" + destRetryMS);
  TestConsumer testConsumer=new TestConsumer();
  testConsumer.isDown=false;
  AuditBatchQueue queue=new AuditBatchQueue(testConsumer);
  queue.init(props,basePropName);
  queue.start();
  try {
    queue.log(createEvent());
    queue.log(createEvent());
    queue.log(createEvent());
    Thread.sleep(1000);
    testConsumer.isDown=true;
    Thread.sleep(1000);
    queue.log(createEvent());
    queue.log(createEvent());
    queue.log(createEvent());
    Thread.sleep(1000);
    testConsumer.isDown=false;
    Thread.sleep(1000);
    queue.log(createEvent());
    queue.log(createEvent());
    queue.log(createEvent());
    Thread.sleep(1000);
    testConsumer.isDown=true;
    Thread.sleep(1000);
    queue.log(createEvent());
    Thread.sleep(1000);
    testConsumer.isDown=false;
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
  }
  queue.waitToComplete(5000);
  queue.stop();
  queue.waitToComplete();
  assertEquals(""String_Node_Str"",messageToSend,testConsumer.getCountTotal());
  assertEquals(""String_Node_Str"",messageToSend,testConsumer.getSumTotal());
  assertNull(""String_Node_Str"",testConsumer.isInSequence());
}",0.9995735607675906
166392,"@Override public ServiceTags getServiceTagsIfUpdated(long lastKnownVersion) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + lastKnownVersion + ""String_Node_Str"");
  }
  ServiceTags ret;
  WebResource webResource=createWebResource(RangerRESTUtils.REST_URL_GET_SERVICE_TAGS_IF_UPDATED).queryParam(RangerRESTUtils.SERVICE_NAME_PARAM,serviceName).queryParam(RangerRESTUtils.LAST_KNOWN_TAG_VERSION_PARAM,Long.toString(lastKnownVersion)).queryParam(RangerRESTUtils.REST_PARAM_PLUGIN_ID,pluginId);
  ClientResponse response=webResource.accept(RangerRESTUtils.REST_MIME_TYPE_JSON).get(ClientResponse.class);
  if (response != null && response.getStatus() == 200) {
    ret=response.getEntity(ServiceTags.class);
  }
 else {
    RESTResponse resp=RESTResponse.fromClientResponse(response);
    LOG.error(""String_Node_Str"" + webResource.toString() + ""String_Node_Str""+ resp.toString()+ ""String_Node_Str""+ serviceName+ ""String_Node_Str""+ ""String_Node_Str""+ lastKnownVersion);
    throw new Exception(resp.getMessage());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + lastKnownVersion + ""String_Node_Str"");
  }
  return ret;
}","@Override public ServiceTags getServiceTagsIfUpdated(long lastKnownVersion) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + lastKnownVersion + ""String_Node_Str"");
  }
  ServiceTags ret;
  WebResource webResource=createWebResource(RangerRESTUtils.REST_URL_GET_SERVICE_TAGS_IF_UPDATED + serviceName).queryParam(RangerRESTUtils.LAST_KNOWN_TAG_VERSION_PARAM,Long.toString(lastKnownVersion)).queryParam(RangerRESTUtils.REST_PARAM_PLUGIN_ID,pluginId);
  ClientResponse response=webResource.accept(RangerRESTUtils.REST_MIME_TYPE_JSON).get(ClientResponse.class);
  if (response != null && response.getStatus() == 200) {
    ret=response.getEntity(ServiceTags.class);
  }
 else {
    RESTResponse resp=RESTResponse.fromClientResponse(response);
    LOG.error(""String_Node_Str"" + webResource.toString() + ""String_Node_Str""+ resp.toString()+ ""String_Node_Str""+ serviceName+ ""String_Node_Str""+ ""String_Node_Str""+ lastKnownVersion);
    throw new Exception(resp.getMessage());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + lastKnownVersion + ""String_Node_Str"");
  }
  return ret;
}",0.9777777777777776
166393,"@Override public void retrieveTags(){
  if (adminClient != null) {
    ServiceTags serviceTags=null;
    long savedLastKnownVersion=lastKnownVersion;
    try {
      serviceTags=adminClient.getServiceTagsIfUpdated(lastKnownVersion);
      lastKnownVersion=serviceTags.getTagVersion();
    }
 catch (    Exception exp) {
      LOG.error(""String_Node_Str"");
    }
    if (receiver != null && serviceTags != null) {
      if (serviceTags.getTagVersion() != null && serviceTags.getTagVersion().longValue() > savedLastKnownVersion) {
        receiver.setServiceTags(serviceTags);
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"");
        }
      }
    }
 else {
      LOG.error(""String_Node_Str"");
    }
  }
 else {
    LOG.error(""String_Node_Str"");
  }
}","@Override public void retrieveTags(){
  if (adminClient != null && receiver != null) {
    ServiceTags serviceTags=null;
    try {
      serviceTags=adminClient.getServiceTagsIfUpdated(lastKnownVersion);
    }
 catch (    Exception exp) {
      LOG.error(""String_Node_Str"",exp);
    }
    if (serviceTags != null) {
      LOG.info(""String_Node_Str"" + lastKnownVersion + ""String_Node_Str""+ serviceTags.getTagVersion());
      lastKnownVersion=serviceTags.getTagVersion();
      receiver.setServiceTags(serviceTags);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + lastKnownVersion);
      }
    }
  }
 else {
    LOG.error(""String_Node_Str"");
  }
}",0.4685172647257955
166394,"private List<RangerTag> findMatchingTags(final RangerAccessResource resource,final List<RangerServiceResourceMatcher> resourceMatchers){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
  }
  List<RangerTag> ret=null;
  if (CollectionUtils.isNotEmpty(resourceMatchers)) {
    for (    RangerServiceResourceMatcher resourceMatcher : resourceMatchers) {
      RangerServiceResource serviceResource=resourceMatcher.getServiceResource();
      RangerPolicyResourceMatcher matcher=resourceMatcher.getPolicyResourceMatcher();
      boolean matchResult=matcher.isMatch(resource);
      if (matchResult) {
        if (ret == null) {
          ret=new ArrayList<RangerTag>();
        }
        ret.addAll(getTagsForServiceResource(serviceTags,serviceResource));
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    if (CollectionUtils.isEmpty(ret)) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
    }
 else {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ ret.size()+ ""String_Node_Str"");
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
  }
  return ret;
}","private List<RangerTag> findMatchingTags(final RangerAccessResource resource,final List<RangerServiceResourceMatcher> resourceMatchers){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
  }
  List<RangerTag> ret=null;
  if (CollectionUtils.isNotEmpty(resourceMatchers)) {
    for (    RangerServiceResourceMatcher resourceMatcher : resourceMatchers) {
      boolean matchResult=resourceMatcher.isMatch(resource);
      if (matchResult) {
        if (ret == null) {
          ret=new ArrayList<RangerTag>();
        }
        ret.addAll(getTagsForServiceResource(serviceTags,resourceMatcher.getServiceResource()));
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    if (CollectionUtils.isEmpty(ret)) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
    }
 else {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ ret.size()+ ""String_Node_Str"");
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
  }
  return ret;
}",0.9013833110218652
166395,"@Override public ServiceTags getServiceTagsIfUpdated(String serviceName,Long lastKnownVersion) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str"");
  }
  ServiceTags ret=new ServiceTags();
  boolean tagsChanged=true;
  RangerService service=null;
  try {
    service=svcStore.getServiceByName(serviceName);
    ret.setServiceName(serviceName);
  }
 catch (  Exception exception) {
    LOG.error(""String_Node_Str"" + serviceName);
    tagsChanged=false;
  }
  if (lastKnownVersion != null && service != null && service.getTagVersion() != null && lastKnownVersion.compareTo(service.getTagVersion()) >= 0) {
    tagsChanged=false;
  }
  if (tagsChanged) {
    SearchFilter filter=new SearchFilter();
    filter.setParam(SearchFilter.TAG_RESOURCE_SERVICE_NAME,serviceName);
    List<RangerServiceResource> serviceResources=getServiceResources(filter);
    Map<Long,RangerTag> tagsMap=new HashMap<Long,RangerTag>();
    Map<Long,List<Long>> resourceToTagIdsMap=new HashMap<Long,List<Long>>();
    for (    RangerServiceResource serviceResource : serviceResources) {
      List<RangerTag> tagList=getTagsForServiceResourceObject(serviceResource);
      if (CollectionUtils.isNotEmpty(tagList)) {
        List<Long> tagIdList=new ArrayList<Long>();
        for (        RangerTag tag : tagList) {
          tagsMap.put(tag.getId(),tag);
          tagIdList.add(tag.getId());
        }
        resourceToTagIdsMap.put(serviceResource.getId(),tagIdList);
      }
    }
    if (MapUtils.isEmpty(resourceToTagIdsMap)) {
      serviceResources.clear();
    }
    ret.setServiceResources(serviceResources);
    ret.setResourceToTagIds(resourceToTagIdsMap);
    ret.setTags(tagsMap);
    if (service != null && service.getTagVersion() != null) {
      ret.setTagVersion(service.getTagVersion());
    }
    if (service != null && service.getTagUpdateTime() != null) {
      ret.setTagUpdateTime(service.getTagUpdateTime());
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + (service == null ? null : service.getTagVersion()) + ""String_Node_Str""+ lastKnownVersion);
    }
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + (service == null ? null : service.getTagVersion()) + ""String_Node_Str""+ lastKnownVersion);
    }
    ret.setTagVersion(lastKnownVersion);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str""+ ret);
  }
  return ret;
}","@Override public ServiceTags getServiceTagsIfUpdated(String serviceName,Long lastKnownVersion) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str"");
  }
  ServiceTags ret=new ServiceTags();
  boolean tagsChanged=true;
  RangerService service=null;
  try {
    service=svcStore.getServiceByName(serviceName);
    ret.setServiceName(serviceName);
  }
 catch (  Exception exception) {
    LOG.error(""String_Node_Str"" + serviceName);
    tagsChanged=false;
  }
  if (lastKnownVersion != null && service != null && service.getTagVersion() != null && lastKnownVersion.compareTo(service.getTagVersion()) >= 0) {
    tagsChanged=false;
  }
  if (tagsChanged) {
    SearchFilter filter=new SearchFilter();
    filter.setParam(SearchFilter.TAG_RESOURCE_SERVICE_NAME,serviceName);
    List<RangerServiceResource> serviceResources=getServiceResources(filter);
    List<RangerServiceResource> filteredServiceResources=new ArrayList<RangerServiceResource>();
    Map<Long,RangerTag> tagsMap=new HashMap<Long,RangerTag>();
    Map<Long,List<Long>> resourceToTagIdsMap=new HashMap<Long,List<Long>>();
    for (    RangerServiceResource serviceResource : serviceResources) {
      List<RangerTag> tagList=getTagsForServiceResourceObject(serviceResource);
      if (CollectionUtils.isNotEmpty(tagList)) {
        List<Long> tagIdList=new ArrayList<Long>();
        for (        RangerTag tag : tagList) {
          tagsMap.put(tag.getId(),tag);
          tagIdList.add(tag.getId());
        }
        resourceToTagIdsMap.put(serviceResource.getId(),tagIdList);
        filteredServiceResources.add(serviceResource);
      }
    }
    ret.setServiceResources(filteredServiceResources);
    ret.setResourceToTagIds(resourceToTagIdsMap);
    ret.setTags(tagsMap);
    if (service != null && service.getTagVersion() != null) {
      ret.setTagVersion(service.getTagVersion());
    }
    if (service != null && service.getTagUpdateTime() != null) {
      ret.setTagUpdateTime(service.getTagUpdateTime());
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + (service == null ? null : service.getTagVersion()) + ""String_Node_Str""+ lastKnownVersion);
    }
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + (service == null ? null : service.getTagVersion()) + ""String_Node_Str""+ lastKnownVersion);
    }
    ret.setTagVersion(lastKnownVersion);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str""+ ret);
  }
  return ret;
}",0.9432146294513956
166396,"public static void tearDownAfterClass(String suffix) throws Exception {
  Path dirPath=new Path(""String_Node_Str"");
  FileSystem fs=dirPath.getFileSystem(config);
  try {
    if (fs.exists(dirPath) && fs.isDirectory(dirPath)) {
      RemoteIterator<LocatedFileStatus> files=fs.listFiles(dirPath,false);
      if (files != null) {
        while (files.hasNext()) {
          LocatedFileStatus fileStatus=files.next();
          Path path=fileStatus.getPath();
          if (fs.isFile(path) && path.getName().endsWith(suffix)) {
            fs.delete(path,true);
          }
        }
      }
    }
  }
 catch (  IOException excp) {
  }
  fs.delete(filePath,true);
}","@AfterClass public static void tearDownAfterClass() throws Exception {
  Path dirPath=new Path(tmpDir);
  FileSystem fs=dirPath.getFileSystem(config);
  try {
    if (fs.exists(dirPath) && fs.isDirectory(dirPath)) {
      RemoteIterator<LocatedFileStatus> files=fs.listFiles(dirPath,false);
      if (files != null) {
        while (files.hasNext()) {
          LocatedFileStatus fileStatus=files.next();
          Path path=fileStatus.getPath();
          if (fs.isFile(path)) {
            fs.delete(path,true);
          }
        }
      }
    }
  }
 catch (  IOException excp) {
  }
  fs.delete(filePath,true);
}",0.9352068696330992
166397,"@BeforeClass public static void setupTest() throws Exception {
  tearDownAfterClass(crcSuffix);
  tearDownAfterClass(jsonSuffix);
  FileSystem fs=filePath.getFileSystem(config);
  FSDataOutputStream outStream=fs.create(filePath,true);
  OutputStreamWriter writer=null;
  writer=new OutputStreamWriter(outStream);
  writer.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  writer.close();
  RangerConfiguration config=RangerConfiguration.getInstance();
  config.addResource(filePath);
  tagStore=TagFileStore.getInstance();
  tagStore.init();
  ServiceStore svcStore;
  svcStore=new ServiceFileStore();
  svcStore.init();
  tagStore.setServiceStore(svcStore);
  validator=new TagValidator();
  validator.setTagStore(tagStore);
  gsonBuilder=new GsonBuilder().setDateFormat(""String_Node_Str"").setPrettyPrinting().create();
  InputStream inStream=TestTagStore.class.getResourceAsStream(serviceDefJsonFile);
  InputStreamReader reader=new InputStreamReader(inStream);
  serviceDef=gsonBuilder.fromJson(reader,RangerServiceDef.class);
  service=svcStore.createService(new RangerService(serviceDef.getName(),serviceName,serviceName,null,null));
  reader.close();
  inStream.close();
}","@BeforeClass public static void setupTest() throws Exception {
  tmpDir=""String_Node_Str"" + System.getProperty(""String_Node_Str"");
  String textTemplate=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String text=String.format(textTemplate,tmpDir,tmpDir);
  String fileName=tmpDir + ""String_Node_Str"";
  filePath=new Path(fileName);
  FileSystem fs=filePath.getFileSystem(config);
  FSDataOutputStream outStream=fs.create(filePath,true);
  OutputStreamWriter writer=new OutputStreamWriter(outStream);
  writer.write(text);
  writer.close();
  RangerConfiguration config=RangerConfiguration.getInstance();
  config.addResource(filePath);
  ServiceStore svcStore=new ServiceFileStore();
  svcStore.init();
  tagStore=TagFileStore.getInstance();
  tagStore.init();
  tagStore.setServiceStore(svcStore);
  validator=new TagValidator();
  validator.setTagStore(tagStore);
  gsonBuilder=new GsonBuilder().setDateFormat(""String_Node_Str"").setPrettyPrinting().create();
  InputStream inStream=TestTagStore.class.getResourceAsStream(serviceDefJsonFile);
  InputStreamReader reader=new InputStreamReader(inStream);
  serviceDef=gsonBuilder.fromJson(reader,RangerServiceDef.class);
  service=svcStore.createService(new RangerService(serviceDef.getName(),serviceName,serviceName,null,null));
  reader.close();
  inStream.close();
}",0.5776664280601288
166398,"@Override public RangerService createService(RangerService service) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + service + ""String_Node_Str"");
  }
  if (service == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.ERROR_CREATING_OBJECT);
  }
  boolean createDefaultPolicy=true;
  Map<String,String> configs=service.getConfigs();
  Map<String,String> validConfigs=validateRequiredConfigParams(service,configs);
  if (validConfigs == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + service + ""String_Node_Str"");
    }
    throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.ERROR_CREATING_OBJECT);
  }
  service.setVersion(new Long(1));
  if (populateExistingBaseFields) {
    svcServiceWithAssignedId.setPopulateExistingBaseFields(true);
    daoMgr.getXXService().setIdentityInsert(true);
    service=svcServiceWithAssignedId.create(service);
    daoMgr.getXXService().setIdentityInsert(false);
    daoMgr.getXXService().updateSequence();
    svcServiceWithAssignedId.setPopulateExistingBaseFields(false);
    createDefaultPolicy=false;
  }
 else {
    service=svcService.create(service);
  }
  XXService xCreatedService=daoMgr.getXXService().getById(service.getId());
  VXUser vXUser=null;
  XXServiceConfigMapDao xConfMapDao=daoMgr.getXXServiceConfigMap();
  for (  Entry<String,String> configMap : validConfigs.entrySet()) {
    String configKey=configMap.getKey();
    String configValue=configMap.getValue();
    if (StringUtils.equalsIgnoreCase(configKey,""String_Node_Str"")) {
      String userName=stringUtil.getValidUserName(configValue);
      XXUser xxUser=daoMgr.getXXUser().findByUserName(userName);
      if (xxUser != null) {
        vXUser=xUserService.populateViewBean(xxUser);
      }
 else {
        vXUser=new VXUser();
        vXUser.setName(userName);
        vXUser.setUserSource(RangerCommonEnums.USER_EXTERNAL);
        UserSessionBase usb=ContextUtil.getCurrentUserSession();
        if (usb != null && !usb.isUserAdmin()) {
          throw restErrorUtil.createRESTException(""String_Node_Str"" + userName + ""String_Node_Str"",MessageEnums.OPER_NO_PERMISSION);
        }
        vXUser=xUserMgr.createXUser(vXUser);
      }
    }
    if (StringUtils.equalsIgnoreCase(configKey,CONFIG_KEY_PASSWORD)) {
      String encryptedPwd=PasswordUtils.encryptPassword(configValue);
      String decryptedPwd=PasswordUtils.decryptPassword(encryptedPwd);
      if (StringUtils.equals(decryptedPwd,configValue)) {
        configValue=encryptedPwd;
      }
    }
    XXServiceConfigMap xConfMap=new XXServiceConfigMap();
    xConfMap=(XXServiceConfigMap)rangerAuditFields.populateAuditFields(xConfMap,xCreatedService);
    xConfMap.setServiceId(xCreatedService.getId());
    xConfMap.setConfigkey(configKey);
    xConfMap.setConfigvalue(configValue);
    xConfMap=xConfMapDao.create(xConfMap);
  }
  RangerService createdService=svcService.getPopulatedViewObject(xCreatedService);
  if (createdService == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.ERROR_CREATING_OBJECT);
  }
  dataHistService.createObjectDataHistory(createdService,RangerDataHistService.ACTION_CREATE);
  List<XXTrxLog> trxLogList=svcService.getTransactionLog(createdService,RangerServiceService.OPERATION_CREATE_CONTEXT);
  bizUtil.createTrxLog(trxLogList);
  if (createDefaultPolicy) {
    createDefaultPolicies(xCreatedService,vXUser);
  }
  return createdService;
}","@Override public RangerService createService(RangerService service) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + service + ""String_Node_Str"");
  }
  if (service == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.ERROR_CREATING_OBJECT);
  }
  boolean createDefaultPolicy=true;
  Map<String,String> configs=service.getConfigs();
  Map<String,String> validConfigs=validateRequiredConfigParams(service,configs);
  if (validConfigs == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + service + ""String_Node_Str"");
    }
    throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.ERROR_CREATING_OBJECT);
  }
  service.setVersion(new Long(1));
  service.setTagVersion(new Long(1));
  if (populateExistingBaseFields) {
    svcServiceWithAssignedId.setPopulateExistingBaseFields(true);
    daoMgr.getXXService().setIdentityInsert(true);
    service=svcServiceWithAssignedId.create(service);
    daoMgr.getXXService().setIdentityInsert(false);
    daoMgr.getXXService().updateSequence();
    svcServiceWithAssignedId.setPopulateExistingBaseFields(false);
    createDefaultPolicy=false;
  }
 else {
    service=svcService.create(service);
  }
  XXService xCreatedService=daoMgr.getXXService().getById(service.getId());
  VXUser vXUser=null;
  XXServiceConfigMapDao xConfMapDao=daoMgr.getXXServiceConfigMap();
  for (  Entry<String,String> configMap : validConfigs.entrySet()) {
    String configKey=configMap.getKey();
    String configValue=configMap.getValue();
    if (StringUtils.equalsIgnoreCase(configKey,""String_Node_Str"")) {
      String userName=stringUtil.getValidUserName(configValue);
      XXUser xxUser=daoMgr.getXXUser().findByUserName(userName);
      if (xxUser != null) {
        vXUser=xUserService.populateViewBean(xxUser);
      }
 else {
        vXUser=new VXUser();
        vXUser.setName(userName);
        vXUser.setUserSource(RangerCommonEnums.USER_EXTERNAL);
        UserSessionBase usb=ContextUtil.getCurrentUserSession();
        if (usb != null && !usb.isUserAdmin()) {
          throw restErrorUtil.createRESTException(""String_Node_Str"" + userName + ""String_Node_Str"",MessageEnums.OPER_NO_PERMISSION);
        }
        vXUser=xUserMgr.createXUser(vXUser);
      }
    }
    if (StringUtils.equalsIgnoreCase(configKey,CONFIG_KEY_PASSWORD)) {
      String encryptedPwd=PasswordUtils.encryptPassword(configValue);
      String decryptedPwd=PasswordUtils.decryptPassword(encryptedPwd);
      if (StringUtils.equals(decryptedPwd,configValue)) {
        configValue=encryptedPwd;
      }
    }
    XXServiceConfigMap xConfMap=new XXServiceConfigMap();
    xConfMap=(XXServiceConfigMap)rangerAuditFields.populateAuditFields(xConfMap,xCreatedService);
    xConfMap.setServiceId(xCreatedService.getId());
    xConfMap.setConfigkey(configKey);
    xConfMap.setConfigvalue(configValue);
    xConfMap=xConfMapDao.create(xConfMap);
  }
  RangerService createdService=svcService.getPopulatedViewObject(xCreatedService);
  if (createdService == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.ERROR_CREATING_OBJECT);
  }
  dataHistService.createObjectDataHistory(createdService,RangerDataHistService.ACTION_CREATE);
  List<XXTrxLog> trxLogList=svcService.getTransactionLog(createdService,RangerServiceService.OPERATION_CREATE_CONTEXT);
  bizUtil.createTrxLog(trxLogList);
  if (createDefaultPolicy) {
    createDefaultPolicies(xCreatedService,vXUser);
  }
  return createdService;
}",0.9946022727272728
166399,"@Override @SuppressWarnings(""String_Node_Str"") protected RangerService mapEntityToViewBean(RangerService vObj,XXServiceBase xObj){
  XXServiceDef xServiceDef=daoMgr.getXXServiceDef().getById(xObj.getType());
  XXService xTagService=xObj.getTagService() != null ? daoMgr.getXXService().getById(xObj.getTagService()) : null;
  vObj.setType(xServiceDef.getName());
  vObj.setGuid(xObj.getGuid());
  vObj.setVersion(xObj.getVersion());
  vObj.setName(xObj.getName());
  vObj.setDescription(xObj.getDescription());
  vObj.setTagService(xTagService != null ? xTagService.getName() : null);
  vObj.setPolicyVersion(xObj.getPolicyVersion());
  vObj.setPolicyUpdateTime(xObj.getPolicyUpdateTime());
  vObj.setIsEnabled(xObj.getIsenabled());
  return vObj;
}","@Override @SuppressWarnings(""String_Node_Str"") protected RangerService mapEntityToViewBean(RangerService vObj,XXServiceBase xObj){
  XXServiceDef xServiceDef=daoMgr.getXXServiceDef().getById(xObj.getType());
  XXService xTagService=xObj.getTagService() != null ? daoMgr.getXXService().getById(xObj.getTagService()) : null;
  vObj.setType(xServiceDef.getName());
  vObj.setGuid(xObj.getGuid());
  vObj.setVersion(xObj.getVersion());
  vObj.setName(xObj.getName());
  vObj.setDescription(xObj.getDescription());
  vObj.setTagService(xTagService != null ? xTagService.getName() : null);
  vObj.setPolicyVersion(xObj.getPolicyVersion());
  vObj.setTagVersion(xObj.getTagVersion());
  vObj.setPolicyUpdateTime(xObj.getPolicyUpdateTime());
  vObj.setTagUpdateTime(xObj.getTagUpdateTime());
  vObj.setIsEnabled(xObj.getIsenabled());
  return vObj;
}",0.940880503144654
166400,"@Override @SuppressWarnings(""String_Node_Str"") protected XXServiceBase mapViewToEntityBean(RangerService vObj,XXServiceBase xObj,int OPERATION_CONTEXT){
  String guid=(StringUtils.isEmpty(vObj.getGuid())) ? guidUtil.genGUID() : vObj.getGuid();
  xObj.setGuid(guid);
  xObj.setVersion(vObj.getVersion());
  XXServiceDef xServiceDef=daoMgr.getXXServiceDef().findByName(vObj.getType());
  if (xServiceDef == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + vObj.getType(),MessageEnums.INVALID_INPUT_DATA);
  }
  Long tagServiceId=null;
  String tagServiceName=vObj.getTagService();
  if (!StringUtils.isEmpty(tagServiceName)) {
    XXService xTagService=daoMgr.getXXService().findByName(tagServiceName);
    if (xTagService == null) {
      throw restErrorUtil.createRESTException(""String_Node_Str"" + tagServiceName,MessageEnums.INVALID_INPUT_DATA);
    }
    tagServiceId=xTagService.getId();
  }
  xObj.setType(xServiceDef.getId());
  xObj.setName(vObj.getName());
  xObj.setTagService(tagServiceId);
  xObj.setPolicyVersion(vObj.getPolicyVersion());
  xObj.setPolicyUpdateTime(vObj.getPolicyUpdateTime());
  xObj.setDescription(vObj.getDescription());
  xObj.setIsEnabled(vObj.getIsEnabled());
  return xObj;
}","@Override @SuppressWarnings(""String_Node_Str"") protected XXServiceBase mapViewToEntityBean(RangerService vObj,XXServiceBase xObj,int OPERATION_CONTEXT){
  String guid=(StringUtils.isEmpty(vObj.getGuid())) ? guidUtil.genGUID() : vObj.getGuid();
  xObj.setGuid(guid);
  xObj.setVersion(vObj.getVersion());
  XXServiceDef xServiceDef=daoMgr.getXXServiceDef().findByName(vObj.getType());
  if (xServiceDef == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + vObj.getType(),MessageEnums.INVALID_INPUT_DATA);
  }
  Long tagServiceId=null;
  String tagServiceName=vObj.getTagService();
  if (!StringUtils.isEmpty(tagServiceName)) {
    XXService xTagService=daoMgr.getXXService().findByName(tagServiceName);
    if (xTagService == null) {
      throw restErrorUtil.createRESTException(""String_Node_Str"" + tagServiceName,MessageEnums.INVALID_INPUT_DATA);
    }
    tagServiceId=xTagService.getId();
  }
  xObj.setType(xServiceDef.getId());
  xObj.setName(vObj.getName());
  xObj.setTagService(tagServiceId);
  xObj.setPolicyVersion(vObj.getPolicyVersion());
  xObj.setTagVersion(vObj.getTagVersion());
  xObj.setPolicyUpdateTime(vObj.getPolicyUpdateTime());
  xObj.setTagUpdateTime(vObj.getTagUpdateTime());
  xObj.setDescription(vObj.getDescription());
  xObj.setIsEnabled(vObj.getIsEnabled());
  return xObj;
}",0.96328125
166401,"public RangerAdminTagRetriever(final String serviceName,final long pollingIntervalMs,final RangerTagReceiver enricher){
  super(pollingIntervalMs);
  this.serviceName=serviceName;
  setReceiver(enricher);
  propertyPrefix=propertyPrefixPreamble + serviceName;
  this.lastTimestamp=0L;
}","public RangerAdminTagRetriever(final String serviceName,final RangerServiceDef serviceDef,final long pollingIntervalMs,final RangerTagReceiver enricher){
  super(pollingIntervalMs);
  this.serviceName=serviceName;
  setReceiver(enricher);
  propertyPrefix=propertyPrefixPreamble + serviceDef.getName();
  this.lastTimestamp=0L;
}",0.930081300813008
166402,"@Override public void init(){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  super.init();
  Map<String,String> options=enricherDef != null ? enricherDef.getEnricherOptions() : null;
  String tagProviderTypeString=getOption(""String_Node_Str"",""String_Node_Str"");
  long pollingIntervalMs=getLongOption(""String_Node_Str"",60 * 1000);
  if (tagProviderTypeString.equals(TagProviderTypeEnum.FILESTORE_BASED_TAG_PROVIDER.toString())) {
    tagRefresher=new RangerTagFileStoreRetriever(serviceName,pollingIntervalMs,this);
    tagProviderType=TagProviderTypeEnum.FILESTORE_BASED_TAG_PROVIDER;
  }
 else   if (tagProviderTypeString.equals(TagProviderTypeEnum.RANGER_ADMIN_TAG_PROVIDER.toString())) {
    tagRefresher=new RangerAdminTagRetriever(serviceName,pollingIntervalMs,this);
    tagProviderType=TagProviderTypeEnum.RANGER_ADMIN_TAG_PROVIDER;
  }
 else   if (tagProviderTypeString.equals(TagProviderTypeEnum.EXTERNAL_SYSTEM_TAG_PROVIDER.toString())) {
    tagProviderType=TagProviderTypeEnum.EXTERNAL_SYSTEM_TAG_PROVIDER;
  }
 else {
    LOG.error(""String_Node_Str"");
  }
  if (tagRefresher != null) {
    tagRefresher.init(options);
    tagRefresher.retrieveTags();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + tagProviderType);
  }
}","@Override public void init(){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  super.init();
  Map<String,String> options=enricherDef != null ? enricherDef.getEnricherOptions() : null;
  String tagProviderTypeString=getOption(""String_Node_Str"",""String_Node_Str"");
  long pollingIntervalMs=getLongOption(""String_Node_Str"",60 * 1000);
  if (tagProviderTypeString.equals(TagProviderTypeEnum.FILESTORE_BASED_TAG_PROVIDER.toString())) {
    tagRefresher=new RangerTagFileStoreRetriever(serviceName,pollingIntervalMs,this);
    tagProviderType=TagProviderTypeEnum.FILESTORE_BASED_TAG_PROVIDER;
  }
 else   if (tagProviderTypeString.equals(TagProviderTypeEnum.RANGER_ADMIN_TAG_PROVIDER.toString())) {
    tagRefresher=new RangerAdminTagRetriever(serviceName,serviceDef,pollingIntervalMs,this);
    tagProviderType=TagProviderTypeEnum.RANGER_ADMIN_TAG_PROVIDER;
  }
 else   if (tagProviderTypeString.equals(TagProviderTypeEnum.EXTERNAL_SYSTEM_TAG_PROVIDER.toString())) {
    tagProviderType=TagProviderTypeEnum.EXTERNAL_SYSTEM_TAG_PROVIDER;
  }
 else {
    LOG.error(""String_Node_Str"");
  }
  if (tagRefresher != null) {
    tagRefresher.init(options);
    tagRefresher.retrieveTags();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + tagProviderType);
  }
}",0.9957181782794862
166403,"public RangerPolicyEngineImpl(ServicePolicies servicePolicies,RangerPolicyEngineOptions options){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + servicePolicies + ""String_Node_Str""+ options+ ""String_Node_Str"");
  }
  if (options == null) {
    options=new RangerPolicyEngineOptions();
  }
  policyRepository=new RangerPolicyRepository(servicePolicies,options);
  ServicePolicies.TagPolicies tagPolicies=servicePolicies.getTagPolicies();
  if (!options.disableTagPolicyEvaluation && tagPolicies != null && !StringUtils.isEmpty(tagPolicies.getServiceName()) && tagPolicies.getServiceDef() != null && !CollectionUtils.isEmpty(tagPolicies.getPolicies())) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + tagPolicies.getServiceName());
    }
    tagPolicyRepository=new RangerPolicyRepository(tagPolicies,options,servicePolicies.getServiceDef());
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + servicePolicies.getServiceName());
    }
    tagPolicyRepository=null;
  }
  List<RangerContextEnricher> tmpList;
  List<RangerContextEnricher> tagContextEnrichers=tagPolicyRepository == null ? null : tagPolicyRepository.getContextEnrichers();
  List<RangerContextEnricher> resourceContextEnrichers=policyRepository.getContextEnrichers();
  if (CollectionUtils.isEmpty(tagContextEnrichers)) {
    tmpList=resourceContextEnrichers;
  }
 else   if (CollectionUtils.isEmpty(resourceContextEnrichers)) {
    tmpList=tagContextEnrichers;
  }
 else {
    tmpList=new ArrayList<RangerContextEnricher>(tagContextEnrichers);
    tmpList.addAll(resourceContextEnrichers);
  }
  this.allContextEnrichers=tmpList;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
}","public RangerPolicyEngineImpl(ServicePolicies servicePolicies,RangerPolicyEngineOptions options){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + servicePolicies + ""String_Node_Str""+ options+ ""String_Node_Str"");
  }
  if (options == null) {
    options=new RangerPolicyEngineOptions();
  }
  policyRepository=new RangerPolicyRepository(servicePolicies,options);
  ServicePolicies.TagPolicies tagPolicies=servicePolicies.getTagPolicies();
  if (!options.disableTagPolicyEvaluation && tagPolicies != null && !StringUtils.isEmpty(tagPolicies.getServiceName()) && tagPolicies.getServiceDef() != null && !CollectionUtils.isEmpty(tagPolicies.getPolicies())) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + tagPolicies.getServiceName());
    }
    tagPolicyRepository=new RangerPolicyRepository(tagPolicies,options,servicePolicies.getServiceDef(),servicePolicies.getServiceName());
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + servicePolicies.getServiceName());
    }
    tagPolicyRepository=null;
  }
  List<RangerContextEnricher> tmpList;
  List<RangerContextEnricher> tagContextEnrichers=tagPolicyRepository == null ? null : tagPolicyRepository.getContextEnrichers();
  List<RangerContextEnricher> resourceContextEnrichers=policyRepository.getContextEnrichers();
  if (CollectionUtils.isEmpty(tagContextEnrichers)) {
    tmpList=resourceContextEnrichers;
  }
 else   if (CollectionUtils.isEmpty(resourceContextEnrichers)) {
    tmpList=tagContextEnrichers;
  }
 else {
    tmpList=new ArrayList<RangerContextEnricher>(tagContextEnrichers);
    tmpList.addAll(resourceContextEnrichers);
  }
  this.allContextEnrichers=tmpList;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
}",0.9905579399141632
166404,"private RangerContextEnricher buildContextEnricher(RangerServiceDef.RangerContextEnricherDef enricherDef){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + enricherDef + ""String_Node_Str"");
  }
  RangerContextEnricher ret=null;
  String name=enricherDef != null ? enricherDef.getName() : null;
  String clsName=enricherDef != null ? enricherDef.getEnricher() : null;
  if (!StringUtils.isEmpty(clsName)) {
    try {
      @SuppressWarnings(""String_Node_Str"") Class<RangerContextEnricher> enricherClass=(Class<RangerContextEnricher>)Class.forName(clsName);
      ret=enricherClass.newInstance();
    }
 catch (    Exception excp) {
      LOG.error(""String_Node_Str"" + clsName + ""String_Node_Str""+ name+ ""String_Node_Str"",excp);
    }
  }
  if (ret != null) {
    ret.setContextEnricherDef(enricherDef);
    ret.setContextServiceName(serviceName);
    ret.setContextServiceDef(componentServiceDef);
    ret.init();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + enricherDef + ""String_Node_Str""+ ret);
  }
  return ret;
}","private RangerContextEnricher buildContextEnricher(RangerServiceDef.RangerContextEnricherDef enricherDef){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + enricherDef + ""String_Node_Str"");
  }
  RangerContextEnricher ret=null;
  String name=enricherDef != null ? enricherDef.getName() : null;
  String clsName=enricherDef != null ? enricherDef.getEnricher() : null;
  if (!StringUtils.isEmpty(clsName)) {
    try {
      @SuppressWarnings(""String_Node_Str"") Class<RangerContextEnricher> enricherClass=(Class<RangerContextEnricher>)Class.forName(clsName);
      ret=enricherClass.newInstance();
    }
 catch (    Exception excp) {
      LOG.error(""String_Node_Str"" + clsName + ""String_Node_Str""+ name+ ""String_Node_Str"",excp);
    }
  }
  if (ret != null) {
    ret.setContextEnricherDef(enricherDef);
    ret.setContextServiceName(componentServiceName);
    ret.setContextServiceDef(componentServiceDef);
    ret.init();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + enricherDef + ""String_Node_Str""+ ret);
  }
  return ret;
}",0.9948039678790742
166405,"RangerPolicyRepository(ServicePolicies.TagPolicies tagPolicies,RangerPolicyEngineOptions options,RangerServiceDef componentServiceDef){
  super();
  this.serviceName=tagPolicies.getServiceName();
  this.serviceDef=normalizeAccessTypeDefs(tagPolicies.getServiceDef(),componentServiceDef.getName());
  this.componentServiceDef=componentServiceDef;
  this.policies=Collections.unmodifiableList(normalizePolicyItemAccesses(tagPolicies.getPolicies(),componentServiceDef.getName()));
  this.policyVersion=tagPolicies.getPolicyVersion() != null ? tagPolicies.getPolicyVersion() : -1;
  this.accessAuditCache=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName);
  }
  init(options);
}","RangerPolicyRepository(ServicePolicies.TagPolicies tagPolicies,RangerPolicyEngineOptions options,RangerServiceDef componentServiceDef,String componentServiceName){
  super();
  this.serviceName=tagPolicies.getServiceName();
  this.componentServiceName=componentServiceName;
  this.serviceDef=normalizeAccessTypeDefs(tagPolicies.getServiceDef(),componentServiceDef.getName());
  this.componentServiceDef=componentServiceDef;
  this.policies=Collections.unmodifiableList(normalizePolicyItemAccesses(tagPolicies.getPolicies(),componentServiceDef.getName()));
  this.policyVersion=tagPolicies.getPolicyVersion() != null ? tagPolicies.getPolicyVersion() : -1;
  this.accessAuditCache=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName);
  }
  init(options);
}",0.9477211796246648
166406,"private static String toAccessType(int permType){
  String ret=null;
  for (  Map.Entry<String,Integer> e : mapAccessTypeToPermType.entrySet()) {
    if (e.getValue().intValue() == permType) {
      ret=e.getKey();
      break;
    }
  }
  return ret;
}","public static String toAccessType(int permType){
  String ret=null;
  for (  Map.Entry<String,Integer> e : mapAccessTypeToPermType.entrySet()) {
    if (e.getValue().intValue() == permType) {
      ret=e.getKey();
      break;
    }
  }
  return ret;
}",0.9782178217821782
166407,"private List<RangerPolicyItem> getPolicyItemListForRes(XXResource xRes,String serviceDefName){
  List<RangerPolicyItem> policyItems=new ArrayList<RangerPolicyItem>();
  SearchCriteria sc=new SearchCriteria();
  sc.addParam(""String_Node_Str"",xRes.getId());
  List<VXPermMap> permMapList=xPermMapService.searchXPermMaps(sc).getVXPermMaps();
  List<VXPermObj> permObjList=xPolService.mapPermMapToPermObj(permMapList);
  XXServiceDef svcDef=daoMgr.getXXServiceDef().findByName(serviceDefName);
  if (svcDef == null) {
    return new ArrayList<RangerPolicyItem>();
  }
  XXPolicyConditionDef policyCond=daoMgr.getXXPolicyConditionDef().findByServiceDefIdAndName(svcDef.getId(),""String_Node_Str"");
  for (  VXPermObj permObj : permObjList) {
    List<String> permList=permObj.getPermList();
    if (permList == null) {
      continue;
    }
    RangerPolicyItem policyItem=new RangerPolicyItem();
    List<RangerPolicyItemAccess> accesses=new ArrayList<RangerPolicyItemAccess>();
    List<RangerPolicyItemCondition> conditions=new ArrayList<RangerPolicyItemCondition>();
    if (permObj.getPermList().contains(""String_Node_Str"")) {
      policyItem.setDelegateAdmin(true);
    }
    for (    String perm : permList) {
      RangerPolicyItemAccess access=new RangerPolicyItemAccess();
      access.setIsAllowed(true);
      access.setType(perm);
      accesses.add(access);
    }
    if (!stringUtil.isEmpty(permObj.getIpAddress()) && policyCond != null) {
      RangerPolicyItemCondition condition=new RangerPolicyItemCondition();
      condition.setType(""String_Node_Str"");
      List<String> ipRangeList=Arrays.asList(permObj.getIpAddress());
      condition.setValues(ipRangeList);
      conditions.add(condition);
    }
    policyItem.setUsers(permObj.getUserList());
    policyItem.setGroups(permObj.getGroupList());
    policyItem.setAccesses(accesses);
    policyItem.setConditions(conditions);
    policyItems.add(policyItem);
  }
  return policyItems;
}","private List<RangerPolicyItem> getPolicyItemListForRes(XXResource xRes,XXServiceDef svcDef){
  List<RangerPolicyItem> policyItems=new ArrayList<RangerPolicyItem>();
  SearchCriteria sc=new SearchCriteria();
  sc.addParam(""String_Node_Str"",xRes.getId());
  List<VXPermMap> permMapList=xPermMapService.searchXPermMaps(sc).getVXPermMaps();
  HashMap<String,List<VXPermMap>> sortedPermMap=new HashMap<String,List<VXPermMap>>();
  if (permMapList != null) {
    for (    VXPermMap permMap : permMapList) {
      String permGrp=permMap.getPermGroup();
      List<VXPermMap> sortedList=sortedPermMap.get(permGrp);
      if (sortedList == null) {
        sortedList=new ArrayList<VXPermMap>();
        sortedPermMap.put(permGrp,sortedList);
      }
      sortedList.add(permMap);
    }
  }
  for (  Entry<String,List<VXPermMap>> entry : sortedPermMap.entrySet()) {
    List<String> userList=new ArrayList<String>();
    List<String> groupList=new ArrayList<String>();
    List<RangerPolicyItemAccess> accessList=new ArrayList<RangerPolicyItemAccess>();
    String ipAddress=null;
    RangerPolicy.RangerPolicyItem policyItem=new RangerPolicy.RangerPolicyItem();
    for (    VXPermMap permMap : entry.getValue()) {
      if (permMap.getPermFor() == AppConstants.XA_PERM_FOR_USER) {
        String userName=getUserName(permMap);
        if (!userList.contains(userName)) {
          userList.add(userName);
        }
      }
 else       if (permMap.getPermFor() == AppConstants.XA_PERM_FOR_GROUP) {
        String groupName=getGroupName(permMap);
        if (!groupList.contains(groupName)) {
          groupList.add(groupName);
        }
      }
      String accessType=ServiceUtil.toAccessType(permMap.getPermType());
      if (StringUtils.equalsIgnoreCase(accessType,""String_Node_Str"")) {
        policyItem.setDelegateAdmin(Boolean.TRUE);
        if (svcDef.getId() == EmbeddedServiceDefsUtil.instance().getHBaseServiceDefId()) {
          accessList.add(new RangerPolicyItemAccess(accessType));
        }
      }
 else {
        accessList.add(new RangerPolicyItemAccess(accessType));
      }
      ipAddress=permMap.getIpAddress();
    }
    policyItem.setUsers(userList);
    policyItem.setGroups(groupList);
    policyItem.setAccesses(accessList);
    if (ipAddress != null && !ipAddress.isEmpty()) {
      XXPolicyConditionDef policyCond=daoMgr.getXXPolicyConditionDef().findByServiceDefIdAndName(svcDef.getId(),""String_Node_Str"");
      if (policyCond != null) {
        RangerPolicy.RangerPolicyItemCondition ipCondition=new RangerPolicy.RangerPolicyItemCondition(""String_Node_Str"",Collections.singletonList(ipAddress));
        policyItem.getConditions().add(ipCondition);
      }
    }
    policyItems.add(policyItem);
  }
  return policyItems;
}",0.2311942201444964
166408,"private RangerPolicy mapXResourceToPolicy(RangerPolicy policy,XXResource xRes,RangerService service){
  String serviceName=service.getName();
  String serviceDef=service.getType();
  String name=xRes.getPolicyName();
  String description=xRes.getDescription();
  Boolean isAuditEnabled=true;
  Boolean isEnabled=true;
  Map<String,RangerPolicyResource> resources=new HashMap<String,RangerPolicyResource>();
  List<RangerPolicyItem> policyItems=new ArrayList<RangerPolicyItem>();
  List<XXAuditMap> auditMapList=daoMgr.getXXAuditMap().findByResourceId(xRes.getId());
  if (stringUtil.isEmpty(auditMapList)) {
    isAuditEnabled=false;
  }
  if (xRes.getResourceStatus() == AppConstants.STATUS_DISABLED) {
    isEnabled=false;
  }
  boolean tableExcludes=false;
  boolean columnExcludes=false;
  if (xRes.getTableType() == AppConstants.POLICY_EXCLUSION) {
    tableExcludes=true;
  }
  if (xRes.getColumnType() == AppConstants.POLICY_EXCLUSION) {
    columnExcludes=true;
  }
  if (serviceDef.equalsIgnoreCase(""String_Node_Str"")) {
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getName()),false,AppConstants.getBooleanFor_BooleanValue(xRes.getIsRecursive())));
  }
 else   if (serviceDef.equalsIgnoreCase(""String_Node_Str"")) {
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getTables()),tableExcludes,false));
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getColumns()),columnExcludes,false));
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getColumnFamilies()),false,false));
  }
 else   if (serviceDef.equalsIgnoreCase(""String_Node_Str"")) {
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getTables()),tableExcludes,false));
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getColumns()),columnExcludes,false));
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getDatabases()),false,false));
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getUdfs()),false,false));
  }
 else   if (serviceDef.equalsIgnoreCase(""String_Node_Str"")) {
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getTopologies()),false,false));
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getServices()),false,false));
  }
 else   if (serviceDef.equalsIgnoreCase(""String_Node_Str"")) {
    resources.put(""String_Node_Str"",new RangerPolicyResource(Arrays.asList(xRes.getTopologies()),false,false));
  }
  policyItems=getPolicyItemListForRes(xRes,serviceDef);
  policy.setService(serviceName);
  policy.setName(name);
  policy.setDescription(description);
  policy.setIsAuditEnabled(isAuditEnabled);
  policy.setIsEnabled(isEnabled);
  policy.setResources(resources);
  policy.setPolicyItems(policyItems);
  policy.setCreateTime(xRes.getCreateTime());
  policy.setUpdateTime(xRes.getUpdateTime());
  XXPortalUser createdByUser=daoMgr.getXXPortalUser().getById(xRes.getAddedByUserId());
  XXPortalUser updByUser=daoMgr.getXXPortalUser().getById(xRes.getUpdatedByUserId());
  if (createdByUser != null) {
    policy.setCreatedBy(createdByUser.getLoginId());
  }
  if (updByUser != null) {
    policy.setUpdatedBy(updByUser.getLoginId());
  }
  policy.setId(xRes.getId());
  return policy;
}","private RangerPolicy mapXResourceToPolicy(RangerPolicy policy,XXResource xRes,RangerService service){
  String serviceName=service.getName();
  String serviceType=service.getType();
  String name=xRes.getPolicyName();
  String description=xRes.getDescription();
  Boolean isAuditEnabled=true;
  Boolean isEnabled=true;
  Map<String,RangerPolicyResource> resources=new HashMap<String,RangerPolicyResource>();
  List<RangerPolicyItem> policyItems=new ArrayList<RangerPolicyItem>();
  XXServiceDef svcDef=daoMgr.getXXServiceDef().findByName(serviceType);
  if (svcDef == null) {
    logger.error(serviceType + ""String_Node_Str"" + name+ ""String_Node_Str"");
    return null;
  }
  List<XXAuditMap> auditMapList=daoMgr.getXXAuditMap().findByResourceId(xRes.getId());
  if (stringUtil.isEmpty(auditMapList)) {
    isAuditEnabled=false;
  }
  if (xRes.getResourceStatus() == AppConstants.STATUS_DISABLED) {
    isEnabled=false;
  }
  Boolean isPathRecursive=xRes.getIsRecursive() == RangerCommonEnums.BOOL_TRUE;
  Boolean isTableExcludes=xRes.getTableType() == RangerCommonEnums.POLICY_EXCLUSION;
  Boolean isColumnExcludes=xRes.getColumnType() == RangerCommonEnums.POLICY_EXCLUSION;
  if (StringUtils.equalsIgnoreCase(serviceType,""String_Node_Str"")) {
    toRangerResourceList(xRes.getName(),""String_Node_Str"",Boolean.FALSE,isPathRecursive,resources);
  }
 else   if (StringUtils.equalsIgnoreCase(serviceType,""String_Node_Str"")) {
    toRangerResourceList(xRes.getTables(),""String_Node_Str"",isTableExcludes,Boolean.FALSE,resources);
    toRangerResourceList(xRes.getColumnFamilies(),""String_Node_Str"",Boolean.FALSE,Boolean.FALSE,resources);
    toRangerResourceList(xRes.getColumns(),""String_Node_Str"",isColumnExcludes,Boolean.FALSE,resources);
  }
 else   if (StringUtils.equalsIgnoreCase(serviceType,""String_Node_Str"")) {
    toRangerResourceList(xRes.getDatabases(),""String_Node_Str"",Boolean.FALSE,Boolean.FALSE,resources);
    toRangerResourceList(xRes.getTables(),""String_Node_Str"",isTableExcludes,Boolean.FALSE,resources);
    toRangerResourceList(xRes.getColumns(),""String_Node_Str"",isColumnExcludes,Boolean.FALSE,resources);
    toRangerResourceList(xRes.getUdfs(),""String_Node_Str"",Boolean.FALSE,Boolean.FALSE,resources);
  }
 else   if (StringUtils.equalsIgnoreCase(serviceType,""String_Node_Str"")) {
    toRangerResourceList(xRes.getTopologies(),""String_Node_Str"",Boolean.FALSE,Boolean.FALSE,resources);
    toRangerResourceList(xRes.getServices(),""String_Node_Str"",Boolean.FALSE,Boolean.FALSE,resources);
  }
 else   if (StringUtils.equalsIgnoreCase(serviceType,""String_Node_Str"")) {
    toRangerResourceList(xRes.getTopologies(),""String_Node_Str"",Boolean.FALSE,Boolean.FALSE,resources);
  }
  policyItems=getPolicyItemListForRes(xRes,svcDef);
  policy.setService(serviceName);
  policy.setName(name);
  policy.setDescription(description);
  policy.setIsAuditEnabled(isAuditEnabled);
  policy.setIsEnabled(isEnabled);
  policy.setResources(resources);
  policy.setPolicyItems(policyItems);
  policy.setCreateTime(xRes.getCreateTime());
  policy.setUpdateTime(xRes.getUpdateTime());
  XXPortalUser createdByUser=daoMgr.getXXPortalUser().getById(xRes.getAddedByUserId());
  XXPortalUser updByUser=daoMgr.getXXPortalUser().getById(xRes.getUpdatedByUserId());
  if (createdByUser != null) {
    policy.setCreatedBy(createdByUser.getLoginId());
  }
  if (updByUser != null) {
    policy.setUpdatedBy(updByUser.getLoginId());
  }
  policy.setId(xRes.getId());
  return policy;
}",0.3658109684947491
166409,"public void migratePoliciesToNewSchema() throws Exception {
  logger.info(""String_Node_Str"");
  try {
    List<XXResource> resList=daoMgr.getXXResource().getAll();
    if (resList.size() <= 0) {
      return;
    }
    svcDBStore.setPopulateExistingBaseFields(true);
    for (    XXResource xRes : resList) {
      if (xRes.getResourceStatus() == AppConstants.STATUS_DELETED) {
        continue;
      }
      XXAsset xAsset=daoMgr.getXXAsset().getById(xRes.getAssetId());
      if (xAsset == null) {
        logger.error(""String_Node_Str"" + xRes.getPolicyName());
        continue;
      }
      RangerService service=svcDBStore.getServiceByName(xAsset.getName());
      if (service == null) {
        logger.error(""String_Node_Str"" + xRes.getPolicyName());
        continue;
      }
      XXPolicy existing=daoMgr.getXXPolicy().findByNameAndServiceId(xRes.getPolicyName(),service.getId());
      if (existing != null) {
        logger.info(""String_Node_Str"" + existing.getName());
        continue;
      }
      RangerPolicy policy=new RangerPolicy();
      policy=mapXResourceToPolicy(policy,xRes,service);
      policy=svcDBStore.createPolicy(policy);
      policyCounter++;
      logger.info(""String_Node_Str"" + policy.getName());
    }
    svcDBStore.setPopulateExistingBaseFields(false);
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"",e);
  }
  logger.info(""String_Node_Str"");
}","public void migratePoliciesToNewSchema() throws Exception {
  logger.info(""String_Node_Str"");
  try {
    List<XXResource> resList=daoMgr.getXXResource().getAll();
    if (resList.size() <= 0) {
      return;
    }
    svcDBStore.setPopulateExistingBaseFields(true);
    for (    XXResource xRes : resList) {
      if (xRes.getResourceStatus() == AppConstants.STATUS_DELETED) {
        continue;
      }
      XXAsset xAsset=daoMgr.getXXAsset().getById(xRes.getAssetId());
      if (xAsset == null) {
        logger.error(""String_Node_Str"" + xRes.getPolicyName());
        continue;
      }
      RangerService service=svcDBStore.getServiceByName(xAsset.getName());
      if (service == null) {
        logger.error(""String_Node_Str"" + xRes.getPolicyName());
        continue;
      }
      XXPolicy existing=daoMgr.getXXPolicy().findByNameAndServiceId(xRes.getPolicyName(),service.getId());
      if (existing != null) {
        logger.info(""String_Node_Str"" + existing.getName());
        continue;
      }
      RangerPolicy policy=new RangerPolicy();
      policy=mapXResourceToPolicy(policy,xRes,service);
      if (policy != null) {
        policy=svcDBStore.createPolicy(policy);
        policyCounter++;
        logger.info(""String_Node_Str"" + policy.getName());
      }
    }
    svcDBStore.setPopulateExistingBaseFields(false);
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"",e);
  }
  logger.info(""String_Node_Str"");
}",0.9853249475890984
166410,"@GET @Path(""String_Node_Str"") @Encoded public String getResourceJSON(@Context HttpServletRequest request,@PathParam(""String_Node_Str"") String repository){
  String epoch=request.getParameter(""String_Node_Str"");
  X509Certificate[] certchain=(X509Certificate[])request.getAttribute(""String_Node_Str"");
  String ipAddress=request.getHeader(""String_Node_Str"");
  boolean isSecure=request.isSecure();
  String policyCount=request.getParameter(""String_Node_Str"");
  String agentId=request.getParameter(""String_Node_Str"");
  if (ipAddress == null) {
    ipAddress=request.getRemoteAddr();
  }
  boolean httpEnabled=PropertiesUtil.getBooleanProperty(""String_Node_Str"",true);
  RangerService service=serviceREST.getServiceByName(repository);
  List<RangerPolicy> policies=serviceREST.getServicePolicies(repository,request).getPolicies();
  long policyUpdTime=(service != null && service.getPolicyUpdateTime() != null) ? service.getPolicyUpdateTime().getTime() : 0l;
  VXAsset vAsset=serviceUtil.toVXAsset(service);
  List<VXResource> vResourceList=new ArrayList<VXResource>();
  if (policies != null) {
    for (    RangerPolicy policy : policies) {
      vResourceList.add(serviceUtil.toVXResource(policy,service));
    }
  }
  String file=assetMgr.getLatestRepoPolicy(vAsset,vResourceList,policyUpdTime,certchain,httpEnabled,epoch,ipAddress,isSecure,policyCount,agentId);
  return file;
}","@GET @Path(""String_Node_Str"") @Encoded public String getResourceJSON(@Context HttpServletRequest request,@PathParam(""String_Node_Str"") String repository){
  String epoch=request.getParameter(""String_Node_Str"");
  X509Certificate[] certchain=(X509Certificate[])request.getAttribute(""String_Node_Str"");
  String ipAddress=request.getHeader(""String_Node_Str"");
  boolean isSecure=request.isSecure();
  String policyCount=request.getParameter(""String_Node_Str"");
  String agentId=request.getParameter(""String_Node_Str"");
  Long lastKnowPolicyVersion=new Long(-1);
  if (ipAddress == null) {
    ipAddress=request.getRemoteAddr();
  }
  boolean httpEnabled=PropertiesUtil.getBooleanProperty(""String_Node_Str"",true);
  ServicePolicies servicePolicies=null;
  try {
    servicePolicies=serviceREST.getServicePoliciesIfUpdated(repository,lastKnowPolicyVersion,agentId,request);
  }
 catch (  Exception excp) {
    logger.error(""String_Node_Str"" + repository,excp);
  }
  RangerService service=serviceREST.getServiceByName(repository);
  List<RangerPolicy> policies=servicePolicies != null ? servicePolicies.getPolicies() : null;
  long policyUpdTime=(servicePolicies != null && servicePolicies.getPolicyUpdateTime() != null) ? servicePolicies.getPolicyUpdateTime().getTime() : 0l;
  VXAsset vAsset=serviceUtil.toVXAsset(service);
  List<VXResource> vResourceList=new ArrayList<VXResource>();
  if (policies != null) {
    for (    RangerPolicy policy : policies) {
      vResourceList.add(serviceUtil.toVXResource(policy,service));
    }
  }
  String file=assetMgr.getLatestRepoPolicy(vAsset,vResourceList,policyUpdTime,certchain,httpEnabled,epoch,ipAddress,isSecure,policyCount,agentId);
  return file;
}",0.8353361481000324
166411,"@GET @Path(""String_Node_Str"") @Produces({""String_Node_Str"",""String_Node_Str""}) public ServicePolicies getServicePoliciesIfUpdated(@PathParam(""String_Node_Str"") String serviceName,@QueryParam(""String_Node_Str"") Long lastKnownVersion,@QueryParam(""String_Node_Str"") String pluginId,@Context HttpServletRequest request) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str"");
  }
  ServicePolicies ret=null;
  int httpCode=HttpServletResponse.SC_OK;
  String logMsg=null;
  if (serviceUtil.isValidateHttpsAuthentication(serviceName,request)) {
    try {
      ret=svcStore.getServicePoliciesIfUpdated(serviceName,lastKnownVersion);
      if (ret == null) {
        httpCode=HttpServletResponse.SC_NOT_MODIFIED;
        logMsg=""String_Node_Str"";
      }
 else {
        httpCode=HttpServletResponse.SC_OK;
        logMsg=""String_Node_Str"" + (ret.getPolicies() != null ? ret.getPolicies().size() : 0) + ""String_Node_Str""+ ret.getPolicyVersion();
      }
    }
 catch (    Exception excp) {
      LOG.error(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str"",excp);
      httpCode=HttpServletResponse.SC_BAD_REQUEST;
      logMsg=excp.getMessage();
    }
 finally {
      createPolicyDownloadAudit(serviceName,lastKnownVersion,pluginId,ret,httpCode,request);
    }
    if (httpCode != HttpServletResponse.SC_OK) {
      boolean logError=httpCode != HttpServletResponse.SC_NOT_MODIFIED;
      throw restErrorUtil.createRESTException(httpCode,logMsg,logError);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str""+ ((ret == null || ret.getPolicies() == null) ? 0 : ret.getPolicies().size()));
  }
  return ret;
}","@GET @Path(""String_Node_Str"") @Produces({""String_Node_Str"",""String_Node_Str""}) public ServicePolicies getServicePoliciesIfUpdated(@PathParam(""String_Node_Str"") String serviceName,@QueryParam(""String_Node_Str"") Long lastKnownVersion,@QueryParam(""String_Node_Str"") String pluginId,@Context HttpServletRequest request) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str"");
  }
  ServicePolicies ret=null;
  int httpCode=HttpServletResponse.SC_OK;
  String logMsg=null;
  if (serviceUtil.isValidateHttpsAuthentication(serviceName,request)) {
    if (lastKnownVersion == null) {
      lastKnownVersion=new Long(-1);
    }
    try {
      ret=svcStore.getServicePoliciesIfUpdated(serviceName,lastKnownVersion);
      if (ret == null) {
        httpCode=HttpServletResponse.SC_NOT_MODIFIED;
        logMsg=""String_Node_Str"";
      }
 else {
        httpCode=HttpServletResponse.SC_OK;
        logMsg=""String_Node_Str"" + (ret.getPolicies() != null ? ret.getPolicies().size() : 0) + ""String_Node_Str""+ ret.getPolicyVersion();
      }
    }
 catch (    Exception excp) {
      LOG.error(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str"",excp);
      httpCode=HttpServletResponse.SC_BAD_REQUEST;
      logMsg=excp.getMessage();
    }
 finally {
      createPolicyDownloadAudit(serviceName,lastKnownVersion,pluginId,ret,httpCode,request);
    }
    if (httpCode != HttpServletResponse.SC_OK) {
      boolean logError=httpCode != HttpServletResponse.SC_NOT_MODIFIED;
      throw restErrorUtil.createRESTException(httpCode,logMsg,logError);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ lastKnownVersion+ ""String_Node_Str""+ ((ret == null || ret.getPolicies() == null) ? 0 : ret.getPolicies().size()));
  }
  return ret;
}",0.9788487282463186
166412,"@Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException authException) throws IOException, ServletException {
  HttpSession httpSession=request.getSession();
  String ajaxRequestHeader=request.getHeader(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ajaxRequestHeader);
  }
  String requestURL=(request.getRequestURL() != null) ? request.getRequestURL().toString() : ""String_Node_Str"";
  String servletPath=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  String reqServletPath=configUtil.getWebAppRootURL() + ""String_Node_Str"" + servletPath;
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  Date curentDate=new Date();
  Long currentDateInMillis=(long)(((((curentDate.getHours() * 60) + curentDate.getMinutes()) * 60) + curentDate.getSeconds()) * 1000);
  if (httpSession.getMaxInactiveInterval() * 60000 >= (currentDateInMillis - httpSession.getLastAccessedTime())) {
    ajaxRequestHeader=null;
    VXResponse vXResponse=new VXResponse();
    vXResponse.setStatusCode(SC_AUTHENTICATION_TIMEOUT);
    vXResponse.setMsgDesc(""String_Node_Str"");
    response.setStatus(SC_AUTHENTICATION_TIMEOUT);
    response.getWriter().write(jsonUtil.writeObjectAsString(vXResponse));
  }
 else {
    try {
      VXResponse vXResponse=new VXResponse();
      vXResponse.setStatusCode(HttpServletResponse.SC_UNAUTHORIZED);
      vXResponse.setMsgDesc(""String_Node_Str"");
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      response.getWriter().write(jsonUtil.writeObjectAsString(vXResponse));
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"");
    }
  }
  if (ajaxRequestHeader != null && ajaxRequestHeader.equalsIgnoreCase(""String_Node_Str"")) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ajaxReturnCode + ""String_Node_Str""+ request.getRequestURI());
    }
    response.sendError(ajaxReturnCode,""String_Node_Str"");
  }
 else   if (!(requestURL.startsWith(reqServletPath))) {
    super.commence(request,response,authException);
  }
}","@Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException authException) throws IOException, ServletException {
  String ajaxRequestHeader=request.getHeader(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ajaxRequestHeader);
  }
  String requestURL=(request.getRequestURL() != null) ? request.getRequestURL().toString() : ""String_Node_Str"";
  String servletPath=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  String reqServletPath=configUtil.getWebAppRootURL() + ""String_Node_Str"" + servletPath;
  if (""String_Node_Str"".equals(ajaxRequestHeader)) {
    try {
      VXResponse vXResponse=new VXResponse();
      vXResponse.setStatusCode(SC_AUTHENTICATION_TIMEOUT);
      vXResponse.setMsgDesc(""String_Node_Str"");
      response.setStatus(SC_AUTHENTICATION_TIMEOUT);
      response.getWriter().write(jsonUtil.writeObjectAsString(vXResponse));
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"");
    }
    return;
  }
 else {
    try {
      VXResponse vXResponse=new VXResponse();
      vXResponse.setStatusCode(HttpServletResponse.SC_UNAUTHORIZED);
      vXResponse.setMsgDesc(""String_Node_Str"");
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      response.getWriter().write(jsonUtil.writeObjectAsString(vXResponse));
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"");
    }
  }
  if (ajaxRequestHeader != null && ajaxRequestHeader.equalsIgnoreCase(""String_Node_Str"")) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ajaxReturnCode + ""String_Node_Str""+ request.getRequestURI());
    }
    response.sendError(ajaxReturnCode,""String_Node_Str"");
  }
 else   if (!(requestURL.startsWith(reqServletPath))) {
    super.commence(request,response,authException);
  }
}",0.84862043251305
166413,"private Map<String,RangerPolicy.RangerPolicyResource> toRangerResourceList(String resourceString,String resourceType,Boolean isExcludes,Boolean isRecursive,Map<String,RangerPolicy.RangerPolicyResource> resources){
  Map<String,RangerPolicy.RangerPolicyResource> ret=resources == null ? new HashMap<String,RangerPolicy.RangerPolicyResource>() : resources;
  if (resourceString != null) {
    RangerPolicy.RangerPolicyResource resource=ret.get(resourceType);
    if (resource == null) {
      resource=new RangerPolicy.RangerPolicyResource();
      resource.setIsExcludes(isExcludes);
      resource.setIsRecursive(isRecursive);
      ret.put(resourceType,resource);
    }
    for (    String res : resourceString.split(""String_Node_Str"")) {
      resource.getValues().add(res);
    }
  }
  return ret;
}","private Map<String,RangerPolicy.RangerPolicyResource> toRangerResourceList(String resourceString,String resourceType,Boolean isExcludes,Boolean isRecursive,Map<String,RangerPolicy.RangerPolicyResource> resources){
  Map<String,RangerPolicy.RangerPolicyResource> ret=resources == null ? new HashMap<String,RangerPolicy.RangerPolicyResource>() : resources;
  if (StringUtils.isNotBlank(resourceString)) {
    RangerPolicy.RangerPolicyResource resource=ret.get(resourceType);
    if (resource == null) {
      resource=new RangerPolicy.RangerPolicyResource();
      resource.setIsExcludes(isExcludes);
      resource.setIsRecursive(isRecursive);
      ret.put(resourceType,resource);
    }
    for (    String res : resourceString.split(""String_Node_Str"")) {
      resource.getValues().add(res);
    }
  }
  return ret;
}",0.9629629629629628
166414,"@POST @Path(""String_Node_Str"") @Produces({""String_Node_Str"",""String_Node_Str""}) public VXPolicy grantPermission(@Context HttpServletRequest request,VXPolicy vXPolicy){
  RESTResponse ret=null;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + vXPolicy + ""String_Node_Str"");
  }
  if (vXPolicy != null) {
    String serviceName=vXPolicy.getRepositoryName();
    GrantRevokeRequest grantRevokeRequest=serviceUtil.toGrantRevokeRequest(vXPolicy);
    try {
      ret=serviceREST.grantAccess(serviceName,grantRevokeRequest,request);
    }
 catch (    Exception e) {
      logger.error(HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str"" + vXPolicy);
      throw restErrorUtil.createRESTException(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"" + e.getMessage(),true);
    }
  }
 else {
    logger.error(HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str"" + vXPolicy);
    throw restErrorUtil.createRESTException(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"",true);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ret + ""String_Node_Str"");
  }
  return vXPolicy;
}","@POST @Path(""String_Node_Str"") @Produces({""String_Node_Str"",""String_Node_Str""}) public VXPolicy grantPermission(@Context HttpServletRequest request,VXPolicy vXPolicy){
  RESTResponse ret=null;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + vXPolicy + ""String_Node_Str"");
  }
  if (vXPolicy != null) {
    String serviceName=vXPolicy.getRepositoryName();
    GrantRevokeRequest grantRevokeRequest=serviceUtil.toGrantRevokeRequest(vXPolicy);
    try {
      ret=serviceREST.grantAccess(serviceName,grantRevokeRequest,request);
    }
 catch (    WebApplicationException excp) {
      throw excp;
    }
catch (    Throwable e) {
      logger.error(HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str"" + vXPolicy,e);
      throw restErrorUtil.createRESTException(""String_Node_Str"" + vXPolicy + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    logger.error(HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str"");
    throw restErrorUtil.createRESTException(""String_Node_Str"");
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ret + ""String_Node_Str"");
  }
  return vXPolicy;
}",0.7984014209591475
166415,"@POST @Path(""String_Node_Str"") @Produces({""String_Node_Str"",""String_Node_Str""}) public VXPolicy revokePermission(@Context HttpServletRequest request,VXPolicy vXPolicy){
  RESTResponse ret=null;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + vXPolicy + ""String_Node_Str"");
  }
  if (vXPolicy != null) {
    String serviceName=vXPolicy.getRepositoryName();
    GrantRevokeRequest grantRevokeRequest=serviceUtil.toGrantRevokeRequest(vXPolicy);
    try {
      ret=serviceREST.revokeAccess(serviceName,grantRevokeRequest,request);
    }
 catch (    Exception e) {
      logger.error(HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str"" + vXPolicy);
      throw restErrorUtil.createRESTException(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"" + e.getMessage(),true);
    }
  }
 else {
    logger.error(HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str"" + vXPolicy);
    throw restErrorUtil.createRESTException(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"",true);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ret + ""String_Node_Str"");
  }
  return vXPolicy;
}","@POST @Path(""String_Node_Str"") @Produces({""String_Node_Str"",""String_Node_Str""}) public VXPolicy revokePermission(@Context HttpServletRequest request,VXPolicy vXPolicy){
  RESTResponse ret=null;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + vXPolicy + ""String_Node_Str"");
  }
  if (vXPolicy != null) {
    String serviceName=vXPolicy.getRepositoryName();
    GrantRevokeRequest grantRevokeRequest=serviceUtil.toGrantRevokeRequest(vXPolicy);
    try {
      ret=serviceREST.revokeAccess(serviceName,grantRevokeRequest,request);
    }
 catch (    WebApplicationException excp) {
      throw excp;
    }
catch (    Throwable e) {
      logger.error(HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str"" + vXPolicy,e);
      throw restErrorUtil.createRESTException(""String_Node_Str"" + vXPolicy + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    logger.error(HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str"");
    throw restErrorUtil.createRESTException(""String_Node_Str"");
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ret + ""String_Node_Str"");
  }
  return vXPolicy;
}",0.7987588652482269
166416,"@GET @Path(KMSRESTConstants.KEY_RESOURCE + ""String_Node_Str"" + KMSRESTConstants.CURRENT_VERSION_SUB_RESOURCE) @Produces(MediaType.APPLICATION_JSON) public Response getCurrentVersion(@PathParam(""String_Node_Str"") final String name) throws Exception {
  UserGroupInformation user=HttpUserGroupInformation.get();
  KMSClientProvider.checkNotEmpty(name,""String_Node_Str"");
  KMSWebApp.getKeyCallsMeter().mark();
  assertAccess(Type.GET,user,KMSOp.GET_CURRENT_KEY,name);
  KeyVersion keyVersion=user.doAs(new PrivilegedExceptionAction<KeyVersion>(){
    @Override public KeyVersion run() throws Exception {
      return provider.getCurrentKey(name);
    }
  }
);
  Object json=KMSServerJSONUtils.toJSON(keyVersion);
  kmsAudit.ok(user,KMSOp.GET_CURRENT_KEY,name,""String_Node_Str"");
  return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();
}","@GET @Path(KMSRESTConstants.KEY_RESOURCE + ""String_Node_Str"" + KMSRESTConstants.CURRENT_VERSION_SUB_RESOURCE) @Produces(MediaType.APPLICATION_JSON) public Response getCurrentVersion(@PathParam(""String_Node_Str"") final String name) throws Exception {
  UserGroupInformation user=HttpUserGroupInformation.get();
  KMSClientProvider.checkNotEmpty(name,""String_Node_Str"");
  KMSWebApp.getKeyCallsMeter().mark();
  assertAccess(Type.GET,user,KMSOp.GET_CURRENT_KEY,name);
  KeyVersion keyVersion=user.doAs(new PrivilegedExceptionAction<KeyVersion>(){
    @Override public KeyVersion run() throws Exception {
      return provider.getCurrentKey(name);
    }
  }
);
  Object json=KMSServerJSONUtils.toJSON(keyVersion);
  if (keyVersion != null) {
    kmsAudit.ok(user,KMSOp.GET_CURRENT_KEY,name,""String_Node_Str"");
    return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();
  }
 else {
    return Response.status(404).type(MediaType.APPLICATION_JSON).entity(json).build();
  }
}",0.9269085002707091
166417,"public SearchFilter extractCommonCriteriasForFilter(HttpServletRequest request,SearchFilter ret,List<SortField> sortFields){
  int startIndex=restErrorUtil.parseInt(request.getParameter(SearchFilter.START_INDEX),0,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,SearchFilter.START_INDEX);
  ret.setStartIndex(startIndex);
  int pageSize=restErrorUtil.parseInt(request.getParameter(SearchFilter.PAGE_SIZE),configUtil.getDefaultMaxRows(),""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,SearchFilter.PAGE_SIZE);
  ret.setMaxRows(pageSize);
  ret.setGetCount(restErrorUtil.parseBoolean(request.getParameter(""String_Node_Str""),true));
  String sortBy=restErrorUtil.validateString(request.getParameter(SearchFilter.SORT_BY),StringUtil.VALIDATION_ALPHA,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,SearchFilter.SORT_BY);
  boolean sortSet=false;
  if (!StringUtils.isEmpty(sortBy)) {
    for (    SortField sortField : sortFields) {
      if (sortField.getParamName().equalsIgnoreCase(sortBy)) {
        ret.setSortBy(sortField.getParamName());
        String sortType=restErrorUtil.validateString(request.getParameter(""String_Node_Str""),StringUtil.VALIDATION_ALPHA,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
        ret.setSortType(sortType);
        sortSet=true;
        break;
      }
    }
  }
  if (!sortSet && !StringUtils.isEmpty(sortBy)) {
    logger.info(""String_Node_Str"" + sortBy,new Throwable());
  }
  if (ret.getParams() == null) {
    ret.setParams(new HashMap<String,String>());
  }
  return ret;
}","public SearchFilter extractCommonCriteriasForFilter(HttpServletRequest request,SearchFilter ret,List<SortField> sortFields){
  int startIndex=restErrorUtil.parseInt(request.getParameter(SearchFilter.START_INDEX),0,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,SearchFilter.START_INDEX);
  startIndex=startIndex < 0 ? 0 : startIndex;
  ret.setStartIndex(startIndex);
  int pageSize=restErrorUtil.parseInt(request.getParameter(SearchFilter.PAGE_SIZE),configUtil.getDefaultMaxRows(),""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,SearchFilter.PAGE_SIZE);
  ret.setMaxRows(pageSize);
  ret.setGetCount(restErrorUtil.parseBoolean(request.getParameter(""String_Node_Str""),true));
  String sortBy=restErrorUtil.validateString(request.getParameter(SearchFilter.SORT_BY),StringUtil.VALIDATION_ALPHA,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,SearchFilter.SORT_BY);
  boolean sortSet=false;
  if (!StringUtils.isEmpty(sortBy)) {
    for (    SortField sortField : sortFields) {
      if (sortField.getParamName().equalsIgnoreCase(sortBy)) {
        ret.setSortBy(sortField.getParamName());
        String sortType=restErrorUtil.validateString(request.getParameter(""String_Node_Str""),StringUtil.VALIDATION_ALPHA,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
        ret.setSortType(sortType);
        sortSet=true;
        break;
      }
    }
  }
  if (!sortSet && !StringUtils.isEmpty(sortBy)) {
    logger.info(""String_Node_Str"" + sortBy,new Throwable());
  }
  if (ret.getParams() == null) {
    ret.setParams(new HashMap<String,String>());
  }
  return ret;
}",0.9855072463768116
166418,"/** 
 * @param request
 * @param sortFields
 * @return
 */
public SearchCriteria extractCommonCriterias(HttpServletRequest request,List<SortField> sortFields){
  SearchCriteria searchCriteria=new SearchCriteria();
  int startIndex=restErrorUtil.parseInt(request.getParameter(""String_Node_Str""),0,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
  searchCriteria.setStartIndex(startIndex);
  int pageSize=restErrorUtil.parseInt(request.getParameter(""String_Node_Str""),configUtil.getDefaultMaxRows(),""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
  searchCriteria.setMaxRows(pageSize);
  searchCriteria.setGetCount(restErrorUtil.parseBoolean(request.getParameter(""String_Node_Str""),true));
  searchCriteria.setOwnerId(restErrorUtil.parseLong(request.getParameter(""String_Node_Str""),null));
  searchCriteria.setGetChildren(restErrorUtil.parseBoolean(request.getParameter(""String_Node_Str""),false));
  String sortBy=restErrorUtil.validateString(request.getParameter(""String_Node_Str""),StringUtil.VALIDATION_ALPHA,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
  boolean sortSet=false;
  if (!stringUtil.isEmpty(sortBy)) {
    for (    SortField sortField : sortFields) {
      if (sortField.getParamName().equalsIgnoreCase(sortBy)) {
        searchCriteria.setSortBy(sortField.getParamName());
        String sortType=restErrorUtil.validateString(request.getParameter(""String_Node_Str""),StringUtil.VALIDATION_ALPHA,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
        searchCriteria.setSortType(sortType);
        sortSet=true;
        break;
      }
    }
  }
  if (!sortSet && !stringUtil.isEmpty(sortBy)) {
    logger.info(""String_Node_Str"" + sortBy,new Throwable());
  }
  return searchCriteria;
}","/** 
 * @param request
 * @param sortFields
 * @return
 */
public SearchCriteria extractCommonCriterias(HttpServletRequest request,List<SortField> sortFields){
  SearchCriteria searchCriteria=new SearchCriteria();
  int startIndex=restErrorUtil.parseInt(request.getParameter(""String_Node_Str""),0,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
  startIndex=startIndex < 0 ? 0 : startIndex;
  searchCriteria.setStartIndex(startIndex);
  int pageSize=restErrorUtil.parseInt(request.getParameter(""String_Node_Str""),configUtil.getDefaultMaxRows(),""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
  searchCriteria.setMaxRows(pageSize);
  searchCriteria.setGetCount(restErrorUtil.parseBoolean(request.getParameter(""String_Node_Str""),true));
  searchCriteria.setOwnerId(restErrorUtil.parseLong(request.getParameter(""String_Node_Str""),null));
  searchCriteria.setGetChildren(restErrorUtil.parseBoolean(request.getParameter(""String_Node_Str""),false));
  String sortBy=restErrorUtil.validateString(request.getParameter(""String_Node_Str""),StringUtil.VALIDATION_ALPHA,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
  boolean sortSet=false;
  if (!stringUtil.isEmpty(sortBy)) {
    for (    SortField sortField : sortFields) {
      if (sortField.getParamName().equalsIgnoreCase(sortBy)) {
        searchCriteria.setSortBy(sortField.getParamName());
        String sortType=restErrorUtil.validateString(request.getParameter(""String_Node_Str""),StringUtil.VALIDATION_ALPHA,""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA,null,""String_Node_Str"");
        searchCriteria.setSortType(sortType);
        sortSet=true;
        break;
      }
    }
  }
  if (!sortSet && !stringUtil.isEmpty(sortBy)) {
    logger.info(""String_Node_Str"" + sortBy,new Throwable());
  }
  return searchCriteria;
}",0.9874454148471616
166419,"@Override public RangerServiceDef getServiceDef(Long id) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  RangerServiceDef ret=null;
  ret=serviceDefService.read(id);
  List<String> userRoleList=ContextUtil.getCurrentUserSession().getUserRoleList();
  if (userRoleList != null && !userRoleList.contains(RangerConstants.ROLE_KEY_ADMIN)) {
    if (ret != null && ""String_Node_Str"".equalsIgnoreCase(ret.getName())) {
      ret=null;
    }
  }
 else {
    if (ret != null && !""String_Node_Str"".equalsIgnoreCase(ret.getName())) {
      ret=null;
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ret);
  }
  return ret;
}","@Override public RangerServiceDef getServiceDef(Long id) throws Exception {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  RangerServiceDef ret=null;
  ret=serviceDefService.read(id);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ret);
  }
  return ret;
}",0.4897579143389199
166420,"public RangerPolicyServiceBase(){
  super();
  searchFields.add(new SearchField(SearchFilter.SERVICE_TYPE,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.SERVICE_TYPE_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.SERVICE_NAME,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.SERVICE_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.IS_ENABLED,""String_Node_Str"",DATA_TYPE.BOOLEAN,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.POLICY_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.POLICY_NAME,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.USER,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.GROUP,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.POL_RESOURCE,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.PARTIAL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.POLICY_NAME_PARTIAL,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.PARTIAL));
  sortFields.add(new SortField(SearchFilter.CREATE_TIME,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.UPDATE_TIME,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.POLICY_ID,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.POLICY_NAME,""String_Node_Str""));
}","public RangerPolicyServiceBase(){
  super();
  searchFields.add(new SearchField(SearchFilter.SERVICE_TYPE,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.SERVICE_TYPE_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.SERVICE_NAME,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.SERVICE_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.IS_ENABLED,""String_Node_Str"",DATA_TYPE.BOOLEAN,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.POLICY_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.POLICY_NAME,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.USER,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.GROUP,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.POL_RESOURCE,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.PARTIAL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.POLICY_NAME_PARTIAL,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.PARTIAL));
  sortFields.add(new SortField(SearchFilter.CREATE_TIME,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.UPDATE_TIME,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.POLICY_ID,""String_Node_Str"",true,SORT_ORDER.ASC));
  sortFields.add(new SortField(SearchFilter.POLICY_NAME,""String_Node_Str""));
}",0.9948105864037364
166421,"public RangerServiceServiceBase(){
  super();
  searchFields.add(new SearchField(SearchFilter.SERVICE_TYPE,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.SERVICE_TYPE_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.SERVICE_NAME,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.SERVICE_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.IS_ENABLED,""String_Node_Str"",DATA_TYPE.BOOLEAN,SEARCH_TYPE.FULL));
  sortFields.add(new SortField(SearchFilter.CREATE_TIME,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.UPDATE_TIME,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.SERVICE_ID,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.SERVICE_NAME,""String_Node_Str""));
}","public RangerServiceServiceBase(){
  super();
  searchFields.add(new SearchField(SearchFilter.SERVICE_TYPE,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL,""String_Node_Str"",""String_Node_Str""));
  searchFields.add(new SearchField(SearchFilter.SERVICE_TYPE_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.SERVICE_NAME,""String_Node_Str"",DATA_TYPE.STRING,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.SERVICE_ID,""String_Node_Str"",DATA_TYPE.INTEGER,SEARCH_TYPE.FULL));
  searchFields.add(new SearchField(SearchFilter.IS_ENABLED,""String_Node_Str"",DATA_TYPE.BOOLEAN,SEARCH_TYPE.FULL));
  sortFields.add(new SortField(SearchFilter.CREATE_TIME,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.UPDATE_TIME,""String_Node_Str""));
  sortFields.add(new SortField(SearchFilter.SERVICE_ID,""String_Node_Str"",true,SORT_ORDER.ASC));
  sortFields.add(new SortField(SearchFilter.SERVICE_NAME,""String_Node_Str""));
}",0.989827060020346
166422,"boolean isValid(RangerPolicy policy,Action action,boolean isAdmin,List<ValidationFailureDetails> failures){
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",policy,action,isAdmin,failures));
  }
  if (!(action == Action.CREATE || action == Action.UPDATE)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean valid=true;
  if (policy == null) {
    String message=""String_Node_Str"";
    LOG.debug(message);
    failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
    valid=false;
  }
 else {
    Long id=policy.getId();
    if (action == Action.UPDATE) {
      if (id == null) {
        String message=""String_Node_Str"";
        LOG.debug(message);
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
        valid=false;
      }
 else       if (getPolicy(id) == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + id + ""String_Node_Str"").build());
        valid=false;
      }
    }
    String policyName=policy.getName();
    String serviceName=policy.getService();
    if (StringUtils.isBlank(policyName)) {
      String message=""String_Node_Str"" + policyName + ""String_Node_Str"";
      LOG.debug(message);
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
      valid=false;
    }
 else {
      List<RangerPolicy> policies=getPolicies(serviceName,policyName);
      if (CollectionUtils.isNotEmpty(policies)) {
        if (policies.size() > 1) {
          failures.add(new ValidationFailureDetailsBuilder().isAnInternalError().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str"").build());
          valid=false;
        }
 else         if (action == Action.CREATE) {
          failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str""+ policies.iterator().next().getId()+ ""String_Node_Str"").build());
          valid=false;
        }
 else         if (policies.iterator().next().getId() != id) {
          failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str""+ policies.iterator().next().getId()+ ""String_Node_Str"").build());
          valid=false;
        }
      }
    }
    RangerService service=null;
    if (StringUtils.isBlank(serviceName)) {
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(""String_Node_Str"").build());
      valid=false;
    }
 else {
      service=getService(serviceName);
      if (service == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"").build());
        valid=false;
      }
    }
    List<RangerPolicyItem> policyItems=policy.getPolicyItems();
    boolean isAuditEnabled=getIsAuditEnabled(policy);
    RangerServiceDef serviceDef=null;
    String serviceDefName=null;
    if (CollectionUtils.isEmpty(policyItems) && !isAuditEnabled) {
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(""String_Node_Str"").build());
      valid=false;
    }
 else     if (service != null) {
      serviceDefName=service.getType();
      serviceDef=getServiceDef(serviceDefName);
      if (serviceDef == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isAnInternalError().becauseOf(""String_Node_Str"").build());
        valid=false;
      }
 else {
        valid=isValidPolicyItems(policyItems,failures,serviceDef) && valid;
      }
    }
    valid=isValidResources(policy,failures,action,isAdmin,serviceDef,serviceName) && valid;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",policy,action,isAdmin,failures,valid));
  }
  return valid;
}","boolean isValid(RangerPolicy policy,Action action,boolean isAdmin,List<ValidationFailureDetails> failures){
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",policy,action,isAdmin,failures));
  }
  if (!(action == Action.CREATE || action == Action.UPDATE)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean valid=true;
  if (policy == null) {
    String message=""String_Node_Str"";
    LOG.debug(message);
    failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
    valid=false;
  }
 else {
    Long id=policy.getId();
    if (action == Action.UPDATE) {
      if (id == null) {
        String message=""String_Node_Str"";
        LOG.debug(message);
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
        valid=false;
      }
 else       if (getPolicy(id) == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + id + ""String_Node_Str"").build());
        valid=false;
      }
    }
    String policyName=policy.getName();
    String serviceName=policy.getService();
    if (StringUtils.isBlank(policyName)) {
      String message=""String_Node_Str"" + policyName + ""String_Node_Str"";
      LOG.debug(message);
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
      valid=false;
    }
 else {
      List<RangerPolicy> policies=getPolicies(serviceName,policyName);
      if (CollectionUtils.isNotEmpty(policies)) {
        if (policies.size() > 1) {
          failures.add(new ValidationFailureDetailsBuilder().isAnInternalError().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str"").build());
          valid=false;
        }
 else         if (action == Action.CREATE) {
          failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str""+ policies.iterator().next().getId()+ ""String_Node_Str"").build());
          valid=false;
        }
 else         if (!policies.iterator().next().getId().equals(id)) {
          failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str""+ policies.iterator().next().getId()+ ""String_Node_Str"").build());
          valid=false;
        }
      }
    }
    RangerService service=null;
    if (StringUtils.isBlank(serviceName)) {
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(""String_Node_Str"").build());
      valid=false;
    }
 else {
      service=getService(serviceName);
      if (service == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"").build());
        valid=false;
      }
    }
    List<RangerPolicyItem> policyItems=policy.getPolicyItems();
    boolean isAuditEnabled=getIsAuditEnabled(policy);
    RangerServiceDef serviceDef=null;
    String serviceDefName=null;
    if (CollectionUtils.isEmpty(policyItems) && !isAuditEnabled) {
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(""String_Node_Str"").build());
      valid=false;
    }
 else     if (service != null) {
      serviceDefName=service.getType();
      serviceDef=getServiceDef(serviceDefName);
      if (serviceDef == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isAnInternalError().becauseOf(""String_Node_Str"").build());
        valid=false;
      }
 else {
        valid=isValidPolicyItems(policyItems,failures,serviceDef) && valid;
      }
    }
    valid=isValidResources(policy,failures,action,isAdmin,serviceDef,serviceName) && valid;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",policy,action,isAdmin,failures,valid));
  }
  return valid;
}",0.9978165938864628
166423,"protected static RangerResourceMatcher createResourceMatcher(RangerResourceDef resourceDef,RangerPolicyResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceDef + ""String_Node_Str""+ resource+ ""String_Node_Str"");
  }
  RangerResourceMatcher ret=null;
  String resName=resourceDef != null ? resourceDef.getName() : null;
  String clsName=resourceDef != null ? resourceDef.getMatcher() : null;
  if (!StringUtils.isEmpty(clsName)) {
    try {
      @SuppressWarnings(""String_Node_Str"") Class<RangerResourceMatcher> matcherClass=(Class<RangerResourceMatcher>)Class.forName(clsName);
      ret=matcherClass.newInstance();
    }
 catch (    Exception excp) {
      LOG.error(""String_Node_Str"" + clsName + ""String_Node_Str""+ resName+ ""String_Node_Str"",excp);
    }
  }
  if (ret == null) {
    ret=new RangerDefaultResourceMatcher();
  }
  if (ret != null) {
    ret.init(resourceDef,resource);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceDef + ""String_Node_Str""+ resource+ ""String_Node_Str""+ ret);
  }
  return ret;
}","protected static RangerResourceMatcher createResourceMatcher(RangerResourceDef resourceDef,RangerPolicyResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceDef + ""String_Node_Str""+ resource+ ""String_Node_Str"");
  }
  RangerResourceMatcher ret=null;
  if (resourceDef != null) {
    String resName=resourceDef.getName();
    String clsName=resourceDef.getMatcher();
    if (!StringUtils.isEmpty(clsName)) {
      try {
        @SuppressWarnings(""String_Node_Str"") Class<RangerResourceMatcher> matcherClass=(Class<RangerResourceMatcher>)Class.forName(clsName);
        ret=matcherClass.newInstance();
      }
 catch (      Exception excp) {
        LOG.error(""String_Node_Str"" + clsName + ""String_Node_Str""+ resName+ ""String_Node_Str"",excp);
      }
    }
    if (ret == null) {
      ret=new RangerDefaultResourceMatcher();
    }
    if (ret != null) {
      ret.init(resourceDef,resource);
    }
  }
 else {
    LOG.error(""String_Node_Str"");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceDef + ""String_Node_Str""+ resource+ ""String_Node_Str""+ ret);
  }
  return ret;
}",0.9003157419936851
166424,"public List<String> getTableList(final String tableNameMatching,final List<String> existingTableList){
  List<String> ret=null;
  final String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  subj=getLoginSubject();
  if (subj != null) {
    ret=Subject.doAs(subj,new PrivilegedAction<List<String>>(){
      @Override public List<String> run(){
        List<String> tableList=new ArrayList<String>();
        HBaseAdmin admin=null;
        try {
          LOG.info(""String_Node_Str"");
          Configuration conf=HBaseConfiguration.create();
          LOG.info(""String_Node_Str"");
          setClientConfigValues(conf);
          LOG.info(""String_Node_Str"");
          HBaseAdmin.checkHBaseAvailable(conf);
          LOG.info(""String_Node_Str"");
          admin=new HBaseAdmin(conf);
          for (          HTableDescriptor htd : admin.listTables(tableNameMatching)) {
            String tableName=htd.getNameAsString();
            if (existingTableList != null && existingTableList.contains(tableName)) {
              continue;
            }
 else {
              tableList.add(htd.getNameAsString());
            }
          }
        }
 catch (        ZooKeeperConnectionException zce) {
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,zce);
          hdpException.generateResponseDataMap(false,getMessage(zce),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + zce);
          throw hdpException;
        }
catch (        MasterNotRunningException mnre) {
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,mnre);
          hdpException.generateResponseDataMap(false,getMessage(mnre),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + mnre);
          throw hdpException;
        }
catch (        IOException io) {
          String msgDesc=""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str""+ tableNameMatching+ ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,io);
          hdpException.generateResponseDataMap(false,getMessage(io),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + io);
          throw hdpException;
        }
catch (        Throwable e) {
          String msgDesc=""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str""+ tableNameMatching+ ""String_Node_Str"";
          LOG.error(msgDesc + e);
          HadoopException hdpException=new HadoopException(msgDesc,e);
          hdpException.generateResponseDataMap(false,getMessage(e),msgDesc + errMsg,null,null);
          throw hdpException;
        }
 finally {
          if (admin != null) {
            try {
              admin.close();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str"",e);
            }
          }
        }
        return tableList;
      }
    }
);
  }
  return ret;
}","public List<String> getTableList(final String tableNameMatching,final List<String> existingTableList){
  List<String> ret=null;
  final String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  subj=getLoginSubject();
  if (subj != null) {
    ret=Subject.doAs(subj,new PrivilegedAction<List<String>>(){
      @Override public List<String> run(){
        List<String> tableList=new ArrayList<String>();
        HBaseAdmin admin=null;
        try {
          LOG.info(""String_Node_Str"");
          Configuration conf=HBaseConfiguration.create();
          LOG.info(""String_Node_Str"");
          setClientConfigValues(conf);
          LOG.info(""String_Node_Str"");
          HBaseAdmin.checkHBaseAvailable(conf);
          LOG.info(""String_Node_Str"");
          admin=new HBaseAdmin(conf);
          for (          HTableDescriptor htd : admin.listTables(tableNameMatching)) {
            if (htd == null) {
              LOG.error(""String_Node_Str"");
            }
 else {
              String tableName=htd.getNameAsString();
              if (existingTableList != null && existingTableList.contains(tableName)) {
                continue;
              }
 else {
                tableList.add(htd.getNameAsString());
              }
            }
          }
        }
 catch (        ZooKeeperConnectionException zce) {
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,zce);
          hdpException.generateResponseDataMap(false,getMessage(zce),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + zce);
          throw hdpException;
        }
catch (        MasterNotRunningException mnre) {
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,mnre);
          hdpException.generateResponseDataMap(false,getMessage(mnre),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + mnre);
          throw hdpException;
        }
catch (        IOException io) {
          String msgDesc=""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str""+ tableNameMatching+ ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,io);
          hdpException.generateResponseDataMap(false,getMessage(io),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + io);
          throw hdpException;
        }
catch (        Throwable e) {
          String msgDesc=""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str""+ tableNameMatching+ ""String_Node_Str"";
          LOG.error(msgDesc + e);
          HadoopException hdpException=new HadoopException(msgDesc,e);
          hdpException.generateResponseDataMap(false,getMessage(e),msgDesc + errMsg,null,null);
          throw hdpException;
        }
 finally {
          if (admin != null) {
            try {
              admin.close();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str"",e);
            }
          }
        }
        return tableList;
      }
    }
);
  }
  return ret;
}",0.7242968377562371
166425,"private boolean isAccessAllowed(INode inode,INodeAttributes inodeAttribs,FsAction access,String user,Set<String> groups,String fsOwner,String superGroup,RangerHdfsPlugin plugin,RangerHdfsAuditHandler auditHandler){
  boolean ret=false;
  String path=inode != null ? inode.getFullPathName() : null;
  String pathOwner=inodeAttribs != null ? inodeAttribs.getUserName() : null;
  if (pathOwner == null && inode != null) {
    pathOwner=inode.getUserName();
  }
  if (RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH_ALT.equals(path)) {
    path=RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str"");
  }
  Set<String> accessTypes=access2ActionListMapper.get(access);
  if (accessTypes == null) {
    LOG.warn(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str""+ access);
    accessTypes=access2ActionListMapper.get(FsAction.NONE);
  }
  for (  String accessType : accessTypes) {
    RangerHdfsAccessRequest request=new RangerHdfsAccessRequest(path,pathOwner,access,accessType,user,groups);
    RangerAccessResult result=plugin.isAccessAllowed(request,auditHandler);
    ret=result.getIsAllowed();
    if (!ret) {
      break;
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str""+ ret);
  }
  return ret;
}","private boolean isAccessAllowed(INode inode,INodeAttributes inodeAttribs,FsAction access,String user,Set<String> groups,String fsOwner,String superGroup,RangerHdfsPlugin plugin,RangerHdfsAuditHandler auditHandler){
  boolean ret=false;
  String path=inode != null ? inode.getFullPathName() : null;
  String pathOwner=inodeAttribs != null ? inodeAttribs.getUserName() : null;
  if (pathOwner == null && inode != null) {
    pathOwner=inode.getUserName();
  }
  if (RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH_ALT.equals(path)) {
    path=RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str"");
  }
  Set<String> accessTypes=access2ActionListMapper.get(access);
  if (accessTypes == null) {
    LOG.warn(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str""+ access);
    accessTypes=access2ActionListMapper.get(FsAction.NONE);
  }
  for (  String accessType : accessTypes) {
    RangerHdfsAccessRequest request=new RangerHdfsAccessRequest(path,pathOwner,access,accessType,user,groups);
    RangerAccessResult result=plugin.isAccessAllowed(request,auditHandler);
    if (result == null) {
      LOG.error(""String_Node_Str"");
    }
 else {
      ret=result.getIsAllowed();
      if (!ret) {
        break;
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str""+ ret);
  }
  return ret;
}",0.9704336399474376
166426,"/** 
 * Check if user has privileges to do this action on these objects
 * @param hiveOpType
 * @param inputsHObjs
 * @param outputHObjs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
@Override public void checkPrivileges(HiveOperationType hiveOpType,List<HivePrivilegeObject> inputHObjs,List<HivePrivilegeObject> outputHObjs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  UserGroupInformation ugi=getCurrentUserGroupInfo();
  if (ugi == null) {
    throw new HiveAccessControlException(""String_Node_Str"");
  }
  RangerHiveAuditHandler auditHandler=new RangerHiveAuditHandler();
  try {
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(toString(hiveOpType,inputHObjs,outputHObjs,context,sessionContext));
    }
    if (hiveOpType == HiveOperationType.DFS) {
      handleDfsCommand(hiveOpType,inputHObjs,outputHObjs,context,sessionContext,user,groups,auditHandler);
      return;
    }
    List<RangerHiveAccessRequest> requests=new ArrayList<RangerHiveAccessRequest>();
    if (inputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : inputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.READ;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,true);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (outputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : outputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.WRITE;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,false);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (isMetaDataOperation(hiveOpType)) {
      RangerHiveResource resource=getHiveResource(hiveOpType);
      RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,context,sessionContext);
      RangerAccessResult result=hivePlugin.isAccessAllowed(request);
      if (result == null) {
        LOG.error(""String_Node_Str"");
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,hiveOpType));
      }
 else       if (!result.getIsAllowed()) {
        String path=resource.getAsString(result.getServiceDef());
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,hiveOpType.name(),path));
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(String.format(""String_Node_Str"",hiveOpType,resource,request,result));
        }
        if (result.getIsAudited()) {
          auditHandler.logAuditEventForFiltering(result,hiveOpType);
        }
      }
    }
 else {
      for (      RangerHiveAccessRequest request : requests) {
        RangerHiveResource resource=(RangerHiveResource)request.getResource();
        RangerAccessResult result=null;
        if (resource.getObjectType() == HiveObjectType.COLUMN && StringUtils.contains(resource.getColumn(),COLUMN_SEP)) {
          List<RangerAccessRequest> colRequests=new ArrayList<RangerAccessRequest>();
          String[] columns=StringUtils.split(resource.getColumn(),COLUMN_SEP);
          for (          String column : columns) {
            if (column != null) {
              column=column.trim();
            }
            if (StringUtils.isEmpty(column.trim())) {
              continue;
            }
            RangerHiveResource colResource=new RangerHiveResource(HiveObjectType.COLUMN,resource.getDatabase(),resource.getTable(),column);
            RangerHiveAccessRequest colRequest=request.copy();
            colRequest.setResource(colResource);
            colRequests.add(colRequest);
          }
          Collection<RangerAccessResult> colResults=hivePlugin.isAccessAllowed(colRequests,auditHandler);
          if (colResults != null) {
            for (            RangerAccessResult colResult : colResults) {
              result=colResult;
              if (!result.getIsAllowed()) {
                break;
              }
            }
          }
        }
 else {
          result=hivePlugin.isAccessAllowed(request,auditHandler);
        }
        if (result != null && !result.getIsAllowed()) {
          String path=resource != null ? resource.getAsString(result.getServiceDef()) : null;
          throw new HiveAccessControlException(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
        }
      }
    }
  }
  finally {
    auditHandler.flushAudit();
  }
}","/** 
 * Check if user has privileges to do this action on these objects
 * @param hiveOpType
 * @param inputsHObjs
 * @param outputHObjs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
@Override public void checkPrivileges(HiveOperationType hiveOpType,List<HivePrivilegeObject> inputHObjs,List<HivePrivilegeObject> outputHObjs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  UserGroupInformation ugi=getCurrentUserGroupInfo();
  if (ugi == null) {
    throw new HiveAccessControlException(""String_Node_Str"");
  }
  RangerHiveAuditHandler auditHandler=new RangerHiveAuditHandler();
  try {
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(toString(hiveOpType,inputHObjs,outputHObjs,context,sessionContext));
    }
    if (hiveOpType == HiveOperationType.DFS) {
      handleDfsCommand(hiveOpType,inputHObjs,outputHObjs,context,sessionContext,user,groups,auditHandler);
      return;
    }
    List<RangerHiveAccessRequest> requests=new ArrayList<RangerHiveAccessRequest>();
    if (inputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : inputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.READ;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,true);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (outputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : outputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.WRITE;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,false);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (isMetaDataOperation(hiveOpType)) {
      RangerHiveResource resource=getHiveResource(hiveOpType);
      RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,context,sessionContext);
      RangerAccessResult result=hivePlugin.isAccessAllowed(request);
      if (result == null) {
        LOG.error(""String_Node_Str"");
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,hiveOpType));
      }
 else       if (!result.getIsAllowed()) {
        String path=resource.getAsString(result.getServiceDef());
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,hiveOpType.name(),path));
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(String.format(""String_Node_Str"",hiveOpType,resource,request,result));
        }
        if (result.getIsAudited()) {
          auditHandler.logAuditEventForFiltering(result,hiveOpType);
        }
      }
    }
 else {
      for (      RangerHiveAccessRequest request : requests) {
        RangerHiveResource resource=(RangerHiveResource)request.getResource();
        RangerAccessResult result=null;
        if (resource.getObjectType() == HiveObjectType.COLUMN && StringUtils.contains(resource.getColumn(),COLUMN_SEP)) {
          List<RangerAccessRequest> colRequests=new ArrayList<RangerAccessRequest>();
          String[] columns=StringUtils.split(resource.getColumn(),COLUMN_SEP);
          for (          String column : columns) {
            if (column != null) {
              column=column.trim();
            }
            if (StringUtils.isEmpty(column)) {
              continue;
            }
            RangerHiveResource colResource=new RangerHiveResource(HiveObjectType.COLUMN,resource.getDatabase(),resource.getTable(),column);
            RangerHiveAccessRequest colRequest=request.copy();
            colRequest.setResource(colResource);
            colRequests.add(colRequest);
          }
          Collection<RangerAccessResult> colResults=hivePlugin.isAccessAllowed(colRequests,auditHandler);
          if (colResults != null) {
            for (            RangerAccessResult colResult : colResults) {
              result=colResult;
              if (!result.getIsAllowed()) {
                break;
              }
            }
          }
        }
 else {
          result=hivePlugin.isAccessAllowed(request,auditHandler);
        }
        if (result != null && !result.getIsAllowed()) {
          String path=resource.getAsString(result.getServiceDef());
          throw new HiveAccessControlException(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
        }
      }
    }
  }
  finally {
    auditHandler.flushAudit();
  }
}",0.9972243250063084
166427,"/** 
 * Check if user has privileges to do this action on these objects
 * @param objs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
public List<HivePrivilegeObject> filterListCmdObjects(List<HivePrivilegeObject> objs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",objs,context));
  }
  List<HivePrivilegeObject> ret=null;
  if (objs == null) {
    LOG.debug(""String_Node_Str"");
  }
 else   if (objs.isEmpty()) {
    LOG.debug(""String_Node_Str"");
    ret=objs;
  }
 else   if (getCurrentUserGroupInfo() == null) {
    LOG.warn(""String_Node_Str"");
    ret=objs;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + objs.size() + ""String_Node_Str"");
    }
    UserGroupInformation ugi=getCurrentUserGroupInfo();
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(String.format(""String_Node_Str"",user,groups));
    }
    if (ret == null) {
      ret=new ArrayList<HivePrivilegeObject>(objs.size());
    }
    for (    HivePrivilegeObject privilegeObject : objs) {
      if (LOG.isDebugEnabled()) {
        HivePrivObjectActionType actionType=privilegeObject.getActionType();
        HivePrivilegeObjectType objectType=privilegeObject.getType();
        String objectName=privilegeObject.getObjectName();
        String dbName=privilegeObject.getDbname();
        List<String> columns=privilegeObject.getColumns();
        List<String> partitionKeys=privilegeObject.getPartKeys();
        String commandString=context.getCommandString();
        String ipAddress=context.getIpAddress();
        final String format=""String_Node_Str"";
        LOG.debug(String.format(format,actionType,objectType,objectName,dbName,columns,partitionKeys,commandString,ipAddress));
      }
      RangerHiveResource resource=createHiveResource(privilegeObject);
      RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,context,sessionContext);
      RangerAccessResult result=hivePlugin.isAccessAllowed(request);
      if (result == null) {
        LOG.error(""String_Node_Str"");
      }
 else       if (!result.getIsAllowed()) {
        if (!LOG.isDebugEnabled()) {
          String path=resource.getAsString(result.getServiceDef());
          LOG.debug(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
        }
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(String.format(""String_Node_Str"",resource,request,result));
        }
        ret.add(privilegeObject);
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",ret == null ? 0 : ret.size()));
    LOG.debug(String.format(""String_Node_Str"",objs,context,ret));
  }
  return ret;
}","/** 
 * Check if user has privileges to do this action on these objects
 * @param objs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
public List<HivePrivilegeObject> filterListCmdObjects(List<HivePrivilegeObject> objs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",objs,context));
  }
  List<HivePrivilegeObject> ret=null;
  if (objs == null) {
    LOG.debug(""String_Node_Str"");
  }
 else   if (objs.isEmpty()) {
    LOG.debug(""String_Node_Str"");
    ret=objs;
  }
 else   if (getCurrentUserGroupInfo() == null) {
    LOG.warn(""String_Node_Str"");
    ret=objs;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + objs.size() + ""String_Node_Str"");
    }
    UserGroupInformation ugi=getCurrentUserGroupInfo();
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(String.format(""String_Node_Str"",user,groups));
    }
    if (ret == null) {
      ret=new ArrayList<HivePrivilegeObject>(objs.size());
    }
    for (    HivePrivilegeObject privilegeObject : objs) {
      if (LOG.isDebugEnabled()) {
        HivePrivObjectActionType actionType=privilegeObject.getActionType();
        HivePrivilegeObjectType objectType=privilegeObject.getType();
        String objectName=privilegeObject.getObjectName();
        String dbName=privilegeObject.getDbname();
        List<String> columns=privilegeObject.getColumns();
        List<String> partitionKeys=privilegeObject.getPartKeys();
        String commandString=context.getCommandString();
        String ipAddress=context.getIpAddress();
        final String format=""String_Node_Str"";
        LOG.debug(String.format(format,actionType,objectType,objectName,dbName,columns,partitionKeys,commandString,ipAddress));
      }
      RangerHiveResource resource=createHiveResource(privilegeObject);
      if (resource == null) {
        LOG.error(""String_Node_Str"");
      }
 else {
        RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,context,sessionContext);
        RangerAccessResult result=hivePlugin.isAccessAllowed(request);
        if (result == null) {
          LOG.error(""String_Node_Str"");
        }
 else         if (!result.getIsAllowed()) {
          if (!LOG.isDebugEnabled()) {
            String path=resource.getAsString(result.getServiceDef());
            LOG.debug(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
          }
        }
 else {
          if (LOG.isDebugEnabled()) {
            LOG.debug(String.format(""String_Node_Str"",resource,request,result));
          }
          ret.add(privilegeObject);
        }
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",ret == null ? 0 : ret.size()));
    LOG.debug(String.format(""String_Node_Str"",objs,context,ret));
  }
  return ret;
}",0.9114957544088832
166428,"public List<String> getQueueList(final String queueNameMatching,final List<String> existingQueueList){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + queueNameMatching);
  }
  final String errMsg=errMessage;
  List<String> ret=new ArrayList<String>();
  Callable<List<String>> yarnQueueListGetter=new Callable<List<String>>(){
    @Override public List<String> call(){
      List<String> lret=new ArrayList<String>();
      String url=yarnQUrl + YARN_LIST_API_ENDPOINT;
      Client client=null;
      ClientResponse response=null;
      try {
        client=Client.create();
        WebResource webResource=client.resource(url);
        response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + url);
        }
        if (response != null) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"" + response.getStatus());
          }
          if (response.getStatus() == 200) {
            String jsonString=response.getEntity(String.class);
            Gson gson=new GsonBuilder().setPrettyPrinting().create();
            YarnSchedulerResponse yarnQResponse=gson.fromJson(jsonString,YarnSchedulerResponse.class);
            if (yarnQResponse != null) {
              List<String> yarnQueueList=yarnQResponse.getQueueNames();
              if (yarnQueueList != null) {
                for (                String yarnQueueName : yarnQueueList) {
                  if (existingQueueList != null && existingQueueList.contains(yarnQueueName)) {
                    continue;
                  }
                  if (queueNameMatching == null || queueNameMatching.isEmpty() || yarnQueueName.startsWith(queueNameMatching)) {
                    if (LOG.isDebugEnabled()) {
                      LOG.debug(""String_Node_Str"" + yarnQueueName);
                    }
                    lret.add(yarnQueueName);
                  }
                }
              }
            }
          }
 else {
            LOG.info(""String_Node_Str"" + response.getStatus() + ""String_Node_Str""+ url+ ""String_Node_Str"");
            String jsonString=response.getEntity(String.class);
            LOG.info(jsonString);
            lret=null;
          }
        }
 else {
          lret=null;
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + EXPECTED_MIME_TYPE + ""String_Node_Str""+ url+ ""String_Node_Str"";
          LOG.error(msgDesc);
          HadoopException hdpException=new HadoopException(msgDesc);
          hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
          throw hdpException;
        }
      }
 catch (      HadoopException he) {
        lret=null;
        throw he;
      }
catch (      Throwable t) {
        lret=null;
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + url;
        HadoopException hdpException=new HadoopException(msgDesc,t);
        LOG.error(msgDesc,t);
        hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
        throw hdpException;
      }
 finally {
        if (response != null) {
          response.close();
        }
        if (client != null) {
          client.destroy();
        }
      }
      return lret;
    }
  }
;
  try {
    ret=timedTask(yarnQueueListGetter,5,TimeUnit.SECONDS);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"" + yarnQUrl + ""String_Node_Str"",t);
    String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + EXPECTED_MIME_TYPE + ""String_Node_Str""+ yarnQUrl;
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
  return ret;
}","public List<String> getQueueList(final String queueNameMatching,final List<String> existingQueueList){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + queueNameMatching);
  }
  final String errMsg=errMessage;
  List<String> ret=null;
  Callable<List<String>> yarnQueueListGetter=new Callable<List<String>>(){
    @Override public List<String> call(){
      List<String> lret=new ArrayList<String>();
      String url=yarnQUrl + YARN_LIST_API_ENDPOINT;
      Client client=null;
      ClientResponse response=null;
      try {
        client=Client.create();
        WebResource webResource=client.resource(url);
        response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + url);
        }
        if (response != null) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"" + response.getStatus());
          }
          if (response.getStatus() == 200) {
            String jsonString=response.getEntity(String.class);
            Gson gson=new GsonBuilder().setPrettyPrinting().create();
            YarnSchedulerResponse yarnQResponse=gson.fromJson(jsonString,YarnSchedulerResponse.class);
            if (yarnQResponse != null) {
              List<String> yarnQueueList=yarnQResponse.getQueueNames();
              if (yarnQueueList != null) {
                for (                String yarnQueueName : yarnQueueList) {
                  if (existingQueueList != null && existingQueueList.contains(yarnQueueName)) {
                    continue;
                  }
                  if (queueNameMatching == null || queueNameMatching.isEmpty() || yarnQueueName.startsWith(queueNameMatching)) {
                    if (LOG.isDebugEnabled()) {
                      LOG.debug(""String_Node_Str"" + yarnQueueName);
                    }
                    lret.add(yarnQueueName);
                  }
                }
              }
            }
          }
 else {
            LOG.info(""String_Node_Str"" + response.getStatus() + ""String_Node_Str""+ url+ ""String_Node_Str"");
            String jsonString=response.getEntity(String.class);
            LOG.info(jsonString);
            lret=null;
          }
        }
 else {
          lret=null;
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + EXPECTED_MIME_TYPE + ""String_Node_Str""+ url+ ""String_Node_Str"";
          LOG.error(msgDesc);
          HadoopException hdpException=new HadoopException(msgDesc);
          hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
          throw hdpException;
        }
      }
 catch (      HadoopException he) {
        lret=null;
        throw he;
      }
catch (      Throwable t) {
        lret=null;
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + url;
        HadoopException hdpException=new HadoopException(msgDesc,t);
        LOG.error(msgDesc,t);
        hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
        throw hdpException;
      }
 finally {
        if (response != null) {
          response.close();
        }
        if (client != null) {
          client.destroy();
        }
      }
      return lret;
    }
  }
;
  try {
    ret=timedTask(yarnQueueListGetter,5,TimeUnit.SECONDS);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"" + yarnQUrl + ""String_Node_Str"",t);
    String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + EXPECTED_MIME_TYPE + ""String_Node_Str""+ yarnQUrl;
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
  return ret;
}",0.9967083607636604
166429,"public VXResponse validateConfig(RangerService service,ServiceStore svcStore) throws Exception {
  VXResponse ret=new VXResponse();
  RangerBaseService svc=getRangerServiceByService(service,svcStore);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + svc + ""String_Node_Str"");
  }
  if (svc != null) {
    ClassLoader clsLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(svc.getClass().getClassLoader());
      HashMap<String,Object> responseData=svc.validateConfig();
      ret=generateResponseForTestConn(responseData,""String_Node_Str"");
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + svc.getServiceName();
      HashMap<String,Object> respData=new HashMap<String,Object>();
      String message=""String_Node_Str"";
      if (e instanceof HadoopException) {
        respData=((HadoopException)e).responseData;
        message=(respData != null && respData.get(""String_Node_Str"") != null) ? respData.get(""String_Node_Str"").toString() : msg;
      }
      ret=generateResponseForTestConn(respData,message);
      LOG.error(""String_Node_Str"" + e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(clsLoader);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + ret + ""String_Node_Str"");
  }
  return ret;
}","public VXResponse validateConfig(RangerService service,ServiceStore svcStore) throws Exception {
  VXResponse ret=new VXResponse();
  RangerBaseService svc=getRangerServiceByService(service,svcStore);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + svc + ""String_Node_Str"");
  }
  if (svc != null) {
    ClassLoader clsLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(svc.getClass().getClassLoader());
      HashMap<String,Object> responseData=svc.validateConfig();
      ret=generateResponseForTestConn(responseData,""String_Node_Str"");
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + svc.getServiceName();
      HashMap<String,Object> respData=new HashMap<String,Object>();
      if (e instanceof HadoopException) {
        respData=((HadoopException)e).responseData;
      }
      ret=generateResponseForTestConn(respData,msg);
      LOG.error(""String_Node_Str"" + e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(clsLoader);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + ret + ""String_Node_Str"");
  }
  return ret;
}",0.929421094369548
166430,"private VXResponse generateResponseForTestConn(HashMap<String,Object> responseData,String msg){
  VXResponse vXResponse=new VXResponse();
  Long objId=(responseData.get(""String_Node_Str"") != null) ? Long.parseLong(responseData.get(""String_Node_Str"").toString()) : null;
  boolean connectivityStatus=(responseData.get(""String_Node_Str"") != null) ? Boolean.parseBoolean(responseData.get(""String_Node_Str"").toString()) : false;
  int statusCode=(connectivityStatus) ? VXResponse.STATUS_SUCCESS : VXResponse.STATUS_ERROR;
  String message=(responseData.get(""String_Node_Str"") != null) ? responseData.get(""String_Node_Str"").toString() : msg;
  String description=(responseData.get(""String_Node_Str"") != null) ? responseData.get(""String_Node_Str"").toString() : msg;
  String fieldName=(responseData.get(""String_Node_Str"") != null) ? responseData.get(""String_Node_Str"").toString() : null;
  VXMessage vXMsg=new VXMessage();
  List<VXMessage> vXMsgList=new ArrayList<VXMessage>();
  vXMsg.setFieldName(fieldName);
  vXMsg.setMessage(message);
  vXMsg.setObjectId(objId);
  vXMsgList.add(vXMsg);
  vXResponse.setMessageList(vXMsgList);
  vXResponse.setMsgDesc(description);
  vXResponse.setStatusCode(statusCode);
  return vXResponse;
}","private VXResponse generateResponseForTestConn(HashMap<String,Object> responseData,String msg){
  VXResponse vXResponse=new VXResponse();
  Long objId=null;
  boolean connectivityStatus=false;
  int statusCode=VXResponse.STATUS_ERROR;
  String message=msg;
  String description=msg;
  String fieldName=null;
  if (responseData != null) {
    if (responseData.get(""String_Node_Str"") != null) {
      objId=Long.parseLong(responseData.get(""String_Node_Str"").toString());
    }
    if (responseData.get(""String_Node_Str"") != null) {
      connectivityStatus=Boolean.parseBoolean(responseData.get(""String_Node_Str"").toString());
    }
    if (connectivityStatus) {
      statusCode=VXResponse.STATUS_SUCCESS;
    }
    if (responseData.get(""String_Node_Str"") != null) {
      message=responseData.get(""String_Node_Str"").toString();
    }
    if (responseData.get(""String_Node_Str"") != null) {
      description=responseData.get(""String_Node_Str"").toString();
    }
    if (responseData.get(""String_Node_Str"") != null) {
      fieldName=responseData.get(""String_Node_Str"").toString();
    }
  }
  VXMessage vXMsg=new VXMessage();
  List<VXMessage> vXMsgList=new ArrayList<VXMessage>();
  vXMsg.setFieldName(fieldName);
  vXMsg.setMessage(message);
  vXMsg.setObjectId(objId);
  vXMsgList.add(vXMsg);
  vXResponse.setMessageList(vXMsgList);
  vXResponse.setMsgDesc(description);
  vXResponse.setStatusCode(statusCode);
  return vXResponse;
}",0.5980465815176559
166431,"boolean isValid(RangerPolicy policy,Action action,boolean isAdmin,List<ValidationFailureDetails> failures){
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",policy,action,isAdmin,failures));
  }
  if (!(action == Action.CREATE || action == Action.UPDATE)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean valid=true;
  if (policy == null) {
    String message=""String_Node_Str"";
    LOG.debug(message);
    failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
    valid=false;
  }
 else {
    Long id=policy.getId();
    if (action == Action.UPDATE) {
      if (id == null) {
        String message=""String_Node_Str"";
        LOG.debug(message);
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
        valid=false;
      }
 else       if (getPolicy(id) == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + id + ""String_Node_Str"").build());
        valid=false;
      }
    }
    String policyName=policy.getName();
    String serviceName=policy.getService();
    if (StringUtils.isBlank(policyName)) {
      String message=""String_Node_Str"" + policyName + ""String_Node_Str"";
      LOG.debug(message);
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
      valid=false;
    }
 else {
      List<RangerPolicy> policies=getPolicies(serviceName,policyName);
      if (CollectionUtils.isNotEmpty(policies)) {
        if (policies.size() > 1) {
          failures.add(new ValidationFailureDetailsBuilder().isAnInternalError().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str"").build());
          valid=false;
        }
 else         if (action == Action.CREATE) {
          failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str""+ policies.iterator().next().getId()+ ""String_Node_Str"").build());
          valid=false;
        }
 else         if (policies.iterator().next().getId() != id) {
          failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str""+ policies.iterator().next().getId()+ ""String_Node_Str"").build());
          valid=false;
        }
      }
    }
    RangerService service=null;
    if (StringUtils.isBlank(serviceName)) {
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(""String_Node_Str"").build());
      valid=false;
    }
 else {
      service=getService(serviceName);
      if (service == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"").build());
        valid=false;
      }
    }
    List<RangerPolicyItem> policyItems=policy.getPolicyItems();
    boolean isAuditEnabled=getIsAuditEnabled(policy);
    RangerServiceDef serviceDef=null;
    String serviceDefName=null;
    if (CollectionUtils.isEmpty(policyItems) && !isAuditEnabled) {
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(""String_Node_Str"").build());
      valid=false;
    }
 else     if (service != null) {
      serviceDefName=service.getType();
      serviceDef=getServiceDef(serviceDefName);
      if (serviceDef == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isAnInternalError().becauseOf(""String_Node_Str"").build());
        valid=false;
      }
 else {
        valid=isValidPolicyItems(policyItems,failures,serviceDef) && valid;
      }
    }
    valid=isValidResources(policy,failures,action,isAdmin,serviceDef,serviceName) && valid;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",policy,action,isAdmin,failures,valid));
  }
  return valid;
}","boolean isValid(RangerPolicy policy,Action action,boolean isAdmin,List<ValidationFailureDetails> failures){
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",policy,action,isAdmin,failures));
  }
  if (!(action == Action.CREATE || action == Action.UPDATE)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean valid=true;
  if (policy == null) {
    String message=""String_Node_Str"";
    LOG.debug(message);
    failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
    valid=false;
  }
 else {
    Long id=policy.getId();
    if (action == Action.UPDATE) {
      if (id == null) {
        String message=""String_Node_Str"";
        LOG.debug(message);
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
        valid=false;
      }
 else       if (getPolicy(id) == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + id + ""String_Node_Str"").build());
        valid=false;
      }
    }
    String policyName=policy.getName();
    String serviceName=policy.getService();
    if (StringUtils.isBlank(policyName)) {
      String message=""String_Node_Str"" + policyName + ""String_Node_Str"";
      LOG.debug(message);
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(message).build());
      valid=false;
    }
 else {
      List<RangerPolicy> policies=getPolicies(serviceName,policyName);
      if (CollectionUtils.isNotEmpty(policies)) {
        if (policies.size() > 1) {
          failures.add(new ValidationFailureDetailsBuilder().isAnInternalError().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str"").build());
          valid=false;
        }
 else         if (action == Action.CREATE) {
          failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str""+ policies.iterator().next().getId()+ ""String_Node_Str"").build());
          valid=false;
        }
 else         if (!policies.iterator().next().getId().equals(id)) {
          failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"" + policyName + ""String_Node_Str""+ policies.iterator().next().getId()+ ""String_Node_Str"").build());
          valid=false;
        }
      }
    }
    RangerService service=null;
    if (StringUtils.isBlank(serviceName)) {
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(""String_Node_Str"").build());
      valid=false;
    }
 else {
      service=getService(serviceName);
      if (service == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isSemanticallyIncorrect().becauseOf(""String_Node_Str"").build());
        valid=false;
      }
    }
    List<RangerPolicyItem> policyItems=policy.getPolicyItems();
    boolean isAuditEnabled=getIsAuditEnabled(policy);
    RangerServiceDef serviceDef=null;
    String serviceDefName=null;
    if (CollectionUtils.isEmpty(policyItems) && !isAuditEnabled) {
      failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isMissing().becauseOf(""String_Node_Str"").build());
      valid=false;
    }
 else     if (service != null) {
      serviceDefName=service.getType();
      serviceDef=getServiceDef(serviceDefName);
      if (serviceDef == null) {
        failures.add(new ValidationFailureDetailsBuilder().field(""String_Node_Str"").isAnInternalError().becauseOf(""String_Node_Str"").build());
        valid=false;
      }
 else {
        valid=isValidPolicyItems(policyItems,failures,serviceDef) && valid;
      }
    }
    valid=isValidResources(policy,failures,action,isAdmin,serviceDef,serviceName) && valid;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",policy,action,isAdmin,failures,valid));
  }
  return valid;
}",0.9978165938864628
166432,"protected static RangerResourceMatcher createResourceMatcher(RangerResourceDef resourceDef,RangerPolicyResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceDef + ""String_Node_Str""+ resource+ ""String_Node_Str"");
  }
  RangerResourceMatcher ret=null;
  String resName=resourceDef != null ? resourceDef.getName() : null;
  String clsName=resourceDef != null ? resourceDef.getMatcher() : null;
  if (!StringUtils.isEmpty(clsName)) {
    try {
      @SuppressWarnings(""String_Node_Str"") Class<RangerResourceMatcher> matcherClass=(Class<RangerResourceMatcher>)Class.forName(clsName);
      ret=matcherClass.newInstance();
    }
 catch (    Exception excp) {
      LOG.error(""String_Node_Str"" + clsName + ""String_Node_Str""+ resName+ ""String_Node_Str"",excp);
    }
  }
  if (ret == null) {
    ret=new RangerDefaultResourceMatcher();
  }
  if (ret != null) {
    ret.init(resourceDef,resource);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceDef + ""String_Node_Str""+ resource+ ""String_Node_Str""+ ret);
  }
  return ret;
}","protected static RangerResourceMatcher createResourceMatcher(RangerResourceDef resourceDef,RangerPolicyResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceDef + ""String_Node_Str""+ resource+ ""String_Node_Str"");
  }
  RangerResourceMatcher ret=null;
  if (resourceDef != null) {
    String resName=resourceDef.getName();
    String clsName=resourceDef.getMatcher();
    if (!StringUtils.isEmpty(clsName)) {
      try {
        @SuppressWarnings(""String_Node_Str"") Class<RangerResourceMatcher> matcherClass=(Class<RangerResourceMatcher>)Class.forName(clsName);
        ret=matcherClass.newInstance();
      }
 catch (      Exception excp) {
        LOG.error(""String_Node_Str"" + clsName + ""String_Node_Str""+ resName+ ""String_Node_Str"",excp);
      }
    }
    if (ret == null) {
      ret=new RangerDefaultResourceMatcher();
    }
    if (ret != null) {
      ret.init(resourceDef,resource);
    }
  }
 else {
    LOG.error(""String_Node_Str"");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resourceDef + ""String_Node_Str""+ resource+ ""String_Node_Str""+ ret);
  }
  return ret;
}",0.9003157419936851
166433,"public List<String> getTableList(final String tableNameMatching,final List<String> existingTableList){
  List<String> ret=null;
  final String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  subj=getLoginSubject();
  if (subj != null) {
    ret=Subject.doAs(subj,new PrivilegedAction<List<String>>(){
      @Override public List<String> run(){
        List<String> tableList=new ArrayList<String>();
        HBaseAdmin admin=null;
        try {
          LOG.info(""String_Node_Str"");
          Configuration conf=HBaseConfiguration.create();
          LOG.info(""String_Node_Str"");
          setClientConfigValues(conf);
          LOG.info(""String_Node_Str"");
          HBaseAdmin.checkHBaseAvailable(conf);
          LOG.info(""String_Node_Str"");
          admin=new HBaseAdmin(conf);
          for (          HTableDescriptor htd : admin.listTables(tableNameMatching)) {
            String tableName=htd.getNameAsString();
            if (existingTableList != null && existingTableList.contains(tableName)) {
              continue;
            }
 else {
              tableList.add(htd.getNameAsString());
            }
          }
        }
 catch (        ZooKeeperConnectionException zce) {
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,zce);
          hdpException.generateResponseDataMap(false,getMessage(zce),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + zce);
          throw hdpException;
        }
catch (        MasterNotRunningException mnre) {
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,mnre);
          hdpException.generateResponseDataMap(false,getMessage(mnre),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + mnre);
          throw hdpException;
        }
catch (        IOException io) {
          String msgDesc=""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str""+ tableNameMatching+ ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,io);
          hdpException.generateResponseDataMap(false,getMessage(io),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + io);
          throw hdpException;
        }
catch (        Throwable e) {
          String msgDesc=""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str""+ tableNameMatching+ ""String_Node_Str"";
          LOG.error(msgDesc + e);
          HadoopException hdpException=new HadoopException(msgDesc,e);
          hdpException.generateResponseDataMap(false,getMessage(e),msgDesc + errMsg,null,null);
          throw hdpException;
        }
 finally {
          if (admin != null) {
            try {
              admin.close();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str"",e);
            }
          }
        }
        return tableList;
      }
    }
);
  }
  return ret;
}","public List<String> getTableList(final String tableNameMatching,final List<String> existingTableList){
  List<String> ret=null;
  final String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  subj=getLoginSubject();
  if (subj != null) {
    ret=Subject.doAs(subj,new PrivilegedAction<List<String>>(){
      @Override public List<String> run(){
        List<String> tableList=new ArrayList<String>();
        HBaseAdmin admin=null;
        try {
          LOG.info(""String_Node_Str"");
          Configuration conf=HBaseConfiguration.create();
          LOG.info(""String_Node_Str"");
          setClientConfigValues(conf);
          LOG.info(""String_Node_Str"");
          HBaseAdmin.checkHBaseAvailable(conf);
          LOG.info(""String_Node_Str"");
          admin=new HBaseAdmin(conf);
          for (          HTableDescriptor htd : admin.listTables(tableNameMatching)) {
            if (htd == null) {
              LOG.error(""String_Node_Str"");
            }
 else {
              String tableName=htd.getNameAsString();
              if (existingTableList != null && existingTableList.contains(tableName)) {
                continue;
              }
 else {
                tableList.add(htd.getNameAsString());
              }
            }
          }
        }
 catch (        ZooKeeperConnectionException zce) {
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,zce);
          hdpException.generateResponseDataMap(false,getMessage(zce),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + zce);
          throw hdpException;
        }
catch (        MasterNotRunningException mnre) {
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,mnre);
          hdpException.generateResponseDataMap(false,getMessage(mnre),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + mnre);
          throw hdpException;
        }
catch (        IOException io) {
          String msgDesc=""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str""+ tableNameMatching+ ""String_Node_Str"";
          HadoopException hdpException=new HadoopException(msgDesc,io);
          hdpException.generateResponseDataMap(false,getMessage(io),msgDesc + errMsg,null,null);
          LOG.error(msgDesc + io);
          throw hdpException;
        }
catch (        Throwable e) {
          String msgDesc=""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str""+ tableNameMatching+ ""String_Node_Str"";
          LOG.error(msgDesc + e);
          HadoopException hdpException=new HadoopException(msgDesc,e);
          hdpException.generateResponseDataMap(false,getMessage(e),msgDesc + errMsg,null,null);
          throw hdpException;
        }
 finally {
          if (admin != null) {
            try {
              admin.close();
            }
 catch (            IOException e) {
              LOG.error(""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str"",e);
            }
          }
        }
        return tableList;
      }
    }
);
  }
  return ret;
}",0.7242968377562371
166434,"private boolean isAccessAllowed(INode inode,INodeAttributes inodeAttribs,FsAction access,String user,Set<String> groups,String fsOwner,String superGroup,RangerHdfsPlugin plugin,RangerHdfsAuditHandler auditHandler){
  boolean ret=false;
  String path=inode != null ? inode.getFullPathName() : null;
  String pathOwner=inodeAttribs != null ? inodeAttribs.getUserName() : null;
  if (pathOwner == null && inode != null) {
    pathOwner=inode.getUserName();
  }
  if (RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH_ALT.equals(path)) {
    path=RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str"");
  }
  Set<String> accessTypes=access2ActionListMapper.get(access);
  if (accessTypes == null) {
    LOG.warn(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str""+ access);
    accessTypes=access2ActionListMapper.get(FsAction.NONE);
  }
  for (  String accessType : accessTypes) {
    RangerHdfsAccessRequest request=new RangerHdfsAccessRequest(path,pathOwner,access,accessType,user,groups);
    RangerAccessResult result=plugin.isAccessAllowed(request,auditHandler);
    ret=result.getIsAllowed();
    if (!ret) {
      break;
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str""+ ret);
  }
  return ret;
}","private boolean isAccessAllowed(INode inode,INodeAttributes inodeAttribs,FsAction access,String user,Set<String> groups,String fsOwner,String superGroup,RangerHdfsPlugin plugin,RangerHdfsAuditHandler auditHandler){
  boolean ret=false;
  String path=inode != null ? inode.getFullPathName() : null;
  String pathOwner=inodeAttribs != null ? inodeAttribs.getUserName() : null;
  if (pathOwner == null && inode != null) {
    pathOwner=inode.getUserName();
  }
  if (RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH_ALT.equals(path)) {
    path=RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str"");
  }
  Set<String> accessTypes=access2ActionListMapper.get(access);
  if (accessTypes == null) {
    LOG.warn(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str""+ access);
    accessTypes=access2ActionListMapper.get(FsAction.NONE);
  }
  for (  String accessType : accessTypes) {
    RangerHdfsAccessRequest request=new RangerHdfsAccessRequest(path,pathOwner,access,accessType,user,groups);
    RangerAccessResult result=plugin.isAccessAllowed(request,auditHandler);
    if (result == null) {
      LOG.error(""String_Node_Str"");
    }
 else {
      ret=result.getIsAllowed();
      if (!ret) {
        break;
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ access+ ""String_Node_Str""+ user+ ""String_Node_Str""+ ret);
  }
  return ret;
}",0.9704336399474376
166435,"/** 
 * Check if user has privileges to do this action on these objects
 * @param hiveOpType
 * @param inputsHObjs
 * @param outputHObjs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
@Override public void checkPrivileges(HiveOperationType hiveOpType,List<HivePrivilegeObject> inputHObjs,List<HivePrivilegeObject> outputHObjs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  UserGroupInformation ugi=getCurrentUserGroupInfo();
  if (ugi == null) {
    throw new HiveAccessControlException(""String_Node_Str"");
  }
  RangerHiveAuditHandler auditHandler=new RangerHiveAuditHandler();
  try {
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(toString(hiveOpType,inputHObjs,outputHObjs,context,sessionContext));
    }
    if (hiveOpType == HiveOperationType.DFS) {
      handleDfsCommand(hiveOpType,inputHObjs,outputHObjs,context,sessionContext,user,groups,auditHandler);
      return;
    }
    List<RangerHiveAccessRequest> requests=new ArrayList<RangerHiveAccessRequest>();
    if (inputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : inputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.READ;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,true);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (outputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : outputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.WRITE;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,false);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (isMetaDataOperation(hiveOpType)) {
      RangerHiveResource resource=getHiveResource(hiveOpType);
      RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,context,sessionContext);
      RangerAccessResult result=hivePlugin.isAccessAllowed(request);
      if (result == null) {
        LOG.error(""String_Node_Str"");
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,hiveOpType));
      }
 else       if (!result.getIsAllowed()) {
        String path=resource.getAsString(result.getServiceDef());
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,hiveOpType.name(),path));
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(String.format(""String_Node_Str"",hiveOpType,resource,request,result));
        }
        if (result.getIsAudited()) {
          auditHandler.logAuditEventForFiltering(result,hiveOpType);
        }
      }
    }
 else {
      for (      RangerHiveAccessRequest request : requests) {
        RangerHiveResource resource=(RangerHiveResource)request.getResource();
        RangerAccessResult result=null;
        if (resource.getObjectType() == HiveObjectType.COLUMN && StringUtils.contains(resource.getColumn(),COLUMN_SEP)) {
          List<RangerAccessRequest> colRequests=new ArrayList<RangerAccessRequest>();
          String[] columns=StringUtils.split(resource.getColumn(),COLUMN_SEP);
          for (          String column : columns) {
            if (column != null) {
              column=column.trim();
            }
            if (StringUtils.isEmpty(column.trim())) {
              continue;
            }
            RangerHiveResource colResource=new RangerHiveResource(HiveObjectType.COLUMN,resource.getDatabase(),resource.getTable(),column);
            RangerHiveAccessRequest colRequest=request.copy();
            colRequest.setResource(colResource);
            colRequests.add(colRequest);
          }
          Collection<RangerAccessResult> colResults=hivePlugin.isAccessAllowed(colRequests,auditHandler);
          if (colResults != null) {
            for (            RangerAccessResult colResult : colResults) {
              result=colResult;
              if (!result.getIsAllowed()) {
                break;
              }
            }
          }
        }
 else {
          result=hivePlugin.isAccessAllowed(request,auditHandler);
        }
        if (result != null && !result.getIsAllowed()) {
          String path=resource != null ? resource.getAsString(result.getServiceDef()) : null;
          throw new HiveAccessControlException(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
        }
      }
    }
  }
  finally {
    auditHandler.flushAudit();
  }
}","/** 
 * Check if user has privileges to do this action on these objects
 * @param hiveOpType
 * @param inputsHObjs
 * @param outputHObjs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
@Override public void checkPrivileges(HiveOperationType hiveOpType,List<HivePrivilegeObject> inputHObjs,List<HivePrivilegeObject> outputHObjs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  UserGroupInformation ugi=getCurrentUserGroupInfo();
  if (ugi == null) {
    throw new HiveAccessControlException(""String_Node_Str"");
  }
  RangerHiveAuditHandler auditHandler=new RangerHiveAuditHandler();
  try {
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(toString(hiveOpType,inputHObjs,outputHObjs,context,sessionContext));
    }
    if (hiveOpType == HiveOperationType.DFS) {
      handleDfsCommand(hiveOpType,inputHObjs,outputHObjs,context,sessionContext,user,groups,auditHandler);
      return;
    }
    List<RangerHiveAccessRequest> requests=new ArrayList<RangerHiveAccessRequest>();
    if (inputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : inputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.READ;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,true);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (outputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : outputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.WRITE;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,false);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (isMetaDataOperation(hiveOpType)) {
      RangerHiveResource resource=getHiveResource(hiveOpType);
      RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,context,sessionContext);
      RangerAccessResult result=hivePlugin.isAccessAllowed(request);
      if (result == null) {
        LOG.error(""String_Node_Str"");
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,hiveOpType));
      }
 else       if (!result.getIsAllowed()) {
        String path=resource.getAsString(result.getServiceDef());
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,hiveOpType.name(),path));
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(String.format(""String_Node_Str"",hiveOpType,resource,request,result));
        }
        if (result.getIsAudited()) {
          auditHandler.logAuditEventForFiltering(result,hiveOpType);
        }
      }
    }
 else {
      for (      RangerHiveAccessRequest request : requests) {
        RangerHiveResource resource=(RangerHiveResource)request.getResource();
        RangerAccessResult result=null;
        if (resource.getObjectType() == HiveObjectType.COLUMN && StringUtils.contains(resource.getColumn(),COLUMN_SEP)) {
          List<RangerAccessRequest> colRequests=new ArrayList<RangerAccessRequest>();
          String[] columns=StringUtils.split(resource.getColumn(),COLUMN_SEP);
          for (          String column : columns) {
            if (column != null) {
              column=column.trim();
            }
            if (StringUtils.isEmpty(column)) {
              continue;
            }
            RangerHiveResource colResource=new RangerHiveResource(HiveObjectType.COLUMN,resource.getDatabase(),resource.getTable(),column);
            RangerHiveAccessRequest colRequest=request.copy();
            colRequest.setResource(colResource);
            colRequests.add(colRequest);
          }
          Collection<RangerAccessResult> colResults=hivePlugin.isAccessAllowed(colRequests,auditHandler);
          if (colResults != null) {
            for (            RangerAccessResult colResult : colResults) {
              result=colResult;
              if (!result.getIsAllowed()) {
                break;
              }
            }
          }
        }
 else {
          result=hivePlugin.isAccessAllowed(request,auditHandler);
        }
        if (result != null && !result.getIsAllowed()) {
          String path=resource.getAsString(result.getServiceDef());
          throw new HiveAccessControlException(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
        }
      }
    }
  }
  finally {
    auditHandler.flushAudit();
  }
}",0.9972243250063084
166436,"/** 
 * Check if user has privileges to do this action on these objects
 * @param objs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
public List<HivePrivilegeObject> filterListCmdObjects(List<HivePrivilegeObject> objs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",objs,context));
  }
  List<HivePrivilegeObject> ret=null;
  if (objs == null) {
    LOG.debug(""String_Node_Str"");
  }
 else   if (objs.isEmpty()) {
    LOG.debug(""String_Node_Str"");
    ret=objs;
  }
 else   if (getCurrentUserGroupInfo() == null) {
    LOG.warn(""String_Node_Str"");
    ret=objs;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + objs.size() + ""String_Node_Str"");
    }
    UserGroupInformation ugi=getCurrentUserGroupInfo();
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(String.format(""String_Node_Str"",user,groups));
    }
    if (ret == null) {
      ret=new ArrayList<HivePrivilegeObject>(objs.size());
    }
    for (    HivePrivilegeObject privilegeObject : objs) {
      if (LOG.isDebugEnabled()) {
        HivePrivObjectActionType actionType=privilegeObject.getActionType();
        HivePrivilegeObjectType objectType=privilegeObject.getType();
        String objectName=privilegeObject.getObjectName();
        String dbName=privilegeObject.getDbname();
        List<String> columns=privilegeObject.getColumns();
        List<String> partitionKeys=privilegeObject.getPartKeys();
        String commandString=context.getCommandString();
        String ipAddress=context.getIpAddress();
        final String format=""String_Node_Str"";
        LOG.debug(String.format(format,actionType,objectType,objectName,dbName,columns,partitionKeys,commandString,ipAddress));
      }
      RangerHiveResource resource=createHiveResource(privilegeObject);
      RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,context,sessionContext);
      RangerAccessResult result=hivePlugin.isAccessAllowed(request);
      if (result == null) {
        LOG.error(""String_Node_Str"");
      }
 else       if (!result.getIsAllowed()) {
        if (!LOG.isDebugEnabled()) {
          String path=resource.getAsString(result.getServiceDef());
          LOG.debug(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
        }
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(String.format(""String_Node_Str"",resource,request,result));
        }
        ret.add(privilegeObject);
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",ret == null ? 0 : ret.size()));
    LOG.debug(String.format(""String_Node_Str"",objs,context,ret));
  }
  return ret;
}","/** 
 * Check if user has privileges to do this action on these objects
 * @param objs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
public List<HivePrivilegeObject> filterListCmdObjects(List<HivePrivilegeObject> objs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",objs,context));
  }
  List<HivePrivilegeObject> ret=null;
  if (objs == null) {
    LOG.debug(""String_Node_Str"");
  }
 else   if (objs.isEmpty()) {
    LOG.debug(""String_Node_Str"");
    ret=objs;
  }
 else   if (getCurrentUserGroupInfo() == null) {
    LOG.warn(""String_Node_Str"");
    ret=objs;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + objs.size() + ""String_Node_Str"");
    }
    UserGroupInformation ugi=getCurrentUserGroupInfo();
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(String.format(""String_Node_Str"",user,groups));
    }
    if (ret == null) {
      ret=new ArrayList<HivePrivilegeObject>(objs.size());
    }
    for (    HivePrivilegeObject privilegeObject : objs) {
      if (LOG.isDebugEnabled()) {
        HivePrivObjectActionType actionType=privilegeObject.getActionType();
        HivePrivilegeObjectType objectType=privilegeObject.getType();
        String objectName=privilegeObject.getObjectName();
        String dbName=privilegeObject.getDbname();
        List<String> columns=privilegeObject.getColumns();
        List<String> partitionKeys=privilegeObject.getPartKeys();
        String commandString=context.getCommandString();
        String ipAddress=context.getIpAddress();
        final String format=""String_Node_Str"";
        LOG.debug(String.format(format,actionType,objectType,objectName,dbName,columns,partitionKeys,commandString,ipAddress));
      }
      RangerHiveResource resource=createHiveResource(privilegeObject);
      if (resource == null) {
        LOG.error(""String_Node_Str"");
      }
 else {
        RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,context,sessionContext);
        RangerAccessResult result=hivePlugin.isAccessAllowed(request);
        if (result == null) {
          LOG.error(""String_Node_Str"");
        }
 else         if (!result.getIsAllowed()) {
          if (!LOG.isDebugEnabled()) {
            String path=resource.getAsString(result.getServiceDef());
            LOG.debug(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
          }
        }
 else {
          if (LOG.isDebugEnabled()) {
            LOG.debug(String.format(""String_Node_Str"",resource,request,result));
          }
          ret.add(privilegeObject);
        }
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format(""String_Node_Str"",ret == null ? 0 : ret.size()));
    LOG.debug(String.format(""String_Node_Str"",objs,context,ret));
  }
  return ret;
}",0.9114957544088832
166437,"public List<String> getQueueList(final String queueNameMatching,final List<String> existingQueueList){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + queueNameMatching);
  }
  final String errMsg=errMessage;
  List<String> ret=new ArrayList<String>();
  Callable<List<String>> yarnQueueListGetter=new Callable<List<String>>(){
    @Override public List<String> call(){
      List<String> lret=new ArrayList<String>();
      String url=yarnQUrl + YARN_LIST_API_ENDPOINT;
      Client client=null;
      ClientResponse response=null;
      try {
        client=Client.create();
        WebResource webResource=client.resource(url);
        response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + url);
        }
        if (response != null) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"" + response.getStatus());
          }
          if (response.getStatus() == 200) {
            String jsonString=response.getEntity(String.class);
            Gson gson=new GsonBuilder().setPrettyPrinting().create();
            YarnSchedulerResponse yarnQResponse=gson.fromJson(jsonString,YarnSchedulerResponse.class);
            if (yarnQResponse != null) {
              List<String> yarnQueueList=yarnQResponse.getQueueNames();
              if (yarnQueueList != null) {
                for (                String yarnQueueName : yarnQueueList) {
                  if (existingQueueList != null && existingQueueList.contains(yarnQueueName)) {
                    continue;
                  }
                  if (queueNameMatching == null || queueNameMatching.isEmpty() || yarnQueueName.startsWith(queueNameMatching)) {
                    if (LOG.isDebugEnabled()) {
                      LOG.debug(""String_Node_Str"" + yarnQueueName);
                    }
                    lret.add(yarnQueueName);
                  }
                }
              }
            }
          }
 else {
            LOG.info(""String_Node_Str"" + response.getStatus() + ""String_Node_Str""+ url+ ""String_Node_Str"");
            String jsonString=response.getEntity(String.class);
            LOG.info(jsonString);
            lret=null;
          }
        }
 else {
          lret=null;
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + EXPECTED_MIME_TYPE + ""String_Node_Str""+ url+ ""String_Node_Str"";
          LOG.error(msgDesc);
          HadoopException hdpException=new HadoopException(msgDesc);
          hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
          throw hdpException;
        }
      }
 catch (      HadoopException he) {
        lret=null;
        throw he;
      }
catch (      Throwable t) {
        lret=null;
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + url;
        HadoopException hdpException=new HadoopException(msgDesc,t);
        LOG.error(msgDesc,t);
        hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
        throw hdpException;
      }
 finally {
        if (response != null) {
          response.close();
        }
        if (client != null) {
          client.destroy();
        }
      }
      return lret;
    }
  }
;
  try {
    ret=timedTask(yarnQueueListGetter,5,TimeUnit.SECONDS);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"" + yarnQUrl + ""String_Node_Str"",t);
    String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + EXPECTED_MIME_TYPE + ""String_Node_Str""+ yarnQUrl;
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
  return ret;
}","public List<String> getQueueList(final String queueNameMatching,final List<String> existingQueueList){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + queueNameMatching);
  }
  final String errMsg=errMessage;
  List<String> ret=null;
  Callable<List<String>> yarnQueueListGetter=new Callable<List<String>>(){
    @Override public List<String> call(){
      List<String> lret=new ArrayList<String>();
      String url=yarnQUrl + YARN_LIST_API_ENDPOINT;
      Client client=null;
      ClientResponse response=null;
      try {
        client=Client.create();
        WebResource webResource=client.resource(url);
        response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + url);
        }
        if (response != null) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"" + response.getStatus());
          }
          if (response.getStatus() == 200) {
            String jsonString=response.getEntity(String.class);
            Gson gson=new GsonBuilder().setPrettyPrinting().create();
            YarnSchedulerResponse yarnQResponse=gson.fromJson(jsonString,YarnSchedulerResponse.class);
            if (yarnQResponse != null) {
              List<String> yarnQueueList=yarnQResponse.getQueueNames();
              if (yarnQueueList != null) {
                for (                String yarnQueueName : yarnQueueList) {
                  if (existingQueueList != null && existingQueueList.contains(yarnQueueName)) {
                    continue;
                  }
                  if (queueNameMatching == null || queueNameMatching.isEmpty() || yarnQueueName.startsWith(queueNameMatching)) {
                    if (LOG.isDebugEnabled()) {
                      LOG.debug(""String_Node_Str"" + yarnQueueName);
                    }
                    lret.add(yarnQueueName);
                  }
                }
              }
            }
          }
 else {
            LOG.info(""String_Node_Str"" + response.getStatus() + ""String_Node_Str""+ url+ ""String_Node_Str"");
            String jsonString=response.getEntity(String.class);
            LOG.info(jsonString);
            lret=null;
          }
        }
 else {
          lret=null;
          String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + EXPECTED_MIME_TYPE + ""String_Node_Str""+ url+ ""String_Node_Str"";
          LOG.error(msgDesc);
          HadoopException hdpException=new HadoopException(msgDesc);
          hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
          throw hdpException;
        }
      }
 catch (      HadoopException he) {
        lret=null;
        throw he;
      }
catch (      Throwable t) {
        lret=null;
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + url;
        HadoopException hdpException=new HadoopException(msgDesc,t);
        LOG.error(msgDesc,t);
        hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
        throw hdpException;
      }
 finally {
        if (response != null) {
          response.close();
        }
        if (client != null) {
          client.destroy();
        }
      }
      return lret;
    }
  }
;
  try {
    ret=timedTask(yarnQueueListGetter,5,TimeUnit.SECONDS);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"" + yarnQUrl + ""String_Node_Str"",t);
    String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + EXPECTED_MIME_TYPE + ""String_Node_Str""+ yarnQUrl;
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
  return ret;
}",0.9967083607636604
166438,"public VXResponse validateConfig(RangerService service,ServiceStore svcStore) throws Exception {
  VXResponse ret=new VXResponse();
  RangerBaseService svc=getRangerServiceByService(service,svcStore);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + svc + ""String_Node_Str"");
  }
  if (svc != null) {
    ClassLoader clsLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(svc.getClass().getClassLoader());
      HashMap<String,Object> responseData=svc.validateConfig();
      ret=generateResponseForTestConn(responseData,""String_Node_Str"");
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + svc.getServiceName();
      HashMap<String,Object> respData=new HashMap<String,Object>();
      String message=""String_Node_Str"";
      if (e instanceof HadoopException) {
        respData=((HadoopException)e).responseData;
        message=(respData != null && respData.get(""String_Node_Str"") != null) ? respData.get(""String_Node_Str"").toString() : msg;
      }
      ret=generateResponseForTestConn(respData,message);
      LOG.error(""String_Node_Str"" + e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(clsLoader);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + ret + ""String_Node_Str"");
  }
  return ret;
}","public VXResponse validateConfig(RangerService service,ServiceStore svcStore) throws Exception {
  VXResponse ret=new VXResponse();
  RangerBaseService svc=getRangerServiceByService(service,svcStore);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + svc + ""String_Node_Str"");
  }
  if (svc != null) {
    ClassLoader clsLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(svc.getClass().getClassLoader());
      HashMap<String,Object> responseData=svc.validateConfig();
      ret=generateResponseForTestConn(responseData,""String_Node_Str"");
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + svc.getServiceName();
      HashMap<String,Object> respData=new HashMap<String,Object>();
      if (e instanceof HadoopException) {
        respData=((HadoopException)e).responseData;
      }
      ret=generateResponseForTestConn(respData,msg);
      LOG.error(""String_Node_Str"" + e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(clsLoader);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + ret + ""String_Node_Str"");
  }
  return ret;
}",0.929421094369548
166439,"private VXResponse generateResponseForTestConn(HashMap<String,Object> responseData,String msg){
  VXResponse vXResponse=new VXResponse();
  Long objId=(responseData.get(""String_Node_Str"") != null) ? Long.parseLong(responseData.get(""String_Node_Str"").toString()) : null;
  boolean connectivityStatus=(responseData.get(""String_Node_Str"") != null) ? Boolean.parseBoolean(responseData.get(""String_Node_Str"").toString()) : false;
  int statusCode=(connectivityStatus) ? VXResponse.STATUS_SUCCESS : VXResponse.STATUS_ERROR;
  String message=(responseData.get(""String_Node_Str"") != null) ? responseData.get(""String_Node_Str"").toString() : msg;
  String description=(responseData.get(""String_Node_Str"") != null) ? responseData.get(""String_Node_Str"").toString() : msg;
  String fieldName=(responseData.get(""String_Node_Str"") != null) ? responseData.get(""String_Node_Str"").toString() : null;
  VXMessage vXMsg=new VXMessage();
  List<VXMessage> vXMsgList=new ArrayList<VXMessage>();
  vXMsg.setFieldName(fieldName);
  vXMsg.setMessage(message);
  vXMsg.setObjectId(objId);
  vXMsgList.add(vXMsg);
  vXResponse.setMessageList(vXMsgList);
  vXResponse.setMsgDesc(description);
  vXResponse.setStatusCode(statusCode);
  return vXResponse;
}","private VXResponse generateResponseForTestConn(HashMap<String,Object> responseData,String msg){
  VXResponse vXResponse=new VXResponse();
  Long objId=null;
  boolean connectivityStatus=false;
  int statusCode=VXResponse.STATUS_ERROR;
  String message=msg;
  String description=msg;
  String fieldName=null;
  if (responseData != null) {
    if (responseData.get(""String_Node_Str"") != null) {
      objId=Long.parseLong(responseData.get(""String_Node_Str"").toString());
    }
    if (responseData.get(""String_Node_Str"") != null) {
      connectivityStatus=Boolean.parseBoolean(responseData.get(""String_Node_Str"").toString());
    }
    if (connectivityStatus) {
      statusCode=VXResponse.STATUS_SUCCESS;
    }
    if (responseData.get(""String_Node_Str"") != null) {
      message=responseData.get(""String_Node_Str"").toString();
    }
    if (responseData.get(""String_Node_Str"") != null) {
      description=responseData.get(""String_Node_Str"").toString();
    }
    if (responseData.get(""String_Node_Str"") != null) {
      fieldName=responseData.get(""String_Node_Str"").toString();
    }
  }
  VXMessage vXMsg=new VXMessage();
  List<VXMessage> vXMsgList=new ArrayList<VXMessage>();
  vXMsg.setFieldName(fieldName);
  vXMsg.setMessage(message);
  vXMsg.setObjectId(objId);
  vXMsgList.add(vXMsg);
  vXResponse.setMessageList(vXMsgList);
  vXResponse.setMsgDesc(description);
  vXResponse.setStatusCode(statusCode);
  return vXResponse;
}",0.5980465815176559
166440,"void init(RangerServiceDef serviceDef,List<RangerPolicy> policies){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceDef + ""String_Node_Str""+ (policies == null ? 0 : policies.size())+ ""String_Node_Str"");
  }
  this.serviceDef=serviceDef;
  contextEnrichers=new ArrayList<RangerContextEnricher>();
  if (!CollectionUtils.isEmpty(serviceDef.getContextEnrichers())) {
    for (    RangerServiceDef.RangerContextEnricherDef enricherDef : serviceDef.getContextEnrichers()) {
      if (enricherDef == null) {
        continue;
      }
      RangerContextEnricher contextEnricher=buildContextEnricher(enricherDef);
      contextEnrichers.add(contextEnricher);
    }
  }
  policyEvaluators=new ArrayList<RangerPolicyEvaluatorFacade>();
  for (  RangerPolicy policy : policies) {
    if (!policy.getIsEnabled()) {
      continue;
    }
    RangerPolicyEvaluatorFacade evaluator=buildPolicyEvaluator(policy,serviceDef);
    if (evaluator != null) {
      policyEvaluators.add(evaluator);
    }
  }
  Collections.sort(policyEvaluators);
  String propertyName=""String_Node_Str"" + serviceName + ""String_Node_Str"";
  int auditResultCacheSize=RangerConfiguration.getInstance().getInt(propertyName,RANGER_POLICYENGINE_AUDITRESULT_CACHE_SIZE);
  accessAuditCache=new CacheMap<String,Boolean>(auditResultCacheSize);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceDef + ""String_Node_Str""+ (policies == null ? 0 : policies.size())+ ""String_Node_Str"");
  }
}","void init(RangerServiceDef serviceDef,List<RangerPolicy> policies){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceDef + ""String_Node_Str""+ policies.size()+ ""String_Node_Str"");
  }
  this.serviceDef=serviceDef;
  contextEnrichers=new ArrayList<RangerContextEnricher>();
  if (!CollectionUtils.isEmpty(serviceDef.getContextEnrichers())) {
    for (    RangerServiceDef.RangerContextEnricherDef enricherDef : serviceDef.getContextEnrichers()) {
      if (enricherDef == null) {
        continue;
      }
      RangerContextEnricher contextEnricher=buildContextEnricher(enricherDef);
      contextEnrichers.add(contextEnricher);
    }
  }
  policyEvaluators=new ArrayList<RangerPolicyEvaluatorFacade>();
  for (  RangerPolicy policy : policies) {
    if (!policy.getIsEnabled()) {
      continue;
    }
    RangerPolicyEvaluatorFacade evaluator=buildPolicyEvaluator(policy,serviceDef);
    if (evaluator != null) {
      policyEvaluators.add(evaluator);
    }
  }
  Collections.sort(policyEvaluators);
  String propertyName=""String_Node_Str"" + serviceName + ""String_Node_Str"";
  int auditResultCacheSize=RangerConfiguration.getInstance().getInt(propertyName,RANGER_POLICYENGINE_AUDITRESULT_CACHE_SIZE);
  accessAuditCache=new CacheMap<String,Boolean>(auditResultCacheSize);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + serviceDef + ""String_Node_Str""+ policies.size()+ ""String_Node_Str"");
  }
}",0.9828532235939644
166441,"public boolean isSingleAndExactMatch(RangerAccessResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
  }
  boolean ret=false;
  RangerServiceDef serviceDef=getServiceDef();
  if (serviceDef != null && serviceDef.getResources() != null) {
    Collection<String> resourceKeys=resource == null ? null : resource.getKeys();
    Collection<String> policyKeys=matchers == null ? null : matchers.keySet();
    boolean keysMatch=CollectionUtils.isEqualCollection(resourceKeys,policyKeys);
    if (keysMatch) {
      for (      RangerResourceDef resourceDef : serviceDef.getResources()) {
        String resourceName=resourceDef.getName();
        String resourceValue=resource == null ? null : resource.getValue(resourceName);
        RangerResourceMatcher matcher=matchers == null ? null : matchers.get(resourceName);
        if (StringUtils.isEmpty(resourceValue)) {
          ret=matcher == null || matcher.isSingleAndExactMatch(resourceValue);
        }
 else {
          ret=matcher != null && matcher.isSingleAndExactMatch(resourceValue);
        }
        if (!ret) {
          break;
        }
      }
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + resourceKeys + ""String_Node_Str""+ policyKeys);
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ ret);
  }
  return ret;
}","public boolean isSingleAndExactMatch(RangerAccessResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
  }
  boolean ret=false;
  RangerServiceDef serviceDef=getServiceDef();
  if (serviceDef != null && serviceDef.getResources() != null) {
    Collection<String> resourceKeys=resource == null ? null : resource.getKeys();
    Collection<String> policyKeys=matchers == null ? null : matchers.keySet();
    boolean keysMatch=false;
    if (resourceKeys != null && policyKeys != null) {
      keysMatch=CollectionUtils.isEqualCollection(resourceKeys,policyKeys);
    }
    if (keysMatch) {
      for (      RangerResourceDef resourceDef : serviceDef.getResources()) {
        String resourceName=resourceDef.getName();
        String resourceValue=resource == null ? null : resource.getValue(resourceName);
        RangerResourceMatcher matcher=matchers == null ? null : matchers.get(resourceName);
        if (StringUtils.isEmpty(resourceValue)) {
          ret=matcher == null || matcher.isSingleAndExactMatch(resourceValue);
        }
 else {
          ret=matcher != null && matcher.isSingleAndExactMatch(resourceValue);
        }
        if (!ret) {
          break;
        }
      }
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + resourceKeys + ""String_Node_Str""+ policyKeys);
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ ret);
  }
  return ret;
}",0.9718929901794784
166442,"public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (resourceDef != null) {
    resourceDef.toString(sb);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (policyResource != null) {
    policyResource.toString(sb);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(optionsString).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(optIgnoreCase).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(optWildCard).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(StringUtils.join(policyValues,""String_Node_Str"")).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(policyIsExcludes).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(isMatchAny).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (options != null) {
    for (    Map.Entry<String,String> e : options.entrySet()) {
      sb.append(e.getKey()).append(""String_Node_Str"").append(e.getValue()).append(OPTIONS_SEP);
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}","public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (resourceDef != null) {
    resourceDef.toString(sb);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (policyResource != null) {
    policyResource.toString(sb);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(optionsString).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(optIgnoreCase).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(optWildCard).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (policyValues != null) {
    for (    String value : policyValues) {
      sb.append(value).append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(policyIsExcludes).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(isMatchAny).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (options != null) {
    for (    Map.Entry<String,String> e : options.entrySet()) {
      sb.append(e.getKey()).append(""String_Node_Str"").append(e.getValue()).append(OPTIONS_SEP);
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}",0.9287796751353604
166443,"public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  super.toString(sb);
  sb.append(""String_Node_Str"");
  if (policyValues != null) {
    for (    String value : policyValues) {
      sb.append(value).append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(policyIsExcludes).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}","public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  super.toString(sb);
  sb.append(""String_Node_Str"");
  return sb;
}",0.5146804835924007
166444,"public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  super.toString(sb);
  sb.append(""String_Node_Str"");
  if (policyValues != null) {
    for (    String value : policyValues) {
      sb.append(value).append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(policyIsExcludes).append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(policyIsRecursive).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}","public StringBuilder toString(StringBuilder sb){
  sb.append(""String_Node_Str"");
  super.toString(sb);
  sb.append(""String_Node_Str"").append(policyIsRecursive).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}",0.6184738955823293
166445,"public synchronized void init(RangerPolicyEngine policyEngine){
  cleanup();
  RangerConfiguration.getInstance().addResourcesForServiceType(serviceType);
  RangerConfiguration.getInstance().initAudit(appId);
  String propertyPrefix=""String_Node_Str"" + serviceType;
  long pollingIntervalMs=RangerConfiguration.getInstance().getLong(propertyPrefix + ""String_Node_Str"",30 * 1000);
  String cacheDir=RangerConfiguration.getInstance().get(propertyPrefix + ""String_Node_Str"");
  serviceName=RangerConfiguration.getInstance().get(propertyPrefix + ""String_Node_Str"");
  RangerAdminClient admin=createAdminClient(propertyPrefix);
  refresher=new PolicyRefresher(policyEngine,serviceType,appId,serviceName,admin,pollingIntervalMs,cacheDir);
  refresher.startRefresher();
  this.policyEngine=policyEngine;
}","public void init(RangerPolicyEngine policyEngine){
  cleanup();
  RangerConfiguration.getInstance().addResourcesForServiceType(serviceType);
  RangerConfiguration.getInstance().initAudit(appId);
  String propertyPrefix=""String_Node_Str"" + serviceType;
  long pollingIntervalMs=RangerConfiguration.getInstance().getLong(propertyPrefix + ""String_Node_Str"",30 * 1000);
  String cacheDir=RangerConfiguration.getInstance().get(propertyPrefix + ""String_Node_Str"");
  serviceName=RangerConfiguration.getInstance().get(propertyPrefix + ""String_Node_Str"");
  RangerAdminClient admin=createAdminClient(propertyPrefix);
  refresher=new PolicyRefresher(policyEngine,serviceType,appId,serviceName,admin,pollingIntervalMs,cacheDir);
  refresher.startRefresher();
  this.policyEngine=policyEngine;
}",0.991777356103732
166446,"public synchronized void cleanup(){
  PolicyRefresher refresher=this.refresher;
  this.serviceName=null;
  this.policyEngine=null;
  this.refresher=null;
  if (refresher != null) {
    refresher.stopRefresher();
  }
}","public void cleanup(){
  PolicyRefresher refresher=this.refresher;
  this.serviceName=null;
  this.policyEngine=null;
  this.refresher=null;
  if (refresher != null) {
    refresher.stopRefresher();
  }
}",0.9691211401425178
166447,"RangerAccessResult buildResult(boolean allowed,boolean audited,String reason){
  RangerAccessResult result=_authorizer.createAccessResult(_request);
  result.setIsAllowed(allowed);
  result.setReason(reason);
  result.setIsAudited(audited);
  return result;
}","RangerAccessResult buildResult(boolean allowed,boolean audited,String reason){
  RangerAccessResult result=_authorizer.createAccessResult(_request);
  if (result != null) {
    result.setIsAllowed(allowed);
    result.setReason(reason);
    result.setIsAudited(audited);
  }
  return result;
}",0.7898550724637681
166448,"protected void requireSystemOrSuperUser(Configuration conf) throws IOException {
  User user=User.getCurrent();
  if (user == null) {
    throw new IOException(""String_Node_Str"");
  }
  String currentUser=user.getShortName();
  List<String> superusers=Lists.asList(currentUser,conf.getStrings(SUPERUSER_CONFIG_PROP,new String[0]));
  User activeUser=getActiveUser();
  if (!(superusers.contains(activeUser.getShortName()))) {
    throw new AccessDeniedException(""String_Node_Str"" + (user != null ? user.getShortName() : ""String_Node_Str"") + ""String_Node_Str"");
  }
}","protected void requireSystemOrSuperUser(Configuration conf) throws IOException {
  User user=User.getCurrent();
  if (user == null) {
    throw new IOException(""String_Node_Str"");
  }
  String currentUser=user.getShortName();
  List<String> superusers=Lists.asList(currentUser,conf.getStrings(SUPERUSER_CONFIG_PROP,new String[0]));
  User activeUser=getActiveUser();
  if (!(superusers.contains(activeUser.getShortName()))) {
    throw new AccessDeniedException(""String_Node_Str"" + user.getShortName() + ""String_Node_Str"");
  }
}",0.9643835616438357
166449,"public static List<String> getHBaseResource(String serviceName,String serviceType,Map<String,String> configs,ResourceLookupContext context) throws Exception {
  String userInput=context.getUserInput();
  String resource=context.getResourceName();
  Map<String,List<String>> resourceMap=context.getResources();
  List<String> resultList=null;
  String tableName=null;
  String columnFamilies=null;
  List<String> tableList=null;
  List<String> columnFamilyList=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ resource+ ""String_Node_Str""+ resourceMap);
  }
  if (userInput != null && resource != null) {
    if (resourceMap != null && !resourceMap.isEmpty()) {
      tableList=resourceMap.get(TABLE);
      columnFamilyList=resourceMap.get(COLUMNFAMILY);
    }
switch (resource.trim().toLowerCase()) {
case TABLE:
      tableName=userInput;
    break;
case COLUMNFAMILY:
  columnFamilies=userInput;
break;
default :
break;
}
}
if (serviceName != null && userInput != null) {
final List<String> finaltableList=tableList;
final List<String> finalcolumnFamilyList=columnFamilyList;
try {
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ configs+ ""String_Node_Str""+ context);
}
final HBaseClient hBaseClient=new HBaseConnectionMgr().getHBaseConnection(serviceName,serviceType,configs);
Callable<List<String>> callableObj=null;
if (hBaseClient != null) {
if (tableName != null && !tableName.isEmpty()) {
final String finalTableName;
if (!tableName.endsWith(""String_Node_Str"")) {
  tableName+=""String_Node_Str"";
}
tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
finalTableName=tableName;
callableObj=new Callable<List<String>>(){
  @Override public List<String> call(){
    return hBaseClient.getTableList(finalTableName,finaltableList);
  }
}
;
}
 else {
final String finalColFamilies;
if (columnFamilies != null && !columnFamilies.isEmpty()) {
  if (!columnFamilies.endsWith(""String_Node_Str"")) {
    columnFamilies+=""String_Node_Str"";
  }
  columnFamilies=columnFamilies.replaceAll(""String_Node_Str"",""String_Node_Str"");
  finalColFamilies=columnFamilies;
  callableObj=new Callable<List<String>>(){
    @Override public List<String> call(){
      return hBaseClient.getColumnFamilyList(finalColFamilies,finaltableList,finalcolumnFamilyList);
    }
  }
;
}
}
resultList=TimedEventUtil.timedTask(callableObj,5,TimeUnit.SECONDS);
}
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
throw e;
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + resultList);
}
return resultList;
}","public static List<String> getHBaseResource(String serviceName,String serviceType,Map<String,String> configs,ResourceLookupContext context) throws Exception {
  String userInput=context.getUserInput();
  String resource=context.getResourceName();
  Map<String,List<String>> resourceMap=context.getResources();
  List<String> resultList=null;
  String tableName=null;
  String columnFamilies=null;
  List<String> tableList=null;
  List<String> columnFamilyList=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ resource+ ""String_Node_Str""+ resourceMap);
  }
  if (userInput != null && resource != null) {
    if (resourceMap != null && !resourceMap.isEmpty()) {
      tableList=resourceMap.get(TABLE);
      columnFamilyList=resourceMap.get(COLUMNFAMILY);
    }
switch (resource.trim().toLowerCase()) {
case TABLE:
      tableName=userInput;
    break;
case COLUMNFAMILY:
  columnFamilies=userInput;
break;
default :
break;
}
}
if (serviceName != null && userInput != null) {
final List<String> finaltableList=tableList;
final List<String> finalcolumnFamilyList=columnFamilyList;
try {
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ configs+ ""String_Node_Str""+ context);
}
final HBaseClient hBaseClient=new HBaseConnectionMgr().getHBaseConnection(serviceName,serviceType,configs);
Callable<List<String>> callableObj=null;
if (hBaseClient != null) {
if (tableName != null && !tableName.isEmpty()) {
final String finalTableName;
if (!tableName.endsWith(""String_Node_Str"")) {
  tableName+=""String_Node_Str"";
}
tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
finalTableName=tableName;
callableObj=new Callable<List<String>>(){
  @Override public List<String> call(){
    return hBaseClient.getTableList(finalTableName,finaltableList);
  }
}
;
}
 else {
final String finalColFamilies;
if (columnFamilies != null && !columnFamilies.isEmpty()) {
  if (!columnFamilies.endsWith(""String_Node_Str"")) {
    columnFamilies+=""String_Node_Str"";
  }
  columnFamilies=columnFamilies.replaceAll(""String_Node_Str"",""String_Node_Str"");
  finalColFamilies=columnFamilies;
  callableObj=new Callable<List<String>>(){
    @Override public List<String> call(){
      return hBaseClient.getColumnFamilyList(finalColFamilies,finaltableList,finalcolumnFamilyList);
    }
  }
;
}
}
if (callableObj != null) {
resultList=TimedEventUtil.timedTask(callableObj,5,TimeUnit.SECONDS);
}
}
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
throw e;
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + resultList);
}
return resultList;
}",0.9944561269355764
166450,"public static boolean AuthorizeAccessForUser(String aPathName,String aPathOwnerName,FsAction access,String user,Set<String> groups) throws RangerAccessControlException {
  boolean accessGranted=false;
  if (aPathName != null && aPathOwnerName != null && access != null && user != null && groups != null) {
    if (RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH_ALT.equals(aPathName)) {
      aPathName=RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH;
    }
    RangerHdfsPlugin plugin=rangerPlugin;
    if (plugin == null) {
synchronized (RangerFSPermissionChecker.class) {
        plugin=rangerPlugin;
        if (plugin == null) {
          try {
            plugin=new RangerHdfsPlugin();
            plugin.init();
            rangerPlugin=plugin;
          }
 catch (          Throwable t) {
            LOG.error(""String_Node_Str"",t);
          }
        }
      }
    }
    if (rangerPlugin != null) {
      Set<String> accessTypes=access2ActionListMapper.get(access);
      boolean isAllowed=true;
      for (      String accessType : accessTypes) {
        RangerHdfsAccessRequest request=new RangerHdfsAccessRequest(aPathName,aPathOwnerName,access,accessType,user,groups);
        RangerAccessResult result=rangerPlugin.isAccessAllowed(request,getCurrentAuditHandler());
        isAllowed=result.getIsAllowed();
        if (!isAllowed) {
          break;
        }
      }
      accessGranted=isAllowed;
    }
  }
  return accessGranted;
}","public static boolean AuthorizeAccessForUser(String aPathName,String aPathOwnerName,FsAction access,String user,Set<String> groups) throws RangerAccessControlException {
  boolean accessGranted=false;
  if (aPathName != null && aPathOwnerName != null && access != null && user != null && groups != null) {
    if (RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH_ALT.equals(aPathName)) {
      aPathName=RangerHadoopConstants.HDFS_ROOT_FOLDER_PATH;
    }
    RangerHdfsPlugin plugin=rangerPlugin;
    if (plugin == null) {
synchronized (RangerFSPermissionChecker.class) {
        plugin=rangerPlugin;
        if (plugin == null) {
          try {
            plugin=new RangerHdfsPlugin();
            plugin.init();
            rangerPlugin=plugin;
          }
 catch (          Throwable t) {
            LOG.error(""String_Node_Str"",t);
          }
        }
      }
    }
    if (rangerPlugin != null) {
      Set<String> accessTypes=access2ActionListMapper.get(access);
      boolean isAllowed=true;
      for (      String accessType : accessTypes) {
        RangerHdfsAccessRequest request=new RangerHdfsAccessRequest(aPathName,aPathOwnerName,access,accessType,user,groups);
        RangerAccessResult result=rangerPlugin.isAccessAllowed(request,getCurrentAuditHandler());
        isAllowed=result != null && result.getIsAllowed();
        if (!isAllowed) {
          break;
        }
      }
      accessGranted=isAllowed;
    }
  }
  return accessGranted;
}",0.9937973811164714
166451,"private static byte[] injectFSPermissionCheckerHooks(ClassLoader aClassLoader,String aClassName,Class<?> aClassBeingRedefined,ProtectionDomain aProtectionDomain,byte[] aClassFileBuffer) throws IllegalClassFormatException {
  byte[] ret=null;
  System.out.println(""String_Node_Str"" + Runtime.getRuntime() + ""String_Node_Str""+ aClassName+ ""String_Node_Str"");
  try {
    CtClass curClass=getCtClass(aClassName.replaceAll(""String_Node_Str"",""String_Node_Str""));
    CtClass stringClass=getCtClass(""String_Node_Str"");
    CtClass throwable=getCtClass(""String_Node_Str"");
    CtClass fsActionClass=getCtClass(""String_Node_Str"");
    CtClass fsDirClass=getCtClass(""String_Node_Str"");
    CtClass inodeClass=getCtClass(""String_Node_Str"");
    CtClass inodesInPathClass=getCtClass(""String_Node_Str"");
    CtClass accCtrlExcp=getCtClass(""String_Node_Str"");
    boolean is3ParamsCheckMethod=false;
    CtMethod checkMethod=null;
    CtMethod checkPermissionMethod=null;
    if (checkMethod == null && curClass != null && inodeClass != null && fsActionClass != null) {
      try {
        System.out.print(""String_Node_Str"");
        CtClass[] paramArgs=new CtClass[]{inodeClass,CtClass.intType,fsActionClass};
        checkMethod=curClass.getDeclaredMethod(""String_Node_Str"",paramArgs);
        is3ParamsCheckMethod=true;
        System.out.println(""String_Node_Str"");
      }
 catch (      NotFoundException nfe) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (checkMethod == null && curClass != null && inodeClass != null && fsActionClass != null) {
      try {
        System.out.print(""String_Node_Str"");
        CtClass[] paramArgs=new CtClass[]{inodeClass,fsActionClass};
        checkMethod=curClass.getDeclaredMethod(""String_Node_Str"",paramArgs);
        is3ParamsCheckMethod=false;
        System.out.println(""String_Node_Str"");
      }
 catch (      NotFoundException nfe) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (checkPermissionMethod == null && curClass != null && inodesInPathClass != null && fsActionClass != null) {
      try {
        System.out.print(""String_Node_Str"");
        CtClass[] paramArgs=new CtClass[]{inodesInPathClass,CtClass.booleanType,fsActionClass,fsActionClass,fsActionClass,fsActionClass,CtClass.booleanType};
        checkPermissionMethod=curClass.getDeclaredMethod(""String_Node_Str"",paramArgs);
        System.out.println(""String_Node_Str"");
      }
 catch (      NotFoundException nfe) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (checkPermissionMethod == null && curClass != null && stringClass != null && fsDirClass != null && fsActionClass != null) {
      try {
        System.out.print(""String_Node_Str"");
        CtClass[] paramArgs=new CtClass[]{stringClass,fsDirClass,CtClass.booleanType,fsActionClass,fsActionClass,fsActionClass,fsActionClass,CtClass.booleanType,CtClass.booleanType};
        checkPermissionMethod=curClass.getDeclaredMethod(""String_Node_Str"",paramArgs);
        System.out.println(""String_Node_Str"");
      }
 catch (      NotFoundException nfe) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (checkMethod != null) {
      System.out.print(""String_Node_Str"");
      checkMethod.insertAfter(""String_Node_Str"");
      checkMethod.addCatch(""String_Node_Str"",throwable);
      if (is3ParamsCheckMethod) {
        checkMethod.insertBefore(""String_Node_Str"");
      }
 else {
        checkMethod.insertBefore(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
      if (checkPermissionMethod != null) {
        System.out.print(""String_Node_Str"");
        checkPermissionMethod.insertAfter(""String_Node_Str"");
        checkPermissionMethod.addCatch(""String_Node_Str"",accCtrlExcp);
        checkPermissionMethod.insertBefore(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
      }
      ret=curClass.toBytecode();
    }
 else {
      System.out.println(""String_Node_Str"" + aClassName + ""String_Node_Str"");
      for (      CtMethod m : curClass.getDeclaredMethods()) {
        System.err.println(""String_Node_Str"" + m);
      }
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  CannotCompileException e) {
    System.err.println(""String_Node_Str"" + aClassName + ""String_Node_Str""+ e);
    e.printStackTrace();
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"" + aClassName + ""String_Node_Str""+ e);
    e.printStackTrace();
  }
  return ret;
}","private static byte[] injectFSPermissionCheckerHooks(ClassLoader aClassLoader,String aClassName,Class<?> aClassBeingRedefined,ProtectionDomain aProtectionDomain,byte[] aClassFileBuffer) throws IllegalClassFormatException {
  byte[] ret=null;
  System.out.println(""String_Node_Str"" + Runtime.getRuntime() + ""String_Node_Str""+ aClassName+ ""String_Node_Str"");
  try {
    CtClass curClass=getCtClass(aClassName.replaceAll(""String_Node_Str"",""String_Node_Str""));
    CtClass stringClass=getCtClass(""String_Node_Str"");
    CtClass throwable=getCtClass(""String_Node_Str"");
    CtClass fsActionClass=getCtClass(""String_Node_Str"");
    CtClass fsDirClass=getCtClass(""String_Node_Str"");
    CtClass inodeClass=getCtClass(""String_Node_Str"");
    CtClass inodesInPathClass=getCtClass(""String_Node_Str"");
    CtClass accCtrlExcp=getCtClass(""String_Node_Str"");
    boolean is3ParamsCheckMethod=false;
    CtMethod checkMethod=null;
    CtMethod checkPermissionMethod=null;
    if (checkMethod == null && curClass != null && inodeClass != null && fsActionClass != null) {
      try {
        System.out.print(""String_Node_Str"");
        CtClass[] paramArgs=new CtClass[]{inodeClass,CtClass.intType,fsActionClass};
        checkMethod=curClass.getDeclaredMethod(""String_Node_Str"",paramArgs);
        is3ParamsCheckMethod=true;
        System.out.println(""String_Node_Str"");
      }
 catch (      NotFoundException nfe) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (checkMethod == null && curClass != null && inodeClass != null && fsActionClass != null) {
      try {
        System.out.print(""String_Node_Str"");
        CtClass[] paramArgs=new CtClass[]{inodeClass,fsActionClass};
        checkMethod=curClass.getDeclaredMethod(""String_Node_Str"",paramArgs);
        is3ParamsCheckMethod=false;
        System.out.println(""String_Node_Str"");
      }
 catch (      NotFoundException nfe) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (checkPermissionMethod == null && curClass != null && inodesInPathClass != null && fsActionClass != null) {
      try {
        System.out.print(""String_Node_Str"");
        CtClass[] paramArgs=new CtClass[]{inodesInPathClass,CtClass.booleanType,fsActionClass,fsActionClass,fsActionClass,fsActionClass,CtClass.booleanType};
        checkPermissionMethod=curClass.getDeclaredMethod(""String_Node_Str"",paramArgs);
        System.out.println(""String_Node_Str"");
      }
 catch (      NotFoundException nfe) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (checkPermissionMethod == null && curClass != null && stringClass != null && fsDirClass != null && fsActionClass != null) {
      try {
        System.out.print(""String_Node_Str"");
        CtClass[] paramArgs=new CtClass[]{stringClass,fsDirClass,CtClass.booleanType,fsActionClass,fsActionClass,fsActionClass,fsActionClass,CtClass.booleanType,CtClass.booleanType};
        checkPermissionMethod=curClass.getDeclaredMethod(""String_Node_Str"",paramArgs);
        System.out.println(""String_Node_Str"");
      }
 catch (      NotFoundException nfe) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (curClass != null) {
      if (checkMethod != null) {
        System.out.print(""String_Node_Str"");
        checkMethod.insertAfter(""String_Node_Str"");
        checkMethod.addCatch(""String_Node_Str"",throwable);
        if (is3ParamsCheckMethod) {
          checkMethod.insertBefore(""String_Node_Str"");
        }
 else {
          checkMethod.insertBefore(""String_Node_Str"");
        }
        System.out.println(""String_Node_Str"");
        if (checkPermissionMethod != null) {
          System.out.print(""String_Node_Str"");
          checkPermissionMethod.insertAfter(""String_Node_Str"");
          checkPermissionMethod.addCatch(""String_Node_Str"",accCtrlExcp);
          checkPermissionMethod.insertBefore(""String_Node_Str"");
          System.out.println(""String_Node_Str"");
        }
        ret=curClass.toBytecode();
      }
 else {
        System.out.println(""String_Node_Str"" + aClassName + ""String_Node_Str"");
        for (        CtMethod m : curClass.getDeclaredMethods()) {
          System.err.println(""String_Node_Str"" + m);
        }
        System.out.println(""String_Node_Str"");
      }
    }
  }
 catch (  CannotCompileException e) {
    System.err.println(""String_Node_Str"" + aClassName + ""String_Node_Str""+ e);
    e.printStackTrace();
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"" + aClassName + ""String_Node_Str""+ e);
    e.printStackTrace();
  }
  return ret;
}",0.9904698581560284
166452,"/** 
 * Check if user has privileges to do this action on these objects
 * @param hiveOpType
 * @param inputsHObjs
 * @param outputHObjs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
@Override public void checkPrivileges(HiveOperationType hiveOpType,List<HivePrivilegeObject> inputHObjs,List<HivePrivilegeObject> outputHObjs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  UserGroupInformation ugi=getCurrentUserGroupInfo();
  if (ugi == null) {
    throw new HiveAccessControlException(""String_Node_Str"");
  }
  RangerHiveAuditHandler auditHandler=new RangerHiveAuditHandler();
  try {
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(toString(hiveOpType,inputHObjs,outputHObjs,context,sessionContext));
    }
    if (hiveOpType == HiveOperationType.DFS) {
      handleDfsCommand(hiveOpType,inputHObjs,outputHObjs,context,sessionContext,user,groups,auditHandler);
      return;
    }
    List<RangerHiveAccessRequest> requests=new ArrayList<RangerHiveAccessRequest>();
    if (inputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : inputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.READ;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,true);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (outputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : outputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.WRITE;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,false);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    for (    RangerHiveAccessRequest request : requests) {
      RangerHiveResource resource=(RangerHiveResource)request.getResource();
      RangerAccessResult result=null;
      if (resource.getObjectType() == HiveObjectType.COLUMN && StringUtils.contains(resource.getColumn(),COLUMN_SEP)) {
        List<RangerAccessRequest> colRequests=new ArrayList<RangerAccessRequest>();
        String[] columns=StringUtils.split(resource.getColumn(),COLUMN_SEP);
        for (        String column : columns) {
          column=column == null ? null : column.trim();
          if (StringUtils.isEmpty(column.trim())) {
            continue;
          }
          RangerHiveResource colResource=new RangerHiveResource(HiveObjectType.COLUMN,resource.getDatabase(),resource.getTable(),column);
          RangerHiveAccessRequest colRequest=request.copy();
          colRequest.setResource(colResource);
          colRequests.add(colRequest);
        }
        Collection<RangerAccessResult> colResults=hivePlugin.isAccessAllowed(colRequests,auditHandler);
        if (colResults != null) {
          for (          RangerAccessResult colResult : colResults) {
            result=colResult;
            if (!result.getIsAllowed()) {
              break;
            }
          }
        }
      }
 else {
        result=hivePlugin.isAccessAllowed(request,auditHandler);
      }
      if (result != null && !result.getIsAllowed()) {
        String path=resource != null ? resource.getAsString(result.getServiceDef()) : null;
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
      }
    }
  }
  finally {
    auditHandler.flushAudit();
  }
}","/** 
 * Check if user has privileges to do this action on these objects
 * @param hiveOpType
 * @param inputsHObjs
 * @param outputHObjs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
@Override public void checkPrivileges(HiveOperationType hiveOpType,List<HivePrivilegeObject> inputHObjs,List<HivePrivilegeObject> outputHObjs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  UserGroupInformation ugi=getCurrentUserGroupInfo();
  if (ugi == null) {
    throw new HiveAccessControlException(""String_Node_Str"");
  }
  RangerHiveAuditHandler auditHandler=new RangerHiveAuditHandler();
  try {
    HiveAuthzSessionContext sessionContext=getHiveAuthzSessionContext();
    String user=ugi.getShortUserName();
    Set<String> groups=Sets.newHashSet(ugi.getGroupNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(toString(hiveOpType,inputHObjs,outputHObjs,context,sessionContext));
    }
    if (hiveOpType == HiveOperationType.DFS) {
      handleDfsCommand(hiveOpType,inputHObjs,outputHObjs,context,sessionContext,user,groups,auditHandler);
      return;
    }
    List<RangerHiveAccessRequest> requests=new ArrayList<RangerHiveAccessRequest>();
    if (inputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : inputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.READ;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,true);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    if (outputHObjs != null) {
      for (      HivePrivilegeObject hiveObj : outputHObjs) {
        RangerHiveResource resource=getHiveResource(hiveOpType,hiveObj);
        if (resource.getObjectType() == HiveObjectType.URI) {
          String path=hiveObj.getObjectName();
          FsAction permission=FsAction.WRITE;
          if (!isURIAccessAllowed(user,groups,permission,path,getHiveConf())) {
            throw new HiveAccessControlException(String.format(""String_Node_Str"",user,permission.name(),path));
          }
          continue;
        }
        HiveAccessType accessType=getAccessType(hiveObj,hiveOpType,false);
        if (accessType == HiveAccessType.NONE) {
          continue;
        }
        if (!existsByResourceAndAccessType(requests,resource,accessType)) {
          RangerHiveAccessRequest request=new RangerHiveAccessRequest(resource,user,groups,hiveOpType,accessType,context,sessionContext);
          requests.add(request);
        }
      }
    }
    for (    RangerHiveAccessRequest request : requests) {
      RangerHiveResource resource=(RangerHiveResource)request.getResource();
      RangerAccessResult result=null;
      if (resource.getObjectType() == HiveObjectType.COLUMN && StringUtils.contains(resource.getColumn(),COLUMN_SEP)) {
        List<RangerAccessRequest> colRequests=new ArrayList<RangerAccessRequest>();
        String[] columns=StringUtils.split(resource.getColumn(),COLUMN_SEP);
        for (        String column : columns) {
          if (column != null) {
            column=column.trim();
          }
          if (StringUtils.isEmpty(column)) {
            continue;
          }
          RangerHiveResource colResource=new RangerHiveResource(HiveObjectType.COLUMN,resource.getDatabase(),resource.getTable(),column);
          RangerHiveAccessRequest colRequest=request.copy();
          colRequest.setResource(colResource);
          colRequests.add(colRequest);
        }
        Collection<RangerAccessResult> colResults=hivePlugin.isAccessAllowed(colRequests,auditHandler);
        if (colResults != null) {
          for (          RangerAccessResult colResult : colResults) {
            result=colResult;
            if (!result.getIsAllowed()) {
              break;
            }
          }
        }
      }
 else {
        result=hivePlugin.isAccessAllowed(request,auditHandler);
      }
      if (result != null && !result.getIsAllowed()) {
        String path=resource != null ? resource.getAsString(result.getServiceDef()) : null;
        throw new HiveAccessControlException(String.format(""String_Node_Str"",user,request.getHiveAccessType().name(),path));
      }
    }
  }
  finally {
    auditHandler.flushAudit();
  }
}",0.9935733958992146
166453,"public static List<String> getHiveResources(String serviceName,String serviceType,Map<String,String> configs,ResourceLookupContext context) throws Exception {
  String userInput=context.getUserInput();
  String resource=context.getResourceName();
  Map<String,List<String>> resourceMap=context.getResources();
  List<String> resultList=null;
  List<String> databaseList=null;
  List<String> tableList=null;
  List<String> udfList=null;
  List<String> columnList=null;
  String databaseName=null;
  String tableName=null;
  String udfName=null;
  String columnName=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ resource+ ""String_Node_Str""+ resourceMap);
  }
  if (userInput != null && resource != null) {
    if (resourceMap != null && !resourceMap.isEmpty()) {
      databaseList=resourceMap.get(DATABASE);
      tableList=resourceMap.get(TABLE);
      udfList=resourceMap.get(UDF);
      columnList=resourceMap.get(COLUMN);
    }
switch (resource.trim().toLowerCase()) {
case DATABASE:
      databaseName=userInput;
    break;
case TABLE:
  tableName=userInput;
break;
case UDF:
udfName=userInput;
break;
case COLUMN:
columnName=userInput;
break;
default :
break;
}
}
if (serviceName != null && userInput != null) {
try {
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ configs+ ""String_Node_Str""+ databaseList+ ""String_Node_Str""+ tableList+ ""String_Node_Str""+ columnList);
}
final HiveClient hiveClient=new HiveConnectionMgr().getHiveConnection(serviceName,serviceType,configs);
Callable<List<String>> callableObj=null;
final String finalDbName;
final String finalColName;
final String finalTableName;
final List<String> finaldatabaseList=databaseList;
final List<String> finaltableList=tableList;
final List<String> finaludfList=udfList;
final List<String> finalcolumnList=columnList;
if (hiveClient != null) {
if (databaseName != null && !databaseName.isEmpty()) {
databaseName+=""String_Node_Str"";
finalDbName=databaseName;
callableObj=new Callable<List<String>>(){
@Override public List<String> call(){
return hiveClient.getDatabaseList(finalDbName,finaldatabaseList);
}
}
;
}
 else if (tableName != null && !tableName.isEmpty()) {
tableName+=""String_Node_Str"";
finalTableName=tableName;
callableObj=new Callable<List<String>>(){
@Override public List<String> call(){
return hiveClient.getTableList(finalTableName,finaldatabaseList,finaltableList);
}
}
;
}
 else if (columnName != null && !columnName.isEmpty()) {
columnName+=""String_Node_Str"";
finalColName=columnName;
finalDbName=databaseName;
finalTableName=tableName;
callableObj=new Callable<List<String>>(){
@Override public List<String> call(){
return hiveClient.getColumnList(finalColName,finaldatabaseList,finaltableList,finalcolumnList);
}
}
;
}
synchronized (hiveClient) {
resultList=TimedEventUtil.timedTask(callableObj,5,TimeUnit.SECONDS);
}
}
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ configs+ ""String_Node_Str""+ databaseList+ ""String_Node_Str""+ tableList+ ""String_Node_Str""+ columnList+ ""String_Node_Str""+ resultList);
}
return resultList;
}","public static List<String> getHiveResources(String serviceName,String serviceType,Map<String,String> configs,ResourceLookupContext context) throws Exception {
  String userInput=context.getUserInput();
  String resource=context.getResourceName();
  Map<String,List<String>> resourceMap=context.getResources();
  List<String> resultList=null;
  List<String> databaseList=null;
  List<String> tableList=null;
  List<String> udfList=null;
  List<String> columnList=null;
  String databaseName=null;
  String tableName=null;
  String udfName=null;
  String columnName=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ resource+ ""String_Node_Str""+ resourceMap);
  }
  if (userInput != null && resource != null) {
    if (resourceMap != null && !resourceMap.isEmpty()) {
      databaseList=resourceMap.get(DATABASE);
      tableList=resourceMap.get(TABLE);
      udfList=resourceMap.get(UDF);
      columnList=resourceMap.get(COLUMN);
    }
switch (resource.trim().toLowerCase()) {
case DATABASE:
      databaseName=userInput;
    break;
case TABLE:
  tableName=userInput;
break;
case UDF:
udfName=userInput;
break;
case COLUMN:
columnName=userInput;
break;
default :
break;
}
}
if (serviceName != null && userInput != null) {
try {
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ configs+ ""String_Node_Str""+ databaseList+ ""String_Node_Str""+ tableList+ ""String_Node_Str""+ columnList);
}
final HiveClient hiveClient=new HiveConnectionMgr().getHiveConnection(serviceName,serviceType,configs);
Callable<List<String>> callableObj=null;
final String finalDbName;
final String finalColName;
final String finalTableName;
final List<String> finaldatabaseList=databaseList;
final List<String> finaltableList=tableList;
final List<String> finaludfList=udfList;
final List<String> finalcolumnList=columnList;
if (hiveClient != null) {
if (databaseName != null && !databaseName.isEmpty()) {
databaseName+=""String_Node_Str"";
finalDbName=databaseName;
callableObj=new Callable<List<String>>(){
@Override public List<String> call(){
return hiveClient.getDatabaseList(finalDbName,finaldatabaseList);
}
}
;
}
 else if (tableName != null && !tableName.isEmpty()) {
tableName+=""String_Node_Str"";
finalTableName=tableName;
callableObj=new Callable<List<String>>(){
@Override public List<String> call(){
return hiveClient.getTableList(finalTableName,finaldatabaseList,finaltableList);
}
}
;
}
 else if (columnName != null && !columnName.isEmpty()) {
columnName+=""String_Node_Str"";
finalColName=columnName;
finalDbName=databaseName;
finalTableName=tableName;
callableObj=new Callable<List<String>>(){
@Override public List<String> call(){
return hiveClient.getColumnList(finalColName,finaldatabaseList,finaltableList,finalcolumnList);
}
}
;
}
if (callableObj != null) {
synchronized (hiveClient) {
resultList=TimedEventUtil.timedTask(callableObj,5,TimeUnit.SECONDS);
}
}
 else {
LOG.error(""String_Node_Str"");
}
}
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + userInput + ""String_Node_Str""+ configs+ ""String_Node_Str""+ databaseList+ ""String_Node_Str""+ tableList+ ""String_Node_Str""+ columnList+ ""String_Node_Str""+ resultList);
}
return resultList;
}",0.9746114786890292
166454,"/** 
 * The main loop for the Jisql program. This method handles the input from either a command line or from a file. Output is handled through the Formatter.
 * @throws SQLException if an exception occurs.
 */
public void doIsql() throws SQLException {
  BufferedReader reader=null;
  Statement statement=null;
  ResultSet resultSet=null;
  ResultSetMetaData resultSetMetaData=null;
  StringBuffer query=null;
  if (inputFileName != null) {
    try {
      reader=new BufferedReader(new FileReader(inputFileName));
    }
 catch (    FileNotFoundException fnfe) {
      System.err.println(""String_Node_Str"" + inputFileName + ""String_Node_Str"");
      fnfe.printStackTrace(System.err);
      return;
    }
  }
 else {
    reader=new BufferedReader(new InputStreamReader(System.in));
  }
  if (printDebug)   printAllExceptions(connection.getWarnings());
  statement=connection.createStatement();
  connection.clearWarnings();
  String trimmedLine=null;
  try {
    while (true) {
      int linecount=1;
      query=new StringBuffer();
      try {
        if ((inputFileName == null) && (inputQuery == null))         System.out.print(""String_Node_Str"");
        while (true) {
          if ((inputFileName == null) && (inputQuery == null)) {
            System.out.print(linecount++ + ""String_Node_Str"");
            System.out.flush();
          }
          String line=null;
          if (inputQuery == null)           line=reader.readLine();
 else           line=inputQuery.toString();
          if (line == null || line.equalsIgnoreCase(""String_Node_Str"") || line.equalsIgnoreCase(""String_Node_Str"")) {
            if ((inputFileName != null) && (inputQuery != null)) {
              break;
            }
 else {
              return;
            }
          }
          if (line.equals(""String_Node_Str"")) {
            query=new StringBuffer();
            break;
          }
          trimmedLine=line.trim();
          if (trimmedLine.startsWith(""String_Node_Str"") || trimmedLine.length() < 1) {
            continue;
          }
          if (connectString.toLowerCase().startsWith(""String_Node_Str"") && inputFileName != null) {
            if (trimmedLine.startsWith(""String_Node_Str"") || trimmedLine.length() < 2) {
              commandTerminator=""String_Node_Str"";
              continue;
            }
          }
          if (line.trim().equalsIgnoreCase(commandTerminator) || line.trim().endsWith(commandTerminator)) {
            if (line.trim().endsWith(commandTerminator)) {
              line=line.substring(0,line.length() - commandTerminator.length());
              query.append(""String_Node_Str"");
              query.append(line);
            }
            break;
          }
          query.append(""String_Node_Str"");
          query.append(line);
        }
        if (query.toString().length() == 0)         continue;
        if (printDebug)         System.out.println(""String_Node_Str"" + query.toString());
        boolean moreResults=statement.execute(query.toString());
        int rowsAffected=0;
        do {
          if (printDebug)           printAllExceptions(statement.getWarnings());
          statement.clearWarnings();
          if (moreResults) {
            resultSet=statement.getResultSet();
            if (printDebug)             printAllExceptions(resultSet.getWarnings());
            resultSet.clearWarnings();
            resultSetMetaData=resultSet.getMetaData();
            formatter.formatHeader(System.out,resultSetMetaData);
            formatter.formatData(System.out,resultSet,resultSetMetaData);
            formatter.formatFooter(System.out,resultSetMetaData);
            int rowsSelected=statement.getUpdateCount();
            if (rowsSelected >= 0 && printDebug) {
              System.out.println(rowsSelected + ""String_Node_Str"");
            }
          }
 else {
            rowsAffected=statement.getUpdateCount();
            if (printDebug)             printAllExceptions(statement.getWarnings());
            statement.clearWarnings();
            if (rowsAffected >= 0 && printDebug) {
              System.out.println(rowsAffected + ""String_Node_Str"");
            }
          }
          try {
            moreResults=statement.getMoreResults();
          }
 catch (          NullPointerException npe) {
            moreResults=false;
          }
        }
 while (moreResults || rowsAffected != -1);
      }
 catch (      SQLException sqle) {
        printAllExceptions(sqle);
        statement.cancel();
        statement.clearWarnings();
      }
catch (      Exception e) {
        e.printStackTrace(System.err);
      }
      if (inputQuery != null)       return;
    }
  }
  finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException ioe) {
      }
    }
    if (statement != null) {
      try {
        if (!statement.isClosed()) {
          statement.close();
        }
      }
 catch (      SQLException sqle) {
      }
    }
  }
}","/** 
 * The main loop for the Jisql program. This method handles the input from either a command line or from a file. Output is handled through the Formatter.
 * @throws SQLException if an exception occurs.
 */
public void doIsql() throws SQLException {
  BufferedReader reader=null;
  Statement statement=null;
  ResultSet resultSet=null;
  ResultSetMetaData resultSetMetaData=null;
  StringBuffer query=null;
  if (inputFileName != null) {
    try {
      reader=new BufferedReader(new FileReader(inputFileName));
    }
 catch (    FileNotFoundException fnfe) {
      System.err.println(""String_Node_Str"" + inputFileName + ""String_Node_Str"");
      fnfe.printStackTrace(System.err);
      return;
    }
  }
 else {
    reader=new BufferedReader(new InputStreamReader(System.in));
  }
  if (printDebug)   printAllExceptions(connection.getWarnings());
  statement=connection.createStatement();
  connection.clearWarnings();
  String trimmedLine=null;
  try {
    while (true) {
      int linecount=1;
      query=new StringBuffer();
      try {
        if ((inputFileName == null) && (inputQuery == null))         System.out.print(""String_Node_Str"");
        while (true) {
          if ((inputFileName == null) && (inputQuery == null)) {
            System.out.print(linecount++ + ""String_Node_Str"");
            System.out.flush();
          }
          String line=null;
          if (inputQuery == null)           line=reader.readLine();
 else           line=inputQuery.toString();
          if (line == null || line.equalsIgnoreCase(""String_Node_Str"") || line.equalsIgnoreCase(""String_Node_Str"")) {
            if ((inputFileName != null) && (inputQuery != null)) {
              break;
            }
 else {
              return;
            }
          }
          if (line.equals(""String_Node_Str"")) {
            query=new StringBuffer();
            break;
          }
          trimmedLine=line.trim();
          if (trimmedLine.startsWith(""String_Node_Str"") || trimmedLine.length() < 1) {
            continue;
          }
          if (connectString.toLowerCase().startsWith(""String_Node_Str"") && inputFileName != null) {
            if (trimmedLine.startsWith(""String_Node_Str"") || trimmedLine.length() < 2) {
              commandTerminator=""String_Node_Str"";
              continue;
            }
          }
          if (line.trim().equalsIgnoreCase(commandTerminator) || line.trim().endsWith(commandTerminator)) {
            if (line.trim().endsWith(commandTerminator)) {
              line=line.substring(0,line.length() - commandTerminator.length());
              query.append(""String_Node_Str"");
              query.append(line);
            }
            break;
          }
          query.append(""String_Node_Str"");
          query.append(line);
        }
        if (query.toString().length() == 0)         continue;
        if (printDebug)         System.out.println(""String_Node_Str"" + query.toString());
        boolean moreResults=statement.execute(query.toString());
        int rowsAffected=0;
        do {
          if (printDebug)           printAllExceptions(statement.getWarnings());
          statement.clearWarnings();
          if (moreResults) {
            resultSet=statement.getResultSet();
            if (printDebug)             printAllExceptions(resultSet.getWarnings());
            resultSet.clearWarnings();
            resultSetMetaData=resultSet.getMetaData();
            formatter.formatHeader(System.out,resultSetMetaData);
            formatter.formatData(System.out,resultSet,resultSetMetaData);
            formatter.formatFooter(System.out,resultSetMetaData);
            int rowsSelected=statement.getUpdateCount();
            if (rowsSelected >= 0 && printDebug) {
              System.out.println(rowsSelected + ""String_Node_Str"");
            }
          }
 else {
            rowsAffected=statement.getUpdateCount();
            if (printDebug)             printAllExceptions(statement.getWarnings());
            statement.clearWarnings();
            if (rowsAffected >= 0 && printDebug) {
              System.out.println(rowsAffected + ""String_Node_Str"");
            }
          }
          try {
            moreResults=statement.getMoreResults();
          }
 catch (          NullPointerException npe) {
            moreResults=false;
          }
        }
 while (moreResults || rowsAffected != -1);
      }
 catch (      SQLException sqle) {
        printAllExceptions(sqle);
        statement.cancel();
        statement.clearWarnings();
      }
catch (      Exception e) {
        e.printStackTrace(System.err);
      }
      if (inputQuery != null)       return;
    }
  }
  finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException ioe) {
      }
    }
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException sqle) {
      }
    }
  }
}",0.9913889170296828
166455,"/** 
 * Loads the keystore from the given ranger database. <p>If a password is given, it is used to check the integrity of the keystore data. Otherwise, the integrity of the keystore is not checked.
 * @param stream the input stream from which the keystore is loaded
 * @param password the (optional) password used to check the integrity ofthe keystore.
 * @exception IOException if there is an I/O or format problem with thekeystore data
 * @exception NoSuchAlgorithmException if the algorithm used to checkthe integrity of the keystore cannot be found
 * @exception CertificateException if any of the certificates in thekeystore could not be loaded
 */
public void engineLoad(InputStream stream,char[] password) throws IOException, NoSuchAlgorithmException, CertificateException {
synchronized (entries) {
    List<XXRangerKeyStore> rangerKeyDetails=dbOperationLoad();
    DataInputStream dis;
    MessageDigest md=null;
    if (rangerKeyDetails == null || rangerKeyDetails.size() < 1) {
      return;
    }
    entries.clear();
    if (password != null) {
      md=getPreKeyedHash(password);
    }
    byte computed[];
    computed=md.digest();
    for (    XXRangerKeyStore rangerKey : rangerKeyDetails) {
      String encoded=rangerKey.getEncoded();
      byte[] data=DatatypeConverter.parseBase64Binary(encoded);
      if (data != null && data.length > 0) {
        stream=new ByteArrayInputStream(data);
      }
 else {
        logger.error(""String_Node_Str"" + rangerKey.getAlias());
      }
      if (password != null) {
        int counter=0;
        for (int i=computed.length - 1; i >= 0; i--) {
          if (computed[i] != data[data.length - (1 + counter)]) {
            Throwable t=new UnrecoverableKeyException(""String_Node_Str"");
            throw (IOException)new IOException(""String_Node_Str"" + ""String_Node_Str"").initCause(t);
          }
 else {
            counter++;
          }
        }
      }
      if (password != null) {
        dis=new DataInputStream(new DigestInputStream(stream,md));
      }
 else {
        dis=new DataInputStream(stream);
      }
      ObjectInputStream ois=null;
      try {
        String alias;
        SecretKeyEntry entry=new SecretKeyEntry();
        alias=rangerKey.getAlias();
        entry.date=new Date(rangerKey.getCreatedDate());
        entry.cipher_field=rangerKey.getCipher();
        entry.bit_length=rangerKey.getBitLength();
        entry.description=rangerKey.getDescription();
        entry.version=rangerKey.getVersion();
        entry.attributes=rangerKey.getAttributes();
        try {
          ois=new ObjectInputStream(dis);
          entry.sealedKey=(SealedObject)ois.readObject();
        }
 catch (        ClassNotFoundException cnfe) {
          throw new IOException(cnfe.getMessage());
        }
        entries.put(alias,entry);
      }
  finally {
        if (ois != null) {
          ois.close();
        }
 else {
          dis.close();
        }
      }
    }
  }
}","/** 
 * Loads the keystore from the given ranger database. <p>If a password is given, it is used to check the integrity of the keystore data. Otherwise, the integrity of the keystore is not checked.
 * @param stream the input stream from which the keystore is loaded
 * @param password the (optional) password used to check the integrity ofthe keystore.
 * @exception IOException if there is an I/O or format problem with thekeystore data
 * @exception NoSuchAlgorithmException if the algorithm used to checkthe integrity of the keystore cannot be found
 * @exception CertificateException if any of the certificates in thekeystore could not be loaded
 */
public void engineLoad(InputStream stream,char[] password) throws IOException, NoSuchAlgorithmException, CertificateException {
synchronized (entries) {
    List<XXRangerKeyStore> rangerKeyDetails=dbOperationLoad();
    DataInputStream dis;
    MessageDigest md=null;
    if (rangerKeyDetails == null || rangerKeyDetails.size() < 1) {
      return;
    }
    entries.clear();
    md=getPreKeyedHash(password);
    byte computed[];
    computed=md.digest();
    for (    XXRangerKeyStore rangerKey : rangerKeyDetails) {
      String encoded=rangerKey.getEncoded();
      byte[] data=DatatypeConverter.parseBase64Binary(encoded);
      if (data != null && data.length > 0) {
        stream=new ByteArrayInputStream(data);
      }
 else {
        logger.error(""String_Node_Str"" + rangerKey.getAlias());
      }
      if (password != null) {
        int counter=0;
        for (int i=computed.length - 1; i >= 0; i--) {
          if (computed[i] != data[data.length - (1 + counter)]) {
            Throwable t=new UnrecoverableKeyException(""String_Node_Str"");
            throw (IOException)new IOException(""String_Node_Str"" + ""String_Node_Str"").initCause(t);
          }
 else {
            counter++;
          }
        }
      }
      if (password != null) {
        dis=new DataInputStream(new DigestInputStream(stream,md));
      }
 else {
        dis=new DataInputStream(stream);
      }
      ObjectInputStream ois=null;
      try {
        String alias;
        SecretKeyEntry entry=new SecretKeyEntry();
        alias=rangerKey.getAlias();
        entry.date=new Date(rangerKey.getCreatedDate());
        entry.cipher_field=rangerKey.getCipher();
        entry.bit_length=rangerKey.getBitLength();
        entry.description=rangerKey.getDescription();
        entry.version=rangerKey.getVersion();
        entry.attributes=rangerKey.getAttributes();
        try {
          ois=new ObjectInputStream(dis);
          entry.sealedKey=(SealedObject)ois.readObject();
        }
 catch (        ClassNotFoundException cnfe) {
          throw new IOException(cnfe.getMessage());
        }
        entries.put(alias,entry);
      }
  finally {
        if (ois != null) {
          ois.close();
        }
 else {
          dis.close();
        }
      }
    }
  }
}",0.9870572207084468
166456,"@Override public KeyVersion getKeyVersion(String versionName) throws IOException {
  SecretKeySpec key=null;
  try {
    if (!dbStore.engineContainsAlias(versionName)) {
      return null;
    }
    key=(SecretKeySpec)dbStore.engineGetKey(versionName,masterKey);
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
    throw new IOException(""String_Node_Str"" + key,e);
  }
catch (  UnrecoverableKeyException e) {
    e.printStackTrace();
    throw new IOException(""String_Node_Str"" + key,e);
  }
  return new KeyVersion(getBaseName(versionName),versionName,key.getEncoded());
}","@Override public KeyVersion getKeyVersion(String versionName) throws IOException {
  SecretKeySpec key=null;
  try {
    if (!dbStore.engineContainsAlias(versionName)) {
      return null;
    }
    key=(SecretKeySpec)dbStore.engineGetKey(versionName,masterKey);
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
    throw new IOException(""String_Node_Str"" + key,e);
  }
catch (  UnrecoverableKeyException e) {
    e.printStackTrace();
    throw new IOException(""String_Node_Str"" + key,e);
  }
  if (key == null) {
    return null;
  }
 else {
    return new KeyVersion(getBaseName(versionName),versionName,key.getEncoded());
  }
}",0.954983922829582
166457,"public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  String sourceUrl=(String)request.getAttribute(AbstractGatewayFilter.SOURCE_REQUEST_CONTEXT_URL_ATTRIBUTE_NAME);
  String topologyName=getTopologyName(sourceUrl);
  String serviceName=getServiceName();
  Subject subject=Subject.getSubject(AccessController.getContext());
  Principal primaryPrincipal=(Principal)subject.getPrincipals(PrimaryPrincipal.class).toArray()[0];
  String primaryUser=primaryPrincipal.getName();
  String impersonatedUser=null;
  Object[] impersonations=subject.getPrincipals(ImpersonatedPrincipal.class).toArray();
  if (impersonations != null && impersonations.length > 0) {
    impersonatedUser=((Principal)impersonations[0]).getName();
  }
  String user=(impersonatedUser != null) ? impersonatedUser : primaryUser;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + primaryUser + ""String_Node_Str""+ impersonatedUser+ ""String_Node_Str""+ user);
  }
  Object[] groupObjects=subject.getPrincipals(GroupPrincipal.class).toArray();
  Set<String> groups=new HashSet<String>();
  for (  Object obj : groupObjects) {
    groups.add(((Principal)obj).getName());
  }
  String clientIp=request.getRemoteAddr();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + primaryUser + ""String_Node_Str""+ impersonatedUser+ ""String_Node_Str""+ user+ ""String_Node_Str""+ groups+ ""String_Node_Str""+ clientIp);
  }
  RangerAccessRequest accessRequest=new KnoxRangerPlugin.RequestBuilder().service(serviceName).topology(topologyName).user(user).groups(groups).clientIp(clientIp).build();
  RangerAccessResult result=plugin.isAccessAllowed(accessRequest);
  boolean accessAllowed=result.getIsAllowed();
  boolean audited=result.getIsAudited();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accessAllowed);
    LOG.debug(""String_Node_Str"" + audited);
  }
  if (accessAllowed) {
    chain.doFilter(request,response);
  }
 else {
    sendForbidden((HttpServletResponse)response);
  }
}","public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  String sourceUrl=(String)request.getAttribute(AbstractGatewayFilter.SOURCE_REQUEST_CONTEXT_URL_ATTRIBUTE_NAME);
  String topologyName=getTopologyName(sourceUrl);
  String serviceName=getServiceName();
  Subject subject=Subject.getSubject(AccessController.getContext());
  Principal primaryPrincipal=(Principal)subject.getPrincipals(PrimaryPrincipal.class).toArray()[0];
  String primaryUser=primaryPrincipal.getName();
  String impersonatedUser=null;
  Object[] impersonations=subject.getPrincipals(ImpersonatedPrincipal.class).toArray();
  if (impersonations != null && impersonations.length > 0) {
    impersonatedUser=((Principal)impersonations[0]).getName();
  }
  String user=(impersonatedUser != null) ? impersonatedUser : primaryUser;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + primaryUser + ""String_Node_Str""+ impersonatedUser+ ""String_Node_Str""+ user);
  }
  Object[] groupObjects=subject.getPrincipals(GroupPrincipal.class).toArray();
  Set<String> groups=new HashSet<String>();
  for (  Object obj : groupObjects) {
    groups.add(((Principal)obj).getName());
  }
  String clientIp=request.getRemoteAddr();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + primaryUser + ""String_Node_Str""+ impersonatedUser+ ""String_Node_Str""+ user+ ""String_Node_Str""+ groups+ ""String_Node_Str""+ clientIp);
  }
  RangerAccessRequest accessRequest=new KnoxRangerPlugin.RequestBuilder().service(serviceName).topology(topologyName).user(user).groups(groups).clientIp(clientIp).build();
  RangerAccessResult result=plugin.isAccessAllowed(accessRequest);
  boolean accessAllowed=result != null && result.getIsAllowed();
  boolean audited=result != null && result.getIsAudited();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accessAllowed);
    LOG.debug(""String_Node_Str"" + audited);
  }
  if (accessAllowed) {
    chain.doFilter(request,response);
  }
 else {
    sendForbidden((HttpServletResponse)response);
  }
}",0.991304347826087
166458,"public List<String> getTopologyList(String topologyNameMatching,List<String> knoxTopologyList){
  LOG.debug(""String_Node_Str"" + topologyNameMatching);
  List<String> topologyList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (topologyNameMatching == null || topologyNameMatching.trim().isEmpty()) {
    topologyNameMatching=""String_Node_Str"";
  }
  try {
    Client client=null;
    ClientResponse response=null;
    try {
      client=Client.create();
      ;
      client.addFilter(new HTTPBasicAuthFilter(userName,password));
      WebResource webResource=client.resource(knoxUrl);
      response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
      LOG.debug(""String_Node_Str"" + response);
      if (response != null) {
        if (response.getStatus() == 200) {
          String jsonString=response.getEntity(String.class);
          LOG.debug(""String_Node_Str"" + jsonString);
          ObjectMapper objectMapper=new ObjectMapper();
          JsonNode rootNode=objectMapper.readTree(jsonString);
          JsonNode topologyNode=rootNode.findValue(""String_Node_Str"");
          if (topologyNode == null) {
            return topologyList;
          }
          Iterator<JsonNode> elements=topologyNode.getElements();
          while (elements.hasNext()) {
            JsonNode element=elements.next();
            String topologyName=element.get(""String_Node_Str"").getValueAsText();
            LOG.debug(""String_Node_Str"" + topologyName);
            if (knoxTopologyList != null && knoxTopologyList.contains(topologyName)) {
              continue;
            }
            if (topologyName.startsWith(topologyNameMatching)) {
              topologyList.add(topologyName);
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + knoxUrl + ""String_Node_Str""+ response.getStatus());
        }
      }
 else {
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
        LOG.error(msgDesc);
        HadoopException hdpException=new HadoopException(msgDesc);
        hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
        throw hdpException;
      }
    }
  finally {
      if (response != null) {
        response.close();
      }
      if (client != null) {
        client.destroy();
      }
    }
  }
 catch (  HadoopException he) {
    throw he;
  }
catch (  Throwable t) {
    String msgDesc=""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
 finally {
  }
  return topologyList;
}","public List<String> getTopologyList(String topologyNameMatching,List<String> knoxTopologyList){
  LOG.debug(""String_Node_Str"" + topologyNameMatching);
  List<String> topologyList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (topologyNameMatching == null || topologyNameMatching.trim().isEmpty()) {
    topologyNameMatching=""String_Node_Str"";
  }
  try {
    Client client=null;
    ClientResponse response=null;
    try {
      client=Client.create();
      ;
      client.addFilter(new HTTPBasicAuthFilter(userName,password));
      WebResource webResource=client.resource(knoxUrl);
      response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
      LOG.debug(""String_Node_Str"" + response);
      if (response != null) {
        if (response.getStatus() == 200) {
          String jsonString=response.getEntity(String.class);
          LOG.debug(""String_Node_Str"" + jsonString);
          ObjectMapper objectMapper=new ObjectMapper();
          JsonNode rootNode=objectMapper.readTree(jsonString);
          JsonNode topologyNode=rootNode.findValue(""String_Node_Str"");
          if (topologyNode == null) {
            return topologyList;
          }
          Iterator<JsonNode> elements=topologyNode.getElements();
          while (elements.hasNext()) {
            JsonNode element=elements.next();
            JsonNode nameElement=element.get(""String_Node_Str"");
            if (nameElement != null) {
              String topologyName=nameElement.getValueAsText();
              LOG.debug(""String_Node_Str"" + topologyName);
              if (knoxTopologyList != null && topologyName != null && knoxTopologyList.contains(topologyName)) {
                continue;
              }
              if (topologyName != null && topologyName.startsWith(topologyNameMatching)) {
                topologyList.add(topologyName);
              }
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + knoxUrl + ""String_Node_Str""+ response.getStatus());
        }
      }
 else {
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
        LOG.error(msgDesc);
        HadoopException hdpException=new HadoopException(msgDesc);
        hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
        throw hdpException;
      }
    }
  finally {
      if (response != null) {
        response.close();
      }
      if (client != null) {
        client.destroy();
      }
    }
  }
 catch (  HadoopException he) {
    throw he;
  }
catch (  Throwable t) {
    String msgDesc=""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
 finally {
  }
  return topologyList;
}",0.9506538796861378
166459,"public List<String> getServiceList(String topologyName,String serviceNameMatching,List<String> knoxServiceList){
  List<String> serviceList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (serviceNameMatching == null || serviceNameMatching.trim().isEmpty()) {
    serviceNameMatching=""String_Node_Str"";
  }
  try {
    Client client=null;
    ClientResponse response=null;
    try {
      client=Client.create();
      ;
      client.addFilter(new HTTPBasicAuthFilter(userName,password));
      WebResource webResource=client.resource(knoxUrl + ""String_Node_Str"" + topologyName);
      response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
      LOG.debug(""String_Node_Str"" + response);
      if (response != null) {
        if (response.getStatus() == 200) {
          String jsonString=response.getEntity(String.class);
          LOG.debug(""String_Node_Str"" + jsonString);
          ObjectMapper objectMapper=new ObjectMapper();
          JsonNode rootNode=objectMapper.readTree(jsonString);
          JsonNode topologyNode=rootNode.findValue(""String_Node_Str"");
          JsonNode servicesNode=topologyNode.get(""String_Node_Str"");
          Iterator<JsonNode> services=servicesNode.getElements();
          while (services.hasNext()) {
            JsonNode service=services.next();
            String serviceName=service.get(""String_Node_Str"").getValueAsText();
            LOG.debug(""String_Node_Str"" + serviceName);
            if (knoxServiceList != null && knoxServiceList.contains(serviceName)) {
              continue;
            }
            if (serviceName.startsWith(serviceNameMatching)) {
              serviceList.add(serviceName);
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + knoxUrl + ""String_Node_Str""+ response.getStatus());
        }
      }
 else {
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
        LOG.error(msgDesc);
        HadoopException hdpException=new HadoopException(msgDesc);
        hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
        throw hdpException;
      }
    }
  finally {
      if (response != null) {
        response.close();
      }
      if (client != null) {
        client.destroy();
      }
    }
  }
 catch (  HadoopException he) {
    throw he;
  }
catch (  Throwable t) {
    String msgDesc=""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
 finally {
  }
  return serviceList;
}","public List<String> getServiceList(String topologyName,String serviceNameMatching,List<String> knoxServiceList){
  List<String> serviceList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (serviceNameMatching == null || serviceNameMatching.trim().isEmpty()) {
    serviceNameMatching=""String_Node_Str"";
  }
  try {
    Client client=null;
    ClientResponse response=null;
    try {
      client=Client.create();
      ;
      client.addFilter(new HTTPBasicAuthFilter(userName,password));
      WebResource webResource=client.resource(knoxUrl + ""String_Node_Str"" + topologyName);
      response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
      LOG.debug(""String_Node_Str"" + response);
      if (response != null) {
        if (response.getStatus() == 200) {
          String jsonString=response.getEntity(String.class);
          LOG.debug(""String_Node_Str"" + jsonString);
          ObjectMapper objectMapper=new ObjectMapper();
          JsonNode rootNode=objectMapper.readTree(jsonString);
          JsonNode topologyNode=rootNode.findValue(""String_Node_Str"");
          if (topologyNode != null) {
            JsonNode servicesNode=topologyNode.get(""String_Node_Str"");
            if (servicesNode != null) {
              Iterator<JsonNode> services=servicesNode.getElements();
              while (services.hasNext()) {
                JsonNode service=services.next();
                JsonNode serviceElement=service.get(""String_Node_Str"");
                if (serviceElement != null) {
                  String serviceName=serviceElement.getValueAsText();
                  LOG.debug(""String_Node_Str"" + serviceName);
                  if (serviceName == null || (knoxServiceList != null && knoxServiceList.contains(serviceName))) {
                    continue;
                  }
                  if (serviceName.startsWith(serviceNameMatching)) {
                    serviceList.add(serviceName);
                  }
                }
              }
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + knoxUrl + ""String_Node_Str""+ response.getStatus());
        }
      }
 else {
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
        LOG.error(msgDesc);
        HadoopException hdpException=new HadoopException(msgDesc);
        hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
        throw hdpException;
      }
    }
  finally {
      if (response != null) {
        response.close();
      }
      if (client != null) {
        client.destroy();
      }
    }
  }
 catch (  HadoopException he) {
    throw he;
  }
catch (  Throwable t) {
    String msgDesc=""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
 finally {
  }
  return serviceList;
}",0.943175965665236
166460,"@Override public KeyVersion getKeyVersion(String versionName) throws IOException {
  return null;
}","@Override public KeyVersion getKeyVersion(String versionName) throws IOException {
  KeyVersion version=null;
  return version;
}",0.8421052631578947
166461,"@Override public Metadata getMetadata(String name) throws IOException {
  new KeyProvider.Metadata(null);
  return null;
}","@Override public Metadata getMetadata(String name) throws IOException {
  Metadata metadata=null;
  return metadata;
}",0.8333333333333334
166462,"@Override public List<KeyVersion> getKeyVersions(String name) throws IOException {
  return null;
}","@Override public List<KeyVersion> getKeyVersions(String name) throws IOException {
  List<KeyVersion> keys=null;
  return keys;
}",0.8333333333333334
166463,"@Override public KeyVersion createKey(String name,byte[] material,Options options) throws IOException {
  return null;
}","@Override public KeyVersion createKey(String name,byte[] material,Options options) throws IOException {
  KeyVersion version=null;
  return version;
}",0.8666666666666667
166464,"@Override public List<String> getKeys() throws IOException {
  return null;
}","@Override public List<String> getKeys() throws IOException {
  List<String> keys=null;
  return keys;
}",0.8111111111111111
166465,"@Override public KeyVersion rollNewVersion(String name,byte[] material) throws IOException {
  return null;
}","@Override public KeyVersion rollNewVersion(String name,byte[] material) throws IOException {
  KeyVersion version=null;
  return version;
}",0.8548387096774194
166466,"public void shutdownServer(){
  int timeWaitForShutdownInSeconds=getIntConfig(""String_Node_Str"",120);
  if (timeWaitForShutdownInSeconds > 0) {
    long endTime=System.currentTimeMillis() + (timeWaitForShutdownInSeconds * 1000L);
    LOG.info(""String_Node_Str"" + new Date(endTime));
    while (System.currentTimeMillis() < endTime) {
      int activeCount=Thread.activeCount();
      if (activeCount == 0) {
        LOG.info(""String_Node_Str"" + activeCount + ""String_Node_Str"");
        break;
      }
 else {
        LOG.info(""String_Node_Str"" + activeCount + ""String_Node_Str"");
        try {
          Thread.sleep(5000L);
        }
 catch (        InterruptedException e) {
          LOG.warning(""String_Node_Str"" + e);
          break;
        }
      }
    }
  }
  LOG.info(""String_Node_Str"");
  System.exit(0);
}","public void shutdownServer(){
  int timeWaitForShutdownInSeconds=getIntConfig(""String_Node_Str"",0);
  if (timeWaitForShutdownInSeconds > 0) {
    long endTime=System.currentTimeMillis() + (timeWaitForShutdownInSeconds * 1000L);
    LOG.info(""String_Node_Str"" + new Date(endTime));
    while (System.currentTimeMillis() < endTime) {
      int activeCount=Thread.activeCount();
      if (activeCount == 0) {
        LOG.info(""String_Node_Str"" + activeCount + ""String_Node_Str"");
        break;
      }
 else {
        LOG.info(""String_Node_Str"" + activeCount + ""String_Node_Str"");
        try {
          Thread.sleep(5000L);
        }
 catch (        InterruptedException e) {
          LOG.warning(""String_Node_Str"" + e);
          break;
        }
      }
    }
  }
  LOG.info(""String_Node_Str"");
  System.exit(0);
}",0.9987775061124694
166467,"public void start(){
  Tomcat server=new Tomcat();
  String hostName=getConfig(""String_Node_Str"");
  int serverPort=getIntConfig(""String_Node_Str"",6181);
  int sslPort=getIntConfig(""String_Node_Str"",-1);
  int shutdownPort=getIntConfig(""String_Node_Str"",DEFAULT_SHUTDOWN_PORT);
  String shutdownCommand=getConfig(""String_Node_Str"",DEFAULT_SHUTDOWN_COMMAND);
  server.setHostname(hostName);
  server.setPort(serverPort);
  server.getServer().setPort(shutdownPort);
  server.getServer().setShutdown(shutdownCommand);
  if (sslPort > 0) {
    Connector ssl=new Connector();
    ssl.setPort(sslPort);
    ssl.setSecure(true);
    ssl.setScheme(""String_Node_Str"");
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str"",""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str"",""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str"",""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str""));
    String enabledProtocols=""String_Node_Str"";
    ssl.setAttribute(""String_Node_Str"",enabledProtocols);
    server.getService().addConnector(ssl);
    server.setConnector(ssl);
  }
  File baseDir=new File(""String_Node_Str"");
  File logDirectory=new File(baseDir,""String_Node_Str"");
  if (!logDirectory.exists()) {
    logDirectory.mkdirs();
  }
  AccessLogValve valve=new AccessLogValve();
  valve.setRotatable(true);
  valve.setAsyncSupported(true);
  valve.setBuffered(false);
  valve.setEnabled(true);
  valve.setFileDateFormat(getConfig(""String_Node_Str"",""String_Node_Str""));
  valve.setDirectory(logDirectory.getAbsolutePath());
  valve.setRotatable(true);
  valve.setSuffix(""String_Node_Str"");
  String logPattern=getConfig(""String_Node_Str"",""String_Node_Str"");
  valve.setPattern(logPattern);
  server.getHost().getPipeline().addValve(valve);
  try {
    String webapp_dir=getConfig(""String_Node_Str"");
    if (webapp_dir == null || webapp_dir.trim().isEmpty()) {
      String catalina_base=getConfig(""String_Node_Str"");
      if (catalina_base == null || catalina_base.trim().isEmpty()) {
        LOG.severe(""String_Node_Str"");
        System.exit(1);
      }
      webapp_dir=catalina_base + File.separator + ""String_Node_Str"";
      LOG.info(""String_Node_Str"" + webapp_dir);
    }
    String webContextName=getConfig(""String_Node_Str"",""String_Node_Str"");
    if (webContextName != null) {
      if (!webContextName.startsWith(""String_Node_Str"")) {
        LOG.info(""String_Node_Str"" + webContextName + ""String_Node_Str""+ webContextName+ ""String_Node_Str"");
        webContextName=""String_Node_Str"" + webContextName;
      }
    }
 else {
      webContextName=""String_Node_Str"";
    }
    File wad=new File(webapp_dir);
    if (wad.isDirectory()) {
      LOG.info(""String_Node_Str"" + webapp_dir + ""String_Node_Str""+ webContextName);
    }
 else     if (wad.isFile()) {
      File webAppDir=new File(DEFAULT_WEBAPPS_ROOT_FOLDER);
      if (!webAppDir.exists()) {
        webAppDir.mkdirs();
      }
      LOG.info(""String_Node_Str"" + webapp_dir + ""String_Node_Str""+ webContextName);
    }
    LOG.info(""String_Node_Str"" + webContextName + ""String_Node_Str""+ webapp_dir+ ""String_Node_Str"");
    Context webappCtx=server.addWebapp(webContextName,new File(webapp_dir).getAbsolutePath());
    webappCtx.init();
    LOG.info(""String_Node_Str"" + webContextName + ""String_Node_Str""+ webapp_dir+ ""String_Node_Str"");
  }
 catch (  ServletException e1) {
    LOG.severe(""String_Node_Str"" + e1.toString());
    e1.printStackTrace();
  }
catch (  LifecycleException lce) {
    LOG.severe(""String_Node_Str"" + lce.toString());
    lce.printStackTrace();
  }
  try {
    server.start();
    server.getServer().await();
    shutdownServer();
  }
 catch (  LifecycleException e) {
    LOG.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
}","public void start(){
  Tomcat server=new Tomcat();
  String hostName=getConfig(""String_Node_Str"");
  int serverPort=getIntConfig(""String_Node_Str"",6181);
  int sslPort=getIntConfig(""String_Node_Str"",-1);
  int shutdownPort=getIntConfig(""String_Node_Str"",DEFAULT_SHUTDOWN_PORT);
  String shutdownCommand=getConfig(""String_Node_Str"",DEFAULT_SHUTDOWN_COMMAND);
  server.setHostname(hostName);
  server.setPort(serverPort);
  server.getServer().setPort(shutdownPort);
  server.getServer().setShutdown(shutdownCommand);
  if (sslPort > 0) {
    Connector ssl=new Connector();
    ssl.setPort(sslPort);
    ssl.setSecure(true);
    ssl.setScheme(""String_Node_Str"");
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str"",""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str"",""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str"",""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str""));
    ssl.setAttribute(""String_Node_Str"",getConfig(""String_Node_Str""));
    String enabledProtocols=""String_Node_Str"";
    ssl.setAttribute(""String_Node_Str"",enabledProtocols);
    server.getService().addConnector(ssl);
    server.setConnector(ssl);
  }
  File baseDir=new File(""String_Node_Str"");
  File logDirectory=new File(baseDir,""String_Node_Str"");
  if (!logDirectory.exists()) {
    logDirectory.mkdirs();
  }
  AccessLogValve valve=new AccessLogValve();
  valve.setRotatable(true);
  valve.setAsyncSupported(true);
  valve.setBuffered(false);
  valve.setEnabled(true);
  valve.setFileDateFormat(getConfig(""String_Node_Str"",""String_Node_Str""));
  valve.setDirectory(logDirectory.getAbsolutePath());
  valve.setRotatable(true);
  valve.setSuffix(""String_Node_Str"");
  String logPattern=getConfig(""String_Node_Str"",""String_Node_Str"");
  valve.setPattern(logPattern);
  server.getHost().getPipeline().addValve(valve);
  try {
    String webapp_dir=getConfig(""String_Node_Str"");
    if (webapp_dir == null || webapp_dir.trim().isEmpty()) {
      String catalina_base=getConfig(""String_Node_Str"");
      if (catalina_base == null || catalina_base.trim().isEmpty()) {
        LOG.severe(""String_Node_Str"");
        System.exit(1);
      }
      webapp_dir=catalina_base + File.separator + ""String_Node_Str"";
      LOG.info(""String_Node_Str"" + webapp_dir);
    }
    String webContextName=getConfig(""String_Node_Str"",""String_Node_Str"");
    if (webContextName == null) {
      webContextName=""String_Node_Str"";
    }
 else     if (!webContextName.startsWith(""String_Node_Str"")) {
      LOG.info(""String_Node_Str"" + webContextName + ""String_Node_Str""+ webContextName+ ""String_Node_Str"");
      webContextName=""String_Node_Str"" + webContextName;
    }
    File wad=new File(webapp_dir);
    if (wad.isDirectory()) {
      LOG.info(""String_Node_Str"" + webapp_dir + ""String_Node_Str""+ webContextName);
    }
 else     if (wad.isFile()) {
      File webAppDir=new File(DEFAULT_WEBAPPS_ROOT_FOLDER);
      if (!webAppDir.exists()) {
        webAppDir.mkdirs();
      }
      LOG.info(""String_Node_Str"" + webapp_dir + ""String_Node_Str""+ webContextName);
    }
    LOG.info(""String_Node_Str"" + webContextName + ""String_Node_Str""+ webapp_dir+ ""String_Node_Str"");
    Context webappCtx=server.addWebapp(webContextName,new File(webapp_dir).getAbsolutePath());
    webappCtx.init();
    LOG.info(""String_Node_Str"" + webContextName + ""String_Node_Str""+ webapp_dir+ ""String_Node_Str"");
  }
 catch (  ServletException e1) {
    LOG.severe(""String_Node_Str"" + e1.toString());
    e1.printStackTrace();
  }
catch (  LifecycleException lce) {
    LOG.severe(""String_Node_Str"" + lce.toString());
    lce.printStackTrace();
  }
  try {
    server.start();
    server.getServer().await();
    shutdownServer();
  }
 catch (  LifecycleException e) {
    LOG.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
}",0.96908771048002
166468,"protected String getConfig(String key,String defaultValue){
  String ret=getConfig(key);
  if (key == null) {
    ret=defaultValue;
  }
  return ret;
}","protected String getConfig(String key,String defaultValue){
  String ret=getConfig(key);
  if (ret == null) {
    ret=defaultValue;
  }
  return ret;
}",0.9867549668874172
166469,"/** 
 * Check if user has privileges to do this action on these objects
 * @param hiveOpType
 * @param inputsHObjs
 * @param outputHObjs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
@Override public List<HivePrivilegeObject> filterListCmdObjects(List<HivePrivilegeObject> objs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  List<HivePrivilegeObject> ret=null;
  ret=objs;
  return ret;
}","/** 
 * Check if user has privileges to do this action on these objects
 * @param hiveOpType
 * @param inputsHObjs
 * @param outputHObjs
 * @param context
 * @throws HiveAuthzPluginException
 * @throws HiveAccessControlException
 */
public List<HivePrivilegeObject> filterListCmdObjects(List<HivePrivilegeObject> objs,HiveAuthzContext context) throws HiveAuthzPluginException, HiveAccessControlException {
  List<HivePrivilegeObject> ret=null;
  ret=objs;
  return ret;
}",0.9894957983193278
166470,"public static void createParents(File file){
  if (file != null) {
    String parentName=file.getParent();
    if (parentName != null) {
      File parentDir=new File(parentName);
      if (!parentDir.exists()) {
        parentDir.mkdirs();
      }
    }
  }
}","public static void createParents(File file){
  if (file != null) {
    String parentName=file.getParent();
    if (parentName != null) {
      File parentDir=new File(parentName);
      if (!parentDir.exists()) {
        if (!parentDir.mkdirs()) {
          LogLog.warn(""String_Node_Str"" + parentName + ""String_Node_Str"");
        }
      }
    }
  }
}",0.8071895424836601
166471,"public static void init(MasterServices master) throws IOException {
  try {
    AccessControlLists.init(master);
  }
 catch (  TableExistsException excp) {
  }
}","public static void init(MasterServices master) throws IOException {
  Class<AccessControlLists> accessControlListsClass=AccessControlLists.class;
  String cName=accessControlListsClass.getName();
  Class<?>[] params=new Class[1];
  params[0]=MasterServices.class;
  for (  String mname : new String[]{""String_Node_Str"",""String_Node_Str""}) {
    try {
      try {
        Method m=accessControlListsClass.getDeclaredMethod(mname,params);
        if (m != null) {
          try {
            try {
              m.invoke(null,master);
              logInfo(""String_Node_Str"" + mname + ""String_Node_Str""+ cName+ ""String_Node_Str"");
            }
 catch (            InvocationTargetException e) {
              Throwable cause=e;
              boolean tableExistsExceptionFound=false;
              if (e != null) {
                Throwable ecause=e.getTargetException();
                if (ecause != null) {
                  cause=ecause;
                  if (ecause instanceof TableExistsException) {
                    tableExistsExceptionFound=true;
                  }
                }
              }
              if (!tableExistsExceptionFound) {
                logError(""String_Node_Str"" + mname + ""String_Node_Str""+ cName+ ""String_Node_Str"",cause);
                throw new IOException(cause);
              }
            }
            return;
          }
 catch (          IllegalArgumentException e) {
            logError(""String_Node_Str"" + mname + ""String_Node_Str""+ cName+ ""String_Node_Str"",e);
            throw new IOException(e);
          }
catch (          IllegalAccessException e) {
            logError(""String_Node_Str"" + mname + ""String_Node_Str""+ cName+ ""String_Node_Str"",e);
            throw new IOException(e);
          }
        }
      }
 catch (      NoSuchMethodException nsme) {
        logInfo(""String_Node_Str"" + mname + ""String_Node_Str""+ cName+ ""String_Node_Str"");
      }
    }
 catch (    SecurityException e) {
      logError(""String_Node_Str"" + mname + ""String_Node_Str""+ cName+ ""String_Node_Str"",e);
      throw new IOException(e);
    }
  }
  throw new IOException(""String_Node_Str"" + cName + ""String_Node_Str"");
}",0.1006018916595012
166472,"public void print(){
  for (  String user : userList) {
    LOG.debug(""String_Node_Str"" + user);
    List<String> groups=user2GroupListMap.get(user);
    if (groups != null) {
      for (      String group : groups) {
        LOG.debug(""String_Node_Str"" + group);
      }
    }
  }
}","private void print(){
  for (  String user : user2GroupListMap.keySet()) {
    LOG.debug(""String_Node_Str"" + user);
    List<String> groups=user2GroupListMap.get(user);
    if (groups != null) {
      for (      String group : groups) {
        LOG.debug(""String_Node_Str"" + group);
      }
    }
  }
}",0.9333333333333332
166473,"private void buildUnixUserList() throws Throwable {
  File f=new File(UNIX_USER_PASSWORD_FILE);
  if (f.exists()) {
    BufferedReader reader=null;
    reader=new BufferedReader(new FileReader(f));
    String line=null;
    while ((line=reader.readLine()) != null) {
      if (line.trim().isEmpty())       continue;
      String[] tokens=line.split(""String_Node_Str"");
      int len=tokens.length;
      if (len < 2) {
        continue;
      }
      String userName=tokens[0];
      String userId=tokens[2];
      String groupId=tokens[3];
      int numUserId=-1;
      try {
        numUserId=Integer.parseInt(userId);
      }
 catch (      NumberFormatException nfe) {
        LOG.warn(""String_Node_Str"" + userId + ""String_Node_Str"",nfe);
        numUserId=-1;
      }
      if (numUserId >= minimumUserId) {
        userList.add(userName);
        String groupName=groupId2groupNameMap.get(groupId);
        if (groupName != null) {
          List<String> groupList=user2GroupListMap.get(userName);
          if (groupList == null) {
            groupList=new ArrayList<String>();
            user2GroupListMap.put(userName,groupList);
          }
          if (!groupList.contains(groupName)) {
            groupList.add(groupName);
          }
        }
 else {
          LOG.warn(""String_Node_Str"" + groupId + ""String_Node_Str"");
        }
      }
    }
    reader.close();
    passwordFileModiiedAt=f.lastModified();
  }
}","private void buildUnixUserList() throws Throwable {
  File f=new File(UNIX_USER_PASSWORD_FILE);
  if (f.exists()) {
    BufferedReader reader=null;
    reader=new BufferedReader(new FileReader(f));
    String line=null;
    while ((line=reader.readLine()) != null) {
      if (line.trim().isEmpty())       continue;
      String[] tokens=line.split(""String_Node_Str"");
      int len=tokens.length;
      if (len < 2) {
        continue;
      }
      String userName=tokens[0];
      String userId=tokens[2];
      String groupId=tokens[3];
      int numUserId=-1;
      try {
        numUserId=Integer.parseInt(userId);
      }
 catch (      NumberFormatException nfe) {
        LOG.warn(""String_Node_Str"" + userId + ""String_Node_Str"",nfe);
        numUserId=-1;
      }
      if (numUserId >= minimumUserId) {
        String groupName=groupId2groupNameMap.get(groupId);
        if (groupName != null) {
          List<String> groupList=new ArrayList<String>();
          groupList.add(groupName);
          if (internalUser2GroupListMap.containsKey(userName)) {
            groupList.addAll(internalUser2GroupListMap.get(userName));
          }
          user2GroupListMap.put(userName,groupList);
        }
 else {
          LOG.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ userName+ ""String_Node_Str""+ userId+ ""String_Node_Str"");
        }
      }
 else {
        LOG.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ userId+ ""String_Node_Str""+ minimumUserId+ ""String_Node_Str"");
      }
    }
    reader.close();
    passwordFileModiiedAt=f.lastModified();
  }
}",0.7270916334661355
166474,"private void buildUnixGroupList() throws Throwable {
  File f=new File(UNIX_GROUP_FILE);
  if (f.exists()) {
    BufferedReader reader=null;
    reader=new BufferedReader(new FileReader(f));
    String line=null;
    while ((line=reader.readLine()) != null) {
      if (line.trim().isEmpty())       continue;
      String[] tokens=line.split(""String_Node_Str"");
      int len=tokens.length;
      if (len < 2) {
        continue;
      }
      String groupName=tokens[0];
      String groupId=tokens[2];
      String groupMembers=null;
      if (tokens.length > 3) {
        groupMembers=tokens[3];
      }
      if (groupId2groupNameMap.containsKey(groupId)) {
        groupId2groupNameMap.remove(groupId);
      }
      groupId2groupNameMap.put(groupId,groupName);
      if (groupMembers != null && !groupMembers.trim().isEmpty()) {
        for (        String user : groupMembers.split(""String_Node_Str"")) {
          List<String> groupList=user2GroupListMap.get(user);
          if (groupList == null) {
            groupList=new ArrayList<String>();
            user2GroupListMap.put(user,groupList);
          }
          if (!groupList.contains(groupName)) {
            groupList.add(groupName);
          }
        }
      }
    }
    reader.close();
    groupFileModifiedAt=f.lastModified();
  }
}","private void buildUnixGroupList() throws Throwable {
  File f=new File(UNIX_GROUP_FILE);
  if (f.exists()) {
    BufferedReader reader=null;
    reader=new BufferedReader(new FileReader(f));
    String line=null;
    while ((line=reader.readLine()) != null) {
      if (line.trim().isEmpty())       continue;
      String[] tokens=line.split(""String_Node_Str"");
      int len=tokens.length;
      if (len < 2) {
        continue;
      }
      String groupName=tokens[0];
      String groupId=tokens[2];
      String groupMembers=null;
      if (tokens.length > 3) {
        groupMembers=tokens[3];
      }
      if (groupId2groupNameMap.containsKey(groupId)) {
        groupId2groupNameMap.remove(groupId);
      }
      groupId2groupNameMap.put(groupId,groupName);
      if (groupMembers != null && !groupMembers.trim().isEmpty()) {
        for (        String user : groupMembers.split(""String_Node_Str"")) {
          List<String> groupList=internalUser2GroupListMap.get(user);
          if (groupList == null) {
            groupList=new ArrayList<String>();
            internalUser2GroupListMap.put(user,groupList);
          }
          if (!groupList.contains(groupName)) {
            groupList.add(groupName);
          }
        }
      }
    }
    reader.close();
    groupFileModifiedAt=f.lastModified();
  }
}",0.9923954372623576
166475,"private void buildUserGroupInfo() throws Throwable {
  user2GroupListMap=new HashMap<String,List<String>>();
  groupId2groupNameMap=new HashMap<String,String>();
  userList=new ArrayList<String>();
  buildUnixGroupList();
  buildUnixUserList();
  if (LOG.isDebugEnabled()) {
    print();
  }
}","private void buildUserGroupInfo() throws Throwable {
  user2GroupListMap=new HashMap<String,List<String>>();
  groupId2groupNameMap=new HashMap<String,String>();
  buildUnixGroupList();
  buildUnixUserList();
  if (LOG.isDebugEnabled()) {
    print();
  }
}",0.9345454545454546
166476,"public static <T>T executeUnderKerberos(String userName,String password,PrivilegedAction<T> action) throws IOException {
  final String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
class MySecureClientLoginConfiguration extends javax.security.auth.login.Configuration {
    private String userName;
    private String password;
    MySecureClientLoginConfiguration(    String aUserName,    String password){
      this.userName=aUserName;
      this.password=password;
    }
    @Override public AppConfigurationEntry[] getAppConfigurationEntry(    String appName){
      Map<String,String> kerberosOptions=new HashMap<String,String>();
      kerberosOptions.put(""String_Node_Str"",this.userName);
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(KrbPasswordSaverLoginModule.USERNAME_PARAM,this.userName);
      kerberosOptions.put(KrbPasswordSaverLoginModule.PASSWORD_PARAM,this.password);
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      AppConfigurationEntry KEYTAB_KERBEROS_LOGIN=null;
      AppConfigurationEntry KERBEROS_PWD_SAVER=null;
      try {
        KEYTAB_KERBEROS_LOGIN=new AppConfigurationEntry(KerberosUtil.getKrb5LoginModuleName(),AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,kerberosOptions);
        KERBEROS_PWD_SAVER=new AppConfigurationEntry(KrbPasswordSaverLoginModule.class.getName(),LoginModuleControlFlag.REQUIRED,kerberosOptions);
      }
 catch (      IllegalArgumentException e) {
        String msgDesc=""String_Node_Str"";
        HadoopException hdpException=new HadoopException(msgDesc,e);
        LOG.error(msgDesc,e);
        hdpException.generateResponseDataMap(false,BaseClient.getMessage(e),msgDesc + errMsg,null,null);
        throw hdpException;
      }
      LOG.info(""String_Node_Str"" + kerberosOptions.get(""String_Node_Str""));
      return new AppConfigurationEntry[]{KERBEROS_PWD_SAVER,KEYTAB_KERBEROS_LOGIN};
    }
  }
  ;
  T ret=null;
  Subject subject=null;
  LoginContext loginContext=null;
  try {
    subject=new Subject();
    LOG.info(""String_Node_Str"" + userName + ""String_Node_Str""+ password);
    LOG.info(""String_Node_Str"");
    MySecureClientLoginConfiguration loginConf=new MySecureClientLoginConfiguration(userName,password);
    LOG.info(""String_Node_Str"");
    loginContext=new LoginContext(""String_Node_Str"",subject,null,loginConf);
    LOG.info(""String_Node_Str"");
    loginContext.login();
    Subject loginSubj=loginContext.getSubject();
    if (loginSubj != null) {
      ret=Subject.doAs(loginSubj,action);
    }
  }
 catch (  LoginException le) {
    String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + userName + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,le);
    LOG.error(msgDesc,le);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(le),msgDesc + errMsg,null,null);
    throw hdpException;
  }
catch (  SecurityException se) {
    String msgDesc=""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,se);
    LOG.error(msgDesc,se);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(se),msgDesc + errMsg,null,null);
    throw hdpException;
  }
 finally {
    if (loginContext != null) {
      if (subject != null) {
        try {
          loginContext.logout();
        }
 catch (        LoginException e) {
          throw new IOException(""String_Node_Str"",e);
        }
      }
    }
  }
  return ret;
}","public static <T>T executeUnderKerberos(String userName,String password,PrivilegedAction<T> action) throws IOException {
  final String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
class MySecureClientLoginConfiguration extends javax.security.auth.login.Configuration {
    private String userName;
    private String password;
    MySecureClientLoginConfiguration(    String aUserName,    String password){
      this.userName=aUserName;
      this.password=password;
    }
    @Override public AppConfigurationEntry[] getAppConfigurationEntry(    String appName){
      Map<String,String> kerberosOptions=new HashMap<String,String>();
      kerberosOptions.put(""String_Node_Str"",this.userName);
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(KrbPasswordSaverLoginModule.USERNAME_PARAM,this.userName);
      kerberosOptions.put(KrbPasswordSaverLoginModule.PASSWORD_PARAM,this.password);
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      kerberosOptions.put(""String_Node_Str"",""String_Node_Str"");
      AppConfigurationEntry KEYTAB_KERBEROS_LOGIN=null;
      AppConfigurationEntry KERBEROS_PWD_SAVER=null;
      try {
        KEYTAB_KERBEROS_LOGIN=new AppConfigurationEntry(KerberosUtil.getKrb5LoginModuleName(),AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,kerberosOptions);
        KERBEROS_PWD_SAVER=new AppConfigurationEntry(KrbPasswordSaverLoginModule.class.getName(),LoginModuleControlFlag.REQUIRED,kerberosOptions);
      }
 catch (      IllegalArgumentException e) {
        String msgDesc=""String_Node_Str"";
        HadoopException hdpException=new HadoopException(msgDesc,e);
        LOG.error(msgDesc,e);
        hdpException.generateResponseDataMap(false,BaseClient.getMessage(e),msgDesc + errMsg,null,null);
        throw hdpException;
      }
      LOG.info(""String_Node_Str"" + kerberosOptions.get(""String_Node_Str""));
      return new AppConfigurationEntry[]{KERBEROS_PWD_SAVER,KEYTAB_KERBEROS_LOGIN};
    }
  }
  ;
  T ret=null;
  Subject subject=null;
  LoginContext loginContext=null;
  try {
    subject=new Subject();
    LOG.info(""String_Node_Str"" + userName + ""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    MySecureClientLoginConfiguration loginConf=new MySecureClientLoginConfiguration(userName,password);
    LOG.info(""String_Node_Str"");
    loginContext=new LoginContext(""String_Node_Str"",subject,null,loginConf);
    LOG.info(""String_Node_Str"");
    loginContext.login();
    Subject loginSubj=loginContext.getSubject();
    if (loginSubj != null) {
      ret=Subject.doAs(loginSubj,action);
    }
  }
 catch (  LoginException le) {
    String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + userName + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,le);
    LOG.error(msgDesc,le);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(le),msgDesc + errMsg,null,null);
    throw hdpException;
  }
catch (  SecurityException se) {
    String msgDesc=""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,se);
    LOG.error(msgDesc,se);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(se),msgDesc + errMsg,null,null);
    throw hdpException;
  }
 finally {
    if (loginContext != null) {
      if (subject != null) {
        try {
          loginContext.logout();
        }
 catch (        LoginException e) {
          throw new IOException(""String_Node_Str"",e);
        }
      }
    }
  }
  return ret;
}",0.9986803906043812
166477,"public StormClient(String aStormUIUrl,String aUserName,String aPassword){
  this.stormUIUrl=aStormUIUrl;
  this.userName=aUserName;
  this.password=aPassword;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + aStormUIUrl + ""String_Node_Str""+ aUserName+ ""String_Node_Str""+ aPassword+ ""String_Node_Str"");
  }
}","public StormClient(String aStormUIUrl,String aUserName,String aPassword){
  this.stormUIUrl=aStormUIUrl;
  this.userName=aUserName;
  this.password=aPassword;
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + aStormUIUrl + ""String_Node_Str""+ aUserName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.9601226993865032
166478,"public List<String> getTopologyList(String topologyNameMatching){
  LOG.debug(""String_Node_Str"" + topologyNameMatching);
  List<String> topologyList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (topologyNameMatching == null || topologyNameMatching.trim().isEmpty()) {
    topologyNameMatching=""String_Node_Str"";
  }
  try {
    Client client=null;
    ClientResponse response=null;
    try {
      client=Client.create();
      ;
      client.addFilter(new HTTPBasicAuthFilter(userName,password));
      WebResource webResource=client.resource(knoxUrl);
      response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
      LOG.debug(""String_Node_Str"" + response);
      if (response != null) {
        if (response.getStatus() == 200) {
          String jsonString=response.getEntity(String.class);
          LOG.debug(""String_Node_Str"" + jsonString);
          ObjectMapper objectMapper=new ObjectMapper();
          JsonNode rootNode=objectMapper.readTree(jsonString);
          JsonNode topologyNode=rootNode.findValue(""String_Node_Str"");
          if (topologyNode == null) {
            return topologyList;
          }
          Iterator<JsonNode> elements=topologyNode.getElements();
          while (elements.hasNext()) {
            JsonNode element=elements.next();
            String topologyName=element.get(""String_Node_Str"").getValueAsText();
            LOG.debug(""String_Node_Str"" + topologyName);
            if (topologyName.startsWith(topologyNameMatching)) {
              topologyList.add(topologyName);
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + knoxUrl + ""String_Node_Str""+ response.getStatus());
        }
      }
 else {
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
        LOG.error(msgDesc);
        HadoopException hdpException=new HadoopException(msgDesc);
        hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
        throw hdpException;
      }
    }
  finally {
      if (response != null) {
        response.close();
      }
      if (client != null) {
        client.destroy();
      }
    }
  }
 catch (  Throwable t) {
    String msgDesc=""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    if (!(t instanceof HadoopException)) {
      hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    }
    throw hdpException;
  }
 finally {
  }
  return topologyList;
}","public List<String> getTopologyList(String topologyNameMatching){
  LOG.debug(""String_Node_Str"" + topologyNameMatching);
  List<String> topologyList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (topologyNameMatching == null || topologyNameMatching.trim().isEmpty()) {
    topologyNameMatching=""String_Node_Str"";
  }
  try {
    Client client=null;
    ClientResponse response=null;
    try {
      client=Client.create();
      ;
      client.addFilter(new HTTPBasicAuthFilter(userName,password));
      WebResource webResource=client.resource(knoxUrl);
      response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
      LOG.debug(""String_Node_Str"" + response);
      if (response != null) {
        if (response.getStatus() == 200) {
          String jsonString=response.getEntity(String.class);
          LOG.debug(""String_Node_Str"" + jsonString);
          ObjectMapper objectMapper=new ObjectMapper();
          JsonNode rootNode=objectMapper.readTree(jsonString);
          JsonNode topologyNode=rootNode.findValue(""String_Node_Str"");
          if (topologyNode == null) {
            return topologyList;
          }
          Iterator<JsonNode> elements=topologyNode.getElements();
          while (elements.hasNext()) {
            JsonNode element=elements.next();
            String topologyName=element.get(""String_Node_Str"").getValueAsText();
            LOG.debug(""String_Node_Str"" + topologyName);
            if (topologyName.startsWith(topologyNameMatching)) {
              topologyList.add(topologyName);
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + knoxUrl + ""String_Node_Str""+ response.getStatus());
        }
      }
 else {
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
        LOG.error(msgDesc);
        HadoopException hdpException=new HadoopException(msgDesc);
        hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
        throw hdpException;
      }
    }
  finally {
      if (response != null) {
        response.close();
      }
      if (client != null) {
        client.destroy();
      }
    }
  }
 catch (  HadoopException he) {
    throw he;
  }
catch (  Throwable t) {
    String msgDesc=""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
 finally {
  }
  return topologyList;
}",0.9445288753799392
166479,"public List<String> getServiceList(String topologyName,String serviceNameMatching){
  List<String> serviceList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (serviceNameMatching == null || serviceNameMatching.trim().isEmpty()) {
    serviceNameMatching=""String_Node_Str"";
  }
  try {
    Client client=null;
    ClientResponse response=null;
    try {
      client=Client.create();
      ;
      client.addFilter(new HTTPBasicAuthFilter(userName,password));
      WebResource webResource=client.resource(knoxUrl + ""String_Node_Str"" + topologyName);
      response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
      LOG.debug(""String_Node_Str"" + response);
      if (response != null) {
        if (response.getStatus() == 200) {
          String jsonString=response.getEntity(String.class);
          LOG.debug(""String_Node_Str"" + jsonString);
          ObjectMapper objectMapper=new ObjectMapper();
          JsonNode rootNode=objectMapper.readTree(jsonString);
          JsonNode topologyNode=rootNode.findValue(""String_Node_Str"");
          JsonNode servicesNode=topologyNode.get(""String_Node_Str"");
          Iterator<JsonNode> services=servicesNode.getElements();
          while (services.hasNext()) {
            JsonNode service=services.next();
            String serviceName=service.get(""String_Node_Str"").getValueAsText();
            LOG.debug(""String_Node_Str"" + serviceName);
            if (serviceName.startsWith(serviceNameMatching)) {
              serviceList.add(serviceName);
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + knoxUrl + ""String_Node_Str""+ response.getStatus());
        }
      }
 else {
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
        LOG.error(msgDesc);
        HadoopException hdpException=new HadoopException(msgDesc);
        hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
        throw hdpException;
      }
    }
  finally {
      if (response != null) {
        response.close();
      }
      if (client != null) {
        client.destroy();
      }
    }
  }
 catch (  Throwable t) {
    String msgDesc=""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    if (!(t instanceof HadoopException)) {
      hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    }
    throw hdpException;
  }
 finally {
  }
  return serviceList;
}","public List<String> getServiceList(String topologyName,String serviceNameMatching){
  List<String> serviceList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  if (serviceNameMatching == null || serviceNameMatching.trim().isEmpty()) {
    serviceNameMatching=""String_Node_Str"";
  }
  try {
    Client client=null;
    ClientResponse response=null;
    try {
      client=Client.create();
      ;
      client.addFilter(new HTTPBasicAuthFilter(userName,password));
      WebResource webResource=client.resource(knoxUrl + ""String_Node_Str"" + topologyName);
      response=webResource.accept(EXPECTED_MIME_TYPE).get(ClientResponse.class);
      LOG.debug(""String_Node_Str"" + response);
      if (response != null) {
        if (response.getStatus() == 200) {
          String jsonString=response.getEntity(String.class);
          LOG.debug(""String_Node_Str"" + jsonString);
          ObjectMapper objectMapper=new ObjectMapper();
          JsonNode rootNode=objectMapper.readTree(jsonString);
          JsonNode topologyNode=rootNode.findValue(""String_Node_Str"");
          JsonNode servicesNode=topologyNode.get(""String_Node_Str"");
          Iterator<JsonNode> services=servicesNode.getElements();
          while (services.hasNext()) {
            JsonNode service=services.next();
            String serviceName=service.get(""String_Node_Str"").getValueAsText();
            LOG.debug(""String_Node_Str"" + serviceName);
            if (serviceName.startsWith(serviceNameMatching)) {
              serviceList.add(serviceName);
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + knoxUrl + ""String_Node_Str""+ response.getStatus());
        }
      }
 else {
        String msgDesc=""String_Node_Str"" + ""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
        LOG.error(msgDesc);
        HadoopException hdpException=new HadoopException(msgDesc);
        hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
        throw hdpException;
      }
    }
  finally {
      if (response != null) {
        response.close();
      }
      if (client != null) {
        client.destroy();
      }
    }
  }
 catch (  HadoopException he) {
    throw he;
  }
catch (  Throwable t) {
    String msgDesc=""String_Node_Str"" + knoxUrl + ""String_Node_Str"";
    HadoopException hdpException=new HadoopException(msgDesc,t);
    LOG.error(msgDesc,t);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(t),msgDesc + errMsg,null,null);
    throw hdpException;
  }
 finally {
  }
  return serviceList;
}",0.928214971209213
166480,"public static List<String> getKnoxResources(final KnoxClient knoxClient,String topologyName,String serviceName){
  List<String> resultList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  try {
    if (knoxClient == null) {
      String msgDesc=""String_Node_Str"";
      LOG.error(msgDesc);
      HadoopException hdpException=new HadoopException(msgDesc);
      hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
      throw hdpException;
    }
    final Callable<List<String>> callableObj;
    if (serviceName != null) {
      final String finalServiceNameMatching=serviceName.trim();
      final String finalTopologyName=topologyName;
      callableObj=new Callable<List<String>>(){
        @Override public List<String> call(){
          return knoxClient.getServiceList(finalTopologyName,finalServiceNameMatching);
        }
      }
;
    }
 else {
      final String finalTopologyNameMatching=(topologyName == null) ? ""String_Node_Str"" : topologyName.trim();
      callableObj=new Callable<List<String>>(){
        @Override public List<String> call(){
          return knoxClient.getTopologyList(finalTopologyNameMatching);
        }
      }
;
    }
    resultList=timedTask(callableObj,5,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    String msgDesc=""String_Node_Str"";
    LOG.error(msgDesc,e);
    HadoopException hdpException=new HadoopException(msgDesc);
    if (!(e instanceof HadoopException)) {
      hdpException.generateResponseDataMap(false,BaseClient.getMessage(e),msgDesc + errMsg,null,null);
    }
    throw hdpException;
  }
  return resultList;
}","public static List<String> getKnoxResources(final KnoxClient knoxClient,String topologyName,String serviceName){
  List<String> resultList=new ArrayList<String>();
  String errMsg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  try {
    if (knoxClient == null) {
      String msgDesc=""String_Node_Str"";
      LOG.error(msgDesc);
      HadoopException hdpException=new HadoopException(msgDesc);
      hdpException.generateResponseDataMap(false,msgDesc,msgDesc + errMsg,null,null);
      throw hdpException;
    }
    final Callable<List<String>> callableObj;
    if (serviceName != null) {
      final String finalServiceNameMatching=serviceName.trim();
      final String finalTopologyName=topologyName;
      callableObj=new Callable<List<String>>(){
        @Override public List<String> call(){
          return knoxClient.getServiceList(finalTopologyName,finalServiceNameMatching);
        }
      }
;
    }
 else {
      final String finalTopologyNameMatching=(topologyName == null) ? ""String_Node_Str"" : topologyName.trim();
      callableObj=new Callable<List<String>>(){
        @Override public List<String> call(){
          return knoxClient.getTopologyList(finalTopologyNameMatching);
        }
      }
;
    }
    resultList=timedTask(callableObj,5,TimeUnit.SECONDS);
  }
 catch (  HadoopException he) {
    throw he;
  }
catch (  Exception e) {
    String msgDesc=""String_Node_Str"";
    LOG.error(msgDesc,e);
    HadoopException hdpException=new HadoopException(msgDesc);
    hdpException.generateResponseDataMap(false,BaseClient.getMessage(e),msgDesc + errMsg,null,null);
    throw hdpException;
  }
  return resultList;
}",0.9449152542372882
166481,"public VXResponse testConfig(VXAsset vXAsset){
  if (vXAsset.getActiveStatus() == XACommonEnums.STATUS_DELETED) {
    logger.error(""String_Node_Str"");
    throw restErrorUtil.createRESTException(""String_Node_Str"" + vXAsset.getName(),MessageEnums.DATA_NOT_FOUND,vXAsset.getId(),null,""String_Node_Str"" + vXAsset.getId());
  }
  int assetType=vXAsset.getAssetType();
  VXResponse testResponse=new VXResponse();
  HashMap<String,Object> responseData=new HashMap<String,Object>();
  HashMap<String,String> configMap=(HashMap<String,String>)jsonUtil.jsonToMap(vXAsset.getConfig());
  String password=configMap.get(""String_Node_Str"");
  String hiddenPasswordString=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (password != null && password.equals(hiddenPasswordString)) {
    String assetName=vXAsset.getName();
    if (assetName != null) {
      XXAsset existingVXAsset=xADaoManager.getXXAsset().findByAssetName(assetName);
      if (existingVXAsset != null && existingVXAsset.getConfig() != null) {
        String existingConfig=existingVXAsset.getConfig();
        existingConfig=xAssetService.getConfigWithDecryptedPassword(existingConfig);
        HashMap<String,String> existingConfigMap=(HashMap<String,String>)jsonUtil.jsonToMap(existingConfig);
        String existingPassword=existingConfigMap.get(""String_Node_Str"");
        if (existingPassword != null) {
          configMap.put(""String_Node_Str"",existingPassword);
        }
      }
    }
  }
  try {
    String dataSource=vXAsset.getName();
    if (assetType == AppConstants.ASSET_HDFS) {
      responseData=HadoopFS.testConnection(dataSource,configMap);
    }
 else     if (assetType == AppConstants.ASSET_HIVE) {
      responseData=HiveClient.testConnection(dataSource,configMap);
    }
 else     if (assetType == AppConstants.ASSET_HBASE) {
      responseData=HBaseClient.testConnection(dataSource,configMap);
    }
 else     if (assetType == AppConstants.ASSET_KNOX) {
      responseData=KnoxClient.testConnection(dataSource,configMap);
    }
 else     if (assetType == AppConstants.ASSET_STORM) {
      responseData=StormClient.testConnection(dataSource,configMap);
    }
 else {
      throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
    }
    testResponse=generateResponseForTestConn(responseData,""String_Node_Str"");
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + vXAsset.getName();
    HashMap<String,Object> respData=new HashMap<String,Object>();
    String message=""String_Node_Str"";
    if (e instanceof HadoopException) {
      respData=((HadoopException)e).responseData;
      message=(respData != null && respData.get(""String_Node_Str"") != null) ? respData.get(""String_Node_Str"").toString() : msg;
    }
    testResponse=generateResponseForTestConn(respData,message);
    logger.error(msg,e);
  }
  return testResponse;
}","public VXResponse testConfig(VXAsset vXAsset){
  if (vXAsset.getActiveStatus() == XACommonEnums.STATUS_DELETED) {
    logger.error(""String_Node_Str"");
    throw restErrorUtil.createRESTException(""String_Node_Str"" + vXAsset.getName(),MessageEnums.DATA_NOT_FOUND,vXAsset.getId(),null,""String_Node_Str"" + vXAsset.getId());
  }
  int assetType=vXAsset.getAssetType();
  VXResponse testResponse=new VXResponse();
  HashMap<String,Object> responseData=new HashMap<String,Object>();
  HashMap<String,String> configMap=(HashMap<String,String>)jsonUtil.jsonToMap(vXAsset.getConfig());
  String password=configMap.get(""String_Node_Str"");
  String hiddenPasswordString=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (password != null && password.equals(hiddenPasswordString)) {
    String assetName=vXAsset.getName();
    if (assetName != null) {
      XXAsset existingVXAsset=xADaoManager.getXXAsset().findByAssetName(assetName);
      if (existingVXAsset != null && existingVXAsset.getConfig() != null) {
        String existingConfig=existingVXAsset.getConfig();
        existingConfig=xAssetService.getConfigWithDecryptedPassword(existingConfig);
        HashMap<String,String> existingConfigMap=(HashMap<String,String>)jsonUtil.jsonToMap(existingConfig);
        String existingPassword=existingConfigMap.get(""String_Node_Str"");
        if (existingPassword != null) {
          configMap.put(""String_Node_Str"",existingPassword);
        }
      }
    }
  }
  try {
    String dataSource=vXAsset.getName();
    if (assetType == AppConstants.ASSET_HDFS) {
      responseData=HadoopFS.testConnection(dataSource,configMap);
    }
 else     if (assetType == AppConstants.ASSET_HIVE) {
      responseData=HiveClient.testConnection(dataSource,configMap);
    }
 else     if (assetType == AppConstants.ASSET_HBASE) {
      responseData=HBaseClient.testConnection(dataSource,configMap);
    }
 else     if (assetType == AppConstants.ASSET_KNOX) {
      responseData=KnoxClient.testConnection(dataSource,configMap);
    }
 else     if (assetType == AppConstants.ASSET_STORM) {
      responseData=StormClient.testConnection(dataSource,configMap);
    }
 else {
      throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
    }
    testResponse=generateResponseForTestConn(responseData,""String_Node_Str"");
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + vXAsset.getName();
    HashMap<String,Object> respData=new HashMap<String,Object>();
    String message=""String_Node_Str"";
    if (e instanceof HadoopException) {
      respData=((HadoopException)e).responseData;
      message=(respData != null && respData.get(""String_Node_Str"") != null) ? respData.get(""String_Node_Str"").toString() : msg;
    }
    if (respData == null) {
      respData=new HashMap<String,Object>();
    }
    testResponse=generateResponseForTestConn(respData,message);
    logger.error(msg,e);
  }
  return testResponse;
}",0.9864610111396744
166482,"@Override public VXResource updateXResource(VXResource vXResource){
  UserSessionBase currentUserSession=ContextUtil.getCurrentUserSession();
  if (currentUserSession == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.OPER_NO_PERMISSION);
  }
  Long assetId=vXResource.getAssetId();
  XXAsset xAsset=xADaoManager.getXXAsset().getById(assetId);
  if (xAsset == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  if (xAsset.getActiveStatus() == XACommonEnums.STATUS_DISABLED) {
    if (!currentUserSession.isUserAdmin()) {
      logger.error(""String_Node_Str"");
      throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.OPER_NO_PERMISSION);
    }
  }
  if (xAsset.getAssetType() == AppConstants.ASSET_HIVE) {
    createResourcePathForHive(vXResource);
  }
 else   if (xAsset.getAssetType() == AppConstants.ASSET_HBASE) {
    createResourcePathForHbase(vXResource);
  }
 else   if (xAsset.getAssetType() == AppConstants.ASSET_KNOX) {
    createResourcePathForKnox(vXResource);
  }
 else   if (xAsset.getAssetType() == AppConstants.ASSET_STORM) {
    createResourcePathForStorm(vXResource);
  }
  SearchCriteria searchCriteria=new SearchCriteria();
  searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getAssetId());
  searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getName());
  if (xAsset.getAssetType() == AppConstants.ASSET_HIVE) {
    if (stringUtil.isEmpty(vXResource.getUdfs())) {
      searchCriteria.addParam(""String_Node_Str"",vXResource.getTableType());
      searchCriteria.addParam(""String_Node_Str"",vXResource.getColumnType());
    }
 else {
      searchCriteria.addParam(""String_Node_Str"",vXResource.getUdfs());
    }
  }
 else   if (xAsset.getAssetType() == AppConstants.ASSET_HDFS) {
    searchCriteria.addParam(""String_Node_Str"",vXResource.getIsRecursive());
  }
  VXResourceList vXResourceList=xResourceService.searchXResourcesWithoutLogin(searchCriteria);
  if (vXResourceList != null && vXResourceList.getListSize() > 0) {
    for (    VXResource vXResourceTemp : vXResourceList.getList()) {
      if (vXResourceTemp.getId() != vXResource.getId()) {
        logger.error(""String_Node_Str"" + vXResource.getName());
        throw restErrorUtil.createRESTException(""String_Node_Str"" + vXResource.getName(),MessageEnums.ERROR_DUPLICATE_OBJECT);
      }
    }
  }
  VXResponse vXResponse=xaBizUtil.hasPermission(vXResource,AppConstants.XA_PERM_TYPE_ADMIN);
  if (vXResponse.getStatusCode() == VXResponse.STATUS_ERROR) {
    throw restErrorUtil.createRESTException(vXResponse);
  }
  if (vXResource.getCheckParentPermission() != XAConstants.BOOL_FALSE) {
    xResourceService.checkAccess(vXResource);
  }
  if (vXResource.getPolicyName() != null && !vXResource.getPolicyName().trim().isEmpty()) {
    searchCriteria=new SearchCriteria();
    searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getPolicyName());
    vXResourceList=xResourceService.searchXResourcesWithoutLogin(searchCriteria);
    if (vXResourceList != null && vXResourceList.getListSize() > 0) {
      for (      VXResource newVXResource : vXResourceList.getList()) {
        if (vXResource.getId() != newVXResource.getId() && vXResource.getPolicyName().trim().equalsIgnoreCase(newVXResource.getPolicyName().trim())) {
          logger.error(""String_Node_Str"" + vXResource.getPolicyName());
          logger.info(""String_Node_Str"" + vXResource.getPolicyName());
          throw restErrorUtil.createRESTException(""String_Node_Str"" + vXResource.getPolicyName(),MessageEnums.ERROR_DUPLICATE_OBJECT);
        }
      }
    }
  }
  int tempPoliciesCount=0;
  int totalPoliciesCount=1;
  String tempPolicyName=null;
  vXResourceList=null;
  if (vXResource.getPolicyName() == null || vXResource.getPolicyName().trim().isEmpty()) {
    searchCriteria=new SearchCriteria();
    searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getAssetId());
    vXResourceList=xResourceService.searchXResourcesWithoutLogin(searchCriteria);
    if (vXResourceList != null && vXResourceList.getListSize() > 0) {
      totalPoliciesCount=vXResourceList.getListSize();
      tempPoliciesCount++;
      for (      VXResource newVXResource : vXResourceList.getList()) {
        if (vXResource.getId() == newVXResource.getId()) {
          break;
        }
        tempPoliciesCount++;
      }
      tempPolicyName=xAsset.getName() + ""String_Node_Str"" + tempPoliciesCount+ ""String_Node_Str""+ DateUtil.dateToString(DateUtil.getUTCDate(),""String_Node_Str"");
      vXResource.setPolicyName(tempPolicyName);
      vXResourceList=null;
    }
 else {
      tempPoliciesCount++;
      tempPolicyName=xAsset.getName() + ""String_Node_Str"" + tempPoliciesCount+ ""String_Node_Str""+ DateUtil.dateToString(DateUtil.getUTCDate(),""String_Node_Str"");
      vXResource.setPolicyName(tempPolicyName);
    }
    while (true) {
      searchCriteria=new SearchCriteria();
      searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getPolicyName());
      vXResourceList=xResourceService.searchXResourcesWithoutLogin(searchCriteria);
      if (vXResourceList == null || vXResourceList.getListSize() == 0) {
        break;
      }
 else {
        tempPolicyName=xAsset.getName() + ""String_Node_Str"" + totalPoliciesCount+ ""String_Node_Str""+ DateUtil.dateToString(DateUtil.getUTCDate(),""String_Node_Str"");
        vXResource.setPolicyName(tempPolicyName);
      }
    }
  }
  XXResource xResouce=xADaoManager.getXXResource().getById(vXResource.getId());
  List<XXTrxLog> trxLogList=xResourceService.getTransactionLog(vXResource,xResouce,""String_Node_Str"");
  VXResource resource=super.updateXResource(vXResource);
  List<VXPermMap> newPermMapList=vXResource.getPermMapList();
  searchCriteria=new SearchCriteria();
  searchCriteria.addParam(""String_Node_Str"",vXResource.getId());
  VXPermMapList prevPermMaps=xPermMapService.searchXPermMaps(searchCriteria);
  List<VXPermMap> prevPermMapList=new ArrayList<VXPermMap>();
  if (prevPermMaps != null) {
    prevPermMapList=prevPermMaps.getVXPermMaps();
  }
  List<VXPermMap> permMaps=new ArrayList<VXPermMap>();
  List<VXAuditMap> auditMaps=new ArrayList<VXAuditMap>();
  List<VXPermMap> permMapsToDelete=new ArrayList<VXPermMap>();
  List<VXAuditMap> auditMapsToDelete=new ArrayList<VXAuditMap>();
  if (newPermMapList != null) {
    for (    VXPermMap newObj : newPermMapList) {
      if (newObj.getUserId() == null && newObj.getGroupId() == null && !stringUtil.isEmpty(newObj.getUserName())) {
        XXUser xxUser=xADaoManager.getXXUser().findByUserName(newObj.getUserName());
        if (xxUser != null) {
          newObj.setUserId(xxUser.getId());
        }
 else {
          VXUser vxUser=new VXUser();
          vxUser.setName(newObj.getUserName());
          vxUser.setDescription(newObj.getUserName());
          vxUser=xUserService.createResource(vxUser);
          newObj.setUserId(vxUser.getId());
        }
      }
      newObj.setResourceId(resource.getId());
      if (newObj.getId() != null) {
        for (        VXPermMap oldObj : prevPermMapList) {
          if (oldObj.getId().equals(newObj.getId())) {
            if (oldObj.getPermType() != newObj.getPermType()) {
              logger.error(""String_Node_Str"",new IllegalStateException());
              break;
            }
 else {
              xPermMapService.updateResource(newObj);
              trxLogList.addAll(xPermMapService.getTransactionLog(newObj,oldObj,""String_Node_Str""));
            }
          }
        }
      }
 else {
        newObj=xPermMapService.createResource(newObj);
        trxLogList.addAll(xPermMapService.getTransactionLog(newObj,""String_Node_Str""));
      }
      permMaps.add(newObj);
    }
  }
  if (prevPermMapList != null) {
    for (    VXPermMap oldObj : prevPermMapList) {
      boolean found=false;
      if (newPermMapList != null) {
        for (        VXPermMap newObj : newPermMapList) {
          if (newObj.getId() != null && newObj.getId().equals(oldObj.getId())) {
            found=true;
            break;
          }
        }
      }
      if (!found) {
        trxLogList.addAll(xPermMapService.getTransactionLog(oldObj,""String_Node_Str""));
        permMapsToDelete.add(oldObj);
      }
    }
  }
  List<VXAuditMap> newAuditMapList=vXResource.getAuditList();
  VXAuditMapList vXAuditMaps=xAuditMapService.searchXAuditMaps(searchCriteria);
  List<VXAuditMap> prevAuditMapList=new ArrayList<VXAuditMap>();
  if (vXAuditMaps != null && vXAuditMaps.getResultSize() != 0) {
    prevAuditMapList=vXAuditMaps.getList();
  }
  if (newAuditMapList != null) {
    for (    VXAuditMap newObj : newAuditMapList) {
      if (newObj.getId() != null) {
        for (        VXAuditMap oldObj : prevAuditMapList) {
          if (oldObj.getId().equals(newObj.getId()) && oldObj.getAuditType() != newObj.getAuditType()) {
            logger.error(""String_Node_Str"",new IllegalStateException());
            break;
          }
        }
      }
 else {
        newObj=xAuditMapService.createResource(newObj);
        trxLogList.addAll(xAuditMapService.getTransactionLog(newObj,""String_Node_Str""));
      }
      auditMaps.add(newObj);
    }
  }
  if (prevAuditMapList != null) {
    for (    VXAuditMap oldObj : prevAuditMapList) {
      boolean found=false;
      if (newAuditMapList != null) {
        for (        VXAuditMap newObj : newAuditMapList) {
          if (newObj.getId() != null && newObj.getId().equals(oldObj.getId())) {
            found=true;
            break;
          }
        }
      }
      if (!found) {
        trxLogList.addAll(xAuditMapService.getTransactionLog(oldObj,""String_Node_Str""));
        auditMapsToDelete.add(oldObj);
      }
    }
  }
  xaBizUtil.createTrxLog(trxLogList);
  for (  VXPermMap permMap : permMapsToDelete) {
    xPermMapService.deleteResource(permMap.getId());
  }
  for (  VXAuditMap auditMap : auditMapsToDelete) {
    xAuditMapService.deleteResource(auditMap.getId());
  }
  resource.setPermMapList(permMaps);
  resource.setAuditList(auditMaps);
  return resource;
}","@Override public VXResource updateXResource(VXResource vXResource){
  UserSessionBase currentUserSession=ContextUtil.getCurrentUserSession();
  if (currentUserSession == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.OPER_NO_PERMISSION);
  }
  Long assetId=vXResource.getAssetId();
  XXAsset xAsset=xADaoManager.getXXAsset().getById(assetId);
  if (xAsset == null) {
    throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
  }
  if (xAsset.getActiveStatus() == XACommonEnums.STATUS_DISABLED) {
    if (!currentUserSession.isUserAdmin()) {
      logger.error(""String_Node_Str"");
      throw restErrorUtil.createRESTException(""String_Node_Str"" + ""String_Node_Str"",MessageEnums.OPER_NO_PERMISSION);
    }
  }
  if (xAsset.getAssetType() == AppConstants.ASSET_HIVE) {
    createResourcePathForHive(vXResource);
  }
 else   if (xAsset.getAssetType() == AppConstants.ASSET_HBASE) {
    createResourcePathForHbase(vXResource);
  }
 else   if (xAsset.getAssetType() == AppConstants.ASSET_KNOX) {
    createResourcePathForKnox(vXResource);
  }
 else   if (xAsset.getAssetType() == AppConstants.ASSET_STORM) {
    createResourcePathForStorm(vXResource);
  }
  SearchCriteria searchCriteria=new SearchCriteria();
  searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getAssetId());
  searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getName());
  if (xAsset.getAssetType() == AppConstants.ASSET_HIVE) {
    if (stringUtil.isEmpty(vXResource.getUdfs())) {
      searchCriteria.addParam(""String_Node_Str"",vXResource.getTableType());
      searchCriteria.addParam(""String_Node_Str"",vXResource.getColumnType());
    }
 else {
      searchCriteria.addParam(""String_Node_Str"",vXResource.getUdfs());
    }
  }
 else   if (xAsset.getAssetType() == AppConstants.ASSET_HDFS) {
    searchCriteria.addParam(""String_Node_Str"",vXResource.getIsRecursive());
  }
  VXResourceList vXResourceList=xResourceService.searchXResourcesWithoutLogin(searchCriteria);
  if (vXResourceList != null && vXResourceList.getListSize() > 0) {
    if (vXResource != null && vXResource.getId() != null) {
      for (      VXResource vXResourceTemp : vXResourceList.getList()) {
        if (vXResourceTemp != null && !(vXResource.getId().equals(vXResourceTemp.getId()))) {
          logger.error(""String_Node_Str"" + vXResource.getName());
          throw restErrorUtil.createRESTException(""String_Node_Str"" + vXResource.getName(),MessageEnums.ERROR_DUPLICATE_OBJECT);
        }
      }
    }
  }
  VXResponse vXResponse=xaBizUtil.hasPermission(vXResource,AppConstants.XA_PERM_TYPE_ADMIN);
  if (vXResponse.getStatusCode() == VXResponse.STATUS_ERROR) {
    throw restErrorUtil.createRESTException(vXResponse);
  }
  if (vXResource.getCheckParentPermission() != XAConstants.BOOL_FALSE) {
    xResourceService.checkAccess(vXResource);
  }
  if (vXResource.getPolicyName() != null && !vXResource.getPolicyName().trim().isEmpty()) {
    searchCriteria=new SearchCriteria();
    searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getPolicyName());
    vXResourceList=xResourceService.searchXResourcesWithoutLogin(searchCriteria);
    if (vXResourceList != null && vXResourceList.getListSize() > 0) {
      if (vXResource != null && vXResource.getId() != null) {
        for (        VXResource newVXResource : vXResourceList.getList()) {
          if (newVXResource != null && newVXResource.getId() != null) {
            if (!vXResource.getId().equals(newVXResource.getId()) && vXResource.getPolicyName().trim().equalsIgnoreCase((newVXResource.getPolicyName() != null ? newVXResource.getPolicyName().trim() : newVXResource.getPolicyName()))) {
              logger.error(""String_Node_Str"" + vXResource.getPolicyName());
              throw restErrorUtil.createRESTException(""String_Node_Str"" + vXResource.getPolicyName(),MessageEnums.ERROR_DUPLICATE_OBJECT);
            }
          }
        }
      }
    }
  }
  int tempPoliciesCount=0;
  int totalPoliciesCount=1;
  String tempPolicyName=null;
  vXResourceList=null;
  if (vXResource != null && (vXResource.getPolicyName() == null || vXResource.getPolicyName().trim().isEmpty())) {
    searchCriteria=new SearchCriteria();
    searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getAssetId());
    vXResourceList=xResourceService.searchXResourcesWithoutLogin(searchCriteria);
    if (vXResourceList != null && vXResourceList.getListSize() > 0) {
      totalPoliciesCount=vXResourceList.getListSize();
      tempPoliciesCount++;
      for (      VXResource newVXResource : vXResourceList.getList()) {
        if (newVXResource != null && newVXResource.getId() != null) {
          if (vXResource.getId().equals(newVXResource.getId())) {
            break;
          }
        }
        tempPoliciesCount++;
      }
      tempPolicyName=xAsset.getName() + ""String_Node_Str"" + tempPoliciesCount+ ""String_Node_Str""+ DateUtil.dateToString(DateUtil.getUTCDate(),""String_Node_Str"");
      vXResource.setPolicyName(tempPolicyName);
      vXResourceList=null;
    }
 else {
      tempPoliciesCount++;
      tempPolicyName=xAsset.getName() + ""String_Node_Str"" + tempPoliciesCount+ ""String_Node_Str""+ DateUtil.dateToString(DateUtil.getUTCDate(),""String_Node_Str"");
      vXResource.setPolicyName(tempPolicyName);
    }
    while (true) {
      searchCriteria=new SearchCriteria();
      searchCriteria.getParamList().put(""String_Node_Str"",vXResource.getPolicyName());
      vXResourceList=xResourceService.searchXResourcesWithoutLogin(searchCriteria);
      if (vXResourceList == null || vXResourceList.getListSize() == 0) {
        break;
      }
 else {
        tempPolicyName=xAsset.getName() + ""String_Node_Str"" + totalPoliciesCount+ ""String_Node_Str""+ DateUtil.dateToString(DateUtil.getUTCDate(),""String_Node_Str"");
        vXResource.setPolicyName(tempPolicyName);
      }
    }
  }
  XXResource xResouce=xADaoManager.getXXResource().getById(vXResource.getId());
  List<XXTrxLog> trxLogList=xResourceService.getTransactionLog(vXResource,xResouce,""String_Node_Str"");
  VXResource resource=super.updateXResource(vXResource);
  List<VXPermMap> newPermMapList=vXResource.getPermMapList();
  searchCriteria=new SearchCriteria();
  searchCriteria.addParam(""String_Node_Str"",vXResource.getId());
  VXPermMapList prevPermMaps=xPermMapService.searchXPermMaps(searchCriteria);
  List<VXPermMap> prevPermMapList=new ArrayList<VXPermMap>();
  if (prevPermMaps != null) {
    prevPermMapList=prevPermMaps.getVXPermMaps();
  }
  List<VXPermMap> permMaps=new ArrayList<VXPermMap>();
  List<VXAuditMap> auditMaps=new ArrayList<VXAuditMap>();
  List<VXPermMap> permMapsToDelete=new ArrayList<VXPermMap>();
  List<VXAuditMap> auditMapsToDelete=new ArrayList<VXAuditMap>();
  if (newPermMapList != null) {
    for (    VXPermMap newObj : newPermMapList) {
      if (newObj.getUserId() == null && newObj.getGroupId() == null && !stringUtil.isEmpty(newObj.getUserName())) {
        XXUser xxUser=xADaoManager.getXXUser().findByUserName(newObj.getUserName());
        if (xxUser != null) {
          newObj.setUserId(xxUser.getId());
        }
 else {
          VXUser vxUser=new VXUser();
          vxUser.setName(newObj.getUserName());
          vxUser.setDescription(newObj.getUserName());
          vxUser=xUserService.createResource(vxUser);
          newObj.setUserId(vxUser.getId());
        }
      }
      newObj.setResourceId(resource.getId());
      if (newObj.getId() != null) {
        for (        VXPermMap oldObj : prevPermMapList) {
          if (oldObj.getId().equals(newObj.getId())) {
            if (oldObj.getPermType() != newObj.getPermType()) {
              logger.error(""String_Node_Str"",new IllegalStateException());
              break;
            }
 else {
              xPermMapService.updateResource(newObj);
              trxLogList.addAll(xPermMapService.getTransactionLog(newObj,oldObj,""String_Node_Str""));
            }
          }
        }
      }
 else {
        newObj=xPermMapService.createResource(newObj);
        trxLogList.addAll(xPermMapService.getTransactionLog(newObj,""String_Node_Str""));
      }
      permMaps.add(newObj);
    }
  }
  if (prevPermMapList != null) {
    for (    VXPermMap oldObj : prevPermMapList) {
      boolean found=false;
      if (newPermMapList != null) {
        for (        VXPermMap newObj : newPermMapList) {
          if (newObj.getId() != null && newObj.getId().equals(oldObj.getId())) {
            found=true;
            break;
          }
        }
      }
      if (!found) {
        trxLogList.addAll(xPermMapService.getTransactionLog(oldObj,""String_Node_Str""));
        permMapsToDelete.add(oldObj);
      }
    }
  }
  List<VXAuditMap> newAuditMapList=vXResource.getAuditList();
  VXAuditMapList vXAuditMaps=xAuditMapService.searchXAuditMaps(searchCriteria);
  List<VXAuditMap> prevAuditMapList=new ArrayList<VXAuditMap>();
  if (vXAuditMaps != null && vXAuditMaps.getResultSize() != 0) {
    prevAuditMapList=vXAuditMaps.getList();
  }
  if (newAuditMapList != null) {
    for (    VXAuditMap newObj : newAuditMapList) {
      if (newObj.getId() != null) {
        for (        VXAuditMap oldObj : prevAuditMapList) {
          if (oldObj.getId().equals(newObj.getId()) && oldObj.getAuditType() != newObj.getAuditType()) {
            logger.error(""String_Node_Str"",new IllegalStateException());
            break;
          }
        }
      }
 else {
        newObj=xAuditMapService.createResource(newObj);
        trxLogList.addAll(xAuditMapService.getTransactionLog(newObj,""String_Node_Str""));
      }
      auditMaps.add(newObj);
    }
  }
  if (prevAuditMapList != null) {
    for (    VXAuditMap oldObj : prevAuditMapList) {
      boolean found=false;
      if (newAuditMapList != null) {
        for (        VXAuditMap newObj : newAuditMapList) {
          if (newObj.getId() != null && newObj.getId().equals(oldObj.getId())) {
            found=true;
            break;
          }
        }
      }
      if (!found) {
        trxLogList.addAll(xAuditMapService.getTransactionLog(oldObj,""String_Node_Str""));
        auditMapsToDelete.add(oldObj);
      }
    }
  }
  xaBizUtil.createTrxLog(trxLogList);
  for (  VXPermMap permMap : permMapsToDelete) {
    xPermMapService.deleteResource(permMap.getId());
  }
  for (  VXAuditMap auditMap : auditMapsToDelete) {
    xAuditMapService.deleteResource(auditMap.getId());
  }
  resource.setPermMapList(permMaps);
  resource.setAuditList(auditMaps);
  return resource;
}",0.9657838778271796
166483,"public XAHdfsAuditEventDao getXAHdfsAuditEvent(){
  return new XAHdfsAuditEventDao(this);
}","public XAHdfsAuditEventDao getXAHdfsAuditEvent(){
  if (mHdfsDao == null) {
    mHdfsDao=new XAHdfsAuditEventDao(this);
  }
  return mHdfsDao;
}",0.7319148936170212
166484,"public XAHiveAuditEventDao getXAHiveAuditEvent(){
  return new XAHiveAuditEventDao(this);
}","public XAHiveAuditEventDao getXAHiveAuditEvent(){
  if (mHiveDao == null) {
    mHiveDao=new XAHiveAuditEventDao(this);
  }
  return mHiveDao;
}",0.7404255319148936
166485,"public XAStormAuditEventDao getXAStormAuditEvent(){
  return new XAStormAuditEventDao(this);
}","public XAStormAuditEventDao getXAStormAuditEvent(){
  if (mStormDao == null) {
    mStormDao=new XAStormAuditEventDao(this);
  }
  return mStormDao;
}",0.7377049180327869
166486,"public XAHBaseAuditEventDao getXAHBaseAuditEvent(){
  return new XAHBaseAuditEventDao(this);
}","public XAHBaseAuditEventDao getXAHBaseAuditEvent(){
  if (mHBaseDao == null) {
    mHBaseDao=new XAHBaseAuditEventDao(this);
  }
  return mHBaseDao;
}",0.7377049180327869
166487,"public XAKnoxAuditEventDao getXAKnoxAuditEvent(){
  return new XAKnoxAuditEventDao(this);
}","public XAKnoxAuditEventDao getXAKnoxAuditEvent(){
  if (mKnoxDao == null) {
    mKnoxDao=new XAKnoxAuditEventDao(this);
  }
  return mKnoxDao;
}",0.7319148936170212
166488,"public KnoxAuditEvent(){
}","public KnoxAuditEvent(){
  this.repositoryType=EnumRepositoryType.KNOX;
}",0.5252525252525253
166489,"public StormAuditEvent(){
}","public StormAuditEvent(){
  this.repositoryType=EnumRepositoryType.STORM;
}",0.5294117647058824
166490,"@Override public void log(HiveAuditEvent event){
  LOG.debug(""String_Node_Str"");
  queueEvent(event);
}","@Override public void log(AuditEventBase event){
  LOG.debug(""String_Node_Str"");
  queueEvent(event);
}",0.9611650485436892
166491,"@Override public void run(){
  LOG.info(""String_Node_Str"");
  try {
    while (!mStopThread) {
      AuditEventBase event=dequeueEvent();
      if (event != null) {
        logEvent(event);
      }
 else {
        flush();
      }
    }
    flush();
  }
 catch (  Exception excp) {
    LOG.error(""String_Node_Str"",excp);
  }
  LOG.info(""String_Node_Str"");
}","@Override public void run(){
  LOG.info(""String_Node_Str"");
  try {
    while (!mStopThread) {
      AuditEventBase event=dequeueEvent();
      if (event != null) {
        super.log(event);
      }
 else {
        flush();
      }
    }
    flush();
  }
 catch (  Exception excp) {
    LOG.error(""String_Node_Str"",excp);
  }
  LOG.info(""String_Node_Str"");
}",0.9846153846153848
166492,public void log(StormAuditEvent event);,public void log(AuditEventBase event);,0.8831168831168831
166493,"@Override public void log(StormAuditEvent event){
  LOG.debug(""String_Node_Str"");
  if (preCreate(event)) {
    stormDao.create(new XXStormAuditEvent(event));
    postCreate(event);
  }
}","@Override public void log(AuditEventBase event){
  LOG.debug(""String_Node_Str"");
  if (preCreate(event)) {
    event.persist(daoManager);
    postCreate(event);
  }
}",0.8101983002832861
166494,"protected void init(){
  VEnum vEnum;
  VEnumElement vElement;
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ActiveStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ActivationStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_BooleanValue);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_DataType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(8);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_DeviceType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_DiffLevel);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_FileType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_FreqType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_MimeType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_NumberFormat);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ObjectStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_PasswordResetStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_PriorityType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ProgressStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_RelationType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_UserSource);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_AssetType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_AccessResult);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_PolicyType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_XAAuditType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ResourceType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(8);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_XAGroupType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_XAPermForType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_XAPermType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(8);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(9);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(10);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(11);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(12);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(13);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(14);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(15);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(16);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(17);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(18);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(19);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(20);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(21);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(22);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(23);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(24);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(25);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(26);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(27);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(28);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(29);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(30);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(31);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ClassTypes);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(8);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(9);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(10);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(11);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1000);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1001);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1002);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1003);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1004);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1005);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1006);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1007);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1008);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1009);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1010);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1011);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1012);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_XXAuthSession_AuthStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_XXAuthSession_AuthType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_XResponse_ResponseStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
}","protected void init(){
  VEnum vEnum;
  VEnumElement vElement;
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ActiveStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ActivationStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_BooleanValue);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_DataType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(8);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_DeviceType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_DiffLevel);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_FileType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_FreqType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_MimeType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_NumberFormat);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ObjectStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_PasswordResetStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_PriorityType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ProgressStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_RelationType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_UserSource);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_AssetType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_AccessResult);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_PolicyType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_XAAuditType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ResourceType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(8);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(9);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(10);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_XAGroupType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_XAPermForType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_XAPermType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(8);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(9);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(10);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(11);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(12);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(13);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(14);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(15);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(16);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(17);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(18);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(19);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(20);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(21);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(22);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(23);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(24);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(25);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(26);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(27);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(28);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(29);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(30);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(31);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_CommonEnums_ClassTypes);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(7);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(8);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(9);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(10);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(11);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1000);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1001);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1002);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1003);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1004);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1005);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1006);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1007);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1008);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1009);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1010);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1011);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1012);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_XXAuthSession_AuthStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(6);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_XXAuthSession_AuthType);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vEnum=new VEnum();
  vEnum.setEnumName(ENUM_XResponse_ResponseStatus);
  vEnum.setElementList(new ArrayList<VEnumElement>());
  enumList.add(vEnum);
  enumMap.put(vEnum.getEnumName(),vEnum);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(0);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(1);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(2);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(3);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(4);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
  vElement=new VEnumElement();
  vElement.setElementName(""String_Node_Str"");
  vElement.setElementValue(5);
  vElement.setElementLabel(""String_Node_Str"");
  vElement.setRbKey(""String_Node_Str"");
  vElement.setEnumName(vEnum.getEnumName());
  vEnum.getElementList().add(vElement);
}",0.994957711286278
166495,"public void initHBase(){
  try {
    if (UserGroupInformation.isSecurityEnabled()) {
      if (getConfigHolder().getKeyTabFile() == null) {
        subj=SecureClientLogin.loginUserWithPassword(getConfigHolder().getUserName(),getConfigHolder().getPassword());
      }
 else {
        subj=SecureClientLogin.loginUserFromKeytab(getConfigHolder().getUserName(),getConfigHolder().getKeyTabFile());
      }
    }
 else {
      subj=SecureClientLogin.login(getConfigHolder().getUserName());
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str"",e);
  }
}","public void initHBase(){
  try {
    if (UserGroupInformation.isSecurityEnabled()) {
      LOG.info(""String_Node_Str"");
      if (getConfigHolder().getKeyTabFile() == null) {
        LOG.info(""String_Node_Str"");
        subj=SecureClientLogin.loginUserWithPassword(getConfigHolder().getUserName(),getConfigHolder().getPassword());
      }
 else {
        LOG.info(""String_Node_Str"");
        subj=SecureClientLogin.loginUserFromKeytab(getConfigHolder().getUserName(),getConfigHolder().getKeyTabFile());
      }
    }
 else {
      LOG.info(""String_Node_Str"");
      subj=SecureClientLogin.login(getConfigHolder().getUserName());
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"" + getConfigHolder().getDatasourceName() + ""String_Node_Str"",e);
  }
}",0.8964028776978418
166496,"public VXResponse testConfig(VXAsset vXAsset){
  int assetType=vXAsset.getAssetType();
  VXResponse testResponse=new VXResponse();
  boolean connectivityStatus=false;
  HashMap<String,String> configMap=(HashMap<String,String>)jsonUtil.jsonToMap(vXAsset.getConfig());
  String password=configMap.get(""String_Node_Str"");
  String hiddenPasswordString=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (password != null && password.equals(hiddenPasswordString)) {
    String assetName=vXAsset.getName();
    if (assetName != null) {
      XXAsset existingVXAsset=xADaoManager.getXXAsset().findByAssetName(assetName);
      if (existingVXAsset != null && existingVXAsset.getConfig() != null) {
        String existingConfig=existingVXAsset.getConfig();
        HashMap<String,String> existingConfigMap=(HashMap<String,String>)jsonUtil.jsonToMap(existingConfig);
        String existingPassword=existingConfigMap.get(""String_Node_Str"");
        if (existingPassword != null) {
          configMap.put(""String_Node_Str"",existingPassword);
        }
      }
    }
  }
  try {
    if (assetType == AppConstants.ASSET_HDFS) {
      HadoopFS connectionObj=new HadoopFS(vXAsset.getName(),configMap);
      if (connectionObj != null) {
        List<String> testResult=connectionObj.listFiles(""String_Node_Str"",null);
        if (testResult != null && testResult.size() != 0) {
          connectivityStatus=true;
        }
      }
    }
 else     if (assetType == AppConstants.ASSET_HIVE) {
      HiveClient connectionObj=new HiveClient(vXAsset.getName(),configMap);
      if (connectionObj != null) {
        List<String> testResult=connectionObj.getDatabaseList(""String_Node_Str"");
        if (testResult != null && testResult.size() != 0) {
          connectivityStatus=true;
        }
      }
      connectionObj.close();
    }
 else     if (assetType == AppConstants.ASSET_HBASE) {
      HBaseClient connectionObj=new HBaseClient(vXAsset.getName(),configMap);
      if (connectionObj != null) {
        connectivityStatus=true;
        List<String> testResult=connectionObj.getTableList(""String_Node_Str"");
        if (testResult != null && testResult.size() != 0) {
          connectivityStatus=true;
        }
      }
    }
 else     if (assetType == AppConstants.ASSET_KNOX) {
      KnoxClient knoxClient=assetConnectionMgr.getKnoxClient(vXAsset.getName(),configMap);
      VXStringList vxStringList=getKnoxResources(knoxClient,""String_Node_Str"",null);
      if (vxStringList != null && (vxStringList.getListSize() != 0)) {
        connectivityStatus=true;
      }
    }
 else {
      throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
    }
    if (connectivityStatus) {
      testResponse.setStatusCode(VXResponse.STATUS_SUCCESS);
    }
 else {
      testResponse.setStatusCode(VXResponse.STATUS_ERROR);
    }
  }
 catch (  Exception e) {
    testResponse.setStatusCode(VXResponse.STATUS_ERROR);
    logger.error(""String_Node_Str"" + vXAsset.getName(),e);
  }
  return testResponse;
}","public VXResponse testConfig(VXAsset vXAsset){
  int assetType=vXAsset.getAssetType();
  VXResponse testResponse=new VXResponse();
  boolean connectivityStatus=false;
  HashMap<String,String> configMap=(HashMap<String,String>)jsonUtil.jsonToMap(vXAsset.getConfig());
  String password=configMap.get(""String_Node_Str"");
  String hiddenPasswordString=PropertiesUtil.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (password != null && password.equals(hiddenPasswordString)) {
    String assetName=vXAsset.getName();
    if (assetName != null) {
      XXAsset existingVXAsset=xADaoManager.getXXAsset().findByAssetName(assetName);
      if (existingVXAsset != null && existingVXAsset.getConfig() != null) {
        String existingConfig=existingVXAsset.getConfig();
        HashMap<String,String> existingConfigMap=(HashMap<String,String>)jsonUtil.jsonToMap(existingConfig);
        String existingPassword=existingConfigMap.get(""String_Node_Str"");
        if (existingPassword != null) {
          configMap.put(""String_Node_Str"",existingPassword);
        }
      }
    }
  }
  try {
    if (assetType == AppConstants.ASSET_HDFS) {
      HadoopFS connectionObj=new HadoopFS(vXAsset.getName(),configMap);
      if (connectionObj != null) {
        List<String> testResult=connectionObj.listFiles(""String_Node_Str"",null);
        if (testResult != null && testResult.size() != 0) {
          connectivityStatus=true;
        }
      }
    }
 else     if (assetType == AppConstants.ASSET_HIVE) {
      HiveClient connectionObj=new HiveClient(vXAsset.getName(),configMap);
      if (connectionObj != null) {
        List<String> testResult=connectionObj.getDatabaseList(""String_Node_Str"");
        if (testResult != null && testResult.size() != 0) {
          connectivityStatus=true;
        }
      }
      connectionObj.close();
    }
 else     if (assetType == AppConstants.ASSET_HBASE) {
      HBaseClient connectionObj=new HBaseClient(vXAsset.getName(),configMap);
      if (connectionObj != null) {
        connectivityStatus=connectionObj.getHBaseStatus();
      }
 else {
        Log.error(""String_Node_Str"");
      }
    }
 else     if (assetType == AppConstants.ASSET_KNOX) {
      KnoxClient knoxClient=assetConnectionMgr.getKnoxClient(vXAsset.getName(),configMap);
      VXStringList vxStringList=getKnoxResources(knoxClient,""String_Node_Str"",null);
      if (vxStringList != null && (vxStringList.getListSize() != 0)) {
        connectivityStatus=true;
      }
    }
 else {
      throw restErrorUtil.createRESTException(""String_Node_Str"",MessageEnums.INVALID_INPUT_DATA);
    }
    if (connectivityStatus) {
      testResponse.setStatusCode(VXResponse.STATUS_SUCCESS);
    }
 else {
      testResponse.setStatusCode(VXResponse.STATUS_ERROR);
    }
  }
 catch (  Exception e) {
    testResponse.setStatusCode(VXResponse.STATUS_ERROR);
    logger.error(""String_Node_Str"" + vXAsset.getName(),e);
  }
  return testResponse;
}",0.9668785547005688
166497,"@Override protected void onDialogClosed(final boolean positiveResult){
  super.onDialogClosed(positiveResult);
  mSelectedValue=mNumberPicker.getValue();
  if (positiveResult) {
    if (this.callChangeListener(mSelectedValue)) {
      this.persistInt(mSelectedValue);
      this.updateSummary();
    }
  }
}","@Override protected void onDialogClosed(final boolean positiveResult){
  super.onDialogClosed(positiveResult);
  if (positiveResult) {
    final int selectedValue=mNumberPicker.getValue();
    if (this.callChangeListener(selectedValue)) {
      mSelectedValue=selectedValue;
      this.persistInt(mSelectedValue);
      this.updateSummary();
    }
  }
}",0.8393939393939394
166498,"protected RowScroller next(boolean dragCol){
  if (current < children.size() - 1) {
    RowScroller scroller0=(RowScroller)children.get(current);
    RowScroller scroller1=(RowScroller)children.get(current + 1);
    scroller0.setActive(false,false);
    scroller1.setActive(true);
    intf.selectWidget(scroller1);
    if (scroller1 == varScroller) {
      showColumnLabels();
      vbar.setX(-mira.browser.scrollSize);
      vbar.setHeight(vbar.height() - mira.browser.scrollSize);
    }
 else {
      hideColumnLabels();
      hbar.hide(false);
      vbar.setX(-mira.browser.scrollSize - padding - mira.browser.width() + mira.varWidth);
      vbar.setHeight(vbar.height() + mira.browser.scrollSize);
    }
    for (    Widget wt : children) {
      float x=wt.targetX();
      wt.targetX(x - width);
    }
    current++;
    vbar.hide(false);
    animating=true;
    return scroller1;
  }
 else {
    if (dragCol)     mira.browser.dragColumns(mira.plotWidth);
    return (RowScroller)children.get(children.size() - 1);
  }
}","protected RowScroller next(boolean dragCol){
  if (current < children.size() - 1) {
    RowScroller scroller0=(RowScroller)children.get(current);
    RowScroller scroller1=(RowScroller)children.get(current + 1);
    scroller0.setActive(false,false);
    scroller1.setActive(true);
    intf.selectWidget(scroller1);
    if (scroller1 == varScroller) {
      showColumnLabels();
      vbar.setX(-mira.browser.scrollSize);
      vbar.setHeight(vbar.height() - mira.browser.scrollSize);
    }
 else {
      hideColumnLabels();
      hbar.hide(false);
      vbar.setX(-mira.browser.scrollSize - padding - mira.browser.width() + mira.varWidth);
      vbar.setHeight(vbar.height() + mira.browser.scrollSize);
    }
    int i=scroller0.getFirstIndex();
    int idx=scroller0.items.get(i).getFirstChild();
    scroller1.setNextIndex(idx);
    for (    Widget wt : children) {
      float x=wt.targetX();
      wt.targetX(x - width);
    }
    vbar.hide(false);
    animating=true;
    current++;
    return scroller1;
  }
 else {
    if (dragCol)     mira.browser.dragColumns(mira.plotWidth);
    return (RowScroller)children.get(children.size() - 1);
  }
}",0.7405703771849126
166499,"protected RowScroller prev(boolean dragCol){
  if (dragCol && 0 < mira.browser.getFirstColumn()) {
    mira.browser.dragColumns(-mira.plotWidth);
    return (RowScroller)children.get(current);
  }
  if (0 < current) {
    RowScroller scroller0=(RowScroller)children.get(current);
    RowScroller scroller1=(RowScroller)children.get(current - 1);
    scroller0.setActive(false);
    scroller1.setActive(true,false);
    intf.selectWidget(scroller1);
    if (scroller1 == varScroller) {
      showColumnLabels();
      vbar.setX(-mira.browser.scrollSize);
      vbar.setHeight(vbar.height() - mira.browser.scrollSize);
    }
 else {
      hideColumnLabels();
      hbar.hide(false);
      vbar.setX(-mira.browser.scrollSize - padding - mira.browser.width() + mira.varWidth);
      vbar.setHeight(vbar.height() + mira.browser.scrollSize);
    }
    for (    Widget wt : children) {
      float x=wt.targetX();
      wt.targetX(x + width);
    }
    current--;
    vbar.hide(false);
    animating=true;
    return scroller1;
  }
 else {
    return (RowScroller)children.get(0);
  }
}","protected RowScroller prev(boolean dragCol){
  if (dragCol && 0 < mira.browser.getFirstColumn()) {
    mira.browser.dragColumns(-mira.plotWidth);
    return (RowScroller)children.get(current);
  }
  if (0 < current) {
    RowScroller scroller0=(RowScroller)children.get(current);
    RowScroller scroller1=(RowScroller)children.get(current - 1);
    scroller0.setActive(false);
    scroller1.setActive(true,false);
    intf.selectWidget(scroller1);
    if (scroller1 == varScroller) {
      showColumnLabels();
      vbar.setX(-mira.browser.scrollSize);
      vbar.setHeight(vbar.height() - mira.browser.scrollSize);
    }
 else {
      hideColumnLabels();
      hbar.hide(false);
      vbar.setX(-mira.browser.scrollSize - padding - mira.browser.width() + mira.varWidth);
      vbar.setHeight(vbar.height() + mira.browser.scrollSize);
    }
    for (    Widget wt : children) {
      float x=wt.targetX();
      wt.targetX(x + width);
    }
    vbar.hide(false);
    animating=true;
    updateVertScrollbar();
    current--;
    return scroller1;
  }
 else {
    return (RowScroller)children.get(0);
  }
}",0.9491990846681924
166500,"public void mouseReleased(MiraWidget wt){
  if (active) {
    if (canOpen(wt.idx)) {
      if (isOpen(wt.idx)) {
        close(wt.idx);
        wt.targetHeight(heightClose);
      }
 else {
        open(wt.idx);
        wt.targetHeight(heightOpen);
      }
      updatePositions(wt);
    }
 else {
      next(wt.idx);
      row.updateVertScrollbar();
    }
  }
}","public void mouseReleased(MiraWidget wt){
  if (active) {
    if (canOpen(wt.idx)) {
      if (isOpen(wt.idx)) {
        close(wt.idx);
        wt.targetHeight(heightClose);
      }
 else {
        open(wt.idx);
        wt.targetHeight(heightOpen);
      }
      updatePositions(wt);
    }
 else {
      next(wt.idx);
    }
  }
}",0.9319826338639652
166501,"public void keyPressed(MiraWidget wt){
  if (active) {
    if (key == CODED) {
      boolean move=false;
      if (keyCode == LEFT) {
        prev();
        move=true;
      }
 else       if (keyCode == RIGHT) {
        next();
        move=true;
      }
 else       if (keyCode == UP) {
        up();
        move=true;
      }
 else       if (keyCode == DOWN) {
        down();
        move=true;
      }
      if (move)       row.updateVertScrollbar();
    }
  }
}","public void keyPressed(MiraWidget wt){
  if (active) {
    if (key == CODED) {
      if (keyCode == LEFT) {
        prev();
      }
 else       if (keyCode == RIGHT) {
        next();
      }
 else       if (keyCode == UP) {
        up();
        row.updateVertScrollbar();
      }
 else       if (keyCode == DOWN) {
        down();
        row.updateVertScrollbar();
      }
    }
  }
}",0.8140350877192982
166502,"protected void write(String line){
  writer.println(line.replace(""String_Node_Str"",""String_Node_Str""));
  changed=true;
}","protected void write(String line){
  writer.println(line);
  changed=true;
}",0.7715736040609137
166503,"/** 
 * Parse the path part of the uri into namespace and name
 */
private void parsePath(){
  if (Strings.isNullOrEmpty(this.getPath()))   return;
  String[] parts=this.getPath().split(""String_Node_Str"");
  if (parts == null || parts.length == 0)   return;
  String name=parts[parts.length - 1];
  if (!Strings.isNullOrEmpty(name) && name.toLowerCase().endsWith(""String_Node_Str"") || name.toLowerCase().endsWith(""String_Node_Str"")) {
    name=name.substring(0,name.lastIndexOf('.'));
    this.setPath(this.getPath().substring(0,this.getPath().lastIndexOf('.')));
  }
  this.setName(name);
  if (parts.length > 1) {
    this.setNamespace(parts[parts.length - 2]);
  }
  if (parts.length > 2) {
    this.setEngineName(parts[parts.length - 3]);
  }
}","/** 
 * Parse the path part of the uri into namespace and name
 */
private void parsePath(){
  if (Strings.isNullOrEmpty(this.getPath()))   return;
  String[] parts=this.getPath().split(""String_Node_Str"");
  if (parts == null || parts.length == 0)   return;
  String name=parts[parts.length - 1];
  if (!Strings.isNullOrEmpty(name) && name.toLowerCase().endsWith(""String_Node_Str"") || name.toLowerCase().endsWith(""String_Node_Str"")) {
    name=name.substring(0,name.lastIndexOf('.'));
    this.setPath(this.getPath().substring(0,this.getPath().lastIndexOf('.')));
  }
  this.setName(name);
  if (parts.length > 1) {
    this.setNamespace(parts[parts.length - 2]);
  }
}",0.9442484121383204
166504,"@Override public void setFactorLevels(String columnName,Factor<?> factor) throws DDFException {
  Column c=this.getColumn(columnName);
  Factor<?> f=c.getOptionalFactor();
  f.setLevelCounts(factor.getLevelCounts());
  f.setLevels(factor.getLevels(),false);
}","@Override public void setFactorLevels(String columnName,Factor<?> factor) throws DDFException {
  Column c=this.getColumn(columnName);
  Factor<?> f=c.getOptionalFactor();
  if (factor.getLevelCounts() != null) {
    f.setLevelCounts(factor.getLevelCounts());
  }
  if (factor.getLevels() != null) {
    f.setLevels(factor.getLevels(),false);
  }
}",0.8533772652388797
166505,"@BeforeClass public static void startServer() throws Exception {
  Thread.sleep(1000);
  manager=DDFManager.get(DDFManager.EngineType.BASIC);
  Schema schema=new Schema(""String_Node_Str"",""String_Node_Str"");
  DDF ddf=manager.newDDF(manager,new Class<?>[]{DDFManager.class},""String_Node_Str"",""String_Node_Str"",schema);
  Schema schema2=new Schema(""String_Node_Str"",""String_Node_Str"");
  DDF ddf2=manager.newDDF(manager,new Class<?>[]{DDFManager.class},""String_Node_Str"",""String_Node_Str"",schema2);
  parser=new CCJSqlParserManager();
}","@BeforeClass public static void startServer() throws Exception {
  Thread.sleep(1000);
  manager=DDFManager.get(DDFManager.EngineType.SPARK);
  Schema schema=new Schema(""String_Node_Str"",""String_Node_Str"");
  DDF ddf=manager.newDDF(manager,new Class<?>[]{DDFManager.class},""String_Node_Str"",""String_Node_Str"",schema);
  Schema schema2=new Schema(""String_Node_Str"",""String_Node_Str"");
  DDF ddf2=manager.newDDF(manager,new Class<?>[]{DDFManager.class},""String_Node_Str"",""String_Node_Str"",schema2);
  parser=new CCJSqlParserManager();
}",0.99250936329588
166506,"@Test public void testTransformSql() throws DDFException {
  ddf.setMutable(true);
  ddf=ddf.Transform.transformUDF(""String_Node_Str"");
  Assert.assertEquals(31,ddf.getNumRows());
  Assert.assertEquals(9,ddf.getNumColumns());
  Assert.assertEquals(""String_Node_Str"",ddf.getColumnName(8));
  Assert.assertEquals(9,ddf.VIEWS.head(1).get(0).split(""String_Node_Str"").length);
  ddf.Transform.transformUDF(""String_Node_Str"");
  Assert.assertEquals(31,ddf.getNumRows());
  Assert.assertEquals(10,ddf.getNumColumns());
  Assert.assertEquals(10,ddf.getSummary().length);
  List<String> cols=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ddf=ddf.Transform.transformUDF(""String_Node_Str"",cols);
  Assert.assertEquals(31,ddf.getNumRows());
  Assert.assertEquals(5,ddf.getNumColumns());
  Assert.assertEquals(""String_Node_Str"",ddf.getColumnName(4));
  ddf.setMutable(false);
  List<String> expressions=new ArrayList<String>();
  expressions.add(""String_Node_Str"");
  expressions.add(""String_Node_Str"");
  DDF ddf3=ddf.Transform.transformUDF(expressions,cols);
  Assert.assertEquals(31,ddf3.getNumRows());
  Assert.assertEquals(6,ddf3.getNumColumns());
  Assert.assertEquals(""String_Node_Str"",ddf3.getColumnName(5));
  Assert.assertEquals(6,ddf3.getSummary().length);
  List<String> lcols=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String s0=""String_Node_Str"";
  List<String> s1=new ArrayList<String>();
  s1.add(""String_Node_Str"");
  s1.add(""String_Node_Str"");
  s1.add(""String_Node_Str"");
  String s2=""String_Node_Str"";
  String s3=""String_Node_Str"";
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(s1));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(s2));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(s3));
  DDF ddf2=ddf.Transform.transformUDF(s1,lcols);
  Assert.assertEquals(31,ddf2.getNumRows());
  Assert.assertEquals(6,ddf2.getNumColumns());
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(""String_Node_Str""));
}","@Test public void testTransformSql() throws DDFException {
  ddf.setMutable(true);
  ddf=ddf.Transform.transformUDF(""String_Node_Str"");
  Assert.assertEquals(31,ddf.getNumRows());
  Assert.assertEquals(9,ddf.getNumColumns());
  Assert.assertEquals(""String_Node_Str"",ddf.getColumnName(8));
  Assert.assertEquals(9,ddf.VIEWS.head(1).get(0).split(""String_Node_Str"").length);
  ddf.Transform.transformUDF(""String_Node_Str"");
  Assert.assertEquals(31,ddf.getNumRows());
  Assert.assertEquals(10,ddf.getNumColumns());
  Assert.assertEquals(10,ddf.getSummary().length);
  List<String> cols=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ddf=ddf.Transform.transformUDF(""String_Node_Str"",cols);
  Assert.assertEquals(31,ddf.getNumRows());
  Assert.assertEquals(5,ddf.getNumColumns());
  Assert.assertEquals(""String_Node_Str"",ddf.getColumnName(4));
  ddf.setMutable(false);
  List<String> expressions=new ArrayList<String>();
  expressions.add(""String_Node_Str"");
  expressions.add(""String_Node_Str"");
  DDF ddf3=ddf.Transform.transformUDF(expressions,cols);
  Assert.assertEquals(31,ddf3.getNumRows());
  Assert.assertEquals(6,ddf3.getNumColumns());
  Assert.assertEquals(""String_Node_Str"",ddf3.getColumnName(5));
  Assert.assertEquals(6,ddf3.getSummary().length);
  List<String> lcols=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String s0=""String_Node_Str"";
  List<String> s1=new ArrayList<String>();
  s1.add(""String_Node_Str"");
  s1.add(""String_Node_Str"");
  s1.add(""String_Node_Str"");
  String s2=""String_Node_Str"";
  String s3=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + TransformationHandler.RToSqlUdf(s1));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(s1));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(s2));
  System.out.println(""String_Node_Str"" + TransformationHandler.RToSqlUdf(s3));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(s3));
  DDF ddf2=ddf.Transform.transformUDF(s1,lcols);
  Assert.assertEquals(31,ddf2.getNumRows());
  Assert.assertEquals(6,ddf2.getNumColumns());
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",TransformationHandler.RToSqlUdf(""String_Node_Str""));
}",0.9503606279168434
166507,"public DDF getDDFByURI(String uri) throws DDFException {
  for (  DDFManager ddfManager : mDDFManagerList) {
    try {
      DDF ddf=ddfManager.getDDFByURI(uri);
      return ddf;
    }
 catch (    Exception e) {
    }
  }
  throw new DDFException(""String_Node_Str"" + uri);
}","public DDF getDDFByURI(String uri) throws DDFException {
  for (  DDFManager ddfManager : mDDFManagerList) {
    try {
      DDF ddf=ddfManager.getDDFByURI(uri);
      return ddf;
    }
 catch (    Exception e) {
      try {
        DDF ddf=ddfManager.getOrRestoreDDFUri(uri);
        return ddf;
      }
 catch (      Exception e2) {
      }
    }
  }
  throw new DDFException(""String_Node_Str"" + uri);
}",0.75
166508,"public static DataSourceDescriptor resolve(String source,Map<String,String> options) throws DDFException, URISyntaxException {
switch (source) {
case ""String_Node_Str"":
{
      return resolveS3(options);
    }
case ""String_Node_Str"":
{
    return resolveHDFS(options);
  }
case ""String_Node_Str"":
case ""String_Node_Str"":
{
  return resolveJDBC(options);
}
case ""String_Node_Str"":
{
return resolveSQL(options);
}
default :
{
throw new DDFException(""String_Node_Str"" + source);
}
}
}","public static DataSourceDescriptor resolve(String source,Map<String,String> options) throws DDFException, URISyntaxException {
switch (source) {
case ""String_Node_Str"":
{
      return resolveS3(options);
    }
case ""String_Node_Str"":
{
    return resolveHDFS(options);
  }
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
{
  return resolveJDBC(options);
}
case ""String_Node_Str"":
{
return resolveSQL(options);
}
default :
{
throw new DDFException(""String_Node_Str"" + source);
}
}
}",0.9756592292089248
166509,"@Override public Integer call(Object object,String field) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getYear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getMonthOfYear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getWeekyear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getWeekOfWeekyear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getDayOfMonth());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getDayOfWeek());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getDayOfYear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getHourOfDay());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getMinuteOfHour());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getSecondOfMinute());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getMillisOfSecond());
    }
  }
  return null;
}","@Override public Integer call(Object object,String field) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getYear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getMonthOfYear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getWeekyear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getWeekOfWeekyear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getDayOfMonth());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getDayOfWeek());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getDayOfYear());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getHourOfDay());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getMinuteOfHour());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getSecondOfMinute());
    }
 else     if (field.equalsIgnoreCase(""String_Node_Str"")) {
      return new Integer(dt.getMillisOfSecond());
    }
  }
  return null;
}",0.9971139971139972
166510,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.dayOfMonth().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.dayOfMonth().getAsString());
  }
 else {
    return null;
  }
}",0.9824561403508772
166511,"@Override public String call(Object object,String format) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return ""String_Node_Str"" + dt.getDayOfWeek();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return dt.dayOfWeek().getAsText();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return dt.dayOfWeek().getAsShortText();
    }
  }
  return null;
}","@Override public String call(Object object,String format) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return ""String_Node_Str"" + dt.getDayOfWeek();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return dt.dayOfWeek().getAsText();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return dt.dayOfWeek().getAsShortText();
    }
  }
  return null;
}",0.9919678714859438
166512,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.dayOfYear().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.dayOfYear().getAsString());
  }
 else {
    return null;
  }
}",0.9823788546255506
166513,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.hourOfDay().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.hourOfDay().getAsString());
  }
 else {
    return null;
  }
}",0.9823788546255506
166514,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.millisOfSecond().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.millisOfSecond().getAsString());
  }
 else {
    return null;
  }
}",0.9827586206896552
166515,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.minuteOfHour().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.minuteOfHour().getAsString());
  }
 else {
    return null;
  }
}",0.982608695652174
166516,"@Override public String call(Object object,String format) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return ""String_Node_Str"" + dt.getMonthOfYear();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return dt.monthOfYear().getAsText();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return dt.monthOfYear().getAsShortText();
    }
  }
  return null;
}","@Override public String call(Object object,String format) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return ""String_Node_Str"" + dt.getMonthOfYear();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return dt.monthOfYear().getAsText();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      return dt.monthOfYear().getAsShortText();
    }
  }
  return null;
}",0.992063492063492
166517,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.secondOfMinute().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.secondOfMinute().getAsString());
  }
 else {
    return null;
  }
}",0.9827586206896552
166518,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.weekOfWeekyear().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.weekOfWeekyear().getAsString());
  }
 else {
    return null;
  }
}",0.9827586206896552
166519,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.weekyear().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.weekyear().getAsString());
  }
 else {
    return null;
  }
}",0.9823008849557522
166520,"@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject((String)object);
  if (dt != null) {
    return Integer.parseInt(dt.year().getAsString());
  }
 else {
    return null;
  }
}","@Override public Integer call(Object object) throws Exception {
  DateTime dt=Utils.toDateTimeObject(object);
  if (dt != null) {
    return Integer.parseInt(dt.year().getAsString());
  }
 else {
    return null;
  }
}",0.981981981981982
166521,"public static DateTime toDateTimeObject(Object object){
  if (object instanceof Integer) {
    return new DateTime((Integer)object * 1000L).withZone(DateTimeZone.UTC);
  }
 else   if (object instanceof String) {
    Matcher matcher=isoPattern.matcher((String)object);
    if (matcher.matches()) {
      String year=matcher.group(""String_Node_Str"");
      String month=matcher.group(""String_Node_Str"");
      String day=matcher.group(""String_Node_Str"");
      String sep=matcher.group(""String_Node_Str"");
      String hour=matcher.group(""String_Node_Str"");
      String minute=matcher.group(""String_Node_Str"");
      String second=matcher.group(""String_Node_Str"");
      String ms=matcher.group(""String_Node_Str"");
      String timezone=matcher.group(""String_Node_Str"");
      StringBuilder sb=new StringBuilder();
      sb.append(year);
      sb.append(month != null ? (""String_Node_Str"" + month) : ""String_Node_Str"");
      sb.append(day != null ? (""String_Node_Str"" + day) : ""String_Node_Str"");
      sb.append(sep != null ? sep : ""String_Node_Str"");
      sb.append(hour != null ? hour : ""String_Node_Str"");
      sb.append(minute != null ? (minute) : ""String_Node_Str"");
      sb.append(second != null ? (second) : ""String_Node_Str"");
      sb.append(ms != null ? (ms) : ""String_Node_Str"");
      sb.append(timezone != null ? timezone : ""String_Node_Str"");
      StringBuilder sb2=new StringBuilder();
      sb2.append(""String_Node_Str"");
      sb2.append(month != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(day != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(sep != null ? sep.equalsIgnoreCase(""String_Node_Str"") ? ""String_Node_Str"" : sep : ""String_Node_Str"");
      sb2.append(hour != null ? ""String_Node_Str"" : ""String_Node_Str"");
      sb2.append(minute != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(second != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(ms != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(timezone != null ? timezone.startsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" : ""String_Node_Str"");
      DateTimeFormatter formatter=DateTimeFormat.forPattern(sb2.toString()).withZoneUTC();
      return formatter.parseDateTime(sb.toString());
    }
 else {
      return null;
    }
  }
  return null;
}","public static DateTime toDateTimeObject(Object object){
  if (object instanceof Integer) {
    return new DateTime((Integer)object * 1000L).withZone(DateTimeZone.UTC);
  }
 else   if (object instanceof Long) {
    return new DateTime((Long)object * 1000L).withZone(DateTimeZone.UTC);
  }
 else   if (object instanceof String) {
    Matcher matcher=isoPattern.matcher((String)object);
    if (matcher.matches()) {
      String year=matcher.group(""String_Node_Str"");
      String month=matcher.group(""String_Node_Str"");
      String day=matcher.group(""String_Node_Str"");
      String sep=matcher.group(""String_Node_Str"");
      String hour=matcher.group(""String_Node_Str"");
      String minute=matcher.group(""String_Node_Str"");
      String second=matcher.group(""String_Node_Str"");
      String ms=matcher.group(""String_Node_Str"");
      String timezone=matcher.group(""String_Node_Str"");
      StringBuilder sb=new StringBuilder();
      sb.append(year);
      sb.append(month != null ? (""String_Node_Str"" + month) : ""String_Node_Str"");
      sb.append(day != null ? (""String_Node_Str"" + day) : ""String_Node_Str"");
      sb.append(sep != null ? sep : ""String_Node_Str"");
      sb.append(hour != null ? hour : ""String_Node_Str"");
      sb.append(minute != null ? (minute) : ""String_Node_Str"");
      sb.append(second != null ? (second) : ""String_Node_Str"");
      sb.append(ms != null ? (ms) : ""String_Node_Str"");
      sb.append(timezone != null ? timezone : ""String_Node_Str"");
      StringBuilder sb2=new StringBuilder();
      sb2.append(""String_Node_Str"");
      sb2.append(month != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(day != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(sep != null ? sep.equalsIgnoreCase(""String_Node_Str"") ? ""String_Node_Str"" : sep : ""String_Node_Str"");
      sb2.append(hour != null ? ""String_Node_Str"" : ""String_Node_Str"");
      sb2.append(minute != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(second != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(ms != null ? (""String_Node_Str"" + ""String_Node_Str"") : ""String_Node_Str"");
      sb2.append(timezone != null ? timezone.startsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" : ""String_Node_Str"");
      DateTimeFormatter formatter=DateTimeFormat.forPattern(sb2.toString()).withZoneUTC();
      return formatter.parseDateTime(sb.toString());
    }
 else {
      return null;
    }
  }
  return null;
}",0.1273961661341853
166522,"@Test public void testDateTimeExtract() throws DDFException {
  DDF ddf3=ddf.sql2ddf(""String_Node_Str"");
  List<String> rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 20);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 2015);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 2015);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 4);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 1);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 22);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 4);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 22);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 23);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 0);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 0);
}","@Test public void testDateTimeExtract() throws DDFException {
  DDF ddf3=ddf.sql2ddf(""String_Node_Str"");
  List<String> rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 20);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 2015);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 2015);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 4);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 1);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 22);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 4);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 22);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 23);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 0);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 0);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 2015);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 2015);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 23);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 6);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 4);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 4);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 155);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 3);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 0);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 0);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 0);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 2101);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 2101);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 23);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 6);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 6);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 1);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 157);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 6);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 47);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 27);
  ddf3=ddf.sql2ddf(""String_Node_Str"");
  rows=ddf3.VIEWS.head(1);
  System.out.println(rows.get(0));
  Assert.assertTrue(Integer.parseInt(rows.get(0)) == 0);
}",0.5111856823266219
166523,"public DDF sql2ddfHandle(String command,Schema schema,DataSourceDescriptor dataSource,DataFormat dataFormat,TableNameReplacer tableNameReplacer) throws DDFException {
  if (!this.getManager().getEngine().equals(""String_Node_Str"")) {
    throw new DDFException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (dataSource != null) {
    if (dataSource instanceof JDBCDataSourceDescriptor) {
      return this.sql2ddf(command,schema,dataSource,dataFormat);
    }
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor == null) {
      throw new DDFException(""String_Node_Str"");
    }
    if (sqlDataSourceDescriptor.getDataSource() != null) {
switch (sqlDataSourceDescriptor.getDataSource()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        return this.sql2ddf(command,schema,dataSource,dataFormat);
default :
      return this.sql2ddf(command,schema,dataSource,dataFormat);
  }
}
}
CCJSqlParserManager parserManager=new CCJSqlParserManager();
StringReader reader=new StringReader(command);
try {
Statement statement=parserManager.parse(reader);
if (!(statement instanceof Select)) {
  throw new DDFException(""String_Node_Str"");
}
 else {
  this.mLog.info(""String_Node_Str"" + command);
  statement=tableNameReplacer.run(statement);
  if (tableNameReplacer.containsLocalTable || tableNameReplacer.uri2TableObj.size() == 1) {
    this.mLog.info(""String_Node_Str"" + statement.toString());
    return this.sql2ddf(statement.toString(),schema,dataSource,dataFormat);
  }
 else {
    String selectString=statement.toString();
    DDF ddf=this.getManager().transferByTable(tableNameReplacer.fromEngineName,selectString);
    return ddf;
  }
}
}
 catch (Exception e) {
OutputStream os=new OutputStream(){
  private StringBuilder string=new StringBuilder();
  @Override public void write(  int b) throws IOException {
    this.string.append((char)b);
  }
  public String toString(){
    return this.string.toString();
  }
}
;
e.printStackTrace(new PrintStream(os));
this.mLog.info(os.toString());
throw new DDFException(e);
}
}","public DDF sql2ddfHandle(String command,Schema schema,DataSourceDescriptor dataSource,DataFormat dataFormat,TableNameReplacer tableNameReplacer) throws DDFException {
  if (!this.getManager().getEngine().equals(""String_Node_Str"")) {
    throw new DDFException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (dataSource != null) {
    if (dataSource instanceof JDBCDataSourceDescriptor) {
      return this.sql2ddf(command,schema,dataSource,dataFormat);
    }
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor == null) {
      throw new DDFException(""String_Node_Str"");
    }
    if (sqlDataSourceDescriptor.getDataSource() != null) {
switch (sqlDataSourceDescriptor.getDataSource()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        return this.sql2ddf(command,schema,dataSource,dataFormat);
default :
      return this.sql2ddf(command,schema,dataSource,dataFormat);
  }
}
}
CCJSqlParserManager parserManager=new CCJSqlParserManager();
StringReader reader=new StringReader(command);
try {
Statement statement=parserManager.parse(reader);
if (!(statement instanceof Select)) {
  throw new DDFException(""String_Node_Str"");
}
 else {
  this.mLog.info(""String_Node_Str"" + command);
  statement=tableNameReplacer.run(statement);
  if (tableNameReplacer.containsLocalTable || tableNameReplacer.uri2TableObj.size() == 1) {
    this.mLog.info(""String_Node_Str"" + statement.toString());
    return this.sql2ddf(statement.toString(),schema,dataSource,dataFormat);
  }
 else {
    String selectString=statement.toString();
    DDF ddf=this.getManager().transferByTable(tableNameReplacer.fromEngineName,selectString);
    return ddf;
  }
}
}
 catch (JSQLParserException e) {
throw new DDFException(e.getCause().getMessage().split(""String_Node_Str"")[0]);
}
catch (DDFException e) {
throw e;
}
catch (Exception e) {
throw new DDFException(e);
}
}",0.8825271470878578
166524,"public SqlResult sqlHandle(String sqlcmd,Integer maxRows,DataSourceDescriptor dataSource,TableNameReplacer tableNameReplacer) throws DDFException {
  if (dataSource != null) {
    if (dataSource instanceof JDBCDataSourceDescriptor) {
      return this.sql(sqlcmd,maxRows,dataSource);
    }
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor == null) {
      throw new DDFException(""String_Node_Str"");
    }
    if (sqlDataSourceDescriptor.getDataSource() != null) {
switch (sqlDataSourceDescriptor.getDataSource()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        return this.sql(sqlcmd,maxRows,dataSource);
default :
      return this.sql(sqlcmd,maxRows,dataSource);
  }
}
}
CCJSqlParserManager parserManager=new CCJSqlParserManager();
StringReader reader=new StringReader(sqlcmd);
try {
Statement statement=parserManager.parse(reader);
if (statement instanceof ShowTables) {
  return this.showTables();
}
 else if (statement instanceof DescribeTable) {
  return this.describeTable(((DescribeTable)statement).getName().getName());
}
 else if (statement instanceof Select) {
  this.mLog.info(""String_Node_Str"" + sqlcmd);
  statement=tableNameReplacer.run(statement);
  if (tableNameReplacer.containsLocalTable || tableNameReplacer.uri2TableObj.keySet().size() == 1) {
    this.mLog.info(""String_Node_Str"" + statement.toString());
    return this.sql(statement.toString(),maxRows,dataSource);
  }
 else {
    String selectString=statement.toString();
    DDF ddf=this.getManager().transferByTable(tableNameReplacer.fromEngineName,""String_Node_Str"" + selectString + ""String_Node_Str"");
    return this.sql(""String_Node_Str"" + ddf.getTableName(),maxRows,dataSource);
  }
}
 else if (statement instanceof Drop) {
  return null;
}
 else {
  throw new DDFException(""String_Node_Str"" + ""String_Node_Str"");
}
}
 catch (DDFException e) {
throw e;
}
catch (Exception e) {
OutputStream os=new OutputStream(){
  private StringBuilder string=new StringBuilder();
  @Override public void write(  int b) throws IOException {
    this.string.append((char)b);
  }
  public String toString(){
    return this.string.toString();
  }
}
;
e.printStackTrace(new PrintStream(os));
this.mLog.info(os.toString());
this.mLog.info(""String_Node_Str"" + sqlcmd);
throw new DDFException(e);
}
}","public SqlResult sqlHandle(String sqlcmd,Integer maxRows,DataSourceDescriptor dataSource,TableNameReplacer tableNameReplacer) throws DDFException {
  if (dataSource != null) {
    if (dataSource instanceof JDBCDataSourceDescriptor) {
      return this.sql(sqlcmd,maxRows,dataSource);
    }
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor == null) {
      throw new DDFException(""String_Node_Str"");
    }
    if (sqlDataSourceDescriptor.getDataSource() != null) {
switch (sqlDataSourceDescriptor.getDataSource()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        return this.sql(sqlcmd,maxRows,dataSource);
default :
      return this.sql(sqlcmd,maxRows,dataSource);
  }
}
}
CCJSqlParserManager parserManager=new CCJSqlParserManager();
StringReader reader=new StringReader(sqlcmd);
try {
Statement statement=parserManager.parse(reader);
if (statement instanceof ShowTables) {
  return this.showTables();
}
 else if (statement instanceof DescribeTable) {
  return this.describeTable(((DescribeTable)statement).getName().getName());
}
 else if (statement instanceof Select) {
  this.mLog.info(""String_Node_Str"" + sqlcmd);
  statement=tableNameReplacer.run(statement);
  if (tableNameReplacer.containsLocalTable || tableNameReplacer.uri2TableObj.keySet().size() == 1) {
    this.mLog.info(""String_Node_Str"" + statement.toString());
    return this.sql(statement.toString(),maxRows,dataSource);
  }
 else {
    String selectString=statement.toString();
    DDF ddf=this.getManager().transferByTable(tableNameReplacer.fromEngineName,""String_Node_Str"" + selectString + ""String_Node_Str"");
    return this.sql(""String_Node_Str"" + ddf.getTableName(),maxRows,dataSource);
  }
}
 else if (statement instanceof Drop) {
  return null;
}
 else {
  throw new DDFException(""String_Node_Str"" + ""String_Node_Str"");
}
}
 catch (JSQLParserException e) {
throw new DDFException(e.getCause().getMessage().split(""String_Node_Str"")[0]);
}
catch (DDFException e) {
throw e;
}
catch (Exception e) {
throw new DDFException(e);
}
}",0.8690210102816271
166525,"public JDBCDDFManager(DataSourceDescriptor dataSourceDescriptor,String engineType) throws Exception {
  super(dataSourceDescriptor);
  this.setEngineType(engineType);
  mLog.info(""String_Node_Str"");
  String driver=sConfigHandler.getValue(this.getEngine(),ConfigConstant.JDBC_DRIVER.toString());
  Class.forName(driver);
  mJdbcDataSource=(JDBCDataSourceDescriptor)dataSourceDescriptor;
  this.setDataSourceDescriptor(dataSourceDescriptor);
  if (mJdbcDataSource == null) {
    throw new Exception(""String_Node_Str"" + ""String_Node_Str"");
  }
  conn=DriverManager.getConnection(mJdbcDataSource.getDataSourceUri().toString(),mJdbcDataSource.getCredentials().getUsername(),mJdbcDataSource.getCredentials().getPassword());
  mLog.info(""String_Node_Str"" + mJdbcDataSource.getDataSourceUri().toString());
  boolean isDDFAutoCreate=Boolean.parseBoolean(sConfigHandler.getValue(ConfigConstant.ENGINE_NAME_JDBC.toString(),ConfigConstant.JDBC_DDF_AUTOCREATE.toString()));
  mLog.info(""String_Node_Str"");
  this.showTables();
  mLog.info(""String_Node_Str"");
  if (isDDFAutoCreate) {
  }
 else {
  }
}","public JDBCDDFManager(DataSourceDescriptor dataSourceDescriptor,String engineType) throws Exception {
  super(dataSourceDescriptor);
  this.setEngineType(engineType);
  mLog.info(""String_Node_Str"");
  String driver=sConfigHandler.getValue(this.getEngine(),ConfigConstant.JDBC_DRIVER.toString());
  Class.forName(driver);
  mJdbcDataSource=(JDBCDataSourceDescriptor)dataSourceDescriptor;
  this.setDataSourceDescriptor(dataSourceDescriptor);
  if (mJdbcDataSource == null) {
    throw new Exception(""String_Node_Str"" + ""String_Node_Str"");
  }
  conn=DriverManager.getConnection(mJdbcDataSource.getDataSourceUri().toString(),mJdbcDataSource.getCredentials().getUsername(),mJdbcDataSource.getCredentials().getPassword());
  mLog.info(""String_Node_Str"" + mJdbcDataSource.getDataSourceUri().toString());
  boolean isDDFAutoCreate=Boolean.parseBoolean(sConfigHandler.getValue(ConfigConstant.ENGINE_NAME_JDBC.toString(),ConfigConstant.JDBC_DDF_AUTOCREATE.toString()));
  this.showTables();
  mLog.info(""String_Node_Str"");
  if (isDDFAutoCreate) {
  }
 else {
  }
}",0.9655172413793104
166526,"public Integer getColType(){
  return colType;
}","/** 
 * @Getter and Setter.
 * @return
 */
public Integer getColType(){
  return colType;
}",0.6906474820143885
166527,"/** 
 * @return DDF Column type
 */
public static Schema.ColumnType getDDFType(Integer colType) throws DDFException {
switch (colType) {
case Types.ARRAY:
    return Schema.ColumnType.ARRAY;
case Types.BIGINT:
  return Schema.ColumnType.BIGINT;
case Types.BINARY:
return Schema.ColumnType.BINARY;
case Types.BOOLEAN:
return Schema.ColumnType.BOOLEAN;
case Types.BIT:
return Schema.ColumnType.BOOLEAN;
case Types.CHAR:
return Schema.ColumnType.STRING;
case Types.DATE:
return Schema.ColumnType.DATE;
case Types.DECIMAL:
return Schema.ColumnType.DECIMAL;
case Types.DOUBLE:
return Schema.ColumnType.DOUBLE;
case Types.FLOAT:
return Schema.ColumnType.FLOAT;
case Types.INTEGER:
return Schema.ColumnType.INT;
case Types.LONGVARCHAR:
return Schema.ColumnType.STRING;
case Types.NUMERIC:
return Schema.ColumnType.DECIMAL;
case Types.NVARCHAR:
return Schema.ColumnType.STRING;
case Types.SMALLINT:
return Schema.ColumnType.INT;
case Types.TIMESTAMP:
return Schema.ColumnType.TIMESTAMP;
case Types.TINYINT:
return Schema.ColumnType.INT;
case Types.VARCHAR:
return Schema.ColumnType.STRING;
default :
throw new DDFException(String.format(""String_Node_Str"",JDBCUtils.getSqlTypeName(colType)));
}
}","/** 
 * @return DDF Column type
 */
public static Schema.ColumnType getDDFType(Integer colType) throws DDFException {
switch (colType) {
case Types.ARRAY:
    return Schema.ColumnType.ARRAY;
case Types.BIGINT:
  return Schema.ColumnType.BIGINT;
case Types.BINARY:
return Schema.ColumnType.BINARY;
case Types.BOOLEAN:
return Schema.ColumnType.BOOLEAN;
case Types.BIT:
return Schema.ColumnType.BOOLEAN;
case Types.CHAR:
return Schema.ColumnType.STRING;
case Types.DATE:
return Schema.ColumnType.DATE;
case Types.DECIMAL:
return Schema.ColumnType.DECIMAL;
case Types.DOUBLE:
return Schema.ColumnType.DOUBLE;
case Types.FLOAT:
return Schema.ColumnType.FLOAT;
case Types.INTEGER:
return Schema.ColumnType.INT;
case Types.LONGVARCHAR:
return Schema.ColumnType.STRING;
case Types.NUMERIC:
return Schema.ColumnType.DECIMAL;
case Types.NVARCHAR:
return Schema.ColumnType.STRING;
case Types.SMALLINT:
return Schema.ColumnType.INT;
case Types.TIMESTAMP:
return Schema.ColumnType.TIMESTAMP;
case Types.TINYINT:
return Schema.ColumnType.INT;
case Types.VARCHAR:
return Schema.ColumnType.STRING;
case Types.VARBINARY:
return Schema.ColumnType.BINARY;
default :
throw new DDFException(String.format(""String_Node_Str"",JDBCUtils.getSqlTypeName(colType)));
}
}",0.9773569370111156
166528,"/** 
 * @brief Init an engine.
 * @param engineName The unique name of the engine.
 * @param engineType The type of the engine.
 * @param dataSourceDescriptor DataSource.
 * @return The new ddf manager.
 * @throws DDFException
 */
public DDFManager initEngine(String engineName,String engineType,DataSourceDescriptor dataSourceDescriptor) throws DDFException {
  if (engineName == null) {
    throw new DDFException(""String_Node_Str"");
  }
  if (mName2DDFManager.get(engineName) != null) {
    throw new DDFException(""String_Node_Str"" + engineName);
  }
  DDFManager manager=DDFManager.get(engineType,dataSourceDescriptor);
  if (manager == null) {
    throw new DDFException(""String_Node_Str"" + engineName);
  }
  manager.setEngineName(engineName);
  manager.setDDFCoordinator(this);
  mDDFManagerList.add(manager);
  mName2DDFManager.put(engineName,manager);
  return manager;
}","/** 
 * @brief Init an engine.
 * @param engineName The unique name of the engine.
 * @param engineType The type of the engine.
 * @param dataSourceDescriptor DataSource.
 * @return The new ddf manager.
 * @throws DDFException
 */
public DDFManager initEngine(String engineName,String engineType,DataSourceDescriptor dataSourceDescriptor) throws DDFException {
  this.getEngine(""String_Node_Str"").log(""String_Node_Str"");
  if (engineName == null) {
    throw new DDFException(""String_Node_Str"");
  }
  if (mName2DDFManager.get(engineName) != null) {
    throw new DDFException(""String_Node_Str"" + engineName);
  }
  this.getEngine(""String_Node_Str"").log(""String_Node_Str"");
  DDFManager manager=DDFManager.get(engineType,dataSourceDescriptor);
  if (manager == null) {
    throw new DDFException(""String_Node_Str"" + engineName);
  }
  this.getEngine(""String_Node_Str"").log(""String_Node_Str"");
  manager.setEngineName(engineName);
  manager.setEngineType(engineType);
  manager.setDDFCoordinator(this);
  mDDFManagerList.add(manager);
  mName2DDFManager.put(engineName,manager);
  return manager;
}",0.8669701568032372
166529,"public static DataSourceDescriptor resolve(String source,Map<String,String> options) throws DDFException, URISyntaxException {
switch (source) {
case ""String_Node_Str"":
{
      return resolveS3(options);
    }
case ""String_Node_Str"":
{
    return resolveHDFS(options);
  }
case ""String_Node_Str"":
{
  return resolveJDBC(options);
}
case ""String_Node_Str"":
{
return resolveSQL(options);
}
default :
{
throw new DDFException(""String_Node_Str"" + source);
}
}
}","public static DataSourceDescriptor resolve(String source,Map<String,String> options) throws DDFException, URISyntaxException {
switch (source) {
case ""String_Node_Str"":
{
      return resolveS3(options);
    }
case ""String_Node_Str"":
{
    return resolveHDFS(options);
  }
case ""String_Node_Str"":
case ""String_Node_Str"":
{
  return resolveJDBC(options);
}
case ""String_Node_Str"":
{
return resolveSQL(options);
}
default :
{
throw new DDFException(""String_Node_Str"" + source);
}
}
}",0.9744136460554372
166530,"public DDF sql2ddfHandle(String command,Schema schema,DataSourceDescriptor dataSource,DataFormat dataFormat,TableNameReplacer tableNameReplacer) throws DDFException {
  if (!this.getManager().getEngine().equals(""String_Node_Str"")) {
    throw new DDFException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (dataSource != null) {
    if (dataSource instanceof JDBCDataSourceDescriptor) {
      return this.sql2ddf(command,schema,dataSource,dataFormat);
    }
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor == null) {
      throw new DDFException(""String_Node_Str"");
    }
    if (sqlDataSourceDescriptor.getDataSource() != null) {
switch (sqlDataSourceDescriptor.getDataSource()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        return this.sql2ddf(command,schema,dataSource,dataFormat);
default :
      return this.sql2ddf(command,schema,dataSource,dataFormat);
  }
}
}
CCJSqlParserManager parserManager=new CCJSqlParserManager();
StringReader reader=new StringReader(command);
try {
Statement statement=parserManager.parse(reader);
if (!(statement instanceof Select)) {
  throw new DDFException(""String_Node_Str"");
}
 else {
  this.mLog.info(""String_Node_Str"" + command);
  statement=tableNameReplacer.run(statement);
  if (tableNameReplacer.containsLocalTable) {
    this.mLog.info(""String_Node_Str"" + statement.toString());
    return this.sql2ddf(statement.toString(),schema,dataSource,dataFormat);
  }
 else {
    String selectString=statement.toString();
    DDF ddf=this.getManager().transfer(tableNameReplacer.fromEngineName,""String_Node_Str"" + selectString + ""String_Node_Str""+ ""String_Node_Str"");
    return ddf;
  }
}
}
 catch (Exception e) {
OutputStream os=new OutputStream(){
  private StringBuilder string=new StringBuilder();
  @Override public void write(  int b) throws IOException {
    this.string.append((char)b);
  }
  public String toString(){
    return this.string.toString();
  }
}
;
e.printStackTrace(new PrintStream(os));
this.mLog.info(os.toString());
this.mLog.info(""String_Node_Str"" + command);
throw new DDFException(e);
}
}","public DDF sql2ddfHandle(String command,Schema schema,DataSourceDescriptor dataSource,DataFormat dataFormat,TableNameReplacer tableNameReplacer) throws DDFException {
  if (!this.getManager().getEngine().equals(""String_Node_Str"")) {
    throw new DDFException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (dataSource != null) {
    if (dataSource instanceof JDBCDataSourceDescriptor) {
      return this.sql2ddf(command,schema,dataSource,dataFormat);
    }
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor == null) {
      throw new DDFException(""String_Node_Str"");
    }
    if (sqlDataSourceDescriptor.getDataSource() != null) {
switch (sqlDataSourceDescriptor.getDataSource()) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
        return this.sql2ddf(command,schema,dataSource,dataFormat);
default :
      return this.sql2ddf(command,schema,dataSource,dataFormat);
  }
}
}
CCJSqlParserManager parserManager=new CCJSqlParserManager();
StringReader reader=new StringReader(command);
try {
Statement statement=parserManager.parse(reader);
if (!(statement instanceof Select)) {
  throw new DDFException(""String_Node_Str"");
}
 else {
  this.mLog.info(""String_Node_Str"" + command);
  statement=tableNameReplacer.run(statement);
  if (tableNameReplacer.containsLocalTable || tableNameReplacer.uri2TableObj.size() == 1) {
    this.mLog.info(""String_Node_Str"" + statement.toString());
    return this.sql2ddf(statement.toString(),schema,dataSource,dataFormat);
  }
 else {
    String selectString=statement.toString();
    DDF ddf=this.getManager().transferByTable(tableNameReplacer.fromEngineName,selectString);
    return ddf;
  }
}
}
 catch (Exception e) {
OutputStream os=new OutputStream(){
  private StringBuilder string=new StringBuilder();
  @Override public void write(  int b) throws IOException {
    this.string.append((char)b);
  }
  public String toString(){
    return this.string.toString();
  }
}
;
e.printStackTrace(new PrintStream(os));
this.mLog.info(os.toString());
this.mLog.info(""String_Node_Str"" + command);
throw new DDFException(e);
}
}",0.9676375404530744
166531,"public JDBCDDFManager(DataSourceDescriptor dataSourceDescriptor) throws Exception {
  super(dataSourceDescriptor);
  mLog.info(""String_Node_Str"");
  String driver=sConfigHandler.getValue(this.getEngine(),ConfigConstant.JDBC_DRIVER.toString());
  Class.forName(driver);
  mJdbcDataSource=(JDBCDataSourceDescriptor)dataSourceDescriptor;
  this.setDataSourceDescriptor(dataSourceDescriptor);
  if (mJdbcDataSource == null) {
    throw new Exception(""String_Node_Str"" + ""String_Node_Str"");
  }
  conn=DriverManager.getConnection(mJdbcDataSource.getDataSourceUri().toString(),mJdbcDataSource.getCredentials().getUserName(),mJdbcDataSource.getCredentials().getPassword());
  mLog.info(""String_Node_Str"" + mJdbcDataSource.getDataSourceUri().toString());
  boolean isDDFAutoCreate=Boolean.parseBoolean(sConfigHandler.getValue(ConfigConstant.ENGINE_NAME_JDBC.toString(),ConfigConstant.JDBC_DDF_AUTOCREATE.toString()));
  mLog.info(""String_Node_Str"");
  this.showTables();
  mLog.info(""String_Node_Str"");
  if (isDDFAutoCreate) {
  }
 else {
  }
}","public JDBCDDFManager(DataSourceDescriptor dataSourceDescriptor,String engineType) throws Exception {
  super(dataSourceDescriptor);
  this.setEngineType(engineType);
  mLog.info(""String_Node_Str"");
  String driver=sConfigHandler.getValue(this.getEngine(),ConfigConstant.JDBC_DRIVER.toString());
  Class.forName(driver);
  mJdbcDataSource=(JDBCDataSourceDescriptor)dataSourceDescriptor;
  this.setDataSourceDescriptor(dataSourceDescriptor);
  if (mJdbcDataSource == null) {
    throw new Exception(""String_Node_Str"" + ""String_Node_Str"");
  }
  conn=DriverManager.getConnection(mJdbcDataSource.getDataSourceUri().toString(),mJdbcDataSource.getCredentials().getUserName(),mJdbcDataSource.getCredentials().getPassword());
  mLog.info(""String_Node_Str"" + mJdbcDataSource.getDataSourceUri().toString());
  boolean isDDFAutoCreate=Boolean.parseBoolean(sConfigHandler.getValue(ConfigConstant.ENGINE_NAME_JDBC.toString(),ConfigConstant.JDBC_DDF_AUTOCREATE.toString()));
  mLog.info(""String_Node_Str"");
  this.showTables();
  mLog.info(""String_Node_Str"");
  if (isDDFAutoCreate) {
  }
 else {
  }
}",0.9755409219190968
166532,"@Override public String getEngine(){
  return ConfigConstant.ENGINE_NAME_JDBC.toString();
}","@Override public String getEngine(){
  return this.getEngineType();
}",0.6875
166533,"/** 
 * @brief Override the visit function. The function takes care of 3 kinds of situation:(1) URI is used. For example, the ddf name is ddf://adatao/ddfA, and the query is like select * from ddf://adatao/ddfA. (2) Dataset name and namespace is used. For example, the ddf name is ddf://adatao/ddfA, and the query is like select * from ddfA, namespace = adatao. (3) List is used. For example, the query is like select {1}.a, {2}.b from {1},{2} where {1}.id={2}.id, ddfList= {""ddf://adatao/ddfA"", ""ddf://adatao/ddfB""}. Here we write them in a single function so that we can handle the situation when different situations are combined. For example, select {1}.a from ddf://adatao/ddfA, ddfList={""ddf://adatao/ddfB""}.
 * @param table The table that is visiting.
 */
public void visit(Table table) throws Exception {
  if (null == table || null == table.getName())   return;
  String name=table.getName();
  for (  String tablename : this.withTableNameList) {
    if (tablename.equals(name)) {
      return;
    }
  }
  Matcher matcher=this.uriPattern.matcher(name);
  if (matcher.matches()) {
    try {
      this.ddfManager.getOrRestoreDDFUri(name);
    }
 catch (    DDFException e) {
      throw new Exception(""String_Node_Str"" + name);
    }
    table.setName(this.ddfManager.getDDFByURI(name).getTableName());
  }
 else   if (namespace != null) {
    String uri=""String_Node_Str"".concat(namespace.concat(""String_Node_Str"").concat(name));
    try {
      this.ddfManager.getOrRestoreDDFUri(uri);
    }
 catch (    DDFException e) {
      throw new Exception(""String_Node_Str"" + uri);
    }
    table.setName(this.ddfManager.getDDFByURI(uri).getTableName());
  }
 else   if (uriList != null || uuidList != null) {
    Pattern indexPattern=Pattern.compile(""String_Node_Str"");
    Matcher indexMatcher=indexPattern.matcher(name);
    if (indexMatcher.matches()) {
      String number=name.substring(name.indexOf('{') + 1,name.indexOf('}')).trim();
      int index=Integer.parseInt(number);
      if (index < 1) {
        throw new Exception(""String_Node_Str"" + ""String_Node_Str"");
      }
      if (null == uriList) {
        if (index > uuidList.size()) {
          throw new Exception(new ArrayIndexOutOfBoundsException());
        }
 else {
          try {
            this.ddfManager.getOrRestoreDDF(uuidList.get(index - 1));
          }
 catch (          DDFException e) {
            throw new Exception(""String_Node_Str"" + uuidList.get(index - 1).toString());
          }
          table.setName(this.ddfManager.getDDF(uuidList.get(index - 1)).getTableName());
        }
      }
 else {
        if (index > uriList.size()) {
          throw new Exception(new ArrayIndexOutOfBoundsException());
        }
 else {
          try {
            this.ddfManager.getOrRestoreDDFUri(uriList.get(index - 1));
          }
 catch (          DDFException e) {
            throw new Exception(""String_Node_Str"" + uriList.get(index - 1));
          }
          table.setName(this.ddfManager.getDDFByURI(uriList.get(index - 1)).getTableName());
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"" + table.getName());
      throw new Exception(""String_Node_Str"");
    }
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
  if (table.getSampleClause() != null) {
    if (table.getSampleClause().getOnList() != null) {
      for (      SelectItem selectItem : table.getSampleClause().getOnList()) {
        selectItem.accept(this);
      }
    }
  }
}","/** 
 * @brief Override the visit function. The function takes care of 3 kinds of situation:(1) URI is used. For example, the ddf name is ddf://adatao/ddfA, and the query is like select * from ddf://adatao/ddfA. (2) Dataset name and namespace is used. For example, the ddf name is ddf://adatao/ddfA, and the query is like select * from ddfA, namespace = adatao. (3) List is used. For example, the query is like select {1}.a, {2}.b from {1},{2} where {1}.id={2}.id, ddfList= {""ddf://adatao/ddfA"", ""ddf://adatao/ddfB""}. Here we write them in a single function so that we can handle the situation when different situations are combined. For example, select {1}.a from ddf://adatao/ddfA, ddfList={""ddf://adatao/ddfB""}.
 * @param table The table that is visiting.
 */
public void visit(Table table) throws Exception {
  if (null == table || null == table.getName())   return;
  String name=table.getName();
  for (  String tablename : this.withTableNameList) {
    if (tablename.equals(name)) {
      return;
    }
  }
  for (  String tablename : this.aliasTableNameList) {
    if (tablename.equals(name)) {
      return;
    }
  }
  Matcher matcher=this.uriPattern.matcher(name);
  if (matcher.matches()) {
    try {
      this.ddfManager.getOrRestoreDDFUri(name);
    }
 catch (    DDFException e) {
      throw new Exception(""String_Node_Str"" + name);
    }
    table.setName(this.ddfManager.getDDFByURI(name).getTableName());
  }
 else   if (namespace != null) {
    String uri=""String_Node_Str"".concat(namespace.concat(""String_Node_Str"").concat(name));
    try {
      this.ddfManager.getOrRestoreDDFUri(uri);
    }
 catch (    DDFException e) {
      throw new Exception(""String_Node_Str"" + uri);
    }
    table.setName(this.ddfManager.getDDFByURI(uri).getTableName());
  }
 else   if (uriList != null || uuidList != null) {
    Pattern indexPattern=Pattern.compile(""String_Node_Str"");
    Matcher indexMatcher=indexPattern.matcher(name);
    if (indexMatcher.matches()) {
      String number=name.substring(name.indexOf('{') + 1,name.indexOf('}')).trim();
      int index=Integer.parseInt(number);
      if (index < 1) {
        throw new Exception(""String_Node_Str"" + ""String_Node_Str"");
      }
      if (null == uriList) {
        if (index > uuidList.size()) {
          throw new Exception(new ArrayIndexOutOfBoundsException());
        }
 else {
          try {
            this.ddfManager.getOrRestoreDDF(uuidList.get(index - 1));
          }
 catch (          DDFException e) {
            throw new Exception(""String_Node_Str"" + uuidList.get(index - 1).toString());
          }
          table.setName(this.ddfManager.getDDF(uuidList.get(index - 1)).getTableName());
        }
      }
 else {
        if (index > uriList.size()) {
          throw new Exception(new ArrayIndexOutOfBoundsException());
        }
 else {
          try {
            this.ddfManager.getOrRestoreDDFUri(uriList.get(index - 1));
          }
 catch (          DDFException e) {
            throw new Exception(""String_Node_Str"" + uriList.get(index - 1));
          }
          table.setName(this.ddfManager.getDDFByURI(uriList.get(index - 1)).getTableName());
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"" + table.getName());
      throw new Exception(""String_Node_Str"");
    }
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
  if (table.getSampleClause() != null) {
    if (table.getSampleClause().getOnList() != null) {
      for (      SelectItem selectItem : table.getSampleClause().getOnList()) {
        selectItem.accept(this);
      }
    }
  }
}",0.9839784488869984
166534,"@Override public DDF sql2ddf(String command,Schema schema,DataSourceDescriptor dataSource,DataFormat dataFormat) throws DDFException {
  this.getManager().log(""String_Node_Str"");
  Connection conn=this.getConn();
  try {
    Statement statement=conn.createStatement();
    statement.execute(""String_Node_Str"" + command + ""String_Node_Str"");
    DDF ddf=new JDBCDDF((JDBCDDFManager)this.getManager(),null,null,null,""String_Node_Str"");
    this.getManager().addDDF(ddf);
    this.getManager().log(""String_Node_Str"");
    return ddf;
  }
 catch (  SQLException e) {
    e.printStackTrace();
    throw new DDFException(""String_Node_Str"");
  }
}","@Override public DDF sql2ddf(String command,Schema schema,DataSourceDescriptor dataSource,DataFormat dataFormat) throws DDFException {
  this.getManager().log(""String_Node_Str"");
  Connection conn=this.getConn();
  try {
    Statement statement=conn.createStatement();
    String randomTbName=this.randomString(24);
    this.getManager().log(""String_Node_Str"" + randomTbName);
    statement.execute(""String_Node_Str"" + randomTbName + ""String_Node_Str""+ command+ ""String_Node_Str"");
    DDF ddf=new JDBCDDF((JDBCDDFManager)this.getManager(),null,null,null,randomTbName);
    this.getManager().addDDF(ddf);
    this.getManager().log(""String_Node_Str"");
    return ddf;
  }
 catch (  SQLException e) {
    e.printStackTrace();
    throw new DDFException(""String_Node_Str"" + e.getMessage());
  }
}",0.8583391486392185
166535,"public HDFSDataSourceDescriptor(String uri,String schema,DataFormat format,Boolean hasHeader,String delimiter,String quote,String comment) throws URISyntaxException {
  TextFileFormat textFileFormat=new TextFileFormat(format,hasHeader,delimiter,quote);
  List<Schema.Column> columnList;
  if (schema != null) {
    columnList=new Schema(schema).getColumns();
  }
 else {
    columnList=null;
  }
  this.setDataSourceUri(new DataSourceURI(uri));
  this.setFileFormat(textFileFormat);
  this.setDataSourceSchema(new DataSourceSchema(columnList));
  this.setFileFormat(textFileFormat);
  this.setComment(comment);
}","public HDFSDataSourceDescriptor(String uri,String schema,DataFormat format,Boolean hasHeader,String delimiter,String quote,String comment) throws URISyntaxException {
  TextFileFormat textFileFormat=new TextFileFormat(format,hasHeader,delimiter,quote);
  List<Schema.Column> columnList;
  if (!Strings.isNullOrEmpty(schema)) {
    columnList=new Schema(schema).getColumns();
  }
 else {
    columnList=null;
  }
  this.setDataSourceUri(new DataSourceURI(uri));
  this.setFileFormat(textFileFormat);
  this.setDataSourceSchema(new DataSourceSchema(columnList));
  this.setFileFormat(textFileFormat);
  this.setComment(comment);
}",0.9661290322580646
166536,"public S3DataSourceDescriptor(String uri,String awsKeyID,String awsSecretKey,String schema,DataFormat format,Boolean hasHeader,String delimiter,String quote) throws DDFException {
  List<Schema.Column> columns;
  if (schema != null) {
    columns=new Schema(schema).getColumns();
  }
 else {
    columns=null;
  }
  TextFileFormat fileFormat=new TextFileFormat(format,hasHeader,delimiter,quote);
  try {
    this.setDataSourceUri(new S3DataSourceURI(uri));
  }
 catch (  URISyntaxException e) {
    throw new DDFException(e);
  }
  this.setDataSourceCredentials(new S3DataSourceCredentials(awsKeyID,awsSecretKey));
  this.setDataSourceSchema(new DataSourceSchema(columns));
  this.setFileFormat(fileFormat);
}","public S3DataSourceDescriptor(String uri,String awsKeyID,String awsSecretKey,String schema,DataFormat format,Boolean hasHeader,String delimiter,String quote) throws DDFException {
  List<Schema.Column> columns;
  if (Strings.isNullOrEmpty(schema)) {
    columns=new Schema(schema).getColumns();
  }
 else {
    columns=null;
  }
  TextFileFormat fileFormat=new TextFileFormat(format,hasHeader,delimiter,quote);
  try {
    this.setDataSourceUri(new S3DataSourceURI(uri));
  }
 catch (  URISyntaxException e) {
    throw new DDFException(e);
  }
  this.setDataSourceCredentials(new S3DataSourceCredentials(awsKeyID,awsSecretKey));
  this.setDataSourceSchema(new DataSourceSchema(columns));
  this.setFileFormat(fileFormat);
}",0.969993021632938
166537,"public S3DataSourceDescriptor(String uri,String awsKeyID,String awsSecretKey,String schema,DataFormat format,Boolean hasHeader,String delimiter,String quote) throws DDFException {
  List<Schema.Column> columns;
  if (Strings.isNullOrEmpty(schema)) {
    columns=new Schema(schema).getColumns();
  }
 else {
    columns=null;
  }
  TextFileFormat fileFormat=new TextFileFormat(format,hasHeader,delimiter,quote);
  try {
    this.setDataSourceUri(new S3DataSourceURI(uri));
  }
 catch (  URISyntaxException e) {
    throw new DDFException(e);
  }
  this.setDataSourceCredentials(new S3DataSourceCredentials(awsKeyID,awsSecretKey));
  this.setDataSourceSchema(new DataSourceSchema(columns));
  this.setFileFormat(fileFormat);
}","public S3DataSourceDescriptor(String uri,String awsKeyID,String awsSecretKey,String schema,DataFormat format,Boolean hasHeader,String delimiter,String quote) throws DDFException {
  List<Schema.Column> columns;
  if (!Strings.isNullOrEmpty(schema)) {
    columns=new Schema(schema).getColumns();
  }
 else {
    columns=null;
  }
  TextFileFormat fileFormat=new TextFileFormat(format,hasHeader,delimiter,quote);
  try {
    this.setDataSourceUri(new S3DataSourceURI(uri));
  }
 catch (  URISyntaxException e) {
    throw new DDFException(e);
  }
  this.setDataSourceCredentials(new S3DataSourceCredentials(awsKeyID,awsSecretKey));
  this.setDataSourceSchema(new DataSourceSchema(columns));
  this.setFileFormat(fileFormat);
}",0.9993098688750862
166538,"public JDBCDDFManager(JDBCDataSourceDescriptor jdbcDataSource) throws SQLException, ClassNotFoundException {
  String driver=sConfigHandler.getValue(this.getEngine(),ConfigConstant.JDBC_DRIVER.toString());
  Class.forName(driver);
  mJdbcDataSource=jdbcDataSource;
  conn=DriverManager.getConnection(mJdbcDataSource.getDataSourceUri().toString(),mJdbcDataSource.getCredentials().getUserName(),mJdbcDataSource.getCredentials().getPassword());
  boolean isDDFAutoCreate=Boolean.parseBoolean(sConfigHandler.getValue(ConfigConstant.ENGINE_NAME_JDBC.toString(),ConfigConstant.JDBC_DDF_AUTOCREATE.toString()));
  if (isDDFAutoCreate) {
  }
 else {
  }
}","public JDBCDDFManager(JDBCDataSourceDescriptor jdbcDataSource) throws SQLException, ClassNotFoundException {
  String driver=sConfigHandler.getValue(this.getEngine(),ConfigConstant.JDBC_DRIVER.toString());
  Class.forName(driver);
  mJdbcDataSource=jdbcDataSource;
  conn=DriverManager.getConnection(mJdbcDataSource.getDataSourceUri().toString(),mJdbcDataSource.getCredentials().getUsername(),mJdbcDataSource.getCredentials().getPassword());
  boolean isDDFAutoCreate=Boolean.parseBoolean(sConfigHandler.getValue(ConfigConstant.ENGINE_NAME_JDBC.toString(),ConfigConstant.JDBC_DDF_AUTOCREATE.toString()));
  if (isDDFAutoCreate) {
  }
 else {
  }
}",0.9984544049459042
166539,"@Before public void setUp() throws Exception {
  createTableAirlineWithNA();
  ddf=manager.sql2ddf(""String_Node_Str"");
}","@Before public void setUp() throws Exception {
  createTableAirlineWithNA();
  ddf=manager.sql2ddf(""String_Node_Str"",""String_Node_Str"");
}",0.9302325581395348
166540,"@Override public SqlResult sql(String command,Integer maxRows,DataSourceDescriptor dataSource) throws DDFException {
  Connection conn=this.getConn();
  Statement statement;
  try {
    statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(command);
    ResultSetMetaData rsmd=rs.getMetaData();
    int colSize=rsmd.getColumnCount();
    if (colSize == 0) {
      return new SqlResult(null,null);
    }
    List<Schema.Column> columnList=new ArrayList<Schema.Column>();
    for (int colIdx=0; colIdx < colSize; ++colIdx) {
      columnList.add(new Schema.Column(rsmd.getColumnName(colIdx),JDBCUtils.getDDFType(rsmd.getColumnType(colIdx))));
    }
    Schema schema=new Schema(rsmd.getTableName(0),columnList);
    List<String> result=new ArrayList<String>();
    StringBuilder sb=new StringBuilder();
    while (rs.next()) {
      sb.append(rs.getObject(0).toString());
      for (int colIdx=1; colIdx < colSize; ++colIdx) {
        sb.append(""String_Node_Str"").append(rs.getObject(colIdx).toString());
      }
      result.add(sb.toString());
      sb.delete(0,sb.length());
    }
    return new SqlResult(schema,result);
  }
 catch (  SQLException e) {
    mLog.debug(e.getMessage());
    e.printStackTrace();
    throw new DDFException(""String_Node_Str"");
  }
}","@Override public SqlResult sql(String command,Integer maxRows,DataSourceDescriptor dataSource) throws DDFException {
  Connection conn=this.getConn();
  Statement statement;
  try {
    statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(command);
    ResultSetMetaData rsmd=rs.getMetaData();
    int colSize=rsmd.getColumnCount();
    if (colSize == 0) {
      return new SqlResult(null,null);
    }
    List<Schema.Column> columnList=new ArrayList<Schema.Column>();
    for (int colIdx=1; colIdx < colSize; ++colIdx) {
      columnList.add(new Schema.Column(rsmd.getColumnName(colIdx),JDBCUtils.getDDFType(rsmd.getColumnType(colIdx))));
    }
    Schema schema=new Schema(rsmd.getTableName(1),columnList);
    List<String> result=new ArrayList<String>();
    StringBuilder sb=new StringBuilder();
    while (rs.next()) {
      sb.append(rs.getObject(1).toString());
      for (int colIdx=1; colIdx < colSize; ++colIdx) {
        sb.append(""String_Node_Str"").append(rs.getObject(colIdx).toString());
      }
      result.add(sb.toString());
      sb.delete(0,sb.length());
    }
    return new SqlResult(schema,result);
  }
 catch (  SQLException e) {
    mLog.debug(e.getMessage());
    e.printStackTrace();
    throw new DDFException(""String_Node_Str"");
  }
}",0.9976635514018692
166541,"public static S3DataSourceDescriptor resolveS3(HashMap<String,String> options) throws DDFException {
  String uri=options.get(""String_Node_Str"");
  String awsKeyID=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
  String awsSecretKey=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
  String schema=options.get(""String_Node_Str"");
  DataFormat format=DataFormat.fromInt(Integer.parseInt(options.get(""String_Node_Str"")));
  if (options.get(""String_Node_Str"") != null) {
    String serde=options.get(""String_Node_Str"");
    return new S3DataSourceDescriptor(uri,awsKeyID,awsSecretKey,schema,serde,format);
  }
 else {
    String hasHeaderString=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    Boolean hasheader=Boolean.valueOf(hasHeaderString);
    String delim=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    String quote=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    return new S3DataSourceDescriptor(uri,awsKeyID,awsSecretKey,schema,format,hasheader,delim,quote);
  }
}","public static S3DataSourceDescriptor resolveS3(Map<String,String> options) throws DDFException {
  String uri=options.get(""String_Node_Str"");
  String awsKeyID=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
  String awsSecretKey=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
  String schema=options.get(""String_Node_Str"");
  DataFormat format=DataFormat.fromInt(Integer.parseInt(options.get(""String_Node_Str"")));
  if (options.get(""String_Node_Str"") != null) {
    String serde=options.get(""String_Node_Str"");
    return new S3DataSourceDescriptor(uri,awsKeyID,awsSecretKey,schema,serde,format);
  }
 else {
    String hasHeaderString=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    Boolean hasheader=Boolean.valueOf(hasHeaderString);
    String delim=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    String quote=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    return new S3DataSourceDescriptor(uri,awsKeyID,awsSecretKey,schema,format,hasheader,delim,quote);
  }
}",0.998069498069498
166542,"public static DataSourceDescriptor resolve(String source,HashMap<String,String> options) throws DDFException, URISyntaxException {
switch (source) {
case ""String_Node_Str"":
{
      return resolveS3(options);
    }
case ""String_Node_Str"":
{
    return resolveHDFS(options);
  }
case ""String_Node_Str"":
{
  return resolveJDBC(options);
}
case ""String_Node_Str"":
{
return resolveSQL(options);
}
default :
{
throw new DDFException(""String_Node_Str"" + source);
}
}
}","public static DataSourceDescriptor resolve(String source,Map<String,String> options) throws DDFException, URISyntaxException {
switch (source) {
case ""String_Node_Str"":
{
      return resolveS3(options);
    }
case ""String_Node_Str"":
{
    return resolveHDFS(options);
  }
case ""String_Node_Str"":
{
  return resolveJDBC(options);
}
case ""String_Node_Str"":
{
return resolveSQL(options);
}
default :
{
throw new DDFException(""String_Node_Str"" + source);
}
}
}",0.9956427015250544
166543,"public static JDBCDataSourceDescriptor resolveJDBC(HashMap<String,String> options) throws DDFException {
  String uri=options.get(""String_Node_Str"");
  String username=options.get(""String_Node_Str"");
  String password=options.get(""String_Node_Str"");
  String dbTable=options.get(""String_Node_Str"");
  try {
    return new JDBCDataSourceDescriptor(uri,username,password,dbTable);
  }
 catch (  URISyntaxException e) {
    throw new DDFException(e);
  }
}","public static JDBCDataSourceDescriptor resolveJDBC(Map<String,String> options) throws DDFException {
  String uri=options.get(""String_Node_Str"");
  String username=options.get(""String_Node_Str"");
  String password=options.get(""String_Node_Str"");
  String dbTable=options.get(""String_Node_Str"");
  try {
    return new JDBCDataSourceDescriptor(uri,username,password,dbTable);
  }
 catch (  URISyntaxException e) {
    throw new DDFException(e);
  }
}",0.9955654101995566
166544,"public static HDFSDataSourceDescriptor resolveHDFS(HashMap<String,String> options) throws DDFException, URISyntaxException {
  String uri=options.get(""String_Node_Str"");
  String schema=getOrDefault(options,""String_Node_Str"",null);
  String originalSource=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
  DataFormat format=DataFormat.fromInt(Integer.parseInt(options.get(""String_Node_Str"")));
  if (options.containsKey(""String_Node_Str"")) {
    String serde=options.get(""String_Node_Str"");
    return new HDFSDataSourceDescriptor(uri,schema,serde,originalSource,format);
  }
 else {
    String delim=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    String quote=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    Boolean hasHeader=Boolean.parseBoolean(getOrDefault(options,""String_Node_Str"",""String_Node_Str""));
    return new HDFSDataSourceDescriptor(uri,schema,format,hasHeader,delim,quote,originalSource);
  }
}","public static HDFSDataSourceDescriptor resolveHDFS(Map<String,String> options) throws DDFException, URISyntaxException {
  String uri=options.get(""String_Node_Str"");
  String schema=getOrDefault(options,""String_Node_Str"",null);
  String originalSource=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
  DataFormat format=DataFormat.fromInt(Integer.parseInt(options.get(""String_Node_Str"")));
  if (options.containsKey(""String_Node_Str"")) {
    String serde=options.get(""String_Node_Str"");
    return new HDFSDataSourceDescriptor(uri,schema,serde,originalSource,format);
  }
 else {
    String delim=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    String quote=getOrDefault(options,""String_Node_Str"",""String_Node_Str"");
    Boolean hasHeader=Boolean.parseBoolean(getOrDefault(options,""String_Node_Str"",""String_Node_Str""));
    return new HDFSDataSourceDescriptor(uri,schema,format,hasHeader,delim,quote,originalSource);
  }
}",0.9978947368421052
166545,"public static SQLDataSourceDescriptor resolveSQL(HashMap<String,String> options){
  String sql=options.get(""String_Node_Str"");
  String namespace=getOrDefault(options,""String_Node_Str"",null);
  String uriListStr=getOrDefault(options,""String_Node_Str"",null);
  String uuidListStr=getOrDefault(options,""String_Node_Str"",null);
  String dataSource=getOrDefault(options,""String_Node_Str"",null);
  return new SQLDataSourceDescriptor(sql,dataSource,namespace,uriListStr,uuidListStr);
}","public static SQLDataSourceDescriptor resolveSQL(Map<String,String> options){
  String sql=options.get(""String_Node_Str"");
  String namespace=getOrDefault(options,""String_Node_Str"",null);
  String uriListStr=getOrDefault(options,""String_Node_Str"",null);
  String uuidListStr=getOrDefault(options,""String_Node_Str"",null);
  String dataSource=getOrDefault(options,""String_Node_Str"",null);
  return new SQLDataSourceDescriptor(sql,dataSource,namespace,uriListStr,uuidListStr);
}",0.9958071278825996
166546,"@Override public URI getUri(){
  if (this.awsKeyID != null && this.awsSecretKey != null) {
    String creds=this.awsKeyID + ""String_Node_Str"" + this.awsSecretKey+ ""String_Node_Str"";
    try {
      return new URI(""String_Node_Str"" + creds + this.getUri().toString());
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
 else {
    try {
      return new URI(""String_Node_Str"" + this.getUri().toString());
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
  return null;
}","@Override public URI getUri(){
  if (this.awsKeyID != null && this.awsSecretKey != null) {
    String creds=this.awsKeyID + ""String_Node_Str"" + this.awsSecretKey+ ""String_Node_Str"";
    try {
      return new URI(""String_Node_Str"" + creds + this.mUri.toString());
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
 else {
    try {
      return new URI(""String_Node_Str"" + this.mUri.toString());
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
  return null;
}",0.9770992366412212
166547,"@Override public DDF sql2ddf(String command,Schema schema,DataSourceDescriptor dataSource,DataFormat dataFormat) throws DDFException {
  DataFrame rdd=null;
  if (dataSource != null) {
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor != null) {
      if (!sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"") && !sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"") && !sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"")) {
        throw new DDFException(""String_Node_Str"");
      }
    }
  }
  rdd=this.getHiveContext().sql(command);
  if (schema == null)   schema=SchemaHandler.getSchemaFromDataFrame(rdd);
  DDF ddf=this.getManager().newDDF(this.getManager(),rdd,new Class<?>[]{DataFrame.class},null,null,schema);
  ddf.getRepresentationHandler().get(new Class<?>[]{RDD.class,Row.class});
  return ddf;
}","@Override public DDF sql2ddf(String command,Schema schema,DataSourceDescriptor dataSource,DataFormat dataFormat) throws DDFException {
  System.out.println(""String_Node_Str"" + command);
  DataFrame rdd=null;
  if (dataSource != null) {
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor != null) {
      if (!sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"") && !sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"") && !sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"")) {
        throw new DDFException(""String_Node_Str"");
      }
    }
  }
  rdd=this.getHiveContext().sql(command);
  if (schema == null)   schema=SchemaHandler.getSchemaFromDataFrame(rdd);
  DDF ddf=this.getManager().newDDF(this.getManager(),rdd,new Class<?>[]{DataFrame.class},null,null,schema);
  ddf.getRepresentationHandler().get(new Class<?>[]{RDD.class,Row.class});
  return ddf;
}",0.973030142781597
166548,"@Override public SqlResult sql(String command,Integer maxRows,DataSourceDescriptor dataSource) throws DDFException {
  DataFrame rdd=null;
  if (dataSource != null) {
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor != null) {
      if (!sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"") && !sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"") && !sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"")) {
        throw new DDFException(""String_Node_Str"");
      }
    }
  }
  rdd=this.getHiveContext().sql(command);
  Schema schema=SparkUtils.schemaFromDataFrame(rdd);
  String[] strResult=SparkUtils.df2txt(rdd,""String_Node_Str"");
  return new SqlResult(schema,Arrays.asList(strResult));
}","@Override public SqlResult sql(String command,Integer maxRows,DataSourceDescriptor dataSource) throws DDFException {
  System.out.println(""String_Node_Str"" + command);
  DataFrame rdd=null;
  if (dataSource != null) {
    SQLDataSourceDescriptor sqlDataSourceDescriptor=(SQLDataSourceDescriptor)dataSource;
    if (sqlDataSourceDescriptor != null) {
      if (!sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"") && !sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"") && !sqlDataSourceDescriptor.getDataSource().equals(""String_Node_Str"")) {
        throw new DDFException(""String_Node_Str"");
      }
    }
  }
  rdd=this.getHiveContext().sql(command);
  Schema schema=SparkUtils.schemaFromDataFrame(rdd);
  String[] strResult=SparkUtils.df2txt(rdd,""String_Node_Str"");
  return new SqlResult(schema,Arrays.asList(strResult));
}",0.969258589511754
166549,"public synchronized void setDDFName(DDF ddf,String name) throws DDFException {
  if (!Strings.isNullOrEmpty(name)) {
    ddf.setName(name);
    this.mUris.put(ddf.getUri(),ddf.getUUID());
  }
 else {
    throw new DDFException(String.format(""String_Node_Str""));
  }
}","public synchronized void setDDFName(DDF ddf,String name) throws DDFException {
  if (!Strings.isNullOrEmpty(name)) {
    if (!Strings.isNullOrEmpty(ddf.getName())) {
      this.mUris.remove(ddf.getUri());
    }
    ddf.setName(name);
    this.mUris.put(ddf.getUri(),ddf.getUUID());
  }
 else {
    throw new DDFException(String.format(""String_Node_Str""));
  }
}",0.8503184713375797
166550,"public void JDBCDataSourceCredentials(String username,String password){
  mUserName=username;
  mPassword=password;
}","public JDBCDataSourceCredentials(String username,String password){
  mUserName=username;
  mPassword=password;
}",0.9781659388646288
166551,"public DDF getDDFByUri(String uri) throws DDFException {
  UUID uuid=this.mUris.get(uri);
  if (uuid != null) {
    throw new DDFException(String.format(""String_Node_Str"",uri));
  }
  return this.getDDF(uuid);
}","public DDF getDDFByUri(String uri) throws DDFException {
  UUID uuid=this.mUris.get(uri);
  if (uuid == null) {
    throw new DDFException(String.format(""String_Node_Str"",uri));
  }
  return this.getDDF(uuid);
}",0.995260663507109
166552,"@Override public DDF updateInplace(DDF newddf) throws DDFException {
  DDF curDDF=this.getDDF();
  curDDF.getRepresentationHandler().reset();
  curDDF.getRepresentationHandler().setRepresentations(newddf.getRepresentationHandler().getAllRepresentations());
  newddf.getManager().removeDDF(curDDF);
  newddf.getMetaDataHandler().copyMetaData(curDDF);
  curDDF.getSchemaHandler().setSchema(newddf.getSchema());
  return curDDF;
}","@Override public DDF updateInplace(DDF newddf) throws DDFException {
  DDF curDDF=this.getDDF();
  curDDF.getRepresentationHandler().reset();
  curDDF.getRepresentationHandler().setRepresentations(newddf.getRepresentationHandler().getAllRepresentations());
  curDDF.getSchemaHandler().setSchema(newddf.getSchema());
  return curDDF;
}",0.7752956636005256
166553,"public DDF getFlattenedDDF() throws DDFException {
  return Transform.flattenDDF();
}","public DDF getFlattenedDDF() throws DDFException {
  return this.getTransformationHandler().flattenDDF();
}",0.8854166666666666
166554,"public static String RToSqlUdf(String RExp){
  return RToSqlUdf(RExp,null);
}","public static String RToSqlUdf(String RExp){
  return RToSqlUdf(RExp,null,null);
}",0.9685534591194968
166555,"@Override public DDF sql2ddf(String command,Schema schema,String dataSource,DataFormat dataFormat) throws DDFException {
  DataFrame rdd=null;
  if (dataSource == null) {
    rdd=this.getHiveContext().sql(command);
  }
 else {
  }
  if (schema == null)   schema=SchemaHandler.getSchemaFromDataFrame(rdd);
  DDF ddf=this.getManager().newDDF(this.getManager(),rdd,new Class<?>[]{DataFrame.class},null,tableName,schema);
  ((SparkDDF)ddf).saveAsTable();
  return ddf;
}","@Override public DDF sql2ddf(String command,Schema schema,String dataSource,DataFormat dataFormat) throws DDFException {
  DataFrame rdd=null;
  if (dataSource == null) {
    rdd=this.getHiveContext().sql(command);
  }
 else {
  }
  if (schema == null)   schema=SchemaHandler.getSchemaFromDataFrame(rdd);
  DDF ddf=this.getManager().newDDF(this.getManager(),rdd,new Class<?>[]{DataFrame.class},null,null,schema);
  return ddf;
}",0.9328859060402684
166556,"public String setUUID(String uuid){
  this.uuid=uuid;
}","public void setUUID(String uuid){
  this.uuid=uuid;
}",0.925925925925926
166557,"@Override public void unpersist(String namespace,String name) throws DDFException {
  this.getDDF().beforeUnpersisting();
  Utils.deleteFile(this.getDataFileName(namespace,name));
  Utils.deleteFile(this.getSchemaFileName(namespace,name));
  this.getDDF().afterUnpersisting();
}","@Override public void unpersist(String namespace,String name) throws DDFException {
  this.getDDF().beforeUnpersisting();
  try {
    Utils.deleteFile(this.getDataFileName(namespace,name));
    Utils.deleteFile(this.getSchemaFileName(namespace,name));
  }
 catch (  Exception e) {
    throw new DDFException(e);
  }
  this.getDDF().afterUnpersisting();
}",0.879746835443038
166558,"@Override public List<HistogramBin> getVectorHistogram(String columnName,int numBins) throws DDFException {
  String command=String.format(""String_Node_Str"",columnName,numBins);
  if (!Strings.isNullOrEmpty(command)) {
    mLog.info(""String_Node_Str"" + command);
    List<String> result=this.getDDF().sql2txt(command,String.format(""String_Node_Str"",columnName));
    if (result != null && !result.isEmpty() && result.get(0) != null) {
      List<HistogramBin> bins=Lists.newArrayList();
      mLog.info(""String_Node_Str"" + result.get(0));
      String[] arrayString=result.get(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      for (      String str : arrayString) {
        HistogramBin bin=new HistogramBin();
        String[] xy=str.split(""String_Node_Str"");
        bin.setX(Double.parseDouble(xy[0]));
        bin.setY(Double.parseDouble(xy[1]));
        bins.add(bin);
      }
      return bins;
    }
  }
  return null;
}","@Override public List<HistogramBin> getVectorHistogram(String columnName,int numBins) throws DDFException {
  String command=String.format(""String_Node_Str"",columnName,numBins);
  if (!Strings.isNullOrEmpty(command)) {
    mLog.info(""String_Node_Str"" + command);
    List<String> result=this.getDDF().sql2txt(command,String.format(""String_Node_Str"",columnName));
    if (result != null && !result.isEmpty() && result.get(0) != null) {
      List<HistogramBin> bins=Lists.newArrayList();
      mLog.info(""String_Node_Str"" + result.get(0));
      String[] arrayString=result.get(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      int i=0;
      while (i < numBins) {
        HistogramBin bin=new HistogramBin();
        bin.setX(Double.parseDouble(arrayString[i * 2 + 0]));
        bin.setX(Double.parseDouble(arrayString[i * 2 + 1]));
        i+=1;
        bins.add(bin);
      }
      return bins;
    }
  }
  return null;
}",0.8319415448851775
166559,"/** 
 * Create a specific hierarchy Modify files Check if file is in history.
 */
@Test public void test2() throws IOException, ParseException, CloudsyncException, FileIOException, UsageException, InfoException {
  File rootFolder=Files.createTempDirectory(""String_Node_Str"").toFile();
  File targetLocalRemoteFolder=Files.createTempDirectory(""String_Node_Str"").toFile();
  File restoreFolder=new File(rootFolder.getParent(),rootFolder.getName() + ""String_Node_Str"");
  File configFile=Files.createTempFile(""String_Node_Str"",""String_Node_Str"").toFile();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + rootFolder.getAbsolutePath());
  System.out.println(""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath());
  String config=""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath();
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath() + File.separator+ ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath() + File.separator+ ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"";
  Files.write(configFile.toPath(),config.getBytes(),StandardOpenOption.CREATE);
  File file1=new File(rootFolder,""String_Node_Str"");
  File subfolder1=new File(rootFolder,""String_Node_Str"");
  File file2=new File(subfolder1,""String_Node_Str"");
  File subfolder2=new File(subfolder1,""String_Node_Str"");
  File file3=new File(subfolder2,""String_Node_Str"");
  subfolder1.mkdirs();
  subfolder2.mkdirs();
  Files.write(file1.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.CREATE_NEW);
  Files.write(file2.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.CREATE_NEW);
  Files.write(file3.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.CREATE_NEW);
  String[] args=new String[]{""String_Node_Str"",""String_Node_Str"",rootFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",configFile.getAbsolutePath()};
  Cloudsync.main(args);
  Files.write(file1.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.TRUNCATE_EXISTING);
  Files.write(file2.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.TRUNCATE_EXISTING);
  Files.write(file3.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.TRUNCATE_EXISTING);
  Cloudsync.main(args);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  File historyFolder=new File(targetLocalRemoteFolder,""String_Node_Str"" + ""String_Node_Str"" + sdf.format(new Date()));
  CmdOptions cmdOptions=new CmdOptions(args);
  cmdOptions.parse();
  Crypt crypt=new Crypt(cmdOptions);
  assertEquals(historyFolder.listFiles().length,3);
  for (  File f1 : historyFolder.listFiles()) {
    if (f1.getName().endsWith(""String_Node_Str"")) {
    }
 else     if (f1.isFile()) {
      assertEquals(crypt.decryptText(f1.getName()),""String_Node_Str"");
      _assertEncryptedFileContentEquals(f1,crypt,""String_Node_Str"");
    }
 else {
      assertEquals(crypt.decryptText(f1.getName()),""String_Node_Str"");
      assertEquals(f1.listFiles().length,3);
      for (      File f2 : f1.listFiles()) {
        if (f2.getName().endsWith(""String_Node_Str"")) {
        }
 else         if (f2.isFile()) {
          assertEquals(crypt.decryptText(f2.getName()),""String_Node_Str"");
          _assertEncryptedFileContentEquals(f2,crypt,""String_Node_Str"");
        }
 else {
          assertEquals(f2.listFiles().length,2);
          assertEquals(crypt.decryptText(f2.getName()),""String_Node_Str"");
          for (          File f3 : f2.listFiles()) {
            if (f3.getName().endsWith(""String_Node_Str"")) {
            }
 else {
              assertEquals(crypt.decryptText(f3.getName()),""String_Node_Str"");
              _assertEncryptedFileContentEquals(f3,crypt,""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  restoreFolder.mkdir();
  args=new String[]{""String_Node_Str"",""String_Node_Str"",restoreFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",configFile.getAbsolutePath()};
  Cloudsync.main(args);
  assertTrue(hierarchieEquals(rootFolder,restoreFolder));
  FileUtils.deleteDirectory(rootFolder);
}","/** 
 * Create a specific hierarchy Modify files Check if file is in history.
 */
@Test public void test2() throws IOException, ParseException, CloudsyncException, FileIOException, UsageException, InfoException {
  File rootFolder=Files.createTempDirectory(""String_Node_Str"").toFile();
  File targetLocalRemoteFolder=Files.createTempDirectory(""String_Node_Str"").toFile();
  File restoreFolder=new File(rootFolder.getParent(),rootFolder.getName() + ""String_Node_Str"");
  File configFile=Files.createTempFile(""String_Node_Str"",""String_Node_Str"").toFile();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + rootFolder.getAbsolutePath());
  System.out.println(""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath());
  String targetLocalRemoteFolderPath=FilesystemHelper.fixPathSeparators(targetLocalRemoteFolder.getAbsolutePath());
  String config=""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolderPath;
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolderPath + File.separator+ ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolderPath + File.separator+ ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"";
  Files.write(configFile.toPath(),config.getBytes(),StandardOpenOption.CREATE);
  File file1=new File(rootFolder,""String_Node_Str"");
  File subfolder1=new File(rootFolder,""String_Node_Str"");
  File file2=new File(subfolder1,""String_Node_Str"");
  File subfolder2=new File(subfolder1,""String_Node_Str"");
  File file3=new File(subfolder2,""String_Node_Str"");
  subfolder1.mkdirs();
  subfolder2.mkdirs();
  Files.write(file1.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.CREATE_NEW);
  Files.write(file2.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.CREATE_NEW);
  Files.write(file3.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.CREATE_NEW);
  String[] args=new String[]{""String_Node_Str"",""String_Node_Str"",rootFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",configFile.getAbsolutePath()};
  Cloudsync.main(args);
  Files.write(file1.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.TRUNCATE_EXISTING);
  Files.write(file2.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.TRUNCATE_EXISTING);
  Files.write(file3.toPath(),""String_Node_Str"".getBytes(""String_Node_Str""),StandardOpenOption.TRUNCATE_EXISTING);
  Cloudsync.main(args);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  File historyFolder=new File(targetLocalRemoteFolder,""String_Node_Str"" + ""String_Node_Str"" + sdf.format(new Date()));
  CmdOptions cmdOptions=new CmdOptions(args);
  cmdOptions.parse();
  Crypt crypt=new Crypt(cmdOptions);
  assertEquals(historyFolder.listFiles().length,3);
  for (  File f1 : historyFolder.listFiles()) {
    if (f1.getName().endsWith(""String_Node_Str"")) {
    }
 else     if (f1.isFile()) {
      assertEquals(crypt.decryptText(f1.getName()),""String_Node_Str"");
      _assertEncryptedFileContentEquals(f1,crypt,""String_Node_Str"");
    }
 else {
      assertEquals(crypt.decryptText(f1.getName()),""String_Node_Str"");
      assertEquals(f1.listFiles().length,3);
      for (      File f2 : f1.listFiles()) {
        if (f2.getName().endsWith(""String_Node_Str"")) {
        }
 else         if (f2.isFile()) {
          assertEquals(crypt.decryptText(f2.getName()),""String_Node_Str"");
          _assertEncryptedFileContentEquals(f2,crypt,""String_Node_Str"");
        }
 else {
          assertEquals(f2.listFiles().length,2);
          assertEquals(crypt.decryptText(f2.getName()),""String_Node_Str"");
          for (          File f3 : f2.listFiles()) {
            if (f3.getName().endsWith(""String_Node_Str"")) {
            }
 else {
              assertEquals(crypt.decryptText(f3.getName()),""String_Node_Str"");
              _assertEncryptedFileContentEquals(f3,crypt,""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  restoreFolder.mkdir();
  args=new String[]{""String_Node_Str"",""String_Node_Str"",restoreFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",configFile.getAbsolutePath()};
  Cloudsync.main(args);
  assertTrue(hierarchieEquals(rootFolder,restoreFolder));
  FileUtils.deleteDirectory(rootFolder);
}",0.9820861678004535
166560,"/** 
 * Generate a random hierarchy, backup then restore it.  Check for equality between the origin hierarchy and restored one.
 */
@Test public void test1() throws IOException, ParseException {
  File rootFolder=createRandomHierarchie();
  File targetLocalRemoteFolder=Files.createTempDirectory(""String_Node_Str"").toFile();
  File restoreFolder=new File(rootFolder.getParent(),rootFolder.getName() + ""String_Node_Str"");
  File configFile=Files.createTempFile(""String_Node_Str"",""String_Node_Str"").toFile();
  String config=""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath();
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath() + File.separator+ ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath() + File.separator+ ""String_Node_Str"";
  Files.write(configFile.toPath(),config.getBytes(),StandardOpenOption.CREATE);
  System.out.println(""String_Node_Str"" + rootFolder.getAbsolutePath());
  System.out.println(""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath());
  String[] args=new String[]{""String_Node_Str"",""String_Node_Str"",rootFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",configFile.getAbsolutePath()};
  Cloudsync.main(args);
  restoreFolder.mkdir();
  args=new String[]{""String_Node_Str"",""String_Node_Str"",restoreFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",configFile.getAbsolutePath()};
  Cloudsync.main(args);
  assertTrue(hierarchieEquals(rootFolder,restoreFolder));
  FileUtils.deleteDirectory(rootFolder);
}","/** 
 * Generate a random hierarchy, backup then restore it.  Check for equality between the origin hierarchy and restored one.
 */
@Test public void test1() throws IOException, ParseException {
  File rootFolder=createRandomHierarchie();
  File targetLocalRemoteFolder=Files.createTempDirectory(""String_Node_Str"").toFile();
  File restoreFolder=new File(rootFolder.getParent(),rootFolder.getName() + ""String_Node_Str"");
  File configFile=Files.createTempFile(""String_Node_Str"",""String_Node_Str"").toFile();
  String targetLocalRemoteFolderPath=FilesystemHelper.fixPathSeparators(targetLocalRemoteFolder.getAbsolutePath());
  String config=""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolderPath;
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolderPath + File.separator+ ""String_Node_Str"";
  config+=""String_Node_Str"" + ""String_Node_Str"" + targetLocalRemoteFolderPath + File.separator+ ""String_Node_Str"";
  Files.write(configFile.toPath(),config.getBytes(),StandardOpenOption.CREATE);
  System.out.println(""String_Node_Str"" + rootFolder.getAbsolutePath());
  System.out.println(""String_Node_Str"" + targetLocalRemoteFolder.getAbsolutePath());
  String[] args=new String[]{""String_Node_Str"",""String_Node_Str"",rootFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",configFile.getAbsolutePath()};
  Cloudsync.main(args);
  restoreFolder.mkdir();
  args=new String[]{""String_Node_Str"",""String_Node_Str"",restoreFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",configFile.getAbsolutePath()};
  Cloudsync.main(args);
  assertTrue(hierarchieEquals(rootFolder,restoreFolder));
  FileUtils.deleteDirectory(rootFolder);
}",0.9546237794371052
166561,"private File _getDriveFolder(final String path) throws CloudsyncException {
  int retryCount=0;
  do {
    try {
      File parentItem=service.files().get(""String_Node_Str"").execute();
      final String[] folderNames=StringUtils.split(path,SEPARATOR);
      for (      final String name : folderNames) {
        if (cacheParents.containsKey(parentItem.getId() + ':' + name)) {
          parentItem=cacheParents.get(parentItem.getId() + ':' + name);
        }
 else {
          final String q=""String_Node_Str"" + name + ""String_Node_Str""+ parentItem.getId()+ ""String_Node_Str"";
          final Drive.Files.List request=service.files().list();
          request.setQ(q);
          request.setMaxResults(MAX_RESULTS);
          do {
            FileList files=request.execute();
            final List<File> result=files.getItems();
            File _parentItem;
            if (result.size() == 0) {
              final File folder=new File();
              folder.setTitle(name);
              folder.setMimeType(FOLDER);
              final ParentReference parentReference=new ParentReference();
              parentReference.setId(parentItem.getId());
              folder.setParents(Arrays.asList(parentReference));
              _parentItem=service.files().insert(folder).execute();
              if (_parentItem == null) {
                throw new CloudsyncException(""String_Node_Str"" + name + ""String_Node_Str"");
              }
            }
 else             if (result.size() == 1) {
              _parentItem=result.get(0);
            }
 else {
              throw new CloudsyncException(""String_Node_Str"" + path + ""String_Node_Str"");
            }
            if (!_parentItem.getMimeType().equals(FOLDER)) {
              throw new CloudsyncException(""String_Node_Str"" + path + ""String_Node_Str"");
            }
            _addToCache(_parentItem,parentItem);
            parentItem=_parentItem;
            request.setPageToken(files.getNextPageToken());
          }
 while (request.getPageToken() != null && request.getPageToken().length() > 0);
        }
      }
      return parentItem;
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"" + path + ""String_Node_Str"",null,e,retryCount);
    }
  }
 while (true);
}","private File _getDriveFolder(final String path) throws CloudsyncException {
  int retryCount=0;
  do {
    try {
      File parentItem=service.files().get(""String_Node_Str"").execute();
      final String[] folderNames=StringUtils.split(path,SEPARATOR);
      for (      final String name : folderNames) {
        if (cacheParents.containsKey(parentItem.getId() + ':' + name)) {
          parentItem=cacheParents.get(parentItem.getId() + ':' + name);
        }
 else {
          final String q=""String_Node_Str"" + name + ""String_Node_Str""+ parentItem.getId()+ ""String_Node_Str"";
          final Drive.Files.List request=service.files().list();
          request.setQ(q);
          request.setMaxResults(MAX_RESULTS);
          do {
            FileList files=request.execute();
            final List<File> result=files.getItems();
            File _parentItem;
            if (result.size() == 0) {
              final File folder=new File();
              folder.setTitle(name);
              folder.setMimeType(FOLDER);
              final ParentReference parentReference=new ParentReference();
              parentReference.setId(parentItem.getId());
              folder.setParents(Arrays.asList(parentReference));
              _parentItem=service.files().insert(folder).execute();
              if (_parentItem == null) {
                throw new CloudsyncException(""String_Node_Str"" + name + ""String_Node_Str"");
              }
            }
 else             if (result.size() == 1) {
              _parentItem=result.get(0);
            }
 else {
              throw new CloudsyncException(""String_Node_Str"" + path + ""String_Node_Str"");
            }
            if (!_parentItem.getMimeType().equals(FOLDER)) {
              throw new CloudsyncException(""String_Node_Str"" + path + ""String_Node_Str"");
            }
            _addToCache(_parentItem,parentItem);
            parentItem=_parentItem;
            request.setPageToken(files.getNextPageToken());
          }
 while (request.getPageToken() != null && request.getPageToken().length() > 0);
        }
      }
      return parentItem;
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"" + path + ""String_Node_Str"",null,e,retryCount);
      if (retryCount < 0)       retryCount=0;
    }
  }
 while (true);
}",0.9899825783972126
166562,"@Override public void upload(final Handler handler,final Item item) throws CloudsyncException, FileIOException {
  initService(handler);
  String title=handler.getLocalProcessedTitle(item);
  File parentDriveItem=null;
  File driveItem;
  int retryCount=0;
  do {
    try {
      refreshCredential();
      parentDriveItem=_getDriveItem(item.getParent());
      final ParentReference parentReference=new ParentReference();
      parentReference.setId(parentDriveItem.getId());
      driveItem=new File();
      driveItem.setTitle(title);
      driveItem.setParents(Arrays.asList(parentReference));
      final LocalStreamData data=_prepareDriveItem(driveItem,item,handler,true);
      if (data == null) {
        driveItem=service.files().insert(driveItem).execute();
      }
 else {
        final InputStreamContent params=new InputStreamContent(FILE,data.getStream());
        params.setLength(data.getLength());
        Insert inserter=service.files().insert(driveItem,params);
        MediaHttpUploader uploader=inserter.getMediaHttpUploader();
        prepareUploader(uploader,data.getLength());
        driveItem=inserter.execute();
      }
      if (driveItem == null) {
        throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str"");
      }
      _addToCache(driveItem,null);
      item.setRemoteIdentifier(driveItem.getId());
      return;
    }
 catch (    final IOException e) {
      if (parentDriveItem != null) {
        for (int i=0; i < MIN_SEARCH_RETRIES; i++) {
          driveItem=_searchDriveItem(item.getParent(),title);
          if (driveItem != null) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + getExceptionMessage(e) + ""String_Node_Str"");
            item.setRemoteIdentifier(driveItem.getId());
            update(handler,item,true);
            return;
          }
          LOGGER.log(Level.WARNING,""String_Node_Str"" + getExceptionMessage(e) + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ MIN_SEARCH_RETRIES+ ""String_Node_Str""+ MIN_SEARCH_BREAK+ ""String_Node_Str"");
          sleep(MIN_SEARCH_BREAK);
        }
      }
      retryCount=validateException(""String_Node_Str"",item,e,retryCount);
    }
  }
 while (true);
}","@Override public void upload(final Handler handler,final Item item) throws CloudsyncException, FileIOException {
  initService(handler);
  String title=handler.getLocalProcessedTitle(item);
  File parentDriveItem=null;
  File driveItem;
  int retryCount=0;
  do {
    try {
      refreshCredential();
      parentDriveItem=_getDriveItem(item.getParent());
      final ParentReference parentReference=new ParentReference();
      parentReference.setId(parentDriveItem.getId());
      driveItem=new File();
      driveItem.setTitle(title);
      driveItem.setParents(Arrays.asList(parentReference));
      final LocalStreamData data=_prepareDriveItem(driveItem,item,handler,true);
      if (data == null) {
        driveItem=service.files().insert(driveItem).execute();
      }
 else {
        final InputStreamContent params=new InputStreamContent(FILE,data.getStream());
        params.setLength(data.getLength());
        Insert inserter=service.files().insert(driveItem,params);
        MediaHttpUploader uploader=inserter.getMediaHttpUploader();
        prepareUploader(uploader,data.getLength());
        driveItem=inserter.execute();
      }
      if (driveItem == null) {
        throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str"");
      }
      _addToCache(driveItem,null);
      item.setRemoteIdentifier(driveItem.getId());
      return;
    }
 catch (    final IOException e) {
      if (parentDriveItem != null) {
        for (int i=0; i < MIN_SEARCH_RETRIES; i++) {
          driveItem=_searchDriveItem(item.getParent(),title);
          if (driveItem != null) {
            LOGGER.log(Level.WARNING,""String_Node_Str"" + getExceptionMessage(e) + ""String_Node_Str"");
            item.setRemoteIdentifier(driveItem.getId());
            update(handler,item,true);
            return;
          }
          LOGGER.log(Level.WARNING,""String_Node_Str"" + getExceptionMessage(e) + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ MIN_SEARCH_RETRIES+ ""String_Node_Str""+ MIN_SEARCH_BREAK+ ""String_Node_Str"");
          sleep(MIN_SEARCH_BREAK);
        }
      }
      retryCount=validateException(""String_Node_Str"",item,e,retryCount);
      if (retryCount == -1)       return;
    }
  }
 while (true);
}",0.9905191873589164
166563,"@Override public void update(final Handler handler,final Item item,final boolean with_filedata) throws CloudsyncException, FileIOException {
  initService(handler);
  int retryCount=0;
  do {
    try {
      refreshCredential();
      if (item.isType(ItemType.FILE)) {
        final File _parentDriveItem=_getHistoryFolder(item);
        if (_parentDriveItem != null) {
          final File copyOfdriveItem=new File();
          final ParentReference _parentReference=new ParentReference();
          _parentReference.setId(_parentDriveItem.getId());
          copyOfdriveItem.setParents(Arrays.asList(_parentReference));
          final File _copyOfDriveItem=service.files().copy(item.getRemoteIdentifier(),copyOfdriveItem).execute();
          if (_copyOfDriveItem == null) {
            throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str"");
          }
        }
      }
      File driveItem=new File();
      final LocalStreamData data=_prepareDriveItem(driveItem,item,handler,with_filedata);
      if (data == null) {
        driveItem=service.files().update(item.getRemoteIdentifier(),driveItem).execute();
      }
 else {
        final InputStreamContent params=new InputStreamContent(FILE,data.getStream());
        params.setLength(data.getLength());
        Update updater=service.files().update(item.getRemoteIdentifier(),driveItem,params);
        MediaHttpUploader uploader=updater.getMediaHttpUploader();
        prepareUploader(uploader,data.getLength());
        driveItem=updater.execute();
      }
      if (driveItem == null) {
        throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str"");
      }
 else       if (driveItem.getLabels().getTrashed()) {
        throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str""+ driveItem.getId()+ ""String_Node_Str"");
      }
      _addToCache(driveItem,null);
      return;
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",item,e,retryCount);
    }
  }
 while (true);
}","@Override public void update(final Handler handler,final Item item,final boolean with_filedata) throws CloudsyncException, FileIOException {
  initService(handler);
  int retryCount=0;
  do {
    try {
      refreshCredential();
      if (item.isType(ItemType.FILE)) {
        final File _parentDriveItem=_getHistoryFolder(item);
        if (_parentDriveItem != null) {
          final File copyOfdriveItem=new File();
          final ParentReference _parentReference=new ParentReference();
          _parentReference.setId(_parentDriveItem.getId());
          copyOfdriveItem.setParents(Arrays.asList(_parentReference));
          final File _copyOfDriveItem=service.files().copy(item.getRemoteIdentifier(),copyOfdriveItem).execute();
          if (_copyOfDriveItem == null) {
            throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str"");
          }
        }
      }
      File driveItem=new File();
      final LocalStreamData data=_prepareDriveItem(driveItem,item,handler,with_filedata);
      if (data == null) {
        driveItem=service.files().update(item.getRemoteIdentifier(),driveItem).execute();
      }
 else {
        final InputStreamContent params=new InputStreamContent(FILE,data.getStream());
        params.setLength(data.getLength());
        Update updater=service.files().update(item.getRemoteIdentifier(),driveItem,params);
        MediaHttpUploader uploader=updater.getMediaHttpUploader();
        prepareUploader(uploader,data.getLength());
        driveItem=updater.execute();
      }
      if (driveItem == null) {
        throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str"");
      }
 else       if (driveItem.getLabels().getTrashed()) {
        throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str""+ driveItem.getId()+ ""String_Node_Str"");
      }
      _addToCache(driveItem,null);
      return;
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",item,e,retryCount);
      if (retryCount < 0)       retryCount=0;
    }
  }
 while (true);
}",0.988979396262578
166564,"@Override public void remove(final Handler handler,final Item item) throws CloudsyncException {
  initService(handler);
  int retryCount=0;
  do {
    try {
      refreshCredential();
      final File _parentDriveItem=_getHistoryFolder(item);
      if (_parentDriveItem != null) {
        final ParentReference parentReference=new ParentReference();
        parentReference.setId(_parentDriveItem.getId());
        File driveItem=new File();
        driveItem.setParents(Arrays.asList(parentReference));
        driveItem=service.files().patch(item.getRemoteIdentifier(),driveItem).execute();
        if (driveItem == null) {
          throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str"");
        }
      }
 else {
        service.files().delete(item.getRemoteIdentifier()).execute();
      }
      _removeFromCache(item.getRemoteIdentifier());
      return;
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",item,e,retryCount);
    }
  }
 while (true);
}","@Override public void remove(final Handler handler,final Item item) throws CloudsyncException {
  initService(handler);
  int retryCount=0;
  do {
    try {
      refreshCredential();
      final File _parentDriveItem=_getHistoryFolder(item);
      if (_parentDriveItem != null) {
        final ParentReference parentReference=new ParentReference();
        parentReference.setId(_parentDriveItem.getId());
        File driveItem=new File();
        driveItem.setParents(Arrays.asList(parentReference));
        driveItem=service.files().patch(item.getRemoteIdentifier(),driveItem).execute();
        if (driveItem == null) {
          throw new CloudsyncException(""String_Node_Str"" + item.getPath() + ""String_Node_Str"");
        }
      }
 else {
        service.files().delete(item.getRemoteIdentifier()).execute();
      }
      _removeFromCache(item.getRemoteIdentifier());
      return;
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",item,e,retryCount);
      if (retryCount < 0)       retryCount=0;
    }
  }
 while (true);
}",0.9781990521327014
166565,"@Override public List<RemoteItem> readFolder(final Handler handler,final Item parentItem) throws CloudsyncException {
  initService(handler);
  int retryCount=0;
  do {
    try {
      refreshCredential();
      final List<RemoteItem> child_items=new ArrayList<RemoteItem>();
      final List<File> childDriveItems=_readFolder(parentItem.getRemoteIdentifier());
      for (      final File child : childDriveItems) {
        child_items.add(_prepareBackupItem(parentItem,child,handler));
      }
      return child_items;
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",parentItem,e,retryCount);
    }
  }
 while (true);
}","@Override public List<RemoteItem> readFolder(final Handler handler,final Item parentItem) throws CloudsyncException {
  initService(handler);
  int retryCount=0;
  do {
    try {
      refreshCredential();
      final List<RemoteItem> child_items=new ArrayList<RemoteItem>();
      final List<File> childDriveItems=_readFolder(parentItem.getRemoteIdentifier());
      for (      final File child : childDriveItems) {
        child_items.add(_prepareBackupItem(parentItem,child,handler));
      }
      return child_items;
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",parentItem,e,retryCount);
      if (retryCount < 0)       retryCount=0;
    }
  }
 while (true);
}",0.9667149059334298
166566,"@Override public InputStream get(final Handler handler,final Item item) throws CloudsyncException {
  initService(handler);
  int retryCount=0;
  do {
    try {
      refreshCredential();
      final File driveItem=_getDriveItem(item);
      final String downloadUrl=driveItem.getDownloadUrl();
      final HttpResponse resp=service.getRequestFactory().buildGetRequest(new GenericUrl(downloadUrl)).execute();
      return resp.getContent();
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",item,e,retryCount);
    }
  }
 while (true);
}","@Override public InputStream get(final Handler handler,final Item item) throws CloudsyncException {
  initService(handler);
  int retryCount=0;
  do {
    try {
      refreshCredential();
      final File driveItem=_getDriveItem(item);
      final String downloadUrl=driveItem.getDownloadUrl();
      final HttpResponse resp=service.getRequestFactory().buildGetRequest(new GenericUrl(downloadUrl)).execute();
      return resp.getContent();
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",item,e,retryCount);
      if (retryCount < 0)       retryCount=0;
    }
  }
 while (true);
}",0.9619205298013244
166567,"private File _searchDriveItem(final Item parentItem,String title) throws CloudsyncException {
  int retryCount=0;
  do {
    try {
      final String q=""String_Node_Str"" + title + ""String_Node_Str""+ parentItem.getRemoteIdentifier()+ ""String_Node_Str"";
      final Drive.Files.List request=service.files().list();
      request.setQ(q);
      final List<File> result=request.execute().getItems();
      return result.size() == 0 ? null : result.get(0);
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",parentItem,e,retryCount);
    }
  }
 while (true);
}","private File _searchDriveItem(final Item parentItem,String title) throws CloudsyncException {
  int retryCount=0;
  do {
    try {
      final String q=""String_Node_Str"" + title + ""String_Node_Str""+ parentItem.getRemoteIdentifier()+ ""String_Node_Str"";
      final Drive.Files.List request=service.files().list();
      request.setQ(q);
      final List<File> result=request.execute().getItems();
      return result.size() == 0 ? null : result.get(0);
    }
 catch (    final IOException e) {
      retryCount=validateException(""String_Node_Str"",parentItem,e,retryCount);
      if (retryCount < 0)       retryCount=0;
    }
  }
 while (true);
}",0.9629629629629628
166568,"private int validateException(String name,Item item,IOException e,int count) throws CloudsyncException {
  if (e instanceof GoogleJsonResponseException) {
    StringBuffer info=new StringBuffer(""String_Node_Str"");
    info.append(name);
    if (item != null) {
      info.append(""String_Node_Str"");
      info.append(item.getInfo());
    }
    info.append(""String_Node_Str"");
switch (((GoogleJsonResponseException)e).getStatusCode()) {
case 404:
      throw new CloudsyncException(info.toString(),e);
  }
}
if (count < retries) {
  long currentValidate=System.currentTimeMillis();
  long current_retry_break=(currentValidate - lastValidate);
  if (lastValidate > 0 && current_retry_break < waitretry) {
    sleep(waitretry - current_retry_break);
  }
  lastValidate=currentValidate;
  count++;
  LOGGER.log(Level.WARNING,""String_Node_Str"" + getExceptionMessage(e) + ""String_Node_Str""+ name+ ""String_Node_Str""+ count+ ""String_Node_Str""+ retries);
  return count;
}
if (e instanceof UnknownHostException) {
  LOGGER.log(Level.WARNING,""String_Node_Str"" + getExceptionMessage(e) + ""String_Node_Str"");
  if (NetworkErrorType.ASK.equals(networkErrorBehavior)) {
    String answer=null;
    while (answer == null || (!""String_Node_Str"".equals(answer) && !""String_Node_Str"".equals(answer))) {
      System.out.print(""String_Node_Str"");
      try {
        answer=new BufferedReader(new InputStreamReader(System.in)).readLine().trim();
      }
 catch (      IOException _e) {
        break;
      }
    }
    if (""String_Node_Str"".equals(answer)) {
      lastValidate=System.currentTimeMillis();
      return 0;
    }
  }
 else   if (NetworkErrorType.CONTINUE.equals(networkErrorBehavior)) {
    lastValidate=System.currentTimeMillis();
    return 0;
  }
}
if (item != null) {
  throw new CloudsyncException(""String_Node_Str"" + name + ""String_Node_Str""+ item.getTypeName()+ ""String_Node_Str""+ item.getPath()+ ""String_Node_Str"",e);
}
 else {
  throw new CloudsyncException(""String_Node_Str"" + name,e);
}
}","private int validateException(String name,Item item,IOException e,int count) throws CloudsyncException {
  if (e instanceof GoogleJsonResponseException) {
    StringBuffer info=new StringBuffer(""String_Node_Str"");
    info.append(name);
    if (item != null) {
      info.append(""String_Node_Str"");
      info.append(item.getInfo());
    }
    info.append(""String_Node_Str"");
switch (((GoogleJsonResponseException)e).getStatusCode()) {
case 404:
      throw new CloudsyncException(info.toString(),e);
  }
}
if (count < retries) {
  long currentValidate=System.currentTimeMillis();
  long current_retry_break=(currentValidate - lastValidate);
  if (lastValidate > 0 && current_retry_break < waitretry) {
    sleep(waitretry - current_retry_break);
  }
  lastValidate=currentValidate;
  count++;
  LOGGER.log(Level.WARNING,""String_Node_Str"" + getExceptionMessage(e) + ""String_Node_Str""+ name+ ""String_Node_Str""+ count+ ""String_Node_Str""+ retries);
  return count;
}
if (e instanceof UnknownHostException) {
  LOGGER.log(Level.WARNING,""String_Node_Str"" + getExceptionMessage(e) + ""String_Node_Str"");
  if (NetworkErrorType.ASK.equals(networkErrorBehavior)) {
    String answer=null;
    while (answer == null || (!""String_Node_Str"".equals(answer) && !""String_Node_Str"".equals(answer))) {
      System.out.print(""String_Node_Str"");
      try {
        answer=new BufferedReader(new InputStreamReader(System.in)).readLine().trim();
      }
 catch (      IOException _e) {
        break;
      }
    }
    if (""String_Node_Str"".equals(answer)) {
      lastValidate=System.currentTimeMillis();
      return 0;
    }
  }
 else   if (NetworkErrorType.CONTINUE.equals(networkErrorBehavior)) {
    lastValidate=System.currentTimeMillis();
    return -1;
  }
}
if (item != null) {
  throw new CloudsyncException(""String_Node_Str"" + name + ""String_Node_Str""+ item.getTypeName()+ ""String_Node_Str""+ item.getPath()+ ""String_Node_Str"",e);
}
 else {
  throw new CloudsyncException(""String_Node_Str"" + name,e);
}
}",0.9992483086945628
166569,"private static Transaction.VisibilityLevel getVisibilityLevel(TVisibilityLevel tLevel){
switch (tLevel) {
case SNAPSHOT:
    return Transaction.VisibilityLevel.SNAPSHOT;
case SNAPSHOT_EXCLUDE_CURRENT:
  return Transaction.VisibilityLevel.SNAPSHOT_EXCLUDE_CURRENT;
default :
throw new IllegalArgumentException(""String_Node_Str"" + tLevel);
}
}","private static Transaction.VisibilityLevel getVisibilityLevel(TVisibilityLevel tLevel){
  if (tLevel == null) {
    return Transaction.VisibilityLevel.SNAPSHOT;
  }
switch (tLevel) {
case SNAPSHOT:
    return Transaction.VisibilityLevel.SNAPSHOT;
case SNAPSHOT_EXCLUDE_CURRENT:
  return Transaction.VisibilityLevel.SNAPSHOT_EXCLUDE_CURRENT;
default :
throw new IllegalArgumentException(""String_Node_Str"" + tLevel);
}
}",0.8985507246376812
166570,"public static Transaction unwrap(TTransaction thriftTx){
  return new Transaction(thriftTx.getReadPointer(),thriftTx.getTransactionId(),thriftTx.getWritePointer(),Longs.toArray(thriftTx.getInvalids()),Longs.toArray(thriftTx.getInProgress()),thriftTx.getFirstShort(),getTransactionType(thriftTx.getType()),Longs.toArray(thriftTx.getCheckpointWritePointers()),getVisibilityLevel(thriftTx.getVisibilityLevel()));
}","public static Transaction unwrap(TTransaction thriftTx){
  return new Transaction(thriftTx.getReadPointer(),thriftTx.getTransactionId(),thriftTx.getWritePointer(),thriftTx.getInvalids() == null ? EMPTY_LONG_ARRAY : Longs.toArray(thriftTx.getInvalids()),thriftTx.getInProgress() == null ? EMPTY_LONG_ARRAY : Longs.toArray(thriftTx.getInProgress()),thriftTx.getFirstShort(),getTransactionType(thriftTx.getType()),thriftTx.getCheckpointWritePointers() == null ? EMPTY_LONG_ARRAY : Longs.toArray(thriftTx.getCheckpointWritePointers()),getVisibilityLevel(thriftTx.getVisibilityLevel()));
}",0.7939698492462312
166571,"@Override public String toString(){
  return Objects.toStringHelper(this).add(""String_Node_Str"",visibilityUpperBound).add(""String_Node_Str"",expiration).add(""String_Node_Str"",type).toString();
}","@Override public String toString(){
  return Objects.toStringHelper(this).add(""String_Node_Str"",visibilityUpperBound).add(""String_Node_Str"",expiration).add(""String_Node_Str"",type).add(""String_Node_Str"",checkpointWritePointers).toString();
}",0.8914549653579676
166572,"@Override protected NavigableMap<Long,TransactionManager.InProgressTx> decodeInProgress(BinaryDecoder decoder) throws IOException {
  int size=decoder.readInt();
  NavigableMap<Long,TransactionManager.InProgressTx> inProgress=Maps.newTreeMap();
  while (size != 0) {
    for (int remaining=size; remaining > 0; --remaining) {
      long txId=decoder.readLong();
      long expiration=decoder.readLong();
      long visibilityUpperBound=decoder.readLong();
      int txTypeIdx=decoder.readInt();
      TransactionType txType;
      try {
        txType=TransactionType.values()[txTypeIdx];
      }
 catch (      ArrayIndexOutOfBoundsException e) {
        throw new IOException(""String_Node_Str"" + txTypeIdx);
      }
      int checkpointPointerSize=decoder.readInt();
      LongArrayList checkpointPointers=new LongArrayList(checkpointPointerSize);
      while (checkpointPointerSize != 0) {
        for (int checkpointRemaining=checkpointPointerSize; checkpointRemaining > 0; --checkpointRemaining) {
          checkpointPointers.add(decoder.readLong());
        }
        size=decoder.readInt();
      }
      inProgress.put(txId,new TransactionManager.InProgressTx(visibilityUpperBound,expiration,txType,checkpointPointers));
    }
    size=decoder.readInt();
  }
  return inProgress;
}","@Override protected NavigableMap<Long,TransactionManager.InProgressTx> decodeInProgress(BinaryDecoder decoder) throws IOException {
  int size=decoder.readInt();
  NavigableMap<Long,TransactionManager.InProgressTx> inProgress=Maps.newTreeMap();
  while (size != 0) {
    for (int remaining=size; remaining > 0; --remaining) {
      long txId=decoder.readLong();
      long expiration=decoder.readLong();
      long visibilityUpperBound=decoder.readLong();
      int txTypeIdx=decoder.readInt();
      TransactionType txType;
      try {
        txType=TransactionType.values()[txTypeIdx];
      }
 catch (      ArrayIndexOutOfBoundsException e) {
        throw new IOException(""String_Node_Str"" + txTypeIdx);
      }
      int checkpointPointerSize=decoder.readInt();
      LongArrayList checkpointPointers=new LongArrayList(checkpointPointerSize);
      while (checkpointPointerSize != 0) {
        for (int checkpointRemaining=checkpointPointerSize; checkpointRemaining > 0; --checkpointRemaining) {
          checkpointPointers.add(decoder.readLong());
        }
        checkpointPointerSize=decoder.readInt();
      }
      inProgress.put(txId,new TransactionManager.InProgressTx(visibilityUpperBound,expiration,txType,checkpointPointers));
    }
    size=decoder.readInt();
  }
  return inProgress;
}",0.9926782273603084
166573,"@Override protected void encodeInProgress(BinaryEncoder encoder,Map<Long,TransactionManager.InProgressTx> inProgress) throws IOException {
  if (!inProgress.isEmpty()) {
    encoder.writeInt(inProgress.size());
    for (    Map.Entry<Long,TransactionManager.InProgressTx> entry : inProgress.entrySet()) {
      encoder.writeLong(entry.getKey());
      encoder.writeLong(entry.getValue().getExpiration());
      encoder.writeLong(entry.getValue().getVisibilityUpperBound());
      encoder.writeInt(entry.getValue().getType().ordinal());
      LongArrayList checkpointPointers=entry.getValue().getCheckpointWritePointers();
      if (checkpointPointers == null && !checkpointPointers.isEmpty()) {
        encoder.writeInt(checkpointPointers.size());
        for (int i=0; i < checkpointPointers.size(); i++) {
          encoder.writeLong(checkpointPointers.getLong(i));
        }
      }
      encoder.writeInt(0);
    }
  }
  encoder.writeInt(0);
}","@Override protected void encodeInProgress(BinaryEncoder encoder,Map<Long,TransactionManager.InProgressTx> inProgress) throws IOException {
  if (!inProgress.isEmpty()) {
    encoder.writeInt(inProgress.size());
    for (    Map.Entry<Long,TransactionManager.InProgressTx> entry : inProgress.entrySet()) {
      encoder.writeLong(entry.getKey());
      encoder.writeLong(entry.getValue().getExpiration());
      encoder.writeLong(entry.getValue().getVisibilityUpperBound());
      encoder.writeInt(entry.getValue().getType().ordinal());
      LongArrayList checkpointPointers=entry.getValue().getCheckpointWritePointers();
      if (checkpointPointers != null && !checkpointPointers.isEmpty()) {
        encoder.writeInt(checkpointPointers.size());
        for (int i=0; i < checkpointPointers.size(); i++) {
          encoder.writeLong(checkpointPointers.getLong(i));
        }
      }
      encoder.writeInt(0);
    }
  }
  encoder.writeInt(0);
}",0.9989440337909188
166574,"/** 
 * Test full stack serialization for a TransactionManager migrating from DefaultSnapshotCodec to SnapshotCodecV3.
 */
@Test public void testDefaultToV3Migration() throws Exception {
  File testDir=tmpDir.newFolder(""String_Node_Str"");
  Configuration conf=new Configuration();
  conf.set(TxConstants.Persist.CFG_TX_SNAPHOT_CODEC_CLASSES,DefaultSnapshotCodec.class.getName());
  conf.set(TxConstants.Manager.CFG_TX_SNAPSHOT_LOCAL_DIR,testDir.getAbsolutePath());
  Injector injector=Guice.createInjector(new ConfigModule(conf),new DiscoveryModules().getSingleNodeModules(),new TransactionModules().getSingleNodeModules());
  TransactionManager txManager=injector.getInstance(TransactionManager.class);
  txManager.startAndWait();
  txManager.startLong();
  txManager.stopAndWait();
  TransactionStateStorage txStorage=injector.getInstance(TransactionStateStorage.class);
  txStorage.startAndWait();
  TransactionSnapshot snapshot=txStorage.getLatestSnapshot();
  assertNotNull(snapshot);
  assertEquals(1,snapshot.getInProgress().size());
  Map.Entry<Long,TransactionManager.InProgressTx> entry=snapshot.getInProgress().entrySet().iterator().next();
  assertNull(entry.getValue().getType());
  Configuration conf2=new Configuration();
  conf2.set(TxConstants.Manager.CFG_TX_SNAPSHOT_LOCAL_DIR,testDir.getAbsolutePath());
  conf2.setStrings(TxConstants.Persist.CFG_TX_SNAPHOT_CODEC_CLASSES,DefaultSnapshotCodec.class.getName(),SnapshotCodecV3.class.getName());
  Injector injector2=Guice.createInjector(new ConfigModule(conf2),new DiscoveryModules().getSingleNodeModules(),new TransactionModules().getSingleNodeModules());
  TransactionManager txManager2=injector2.getInstance(TransactionManager.class);
  txManager2.startAndWait();
  TransactionSnapshot snapshot2=txManager2.getCurrentState();
  assertEquals(1,snapshot2.getInProgress().size());
  Map.Entry<Long,TransactionManager.InProgressTx> inProgressTx=snapshot2.getInProgress().entrySet().iterator().next();
  assertEquals(TransactionType.LONG,inProgressTx.getValue().getType());
  txManager2.stopAndWait();
  TransactionStateStorage txStorage2=injector2.getInstance(TransactionStateStorage.class);
  txStorage2.startAndWait();
  TransactionSnapshot snapshot3=txStorage2.getLatestSnapshot();
  assertEquals(snapshot2.getInProgress(),snapshot3.getInProgress());
  assertEquals(snapshot2,snapshot3);
}","/** 
 * Test full stack serialization for a TransactionManager migrating from DefaultSnapshotCodec to SnapshotCodecV3.
 */
@Test public void testDefaultToV3Migration() throws Exception {
  File testDir=tmpDir.newFolder(""String_Node_Str"");
  Configuration conf=new Configuration();
  conf.set(TxConstants.Persist.CFG_TX_SNAPHOT_CODEC_CLASSES,DefaultSnapshotCodec.class.getName());
  conf.set(TxConstants.Manager.CFG_TX_SNAPSHOT_LOCAL_DIR,testDir.getAbsolutePath());
  Injector injector=Guice.createInjector(new ConfigModule(conf),new DiscoveryModules().getSingleNodeModules(),new TransactionModules().getSingleNodeModules());
  TransactionManager txManager=injector.getInstance(TransactionManager.class);
  txManager.startAndWait();
  txManager.startLong();
  txManager.stopAndWait();
  TransactionStateStorage txStorage=injector.getInstance(TransactionStateStorage.class);
  txStorage.startAndWait();
  TransactionSnapshot snapshot=txStorage.getLatestSnapshot();
  assertNotNull(snapshot);
  assertEquals(1,snapshot.getInProgress().size());
  Map.Entry<Long,TransactionManager.InProgressTx> entry=snapshot.getInProgress().entrySet().iterator().next();
  assertNull(entry.getValue().getType());
  txStorage.stopAndWait();
  Configuration conf2=new Configuration();
  conf2.set(TxConstants.Manager.CFG_TX_SNAPSHOT_LOCAL_DIR,testDir.getAbsolutePath());
  conf2.setStrings(TxConstants.Persist.CFG_TX_SNAPHOT_CODEC_CLASSES,DefaultSnapshotCodec.class.getName(),SnapshotCodecV3.class.getName());
  Injector injector2=Guice.createInjector(new ConfigModule(conf2),new DiscoveryModules().getSingleNodeModules(),new TransactionModules().getSingleNodeModules());
  TransactionManager txManager2=injector2.getInstance(TransactionManager.class);
  txManager2.startAndWait();
  TransactionSnapshot snapshot2=txManager2.getCurrentState();
  assertEquals(1,snapshot2.getInProgress().size());
  Map.Entry<Long,TransactionManager.InProgressTx> inProgressTx=snapshot2.getInProgress().entrySet().iterator().next();
  assertEquals(TransactionType.LONG,inProgressTx.getValue().getType());
  txManager2.stopAndWait();
  TransactionStateStorage txStorage2=injector2.getInstance(TransactionStateStorage.class);
  txStorage2.startAndWait();
  TransactionSnapshot snapshot3=txStorage2.getLatestSnapshot();
  assertEquals(snapshot2.getInProgress(),snapshot3.getInProgress());
  assertEquals(snapshot2,snapshot3);
  txStorage2.stopAndWait();
}",0.9884720184447704
166575,"public boolean isDeleted(Cell cell){
  return cell.getTimestamp() < familyDeleteTs;
}","public boolean isDeleted(Cell cell){
  return cell.getTimestamp() <= familyDeleteTs;
}",0.9941520467836256
166576,"@Test public void testRowDelete() throws Exception {
  HTable hTable=createTable(Bytes.toBytes(""String_Node_Str""),new byte[][]{TestBytes.family,TestBytes.family2});
  TransactionAwareHTable txTable=new TransactionAwareHTable(hTable,TxConstants.ConflictDetection.ROW);
  try {
    TransactionContext txContext=new TransactionContext(new InMemoryTxSystemClient(txManager),txTable);
    txContext.start();
    txTable.put(new Put(TestBytes.row).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    Get get=new Get(TestBytes.row);
    Result result=txTable.get(get);
    assertFalse(result.isEmpty());
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier2));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row));
    txContext.finish();
    txContext.start();
    result=txTable.get(new Get(TestBytes.row));
    assertTrue(result.isEmpty());
    result=txTable.get(new Get(TestBytes.row).addColumn(TestBytes.family,TestBytes.qualifier).addFamily(TestBytes.family2));
    assertTrue(result.isEmpty());
    ResultScanner scanner=txTable.getScanner(new Scan(TestBytes.row));
    assertNull(scanner.next());
    scanner.close();
    scanner=txTable.getScanner(new Scan(TestBytes.row).addColumn(TestBytes.family2,TestBytes.qualifier2));
    assertNull(scanner.next());
    scanner.close();
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row).add(TestBytes.family,TestBytes.qualifier,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value));
    txContext.finish();
    txContext.start();
    result=txTable.get(new Get(TestBytes.row));
    assertFalse(result.isEmpty());
    assertEquals(2,result.size());
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    scanner=txTable.getScanner(new Scan(TestBytes.row));
    Result result1=scanner.next();
    assertNotNull(result1);
    assertFalse(result1.isEmpty());
    assertEquals(2,result1.size());
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    scanner.close();
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row2).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row2).deleteFamily(TestBytes.family));
    txContext.finish();
    txContext.start();
    Result fam1Result=txTable.get(new Get(TestBytes.row2));
    assertFalse(fam1Result.isEmpty());
    assertEquals(2,fam1Result.size());
    assertArrayEquals(TestBytes.value,fam1Result.getValue(TestBytes.family2,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,fam1Result.getValue(TestBytes.family2,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row3).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row3).deleteFamily(TestBytes.family2));
    txContext.finish();
    txContext.start();
    Result fam2Result=txTable.get(new Get(TestBytes.row3));
    assertFalse(fam2Result.isEmpty());
    assertEquals(2,fam2Result.size());
    assertArrayEquals(TestBytes.value,fam2Result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,fam2Result.getValue(TestBytes.family,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    for (int i=0; i < 10; i++) {
      txTable.put(new Put(Bytes.toBytes(""String_Node_Str"" + i)).add(TestBytes.family,TestBytes.qualifier,Bytes.toBytes(i)).add(TestBytes.family2,TestBytes.qualifier2,Bytes.toBytes(i)));
    }
    txContext.finish();
    txContext.start();
    for (int i=1; i < 10; i+=2) {
      txTable.delete(new Delete(Bytes.toBytes(""String_Node_Str"" + i)));
    }
    txContext.finish();
    txContext.start();
    int cnt=0;
    ResultScanner zScanner=txTable.getScanner(new Scan(Bytes.toBytes(""String_Node_Str"")));
    Result res;
    while ((res=zScanner.next()) != null) {
      assertFalse(res.isEmpty());
      assertArrayEquals(Bytes.toBytes(""String_Node_Str"" + cnt),res.getRow());
      assertArrayEquals(Bytes.toBytes(cnt),res.getValue(TestBytes.family,TestBytes.qualifier));
      assertArrayEquals(Bytes.toBytes(cnt),res.getValue(TestBytes.family2,TestBytes.qualifier2));
      cnt+=2;
    }
  }
  finally {
    txTable.close();
  }
}","@Test public void testRowDelete() throws Exception {
  HTable hTable=createTable(Bytes.toBytes(""String_Node_Str""),new byte[][]{TestBytes.family,TestBytes.family2});
  TransactionAwareHTable txTable=new TransactionAwareHTable(hTable,TxConstants.ConflictDetection.ROW);
  try {
    TransactionContext txContext=new TransactionContext(new InMemoryTxSystemClient(txManager),txTable);
    txContext.start();
    txTable.put(new Put(TestBytes.row).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    Get get=new Get(TestBytes.row);
    Result result=txTable.get(get);
    assertFalse(result.isEmpty());
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier2));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row));
    txContext.finish();
    txContext.start();
    result=txTable.get(new Get(TestBytes.row));
    assertTrue(result.isEmpty());
    result=txTable.get(new Get(TestBytes.row).addColumn(TestBytes.family,TestBytes.qualifier).addFamily(TestBytes.family2));
    assertTrue(result.isEmpty());
    ResultScanner scanner=txTable.getScanner(new Scan(TestBytes.row));
    assertNull(scanner.next());
    scanner.close();
    scanner=txTable.getScanner(new Scan(TestBytes.row).addColumn(TestBytes.family2,TestBytes.qualifier2));
    assertNull(scanner.next());
    scanner.close();
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row).add(TestBytes.family,TestBytes.qualifier,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value));
    txContext.finish();
    txContext.start();
    result=txTable.get(new Get(TestBytes.row));
    assertFalse(result.isEmpty());
    assertEquals(2,result.size());
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    scanner=txTable.getScanner(new Scan(TestBytes.row));
    Result result1=scanner.next();
    assertNotNull(result1);
    assertFalse(result1.isEmpty());
    assertEquals(2,result1.size());
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    scanner.close();
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row2).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row2).deleteFamily(TestBytes.family));
    txContext.finish();
    txContext.start();
    Result fam1Result=txTable.get(new Get(TestBytes.row2));
    assertFalse(fam1Result.isEmpty());
    assertEquals(2,fam1Result.size());
    assertArrayEquals(TestBytes.value,fam1Result.getValue(TestBytes.family2,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,fam1Result.getValue(TestBytes.family2,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row3).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row3).deleteFamily(TestBytes.family2));
    txContext.finish();
    txContext.start();
    Result fam2Result=txTable.get(new Get(TestBytes.row3));
    assertFalse(fam2Result.isEmpty());
    assertEquals(2,fam2Result.size());
    assertArrayEquals(TestBytes.value,fam2Result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,fam2Result.getValue(TestBytes.family,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    for (int i=0; i < 10; i++) {
      txTable.put(new Put(Bytes.toBytes(""String_Node_Str"" + i)).add(TestBytes.family,TestBytes.qualifier,Bytes.toBytes(i)).add(TestBytes.family2,TestBytes.qualifier2,Bytes.toBytes(i)));
    }
    txContext.finish();
    txContext.start();
    for (int i=1; i < 10; i+=2) {
      txTable.delete(new Delete(Bytes.toBytes(""String_Node_Str"" + i)));
    }
    txContext.finish();
    txContext.start();
    int cnt=0;
    ResultScanner zScanner=txTable.getScanner(new Scan(Bytes.toBytes(""String_Node_Str"")));
    Result res;
    while ((res=zScanner.next()) != null) {
      assertFalse(res.isEmpty());
      assertArrayEquals(Bytes.toBytes(""String_Node_Str"" + cnt),res.getRow());
      assertArrayEquals(Bytes.toBytes(cnt),res.getValue(TestBytes.family,TestBytes.qualifier));
      assertArrayEquals(Bytes.toBytes(cnt),res.getValue(TestBytes.family2,TestBytes.qualifier2));
      cnt+=2;
    }
    txContext.start();
    txTable.put(new Put(TestBytes.row4).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txTable.delete(new Delete(TestBytes.row4));
    txContext.finish();
    txContext.start();
    Result row4Result=txTable.get(new Get(TestBytes.row4));
    assertTrue(row4Result.isEmpty());
    txContext.finish();
  }
  finally {
    txTable.close();
  }
}",0.9650605558943977
166577,"public boolean isDeleted(Cell cell){
  return cell.getTimestamp() < familyDeleteTs;
}","public boolean isDeleted(Cell cell){
  return cell.getTimestamp() <= familyDeleteTs;
}",0.9941520467836256
166578,"@Test public void testRowDelete() throws Exception {
  HTable hTable=createTable(Bytes.toBytes(""String_Node_Str""),new byte[][]{TestBytes.family,TestBytes.family2});
  TransactionAwareHTable txTable=new TransactionAwareHTable(hTable,TxConstants.ConflictDetection.ROW);
  try {
    TransactionContext txContext=new TransactionContext(new InMemoryTxSystemClient(txManager),txTable);
    txContext.start();
    txTable.put(new Put(TestBytes.row).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    Get get=new Get(TestBytes.row);
    Result result=txTable.get(get);
    assertFalse(result.isEmpty());
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier2));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row));
    txContext.finish();
    txContext.start();
    result=txTable.get(new Get(TestBytes.row));
    assertTrue(result.isEmpty());
    result=txTable.get(new Get(TestBytes.row).addColumn(TestBytes.family,TestBytes.qualifier).addFamily(TestBytes.family2));
    assertTrue(result.isEmpty());
    ResultScanner scanner=txTable.getScanner(new Scan(TestBytes.row));
    assertNull(scanner.next());
    scanner.close();
    scanner=txTable.getScanner(new Scan(TestBytes.row).addColumn(TestBytes.family2,TestBytes.qualifier2));
    assertNull(scanner.next());
    scanner.close();
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row).add(TestBytes.family,TestBytes.qualifier,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value));
    txContext.finish();
    txContext.start();
    result=txTable.get(new Get(TestBytes.row));
    assertFalse(result.isEmpty());
    assertEquals(2,result.size());
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    scanner=txTable.getScanner(new Scan(TestBytes.row));
    Result result1=scanner.next();
    assertNotNull(result1);
    assertFalse(result1.isEmpty());
    assertEquals(2,result1.size());
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    scanner.close();
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row2).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row2).deleteFamily(TestBytes.family));
    txContext.finish();
    txContext.start();
    Result fam1Result=txTable.get(new Get(TestBytes.row2));
    assertFalse(fam1Result.isEmpty());
    assertEquals(2,fam1Result.size());
    assertArrayEquals(TestBytes.value,fam1Result.getValue(TestBytes.family2,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,fam1Result.getValue(TestBytes.family2,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row3).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row3).deleteFamily(TestBytes.family2));
    txContext.finish();
    txContext.start();
    Result fam2Result=txTable.get(new Get(TestBytes.row3));
    assertFalse(fam2Result.isEmpty());
    assertEquals(2,fam2Result.size());
    assertArrayEquals(TestBytes.value,fam2Result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,fam2Result.getValue(TestBytes.family,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    for (int i=0; i < 10; i++) {
      txTable.put(new Put(Bytes.toBytes(""String_Node_Str"" + i)).add(TestBytes.family,TestBytes.qualifier,Bytes.toBytes(i)).add(TestBytes.family2,TestBytes.qualifier2,Bytes.toBytes(i)));
    }
    txContext.finish();
    txContext.start();
    for (int i=1; i < 10; i+=2) {
      txTable.delete(new Delete(Bytes.toBytes(""String_Node_Str"" + i)));
    }
    txContext.finish();
    txContext.start();
    int cnt=0;
    ResultScanner zScanner=txTable.getScanner(new Scan(Bytes.toBytes(""String_Node_Str"")));
    Result res;
    while ((res=zScanner.next()) != null) {
      assertFalse(res.isEmpty());
      assertArrayEquals(Bytes.toBytes(""String_Node_Str"" + cnt),res.getRow());
      assertArrayEquals(Bytes.toBytes(cnt),res.getValue(TestBytes.family,TestBytes.qualifier));
      assertArrayEquals(Bytes.toBytes(cnt),res.getValue(TestBytes.family2,TestBytes.qualifier2));
      cnt+=2;
    }
  }
  finally {
    txTable.close();
  }
}","@Test public void testRowDelete() throws Exception {
  HTable hTable=createTable(Bytes.toBytes(""String_Node_Str""),new byte[][]{TestBytes.family,TestBytes.family2});
  TransactionAwareHTable txTable=new TransactionAwareHTable(hTable,TxConstants.ConflictDetection.ROW);
  try {
    TransactionContext txContext=new TransactionContext(new InMemoryTxSystemClient(txManager),txTable);
    txContext.start();
    txTable.put(new Put(TestBytes.row).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    Get get=new Get(TestBytes.row);
    Result result=txTable.get(get);
    assertFalse(result.isEmpty());
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier2));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row));
    txContext.finish();
    txContext.start();
    result=txTable.get(new Get(TestBytes.row));
    assertTrue(result.isEmpty());
    result=txTable.get(new Get(TestBytes.row).addColumn(TestBytes.family,TestBytes.qualifier).addFamily(TestBytes.family2));
    assertTrue(result.isEmpty());
    ResultScanner scanner=txTable.getScanner(new Scan(TestBytes.row));
    assertNull(scanner.next());
    scanner.close();
    scanner=txTable.getScanner(new Scan(TestBytes.row).addColumn(TestBytes.family2,TestBytes.qualifier2));
    assertNull(scanner.next());
    scanner.close();
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row).add(TestBytes.family,TestBytes.qualifier,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value));
    txContext.finish();
    txContext.start();
    result=txTable.get(new Get(TestBytes.row));
    assertFalse(result.isEmpty());
    assertEquals(2,result.size());
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    scanner=txTable.getScanner(new Scan(TestBytes.row));
    Result result1=scanner.next();
    assertNotNull(result1);
    assertFalse(result1.isEmpty());
    assertEquals(2,result1.size());
    assertArrayEquals(TestBytes.value2,result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value,result.getValue(TestBytes.family2,TestBytes.qualifier2));
    scanner.close();
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row2).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row2).deleteFamily(TestBytes.family));
    txContext.finish();
    txContext.start();
    Result fam1Result=txTable.get(new Get(TestBytes.row2));
    assertFalse(fam1Result.isEmpty());
    assertEquals(2,fam1Result.size());
    assertArrayEquals(TestBytes.value,fam1Result.getValue(TestBytes.family2,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,fam1Result.getValue(TestBytes.family2,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    txTable.put(new Put(TestBytes.row3).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family,TestBytes.qualifier2,TestBytes.value2).add(TestBytes.family2,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txContext.finish();
    txContext.start();
    txTable.delete(new Delete(TestBytes.row3).deleteFamily(TestBytes.family2));
    txContext.finish();
    txContext.start();
    Result fam2Result=txTable.get(new Get(TestBytes.row3));
    assertFalse(fam2Result.isEmpty());
    assertEquals(2,fam2Result.size());
    assertArrayEquals(TestBytes.value,fam2Result.getValue(TestBytes.family,TestBytes.qualifier));
    assertArrayEquals(TestBytes.value2,fam2Result.getValue(TestBytes.family,TestBytes.qualifier2));
    txContext.finish();
    txContext.start();
    for (int i=0; i < 10; i++) {
      txTable.put(new Put(Bytes.toBytes(""String_Node_Str"" + i)).add(TestBytes.family,TestBytes.qualifier,Bytes.toBytes(i)).add(TestBytes.family2,TestBytes.qualifier2,Bytes.toBytes(i)));
    }
    txContext.finish();
    txContext.start();
    for (int i=1; i < 10; i+=2) {
      txTable.delete(new Delete(Bytes.toBytes(""String_Node_Str"" + i)));
    }
    txContext.finish();
    txContext.start();
    int cnt=0;
    ResultScanner zScanner=txTable.getScanner(new Scan(Bytes.toBytes(""String_Node_Str"")));
    Result res;
    while ((res=zScanner.next()) != null) {
      assertFalse(res.isEmpty());
      assertArrayEquals(Bytes.toBytes(""String_Node_Str"" + cnt),res.getRow());
      assertArrayEquals(Bytes.toBytes(cnt),res.getValue(TestBytes.family,TestBytes.qualifier));
      assertArrayEquals(Bytes.toBytes(cnt),res.getValue(TestBytes.family2,TestBytes.qualifier2));
      cnt+=2;
    }
    txContext.start();
    txTable.put(new Put(TestBytes.row4).add(TestBytes.family,TestBytes.qualifier,TestBytes.value).add(TestBytes.family2,TestBytes.qualifier2,TestBytes.value2));
    txTable.delete(new Delete(TestBytes.row4));
    txContext.finish();
    txContext.start();
    Result row4Result=txTable.get(new Get(TestBytes.row4));
    assertTrue(row4Result.isEmpty());
    txContext.finish();
  }
  finally {
    txTable.close();
  }
}",0.9650605558943977
166579,"/** 
 * Check if in-progress transactions need to be migrated to have expiration time and type, if so do the migration. This is required for backwards compatibility, when long running transactions were represented with expiration time -1. This can be removed when we stop supporting SnapshotCodec version 1.
 */
private Map<Long,InProgressTx> txnBackwardsCompatCheck(Map<Long,InProgressTx> inProgress){
  for (  Map.Entry<Long,InProgressTx> entry : inProgress.entrySet()) {
    if (entry.getValue().getExpiration() < 0) {
      long writePointer=entry.getKey();
      long expiration=getTxExpirationFromWritePointer(writePointer,defaultLongTimeout);
      InProgressTx compatTx=new InProgressTx(entry.getValue().getVisibilityUpperBound(),expiration,TransactionType.LONG);
      entry.setValue(compatTx);
    }
 else     if (entry.getValue().getType() == null) {
      InProgressTx compatTx=new InProgressTx(entry.getValue().getVisibilityUpperBound(),entry.getValue().getExpiration(),TransactionType.SHORT);
      entry.setValue(compatTx);
    }
  }
  return inProgress;
}","/** 
 * Check if in-progress transactions need to be migrated to have expiration time and type, if so do the migration. This is required for backwards compatibility, when long running transactions were represented with expiration time -1. This can be removed when we stop supporting SnapshotCodec version 1.
 */
public static Map<Long,InProgressTx> txnBackwardsCompatCheck(int defaultLongTimeout,long longTimeoutTolerance,Map<Long,InProgressTx> inProgress){
  for (  Map.Entry<Long,InProgressTx> entry : inProgress.entrySet()) {
    long writePointer=entry.getKey();
    long expiration=entry.getValue().getExpiration();
    if (entry.getValue().getType() == null && (expiration < 0 || (getTxExpirationFromWritePointer(writePointer,defaultLongTimeout) - expiration < longTimeoutTolerance))) {
      long newExpiration=getTxExpirationFromWritePointer(writePointer,defaultLongTimeout);
      InProgressTx compatTx=new InProgressTx(entry.getValue().getVisibilityUpperBound(),newExpiration,TransactionType.LONG);
      entry.setValue(compatTx);
    }
 else     if (entry.getValue().getType() == null) {
      InProgressTx compatTx=new InProgressTx(entry.getValue().getVisibilityUpperBound(),entry.getValue().getExpiration(),TransactionType.SHORT);
      entry.setValue(compatTx);
    }
  }
  return inProgress;
}",0.7305590584279109
166580,"/** 
 * Restore the initial in-memory transaction state from a snapshot.
 */
private void restoreSnapshot(TransactionSnapshot snapshot){
  LOG.info(""String_Node_Str"" + snapshot.getTimestamp());
  Preconditions.checkState(lastSnapshotTime == 0,""String_Node_Str"");
  Preconditions.checkState(readPointer == 0,""String_Node_Str"");
  Preconditions.checkState(lastWritePointer == 0,""String_Node_Str"");
  Preconditions.checkState(invalid.isEmpty(),""String_Node_Str"");
  Preconditions.checkState(inProgress.isEmpty(),""String_Node_Str"");
  Preconditions.checkState(committingChangeSets.isEmpty(),""String_Node_Str"");
  Preconditions.checkState(committedChangeSets.isEmpty(),""String_Node_Str"");
  LOG.info(""String_Node_Str"" + snapshot);
  lastSnapshotTime=snapshot.getTimestamp();
  readPointer=snapshot.getReadPointer();
  lastWritePointer=snapshot.getWritePointer();
  invalid.addAll(snapshot.getInvalid());
  inProgress.putAll(txnBackwardsCompatCheck(snapshot.getInProgress()));
  committingChangeSets.putAll(snapshot.getCommittingChangeSets());
  committedChangeSets.putAll(snapshot.getCommittedChangeSets());
}","/** 
 * Restore the initial in-memory transaction state from a snapshot.
 */
private void restoreSnapshot(TransactionSnapshot snapshot){
  LOG.info(""String_Node_Str"" + snapshot.getTimestamp());
  Preconditions.checkState(lastSnapshotTime == 0,""String_Node_Str"");
  Preconditions.checkState(readPointer == 0,""String_Node_Str"");
  Preconditions.checkState(lastWritePointer == 0,""String_Node_Str"");
  Preconditions.checkState(invalid.isEmpty(),""String_Node_Str"");
  Preconditions.checkState(inProgress.isEmpty(),""String_Node_Str"");
  Preconditions.checkState(committingChangeSets.isEmpty(),""String_Node_Str"");
  Preconditions.checkState(committedChangeSets.isEmpty(),""String_Node_Str"");
  LOG.info(""String_Node_Str"" + snapshot);
  lastSnapshotTime=snapshot.getTimestamp();
  readPointer=snapshot.getReadPointer();
  lastWritePointer=snapshot.getWritePointer();
  invalid.addAll(snapshot.getInvalid());
  inProgress.putAll(txnBackwardsCompatCheck(defaultLongTimeout,longTimeoutTolerance,snapshot.getInProgress()));
  committingChangeSets.putAll(snapshot.getCommittingChangeSets());
  committedChangeSets.putAll(snapshot.getCommittedChangeSets());
}",0.98220640569395
166581,"@Inject public TransactionManager(Configuration conf,@Nonnull TransactionStateStorage persistor,TxMetricsCollector txMetricsCollector){
  this.persistor=persistor;
  cleanupInterval=conf.getInt(TxConstants.Manager.CFG_TX_CLEANUP_INTERVAL,TxConstants.Manager.DEFAULT_TX_CLEANUP_INTERVAL);
  defaultTimeout=conf.getInt(TxConstants.Manager.CFG_TX_TIMEOUT,TxConstants.Manager.DEFAULT_TX_TIMEOUT);
  defaultLongTimeout=conf.getInt(TxConstants.Manager.CFG_TX_LONG_TIMEOUT,TxConstants.Manager.DEFAULT_TX_LONG_TIMEOUT);
  snapshotFrequencyInSeconds=conf.getLong(TxConstants.Manager.CFG_TX_SNAPSHOT_INTERVAL,TxConstants.Manager.DEFAULT_TX_SNAPSHOT_INTERVAL);
  snapshotRetainCount=Math.max(conf.getInt(TxConstants.Manager.CFG_TX_SNAPSHOT_RETAIN,TxConstants.Manager.DEFAULT_TX_SNAPSHOT_RETAIN),1);
  this.txMetricsCollector=txMetricsCollector;
  clear();
}","@Inject public TransactionManager(Configuration conf,@Nonnull TransactionStateStorage persistor,TxMetricsCollector txMetricsCollector){
  this.persistor=persistor;
  cleanupInterval=conf.getInt(TxConstants.Manager.CFG_TX_CLEANUP_INTERVAL,TxConstants.Manager.DEFAULT_TX_CLEANUP_INTERVAL);
  defaultTimeout=conf.getInt(TxConstants.Manager.CFG_TX_TIMEOUT,TxConstants.Manager.DEFAULT_TX_TIMEOUT);
  defaultLongTimeout=conf.getInt(TxConstants.Manager.CFG_TX_LONG_TIMEOUT,TxConstants.Manager.DEFAULT_TX_LONG_TIMEOUT);
  snapshotFrequencyInSeconds=conf.getLong(TxConstants.Manager.CFG_TX_SNAPSHOT_INTERVAL,TxConstants.Manager.DEFAULT_TX_SNAPSHOT_INTERVAL);
  snapshotRetainCount=Math.max(conf.getInt(TxConstants.Manager.CFG_TX_SNAPSHOT_RETAIN,TxConstants.Manager.DEFAULT_TX_SNAPSHOT_RETAIN),1);
  longTimeoutTolerance=conf.getLong(""String_Node_Str"",10000);
  this.txMetricsCollector=txMetricsCollector;
  clear();
}",0.9646522234891676
166582,"private static long getTxExpirationFromWritePointer(long writePointer,long timeoutInSeconds){
  return writePointer / TxConstants.MAX_TX_PER_MS + TimeUnit.SECONDS.toMillis(timeoutInSeconds);
}","public static long getTxExpirationFromWritePointer(long writePointer,long timeoutInSeconds){
  return writePointer / TxConstants.MAX_TX_PER_MS + TimeUnit.SECONDS.toMillis(timeoutInSeconds);
}",0.9765013054830288
166583,"/** 
 * Returns the maximum timestamp to use for time-range operations, based on the given transaction.
 * @param tx The current transaction
 * @return The maximum timestamp (exclusive) to use for time-range operations
 */
public static long getMaxVisibleTimestamp(Transaction tx){
  return tx.getWritePointer() + 1;
}","/** 
 * Returns the maximum timestamp to use for time-range operations, based on the given transaction.
 * @param tx The current transaction
 * @return The maximum timestamp (exclusive) to use for time-range operations
 */
public static long getMaxVisibleTimestamp(Transaction tx){
  return tx.getWritePointer() < Long.MAX_VALUE ? tx.getWritePointer() + 1 : tx.getWritePointer();
}",0.9098712446351932
166584,"protected Configuration getSnapshotConfiguration() throws IOException {
  Configuration conf=HBaseConfiguration.create();
  conf.unset(TxConstants.Persist.CFG_TX_SNAPHOT_CODEC_CLASSES);
  return conf;
}","protected Configuration getSnapshotConfiguration() throws IOException {
  Configuration conf=HBaseConfiguration.create(hConf);
  conf.unset(TxConstants.Persist.CFG_TX_SNAPHOT_CODEC_CLASSES);
  return conf;
}",0.9877750611246944
166585,"/** 
 * Try to initialize the Configuration and TransactionStateStorage instances.  Obtaining the Configuration may fail until ReactorServiceMain has been started.
 */
private void tryInit(){
  try {
    Configuration conf=getSnapshotConfiguration();
    if (conf != null) {
      this.storage=new HDFSTransactionStateStorage(hConf,new SnapshotCodecProvider(conf));
      this.storage.startAndWait();
      this.snapshotRefreshFrequency=conf.getLong(TxConstants.Manager.CFG_TX_SNAPSHOT_INTERVAL,TxConstants.Manager.DEFAULT_TX_SNAPSHOT_INTERVAL) * 1000;
      this.initialized=true;
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    LOG.info(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Try to initialize the Configuration and TransactionStateStorage instances.  Obtaining the Configuration may fail until ReactorServiceMain has been started.
 */
private void tryInit(){
  try {
    Configuration conf=getSnapshotConfiguration();
    if (conf != null) {
      this.storage=new HDFSTransactionStateStorage(conf,new SnapshotCodecProvider(conf));
      this.storage.startAndWait();
      this.snapshotRefreshFrequency=conf.getLong(TxConstants.Manager.CFG_TX_SNAPSHOT_INTERVAL,TxConstants.Manager.DEFAULT_TX_SNAPSHOT_INTERVAL) * 1000;
      this.initialized=true;
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    LOG.info(""String_Node_Str"" + e.getMessage());
  }
}",0.9979181124219292
166586,"/** 
 * Returns a singleton instance of the transaction state cache, performing lazy initialization if necessary.
 * @return A shared instance of the transaction state cache.
 */
@Override public TransactionStateCache get(){
  if (instance == null) {
synchronized (lock) {
      if (instance == null) {
        instance=new TransactionStateCache();
        instance.setConf(conf);
        instance.startAndWait();
      }
    }
  }
  return instance;
}","/** 
 * Returns a singleton instance of the transaction state cache, performing lazy initialization if necessary.
 * @return A shared instance of the transaction state cache.
 */
@Override public TransactionStateCache get(){
  if (instance == null) {
synchronized (lock) {
      if (instance == null) {
        instance=new TransactionStateCache();
        instance.setConf(conf);
        instance.start();
      }
    }
  }
  return instance;
}",0.992196209587514
166587,"@Override public ProcessingDirective heartbeat(){
  final long timeMillis=System.currentTimeMillis();
  return currentTrackedFile.map(trackedFile -> {
    handleHeartbeatWithHealthyFileSystem(timeMillis);
    return CONTINUE;
  }
).orElseGet(() -> {
    handleHeartbeatWithDeadFileSystem(timeMillis);
    return PAUSE;
  }
);
}","@Override public ProcessingDirective heartbeat(){
  final long timeMillis=System.currentTimeMillis();
  return currentTrackedFile.map(trackedFile -> {
    return handleHeartbeatWithHealthyFileSystem(timeMillis);
  }
).orElseGet(() -> {
    return timeMillis - lastFixAttempt > reconnectDelay ? attemptRecovery(timeMillis) : PAUSE;
  }
);
}",0.7537537537537538
166588,"private void possiblySyncAndOrRoll(final long time) throws IOException {
  final TrackedFile trackedFile=currentTrackedFile.get();
  if (trackedFile.recordsSinceLastSync >= syncEveryRecords || time - trackedFile.lastSyncTime >= syncEveryMillis && trackedFile.recordsSinceLastSync > 0) {
    sync(time,trackedFile);
    possiblyRoll(time);
  }
 else   if (trackedFile.recordsSinceLastSync == 0) {
    trackedFile.lastSyncTime=time;
    possiblyRoll(time);
  }
}","private void possiblySyncAndOrRoll(final long time) throws IOException {
  final TrackedFile trackedFile=currentTrackedFile.get();
  if (time > trackedFile.projectedCloseTime) {
    if (trackedFile.totalRecords > 0) {
      trackedFile.divolteFile.closeAndPublish();
    }
 else {
      trackedFile.divolteFile.discard();
    }
    currentTrackedFile=Optional.of(new TrackedFile(manager.createFile(newFileName())));
  }
 else   if (trackedFile.recordsSinceLastSync >= syncEveryRecords || time - trackedFile.lastSyncTime >= syncEveryMillis && trackedFile.recordsSinceLastSync > 0) {
    sync(time,trackedFile);
  }
 else   if (trackedFile.recordsSinceLastSync == 0) {
    trackedFile.lastSyncTime=time;
  }
}",0.7060839760068551
166589,"private void handleHeartbeatWithHealthyFileSystem(final long timeMillis){
  try {
    possiblySyncAndOrRoll(timeMillis);
  }
 catch (  final IOException e) {
    markFileSystemUnavailable(timeMillis);
    logger.error(""String_Node_Str"" + reconnectDelay + ""String_Node_Str"",e);
  }
}","private ProcessingDirective handleHeartbeatWithHealthyFileSystem(final long timeMillis){
  try {
    possiblySyncAndOrRoll(timeMillis);
    return CONTINUE;
  }
 catch (  final IOException e) {
    markFileSystemUnavailable(timeMillis);
    logger.error(""String_Node_Str"" + reconnectDelay + ""String_Node_Str"",e);
    return PAUSE;
  }
}",0.9029126213592232
166590,"private void attemptRecovery(final long timeMillis){
  logger.info(""String_Node_Str"");
  try {
    final TrackedFile trackedFile=new TrackedFile(manager.createFile(newFileName()));
    currentTrackedFile=Optional.of(trackedFile);
    logger.info(""String_Node_Str"",trackedFile);
  }
 catch (  final IOException e) {
    logger.error(""String_Node_Str"" + reconnectDelay + ""String_Node_Str"",e);
    markFileSystemUnavailable(timeMillis);
  }
}","private ProcessingDirective attemptRecovery(final long timeMillis){
  logger.info(""String_Node_Str"");
  try {
    final TrackedFile trackedFile=new TrackedFile(manager.createFile(newFileName()));
    currentTrackedFile=Optional.of(trackedFile);
    logger.info(""String_Node_Str"",trackedFile);
    return CONTINUE;
  }
 catch (  final IOException e) {
    logger.error(""String_Node_Str"" + reconnectDelay + ""String_Node_Str"",e);
    markFileSystemUnavailable(timeMillis);
    return PAUSE;
  }
}",0.9356223175965666
166591,"public static TrackingJavaScriptResource create(final ValidatedConfiguration vc,final String sourceName) throws IOException {
  final BrowserSourceConfiguration browserSourceConfiguration=vc.configuration().getSourceConfiguration(sourceName,BrowserSourceConfiguration.class);
  return new TrackingJavaScriptResource(browserSourceConfiguration.javascript.name,createScriptConstants(browserSourceConfiguration),browserSourceConfiguration.javascript.debug);
}","public static TrackingJavaScriptResource create(final ValidatedConfiguration vc,final String sourceName) throws IOException {
  final BrowserSourceConfiguration browserSourceConfiguration=vc.configuration().getSourceConfiguration(sourceName,BrowserSourceConfiguration.class);
  return new TrackingJavaScriptResource(""String_Node_Str"",createScriptConstants(browserSourceConfiguration),browserSourceConfiguration.javascript.debug);
}",0.9334836527621196
166592,"public SchemaRegistry(final ValidatedConfiguration vc){
  final ImmutableMap<String,MappingConfiguration> mappings=vc.configuration().mappings;
  final ImmutableMap<String,Optional<String>> schemaLocationsByMapping=ImmutableMap.copyOf(Maps.transformValues(mappings,config -> config.schemaFile));
  logger.debug(""String_Node_Str"",schemaLocationsByMapping.keySet());
  final ImmutableMap<Optional<String>,Schema> schemasByLocation=schemaLocationsByMapping.values().stream().distinct().map(schemaLocation -> Maps.immutableEntry(schemaLocation,loadSchema(schemaLocation))).collect(MoreCollectors.toImmutableMap());
  schemasByMappingName=ImmutableMap.copyOf(Maps.transformValues(schemaLocationsByMapping,schemasByLocation::get));
  logger.info(""String_Node_Str"",schemasByMappingName.keySet());
  schemasBySinkName=mappings.values().stream().flatMap(config -> config.sinks.stream().map(sink -> Maps.immutableEntry(sink,schemasByLocation.get(config.schemaFile)))).collect(MoreCollectors.toImmutableMap());
  logger.info(""String_Node_Str"",schemasBySinkName.keySet());
}","public SchemaRegistry(final ValidatedConfiguration vc){
  final ImmutableMap<String,MappingConfiguration> mappings=vc.configuration().mappings;
  final ImmutableMap<String,Optional<String>> schemaLocationsByMapping=ImmutableMap.copyOf(Maps.transformValues(mappings,config -> config.schemaFile));
  logger.debug(""String_Node_Str"",schemaLocationsByMapping.keySet());
  final ImmutableMap<Optional<String>,Schema> schemasByLocation=schemaLocationsByMapping.values().stream().distinct().map(schemaLocation -> Maps.immutableEntry(schemaLocation,loadSchema(schemaLocation))).collect(MoreCollectors.toImmutableMap());
  schemasByMappingName=ImmutableMap.copyOf(Maps.transformValues(schemaLocationsByMapping,schemasByLocation::get));
  logger.info(""String_Node_Str"",schemasByMappingName.keySet());
  schemasBySinkName=mappings.values().stream().flatMap(config -> config.sinks.stream().map(sink -> Maps.immutableEntry(sink,schemasByLocation.get(config.schemaFile)))).distinct().collect(MoreCollectors.toImmutableMap());
  logger.info(""String_Node_Str"",schemasBySinkName.keySet());
}",0.994847775175644
166593,"@Override @Nullable public JsonToken nextToken() throws IOException {
  final JsonToken nextToken;
  if (_closed) {
    nextToken=null;
  }
 else {
    _tokenInputTotal=_currInputProcessed + _inputPtr - 1;
    _tokenInputRow=_currInputRow;
    _tokenInputCol=_inputPtr - _currInputRowStart - 1;
    final int recordType;
    if (pendingRecordType.isPresent()) {
      recordType=pendingRecordType.get();
      pendingRecordType=Optional.empty();
    }
 else {
      recordType=nextChar();
    }
    if ('.' == recordType) {
      if (_parsingContext.inObject()) {
        nextToken=JsonToken.END_OBJECT;
      }
 else       if (_parsingContext.inArray()) {
        nextToken=JsonToken.END_ARRAY;
      }
 else {
        _reportError(""String_Node_Str"");
        nextToken=null;
      }
      _parsingContext=_parsingContext.getParent();
    }
 else     if (_currToken != JsonToken.FIELD_NAME && _parsingContext.inObject()) {
      nextToken=JsonToken.FIELD_NAME;
      _finishString();
      _parsingContext.setCurrentName(_textBuffer.contentsAsString());
      pendingRecordType=Optional.of(recordType);
    }
 else {
switch (recordType) {
case -1:
        _handleEOF();
      close();
    nextToken=null;
  break;
case 'a':
nextToken=JsonToken.START_ARRAY;
_parsingContext=_parsingContext.createChildArrayContext(_tokenInputRow,_tokenInputCol);
break;
case 'A':
case 'S':
case 'T':
case 'F':
case 'N':
case 'D':
case 'J':
case 'O':
nextToken=JsonToken.START_OBJECT;
_parsingContext=_parsingContext.createChildObjectContext(_tokenInputRow,_tokenInputCol);
pendingRecordType=Optional.of(Character.toLowerCase(recordType));
break;
case 'o':
nextToken=JsonToken.START_OBJECT;
_parsingContext=_parsingContext.createChildObjectContext(_tokenInputRow,_tokenInputCol);
pendingRecordType=PENDING_END_OBJECT;
break;
case 's':
nextToken=JsonToken.VALUE_STRING;
_finishString();
break;
case 't':
nextToken=JsonToken.VALUE_TRUE;
break;
case 'f':
nextToken=JsonToken.VALUE_FALSE;
break;
case 'n':
nextToken=JsonToken.VALUE_NULL;
break;
case 'd':
nextToken=JsonToken.VALUE_NUMBER_INT;
nextIntegerRecord();
break;
case 'j':
nextToken=nextNumberRecord();
break;
default :
throw _constructError(""String_Node_Str"" + (char)recordType);
}
}
}
_currToken=nextToken;
return nextToken;
}","@Override @Nullable public JsonToken nextToken() throws IOException {
  final JsonToken nextToken;
  if (_closed) {
    nextToken=null;
  }
 else {
    _tokenInputTotal=_currInputProcessed + _inputPtr - 1;
    _tokenInputRow=_currInputRow;
    _tokenInputCol=_inputPtr - _currInputRowStart - 1;
    final int recordType;
    if (pendingRecordType.isPresent()) {
      recordType=pendingRecordType.get();
      pendingRecordType=Optional.empty();
    }
 else {
      recordType=nextChar();
    }
    if (JsonToken.FIELD_NAME == _currToken) {
      _nameCopied=false;
    }
    if ('.' == recordType) {
      if (_parsingContext.inObject()) {
        nextToken=JsonToken.END_OBJECT;
      }
 else       if (_parsingContext.inArray()) {
        nextToken=JsonToken.END_ARRAY;
      }
 else {
        _reportError(""String_Node_Str"");
        nextToken=null;
      }
      _parsingContext=_parsingContext.getParent();
    }
 else     if (_currToken != JsonToken.FIELD_NAME && _parsingContext.inObject()) {
      nextToken=JsonToken.FIELD_NAME;
      _finishString();
      _parsingContext.setCurrentName(_textBuffer.contentsAsString());
      pendingRecordType=Optional.of(recordType);
    }
 else {
switch (recordType) {
case -1:
        _handleEOF();
      close();
    nextToken=null;
  break;
case 'a':
nextToken=JsonToken.START_ARRAY;
_parsingContext=_parsingContext.createChildArrayContext(_tokenInputRow,_tokenInputCol);
break;
case 'A':
case 'S':
case 'T':
case 'F':
case 'N':
case 'D':
case 'J':
case 'O':
nextToken=JsonToken.START_OBJECT;
_parsingContext=_parsingContext.createChildObjectContext(_tokenInputRow,_tokenInputCol);
pendingRecordType=Optional.of(Character.toLowerCase(recordType));
break;
case 'o':
nextToken=JsonToken.START_OBJECT;
_parsingContext=_parsingContext.createChildObjectContext(_tokenInputRow,_tokenInputCol);
pendingRecordType=PENDING_END_OBJECT;
break;
case 's':
nextToken=JsonToken.VALUE_STRING;
_finishString();
break;
case 't':
nextToken=JsonToken.VALUE_TRUE;
break;
case 'f':
nextToken=JsonToken.VALUE_FALSE;
break;
case 'n':
nextToken=JsonToken.VALUE_NULL;
break;
case 'd':
nextToken=JsonToken.VALUE_NUMBER_INT;
nextIntegerRecord();
break;
case 'j':
nextToken=nextNumberRecord();
break;
default :
throw _constructError(""String_Node_Str"" + (char)recordType);
}
}
}
_currToken=nextToken;
return nextToken;
}",0.9832790445168296
166594,"@Override public ProcessingDirective process(final HttpServerExchange exchange){
  final GenericRecord avroRecord=mapper.newRecordFromExchange(exchange);
  final AvroRecordBuffer avroBuffer=AvroRecordBuffer.fromRecord(exchange.getAttachment(PARTY_COOKIE_KEY),exchange.getAttachment(SESSION_COOKIE_KEY),exchange.getAttachment(REQUEST_START_TIME_KEY),exchange.getAttachment(COOKIE_UTC_OFFSET_KEY),avroRecord);
  final int requestHashCode=Objects.hash(exchange.getAttachment(PARTY_COOKIE_KEY),exchange.getAttachment(SESSION_COOKIE_KEY),exchange.getAttachment(PAGE_VIEW_ID_KEY),exchange.getAttachment(EVENT_ID_KEY));
  final boolean duplicate=memory.observeAndReturnDuplicity(requestHashCode);
  if (duplicate) {
    if (logger.isDebugEnabled()) {
      final String queryString=exchange.getQueryString();
      final String requestUrl=exchange.getRequestURL();
      final String fullUrl=Strings.isNullOrEmpty(queryString) ? requestUrl : requestUrl + '?' + queryString;
      logger.debug(""String_Node_Str"",exchange.getSourceAddress(),fullUrl);
    }
    if (keepDuplicates) {
      exchange.putAttachment(DUPLICATE_EVENT_KEY,true);
      doProcess(exchange,avroRecord,avroBuffer);
    }
  }
 else {
    exchange.putAttachment(DUPLICATE_EVENT_KEY,false);
    doProcess(exchange,avroRecord,avroBuffer);
  }
  return CONTINUE;
}","@Override public ProcessingDirective process(final HttpServerExchange exchange){
  final int requestHashCode=Objects.hash(exchange.getAttachment(PARTY_COOKIE_KEY),exchange.getAttachment(SESSION_COOKIE_KEY),exchange.getAttachment(PAGE_VIEW_ID_KEY),exchange.getAttachment(EVENT_ID_KEY));
  final boolean duplicate=memory.observeAndReturnDuplicity(requestHashCode);
  exchange.putAttachment(DUPLICATE_EVENT_KEY,duplicate);
  final GenericRecord avroRecord=mapper.newRecordFromExchange(exchange);
  final AvroRecordBuffer avroBuffer=AvroRecordBuffer.fromRecord(exchange.getAttachment(PARTY_COOKIE_KEY),exchange.getAttachment(SESSION_COOKIE_KEY),exchange.getAttachment(REQUEST_START_TIME_KEY),exchange.getAttachment(COOKIE_UTC_OFFSET_KEY),avroRecord);
  if (!duplicate || keepDuplicates) {
    doProcess(exchange,avroRecord,avroBuffer);
  }
  return CONTINUE;
}",0.4534189995410739
166595,"@Test public void shouldCastValueFromComplexMappingToSchemaType() throws IOException, UnirestException {
  Schema schema=schemaFromClassPath(""String_Node_Str"");
  Config config=ConfigFactory.load(""String_Node_Str"");
  RecordMapper maker=new RecordMapper(schema,config,ConfigFactory.load(),Optional.empty());
  setupExchange(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  GenericRecord record=maker.newRecordFromExchange(theExchange);
  assertEquals(Integer.valueOf(-42),record.get(""String_Node_Str""));
  assertEquals(Boolean.valueOf(true),record.get(""String_Node_Str""));
  assertEquals(Double.valueOf(3.14159265359),record.get(""String_Node_Str""));
  assertEquals(Long.valueOf(34359738368L),record.get(""String_Node_Str""));
  assertEquals(Integer.valueOf(42),record.get(""String_Node_Str""));
  assertEquals(Boolean.valueOf(false),record.get(""String_Node_Str""));
  assertEquals(Double.valueOf(3.14159265359),record.get(""String_Node_Str""));
  assertEquals(Long.valueOf(34359738368L),record.get(""String_Node_Str""));
  assertEquals(Integer.valueOf(42),record.get(""String_Node_Str""));
  assertEquals(Boolean.valueOf(true),record.get(""String_Node_Str""));
}","@Test public void shouldCastValueFromComplexMappingToSchemaType() throws IOException, UnirestException {
  Schema schema=schemaFromClassPath(""String_Node_Str"");
  Config config=ConfigFactory.load(""String_Node_Str"");
  RecordMapper maker=new RecordMapper(schema,config,ConfigFactory.load(),Optional.empty());
  setupExchange(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  GenericRecord record=maker.newRecordFromExchange(theExchange);
  assertEquals(Integer.valueOf(-42),record.get(""String_Node_Str""));
  assertEquals(Boolean.valueOf(true),record.get(""String_Node_Str""));
  assertEquals(Double.valueOf(1.6180339887498948482),record.get(""String_Node_Str""));
  assertEquals(Long.valueOf(34359738368L),record.get(""String_Node_Str""));
  assertEquals(Integer.valueOf(42),record.get(""String_Node_Str""));
  assertEquals(Boolean.valueOf(false),record.get(""String_Node_Str""));
  assertEquals(Double.valueOf(1.6180339887498948482),record.get(""String_Node_Str""));
  assertEquals(Long.valueOf(34359738368L),record.get(""String_Node_Str""));
  assertEquals(Integer.valueOf(42),record.get(""String_Node_Str""));
  assertEquals(Boolean.valueOf(true),record.get(""String_Node_Str""));
}",0.9777015437392796
166596,"@Override public ProcessingDirective process(AvroRecordBuffer record){
  if (lastHdfsResult == SUCCESS) {
    lastHdfsResult=fileStrategy.append(record);
  }
  return CONTINUE;
}","@Override public ProcessingDirective process(AvroRecordBuffer record){
  if (lastHdfsResult == SUCCESS) {
    return (lastHdfsResult=fileStrategy.append(record)) == SUCCESS ? CONTINUE : PAUSE;
  }
 else {
    return PAUSE;
  }
}",0.8078817733990148
166597,"private Optional<String> groupFromMatcher(final Matcher matcher,final String group){
  return matcher.matches() ? Optional.of(matcher.group(group)) : Optional.empty();
}","private Optional<String> groupFromMatcher(final Matcher matcher,final String group){
  return matcher.matches() ? Optional.ofNullable(matcher.group(group)) : Optional.empty();
}",0.976878612716763
166598,"private void deleteQuietly(Path p){
  try {
    Files.delete(p);
  }
 catch (  Exception e) {
  }
}","private void deleteQuietly(Path p){
  try {
    Files.delete(p);
  }
 catch (  final Exception e) {
    logger.debug(""String_Node_Str"" + p,e);
  }
}",0.8016194331983806
166599,"public GenericRecordMaker(Schema schema,Config config){
  Objects.requireNonNull(config);
  this.partyIdCookie=config.getString(""String_Node_Str"");
  this.sessionIdCookie=config.getString(""String_Node_Str"");
  this.pageViewIdCookie=config.getString(""String_Node_Str"");
  final int version=config.getInt(""String_Node_Str"");
  checkVersion(version);
  this.regexes=regexMapFromConfig(config);
  this.setters=setterListFromConfig(config);
  this.schema=Objects.requireNonNull(schema);
}","public GenericRecordMaker(Schema schema,Config schemaConfig,Config globalConfig){
  Objects.requireNonNull(schemaConfig);
  Objects.requireNonNull(globalConfig);
  this.partyIdCookie=globalConfig.getString(""String_Node_Str"");
  this.sessionIdCookie=globalConfig.getString(""String_Node_Str"");
  this.pageViewIdCookie=globalConfig.getString(""String_Node_Str"");
  final int version=schemaConfig.getInt(""String_Node_Str"");
  checkVersion(version);
  this.regexes=regexMapFromConfig(schemaConfig);
  this.setters=setterListFromConfig(schemaConfig);
  this.schema=Objects.requireNonNull(schema);
}",0.8845437616387337
166600,"public IncomingRequestProcessingPool(final Config config){
  final int numThreads=config.getInt(""String_Node_Str"");
  final ThreadGroup threadGroup=new ThreadGroup(""String_Node_Str"");
  final ThreadFactory factory=createThreadFactory(threadGroup,""String_Node_Str"");
  final ExecutorService executorService=Executors.newFixedThreadPool(numThreads,factory);
  final Schema schema=schemaFromConfig(config);
  final KafkaFlushingPool kafkaFlushingPool=config.getBoolean(""String_Node_Str"") ? new KafkaFlushingPool(config) : null;
  final HdfsFlushingPool hdfsFlushingPool=config.getBoolean(""String_Node_Str"") ? new HdfsFlushingPool(config,schema) : null;
  final Config schemaMappingConfig;
  if (config.hasPath(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    schemaMappingConfig=config;
  }
 else {
    logger.info(""String_Node_Str"");
    schemaMappingConfig=ConfigFactory.load(""String_Node_Str"");
  }
  this.processors=Stream.generate(() -> new IncomingRequestProcessor(schemaMappingConfig,kafkaFlushingPool,hdfsFlushingPool,schema)).limit(numThreads).collect(Collectors.toCollection(() -> new ArrayList<>(numThreads)));
  this.processors.forEach((processor) -> scheduleQueueReader(executorService,processor.getQueueReader()));
}","public IncomingRequestProcessingPool(final Config config){
  final int numThreads=config.getInt(""String_Node_Str"");
  final ThreadGroup threadGroup=new ThreadGroup(""String_Node_Str"");
  final ThreadFactory factory=createThreadFactory(threadGroup,""String_Node_Str"");
  final ExecutorService executorService=Executors.newFixedThreadPool(numThreads,factory);
  final Schema schema=schemaFromConfig(config);
  final KafkaFlushingPool kafkaFlushingPool=config.getBoolean(""String_Node_Str"") ? new KafkaFlushingPool(config) : null;
  final HdfsFlushingPool hdfsFlushingPool=config.getBoolean(""String_Node_Str"") ? new HdfsFlushingPool(config,schema) : null;
  this.processors=Stream.generate(() -> new IncomingRequestProcessor(config,kafkaFlushingPool,hdfsFlushingPool,schema)).limit(numThreads).collect(Collectors.toCollection(() -> new ArrayList<>(numThreads)));
  this.processors.forEach((processor) -> scheduleQueueReader(executorService,processor.getQueueReader()));
}",0.8743764172335601
166601,"public IncomingRequestProcessor(final Config schemaMappingConfig,@Nullable final KafkaFlushingPool kafkaFlushingPool,@Nullable final HdfsFlushingPool hdfsFlushingPool,final Schema schema){
  this.queue=new LinkedBlockingQueue<>();
  this.kafkaFlushingPool=kafkaFlushingPool;
  this.hdfsFlushingPool=hdfsFlushingPool;
  this.maker=new GenericRecordMaker(Objects.requireNonNull(schema),Objects.requireNonNull(schemaMappingConfig));
}","public IncomingRequestProcessor(final Config config,@Nullable final KafkaFlushingPool kafkaFlushingPool,@Nullable final HdfsFlushingPool hdfsFlushingPool,final Schema schema){
  this.queue=new LinkedBlockingQueue<>();
  this.kafkaFlushingPool=kafkaFlushingPool;
  this.hdfsFlushingPool=hdfsFlushingPool;
  final Config schemaMappingConfig=schemaMappingConfigFromConfig(Objects.requireNonNull(config));
  this.maker=new GenericRecordMaker(Objects.requireNonNull(schema),schemaMappingConfig,config);
}",0.8129032258064516
166602,"@Override public CharSequence getPageTitle(int position){
}","@Override public CharSequence getPageTitle(int position){
  if (position < data.getCount()) {
    Object item=data.getItem(position);
    if (item instanceof BlobDescriptor) {
      return ((BlobDescriptor)item).key;
    }
    if (item instanceof Slob.Blob) {
      return ((Blob)item).key;
    }
  }
  return ""String_Node_Str"";
}",0.3033419023136247
166603,"@Transactional(readOnly=false) public SurveyDefinition surveyDefinition_merge(SurveyDefinition surveyDefinition){
  if (surveyDefinition.getId() == null) {
    surveyDefinition.setDepartment(departmentDAO.findById(surveyDefinition.getDepartment().getId()));
    return surveyDefinitionDAO.merge(surveyDefinition);
  }
 else {
    SurveyDefinition dbSurveyDefinition=surveyDefinitionDAO.findById(surveyDefinition.getId());
    dbSurveyDefinition.setName(surveyDefinition.getName());
    dbSurveyDefinition.setSurveyTheme(surveyDefinition.getSurveyTheme());
    dbSurveyDefinition.setDescription(surveyDefinition.getDescription());
    dbSurveyDefinition.setEmailInvitationTemplate(surveyDefinition.getEmailInvitationTemplate());
    dbSurveyDefinition.setCompletedSurveyTemplate(surveyDefinition.getCompletedSurveyTemplate());
    dbSurveyDefinition.setAutoRemindersDayOfMonth(surveyDefinition.getAutoRemindersDayOfMonth());
    dbSurveyDefinition.setAutoRemindersDays(surveyDefinition.getAutoRemindersDays());
    dbSurveyDefinition.setAutoRemindersFrequency(surveyDefinition.getAutoRemindersFrequency());
    dbSurveyDefinition.setAutoRemindersMonthlyOccurrence(surveyDefinition.getAutoRemindersMonthlyOccurrence());
    dbSurveyDefinition.setAutoRemindersWeeklyOccurrence(surveyDefinition.getAutoRemindersWeeklyOccurrence());
    dbSurveyDefinition.setCompletedSurveyTemplate(surveyDefinition.getCompletedSurveyTemplate());
    dbSurveyDefinition.setSendAutoReminders(surveyDefinition.getSendAutoReminders());
    surveyDefinition.setDepartment(departmentDAO.findById(surveyDefinition.getDepartment().getId()));
    return surveyDefinitionDAO.merge(dbSurveyDefinition);
  }
}","@Transactional(readOnly=false) public SurveyDefinition surveyDefinition_merge(SurveyDefinition surveyDefinition){
  if (surveyDefinition.getId() == null) {
    surveyDefinition.setDepartment(departmentDAO.findById(surveyDefinition.getDepartment().getId()));
    return surveyDefinitionDAO.merge(surveyDefinition);
  }
 else {
    SurveyDefinition dbSurveyDefinition=surveyDefinitionDAO.findById(surveyDefinition.getId());
    dbSurveyDefinition.setName(surveyDefinition.getName());
    dbSurveyDefinition.setSurveyTheme(surveyDefinition.getSurveyTheme());
    dbSurveyDefinition.setDescription(surveyDefinition.getDescription());
    dbSurveyDefinition.setEmailInvitationTemplate(surveyDefinition.getEmailInvitationTemplate());
    dbSurveyDefinition.setCompletedSurveyTemplate(surveyDefinition.getCompletedSurveyTemplate());
    dbSurveyDefinition.setAutoRemindersDayOfMonth(surveyDefinition.getAutoRemindersDayOfMonth());
    dbSurveyDefinition.setAutoRemindersDays(surveyDefinition.getAutoRemindersDays());
    dbSurveyDefinition.setAutoRemindersFrequency(surveyDefinition.getAutoRemindersFrequency());
    dbSurveyDefinition.setAutoRemindersMonthlyOccurrence(surveyDefinition.getAutoRemindersMonthlyOccurrence());
    dbSurveyDefinition.setAutoRemindersWeeklyOccurrence(surveyDefinition.getAutoRemindersWeeklyOccurrence());
    dbSurveyDefinition.setCompletedSurveyTemplate(surveyDefinition.getCompletedSurveyTemplate());
    dbSurveyDefinition.setSendAutoReminders(surveyDefinition.getSendAutoReminders());
    dbSurveyDefinition.setAllowMultipleSubmissions(surveyDefinition.getAllowMultipleSubmissions());
    dbSurveyDefinition.setIsPublic(surveyDefinition.getIsPublic());
    surveyDefinition.setDepartment(departmentDAO.findById(surveyDefinition.getDepartment().getId()));
    return surveyDefinitionDAO.merge(dbSurveyDefinition);
  }
}",0.9522998296422488
166604,"private synchronized Log getLogger(String name){
  ChronicleLogger logger=loggers.get(name);
  if (logger == null) {
    loggers.put(name,logger=new ChronicleLogger(manager.createWriter(name),name,ChronicleLogLevel.fromStringLevel(manager.cfg().getString(name,ChronicleLogConfig.KEY_LEVEL))));
  }
  return logger;
}","private synchronized Log getLogger(String name) throws IOException {
  ChronicleLogger logger=loggers.get(name);
  if (logger == null) {
    loggers.put(name,logger=new ChronicleLogger(manager.createWriter(name),name,ChronicleLogLevel.fromStringLevel(manager.cfg().getString(name,ChronicleLogConfig.KEY_LEVEL))));
  }
  return logger;
}",0.9693251533742332
166605,"private synchronized Logger doGetLogger(String name){
  Logger logger=loggers.get(name);
  if (logger == null) {
    final ChronicleLogWriter writer=manager.createWriter(name);
    if (manager.isSimple(name)) {
      logger=new ChronicleLogger.Text(writer,name,ChronicleLogLevel.WARN);
    }
 else     if (manager.isBinary(name)) {
      logger=new ChronicleLogger.Binary(writer,name,manager.cfg().getLevel(name));
    }
 else     if (manager.isText(name)) {
      logger=new ChronicleLogger.Text(writer,name,manager.cfg().getLevel(name));
    }
    if (logger != null) {
      loggers.put(name,logger);
    }
 else {
      System.err.println(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(name).append(""String_Node_Str"").toString());
    }
  }
  return logger;
}","private synchronized Logger doGetLogger(String name) throws IOException {
  Logger logger=loggers.get(name);
  if (logger == null) {
    final ChronicleLogWriter writer=manager.createWriter(name);
    if (manager.isSimple(name)) {
      logger=new ChronicleLogger.Text(writer,name,ChronicleLogLevel.WARN);
    }
 else     if (manager.isBinary(name)) {
      logger=new ChronicleLogger.Binary(writer,name,manager.cfg().getLevel(name));
    }
 else     if (manager.isText(name)) {
      logger=new ChronicleLogger.Text(writer,name,manager.cfg().getLevel(name));
    }
    if (logger != null) {
      loggers.put(name,logger);
    }
 else {
      System.err.println(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(name).append(""String_Node_Str"").toString());
    }
  }
  return logger;
}",0.9874371859296482
166606,"private synchronized Logger doGetLogger(String name){
  Logger logger=loggers.get(name);
  if (logger == null) {
    final ChronicleLogWriter writer=manager.createWriter(name);
    if (manager.isSimple(name)) {
      logger=new ChronicleLogger.Text(writer,name,ChronicleLogLevel.WARN);
    }
 else     if (manager.isBinary(name)) {
      logger=new ChronicleLogger.Binary(writer,name,manager.cfg().getLevel(name));
    }
 else     if (manager.isText(name)) {
      logger=new ChronicleLogger.Text(writer,name,manager.cfg().getLevel(name));
    }
    if (logger != null) {
      loggers.put(name,logger);
    }
 else {
      System.err.println(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(name).append(""String_Node_Str"").toString());
    }
  }
  return logger;
}","private synchronized Logger doGetLogger(String name) throws IOException {
  Logger logger=loggers.get(name);
  if (logger == null) {
    final ChronicleLogWriter writer=manager.createWriter(name);
    if (manager.isSimple(name)) {
      logger=new ChronicleLogger.Text(writer,name,ChronicleLogLevel.WARN);
    }
 else     if (manager.isBinary(name)) {
      logger=new ChronicleLogger.Binary(writer,name,manager.cfg().getLevel(name));
    }
 else     if (manager.isText(name)) {
      logger=new ChronicleLogger.Text(writer,name,manager.cfg().getLevel(name));
    }
    if (logger != null) {
      loggers.put(name,logger);
    }
 else {
      System.err.println(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(name).append(""String_Node_Str"").toString());
    }
  }
  return logger;
}",0.9874371859296482
166607,"public static void main(String... args){
  Options opt=new OptionsBuilder().include(""String_Node_Str"" + Slf4jBenchmark.class.getSimpleName() + ""String_Node_Str"").forks(1).verbosity(VerboseMode.EXTRA).build();
  new Runner(opt).run();
}","public static void main(String... args) throws Exception {
  Options opt=new OptionsBuilder().include(""String_Node_Str"" + Slf4jBenchmark.class.getSimpleName() + ""String_Node_Str"").forks(1).verbosity(VerboseMode.EXTRA).build();
  new Runner(opt).run();
}",0.9631147540983608
166608,"/** 
 * @param name
 * @param name
 * @return
 * @throws java.io.IOException
 */
public ChronicleLogWriter createWriter(String name){
  if (this.cfg == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String path=cfg.getString(name,ChronicleLogConfig.KEY_PATH);
  if (path != null) {
    ChronicleLogWriter appender=writers.get(path);
    if (appender == null) {
      final Integer stDepth=cfg.getInteger(ChronicleLogConfig.KEY_STACK_TRACE_DEPTH);
      final String type=cfg.getString(name,ChronicleLogConfig.KEY_TYPE);
      if (!isSimple(name)) {
        if (isBinary(name)) {
          appender=new ChronicleLogWriters.BinaryWriter(newChronicle(type,path,name));
        }
 else         if (isText(name)) {
          appender=new ChronicleLogWriters.TextWriter(newChronicle(type,path,name),ChronicleLogConfig.DEFAULT_DATE_FORMAT,stDepth);
        }
      }
 else {
        appender=new ChronicleLogWriters.SimpleWriter(System.out);
      }
      if (appender.getChronicle() instanceof IndexedChronicle) {
        appender=new ChronicleLogWriters.SynchronizedWriter(appender);
      }
      this.writers.put(path,appender);
    }
    return appender;
  }
 else {
    throw new IllegalArgumentException(new StringBuilder().append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(name).append(""String_Node_Str"").toString());
  }
}","/** 
 * @param name
 * @param name
 * @return
 * @throws java.io.IOException
 */
public ChronicleLogWriter createWriter(String name) throws IOException {
  if (this.cfg == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String path=cfg.getString(name,ChronicleLogConfig.KEY_PATH);
  if (path != null) {
    ChronicleLogWriter appender=writers.get(path);
    if (appender == null) {
      final Integer stDepth=cfg.getInteger(ChronicleLogConfig.KEY_STACK_TRACE_DEPTH);
      final String type=cfg.getString(name,ChronicleLogConfig.KEY_TYPE);
      if (!isSimple(name)) {
        if (isBinary(name)) {
          appender=new ChronicleLogWriters.BinaryWriter(newChronicle(type,path,name));
        }
 else         if (isText(name)) {
          appender=new ChronicleLogWriters.TextWriter(newChronicle(type,path,name),ChronicleLogConfig.DEFAULT_DATE_FORMAT,stDepth);
        }
      }
 else {
        appender=new ChronicleLogWriters.SimpleWriter(System.out);
      }
      if (appender.getChronicle() instanceof IndexedChronicle) {
        appender=new ChronicleLogWriters.SynchronizedWriter(appender);
      }
      this.writers.put(path,appender);
    }
    return appender;
  }
 else {
    throw new IllegalArgumentException(new StringBuilder().append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(name).append(""String_Node_Str"").toString());
  }
}",0.9928622412562456
166609,"/** 
 * @param type
 * @param path
 * @param name
 * @return
 * @throws java.io.IOException
 */
private Chronicle newChronicle(String type,String path,String name){
  if (ChronicleLogConfig.TYPE_INDEXED.equalsIgnoreCase(type)) {
    return newIndexedChronicle(path,name);
  }
 else   if (ChronicleLogConfig.TYPE_VANILLA.equalsIgnoreCase(type)) {
    return newVanillaChronicle(path,name);
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","/** 
 * @param type
 * @param path
 * @param name
 * @return
 * @throws java.io.IOException
 */
private Chronicle newChronicle(String type,String path,String name) throws IOException {
  if (ChronicleLogConfig.TYPE_INDEXED.equalsIgnoreCase(type)) {
    return newIndexedChronicle(path,name);
  }
 else   if (ChronicleLogConfig.TYPE_VANILLA.equalsIgnoreCase(type)) {
    return newVanillaChronicle(path,name);
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.9783080260303688
166610,"/** 
 * Return an appropriate   {@link ChronicleLogger} instance by name.<p/>
 */
@Override public Logger getLogger(String name){
  try {
    return doGetLogger(name);
  }
 catch (  Exception e) {
    System.err.println(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(name).append(""String_Node_Str"").append(""String_Node_Str"").append(e.getMessage()).toString());
  }
  return NOPLogger.NOP_LOGGER;
}","/** 
 * Return an appropriate   {@link ChronicleLogger} instance by name.
 */
@Override public Logger getLogger(String name){
  try {
    return doGetLogger(name);
  }
 catch (  Exception e) {
    System.err.println(new StringBuilder(""String_Node_Str"").append(""String_Node_Str"").append(name).append(""String_Node_Str"").append(""String_Node_Str"").append(e.getMessage()).toString());
  }
  return NOPLogger.NOP_LOGGER;
}",0.9952153110047848
166611,"public void setDateFormat(String dateFormat){
}","public void setDateFormat(String dateFormat){
  this.dateFormat=dateFormat;
  this.timeStampFormatter=TimeStampFormatter.fromDateFormat(dateFormat);
}",0.4771573604060913
166612,"@Test public void testLogging() throws IOException {
  String theradName=""String_Node_Str"";
  String loggerName=""String_Node_Str"";
  long timestamp=System.currentTimeMillis();
  Thread.currentThread().setName(theradName);
  Logger l=LoggerFactory.getLogger(loggerName);
  l.trace(""String_Node_Str"");
  l.debug(""String_Node_Str"");
  l.info(""String_Node_Str"");
  l.warn(""String_Node_Str"");
  l.error(""String_Node_Str"");
  Chronicle reader=new IndexedChronicle(basePath(ChronicleLoggingConfig.TYPE_INDEXED,loggerName));
  ExcerptTailer tailer=reader.createTailer().toStart();
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp < tailer.readLong());
  assertEquals(ChronologyLogLevel.DEBUG.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp < tailer.readLong());
  assertEquals(ChronologyLogLevel.INFO.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp < tailer.readLong());
  assertEquals(ChronologyLogLevel.WARN.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp < tailer.readLong());
  assertEquals(ChronologyLogLevel.ERROR.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertFalse(tailer.nextIndex());
  tailer.close();
  reader.close();
}","@Test public void testLogging() throws IOException {
  String theradName=""String_Node_Str"";
  String loggerName=""String_Node_Str"";
  long timestamp=System.currentTimeMillis();
  Thread.currentThread().setName(theradName);
  Logger l=LoggerFactory.getLogger(loggerName);
  l.trace(""String_Node_Str"");
  l.debug(""String_Node_Str"");
  l.info(""String_Node_Str"");
  l.warn(""String_Node_Str"");
  l.error(""String_Node_Str"");
  Chronicle reader=new IndexedChronicle(basePath(ChronicleLoggingConfig.TYPE_INDEXED,loggerName));
  ExcerptTailer tailer=reader.createTailer().toStart();
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp <= tailer.readLong());
  assertEquals(ChronologyLogLevel.DEBUG.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp <= tailer.readLong());
  assertEquals(ChronologyLogLevel.INFO.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp <= tailer.readLong());
  assertEquals(ChronologyLogLevel.WARN.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp <= tailer.readLong());
  assertEquals(ChronologyLogLevel.ERROR.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertFalse(tailer.nextIndex());
  tailer.close();
  reader.close();
}",0.999109131403118
166613,"@Test public void testBiaryLogging() throws IOException {
  String theradName=""String_Node_Str"";
  String loggerName=""String_Node_Str"";
  long timestamp=System.currentTimeMillis();
  Thread.currentThread().setName(theradName);
  Logger l=LoggerFactory.getLogger(""String_Node_Str"");
  l.trace(""String_Node_Str"");
  l.debug(""String_Node_Str"");
  l.info(""String_Node_Str"");
  l.warn(""String_Node_Str"");
  l.error(""String_Node_Str"");
  Chronicle reader=new VanillaChronicle(basePath(ChronicleLoggingConfig.TYPE_VANILLA,loggerName));
  ExcerptTailer tailer=reader.createTailer();
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp < tailer.readLong());
  assertEquals(ChronologyLogLevel.DEBUG.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp < tailer.readLong());
  assertEquals(ChronologyLogLevel.INFO.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp < tailer.readLong());
  assertEquals(ChronologyLogLevel.WARN.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp < tailer.readLong());
  assertEquals(ChronologyLogLevel.ERROR.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertFalse(tailer.nextIndex());
  tailer.close();
  reader.close();
}","@Test public void testBiaryLogging() throws IOException {
  String theradName=""String_Node_Str"";
  String loggerName=""String_Node_Str"";
  long timestamp=System.currentTimeMillis();
  Thread.currentThread().setName(theradName);
  Logger l=LoggerFactory.getLogger(""String_Node_Str"");
  l.trace(""String_Node_Str"");
  l.debug(""String_Node_Str"");
  l.info(""String_Node_Str"");
  l.warn(""String_Node_Str"");
  l.error(""String_Node_Str"");
  Chronicle reader=new VanillaChronicle(basePath(ChronicleLoggingConfig.TYPE_VANILLA,loggerName));
  ExcerptTailer tailer=reader.createTailer();
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp <= tailer.readLong());
  assertEquals(ChronologyLogLevel.DEBUG.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp <= tailer.readLong());
  assertEquals(ChronologyLogLevel.INFO.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp <= tailer.readLong());
  assertEquals(ChronologyLogLevel.WARN.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertTrue(tailer.nextIndex());
  assertEquals(Chronology.VERSION,tailer.readByte());
  assertEquals(Chronology.TYPE_SLF4J,tailer.readByte());
  assertTrue(timestamp <= tailer.readLong());
  assertEquals(ChronologyLogLevel.ERROR.levelInt,tailer.readInt());
  assertEquals(theradName,tailer.readUTF());
  assertEquals(loggerName,tailer.readUTF());
  assertEquals(""String_Node_Str"",tailer.readUTF());
  assertFalse(tailer.nextIndex());
  tailer.close();
  reader.close();
}",0.9991099243435692
166614,"@Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {
  String number=args.getString(0);
  if (number.startsWith(""String_Node_Str"") == false) {
    number=String.format(""String_Node_Str"",number);
  }
  if (((TelephonyManager)cordova.getActivity().getSystemService(Context.TELEPHONY_SERVICE)).getPhoneType() == TelephonyManager.PHONE_TYPE_NONE) {
    callbackContext.error(""String_Node_Str"");
  }
  try {
    Intent intent=new Intent(Intent.ACTION_CALL);
    intent.setData(Uri.parse(Uri.encode(number)));
    cordova.getActivity().startActivity(intent);
    callbackContext.success();
  }
 catch (  Exception e) {
    callbackContext.error(""String_Node_Str"");
  }
  return true;
}","@Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {
  String number=args.getString(0);
  if (number.startsWith(""String_Node_Str"") == false) {
    number=String.format(""String_Node_Str"",number);
  }
  if (((TelephonyManager)cordova.getActivity().getSystemService(Context.TELEPHONY_SERVICE)).getPhoneType() == TelephonyManager.PHONE_TYPE_NONE) {
    callbackContext.error(""String_Node_Str"");
  }
  try {
    Intent intent=new Intent(Intent.ACTION_CALL);
    intent.setData(Uri.parse(number));
    cordova.getActivity().startActivity(intent);
    callbackContext.success();
  }
 catch (  Exception e) {
    callbackContext.error(""String_Node_Str"");
  }
  return true;
}",0.7560975609756098
166615,"@Override protected void onStart(){
  view=new WebmakerWebView(this,this,pageName,routeParams);
  RelativeLayout layout=(RelativeLayout)findViewById(id);
  layout.addView(view);
  super.onStart();
}","@Override protected void onStart(){
  if (!mIsRestart) {
    view=new WebmakerWebView(this,this,pageName,routeParams);
    RelativeLayout layout=(RelativeLayout)findViewById(id);
    layout.addView(view);
  }
  super.onStart();
}",0.927400468384075
166616,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Resources res=getResources();
  ColorDrawable plum=new ColorDrawable(getResources().getColor(R.color.plum));
  int shadowPlum=res.getColor(R.color.shadow_plum);
  ActionBar actionBar=getActionBar();
  actionBar.setBackgroundDrawable(plum);
  Window window=getWindow();
  window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
  window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
  window.setStatusBarColor(shadowPlum);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    Resources res=getResources();
    ColorDrawable plum=new ColorDrawable(getResources().getColor(R.color.plum));
    int shadowPlum=res.getColor(R.color.shadow_plum);
    ActionBar actionBar=getActionBar();
    if (actionBar != null)     actionBar.setBackgroundDrawable(plum);
    Window window=getWindow();
    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    window.setStatusBarColor(shadowPlum);
  }
}",0.8520900321543409
166617,"/** 
 * Called when the activity is created, based off of the intent details either turn on or off the flashlight
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flashlight);
  currentlyOn=false;
}","/** 
 * Called when the activity is created, based off of the intent details either turn on or off the flashlight
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  setContentView(R.layout.activity_flashlight);
  currentlyOn=false;
}",0.9260450160771704
166618,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  boolean onOrOff=intent.getBooleanExtra(""String_Node_Str"",false);
  if (onOrOff != currentlyOn) {
    currentlyOn=onOrOff;
    turnOnOrOff(onOrOff);
  }
 else   if (!onOrOff) {
    finish();
  }
  GoogleNowUtil.resetGoogleNow(this);
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(getIntent().putExtra(""String_Node_Str"",intent.getBooleanExtra(""String_Node_Str"",false)));
}",0.5537848605577689
166619,"/** 
 * Either turns on or off the flashlight
 * @param onOrOff - true for on, false for off
 */
private void turnOnOrOff(boolean onOrOff){
  if (onOrOff) {
    Intent i=new Intent(this,FlashlightActivity.class);
    i.putExtra(""String_Node_Str"",false);
    Notification.Builder builder=new Notification.Builder(this);
    builder.setContentTitle(getString(R.string.flashlight_activated));
    builder.setOngoing(true);
    builder.setSmallIcon(R.drawable.ic_launcher);
    builder.addAction(0,getString(R.string.turn_off),PendingIntent.getActivity(this,193,i,0));
    ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).notify(1224,builder.build());
    if (mCamera == null) {
      preview=(SurfaceView)findViewById(R.id.PREVIEW);
      mHolder=preview.getHolder();
      mHolder.addCallback(this);
      mCamera=Camera.open();
      try {
        mCamera.setPreviewDisplay(mHolder);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    Parameters params=mCamera.getParameters();
    if (!params.getSupportedFlashModes().contains(Parameters.FLASH_MODE_TORCH)) {
      Toast.makeText(this,getString(R.string.no_flashlight_access),Toast.LENGTH_LONG).show();
      finish();
      return;
    }
    params.setFlashMode(Parameters.FLASH_MODE_TORCH);
    mCamera.setParameters(params);
    try {
      mCamera.startPreview();
    }
 catch (    Exception e) {
      Toast.makeText(this,getString(R.string.no_flashlight_access),Toast.LENGTH_LONG).show();
      finish();
      return;
    }
  }
 else {
    finish();
  }
}","/** 
 * Either turns on or off the flashlight
 * @param onOrOff - true for on, false for off
 */
private void turnOnOrOff(boolean onOrOff){
  if (onOrOff) {
    Intent i=new Intent(this,FlashlightActivity.class);
    i.putExtra(""String_Node_Str"",false);
    Notification.Builder builder=new Notification.Builder(this);
    builder.setContentTitle(getString(R.string.flashlight_activated));
    builder.setOngoing(true);
    builder.setSmallIcon(R.drawable.ic_launcher);
    builder.addAction(0,getString(R.string.turn_off),PendingIntent.getActivity(this,193,i,0));
    ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).notify(1224,builder.build());
    if (mCamera == null) {
      preview=(SurfaceView)findViewById(R.id.PREVIEW);
      mHolder=preview.getHolder();
      mHolder.addCallback(this);
      mCamera=Camera.open();
      try {
        mCamera.setPreviewDisplay(mHolder);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    Parameters params=mCamera.getParameters();
    if (!params.getSupportedFlashModes().contains(Parameters.FLASH_MODE_TORCH)) {
      Toast.makeText(this,getString(R.string.no_flashlight_access),Toast.LENGTH_LONG).show();
      finish();
      return;
    }
    params.setFlashMode(Parameters.FLASH_MODE_TORCH);
    mCamera.setParameters(params);
    try {
      mCamera.startPreview();
    }
 catch (    Exception e) {
      Toast.makeText(this,getString(R.string.no_flashlight_access),Toast.LENGTH_LONG).show();
      finish();
      return;
    }
  }
 else {
    finish();
    GoogleNowUtil.resetGoogleNow(this);
  }
}",0.9873417721518988
166620,"/** 
 * Called when the surfaceholder is created. Add the camera to the holder
 */
public void surfaceCreated(SurfaceHolder holder){
  mHolder=holder;
  try {
    mCamera.setPreviewDisplay(mHolder);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Called when the surfaceholder is created. Add the camera to the holder
 */
public void surfaceCreated(SurfaceHolder holder){
  mHolder=holder;
  try {
    mCamera.setPreviewDisplay(mHolder);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  GoogleNowUtil.resetGoogleNow(this);
}",0.9314079422382672
166621,"public static void resetGoogleNow(final Context context){
  final String home_pkg=getHomePkg(context);
  Intent i;
  PackageManager manager=context.getPackageManager();
  try {
    i=manager.getLaunchIntentForPackage(GOOGLE_PKG);
    if (i == null)     throw new PackageManager.NameNotFoundException();
    i.addCategory(Intent.CATEGORY_LAUNCHER);
    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
    context.startActivity(i);
    if (PreferenceManager.getDefaultSharedPreferences(context).getBoolean(""String_Node_Str"",true)) {
      Handler handler=new Handler(new Handler.Callback(){
        @Override public boolean handleMessage(        Message message){
          ActivityManager am=(ActivityManager)context.getSystemService(Activity.ACTIVITY_SERVICE);
          for (          ActivityManager.RunningTaskInfo task : am.getRunningTasks(10)) {
            String packageName=task.topActivity.getPackageName();
            Log.d(""String_Node_Str"",packageName);
            if (!packageName.equals(context.getPackageName()) && !packageName.equals(GOOGLE_PKG) && !packageName.equals(home_pkg)&& !packageName.equals(""String_Node_Str"")) {
              String className=task.topActivity.getClassName();
              Intent i=new Intent();
              i.setClassName(packageName,className);
              i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
              try {
                context.startActivity(i);
              }
 catch (              Exception e) {
                i=new Intent();
                i.setPackage(packageName);
                i.setAction(Intent.ACTION_MAIN);
                i.addCategory(Intent.CATEGORY_LAUNCHER);
                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(i);
              }
              break;
            }
          }
          return true;
        }
      }
);
      handler.sendEmptyMessageDelayed(0,500);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
}","public static void resetGoogleNow(final Context context){
  final String home_pkg=getHomePkg(context);
  Intent i;
  PackageManager manager=context.getPackageManager();
  try {
    i=manager.getLaunchIntentForPackage(GOOGLE_PKG);
    if (i == null)     throw new PackageManager.NameNotFoundException();
    i.addCategory(Intent.CATEGORY_LAUNCHER);
    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
    context.startActivity(i);
    if (PreferenceManager.getDefaultSharedPreferences(context).getBoolean(""String_Node_Str"",true)) {
      Handler handler=new Handler(new Handler.Callback(){
        @Override public boolean handleMessage(        Message message){
          ActivityManager am=(ActivityManager)context.getSystemService(Activity.ACTIVITY_SERVICE);
          for (          ActivityManager.RunningTaskInfo task : am.getRunningTasks(10)) {
            String packageName=task.topActivity.getPackageName();
            Log.d(""String_Node_Str"",packageName);
            if (!packageName.equals(context.getPackageName()) && !packageName.equals(GOOGLE_PKG) && !packageName.equals(home_pkg)&& !packageName.equals(""String_Node_Str"")) {
              String className=task.topActivity.getClassName();
              Intent i=new Intent();
              i.setClassName(packageName,className);
              i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
              try {
                context.startActivity(i);
              }
 catch (              Exception e) {
                i=new Intent();
                i.setPackage(packageName);
                i.setAction(Intent.ACTION_MAIN);
                i.addCategory(Intent.CATEGORY_LAUNCHER);
                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(i);
              }
              break;
            }
          }
          return true;
        }
      }
);
      handler.sendEmptyMessageDelayed(0,1000);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
}",0.999265605875153
166622,"/** 
 * look for a non-empty level 
 */
protected void nextNonEmptyLevel(){
  int cl=currentLevel;
  do {
    if (!levelEmpty[cl=DISTRIBUTOR[levelIndex % distributorLength]]) {
      levelIndex++;
      break;
    }
    levelIndex=(levelIndex + 1) % distributorLength;
  }
 while (true);
  currentLevel=cl;
  if (currentLevel < fireCompleteLevelThreshold) {
    currentCounter=1;
  }
 else {
    currentCounter=this.level[currentLevel].size();
  }
}","/** 
 * look for a non-empty level 
 */
protected void nextNonEmptyLevel(){
  int cl=currentLevel;
  do {
    if (!levelEmpty(cl=DISTRIBUTOR[levelIndex % distributorLength])) {
      levelIndex++;
      break;
    }
    levelIndex=(levelIndex + 1) % distributorLength;
  }
 while (true);
  currentLevel=cl;
  if (currentLevel < fireCompleteLevelThreshold) {
    currentCounter=1;
  }
 else {
    currentCounter=this.level[currentLevel].size();
  }
}",0.9955456570155902
166623,"/** 
 * thresholdLevel = 0 disables ""fire level completely"" threshold effect 
 */
public LevelBag(final int levels,final int capacity,final int thresholdLevel){
  this.levels=levels;
  this.fireCompleteLevelThreshold=thresholdLevel;
  this.capacity=capacity;
  nameTable=new HashMap<>(capacity);
  level=new Level[this.levels];
  levelEmpty=new boolean[this.levels];
  Arrays.fill(levelEmpty,true);
  DISTRIBUTOR=Distributor.get(this.levels).order;
  distributorLength=DISTRIBUTOR.length;
  clear();
}","/** 
 * thresholdLevel = 0 disables ""fire level completely"" threshold effect 
 */
public LevelBag(final int levels,final int capacity,final int thresholdLevel){
  this.levels=levels;
  this.fireCompleteLevelThreshold=thresholdLevel;
  this.capacity=capacity;
  nameTable=new HashMap<>(capacity);
  level=new Level[this.levels];
  DISTRIBUTOR=Distributor.get(this.levels).order;
  distributorLength=DISTRIBUTOR.length;
  clear();
}",0.9237379162191192
166624,"/** 
 * Insert an item into the itemTable, and return the overflow
 * @param newItem The Item to put in
 * @return null if nothing overflowed, non-null if an overflow Item, whichmay be the attempted input item (in which case it was not inserted)
 */
@Override public E addItem(final E newItem){
  E oldItem=null;
  final int inLevel=getLevel(newItem);
  if (size() >= capacity) {
    int outLevel=0;
    while (levelEmpty[outLevel]) {
      outLevel++;
    }
    if (outLevel > inLevel) {
      return newItem;
    }
 else {
      oldItem=takeOutFirst(outLevel);
    }
  }
  if (this.level[inLevel] == null) {
    this.level[inLevel]=new Level(inLevel,inLevel + capacity / levels);
  }
  level[inLevel].add(newItem);
  nameTable.put(newItem.name(),newItem);
  addMass(newItem);
  return oldItem;
}","/** 
 * Insert an item into the itemTable, and return the overflow
 * @param newItem The Item to put in
 * @return null if nothing overflowed, non-null if an overflow Item, whichmay be the attempted input item (in which case it was not inserted)
 */
@Override public E addItem(final E newItem){
  E oldItem=null;
  final int inLevel=getLevel(newItem);
  if (size() >= capacity) {
    int outLevel=0;
    while (levelEmpty(outLevel)) {
      outLevel++;
    }
    if (outLevel > inLevel) {
      return newItem;
    }
 else {
      oldItem=takeOutFirst(outLevel);
    }
  }
  if (this.level[inLevel] == null) {
    this.level[inLevel]=new Level<E>();
  }
  level[inLevel].add(newItem);
  nameTable.put(newItem.name(),newItem);
  addMass(newItem);
  return oldItem;
}",0.9615877080665812
166625,"@Override public Iterator<E> iterator(){
  return new Iterator<E>(){
    int l=level.length - 1;
    private Iterator<E> levelIterator;
    private E next;
    final int size=size();
    int count=0;
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean hasNext(){
      if (next != null) {
        return true;
      }
      if (l >= 0 && levelIterator == null) {
        while (levelEmpty[l]) {
          if (--l == -1)           return false;
        }
        levelIterator=level[l].descendingIterator();
      }
      if (levelIterator == null) {
        return false;
      }
      next=levelIterator.next();
      count++;
      if (levelIterator.hasNext()) {
        return true;
      }
 else {
        levelIterator=null;
        l--;
        return count <= size;
      }
    }
    @Override public E next(){
      final E e=next;
      next=null;
      return e;
    }
  }
;
}","@Override public Iterator<E> iterator(){
  return new Iterator<E>(){
    int l=level.length - 1;
    private Iterator<E> levelIterator;
    private E next;
    final int size=size();
    int count=0;
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean hasNext(){
      if (next != null) {
        return true;
      }
      if (l >= 0 && levelIterator == null) {
        while (levelEmpty(l)) {
          if (--l == -1)           return false;
        }
        levelIterator=level[l].iterator();
      }
      if (levelIterator == null) {
        return false;
      }
      next=levelIterator.next();
      count++;
      if (levelIterator.hasNext()) {
        return true;
      }
 else {
        levelIterator=null;
        l--;
        return count <= size;
      }
    }
    @Override public E next(){
      final E e=next;
      next=null;
      return e;
    }
  }
;
}",0.9905163329820864
166626,"@Override public E takeNext(){
  if (size() == 0) {
    return null;
  }
  if (levelEmpty[currentLevel] || (currentCounter == 0)) {
    nextNonEmptyLevel();
  }
  if (levelEmpty[currentLevel]) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final E selected=takeOutFirst(currentLevel);
  currentCounter--;
  return selected;
}","@Override public E takeNext(){
  if (size() == 0) {
    return null;
  }
  if (levelEmpty(currentLevel) || (currentCounter == 0)) {
    nextNonEmptyLevel();
  }
  if (levelEmpty(currentLevel)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final E selected=takeOutFirst(currentLevel);
  currentCounter--;
  return selected;
}",0.9883040935672516
166627,"public E removeFirst(){
  final E e=items.iterator().next();
  items.remove(e);
  if (e != null) {
    setLevelEmpty(items.isEmpty());
  }
  return e;
}","public E removeFirst(){
  final E e=this.iterator().next();
  this.remove(e);
  return e;
}",0.7160493827160493
166628,"public boolean add(final E e){
  if (e == null)   throw new IllegalStateException(""String_Node_Str"");
  if (items.add(e)) {
    setLevelEmpty(false);
    return true;
  }
  return false;
}","@Override public boolean add(final E e){
  if (e == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return super.add(e);
}",0.7228915662650602
166629,"@Override public boolean hasNext(){
  if (next != null) {
    return true;
  }
  if (l >= 0 && levelIterator == null) {
    while (levelEmpty[l]) {
      if (--l == -1)       return false;
    }
    levelIterator=level[l].descendingIterator();
  }
  if (levelIterator == null) {
    return false;
  }
  next=levelIterator.next();
  count++;
  if (levelIterator.hasNext()) {
    return true;
  }
 else {
    levelIterator=null;
    l--;
    return count <= size;
  }
}","@Override public boolean hasNext(){
  if (next != null) {
    return true;
  }
  if (l >= 0 && levelIterator == null) {
    while (levelEmpty(l)) {
      if (--l == -1)       return false;
    }
    levelIterator=level[l].iterator();
  }
  if (levelIterator == null) {
    return false;
  }
  next=levelIterator.next();
  count++;
  if (levelIterator.hasNext()) {
    return true;
  }
 else {
    levelIterator=null;
    l--;
    return count <= size;
  }
}",0.9805194805194806
166630,"@Override public E take(final K name){
  final E oldItem=nameTable.remove(name);
  if (oldItem == null) {
    return null;
  }
  final int expectedLevel=getLevel(oldItem);
  if (!levelEmpty[expectedLevel]) {
    if (level[expectedLevel].remove(oldItem)) {
      removeMass(oldItem);
      return oldItem;
    }
  }
  for (int l=0; l < levels; l++) {
    if ((!levelEmpty[l]) && (l != expectedLevel)) {
      if (level[l].remove(oldItem)) {
        removeMass(oldItem);
        return oldItem;
      }
    }
  }
  if (MiscFlags.DEBUG) {
    final int ns=nameTable.size();
    final int is=sizeItems();
    if (ns == is)     return null;
    throw new IllegalStateException(""String_Node_Str"" + nameTable.size() + ""String_Node_Str""+ sizeItems()+ ""String_Node_Str""+ oldItem+ ""String_Node_Str""+ this.getClass().getSimpleName());
  }
  return oldItem;
}","@Override public E take(final K name){
  final E oldItem=nameTable.remove(name);
  if (oldItem == null) {
    return null;
  }
  final int expectedLevel=getLevel(oldItem);
  if (!levelEmpty(expectedLevel)) {
    if (level[expectedLevel].remove(oldItem)) {
      removeMass(oldItem);
      return oldItem;
    }
  }
  for (int l=0; l < levels; l++) {
    if ((!levelEmpty(l)) && (l != expectedLevel)) {
      if (level[l].remove(oldItem)) {
        removeMass(oldItem);
        return oldItem;
      }
    }
  }
  if (MiscFlags.DEBUG) {
    final int ns=nameTable.size();
    final int is=sizeItems();
    if (ns == is)     return null;
    throw new IllegalStateException(""String_Node_Str"" + nameTable.size() + ""String_Node_Str""+ sizeItems()+ ""String_Node_Str""+ oldItem+ ""String_Node_Str""+ this.getClass().getSimpleName());
  }
  return oldItem;
}",0.9940968122786304
166631,"/** 
 * TODO refactor : paste from preceding method
 */
public String toStringLong(final int minLevel){
  StringBuilder buf=new StringBuilder(32).append(""String_Node_Str"").append(getClass().getSimpleName()).append(""String_Node_Str"").append(showSizes());
  for (int i=levels; i >= minLevel; i--) {
    if (!levelEmpty[i - 1]) {
      buf=buf.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
      for (      final E e : level[i - 1]) {
        buf=buf.append(e.toStringLong()).append('\n');
      }
    }
  }
  buf.append(""String_Node_Str"").append(getClass().getSimpleName());
  return buf.toString();
}","/** 
 * TODO refactor : paste from preceding method
 */
public String toStringLong(final int minLevel){
  StringBuilder buf=new StringBuilder(32).append(""String_Node_Str"").append(getClass().getSimpleName()).append(""String_Node_Str"").append(showSizes());
  for (int i=levels; i >= minLevel; i--) {
    if (!levelEmpty(i - 1)) {
      buf=buf.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
      for (      final E e : level[i - 1]) {
        buf=buf.append(e.toStringLong()).append('\n');
      }
    }
  }
  buf.append(""String_Node_Str"").append(getClass().getSimpleName());
  return buf.toString();
}",0.801948051948052
166632,"public int numEmptyLevels(LevelBag bag){
  int empty=0;
  for (int i=0; i < bag.level.length; i++) {
    if (bag.levelEmpty[i]) {
      empty++;
    }
  }
  return empty;
}","public int numEmptyLevels(LevelBag bag){
  int empty=0;
  for (int i=0; i < bag.level.length; i++) {
    if (bag.level[i].isEmpty()) {
      empty++;
    }
  }
  return empty;
}",0.968481375358166
166633,"public int getLevelSize(LevelBag lb,final int level){
  return (lb.levelEmpty[level]) ? 0 : lb.level[level].size();
}","public int getLevelSize(LevelBag lb,final int level){
  return (lb.level[level] == null) ? 0 : lb.level[level].size();
}",0.9451476793248944
166634,"/** 
 * Generate <?how =/> g>? question for g! goal. only called by processGoal
 * @param nal The derivation context
 */
public static void questionFromGoal(final Task task,final DerivationContext nal){
  if (nal.narParameters.QUESTION_GENERATION_ON_DECISION_MAKING || nal.narParameters.HOW_QUESTION_GENERATION_ON_DECISION_MAKING) {
    final List<Term> qu=new ArrayList<>();
    if (nal.narParameters.HOW_QUESTION_GENERATION_ON_DECISION_MAKING) {
      if (!(task.sentence.term instanceof Equivalence) && !(task.sentence.term instanceof Implication)) {
        final Variable how=new Variable(""String_Node_Str"");
        final Implication imp2=Implication.make(how,task.sentence.term,TemporalRules.ORDER_FORWARD);
        if (!(task.sentence.term instanceof Operation)) {
          qu.add(imp2);
        }
      }
    }
    if (nal.narParameters.QUESTION_GENERATION_ON_DECISION_MAKING) {
      qu.add(task.sentence.term);
    }
    for (    final Term q : qu) {
      if (q != null) {
        final Stamp st=new Stamp(task.sentence.stamp,nal.time.time());
        st.setOccurrenceTime(task.sentence.getOccurenceTime());
        final Sentence s=new Sentence(q,Symbols.QUESTION_MARK,null,st);
        if (s != null) {
          final BudgetValue budget=new BudgetValue(task.getPriority() * nal.narParameters.CURIOSITY_DESIRE_PRIORITY_MUL,task.getDurability() * nal.narParameters.CURIOSITY_DESIRE_DURABILITY_MUL,1,nal.narParameters);
          nal.singlePremiseTask(s,budget);
        }
      }
    }
  }
}","/** 
 * Generate &lt;?how =/&gt; g&gt;? question for g! goal. only called by processGoal
 * @param task the task for which the question should be processed
 * @param nal The derivation context
 */
public static void questionFromGoal(final Task task,final DerivationContext nal){
  if (nal.narParameters.QUESTION_GENERATION_ON_DECISION_MAKING || nal.narParameters.HOW_QUESTION_GENERATION_ON_DECISION_MAKING) {
    final List<Term> qu=new ArrayList<>();
    if (nal.narParameters.HOW_QUESTION_GENERATION_ON_DECISION_MAKING) {
      if (!(task.sentence.term instanceof Equivalence) && !(task.sentence.term instanceof Implication)) {
        final Variable how=new Variable(""String_Node_Str"");
        final Implication imp2=Implication.make(how,task.sentence.term,TemporalRules.ORDER_FORWARD);
        if (!(task.sentence.term instanceof Operation)) {
          qu.add(imp2);
        }
      }
    }
    if (nal.narParameters.QUESTION_GENERATION_ON_DECISION_MAKING) {
      qu.add(task.sentence.term);
    }
    for (    final Term q : qu) {
      if (q != null) {
        final Stamp st=new Stamp(task.sentence.stamp,nal.time.time());
        st.setOccurrenceTime(task.sentence.getOccurenceTime());
        final Sentence s=new Sentence(q,Symbols.QUESTION_MARK,null,st);
        if (s != null) {
          final BudgetValue budget=new BudgetValue(task.getPriority() * nal.narParameters.CURIOSITY_DESIRE_PRIORITY_MUL,task.getDurability() * nal.narParameters.CURIOSITY_DESIRE_DURABILITY_MUL,1,nal.narParameters);
          nal.singlePremiseTask(s,budget);
        }
      }
    }
  }
}",0.9727802981205445
166635,"/** 
 * Handle the feedback of the operation that was processed as a judgment The purpose is to start a new operation frame which makes the operation concept  interpret current events as preconditions and future events as postconditions to the invoked operation. <p> called in processJudgment only
 * @param task The judgement task be checked
 * @param nal The derivation context
 * @return Whether to continue the processing of the task
 */
public static void handleOperationFeedback(Task task,DerivationContext nal){
  if (task.isInput() && !task.sentence.isEternal() && task.sentence.term instanceof Operation) {
    final Operation op=(Operation)task.sentence.term;
    final Operator o=(Operator)op.getPredicate();
    if (!(o instanceof Believe) && !(o instanceof Want) && !(o instanceof Wonder)&& !(o instanceof Evaluate)&& !(o instanceof Anticipate)) {
      TemporalInferenceControl.NewOperationFrame(nal.memory,task);
    }
  }
}","/** 
 * Handle the feedback of the operation that was processed as a judgment The purpose is to start a new operation frame which makes the operation concept  interpret current events as preconditions and future events as postconditions to the invoked operation. <p> called in processJudgment only
 * @param task The judgement task be checked
 * @param nal The derivation context
 */
public static void handleOperationFeedback(Task task,DerivationContext nal){
  if (task.isInput() && !task.sentence.isEternal() && task.sentence.term instanceof Operation) {
    final Operation op=(Operation)task.sentence.term;
    final Operator o=(Operator)op.getPredicate();
    if (!(o instanceof Believe) && !(o instanceof Want) && !(o instanceof Wonder)&& !(o instanceof Evaluate)&& !(o instanceof Anticipate)) {
      TemporalInferenceControl.NewOperationFrame(nal.memory,task);
    }
  }
}",0.968131868131868
166636,"/** 
 * Recognize an existing belief task as solution to the what question task, which contains a query variable <p> called only in GeneralInferenceControl.insertTaskLink on concept selection
 * @param concept The concept which potentially outdated anticipations should be processed
 * @paramt t The belief task
 * @param nal The derivation context
 */
public static void ProcessWhatQuestion(final Concept concept,final Task ques,final DerivationContext nal){
  if (!(ques.sentence.isJudgment()) && ques.getTerm().hasVarQuery()) {
    boolean newAnswer=false;
    for (    final TaskLink t : concept.taskLinks) {
      final Term[] u=new Term[]{ques.getTerm(),t.getTerm()};
      if (!t.getTerm().hasVarQuery() && Variables.unify(Symbols.VAR_QUERY,u)) {
        final Concept c=nal.memory.concept(t.getTerm());
        if (c == null) {
          continue;
        }
synchronized (c) {
          final List<Task> answers=ques.sentence.isQuest() ? c.desires : c.beliefs;
          if (c != null && answers.size() > 0) {
            final Task taskAnswer=answers.get(0);
            if (taskAnswer != null) {
              newAnswer|=trySolution(taskAnswer.sentence,ques,nal,false);
            }
          }
        }
      }
    }
    if (newAnswer && ques.isInput()) {
      nal.memory.emit(Events.Answer.class,ques,ques.getBestSolution());
    }
  }
}","/** 
 * Recognize an existing belief task as solution to the what question task, which contains a query variable <p> called only in GeneralInferenceControl.insertTaskLink on concept selection
 * @param concept The concept which potentially outdated anticipations should be processed
 * @param ques The belief task
 * @param nal The derivation context
 */
public static void ProcessWhatQuestion(final Concept concept,final Task ques,final DerivationContext nal){
  if (!(ques.sentence.isJudgment()) && ques.getTerm().hasVarQuery()) {
    boolean newAnswer=false;
    for (    final TaskLink t : concept.taskLinks) {
      final Term[] u=new Term[]{ques.getTerm(),t.getTerm()};
      if (!t.getTerm().hasVarQuery() && Variables.unify(Symbols.VAR_QUERY,u)) {
        final Concept c=nal.memory.concept(t.getTerm());
        if (c == null) {
          continue;
        }
synchronized (c) {
          final List<Task> answers=ques.sentence.isQuest() ? c.desires : c.beliefs;
          if (c != null && answers.size() > 0) {
            final Task taskAnswer=answers.get(0);
            if (taskAnswer != null) {
              newAnswer|=trySolution(taskAnswer.sentence,ques,nal,false);
            }
          }
        }
      }
    }
    if (newAnswer && ques.isInput()) {
      nal.memory.emit(Events.Answer.class,ques,ques.getBestSolution());
    }
  }
}",0.9970436067997044
166637,"/** 
 * Recognize an added belief task as solution to what questions, those that contain query variable <p> called only in GeneralInferenceControl.insertTaskLink on concept selection
 * @param concept The concept which potentially outdated anticipations should be processed
 * @paramt t The belief task
 * @param nal The derivation context
 */
public static void ProcessWhatQuestionAnswer(final Concept concept,final Task t,final DerivationContext nal){
  if (!t.sentence.term.hasVarQuery() && t.sentence.isJudgment() || t.sentence.isGoal()) {
    for (    final TaskLink quess : concept.taskLinks) {
      final Task ques=quess.getTarget();
      if (((ques.sentence.isQuestion() && t.sentence.isJudgment()) || (ques.sentence.isGoal() && t.sentence.isJudgment()) || (ques.sentence.isQuest() && t.sentence.isGoal())) && ques.getTerm().hasVarQuery()) {
        boolean newAnswer=false;
        final Term[] u=new Term[]{ques.getTerm(),t.getTerm()};
        if (ques.sentence.term.hasVarQuery() && !t.getTerm().hasVarQuery() && Variables.unify(Symbols.VAR_QUERY,u)) {
          final Concept c=nal.memory.concept(t.getTerm());
          if (c == null) {
            continue;
          }
synchronized (c) {
            final List<Task> answers=ques.sentence.isQuest() ? c.desires : c.beliefs;
            if (c != null && answers.size() > 0) {
              final Task taskAnswer=answers.get(0);
              if (taskAnswer != null) {
                newAnswer|=trySolution(taskAnswer.sentence,ques,nal,false);
              }
            }
          }
        }
        if (newAnswer && ques.isInput()) {
          nal.memory.emit(Events.Answer.class,ques,ques.getBestSolution());
        }
      }
    }
  }
}","/** 
 * Recognize an added belief task as solution to what questions, those that contain query variable <p> called only in GeneralInferenceControl.insertTaskLink on concept selection
 * @param concept The concept which potentially outdated anticipations should be processed
 * @param t The belief task
 * @param nal The derivation context
 */
public static void ProcessWhatQuestionAnswer(final Concept concept,final Task t,final DerivationContext nal){
  if (!t.sentence.term.hasVarQuery() && t.sentence.isJudgment() || t.sentence.isGoal()) {
    for (    final TaskLink quess : concept.taskLinks) {
      final Task ques=quess.getTarget();
      if (((ques.sentence.isQuestion() && t.sentence.isJudgment()) || (ques.sentence.isGoal() && t.sentence.isJudgment()) || (ques.sentence.isQuest() && t.sentence.isGoal())) && ques.getTerm().hasVarQuery()) {
        boolean newAnswer=false;
        final Term[] u=new Term[]{ques.getTerm(),t.getTerm()};
        if (ques.sentence.term.hasVarQuery() && !t.getTerm().hasVarQuery() && Variables.unify(Symbols.VAR_QUERY,u)) {
          final Concept c=nal.memory.concept(t.getTerm());
          if (c == null) {
            continue;
          }
synchronized (c) {
            final List<Task> answers=ques.sentence.isQuest() ? c.desires : c.beliefs;
            if (c != null && answers.size() > 0) {
              final Task taskAnswer=answers.get(0);
              if (taskAnswer != null) {
                newAnswer|=trySolution(taskAnswer.sentence,ques,nal,false);
              }
            }
          }
        }
        if (newAnswer && ques.isInput()) {
          nal.memory.emit(Events.Answer.class,ques,ques.getBestSolution());
        }
      }
    }
  }
}",0.999707516817783
166638,"/** 
 * returns the period in time: currentTime - lastForgetTime and sets the lastForgetTime to currentTime 
 */
public long setLastForgetTime(final long currentTime){
  final long period;
  if (this.lastForgetTime == -1)   period=0;
 else   period=currentTime - lastForgetTime;
  lastForgetTime=currentTime;
  return period;
}","/** 
 * computes the period and sets the current time to the period
 * @return period in time: currentTime - lastForgetTime
 */
public long setLastForgetTime(final long currentTime){
  final long period;
  if (this.lastForgetTime == -1)   period=0;
 else   period=currentTime - lastForgetTime;
  lastForgetTime=currentTime;
  return period;
}",0.828101644245142
166639,"public TruthValue getTruth(){
  return truth;
}","/** 
 * @return truth of the sentence, truths are properties of sentences
 */
public TruthValue getTruth(){
  return truth;
}",0.5465116279069767
166640,"/** 
 * Get the truth value (or desire value) of the sentence
 * @return Truth value, null for question
 */
public void discountConfidence(Parameters narParameters){
  truth.setConfidence(truth.getConfidence() * narParameters.DISCOUNT_RATE).setAnalytic(false);
}","/** 
 * discounts the truth value of the sentence
 */
public void discountConfidence(Parameters narParameters){
  truth.setConfidence(truth.getConfidence() * narParameters.DISCOUNT_RATE).setAnalytic(false);
}",0.7829787234042553
166641,"/** 
 * Recognize a Judgment
 * @return Whether the object is a Judgment
 */
public boolean isJudgment(){
  return (punctuation == Symbols.JUDGMENT_MARK);
}","/** 
 * @return property, whether the object is a judgment
 */
public boolean isJudgment(){
  return (punctuation == Symbols.JUDGMENT_MARK);
}",0.87248322147651
166642,"/** 
 * Revisible?
 */
public boolean getRevisible(){
  return revisible;
}","/** 
 * @return property of the ability to revise the sentence
 */
public boolean getRevisible(){
  return revisible;
}",0.7216494845360825
166643,"public T getTerm(){
  return term;
}","/** 
 * @return term of the sentence, terms are properties of sentences
 */
public T getTerm(){
  return term;
}",0.4864864864864865
166644,"/** 
 * Recognize a Question
 * @return Whether the object is a Question
 */
public boolean isQuestion(){
  return (punctuation == Symbols.QUESTION_MARK);
}","/** 
 * @return property, whether the object is a question
 */
public boolean isQuestion(){
  return (punctuation == Symbols.QUESTION_MARK);
}",0.87248322147651
166645,"public boolean isEternal(){
  return stamp.isEternal();
}","/** 
 * @return classification if the sentence is true for ever
 */
public boolean isEternal(){
  return stamp.isEternal();
}",0.6263736263736264
166646,"/** 
 * Recognize a Quest
 * @return Whether the object is a Quest
 */
public boolean isQuest(){
  return (punctuation == Symbols.QUEST_MARK);
}","/** 
 * @return property, whether the sentence is a quest
 */
public boolean isQuest(){
  return (punctuation == Symbols.QUEST_MARK);
}",0.8387096774193549
166647,"/** 
 * To produce the hashcode of a sentence
 * @return A hashcode
 */
@Override public int hashCode(){
  return hash;
}","/** 
 * To produce the hashcode of a sentence
 * @return a hashcode
 */
@Override public int hashCode(){
  return hash;
}",0.9917355371900828
166648,"/** 
 * Clone with a different Term 
 */
public final Sentence clone(final Term t){
  return new Sentence(t,punctuation,truth != null ? new TruthValue(truth) : null,stamp.clone());
}","/** 
 * clone with a different term
 * @param t term which has to get cloned
 * @return sentence with the cloned term as a property
 */
public final Sentence clone(final Term t){
  return new Sentence(t,punctuation,truth != null ? new TruthValue(truth) : null,stamp.clone());
}",0.7668845315904139
166649,"/** 
 * Get a String representation of the sentence for display purpose
 * @return The String
 */
public CharSequence toString(final Nar nar,final boolean showStamp){
  final CharSequence contentName=term.name();
  final long t=nar.time();
  final long diff=stamp.getOccurrenceTime() - nar.time();
  final long diffabs=Math.abs(diff);
  String timediff=""String_Node_Str"";
  if (diffabs < nar.narParameters.DURATION) {
    timediff=""String_Node_Str"";
  }
 else {
    final Long Int=diffabs;
    timediff=diff > 0 ? ""String_Node_Str"" + String.valueOf(Int) : ""String_Node_Str"" + String.valueOf(Int);
  }
  if (MiscFlags.TEST_RUNNING) {
    timediff=""String_Node_Str"" + String.valueOf(stamp.getOccurrenceTime());
  }
  String tenseString=""String_Node_Str"" + timediff + ""String_Node_Str"";
  if (stamp.getOccurrenceTime() == Stamp.ETERNAL)   tenseString=""String_Node_Str"";
  final CharSequence stampString=showStamp ? stamp.name() : null;
  int stringLength=contentName.length() + tenseString.length() + 1+ 1;
  if (truth != null)   stringLength+=11;
  if (showStamp)   stringLength+=stampString.length() + 1;
  String conv=""String_Node_Str"";
  if (term.term_indices != null) {
    conv=""String_Node_Str"";
    for (int i=0; i < 4; i++) {
      conv+=String.valueOf(term.term_indices[i]) + ""String_Node_Str"";
    }
    conv=conv.substring(0,conv.length() - 1) + ""String_Node_Str"";
  }
  final StringBuilder buffer=new StringBuilder(stringLength).append(contentName).append(punctuation).append(conv);
  if (tenseString.length() > 0)   buffer.append(' ').append(tenseString);
  if (truth != null) {
    buffer.append(' ');
    truth.appendString(buffer,true);
  }
  if (showStamp)   buffer.append(' ').append(stampString);
  return buffer;
}","/** 
 * @param nar Reasoner instance
 * @param showStamp must the stamp get appended to the string?
 * @return textural representation of the sentence for humans
 */
public CharSequence toString(final Nar nar,final boolean showStamp){
  final CharSequence contentName=term.name();
  final long t=nar.time();
  final long diff=stamp.getOccurrenceTime() - nar.time();
  final long diffabs=Math.abs(diff);
  String timediff=""String_Node_Str"";
  if (diffabs < nar.narParameters.DURATION) {
    timediff=""String_Node_Str"";
  }
 else {
    final Long Int=diffabs;
    timediff=diff > 0 ? ""String_Node_Str"" + String.valueOf(Int) : ""String_Node_Str"" + String.valueOf(Int);
  }
  if (MiscFlags.TEST_RUNNING) {
    timediff=""String_Node_Str"" + String.valueOf(stamp.getOccurrenceTime());
  }
  String tenseString=""String_Node_Str"" + timediff + ""String_Node_Str"";
  if (stamp.getOccurrenceTime() == Stamp.ETERNAL)   tenseString=""String_Node_Str"";
  final CharSequence stampString=showStamp ? stamp.name() : null;
  int stringLength=contentName.length() + tenseString.length() + 1+ 1;
  if (truth != null)   stringLength+=11;
  if (showStamp)   stringLength+=stampString.length() + 1;
  String conv=""String_Node_Str"";
  if (term.term_indices != null) {
    conv=""String_Node_Str"";
    for (int i=0; i < 4; i++) {
      conv+=String.valueOf(term.term_indices[i]) + ""String_Node_Str"";
    }
    conv=conv.substring(0,conv.length() - 1) + ""String_Node_Str"";
  }
  final StringBuilder buffer=new StringBuilder(stringLength).append(contentName).append(punctuation).append(conv);
  if (tenseString.length() > 0)   buffer.append(' ').append(tenseString);
  if (truth != null) {
    buffer.append(' ');
    truth.appendString(buffer,true);
  }
  if (showStamp)   buffer.append(' ').append(stampString);
  return buffer;
}",0.9360135900339752
166650,"/** 
 * Recognize a Goal
 * @return Whether the object is a Goal
 */
public boolean isGoal(){
  return (punctuation == Symbols.GOAL_MARK);
}","/** 
 * @return property, whether the sentence is a goal
 */
public boolean isGoal(){
  return (punctuation == Symbols.GOAL_MARK);
}",0.8382352941176471
166651,"/** 
 * {<M --> S>, <C ==> <M --> P>>} |- <(&&, <#x --> S>, C) ==> <#x --> P>> {<M --> S>, (&&, C, <M --> P>)} |- (&&, C, <<#x --> S> ==> <#x --> P>>)
 * @param oldCompound The whole contentInd of the first premise, Implicationor Conjunction
 * @param nal Reference to the memory
 */
static boolean introVarInner(final Statement premise1,final Statement premise2,final CompoundTerm oldCompound,final DerivationContext nal){
  final Task task=nal.getCurrentTask();
  final Sentence taskSentence=task.sentence;
  if (!taskSentence.isJudgment() || (premise1.getClass() != premise2.getClass()) || oldCompound.containsTerm(premise1)) {
    return false;
  }
  final Term subject1=premise1.getSubject();
  final Term subject2=premise2.getSubject();
  final Term predicate1=premise1.getPredicate();
  final Term predicate2=premise2.getPredicate();
  final Term commonTerm1;
  final Term commonTerm2;
  if (subject1.equals(subject2)) {
    commonTerm1=subject1;
    commonTerm2=secondCommonTerm(predicate1,predicate2,0);
  }
 else   if (predicate1.equals(predicate2)) {
    commonTerm1=predicate1;
    commonTerm2=secondCommonTerm(subject1,subject2,0);
  }
 else {
    return false;
  }
  final Sentence belief=nal.getCurrentBelief();
  final Map<Term,Term> substitute=new HashMap<>();
  boolean b1=false, b2=false;
{
    final Variable varDep2=new Variable(""String_Node_Str"");
    Term content=Conjunction.make(premise1,oldCompound);
    if (!(content instanceof CompoundTerm))     return false;
    substitute.put(commonTerm1,varDep2);
    content=((CompoundTerm)content).applySubstitute(substitute);
    final TruthValue truth=intersection(taskSentence.truth,belief.truth,nal.narParameters);
    final BudgetValue budget=BudgetFunctions.forward(truth,nal);
    b1=(nal.doublePremiseTask(content,truth,budget,false,false)) != null;
  }
  substitute.clear();
{
    final Variable varInd1=new Variable(""String_Node_Str"");
    final Variable varInd2=new Variable(""String_Node_Str"");
    substitute.put(commonTerm1,varInd1);
    if (commonTerm2 != null) {
      substitute.put(commonTerm2,varInd2);
    }
    Term content=Implication.make(premise1,oldCompound);
    if ((content == null) || (!(content instanceof CompoundTerm))) {
      return false;
    }
    content=((CompoundTerm)content).applySubstituteToCompound(substitute);
    final TruthValue truth;
    if (premise1.equals(taskSentence.term)) {
      truth=induction(belief.truth,taskSentence.truth,nal.narParameters);
    }
 else {
      truth=induction(taskSentence.truth,belief.truth,nal.narParameters);
    }
    final BudgetValue budget=BudgetFunctions.forward(truth,nal);
    b2=nal.doublePremiseTask(content,truth,budget,false,false) != null;
  }
  return b1 || b2;
}","/** 
 * {&lt;M --&gt; S&gt;, &lt;C ==&gt; &lt;M --&gt; P&gt;&gt;} |- &lt;(&amp;&amp;, &lt;#x --&gt; S&gt;, C) ==&gt; &lt;#x --&gt; P&gt;&gt; {&lt;M --&gt; S&gt;, (&amp;&amp;, C, &ltM --&gt; P&gt;)} |- (&amp;&amp;, C, &lt;&lt;#x --&gt; S&gt; ==&gt; &lt;#x --&gt; P&gt;&gt;)
 * @param oldCompound The whole contentInd of the first premise, Implicationor Conjunction
 * @param nal Reference to the memory
 */
static boolean introVarInner(final Statement premise1,final Statement premise2,final CompoundTerm oldCompound,final DerivationContext nal){
  final Task task=nal.getCurrentTask();
  final Sentence taskSentence=task.sentence;
  if (!taskSentence.isJudgment() || (premise1.getClass() != premise2.getClass()) || oldCompound.containsTerm(premise1)) {
    return false;
  }
  final Term subject1=premise1.getSubject();
  final Term subject2=premise2.getSubject();
  final Term predicate1=premise1.getPredicate();
  final Term predicate2=premise2.getPredicate();
  final Term commonTerm1;
  final Term commonTerm2;
  if (subject1.equals(subject2)) {
    commonTerm1=subject1;
    commonTerm2=secondCommonTerm(predicate1,predicate2,0);
  }
 else   if (predicate1.equals(predicate2)) {
    commonTerm1=predicate1;
    commonTerm2=secondCommonTerm(subject1,subject2,0);
  }
 else {
    return false;
  }
  final Sentence belief=nal.getCurrentBelief();
  final Map<Term,Term> substitute=new HashMap<>();
  boolean b1=false, b2=false;
{
    final Variable varDep2=new Variable(""String_Node_Str"");
    Term content=Conjunction.make(premise1,oldCompound);
    if (!(content instanceof CompoundTerm))     return false;
    substitute.put(commonTerm1,varDep2);
    content=((CompoundTerm)content).applySubstitute(substitute);
    final TruthValue truth=intersection(taskSentence.truth,belief.truth,nal.narParameters);
    final BudgetValue budget=BudgetFunctions.forward(truth,nal);
    b1=(nal.doublePremiseTask(content,truth,budget,false,false)) != null;
  }
  substitute.clear();
{
    final Variable varInd1=new Variable(""String_Node_Str"");
    final Variable varInd2=new Variable(""String_Node_Str"");
    substitute.put(commonTerm1,varInd1);
    if (commonTerm2 != null) {
      substitute.put(commonTerm2,varInd2);
    }
    Term content=Implication.make(premise1,oldCompound);
    if ((content == null) || (!(content instanceof CompoundTerm))) {
      return false;
    }
    content=((CompoundTerm)content).applySubstituteToCompound(substitute);
    final TruthValue truth;
    if (premise1.equals(taskSentence.term)) {
      truth=induction(belief.truth,taskSentence.truth,nal.narParameters);
    }
 else {
      truth=induction(taskSentence.truth,belief.truth,nal.narParameters);
    }
    final BudgetValue budget=BudgetFunctions.forward(truth,nal);
    b2=nal.doublePremiseTask(content,truth,budget,false,false) != null;
  }
  return b1 || b2;
}",0.9594400574300072
166652,"/** 
 * Introduce a dependent variable in an outer-layer conjunction {<S --> P1>, <S --> P2>} |- (&&, <#x --> P1>, <#x --> P2>)
 * @param taskContent The first premise <M --> S>
 * @param beliefContent The second premise <M --> P>
 * @param index The location of the shared term: 0 for subject, 1 forpredicate
 * @param nal Reference to the memory
 */
public static void introVarOuter(final Statement taskContent,final Statement beliefContent,final int index,final DerivationContext nal){
  if (!(taskContent instanceof Inheritance)) {
    return;
  }
  final Variable varInd1=new Variable(""String_Node_Str"");
  final Variable varInd2=new Variable(""String_Node_Str"");
  Term term11dependent=null, term12dependent=null, term21dependent=null, term22dependent=null;
  Term term11=index == 0 ? varInd1 : taskContent.getSubject();
  Term term21=index == 0 ? varInd1 : beliefContent.getSubject();
  Term term12=index == 0 ? taskContent.getPredicate() : varInd1;
  Term term22=index == 0 ? beliefContent.getPredicate() : varInd1;
  if (index == 0) {
    term12dependent=term12;
    term22dependent=term22;
  }
 else {
    term11dependent=term11;
    term21dependent=term21;
  }
  Term commonTerm=null;
  final Map<Term,Term> subs=new HashMap<>();
  if (index == 0) {
    if (term12 instanceof ImageExt) {
      boolean firstIsImage=term22 instanceof ImageExt;
      boolean secondIsSameImage=true;
      commonTerm=findCommonTermPredicate(term12,term22,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term12=((CompoundTerm)term12).applySubstitute(subs);
        term22=applySubstituteIfCompoundTerm(varInd2,term22,subs);
      }
    }
    if (commonTerm == null && term22 instanceof ImageExt) {
      boolean firstIsImage=term12 instanceof ImageExt;
      boolean secondIsSameImage=true;
      commonTerm=findCommonTermPredicate(term22,term12,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term22=((CompoundTerm)term22).applySubstitute(subs);
        term12=applySubstituteIfCompoundTerm(varInd2,term12,subs);
      }
    }
  }
 else {
    if (term21 instanceof ImageInt) {
      boolean firstIsImage=true;
      boolean secondIsSameImage=term11 instanceof ImageInt;
      commonTerm=findCommonSubject(term11,term21,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term21=((CompoundTerm)term21).applySubstitute(subs);
        term11=applySubstituteIfCompoundTerm(varInd2,term11,subs);
      }
    }
    if (commonTerm == null && term11 instanceof ImageInt) {
      boolean firstIsImage=true;
      boolean secondIsSameImage=term21 instanceof ImageInt;
      commonTerm=findCommonSubject(term21,term11,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term11=((CompoundTerm)term11).applySubstitute(subs);
        term21=applySubstituteIfCompoundTerm(varInd2,term21,subs);
      }
    }
  }
  Statement state1=Inheritance.make(term11,term12);
  Statement state2=Inheritance.make(term21,term22);
  Term content=Implication.make(state1,state2);
  if (content == null) {
    return;
  }
  final TruthValue truthT=nal.getCurrentTask().sentence.truth;
  final TruthValue truthB=nal.getCurrentBelief().truth;
  if ((truthT == null) || (truthB == null)) {
    if (MiscFlags.DEBUG) {
      System.out.println(""String_Node_Str"");
    }
    return;
  }
  TruthValue truth=induction(truthT,truthB,nal.narParameters);
  BudgetValue budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  content=Implication.make(state2,state1);
  truth=induction(truthB,truthT,nal.narParameters);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  content=Equivalence.make(state1,state2);
  truth=comparison(truthT,truthB,nal.narParameters);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  final Variable varDep=new Variable(""String_Node_Str"");
  if (index == 0) {
    state1=Inheritance.make(varDep,term12dependent);
    state2=Inheritance.make(varDep,term22dependent);
  }
 else {
    state1=Inheritance.make(term11dependent,varDep);
    state2=Inheritance.make(term21dependent,varDep);
  }
  if ((state1 == null) || (state2 == null)) {
    return;
  }
  if (state1.cloneDeep().equals(state2.cloneDeep())) {
    return;
  }
  content=Conjunction.make(state1,state2);
  truth=intersection(truthT,truthB,nal.narParameters);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
}","/** 
 * Introduce a dependent variable in an outer-layer conjunction {&lt;S --&gt; P1&gt;, &lt;S --&gt; P2&gt;} |- (&amp;&amp;, &lt;#x --&gt; P1&gt;, &lt;#x --&gt; P2&gt;)
 * @param taskContent The first premise &lt;M --&gt; S&gt;
 * @param beliefContent The second premise &lt;M --&gt; P&gt;
 * @param index The location of the shared term: 0 for subject, 1 forpredicate
 * @param nal Reference to the memory
 */
public static void introVarOuter(final Statement taskContent,final Statement beliefContent,final int index,final DerivationContext nal){
  if (!(taskContent instanceof Inheritance)) {
    return;
  }
  final Variable varInd1=new Variable(""String_Node_Str"");
  final Variable varInd2=new Variable(""String_Node_Str"");
  Term term11dependent=null, term12dependent=null, term21dependent=null, term22dependent=null;
  Term term11=index == 0 ? varInd1 : taskContent.getSubject();
  Term term21=index == 0 ? varInd1 : beliefContent.getSubject();
  Term term12=index == 0 ? taskContent.getPredicate() : varInd1;
  Term term22=index == 0 ? beliefContent.getPredicate() : varInd1;
  if (index == 0) {
    term12dependent=term12;
    term22dependent=term22;
  }
 else {
    term11dependent=term11;
    term21dependent=term21;
  }
  Term commonTerm=null;
  final Map<Term,Term> subs=new HashMap<>();
  if (index == 0) {
    if (term12 instanceof ImageExt) {
      boolean firstIsImage=term22 instanceof ImageExt;
      boolean secondIsSameImage=true;
      commonTerm=findCommonTermPredicate(term12,term22,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term12=((CompoundTerm)term12).applySubstitute(subs);
        term22=applySubstituteIfCompoundTerm(varInd2,term22,subs);
      }
    }
    if (commonTerm == null && term22 instanceof ImageExt) {
      boolean firstIsImage=term12 instanceof ImageExt;
      boolean secondIsSameImage=true;
      commonTerm=findCommonTermPredicate(term22,term12,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term22=((CompoundTerm)term22).applySubstitute(subs);
        term12=applySubstituteIfCompoundTerm(varInd2,term12,subs);
      }
    }
  }
 else {
    if (term21 instanceof ImageInt) {
      boolean firstIsImage=true;
      boolean secondIsSameImage=term11 instanceof ImageInt;
      commonTerm=findCommonSubject(term11,term21,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term21=((CompoundTerm)term21).applySubstitute(subs);
        term11=applySubstituteIfCompoundTerm(varInd2,term11,subs);
      }
    }
    if (commonTerm == null && term11 instanceof ImageInt) {
      boolean firstIsImage=true;
      boolean secondIsSameImage=term21 instanceof ImageInt;
      commonTerm=findCommonSubject(term21,term11,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term11=((CompoundTerm)term11).applySubstitute(subs);
        term21=applySubstituteIfCompoundTerm(varInd2,term21,subs);
      }
    }
  }
  Statement state1=Inheritance.make(term11,term12);
  Statement state2=Inheritance.make(term21,term22);
  Term content=Implication.make(state1,state2);
  if (content == null) {
    return;
  }
  final TruthValue truthT=nal.getCurrentTask().sentence.truth;
  final TruthValue truthB=nal.getCurrentBelief().truth;
  if ((truthT == null) || (truthB == null)) {
    if (MiscFlags.DEBUG) {
      System.out.println(""String_Node_Str"");
    }
    return;
  }
  TruthValue truth=induction(truthT,truthB,nal.narParameters);
  BudgetValue budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  content=Implication.make(state2,state1);
  truth=induction(truthB,truthT,nal.narParameters);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  content=Equivalence.make(state1,state2);
  truth=comparison(truthT,truthB,nal.narParameters);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  final Variable varDep=new Variable(""String_Node_Str"");
  if (index == 0) {
    state1=Inheritance.make(varDep,term12dependent);
    state2=Inheritance.make(varDep,term22dependent);
  }
 else {
    state1=Inheritance.make(term11dependent,varDep);
    state2=Inheritance.make(term21dependent,varDep);
  }
  if ((state1 == null) || (state2 == null)) {
    return;
  }
  if (state1.cloneDeep().equals(state2.cloneDeep())) {
    return;
  }
  content=Conjunction.make(state1,state2);
  truth=intersection(truthT,truthB,nal.narParameters);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
}",0.9886410574142916
166653,"/** 
 * {(--, (&&, A, (--, B))), (--, B)} |- (--, A)
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue reduceConjunctionNeg(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  return reduceConjunction(v1,negation(v2,narParameters),narParameters);
}","/** 
 * {(--, (&amp;&amp;, A, (--, B))), (--, B)} |- (--, A)
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue reduceConjunctionNeg(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  return reduceConjunction(v1,negation(v2,narParameters),narParameters);
}",0.9896907216494846
166654,"/** 
 * {(&&, <#x() ==> M>, <#x() ==> P>), S ==> M} |- <S ==> P>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue anonymousAnalogy(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final TruthValue v0=new TruthValue(f1,w2c(c1,narParameters),narParameters);
  return analogy(v2,v0,narParameters);
}","/** 
 * {(&amp;&amp;, &lt;#x() ==&gt; M&gt;, &lt;#x() ==&gt; P&gt;), S ==&gt; M} |- &lt;S ==&gt; P&gt;
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue anonymousAnalogy(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final TruthValue v0=new TruthValue(f1,w2c(c1,narParameters),narParameters);
  return analogy(v2,v0,narParameters);
}",0.928030303030303
166655,"/** 
 * {<M ==> S>, <M ==> P>} |- <S ==> P>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue induction(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  return abduction(v2,v1,narParameters);
}","/** 
 * {&lt;M ==&gt; S&gt;, &lt;M ==&gt; P&gt;} |- &lt;S ==&gt; P&gt;
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue induction(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  return abduction(v2,v1,narParameters);
}",0.9175108538350216
166656,"/** 
 * {<M --> S>, <M <-> P>} |- <M --> (S&P)>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue intersection(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=and(f1,f2);
  final float c=and(c1,c2);
  return new TruthValue(f,c,narParameters);
}","/** 
 * {&lt;M --&gt; S&gt;, &lt;M &lt;-&gt; P&gt;} |- &lt;M --&gt; (S&amp;P)&gt;
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue intersection(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=and(f1,f2);
  final float c=and(c1,c2);
  return new TruthValue(f,c,narParameters);
}",0.948306595365419
166657,"/** 
 * {<A ==> B>} |- <B ==> A>
 * @param v1 Truth value of the premise
 * @return Truth value of the conclusion
 */
public static final TruthValue conversion(final TruthValue v1,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(f1,c1);
  final float c=w2c(w,narParameters);
  return new TruthValue(1,c,narParameters);
}","/** 
 * {&lt;A ==&gt; B&gt;} |- &lt;B ==&gt; A&gt;
 * @param v1 Truth value of the premise
 * @return Truth value of the conclusion
 */
public static final TruthValue conversion(final TruthValue v1,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(f1,c1);
  final float c=w2c(w,narParameters);
  return new TruthValue(1,c,narParameters);
}",0.9625
166658,"/** 
 * {<M ==> S>, <M ==> P>} |- <S <=> P>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue comparison(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f0=or(f1,f2);
  final float f=(f0 == 0) ? 0 : (and(f1,f2) / f0);
  final float w=and(f0,c1,c2);
  final float c=w2c(w,narParameters);
  return new TruthValue(f,c,narParameters);
}","/** 
 * {&lt;M ==&gt; S&gt;, &lt;M ==&gt; P&gt;} |- &lt;S &lt;=&gt; P&gt;
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue comparison(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f0=or(f1,f2);
  final float f=(f0 == 0) ? 0 : (and(f1,f2) / f0);
  final float w=and(f0,c1,c2);
  final float c=w2c(w,narParameters);
  return new TruthValue(f,c,narParameters);
}",0.9565891472868217
166659,"/** 
 * {(--, (&&, A, B)), B} |- (--, A)
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue reduceConjunction(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final TruthValue v0=intersection(negation(v1,narParameters),v2,narParameters);
  return negation(deduction(v0,1f,narParameters),narParameters);
}","/** 
 * {(--, (&amp;&amp;, A, B)), B} |- (--, A)
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue reduceConjunction(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final TruthValue v0=intersection(negation(v1,narParameters),v2,narParameters);
  return negation(deduction(v0,1f,narParameters),narParameters);
}",0.9910313901345292
166660,"/** 
 * {M, <P ==> M>} |- P
 * @param v1 Truth value of the first premise
 * @param reliance Confidence of the second (analytical) premise
 * @return Truth value of the conclusion
 */
public static final TruthValue abduction(final TruthValue v1,final float reliance,Parameters narParameters){
  if (v1.getAnalytic()) {
    return new TruthValue(0.5f,0f,narParameters);
  }
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(c1,reliance);
  final float c=w2c(w,narParameters);
  return new TruthValue(f1,c,true,narParameters);
}","/** 
 * {M, &lt;P ==&gt; M&gt;} |- P
 * @param v1 Truth value of the first premise
 * @param reliance Confidence of the second (analytical) premise
 * @return Truth value of the conclusion
 */
public static final TruthValue abduction(final TruthValue v1,final float reliance,Parameters narParameters){
  if (v1.getAnalytic()) {
    return new TruthValue(0.5f,0f,narParameters);
  }
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(c1,reliance);
  final float c=w2c(w,narParameters);
  return new TruthValue(f1,c,true,narParameters);
}",0.986922406277245
166661,"/** 
 * {<S <=> M>, <M <=> P>} |- <S <=> P>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue resemblance(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=and(f1,f2);
  final float c=and(c1,c2,or(f1,f2));
  return new TruthValue(f,c,narParameters);
}","/** 
 * {&lt;S &lt;=&gt; M&gt;, &lt;M &lt;=&gt; P&gt;} |- &lt;S &lt;=&gt; P&gt;
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue resemblance(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=and(f1,f2);
  final float c=and(c1,c2,or(f1,f2));
  return new TruthValue(f,c,narParameters);
}",0.9382716049382716
166662,"/** 
 * {<M --> S>, <M <-> P>} |- <M --> (S|P)>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue union(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=or(f1,f2);
  final float c=and(c1,c2);
  return new TruthValue(f,c,narParameters);
}","/** 
 * {&lt;M --&gt; S&gt;, &lt;M &gt; P&gt;} |- &lt;M --&gt; (S|P)&gt;
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue union(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=or(f1,f2);
  final float c=and(c1,c2);
  return new TruthValue(f,c,narParameters);
}",0.9535095715587968
166663,"/** 
 * {<S ==> M>, <M <=> P>} |- <S ==> P>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue analogy(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=and(f1,f2);
  final float c=and(c1,c2,f2);
  return new TruthValue(f,c,narParameters);
}","/** 
 * {&lt;S ==&gt; M&gt;, &lt;M &lt;=&gt; P&gt;} |- &lt;S ==&gt; P&gt;
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue analogy(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=and(f1,f2);
  final float c=and(c1,c2,f2);
  return new TruthValue(f,c,narParameters);
}",0.9493670886075948
166664,"/** 
 * {M, <M ==> P>} |- P
 * @param v1 Truth value of the first premise
 * @param reliance Confidence of the second (analytical) premise
 * @return Truth value of the conclusion
 */
public static final TruthValue deduction(final TruthValue v1,final float reliance,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float c=and(f1,c1,reliance);
  return new TruthValue(f1,c,true,narParameters);
}","/** 
 * {M, &lt;M ==&gt; P&gt;} |- P
 * @param v1 Truth value of the first premise
 * @param reliance Confidence of the second (analytical) premise
 * @return Truth value of the conclusion
 */
public static final TruthValue deduction(final TruthValue v1,final float reliance,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float c=and(f1,c1,reliance);
  return new TruthValue(f1,c,true,narParameters);
}",0.9836423118865868
166665,"/** 
 * {<A ==> B>} |- <(--, B) ==> (--, A)>
 * @param v1 Truth value of the premise
 * @return Truth value of the conclusion
 */
public static final TruthValue contraposition(final TruthValue v1,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(1 - f1,c1);
  final float c=w2c(w,narParameters);
  return new TruthValue(0,c,narParameters);
}","/** 
 * {&lt;A ==&gt; B&gt;} |- &lt;(--, B) ==&gt; (--, A)&gt;
 * @param v1 Truth value of the premise
 * @return Truth value of the conclusion
 */
public static final TruthValue contraposition(final TruthValue v1,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(1 - f1,c1);
  final float c=w2c(w,narParameters);
  return new TruthValue(0,c,narParameters);
}",0.9642857142857144
166666,"/** 
 * {<M ==> S>, <P ==> M>} |- <S ==> P>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue exemplification(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  if (v1.getAnalytic() || v2.getAnalytic()) {
    return new TruthValue(0.5f,0f,narParameters);
  }
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float w=and(f1,f2,c1,c2);
  final float c=w2c(w,narParameters);
  return new TruthValue(1,c,narParameters);
}","/** 
 * {&lt;M ==&gt; S&gt;, &lt;P ==&gt; M&gt;} |- &lt;S ==&gt; P&gt;
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue exemplification(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  if (v1.getAnalytic() || v2.getAnalytic()) {
    return new TruthValue(0.5f,0f,narParameters);
  }
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float w=and(f1,f2,c1,c2);
  final float c=w2c(w,narParameters);
  return new TruthValue(1,c,narParameters);
}",0.9635687732342008
166667,"/** 
 * {<A ==> B>} |- <B ==> A>
 * @param v1 Truth value of the premise
 * @return Truth value of the conclusion
 */
static final TruthValue conversion(final TruthValue v1,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(f1,c1);
  final float c=w2c(w,narParameters);
  return new TruthValue(1,c,narParameters);
}","/** 
 * {<A ==> B>} |- <B ==> A>
 * @param v1 Truth value of the premise
 * @return Truth value of the conclusion
 */
public static final TruthValue conversion(final TruthValue v1,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(f1,c1);
  final float c=w2c(w,narParameters);
  return new TruthValue(1,c,narParameters);
}",0.990967741935484
166668,"/** 
 * {M, <P ==> M>} |- P
 * @param v1 Truth value of the first premise
 * @param reliance Confidence of the second (analytical) premise
 * @return Truth value of the conclusion
 */
static final TruthValue abduction(final TruthValue v1,final float reliance,Parameters narParameters){
  if (v1.getAnalytic()) {
    return new TruthValue(0.5f,0f,narParameters);
  }
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(c1,reliance);
  final float c=w2c(w,narParameters);
  return new TruthValue(f1,c,true,narParameters);
}","/** 
 * {M, <P ==> M>} |- P
 * @param v1 Truth value of the first premise
 * @param reliance Confidence of the second (analytical) premise
 * @return Truth value of the conclusion
 */
public static final TruthValue abduction(final TruthValue v1,final float reliance,Parameters narParameters){
  if (v1.getAnalytic()) {
    return new TruthValue(0.5f,0f,narParameters);
  }
  final float f1=v1.getFrequency();
  final float c1=v1.getConfidence();
  final float w=and(c1,reliance);
  final float c=w2c(w,narParameters);
  return new TruthValue(f1,c,true,narParameters);
}",0.9938107869142352
166669,"/** 
 * {<S <=> M>, <M <=> P>} |- <S <=> P>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
static final TruthValue resemblance(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=and(f1,f2);
  final float c=and(c1,c2,or(f1,f2));
  return new TruthValue(f,c,narParameters);
}","/** 
 * {<S <=> M>, <M <=> P>} |- <S <=> P>
 * @param v1 Truth value of the first premise
 * @param v2 Truth value of the second premise
 * @return Truth value of the conclusion
 */
public static final TruthValue resemblance(final TruthValue v1,final TruthValue v2,Parameters narParameters){
  final float f1=v1.getFrequency();
  final float f2=v2.getFrequency();
  final float c1=v1.getConfidence();
  final float c2=v2.getConfidence();
  final float f=and(f1,f2);
  final float c=and(c1,c2,or(f1,f2));
  return new TruthValue(f,c,narParameters);
}",0.9935838680109992
166670,"public static Nar LoadFromFile(final String name) throws IOException, ClassNotFoundException, IllegalAccessException, ParseException, ParserConfigurationException, SAXException, NoSuchMethodException, InstantiationException, InvocationTargetException {
  final FileInputStream inStream=new FileInputStream(name);
  final ObjectInputStream stream=new ObjectInputStream(inStream);
  final Nar ret=(Nar)stream.readObject();
  ret.memory.event=new EventEmitter();
  ret.plugins=new ArrayList<>();
  List<Plugin> pluginsToAdd=ConfigReader.loadParamsFromFileAndReturnPlugins(ret.usedConfigFilePath,ret,ret.narParameters);
  for (  Plugin p : pluginsToAdd) {
    ret.addPlugin(p);
  }
  return ret;
}","public static Nar LoadFromFile(final String name) throws IOException, ClassNotFoundException, IllegalAccessException, ParseException, ParserConfigurationException, SAXException, NoSuchMethodException, InstantiationException, InvocationTargetException {
  final FileInputStream inStream=new FileInputStream(name);
  final ObjectInputStream stream=new ObjectInputStream(inStream);
  final Nar ret=(Nar)stream.readObject();
  ret.memory.event=new EventEmitter();
  ret.plugins=new ArrayList<>();
  ret.sensoryChannels=new HashMap<>();
  List<Plugin> pluginsToAdd=ConfigReader.loadParamsFromFileAndReturnPlugins(ret.usedConfigFilePath,ret,ret.narParameters);
  for (  Plugin p : pluginsToAdd) {
    ret.addPlugin(p);
  }
  return ret;
}",0.9726315789473684
166671,"@Override protected List<Task> execute(Operation operation,final Term[] args,final Memory m){
  final int numArgs=args.length - 1;
  if (numArgs < 1) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (numArgs < 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final Term lastTerm=args[numArgs];
  final boolean variable=lastTerm instanceof Variable;
  if (!variable) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int numParam=numArgs - 1;
  final Term[] x=new Term[numParam];
  System.arraycopy(args,1,x,0,numParam);
  final Term y;
  y=function(m,x);
  if (y == null) {
    return null;
  }
  final Variable var=new Variable(""String_Node_Str"");
  operation=(Operation)operation.setComponent(0,((CompoundTerm)operation.getSubject()).setComponent(numArgs,y,m),m);
  final float confidence=m.narParameters.DEFAULT_JUDGMENT_CONFIDENCE;
  if (variable) {
    final Sentence s=new Sentence(operation,Symbols.JUDGMENT_MARK,new TruthValue(1.0f,m.narParameters.DEFAULT_JUDGMENT_CONFIDENCE,m.narParameters),new Stamp(m));
    final BudgetValue budgetForNewTask=new BudgetValue(m.narParameters.DEFAULT_JUDGMENT_PRIORITY,m.narParameters.DEFAULT_FEEDBACK_DURABILITY,truthToQuality(s.getTruth()),m.narParameters);
    final Task newTask=new Task(s,budgetForNewTask,Task.EnumType.INPUT);
    return Lists.newArrayList(newTask);
  }
 else {
    return null;
  }
}","@Override protected List<Task> execute(Operation operation,final Term[] args,final Memory m){
  final int numArgs=args.length - 1;
  if (numArgs < 1) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (numArgs < 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final Term lastTerm=args[numArgs];
  final boolean variable=lastTerm instanceof Variable;
  if (!variable) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int numParam=numArgs - 1;
  final Term[] x=new Term[numParam];
  System.arraycopy(args,1,x,0,numParam);
  final Term y;
  y=function(m,x);
  if (y == null) {
    return null;
  }
  final Variable var=new Variable(""String_Node_Str"");
  operation=(Operation)operation.setComponent(0,((CompoundTerm)operation.getSubject()).setComponent(numArgs,y,m),m);
  final float confidence=m.narParameters.DEFAULT_JUDGMENT_CONFIDENCE;
  if (variable) {
    final Sentence s=new Sentence(operation,Symbols.JUDGMENT_MARK,new TruthValue(1.0f,confidence,m.narParameters),new Stamp(m));
    final BudgetValue budgetForNewTask=new BudgetValue(m.narParameters.DEFAULT_JUDGMENT_PRIORITY,m.narParameters.DEFAULT_FEEDBACK_DURABILITY,truthToQuality(s.getTruth()),m.narParameters);
    final Task newTask=new Task(s,budgetForNewTask,Task.EnumType.INPUT);
    return Lists.newArrayList(newTask);
  }
 else {
    return null;
  }
}",0.9809421071556994
166672,"@Override public boolean setEnabled(final Nar n,final boolean enabled){
  n.memory.event.set(this,enabled,Events.InduceSucceedingEvent.class,Events.CycleEnd.class);
  TruthValue expiredTruth=new TruthValue(0.0f,n.narParameters.ANTICIPATION_CONFIDENCE,n.narParameters);
  BudgetValue expiredBudget=new BudgetValue(n.narParameters.DEFAULT_JUDGMENT_PRIORITY,n.narParameters.DEFAULT_JUDGMENT_DURABILITY,BudgetFunctions.truthToQuality(expiredTruth),n.narParameters);
  return true;
}","@Override public boolean setEnabled(final Nar n,final boolean enabled){
  n.memory.event.set(this,enabled,Events.InduceSucceedingEvent.class,Events.CycleEnd.class);
  expiredTruth=new TruthValue(0.0f,n.narParameters.ANTICIPATION_CONFIDENCE,n.narParameters);
  expiredBudget=new BudgetValue(n.narParameters.DEFAULT_JUDGMENT_PRIORITY,n.narParameters.DEFAULT_JUDGMENT_DURABILITY,BudgetFunctions.truthToQuality(expiredTruth),n.narParameters);
  return true;
}",0.97534833869239
166673,"/** 
 * A frame, consisting of one or more Nar memory cycles
 */
public void cycle(){
synchronized (cycle) {
    cycle++;
  }
  try {
    memory.cycle(this);
  }
 catch (  final Exception e) {
    if (MiscFlags.SHOW_REASONING_ERRORS) {
      emit(ERR.class,e);
    }
    throw e;
  }
}","/** 
 * A frame, consisting of one or more Nar memory cycles
 */
public void cycle(){
  try {
    memory.cycle(this);
synchronized (cycle) {
      cycle++;
    }
  }
 catch (  final Exception e) {
    if (MiscFlags.SHOW_REASONING_ERRORS) {
      emit(ERR.class,e);
    }
    throw e;
  }
}",0.8780487804878049
166674,"public boolean derivedTask(final Task task,final boolean revised,final boolean single,final boolean overlapAllowed,final boolean addToMemory){
  if ((task.sentence.isGoal() || task.sentence.isQuest()) && (task.sentence.term instanceof Implication || task.sentence.term instanceof Equivalence)) {
    return false;
  }
  if (!task.budget.aboveThreshold()) {
    memory.removeTask(task,""String_Node_Str"");
    return false;
  }
  if (task.sentence != null && task.sentence.truth != null) {
    final float conf=task.sentence.truth.getConfidence();
    if (conf < Parameters.TRUTH_EPSILON) {
      memory.removeTask(task,""String_Node_Str"");
      return false;
    }
  }
  if (task.sentence.term instanceof Operation) {
    final Operation op=(Operation)task.sentence.term;
    if (op.getSubject() instanceof Variable || op.getPredicate() instanceof Variable) {
      memory.removeTask(task,""String_Node_Str"");
      return false;
    }
  }
  final Stamp stamp=task.sentence.stamp;
  if (!overlapAllowed) {
    final int stampLength=stamp.baseLength;
    for (int i=0; i < stampLength; i++) {
      final long baseI=stamp.evidentialBase[i];
      for (int j=0; j < stampLength; j++) {
        if ((!single && this.evidentalOverlap) || ((i != j) && (baseI == stamp.evidentialBase[j]))) {
          memory.removeTask(task,""String_Node_Str"");
          return false;
        }
      }
    }
  }
  task.setElemOfSequenceBuffer(false);
  if (!revised) {
    task.getBudget().setDurability(task.getBudget().getDurability() * Parameters.DERIVATION_DURABILITY_LEAK);
    task.getBudget().setPriority(task.getBudget().getPriority() * Parameters.DERIVATION_PRIORITY_LEAK);
  }
  memory.event.emit(Events.TaskDerive.class,task,revised,single);
  if (addToMemory) {
    addTask(task,""String_Node_Str"");
  }
  return true;
}","public boolean derivedTask(final Task task,final boolean revised,final boolean single,final boolean overlapAllowed,final boolean addToMemory){
  if ((task.sentence.isGoal() || task.sentence.isQuest()) && (task.sentence.term instanceof Implication || task.sentence.term instanceof Equivalence)) {
    return false;
  }
  if (!task.budget.aboveThreshold()) {
    memory.removeTask(task,""String_Node_Str"");
    return false;
  }
  if (task.sentence != null && task.sentence.truth != null) {
    final float conf=task.sentence.truth.getConfidence();
    if (conf < Parameters.TRUTH_EPSILON) {
      memory.removeTask(task,""String_Node_Str"");
      return false;
    }
  }
  if (task.sentence.term instanceof Operation) {
    final Operation op=(Operation)task.sentence.term;
    if (op.getSubject() instanceof Variable || op.getPredicate() instanceof Variable) {
      memory.removeTask(task,""String_Node_Str"");
      return false;
    }
  }
  if (task.sentence.term.cloneDeep() == null) {
    memory.removeTask(task,""String_Node_Str"");
    return false;
  }
  final Stamp stamp=task.sentence.stamp;
  if (!overlapAllowed) {
    final int stampLength=stamp.baseLength;
    for (int i=0; i < stampLength; i++) {
      final long baseI=stamp.evidentialBase[i];
      for (int j=0; j < stampLength; j++) {
        if ((!single && this.evidentalOverlap) || ((i != j) && (baseI == stamp.evidentialBase[j]))) {
          memory.removeTask(task,""String_Node_Str"");
          return false;
        }
      }
    }
  }
  task.setElemOfSequenceBuffer(false);
  if (!revised) {
    task.getBudget().setDurability(task.getBudget().getDurability() * Parameters.DERIVATION_DURABILITY_LEAK);
    task.getBudget().setPriority(task.getBudget().getPriority() * Parameters.DERIVATION_PRIORITY_LEAK);
  }
  memory.event.emit(Events.TaskDerive.class,task,revised,single);
  if (addToMemory) {
    addTask(task,""String_Node_Str"");
  }
  return true;
}",0.9686579158853468
166675,"public List<Task> doublePremiseTask(final Term newContent,final TruthValue newTruth,final BudgetValue newBudget,final boolean temporalInduction,final boolean overlapAllowed,final boolean addToMemory){
  final List<Task> ret=new ArrayList<>();
  if (newContent == null) {
    return null;
  }
  if (!newBudget.aboveThreshold()) {
    return null;
  }
  if ((newContent != null) && (!(newContent instanceof Interval)) && (!(newContent instanceof Variable))) {
    if (newContent.subjectOrPredicateIsIndependentVar()) {
      return null;
    }
    final Stamp derive_stamp=getTheNewStamp().clone();
    this.resetOccurrenceTime();
    Sentence newSentence=new Sentence(newContent,getCurrentTask().sentence.punctuation,newTruth,derive_stamp);
    newSentence.producedByTemporalInduction=temporalInduction;
    Task newTask=Task.make(newSentence,newBudget,getCurrentTask(),getCurrentBelief());
    if (newTask != null) {
      final boolean added=derivedTask(newTask,false,false,overlapAllowed,addToMemory);
      if (added) {
        ret.add(newTask);
      }
    }
    if (temporalInduction && Parameters.IMMEDIATE_ETERNALIZATION) {
      final TruthValue truthEt=TruthFunctions.eternalize(newTruth);
      final Stamp st=derive_stamp.clone();
      st.setEternal();
      newSentence=new Sentence(newContent,getCurrentTask().sentence.punctuation,truthEt,st);
      newSentence.producedByTemporalInduction=temporalInduction;
      newTask=Task.make(newSentence,newBudget,getCurrentTask(),getCurrentBelief());
      if (newTask != null) {
        final boolean added=derivedTask(newTask,false,false,overlapAllowed,addToMemory);
        if (added) {
          ret.add(newTask);
        }
      }
    }
    return ret;
  }
  return null;
}","public List<Task> doublePremiseTask(final Term newContent,final TruthValue newTruth,final BudgetValue newBudget,final boolean temporalInduction,final boolean overlapAllowed,final boolean addToMemory){
  final List<Task> ret=new ArrayList<>();
  if (newContent == null || !newBudget.aboveThreshold()) {
    return null;
  }
  if ((newContent != null) && (!(newContent instanceof Interval)) && (!(newContent instanceof Variable))) {
    if (newContent.subjectOrPredicateIsIndependentVar()) {
      return null;
    }
    final Stamp derive_stamp=getTheNewStamp().clone();
    this.resetOccurrenceTime();
    Sentence newSentence=new Sentence(newContent,getCurrentTask().sentence.punctuation,newTruth,derive_stamp);
    newSentence.producedByTemporalInduction=temporalInduction;
    Task newTask=Task.make(newSentence,newBudget,getCurrentTask(),getCurrentBelief());
    if (newTask != null) {
      final boolean added=derivedTask(newTask,false,false,overlapAllowed,addToMemory);
      if (added) {
        ret.add(newTask);
      }
    }
    if (temporalInduction && Parameters.IMMEDIATE_ETERNALIZATION) {
      final TruthValue truthEt=TruthFunctions.eternalize(newTruth);
      final Stamp st=derive_stamp.clone();
      st.setEternal();
      newSentence=new Sentence(newContent,getCurrentTask().sentence.punctuation,truthEt,st);
      newSentence.producedByTemporalInduction=temporalInduction;
      newTask=Task.make(newSentence,newBudget,getCurrentTask(),getCurrentBelief());
      if (newTask != null) {
        final boolean added=derivedTask(newTask,false,false,overlapAllowed,addToMemory);
        if (added) {
          ret.add(newTask);
        }
      }
    }
    return ret;
  }
  return null;
}",0.989828538215635
166676,"/** 
 * Create a Sentence with the given fields
 * @param content The Term that forms the content of the sentence
 * @param punctuation The punctuation indicating the type of the sentence
 * @param truth The truth value of the sentence, null for question
 * @param stamp The stamp of the sentence indicating its derivation time andbase
 */
private Sentence(T _content,final char punctuation,final TruthValue truth,final Stamp stamp,final boolean normalize){
  if (punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    if (_content instanceof Conjunction) {
      final Conjunction c=(Conjunction)_content;
      if (c.getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
        if (c.term[c.term.length - 1] instanceof Interval) {
          long time=0;
          int u=0;
          while (c.term.length - 1 - u >= 0 && c.term[c.term.length - 1 - u] instanceof Interval) {
            time+=((Interval)c.term[c.term.length - 1 - u]).time;
            u++;
          }
          final Term[] term2=new Term[c.term.length - u];
          System.arraycopy(c.term,0,term2,0,term2.length);
          _content=(T)Conjunction.make(term2,c.getTemporalOrder(),c.isSpatial);
          if (!c.isSpatial && stamp != null && stamp.getOccurrenceTime() != Stamp.ETERNAL)           stamp.setOccurrenceTime(stamp.getOccurrenceTime() - time);
        }
        if (c.term[0] instanceof Interval) {
          long time=0;
          int u=0;
          while (u < c.term.length && (c.term[u] instanceof Interval)) {
            time+=((Interval)c.term[u]).time;
            u++;
          }
          final Term[] term2=new Term[c.term.length - u];
          System.arraycopy(c.term,u,term2,0,term2.length);
          _content=(T)Conjunction.make(term2,c.getTemporalOrder(),c.isSpatial);
          if (!c.isSpatial && stamp != null && stamp.getOccurrenceTime() != Stamp.ETERNAL)           stamp.setOccurrenceTime(stamp.getOccurrenceTime() + time);
        }
      }
    }
  }
  this.punctuation=punctuation;
  if (truth != null) {
    if (_content instanceof Implication || _content instanceof Equivalence) {
      if (((Statement)_content).getSubject().hasVarIndep() && !((Statement)_content).getPredicate().hasVarIndep())       truth.setConfidence(0.0f);
      if (((Statement)_content).getPredicate().hasVarIndep() && !((Statement)_content).getSubject().hasVarIndep())       truth.setConfidence(0.0f);
    }
 else     if (_content instanceof Interval && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
      truth.setConfidence(0.0f);
      if (Parameters.DEBUG)       throw new IllegalStateException(""String_Node_Str"" + _content + punctuation+ ""String_Node_Str""+ stamp);
    }
    if ((!isQuestion() && !isQuest()) && (truth == null) && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (_content.subjectOrPredicateIsIndependentVar() && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
      truth.setConfidence(0.0f);
      if (Parameters.DEBUG)       throw new IllegalStateException(""String_Node_Str"");
    }
    if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
      if (!Term.valid(_content)) {
        truth.setConfidence(0.0f);
        if (Parameters.DEBUG) {
          System.err.println(""String_Node_Str"" + _content);
          Thread.dumpStack();
        }
      }
    }
  }
  if ((isQuestion() || isQuest()) && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK && !stamp.isEternal()) {
    stamp.setEternal();
  }
  this.truth=truth;
  this.stamp=stamp;
  this.revisible=_content instanceof Implication || _content instanceof Equivalence || !(_content.hasVarDep());
  T newTerm=null;
  if (_content instanceof CompoundTerm)   newTerm=(T)((CompoundTerm)_content).cloneDeepVariables();
  if (newTerm != null && normalize && _content.hasVar() && (!((CompoundTerm)_content).isNormalized())) {
    this.term=(T)((CompoundTerm)_content).cloneDeepVariables();
    final CompoundTerm c=(CompoundTerm)term;
    final List<Variable> vars=new ArrayList();
    c.recurseSubtermsContainingVariables((t,parent) -> {
      if (t instanceof Variable) {
        final Variable v=((Variable)t);
        vars.add(v);
      }
    }
);
    final Map<CharSequence,CharSequence> rename=new HashMap();
    boolean renamed=false;
    for (    final Variable v : vars) {
      CharSequence vname=v.name();
      if (!v.hasVarIndep())       vname=vname + ""String_Node_Str"" + v.getScope().name();
      CharSequence n=rename.get(vname);
      if (n == null) {
        rename.put(vname,n=Variable.getName(v.getType(),rename.size() + 1));
        if (!n.equals(vname))         renamed=true;
      }
      v.setScope(c,n);
    }
    if (renamed) {
      c.invalidateName();
      if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES) {
        if (!Term.valid(c)) {
          final CompoundTerm.UnableToCloneException ntc=new CompoundTerm.UnableToCloneException(""String_Node_Str"" + c + ""String_Node_Str""+ _content);
          ntc.printStackTrace();
          throw ntc;
        }
      }
    }
    c.setNormalized(true);
  }
 else {
    this.term=_content;
  }
  if (isNotTermlinkNormalizer())   this.hash=Objects.hash(term,punctuation,truth,stamp.getOccurrenceTime());
 else   this.hash=Objects.hash(term,punctuation,truth);
}","/** 
 * Create a Sentence with the given fields
 * @param content The Term that forms the content of the sentence
 * @param punctuation The punctuation indicating the type of the sentence
 * @param truth The truth value of the sentence, null for question
 * @param stamp The stamp of the sentence indicating its derivation time andbase
 */
private Sentence(T _content,final char punctuation,final TruthValue truth,final Stamp stamp,final boolean normalize){
  if (punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    if (_content instanceof Conjunction) {
      final Conjunction c=(Conjunction)_content;
      if (c.getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
        if (c.term[c.term.length - 1] instanceof Interval) {
          long time=0;
          int u=0;
          while (c.term.length - 1 - u >= 0 && c.term[c.term.length - 1 - u] instanceof Interval) {
            time+=((Interval)c.term[c.term.length - 1 - u]).time;
            u++;
          }
          final Term[] term2=new Term[c.term.length - u];
          System.arraycopy(c.term,0,term2,0,term2.length);
          _content=(T)Conjunction.make(term2,c.getTemporalOrder(),c.isSpatial);
          if (!c.isSpatial && stamp != null && stamp.getOccurrenceTime() != Stamp.ETERNAL)           stamp.setOccurrenceTime(stamp.getOccurrenceTime() - time);
        }
        if (c.term[0] instanceof Interval) {
          long time=0;
          int u=0;
          while (u < c.term.length && (c.term[u] instanceof Interval)) {
            time+=((Interval)c.term[u]).time;
            u++;
          }
          final Term[] term2=new Term[c.term.length - u];
          System.arraycopy(c.term,u,term2,0,term2.length);
          _content=(T)Conjunction.make(term2,c.getTemporalOrder(),c.isSpatial);
          if (!c.isSpatial && stamp != null && stamp.getOccurrenceTime() != Stamp.ETERNAL)           stamp.setOccurrenceTime(stamp.getOccurrenceTime() + time);
        }
      }
    }
  }
  this.punctuation=punctuation;
  if (truth != null) {
    if (_content instanceof Implication || _content instanceof Equivalence) {
      if (((Statement)_content).getSubject().hasVarIndep() && !((Statement)_content).getPredicate().hasVarIndep())       truth.setConfidence(0.0f);
      if (((Statement)_content).getPredicate().hasVarIndep() && !((Statement)_content).getSubject().hasVarIndep())       truth.setConfidence(0.0f);
    }
 else     if (_content instanceof Interval && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
      truth.setConfidence(0.0f);
      if (Parameters.DEBUG)       throw new IllegalStateException(""String_Node_Str"" + _content + punctuation+ ""String_Node_Str""+ stamp);
    }
    if ((!isQuestion() && !isQuest()) && (truth == null) && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (_content.subjectOrPredicateIsIndependentVar() && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
      truth.setConfidence(0.0f);
      if (Parameters.DEBUG)       throw new IllegalStateException(""String_Node_Str"");
    }
    if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
      if (!Term.valid(_content)) {
        truth.setConfidence(0.0f);
        if (Parameters.DEBUG) {
          System.err.println(""String_Node_Str"" + _content);
          Thread.dumpStack();
        }
      }
    }
  }
  if ((isQuestion() || isQuest()) && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK && !stamp.isEternal()) {
    stamp.setEternal();
  }
  this.truth=truth;
  this.stamp=stamp;
  this.revisible=_content instanceof Implication || _content instanceof Equivalence || !(_content.hasVarDep());
  T newTerm=null;
  if (_content instanceof CompoundTerm)   newTerm=(T)((CompoundTerm)_content).cloneDeepVariables();
  if (newTerm != null && normalize && _content.hasVar() && (!((CompoundTerm)_content).isNormalized())) {
    this.term=newTerm;
    final CompoundTerm c=(CompoundTerm)term;
    final List<Variable> vars=new ArrayList();
    c.recurseSubtermsContainingVariables((t,parent) -> {
      if (t instanceof Variable) {
        final Variable v=((Variable)t);
        vars.add(v);
      }
    }
);
    final Map<CharSequence,CharSequence> rename=new HashMap();
    boolean renamed=false;
    for (    final Variable v : vars) {
      CharSequence vname=v.name();
      if (!v.hasVarIndep())       vname=vname + ""String_Node_Str"" + v.getScope().name();
      CharSequence n=rename.get(vname);
      if (n == null) {
        rename.put(vname,n=Variable.getName(v.getType(),rename.size() + 1));
        if (!n.equals(vname))         renamed=true;
      }
      v.setScope(c,n);
    }
    if (renamed) {
      c.invalidateName();
      if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES) {
        if (!Term.valid(c)) {
          final CompoundTerm.UnableToCloneException ntc=new CompoundTerm.UnableToCloneException(""String_Node_Str"" + c + ""String_Node_Str""+ _content);
          ntc.printStackTrace();
          throw ntc;
        }
      }
    }
    c.setNormalized(true);
  }
 else {
    this.term=_content;
  }
  if (isNotTermlinkNormalizer())   this.hash=Objects.hash(term,punctuation,truth,stamp.getOccurrenceTime());
 else   this.hash=Objects.hash(term,punctuation,truth);
}",0.994872751002144
166677,"/** 
 * Introduce a dependent variable in an outer-layer conjunction {<S --> P1>, <S --> P2>} |- (&&, <#x --> P1>, <#x --> P2>)
 * @param taskContent The first premise <M --> S>
 * @param beliefContent The second premise <M --> P>
 * @param index The location of the shared term: 0 for subject, 1 forpredicate
 * @param nal Reference to the memory
 */
public static void introVarOuter(final Statement taskContent,final Statement beliefContent,final int index,final DerivationContext nal){
  if (!(taskContent instanceof Inheritance)) {
    return;
  }
  final Variable varInd1=new Variable(""String_Node_Str"");
  final Variable varInd2=new Variable(""String_Node_Str"");
  Term term11dependent=null, term12dependent=null, term21dependent=null, term22dependent=null;
  Term term11=index == 0 ? varInd1 : taskContent.getSubject();
  Term term21=index == 0 ? varInd1 : beliefContent.getSubject();
  Term term12=index == 0 ? taskContent.getPredicate() : varInd1;
  Term term22=index == 0 ? beliefContent.getPredicate() : varInd1;
  if (index == 0) {
    term12dependent=term12;
    term22dependent=term22;
  }
 else {
    term11dependent=term11;
    term21dependent=term21;
  }
  Term commonTerm=null;
  final Map<Term,Term> subs=new HashMap<>();
  if (index == 0) {
    if (term12 instanceof ImageExt) {
      boolean firstIsImage=term22 instanceof ImageExt;
      boolean secondIsSameImage=true;
      commonTerm=findCommonTermPredicate(term12,term22,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term12=((CompoundTerm)term12).applySubstitute(subs);
        term22=applySubstituteIfCompoundTerm(varInd2,term22,subs);
      }
    }
    if (commonTerm == null && term22 instanceof ImageExt) {
      boolean firstIsImage=term12 instanceof ImageExt;
      boolean secondIsSameImage=true;
      commonTerm=findCommonTermPredicate(term22,term12,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term22=((CompoundTerm)term22).applySubstitute(subs);
        term12=applySubstituteIfCompoundTerm(varInd2,term12,subs);
      }
    }
  }
 else {
    if (term21 instanceof ImageInt) {
      boolean firstIsImage=true;
      boolean secondIsSameImage=term11 instanceof ImageInt;
      commonTerm=findCommonSubject(term11,term21,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term21=((CompoundTerm)term21).applySubstitute(subs);
        term11=applySubstituteIfCompoundTerm(varInd2,term11,subs);
      }
    }
    if (commonTerm == null && term11 instanceof ImageInt) {
      boolean firstIsImage=true;
      boolean secondIsSameImage=term21 instanceof ImageInt;
      commonTerm=findCommonSubject(term21,term11,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term11=((CompoundTerm)term11).applySubstitute(subs);
        term21=applySubstituteIfCompoundTerm(varInd2,term21,subs);
      }
    }
  }
  Statement state1=Inheritance.make(term11,term12);
  Statement state2=Inheritance.make(term21,term22);
  Term content=Implication.make(state1,state2);
  if (content == null) {
    return;
  }
  final TruthValue truthT=nal.getCurrentTask().sentence.truth;
  final TruthValue truthB=nal.getCurrentBelief().truth;
  if ((truthT == null) || (truthB == null)) {
    if (Parameters.DEBUG) {
      System.out.println(""String_Node_Str"");
    }
    return;
  }
  TruthValue truth=induction(truthT,truthB);
  BudgetValue budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  content=Implication.make(state2,state1);
  truth=induction(truthB,truthT);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  content=Equivalence.make(state1,state2);
  truth=comparison(truthT,truthB);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  final Variable varDep=new Variable(""String_Node_Str"");
  if (index == 0) {
    state1=Inheritance.make(varDep,term12dependent);
    state2=Inheritance.make(varDep,term22dependent);
  }
 else {
    state1=Inheritance.make(term11dependent,varDep);
    state2=Inheritance.make(term21dependent,varDep);
  }
  if ((state1 == null) || (state2 == null))   return;
  content=Conjunction.make(state1,state2);
  truth=intersection(truthT,truthB);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
}","/** 
 * Introduce a dependent variable in an outer-layer conjunction {<S --> P1>, <S --> P2>} |- (&&, <#x --> P1>, <#x --> P2>)
 * @param taskContent The first premise <M --> S>
 * @param beliefContent The second premise <M --> P>
 * @param index The location of the shared term: 0 for subject, 1 forpredicate
 * @param nal Reference to the memory
 */
public static void introVarOuter(final Statement taskContent,final Statement beliefContent,final int index,final DerivationContext nal){
  if (!(taskContent instanceof Inheritance)) {
    return;
  }
  final Variable varInd1=new Variable(""String_Node_Str"");
  final Variable varInd2=new Variable(""String_Node_Str"");
  Term term11dependent=null, term12dependent=null, term21dependent=null, term22dependent=null;
  Term term11=index == 0 ? varInd1 : taskContent.getSubject();
  Term term21=index == 0 ? varInd1 : beliefContent.getSubject();
  Term term12=index == 0 ? taskContent.getPredicate() : varInd1;
  Term term22=index == 0 ? beliefContent.getPredicate() : varInd1;
  if (index == 0) {
    term12dependent=term12;
    term22dependent=term22;
  }
 else {
    term11dependent=term11;
    term21dependent=term21;
  }
  Term commonTerm=null;
  final Map<Term,Term> subs=new HashMap<>();
  if (index == 0) {
    if (term12 instanceof ImageExt) {
      boolean firstIsImage=term22 instanceof ImageExt;
      boolean secondIsSameImage=true;
      commonTerm=findCommonTermPredicate(term12,term22,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term12=((CompoundTerm)term12).applySubstitute(subs);
        term22=applySubstituteIfCompoundTerm(varInd2,term22,subs);
      }
    }
    if (commonTerm == null && term22 instanceof ImageExt) {
      boolean firstIsImage=term12 instanceof ImageExt;
      boolean secondIsSameImage=true;
      commonTerm=findCommonTermPredicate(term22,term12,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term22=((CompoundTerm)term22).applySubstitute(subs);
        term12=applySubstituteIfCompoundTerm(varInd2,term12,subs);
      }
    }
  }
 else {
    if (term21 instanceof ImageInt) {
      boolean firstIsImage=true;
      boolean secondIsSameImage=term11 instanceof ImageInt;
      commonTerm=findCommonSubject(term11,term21,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term21=((CompoundTerm)term21).applySubstitute(subs);
        term11=applySubstituteIfCompoundTerm(varInd2,term11,subs);
      }
    }
    if (commonTerm == null && term11 instanceof ImageInt) {
      boolean firstIsImage=true;
      boolean secondIsSameImage=term21 instanceof ImageInt;
      commonTerm=findCommonSubject(term21,term11,commonTerm,firstIsImage,secondIsSameImage);
      if (commonTerm != null) {
        subs.put(commonTerm,varInd2);
        term11=((CompoundTerm)term11).applySubstitute(subs);
        term21=applySubstituteIfCompoundTerm(varInd2,term21,subs);
      }
    }
  }
  Statement state1=Inheritance.make(term11,term12);
  Statement state2=Inheritance.make(term21,term22);
  Term content=Implication.make(state1,state2);
  if (content == null) {
    return;
  }
  final TruthValue truthT=nal.getCurrentTask().sentence.truth;
  final TruthValue truthB=nal.getCurrentBelief().truth;
  if ((truthT == null) || (truthB == null)) {
    if (Parameters.DEBUG) {
      System.out.println(""String_Node_Str"");
    }
    return;
  }
  TruthValue truth=induction(truthT,truthB);
  BudgetValue budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  content=Implication.make(state2,state1);
  truth=induction(truthB,truthT);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  content=Equivalence.make(state1,state2);
  truth=comparison(truthT,truthB);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
  final Variable varDep=new Variable(""String_Node_Str"");
  if (index == 0) {
    state1=Inheritance.make(varDep,term12dependent);
    state2=Inheritance.make(varDep,term22dependent);
  }
 else {
    state1=Inheritance.make(term11dependent,varDep);
    state2=Inheritance.make(term21dependent,varDep);
  }
  if ((state1 == null) || (state2 == null)) {
    return;
  }
  if (state1.cloneDeep().equals(state2.cloneDeep())) {
    return;
  }
  content=Conjunction.make(state1,state2);
  truth=intersection(truthT,truthB);
  budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.doublePremiseTask(content,truth,budget,false,false);
}",0.9896819487288586
166678,"/** 
 * {<S ==> M>, <P ==> M>} |- {<(S|P) ==> M>, <(S&P) ==> M>, <(S-P) ==> M>, <(P-S) ==> M>}
 * @param taskSentence The first premise
 * @param belief The second premise
 * @param index The location of the shared term
 * @param nal Reference to the memory
 */
static void composeCompound(final Statement taskContent,final Statement beliefContent,final int index,final DerivationContext nal){
  if ((!nal.getCurrentTask().sentence.isJudgment()) || (taskContent.getClass() != beliefContent.getClass())) {
    return;
  }
  final Term componentT=taskContent.term[1 - index];
  final Term componentB=beliefContent.term[1 - index];
  final Term componentCommon=taskContent.term[index];
  final int order1=taskContent.getTemporalOrder();
  final int order2=beliefContent.getTemporalOrder();
  final int order=TemporalRules.composeOrder(order1,order2);
  if (order == TemporalRules.ORDER_INVALID) {
    return;
  }
  if ((componentT instanceof CompoundTerm) && ((CompoundTerm)componentT).containsAllTermsOf(componentB)) {
    decomposeCompound((CompoundTerm)componentT,componentB,componentCommon,index,true,order,nal);
    return;
  }
 else   if ((componentB instanceof CompoundTerm) && ((CompoundTerm)componentB).containsAllTermsOf(componentT)) {
    decomposeCompound((CompoundTerm)componentB,componentT,componentCommon,index,false,order,nal);
    return;
  }
  final TruthValue truthT=nal.getCurrentTask().sentence.truth;
  final TruthValue truthB=nal.getCurrentBelief().truth;
  final TruthValue truthOr=union(truthT,truthB);
  final TruthValue truthAnd=intersection(truthT,truthB);
  TruthValue truthDif=null;
  Term termOr=null;
  Term termAnd=null;
  Term termDif=null;
  if (index == 0) {
    if (taskContent instanceof Inheritance) {
      termOr=IntersectionInt.make(componentT,componentB);
      termAnd=IntersectionExt.make(componentT,componentB);
      if (truthB.isNegative()) {
        if (!truthT.isNegative()) {
          termDif=DifferenceExt.make(componentT,componentB);
          truthDif=intersection(truthT,negation(truthB));
        }
      }
 else       if (truthT.isNegative()) {
        termDif=DifferenceExt.make(componentB,componentT);
        truthDif=intersection(truthB,negation(truthT));
      }
    }
 else     if (taskContent instanceof Implication) {
      termOr=Disjunction.make(componentT,componentB);
      termAnd=Conjunction.make(componentT,componentB);
    }
    processComposed(taskContent,componentCommon,termOr,order,truthOr,nal);
    processComposed(taskContent,componentCommon,termAnd,order,truthAnd,nal);
    processComposed(taskContent,componentCommon,termDif,order,truthDif,nal);
  }
 else {
    if (taskContent instanceof Inheritance) {
      termOr=IntersectionExt.make(componentT,componentB);
      termAnd=IntersectionInt.make(componentT,componentB);
      if (truthB.isNegative()) {
        if (!truthT.isNegative()) {
          termDif=DifferenceInt.make(componentT,componentB);
          truthDif=intersection(truthT,negation(truthB));
        }
      }
 else       if (truthT.isNegative()) {
        termDif=DifferenceInt.make(componentB,componentT);
        truthDif=intersection(truthB,negation(truthT));
      }
    }
 else     if (taskContent instanceof Implication) {
      termOr=Conjunction.make(componentT,componentB);
      termAnd=Disjunction.make(componentT,componentB);
    }
    processComposed(taskContent,termOr,componentCommon,order,truthOr,nal);
    processComposed(taskContent,termAnd,componentCommon,order,truthAnd,nal);
    processComposed(taskContent,termDif,componentCommon,order,truthDif,nal);
  }
}","/** 
 * {<S ==> M>, <P ==> M>} |- {<(S|P) ==> M>, <(S&P) ==> M>, <(S-P) ==> M>, <(P-S) ==> M>}
 * @param taskSentence The first premise
 * @param belief The second premise
 * @param index The location of the shared term
 * @param nal Reference to the memory
 */
static void composeCompound(final Statement taskContent,final Statement beliefContent,final int index,final DerivationContext nal){
  if ((!nal.getCurrentTask().sentence.isJudgment()) || (taskContent.getClass() != beliefContent.getClass())) {
    return;
  }
  final Term componentT=taskContent.term[1 - index];
  final Term componentB=beliefContent.term[1 - index];
  final Term componentCommon=taskContent.term[index];
  final int order1=taskContent.getTemporalOrder();
  final int order2=beliefContent.getTemporalOrder();
  final int order=TemporalRules.composeOrder(order1,order2);
  if (order == TemporalRules.ORDER_INVALID) {
    return;
  }
  if ((componentT instanceof CompoundTerm) && ((CompoundTerm)componentT).containsAllTermsOf(componentB)) {
    decomposeCompound((CompoundTerm)componentT,componentB,componentCommon,index,true,order,nal);
    return;
  }
 else   if ((componentB instanceof CompoundTerm) && ((CompoundTerm)componentB).containsAllTermsOf(componentT)) {
    decomposeCompound((CompoundTerm)componentB,componentT,componentCommon,index,false,order,nal);
    return;
  }
  final TruthValue truthT=nal.getCurrentTask().sentence.truth;
  final TruthValue truthB=nal.getCurrentBelief().truth;
  final TruthValue truthOr=union(truthT,truthB);
  final TruthValue truthAnd=intersection(truthT,truthB);
  TruthValue truthDif=null;
  Term termOr=null;
  Term termAnd=null;
  Term termDif=null;
  if (index == 0) {
    if (taskContent instanceof Inheritance) {
      termOr=IntersectionInt.make(componentT,componentB);
      termAnd=IntersectionExt.make(componentT,componentB);
      if (truthB.isNegative()) {
        if (!truthT.isNegative()) {
          termDif=DifferenceExt.make(componentT,componentB);
          truthDif=intersection(truthT,negation(truthB));
        }
      }
 else       if (truthT.isNegative()) {
        termDif=DifferenceExt.make(componentB,componentT);
        truthDif=intersection(truthB,negation(truthT));
      }
    }
 else     if (taskContent instanceof Implication) {
      termOr=Disjunction.make(componentT,componentB);
      termAnd=Conjunction.make(componentT,componentB);
    }
    if (!(componentT.cloneDeep().equals(componentB.cloneDeep()))) {
      processComposed(taskContent,componentCommon,termOr,order,truthOr,nal);
      processComposed(taskContent,componentCommon,termAnd,order,truthAnd,nal);
    }
    processComposed(taskContent,componentCommon,termDif,order,truthDif,nal);
  }
 else {
    if (taskContent instanceof Inheritance) {
      termOr=IntersectionExt.make(componentT,componentB);
      termAnd=IntersectionInt.make(componentT,componentB);
      if (truthB.isNegative()) {
        if (!truthT.isNegative()) {
          termDif=DifferenceInt.make(componentT,componentB);
          truthDif=intersection(truthT,negation(truthB));
        }
      }
 else       if (truthT.isNegative()) {
        termDif=DifferenceInt.make(componentB,componentT);
        truthDif=intersection(truthB,negation(truthT));
      }
    }
 else     if (taskContent instanceof Implication) {
      termOr=Conjunction.make(componentT,componentB);
      termAnd=Disjunction.make(componentT,componentB);
    }
    if (!(componentT.cloneDeep().equals(componentB.cloneDeep()))) {
      processComposed(taskContent,termOr,componentCommon,order,truthOr,nal);
      processComposed(taskContent,termAnd,componentCommon,order,truthAnd,nal);
    }
    processComposed(taskContent,termDif,componentCommon,order,truthDif,nal);
  }
}",0.9786476868327402
166679,"/** 
 * Inference between a compound term and a statement
 * @param compound The compound term
 * @param index The location of the current term in the compound
 * @param statement The statement
 * @param side The location of the current term in the statement
 * @param beliefTerm The content of the belief
 * @param nal Reference to the memory
 */
private static void compoundAndStatement(CompoundTerm compound,final short index,Statement statement,final short side,final Term beliefTerm,final DerivationContext nal){
  if (index >= compound.term.length) {
    return;
  }
  final Term component=compound.term[index];
  final Task task=nal.getCurrentTask();
  if (component.getClass() == statement.getClass()) {
    if ((compound instanceof Conjunction) && (nal.getCurrentBelief() != null)) {
      final Conjunction conj=(Conjunction)compound;
      final Term[] u=new Term[]{compound,statement};
      if (Variables.unify(VAR_DEPENDENT,component,statement,u)) {
        compound=(Conjunction)u[0];
        statement=(Statement)u[1];
        if (conj.isSpatial || compound.getTemporalOrder() != TemporalRules.ORDER_FORWARD || index == 0) {
          SyllogisticRules.elimiVarDep(compound,component,statement.equals(beliefTerm),nal);
        }
      }
 else       if (task.sentence.isJudgment()) {
        CompositionalRules.introVarInner(statement,(Statement)component,compound,nal);
      }
    }
  }
 else {
    if (task.sentence.isJudgment()) {
      if (statement instanceof Inheritance) {
        StructuralRules.structuralCompose1(compound,index,statement,nal);
        if (!(compound instanceof SetExt || compound instanceof SetInt || compound instanceof Negation|| compound instanceof Conjunction|| compound instanceof Disjunction)) {
          StructuralRules.structuralCompose2(compound,index,statement,side,nal);
        }
      }
 else       if (!(compound instanceof Negation || compound instanceof Conjunction || compound instanceof Disjunction)) {
        StructuralRules.structuralCompose2(compound,index,statement,side,nal);
      }
    }
  }
}","/** 
 * Inference between a compound term and a statement
 * @param compound The compound term
 * @param index The location of the current term in the compound
 * @param statement The statement
 * @param side The location of the current term in the statement
 * @param beliefTerm The content of the belief
 * @param nal Reference to the memory
 */
private static void compoundAndStatement(CompoundTerm compound,final short index,Statement statement,final short side,final Term beliefTerm,final DerivationContext nal){
  if (index >= compound.term.length) {
    return;
  }
  final Term component=compound.term[index];
  final Task task=nal.getCurrentTask();
  if (component.getClass() == statement.getClass()) {
    if ((compound instanceof Conjunction) && (nal.getCurrentBelief() != null)) {
      final Conjunction conj=(Conjunction)compound;
      final Term[] u=new Term[]{compound,statement};
      if (Variables.unify(VAR_DEPENDENT,component,statement,u) && u[0] instanceof Conjunction && u[1] instanceof Statement) {
        compound=(Conjunction)u[0];
        statement=(Statement)u[1];
        if (conj.isSpatial || compound.getTemporalOrder() != TemporalRules.ORDER_FORWARD || index == 0) {
          SyllogisticRules.elimiVarDep(compound,component,statement.equals(beliefTerm),nal);
        }
      }
 else       if (task.sentence.isJudgment()) {
        CompositionalRules.introVarInner(statement,(Statement)component,compound,nal);
      }
    }
  }
 else {
    if (task.sentence.isJudgment()) {
      if (statement instanceof Inheritance) {
        StructuralRules.structuralCompose1(compound,index,statement,nal);
        if (!(compound instanceof SetExt || compound instanceof SetInt || compound instanceof Negation|| compound instanceof Conjunction|| compound instanceof Disjunction)) {
          StructuralRules.structuralCompose2(compound,index,statement,side,nal);
        }
      }
 else       if (!(compound instanceof Negation || compound instanceof Conjunction || compound instanceof Disjunction)) {
        StructuralRules.structuralCompose2(compound,index,statement,side,nal);
      }
    }
  }
}",0.98565965583174
166680,"/** 
 * {<S --> P>, S@(S&T)} |- <(S&T) --> (P&T)> {<S --> P>, S@(M-S)} |- <(M-P) --> (M-S)>
 * @param compound The compound term
 * @param index The location of the indicated term in the compound
 * @param statement The premise
 * @param side The location of the indicated term in the premise
 * @param nal Reference to the memory
 */
static void structuralCompose2(final CompoundTerm compound,final short index,final Statement statement,final short side,final DerivationContext nal){
  if (compound.equals(statement.term[side])) {
    return;
  }
  Term sub=statement.getSubject();
  Term pred=statement.getPredicate();
  final List<Term> components=compound.asTermList();
  if (((side == 0) && components.contains(pred)) || ((side == 1) && components.contains(sub))) {
    return;
  }
  if (side == 0) {
    if (components.contains(sub)) {
      sub=compound;
      components.set(index,pred);
      pred=Terms.term(compound,components);
    }
  }
 else {
    if (components.contains(pred)) {
      components.set(index,sub);
      sub=Terms.term(compound,components);
      pred=compound;
    }
  }
  if ((sub == null) || (pred == null))   return;
  final Statement content;
  final int order=statement.getTemporalOrder();
  if (switchOrder(compound,index)) {
    content=Statement.make(statement,pred,sub,TemporalRules.reverseOrder(order));
  }
 else {
    content=Statement.make(statement,sub,pred,order);
  }
  if (content == null)   return;
  final Sentence sentence=nal.getCurrentTask().sentence;
  final TruthValue truth=TruthFunctions.deduction(sentence.truth,Parameters.reliance);
  final BudgetValue budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.singlePremiseTask(content,truth,budget);
}","/** 
 * {<S --> P>, S@(S&T)} |- <(S&T) --> (P&T)> {<S --> P>, S@(M-S)} |- <(M-P) --> (M-S)>
 * @param compound The compound term
 * @param index The location of the indicated term in the compound
 * @param statement The premise
 * @param side The location of the indicated term in the premise
 * @param nal Reference to the memory
 */
static void structuralCompose2(final CompoundTerm compound,final short index,final Statement statement,final short side,final DerivationContext nal){
  if (compound.equals(statement.term[side])) {
    return;
  }
  Term sub=statement.getSubject();
  Term pred=statement.getPredicate();
  final List<Term> components=compound.asTermList();
  if (((side == 0) && components.contains(pred)) || ((side == 1) && components.contains(sub))) {
    return;
  }
  if (side == 0) {
    if (components.contains(sub)) {
      sub=compound;
      components.set(index,pred.cloneDeep());
      pred=Terms.term(compound,components);
    }
  }
 else {
    if (components.contains(pred)) {
      components.set(index,sub.cloneDeep());
      sub=Terms.term(compound,components);
      pred=compound;
    }
  }
  if ((sub == null) || (pred == null)) {
    return;
  }
  if (sub.cloneDeep().equals(pred.cloneDeep())) {
    return;
  }
  final Statement content;
  final int order=statement.getTemporalOrder();
  if (switchOrder(compound,index)) {
    content=Statement.make(statement,pred,sub,TemporalRules.reverseOrder(order));
  }
 else {
    content=Statement.make(statement,sub,pred,order);
  }
  if (content == null) {
    return;
  }
  final Sentence sentence=nal.getCurrentTask().sentence;
  final TruthValue truth=TruthFunctions.deduction(sentence.truth,Parameters.reliance);
  final BudgetValue budget=BudgetFunctions.compoundForward(truth,content,nal);
  nal.singlePremiseTask(content,truth,budget);
}",0.9599322799097064
166681,"/** 
 * Try to replace a component in a compound at a given index by another one
 * @param compound The compound
 * @param index The location of replacement
 * @param t The new component
 * @param memory Reference to the memory
 * @return The new compound
 */
public Term setComponent(final int index,final Term t,final Memory memory){
  final List<Term> list=asTermList();
  list.remove(index);
  if (t != null) {
    if (getClass() != t.getClass()) {
      list.add(index,t);
    }
 else {
      final Term[] tt=((CompoundTerm)t).term;
      for (int i=0; i < tt.length; i++) {
        list.add(index + i,tt[i]);
      }
    }
  }
  return Terms.term(this,list);
}","/** 
 * Try to replace a component in a compound at a given index by another one
 * @param compound The compound
 * @param index The location of replacement
 * @param t The new component
 * @param memory Reference to the memory
 * @return The new compound
 */
public Term setComponent(final int index,final Term t,final Memory memory){
  final List<Term> list=asTermList();
  list.remove(index);
  if (t != null) {
    if (getClass() != t.getClass()) {
      list.add(index,t);
    }
 else {
      final Term[] tt=((CompoundTerm)t).term;
      for (int i=0; i < tt.length; i++) {
        list.add(index + i,tt[i]);
      }
    }
  }
  if (this.isCommutative()) {
    Term[] ret=list.toArray(new Term[0]);
    return Terms.term(this,ret);
  }
  return Terms.term(this,list);
}",0.9146426092990978
166682,"/** 
 * Top-level method that react a Term in general, which may recursively call itself. <p> There are 5 valid cases: 1. (Op, A1, ..., An) is a CompoundTerm if Op is a built-in getOperator 2. {A1, ..., An} is an SetExt; 3. [A1, ..., An] is an SetInt; 4. <T1 Re T2> is a Statement (including higher-order Statement); 5. otherwise it is a simple term.
 * @param s0 the String to be parsed
 * @param memory Reference to the memory
 * @return the Term generated from the String
 */
public Term parseTerm(String s) throws InvalidInputException {
  s=s.trim();
  if (s.length() == 0)   return null;
  final int index=s.length() - 1;
  final char first=s.charAt(0);
  final char last=s.charAt(index);
  final NativeOperator opener=getOpener(first);
  if (opener != null) {
switch (opener) {
case COMPOUND_TERM_OPENER:
      if (last == COMPOUND_TERM_CLOSER.ch) {
        return parseCompoundTerm(s.substring(1,index));
      }
 else {
        throw new InvalidInputException(""String_Node_Str"");
      }
case SET_EXT_OPENER:
    if (last == SET_EXT_CLOSER.ch) {
      return SetExt.make(parseArguments(s.substring(1,index) + ARGUMENT_SEPARATOR));
    }
 else {
      throw new InvalidInputException(""String_Node_Str"");
    }
case SET_INT_OPENER:
  if (last == SET_INT_CLOSER.ch) {
    return SetInt.make(parseArguments(s.substring(1,index) + ARGUMENT_SEPARATOR));
  }
 else {
    throw new InvalidInputException(""String_Node_Str"");
  }
case STATEMENT_OPENER:
if (last == STATEMENT_CLOSER.ch) {
  return parseStatement(s.substring(1,index));
}
 else {
  throw new InvalidInputException(""String_Node_Str"");
}
}
}
 else if (Parameters.FUNCTIONAL_OPERATIONAL_FORMAT) {
final int pOpen=s.indexOf('(');
final int pClose=s.lastIndexOf(')');
if ((pOpen != -1) && (pClose != -1) && (pClose == s.length() - 1)) {
final String operatorString=Operator.addPrefixIfMissing(s.substring(0,pOpen));
final Operator operator=memory.getOperator(operatorString);
if (operator == null) {
throw new InvalidInputException(""String_Node_Str"" + operatorString);
}
final String argString=s.substring(pOpen + 1,pClose + 1);
final Term[] a;
if (argString.length() > 1) {
final List<Term> args=parseArguments(argString);
a=args.toArray(new Term[args.size()]);
}
 else {
a=Operation.SELF_TERM_ARRAY;
}
final Operation o=Operation.make(operator,a,true);
return o;
}
}
return parseAtomicTerm(s);
}","/** 
 * Top-level method that react a Term in general, which may recursively call itself. <p> There are 5 valid cases: 1. (Op, A1, ..., An) is a CompoundTerm if Op is a built-in getOperator 2. {A1, ..., An} is an SetExt; 3. [A1, ..., An] is an SetInt; 4. <T1 Re T2> is a Statement (including higher-order Statement); 5. otherwise it is a simple term.
 * @param s0 the String to be parsed
 * @param memory Reference to the memory
 * @return the Term generated from the String
 */
public Term parseTerm(String s) throws InvalidInputException {
  s=s.trim();
  if (s.length() == 0)   return null;
  final int index=s.length() - 1;
  final char first=s.charAt(0);
  final char last=s.charAt(index);
  final NativeOperator opener=getOpener(first);
  if (opener != null) {
switch (opener) {
case COMPOUND_TERM_OPENER:
      if (last == COMPOUND_TERM_CLOSER.ch) {
        return parseCompoundTerm(s.substring(1,index));
      }
 else {
        throw new InvalidInputException(""String_Node_Str"");
      }
case SET_EXT_OPENER:
    if (last == SET_EXT_CLOSER.ch) {
      return SetExt.make(parseArguments(s.substring(1,index) + ARGUMENT_SEPARATOR));
    }
 else {
      throw new InvalidInputException(""String_Node_Str"");
    }
case SET_INT_OPENER:
  if (last == SET_INT_CLOSER.ch) {
    return SetInt.make(parseArguments(s.substring(1,index) + ARGUMENT_SEPARATOR));
  }
 else {
    throw new InvalidInputException(""String_Node_Str"");
  }
case STATEMENT_OPENER:
if (last == STATEMENT_CLOSER.ch) {
  return parseStatement(s.substring(1,index));
}
 else {
  throw new InvalidInputException(""String_Node_Str"");
}
}
}
 else if (Parameters.FUNCTIONAL_OPERATIONAL_FORMAT) {
final int pOpen=s.indexOf('(');
final int pClose=s.lastIndexOf(')');
if ((pOpen != -1) && (pClose != -1) && (pClose == s.length() - 1)) {
final String operatorString=Operator.addPrefixIfMissing(s.substring(0,pOpen));
final Operator operator=memory.getOperator(operatorString);
if (operator == null) {
throw new InvalidInputException(""String_Node_Str"" + operatorString);
}
final String argString=s.substring(pOpen + 1,pClose + 1);
final Term[] a;
if (argString.length() > 1) {
final List<Term> args=parseArguments(argString);
a=args.toArray(new Term[0]);
}
 else {
a=Operation.SELF_TERM_ARRAY;
}
final Operation o=Operation.make(operator,a,true);
return o;
}
}
return parseAtomicTerm(s);
}",0.9974478945129732
166683,"/** 
 * Parse a String to create a CompoundTerm.
 * @return the Term generated from the String
 * @param s0 The String to be parsed
 * @throws org.opennars.io.StringParser.InvalidInputException the String cannot beparsed into a Term
 */
private Term parseCompoundTerm(final String s0) throws InvalidInputException {
  final String s=s0.trim();
  if (s.isEmpty()) {
    throw new InvalidInputException(""String_Node_Str"" + s);
  }
  final int firstSeparator=s.indexOf(ARGUMENT_SEPARATOR);
  if (firstSeparator == -1) {
    throw new InvalidInputException(""String_Node_Str"" + s);
  }
  final String op=(firstSeparator < 0) ? s : s.substring(0,firstSeparator).trim();
  final NativeOperator oNative=getOperator(op);
  final Operator oRegistered=memory.getOperator(op);
  if ((oRegistered == null) && (oNative == null)) {
    throw new InvalidInputException(""String_Node_Str"" + op);
  }
  final List<Term> arg=(firstSeparator < 0) ? new ArrayList<>(0) : parseArguments(s.substring(firstSeparator + 1) + ARGUMENT_SEPARATOR);
  final Term[] argA=arg.toArray(new Term[arg.size()]);
  final Term t;
  if (oNative != null) {
    t=Terms.term(oNative,argA);
  }
 else   if (oRegistered != null) {
    t=make(oRegistered,argA,true);
  }
 else {
    throw new InvalidInputException(""String_Node_Str"");
  }
  return t;
}","/** 
 * Parse a String to create a CompoundTerm.
 * @return the Term generated from the String
 * @param s0 The String to be parsed
 * @throws org.opennars.io.StringParser.InvalidInputException the String cannot beparsed into a Term
 */
private Term parseCompoundTerm(final String s0) throws InvalidInputException {
  final String s=s0.trim();
  if (s.isEmpty()) {
    throw new InvalidInputException(""String_Node_Str"" + s);
  }
  final int firstSeparator=s.indexOf(ARGUMENT_SEPARATOR);
  if (firstSeparator == -1) {
    throw new InvalidInputException(""String_Node_Str"" + s);
  }
  final String op=(firstSeparator < 0) ? s : s.substring(0,firstSeparator).trim();
  final NativeOperator oNative=getOperator(op);
  final Operator oRegistered=memory.getOperator(op);
  if ((oRegistered == null) && (oNative == null)) {
    throw new InvalidInputException(""String_Node_Str"" + op);
  }
  final List<Term> arg=(firstSeparator < 0) ? new ArrayList<>(0) : parseArguments(s.substring(firstSeparator + 1) + ARGUMENT_SEPARATOR);
  final Term[] argA=arg.toArray(new Term[0]);
  final Term t;
  if (oNative != null) {
    t=Terms.term(oNative,argA);
  }
 else   if (oRegistered != null) {
    t=make(oRegistered,argA,true);
  }
 else {
    throw new InvalidInputException(""String_Node_Str"");
  }
  return t;
}",0.9957741067998463
166684,"/** 
 * Cloned array of Terms, except for one or more Terms.
 * @param toRemove
 * @return the cloned array with the missing terms removed, OR null if no terms were actually removed when requireModification=true
 */
public Term[] cloneTermsExcept(final boolean requireModification,final Term[] toRemove){
  final List<Term> l=asTermList();
  boolean removed=false;
  for (  final Term t : toRemove) {
    if (l.remove(t))     removed=true;
  }
  if ((!removed) && (requireModification))   return null;
  return l.toArray(new Term[l.size()]);
}","/** 
 * Cloned array of Terms, except for one or more Terms.
 * @param toRemove
 * @return the cloned array with the missing terms removed, OR null if no terms were actually removed when requireModification=true
 */
public Term[] cloneTermsExcept(final boolean requireModification,final Term[] toRemove){
  final List<Term> l=asTermList();
  boolean removed=false;
  for (  final Term t : toRemove) {
    if (l.remove(t))     removed=true;
  }
  if ((!removed) && (requireModification))   return null;
  return l.toArray(new Term[0]);
}",0.9916589434661724
166685,"final public static Term make(final Term term1,final Term term2,final int temporalOrder,final boolean spatial){
  if (temporalOrder == TemporalRules.ORDER_FORWARD) {
    final Term[] components;
    if ((term1 instanceof Conjunction) && (term1.getTemporalOrder() == TemporalRules.ORDER_FORWARD)) {
      final CompoundTerm cterm1=(CompoundTerm)term1;
      final List<Term> list=new ArrayList<>(cterm1.size());
      cterm1.addTermsTo(list);
      if ((term2 instanceof Conjunction) && cterm1.getIsSpatial() == term2.getIsSpatial() && term2.getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
        ((CompoundTerm)term2).addTermsTo(list);
      }
 else {
        list.add(term2);
      }
      components=list.toArray(new Term[list.size()]);
    }
 else     if ((term2 instanceof Conjunction) && (term2.getTemporalOrder() == TemporalRules.ORDER_FORWARD)) {
      final CompoundTerm cterm2=(CompoundTerm)term2;
      components=new Term[((CompoundTerm)term2).size() + 1];
      components[0]=term1;
      arraycopy(cterm2.term,0,components,1,cterm2.size());
    }
 else {
      components=new Term[]{term1,term2};
    }
    return make(components,temporalOrder,spatial);
  }
 else {
    final List<Term> set=new ArrayList();
    if (term1 instanceof Conjunction) {
      ((CompoundTerm)term1).addTermsTo(set);
      if (term2 instanceof Conjunction) {
        ((CompoundTerm)term2).addTermsTo(set);
      }
 else {
        set.add(term2);
      }
    }
 else     if (term2 instanceof Conjunction) {
      ((CompoundTerm)term2).addTermsTo(set);
      set.add(term1);
    }
 else {
      set.add(term1);
      set.add(term2);
    }
    return make(set,temporalOrder,spatial);
  }
}","final public static Term make(final Term term1,final Term term2,final int temporalOrder,final boolean spatial){
  if (temporalOrder == TemporalRules.ORDER_FORWARD) {
    final Term[] components;
    if ((term1 instanceof Conjunction) && (term1.getTemporalOrder() == TemporalRules.ORDER_FORWARD)) {
      final CompoundTerm cterm1=(CompoundTerm)term1;
      final List<Term> list=new ArrayList<>(cterm1.size());
      cterm1.addTermsTo(list);
      if ((term2 instanceof Conjunction) && cterm1.getIsSpatial() == term2.getIsSpatial() && term2.getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
        ((CompoundTerm)term2).addTermsTo(list);
      }
 else {
        list.add(term2);
      }
      components=list.toArray(new Term[0]);
    }
 else     if ((term2 instanceof Conjunction) && (term2.getTemporalOrder() == TemporalRules.ORDER_FORWARD)) {
      final CompoundTerm cterm2=(CompoundTerm)term2;
      components=new Term[((CompoundTerm)term2).size() + 1];
      components[0]=term1;
      arraycopy(cterm2.term,0,components,1,cterm2.size());
    }
 else {
      components=new Term[]{term1,term2};
    }
    return make(components,temporalOrder,spatial);
  }
 else {
    final List<Term> set=new ArrayList();
    if (term1 instanceof Conjunction) {
      ((CompoundTerm)term1).addTermsTo(set);
      if (term2 instanceof Conjunction) {
        ((CompoundTerm)term2).addTermsTo(set);
      }
 else {
        set.add(term2);
      }
    }
 else     if (term2 instanceof Conjunction) {
      ((CompoundTerm)term2).addTermsTo(set);
      set.add(term1);
    }
 else {
      set.add(term1);
      set.add(term2);
    }
    return make(set,temporalOrder,spatial);
  }
}",0.9964200477326968
166686,"public Product(final List<Term> x){
  this(x.toArray(new Term[x.size()]));
}","public Product(final List<Term> x){
  this(x.toArray(new Term[0]));
}",0.9379310344827586
166687,"public static SetExt make(final Collection<Term> l){
  return make(l.toArray(new Term[l.size()]));
}","public static SetExt make(final Collection<Term> l){
  return make(l.toArray(new Term[0]));
}",0.9533678756476685
166688,"public static Term[] toSortedSetArray(final Term... arg){
switch (arg.length) {
case 0:
    return EmptyTermArray;
case 1:
  return new Term[]{arg[0]};
case 2:
final Term a=arg[0];
final Term b=arg[1];
final int c=a.compareTo(b);
if (Parameters.DEBUG) {
final boolean equal=a.equals(b);
if ((equal && (c != 0)) || (!equal && (c == 0))) {
throw new IllegalStateException(""String_Node_Str"" + a + ""String_Node_Str""+ b);
}
}
if (c < 0) return new Term[]{a,b};
 else if (c > 0) return new Term[]{b,a};
 else if (c == 0) return new Term[]{a};
}
final NavigableSet<Term> s=new TreeSet();
Collections.addAll(s,arg);
return s.toArray(new Term[s.size()]);
}","public static Term[] toSortedSetArray(final Term... arg){
switch (arg.length) {
case 0:
    return EmptyTermArray;
case 1:
  return new Term[]{arg[0]};
case 2:
final Term a=arg[0];
final Term b=arg[1];
final int c=a.compareTo(b);
if (Parameters.DEBUG) {
final boolean equal=a.equals(b);
if ((equal && (c != 0)) || (!equal && (c == 0))) {
throw new IllegalStateException(""String_Node_Str"" + a + ""String_Node_Str""+ b);
}
}
if (c < 0) return new Term[]{a,b};
 else if (c > 0) return new Term[]{b,a};
 else if (c == 0) return new Term[]{a};
}
final NavigableSet<Term> s=new TreeSet();
Collections.addAll(s,arg);
return s.toArray(new Term[0]);
}",0.9852369852369852
166689,"public SensoryChannel(final NAR nar,final SensoryChannel reportResultsTo,final int width,final int height,final int duration){
  this(nar,Arrays.asList(reportResultsTo),width,height,duration);
}","public SensoryChannel(final NAR nar,final SensoryChannel reportResultsTo,final int width,final int height,final int duration){
  this(nar,Collections.singletonList(reportResultsTo),width,height,duration);
}",0.935
166690,"public VisualSpace(final NAR nar,final float[][] source,final int py,final int px,final int height,final int width){
  this.nar=nar;
  this.height=height;
  this.width=width;
  this.cropped=new float[height][width];
  this.source=new float[source.length][source[0].length];
  for (int i=0; i < source.length; i++) {
    for (int j=0; j < source[0].length; j++) {
      this.source[i][j]=source[i][j];
    }
  }
  for (int i=0; i < height; i++) {
    for (int j=0; j < width; j++) {
      cropped[i][j]=source[py + i][px + j];
    }
  }
  nar.addPlugin(right);
  nar.addPlugin(left);
  nar.addPlugin(up);
  nar.addPlugin(down);
  ops.add(right);
  ops.add(left);
  ops.add(up);
  ops.add(down);
}","public VisualSpace(final NAR nar,final float[][] source,final int py,final int px,final int height,final int width){
  this.nar=nar;
  this.height=height;
  this.width=width;
  this.cropped=new float[height][width];
  this.source=new float[source.length][source[0].length];
  for (int i=0; i < source.length; i++) {
    System.arraycopy(source[i],0,this.source[i],0,source[0].length);
  }
  for (int i=0; i < height; i++) {
    System.arraycopy(source[py + i],px + 0,cropped[i],0,width);
  }
  nar.addPlugin(right);
  nar.addPlugin(left);
  nar.addPlugin(up);
  nar.addPlugin(down);
  ops.add(right);
  ops.add(left);
  ops.add(up);
  ops.add(down);
}",0.5111441307578009
166691,"protected double testNAL(final String path){
  Memory.resetStatic();
  final List<OutputCondition> expects=new ArrayList();
  NAR n=null;
  final boolean error=false;
  n=newNAR();
  final String example=getExample(path);
  if (showOutput) {
    System.out.println(example);
    System.out.println();
  }
  final List<OutputCondition> extractedExpects=OutputCondition.getConditions(n,example,similarsToSave);
  for (  final OutputCondition e1 : extractedExpects)   expects.add(e1);
  if (showOutput)   new TextOutputHandler(n,System.out);
  n.addInputFile(path);
  n.cycles(minCycles);
  System.err.flush();
  System.out.flush();
  boolean success=expects.size() > 0 && (!error);
  for (  final OutputCondition e : expects) {
    if (!e.succeeded)     success=false;
  }
  double score=Double.POSITIVE_INFINITY;
  if (success) {
    long lastSuccess=-1;
    for (    final OutputCondition e : expects) {
      if (e.getTrueTime() != -1) {
        if (lastSuccess < e.getTrueTime())         lastSuccess=e.getTrueTime();
      }
    }
    if (lastSuccess != -1) {
      score=lastSuccess;
      scores.put(path,score);
    }
  }
 else {
    scores.put(path,Double.POSITIVE_INFINITY);
  }
  if ((!success & showFail) || (success && showSuccess)) {
    System.err.println('\n' + path + ""String_Node_Str""+ n.memory.time());
    for (    final OutputCondition e : expects) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  if (requireSuccess)   assertTrue(path,success);
  return score;
}","protected double testNAL(final String path){
  Memory.resetStatic();
  final List<OutputCondition> expects=new ArrayList();
  NAR n=null;
  final boolean error=false;
  n=newNAR();
  final String example=getExample(path);
  if (showOutput) {
    System.out.println(example);
    System.out.println();
  }
  final List<OutputCondition> extractedExpects=OutputCondition.getConditions(n,example,similarsToSave);
  expects.addAll(extractedExpects);
  if (showOutput)   new TextOutputHandler(n,System.out);
  n.addInputFile(path);
  n.cycles(minCycles);
  System.err.flush();
  System.out.flush();
  boolean success=expects.size() > 0 && (!error);
  for (  final OutputCondition e : expects) {
    if (!e.succeeded)     success=false;
  }
  double score=Double.POSITIVE_INFINITY;
  if (success) {
    long lastSuccess=-1;
    for (    final OutputCondition e : expects) {
      if (e.getTrueTime() != -1) {
        if (lastSuccess < e.getTrueTime())         lastSuccess=e.getTrueTime();
      }
    }
    if (lastSuccess != -1) {
      score=lastSuccess;
      scores.put(path,score);
    }
  }
 else {
    scores.put(path,Double.POSITIVE_INFINITY);
  }
  if ((!success & showFail) || (success && showSuccess)) {
    System.err.println('\n' + path + ""String_Node_Str""+ n.memory.time());
    for (    final OutputCondition e : expects) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  if (requireSuccess)   assertTrue(path,success);
  return score;
}",0.977311208940061
166692,"public static void fireConcept(DerivationContext nal,int numTaskLinks){
  for (int i=0; i < numTaskLinks; i++) {
    if (nal.currentConcept.taskLinks.size() == 0) {
      return;
    }
    nal.currentTaskLink=nal.currentConcept.taskLinks.takeNext();
    if (nal.currentTaskLink == null) {
      return;
    }
    if (nal.currentTaskLink.budget.aboveThreshold()) {
      fireTaskLink(nal,Parameters.TERMLINK_MAX_REASONED);
    }
    nal.currentConcept.taskLinks.putBack(nal.currentTaskLink,nal.memory.cycles(nal.memory.param.taskLinkForgetDurations),nal.memory);
  }
}","public static boolean fireConcept(DerivationContext nal,int numTaskLinks){
  for (int i=0; i < numTaskLinks; i++) {
    if (nal.currentConcept.taskLinks.size() == 0) {
      return false;
    }
    nal.currentTaskLink=nal.currentConcept.taskLinks.takeNext();
    if (nal.currentTaskLink == null) {
      return false;
    }
    if (nal.currentTaskLink.budget.aboveThreshold()) {
      fireTaskLink(nal,Parameters.TERMLINK_MAX_REASONED);
    }
    nal.currentConcept.taskLinks.putBack(nal.currentTaskLink,nal.memory.cycles(nal.memory.param.taskLinkForgetDurations),nal.memory);
  }
  return true;
}",0.9673539518900344
166693,"public static void selectConceptForInference(Memory mem){
  Concept currentConcept=mem.concepts.takeNext();
  if (currentConcept == null) {
    return;
  }
  if (currentConcept.taskLinks.size() == 0) {
    mem.concepts.take(currentConcept.getTerm());
    mem.conceptRemoved(currentConcept);
    return;
  }
  if (currentConcept.termLinks.size() == 0) {
    mem.concepts.take(currentConcept.getTerm());
    mem.conceptRemoved(currentConcept);
    return;
  }
  DerivationContext nal=new DerivationContext(mem);
  nal.setCurrentConcept(currentConcept);
  fireConcept(nal,1);
{
    float forgetCycles=nal.memory.cycles(nal.memory.param.conceptForgetDurations);
    nal.currentConcept.setQuality(BudgetFunctions.or(nal.currentConcept.getQuality(),nal.memory.emotion.happy()));
    nal.memory.concepts.putBack(nal.currentConcept,forgetCycles,nal.memory);
  }
}","public static void selectConceptForInference(Memory mem){
  Concept currentConcept=mem.concepts.takeNext();
  if (currentConcept == null) {
    return;
  }
  if (currentConcept.taskLinks.size() == 0) {
    mem.concepts.take(currentConcept.getTerm());
    mem.conceptRemoved(currentConcept);
    return;
  }
  if (currentConcept.termLinks.size() == 0) {
    mem.concepts.take(currentConcept.getTerm());
    mem.conceptRemoved(currentConcept);
    return;
  }
  DerivationContext nal=new DerivationContext(mem);
  nal.setCurrentConcept(currentConcept);
  boolean putBackConcept=fireConcept(nal,1);
  if (putBackConcept) {
    float forgetCycles=nal.memory.cycles(nal.memory.param.conceptForgetDurations);
    nal.currentConcept.setQuality(BudgetFunctions.or(nal.currentConcept.getQuality(),nal.memory.emotion.happy()));
    nal.memory.concepts.putBack(nal.currentConcept,forgetCycles,nal.memory);
  }
}",0.9743589743589745
166694,"/** 
 * Entry point of the inference engine
 * @param tLink The selected TaskLink, which will provide a task
 * @param bLink The selected TermLink, which may provide a belief
 * @param memory Reference to the memory
 */
public static void reason(final TaskLink tLink,final TermLink bLink,final DerivationContext nal){
  final Memory memory=nal.mem();
  final Task task=nal.getCurrentTask();
  final Sentence taskSentence=task.sentence;
  final Term taskTerm=taskSentence.term;
  Term beliefTerm=bLink.target;
  final Concept beliefConcept=memory.concept(beliefTerm);
  Sentence belief=(beliefConcept != null) ? beliefConcept.getBelief(nal,task) : null;
  nal.setCurrentBelief(belief);
  if (belief != null) {
    beliefTerm=belief.term;
    if (Stamp.baseOverlap(task.sentence.stamp.evidentialBase,belief.stamp.evidentialBase)) {
      nal.evidentalOverlap=true;
      if (!task.sentence.isEternal() || !belief.isEternal()) {
        return;
      }
    }
    nal.emit(Events.BeliefReason.class,belief,beliefTerm,taskTerm,nal);
    if (LocalRules.match(task,belief,nal)) {
      return;
    }
  }
  nal.setCurrentBelief(belief);
  nal.setCurrentTask(task);
  if (equalSubTermsInRespectToImageAndProduct(taskTerm,beliefTerm))   return;
  final short tIndex=tLink.getIndex(0);
  short bIndex=bLink.getIndex(0);
switch (tLink.type) {
case TermLink.SELF:
switch (bLink.type) {
case TermLink.COMPONENT:
      compoundAndSelf((CompoundTerm)taskTerm,beliefTerm,true,bIndex,nal);
    break;
case TermLink.COMPOUND:
  compoundAndSelf((CompoundTerm)beliefTerm,taskTerm,false,bIndex,nal);
break;
case TermLink.COMPONENT_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Statement) {
  SyllogisticRules.detachment(taskSentence,belief,bIndex,nal);
}
}
if (taskSentence.term instanceof Inheritance || taskSentence.term instanceof Similarity) {
StructuralRules.transformNegation((CompoundTerm)Negation.make(taskSentence.term),nal);
}
try {
goalFromQuestion(task,taskTerm,nal);
}
 catch (Exception ex) {
if (Parameters.DEBUG) {
System.out.print(""String_Node_Str"");
}
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
SyllogisticRules.detachment(belief,taskSentence,bIndex,nal);
}
break;
case TermLink.COMPONENT_CONDITION:
if ((belief != null) && (taskTerm instanceof Implication)) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd(task.sentence,(Implication)taskTerm,bIndex,beliefTerm,tIndex,nal);
}
break;
case TermLink.COMPOUND_CONDITION:
if ((belief != null) && (taskTerm instanceof Implication) && (beliefTerm instanceof Implication)) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd(belief,(Implication)beliefTerm,bIndex,taskTerm,tIndex,nal);
}
break;
}
break;
case TermLink.COMPOUND:
switch (bLink.type) {
case TermLink.COMPOUND:
compoundAndCompound((CompoundTerm)taskTerm,(CompoundTerm)beliefTerm,tIndex,bIndex,nal);
break;
case TermLink.COMPOUND_STATEMENT:
compoundAndStatement((CompoundTerm)taskTerm,tIndex,(Statement)beliefTerm,bIndex,beliefTerm,nal);
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
if (beliefTerm instanceof Implication) {
Term[] u=new Term[]{beliefTerm,taskTerm};
if (Variables.unify(VAR_INDEPENDENT,((Statement)beliefTerm).getSubject(),taskTerm,u,true)) {
Sentence newBelief=belief.clone(u[0]);
Sentence newTaskSentence=taskSentence.clone(u[1]);
detachmentWithVar(newBelief,newTaskSentence,bIndex,false,nal);
}
 else {
SyllogisticRules.conditionalDedInd(belief,(Implication)beliefTerm,bIndex,taskTerm,-1,nal);
}
}
 else if (beliefTerm instanceof Equivalence) {
SyllogisticRules.conditionalAna((Equivalence)beliefTerm,bIndex,taskTerm,-1,nal);
}
}
break;
}
break;
case TermLink.COMPOUND_STATEMENT:
switch (bLink.type) {
case TermLink.COMPONENT:
if (taskTerm instanceof Statement) {
goalFromWantBelief(task,tIndex,bIndex,taskTerm,nal,beliefTerm);
componentAndStatement((CompoundTerm)nal.getCurrentTerm(),bIndex,(Statement)taskTerm,tIndex,nal);
}
break;
case TermLink.COMPOUND:
if (taskTerm instanceof Statement) {
compoundAndStatement((CompoundTerm)beliefTerm,bIndex,(Statement)taskTerm,tIndex,beliefTerm,nal);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
syllogisms(tLink,bLink,taskTerm,beliefTerm,nal);
}
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
if ((taskTerm instanceof Statement) && (beliefTerm instanceof Implication)) {
conditionalDedIndWithVar(belief,(Implication)beliefTerm,bIndex,(Statement)taskTerm,tIndex,nal);
}
}
break;
}
break;
case TermLink.COMPOUND_CONDITION:
switch (bLink.type) {
case TermLink.COMPOUND:
if (belief != null) {
detachmentWithVar(taskSentence,belief,tIndex,nal);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Implication) {
Term subj=((Statement)taskTerm).getSubject();
if (subj instanceof Negation) {
if (taskSentence.isJudgment()) {
componentAndStatement((CompoundTerm)subj,bIndex,(Statement)taskTerm,tIndex,nal);
}
 else {
componentAndStatement((CompoundTerm)subj,tIndex,(Statement)beliefTerm,bIndex,nal);
}
}
 else {
conditionalDedIndWithVar(task.sentence,(Implication)taskTerm,tIndex,(Statement)beliefTerm,bIndex,nal);
}
}
break;
}
break;
}
}
}","/** 
 * Entry point of the inference engine
 * @param tLink The selected TaskLink, which will provide a task
 * @param bLink The selected TermLink, which may provide a belief
 * @param memory Reference to the memory
 */
public static void reason(final TaskLink tLink,final TermLink bLink,final DerivationContext nal){
  final Memory memory=nal.mem();
  final Task task=nal.getCurrentTask();
  final Sentence taskSentence=task.sentence;
  final Term taskTerm=taskSentence.term;
  Term beliefTerm=bLink.target;
  final Concept beliefConcept=memory.concept(beliefTerm);
  Sentence belief=(beliefConcept != null) ? beliefConcept.getBelief(nal,task) : null;
  nal.setCurrentBelief(belief);
  if (belief != null) {
    beliefTerm=belief.term;
    nal.evidentalOverlap=Stamp.baseOverlap(task.sentence.stamp.evidentialBase,belief.stamp.evidentialBase);
    if (nal.evidentalOverlap && (!task.sentence.isEternal() || !belief.isEternal())) {
      return;
    }
    nal.emit(Events.BeliefReason.class,belief,beliefTerm,taskTerm,nal);
    if (LocalRules.match(task,belief,nal)) {
      return;
    }
  }
  nal.setCurrentBelief(belief);
  nal.setCurrentTask(task);
  if (equalSubTermsInRespectToImageAndProduct(taskTerm,beliefTerm))   return;
  final short tIndex=tLink.getIndex(0);
  short bIndex=bLink.getIndex(0);
switch (tLink.type) {
case TermLink.SELF:
switch (bLink.type) {
case TermLink.COMPONENT:
      compoundAndSelf((CompoundTerm)taskTerm,beliefTerm,true,bIndex,nal);
    break;
case TermLink.COMPOUND:
  compoundAndSelf((CompoundTerm)beliefTerm,taskTerm,false,bIndex,nal);
break;
case TermLink.COMPONENT_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Statement) {
  SyllogisticRules.detachment(taskSentence,belief,bIndex,nal);
}
}
if (taskSentence.term instanceof Inheritance || taskSentence.term instanceof Similarity) {
StructuralRules.transformNegation((CompoundTerm)Negation.make(taskSentence.term),nal);
}
try {
goalFromQuestion(task,taskTerm,nal);
}
 catch (Exception ex) {
if (Parameters.DEBUG) {
System.out.print(""String_Node_Str"");
}
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
SyllogisticRules.detachment(belief,taskSentence,bIndex,nal);
}
break;
case TermLink.COMPONENT_CONDITION:
if ((belief != null) && (taskTerm instanceof Implication)) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd(task.sentence,(Implication)taskTerm,bIndex,beliefTerm,tIndex,nal);
}
break;
case TermLink.COMPOUND_CONDITION:
if ((belief != null) && (taskTerm instanceof Implication) && (beliefTerm instanceof Implication)) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd(belief,(Implication)beliefTerm,bIndex,taskTerm,tIndex,nal);
}
break;
}
break;
case TermLink.COMPOUND:
switch (bLink.type) {
case TermLink.COMPOUND:
compoundAndCompound((CompoundTerm)taskTerm,(CompoundTerm)beliefTerm,tIndex,bIndex,nal);
break;
case TermLink.COMPOUND_STATEMENT:
compoundAndStatement((CompoundTerm)taskTerm,tIndex,(Statement)beliefTerm,bIndex,beliefTerm,nal);
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
if (beliefTerm instanceof Implication) {
Term[] u=new Term[]{beliefTerm,taskTerm};
if (Variables.unify(VAR_INDEPENDENT,((Statement)beliefTerm).getSubject(),taskTerm,u,true)) {
Sentence newBelief=belief.clone(u[0]);
Sentence newTaskSentence=taskSentence.clone(u[1]);
detachmentWithVar(newBelief,newTaskSentence,bIndex,false,nal);
}
 else {
SyllogisticRules.conditionalDedInd(belief,(Implication)beliefTerm,bIndex,taskTerm,-1,nal);
}
}
 else if (beliefTerm instanceof Equivalence) {
SyllogisticRules.conditionalAna((Equivalence)beliefTerm,bIndex,taskTerm,-1,nal);
}
}
break;
}
break;
case TermLink.COMPOUND_STATEMENT:
switch (bLink.type) {
case TermLink.COMPONENT:
if (taskTerm instanceof Statement) {
goalFromWantBelief(task,tIndex,bIndex,taskTerm,nal,beliefTerm);
componentAndStatement((CompoundTerm)nal.getCurrentTerm(),bIndex,(Statement)taskTerm,tIndex,nal);
}
break;
case TermLink.COMPOUND:
if (taskTerm instanceof Statement) {
compoundAndStatement((CompoundTerm)beliefTerm,bIndex,(Statement)taskTerm,tIndex,beliefTerm,nal);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
syllogisms(tLink,bLink,taskTerm,beliefTerm,nal);
}
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
if ((taskTerm instanceof Statement) && (beliefTerm instanceof Implication)) {
conditionalDedIndWithVar(belief,(Implication)beliefTerm,bIndex,(Statement)taskTerm,tIndex,nal);
}
}
break;
}
break;
case TermLink.COMPOUND_CONDITION:
switch (bLink.type) {
case TermLink.COMPOUND:
if (belief != null) {
detachmentWithVar(taskSentence,belief,tIndex,nal);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Implication) {
Term subj=((Statement)taskTerm).getSubject();
if (subj instanceof Negation) {
if (taskSentence.isJudgment()) {
componentAndStatement((CompoundTerm)subj,bIndex,(Statement)taskTerm,tIndex,nal);
}
 else {
componentAndStatement((CompoundTerm)subj,tIndex,(Statement)beliefTerm,bIndex,nal);
}
}
 else {
conditionalDedIndWithVar(task.sentence,(Implication)taskTerm,tIndex,(Statement)beliefTerm,bIndex,nal);
}
}
break;
}
break;
}
}
}",0.9746369796708616
166695,"public TestChamber(NAR nar,boolean showWindow){
  super();
  int w=50;
  int h=50;
  int water_threshold=30;
  Hauto cells=new Hauto(w,h,nar);
  cells.forEach(0,0,w,h,new CellFunction(){
    @Override public void update(    Cell c){
      float smoothness=20f;
      c.material=Material.GrassFloor;
      double n=SimplexNoise.noise(c.state.x / smoothness,c.state.y / smoothness);
      if ((n * 64) > water_threshold) {
        c.material=Material.Water;
      }
      c.setHeight((int)(Math.random() * 24 + 1));
    }
  }
);
  Maze.buildMaze(cells,3,3,23,23);
  space=new Grid2DSpace(cells,nar);
  space.FrameRate=0;
  space.automataPeriod=automataPeriod / gridUpdatePeriod;
  space.agentPeriod=agentPeriod / gridUpdatePeriod;
  TestChamber into=this;
  nar.memory.event.on(Events.FrameEnd.class,new EventObserver(){
    private long lastDrawn=0;
    @Override public void event(    Class event,    Object... arguments){
      if (nar.time() % gridUpdatePeriod == 0) {
        space.update(into);
        long now=System.nanoTime();
        if (now - lastDrawn > guiUpdateTime * 1e6) {
          space.redraw();
          lastDrawn=now;
        }
      }
    }
  }
);
  if (showWindow)   space.newWindow(1000,800,true);
  cells.forEach(16,16,18,18,new Hauto.SetMaterial(Material.DirtFloor));
  GridAgent a=new GridAgent(17,17,nar){
    String lastgone=""String_Node_Str"";
    @Override public void update(    Effect nextEffect){
      if (active) {
        executed=false;
        if (path == null || path.size() <= 0 && !executed_going) {
          for (int i=0; i < 5; i++) {
            if (executed) {
              break;
            }
          }
        }
        if (needpizza) {
          hungry--;
          if (hungry < 0) {
            hungry=20;
            nar.addInput(""String_Node_Str"");
          }
        }
        if (Hauto.goalInputPeriodic) {
          lastgoaltime--;
          if (lastgoaltime < 0) {
            lastgoaltime=20;
            nar.addInput(Hauto.lastWish);
          }
        }
      }
      lasttarget=space.target;
      space.current=new PVector(x,y);
      if (nextEffect == null) {
        path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
        actions.clear();
        if (path == null) {
          executed_going=false;
        }
{
          if (inventorybag != null) {
            inventorybag.x=(int)space.current.x;
            inventorybag.y=(int)space.current.y;
            inventorybag.cx=(int)space.current.x;
            inventorybag.cy=(int)space.current.y;
          }
          if (inventorybag == null || !(inventorybag instanceof Key)) {
            keyn=-1;
          }
          if (path == null || path.size() <= 1) {
            space.target=null;
            active=true;
            executed_going=false;
            if (!""String_Node_Str"".equals(goal)) {
              GridObject obi=null;
              if (!""String_Node_Str"".equals(opname)) {
                for (                GridObject gridi : space.objects) {
                  if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                    obi=gridi;
                    break;
                  }
                }
              }
              if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
                if (""String_Node_Str"".equals(opname)) {
                  if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                    LocalGridObject ob=(LocalGridObject)inventorybag;
                    ob.x=(int)space.current.x;
                    ob.y=(int)space.current.y;
                    space.objects.add(ob);
                  }
                  inventorybag=(LocalGridObject)obi;
                  if (obi != null) {
                    space.objects.remove(obi);
                    if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                      keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
                      for (int i=0; i < cells.h; i++) {
                        for (int j=0; j < cells.w; j++) {
                          if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                            cells.readCells[i][j].is_solid=false;
                            cells.writeCells[i][j].is_solid=false;
                          }
                        }
                      }
                    }
                  }
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.SWITCH) {
                          cells.readCells[i][j].logic=Logic.OFFSWITCH;
                          cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                          cells.readCells[i][j].charge=0.0f;
                          cells.writeCells[i][j].charge=0.0f;
                          if (ComplexFeedback)                           nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                          cells.readCells[i][j].logic=Logic.SWITCH;
                          cells.writeCells[i][j].logic=Logic.SWITCH;
                          cells.readCells[i][j].charge=1.0f;
                          cells.writeCells[i][j].charge=1.0f;
                          if (ComplexFeedback)                           nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
                if (""String_Node_Str"".equals(opname)) {
                  executed_going=false;
                  if (!goal.equals(lastgone)) {
                    nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  }
                  lastgone=goal;
                  if (true) {
                    int x=0;
                    int y=0;
                    for (                    GridObject obj : space.objects) {
                      if (obj instanceof GridAgent) {
                        GridAgent ag=(GridAgent)obj;
                        x=ag.x;
                        y=ag.y;
                      }
                    }
                    GridObject ToRemove=null;
                    for (                    GridObject obj : space.objects) {
                      if (obj instanceof Pizza) {
                        LocalGridObject obo=(LocalGridObject)obj;
                        if (obo.x == x && obo.y == y) {
                          ToRemove=obj;
                        }
                      }
                    }
                    if (ToRemove != null) {
                      space.objects.remove(ToRemove);
                    }
                    hungry=20;
                    nar.addInput(""String_Node_Str"");
                  }
                  active=true;
                }
              }
            }
            opname=""String_Node_Str"";
          }
 else {
            executed_going=true;
            active=false;
            int numSteps=Math.min(10,path.size());
            float cx=x;
            float cy=y;
            for (int i=1; i < numSteps; i++) {
              PVector next=path.get(i);
              int dx=(int)(next.x - cx);
              int dy=(int)(next.y - cy);
              if ((dx == 0) && (dy == 1)) {
                turn(UP);
                forward(1);
              }
              if ((dx == 1) && (dy == 0)) {
                turn(RIGHT);
                forward(1);
              }
              if ((dx == -1) && (dy == 0)) {
                turn(LEFT);
                forward(1);
              }
              if ((dx == 0) && (dy == -1)) {
                turn(DOWN);
                forward(1);
              }
              cx=next.x;
              cy=next.y;
            }
          }
        }
      }
    }
  }
;
  Goto wu=new Goto(this,""String_Node_Str"");
  nar.memory.addOperator(wu);
  Pick wa=new Pick(this,""String_Node_Str"");
  nar.memory.addOperator(wa);
  Activate waa=new Activate(this,""String_Node_Str"");
  nar.memory.addOperator(waa);
  Deactivate waaa=new Deactivate(this,""String_Node_Str"");
  nar.memory.addOperator(waaa);
  space.add(a);
}","public TestChamber(NAR nar,boolean showWindow){
  super();
  int w=50;
  int h=50;
  int water_threshold=30;
  Hauto cells=new Hauto(w,h,nar);
  cells.forEach(0,0,w,h,new CellFunction(){
    @Override public void update(    Cell c){
      float smoothness=20f;
      c.material=Material.GrassFloor;
      double n=SimplexNoise.noise(c.state.x / smoothness,c.state.y / smoothness);
      if ((n * 64) > water_threshold) {
        c.material=Material.Water;
      }
      c.setHeight((int)(Math.random() * 24 + 1));
    }
  }
);
  Maze.buildMaze(cells,3,3,23,23);
  space=new Grid2DSpace(cells,nar);
  space.FrameRate=0;
  space.automataPeriod=automataPeriod / gridUpdatePeriod;
  space.agentPeriod=agentPeriod / gridUpdatePeriod;
  TestChamber into=this;
  nar.memory.event.on(Events.FrameEnd.class,new EventObserver(){
    private long lastDrawn=0;
    @Override public void event(    Class event,    Object... arguments){
      if (nar.time() % gridUpdatePeriod == 0) {
        space.update(into);
        long now=System.nanoTime();
        if (now - lastDrawn > guiUpdateTime * 1e6) {
          space.redraw();
          lastDrawn=now;
        }
      }
    }
  }
);
  if (showWindow)   space.newWindow(1000,800,true);
  cells.forEach(16,16,18,18,new Hauto.SetMaterial(Material.DirtFloor));
  GridAgent a=new GridAgent(17,17,nar){
    String lastgone=""String_Node_Str"";
    @Override public void update(    Effect nextEffect){
      if (active) {
        executed=false;
        if (path == null || path.size() <= 0 && !executed_going) {
          for (int i=0; i < 5; i++) {
            if (executed) {
              break;
            }
          }
        }
        if (needpizza) {
          hungry--;
          if (hungry < 0) {
            hungry=20;
            nar.addInput(""String_Node_Str"");
          }
        }
        if (Hauto.goalInputPeriodic) {
          lastgoaltime--;
          if (lastgoaltime < 0) {
            lastgoaltime=20;
            nar.addInput(Hauto.lastWish);
          }
        }
      }
      lasttarget=space.target;
      space.current=new PVector(x,y);
      if (nextEffect == null) {
        path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
        actions.clear();
        if (path == null) {
          executed_going=false;
        }
{
          if (inventorybag != null) {
            inventorybag.x=(int)space.current.x;
            inventorybag.y=(int)space.current.y;
            inventorybag.cx=(int)space.current.x;
            inventorybag.cy=(int)space.current.y;
          }
          if (inventorybag == null || !(inventorybag instanceof Key)) {
            keyn=-1;
          }
          if (path == null || path.size() <= 1) {
            space.target=null;
            active=true;
            executed_going=false;
            if (!""String_Node_Str"".equals(goal)) {
              GridObject obi=null;
              if (!""String_Node_Str"".equals(opname)) {
                for (                GridObject gridi : space.objects) {
                  if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                    obi=gridi;
                    break;
                  }
                }
              }
              if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
                if (""String_Node_Str"".equals(opname)) {
                  if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                    LocalGridObject ob=(LocalGridObject)inventorybag;
                    ob.x=(int)space.current.x;
                    ob.y=(int)space.current.y;
                    space.objects.add(ob);
                  }
                  inventorybag=(LocalGridObject)obi;
                  if (obi != null) {
                    space.objects.remove(obi);
                    if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                      keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
                      for (int i=0; i < cells.h; i++) {
                        for (int j=0; j < cells.w; j++) {
                          if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                            cells.readCells[i][j].is_solid=false;
                            cells.writeCells[i][j].is_solid=false;
                          }
                        }
                      }
                    }
                  }
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.SWITCH) {
                          cells.readCells[i][j].logic=Logic.OFFSWITCH;
                          cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                          cells.readCells[i][j].charge=0.0f;
                          cells.writeCells[i][j].charge=0.0f;
                          if (ComplexFeedback)                           nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                          cells.readCells[i][j].logic=Logic.SWITCH;
                          cells.writeCells[i][j].logic=Logic.SWITCH;
                          cells.readCells[i][j].charge=1.0f;
                          cells.writeCells[i][j].charge=1.0f;
                          if (ComplexFeedback)                           nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
                if (""String_Node_Str"".equals(opname)) {
                  executed_going=false;
                  if (!goal.equals(lastgone)) {
                    nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  }
                  lastgone=goal;
                  if (true) {
                    int x=0;
                    int y=0;
                    for (                    GridObject obj : space.objects) {
                      if (obj instanceof GridAgent) {
                        GridAgent ag=(GridAgent)obj;
                        x=ag.x;
                        y=ag.y;
                      }
                    }
                    GridObject ToRemove=null;
                    boolean atePizza=false;
                    for (                    GridObject obj : space.objects) {
                      if (obj instanceof Pizza) {
                        LocalGridObject obo=(LocalGridObject)obj;
                        if (obo.x == x && obo.y == y) {
                          ToRemove=obj;
                          atePizza=true;
                        }
                      }
                    }
                    if (ToRemove != null) {
                      space.objects.remove(ToRemove);
                    }
                    if (atePizza) {
                      hungry=20;
                      nar.addInput(""String_Node_Str"");
                    }
                  }
                  active=true;
                }
              }
            }
            opname=""String_Node_Str"";
          }
 else {
            executed_going=true;
            active=false;
            int numSteps=Math.min(10,path.size());
            float cx=x;
            float cy=y;
            for (int i=1; i < numSteps; i++) {
              PVector next=path.get(i);
              int dx=(int)(next.x - cx);
              int dy=(int)(next.y - cy);
              if ((dx == 0) && (dy == 1)) {
                turn(UP);
                forward(1);
              }
              if ((dx == 1) && (dy == 0)) {
                turn(RIGHT);
                forward(1);
              }
              if ((dx == -1) && (dy == 0)) {
                turn(LEFT);
                forward(1);
              }
              if ((dx == 0) && (dy == -1)) {
                turn(DOWN);
                forward(1);
              }
              cx=next.x;
              cy=next.y;
            }
          }
        }
      }
    }
  }
;
  Goto wu=new Goto(this,""String_Node_Str"");
  nar.memory.addOperator(wu);
  Pick wa=new Pick(this,""String_Node_Str"");
  nar.memory.addOperator(wa);
  Activate waa=new Activate(this,""String_Node_Str"");
  nar.memory.addOperator(waa);
  Deactivate waaa=new Deactivate(this,""String_Node_Str"");
  nar.memory.addOperator(waaa);
  space.add(a);
}",0.991986043722401
166696,"@Override public void update(Effect nextEffect){
  if (active) {
    executed=false;
    if (path == null || path.size() <= 0 && !executed_going) {
      for (int i=0; i < 5; i++) {
        if (executed) {
          break;
        }
      }
    }
    if (needpizza) {
      hungry--;
      if (hungry < 0) {
        hungry=20;
        nar.addInput(""String_Node_Str"");
      }
    }
    if (Hauto.goalInputPeriodic) {
      lastgoaltime--;
      if (lastgoaltime < 0) {
        lastgoaltime=20;
        nar.addInput(Hauto.lastWish);
      }
    }
  }
  lasttarget=space.target;
  space.current=new PVector(x,y);
  if (nextEffect == null) {
    path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
    actions.clear();
    if (path == null) {
      executed_going=false;
    }
{
      if (inventorybag != null) {
        inventorybag.x=(int)space.current.x;
        inventorybag.y=(int)space.current.y;
        inventorybag.cx=(int)space.current.x;
        inventorybag.cy=(int)space.current.y;
      }
      if (inventorybag == null || !(inventorybag instanceof Key)) {
        keyn=-1;
      }
      if (path == null || path.size() <= 1) {
        space.target=null;
        active=true;
        executed_going=false;
        if (!""String_Node_Str"".equals(goal)) {
          GridObject obi=null;
          if (!""String_Node_Str"".equals(opname)) {
            for (            GridObject gridi : space.objects) {
              if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                obi=gridi;
                break;
              }
            }
          }
          if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
            if (""String_Node_Str"".equals(opname)) {
              if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                LocalGridObject ob=(LocalGridObject)inventorybag;
                ob.x=(int)space.current.x;
                ob.y=(int)space.current.y;
                space.objects.add(ob);
              }
              inventorybag=(LocalGridObject)obi;
              if (obi != null) {
                space.objects.remove(obi);
                if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                  keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                        cells.readCells[i][j].is_solid=false;
                        cells.writeCells[i][j].is_solid=false;
                      }
                    }
                  }
                }
              }
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.SWITCH) {
                      cells.readCells[i][j].logic=Logic.OFFSWITCH;
                      cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                      cells.readCells[i][j].charge=0.0f;
                      cells.writeCells[i][j].charge=0.0f;
                      if (ComplexFeedback)                       nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                      cells.readCells[i][j].logic=Logic.SWITCH;
                      cells.writeCells[i][j].logic=Logic.SWITCH;
                      cells.readCells[i][j].charge=1.0f;
                      cells.writeCells[i][j].charge=1.0f;
                      if (ComplexFeedback)                       nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
            if (""String_Node_Str"".equals(opname)) {
              executed_going=false;
              if (!goal.equals(lastgone)) {
                nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              }
              lastgone=goal;
              if (true) {
                int x=0;
                int y=0;
                for (                GridObject obj : space.objects) {
                  if (obj instanceof GridAgent) {
                    GridAgent ag=(GridAgent)obj;
                    x=ag.x;
                    y=ag.y;
                  }
                }
                GridObject ToRemove=null;
                for (                GridObject obj : space.objects) {
                  if (obj instanceof Pizza) {
                    LocalGridObject obo=(LocalGridObject)obj;
                    if (obo.x == x && obo.y == y) {
                      ToRemove=obj;
                    }
                  }
                }
                if (ToRemove != null) {
                  space.objects.remove(ToRemove);
                }
                hungry=20;
                nar.addInput(""String_Node_Str"");
              }
              active=true;
            }
          }
        }
        opname=""String_Node_Str"";
      }
 else {
        executed_going=true;
        active=false;
        int numSteps=Math.min(10,path.size());
        float cx=x;
        float cy=y;
        for (int i=1; i < numSteps; i++) {
          PVector next=path.get(i);
          int dx=(int)(next.x - cx);
          int dy=(int)(next.y - cy);
          if ((dx == 0) && (dy == 1)) {
            turn(UP);
            forward(1);
          }
          if ((dx == 1) && (dy == 0)) {
            turn(RIGHT);
            forward(1);
          }
          if ((dx == -1) && (dy == 0)) {
            turn(LEFT);
            forward(1);
          }
          if ((dx == 0) && (dy == -1)) {
            turn(DOWN);
            forward(1);
          }
          cx=next.x;
          cy=next.y;
        }
      }
    }
  }
}","@Override public void update(Effect nextEffect){
  if (active) {
    executed=false;
    if (path == null || path.size() <= 0 && !executed_going) {
      for (int i=0; i < 5; i++) {
        if (executed) {
          break;
        }
      }
    }
    if (needpizza) {
      hungry--;
      if (hungry < 0) {
        hungry=20;
        nar.addInput(""String_Node_Str"");
      }
    }
    if (Hauto.goalInputPeriodic) {
      lastgoaltime--;
      if (lastgoaltime < 0) {
        lastgoaltime=20;
        nar.addInput(Hauto.lastWish);
      }
    }
  }
  lasttarget=space.target;
  space.current=new PVector(x,y);
  if (nextEffect == null) {
    path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
    actions.clear();
    if (path == null) {
      executed_going=false;
    }
{
      if (inventorybag != null) {
        inventorybag.x=(int)space.current.x;
        inventorybag.y=(int)space.current.y;
        inventorybag.cx=(int)space.current.x;
        inventorybag.cy=(int)space.current.y;
      }
      if (inventorybag == null || !(inventorybag instanceof Key)) {
        keyn=-1;
      }
      if (path == null || path.size() <= 1) {
        space.target=null;
        active=true;
        executed_going=false;
        if (!""String_Node_Str"".equals(goal)) {
          GridObject obi=null;
          if (!""String_Node_Str"".equals(opname)) {
            for (            GridObject gridi : space.objects) {
              if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                obi=gridi;
                break;
              }
            }
          }
          if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
            if (""String_Node_Str"".equals(opname)) {
              if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                LocalGridObject ob=(LocalGridObject)inventorybag;
                ob.x=(int)space.current.x;
                ob.y=(int)space.current.y;
                space.objects.add(ob);
              }
              inventorybag=(LocalGridObject)obi;
              if (obi != null) {
                space.objects.remove(obi);
                if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                  keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                        cells.readCells[i][j].is_solid=false;
                        cells.writeCells[i][j].is_solid=false;
                      }
                    }
                  }
                }
              }
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.SWITCH) {
                      cells.readCells[i][j].logic=Logic.OFFSWITCH;
                      cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                      cells.readCells[i][j].charge=0.0f;
                      cells.writeCells[i][j].charge=0.0f;
                      if (ComplexFeedback)                       nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                      cells.readCells[i][j].logic=Logic.SWITCH;
                      cells.writeCells[i][j].logic=Logic.SWITCH;
                      cells.readCells[i][j].charge=1.0f;
                      cells.writeCells[i][j].charge=1.0f;
                      if (ComplexFeedback)                       nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
            if (""String_Node_Str"".equals(opname)) {
              executed_going=false;
              if (!goal.equals(lastgone)) {
                nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              }
              lastgone=goal;
              if (true) {
                int x=0;
                int y=0;
                for (                GridObject obj : space.objects) {
                  if (obj instanceof GridAgent) {
                    GridAgent ag=(GridAgent)obj;
                    x=ag.x;
                    y=ag.y;
                  }
                }
                GridObject ToRemove=null;
                boolean atePizza=false;
                for (                GridObject obj : space.objects) {
                  if (obj instanceof Pizza) {
                    LocalGridObject obo=(LocalGridObject)obj;
                    if (obo.x == x && obo.y == y) {
                      ToRemove=obj;
                      atePizza=true;
                    }
                  }
                }
                if (ToRemove != null) {
                  space.objects.remove(ToRemove);
                }
                if (atePizza) {
                  hungry=20;
                  nar.addInput(""String_Node_Str"");
                }
              }
              active=true;
            }
          }
        }
        opname=""String_Node_Str"";
      }
 else {
        executed_going=true;
        active=false;
        int numSteps=Math.min(10,path.size());
        float cx=x;
        float cy=y;
        for (int i=1; i < numSteps; i++) {
          PVector next=path.get(i);
          int dx=(int)(next.x - cx);
          int dy=(int)(next.y - cy);
          if ((dx == 0) && (dy == 1)) {
            turn(UP);
            forward(1);
          }
          if ((dx == 1) && (dy == 0)) {
            turn(RIGHT);
            forward(1);
          }
          if ((dx == -1) && (dy == 0)) {
            turn(LEFT);
            forward(1);
          }
          if ((dx == 0) && (dy == -1)) {
            turn(DOWN);
            forward(1);
          }
          cx=next.x;
          cy=next.y;
        }
      }
    }
  }
}",0.9902246101037236
166697,"/** 
 * Insert a TaskLink into the TaskLink bag <p> called only from Memory.continuedProcess
 * @param taskLink The termLink to be inserted
 */
protected boolean insertTaskLink(final TaskLink taskLink){
  Task target=taskLink.getTarget();
  Term term=target.getTerm();
  boolean wat=target.sentence.isJudgment();
  if (target.sentence.isJudgment() && target.sentence.isEternal() && term instanceof Implication&& !term.hasVarIndep()&& !(this.name() instanceof Operation)) {
    Implication imp=(Implication)term;
    if (imp.getTemporalOrder() == TemporalRules.ORDER_FORWARD && imp.getPredicate().equals(this.name())) {
      Term subj=imp.getSubject();
      if (subj instanceof Conjunction) {
        Conjunction conj=(Conjunction)subj;
        if (conj.getTemporalOrder() == TemporalRules.ORDER_FORWARD && conj.term.length >= 4 && conj.term[conj.term.length - 1] instanceof Interval && conj.term[conj.term.length - 2] instanceof Operation) {
          addToTable(target,false,enactable_explainations,Parameters.CONCEPT_BELIEFS_MAX,EnactableExplainationAdd.class,EnactableExplainationRemove.class);
        }
      }
    }
  }
  if (this.name().equals(target.getTerm())) {
  }
  boolean isEternal=target.sentence.isEternal();
  int nSameContent=0;
  float lowest_priority=Float.MAX_VALUE;
  TaskLink lowest=null;
  for (  TaskLink tl : taskLinks) {
    Sentence s=tl.getTarget().sentence;
    if (s.getTerm().equals(taskLink.getTerm()) && s.isEternal() == isEternal) {
      nSameContent++;
      if (tl.getPriority() < lowest_priority) {
        lowest_priority=tl.getPriority();
        lowest=tl;
      }
      if (nSameContent > Parameters.TASKLINK_PER_CONTENT) {
        taskLinks.take(lowest);
        memory.emit(TaskLinkRemove.class,lowest,this);
        break;
      }
    }
  }
  TaskLink removed=taskLinks.putIn(taskLink);
  if (removed != null) {
    if (removed == taskLink) {
      memory.emit(TaskLinkRemove.class,taskLink,this);
      return false;
    }
 else {
      memory.emit(TaskLinkRemove.class,removed,this);
    }
    removed.end();
  }
  memory.emit(TaskLinkAdd.class,taskLink,this);
  return true;
}","/** 
 * Insert a TaskLink into the TaskLink bag <p> called only from Memory.continuedProcess
 * @param taskLink The termLink to be inserted
 */
protected boolean insertTaskLink(final TaskLink taskLink){
  Task target=taskLink.getTarget();
  Term term=target.getTerm();
  boolean wat=target.sentence.isJudgment();
  if (target.sentence.isJudgment() && target.sentence.isEternal() && term instanceof Implication&& !term.hasVarIndep()&& !(this.name() instanceof Operation)) {
    Implication imp=(Implication)term;
    if (imp.getTemporalOrder() == TemporalRules.ORDER_FORWARD && imp.getPredicate().equals(this.name())) {
      Term subj=imp.getSubject();
      if (subj instanceof Conjunction) {
        Conjunction conj=(Conjunction)subj;
        if (conj.getTemporalOrder() == TemporalRules.ORDER_FORWARD && conj.term.length >= 4 && conj.term[conj.term.length - 1] instanceof Interval && conj.term[conj.term.length - 2] instanceof Operation) {
          addToTable(target,false,executable_preconditions,Parameters.CONCEPT_BELIEFS_MAX,EnactableExplainationAdd.class,EnactableExplainationRemove.class);
        }
      }
    }
  }
  if (this.name().equals(target.getTerm())) {
  }
  boolean isEternal=target.sentence.isEternal();
  int nSameContent=0;
  float lowest_priority=Float.MAX_VALUE;
  TaskLink lowest=null;
  for (  TaskLink tl : taskLinks) {
    Sentence s=tl.getTarget().sentence;
    if (s.getTerm().equals(taskLink.getTerm()) && s.isEternal() == isEternal) {
      nSameContent++;
      if (tl.getPriority() < lowest_priority) {
        lowest_priority=tl.getPriority();
        lowest=tl;
      }
      if (nSameContent > Parameters.TASKLINK_PER_CONTENT) {
        taskLinks.take(lowest);
        memory.emit(TaskLinkRemove.class,lowest,this);
        break;
      }
    }
  }
  TaskLink removed=taskLinks.putIn(taskLink);
  if (removed != null) {
    if (removed == taskLink) {
      memory.emit(TaskLinkRemove.class,taskLink,this);
      return false;
    }
 else {
      memory.emit(TaskLinkRemove.class,removed,this);
    }
    removed.end();
  }
  memory.emit(TaskLinkAdd.class,taskLink,this);
  return true;
}",0.9945945945945946
166698,"/** 
 * Constructor, called in Memory.getConcept only
 * @param tm A term corresponding to the concept
 * @param memory A reference to the memory
 */
public Concept(final BudgetValue b,final Term tm,final Memory memory){
  super(b);
  this.term=tm;
  this.memory=memory;
  this.questions=new ArrayList<>();
  this.beliefs=new ArrayList<>();
  this.enactable_explainations=new ArrayList<>();
  this.quests=new ArrayList<>();
  this.desires=new ArrayList<>();
  this.taskLinks=new LevelBag<>(Parameters.TASK_LINK_BAG_LEVELS,Parameters.TASK_LINK_BAG_SIZE);
  this.termLinks=new LevelBag<>(Parameters.TERM_LINK_BAG_LEVELS,Parameters.TERM_LINK_BAG_SIZE);
  if (tm instanceof CompoundTerm) {
    this.termLinkTemplates=((CompoundTerm)tm).prepareComponentLinks();
  }
 else {
    this.termLinkTemplates=null;
  }
}","/** 
 * Constructor, called in Memory.getConcept only
 * @param tm A term corresponding to the concept
 * @param memory A reference to the memory
 */
public Concept(final BudgetValue b,final Term tm,final Memory memory){
  super(b);
  this.term=tm;
  this.memory=memory;
  this.questions=new ArrayList<>();
  this.beliefs=new ArrayList<>();
  this.executable_preconditions=new ArrayList<>();
  this.quests=new ArrayList<>();
  this.desires=new ArrayList<>();
  this.taskLinks=new LevelBag<>(Parameters.TASK_LINK_BAG_LEVELS,Parameters.TASK_LINK_BAG_SIZE);
  this.termLinks=new LevelBag<>(Parameters.TERM_LINK_BAG_LEVELS,Parameters.TERM_LINK_BAG_SIZE);
  if (tm instanceof CompoundTerm) {
    this.termLinkTemplates=((CompoundTerm)tm).prepareComponentLinks();
  }
 else {
    this.termLinkTemplates=null;
  }
}",0.9857585139318884
166699,"/** 
 * To accept a new goal, and check for revisions and realization, then decide whether to actively pursue it
 * @param judg The judgment to be accepted
 * @param task The task to be processed
 * @return Whether to continue the processing of the task
 */
protected boolean processGoal(final DerivationContext nal,final Task task,boolean shortcut){
  final Sentence goal=task.sentence;
  final Task oldGoalT=selectCandidate(goal,desires);
  Sentence oldGoal=null;
  if (oldGoalT != null) {
    oldGoal=oldGoalT.sentence;
    final Stamp newStamp=goal.stamp;
    final Stamp oldStamp=oldGoal.stamp;
    if (newStamp.equals(oldStamp,false,true,true,false)) {
      return false;
    }
    if (revisible(goal,oldGoal)) {
      nal.setTheNewStamp(newStamp,oldStamp,memory.time());
      Sentence projectedGoal=oldGoal.projection(task.sentence.getOccurenceTime(),newStamp.getOccurrenceTime());
      if (projectedGoal != null) {
        nal.setCurrentBelief(projectedGoal);
        if (!(task.sentence.term instanceof Operation)) {
          boolean successOfRevision=revision(task.sentence,projectedGoal,false,nal);
          if (successOfRevision) {
            return false;
          }
        }
      }
    }
  }
  Stamp s2=goal.stamp.clone();
  s2.setOccurrenceTime(memory.time());
  if (s2.after(task.sentence.stamp,nal.memory.param.duration.get())) {
    Sentence projectedGoal=task.sentence.projection(memory.time(),nal.memory.param.duration.get());
    if (projectedGoal != null) {
      nal.singlePremiseTask(projectedGoal,task.budget.clone());
      return false;
    }
  }
  if (task.aboveThreshold()) {
    final Task beliefT=selectCandidate(goal,beliefs);
    double AntiSatisfaction=0.5f;
    if (beliefT != null) {
      Sentence belief=beliefT.sentence;
      Sentence projectedBelief=belief.projection(task.sentence.getOccurenceTime(),nal.memory.param.duration.get());
      trySolution(projectedBelief,task,nal);
      AntiSatisfaction=task.sentence.truth.getExpDifAbs(belief.truth);
    }
    double Satisfaction=1.0 - AntiSatisfaction;
    TruthValue T=goal.truth.clone();
    T.setFrequency((float)(T.getFrequency() - Satisfaction));
    boolean fullfilled=AntiSatisfaction < Parameters.SATISFACTION_TRESHOLD;
    Sentence projectedGoal=goal.projection(nal.memory.time(),nal.memory.time());
    if (projectedGoal != null && task.aboveThreshold() && !fullfilled && projectedGoal.truth.getExpectation() > nal.memory.param.decisionThreshold.get()) {
      Operation bestop=null;
      float bestop_truthexp=0.0f;
      TruthValue bestop_truth=null;
      for (      Task t : this.enactable_explainations) {
        Term[] prec=((Conjunction)((Implication)t.getTerm()).getSubject()).term;
        Term[] newprec=new Term[prec.length - 3];
        for (int i=0; i < prec.length - 3; i++) {
          newprec[i]=prec[i];
        }
        Operation op=(Operation)prec[prec.length - 2];
        Term precondition=Conjunction.make(newprec,TemporalRules.ORDER_FORWARD);
        Concept preconc=nal.memory.concept(precondition);
        long newesttime=-1;
        Task bestsofar=null;
        if (preconc != null && preconc.beliefs.size() > 0) {
          for (          Task p : preconc.beliefs) {
            if (!p.sentence.isJudgment() && p.sentence.getOccurenceTime() > newesttime && p.sentence.getOccurenceTime() < memory.time()) {
              newesttime=p.sentence.getOccurenceTime();
              bestsofar=p;
            }
          }
          for (          TaskLink pl : preconc.taskLinks) {
            Task p=pl.getTarget();
            if (!p.sentence.isJudgment() && p.sentence.getOccurenceTime() > newesttime && p.sentence.getOccurenceTime() < memory.time()) {
              newesttime=p.sentence.getOccurenceTime();
              bestsofar=p;
            }
          }
          TruthValue A=projectedGoal.getTruth();
          TruthValue Hyp=t.sentence.truth;
          TruthValue precon=bestsofar.sentence.truth;
          TruthValue leftside=TruthFunctions.desireStrong(A,Hyp);
          TruthValue opdesire=TruthFunctions.desireStrong(precon,leftside);
          float expecdesire=opdesire.getExpectation();
          if (expecdesire > bestop_truthexp) {
            bestop=op;
            bestop_truthexp=expecdesire;
            bestop_truth=opdesire;
          }
        }
      }
      if (bestop != null && bestop_truthexp > 0.5f) {
        Task t=new Task(new Sentence(bestop,Symbols.JUDGMENT_MARK,bestop_truth,projectedGoal.stamp),new BudgetValue(1.0f,1.0f,1.0f));
        System.out.println(""String_Node_Str"" + t.getTerm().toString() + String.valueOf(memory.randomNumber.nextInt()));
        if (!executeDecision(t)) {
          memory.emit(UnexecutableGoal.class,task,this,nal);
        }
      }
      questionFromGoal(task,nal);
      addToTable(task,false,desires,Parameters.CONCEPT_GOALS_MAX,ConceptGoalAdd.class,ConceptGoalRemove.class);
      InternalExperience.InternalExperienceFromTask(memory,task,false);
      if (!executeDecision(task)) {
        memory.emit(UnexecutableGoal.class,task,this,nal);
        return true;
      }
      return false;
    }
    return fullfilled;
  }
  return false;
}","/** 
 * To accept a new goal, and check for revisions and realization, then decide whether to actively pursue it
 * @param judg The judgment to be accepted
 * @param task The task to be processed
 * @return Whether to continue the processing of the task
 */
protected boolean processGoal(final DerivationContext nal,final Task task,boolean shortcut){
  final Sentence goal=task.sentence;
  final Task oldGoalT=selectCandidate(goal,desires);
  Sentence oldGoal=null;
  if (oldGoalT != null) {
    oldGoal=oldGoalT.sentence;
    final Stamp newStamp=goal.stamp;
    final Stamp oldStamp=oldGoal.stamp;
    if (newStamp.equals(oldStamp,false,true,true,false)) {
      return false;
    }
    if (revisible(goal,oldGoal)) {
      nal.setTheNewStamp(newStamp,oldStamp,memory.time());
      Sentence projectedGoal=oldGoal.projection(task.sentence.getOccurenceTime(),newStamp.getOccurrenceTime());
      if (projectedGoal != null) {
        nal.setCurrentBelief(projectedGoal);
        if (!(task.sentence.term instanceof Operation)) {
          boolean successOfRevision=revision(task.sentence,projectedGoal,false,nal);
          if (successOfRevision) {
            return false;
          }
        }
      }
    }
  }
  Stamp s2=goal.stamp.clone();
  s2.setOccurrenceTime(memory.time());
  if (s2.after(task.sentence.stamp,nal.memory.param.duration.get())) {
    Sentence projectedGoal=task.sentence.projection(memory.time(),nal.memory.param.duration.get());
    if (projectedGoal != null) {
      nal.singlePremiseTask(projectedGoal,task.budget.clone());
      return false;
    }
  }
  if (task.aboveThreshold()) {
    final Task beliefT=selectCandidate(goal,beliefs);
    double AntiSatisfaction=0.5f;
    if (beliefT != null) {
      Sentence belief=beliefT.sentence;
      Sentence projectedBelief=belief.projection(task.sentence.getOccurenceTime(),nal.memory.param.duration.get());
      trySolution(projectedBelief,task,nal);
      AntiSatisfaction=task.sentence.truth.getExpDifAbs(belief.truth);
    }
    double Satisfaction=1.0 - AntiSatisfaction;
    TruthValue T=goal.truth.clone();
    T.setFrequency((float)(T.getFrequency() - Satisfaction));
    boolean fullfilled=AntiSatisfaction < Parameters.SATISFACTION_TRESHOLD;
    Sentence projectedGoal=goal.projection(nal.memory.time(),nal.memory.time());
    if (projectedGoal != null && task.aboveThreshold() && !fullfilled && projectedGoal.truth.getExpectation() > nal.memory.param.decisionThreshold.get()) {
      Operation bestop=null;
      float bestop_truthexp=0.0f;
      TruthValue bestop_truth=null;
      for (      Task t : this.executable_preconditions) {
        Term[] prec=((Conjunction)((Implication)t.getTerm()).getSubject()).term;
        Term[] newprec=new Term[prec.length - 3];
        for (int i=0; i < prec.length - 3; i++) {
          newprec[i]=prec[i];
        }
        Operation op=(Operation)prec[prec.length - 2];
        Term precondition=Conjunction.make(newprec,TemporalRules.ORDER_FORWARD);
        Concept preconc=nal.memory.concept(precondition);
        long newesttime=-1;
        Task bestsofar=null;
        if (preconc != null && preconc.beliefs.size() > 0) {
          for (          Task p : preconc.beliefs) {
            if (!p.sentence.isJudgment() && p.sentence.getOccurenceTime() > newesttime && p.sentence.getOccurenceTime() < memory.time()) {
              newesttime=p.sentence.getOccurenceTime();
              bestsofar=p;
            }
          }
          for (          TaskLink pl : preconc.taskLinks) {
            Task p=pl.getTarget();
            if (!p.sentence.isJudgment() && p.sentence.getOccurenceTime() > newesttime && p.sentence.getOccurenceTime() < memory.time()) {
              newesttime=p.sentence.getOccurenceTime();
              bestsofar=p;
            }
          }
          if (bestsofar == null) {
            continue;
          }
          TruthValue A=projectedGoal.getTruth();
          TruthValue Hyp=t.sentence.truth;
          TruthValue precon=bestsofar.sentence.truth;
          TruthValue leftside=TruthFunctions.desireStrong(A,Hyp);
          TruthValue opdesire=TruthFunctions.desireStrong(precon,leftside);
          float expecdesire=opdesire.getExpectation();
          if (expecdesire > bestop_truthexp) {
            bestop=op;
            bestop_truthexp=expecdesire;
            bestop_truth=opdesire;
          }
        }
      }
      if (bestop != null && bestop_truthexp > 0.5f) {
        Task t=new Task(new Sentence(bestop,Symbols.JUDGMENT_MARK,bestop_truth,projectedGoal.stamp),new BudgetValue(1.0f,1.0f,1.0f));
        System.out.println(""String_Node_Str"" + t.getTerm().toString() + String.valueOf(memory.randomNumber.nextInt()));
        if (!executeDecision(t)) {
          memory.emit(UnexecutableGoal.class,task,this,nal);
        }
      }
      questionFromGoal(task,nal);
      addToTable(task,false,desires,Parameters.CONCEPT_GOALS_MAX,ConceptGoalAdd.class,ConceptGoalRemove.class);
      InternalExperience.InternalExperienceFromTask(memory,task,false);
      if (!executeDecision(task)) {
        memory.emit(UnexecutableGoal.class,task,this,nal);
        return true;
      }
      return false;
    }
    return fullfilled;
  }
  return false;
}",0.9911350934669492
166700,"/** 
 * To answer a question by existing beliefs
 * @param task The task to be processed
 * @return Whether to continue the processing of the task
 */
protected void processQuestion(final DerivationContext nal,final Task task){
  Sentence ques=task.sentence;
  boolean newQuestion=true;
  for (  final Task t : questions) {
    final Sentence q=t.sentence;
    if (q.equalsContent(ques)) {
      ques=q;
      newQuestion=false;
      break;
    }
  }
  if (newQuestion) {
    if (questions.size() + 1 > Parameters.CONCEPT_QUESTIONS_MAX) {
      Task removed=questions.remove(0);
      memory.event.emit(ConceptQuestionRemove.class,this,removed);
    }
    questions.add(task);
    memory.event.emit(ConceptQuestionAdd.class,this,task);
  }
  final Task newAnswerT=(ques.isQuestion()) ? selectCandidate(ques,beliefs,false) : selectCandidate(ques,desires,false);
  if (newAnswerT != null) {
    trySolution(newAnswerT.sentence,task,nal);
  }
}","/** 
 * To answer a question by existing beliefs
 * @param task The task to be processed
 * @return Whether to continue the processing of the task
 */
protected void processQuestion(final DerivationContext nal,final Task task){
  Task quesTask=task;
  boolean newQuestion=true;
  for (  final Task t : questions) {
    if (t.sentence.equalsContent(quesTask.sentence)) {
      quesTask=t;
      newQuestion=false;
      break;
    }
  }
  if (newQuestion) {
    if (questions.size() + 1 > Parameters.CONCEPT_QUESTIONS_MAX) {
      Task removed=questions.remove(0);
      memory.event.emit(ConceptQuestionRemove.class,this,removed);
    }
    questions.add(task);
    memory.event.emit(ConceptQuestionAdd.class,this,task);
  }
  Sentence ques=task.sentence;
  final Task newAnswerT=(ques.isQuestion()) ? selectCandidate(ques,beliefs,false) : selectCandidate(ques,desires,false);
  if (newAnswerT != null) {
    trySolution(newAnswerT.sentence,task,nal);
  }
 else   if (task.isInput() && quesTask.getBestSolution() != null) {
    memory.emit(Events.Answer.class,quesTask,quesTask.getBestSolution());
  }
}",0.8293398533007335
166701,"/** 
 * Create a Sentence with the given fields
 * @param content The Term that forms the content of the sentence
 * @param punctuation The punctuation indicating the type of the sentence
 * @param truth The truth value of the sentence, null for question
 * @param stamp The stamp of the sentence indicating its derivation time andbase
 */
private Sentence(T _content,final char punctuation,final TruthValue truth,final Stamp stamp,boolean normalize){
  if (punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    if (_content instanceof Conjunction) {
      Conjunction c=(Conjunction)_content;
      if (c.getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
        if (c.term[c.term.length - 1] instanceof Interval) {
          Term[] term2=new Term[c.term.length - 1];
          for (int i=0; i < c.term.length - 1; i++) {
            term2[i]=c.term[i];
          }
          _content=(T)Conjunction.make(term2,c.getTemporalOrder());
          long time=Interval.magnitudeToTime(((Interval)c.term[c.term.length - 1]).magnitude,new AtomicDuration(Parameters.DURATION));
          if (stamp != null)           stamp.setOccurrenceTime(stamp.getOccurrenceTime() - time);
        }
      }
    }
  }
  this.punctuation=punctuation;
  if (_content instanceof Interval && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    truth.setConfidence(0.0f);
    if (Parameters.DEBUG)     throw new RuntimeException(""String_Node_Str"" + _content + punctuation+ ""String_Node_Str""+ stamp);
  }
  if ((!isQuestion() && !isQuest()) && (truth == null) && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (_content.subjectOrPredicateIsIndependentVar() && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    truth.setConfidence(0.0f);
    if (Parameters.DEBUG)     throw new RuntimeException(""String_Node_Str"");
  }
  if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    if (!Term.valid(_content)) {
      truth.setConfidence(0.0f);
      if (Parameters.DEBUG) {
        CompoundTerm.UnableToCloneException ntc=new CompoundTerm.UnableToCloneException(""String_Node_Str"" + _content);
        ntc.printStackTrace();
        throw ntc;
      }
    }
  }
  if ((isQuestion() || isQuest()) && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK && !stamp.isEternal()) {
    stamp.setEternal();
  }
  this.truth=truth;
  this.stamp=stamp;
  this.revisible=!(_content.hasVarDep());
  if (normalize && _content.hasVar() && (_content instanceof CompoundTerm)&& (!((CompoundTerm)_content).isNormalized())) {
    this.term=(T)((CompoundTerm)_content).cloneDeepVariables();
    final CompoundTerm c=(CompoundTerm)term;
    List<Variable> vars=new ArrayList();
    c.recurseSubtermsContainingVariables(new Term.TermVisitor(){
      @Override public void visit(      final Term t,      final Term parent){
        if (t instanceof Variable) {
          Variable v=((Variable)t);
          vars.add(v);
        }
      }
    }
);
    Map<CharSequence,CharSequence> rename=new HashMap();
    boolean renamed=false;
    for (    final Variable v : vars) {
      CharSequence vname=v.name();
      if (!v.hasVarIndep())       vname=vname + ""String_Node_Str"" + v.getScope().name();
      CharSequence n=rename.get(vname);
      if (n == null) {
        rename.put(vname,n=Variable.getName(v.getType(),rename.size() + 1));
        if (!n.equals(vname))         renamed=true;
      }
      v.setScope(c,n);
    }
    if (renamed) {
      c.invalidateName();
      if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES) {
        if (!Term.valid(c)) {
          CompoundTerm.UnableToCloneException ntc=new CompoundTerm.UnableToCloneException(""String_Node_Str"" + c + ""String_Node_Str""+ _content);
          ntc.printStackTrace();
          throw ntc;
        }
      }
    }
    c.setNormalized(true);
  }
 else {
    this.term=_content;
  }
  if (isUniqueByOcurrenceTime())   this.hash=Objects.hash(term,punctuation,truth,stamp.getOccurrenceTime());
 else   this.hash=Objects.hash(term,punctuation,truth);
}","/** 
 * Create a Sentence with the given fields
 * @param content The Term that forms the content of the sentence
 * @param punctuation The punctuation indicating the type of the sentence
 * @param truth The truth value of the sentence, null for question
 * @param stamp The stamp of the sentence indicating its derivation time andbase
 */
private Sentence(T _content,final char punctuation,final TruthValue truth,final Stamp stamp,boolean normalize){
  if (punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    if (_content instanceof Conjunction) {
      Conjunction c=(Conjunction)_content;
      if (c.getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
        if (c.term[c.term.length - 1] instanceof Interval) {
          Term[] term2=new Term[c.term.length - 1];
          for (int i=0; i < c.term.length - 1; i++) {
            term2[i]=c.term[i];
          }
          _content=(T)Conjunction.make(term2,c.getTemporalOrder());
          long time=Interval.magnitudeToTime(((Interval)c.term[c.term.length - 1]).magnitude,new AtomicDuration(Parameters.DURATION));
          if (stamp != null)           stamp.setOccurrenceTime(stamp.getOccurrenceTime() - time);
        }
      }
    }
  }
  this.punctuation=punctuation;
  if (this.isJudgment() && _content.hasVarQuery()) {
    truth.setConfidence(0.0f);
  }
  if (_content instanceof Interval && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    truth.setConfidence(0.0f);
    if (Parameters.DEBUG)     throw new RuntimeException(""String_Node_Str"" + _content + punctuation+ ""String_Node_Str""+ stamp);
  }
  if ((!isQuestion() && !isQuest()) && (truth == null) && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (_content.subjectOrPredicateIsIndependentVar() && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    truth.setConfidence(0.0f);
    if (Parameters.DEBUG)     throw new RuntimeException(""String_Node_Str"");
  }
  if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK) {
    if (!Term.valid(_content)) {
      truth.setConfidence(0.0f);
      if (Parameters.DEBUG) {
        CompoundTerm.UnableToCloneException ntc=new CompoundTerm.UnableToCloneException(""String_Node_Str"" + _content);
        ntc.printStackTrace();
        throw ntc;
      }
    }
  }
  if ((isQuestion() || isQuest()) && punctuation != Symbols.TERM_NORMALIZING_WORKAROUND_MARK && !stamp.isEternal()) {
    stamp.setEternal();
  }
  this.truth=truth;
  this.stamp=stamp;
  this.revisible=!(_content.hasVarDep());
  if (normalize && _content.hasVar() && (_content instanceof CompoundTerm)&& (!((CompoundTerm)_content).isNormalized())) {
    this.term=(T)((CompoundTerm)_content).cloneDeepVariables();
    final CompoundTerm c=(CompoundTerm)term;
    List<Variable> vars=new ArrayList();
    c.recurseSubtermsContainingVariables(new Term.TermVisitor(){
      @Override public void visit(      final Term t,      final Term parent){
        if (t instanceof Variable) {
          Variable v=((Variable)t);
          vars.add(v);
        }
      }
    }
);
    Map<CharSequence,CharSequence> rename=new HashMap();
    boolean renamed=false;
    for (    final Variable v : vars) {
      CharSequence vname=v.name();
      if (!v.hasVarIndep())       vname=vname + ""String_Node_Str"" + v.getScope().name();
      CharSequence n=rename.get(vname);
      if (n == null) {
        rename.put(vname,n=Variable.getName(v.getType(),rename.size() + 1));
        if (!n.equals(vname))         renamed=true;
      }
      v.setScope(c,n);
    }
    if (renamed) {
      c.invalidateName();
      if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES) {
        if (!Term.valid(c)) {
          CompoundTerm.UnableToCloneException ntc=new CompoundTerm.UnableToCloneException(""String_Node_Str"" + c + ""String_Node_Str""+ _content);
          ntc.printStackTrace();
          throw ntc;
        }
      }
    }
    c.setNormalized(true);
  }
 else {
    this.term=_content;
  }
  if (isUniqueByOcurrenceTime())   this.hash=Objects.hash(term,punctuation,truth,stamp.getOccurrenceTime());
 else   this.hash=Objects.hash(term,punctuation,truth);
}",0.989501312335958
166702,"/** 
 * Check if a Sentence provide a better answer to a Question or Goal
 * @param belief The proposed answer
 * @param task The task to be processed
 * @param memory Reference to the memory
 */
public static boolean trySolution(Sentence belief,final Task task,final DerivationContext nal){
  Sentence problem=task.sentence;
  Memory memory=nal.mem();
  if (!TemporalRules.matchingOrder(problem.getTemporalOrder(),belief.getTemporalOrder())) {
    memory.emit(Unsolved.class,task,belief,""String_Node_Str"");
    return false;
  }
  if (task.sentence.containQueryVar() && belief.containQueryVar()) {
    return false;
  }
  Sentence oldBest=task.getBestSolution();
  float newQ=TemporalRules.solutionQuality(problem,belief,memory);
  if (oldBest != null) {
    float oldQ=TemporalRules.solutionQuality(problem,oldBest,memory);
    if (oldQ >= newQ) {
      if (problem.isGoal()) {
        memory.emotion.adjustHappy(oldQ,task.getPriority(),nal);
      }
      memory.emit(Unsolved.class,task,belief,""String_Node_Str"");
      return false;
    }
  }
  task.setBestSolution(memory,belief);
  if (problem.isGoal()) {
    memory.emotion.adjustHappy(newQ,task.getPriority(),nal);
  }
  BudgetValue budget=TemporalRules.solutionEval(problem,belief,task,nal);
  if ((budget != null) && budget.aboveThreshold()) {
    if (task.sentence.punctuation == Symbols.QUESTION_MARK || task.sentence.punctuation == Symbols.QUEST_MARK) {
      if (task.isInput()) {
        memory.emit(Answer.class,task,belief);
      }
 else {
        memory.emit(Output.class,task,belief);
      }
    }
 else {
      memory.emit(Output.class,task,belief);
    }
    nal.addTask(nal.getCurrentTask(),budget,belief,task.getParentBelief());
    return true;
  }
 else {
    memory.emit(Unsolved.class,task,belief,""String_Node_Str"");
  }
  return false;
}","/** 
 * Check if a Sentence provide a better answer to a Question or Goal
 * @param belief The proposed answer
 * @param task The task to be processed
 * @param memory Reference to the memory
 */
public static boolean trySolution(Sentence belief,final Task task,final DerivationContext nal){
  Sentence problem=task.sentence;
  Memory memory=nal.mem();
  Sentence oldBest=task.getBestSolution();
  float newQ=TemporalRules.solutionQuality(problem,belief,memory);
  if (oldBest != null) {
    float oldQ=TemporalRules.solutionQuality(problem,oldBest,memory);
    if (oldQ >= newQ) {
      if (problem.isGoal()) {
        memory.emotion.adjustHappy(oldQ,task.getPriority(),nal);
      }
      memory.emit(Unsolved.class,task,belief,""String_Node_Str"");
      return false;
    }
  }
  task.setBestSolution(memory,belief);
  if (problem.isGoal()) {
    memory.emotion.adjustHappy(newQ,task.getPriority(),nal);
  }
  BudgetValue budget=TemporalRules.solutionEval(problem,belief,task,nal);
  if ((budget != null) && budget.aboveThreshold()) {
    if (task.sentence.punctuation == Symbols.QUESTION_MARK || task.sentence.punctuation == Symbols.QUEST_MARK) {
      if (task.isInput()) {
        memory.emit(Answer.class,task,belief);
      }
 else {
        memory.emit(Output.class,task,belief);
      }
    }
 else {
      memory.emit(Output.class,task,belief);
    }
    nal.addTask(nal.getCurrentTask(),budget,belief,task.getParentBelief());
    return true;
  }
 else {
    memory.emit(Unsolved.class,task,belief,""String_Node_Str"");
  }
  return false;
}",0.9204275534441804
166703,"/** 
 * Constructor with partial values, called by make
 * @param arg The component list of the term
 * @param order
 * @param normalized
 */
protected Conjunction(Term[] arg,final int order,boolean normalized){
  super(removeFirstInterval(flatten(arg,order)));
  temporalOrder=order;
  init(this.term);
}","/** 
 * Constructor with partial values, called by make
 * @param arg The component list of the term
 * @param order
 * @param normalized
 */
protected Conjunction(Term[] arg,final int order,boolean normalized){
  super(arg);
  temporalOrder=order;
  init(this.term);
}",0.9372822299651568
166704,"public static Equivalence make(Term subject,Term predicate,int temporalOrder){
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  if ((subject instanceof Implication) || (subject instanceof Equivalence) || (predicate instanceof Implication)|| (predicate instanceof Equivalence)|| (subject instanceof Interval)|| (predicate instanceof Interval)) {
    return null;
  }
  if ((temporalOrder == TemporalRules.ORDER_BACKWARD) || ((subject.compareTo(predicate) > 0) && (temporalOrder != TemporalRules.ORDER_FORWARD))) {
    Term interm=subject;
    subject=predicate;
    predicate=interm;
  }
  NativeOperator copula;
switch (temporalOrder) {
case TemporalRules.ORDER_BACKWARD:
    temporalOrder=TemporalRules.ORDER_FORWARD;
case TemporalRules.ORDER_FORWARD:
  copula=NativeOperator.EQUIVALENCE_AFTER;
break;
case TemporalRules.ORDER_CONCURRENT:
copula=NativeOperator.EQUIVALENCE_WHEN;
break;
default :
copula=NativeOperator.EQUIVALENCE;
}
Term[] t=Term.toSortedSetArray(subject,predicate);
if (t.length != 2) return null;
return new Equivalence(t,temporalOrder);
}","public static Equivalence make(Term subject,Term predicate,int temporalOrder){
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  if ((subject instanceof Implication) || (subject instanceof Equivalence) || (predicate instanceof Implication)|| (predicate instanceof Equivalence)|| (subject instanceof Interval)|| (predicate instanceof Interval)) {
    return null;
  }
  if ((temporalOrder == TemporalRules.ORDER_BACKWARD) || ((subject.compareTo(predicate) > 0) && (temporalOrder != TemporalRules.ORDER_FORWARD))) {
    Term interm=subject;
    subject=predicate;
    predicate=interm;
  }
  NativeOperator copula;
switch (temporalOrder) {
case TemporalRules.ORDER_BACKWARD:
    temporalOrder=TemporalRules.ORDER_FORWARD;
case TemporalRules.ORDER_FORWARD:
  copula=NativeOperator.EQUIVALENCE_AFTER;
break;
case TemporalRules.ORDER_CONCURRENT:
copula=NativeOperator.EQUIVALENCE_WHEN;
break;
default :
copula=NativeOperator.EQUIVALENCE;
}
Term[] t;
if (temporalOrder == TemporalRules.ORDER_FORWARD) t=new Term[]{subject,predicate};
 else t=Term.toSortedSetArray(subject,predicate);
if (t.length != 2) return null;
return new Equivalence(t,temporalOrder);
}",0.9590747330960854
166705,"/** 
 * Inference between a compound term and a statement
 * @param compound The compound term
 * @param index The location of the current term in the compound
 * @param statement The statement
 * @param side The location of the current term in the statement
 * @param beliefTerm The content of the belief
 * @param nal Reference to the memory
 */
private static void compoundAndStatement(CompoundTerm compound,short index,Statement statement,short side,Term beliefTerm,NAL nal){
  if (index > compound.term.length) {
    return;
  }
  Term component=compound.term[index];
  Task task=nal.getCurrentTask();
  if (component.getClass() == statement.getClass()) {
    if ((compound instanceof Conjunction) && (nal.getCurrentBelief() != null)) {
      Term[] u=new Term[]{compound,statement};
      if (Variables.unify(VAR_DEPENDENT,component,statement,u)) {
        compound=(CompoundTerm)u[0];
        statement=(Statement)u[1];
        SyllogisticRules.elimiVarDep(compound,component,statement.equals(beliefTerm),nal);
      }
 else       if (task.sentence.isJudgment()) {
        CompositionalRules.introVarInner(statement,(Statement)component,compound,nal);
      }
 else       if (Variables.unify(VAR_QUERY,component,statement,u)) {
        compound=(CompoundTerm)u[0];
        statement=(Statement)u[1];
        CompositionalRules.decomposeStatement(compound,component,true,index,nal);
      }
    }
  }
 else {
    if (task.sentence.isJudgment()) {
      if (statement instanceof Inheritance) {
        StructuralRules.structuralCompose1(compound,index,statement,nal);
        if (!(compound instanceof SetExt || compound instanceof SetInt || compound instanceof Negation)) {
          StructuralRules.structuralCompose2(compound,index,statement,side,nal);
        }
      }
 else       if ((statement instanceof Similarity) && !(compound instanceof Conjunction)) {
        StructuralRules.structuralCompose2(compound,index,statement,side,nal);
      }
    }
  }
}","/** 
 * Inference between a compound term and a statement
 * @param compound The compound term
 * @param index The location of the current term in the compound
 * @param statement The statement
 * @param side The location of the current term in the statement
 * @param beliefTerm The content of the belief
 * @param nal Reference to the memory
 */
private static void compoundAndStatement(CompoundTerm compound,short index,Statement statement,short side,Term beliefTerm,NAL nal){
  if (index >= compound.term.length) {
    return;
  }
  Term component=compound.term[index];
  Task task=nal.getCurrentTask();
  if (component.getClass() == statement.getClass()) {
    if ((compound instanceof Conjunction) && (nal.getCurrentBelief() != null)) {
      Term[] u=new Term[]{compound,statement};
      if (Variables.unify(VAR_DEPENDENT,component,statement,u)) {
        compound=(CompoundTerm)u[0];
        statement=(Statement)u[1];
        SyllogisticRules.elimiVarDep(compound,component,statement.equals(beliefTerm),nal);
      }
 else       if (task.sentence.isJudgment()) {
        CompositionalRules.introVarInner(statement,(Statement)component,compound,nal);
      }
 else       if (Variables.unify(VAR_QUERY,component,statement,u)) {
        compound=(CompoundTerm)u[0];
        statement=(Statement)u[1];
        CompositionalRules.decomposeStatement(compound,component,true,index,nal);
      }
    }
  }
 else {
    if (task.sentence.isJudgment()) {
      if (statement instanceof Inheritance) {
        StructuralRules.structuralCompose1(compound,index,statement,nal);
        if (!(compound instanceof SetExt || compound instanceof SetInt || compound instanceof Negation)) {
          StructuralRules.structuralCompose2(compound,index,statement,side,nal);
        }
      }
 else       if ((statement instanceof Similarity) && !(compound instanceof Conjunction)) {
        StructuralRules.structuralCompose2(compound,index,statement,side,nal);
      }
    }
  }
}",0.9997459994919988
166706,"public TestChamber(NAR nar,boolean showWindow){
  super();
  int w=50;
  int h=50;
  int water_threshold=30;
  Hauto cells=new Hauto(w,h,nar);
  cells.forEach(0,0,w,h,new CellFunction(){
    @Override public void update(    Cell c){
      float smoothness=20f;
      c.material=Material.GrassFloor;
      double n=SimplexNoise.noise(c.state.x / smoothness,c.state.y / smoothness);
      if ((n * 64) > water_threshold) {
        c.material=Material.Water;
      }
      c.setHeight((int)(Math.random() * 24 + 1));
    }
  }
);
  Maze.buildMaze(cells,3,3,23,23);
  space=new Grid2DSpace(cells,nar);
  space.FrameRate=0;
  space.automataPeriod=automataPeriod / gridUpdatePeriod;
  space.agentPeriod=agentPeriod / gridUpdatePeriod;
  TestChamber into=this;
  nar.memory.event.on(Events.FrameEnd.class,new EventObserver(){
    private long lastDrawn=0;
    @Override public void event(    Class event,    Object... arguments){
      if (nar.time() % gridUpdatePeriod == 0) {
        space.update(into);
        long now=System.nanoTime();
        if (now - lastDrawn > guiUpdateTime * 1e6) {
          space.redraw();
          lastDrawn=now;
        }
      }
    }
  }
);
  if (showWindow)   space.newWindow(1000,800,true);
  cells.forEach(16,16,18,18,new Hauto.SetMaterial(Material.DirtFloor));
  GridAgent a=new GridAgent(17,17,nar){
    @Override public void update(    Effect nextEffect){
      if (active) {
        executed=false;
        if (path == null || path.size() <= 0 && !executed_going) {
          for (int i=0; i < 5; i++) {
            if (executed) {
              break;
            }
          }
        }
        if (needpizza) {
          hungry--;
          if (hungry < 0) {
            hungry=250;
            nar.addInput(""String_Node_Str"");
          }
        }
      }
      lasttarget=space.target;
      space.current=new PVector(x,y);
      if (nextEffect == null) {
        path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
        actions.clear();
        if (path == null) {
          executed_going=false;
        }
        if (path != null) {
          if (inventorybag != null) {
            inventorybag.x=(int)space.current.x;
            inventorybag.y=(int)space.current.y;
            inventorybag.cx=(int)space.current.x;
            inventorybag.cy=(int)space.current.y;
          }
          if (inventorybag == null || !(inventorybag instanceof Key)) {
            keyn=-1;
          }
          if (path.size() <= 1) {
            active=true;
            executed_going=false;
            if (!""String_Node_Str"".equals(goal) && space.current.equals(space.target)) {
              GridObject obi=null;
              if (!""String_Node_Str"".equals(opname)) {
                for (                GridObject gridi : space.objects) {
                  if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                    obi=gridi;
                    break;
                  }
                }
              }
              if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
                if (""String_Node_Str"".equals(opname)) {
                  if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                    LocalGridObject ob=(LocalGridObject)inventorybag;
                    ob.x=(int)space.current.x;
                    ob.y=(int)space.current.y;
                    space.objects.add(ob);
                  }
                  inventorybag=(LocalGridObject)obi;
                  if (obi != null) {
                    space.objects.remove(obi);
                    if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                      keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
                      for (int i=0; i < cells.h; i++) {
                        for (int j=0; j < cells.w; j++) {
                          if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                            cells.readCells[i][j].is_solid=false;
                            cells.writeCells[i][j].is_solid=false;
                          }
                        }
                      }
                    }
                  }
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.SWITCH) {
                          cells.readCells[i][j].logic=Logic.OFFSWITCH;
                          cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                          cells.readCells[i][j].charge=0.0f;
                          cells.writeCells[i][j].charge=0.0f;
                          if (ComplexFeedback)                           nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                          cells.readCells[i][j].logic=Logic.SWITCH;
                          cells.writeCells[i][j].logic=Logic.SWITCH;
                          cells.readCells[i][j].charge=1.0f;
                          cells.writeCells[i][j].charge=1.0f;
                          if (ComplexFeedback)                           nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
                if (""String_Node_Str"".equals(opname)) {
                  executed_going=false;
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  if (goal.startsWith(""String_Node_Str"")) {
                    GridObject ToRemove=null;
                    for (                    GridObject obj : space.objects) {
                      if (obj instanceof LocalGridObject) {
                        LocalGridObject obo=(LocalGridObject)obj;
                        if (obo.doorname.equals(goal)) {
                          ToRemove=obj;
                        }
                      }
                    }
                    if (ToRemove != null) {
                      space.objects.remove(ToRemove);
                    }
                    hungry=500;
                    nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  }
                  active=true;
                }
              }
            }
            opname=""String_Node_Str"";
            nar.memory.setEnabled(true);
          }
 else {
            executed_going=true;
            active=false;
            int numSteps=Math.min(10,path.size());
            float cx=x;
            float cy=y;
            for (int i=1; i < numSteps; i++) {
              PVector next=path.get(i);
              int dx=(int)(next.x - cx);
              int dy=(int)(next.y - cy);
              if ((dx == 0) && (dy == 1)) {
                turn(UP);
                forward(1);
              }
              if ((dx == 1) && (dy == 0)) {
                turn(RIGHT);
                forward(1);
              }
              if ((dx == -1) && (dy == 0)) {
                turn(LEFT);
                forward(1);
              }
              if ((dx == 0) && (dy == -1)) {
                turn(DOWN);
                forward(1);
              }
              cx=next.x;
              cy=next.y;
            }
          }
        }
      }
    }
  }
;
  Goto wu=new Goto(this,""String_Node_Str"");
  nar.memory.addOperator(wu);
  Pick wa=new Pick(this,""String_Node_Str"");
  nar.memory.addOperator(wa);
  Activate waa=new Activate(this,""String_Node_Str"");
  nar.memory.addOperator(waa);
  Deactivate waaa=new Deactivate(this,""String_Node_Str"");
  nar.memory.addOperator(waaa);
  space.add(a);
}","public TestChamber(NAR nar,boolean showWindow){
  super();
  int w=50;
  int h=50;
  int water_threshold=30;
  Hauto cells=new Hauto(w,h,nar);
  cells.forEach(0,0,w,h,new CellFunction(){
    @Override public void update(    Cell c){
      float smoothness=20f;
      c.material=Material.GrassFloor;
      double n=SimplexNoise.noise(c.state.x / smoothness,c.state.y / smoothness);
      if ((n * 64) > water_threshold) {
        c.material=Material.Water;
      }
      c.setHeight((int)(Math.random() * 24 + 1));
    }
  }
);
  Maze.buildMaze(cells,3,3,23,23);
  space=new Grid2DSpace(cells,nar);
  space.FrameRate=0;
  space.automataPeriod=automataPeriod / gridUpdatePeriod;
  space.agentPeriod=agentPeriod / gridUpdatePeriod;
  TestChamber into=this;
  nar.memory.event.on(Events.FrameEnd.class,new EventObserver(){
    private long lastDrawn=0;
    @Override public void event(    Class event,    Object... arguments){
      if (nar.time() % gridUpdatePeriod == 0) {
        space.update(into);
        long now=System.nanoTime();
        if (now - lastDrawn > guiUpdateTime * 1e6) {
          space.redraw();
          lastDrawn=now;
        }
      }
    }
  }
);
  if (showWindow)   space.newWindow(1000,800,true);
  cells.forEach(16,16,18,18,new Hauto.SetMaterial(Material.DirtFloor));
  GridAgent a=new GridAgent(17,17,nar){
    @Override public void update(    Effect nextEffect){
      if (active) {
        executed=false;
        if (path == null || path.size() <= 0 && !executed_going) {
          for (int i=0; i < 5; i++) {
            if (executed) {
              break;
            }
          }
        }
        if (needpizza) {
          hungry--;
          if (hungry < 0) {
            hungry=250;
            nar.addInput(""String_Node_Str"");
          }
        }
      }
      lasttarget=space.target;
      space.current=new PVector(x,y);
      if (nextEffect == null) {
        path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
        actions.clear();
        if (path == null) {
          executed_going=false;
        }
{
          if (inventorybag != null) {
            inventorybag.x=(int)space.current.x;
            inventorybag.y=(int)space.current.y;
            inventorybag.cx=(int)space.current.x;
            inventorybag.cy=(int)space.current.y;
          }
          if (inventorybag == null || !(inventorybag instanceof Key)) {
            keyn=-1;
          }
          if (path == null || path.size() <= 1) {
            space.target=null;
            active=true;
            executed_going=false;
            if (!""String_Node_Str"".equals(goal)) {
              GridObject obi=null;
              if (!""String_Node_Str"".equals(opname)) {
                for (                GridObject gridi : space.objects) {
                  if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                    obi=gridi;
                    break;
                  }
                }
              }
              if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
                if (""String_Node_Str"".equals(opname)) {
                  if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                    LocalGridObject ob=(LocalGridObject)inventorybag;
                    ob.x=(int)space.current.x;
                    ob.y=(int)space.current.y;
                    space.objects.add(ob);
                  }
                  inventorybag=(LocalGridObject)obi;
                  if (obi != null) {
                    space.objects.remove(obi);
                    if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                      keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
                      for (int i=0; i < cells.h; i++) {
                        for (int j=0; j < cells.w; j++) {
                          if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                            cells.readCells[i][j].is_solid=false;
                            cells.writeCells[i][j].is_solid=false;
                          }
                        }
                      }
                    }
                  }
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.SWITCH) {
                          cells.readCells[i][j].logic=Logic.OFFSWITCH;
                          cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                          cells.readCells[i][j].charge=0.0f;
                          cells.writeCells[i][j].charge=0.0f;
                          if (ComplexFeedback)                           nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                          cells.readCells[i][j].logic=Logic.SWITCH;
                          cells.writeCells[i][j].logic=Logic.SWITCH;
                          cells.readCells[i][j].charge=1.0f;
                          cells.writeCells[i][j].charge=1.0f;
                          if (ComplexFeedback)                           nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
                if (""String_Node_Str"".equals(opname)) {
                  executed_going=false;
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  if (goal.startsWith(""String_Node_Str"")) {
                    GridObject ToRemove=null;
                    for (                    GridObject obj : space.objects) {
                      if (obj instanceof LocalGridObject) {
                        LocalGridObject obo=(LocalGridObject)obj;
                        if (obo.doorname.equals(goal)) {
                          ToRemove=obj;
                        }
                      }
                    }
                    if (ToRemove != null) {
                      space.objects.remove(ToRemove);
                    }
                    hungry=500;
                    nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  }
                  active=true;
                }
              }
            }
            opname=""String_Node_Str"";
            nar.memory.setEnabled(true);
          }
 else {
            executed_going=true;
            active=false;
            int numSteps=Math.min(10,path.size());
            float cx=x;
            float cy=y;
            for (int i=1; i < numSteps; i++) {
              PVector next=path.get(i);
              int dx=(int)(next.x - cx);
              int dy=(int)(next.y - cy);
              if ((dx == 0) && (dy == 1)) {
                turn(UP);
                forward(1);
              }
              if ((dx == 1) && (dy == 0)) {
                turn(RIGHT);
                forward(1);
              }
              if ((dx == -1) && (dy == 0)) {
                turn(LEFT);
                forward(1);
              }
              if ((dx == 0) && (dy == -1)) {
                turn(DOWN);
                forward(1);
              }
              cx=next.x;
              cy=next.y;
            }
          }
        }
      }
    }
  }
;
  Goto wu=new Goto(this,""String_Node_Str"");
  nar.memory.addOperator(wu);
  Pick wa=new Pick(this,""String_Node_Str"");
  nar.memory.addOperator(wa);
  Activate waa=new Activate(this,""String_Node_Str"");
  nar.memory.addOperator(waa);
  Deactivate waaa=new Deactivate(this,""String_Node_Str"");
  nar.memory.addOperator(waaa);
  space.add(a);
}",0.9934931707603024
166707,"@Override public void update(Effect nextEffect){
  if (active) {
    executed=false;
    if (path == null || path.size() <= 0 && !executed_going) {
      for (int i=0; i < 5; i++) {
        if (executed) {
          break;
        }
      }
    }
    if (needpizza) {
      hungry--;
      if (hungry < 0) {
        hungry=250;
        nar.addInput(""String_Node_Str"");
      }
    }
  }
  lasttarget=space.target;
  space.current=new PVector(x,y);
  if (nextEffect == null) {
    path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
    actions.clear();
    if (path == null) {
      executed_going=false;
    }
    if (path != null) {
      if (inventorybag != null) {
        inventorybag.x=(int)space.current.x;
        inventorybag.y=(int)space.current.y;
        inventorybag.cx=(int)space.current.x;
        inventorybag.cy=(int)space.current.y;
      }
      if (inventorybag == null || !(inventorybag instanceof Key)) {
        keyn=-1;
      }
      if (path.size() <= 1) {
        active=true;
        executed_going=false;
        if (!""String_Node_Str"".equals(goal) && space.current.equals(space.target)) {
          GridObject obi=null;
          if (!""String_Node_Str"".equals(opname)) {
            for (            GridObject gridi : space.objects) {
              if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                obi=gridi;
                break;
              }
            }
          }
          if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
            if (""String_Node_Str"".equals(opname)) {
              if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                LocalGridObject ob=(LocalGridObject)inventorybag;
                ob.x=(int)space.current.x;
                ob.y=(int)space.current.y;
                space.objects.add(ob);
              }
              inventorybag=(LocalGridObject)obi;
              if (obi != null) {
                space.objects.remove(obi);
                if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                  keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                        cells.readCells[i][j].is_solid=false;
                        cells.writeCells[i][j].is_solid=false;
                      }
                    }
                  }
                }
              }
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.SWITCH) {
                      cells.readCells[i][j].logic=Logic.OFFSWITCH;
                      cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                      cells.readCells[i][j].charge=0.0f;
                      cells.writeCells[i][j].charge=0.0f;
                      if (ComplexFeedback)                       nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                      cells.readCells[i][j].logic=Logic.SWITCH;
                      cells.writeCells[i][j].logic=Logic.SWITCH;
                      cells.readCells[i][j].charge=1.0f;
                      cells.writeCells[i][j].charge=1.0f;
                      if (ComplexFeedback)                       nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
            if (""String_Node_Str"".equals(opname)) {
              executed_going=false;
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              if (goal.startsWith(""String_Node_Str"")) {
                GridObject ToRemove=null;
                for (                GridObject obj : space.objects) {
                  if (obj instanceof LocalGridObject) {
                    LocalGridObject obo=(LocalGridObject)obj;
                    if (obo.doorname.equals(goal)) {
                      ToRemove=obj;
                    }
                  }
                }
                if (ToRemove != null) {
                  space.objects.remove(ToRemove);
                }
                hungry=500;
                nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              }
              active=true;
            }
          }
        }
        opname=""String_Node_Str"";
        nar.memory.setEnabled(true);
      }
 else {
        executed_going=true;
        active=false;
        int numSteps=Math.min(10,path.size());
        float cx=x;
        float cy=y;
        for (int i=1; i < numSteps; i++) {
          PVector next=path.get(i);
          int dx=(int)(next.x - cx);
          int dy=(int)(next.y - cy);
          if ((dx == 0) && (dy == 1)) {
            turn(UP);
            forward(1);
          }
          if ((dx == 1) && (dy == 0)) {
            turn(RIGHT);
            forward(1);
          }
          if ((dx == -1) && (dy == 0)) {
            turn(LEFT);
            forward(1);
          }
          if ((dx == 0) && (dy == -1)) {
            turn(DOWN);
            forward(1);
          }
          cx=next.x;
          cy=next.y;
        }
      }
    }
  }
}","@Override public void update(Effect nextEffect){
  if (active) {
    executed=false;
    if (path == null || path.size() <= 0 && !executed_going) {
      for (int i=0; i < 5; i++) {
        if (executed) {
          break;
        }
      }
    }
    if (needpizza) {
      hungry--;
      if (hungry < 0) {
        hungry=250;
        nar.addInput(""String_Node_Str"");
      }
    }
  }
  lasttarget=space.target;
  space.current=new PVector(x,y);
  if (nextEffect == null) {
    path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
    actions.clear();
    if (path == null) {
      executed_going=false;
    }
{
      if (inventorybag != null) {
        inventorybag.x=(int)space.current.x;
        inventorybag.y=(int)space.current.y;
        inventorybag.cx=(int)space.current.x;
        inventorybag.cy=(int)space.current.y;
      }
      if (inventorybag == null || !(inventorybag instanceof Key)) {
        keyn=-1;
      }
      if (path == null || path.size() <= 1) {
        space.target=null;
        active=true;
        executed_going=false;
        if (!""String_Node_Str"".equals(goal)) {
          GridObject obi=null;
          if (!""String_Node_Str"".equals(opname)) {
            for (            GridObject gridi : space.objects) {
              if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                obi=gridi;
                break;
              }
            }
          }
          if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
            if (""String_Node_Str"".equals(opname)) {
              if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                LocalGridObject ob=(LocalGridObject)inventorybag;
                ob.x=(int)space.current.x;
                ob.y=(int)space.current.y;
                space.objects.add(ob);
              }
              inventorybag=(LocalGridObject)obi;
              if (obi != null) {
                space.objects.remove(obi);
                if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                  keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                        cells.readCells[i][j].is_solid=false;
                        cells.writeCells[i][j].is_solid=false;
                      }
                    }
                  }
                }
              }
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.SWITCH) {
                      cells.readCells[i][j].logic=Logic.OFFSWITCH;
                      cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                      cells.readCells[i][j].charge=0.0f;
                      cells.writeCells[i][j].charge=0.0f;
                      if (ComplexFeedback)                       nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                      cells.readCells[i][j].logic=Logic.SWITCH;
                      cells.writeCells[i][j].logic=Logic.SWITCH;
                      cells.readCells[i][j].charge=1.0f;
                      cells.writeCells[i][j].charge=1.0f;
                      if (ComplexFeedback)                       nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
            if (""String_Node_Str"".equals(opname)) {
              executed_going=false;
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              if (goal.startsWith(""String_Node_Str"")) {
                GridObject ToRemove=null;
                for (                GridObject obj : space.objects) {
                  if (obj instanceof LocalGridObject) {
                    LocalGridObject obo=(LocalGridObject)obj;
                    if (obo.doorname.equals(goal)) {
                      ToRemove=obj;
                    }
                  }
                }
                if (ToRemove != null) {
                  space.objects.remove(ToRemove);
                }
                hungry=500;
                nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              }
              active=true;
            }
          }
        }
        opname=""String_Node_Str"";
        nar.memory.setEnabled(true);
      }
 else {
        executed_going=true;
        active=false;
        int numSteps=Math.min(10,path.size());
        float cx=x;
        float cy=y;
        for (int i=1; i < numSteps; i++) {
          PVector next=path.get(i);
          int dx=(int)(next.x - cx);
          int dy=(int)(next.y - cy);
          if ((dx == 0) && (dy == 1)) {
            turn(UP);
            forward(1);
          }
          if ((dx == 1) && (dy == 0)) {
            turn(RIGHT);
            forward(1);
          }
          if ((dx == -1) && (dy == 0)) {
            turn(LEFT);
            forward(1);
          }
          if ((dx == 0) && (dy == -1)) {
            turn(DOWN);
            forward(1);
          }
          cx=next.x;
          cy=next.y;
        }
      }
    }
  }
}",0.9916686888295722
166708,"public ConsolePanel(NARControls narControls){
  super(JSplitPane.VERTICAL_SPLIT);
  LogPanel outputLog=new SwingLogPanel(narControls);
  add(outputLog,0);
  TextInputPanel inputPanel=new TextInputPanel(narControls.nar);
  add(inputPanel,1);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException ex) {
        Logger.getLogger(ConsolePanel.class.getName()).log(Level.SEVERE,null,ex);
      }
      setDividerLocation(0.75);
    }
  }
);
  setDividerLocation(0.75);
}","public ConsolePanel(NARControls narControls){
  super(JSplitPane.VERTICAL_SPLIT);
  LogPanel outputLog=new SwingLogPanel(narControls);
  add(outputLog,0);
  TextInputPanel inputPanel=new TextInputPanel(narControls.nar);
  add(inputPanel,1);
}",0.5960591133004927
166709,"public void ExecutionFunction(int t,int i,int j,Cell w,Cell r,Cell left,Cell right,Cell up,Cell down,Cell left_up,Cell left_down,Cell right_up,Cell right_down,Cell[][] readcells){
  w.charge=r.charge;
  w.value=r.value;
  w.value2=r.value2;
  w.is_solid=r.is_solid;
  w.chargeFront=false;
  if ((r.machine == Machine.Light || r.machine == Machine.Turret) && r.charge == 1) {
    if (r.light != 1.0f) {
      boolean nope=false;
      if (r.machine == Machine.Turret) {
        for (        GridObject gr : TestChamber.space.objects) {
          if (gr instanceof LocalGridObject) {
            LocalGridObject o=(LocalGridObject)gr;
            if (o.x == i && o.y == j) {
              nope=true;
            }
          }
        }
        if (!nope) {
          TestChamber.space.add(new Pizza((int)i,(int)j,""String_Node_Str"" + entityID.toString()));
          if (TestChamber.staticInformation)           nar.addInput(""String_Node_Str"" + entityID.toString() + ""String_Node_Str"");
          entityID++;
        }
      }
      nar.addInput(""String_Node_Str"" + r.name + ""String_Node_Str"");
    }
    w.light=1.0f;
  }
 else {
    w.light=NeighborsValue2(""String_Node_Str"",i,j,readcells,""String_Node_Str"",(r.is_solid || r.material == Material.StoneWall) ? 1 : 0) / 1.1f;
  }
  if (r.material == Material.Door) {
    if (NeighborsValue2(""String_Node_Str"",i,j,readcells,""String_Node_Str"",1.0f) != 0) {
      w.is_solid=false;
      if (r.is_solid) {
        nar.addInput(""String_Node_Str"" + r.name + ""String_Node_Str"");
      }
    }
 else {
      if (!r.is_solid && TestChamber.keyn != doornumber(r)) {
        w.is_solid=true;
        nar.addInput(""String_Node_Str"" + r.name + ""String_Node_Str"");
      }
    }
  }
  if (r.logic == WIRE) {
    if (!r.chargeFront && r.charge == 0.0 && NeighborsValue2(""String_Node_Str"",i,j,readcells,""String_Node_Str"",1.0f) != 0) {
      w.charge=1.0f;
      w.chargeFront=true;
    }
    if (!r.chargeFront && r.charge == 1.0 && NeighborsValue2(""String_Node_Str"",i,j,readcells,""String_Node_Str"",0.0f) != 0) {
      w.charge=0.0f;
      w.chargeFront=true;
    }
    if (r.chargeFront == false && r.charge == 0 && (up.logic == SWITCH || down.logic == SWITCH || (left.logic == SWITCH || (is_logic(left) && left.value == 1)) || (right.logic == SWITCH || (is_logic(right) && right.value == 1)))) {
      w.charge=1.0f;
      w.chargeFront=true;
    }
    if (r.chargeFront == false && r.charge == 1 && (up.logic == OFFSWITCH || down.logic == OFFSWITCH || (left.logic == OFFSWITCH || (is_logic(left) && left.value == 0)) || (right.logic == OFFSWITCH || (is_logic(right) && right.value == 0)))) {
      w.charge=0.0f;
      w.chargeFront=true;
    }
  }
  if (r.logic == Cell.Logic.NOT && (up.charge == 0 || up.charge == 1))   w.value=(up.charge == 0 ? 1 : 0);
  if (r.logic == Cell.Logic.NOT && (down.charge == 0 || down.charge == 1))   w.value=(down.charge == 0 ? 1 : 0);
  if (r.logic == Cell.Logic.AND)   w.value=(up.charge == 1 && down.charge == 1) ? 1.0f : 0.0f;
  if (r.logic == Cell.Logic.OR)   w.value=(up.charge == 1 || down.charge == 1) ? 1.0f : 0.0f;
  if (r.logic == Cell.Logic.XOR)   w.value=(up.charge == 1 ^ down.charge == 1) ? 1.0f : 0.0f;
  if (r.logic == BRIDGE) {
    if (left.chargeFront && left.logic == WIRE)     w.value=left.charge;
 else     if (right.chargeFront && right.logic == WIRE)     w.value=right.charge;
    if (up.chargeFront && up.logic == WIRE)     w.value2=up.charge;
 else     if (down.chargeFront && down.logic == WIRE)     w.value2=down.charge;
  }
  if (!r.chargeFront && r.charge == 0 && (((right.logic == BRIDGE && right.value == 1) || (left.logic == BRIDGE && left.value == 1)) || ((down.logic == BRIDGE && down.value2 == 1) || (up.logic == BRIDGE && up.value2 == 1)))) {
    w.charge=1;
    w.chargeFront=true;
  }
  if (!r.chargeFront && r.charge == 1 && (((right.logic == BRIDGE && right.value == 0) || (left.logic == BRIDGE && left.value == 0)) || ((down.logic == BRIDGE && down.value2 == 0) || (up.logic == BRIDGE && up.value2 == 0)))) {
    w.charge=0;
    w.chargeFront=true;
  }
  if (r.logic == Cell.Logic.Load) {
    w.charge=Math.max(up.charge,Math.max(down.charge,Math.max(left.charge,right.charge)));
    w.chargeFront=false;
  }
  if (r.machine == Machine.Light || r.machine == Machine.Turret) {
    if (r.light == 1.0f && w.light != 1.0f) {
      nar.addInput(""String_Node_Str"" + r.name + ""String_Node_Str"");
    }
  }
}","public void ExecutionFunction(int t,int i,int j,Cell w,Cell r,Cell left,Cell right,Cell up,Cell down,Cell left_up,Cell left_down,Cell right_up,Cell right_down,Cell[][] readcells){
  w.charge=r.charge;
  w.value=r.value;
  w.value2=r.value2;
  w.is_solid=r.is_solid;
  w.chargeFront=false;
  if ((r.machine == Machine.Light || r.machine == Machine.Turret) && r.charge == 1) {
    if (r.light != 1.0f) {
      boolean nope=false;
      if (r.machine == Machine.Turret) {
        for (        GridObject gr : TestChamber.space.objects) {
          if (gr instanceof LocalGridObject) {
            LocalGridObject o=(LocalGridObject)gr;
            if (o.x == i && o.y == j) {
              nope=true;
            }
          }
        }
        if (!nope) {
          TestChamber.space.add(new Pizza((int)i,(int)j,""String_Node_Str"" + entityID.toString() + ""String_Node_Str""));
          if (TestChamber.staticInformation)           nar.addInput(""String_Node_Str"" + entityID.toString() + ""String_Node_Str"");
          entityID++;
        }
      }
      nar.addInput(""String_Node_Str"" + r.name + ""String_Node_Str"");
    }
    w.light=1.0f;
  }
 else {
    w.light=NeighborsValue2(""String_Node_Str"",i,j,readcells,""String_Node_Str"",(r.is_solid || r.material == Material.StoneWall) ? 1 : 0) / 1.1f;
  }
  if (r.material == Material.Door) {
    if (NeighborsValue2(""String_Node_Str"",i,j,readcells,""String_Node_Str"",1.0f) != 0) {
      w.is_solid=false;
      if (r.is_solid) {
        nar.addInput(""String_Node_Str"" + r.name + ""String_Node_Str"");
      }
    }
 else {
      if (!r.is_solid && TestChamber.keyn != doornumber(r)) {
        w.is_solid=true;
        nar.addInput(""String_Node_Str"" + r.name + ""String_Node_Str"");
      }
    }
  }
  if (r.logic == WIRE) {
    if (!r.chargeFront && r.charge == 0.0 && NeighborsValue2(""String_Node_Str"",i,j,readcells,""String_Node_Str"",1.0f) != 0) {
      w.charge=1.0f;
      w.chargeFront=true;
    }
    if (!r.chargeFront && r.charge == 1.0 && NeighborsValue2(""String_Node_Str"",i,j,readcells,""String_Node_Str"",0.0f) != 0) {
      w.charge=0.0f;
      w.chargeFront=true;
    }
    if (r.chargeFront == false && r.charge == 0 && (up.logic == SWITCH || down.logic == SWITCH || (left.logic == SWITCH || (is_logic(left) && left.value == 1)) || (right.logic == SWITCH || (is_logic(right) && right.value == 1)))) {
      w.charge=1.0f;
      w.chargeFront=true;
    }
    if (r.chargeFront == false && r.charge == 1 && (up.logic == OFFSWITCH || down.logic == OFFSWITCH || (left.logic == OFFSWITCH || (is_logic(left) && left.value == 0)) || (right.logic == OFFSWITCH || (is_logic(right) && right.value == 0)))) {
      w.charge=0.0f;
      w.chargeFront=true;
    }
  }
  if (r.logic == Cell.Logic.NOT && (up.charge == 0 || up.charge == 1))   w.value=(up.charge == 0 ? 1 : 0);
  if (r.logic == Cell.Logic.NOT && (down.charge == 0 || down.charge == 1))   w.value=(down.charge == 0 ? 1 : 0);
  if (r.logic == Cell.Logic.AND)   w.value=(up.charge == 1 && down.charge == 1) ? 1.0f : 0.0f;
  if (r.logic == Cell.Logic.OR)   w.value=(up.charge == 1 || down.charge == 1) ? 1.0f : 0.0f;
  if (r.logic == Cell.Logic.XOR)   w.value=(up.charge == 1 ^ down.charge == 1) ? 1.0f : 0.0f;
  if (r.logic == BRIDGE) {
    if (left.chargeFront && left.logic == WIRE)     w.value=left.charge;
 else     if (right.chargeFront && right.logic == WIRE)     w.value=right.charge;
    if (up.chargeFront && up.logic == WIRE)     w.value2=up.charge;
 else     if (down.chargeFront && down.logic == WIRE)     w.value2=down.charge;
  }
  if (!r.chargeFront && r.charge == 0 && (((right.logic == BRIDGE && right.value == 1) || (left.logic == BRIDGE && left.value == 1)) || ((down.logic == BRIDGE && down.value2 == 1) || (up.logic == BRIDGE && up.value2 == 1)))) {
    w.charge=1;
    w.chargeFront=true;
  }
  if (!r.chargeFront && r.charge == 1 && (((right.logic == BRIDGE && right.value == 0) || (left.logic == BRIDGE && left.value == 0)) || ((down.logic == BRIDGE && down.value2 == 0) || (up.logic == BRIDGE && up.value2 == 0)))) {
    w.charge=0;
    w.chargeFront=true;
  }
  if (r.logic == Cell.Logic.Load) {
    w.charge=Math.max(up.charge,Math.max(down.charge,Math.max(left.charge,right.charge)));
    w.chargeFront=false;
  }
  if (r.machine == Machine.Light || r.machine == Machine.Turret) {
    if (r.light == 1.0f && w.light != 1.0f) {
      nar.addInput(""String_Node_Str"" + r.name + ""String_Node_Str"");
    }
  }
}",0.997737556561086
166710,"public void clicked(int x,int y,Grid2DSpace space){
  if ((int)x == 0 || (int)y == 0 || (int)x == w - 1 || (int)y == h - 1)   return;
  if (!doorname.equals(""String_Node_Str"") && !doorname.contains(""String_Node_Str"")) {
    doorname=""String_Node_Str"" + doorname + ""String_Node_Str"";
  }
  if (oper.equals(""String_Node_Str"")) {
    readCells[(int)x][(int)y].name=""String_Node_Str"" + entityID.toString();
    writeCells[(int)x][(int)y].name=""String_Node_Str"" + entityID.toString();
    if (TestChamber.staticInformation)     nar.addInput(""String_Node_Str"" + ""String_Node_Str"" + entityID.toString() + ""String_Node_Str"");
    if (TestChamber.curiousity) {
      space.nar.addInput(""String_Node_Str"" + ""String_Node_Str"" + entityID.toString() + ""String_Node_Str"");
    }
    entityID++;
    return;
  }
  if (!""String_Node_Str"".equals(oper)) {
    if (!""String_Node_Str"".equals(readCells[x][y].name) && !""String_Node_Str"".equals(oper)) {
      if (allow_imitating) {
        nar.addInput(""String_Node_Str"" + oper + ""String_Node_Str""+ readCells[x][y].name+ ""String_Node_Str"");
      }
 else {
        nar.addInput(""String_Node_Str"" + oper + ""String_Node_Str""+ readCells[x][y].name+ ""String_Node_Str"");
        TestChamber.operateObj(readCells[x][y].name,oper);
      }
    }
    String s=TestChamber.getobj(x,y);
    if (!s.equals(""String_Node_Str"")) {
      if (allow_imitating) {
        nar.addInput(""String_Node_Str"" + oper + ""String_Node_Str""+ s+ ""String_Node_Str"");
      }
 else {
        nar.addInput(""String_Node_Str"" + oper + ""String_Node_Str""+ s+ ""String_Node_Str"");
        TestChamber.operateObj(s,oper);
      }
    }
    return;
  }
  if (!""String_Node_Str"".equals(wish)) {
    boolean inverse=false;
    if (wish.equals(""String_Node_Str"") || wish.equals(""String_Node_Str"")) {
      inverse=true;
    }
    String wishreal=wish.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    if (!""String_Node_Str"".equals(readCells[x][y].name)) {
      if (!inverse) {
        nar.addInput(""String_Node_Str"" + readCells[x][y].name + ""String_Node_Str""+ wishreal+ ""String_Node_Str"");
      }
 else {
        nar.addInput(""String_Node_Str"" + readCells[x][y].name + ""String_Node_Str""+ wishreal+ ""String_Node_Str"");
      }
    }
    String s=TestChamber.getobj(x,y);
    if (!s.equals(""String_Node_Str"")) {
      if (!inverse) {
        nar.addInput(""String_Node_Str"" + s + ""String_Node_Str""+ wishreal+ ""String_Node_Str"");
      }
 else {
        nar.addInput(""String_Node_Str"" + s + ""String_Node_Str""+ wishreal+ ""String_Node_Str"");
      }
    }
    return;
  }
  if (!""String_Node_Str"".equals(doorname) && selected.material == Material.Door) {
    space.add(new Key((int)x,(int)y,doorname.replace(""String_Node_Str"",""String_Node_Str"")));
    if (TestChamber.staticInformation)     nar.addInput(""String_Node_Str"" + doorname.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    if (TestChamber.curiousity) {
      space.nar.addInput(""String_Node_Str"" + doorname.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      space.nar.addInput(""String_Node_Str"" + doorname.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    }
    doorname=""String_Node_Str"";
    return;
  }
  if (selected.material == Material.Pizza) {
    doorname+=""String_Node_Str"" + entityID.toString();
  }
  if (!""String_Node_Str"".equals(doorname) && selected.material == Material.Pizza) {
    space.add(new Pizza((int)x,(int)y,doorname));
    if (TestChamber.staticInformation)     nar.addInput(""String_Node_Str"" + doorname + ""String_Node_Str"");
    if (TestChamber.curiousity) {
      space.nar.addInput(""String_Node_Str"" + doorname + ""String_Node_Str"");
    }
    entityID++;
    doorname=""String_Node_Str"";
    return;
  }
  if (!(selected.material == Material.Door) && !(selected.material == Material.Pizza))   doorname=""String_Node_Str"";
  readCells[(int)x][(int)y].charge=selected.charge;
  writeCells[(int)x][(int)y].charge=selected.charge;
  readCells[(int)x][(int)y].logic=selected.logic;
  writeCells[(int)x][(int)y].logic=selected.logic;
  readCells[(int)x][(int)y].material=selected.material;
  writeCells[(int)x][(int)y].material=selected.material;
  readCells[(int)x][(int)y].machine=selected.machine;
  writeCells[(int)x][(int)y].machine=selected.machine;
  if (selected.material == Material.Pizza || selected.material == Material.Door || selected.logic == Logic.OFFSWITCH || selected.logic == Logic.SWITCH || selected.machine == Machine.Light || selected.machine == Machine.Turret) {
    String name=""String_Node_Str"";
    if (selected.material == Material.Door) {
      name=""String_Node_Str"";
    }
    if (selected.logic == Logic.SWITCH || selected.logic == Logic.OFFSWITCH)     name=""String_Node_Str"";
    if (selected.machine == Machine.Light)     name=""String_Node_Str"";
    if (selected.machine == Machine.Turret)     name=""String_Node_Str"";
    String Klass=name;
    name+=(entityID.toString());
    if (selected.material == Material.Door) {
      doorname=name;
    }
    name=""String_Node_Str"" + name + ""String_Node_Str"";
    if (readCells[(int)x][(int)y].name.equals(""String_Node_Str"")) {
      if (TestChamber.staticInformation)       nar.addInput(""String_Node_Str"" + name + ""String_Node_Str""+ Klass+ ""String_Node_Str"");
      readCells[(int)x][(int)y].name=name;
      writeCells[(int)x][(int)y].name=name;
      if (selected.logic == Logic.OFFSWITCH) {
        nar.addInput(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
        if (TestChamber.curiousity) {
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
        }
      }
      if (selected.logic == Logic.SWITCH) {
        nar.addInput(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
        if (TestChamber.curiousity) {
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
        }
      }
    }
 else {
      if (selected.logic == Logic.OFFSWITCH) {
        nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str""+ ""String_Node_Str"");
        if (TestChamber.curiousity) {
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
        }
      }
      if (selected.logic == Logic.SWITCH) {
        nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str""+ ""String_Node_Str"");
        if (TestChamber.curiousity) {
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
        }
      }
    }
    entityID++;
  }
}","public void clicked(int x,int y,Grid2DSpace space){
  if ((int)x == 0 || (int)y == 0 || (int)x == w - 1 || (int)y == h - 1)   return;
  if (!doorname.equals(""String_Node_Str"") && !doorname.contains(""String_Node_Str"")) {
    doorname=""String_Node_Str"" + doorname + ""String_Node_Str"";
  }
  if (oper.equals(""String_Node_Str"")) {
    readCells[(int)x][(int)y].name=""String_Node_Str"" + entityID.toString();
    writeCells[(int)x][(int)y].name=""String_Node_Str"" + entityID.toString();
    if (TestChamber.staticInformation)     nar.addInput(""String_Node_Str"" + ""String_Node_Str"" + entityID.toString() + ""String_Node_Str"");
    if (TestChamber.curiousity) {
      space.nar.addInput(""String_Node_Str"" + ""String_Node_Str"" + entityID.toString() + ""String_Node_Str"");
    }
    entityID++;
    return;
  }
  if (!""String_Node_Str"".equals(oper)) {
    if (!""String_Node_Str"".equals(readCells[x][y].name) && !""String_Node_Str"".equals(oper)) {
      if (allow_imitating) {
        nar.addInput(""String_Node_Str"" + oper + ""String_Node_Str""+ readCells[x][y].name+ ""String_Node_Str"");
      }
 else {
        nar.addInput(""String_Node_Str"" + oper + ""String_Node_Str""+ readCells[x][y].name+ ""String_Node_Str"");
        TestChamber.operateObj(readCells[x][y].name,oper);
      }
    }
    String s=TestChamber.getobj(x,y);
    if (!s.equals(""String_Node_Str"")) {
      if (allow_imitating) {
        nar.addInput(""String_Node_Str"" + oper + ""String_Node_Str""+ s+ ""String_Node_Str"");
      }
 else {
        nar.addInput(""String_Node_Str"" + oper + ""String_Node_Str""+ s+ ""String_Node_Str"");
        TestChamber.operateObj(s,oper);
      }
    }
    return;
  }
  if (!""String_Node_Str"".equals(wish)) {
    boolean inverse=false;
    if (wish.equals(""String_Node_Str"") || wish.equals(""String_Node_Str"")) {
      inverse=true;
    }
    String wishreal=wish.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    if (!""String_Node_Str"".equals(readCells[x][y].name)) {
      if (!inverse) {
        nar.addInput(""String_Node_Str"" + readCells[x][y].name + ""String_Node_Str""+ wishreal+ ""String_Node_Str"");
      }
 else {
        nar.addInput(""String_Node_Str"" + readCells[x][y].name + ""String_Node_Str""+ wishreal+ ""String_Node_Str"");
      }
    }
    String s=TestChamber.getobj(x,y);
    if (!s.equals(""String_Node_Str"")) {
      if (!inverse) {
        nar.addInput(""String_Node_Str"" + s + ""String_Node_Str""+ wishreal+ ""String_Node_Str"");
      }
 else {
        nar.addInput(""String_Node_Str"" + s + ""String_Node_Str""+ wishreal+ ""String_Node_Str"");
      }
    }
    return;
  }
  if (!""String_Node_Str"".equals(doorname) && selected.material == Material.Door) {
    space.add(new Key((int)x,(int)y,doorname.replace(""String_Node_Str"",""String_Node_Str"")));
    if (TestChamber.staticInformation)     nar.addInput(""String_Node_Str"" + doorname.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    if (TestChamber.curiousity) {
      space.nar.addInput(""String_Node_Str"" + doorname.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      space.nar.addInput(""String_Node_Str"" + doorname.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    }
    doorname=""String_Node_Str"";
    return;
  }
  if (selected.material == Material.Pizza) {
    doorname=""String_Node_Str"" + entityID.toString() + ""String_Node_Str"";
  }
  if (!""String_Node_Str"".equals(doorname) && selected.material == Material.Pizza) {
    space.add(new Pizza((int)x,(int)y,doorname));
    if (TestChamber.staticInformation)     nar.addInput(""String_Node_Str"" + doorname + ""String_Node_Str"");
    if (TestChamber.curiousity) {
      space.nar.addInput(""String_Node_Str"" + doorname + ""String_Node_Str"");
    }
    entityID++;
    doorname=""String_Node_Str"";
    return;
  }
  if (!(selected.material == Material.Door) && !(selected.material == Material.Pizza))   doorname=""String_Node_Str"";
  readCells[(int)x][(int)y].charge=selected.charge;
  writeCells[(int)x][(int)y].charge=selected.charge;
  readCells[(int)x][(int)y].logic=selected.logic;
  writeCells[(int)x][(int)y].logic=selected.logic;
  readCells[(int)x][(int)y].material=selected.material;
  writeCells[(int)x][(int)y].material=selected.material;
  readCells[(int)x][(int)y].machine=selected.machine;
  writeCells[(int)x][(int)y].machine=selected.machine;
  if (selected.material == Material.Pizza || selected.material == Material.Door || selected.logic == Logic.OFFSWITCH || selected.logic == Logic.SWITCH || selected.machine == Machine.Light || selected.machine == Machine.Turret) {
    String name=""String_Node_Str"";
    if (selected.material == Material.Door) {
      name=""String_Node_Str"";
    }
    if (selected.logic == Logic.SWITCH || selected.logic == Logic.OFFSWITCH)     name=""String_Node_Str"";
    if (selected.machine == Machine.Light)     name=""String_Node_Str"";
    if (selected.machine == Machine.Turret)     name=""String_Node_Str"";
    String Klass=name;
    name+=(entityID.toString());
    if (selected.material == Material.Door) {
      doorname=name;
    }
    name=""String_Node_Str"" + name + ""String_Node_Str"";
    if (readCells[(int)x][(int)y].name.equals(""String_Node_Str"")) {
      if (TestChamber.staticInformation)       nar.addInput(""String_Node_Str"" + name + ""String_Node_Str""+ Klass+ ""String_Node_Str"");
      readCells[(int)x][(int)y].name=name;
      writeCells[(int)x][(int)y].name=name;
      if (selected.logic == Logic.OFFSWITCH) {
        nar.addInput(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
        if (TestChamber.curiousity) {
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
        }
      }
      if (selected.logic == Logic.SWITCH) {
        nar.addInput(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
        if (TestChamber.curiousity) {
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
        }
      }
    }
 else {
      if (selected.logic == Logic.OFFSWITCH) {
        nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str""+ ""String_Node_Str"");
        if (TestChamber.curiousity) {
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
        }
      }
      if (selected.logic == Logic.SWITCH) {
        nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str""+ ""String_Node_Str"");
        if (TestChamber.curiousity) {
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
          space.nar.addInput(""String_Node_Str"" + readCells[(int)x][(int)y].name + ""String_Node_Str"");
        }
      }
    }
    entityID++;
  }
}",0.9985948477751756
166711,"public TestChamber(NAR nar,boolean showWindow){
  super();
  int w=50;
  int h=50;
  int water_threshold=30;
  Hauto cells=new Hauto(w,h,nar);
  cells.forEach(0,0,w,h,new CellFunction(){
    @Override public void update(    Cell c){
      float smoothness=20f;
      c.material=Material.GrassFloor;
      double n=SimplexNoise.noise(c.state.x / smoothness,c.state.y / smoothness);
      if ((n * 64) > water_threshold) {
        c.material=Material.Water;
      }
      c.setHeight((int)(Math.random() * 24 + 1));
    }
  }
);
  Maze.buildMaze(cells,3,3,23,23);
  space=new Grid2DSpace(cells,nar);
  space.FrameRate=0;
  space.automataPeriod=automataPeriod / gridUpdatePeriod;
  space.agentPeriod=agentPeriod / gridUpdatePeriod;
  TestChamber into=this;
  nar.memory.event.on(Events.FrameEnd.class,new EventObserver(){
    private long lastDrawn=0;
    @Override public void event(    Class event,    Object... arguments){
      if (nar.time() % gridUpdatePeriod == 0) {
        space.update(into);
        long now=System.nanoTime();
        if (now - lastDrawn > guiUpdateTime * 1e6) {
          space.redraw();
          lastDrawn=now;
        }
      }
    }
  }
);
  if (showWindow)   space.newWindow(1000,800,true);
  cells.forEach(16,16,18,18,new Hauto.SetMaterial(Material.DirtFloor));
  GridAgent a=new GridAgent(17,17,nar){
    @Override public void update(    Effect nextEffect){
      if (active) {
        executed=false;
        if (path == null || path.size() <= 0 && !executed_going) {
          for (int i=0; i < 5; i++) {
            if (executed) {
              break;
            }
          }
        }
        if (needpizza) {
          hungry--;
          if (hungry < 0) {
            hungry=250;
            nar.addInput(""String_Node_Str"");
          }
        }
      }
      lasttarget=space.target;
      space.current=new PVector(x,y);
      if (nextEffect == null) {
        path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
        actions.clear();
        if (path == null) {
          executed_going=false;
        }
        if (path != null) {
          if (inventorybag != null) {
            inventorybag.x=(int)space.current.x;
            inventorybag.y=(int)space.current.y;
            inventorybag.cx=(int)space.current.x;
            inventorybag.cy=(int)space.current.y;
          }
          if (inventorybag == null || !(inventorybag instanceof Key)) {
            keyn=-1;
          }
          if (path.size() <= 1) {
            active=true;
            executed_going=false;
            if (!""String_Node_Str"".equals(goal) && space.current.equals(space.target)) {
              GridObject obi=null;
              if (!""String_Node_Str"".equals(opname)) {
                for (                GridObject gridi : space.objects) {
                  if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                    obi=gridi;
                    break;
                  }
                }
              }
              if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
                if (""String_Node_Str"".equals(opname)) {
                  if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                    LocalGridObject ob=(LocalGridObject)inventorybag;
                    ob.x=(int)space.current.x;
                    ob.y=(int)space.current.y;
                    space.objects.add(ob);
                  }
                  inventorybag=(LocalGridObject)obi;
                  if (obi != null) {
                    space.objects.remove(obi);
                    if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                      keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str""));
                      for (int i=0; i < cells.h; i++) {
                        for (int j=0; j < cells.w; j++) {
                          if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                            cells.readCells[i][j].is_solid=false;
                            cells.writeCells[i][j].is_solid=false;
                          }
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.SWITCH) {
                          cells.readCells[i][j].logic=Logic.OFFSWITCH;
                          cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                          cells.readCells[i][j].charge=0.0f;
                          cells.writeCells[i][j].charge=0.0f;
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                          cells.readCells[i][j].logic=Logic.SWITCH;
                          cells.writeCells[i][j].logic=Logic.SWITCH;
                          cells.readCells[i][j].charge=1.0f;
                          cells.writeCells[i][j].charge=1.0f;
                        }
                      }
                    }
                  }
                }
                if (""String_Node_Str"".equals(opname)) {
                  executed_going=false;
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  if (goal.startsWith(""String_Node_Str"")) {
                    GridObject ToRemove=null;
                    for (                    GridObject obj : space.objects) {
                      if (obj instanceof LocalGridObject) {
                        LocalGridObject obo=(LocalGridObject)obj;
                        if (obo.doorname.equals(goal)) {
                          ToRemove=obj;
                        }
                      }
                    }
                    if (ToRemove != null) {
                      space.objects.remove(ToRemove);
                    }
                    hungry=500;
                    nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  }
                  active=true;
                }
              }
            }
            opname=""String_Node_Str"";
            nar.memory.setEnabled(true);
          }
 else {
            executed_going=true;
            active=false;
            int numSteps=Math.min(10,path.size());
            float cx=x;
            float cy=y;
            for (int i=1; i < numSteps; i++) {
              PVector next=path.get(i);
              int dx=(int)(next.x - cx);
              int dy=(int)(next.y - cy);
              if ((dx == 0) && (dy == 1)) {
                turn(UP);
                forward(1);
              }
              if ((dx == 1) && (dy == 0)) {
                turn(RIGHT);
                forward(1);
              }
              if ((dx == -1) && (dy == 0)) {
                turn(LEFT);
                forward(1);
              }
              if ((dx == 0) && (dy == -1)) {
                turn(DOWN);
                forward(1);
              }
              cx=next.x;
              cy=next.y;
            }
          }
        }
      }
    }
  }
;
  Goto wu=new Goto(this,""String_Node_Str"");
  nar.memory.addOperator(wu);
  Pick wa=new Pick(this,""String_Node_Str"");
  nar.memory.addOperator(wa);
  Activate waa=new Activate(this,""String_Node_Str"");
  nar.memory.addOperator(waa);
  Deactivate waaa=new Deactivate(this,""String_Node_Str"");
  nar.memory.addOperator(waaa);
  space.add(a);
}","public TestChamber(NAR nar,boolean showWindow){
  super();
  int w=50;
  int h=50;
  int water_threshold=30;
  Hauto cells=new Hauto(w,h,nar);
  cells.forEach(0,0,w,h,new CellFunction(){
    @Override public void update(    Cell c){
      float smoothness=20f;
      c.material=Material.GrassFloor;
      double n=SimplexNoise.noise(c.state.x / smoothness,c.state.y / smoothness);
      if ((n * 64) > water_threshold) {
        c.material=Material.Water;
      }
      c.setHeight((int)(Math.random() * 24 + 1));
    }
  }
);
  Maze.buildMaze(cells,3,3,23,23);
  space=new Grid2DSpace(cells,nar);
  space.FrameRate=0;
  space.automataPeriod=automataPeriod / gridUpdatePeriod;
  space.agentPeriod=agentPeriod / gridUpdatePeriod;
  TestChamber into=this;
  nar.memory.event.on(Events.FrameEnd.class,new EventObserver(){
    private long lastDrawn=0;
    @Override public void event(    Class event,    Object... arguments){
      if (nar.time() % gridUpdatePeriod == 0) {
        space.update(into);
        long now=System.nanoTime();
        if (now - lastDrawn > guiUpdateTime * 1e6) {
          space.redraw();
          lastDrawn=now;
        }
      }
    }
  }
);
  if (showWindow)   space.newWindow(1000,800,true);
  cells.forEach(16,16,18,18,new Hauto.SetMaterial(Material.DirtFloor));
  GridAgent a=new GridAgent(17,17,nar){
    @Override public void update(    Effect nextEffect){
      if (active) {
        executed=false;
        if (path == null || path.size() <= 0 && !executed_going) {
          for (int i=0; i < 5; i++) {
            if (executed) {
              break;
            }
          }
        }
        if (needpizza) {
          hungry--;
          if (hungry < 0) {
            hungry=250;
            nar.addInput(""String_Node_Str"");
          }
        }
      }
      lasttarget=space.target;
      space.current=new PVector(x,y);
      if (nextEffect == null) {
        path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
        actions.clear();
        if (path == null) {
          executed_going=false;
        }
        if (path != null) {
          if (inventorybag != null) {
            inventorybag.x=(int)space.current.x;
            inventorybag.y=(int)space.current.y;
            inventorybag.cx=(int)space.current.x;
            inventorybag.cy=(int)space.current.y;
          }
          if (inventorybag == null || !(inventorybag instanceof Key)) {
            keyn=-1;
          }
          if (path.size() <= 1) {
            active=true;
            executed_going=false;
            if (!""String_Node_Str"".equals(goal) && space.current.equals(space.target)) {
              GridObject obi=null;
              if (!""String_Node_Str"".equals(opname)) {
                for (                GridObject gridi : space.objects) {
                  if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                    obi=gridi;
                    break;
                  }
                }
              }
              if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
                if (""String_Node_Str"".equals(opname)) {
                  if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                    LocalGridObject ob=(LocalGridObject)inventorybag;
                    ob.x=(int)space.current.x;
                    ob.y=(int)space.current.y;
                    space.objects.add(ob);
                  }
                  inventorybag=(LocalGridObject)obi;
                  if (obi != null) {
                    space.objects.remove(obi);
                    if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                      keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
                      for (int i=0; i < cells.h; i++) {
                        for (int j=0; j < cells.w; j++) {
                          if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                            cells.readCells[i][j].is_solid=false;
                            cells.writeCells[i][j].is_solid=false;
                          }
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.SWITCH) {
                          cells.readCells[i][j].logic=Logic.OFFSWITCH;
                          cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                          cells.readCells[i][j].charge=0.0f;
                          cells.writeCells[i][j].charge=0.0f;
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                          cells.readCells[i][j].logic=Logic.SWITCH;
                          cells.writeCells[i][j].logic=Logic.SWITCH;
                          cells.readCells[i][j].charge=1.0f;
                          cells.writeCells[i][j].charge=1.0f;
                        }
                      }
                    }
                  }
                }
                if (""String_Node_Str"".equals(opname)) {
                  executed_going=false;
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  if (goal.startsWith(""String_Node_Str"")) {
                    GridObject ToRemove=null;
                    for (                    GridObject obj : space.objects) {
                      if (obj instanceof LocalGridObject) {
                        LocalGridObject obo=(LocalGridObject)obj;
                        if (obo.doorname.equals(goal)) {
                          ToRemove=obj;
                        }
                      }
                    }
                    if (ToRemove != null) {
                      space.objects.remove(ToRemove);
                    }
                    hungry=500;
                    nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  }
                  active=true;
                }
              }
            }
            opname=""String_Node_Str"";
            nar.memory.setEnabled(true);
          }
 else {
            executed_going=true;
            active=false;
            int numSteps=Math.min(10,path.size());
            float cx=x;
            float cy=y;
            for (int i=1; i < numSteps; i++) {
              PVector next=path.get(i);
              int dx=(int)(next.x - cx);
              int dy=(int)(next.y - cy);
              if ((dx == 0) && (dy == 1)) {
                turn(UP);
                forward(1);
              }
              if ((dx == 1) && (dy == 0)) {
                turn(RIGHT);
                forward(1);
              }
              if ((dx == -1) && (dy == 0)) {
                turn(LEFT);
                forward(1);
              }
              if ((dx == 0) && (dy == -1)) {
                turn(DOWN);
                forward(1);
              }
              cx=next.x;
              cy=next.y;
            }
          }
        }
      }
    }
  }
;
  Goto wu=new Goto(this,""String_Node_Str"");
  nar.memory.addOperator(wu);
  Pick wa=new Pick(this,""String_Node_Str"");
  nar.memory.addOperator(wa);
  Activate waa=new Activate(this,""String_Node_Str"");
  nar.memory.addOperator(waa);
  Deactivate waaa=new Deactivate(this,""String_Node_Str"");
  nar.memory.addOperator(waaa);
  space.add(a);
}",0.9970472440944882
166712,"@Override public void update(Effect nextEffect){
  if (active) {
    executed=false;
    if (path == null || path.size() <= 0 && !executed_going) {
      for (int i=0; i < 5; i++) {
        if (executed) {
          break;
        }
      }
    }
    if (needpizza) {
      hungry--;
      if (hungry < 0) {
        hungry=250;
        nar.addInput(""String_Node_Str"");
      }
    }
  }
  lasttarget=space.target;
  space.current=new PVector(x,y);
  if (nextEffect == null) {
    path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
    actions.clear();
    if (path == null) {
      executed_going=false;
    }
    if (path != null) {
      if (inventorybag != null) {
        inventorybag.x=(int)space.current.x;
        inventorybag.y=(int)space.current.y;
        inventorybag.cx=(int)space.current.x;
        inventorybag.cy=(int)space.current.y;
      }
      if (inventorybag == null || !(inventorybag instanceof Key)) {
        keyn=-1;
      }
      if (path.size() <= 1) {
        active=true;
        executed_going=false;
        if (!""String_Node_Str"".equals(goal) && space.current.equals(space.target)) {
          GridObject obi=null;
          if (!""String_Node_Str"".equals(opname)) {
            for (            GridObject gridi : space.objects) {
              if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                obi=gridi;
                break;
              }
            }
          }
          if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
            if (""String_Node_Str"".equals(opname)) {
              if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                LocalGridObject ob=(LocalGridObject)inventorybag;
                ob.x=(int)space.current.x;
                ob.y=(int)space.current.y;
                space.objects.add(ob);
              }
              inventorybag=(LocalGridObject)obi;
              if (obi != null) {
                space.objects.remove(obi);
                if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                  keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str""));
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                        cells.readCells[i][j].is_solid=false;
                        cells.writeCells[i][j].is_solid=false;
                      }
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.SWITCH) {
                      cells.readCells[i][j].logic=Logic.OFFSWITCH;
                      cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                      cells.readCells[i][j].charge=0.0f;
                      cells.writeCells[i][j].charge=0.0f;
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                      cells.readCells[i][j].logic=Logic.SWITCH;
                      cells.writeCells[i][j].logic=Logic.SWITCH;
                      cells.readCells[i][j].charge=1.0f;
                      cells.writeCells[i][j].charge=1.0f;
                    }
                  }
                }
              }
            }
            if (""String_Node_Str"".equals(opname)) {
              executed_going=false;
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              if (goal.startsWith(""String_Node_Str"")) {
                GridObject ToRemove=null;
                for (                GridObject obj : space.objects) {
                  if (obj instanceof LocalGridObject) {
                    LocalGridObject obo=(LocalGridObject)obj;
                    if (obo.doorname.equals(goal)) {
                      ToRemove=obj;
                    }
                  }
                }
                if (ToRemove != null) {
                  space.objects.remove(ToRemove);
                }
                hungry=500;
                nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              }
              active=true;
            }
          }
        }
        opname=""String_Node_Str"";
        nar.memory.setEnabled(true);
      }
 else {
        executed_going=true;
        active=false;
        int numSteps=Math.min(10,path.size());
        float cx=x;
        float cy=y;
        for (int i=1; i < numSteps; i++) {
          PVector next=path.get(i);
          int dx=(int)(next.x - cx);
          int dy=(int)(next.y - cy);
          if ((dx == 0) && (dy == 1)) {
            turn(UP);
            forward(1);
          }
          if ((dx == 1) && (dy == 0)) {
            turn(RIGHT);
            forward(1);
          }
          if ((dx == -1) && (dy == 0)) {
            turn(LEFT);
            forward(1);
          }
          if ((dx == 0) && (dy == -1)) {
            turn(DOWN);
            forward(1);
          }
          cx=next.x;
          cy=next.y;
        }
      }
    }
  }
}","@Override public void update(Effect nextEffect){
  if (active) {
    executed=false;
    if (path == null || path.size() <= 0 && !executed_going) {
      for (int i=0; i < 5; i++) {
        if (executed) {
          break;
        }
      }
    }
    if (needpizza) {
      hungry--;
      if (hungry < 0) {
        hungry=250;
        nar.addInput(""String_Node_Str"");
      }
    }
  }
  lasttarget=space.target;
  space.current=new PVector(x,y);
  if (nextEffect == null) {
    path=Grid2DSpace.Shortest_Path(space,this,space.current,space.target);
    actions.clear();
    if (path == null) {
      executed_going=false;
    }
    if (path != null) {
      if (inventorybag != null) {
        inventorybag.x=(int)space.current.x;
        inventorybag.y=(int)space.current.y;
        inventorybag.cx=(int)space.current.x;
        inventorybag.cy=(int)space.current.y;
      }
      if (inventorybag == null || !(inventorybag instanceof Key)) {
        keyn=-1;
      }
      if (path.size() <= 1) {
        active=true;
        executed_going=false;
        if (!""String_Node_Str"".equals(goal) && space.current.equals(space.target)) {
          GridObject obi=null;
          if (!""String_Node_Str"".equals(opname)) {
            for (            GridObject gridi : space.objects) {
              if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)space.current.x && ((LocalGridObject)gridi).y == (int)space.current.y) {
                obi=gridi;
                break;
              }
            }
          }
          if (obi != null || cells.readCells[(int)space.current.x][(int)space.current.y].name.equals(goal)) {
            if (""String_Node_Str"".equals(opname)) {
              if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                LocalGridObject ob=(LocalGridObject)inventorybag;
                ob.x=(int)space.current.x;
                ob.y=(int)space.current.y;
                space.objects.add(ob);
              }
              inventorybag=(LocalGridObject)obi;
              if (obi != null) {
                space.objects.remove(obi);
                if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                  keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                        cells.readCells[i][j].is_solid=false;
                        cells.writeCells[i][j].is_solid=false;
                      }
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.SWITCH) {
                      cells.readCells[i][j].logic=Logic.OFFSWITCH;
                      cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                      cells.readCells[i][j].charge=0.0f;
                      cells.writeCells[i][j].charge=0.0f;
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                      cells.readCells[i][j].logic=Logic.SWITCH;
                      cells.writeCells[i][j].logic=Logic.SWITCH;
                      cells.readCells[i][j].charge=1.0f;
                      cells.writeCells[i][j].charge=1.0f;
                    }
                  }
                }
              }
            }
            if (""String_Node_Str"".equals(opname)) {
              executed_going=false;
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              if (goal.startsWith(""String_Node_Str"")) {
                GridObject ToRemove=null;
                for (                GridObject obj : space.objects) {
                  if (obj instanceof LocalGridObject) {
                    LocalGridObject obo=(LocalGridObject)obj;
                    if (obo.doorname.equals(goal)) {
                      ToRemove=obj;
                    }
                  }
                }
                if (ToRemove != null) {
                  space.objects.remove(ToRemove);
                }
                hungry=500;
                nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              }
              active=true;
            }
          }
        }
        opname=""String_Node_Str"";
        nar.memory.setEnabled(true);
      }
 else {
        executed_going=true;
        active=false;
        int numSteps=Math.min(10,path.size());
        float cx=x;
        float cy=y;
        for (int i=1; i < numSteps; i++) {
          PVector next=path.get(i);
          int dx=(int)(next.x - cx);
          int dy=(int)(next.y - cy);
          if ((dx == 0) && (dy == 1)) {
            turn(UP);
            forward(1);
          }
          if ((dx == 1) && (dy == 0)) {
            turn(RIGHT);
            forward(1);
          }
          if ((dx == -1) && (dy == 0)) {
            turn(LEFT);
            forward(1);
          }
          if ((dx == 0) && (dy == -1)) {
            turn(DOWN);
            forward(1);
          }
          cx=next.x;
          cy=next.y;
        }
      }
    }
  }
}",0.9958620689655172
166713,"/** 
 * Shared final operations by all double-premise rules, called from the rules except StructuralRules
 * @param newContent The content of the sentence in task
 * @param newTruth The truth value of the sentence in task
 * @param newBudget The budget value in task
 */
public Task doublePremiseTask(final Term newContent,final TruthValue newTruth,final BudgetValue newBudget,boolean temporalAdd){
  if (!newBudget.aboveThreshold()) {
    return null;
  }
  if ((newContent != null) && (!(newContent instanceof Interval)) && (!(newContent instanceof Variable))) {
    try {
      final Sentence newSentence=new Sentence(newContent,getCurrentTask().sentence.punctuation,newTruth,getTheNewStamp());
      final Task newTask=Task.make(newSentence,newBudget,getCurrentTask(),getCurrentBelief());
      Task derived=null;
      if (newTask != null) {
        boolean added=derivedTask(newTask,false,false,null,null);
        if (added && temporalAdd) {
          memory.temporalRuleOutputToGraph(newSentence,newTask);
        }
        if (added) {
          derived=newTask;
        }
      }
      return derived;
    }
 catch (    CompoundTerm.UnableToCloneException e) {
      return null;
    }
  }
  return null;
}","/** 
 * Shared final operations by all double-premise rules, called from the rules except StructuralRules
 * @param newContent The content of the sentence in task
 * @param newTruth The truth value of the sentence in task
 * @param newBudget The budget value in task
 */
public Task doublePremiseTask(final Term newContent,final TruthValue newTruth,final BudgetValue newBudget,boolean temporalAdd){
  if (!newBudget.aboveThreshold()) {
    return null;
  }
  if ((newContent != null) && (!(newContent instanceof Interval)) && (!(newContent instanceof Variable))&& (!Sentence.invalidSentenceTerm(newContent))) {
    try {
      final Sentence newSentence=new Sentence(newContent,getCurrentTask().sentence.punctuation,newTruth,getTheNewStamp());
      final Task newTask=Task.make(newSentence,newBudget,getCurrentTask(),getCurrentBelief());
      Task derived=null;
      if (newTask != null) {
        boolean added=derivedTask(newTask,false,false,null,null);
        if (added && temporalAdd) {
          memory.temporalRuleOutputToGraph(newSentence,newTask);
        }
        if (added) {
          derived=newTask;
        }
      }
      return derived;
    }
 catch (    CompoundTerm.UnableToCloneException e) {
      return null;
    }
  }
  return null;
}",0.9814366424535916
166714,"/** 
 * To accept a new judgment as belief, and check for revisions and solutions
 * @param judg The judgment to be accepted
 * @param task The task to be processed
 * @return Whether to continue the processing of the task
 */
protected void processJudgment(final NAL nal,final Task task){
  final Sentence judg=task.sentence;
  final Sentence oldBelief=selectCandidate(judg,beliefs);
  if (oldBelief != null) {
    final Stamp newStamp=judg.stamp;
    final Stamp oldStamp=oldBelief.stamp;
    if (newStamp.equals(oldStamp,false,false,true,true)) {
      if (task.getParentTask() != null && task.getParentTask().sentence.isJudgment()) {
      }
      memory.removeTask(task,""String_Node_Str"");
      return;
    }
 else     if (revisible(judg,oldBelief)) {
      nal.setTheNewStamp(newStamp,oldStamp,memory.time());
      Sentence projectedBelief=oldBelief.projection(newStamp.getOccurrenceTime(),memory.time());
      if (projectedBelief.getOccurenceTime() != oldBelief.getOccurenceTime()) {
        nal.singlePremiseTask(projectedBelief,task.budget);
      }
      nal.setCurrentBelief(projectedBelief);
      revision(judg,projectedBelief,false,nal);
    }
  }
  if (task.aboveThreshold()) {
    int nnq=questions.size();
    for (int i=0; i < nnq; i++) {
      trySolution(judg,questions.get(i),nal);
    }
    addToTable(task,judg,beliefs,memory.param.conceptBeliefsMax.get(),ConceptBeliefAdd.class,ConceptBeliefRemove.class);
  }
}","/** 
 * To accept a new judgment as belief, and check for revisions and solutions
 * @param judg The judgment to be accepted
 * @param task The task to be processed
 * @return Whether to continue the processing of the task
 */
protected void processJudgment(final NAL nal,final Task task){
  final Sentence judg=task.sentence;
  final Sentence oldBelief=selectCandidate(judg,beliefs);
  if (oldBelief != null) {
    final Stamp newStamp=judg.stamp;
    final Stamp oldStamp=oldBelief.stamp;
    if (newStamp.equals(oldStamp,false,false,true,true)) {
      if (task.getParentTask() != null && task.getParentTask().sentence.isJudgment()) {
      }
      memory.removeTask(task,""String_Node_Str"");
      return;
    }
 else     if (revisible(judg,oldBelief)) {
      nal.setTheNewStamp(newStamp,oldStamp,memory.time());
      Sentence projectedBelief=oldBelief.projection(newStamp.getOccurrenceTime(),memory.time());
      if (projectedBelief != null) {
        if (projectedBelief.getOccurenceTime() != oldBelief.getOccurenceTime()) {
          nal.singlePremiseTask(projectedBelief,task.budget);
        }
        nal.setCurrentBelief(projectedBelief);
        revision(judg,projectedBelief,false,nal);
      }
    }
  }
  if (task.aboveThreshold()) {
    int nnq=questions.size();
    for (int i=0; i < nnq; i++) {
      trySolution(judg,questions.get(i),nal);
    }
    addToTable(task,judg,beliefs,memory.param.conceptBeliefsMax.get(),ConceptBeliefAdd.class,ConceptBeliefRemove.class);
  }
}",0.9669054930058
166715,"/** 
 * Create a Sentence with the given fields
 * @param content The Term that forms the content of the sentence
 * @param punctuation The punctuation indicating the type of the sentence
 * @param truth The truth value of the sentence, null for question
 * @param stamp The stamp of the sentence indicating its derivation time andbase
 */
public Sentence(final T _content,final char punctuation,final TruthValue truth,final Stamp stamp){
  this.punctuation=punctuation;
  if (!(_content instanceof CompoundTerm))   throw new RuntimeException(""String_Node_Str"" + _content + punctuation+ ""String_Node_Str""+ stamp);
  if ((!isQuestion() && !isQuest()) && (truth == null)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((isQuestion() || isQuest()) && !stamp.isEternal()) {
    stamp.setEternal();
  }
  this.truth=truth;
  this.stamp=stamp;
  this.revisible=!((_content instanceof Conjunction) && _content.hasVarDep());
  if (_content.hasVar() && (_content instanceof CompoundTerm) && (!((CompoundTerm)_content).isNormalized())) {
    this.content=(T)((CompoundTerm)_content).cloneDeepVariables();
    final CompoundTerm c=(CompoundTerm)content;
    List<Variable> vars=new ArrayList();
    c.recurseVariableTerms(new Term.TermVisitor(){
      @Override public void visit(      final Term t){
        if (t instanceof Variable) {
          vars.add(((Variable)t));
        }
      }
    }
);
    Map<CharSequence,CharSequence> rename=new HashMap();
    boolean renamed=false;
    for (    final Variable v : vars) {
      CharSequence vname=v.name();
      if (!v.hasVarIndep())       vname=vname + ""String_Node_Str"" + v.getScope().name();
      CharSequence n=rename.get(vname);
      if (n == null) {
        rename.put(vname,n=Variable.getName(v.getType(),rename.size() + 1));
      }
      v.setScope(c,n);
      renamed=true;
    }
    if (renamed) {
      c.invalidateName();
    }
    c.setNormalized(true);
  }
 else {
    this.content=_content;
  }
  if (isUniqueByOcurrenceTime())   this.hash=Objects.hash(content,punctuation,truth,stamp.getOccurrenceTime());
 else   this.hash=Objects.hash(content,punctuation,truth);
}","/** 
 * Create a Sentence with the given fields
 * @param content The Term that forms the content of the sentence
 * @param punctuation The punctuation indicating the type of the sentence
 * @param truth The truth value of the sentence, null for question
 * @param stamp The stamp of the sentence indicating its derivation time andbase
 */
public Sentence(final T _content,final char punctuation,final TruthValue truth,final Stamp stamp){
  this.punctuation=punctuation;
  if (!(_content instanceof CompoundTerm))   throw new RuntimeException(""String_Node_Str"" + _content + punctuation+ ""String_Node_Str""+ stamp);
  if ((!isQuestion() && !isQuest()) && (truth == null)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES) {
    if (!Term.valid(_content)) {
      CompoundTerm.UnableToCloneException ntc=new CompoundTerm.UnableToCloneException(""String_Node_Str"" + _content);
      ntc.printStackTrace();
      throw ntc;
    }
  }
  if ((isQuestion() || isQuest()) && !stamp.isEternal()) {
    stamp.setEternal();
  }
  this.truth=truth;
  this.stamp=stamp;
  this.revisible=!((_content instanceof Conjunction) && _content.hasVarDep());
  if (_content.hasVar() && (_content instanceof CompoundTerm) && (!((CompoundTerm)_content).isNormalized())) {
    this.content=(T)((CompoundTerm)_content).cloneDeepVariables();
    final CompoundTerm c=(CompoundTerm)content;
    List<Variable> vars=new ArrayList();
    c.recurseSubtermsContainingVariables(new Term.TermVisitor(){
      @Override public void visit(      final Term t,      final Term parent){
        if (t instanceof Variable) {
          Variable v=((Variable)t);
          vars.add(v);
        }
      }
    }
);
    Map<CharSequence,CharSequence> rename=new HashMap();
    boolean renamed=false;
    for (    final Variable v : vars) {
      CharSequence vname=v.name();
      if (!v.hasVarIndep())       vname=vname + ""String_Node_Str"" + v.getScope().name();
      CharSequence n=rename.get(vname);
      if (n == null) {
        rename.put(vname,n=Variable.getName(v.getType(),rename.size() + 1));
        if (!n.equals(vname))         renamed=true;
      }
      v.setScope(c,n);
    }
    if (renamed) {
      c.invalidateName();
      if (Parameters.DEBUG && Parameters.DEBUG_INVALID_SENTENCES) {
        if (!Term.valid(c)) {
          CompoundTerm.UnableToCloneException ntc=new CompoundTerm.UnableToCloneException(""String_Node_Str"" + c + ""String_Node_Str""+ _content);
          ntc.printStackTrace();
          throw ntc;
        }
      }
    }
    c.setNormalized(true);
  }
 else {
    this.content=_content;
  }
  if (isUniqueByOcurrenceTime())   this.hash=Objects.hash(content,punctuation,truth,stamp.getOccurrenceTime());
 else   this.hash=Objects.hash(content,punctuation,truth);
}",0.8364222401289283
166716,"@Override public void visit(final Term t){
  if (t instanceof Variable) {
    vars.add(((Variable)t));
  }
}","@Override public void visit(final Term t,final Term parent){
  if (t instanceof Variable) {
    Variable v=((Variable)t);
    vars.add(v);
  }
}",0.8095238095238095
166717,"private static void dedSecondLayerVariableUnificationTerms(final NAL nal,Task task,Sentence second_belief,final Stamp s,ArrayList<Term> terms_dependent,TruthValue truth,TruthValue t1,TruthValue t2,boolean strong){
  Stamp sx=null;
  final Sentence taskSentence=task.sentence;
  for (int i=0; i < terms_dependent.size(); i++) {
    final Term result=terms_dependent.get(i);
    if (invalidSentenceContent(result)) {
      continue;
    }
    char mark=Symbols.JUDGMENT_MARK;
    if (task.sentence.isGoal() || second_belief.isGoal()) {
      if (strong) {
        truth=abduction(t1,t2);
      }
 else {
        truth=intersection(t1,t2);
      }
      mark=Symbols.GOAL_MARK;
    }
    if (sx == null)     sx=new Stamp(taskSentence.stamp,nal.getTime(),s);
    try {
      Sentence newSentence=new Sentence(result,mark,truth,sx);
      BudgetValue budget=BudgetFunctions.compoundForward(truth,newSentence.content,nal);
      if (budget.aboveThreshold()) {
        Task newTask=new Task(newSentence,budget,task,null);
        Task dummy=new Task(second_belief,budget,task,null);
        nal.setCurrentBelief(taskSentence);
        nal.setCurrentTask(dummy);
        if (nal.derivedTask(newTask,false,false,task,second_belief)) {
          nal.mem().logic.DED_SECOND_LAYER_VARIABLE_UNIFICATION_TERMS.commit();
        }
      }
    }
 catch (    UnableToCloneException u) {
      return;
    }
  }
}","private static void dedSecondLayerVariableUnificationTerms(final NAL nal,Task task,Sentence second_belief,final Stamp s,ArrayList<Term> terms_dependent,TruthValue truth,TruthValue t1,TruthValue t2,boolean strong){
  Stamp sx=null;
  final Sentence taskSentence=task.sentence;
  for (int i=0; i < terms_dependent.size(); i++) {
    final Term result=terms_dependent.get(i);
    if (Sentence.invalidSentenceTerm(result)) {
      continue;
    }
    char mark=Symbols.JUDGMENT_MARK;
    if (task.sentence.isGoal() || second_belief.isGoal()) {
      if (strong) {
        truth=abduction(t1,t2);
      }
 else {
        truth=intersection(t1,t2);
      }
      mark=Symbols.GOAL_MARK;
    }
    if (sx == null)     sx=new Stamp(taskSentence.stamp,nal.getTime(),s);
    try {
      Sentence newSentence=new Sentence(result,mark,truth,sx);
      BudgetValue budget=BudgetFunctions.compoundForward(truth,newSentence.content,nal);
      if (budget.aboveThreshold()) {
        Task newTask=new Task(newSentence,budget,task,null);
        Task dummy=new Task(second_belief,budget,task,null);
        nal.setCurrentBelief(taskSentence);
        nal.setCurrentTask(dummy);
        if (nal.derivedTask(newTask,false,false,task,second_belief)) {
          nal.mem().logic.DED_SECOND_LAYER_VARIABLE_UNIFICATION_TERMS.commit();
        }
      }
    }
 catch (    UnableToCloneException u) {
      return;
    }
  }
}",0.9928469241773964
166718,"static boolean dedSecondLayerVariableUnification(final Task task,final NAL nal){
  final Sentence taskSentence=task.sentence;
  if (taskSentence == null || taskSentence.isQuestion() || taskSentence.isQuest()) {
    return false;
  }
  Term first=taskSentence.content;
  if (!first.hasVar()) {
    return false;
  }
  if (!((first instanceof Disjunction || first instanceof Conjunction || first instanceof Equivalence|| first instanceof Implication))) {
    return false;
  }
  boolean unifiedAnything=false;
  int remainingUnifications=1;
  int maxUnificationAttempts=1;
  ArrayList<Term> terms_dependent=null;
  ArrayList<Term> terms_independent=null;
  HashMap<Term,Term> Values=null;
  HashMap<Term,Term> Values2=null;
  HashMap<Term,Term> Values3=null;
  HashMap<Term,Term> Values4=null;
  HashMap<Term,Term> smap=null;
  for (int k=0; k < maxUnificationAttempts; k++) {
    Concept secondConcept=nal.mem().sampleNextConcept();
    if (secondConcept == null) {
      break;
    }
    if (secondConcept.term.equals(first)) {
      continue;
    }
    Term secterm=secondConcept.term;
    Sentence second_belief=secondConcept.getBeliefRandomByConfidence();
    if (second_belief == null)     continue;
    TruthValue truthSecond=second_belief.truth;
    if (terms_dependent == null) {
      final int initialTermListSize=8;
      terms_dependent=new ArrayList<>(initialTermListSize);
      terms_independent=new ArrayList<>(initialTermListSize);
      Values=newVariableSubstitutionMap();
      Values2=newVariableSubstitutionMap();
      Values3=newVariableSubstitutionMap();
      Values4=newVariableSubstitutionMap();
      smap=newVariableSubstitutionMap();
    }
    terms_dependent.clear();
    terms_independent.clear();
    Term[] components_level1=((CompoundTerm)first).term;
    Term secterm_unwrap=unwrapNegation(secterm);
    for (    final Term T1 : components_level1) {
      Term T1_unwrap=unwrapNegation(T1);
      Values.clear();
      smap.clear();
      if (Variables.findSubstitute(Symbols.VAR_DEPENDENT,T1_unwrap,secterm_unwrap,Values,smap)) {
        CompoundTerm ctaskterm_subs=(CompoundTerm)first;
        ctaskterm_subs=ctaskterm_subs.applySubstituteToCompound(Values);
        Term taskterm_subs=reduceUntilLayer2(ctaskterm_subs,secterm,nal.mem());
        if (taskterm_subs != null && !(Variables.indepVarUsedInvalid(taskterm_subs))) {
          terms_dependent.add(taskterm_subs);
        }
      }
      Values2.clear();
      smap.clear();
      if (Variables.findSubstitute(Symbols.VAR_INDEPENDENT,T1_unwrap,secterm_unwrap,Values2,smap)) {
        CompoundTerm ctaskterm_subs=(CompoundTerm)first;
        ctaskterm_subs=ctaskterm_subs.applySubstituteToCompound(Values2);
        Term taskterm_subs=reduceUntilLayer2(ctaskterm_subs,secterm,nal.mem());
        if (taskterm_subs != null && !(Variables.indepVarUsedInvalid(taskterm_subs))) {
          terms_independent.add(taskterm_subs);
        }
      }
      if (!((T1_unwrap instanceof Implication) || (T1_unwrap instanceof Equivalence) || (T1_unwrap instanceof Conjunction)|| (T1_unwrap instanceof Disjunction))) {
        continue;
      }
      if (T1_unwrap instanceof CompoundTerm) {
        Term[] components_level2=((CompoundTerm)T1_unwrap).term;
        for (        final Term T2 : components_level2) {
          Term T2_unwrap=unwrapNegation(T2);
          Values3.clear();
          smap.clear();
          if (Variables.findSubstitute(Symbols.VAR_DEPENDENT,T2_unwrap,secterm_unwrap,Values3,smap)) {
            CompoundTerm ctaskterm_subs=(CompoundTerm)first;
            ctaskterm_subs=ctaskterm_subs.applySubstituteToCompound(Values3);
            Term taskterm_subs=reduceUntilLayer2(ctaskterm_subs,secterm,nal.mem());
            if (taskterm_subs != null && !(Variables.indepVarUsedInvalid(taskterm_subs))) {
              terms_dependent.add(taskterm_subs);
            }
          }
          Values4.clear();
          smap.clear();
          if (Variables.findSubstitute(Symbols.VAR_INDEPENDENT,T2_unwrap,secterm_unwrap,Values4,smap)) {
            CompoundTerm ctaskterm_subs=(CompoundTerm)first;
            ctaskterm_subs=ctaskterm_subs.applySubstituteToCompound(Values4);
            Term taskterm_subs=reduceUntilLayer2(ctaskterm_subs,secterm,nal.mem());
            if (taskterm_subs != null && !(Variables.indepVarUsedInvalid(taskterm_subs))) {
              terms_independent.add(taskterm_subs);
            }
          }
        }
      }
    }
    if (taskSentence.truth == null)     throw new RuntimeException(""String_Node_Str"" + taskSentence);
    Stamp ss=new Stamp(taskSentence.stamp,second_belief.stamp,nal.getTime());
    dedSecondLayerVariableUnificationTerms(nal,task,second_belief,ss,terms_dependent,anonymousAnalogy(taskSentence.truth,truthSecond),taskSentence.truth,truthSecond,false);
    dedSecondLayerVariableUnificationTerms(nal,task,second_belief,ss,terms_independent,deduction(taskSentence.truth,truthSecond),taskSentence.truth,truthSecond,true);
    final int termsIndependent=terms_independent.size();
    for (int i=0; i < termsIndependent; i++) {
      Term result=terms_independent.get(i);
      if (invalidSentenceContent(result)) {
        continue;
      }
      TruthValue truth=deduction(taskSentence.truth,truthSecond);
      char mark=Symbols.JUDGMENT_MARK;
      if (taskSentence.isGoal() || second_belief.isGoal()) {
        truth=TruthFunctions.abduction(taskSentence.truth,truthSecond);
        mark=Symbols.GOAL_MARK;
      }
      Stamp useEvidentalBase=new Stamp(taskSentence.stamp,second_belief.stamp,nal.getTime());
      Sentence newSentence=new Sentence(result,mark,truth,new Stamp(taskSentence.stamp,nal.getTime(),useEvidentalBase));
      BudgetValue budget=BudgetFunctions.compoundForward(truth,newSentence.content,nal);
      if (budget.aboveThreshold()) {
        Task newTask=new Task(newSentence,budget,task,null);
        Task dummy=new Task(second_belief,budget,task,null);
        nal.setCurrentBelief(taskSentence);
        nal.setCurrentTask(dummy);
        if (nal.derivedTask(newTask,false,false,task,second_belief)) {
          nal.mem().logic.DED_SECOND_LAYER_VARIABLE_UNIFICATION.commit();
          nal.emit(Events.ConceptUnification.class,newTask,first,secondConcept,second_belief);
          unifiedAnything=true;
        }
      }
    }
    remainingUnifications--;
    if (remainingUnifications == 0) {
      break;
    }
  }
  return unifiedAnything;
}","static boolean dedSecondLayerVariableUnification(final Task task,final NAL nal){
  final Sentence taskSentence=task.sentence;
  if (taskSentence == null || taskSentence.isQuestion() || taskSentence.isQuest()) {
    return false;
  }
  Term first=taskSentence.content;
  if (!first.hasVar()) {
    return false;
  }
  if (!((first instanceof Disjunction || first instanceof Conjunction || first instanceof Equivalence|| first instanceof Implication))) {
    return false;
  }
  boolean unifiedAnything=false;
  int remainingUnifications=1;
  int maxUnificationAttempts=1;
  ArrayList<Term> terms_dependent=null;
  ArrayList<Term> terms_independent=null;
  HashMap<Term,Term> Values=null;
  HashMap<Term,Term> Values2=null;
  HashMap<Term,Term> Values3=null;
  HashMap<Term,Term> Values4=null;
  HashMap<Term,Term> smap=null;
  for (int k=0; k < maxUnificationAttempts; k++) {
    Concept secondConcept=nal.mem().sampleNextConcept();
    if (secondConcept == null) {
      break;
    }
    if (secondConcept.term.equals(first)) {
      continue;
    }
    Term secterm=secondConcept.term;
    Sentence second_belief=secondConcept.getBeliefRandomByConfidence();
    if (second_belief == null)     continue;
    TruthValue truthSecond=second_belief.truth;
    if (terms_dependent == null) {
      final int initialTermListSize=8;
      terms_dependent=new ArrayList<>(initialTermListSize);
      terms_independent=new ArrayList<>(initialTermListSize);
      Values=newVariableSubstitutionMap();
      Values2=newVariableSubstitutionMap();
      Values3=newVariableSubstitutionMap();
      Values4=newVariableSubstitutionMap();
      smap=newVariableSubstitutionMap();
    }
    terms_dependent.clear();
    terms_independent.clear();
    Term[] components_level1=((CompoundTerm)first).term;
    Term secterm_unwrap=unwrapNegation(secterm);
    for (    final Term T1 : components_level1) {
      Term T1_unwrap=unwrapNegation(T1);
      Values.clear();
      smap.clear();
      if (Variables.findSubstitute(Symbols.VAR_DEPENDENT,T1_unwrap,secterm_unwrap,Values,smap)) {
        CompoundTerm ctaskterm_subs=(CompoundTerm)first;
        ctaskterm_subs=ctaskterm_subs.applySubstituteToCompound(Values);
        Term taskterm_subs=reduceUntilLayer2(ctaskterm_subs,secterm,nal.mem());
        if (taskterm_subs != null && !(Variables.indepVarUsedInvalid(taskterm_subs))) {
          terms_dependent.add(taskterm_subs);
        }
      }
      Values2.clear();
      smap.clear();
      if (Variables.findSubstitute(Symbols.VAR_INDEPENDENT,T1_unwrap,secterm_unwrap,Values2,smap)) {
        CompoundTerm ctaskterm_subs=(CompoundTerm)first;
        ctaskterm_subs=ctaskterm_subs.applySubstituteToCompound(Values2);
        Term taskterm_subs=reduceUntilLayer2(ctaskterm_subs,secterm,nal.mem());
        if (taskterm_subs != null && !(Variables.indepVarUsedInvalid(taskterm_subs))) {
          terms_independent.add(taskterm_subs);
        }
      }
      if (!((T1_unwrap instanceof Implication) || (T1_unwrap instanceof Equivalence) || (T1_unwrap instanceof Conjunction)|| (T1_unwrap instanceof Disjunction))) {
        continue;
      }
      if (T1_unwrap instanceof CompoundTerm) {
        Term[] components_level2=((CompoundTerm)T1_unwrap).term;
        for (        final Term T2 : components_level2) {
          Term T2_unwrap=unwrapNegation(T2);
          Values3.clear();
          smap.clear();
          if (Variables.findSubstitute(Symbols.VAR_DEPENDENT,T2_unwrap,secterm_unwrap,Values3,smap)) {
            CompoundTerm ctaskterm_subs=(CompoundTerm)first;
            ctaskterm_subs=ctaskterm_subs.applySubstituteToCompound(Values3);
            Term taskterm_subs=reduceUntilLayer2(ctaskterm_subs,secterm,nal.mem());
            if (taskterm_subs != null && !(Variables.indepVarUsedInvalid(taskterm_subs))) {
              terms_dependent.add(taskterm_subs);
            }
          }
          Values4.clear();
          smap.clear();
          if (Variables.findSubstitute(Symbols.VAR_INDEPENDENT,T2_unwrap,secterm_unwrap,Values4,smap)) {
            CompoundTerm ctaskterm_subs=(CompoundTerm)first;
            ctaskterm_subs=ctaskterm_subs.applySubstituteToCompound(Values4);
            Term taskterm_subs=reduceUntilLayer2(ctaskterm_subs,secterm,nal.mem());
            if (taskterm_subs != null && !(Variables.indepVarUsedInvalid(taskterm_subs))) {
              terms_independent.add(taskterm_subs);
            }
          }
        }
      }
    }
    if (taskSentence.truth == null)     throw new RuntimeException(""String_Node_Str"" + taskSentence);
    Stamp ss=new Stamp(taskSentence.stamp,second_belief.stamp,nal.getTime());
    dedSecondLayerVariableUnificationTerms(nal,task,second_belief,ss,terms_dependent,anonymousAnalogy(taskSentence.truth,truthSecond),taskSentence.truth,truthSecond,false);
    dedSecondLayerVariableUnificationTerms(nal,task,second_belief,ss,terms_independent,deduction(taskSentence.truth,truthSecond),taskSentence.truth,truthSecond,true);
    final int termsIndependent=terms_independent.size();
    for (int i=0; i < termsIndependent; i++) {
      Term result=terms_independent.get(i);
      if (Sentence.invalidSentenceTerm(result)) {
        continue;
      }
      TruthValue truth=deduction(taskSentence.truth,truthSecond);
      char mark=Symbols.JUDGMENT_MARK;
      if (taskSentence.isGoal() || second_belief.isGoal()) {
        truth=TruthFunctions.abduction(taskSentence.truth,truthSecond);
        mark=Symbols.GOAL_MARK;
      }
      Stamp useEvidentalBase=new Stamp(taskSentence.stamp,second_belief.stamp,nal.getTime());
      Sentence newSentence=new Sentence(result,mark,truth,new Stamp(taskSentence.stamp,nal.getTime(),useEvidentalBase));
      BudgetValue budget=BudgetFunctions.compoundForward(truth,newSentence.content,nal);
      if (budget.aboveThreshold()) {
        Task newTask=new Task(newSentence,budget,task,null);
        Task dummy=new Task(second_belief,budget,task,null);
        nal.setCurrentBelief(taskSentence);
        nal.setCurrentTask(dummy);
        if (nal.derivedTask(newTask,false,false,task,second_belief)) {
          nal.mem().logic.DED_SECOND_LAYER_VARIABLE_UNIFICATION.commit();
          nal.emit(Events.ConceptUnification.class,newTask,first,secondConcept,second_belief);
          unifiedAnything=true;
        }
      }
    }
    remainingUnifications--;
    if (remainingUnifications == 0) {
      break;
    }
  }
  return unifiedAnything;
}",0.9984459984459984
166719,"public static Equivalence make(Term subject,Term predicate,int temporalOrder){
  if (subject == null || predicate == null || invalidStatement(subject,predicate)) {
    return null;
  }
  if ((subject instanceof Implication) || (subject instanceof Equivalence) || (predicate instanceof Implication)|| (predicate instanceof Equivalence)) {
    return null;
  }
  if (subject.equals(predicate))   return null;
  if ((temporalOrder == TemporalRules.ORDER_BACKWARD) || ((subject.compareTo(predicate) > 0) && (temporalOrder != TemporalRules.ORDER_FORWARD))) {
    Term interm=subject;
    subject=predicate;
    predicate=interm;
  }
  NativeOperator copula;
switch (temporalOrder) {
case TemporalRules.ORDER_BACKWARD:
    temporalOrder=TemporalRules.ORDER_FORWARD;
case TemporalRules.ORDER_FORWARD:
  copula=NativeOperator.EQUIVALENCE_AFTER;
break;
case TemporalRules.ORDER_CONCURRENT:
copula=NativeOperator.EQUIVALENCE_WHEN;
break;
default :
copula=NativeOperator.EQUIVALENCE;
}
Term[] t=Term.toSortedSetArray(subject,predicate);
if (t.length != 2) return null;
return new Equivalence(t,temporalOrder);
}","public static Equivalence make(Term subject,Term predicate,int temporalOrder){
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  if ((subject instanceof Implication) || (subject instanceof Equivalence) || (predicate instanceof Implication)|| (predicate instanceof Equivalence)) {
    return null;
  }
  if ((temporalOrder == TemporalRules.ORDER_BACKWARD) || ((subject.compareTo(predicate) > 0) && (temporalOrder != TemporalRules.ORDER_FORWARD))) {
    Term interm=subject;
    subject=predicate;
    predicate=interm;
  }
  NativeOperator copula;
switch (temporalOrder) {
case TemporalRules.ORDER_BACKWARD:
    temporalOrder=TemporalRules.ORDER_FORWARD;
case TemporalRules.ORDER_FORWARD:
  copula=NativeOperator.EQUIVALENCE_AFTER;
break;
case TemporalRules.ORDER_CONCURRENT:
copula=NativeOperator.EQUIVALENCE_WHEN;
break;
default :
copula=NativeOperator.EQUIVALENCE;
}
Term[] t=Term.toSortedSetArray(subject,predicate);
if (t.length != 2) return null;
return new Equivalence(t,temporalOrder);
}",0.8143939393939394
166720,"public static Implication make(final Term subject,final Term predicate,int temporalOrder){
  if ((subject == null) || (predicate == null)) {
    return null;
  }
  if ((subject instanceof Implication) || (subject instanceof Equivalence) || (predicate instanceof Equivalence)) {
    return null;
  }
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  if (predicate instanceof Implication) {
    final Term oldCondition=((Statement)predicate).getSubject();
    if ((oldCondition instanceof Conjunction) && oldCondition.containsTerm(subject)) {
      return null;
    }
    final Term newCondition=Conjunction.make(subject,oldCondition,temporalOrder);
    return make(newCondition,((Statement)predicate).getPredicate(),temporalOrder);
  }
 else {
    return new Implication(new Term[]{subject,predicate},temporalOrder);
  }
}","public static Implication make(final Term subject,final Term predicate,int temporalOrder){
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  if ((subject instanceof Implication) || (subject instanceof Equivalence) || (predicate instanceof Equivalence)) {
    return null;
  }
  if (predicate instanceof Implication) {
    final Term oldCondition=((Statement)predicate).getSubject();
    if ((oldCondition instanceof Conjunction) && oldCondition.containsTerm(subject)) {
      return null;
    }
    final Term newCondition=Conjunction.make(subject,oldCondition,temporalOrder);
    return make(newCondition,((Statement)predicate).getPredicate(),temporalOrder);
  }
 else {
    return new Implication(new Term[]{subject,predicate},temporalOrder);
  }
}",0.7865588052271313
166721,"/** 
 * alternate version of Inheritance.make that allows equivalent subject and predicate to be reduced to the common term.      
 */
public static Term makeTerm(final Term subject,final Term predicate){
  if (subject.equals(predicate))   return subject;
  return make(subject,predicate);
}","/** 
 * alternate version of Inheritance.make that allows equivalent subject and predicate to be reduced to the common term.      
 */
public static Term makeTerm(final Term subject,final Term predicate){
  return make(subject,predicate);
}",0.903954802259887
166722,"/** 
 * Try to make a new compound from two term. Called by the inference rules.
 * @param subject The first component
 * @param predicate The second component
 * @param memory Reference to the memory
 * @return A compound generated or null
 */
public static Similarity make(final Term subject,final Term predicate){
  if (subject == null || predicate == null || invalidStatement(subject,predicate)) {
    return null;
  }
  if (subject.compareTo(predicate) > 0) {
    return make(predicate,subject);
  }
  return new Similarity(subject,predicate);
}","/** 
 * Try to make a new compound from two term. Called by the inference rules.
 * @param subject The first component
 * @param predicate The second component
 * @param memory Reference to the memory
 * @return A compound generated or null
 */
public static Similarity make(final Term subject,final Term predicate){
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  if (subject.compareTo(predicate) > 0) {
    return make(predicate,subject);
  }
  return new Similarity(subject,predicate);
}",0.6660377358490566
166723,"/** 
 * Check if one term is identical to or included in another one, except in a reflexive relation <p>
 * @param t1 The first term
 * @param t2 The second term
 * @return Whether they cannot be related in a statement
 */
private static boolean invalidReflexive(final Term t1,final Term t2){
  if (!(t1 instanceof CompoundTerm)) {
    return false;
  }
  final CompoundTerm com=(CompoundTerm)t1;
  if ((com instanceof ImageExt) || (com instanceof ImageInt)) {
    return false;
  }
  return com.containsTerm(t2);
}","/** 
 * Check if one term is identical to or included in another one, except in a reflexive relation <p>
 * @param t1 The first term
 * @param t2 The second term
 * @return Whether they cannot be related in a statement
 */
private static boolean invalidReflexive(final Term t1,final Term t2){
  if (!(t1 instanceof CompoundTerm)) {
    return false;
  }
  final CompoundTerm ct1=(CompoundTerm)t1;
  if ((ct1 instanceof ImageExt) || (ct1 instanceof ImageInt)) {
    return false;
  }
  return ct1.containsTerm(t2);
}",0.9844660194174756
166724,"/** 
 * Check the validity of a potential Statement. [To be refined] <p>
 * @param subject The first component
 * @param predicate The second component
 * @return Whether The Statement is invalid
 */
final public static boolean invalidStatement(final Term subject,final Term predicate){
  if (subject.equals(predicate)) {
    return true;
  }
  if (invalidReflexive(subject,predicate)) {
    return true;
  }
  if (invalidReflexive(predicate,subject)) {
    return true;
  }
  if ((subject instanceof Statement) && (predicate instanceof Statement)) {
    final Statement s1=(Statement)subject;
    final Statement s2=(Statement)predicate;
    final Term t11=s1.getSubject();
    final Term t22=s2.getPredicate();
    final Term t12=s1.getPredicate();
    final Term t21=s2.getSubject();
    if (t11.equals(t22) && t12.equals(t21)) {
      return true;
    }
  }
  return false;
}","/** 
 * Check the validity of a potential Statement. [To be refined] <p>
 * @param subject The first component
 * @param predicate The second component
 * @return Whether The Statement is invalid
 */
final public static boolean invalidStatement(final Term subject,final Term predicate){
  if (subject == null || predicate == null)   return true;
  if (subject.equals(predicate)) {
    return true;
  }
  if (invalidReflexive(subject,predicate)) {
    return true;
  }
  if (invalidReflexive(predicate,subject)) {
    return true;
  }
  if ((subject instanceof Statement) && (predicate instanceof Statement)) {
    final Statement s1=(Statement)subject;
    final Statement s2=(Statement)predicate;
    final Term t11=s1.getSubject();
    final Term t22=s2.getPredicate();
    final Term t12=s1.getPredicate();
    final Term t21=s2.getSubject();
    if (t11.equals(t22) && t12.equals(t21)) {
      return true;
    }
  }
  return false;
}",0.9675288937809576
166725,"/** 
 * Make a Statement from given term, called by the rules
 * @param order The temporal order of the statement
 * @return The Statement built
 * @param subj The first component
 * @param pred The second component
 * @param statement A sample statement providing the class type
 * @param memory Reference to the memory
 */
final public static Statement make(final Statement statement,final Term subj,final Term pred,int order){
  if (subj == null || pred == null || invalidStatement(subj,pred)) {
    return null;
  }
  if (statement instanceof Inheritance) {
    return Inheritance.make(subj,pred);
  }
  if (statement instanceof Similarity) {
    return Similarity.make(subj,pred);
  }
  if (statement instanceof Implication) {
    return Implication.make(subj,pred,order);
  }
  if (statement instanceof Equivalence) {
    return Equivalence.make(subj,pred,order);
  }
  throw new RuntimeException(""String_Node_Str"" + statement.getClass().getSimpleName() + ""String_Node_Str""+ subj+ ""String_Node_Str""+ pred+ ""String_Node_Str""+ order);
}","/** 
 * Make a Statement from given term, called by the rules
 * @param order The temporal order of the statement
 * @return The Statement built
 * @param subj The first component
 * @param pred The second component
 * @param statement A sample statement providing the class type
 * @param memory Reference to the memory
 */
final public static Statement make(final Statement statement,final Term subj,final Term pred,int order){
  return make(statement.operator(),subj,pred);
}",0.5915678524374176
166726,"/** 
 * performs a thorough check of the validity of a term (by cloneDeep it) to see if it's valid 
 */
public static boolean valid(Term content){
  try {
    Term cloned=content.cloneDeep();
    return true;
  }
 catch (  Throwable e) {
    return false;
  }
}","/** 
 * performs a thorough check of the validity of a term (by cloneDeep it) to see if it's valid 
 */
public static boolean valid(Term content){
  try {
    Term cloned=content.cloneDeep();
    return cloned != null;
  }
 catch (  Throwable e) {
    return false;
  }
}",0.9661654135338346
166727,"public void recurseTerms(final TermVisitor v){
  v.visit(this);
  if (this instanceof CompoundTerm) {
    for (    Term t : ((CompoundTerm)this).term) {
      t.recurseTerms(v);
    }
  }
}","public void recurseTerms(final TermVisitor v,Term parent){
  v.visit(this,parent);
  if (this instanceof CompoundTerm) {
    for (    Term t : ((CompoundTerm)this).term) {
      t.recurseTerms(v,this);
    }
  }
}",0.9402985074626866
166728,public void visit(Term t);,"public void visit(Term t,Term superterm);",0.7761194029850746
166729,"@Override public void vertex(AbstractGraphVis<Item,Object> g,VertexVis<Item,Object> v){
  float priority=v.getVertex().getPriority();
  double radius=(1.0 - priority) * spacing + 8;
  float angle=((arcStop - arcStart) * Video.hashFloat(v.vertex.hashCode()) + arcStart) * ((float)Math.PI * 2f);
  v.tx=(float)(Math.cos(angle) * radius) * spacing;
  v.ty=(float)(Math.sin(angle) * radius) * spacing;
}","@Override public void vertex(AbstractGraphVis<Item,Object> g,VertexVis<Item,Object> v){
  if (v.getVertex() instanceof Item) {
    float priority=v.getVertex().getPriority();
    double radius=(1.0 - priority) * spacing + 8;
    float angle=((arcStop - arcStart) * Video.hashFloat(v.vertex.hashCode()) + arcStart) * ((float)Math.PI * 2f);
    v.tx=(float)(Math.cos(angle) * radius) * spacing;
    v.ty=(float)(Math.sin(angle) * radius) * spacing;
  }
}",0.9377203290246768
166730,"/** 
 * Shared final operations by all double-premise rules, called from the rules except StructuralRules
 * @param newContent The content of the sentence in task
 * @param newTruth The truth value of the sentence in task
 * @param newBudget The budget value in task
 */
public Task doublePremiseTask(final Term newContent,final TruthValue newTruth,final BudgetValue newBudget,boolean temporalAdd){
  if (!newBudget.aboveThreshold()) {
    return null;
  }
  Task derived=null;
  if (newContent != null) {
{
      final Sentence newSentence=new Sentence(newContent,getCurrentTask().sentence.punctuation,newTruth,getTheNewStamp());
      final Task newTask=Task.make(newSentence,newBudget,getCurrentTask(),getCurrentBelief());
      if (newTask != null) {
        boolean added=derivedTask(newTask,false,false,null,null);
        if (added && temporalAdd) {
          memory.temporalRuleOutputToGraph(newSentence,newTask);
        }
        if (added) {
          derived=newTask;
        }
      }
    }
  }
  return derived;
}","/** 
 * Shared final operations by all double-premise rules, called from the rules except StructuralRules
 * @param newContent The content of the sentence in task
 * @param newTruth The truth value of the sentence in task
 * @param newBudget The budget value in task
 */
public Task doublePremiseTask(final Term newContent,final TruthValue newTruth,final BudgetValue newBudget,boolean temporalAdd){
  if (!newBudget.aboveThreshold()) {
    return null;
  }
  if (newContent != null) {
    final Sentence newSentence=new Sentence(newContent,getCurrentTask().sentence.punctuation,newTruth,getTheNewStamp());
    final Task newTask=Task.make(newSentence,newBudget,getCurrentTask(),getCurrentBelief());
    Task derived=null;
    if (newTask != null) {
      boolean added=derivedTask(newTask,false,false,null,null);
      if (added && temporalAdd) {
        memory.temporalRuleOutputToGraph(newSentence,newTask);
      }
      if (added) {
        derived=newTask;
      }
    }
    return derived;
  }
  return null;
}",0.9437102300538424
166731,"/** 
 * Create a Sentence with the given fields
 * @param content The Term that forms the content of the sentence
 * @param punctuation The punctuation indicating the type of the sentence
 * @param truth The truth value of the sentence, null for question
 * @param stamp The stamp of the sentence indicating its derivation time andbase
 */
public Sentence(final T _content,final char punctuation,final TruthValue truth,final Stamp stamp){
  this.punctuation=punctuation;
  if ((!isQuestion() && !isQuest()) && (truth == null)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((isQuestion() || isQuest()) && !stamp.isEternal()) {
    stamp.setEternal();
  }
  this.truth=truth;
  this.stamp=stamp;
  this.revisible=!((_content instanceof Conjunction) && _content.hasVarDep());
  if (_content.hasVar() && (_content instanceof CompoundTerm) && (!((CompoundTerm)_content).isNormalized())) {
    this.content=(T)((CompoundTerm)_content).cloneDeepVariables();
    if (this.content == null) {
      throw new RuntimeException(""String_Node_Str"" + _content);
    }
    final CompoundTerm c=(CompoundTerm)content;
    List<Variable> vars=new ArrayList();
    Map<CharSequence,CharSequence> rename=new HashMap();
    c.recurseVariableTerms(new Term.TermVisitor(){
      @Override public void visit(      final Term t){
        if (t instanceof Variable) {
          Variable v=((Variable)t);
          if (v.getScope() != v) {
            v.setScope(c,v.name());
          }
          vars.add(v);
        }
      }
    }
);
    boolean renamed=false;
    for (    final Variable v : vars) {
      CharSequence vname=v.name();
      CharSequence n=rename.get(vname);
      if (n == null) {
        rename.put(vname,n=Variable.getName(v.getType(),rename.size() + 1));
        renamed=true;
      }
      v.setScope(c,n);
    }
    c.setNormalized(true);
    if (renamed)     ((CompoundTerm)content).invalidateName();
  }
 else {
    this.content=_content;
  }
  if (isUniqueByOcurrenceTime())   this.hash=Objects.hash(content,punctuation,truth,stamp.getOccurrenceTime());
 else   this.hash=Objects.hash(content,punctuation,truth);
}","/** 
 * Create a Sentence with the given fields
 * @param content The Term that forms the content of the sentence
 * @param punctuation The punctuation indicating the type of the sentence
 * @param truth The truth value of the sentence, null for question
 * @param stamp The stamp of the sentence indicating its derivation time andbase
 */
public Sentence(final T _content,final char punctuation,final TruthValue truth,final Stamp stamp){
  this.punctuation=punctuation;
  if ((!isQuestion() && !isQuest()) && (truth == null)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((isQuestion() || isQuest()) && !stamp.isEternal()) {
    stamp.setEternal();
  }
  this.truth=truth;
  this.stamp=stamp;
  this.revisible=!((_content instanceof Conjunction) && _content.hasVarDep());
  if (_content.hasVar() && (_content instanceof CompoundTerm) && (!((CompoundTerm)_content).isNormalized())) {
    this.content=(T)((CompoundTerm)_content).cloneDeepVariables();
    final CompoundTerm c=(CompoundTerm)content;
    List<Variable> vars=new ArrayList();
    c.recurseVariableTerms(new Term.TermVisitor(){
      @Override public void visit(      final Term t){
        if (t instanceof Variable) {
          Variable v=((Variable)t);
          vars.add(v);
        }
      }
    }
);
    Map<CharSequence,CharSequence> rename=new HashMap();
    boolean renamed=false;
    for (    final Variable v : vars) {
      CharSequence vname=v.name();
      if (!v.getScope().equals(v) && !v.hasVarIndep()) {
        vname=v.name() + ""String_Node_Str"" + v.getScope().toString();
      }
      CharSequence n=rename.get(vname);
      if (n == null) {
        rename.put(vname,n=Variable.getName(v.getType(),rename.size() + 1));
        renamed=true;
      }
      v.setScope(c,n);
    }
    if (renamed)     c.invalidateName();
    c.setNormalized(true);
  }
 else {
    this.content=_content;
  }
  if (isUniqueByOcurrenceTime())   this.hash=Objects.hash(content,punctuation,truth,stamp.getOccurrenceTime());
 else   this.hash=Objects.hash(content,punctuation,truth);
}",0.6882745471877979
166732,"@Override public void visit(final Term t){
  if (t instanceof Variable) {
    Variable v=((Variable)t);
    if (v.getScope() != v) {
      v.setScope(c,v.name());
    }
    vars.add(v);
  }
}","@Override public void visit(final Term t){
  if (t instanceof Variable) {
    Variable v=((Variable)t);
    vars.add(v);
  }
}",0.7949526813880127
166733,"public static boolean temporalInductionChain(final Sentence s1,final Sentence s2,final nars.core.control.NAL nal){
  if ((s1.truth == null) || (s2.truth == null))   return false;
  Implication S1=(Implication)s1.content;
  Implication S2=(Implication)s2.content;
  Term A=S1.getSubject();
  Term B1=S1.getPredicate();
  Term B2=S2.getSubject();
  Term C=S2.getPredicate();
  ArrayList<Term> args=null;
  int beginoffset=0;
  if (B2 instanceof Conjunction) {
    Conjunction CB2=((Conjunction)B2);
    if (CB2.getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
      if (A instanceof Conjunction && ((Conjunction)A).getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
        Conjunction ConjA=(Conjunction)A;
        args=new ArrayList(CB2.term.length + ConjA.term.length);
        beginoffset=ConjA.size();
        for (        final Term t : ConjA.term)         args.add(t);
      }
 else {
        args=new ArrayList(CB2.term.length + 1);
        args.add(A);
        beginoffset=1;
      }
      for (      final Term t : CB2.term)       args.add(t);
    }
  }
 else {
    args=Lists.newArrayList(A,B1);
  }
  if (args == null)   return false;
  Term[] term=args.toArray(new Term[args.size()]);
  Term realB2=term[beginoffset];
  HashMap<Term,Term> res1=new HashMap<>();
  HashMap<Term,Term> res2=new HashMap<>();
  if (Variables.findSubstitute(Symbols.VAR_INDEPENDENT,B1,realB2,res1,res2)) {
    for (int i=0; i < term.length; i++) {
      if (term[i] instanceof CompoundTerm) {
        term[i]=((CompoundTerm)term[i]).applySubstitute(res1);
        if (term[i] == null) {
          return false;
        }
      }
    }
    int order1=s1.getTemporalOrder();
    int order2=s2.getTemporalOrder();
    Conjunction S=(Conjunction)Conjunction.make(term,order1);
    for (    Term t : term) {
      if (Terms.equalSubTermsInRespectToImageAndProduct(t,C)) {
        return false;
      }
      for (      Term u : term) {
        if (u != t) {
          if (Terms.equalSubTermsInRespectToImageAndProduct(t,u)) {
            return false;
          }
        }
      }
    }
    Implication whole=Implication.make(S,C,order2);
    if (whole != null) {
      TruthValue truth=TruthFunctions.deduction(s1.truth,s2.truth);
      BudgetValue budget=BudgetFunctions.forward(truth,nal);
      budget.setPriority((float)Math.min(0.99,budget.getPriority()));
      if (whole.getTemporalOrder() == TemporalRules.ORDER_FORWARD && whole.getSubject() instanceof Conjunction) {
        Conjunction conj=(Conjunction)whole.getSubject();
        if (conj.getTemporalOrder() == TemporalRules.ORDER_FORWARD && conj.term.length > 0 && !(conj.term[0] instanceof Interval)) {
          Term[] t2=new Term[conj.term.length - 2];
          for (int i=0; i < t2.length; i++) {
            t2[i]=conj.term[i + 2];
          }
          Term reduced=Conjunction.make(t2,TemporalRules.ORDER_FORWARD);
          Implication impnew=Implication.make(reduced,whole.getPredicate(),TemporalRules.ORDER_FORWARD);
          for (          Concept c : nal.memory.concepts) {
            if (!(reduced instanceof Interval) && !c.beliefs.isEmpty() && c.term.equals(impnew)) {
              ArrayList<Long> newBases=new ArrayList<Long>();
              for (int i=0; i < s1.stamp.evidentialBase.length; i++) {
                newBases.add(s1.stamp.evidentialBase[i]);
              }
              for (int i=0; i < s2.stamp.evidentialBase.length; i++) {
                newBases.add(s2.stamp.evidentialBase[i]);
              }
              boolean isCompletelyIn=false;
              for (              ArrayList<Long> ev : c.evidentalDiscountBases) {
                if (ev.size() == newBases.size()) {
                  boolean isAllIn=true;
                  for (                  Long bas : ev) {
                    boolean isIn=false;
                    for (                    Long bas2 : newBases) {
                      if (Objects.equals(bas,bas2)) {
                        isIn=true;
                        break;
                      }
                    }
                    if (isIn == false) {
                      isAllIn=false;
                    }
                  }
                  if (isAllIn) {
                    isCompletelyIn=true;
                    break;
                  }
                }
              }
              if (!isCompletelyIn) {
                c.evidentalDiscountBases.add(newBases);
                c.discountConfidence(true);
              }
            }
          }
        }
      }
      return nal.doublePremiseTask(whole,truth,budget,true) != null;
    }
  }
  return false;
}","public static boolean temporalInductionChain(final Sentence s1,final Sentence s2,final nars.core.control.NAL nal){
  if ((s1.truth == null) || (s2.truth == null))   return false;
  Implication S1=(Implication)s1.content;
  Implication S2=(Implication)s2.content;
  Term A=S1.getSubject();
  Term B1=S1.getPredicate();
  Term B2=S2.getSubject();
  Term C=S2.getPredicate();
  ArrayList<Term> args=null;
  int beginoffset=0;
  if (B2 instanceof Conjunction) {
    Conjunction CB2=((Conjunction)B2);
    if (CB2.getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
      if (A instanceof Conjunction && ((Conjunction)A).getTemporalOrder() == TemporalRules.ORDER_FORWARD) {
        Conjunction ConjA=(Conjunction)A;
        args=new ArrayList(CB2.term.length + ConjA.term.length);
        beginoffset=ConjA.size();
        for (        final Term t : ConjA.term)         args.add(t);
      }
 else {
        args=new ArrayList(CB2.term.length + 1);
        args.add(A);
        beginoffset=1;
      }
      for (      final Term t : CB2.term)       args.add(t);
    }
  }
 else {
    args=Lists.newArrayList(A,B1);
  }
  if (args == null)   return false;
  Term[] term=args.toArray(new Term[args.size()]);
  Term realB2=term[beginoffset];
  HashMap<Term,Term> res1=new HashMap<>();
  HashMap<Term,Term> res2=new HashMap<>();
  if (Variables.findSubstitute(Symbols.VAR_INDEPENDENT,B1,realB2,res1,res2)) {
    for (int i=0; i < term.length; i++) {
      if (term[i] instanceof CompoundTerm) {
        term[i]=((CompoundTerm)term[i]).applySubstitute(res1);
        if (term[i] == null) {
          return false;
        }
      }
    }
    int order1=s1.getTemporalOrder();
    int order2=s2.getTemporalOrder();
    Term S=Conjunction.make(term,order1);
    for (    Term t : term) {
      if (Terms.equalSubTermsInRespectToImageAndProduct(t,C)) {
        return false;
      }
      for (      Term u : term) {
        if (u != t) {
          if (Terms.equalSubTermsInRespectToImageAndProduct(t,u)) {
            return false;
          }
        }
      }
    }
    Implication whole=Implication.make(S,C,order2);
    if (whole != null) {
      TruthValue truth=TruthFunctions.deduction(s1.truth,s2.truth);
      BudgetValue budget=BudgetFunctions.forward(truth,nal);
      budget.setPriority((float)Math.min(0.99,budget.getPriority()));
      if (whole.getTemporalOrder() == TemporalRules.ORDER_FORWARD && whole.getSubject() instanceof Conjunction) {
        Conjunction conj=(Conjunction)whole.getSubject();
        if (conj.getTemporalOrder() == TemporalRules.ORDER_FORWARD && conj.term.length > 0 && !(conj.term[0] instanceof Interval)) {
          Term[] t2=new Term[conj.term.length - 2];
          for (int i=0; i < t2.length; i++) {
            t2[i]=conj.term[i + 2];
          }
          Term reduced=Conjunction.make(t2,TemporalRules.ORDER_FORWARD);
          Implication impnew=Implication.make(reduced,whole.getPredicate(),TemporalRules.ORDER_FORWARD);
          for (          Concept c : nal.memory.concepts) {
            if (!(reduced instanceof Interval) && !c.beliefs.isEmpty() && c.term.equals(impnew)) {
              ArrayList<Long> newBases=new ArrayList<Long>();
              for (int i=0; i < s1.stamp.evidentialBase.length; i++) {
                newBases.add(s1.stamp.evidentialBase[i]);
              }
              for (int i=0; i < s2.stamp.evidentialBase.length; i++) {
                newBases.add(s2.stamp.evidentialBase[i]);
              }
              boolean isCompletelyIn=false;
              for (              ArrayList<Long> ev : c.evidentalDiscountBases) {
                if (ev.size() == newBases.size()) {
                  boolean isAllIn=true;
                  for (                  Long bas : ev) {
                    boolean isIn=false;
                    for (                    Long bas2 : newBases) {
                      if (Objects.equals(bas,bas2)) {
                        isIn=true;
                        break;
                      }
                    }
                    if (isIn == false) {
                      isAllIn=false;
                    }
                  }
                  if (isAllIn) {
                    isCompletelyIn=true;
                    break;
                  }
                }
              }
              if (!isCompletelyIn) {
                c.evidentalDiscountBases.add(newBases);
                c.discountConfidence(true);
              }
            }
          }
        }
      }
      return nal.doublePremiseTask(whole,truth,budget,true) != null;
    }
  }
  return false;
}",0.9969578444154716
166734,"@Override public CompoundTerm cloneDeep(){
  Term c=clone(cloneTermsDeep());
  if (c.getClass() != getClass())   throw new RuntimeException(""String_Node_Str"" + c + ""String_Node_Str""+ this);
  if (isNormalized())   ((CompoundTerm)c).setNormalized(true);
  return (CompoundTerm)c;
}","@Override public CompoundTerm cloneDeep(){
  Term c=clone(cloneTermsDeep());
  if (c == null)   throw new UnableToCloneException(""String_Node_Str"" + this);
  if (c.getClass() != getClass())   throw new UnableToCloneException(""String_Node_Str"" + c + ""String_Node_Str""+ this);
  if (isNormalized())   ((CompoundTerm)c).setNormalized(true);
  return (CompoundTerm)c;
}",0.8496124031007752
166735,"public void invalidateName(){
  this.name=null;
  for (  Term t : term) {
    if (t.hasVar())     if (t instanceof CompoundTerm)     ((CompoundTerm)t).invalidateName();
  }
}","public void invalidateName(){
  this.name=null;
  for (  Term t : term) {
    if (t.hasVar())     if (t instanceof CompoundTerm)     ((CompoundTerm)t).invalidateName();
  }
  setNormalized(false);
}",0.935483870967742
166736,"public CompoundTerm cloneDeepVariables(){
  Term c=clone(cloneVariableTermsDeep());
  if (c == null)   throw new RuntimeException(""String_Node_Str"" + this);
  if (c.getClass() != getClass())   throw new RuntimeException(""String_Node_Str"" + c + ""String_Node_Str""+ this);
  return (CompoundTerm)c;
}","public CompoundTerm cloneDeepVariables(){
  Term c=clone(cloneVariableTermsDeep());
  if (c == null)   throw new UnableToCloneException(""String_Node_Str"" + this);
  if (c.getClass() != getClass())   throw new UnableToCloneException(""String_Node_Str"" + c + ""String_Node_Str""+ this);
  return (CompoundTerm)c;
}",0.9405940594059404
166737,"/** 
 * Constructor with partial values, called by make
 * @param arg The component list of the term
 */
protected Conjunction(final Term[] arg,final int order,boolean normalized){
  super(arg);
  temporalOrder=order;
  init(arg);
  if (normalized)   setNormalized(true);
}","/** 
 * Constructor with partial values, called by make
 * @param arg The component list of the term
 */
protected Conjunction(final Term[] arg,final int order,boolean normalized){
  super(arg);
  temporalOrder=order;
  init(arg);
}",0.9188118811881189
166738,"/** 
 * Make a Statement from given term, called by the rules
 * @param order The temporal order of the statement
 * @return The Statement built
 * @param subj The first component
 * @param pred The second component
 * @param statement A sample statement providing the class type
 * @param memory Reference to the memory
 */
final public static Statement make(final Statement statement,final Term subj,final Term pred,int order){
  if (subj == null || pred == null) {
    return null;
  }
  if (statement instanceof Inheritance) {
    return Inheritance.make(subj,pred);
  }
  if (statement instanceof Similarity) {
    return Similarity.make(subj,pred);
  }
  if (statement instanceof Implication) {
    return Implication.make(subj,pred,order);
  }
  if (statement instanceof Equivalence) {
    return Equivalence.make(subj,pred,order);
  }
  throw new RuntimeException(""String_Node_Str"" + statement.getClass().getSimpleName() + ""String_Node_Str""+ subj+ ""String_Node_Str""+ pred+ ""String_Node_Str""+ order);
}","/** 
 * Make a Statement from given term, called by the rules
 * @param order The temporal order of the statement
 * @return The Statement built
 * @param subj The first component
 * @param pred The second component
 * @param statement A sample statement providing the class type
 * @param memory Reference to the memory
 */
final public static Statement make(final Statement statement,final Term subj,final Term pred,int order){
  if (subj == null || pred == null || invalidStatement(subj,pred)) {
    return null;
  }
  if (statement instanceof Inheritance) {
    return Inheritance.make(subj,pred);
  }
  if (statement instanceof Similarity) {
    return Similarity.make(subj,pred);
  }
  if (statement instanceof Implication) {
    return Implication.make(subj,pred,order);
  }
  if (statement instanceof Equivalence) {
    return Equivalence.make(subj,pred,order);
  }
  throw new RuntimeException(""String_Node_Str"" + statement.getClass().getSimpleName() + ""String_Node_Str""+ subj+ ""String_Node_Str""+ pred+ ""String_Node_Str""+ order);
}",0.9848706686188384
166739,"/** 
 * Derived task comes from the inference rules.
 * @param task the derived task
 */
public boolean derivedTask(final Task task,final boolean revised,final boolean single,Sentence occurence,Sentence occurence2){
  if (task.sentence.content instanceof Operation) {
    if (((Operation)task.sentence.content).getPredicate() == memory.getOperator(""String_Node_Str"")) {
      boolean breakpoint=true;
    }
  }
  if (task.sentence.content instanceof Implication && ((Implication)task.sentence.content).getTemporalOrder() == TemporalRules.ORDER_BACKWARD) {
    return false;
  }
  if (!task.budget.aboveThreshold()) {
    memory.removeTask(task,""String_Node_Str"");
    return false;
  }
  if (task.sentence != null && task.sentence.truth != null) {
    float conf=task.sentence.truth.getConfidence();
    if (conf == 0) {
      memory.removeTask(task,""String_Node_Str"");
      return false;
    }
  }
  if (Parameters.DERIVE_ONLY_DEMANDED_TASKS) {
    if ((task.sentence.punctuation == Symbols.JUDGMENT_MARK) && !(task.sentence.content instanceof Operation)) {
      boolean noConcept=memory.concept(task.sentence.content) == null;
      if (noConcept) {
        memory.removeTask(task,""String_Node_Str"");
        return false;
      }
    }
  }
  final Stamp stamp=task.sentence.stamp;
  if (occurence != null && !occurence.isEternal()) {
    stamp.setOccurrenceTime(occurence.getOccurenceTime());
  }
  if (occurence2 != null && !occurence2.isEternal()) {
    stamp.setOccurrenceTime(occurence2.getOccurenceTime());
  }
  if (stamp.latency > 0) {
    memory.logic.DERIVATION_LATENCY.commit(stamp.latency);
  }
  final Term currentTaskContent=getCurrentTask().getContent();
  if (getCurrentBelief() != null && getCurrentBelief().isJudgment()) {
    final Term currentBeliefContent=getCurrentBelief().content;
    stamp.chainRemove(currentBeliefContent);
    stamp.chainAdd(currentBeliefContent);
  }
  if (currentBelief == null && single && currentTask != null && currentTask.sentence.isJudgment()) {
    stamp.chainRemove(currentTaskContent);
    stamp.chainAdd(currentTaskContent);
  }
  if (currentTask != null && !single && currentTask.sentence.isJudgment()) {
    stamp.chainRemove(currentTaskContent);
    stamp.chainAdd(currentTaskContent);
  }
  if (!revised) {
    Term tc=task.getContent();
    if (task.sentence.isJudgment()) {
      Term ptc=task.getParentTask() != null ? task.getParentTask().getContent() : null;
      if ((task.getParentTask() == null) || (!(ptc.equals(Negation.make(tc))) && !(tc.equals(Negation.make(ptc))))) {
        final Collection<Term> chain=stamp.getChain();
        for (        final Term chain1 : chain) {
          if (tc.equals(chain1)) {
            memory.removeTask(task,""String_Node_Str"");
            return false;
          }
        }
      }
    }
  }
 else {
    final int stampLength=stamp.baseLength;
    for (int i=0; i < stampLength; i++) {
      final long baseI=stamp.evidentialBase[i];
      for (int j=0; j < stampLength; j++) {
        if ((i != j) && (baseI == stamp.evidentialBase[j])) {
          memory.removeTask(task,""String_Node_Str"");
          return false;
        }
      }
    }
  }
  if (task.sentence.content instanceof Operation) {
    Operation op=(Operation)task.sentence.content;
    if (op.getSubject() instanceof Variable || op.getPredicate() instanceof Variable) {
      return false;
    }
  }
  memory.event.emit(Events.TaskDerive.class,task,revised,single,occurence,occurence2);
  memory.logic.TASK_DERIVED.commit(task.budget.getPriority());
  addTask(task,""String_Node_Str"");
  return true;
}","/** 
 * Derived task comes from the inference rules.
 * @param task the derived task
 */
public boolean derivedTask(final Task task,final boolean revised,final boolean single,Sentence occurence,Sentence occurence2){
  if (task.sentence.content instanceof Operation) {
    if (((Operation)task.sentence.content).getPredicate() == memory.getOperator(""String_Node_Str"") && task.sentence.punctuation == Symbols.GOAL_MARK) {
      boolean breakpoint=true;
    }
  }
  if (task.sentence.content instanceof Implication && ((Implication)task.sentence.content).getTemporalOrder() == TemporalRules.ORDER_BACKWARD) {
    return false;
  }
  if (!task.budget.aboveThreshold()) {
    memory.removeTask(task,""String_Node_Str"");
    return false;
  }
  if (task.sentence != null && task.sentence.truth != null) {
    float conf=task.sentence.truth.getConfidence();
    if (conf == 0) {
      memory.removeTask(task,""String_Node_Str"");
      return false;
    }
  }
  if (Parameters.DERIVE_ONLY_DEMANDED_TASKS) {
    if ((task.sentence.punctuation == Symbols.JUDGMENT_MARK) && !(task.sentence.content instanceof Operation)) {
      boolean noConcept=memory.concept(task.sentence.content) == null;
      if (noConcept) {
        memory.removeTask(task,""String_Node_Str"");
        return false;
      }
    }
  }
  final Stamp stamp=task.sentence.stamp;
  if (occurence != null && !occurence.isEternal()) {
    stamp.setOccurrenceTime(occurence.getOccurenceTime());
  }
  if (occurence2 != null && !occurence2.isEternal()) {
    stamp.setOccurrenceTime(occurence2.getOccurenceTime());
  }
  if (stamp.latency > 0) {
    memory.logic.DERIVATION_LATENCY.commit(stamp.latency);
  }
  final Term currentTaskContent=getCurrentTask().getContent();
  if (getCurrentBelief() != null && getCurrentBelief().isJudgment()) {
    final Term currentBeliefContent=getCurrentBelief().content;
    stamp.chainRemove(currentBeliefContent);
    stamp.chainAdd(currentBeliefContent);
  }
  if (currentBelief == null && single && currentTask != null && currentTask.sentence.isJudgment()) {
    stamp.chainRemove(currentTaskContent);
    stamp.chainAdd(currentTaskContent);
  }
  if (currentTask != null && !single && currentTask.sentence.isJudgment()) {
    stamp.chainRemove(currentTaskContent);
    stamp.chainAdd(currentTaskContent);
  }
  if (!revised) {
    Term tc=task.getContent();
    if (task.sentence.isJudgment()) {
      Term ptc=task.getParentTask() != null ? task.getParentTask().getContent() : null;
      if ((task.getParentTask() == null) || (!(ptc.equals(Negation.make(tc))) && !(tc.equals(Negation.make(ptc))))) {
        final Collection<Term> chain=stamp.getChain();
        for (        final Term chain1 : chain) {
          if (tc.equals(chain1)) {
            memory.removeTask(task,""String_Node_Str"");
            return false;
          }
        }
      }
    }
  }
 else {
    final int stampLength=stamp.baseLength;
    for (int i=0; i < stampLength; i++) {
      final long baseI=stamp.evidentialBase[i];
      for (int j=0; j < stampLength; j++) {
        if ((i != j) && (baseI == stamp.evidentialBase[j])) {
          memory.removeTask(task,""String_Node_Str"");
          return false;
        }
      }
    }
  }
  if (task.sentence.content instanceof Operation) {
    Operation op=(Operation)task.sentence.content;
    if (op.getSubject() instanceof Variable || op.getPredicate() instanceof Variable) {
      return false;
    }
  }
  memory.event.emit(Events.TaskDerive.class,task,revised,single,occurence,occurence2);
  memory.logic.TASK_DERIVED.commit(task.budget.getPriority());
  addTask(task,""String_Node_Str"");
  return true;
}",0.9930671103716028
166740,"/** 
 * Entry point of the inference engine
 * @param tLink The selected TaskLink, which will provide a task
 * @param bLink The selected TermLink, which may provide a belief
 * @param memory Reference to the memory
 */
public static void reason(final TaskLink tLink,final TermLink bLink,final NAL nal){
  final Memory memory=nal.mem();
  memory.logic.REASON.commit(tLink.getPriority());
  final Task task=nal.getCurrentTask();
  final Sentence taskSentence=task.sentence;
  final Term taskTerm=taskSentence.content;
  final Term beliefTerm=bLink.target;
  if ((taskTerm instanceof Statement) && (taskTerm instanceof Implication) && (taskSentence.isJudgment())) {
    if (((Statement)taskTerm).getSubject() instanceof Negation && bLink.target.equals(((Statement)taskTerm).getSubject())) {
      StructuralRules.contraposition((Statement)taskTerm,taskSentence,nal);
    }
  }
  if (equalSubTermsInRespectToImageAndProduct(taskTerm,beliefTerm))   return;
  Concept beliefConcept=memory.concept(beliefTerm);
  Sentence belief=(beliefConcept != null) ? beliefConcept.getBelief(nal,task) : null;
  nal.setCurrentBelief(belief);
  if (belief != null) {
    InternalOperations(memory,belief,nal,beliefTerm,taskTerm);
    if (beliefTerm instanceof Implication && belief.isEternal() && (beliefTerm.getTemporalOrder() == TemporalRules.ORDER_FORWARD || beliefTerm.getTemporalOrder() == TemporalRules.ORDER_CONCURRENT)) {
      for (int i=0; i < Parameters.TEMPORAL_CHAINING_ATTEMPTS; i++) {
        Task best=nal.memory.temporalCoherences.takeNext();
        if (best == null) {
          break;
        }
        nal.memory.temporalCoherences.putBack(best,memory.param.cycles(memory.param.termLinkForgetDurations),memory);
        Sentence s=best.sentence;
        Term t=s.content;
        if (!(t instanceof Implication) || s.getOccurenceTime() != Stamp.ETERNAL)         continue;
        Implication Imp=(Implication)t;
        if (Imp.getTemporalOrder() != TemporalRules.ORDER_FORWARD && Imp.getTemporalOrder() != TemporalRules.ORDER_CONCURRENT) {
          continue;
        }
        Task sich=nal.getCurrentTask();
        nal.setCurrentTask(best);
        if (TemporalRules.temporalInductionChain(s,belief,nal)) {
          break;
        }
        nal.setCurrentTask(sich);
      }
    }
    if (beliefTerm instanceof Implication && (beliefTerm.getTemporalOrder() == TemporalRules.ORDER_FORWARD || beliefTerm.getTemporalOrder() == TemporalRules.ORDER_CONCURRENT) && taskTerm instanceof Implication&& (taskTerm.getTemporalOrder() == TemporalRules.ORDER_FORWARD || taskTerm.getTemporalOrder() == TemporalRules.ORDER_CONCURRENT)) {
      if (taskSentence.isEternal() && belief.isEternal() || belief.after(taskSentence,memory.param.duration.get())) {
        TemporalRules.temporalInductionChain(taskSentence,belief,nal);
      }
    }
    if (LocalRules.match(task,belief,nal)) {
      return;
    }
  }
  if (CompositionalRules.dedSecondLayerVariableUnification(task,nal)) {
    if (taskSentence.isJudgment())     return;
  }
  nal.setCurrentBelief(belief);
  nal.setCurrentTask(task);
  CompositionalRules.dedConjunctionByQuestion(taskSentence,belief,nal);
  final short tIndex=tLink.getIndex(0);
  short bIndex=bLink.getIndex(0);
switch (tLink.type) {
case TermLink.SELF:
switch (bLink.type) {
case TermLink.COMPONENT:
      compoundAndSelf((CompoundTerm)taskTerm,beliefTerm,true,bIndex,nal);
    break;
case TermLink.COMPOUND:
  compoundAndSelf((CompoundTerm)beliefTerm,taskTerm,false,bIndex,nal);
break;
case TermLink.COMPONENT_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Statement) {
  SyllogisticRules.detachment(taskSentence,belief,bIndex,nal);
}
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
SyllogisticRules.detachment(belief,taskSentence,bIndex,nal);
}
break;
case TermLink.COMPONENT_CONDITION:
if ((belief != null) && (taskTerm instanceof Implication)) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd((Implication)taskTerm,bIndex,beliefTerm,tIndex,nal);
}
break;
case TermLink.COMPOUND_CONDITION:
if ((belief != null) && (taskTerm instanceof Implication) && (beliefTerm instanceof Implication)) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd((Implication)beliefTerm,bIndex,taskTerm,tIndex,nal);
}
break;
}
break;
case TermLink.COMPOUND:
switch (bLink.type) {
case TermLink.COMPOUND:
compoundAndCompound((CompoundTerm)taskTerm,(CompoundTerm)beliefTerm,bIndex,nal);
break;
case TermLink.COMPOUND_STATEMENT:
compoundAndStatement((CompoundTerm)taskTerm,tIndex,(Statement)beliefTerm,bIndex,beliefTerm,nal);
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
if (beliefTerm instanceof Implication) {
Term[] u=new Term[]{beliefTerm,taskTerm};
if (Variables.unify(VAR_INDEPENDENT,((Statement)beliefTerm).getSubject(),taskTerm,u)) {
Sentence newBelief=belief.clone(u[0]);
Sentence newTaskSentence=taskSentence.clone(u[1]);
detachmentWithVar(newBelief,newTaskSentence,bIndex,nal);
}
 else {
SyllogisticRules.conditionalDedInd((Implication)beliefTerm,bIndex,taskTerm,-1,nal);
}
}
 else if (beliefTerm instanceof Equivalence) {
SyllogisticRules.conditionalAna((Equivalence)beliefTerm,bIndex,taskTerm,-1,nal);
}
}
break;
}
break;
case TermLink.COMPOUND_STATEMENT:
switch (bLink.type) {
case TermLink.COMPONENT:
if (taskTerm instanceof Statement) {
componentAndStatement((CompoundTerm)nal.getCurrentTerm(),bIndex,(Statement)taskTerm,tIndex,nal);
}
break;
case TermLink.COMPOUND:
if (taskTerm instanceof Statement) {
compoundAndStatement((CompoundTerm)beliefTerm,bIndex,(Statement)taskTerm,tIndex,beliefTerm,nal);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
syllogisms(tLink,bLink,taskTerm,beliefTerm,nal);
}
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
if ((taskTerm instanceof Statement) && (beliefTerm instanceof Implication)) {
conditionalDedIndWithVar((Implication)beliefTerm,bIndex,(Statement)taskTerm,tIndex,nal);
}
}
break;
}
break;
case TermLink.COMPOUND_CONDITION:
switch (bLink.type) {
case TermLink.COMPOUND:
if (belief != null) {
detachmentWithVar(taskSentence,belief,tIndex,nal);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Implication) {
Term subj=((Statement)taskTerm).getSubject();
if (subj instanceof Negation) {
if (taskSentence.isJudgment()) {
componentAndStatement((CompoundTerm)subj,bIndex,(Statement)taskTerm,tIndex,nal);
}
 else {
componentAndStatement((CompoundTerm)subj,tIndex,(Statement)beliefTerm,bIndex,nal);
}
}
 else {
conditionalDedIndWithVar((Implication)taskTerm,tIndex,(Statement)beliefTerm,bIndex,nal);
}
}
break;
}
break;
}
}
}","/** 
 * Entry point of the inference engine
 * @param tLink The selected TaskLink, which will provide a task
 * @param bLink The selected TermLink, which may provide a belief
 * @param memory Reference to the memory
 */
public static void reason(final TaskLink tLink,final TermLink bLink,final NAL nal){
  final Memory memory=nal.mem();
  memory.logic.REASON.commit(tLink.getPriority());
  final Task task=nal.getCurrentTask();
  final Sentence taskSentence=task.sentence;
  final Term taskTerm=taskSentence.content;
  final Term beliefTerm=bLink.target;
  if ((taskTerm instanceof Statement) && (taskTerm instanceof Implication) && (taskSentence.isJudgment())) {
    if (((Statement)taskTerm).getSubject() instanceof Negation && bLink.target.equals(((Statement)taskTerm).getSubject())) {
      StructuralRules.contraposition((Statement)taskTerm,taskSentence,nal);
    }
  }
  if (equalSubTermsInRespectToImageAndProduct(taskTerm,beliefTerm))   return;
  Concept beliefConcept=memory.concept(beliefTerm);
  Sentence belief=(beliefConcept != null) ? beliefConcept.getBelief(nal,task) : null;
  nal.setCurrentBelief(belief);
  if (belief != null) {
    InternalOperations(memory,belief,nal,beliefTerm,taskTerm);
    if (beliefTerm instanceof Implication && belief.isEternal() && (beliefTerm.getTemporalOrder() == TemporalRules.ORDER_FORWARD || beliefTerm.getTemporalOrder() == TemporalRules.ORDER_CONCURRENT)) {
      for (int i=0; i < Parameters.TEMPORAL_CHAINING_ATTEMPTS; i++) {
        Task best=nal.memory.temporalCoherences.takeNext();
        if (best == null) {
          break;
        }
        nal.memory.temporalCoherences.putBack(best,memory.param.cycles(memory.param.termLinkForgetDurations),memory);
        Sentence s=best.sentence;
        Term t=s.content;
        if (!(t instanceof Implication) || s.getOccurenceTime() != Stamp.ETERNAL)         continue;
        Implication Imp=(Implication)t;
        if (Imp.getTemporalOrder() != TemporalRules.ORDER_FORWARD && Imp.getTemporalOrder() != TemporalRules.ORDER_CONCURRENT) {
          continue;
        }
        Task sich=nal.getCurrentTask();
        nal.setCurrentTask(best);
        if (TemporalRules.temporalInductionChain(s,belief,nal)) {
          break;
        }
        nal.setCurrentTask(sich);
      }
    }
    if (beliefTerm instanceof Implication && (beliefTerm.getTemporalOrder() == TemporalRules.ORDER_FORWARD || beliefTerm.getTemporalOrder() == TemporalRules.ORDER_CONCURRENT) && taskTerm instanceof Implication&& (taskTerm.getTemporalOrder() == TemporalRules.ORDER_FORWARD || taskTerm.getTemporalOrder() == TemporalRules.ORDER_CONCURRENT)) {
      if (taskSentence.isEternal() && belief.isEternal() || belief.after(taskSentence,memory.param.duration.get())) {
        TemporalRules.temporalInductionChain(taskSentence,belief,nal);
      }
    }
    if (LocalRules.match(task,belief,nal)) {
      return;
    }
  }
  if (CompositionalRules.dedSecondLayerVariableUnification(task,nal)) {
    if (taskSentence.isJudgment())     return;
  }
  nal.setCurrentBelief(belief);
  nal.setCurrentTask(task);
  CompositionalRules.dedConjunctionByQuestion(taskSentence,belief,nal);
  final short tIndex=tLink.getIndex(0);
  short bIndex=bLink.getIndex(0);
switch (tLink.type) {
case TermLink.SELF:
switch (bLink.type) {
case TermLink.COMPONENT:
      compoundAndSelf((CompoundTerm)taskTerm,beliefTerm,true,bIndex,nal);
    break;
case TermLink.COMPOUND:
  compoundAndSelf((CompoundTerm)beliefTerm,taskTerm,false,bIndex,nal);
break;
case TermLink.COMPONENT_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Statement) {
  SyllogisticRules.detachment(taskSentence,belief,bIndex,nal);
}
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
SyllogisticRules.detachment(belief,taskSentence,bIndex,nal);
}
break;
case TermLink.COMPONENT_CONDITION:
if ((belief != null) && (taskTerm instanceof Implication)) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd((Implication)taskTerm,bIndex,beliefTerm,tIndex,nal);
}
break;
case TermLink.COMPOUND_CONDITION:
if ((belief != null) && (taskTerm instanceof Implication) && (beliefTerm instanceof Implication)) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd((Implication)beliefTerm,bIndex,taskTerm,tIndex,nal);
}
break;
}
break;
case TermLink.COMPOUND:
switch (bLink.type) {
case TermLink.COMPOUND:
compoundAndCompound((CompoundTerm)taskTerm,(CompoundTerm)beliefTerm,bIndex,nal);
break;
case TermLink.COMPOUND_STATEMENT:
compoundAndStatement((CompoundTerm)taskTerm,tIndex,(Statement)beliefTerm,bIndex,beliefTerm,nal);
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
if (beliefTerm instanceof Implication) {
Term[] u=new Term[]{beliefTerm,taskTerm};
if (Variables.unify(VAR_INDEPENDENT,((Statement)beliefTerm).getSubject(),taskTerm,u)) {
Sentence newBelief=belief.clone(u[0]);
Sentence newTaskSentence=taskSentence.clone(u[1]);
detachmentWithVar(newBelief,newTaskSentence,bIndex,nal);
}
 else {
SyllogisticRules.conditionalDedInd((Implication)beliefTerm,bIndex,taskTerm,-1,nal);
}
}
 else if (beliefTerm instanceof Equivalence) {
SyllogisticRules.conditionalAna((Equivalence)beliefTerm,bIndex,taskTerm,-1,nal);
}
}
break;
}
break;
case TermLink.COMPOUND_STATEMENT:
switch (bLink.type) {
case TermLink.COMPONENT:
if (taskTerm instanceof Statement) {
componentAndStatement((CompoundTerm)nal.getCurrentTerm(),bIndex,(Statement)taskTerm,tIndex,nal);
}
break;
case TermLink.COMPOUND:
if (taskTerm instanceof Statement) {
compoundAndStatement((CompoundTerm)beliefTerm,bIndex,(Statement)taskTerm,tIndex,beliefTerm,nal);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
syllogisms(tLink,bLink,taskTerm,beliefTerm,nal);
}
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
if ((taskTerm instanceof Statement) && (beliefTerm instanceof Implication)) {
if (taskSentence.punctuation != Symbols.JUDGMENT_MARK) {
conditionalDedIndWithVar((Implication)beliefTerm,bIndex,(Statement)taskTerm,tIndex,nal);
}
}
}
break;
}
break;
case TermLink.COMPOUND_CONDITION:
switch (bLink.type) {
case TermLink.COMPOUND:
if (belief != null) {
detachmentWithVar(taskSentence,belief,tIndex,nal);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Implication) {
Term subj=((Statement)taskTerm).getSubject();
if (subj instanceof Negation) {
if (taskSentence.isJudgment()) {
componentAndStatement((CompoundTerm)subj,bIndex,(Statement)taskTerm,tIndex,nal);
}
 else {
componentAndStatement((CompoundTerm)subj,tIndex,(Statement)beliefTerm,bIndex,nal);
}
}
 else {
conditionalDedIndWithVar((Implication)taskTerm,tIndex,(Statement)beliefTerm,bIndex,nal);
}
}
break;
}
break;
}
}
}",0.9955782058007944
166741,"protected void rect(Object event,Object subject,float r,float x,float y){
  float px=x * timeScale;
  float py=y;
  if (r < 2) {
    r=2;
  }
  l.rect(px + -r / 2f,py + -r / 2f,r,r);
  label(event,subject,r,x,y);
}","protected void rect(Object event,Object subject,float r,float x,float y){
  float px=x * timeScale;
  float py=y;
  if (r < 2) {
    r=2;
  }
  l.g.rect(px + -r / 2f,py + -r / 2f,r,r);
  label(event,subject,r,x,y);
}",0.9953488372093025
166742,"protected void triangleHorizontal(Object event,Object subject,float r,float x,float y,float direction){
  float px=x * timeScale;
  float py=y;
  if (r < 2) {
    r=2;
  }
  l.triangle(px + direction * -r / 2,py + direction * -r / 2,px + direction * r / 2,py + 0,px + direction * -r / 2,py + direction * r / 2);
  label(event,subject,r,x,y);
}","protected void triangleHorizontal(Object event,Object subject,float r,float x,float y,float direction){
  float px=x * timeScale;
  float py=y;
  if (r < 2) {
    r=2;
  }
  l.g.triangle(px + direction * -r / 2,py + direction * -r / 2,px + direction * r / 2,py + 0,px + direction * -r / 2,py + direction * r / 2);
  label(event,subject,r,x,y);
}",0.997093023255814
166743,"private void drawEvent(long t,List<Events.InferenceEvent> v,float y,int maxItemsPerCycle){
  if (v.isEmpty()) {
    return;
  }
  float itemScale=Math.min(timeScale / maxItemsPerCycle,yScale / maxItemsPerCycle);
  float x=t;
  y+=yScale / maxItemsPerCycle / 2f;
  for (  Events.InferenceEvent i : v) {
    if (!include(i)) {
      continue;
    }
    Class c=i.getType();
    if (i instanceof NARTrace.TaskEvent) {
      NARTrace.TaskEvent te=(NARTrace.TaskEvent)i;
      float p=te.priority;
{
        l.fill(256f * NARSwing.hashFloat(c.hashCode()),200f,200f);
switch (te.type) {
case Add:
          triangleHorizontal(i,te.task,p * itemScale,x,y,1.0f);
        break;
case Remove:
      triangleHorizontal(i,te.task,p * itemScale,x,y,-1.0f);
    break;
}
}
}
 else if (i instanceof NARTrace.OutputEvent) {
NARTrace.OutputEvent te=(NARTrace.OutputEvent)i;
float p=0.5f;
if (te.signal.length > 0) {
if (te.signal[0] instanceof Item) {
  Item ii=(Item)te.signal[0];
  if (ii.budget != null) {
    p=ii.getPriority();
  }
 else {
    p=0.5f;
  }
}
}
float ph=0.5f + 0.5f * p;
l.fill(256f * NARSwing.hashFloat(te.channel.hashCode()),100f + 100f * ph,255f * ph);
if (te.channel.equals(Output.IN.class)) {
triangleHorizontal(i,te.signal,ph * itemScale,x,y,1.0f);
}
 else if (te.channel.equals(Output.OUT.class)) {
triangleHorizontal(i,te.signal,ph * itemScale,x,y,1.0f);
}
 else {
rect(i,te.signal,ph * itemScale,x,y);
}
}
 else {
l.fill(256f * NARSwing.hashFloat(c.hashCode()),200f,200f);
rect(i,null,0.75f * itemScale,x,y);
}
x+=1.0 / v.size();
y+=yScale / maxItemsPerCycle;
}
}","private void drawEvent(long t,List<Events.InferenceEvent> v,float y,int maxItemsPerCycle){
  if (v.isEmpty()) {
    return;
  }
  float itemScale=Math.min(timeScale / maxItemsPerCycle,yScale / maxItemsPerCycle);
  float x=t;
  y+=yScale / maxItemsPerCycle / 2f;
  for (  Events.InferenceEvent i : v) {
    if (!include(i)) {
      continue;
    }
    Class c=i.getType();
    if (i instanceof NARTrace.TaskEvent) {
      NARTrace.TaskEvent te=(NARTrace.TaskEvent)i;
      float p=te.priority;
{
        l.g.fill(256f * Video.hashFloat(c.hashCode()),200f,200f);
switch (te.type) {
case Add:
          triangleHorizontal(i,te.task,p * itemScale,x,y,1.0f);
        break;
case Remove:
      triangleHorizontal(i,te.task,p * itemScale,x,y,-1.0f);
    break;
}
}
}
 else if (i instanceof NARTrace.OutputEvent) {
NARTrace.OutputEvent te=(NARTrace.OutputEvent)i;
float p=0.5f;
if (te.signal.length > 0) {
if (te.signal[0] instanceof Item) {
  Item ii=(Item)te.signal[0];
  if (ii.budget != null) {
    p=ii.getPriority();
  }
 else {
    p=0.5f;
  }
}
}
float ph=0.5f + 0.5f * p;
l.g.fill(256f * Video.hashFloat(te.channel.hashCode()),100f + 100f * ph,255f * ph);
if (te.channel.equals(Output.IN.class)) {
triangleHorizontal(i,te.signal,ph * itemScale,x,y,1.0f);
}
 else if (te.channel.equals(Output.OUT.class)) {
triangleHorizontal(i,te.signal,ph * itemScale,x,y,1.0f);
}
 else {
rect(i,te.signal,ph * itemScale,x,y);
}
}
 else {
l.g.fill(256f * Video.hashFloat(c.hashCode()),200f,200f);
rect(i,null,0.75f * itemScale,x,y);
}
x+=1.0 / v.size();
y+=yScale / maxItemsPerCycle;
}
}",0.9857006673021924
166744,"@Override public void update(Timeline2DCanvas l,float timeScale,float yScale){
  TreeMap<Long,List<Events.InferenceEvent>> time=trace.time;
  timepoints.putAll(time.subMap(l.getStart(),l.getEnd()));
}","@Override public void update(TimelineVis l,float timeScale,float yScale){
  TreeMap<Long,List<Events.InferenceEvent>> time=trace.time;
  timepoints.putAll(time.subMap(l.getStart(),l.getEnd()));
}",0.9772151898734176
166745,"@Override public void draw(Timeline2DCanvas l,float y,float timeScale,float yScale){
  this.timeScale=timeScale;
  this.yScale=yScale * getHeight();
  this.l=l;
  if ((timepoints == null) || (timepoints.isEmpty())) {
    return;
  }
  lastSubjectEvent.clear();
  events.clear();
  l.noStroke();
  l.textSize(l.getDrawnTextScale());
synchronized (timepoints) {
    long maxItemsPerCycle=timepoints.values().stream().map((x) -> x.stream().filter((e) -> include(e)).count()).max(Long::compare).get();
    for (    Map.Entry<Long,List<Events.InferenceEvent>> e : timepoints.entrySet()) {
      long t=e.getKey();
      List<Events.InferenceEvent> v=e.getValue();
      drawEvent(t,v,y,(int)maxItemsPerCycle);
    }
  }
  l.strokeCap(PConstants.SQUARE);
  l.strokeWeight(4f);
  for (  final EventPoint<Object> to : events.values()) {
    for (    final EventPoint<Object> from : to.incoming) {
      l.stroke(256f * NARSwing.hashFloat(to.subject.hashCode()),100f,200f,68f);
      l.line(timeScale * from.x,from.y,timeScale * to.x,to.y);
    }
  }
}","@Override public void draw(TimelineVis l,float y,float timeScale,float yScale){
  this.timeScale=timeScale;
  this.yScale=yScale * getHeight();
  this.l=l;
  if ((timepoints == null) || (timepoints.isEmpty())) {
    return;
  }
  lastSubjectEvent.clear();
  events.clear();
  l.g.noStroke();
  l.g.textSize(l.getDrawnTextScale());
synchronized (timepoints) {
    long maxItemsPerCycle=timepoints.values().stream().map((x) -> x.stream().filter((e) -> include(e)).count()).max(Long::compare).get();
    for (    Map.Entry<Long,List<Events.InferenceEvent>> e : timepoints.entrySet()) {
      long t=e.getKey();
      List<Events.InferenceEvent> v=e.getValue();
      drawEvent(t,v,y,(int)maxItemsPerCycle);
    }
  }
  l.g.strokeCap(PConstants.SQUARE);
  l.g.strokeWeight(4f);
  for (  final EventPoint<Object> to : events.values()) {
    for (    final EventPoint<Object> from : to.incoming) {
      l.g.stroke(256f * Video.hashFloat(to.subject.hashCode()),100f,200f,68f);
      l.g.line(timeScale * from.x,from.y,timeScale * to.x,to.y);
    }
  }
}",0.983732057416268
166746,"protected void label(Object event,Object subject,float r,float x,float y){
  if ((l.isShowingItemLabels()) && (r * l.getDrawnTextScale() > l.getMinLabelScale())) {
    l.fill(255f);
    String s;
    if (event instanceof HasLabel)     s=((HasLabel)event).toLabel();
 else     s=event.toString();
    l.text(s,timeScale * x - r / 2f,y - r / 2f,x + r / 2 * 6f,y + r / 2f);
  }
  setEventPoint(event,subject,x,y,0);
}","protected void label(Object event,Object subject,float r,float x,float y){
  if ((l.isShowingItemLabels()) && (r * l.getDrawnTextScale() > l.getMinLabelScale())) {
    l.g.fill(255f);
    String s;
    if (event instanceof HasLabel)     s=((HasLabel)event).toLabel();
 else     s=event.toString();
    l.g.text(s,timeScale * x - r / 2f,y - r / 2f,x + r / 2 * 6f,y + r / 2f);
  }
  setEventPoint(event,subject,x,y,0);
}",0.9951923076923076
166747,"protected void updateGUI(){
  long now=System.currentTimeMillis();
  speedSlider.repaint();
  if (now - lastChartUpdateTime > minChartUpdateTime) {
    chart.redraw();
    lastChartUpdateTime=now;
  }
  updateScheduled.set(false);
}","protected void updateGUI(){
  speedSlider.repaint();
  updateScheduled.set(false);
}",0.5316455696202531
166748,"public NARControls(final NAR nar){
  super(new BorderLayout());
  this.nar=nar;
  memory=nar.memory;
  senses=new MultiSense(memory.logic,memory.resource);
  senses.setActive(true);
  senses.update(memory);
  experienceWriter=new TextOutput(nar);
  logger=new InferenceLogger(nar);
  logger.setActive(false);
  JMenuBar menuBar=new JMenuBar();
  JMenu m=new JMenu(""String_Node_Str"");
  addJMenuItem(m,""String_Node_Str"");
  m.addSeparator();
  addJMenuItem(m,""String_Node_Str"");
  addJMenuItem(m,""String_Node_Str"");
  m.addActionListener(this);
  menuBar.add(m);
  m=new JMenu(""String_Node_Str"");
{
    JMenuItem mv3=new JMenuItem(""String_Node_Str"");
    mv3.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        TextInputPanel inputPanel=new TextInputPanel(nar);
        NWindow inputWindow=new NWindow(""String_Node_Str"",inputPanel);
        inputWindow.setSize(800,200);
        inputWindow.setVisible(true);
      }
    }
);
    m.add(mv3);
    JMenuItem cct4=new JMenuItem(""String_Node_Str"");
    cct4.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        NWindow w=new NWindow(""String_Node_Str"",new SketchPointCloudPanel(nar));
        w.setSize(500,500);
        w.setVisible(true);
      }
    }
);
    m.add(cct4);
    m.addSeparator();
    JMenuItem ml=new JMenuItem(""String_Node_Str"");
    ml.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new SwingLogPanel(NARControls.this)).show(500,300);
      }
    }
);
    m.add(ml);
    JMenuItem pml=new JMenuItem(""String_Node_Str"");
    pml.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new SwingLogPanel(NARControls.this,Executive.class,Execution.class,GraphExecutive.ParticlePath.class,GraphExecutive.ParticlePlan.class)).show(500,300);
      }
    }
);
    m.add(pml);
    JMenuItem gml=new JMenuItem(""String_Node_Str"");
    gml.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new SwingLogPanel(NARControls.this,Events.ConceptForget.class)).show(500,300);
      }
    }
);
    m.add(gml);
    JMenuItem al=new JMenuItem(""String_Node_Str"");
    al.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new MultiOutputPanel(NARControls.this)).show(500,300);
      }
    }
);
    m.add(al);
    JMenuItem tlp=new JMenuItem(""String_Node_Str"");
    tlp.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        NWindow outputWindow=new NWindow(""String_Node_Str"",new TimelinePanel(nar));
        outputWindow.show(900,700);
      }
    }
);
    m.add(tlp);
    JMenuItem mv=new JMenuItem(""String_Node_Str"");
    mv.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new ConceptGraphPanel(nar,new ConceptGraphCanvas(nar))).show(800,500);
      }
    }
);
    m.add(mv);
    JMenuItem mv2=new JMenuItem(""String_Node_Str"");
    mv2.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new ProcessingGraphPanel(nar,new ConceptGraphCanvas2(nar))).show(500,500);
      }
    }
);
    m.add(mv2);
    JMenuItem imv=new JMenuItem(""String_Node_Str"");
    imv.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new ProcessingGraphPanel(nar,new ImplicationGraphCanvas(nar.memory.executive.graph))).show(500,500);
      }
    }
);
    m.add(imv);
    JMenuItem sg=new JMenuItem(""String_Node_Str"");
    sg.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new ProcessingGraphPanel(nar,new SentenceGraphCanvas(new InheritanceGraph(nar)))).show(500,500);
      }
    }
);
    m.add(sg);
    JMenuItem tt=new JMenuItem(""String_Node_Str"");
    tt.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        TaskTree p=new TaskTree(nar);
        NWindow w=new NWindow(""String_Node_Str"",p);
        w.setSize(200,500);
        w.setVisible(true);
      }
    }
);
    m.add(tt);
    JMenuItem st=new JMenuItem(""String_Node_Str"");
    st.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        SentenceTablePanel p=new SentenceTablePanel(nar);
        NWindow w=new NWindow(""String_Node_Str"",p);
        w.setSize(500,300);
        w.setVisible(true);
      }
    }
);
    m.add(st);
    JMenuItem fc=new JMenuItem(""String_Node_Str"");
    fc.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        BubbleChart bc=new BubbleChart(nar);
        NWindow wbc=new NWindow(""String_Node_Str"",bc);
        wbc.setSize(250,250);
        wbc.setVisible(true);
      }
    }
);
    m.add(fc);
    JMenuItem hf=new JMenuItem(""String_Node_Str"");
    hf.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        NARFacePanel f=new NARFacePanel(nar);
        NWindow w=new NWindow(""String_Node_Str"",f);
        w.setSize(250,400);
        w.setVisible(true);
      }
    }
);
    m.add(hf);
  }
  menuBar.add(m);
  m=new JMenu(""String_Node_Str"");
  addJMenuItem(m,""String_Node_Str"");
  m.addActionListener(this);
  menuBar.add(m);
  add(menuBar,BorderLayout.NORTH);
  JComponent jp=newParameterPanel();
  add(jp,BorderLayout.CENTER);
  init();
}","/** 
 * Constructor
 * @param nar
 * @param title
 */
public NARControls(final NAR nar){
  super(new BorderLayout());
  this.nar=nar;
  memory=nar.memory;
  experienceWriter=new TextOutput(nar);
  logger=new InferenceLogger(nar);
  logger.setActive(false);
  JMenuBar menuBar=new JMenuBar();
  JMenu m=new JMenu(""String_Node_Str"");
  addJMenuItem(m,""String_Node_Str"");
  m.addSeparator();
  addJMenuItem(m,""String_Node_Str"");
  addJMenuItem(m,""String_Node_Str"");
  m.addActionListener(this);
  menuBar.add(m);
  m=new JMenu(""String_Node_Str"");
{
    JMenuItem mv3=new JMenuItem(""String_Node_Str"");
    mv3.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        TextInputPanel inputPanel=new TextInputPanel(nar);
        NWindow inputWindow=new NWindow(""String_Node_Str"",inputPanel);
        inputWindow.setSize(800,200);
        inputWindow.setVisible(true);
      }
    }
);
    m.add(mv3);
    JMenuItem cct4=new JMenuItem(""String_Node_Str"");
    cct4.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        NWindow w=new NWindow(""String_Node_Str"",new SketchPointCloudPanel(nar));
        w.setSize(500,500);
        w.setVisible(true);
      }
    }
);
    m.add(cct4);
    m.addSeparator();
    JMenuItem ml=new JMenuItem(""String_Node_Str"");
    ml.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new SwingLogPanel(NARControls.this)).show(500,300);
      }
    }
);
    m.add(ml);
    JMenuItem pml=new JMenuItem(""String_Node_Str"");
    pml.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new SwingLogPanel(NARControls.this,Executive.class,Execution.class,GraphExecutive.ParticlePath.class,GraphExecutive.ParticlePlan.class)).show(500,300);
      }
    }
);
    m.add(pml);
    JMenuItem gml=new JMenuItem(""String_Node_Str"");
    gml.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new SwingLogPanel(NARControls.this,Events.ConceptForget.class)).show(500,300);
      }
    }
);
    m.add(gml);
    JMenuItem al=new JMenuItem(""String_Node_Str"");
    al.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new MultiOutputPanel(NARControls.this)).show(500,300);
      }
    }
);
    m.add(al);
    JMenuItem tlp=new JMenuItem(""String_Node_Str"");
    tlp.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        NWindow outputWindow=new NWindow(""String_Node_Str"",new TimelinePanel(nar));
        outputWindow.show(900,700);
      }
    }
);
    m.add(tlp);
    JMenuItem mv=new JMenuItem(""String_Node_Str"");
    mv.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new NWindow(""String_Node_Str"",new ConceptGraphPanel(nar,new ConceptGraphCanvas(nar))).show(800,500);
      }
    }
);
    m.add(mv);
    JMenuItem tt=new JMenuItem(""String_Node_Str"");
    tt.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        TaskTree p=new TaskTree(nar);
        NWindow w=new NWindow(""String_Node_Str"",p);
        w.setSize(200,500);
        w.setVisible(true);
      }
    }
);
    m.add(tt);
    JMenuItem st=new JMenuItem(""String_Node_Str"");
    st.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        SentenceTablePanel p=new SentenceTablePanel(nar);
        NWindow w=new NWindow(""String_Node_Str"",p);
        w.setSize(500,300);
        w.setVisible(true);
      }
    }
);
    m.add(st);
    JMenuItem fc=new JMenuItem(""String_Node_Str"");
    fc.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        BubbleChart bc=new BubbleChart(nar);
        NWindow wbc=new NWindow(""String_Node_Str"",bc);
        wbc.setSize(250,250);
        wbc.setVisible(true);
      }
    }
);
    m.add(fc);
    JMenuItem hf=new JMenuItem(""String_Node_Str"");
    hf.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        NARFacePanel f=new NARFacePanel(nar);
        NWindow w=new NWindow(""String_Node_Str"",f);
        w.setSize(250,400);
        w.setVisible(true);
      }
    }
);
    m.add(hf);
  }
  menuBar.add(m);
  m=new JMenu(""String_Node_Str"");
  addJMenuItem(m,""String_Node_Str"");
  m.addActionListener(this);
  menuBar.add(m);
  add(menuBar,BorderLayout.NORTH);
  JComponent jp=newParameterPanel();
  add(jp,BorderLayout.CENTER);
  init();
}",0.8942833317891226
166749,"private JComponent newParameterPanel(){
  JPanel p=new JPanel();
  JPanel pc=new JPanel();
  pc.setLayout(new GridLayout(1,0));
  stopButton=new AwesomeButton(FA_StopCharacter);
  stopButton.addActionListener(this);
  pc.add(stopButton);
  walkButton=new AwesomeButton('\uf051');
  walkButton.setToolTipText(""String_Node_Str"");
  walkButton.addActionListener(this);
  pc.add(walkButton);
  JButton focusButton=new AwesomeButton(FA_FocusCharacter);
  focusButton.setToolTipText(""String_Node_Str"");
  focusButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setSpeed(1.0f);
      volumeSlider.setValue(0.0f);
    }
  }
);
  pc.add(focusButton);
  JButton pluginsButton=new AwesomeButton(FA_ControlCharacter);
  pluginsButton.setToolTipText(""String_Node_Str"");
  pluginsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new NWindow(""String_Node_Str"",new PluginPanel(nar)).show(350,600);
    }
  }
);
  pc.add(pluginsButton);
  p.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.anchor=GridBagConstraints.NORTH;
  c.fill=GridBagConstraints.HORIZONTAL;
  c.weightx=1;
  c.gridx=0;
  c.ipady=8;
  p.add(pc,c);
  NSlider vs=newVolumeSlider();
  vs.setFont(vs.getFont().deriveFont(Font.BOLD));
  p.add(vs,c);
  NSlider ss=newSpeedSlider();
  ss.setFont(vs.getFont());
  p.add(ss,c);
  c.ipady=4;
  p.add(new NSlider(memory.param.decisionThreshold,""String_Node_Str"",0.0f,1.0f),c);
  p.add(new NSlider(memory.param.taskLinkForgetDurations,""String_Node_Str"",0.5f,20),c);
  p.add(new NSlider(memory.param.termLinkForgetDurations,""String_Node_Str"",0.5f,20),c);
  p.add(new NSlider(memory.param.conceptForgetDurations,""String_Node_Str"",0.5f,20),c);
{
    this.chart=new ChartsPanel(senses,chartHistoryLength);
  }
  c.weighty=1.0;
  c.fill=GridBagConstraints.BOTH;
  p.add(chart,c);
  return p;
}","private JComponent newParameterPanel(){
  JPanel p=new JPanel();
  JPanel pc=new JPanel();
  pc.setLayout(new GridLayout(1,0));
  stopButton=new AwesomeButton(FA_StopCharacter);
  stopButton.addActionListener(this);
  pc.add(stopButton);
  walkButton=new AwesomeButton('\uf051');
  walkButton.setToolTipText(""String_Node_Str"");
  walkButton.addActionListener(this);
  pc.add(walkButton);
  JButton focusButton=new AwesomeButton(FA_FocusCharacter);
  focusButton.setToolTipText(""String_Node_Str"");
  focusButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setSpeed(1.0f);
      volumeSlider.setValue(0.0f);
    }
  }
);
  pc.add(focusButton);
  JButton pluginsButton=new AwesomeButton(FA_ControlCharacter);
  pluginsButton.setToolTipText(""String_Node_Str"");
  pluginsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new NWindow(""String_Node_Str"",new PluginPanel(nar)).show(350,600);
    }
  }
);
  pc.add(pluginsButton);
  p.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.anchor=GridBagConstraints.NORTH;
  c.fill=GridBagConstraints.HORIZONTAL;
  c.weightx=1;
  c.gridx=0;
  c.ipady=8;
  p.add(pc,c);
  NSlider vs=newVolumeSlider();
  vs.setFont(vs.getFont().deriveFont(Font.BOLD));
  p.add(vs,c);
  NSlider ss=newSpeedSlider();
  ss.setFont(vs.getFont());
  p.add(ss,c);
  c.ipady=4;
  p.add(new NSlider(memory.param.decisionThreshold,""String_Node_Str"",0.0f,1.0f),c);
  p.add(new NSlider(memory.param.taskLinkForgetDurations,""String_Node_Str"",0.5f,20),c);
  p.add(new NSlider(memory.param.termLinkForgetDurations,""String_Node_Str"",0.5f,20),c);
  p.add(new NSlider(memory.param.conceptForgetDurations,""String_Node_Str"",0.5f,20),c);
  return p;
}",0.9579563597658328
166750,"@Override public void event(final Class event,final Object... arguments){
  if (event == FrameEnd.class) {
    long now=System.currentTimeMillis();
    long deltaTime=now - lastUpdateTime;
    if ((deltaTime >= GUIUpdatePeriodMS)) {
      updateScheduled.set(true);
      senses.update(memory);
      chart.updateData(memory.time());
      speedSlider.repaint();
      SwingUtilities.invokeLater(updateGUIRunnable);
      lastUpdateTime=now;
    }
  }
}","@Override public void event(final Class event,final Object... arguments){
  if (event == FrameEnd.class) {
    long now=System.currentTimeMillis();
    long deltaTime=now - lastUpdateTime;
    if ((deltaTime >= GUIUpdatePeriodMS)) {
      updateScheduled.set(true);
      speedSlider.repaint();
      SwingUtilities.invokeLater(updateGUIRunnable);
      lastUpdateTime=now;
    }
  }
}",0.918854415274463
166751,"public void update(){
  List<String[]> interpretations=new ArrayList();
  List<InputAction> actions=new ArrayList();
  String input=inputText.getText();
  for (  final TextInputMode t : modes) {
    t.setInputState(nar,input);
    String interp=t.getInterpretation();
    if (interp != null) {
      interpretations.add(new String[]{t.getClass().getSimpleName(),interp});
    }
    t.getActions(actions);
  }
  menu.removeAll();
  comments.setText(""String_Node_Str"");
  for (  String[] i : interpretations) {
    Color c=NARSwing.getColor(i[0],0.7f,0.6f);
    comments.print(Color.WHITE,c,i[0] + ""String_Node_Str"");
    Color c2=NARSwing.getColor(i[0],0.5f,0.3f);
    comments.print(Color.WHITE,c2,i[1] + ""String_Node_Str"");
  }
  if (comments.getText().length() > 0) {
    if (!isVisible()) {
      int ll=mainSplit.getLastDividerLocation();
      if (ll <= 0)       ll=(int)(getWidth() * 0.75);
      if (getWidth() == 0) {
        ll=500;
      }
      mainSplit.setDividerLocation(ll);
      mainSplit.setLastDividerLocation(ll);
      setVisible(true);
    }
  }
 else {
    if (isVisible()) {
      mainSplit.setLastDividerLocation(mainSplit.getDividerLocation());
      setVisible(false);
    }
  }
  defaultButton=null;
  double maxStrength=0;
  for (  InputAction a : actions) {
    JButton b=new JButton(a.getLabel());
    double strength=a.getStrength();
    if (strength > maxStrength) {
      defaultButton=b;
      maxStrength=strength;
    }
    b.setFont(b.getFont().deriveFont((float)(b.getFont().getSize() * (0.5f + 0.5f * strength))));
    b.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            String result=a.run();
            if (result != null) {
              inputText.setText(result);
            }
          }
        }
);
      }
    }
);
    menu.add(b);
  }
  menu.validate();
  menu.repaint();
  validate();
  repaint();
}","public void update(){
  List<String[]> interpretations=new ArrayList();
  List<InputAction> actions=new ArrayList();
  String input=inputText.getText();
  for (  final TextInputMode t : modes) {
    t.setInputState(nar,input);
    String interp=t.getInterpretation();
    if (interp != null) {
      interpretations.add(new String[]{t.getClass().getSimpleName(),interp});
    }
    t.getActions(actions);
  }
  menu.removeAll();
  comments.setText(""String_Node_Str"");
  for (  String[] i : interpretations) {
    Color c=Video.getColor(i[0],0.7f,0.6f);
    comments.print(Color.WHITE,c,i[0] + ""String_Node_Str"");
    Color c2=Video.getColor(i[0],0.5f,0.3f);
    comments.print(Color.WHITE,c2,i[1] + ""String_Node_Str"");
  }
  if (comments.getText().length() > 0) {
    if (!isVisible()) {
      int ll=mainSplit.getLastDividerLocation();
      if (ll <= 0)       ll=(int)(getWidth() * 0.75);
      if (getWidth() == 0) {
        ll=500;
      }
      mainSplit.setDividerLocation(ll);
      mainSplit.setLastDividerLocation(ll);
      setVisible(true);
    }
  }
 else {
    if (isVisible()) {
      mainSplit.setLastDividerLocation(mainSplit.getDividerLocation());
      setVisible(false);
    }
  }
  defaultButton=null;
  double maxStrength=0;
  for (  InputAction a : actions) {
    JButton b=new JButton(a.getLabel());
    double strength=a.getStrength();
    if (strength > maxStrength) {
      defaultButton=b;
      maxStrength=strength;
    }
    b.setFont(b.getFont().deriveFont((float)(b.getFont().getSize() * (0.5f + 0.5f * strength))));
    b.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            String result=a.run();
            if (result != null) {
              inputText.setText(result);
            }
          }
        }
);
      }
    }
);
    menu.add(b);
  }
  menu.validate();
  menu.repaint();
  validate();
  repaint();
}",0.9935194416749752
166752,"/** 
 * called during each memory cycle
 */
public void cycle(){
  long now=memory.time();
  if (now - lastExecution < (memory.param.duration.get() / maxExecutionsPerDuration)) {
    return;
  }
  lastExecution=now;
  updateTasks();
  updateSensors();
  if (tasks.isEmpty()) {
    return;
  }
  if (memory.emitting(TaskExecution.class)) {
    if (tasks.size() > 1) {
      for (      TaskExecution tcc : tasks) {
        memory.emit(Executive.class,memory.time(),tcc);
      }
    }
 else {
      memory.emit(Executive.class,memory.time(),tasks.first());
    }
  }
  TaskExecution topExecution=tasks.first();
  Task top=topExecution.t;
  Term term=top.getContent();
  if (term instanceof Operation) {
    execute((Operation)term,top);
    removeTask(topExecution);
    return;
  }
 else   if (Parameters.TEMPORAL_PARTICLE_PLANNER && term instanceof Conjunction) {
    Conjunction c=(Conjunction)term;
    if (c.operator() == Symbols.NativeOperator.SEQUENCE) {
      executeConjunctionSequence(topExecution,c);
      return;
    }
  }
 else   if (Parameters.TEMPORAL_PARTICLE_PLANNER && term instanceof Implication) {
    Implication it=(Implication)term;
    if ((it.getTemporalOrder() == TemporalRules.ORDER_FORWARD) || (it.getTemporalOrder() == TemporalRules.ORDER_CONCURRENT)) {
      if (it.getSubject() instanceof Conjunction) {
        Conjunction c=(Conjunction)it.getSubject();
        if (c.operator() == Symbols.NativeOperator.SEQUENCE) {
          executeConjunctionSequence(topExecution,c);
          return;
        }
      }
 else       if (it.getSubject() instanceof Operation) {
        execute((Operation)it.getSubject(),top);
        removeTask(topExecution);
        return;
      }
    }
    throw new RuntimeException(""String_Node_Str"" + it.getSubject() + ""String_Node_Str""+ it.getSubject().getClass()+ ""String_Node_Str""+ top);
  }
 else {
  }
}","/** 
 * called during each memory cycle
 */
public void cycle(){
  long now=memory.time();
  if (now - lastExecution < (memory.param.duration.get() / maxExecutionsPerDuration)) {
    return;
  }
  lastExecution=now;
  updateTasks();
  updateSensors();
  if (tasks.isEmpty()) {
    return;
  }
  if (memory.emitting(TaskExecution.class)) {
    if (tasks.size() > 1) {
      for (      TaskExecution tcc : tasks) {
        memory.emit(Executive.class,memory.time(),tcc);
      }
    }
 else {
      memory.emit(Executive.class,memory.time(),tasks.first());
    }
  }
  TaskExecution topExecution=tasks.first();
  Task top=topExecution.t;
  Term term=top.getContent();
  removeTask(topExecution);
  if (term instanceof Operation) {
    execute((Operation)term,top);
    return;
  }
 else   if (Parameters.TEMPORAL_PARTICLE_PLANNER && term instanceof Conjunction) {
    Conjunction c=(Conjunction)term;
    if (c.operator() == Symbols.NativeOperator.SEQUENCE) {
      executeConjunctionSequence(topExecution,c);
      return;
    }
  }
 else   if (Parameters.TEMPORAL_PARTICLE_PLANNER && term instanceof Implication) {
    Implication it=(Implication)term;
    if ((it.getTemporalOrder() == TemporalRules.ORDER_FORWARD) || (it.getTemporalOrder() == TemporalRules.ORDER_CONCURRENT)) {
      if (it.getSubject() instanceof Conjunction) {
        Conjunction c=(Conjunction)it.getSubject();
        if (c.operator() == Symbols.NativeOperator.SEQUENCE) {
          executeConjunctionSequence(topExecution,c);
          return;
        }
      }
 else       if (it.getSubject() instanceof Operation) {
        execute((Operation)it.getSubject(),top);
        return;
      }
    }
    throw new RuntimeException(""String_Node_Str"" + it.getSubject() + ""String_Node_Str""+ it.getSubject().getClass()+ ""String_Node_Str""+ top);
  }
 else {
  }
}",0.9751082251082251
166753,"@Override public Concept addConcept(final Term term,final Memory memory){
  Concept concept=conceptBuilder.newConcept(term,memory);
  Concept removed=concepts.putIn(concept);
  if (removed == null) {
  }
 else   if (removed == concept) {
    memory.emit(ConceptRemove.class,concept);
    return null;
  }
 else   if (removed != null) {
    memory.emit(ConceptRemove.class,removed);
  }
  memory.logic.CONCEPT_ADD.commit(term.getComplexity());
  memory.emit(Events.ConceptAdd.class,concept);
  return concept;
}","@Override public Concept addConcept(final Term term,final Memory memory){
  Concept concept=conceptBuilder.newConcept(term,memory);
  boolean merged=false;
  Concept removed=concepts.putIn(concept);
  if (removed == null) {
  }
 else   if (removed == concept) {
    System.out.println(""String_Node_Str"" + concept);
    memory.emit(ConceptRemove.class,removed);
    return null;
  }
 else   if (removed != null) {
    if (removed.name().equals(concept.name())) {
      System.out.println(""String_Node_Str"" + removed);
      merged=true;
    }
 else {
      System.out.println(""String_Node_Str"" + removed + ""String_Node_Str""+ concept);
      memory.emit(ConceptRemove.class,removed);
    }
  }
  if (!merged) {
    memory.logic.CONCEPT_ADD.commit(term.getComplexity());
    memory.emit(Events.ConceptAdd.class,concept);
  }
  return concept;
}",0.7209474463360473
166754,"/** 
 * Merge with another Item with identical key
 * @param that The Item to be merged
 */
public void merge(final Item that){
  budget.merge(budget);
}","/** 
 * Merge with another Item with identical key
 * @param that The Item to be merged
 * @return the resulting Item: this or that
 */
public Item merge(final Item that){
  budget.merge(that.budget);
  return this;
}",0.8054054054054054
166755,"/** 
 * Merge one Task into another
 * @param that The other Task
 */
@Override public void merge(final Item that){
  if (getCreationTime() >= ((Task)that).getCreationTime()) {
    super.merge(that);
  }
 else {
    that.merge(this);
  }
}","/** 
 * Merge one Task into another
 * @param that The other Task
 */
@Override public Item merge(final Item that){
  if (getCreationTime() >= ((Task)that).getCreationTime()) {
    return super.merge(that);
  }
 else {
    return that.merge(this);
  }
}",0.9552845528455284
166756,"/** 
 * Add a new Item into the Bag
 * @param newItem The new Item
 * @return the item which was removed, which may be the input item if it could not be inserted; or null if nothing needed removed
 */
public E putIn(final E newItem){
  final K newKey=newItem.name();
  final E existingItemWithSameKey=nameRemove(newKey);
  if (existingItemWithSameKey != null) {
    outOfBase(existingItemWithSameKey);
    newItem.merge(existingItemWithSameKey);
  }
  final E overflowItem=intoBase(newItem);
  if (overflowItem == newItem) {
    return newItem;
  }
  namePut(newKey,newItem);
  if (overflowItem != null) {
    final K overflowKey=overflowItem.name();
    if (!overflowKey.equals(newKey)) {
      nameRemove(overflowKey);
    }
    return overflowItem;
  }
  return null;
}","/** 
 * Add a new Item into the Bag
 * @param newItem The new Item
 * @return the item which was removed, which may be the input item if it could not be inserted; or null if nothing needed removed
 */
public E putIn(E newItem){
  final K newKey=newItem.name();
  final E existingItemWithSameKey=nameRemove(newKey);
  if (existingItemWithSameKey != null) {
    outOfBase(existingItemWithSameKey);
    newItem=(E)existingItemWithSameKey.merge(newItem);
  }
  final E overflowItem=intoBase(newItem);
  if (overflowItem == newItem) {
    return newItem;
  }
  namePut(newKey,newItem);
  if (overflowItem != null) {
    final K overflowKey=overflowItem.name();
    if (!overflowKey.equals(newKey)) {
      nameRemove(overflowKey);
    }
    return overflowItem;
  }
  return null;
}",0.9593285990961912
166757,"/** 
 * Remove an item from itemTable, then adjust mass
 * @param oldItem The Item to be removed
 */
protected void outOfBase(final E oldItem){
  if (items.remove(oldItem)) {
    addToMass(-(oldItem.getPriority()));
  }
}","/** 
 * Remove an item from itemTable, then adjust mass
 * @param oldItem The Item to be removed
 */
@Override protected void outOfBase(final E oldItem){
  if (items.remove(oldItem)) {
    mass-=oldItem.getPriority();
  }
}",0.9369369369369368
166758,"/** 
 * Defines the focus curve.  x is a proportion between 0 and 1 (inclusive).  x=0 represents low priority (bottom of bag), x=1.0 represents high priority
 * @param x
 * @return 
 */
public float getFocus(float x){
  return (x * x * x);
}","/** 
 * Defines the focus curve.  x is a proportion between 0 and 1 (inclusive).  x=0 represents low priority (bottom of bag), x=1.0 represents high priority
 * @param x
 * @return 
 */
public float getFocus(final float x){
  return (float)curve.y(x);
}",0.9433198380566802
166759,"/** 
 * Insert an item into the itemTable, and return the overflow
 * @param newItem The Item to put in
 * @return The overflow Item
 */
@Override protected E intoBase(E newItem){
  E oldItem=null;
  if (size() >= capacity) {
    oldItem=takeOutIndex(0);
  }
  items.add(newItem);
  mass+=(newItem.budget.getPriority());
  return oldItem;
}","/** 
 * Insert an item into the itemTable, and return the overflow
 * @param newItem The Item to put in
 * @return The overflow Item
 */
@Override protected E intoBase(E newItem){
  float newPriority=newItem.getPriority();
  E oldItem=null;
  if (size() >= capacity) {
    if (newPriority < getMinPriority())     return newItem;
    oldItem=takeOutIndex(0);
  }
  items.add(newItem);
  mass+=(newItem.budget.getPriority());
  return oldItem;
}",0.8684546615581098
166760,"/** 
 * distributor function 
 */
public int nextRemovalIndex(){
  final int s=size();
  if (randomRemoval) {
    x=Memory.randomNumber.nextFloat();
  }
 else {
    x+=scanningRate * 1.0f / (1 + s);
    if (x >= 1.0f)     x-=1.0f;
    if (x <= 0.0f)     x+=1.0f;
  }
  float y=getFocus(x);
  int result=(int)fastRound((1.0 - y) * (s - 1));
  if (result == s) {
    throw new RuntimeException(""String_Node_Str"" + x + ""String_Node_Str""+ y);
  }
  return result;
}","/** 
 * distributor function 
 */
public int nextRemovalIndex(){
  final float s=size();
  if (randomRemoval) {
    x=Memory.randomNumber.nextFloat();
  }
 else {
    x+=scanningRate * 1.0f / (1 + s);
    if (x >= 1.0f)     x-=1.0f;
    if (x <= 0.0f)     x+=1.0f;
  }
  float y=getFocus(x);
  if (y < 0)   y=0;
  if (y > 1.0f)   y=1f;
  int result=(int)Math.round(y * (s - 1));
  if (result == s) {
    throw new RuntimeException(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ result);
  }
  return result;
}",0.8603238866396761
166761,"/** 
 * Take out the first or last E in a level from the itemTable
 * @param level The current level
 * @return The first Item
 */
private E takeOutIndex(final int index){
  final E selected=items.remove(index);
  addToMass(-(selected.budget.getPriority()));
  nameTable.remove(selected.name());
  return selected;
}","/** 
 * Take out the first or last E in a level from the itemTable
 * @param level The current level
 * @return The first Item
 */
private E takeOutIndex(final int index){
  final E selected=items.remove(index);
  mass-=selected.budget.getPriority();
  nameTable.remove(selected.name());
  return selected;
}",0.971153846153846
166762,"public void create(NAR nar){
  int w=50;
  int h=50;
  int water_threshold=30;
  Hauto cells=new Hauto(w,h,nar);
  cells.forEach(0,0,w,h,new CellFunction(){
    @Override public void update(    Cell c){
      float smoothness=20f;
      c.material=Material.GrassFloor;
      double n=SimplexNoise.noise(c.state.x / smoothness,c.state.y / smoothness);
      if ((n * 64) > water_threshold) {
        c.material=Material.Water;
      }
      c.setHeight((int)(Math.random() * 24 + 1));
    }
  }
);
  Maze.buildMaze(cells,3,3,23,23);
  space=new Grid2DSpace(cells,nar);
  space.newWindow(1000,800,true);
  cells.forEach(16,16,18,18,new Hauto.SetMaterial(Material.DirtFloor));
  GridAgent a=new GridAgent(17,17,nar){
    @Override public void update(    Effect nextEffect){
      if (active) {
        nar.stop();
        executed=false;
        for (int i=0; i < 5; i++) {
          nar.step(1);
          if (executed) {
            break;
          }
        }
      }
      if (!target.equals(lasttarget) || target.equals(lasttarget) && (""String_Node_Str"".equals(opname) || ""String_Node_Str"".equals(opname) || ""String_Node_Str"".equals(opname))) {
        getfeedback=true;
      }
      lasttarget=target;
      PVector current=new PVector(x,y);
      if (nextEffect == null) {
        List<PVector> path=Grid2DSpace.Shortest_Path(space,this,current,target);
        actions.clear();
        if (path != null) {
          if (inventorybag != null) {
            inventorybag.x=(int)current.x;
            inventorybag.y=(int)current.y;
            inventorybag.cx=(int)current.x;
            inventorybag.cy=(int)current.y;
          }
          if (inventorybag == null || !(inventorybag instanceof Key)) {
            keyn=-1;
          }
          if (path.size() <= 1) {
            nar.step(1);
            if (getfeedback && !""String_Node_Str"".equals(goal) && current.equals(target)) {
              getfeedback=false;
              GridObject obi=null;
              if (!""String_Node_Str"".equals(opname)) {
                for (                GridObject gridi : space.objects) {
                  if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)current.x && ((LocalGridObject)gridi).y == (int)current.y) {
                    obi=gridi;
                    break;
                  }
                }
              }
              if (obi != null || cells.readCells[(int)current.x][(int)current.y].name.equals(goal)) {
                if (""String_Node_Str"".equals(opname)) {
                  if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                    LocalGridObject ob=(LocalGridObject)inventorybag;
                    ob.x=(int)current.x;
                    ob.y=(int)current.y;
                    space.objects.add(ob);
                  }
                  inventorybag=(LocalGridObject)obi;
                  if (obi != null) {
                    space.objects.remove(obi);
                    if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                      keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str""));
                      for (int i=0; i < cells.h; i++) {
                        for (int j=0; j < cells.w; j++) {
                          if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                            cells.readCells[i][j].is_solid=false;
                            cells.writeCells[i][j].is_solid=false;
                          }
                        }
                      }
                    }
                  }
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.SWITCH) {
                          cells.readCells[i][j].logic=Logic.OFFSWITCH;
                          cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                          cells.readCells[i][j].charge=0.0f;
                          cells.writeCells[i][j].charge=0.0f;
                          nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                          cells.readCells[i][j].logic=Logic.SWITCH;
                          cells.writeCells[i][j].logic=Logic.SWITCH;
                          cells.readCells[i][j].charge=1.0f;
                          cells.writeCells[i][j].charge=1.0f;
                          nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
                if (""String_Node_Str"".equals(opname)) {
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  active=true;
                }
              }
            }
            opname=""String_Node_Str"";
          }
 else {
            active=false;
            int numSteps=Math.min(10,path.size());
            float cx=x;
            float cy=y;
            for (int i=1; i < numSteps; i++) {
              PVector next=path.get(i);
              int dx=(int)(next.x - cx);
              int dy=(int)(next.y - cy);
              if ((dx == 0) && (dy == 1)) {
                turn(UP);
                forward(1);
              }
              if ((dx == 1) && (dy == 0)) {
                turn(RIGHT);
                forward(1);
              }
              if ((dx == -1) && (dy == 0)) {
                turn(LEFT);
                forward(1);
              }
              if ((dx == 0) && (dy == -1)) {
                turn(DOWN);
                forward(1);
              }
              cx=next.x;
              cy=next.y;
            }
          }
        }
      }
    }
  }
;
  Goto wu=new Goto(this,""String_Node_Str"");
  nar.memory.addOperator(wu);
  Pick wa=new Pick(this,""String_Node_Str"");
  nar.memory.addOperator(wa);
  Activate waa=new Activate(this,""String_Node_Str"");
  nar.memory.addOperator(waa);
  Deactivate waaa=new Deactivate(this,""String_Node_Str"");
  nar.memory.addOperator(waaa);
  Say waaaa=new Say(this,""String_Node_Str"");
  nar.memory.addOperator(waaaa);
  space.add(a);
}","public void create(NAR nar){
  int w=50;
  int h=50;
  int water_threshold=30;
  Hauto cells=new Hauto(w,h,nar);
  cells.forEach(0,0,w,h,new CellFunction(){
    @Override public void update(    Cell c){
      float smoothness=20f;
      c.material=Material.GrassFloor;
      double n=SimplexNoise.noise(c.state.x / smoothness,c.state.y / smoothness);
      if ((n * 64) > water_threshold) {
        c.material=Material.Water;
      }
      c.setHeight((int)(Math.random() * 24 + 1));
    }
  }
);
  Maze.buildMaze(cells,3,3,23,23);
  space=new Grid2DSpace(cells,nar);
  space.newWindow(1000,800,true);
  cells.forEach(16,16,18,18,new Hauto.SetMaterial(Material.DirtFloor));
  GridAgent a=new GridAgent(17,17,nar){
    @Override public void update(    Effect nextEffect){
      if (active) {
        nar.stop();
        executed=false;
        for (int i=0; i < 5; i++) {
          nar.step(1);
          if (executed) {
            break;
          }
        }
      }
      if (!target.equals(lasttarget) || target.equals(lasttarget) && (""String_Node_Str"".equals(opname) || ""String_Node_Str"".equals(opname) || ""String_Node_Str"".equals(opname))) {
        getfeedback=true;
      }
      lasttarget=target;
      PVector current=new PVector(x,y);
      if (nextEffect == null) {
        List<PVector> path=Grid2DSpace.Shortest_Path(space,this,current,target);
        actions.clear();
        if (path != null) {
          if (inventorybag != null) {
            inventorybag.x=(int)current.x;
            inventorybag.y=(int)current.y;
            inventorybag.cx=(int)current.x;
            inventorybag.cy=(int)current.y;
          }
          if (inventorybag == null || !(inventorybag instanceof Key)) {
            keyn=-1;
          }
          if (path.size() <= 1) {
            active=true;
            nar.step(1);
            if (getfeedback && !""String_Node_Str"".equals(goal) && current.equals(target)) {
              getfeedback=false;
              GridObject obi=null;
              if (!""String_Node_Str"".equals(opname)) {
                for (                GridObject gridi : space.objects) {
                  if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)current.x && ((LocalGridObject)gridi).y == (int)current.y) {
                    obi=gridi;
                    break;
                  }
                }
              }
              if (obi != null || cells.readCells[(int)current.x][(int)current.y].name.equals(goal)) {
                if (""String_Node_Str"".equals(opname)) {
                  if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                    LocalGridObject ob=(LocalGridObject)inventorybag;
                    ob.x=(int)current.x;
                    ob.y=(int)current.y;
                    space.objects.add(ob);
                  }
                  inventorybag=(LocalGridObject)obi;
                  if (obi != null) {
                    space.objects.remove(obi);
                    if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                      keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str""));
                      for (int i=0; i < cells.h; i++) {
                        for (int j=0; j < cells.w; j++) {
                          if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                            cells.readCells[i][j].is_solid=false;
                            cells.writeCells[i][j].is_solid=false;
                          }
                        }
                      }
                    }
                  }
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.SWITCH) {
                          cells.readCells[i][j].logic=Logic.OFFSWITCH;
                          cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                          cells.readCells[i][j].charge=0.0f;
                          cells.writeCells[i][j].charge=0.0f;
                          nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
 else                 if (""String_Node_Str"".equals(opname)) {
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (cells.readCells[i][j].name.equals(goal)) {
                        if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                          cells.readCells[i][j].logic=Logic.SWITCH;
                          cells.writeCells[i][j].logic=Logic.SWITCH;
                          cells.readCells[i][j].charge=1.0f;
                          cells.writeCells[i][j].charge=1.0f;
                          nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                        }
                      }
                    }
                  }
                }
                if (""String_Node_Str"".equals(opname)) {
                  nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                  active=true;
                }
              }
            }
            opname=""String_Node_Str"";
          }
 else {
            active=false;
            int numSteps=Math.min(10,path.size());
            float cx=x;
            float cy=y;
            for (int i=1; i < numSteps; i++) {
              PVector next=path.get(i);
              int dx=(int)(next.x - cx);
              int dy=(int)(next.y - cy);
              if ((dx == 0) && (dy == 1)) {
                turn(UP);
                forward(1);
              }
              if ((dx == 1) && (dy == 0)) {
                turn(RIGHT);
                forward(1);
              }
              if ((dx == -1) && (dy == 0)) {
                turn(LEFT);
                forward(1);
              }
              if ((dx == 0) && (dy == -1)) {
                turn(DOWN);
                forward(1);
              }
              cx=next.x;
              cy=next.y;
            }
          }
        }
      }
    }
  }
;
  Goto wu=new Goto(this,""String_Node_Str"");
  nar.memory.addOperator(wu);
  Pick wa=new Pick(this,""String_Node_Str"");
  nar.memory.addOperator(wa);
  Activate waa=new Activate(this,""String_Node_Str"");
  nar.memory.addOperator(waa);
  Deactivate waaa=new Deactivate(this,""String_Node_Str"");
  nar.memory.addOperator(waaa);
  Say waaaa=new Say(this,""String_Node_Str"");
  nar.memory.addOperator(waaaa);
  space.add(a);
}",0.9981761143941053
166763,"@Override public void update(Effect nextEffect){
  if (active) {
    nar.stop();
    executed=false;
    for (int i=0; i < 5; i++) {
      nar.step(1);
      if (executed) {
        break;
      }
    }
  }
  if (!target.equals(lasttarget) || target.equals(lasttarget) && (""String_Node_Str"".equals(opname) || ""String_Node_Str"".equals(opname) || ""String_Node_Str"".equals(opname))) {
    getfeedback=true;
  }
  lasttarget=target;
  PVector current=new PVector(x,y);
  if (nextEffect == null) {
    List<PVector> path=Grid2DSpace.Shortest_Path(space,this,current,target);
    actions.clear();
    if (path != null) {
      if (inventorybag != null) {
        inventorybag.x=(int)current.x;
        inventorybag.y=(int)current.y;
        inventorybag.cx=(int)current.x;
        inventorybag.cy=(int)current.y;
      }
      if (inventorybag == null || !(inventorybag instanceof Key)) {
        keyn=-1;
      }
      if (path.size() <= 1) {
        nar.step(1);
        if (getfeedback && !""String_Node_Str"".equals(goal) && current.equals(target)) {
          getfeedback=false;
          GridObject obi=null;
          if (!""String_Node_Str"".equals(opname)) {
            for (            GridObject gridi : space.objects) {
              if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)current.x && ((LocalGridObject)gridi).y == (int)current.y) {
                obi=gridi;
                break;
              }
            }
          }
          if (obi != null || cells.readCells[(int)current.x][(int)current.y].name.equals(goal)) {
            if (""String_Node_Str"".equals(opname)) {
              if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                LocalGridObject ob=(LocalGridObject)inventorybag;
                ob.x=(int)current.x;
                ob.y=(int)current.y;
                space.objects.add(ob);
              }
              inventorybag=(LocalGridObject)obi;
              if (obi != null) {
                space.objects.remove(obi);
                if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                  keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str""));
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                        cells.readCells[i][j].is_solid=false;
                        cells.writeCells[i][j].is_solid=false;
                      }
                    }
                  }
                }
              }
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.SWITCH) {
                      cells.readCells[i][j].logic=Logic.OFFSWITCH;
                      cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                      cells.readCells[i][j].charge=0.0f;
                      cells.writeCells[i][j].charge=0.0f;
                      nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                      cells.readCells[i][j].logic=Logic.SWITCH;
                      cells.writeCells[i][j].logic=Logic.SWITCH;
                      cells.readCells[i][j].charge=1.0f;
                      cells.writeCells[i][j].charge=1.0f;
                      nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
            if (""String_Node_Str"".equals(opname)) {
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              active=true;
            }
          }
        }
        opname=""String_Node_Str"";
      }
 else {
        active=false;
        int numSteps=Math.min(10,path.size());
        float cx=x;
        float cy=y;
        for (int i=1; i < numSteps; i++) {
          PVector next=path.get(i);
          int dx=(int)(next.x - cx);
          int dy=(int)(next.y - cy);
          if ((dx == 0) && (dy == 1)) {
            turn(UP);
            forward(1);
          }
          if ((dx == 1) && (dy == 0)) {
            turn(RIGHT);
            forward(1);
          }
          if ((dx == -1) && (dy == 0)) {
            turn(LEFT);
            forward(1);
          }
          if ((dx == 0) && (dy == -1)) {
            turn(DOWN);
            forward(1);
          }
          cx=next.x;
          cy=next.y;
        }
      }
    }
  }
}","@Override public void update(Effect nextEffect){
  if (active) {
    nar.stop();
    executed=false;
    for (int i=0; i < 5; i++) {
      nar.step(1);
      if (executed) {
        break;
      }
    }
  }
  if (!target.equals(lasttarget) || target.equals(lasttarget) && (""String_Node_Str"".equals(opname) || ""String_Node_Str"".equals(opname) || ""String_Node_Str"".equals(opname))) {
    getfeedback=true;
  }
  lasttarget=target;
  PVector current=new PVector(x,y);
  if (nextEffect == null) {
    List<PVector> path=Grid2DSpace.Shortest_Path(space,this,current,target);
    actions.clear();
    if (path != null) {
      if (inventorybag != null) {
        inventorybag.x=(int)current.x;
        inventorybag.y=(int)current.y;
        inventorybag.cx=(int)current.x;
        inventorybag.cy=(int)current.y;
      }
      if (inventorybag == null || !(inventorybag instanceof Key)) {
        keyn=-1;
      }
      if (path.size() <= 1) {
        active=true;
        nar.step(1);
        if (getfeedback && !""String_Node_Str"".equals(goal) && current.equals(target)) {
          getfeedback=false;
          GridObject obi=null;
          if (!""String_Node_Str"".equals(opname)) {
            for (            GridObject gridi : space.objects) {
              if (gridi instanceof LocalGridObject && ((LocalGridObject)gridi).doorname.equals(goal) && ((LocalGridObject)gridi).x == (int)current.x && ((LocalGridObject)gridi).y == (int)current.y) {
                obi=gridi;
                break;
              }
            }
          }
          if (obi != null || cells.readCells[(int)current.x][(int)current.y].name.equals(goal)) {
            if (""String_Node_Str"".equals(opname)) {
              if (inventorybag != null && inventorybag instanceof LocalGridObject) {
                LocalGridObject ob=(LocalGridObject)inventorybag;
                ob.x=(int)current.x;
                ob.y=(int)current.y;
                space.objects.add(ob);
              }
              inventorybag=(LocalGridObject)obi;
              if (obi != null) {
                space.objects.remove(obi);
                if (inventorybag.doorname.startsWith(""String_Node_Str"")) {
                  keyn=Integer.parseInt(inventorybag.doorname.replaceAll(""String_Node_Str"",""String_Node_Str""));
                  for (int i=0; i < cells.h; i++) {
                    for (int j=0; j < cells.w; j++) {
                      if (Hauto.doornumber(cells.readCells[i][j]) == keyn) {
                        cells.readCells[i][j].is_solid=false;
                        cells.writeCells[i][j].is_solid=false;
                      }
                    }
                  }
                }
              }
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.SWITCH) {
                      cells.readCells[i][j].logic=Logic.OFFSWITCH;
                      cells.writeCells[i][j].logic=Logic.OFFSWITCH;
                      cells.readCells[i][j].charge=0.0f;
                      cells.writeCells[i][j].charge=0.0f;
                      nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
 else             if (""String_Node_Str"".equals(opname)) {
              for (int i=0; i < cells.h; i++) {
                for (int j=0; j < cells.w; j++) {
                  if (cells.readCells[i][j].name.equals(goal)) {
                    if (cells.readCells[i][j].logic == Logic.OFFSWITCH) {
                      cells.readCells[i][j].logic=Logic.SWITCH;
                      cells.writeCells[i][j].logic=Logic.SWITCH;
                      cells.readCells[i][j].charge=1.0f;
                      cells.writeCells[i][j].charge=1.0f;
                      nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
                    }
                  }
                }
              }
            }
            if (""String_Node_Str"".equals(opname)) {
              nar.addInput(""String_Node_Str"" + goal + ""String_Node_Str"");
              active=true;
            }
          }
        }
        opname=""String_Node_Str"";
      }
 else {
        active=false;
        int numSteps=Math.min(10,path.size());
        float cx=x;
        float cy=y;
        for (int i=1; i < numSteps; i++) {
          PVector next=path.get(i);
          int dx=(int)(next.x - cx);
          int dy=(int)(next.y - cy);
          if ((dx == 0) && (dy == 1)) {
            turn(UP);
            forward(1);
          }
          if ((dx == 1) && (dy == 0)) {
            turn(RIGHT);
            forward(1);
          }
          if ((dx == -1) && (dy == 0)) {
            turn(LEFT);
            forward(1);
          }
          if ((dx == 0) && (dy == -1)) {
            turn(DOWN);
            forward(1);
          }
          cx=next.x;
          cy=next.y;
        }
      }
    }
  }
}",0.997965707643127
166764,"private NSlider newSpeedSlider(){
  final NSlider s=new NSlider(0,0,1.0f){
    @Override public String getText(){
      if (value == null) {
        return ""String_Node_Str"";
      }
      float v=value();
      String s=""String_Node_Str"" + memory.getTime();
      if (currentSpeed == 0) {
        s+=""String_Node_Str"";
      }
 else       if (currentSpeed == 1.0) {
        s+=""String_Node_Str"";
      }
 else {
        s+=""String_Node_Str"" + nar.getMinCyclePeriodMS() + ""String_Node_Str"";
      }
      return s;
    }
    @Override public void onChange(    float v){
      setSpeed(v);
    }
  }
;
  this.speedSlider=s;
  return s;
}","private NSlider newSpeedSlider(){
  final NSlider s=new NSlider(0f,0f,1.0f){
    @Override public String getText(){
      if (value == null) {
        return ""String_Node_Str"";
      }
      String s=""String_Node_Str"" + memory.getTime();
      if (currentSpeed == 0) {
        s+=""String_Node_Str"";
      }
 else       if (currentSpeed == 1.0) {
        s+=""String_Node_Str"";
      }
 else {
        s+=""String_Node_Str"" + nar.getMinCyclePeriodMS() + ""String_Node_Str"";
      }
      return s;
    }
    @Override public void onChange(    float v){
      setSpeed(v);
    }
  }
;
  this.speedSlider=s;
  return s;
}",0.980015987210232
166765,"@Override public void actionPerformed(ActionEvent e){
  setSpeed(1.0);
  volumeSlider.setValue(20);
}","@Override public void actionPerformed(ActionEvent e){
  setSpeed(1.0f);
  volumeSlider.setValue(20f);
}",0.9901960784313726
166766,"public void setSpeed(float nextSpeed){
  final float maxPeriodMS=1024.0f;
  if (nextSpeed == 0) {
    if (currentSpeed == 0) {
      if (lastSpeed == 0) {
        lastSpeed=defaultSpeed;
      }
      nextSpeed=lastSpeed;
    }
 else {
    }
  }
  lastSpeed=currentSpeed;
  speedSlider.repaint();
  stopButton.setText(String.valueOf(FA_PlayCharacter));
  speedSlider.setValue(nextSpeed);
  currentSpeed=nextSpeed;
  double logScale=50;
  if (nextSpeed > 0) {
    int ms=(int)((1.0 - Math.log(1 + nextSpeed * logScale) / Math.log(1 + logScale)) * maxPeriodMS);
    if (ms < 1) {
      if (allowFullSpeed)       ms=0;
 else       ms=1;
    }
    stopButton.setText(String.valueOf(FA_StopCharacter));
    nar.start(ms);
  }
 else {
    stopButton.setText(String.valueOf(FA_PlayCharacter));
    nar.stop();
  }
}","public void setSpeed(float nextSpeed){
  final float maxPeriodMS=1024.0f;
  if (nextSpeed == 0) {
    if (currentSpeed == 0) {
      if (lastSpeed == 0) {
        lastSpeed=defaultSpeed;
      }
      nextSpeed=lastSpeed;
    }
 else {
    }
  }
  lastSpeed=currentSpeed;
  speedSlider.repaint();
  stopButton.setText(String.valueOf(FA_PlayCharacter));
  speedSlider.setValue(nextSpeed);
  currentSpeed=nextSpeed;
  float logScale=50f;
  if (nextSpeed > 0) {
    int ms=(int)((1.0 - Math.log(1 + nextSpeed * logScale) / Math.log(1 + logScale)) * maxPeriodMS);
    if (ms < 1) {
      if (allowFullSpeed)       ms=0;
 else       ms=1;
    }
    stopButton.setText(String.valueOf(FA_StopCharacter));
    nar.start(ms);
  }
 else {
    stopButton.setText(String.valueOf(FA_PlayCharacter));
    nar.stop();
  }
}",0.9925742574257426
166767,"private JComponent newParameterPanel(){
  JPanel p=new JPanel();
  JPanel pc=new JPanel();
  pc.setLayout(new GridLayout(1,0));
  stopButton=new FAButton(FA_StopCharacter);
  stopButton.addActionListener(this);
  pc.add(stopButton);
  walkButton=new FAButton('\uf051');
  walkButton.setToolTipText(""String_Node_Str"");
  walkButton.addActionListener(this);
  pc.add(walkButton);
  JButton focusButton=new FAButton(FA_FocusCharacter);
  focusButton.setToolTipText(""String_Node_Str"");
  focusButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setSpeed(1.0);
      volumeSlider.setValue(20);
    }
  }
);
  pc.add(focusButton);
  p.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.anchor=GridBagConstraints.NORTH;
  c.fill=GridBagConstraints.HORIZONTAL;
  c.weightx=1;
  c.gridx=0;
  c.ipady=8;
  p.add(pc,c);
  NSlider vs=newVolumeSlider();
  vs.setFont(vs.getFont().deriveFont(Font.BOLD));
  p.add(vs,c);
  NSlider ss=newSpeedSlider();
  ss.setFont(vs.getFont());
  p.add(ss,c);
  c.ipady=4;
  p.add(newIntSlider(memory.param.taskForgettingRate,""String_Node_Str"",1,99),c);
  p.add(newIntSlider(memory.param.beliefForgettingRate,""String_Node_Str"",1,99),c);
  p.add(newIntSlider(memory.param.conceptForgettingRate,""String_Node_Str"",1,99),c);
{
    this.chart=new ChartsPanel(nar.memory.logic,chartHistoryLength);
  }
  c.weighty=1.0;
  c.fill=GridBagConstraints.BOTH;
  p.add(chart,c);
  return p;
}","private JComponent newParameterPanel(){
  JPanel p=new JPanel();
  JPanel pc=new JPanel();
  pc.setLayout(new GridLayout(1,0));
  stopButton=new FAButton(FA_StopCharacter);
  stopButton.addActionListener(this);
  pc.add(stopButton);
  walkButton=new FAButton('\uf051');
  walkButton.setToolTipText(""String_Node_Str"");
  walkButton.addActionListener(this);
  pc.add(walkButton);
  JButton focusButton=new FAButton(FA_FocusCharacter);
  focusButton.setToolTipText(""String_Node_Str"");
  focusButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setSpeed(1.0f);
      volumeSlider.setValue(20f);
    }
  }
);
  pc.add(focusButton);
  p.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.anchor=GridBagConstraints.NORTH;
  c.fill=GridBagConstraints.HORIZONTAL;
  c.weightx=1;
  c.gridx=0;
  c.ipady=8;
  p.add(pc,c);
  NSlider vs=newVolumeSlider();
  vs.setFont(vs.getFont().deriveFont(Font.BOLD));
  p.add(vs,c);
  NSlider ss=newSpeedSlider();
  ss.setFont(vs.getFont());
  p.add(ss,c);
  c.ipady=4;
  p.add(newIntSlider(memory.param.taskForgettingRate,""String_Node_Str"",1,99),c);
  p.add(newIntSlider(memory.param.beliefForgettingRate,""String_Node_Str"",1,99),c);
  p.add(newIntSlider(memory.param.conceptForgettingRate,""String_Node_Str"",1,99),c);
{
    this.chart=new ChartsPanel(nar.memory.logic,chartHistoryLength);
  }
  c.weighty=1.0;
  c.fill=GridBagConstraints.BOTH;
  p.add(chart,c);
  return p;
}",0.9993315508021392
166768,"private NSlider newVolumeSlider(){
  final NSlider s=this.volumeSlider=new NSlider(100,0,100){
    @Override public String getText(){
      if (value == null) {
        return ""String_Node_Str"";
      }
      float v=value();
      String s=""String_Node_Str"" + super.getText() + ""String_Node_Str"";
      if (v == 0) {
        s+=""String_Node_Str"";
      }
 else       if (v < 25) {
        s+=""String_Node_Str"";
      }
 else       if (v < 75) {
        s+=""String_Node_Str"";
      }
 else {
        s+=""String_Node_Str"";
      }
      s+=""String_Node_Str"";
      return s;
    }
    @Override public void setValue(    float v){
      super.setValue(Math.round(v));
      repaint();
    }
    @Override public void onChange(    float v){
      int level=(int)v;
      nar.param().noiseLevel.set(level);
    }
  }
;
  return s;
}","private NSlider newVolumeSlider(){
  final NSlider s=this.volumeSlider=new NSlider(100f,0,100f){
    @Override public String getText(){
      if (value == null) {
        return ""String_Node_Str"";
      }
      float v=value();
      String s=""String_Node_Str"" + super.getText() + ""String_Node_Str"";
      if (v == 0) {
        s+=""String_Node_Str"";
      }
 else       if (v < 25) {
        s+=""String_Node_Str"";
      }
 else       if (v < 75) {
        s+=""String_Node_Str"";
      }
 else {
        s+=""String_Node_Str"";
      }
      s+=""String_Node_Str"";
      return s;
    }
    @Override public void setValue(    float v){
      super.setValue(Math.round(v));
      repaint();
    }
    @Override public void onChange(    float v){
      int level=(int)v;
      nar.param().noiseLevel.set(level);
    }
  }
;
  return s;
}",0.9987937273823884
166769,"public NSlider(AtomicReference<Double> value,float min,float max){
  super();
  nf.setMaximumFractionDigits(3);
  this.value=value;
  this.min=min;
  this.max=max;
  setBorder(BasicBorders.getButtonBorder());
  addMouseListener(this);
  addMouseMotionListener(this);
  setFont(NARSwing.monofont.deriveFont(12f));
}","public NSlider(AtomicReference<Float> value,float min,float max){
  super();
  nf.setMaximumFractionDigits(3);
  this.value=value;
  this.min=min;
  this.max=max;
  setBorder(BasicBorders.getButtonBorder());
  addMouseListener(this);
  addMouseMotionListener(this);
  setFont(NARSwing.monofont.deriveFont(12f));
}",0.9824561403508772
166770,"public void setValue(float v){
  if (v != value.get().floatValue()) {
    value.set((double)v);
    onChange(v);
  }
}","public void setValue(float v){
  if (v != value.get().floatValue()) {
    value.set(v);
    onChange(v);
  }
}",0.9649122807017544
166771,"public MultiModePanel(NAR nar,Object object){
  super(new BorderLayout());
  this.nar=nar;
  this.object=object;
  if (object instanceof Task) {
    label=((Task)object).sentence.toString();
  }
 else {
    label=object.toString();
  }
  setMode(new LogView());
}","public MultiModePanel(NAR nar,Object object){
  super(new BorderLayout());
  this.nar=nar;
  this.object=object;
  if (object instanceof Task) {
    label=((Task)object).sentence.toString();
  }
 else {
    label=object.toString();
  }
  setMode(new GraphView());
}",0.9848484848484848
166772,"/** 
 * returns the same instance 
 */
public LogicSense update(){
  long time=memory.getTime();
  if (time == lastUpdate) {
    return this;
  }
  lastUpdate=time;
  put(""String_Node_Str"",conceptNum);
  put(""String_Node_Str"",conceptPriorityMean);
  put(""String_Node_Str"",conceptBeliefsSum);
  put(""String_Node_Str"",conceptQuestionsSum);
  put(""String_Node_Str"",memory.novelTasks.size());
  put(""String_Node_Str"",memory.emotion.happy());
  put(""String_Node_Str"",memory.emotion.busy());
  double cycleTimeMS=CYCLE.getValue();
  double cycleTimeMeanMS=CYCLE.get().mean();
{
    put(""String_Node_Str"",(1000.0 / CYCLE_REAL.getValue()));
    put(""String_Node_Str"",(cycleTimeMeanMS == 0) ? 0 : (1000.0 / cycleTimeMeanMS));
  }
{
    put(""String_Node_Str"",IO_CYCLE.getValue() / MEMORY_CYCLE.getValue());
  }
{
    put(""String_Node_Str"",MEMORY_CYCLE_RAM_USED.getValue());
  }
{
    put(""String_Node_Str"",CYCLE_CPU_TIME.get().mean());
  }
{
    DataSet fire=TASKLINK_FIRE.get();
    put(""String_Node_Str"",fire.mean());
    put(""String_Node_Str"",(double)TASKLINK_FIRE.getDeltaHits());
    put(""String_Node_Str"",TASKTERMLINK_REASON.get().mean());
    put(""String_Node_Str"",(double)TASKTERMLINK_REASON.getHits());
  }
{
    put(""String_Node_Str"",OUTPUT_TASK.getHits());
    put(""String_Node_Str"",OUTPUT_TASK.get().mean());
  }
{
    put(""String_Node_Str"",CONCEPT_NEW.getHits());
    put(""String_Node_Str"",CONCEPT_NEW.get().mean());
  }
  if (time % allSensorResetPeriodCycles == 0)   updateSensors(true);
  return this;
}","/** 
 * returns the same instance 
 */
public LogicSense update(){
  long time=memory.getTime();
  if (time == lastUpdate) {
    return this;
  }
  lastUpdate=time;
  put(""String_Node_Str"",conceptNum);
  put(""String_Node_Str"",conceptPriorityMean);
  put(""String_Node_Str"",conceptBeliefsSum);
  put(""String_Node_Str"",conceptQuestionsSum);
  put(""String_Node_Str"",memory.novelTasks.size());
  put(""String_Node_Str"",memory.emotion.happy());
  put(""String_Node_Str"",memory.emotion.busy());
  double cycleTimeMS=CYCLE.getValue();
  double cycleTimeMeanMS=CYCLE.get().mean();
{
    put(""String_Node_Str"",(1000.0 / CYCLE_REAL.getValue()));
    put(""String_Node_Str"",(cycleTimeMeanMS == 0) ? 0 : (1000.0 / cycleTimeMeanMS));
  }
{
    put(""String_Node_Str"",IO_CYCLE.getValue() / MEMORY_CYCLE.getValue());
  }
{
    put(""String_Node_Str"",MEMORY_CYCLE_RAM_USED.getValue());
  }
{
    put(""String_Node_Str"",CYCLE_CPU_TIME.get().mean());
  }
{
    DataSet fire=TASKLINK_FIRE.get();
    put(""String_Node_Str"",fire.mean());
    put(""String_Node_Str"",TASKLINK_FIRE.getDeltaHits());
    put(""String_Node_Str"",TASKTERMLINK_REASON.get().mean());
    put(""String_Node_Str"",TASKTERMLINK_REASON.getHits());
  }
{
    put(""String_Node_Str"",OUTPUT_TASK.getHits());
    put(""String_Node_Str"",OUTPUT_TASK.get().mean());
  }
{
    put(""String_Node_Str"",CONCEPT_NEW.getHits());
    put(""String_Node_Str"",CONCEPT_NEW.get().mean());
  }
  if (time % allSensorResetPeriodCycles == 0)   updateSensors(true);
  return this;
}",0.9946702198534312
166773,"default public double mean(){
  return (sum() / hits());
}","default public double mean(){
  long h=hits();
  if (h == 0)   return 0;
  return (sum() / h);
}",0.6883116883116883
166774,"@Override protected ArrayList<Task> execute(Operation operation,Term[] args,Memory memory){
  js.put(""String_Node_Str"",memory);
  if (args.length != 2)   return null;
  if (!(args[1] instanceof Variable)) {
    return null;
  }
  Object result=null;
  String input=Texts.unescape(args[0].name()).toString();
  if (input.charAt(0) == '""')   input=input.substring(1,input.length() - 1);
  try {
    result=js.eval(input);
  }
 catch (  Throwable ex) {
    result=ex.toString();
  }
  memory.output(Javascript.class,input + ""String_Node_Str"" + result);
  Term r=new Term(Texts.escape('""' + result.toString() + '""').toString());
  Inheritance t=Inheritance.make(Product.make(new Term[]{operation,r},memory),new Term(""String_Node_Str""),memory);
  memory.output(Task.class,t);
  ArrayList<Task> results=new ArrayList<>(1);
  results.add(memory.newTask(t,Symbols.JUDGMENT_MARK,1f,0.99f,Parameters.DEFAULT_JUDGMENT_PRIORITY,Parameters.DEFAULT_JUDGMENT_DURABILITY));
  return results;
}","@Override protected ArrayList<Task> execute(Operation operation,Term[] args,Memory memory){
  js.put(""String_Node_Str"",memory);
  if (args.length != 2)   return null;
  if (!(args[1] instanceof Variable)) {
    return null;
  }
  Object result=null;
  String input=Texts.unescape(args[0].name()).toString();
  if (input.charAt(0) == '""')   input=input.substring(1,input.length() - 1);
  try {
    result=js.eval(input);
  }
 catch (  Throwable ex) {
    result=ex.toString();
  }
  memory.output(Javascript.class,input + ""String_Node_Str"" + result);
  Term resultTerm=new Term(Texts.escape('""' + result.toString() + '""').toString());
  Inheritance operatorInheritance=Operation.make(Product.make(new Term[]{args[0],resultTerm},memory),this,memory);
  Inheritance resultInheritance=Inheritance.make(operatorInheritance,new Term(""String_Node_Str""),memory);
  memory.output(Task.class,resultInheritance);
  ArrayList<Task> results=new ArrayList<>(1);
  results.add(memory.newTask(resultInheritance,Symbols.JUDGMENT_MARK,1f,0.99f,Parameters.DEFAULT_JUDGMENT_PRIORITY,Parameters.DEFAULT_JUDGMENT_DURABILITY));
  return results;
}",0.906235126130414
166775,"/** 
 * To accept a new goal, and check for revisions and realization, then decide whether to actively pursue it
 * @param judg The judgment to be accepted
 * @param task The task to be processed
 * @return Whether to continue the processing of the task
 */
private void processGoal(final Task task){
  final Sentence goal=task.sentence;
  final Sentence oldGoal=selectCandidate(goal,desires);
  boolean noRevision=true;
  if (oldGoal != null) {
    final Stamp newStamp=goal.stamp;
    final Stamp oldStamp=oldGoal.stamp;
    if (newStamp.equals(oldStamp)) {
      return;
    }
    if (revisible(goal,oldGoal)) {
      memory.setTheNewStamp(make(newStamp,oldStamp,memory.getTime()));
      if (memory.getTheNewStamp() != null) {
        revision(goal,oldGoal,false,memory);
        noRevision=false;
      }
    }
  }
  if (task.aboveThreshold()) {
    final Sentence belief=selectCandidate(goal,beliefs);
    if (belief != null)     trySolution(belief,task,memory);
    if (task.aboveThreshold()) {
      addToTable(goal,desires,Parameters.MAXIMUM_BELIEF_LENGTH);
      if (noRevision) {
        decisionMaking(task,this);
      }
    }
  }
}","/** 
 * To accept a new goal, and check for revisions and realization, then decide whether to actively pursue it
 * @param judg The judgment to be accepted
 * @param task The task to be processed
 * @return Whether to continue the processing of the task
 */
private void processGoal(final Task task){
  final Sentence goal=task.sentence;
  final Sentence oldGoal=selectCandidate(goal,desires);
  boolean noRevision=true;
  if (oldGoal != null) {
    final Stamp newStamp=goal.stamp;
    final Stamp oldStamp=oldGoal.stamp;
    if (newStamp.equals(oldStamp)) {
      return;
    }
    if (revisible(goal,oldGoal)) {
      memory.setTheNewStamp(make(newStamp,oldStamp,memory.getTime()));
      if (memory.getTheNewStamp() != null) {
        revision(goal,oldGoal,false,memory);
        noRevision=false;
      }
    }
  }
  if (task.aboveThreshold()) {
    final Sentence belief=selectCandidate(goal,beliefs);
    if (belief != null)     trySolution(belief,task,memory);
    if (task.aboveThreshold()) {
      addToTable(goal,desires,Parameters.MAXIMUM_BELIEF_LENGTH);
      if (noRevision || (task.sentence.content instanceof Operation)) {
        decisionMaking(task,this);
      }
    }
  }
}",0.979469632164243
166776,"public static void temporalInduction(final Sentence s1,final Sentence s2,final Memory memory){
  if ((s1.truth == null) || (s2.truth == null))   return;
  Term t1=s1.cloneContent();
  Term t2=s2.cloneContent();
  Term t11=null;
  Term t22=null;
  if ((t1 instanceof Inheritance) && (t2 instanceof Inheritance)) {
    Statement ss1=(Statement)t1;
    Statement ss2=(Statement)t2;
    Variable var1=new Variable(""String_Node_Str"");
    Variable var2=var1;
    if (ss1.getSubject().equals(ss2.getSubject())) {
      t11=Statement.make(ss1,var1,ss1.getPredicate(),memory);
      t22=Statement.make(ss2,var2,ss2.getPredicate(),memory);
    }
 else     if (ss1.getPredicate().equals(ss2.getPredicate())) {
      t11=Statement.make(ss1,ss1.getSubject(),var1,memory);
      t22=Statement.make(ss2,ss2.getSubject(),var2,memory);
    }
  }
  if (Statement.invalidStatement(t1,t2)) {
    return;
  }
  long time1=s1.getOccurenceTime();
  long time2=s2.getOccurenceTime();
  long timeDiff=time2 - time1;
  Interval interval;
  if (Math.abs(timeDiff) > Parameters.DURATION) {
    interval=new Interval(Math.abs(timeDiff));
    if (timeDiff > 0) {
      t1=Conjunction.make(t1,interval,ORDER_FORWARD,memory);
    }
 else {
      t2=Conjunction.make(t2,interval,ORDER_FORWARD,memory);
    }
  }
  int order;
  if (timeDiff > Parameters.DURATION) {
    order=TemporalRules.ORDER_FORWARD;
  }
 else   if (timeDiff < -Parameters.DURATION) {
    order=TemporalRules.ORDER_BACKWARD;
  }
 else {
    order=TemporalRules.ORDER_CONCURRENT;
  }
  TruthValue givenTruth1=s1.truth;
  TruthValue givenTruth2=s2.truth;
  TruthValue truth1=TruthFunctions.abduction(givenTruth1,givenTruth2);
  TruthValue truth2=TruthFunctions.abduction(givenTruth2,givenTruth1);
  TruthValue truth3=TruthFunctions.comparison(givenTruth1,givenTruth2);
  BudgetValue budget1=BudgetFunctions.forward(truth1,memory);
  BudgetValue budget2=BudgetFunctions.forward(truth2,memory);
  BudgetValue budget3=BudgetFunctions.forward(truth3,memory);
  Statement statement1=Implication.make(t1,t2,order,memory);
  Statement statement2=Implication.make(t2,t1,reverseOrder(order),memory);
  Statement statement3=Equivalence.make(t1,t2,order,memory);
  if (t11 != null && t22 != null) {
    Statement statement11=Implication.make(t11,t22,order,memory);
    Statement statement22=Implication.make(t22,t11,reverseOrder(order),memory);
    Statement statement33=Equivalence.make(t11,t22,order,memory);
    memory.doublePremiseTask(statement11,truth1,budget1);
    memory.doublePremiseTask(statement22,truth2,budget2);
    memory.doublePremiseTask(statement33,truth3,budget3);
  }
  memory.doublePremiseTask(statement1,truth1,budget1);
  memory.doublePremiseTask(statement2,truth2,budget2);
  memory.doublePremiseTask(statement3,truth3,budget3);
}","public static void temporalInduction(final Sentence s1,final Sentence s2,final Memory memory){
  if ((s1.truth == null) || (s2.truth == null))   return;
  Term t1=s1.cloneContent();
  Term t2=s2.cloneContent();
  Term t11=null;
  Term t22=null;
  if ((t1 instanceof Inheritance) && (t2 instanceof Inheritance)) {
    Statement ss1=(Statement)t1;
    Statement ss2=(Statement)t2;
    Variable var1=new Variable(""String_Node_Str"");
    Variable var2=var1;
    if (ss1.getSubject().equals(ss2.getSubject())) {
      t11=Statement.make(ss1,var1,ss1.getPredicate(),memory);
      t22=Statement.make(ss2,var2,ss2.getPredicate(),memory);
    }
 else     if (ss1.getPredicate().equals(ss2.getPredicate())) {
      t11=Statement.make(ss1,ss1.getSubject(),var1,memory);
      t22=Statement.make(ss2,ss2.getSubject(),var2,memory);
    }
    if (ss2 instanceof Operation ^ ss1 instanceof Operation) {
      if (ss2 instanceof Operation) {
        boolean anyone=false;
        Term comp=ss1.getSubject();
        for (        Term t : ((Operation)ss2).getArguments()) {
          if (t.equals(comp)) {
            anyone=true;
          }
        }
        Term[] ars=((Operation)ss2).clone().getArguments().clone();
        for (int i=0; i < ars.length; i++) {
          if (ars[i].equals(comp)) {
            ars[i]=var1;
          }
        }
        t11=Statement.make(ss1,var1,ss1.getPredicate(),memory);
        Product S=(Product)Product.make(ars,memory);
        Operation op=(Operation)Operation.make(S,ss2.getPredicate(),memory);
        t22=op;
      }
    }
  }
  if (Statement.invalidStatement(t1,t2)) {
    return;
  }
  long time1=s1.getOccurenceTime();
  long time2=s2.getOccurenceTime();
  long timeDiff=time2 - time1;
  Interval interval;
  if (Math.abs(timeDiff) > Parameters.DURATION) {
    interval=new Interval(Math.abs(timeDiff));
    if (timeDiff > 0) {
      t1=Conjunction.make(t1,interval,ORDER_FORWARD,memory);
    }
 else {
      t2=Conjunction.make(t2,interval,ORDER_FORWARD,memory);
    }
  }
  int order;
  if (timeDiff > Parameters.DURATION) {
    order=TemporalRules.ORDER_FORWARD;
  }
 else   if (timeDiff < -Parameters.DURATION) {
    order=TemporalRules.ORDER_BACKWARD;
  }
 else {
    order=TemporalRules.ORDER_CONCURRENT;
  }
  TruthValue givenTruth1=s1.truth;
  TruthValue givenTruth2=s2.truth;
  TruthValue truth1=TruthFunctions.abduction(givenTruth1,givenTruth2);
  TruthValue truth2=TruthFunctions.abduction(givenTruth2,givenTruth1);
  TruthValue truth3=TruthFunctions.comparison(givenTruth1,givenTruth2);
  BudgetValue budget1=BudgetFunctions.forward(truth1,memory);
  BudgetValue budget2=BudgetFunctions.forward(truth2,memory);
  BudgetValue budget3=BudgetFunctions.forward(truth3,memory);
  Statement statement1=Implication.make(t1,t2,order,memory);
  Statement statement2=Implication.make(t2,t1,reverseOrder(order),memory);
  Statement statement3=Equivalence.make(t1,t2,order,memory);
  if (t11 != null && t22 != null) {
    Statement statement11=Implication.make(t11,t22,order,memory);
    Statement statement22=Implication.make(t22,t11,reverseOrder(order),memory);
    Statement statement33=Equivalence.make(t11,t22,order,memory);
    memory.doublePremiseTask(statement11,truth1,budget1);
    memory.doublePremiseTask(statement22,truth2,budget2);
    memory.doublePremiseTask(statement33,truth3,budget3);
  }
  memory.doublePremiseTask(statement1,truth1,budget1);
  memory.doublePremiseTask(statement2,truth2,budget2);
  memory.doublePremiseTask(statement3,truth3,budget3);
}",0.8836617927527018
166777,"/** 
 * Derived task comes from the inference rules.
 * @param task the derived task
 */
public void derivedTask(final Task task,final boolean revised,final boolean single,Sentence occurence,Sentence occurence2){
  if (task.budget.aboveThreshold()) {
    if (task.sentence != null && task.sentence.truth != null) {
      float conf=task.sentence.truth.getConfidence();
      if (conf == 0) {
        if (recorder.isActive()) {
          recorder.onTaskRemove(task,""String_Node_Str"");
        }
        return;
      }
    }
    final Stamp stamp=task.sentence.stamp;
    if (occurence != null && occurence.getOccurenceTime() != Stamp.ETERNAL) {
      stamp.setOccurrenceTime(occurence.getOccurenceTime());
    }
    if (occurence2 != null && occurence2.getOccurenceTime() != Stamp.ETERNAL) {
      stamp.setOccurrenceTime(occurence2.getOccurenceTime());
    }
    final LinkedHashSet<Term> chain=stamp.getChain();
    final Term currentTaskContent=getCurrentTask().getContent();
    if (getCurrentBelief() != null && getCurrentBelief().isJudgment()) {
      final Term currentBeliefContent=getCurrentBelief().content;
      if (chain.contains(currentBeliefContent)) {
        chain.remove(currentBeliefContent);
      }
      stamp.addToChain(currentBeliefContent);
    }
    if (currentBelief == null && single && currentTask != null && currentTask.sentence.isJudgment()) {
      if (chain.contains(currentTaskContent)) {
        chain.remove(currentTaskContent);
      }
      stamp.addToChain(currentTaskContent);
    }
    if (currentTask != null && !single && currentTask.sentence.isJudgment()) {
      if (chain.contains(currentTaskContent)) {
        chain.remove(currentTaskContent);
      }
      stamp.addToChain(currentTaskContent);
    }
    if (!revised) {
      int i=0;
      for (      Term chain1 : chain) {
        if (task.sentence.isJudgment() && task.getContent().equals(chain1)) {
          if (task.getParentTask() == null || (!(task.getParentTask().getContent().equals(Negation.make(task.getContent(),this))) && !(task.getContent().equals(Negation.make(task.getParentTask().getContent(),this))))) {
            if (recorder.isActive()) {
              recorder.onTaskRemove(task,""String_Node_Str"" + i + ""String_Node_Str"");
            }
            return;
          }
        }
        i++;
      }
    }
 else {
      final int stampLength=stamp.baseLength;
      for (int i=0; i < stampLength; i++) {
        final long baseI=stamp.evidentialBase[i];
        for (int j=0; j < stampLength; j++) {
          if ((i != j) && (baseI == stamp.evidentialBase[j])) {
            if (recorder.isActive()) {
              recorder.onTaskRemove(task,""String_Node_Str"");
            }
            return;
          }
        }
      }
    }
    output(task);
    addNewTask(task,""String_Node_Str"");
  }
 else {
    if (recorder.isActive()) {
      recorder.onTaskRemove(task,""String_Node_Str"");
    }
  }
}","/** 
 * Derived task comes from the inference rules.
 * @param task the derived task
 */
public void derivedTask(final Task task,final boolean revised,final boolean single,Sentence occurence,Sentence occurence2){
  if (task.budget.aboveThreshold()) {
    if (task.sentence != null && task.sentence.truth != null) {
      float conf=task.sentence.truth.getConfidence();
      if (conf == 0) {
        if (recorder.isActive()) {
          recorder.onTaskRemove(task,""String_Node_Str"");
        }
        return;
      }
    }
    final Stamp stamp=task.sentence.stamp;
    if (occurence != null && occurence.getOccurenceTime() != Stamp.ETERNAL) {
      stamp.setOccurrenceTime(occurence.getOccurenceTime());
    }
    if (occurence2 != null && occurence2.getOccurenceTime() != Stamp.ETERNAL) {
      stamp.setOccurrenceTime(occurence2.getOccurenceTime());
    }
    final LinkedHashSet<Term> chain=stamp.getChain();
    final Term currentTaskContent=getCurrentTask().getContent();
    if (getCurrentBelief() != null && getCurrentBelief().isJudgment()) {
      final Term currentBeliefContent=getCurrentBelief().content;
      if (chain.contains(currentBeliefContent)) {
        chain.remove(currentBeliefContent);
      }
      stamp.addToChain(currentBeliefContent);
    }
    if (currentBelief == null && single && currentTask != null && currentTask.sentence.isJudgment()) {
      if (chain.contains(currentTaskContent)) {
        chain.remove(currentTaskContent);
      }
      stamp.addToChain(currentTaskContent);
    }
    if (currentTask != null && !single && currentTask.sentence.isJudgment()) {
      if (chain.contains(currentTaskContent)) {
        chain.remove(currentTaskContent);
      }
      stamp.addToChain(currentTaskContent);
    }
    if (!revised) {
      int i=0;
      for (      Term chain1 : chain) {
        if (task.sentence.isJudgment() && task.getContent().equals(chain1)) {
          if (task.getParentTask() == null || (!(task.getParentTask().getContent().equals(Negation.make(task.getContent(),this))) && !(task.getContent().equals(Negation.make(task.getParentTask().getContent(),this))))) {
            if (recorder.isActive()) {
              recorder.onTaskRemove(task,""String_Node_Str"" + i + ""String_Node_Str"");
            }
            return;
          }
        }
        i++;
      }
    }
 else {
      final int stampLength=stamp.baseLength;
      for (int i=0; i < stampLength; i++) {
        final long baseI=stamp.evidentialBase[i];
        for (int j=0; j < stampLength; j++) {
          if ((i != j) && (baseI == stamp.evidentialBase[j]) && !(task.sentence.content instanceof Operation)) {
            if (recorder.isActive()) {
              recorder.onTaskRemove(task,""String_Node_Str"");
            }
            return;
          }
        }
      }
    }
    output(task);
    addNewTask(task,""String_Node_Str"");
  }
 else {
    if (recorder.isActive()) {
      recorder.onTaskRemove(task,""String_Node_Str"");
    }
  }
}",0.991687871077184
166778,"public EditorPanel(final Grid2DSpace s){
  super(new BorderLayout());
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  DefaultMutableTreeNode structMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(structMenu);
  DefaultMutableTreeNode logicMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(logicMenu);
  DefaultMutableTreeNode machineMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(machineMenu);
  DefaultMutableTreeNode actionMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(actionMenu);
  DefaultMutableTreeNode goalMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(goalMenu);
  DefaultTreeModel model=new DefaultTreeModel(root);
  final JTree toolTree=new JTree(model);
  toolTree.expandRow(0);
  add(toolTree,BorderLayout.CENTER);
  toolTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      Object o=toolTree.getLastSelectedPathComponent();
      if (o instanceof EditorMode) {
        EditorMode m=(EditorMode)o;
        m.run();
      }
    }
  }
);
  structMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  structMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  structMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  structMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  machineMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  machineMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  machineMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  goalMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  goalMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  goalMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  goalMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
}","public EditorPanel(final Grid2DSpace s){
  super(new BorderLayout());
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  DefaultMutableTreeNode structMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(structMenu);
  DefaultMutableTreeNode logicMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(logicMenu);
  DefaultMutableTreeNode machineMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(machineMenu);
  DefaultMutableTreeNode actionMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(actionMenu);
  DefaultMutableTreeNode goalMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(goalMenu);
  DefaultMutableTreeNode knowMenu=new DefaultMutableTreeNode(""String_Node_Str"");
  root.add(knowMenu);
  DefaultTreeModel model=new DefaultTreeModel(root);
  final JTree toolTree=new JTree(model);
  toolTree.expandRow(0);
  add(toolTree,BorderLayout.CENTER);
  toolTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      Object o=toolTree.getLastSelectedPathComponent();
      if (o instanceof EditorMode) {
        EditorMode m=(EditorMode)o;
        m.run();
      }
    }
  }
);
  structMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  structMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  structMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  structMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  logicMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  machineMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  machineMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  machineMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  actionMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  goalMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  goalMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  goalMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  goalMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  knowMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.nar.addInput(""String_Node_Str"");
    }
  }
);
  knowMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.nar.addInput(""String_Node_Str"");
      s.nar.addInput(""String_Node_Str"");
      s.nar.addInput(""String_Node_Str"");
      s.nar.addInput(""String_Node_Str"");
    }
  }
);
  knowMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
    }
  }
);
  knowMenu.add(new EditorMode(""String_Node_Str""){
    @Override public void run(){
      s.nar.addInput(""String_Node_Str"");
    }
  }
);
}",0.937011257196872
166779,"@Override public void run(){
  s.cells.click(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@Override public void run(){
  s.nar.addInput(""String_Node_Str"");
}",0.6627218934911243
166780,"public static void buildInnerMaze(Hauto m,int x1,int y1,int x2,int y2){
  m.forEach(x1,y1,x2,y2,new SetMaterial(Material.StoneWall));
  int w=x2 - x1 + 1;
  int rw=(w + 1) / 2;
  int h=y2 - y1 + 1;
  int rh=(h + 1) / 2;
  int sx=x1 + 2 * irand(rw);
  int sy=y1 + 2 * irand(rh);
  m.at(sx,sy,new SetMaterial(Material.DirtFloor));
  int finishedCount=0;
  for (int i=1; (i < (rw * rh * 1000)) && (finishedCount < (rw * rh)); i++) {
    int x=x1 + 2 * irand(rw);
    int y=y1 + 2 * irand(rh);
    if (m.at(x,y).material != Material.StoneWall)     continue;
    int dx=(irand(2) == 1) ? (irand(2) * 2 - 1) : 0;
    int dy=(dx == 0) ? (irand(2) * 2 - 1) : 0;
    int lx=x + dx * 2;
    int ly=y + dy * 2;
    if ((lx >= x1) && (lx <= x2) && (ly >= y1)&& (ly <= y2)) {
      if (m.at(lx,ly).material != Material.StoneWall) {
        m.at(x,y,new SetMaterial(Material.DirtFloor));
        m.at(x + dx,y + dy,new SetMaterial(Material.DirtFloor));
        finishedCount++;
      }
    }
  }
}","public static void buildInnerMaze(Hauto m,int x1,int y1,int x2,int y2){
  m.forEach(x1,y1,x2,y2,new SetMaterial(Material.StoneWall));
  int w=x2 - x1 + 1;
  int rw=(w + 1) / 2;
  int h=y2 - y1 + 1;
  int rh=(h + 1) / 2;
  int sx=x1 + 2 * irand(rw);
  int sy=y1 + 2 * irand(rh);
  m.at(sx,sy,new SetMaterial(Material.DirtFloor));
  int finishedCount=0;
  for (int i=1; (i < (rw * rh * 1000)) && (finishedCount < (rw * rh)); i++) {
    int x=x1 + 2 * irand(rw);
    int y=y1 + 2 * irand(rh);
    if (m.at(x,y).material != Material.StoneWall)     continue;
    int dx=(irand(2) == 1) ? (irand(2) * 2 - 1) : 0;
    int dy=(dx == 0) ? (irand(2) * 2 - 1) : 0;
    int lx=x + dx * 2;
    int ly=y + dy * 2;
    if ((lx >= x1) && (lx <= x2) && (ly >= y1)&& (ly <= y2)) {
      if (m.at(lx,ly).material != Material.StoneWall) {
        m.at(x,y,new SetMaterial(Material.DirtFloor));
        m.at(x + dx,y + dy,new SetMaterial(Material.DirtFloor));
        m.readCells[x][y].setHeight((int)(Math.random() * 24 + 1));
        m.writeCells[x][y].setHeight((int)(Math.random() * 24 + 1));
        finishedCount++;
      }
    }
  }
}",0.9348549690917736
166781,"@Override public void draw(){
  background(0,0,0);
  pushMatrix();
  hnav.Transform();
  hrend_DrawBegin();
  drawGround();
  drawObjects();
  drawParticles();
  hrend_DrawEnd();
  popMatrix();
  hrend_DrawGUI();
  realtime=System.nanoTime() / 1.0e9;
  if (time % automataPeriod == 0) {
    updateAutomata();
  }
  if (time % agentPeriod == 0) {
    for (    GridObject g : objects) {
      Effect e=(g instanceof GridAgent) ? ((GridAgent)g).perceiveNext() : null;
      g.update(e);
      if (g instanceof GridAgent) {
        GridAgent b=(GridAgent)g;
        if (b.actions.size() > 0) {
          Action a=b.actions.pop();
          if (a != null) {
            process(b,a);
          }
        }
      }
    }
  }
}","@Override public void draw(){
  background(0,0,0);
  pushMatrix();
  hnav.Transform();
  hrend_DrawBegin();
  drawGround();
  drawObjects();
  drawParticles();
  hrend_DrawEnd();
  popMatrix();
  hrend_DrawGUI();
  realtime=System.nanoTime() / 1.0e9;
  if (time % automataPeriod == 0) {
    updateAutomata();
  }
  if (time % agentPeriod == 0) {
    try {
      for (      GridObject g : objects) {
        Effect e=(g instanceof GridAgent) ? ((GridAgent)g).perceiveNext() : null;
        g.update(e);
        if (g instanceof GridAgent) {
          GridAgent b=(GridAgent)g;
          if (b.actions.size() > 0) {
            Action a=b.actions.pop();
            if (a != null) {
              process(b,a);
            }
          }
        }
      }
    }
 catch (    Exception ex) {
    }
  }
}",0.8840579710144928
166782,"/** 
 * Try to make a new compound from two term. Called by the inference rules.
 * @param subject The first compoment
 * @param predicate The second compoment
 * @param memory Reference to the memory
 * @return A compound generated or null
 */
public static Inheritance make(final Term subject,final Term predicate,final Memory memory){
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  String name;
  if ((subject instanceof Product) && (predicate instanceof Operator)) {
    name=Operation.makeName(predicate.name(),((CompoundTerm)subject).term,memory);
  }
 else {
    name=makeStatementName(subject,NativeOperator.INHERITANCE,predicate);
  }
  Term t=memory.conceptTerm(name);
  if (t != null) {
    return (Inheritance)t;
  }
  Term[] arguments=termArray(subject,predicate);
  if ((subject instanceof Product) && (predicate instanceof Operator)) {
    return new Operation(name,arguments);
  }
 else {
    return new Inheritance(name,arguments);
  }
}","/** 
 * Try to make a new compound from two term. Called by the inference rules.
 * @param subject The first compoment
 * @param predicate The second compoment
 * @param memory Reference to the memory
 * @return A compound generated or null
 */
public static Inheritance make(final Term subject,final Term predicate,final Memory memory){
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  String name;
  if ((subject instanceof Product) && (predicate instanceof Operator)) {
    name=Operation.makeName(predicate.name(),((CompoundTerm)subject).term);
  }
 else {
    name=makeStatementName(subject,NativeOperator.INHERITANCE,predicate);
  }
  Term t=memory.conceptTerm(name);
  if (t != null) {
    return (Inheritance)t;
  }
  Term[] arguments=termArray(subject,predicate);
  if ((subject instanceof Product) && (predicate instanceof Operator)) {
    return new Operation(name,arguments);
  }
 else {
    return new Inheritance(name,arguments);
  }
}",0.9963973237261966
166783,"/** 
 * @param that The Term to be compared with the current Term
 * @return The same as compareTo as defined on Strings
 */
@Override public int compareTo(final Term that){
  if (that.getClass() == getClass())   return name.compareTo(that.name());
  return that.getClass().getSimpleName().compareTo(getClass().getSimpleName());
}","/** 
 * @param that The Term to be compared with the current Term
 * @return The same as compareTo as defined on Strings
 */
@Override public int compareTo(final Term that){
  if (that instanceof CompoundTerm) {
    return -1;
  }
 else   if (that instanceof Variable) {
    return 1;
  }
 else {
    return name.compareTo(that.name());
  }
}",0.5892857142857143
166784,"/** 
 * Try to make a new compound from two components. Called by the inference rules.
 * @param memory Reference to the memory
 * @return A compound generated or null
 */
public static Operation make(Operator oper,final Term[] arg,final Memory memory){
  if (oper == null) {
    return null;
  }
  String name=makeName(oper.name(),arg,memory);
  Term t=memory.conceptTerm(name);
  if (t != null) {
    return (Operation)t;
  }
  ArrayList<Term> opArg=new ArrayList<>();
  Term list=Product.make(arg,memory);
  opArg.add(list);
  opArg.add(oper);
  return new Operation(name,opArg.toArray(new Term[opArg.size()]));
}","/** 
 * Try to make a new compound from two components. Called by the inference rules.
 * @param memory Reference to the memory
 * @return A compound generated or null
 */
public static Operation make(Operator oper,final Term[] arg,final Memory memory){
  if (oper == null) {
    return null;
  }
  String name=makeName(oper.name(),arg);
  Term t=memory.conceptTerm(name);
  if (t != null) {
    return (Operation)t;
  }
  ArrayList<Term> opArg=new ArrayList<>();
  Term list=Product.make(arg,memory);
  opArg.add(list);
  opArg.add(oper);
  return new Operation(name,opArg.toArray(new Term[opArg.size()]));
}",0.9942857142857144
166785,"public static String makeName(final String op,Term[] arg,final Memory memory){
  final StringBuilder nameBuilder=new StringBuilder(16).append(COMPOUND_TERM_OPENER.ch).append(op);
  for (  final Term t : arg) {
    nameBuilder.append(Symbols.ARGUMENT_SEPARATOR);
    nameBuilder.append(t.name());
  }
  nameBuilder.append(COMPOUND_TERM_CLOSER.ch);
  return nameBuilder.toString();
}","public static String makeName(final String op,Term[] arg){
  final StringBuilder nameBuilder=new StringBuilder(16).append(COMPOUND_TERM_OPENER.ch).append(op);
  for (  final Term t : arg) {
    nameBuilder.append(Symbols.ARGUMENT_SEPARATOR);
    nameBuilder.append(t.name());
  }
  nameBuilder.append(COMPOUND_TERM_CLOSER.ch);
  return nameBuilder.toString();
}",0.973045822102426
166786,"@Override public Operator clone(){
  return null;
}","@Override public Operator clone(){
  return this;
}",0.9215686274509804
166787,"protected void testNAL(final String path){
  Memory.resetStatic();
  final NAR n=newNAR();
  final List<Expect> expects=new ArrayList();
  String example=getExample(path);
  List<Expect> extractedExpects=getExpectations(n,example,saveSimilar);
  for (  Expect e1 : extractedExpects)   expects.add((Expect)n.addOutput(e1));
  if (showOutput)   new TextOutput(n,System.out);
  n.addInput(new TextInput(example));
  boolean error=false;
  try {
    n.finish(minCycles);
  }
 catch (  Exception e) {
    e.printStackTrace();
    error=true;
  }
catch (  Throwable e) {
    e.printStackTrace();
    error=true;
  }
  boolean success=expects.size() > 0 && (!error);
  for (  Expect e : expects) {
    if (!e.realized)     success=false;
  }
  if ((!success) || (success && showSuccess)) {
    System.err.println('\n' + path + ""String_Node_Str""+ n.getTime());
    for (    Expect e : expects) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  assertTrue(path,success);
}","protected void testNAL(final String path){
  Memory.resetStatic();
  final NAR n=newNAR();
  final List<Expect> expects=new ArrayList();
  String example=getExample(path);
  List<Expect> extractedExpects=getExpectations(n,example,saveSimilar);
  for (  Expect e1 : extractedExpects)   expects.add((Expect)n.addOutput(e1));
  if (showOutput)   new TextOutput(n,System.out);
  n.addInput(new TextInput(example));
  boolean error=false;
  try {
    n.finish(minCycles);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    error=true;
  }
  boolean success=expects.size() > 0 && (!error);
  for (  Expect e : expects) {
    if (!e.realized)     success=false;
  }
  if ((!success) || (success && showSuccess)) {
    System.err.println('\n' + path + ""String_Node_Str""+ n.getTime());
    for (    Expect e : expects) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  assertTrue(path,success);
}",0.9633563462559744
166788,"/** 
 * Return a string representation of the concept, called in ConceptBag only
 * @return The concept name, with taskBudget in the full version
 */
@Override public String toString(){
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * Return a string representation of the concept, called in ConceptBag only
 * @return The concept name, with taskBudget in the full version
 */
@Override public String toString(){
  return super.toStringBrief();
}",0.8483516483516483
166789,"/** 
 * Get a String representation of the sentence for display purpose
 * @return The String
 */
public CharSequence toString(NAR nar,boolean showStamp){
  CharSequence contentName=content.name();
  final long t=nar.memory.getTime();
  final String tenseString=((punctuation == Symbols.JUDGMENT_MARK) || (punctuation == Symbols.QUESTION_MARK)) ? stamp.getTense(t) : ""String_Node_Str"";
  final String truthString=(truth != null) ? truth.toStringBrief() : null;
  CharSequence stampString=showStamp ? stamp.name() : null;
  int stringLength=contentName.length() + tenseString.length() + 1+ 1;
  if (truth != null) {
    stringLength+=truthString.length();
  }
  if (showStamp) {
    stringLength+=stampString.length();
  }
  final TextBuilder buffer=new TextBuilder(stringLength).append(contentName).append(contentName).append(punctuation);
  if (tenseString.length() > 0)   buffer.append(' ').append(tenseString);
  if (truth != null)   buffer.append(' ').append(truthString);
  if (showStamp)   buffer.append(' ').append(stampString);
  return buffer;
}","/** 
 * Get a String representation of the sentence for display purpose
 * @return The String
 */
public CharSequence toString(NAR nar,boolean showStamp){
  CharSequence contentName=content.name();
  final long t=nar.memory.getTime();
  final String tenseString=((punctuation == Symbols.JUDGMENT_MARK) || (punctuation == Symbols.QUESTION_MARK)) ? stamp.getTense(t) : ""String_Node_Str"";
  final String truthString=(truth != null) ? truth.toStringBrief() : null;
  CharSequence stampString=showStamp ? stamp.name() : null;
  int stringLength=contentName.length() + tenseString.length() + 1+ 1;
  if (truth != null) {
    stringLength+=truthString.length();
  }
  if (showStamp) {
    stringLength+=stampString.length();
  }
  final TextBuilder buffer=new TextBuilder(stringLength).append(contentName).append(punctuation);
  if (tenseString.length() > 0)   buffer.append(' ').append(tenseString);
  if (truth != null)   buffer.append(' ').append(truthString);
  if (showStamp)   buffer.append(' ').append(stampString);
  return buffer;
}",0.9904214559386972
166790,"public static void main(String[] args){
  int repeats=4;
  int warmups=1;
  int extraCycles=512;
  NAR n=new DefaultNARBuilder().build();
  Collection c=NALTest.params();
  while (true) {
    for (    Object o : c) {
      String examplePath=(String)((Object[])o)[0];
      perfNAL(n,examplePath,extraCycles,repeats,warmups,true);
    }
  }
}","public static void main(String[] args){
  int repeats=1;
  int warmups=0;
  int extraCycles=2048;
  NAR n=new DefaultNARBuilder().build();
  Collection c=NALTest.params();
  while (true) {
    for (    Object o : c) {
      String examplePath=(String)((Object[])o)[0];
      perfNAL(n,examplePath,extraCycles,repeats,warmups,true);
    }
  }
}",0.9868613138686132
166791,"protected void testNAL(final String path){
  Memory.resetStatic();
  final NAR n=newNAR();
  final List<Expect> expects=new ArrayList();
  String example=getExample(path);
  List<Expect> extractedExpects=getExpectations(n,example,saveSimilar);
  for (  Expect e1 : extractedExpects)   expects.add((Expect)n.addOutput(e1));
  if (showOutput)   new TextOutput(n,System.out);
  n.addInput(new TextInput(example));
  n.step(1);
  boolean error=false;
  try {
    n.finish(minCycles,showDebug);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    error=true;
  }
  boolean success=expects.size() > 0 && (!error);
  for (  Expect e : expects) {
    if (!e.realized)     success=false;
  }
  if ((!success) || (success && showSuccess)) {
    System.err.println('\n' + path + ""String_Node_Str""+ n.getTime());
    for (    Expect e : expects) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  assertTrue(path,success);
}","protected void testNAL(final String path){
  Memory.resetStatic();
  final NAR n=newNAR();
  final List<Expect> expects=new ArrayList();
  String example=getExample(path);
  List<Expect> extractedExpects=getExpectations(n,example,saveSimilar);
  for (  Expect e1 : extractedExpects)   expects.add((Expect)n.addOutput(e1));
  if (showOutput)   new TextOutput(n,System.out);
  if (showTrace) {
    InferenceLogger logger=new InferenceLogger();
    logger.addOutput(new LogOutput(){
      @Override public void logAppend(      String s){
        System.out.println(""String_Node_Str"" + s);
      }
    }
);
    n.memory.setRecorder(logger);
  }
  n.addInput(new TextInput(example));
  n.step(1);
  boolean error=false;
  try {
    n.finish(minCycles,showDebug);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    error=true;
  }
  boolean success=expects.size() > 0 && (!error);
  for (  Expect e : expects) {
    if (!e.realized)     success=false;
  }
  if ((!success) || (success && showSuccess)) {
    System.err.println('\n' + path + ""String_Node_Str""+ n.getTime());
    for (    Expect e : expects) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
  assertTrue(path,success);
}",0.8740601503759399
166792,"public NALTestSome(String scriptPath){
  super(scriptPath);
  showSuccess=true;
  showOutput=true;
  showDebug=true;
  System.out.println(""String_Node_Str"" + scriptPath);
}","public NALTestSome(String scriptPath){
  super(scriptPath);
  showSuccess=true;
  showOutput=true;
  showTrace=true;
  System.out.println(""String_Node_Str"" + scriptPath);
}",0.9767441860465116
166793,"/** 
 * An atomic step in a concept, only called in   {@link Memory#processConcept}
 */
public void fire(){
  final TaskLink currentTaskLink=taskLinks.takeOut();
  if (currentTaskLink == null) {
    return;
  }
  memory.setCurrentTaskLink(currentTaskLink);
  memory.setCurrentBeliefLink(null);
  if (memory.getRecorder().isActive()) {
    memory.getRecorder().append(""String_Node_Str"" + currentTaskLink + ""String_Node_Str"");
  }
  final Task task=currentTaskLink.getTargetTask();
  memory.setCurrentTask(task);
  if (currentTaskLink.getType() == TermLink.TRANSFORM) {
    memory.setCurrentBelief(null);
    RuleTables.transformTask(currentTaskLink,memory);
  }
 else {
    int termLinkCount=Parameters.MAX_REASONED_TERM_LINK;
    while (termLinkCount > 0) {
      final TermLink termLink=termLinks.takeOut(currentTaskLink,memory.getTime());
      if (termLink != null) {
        if (memory.getRecorder().isActive()) {
          memory.getRecorder().append(""String_Node_Str"" + termLink + ""String_Node_Str"");
        }
        memory.setCurrentBeliefLink(termLink);
        RuleTables.reason(currentTaskLink,termLink,memory);
        termLinks.putBack(termLink);
        termLinkCount--;
      }
 else {
        termLinkCount=0;
      }
    }
  }
  taskLinks.putBack(currentTaskLink);
}","/** 
 * An atomic step in a concept, only called in   {@link Memory#processConcept}
 */
public void fire(){
  final TaskLink currentTaskLink=taskLinks.takeOut();
  if (currentTaskLink == null) {
    return;
  }
  memory.setCurrentTaskLink(currentTaskLink);
  memory.setCurrentBeliefLink(null);
  if (memory.getRecorder().isActive()) {
    memory.getRecorder().append(""String_Node_Str"" + currentTaskLink + ""String_Node_Str"");
  }
  final Task task=currentTaskLink.getTargetTask();
  memory.setCurrentTask(task);
  if (currentTaskLink.type == TermLink.TRANSFORM) {
    memory.setCurrentBelief(null);
    RuleTables.transformTask(currentTaskLink,memory);
  }
 else {
    int termLinkCount=Parameters.MAX_REASONED_TERM_LINK;
    while (termLinkCount > 0) {
      final TermLink termLink=termLinks.takeOut(currentTaskLink,memory.getTime());
      if (termLink != null) {
        if (memory.getRecorder().isActive()) {
          memory.getRecorder().append(""String_Node_Str"" + termLink + ""String_Node_Str"");
        }
        memory.setCurrentBeliefLink(termLink);
        RuleTables.reason(currentTaskLink,termLink,memory);
        termLinks.putBack(termLink);
        termLinkCount--;
      }
 else {
        termLinkCount=0;
      }
    }
  }
  taskLinks.putBack(currentTaskLink);
}",0.9972688255950058
166794,"/** 
 * Recursively build TermLinks between a compound and its components <p> called only from Memory.continuedProcess
 * @param taskBudget The BudgetValue of the task
 */
public void buildTermLinks(final BudgetValue taskBudget){
  if (termLinkTemplates.size() > 0) {
    BudgetValue subBudget=BudgetFunctions.distributeAmongLinks(taskBudget,termLinkTemplates.size());
    if (subBudget.aboveThreshold()) {
      for (      final TermLink template : termLinkTemplates) {
        if (template.getType() != TermLink.TRANSFORM) {
          Term t=template.getTarget();
          final Concept concept=memory.getConcept(t);
          if (concept != null) {
            TermLink termLink1=new TermLink(t,template,subBudget);
            insertTermLink(termLink1);
            TermLink termLink2=new TermLink(term,template,subBudget);
            concept.insertTermLink(termLink2);
            if (t instanceof CompoundTerm) {
              concept.buildTermLinks(subBudget);
            }
          }
        }
      }
    }
  }
}","/** 
 * Recursively build TermLinks between a compound and its components <p> called only from Memory.continuedProcess
 * @param taskBudget The BudgetValue of the task
 */
public void buildTermLinks(final BudgetValue taskBudget){
  if (termLinkTemplates.size() > 0) {
    BudgetValue subBudget=BudgetFunctions.distributeAmongLinks(taskBudget,termLinkTemplates.size());
    if (subBudget.aboveThreshold()) {
      for (      final TermLink template : termLinkTemplates) {
        if (template.type != TermLink.TRANSFORM) {
          Term t=template.target;
          final Concept concept=memory.getConcept(t);
          if (concept != null) {
            TermLink termLink1=new TermLink(t,template,subBudget);
            insertTermLink(termLink1);
            TermLink termLink2=new TermLink(term,template,subBudget);
            concept.insertTermLink(termLink2);
            if (t instanceof CompoundTerm) {
              concept.buildTermLinks(subBudget);
            }
          }
        }
      }
    }
  }
}",0.9882352941176472
166795,"/** 
 * Link to a new task from all relevant concepts for continued processing in the near future for unspecified time. <p> The only method that calls the TaskLink constructor.
 * @param task The task to be linked
 * @param content The content of the task
 */
private void linkToTask(final Task task){
  final BudgetValue taskBudget=task.budget;
  insertTaskLink(new TaskLink(task,null,taskBudget));
  if (term instanceof CompoundTerm) {
    if (!termLinkTemplates.isEmpty()) {
      final BudgetValue subBudget=BudgetFunctions.distributeAmongLinks(taskBudget,termLinkTemplates.size());
      if (subBudget.aboveThreshold()) {
        for (        final TermLink termLink : termLinkTemplates) {
          Term componentTerm=termLink.getTarget();
          Concept componentConcept=memory.getConcept(componentTerm);
          if (componentConcept != null) {
            componentConcept.insertTaskLink(new TaskLink(task,termLink,subBudget));
          }
        }
        buildTermLinks(taskBudget);
      }
    }
  }
}","/** 
 * Link to a new task from all relevant concepts for continued processing in the near future for unspecified time. <p> The only method that calls the TaskLink constructor.
 * @param task The task to be linked
 * @param content The content of the task
 */
private void linkToTask(final Task task){
  final BudgetValue taskBudget=task.budget;
  insertTaskLink(new TaskLink(task,null,taskBudget));
  if (term instanceof CompoundTerm) {
    if (!termLinkTemplates.isEmpty()) {
      final BudgetValue subBudget=BudgetFunctions.distributeAmongLinks(taskBudget,termLinkTemplates.size());
      if (subBudget.aboveThreshold()) {
        for (        final TermLink termLink : termLinkTemplates) {
          Term componentTerm=termLink.target;
          Concept componentConcept=memory.getConcept(componentTerm);
          if (componentConcept != null) {
            componentConcept.insertTaskLink(new TaskLink(task,termLink,subBudget));
          }
        }
        buildTermLinks(taskBudget);
      }
    }
  }
}",0.9916297390448056
166796,"/** 
 * Constructor <p> only called in Memory.continuedProcess
 * @param t The target Task
 * @param template The TermLink template
 * @param v The budget
 */
public TaskLink(final Task t,final TermLink template,final BudgetValue v){
  super(""String_Node_Str"",v);
  targetTask=t;
  if (template == null) {
    type=TermLink.SELF;
    index=null;
  }
 else {
    type=template.getType();
    index=template.getIndices();
  }
  recordedLinks=new String[Parameters.TERM_LINK_RECORD_LENGTH];
  recordingTime=new long[Parameters.TERM_LINK_RECORD_LENGTH];
  counter=0;
  setKey();
  key+=t.getKey();
}","/** 
 * Constructor <p> only called in Memory.continuedProcess
 * @param t The target Task
 * @param template The TermLink template
 * @param v The budget
 */
public TaskLink(final Task t,final TermLink template,final BudgetValue v){
  super(""String_Node_Str"",v,template == null ? TermLink.SELF : template.type,template == null ? null : template.index);
  targetTask=t;
  recordedLinks=new String[Parameters.TERM_LINK_RECORD_LENGTH];
  recordingTime=new long[Parameters.TERM_LINK_RECORD_LENGTH];
  counter=0;
  setKey();
  key+=t.getKey();
}",0.7940140845070423
166797,"/** 
 * To check whether a TaskLink should use a TermLink, return false if they interacted recently <p> called in TermLinkBag only
 * @param termLink The TermLink to be checked
 * @param currentTime The current time
 * @return Whether they are novel to each other
 */
public boolean novel(final TermLink termLink,final long currentTime){
  final Term bTerm=termLink.getTarget();
  if (bTerm.equals(targetTask.getSentence().getContent())) {
    return false;
  }
  String linkKey=termLink.getKey();
  int next, i;
  for (i=0; i < counter; i++) {
    next=i % Parameters.TERM_LINK_RECORD_LENGTH;
    if (linkKey.equals(recordedLinks[next])) {
      if (currentTime < recordingTime[next] + Parameters.TERM_LINK_RECORD_LENGTH) {
        return false;
      }
 else {
        recordingTime[next]=currentTime;
        return true;
      }
    }
  }
  next=i % Parameters.TERM_LINK_RECORD_LENGTH;
  recordedLinks[next]=linkKey;
  recordingTime[next]=currentTime;
  if (counter < Parameters.TERM_LINK_RECORD_LENGTH) {
    counter++;
  }
  return true;
}","/** 
 * To check whether a TaskLink should use a TermLink, return false if they interacted recently <p> called in TermLinkBag only
 * @param termLink The TermLink to be checked
 * @param currentTime The current time
 * @return Whether they are novel to each other
 */
public boolean novel(final TermLink termLink,final long currentTime){
  final Term bTerm=termLink.target;
  if (bTerm.equals(targetTask.getSentence().getContent())) {
    return false;
  }
  String linkKey=termLink.getKey();
  int next, i;
  for (i=0; i < counter; i++) {
    next=i % Parameters.TERM_LINK_RECORD_LENGTH;
    if (linkKey.equals(recordedLinks[next])) {
      if (currentTime < recordingTime[next] + Parameters.TERM_LINK_RECORD_LENGTH) {
        return false;
      }
 else {
        recordingTime[next]=currentTime;
        return true;
      }
    }
  }
  next=i % Parameters.TERM_LINK_RECORD_LENGTH;
  recordedLinks[next]=linkKey;
  recordingTime[next]=currentTime;
  if (counter < Parameters.TERM_LINK_RECORD_LENGTH) {
    counter++;
  }
  return true;
}",0.9947242206235012
166798,"/** 
 * Set the key of the link
 */
protected final void setKey(){
  final String at1, at2;
  if ((type % 2) == 1) {
    at1=Symbols.TO_COMPONENT_1;
    at2=Symbols.TO_COMPONENT_2;
  }
 else {
    at1=Symbols.TO_COMPOUND_1;
    at2=Symbols.TO_COMPOUND_2;
  }
  final StringBuffer sb=new StringBuffer(16).append(at1).append('T').append(type);
  if (index != null) {
    for (int i=0; i < index.length; i++) {
      sb.append('-').append((index[i] + 1));
    }
  }
  sb.append(at2);
  if (target != null) {
    sb.append(target);
  }
  key=sb.toString();
}","/** 
 * Set the key of the link
 */
protected final void setKey(){
  final String at1, at2;
  if ((type % 2) == 1) {
    at1=Symbols.TO_COMPONENT_1;
    at2=Symbols.TO_COMPONENT_2;
  }
 else {
    at1=Symbols.TO_COMPOUND_1;
    at2=Symbols.TO_COMPOUND_2;
  }
  final String targetString=target != null ? target.toString() : null;
  int targetLength=target != null ? targetString.length() : 0;
  int estimatedLength=2 + 2 + targetLength+ 1+ 4 * ((index != null ? index.length : 0) + 1);
  final StringBuffer sb=new StringBuffer(estimatedLength).append(at1).append('T').append(type);
  if (index != null) {
    for (int i=0; i < index.length; i++) {
      sb.append('-').append((index[i] + 1));
    }
  }
  sb.append(at2);
  if (target != null) {
    sb.append(targetString);
  }
  key=sb.toString();
}",0.8153618906942393
166799,"/** 
 * Common processing for all inference step
 * @param qual Quality of the inference
 * @param complexity Syntactic complexity of the conclusion
 * @param memory Reference to the memory
 * @return Budget of the conclusion task
 */
private static BudgetValue budgetInference(final float qual,final int complexity,final Memory memory){
  Item t=memory.getCurrentTaskLink();
  if (t == null) {
    t=memory.getCurrentTask();
  }
  float priority=t.getPriority();
  float durability=t.getDurability() / complexity;
  final float quality=qual / complexity;
  final TermLink bLink=memory.getCurrentBeliefLink();
  if (bLink != null) {
    priority=or(priority,bLink.getPriority());
    durability=and(durability,bLink.getDurability());
    final float targetActivation=memory.getConceptActivation(bLink.getTarget());
    bLink.incPriority(or(quality,targetActivation));
    bLink.incDurability(quality);
  }
  return new BudgetValue(priority,durability,quality);
}","/** 
 * Common processing for all inference step
 * @param qual Quality of the inference
 * @param complexity Syntactic complexity of the conclusion
 * @param memory Reference to the memory
 * @return Budget of the conclusion task
 */
private static BudgetValue budgetInference(final float qual,final int complexity,final Memory memory){
  Item t=memory.getCurrentTaskLink();
  if (t == null) {
    t=memory.getCurrentTask();
  }
  float priority=t.getPriority();
  float durability=t.getDurability() / complexity;
  final float quality=qual / complexity;
  final TermLink bLink=memory.getCurrentBeliefLink();
  if (bLink != null) {
    priority=or(priority,bLink.getPriority());
    durability=and(durability,bLink.getDurability());
    final float targetActivation=memory.getConceptActivation(bLink.target);
    bLink.incPriority(or(quality,targetActivation));
    bLink.incDurability(quality);
  }
  return new BudgetValue(priority,durability,quality);
}",0.9911412193850964
166800,"/** 
 * Entry point of the inference engine
 * @param tLink The selected TaskLink, which will provide a task
 * @param bLink The selected TermLink, which may provide a belief
 * @param memory Reference to the memory
 */
public static void reason(final TaskLink tLink,final TermLink bLink,final Memory memory){
  final Task task=memory.getCurrentTask();
  Sentence taskSentence=task.getSentence();
  Term taskTerm=(Term)taskSentence.getContent().clone();
  Term beliefTerm=(Term)bLink.getTarget().clone();
  if (CompoundTerm.EqualSubTermsInRespectToImageAndProduct(taskTerm,beliefTerm)) {
    return;
  }
  Concept beliefConcept=memory.termToConcept(beliefTerm);
  Sentence belief=null;
  if (beliefConcept != null) {
    belief=beliefConcept.getBelief(task);
  }
  memory.setCurrentBelief(belief);
  if (belief != null) {
    LocalRules.match(task,belief,memory);
  }
  Sentence buf1=memory.getCurrentBelief();
  Task buf2=memory.getCurrentTask();
  CompositionalRules.dedSecondLayerVariableUnification(task,memory);
  memory.setCurrentBelief(buf1);
  memory.setCurrentTask(buf2);
  if (!memory.noResult() && task.getSentence().isJudgment()) {
    return;
  }
  CompositionalRules.dedConjunctionByQuestion(taskSentence,belief,memory);
  short tIndex=tLink.getIndex(0);
  short bIndex=bLink.getIndex(0);
switch (tLink.getType()) {
case TermLink.SELF:
switch (bLink.getType()) {
case TermLink.COMPONENT:
      compoundAndSelf((CompoundTerm)taskTerm,beliefTerm,true,memory);
    break;
case TermLink.COMPOUND:
  compoundAndSelf((CompoundTerm)beliefTerm,taskTerm,false,memory);
break;
case TermLink.COMPONENT_STATEMENT:
if (belief != null) {
SyllogisticRules.detachment(task.getSentence(),belief,bIndex,memory);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
SyllogisticRules.detachment(belief,task.getSentence(),bIndex,memory);
}
break;
case TermLink.COMPONENT_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd((Implication)taskTerm,bIndex,beliefTerm,tIndex,memory);
}
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd((Implication)beliefTerm,bIndex,taskTerm,tIndex,memory);
}
break;
}
break;
case TermLink.COMPOUND:
switch (bLink.getType()) {
case TermLink.COMPOUND:
compoundAndCompound((CompoundTerm)taskTerm,(CompoundTerm)beliefTerm,memory);
break;
case TermLink.COMPOUND_STATEMENT:
compoundAndStatement((CompoundTerm)taskTerm,tIndex,(Statement)beliefTerm,bIndex,beliefTerm,memory);
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
if (beliefTerm instanceof Implication) {
if (Variable.unify(Symbols.VAR_INDEPENDENT,((Implication)beliefTerm).getSubject(),taskTerm,beliefTerm,taskTerm)) {
detachmentWithVar(belief,taskSentence,bIndex,memory);
}
 else {
SyllogisticRules.conditionalDedInd((Implication)beliefTerm,bIndex,taskTerm,-1,memory);
}
}
 else if (beliefTerm instanceof Equivalence) {
SyllogisticRules.conditionalAna((Equivalence)beliefTerm,bIndex,taskTerm,-1,memory);
}
}
break;
}
break;
case TermLink.COMPOUND_STATEMENT:
switch (bLink.getType()) {
case TermLink.COMPONENT:
componentAndStatement((CompoundTerm)memory.getCurrentTerm(),bIndex,(Statement)taskTerm,tIndex,memory);
break;
case TermLink.COMPOUND:
compoundAndStatement((CompoundTerm)beliefTerm,bIndex,(Statement)taskTerm,tIndex,beliefTerm,memory);
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
syllogisms(tLink,bLink,taskTerm,beliefTerm,memory);
}
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
if (beliefTerm instanceof Implication) {
conditionalDedIndWithVar((Implication)beliefTerm,bIndex,(Statement)taskTerm,tIndex,memory);
}
}
break;
}
break;
case TermLink.COMPOUND_CONDITION:
switch (bLink.getType()) {
case TermLink.COMPOUND:
if (belief != null) {
detachmentWithVar(taskSentence,belief,tIndex,memory);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Implication) {
Term subj=((Implication)taskTerm).getSubject();
if (subj instanceof Negation) {
if (task.getSentence().isJudgment()) {
componentAndStatement((CompoundTerm)subj,bIndex,(Statement)taskTerm,tIndex,memory);
}
 else {
componentAndStatement((CompoundTerm)subj,tIndex,(Statement)beliefTerm,bIndex,memory);
}
}
 else {
conditionalDedIndWithVar((Implication)taskTerm,tIndex,(Statement)beliefTerm,bIndex,memory);
}
}
break;
}
break;
}
}
}","/** 
 * Entry point of the inference engine
 * @param tLink The selected TaskLink, which will provide a task
 * @param bLink The selected TermLink, which may provide a belief
 * @param memory Reference to the memory
 */
public static void reason(final TaskLink tLink,final TermLink bLink,final Memory memory){
  final Task task=memory.getCurrentTask();
  Sentence taskSentence=task.getSentence();
  Term taskTerm=(Term)taskSentence.getContent().clone();
  Term beliefTerm=(Term)bLink.target.clone();
  if (CompoundTerm.EqualSubTermsInRespectToImageAndProduct(taskTerm,beliefTerm)) {
    return;
  }
  Concept beliefConcept=memory.termToConcept(beliefTerm);
  Sentence belief=null;
  if (beliefConcept != null) {
    belief=beliefConcept.getBelief(task);
  }
  memory.setCurrentBelief(belief);
  if (belief != null) {
    LocalRules.match(task,belief,memory);
  }
  Sentence buf1=memory.getCurrentBelief();
  Task buf2=memory.getCurrentTask();
  CompositionalRules.dedSecondLayerVariableUnification(task,memory);
  memory.setCurrentBelief(buf1);
  memory.setCurrentTask(buf2);
  if (!memory.noResult() && task.getSentence().isJudgment()) {
    return;
  }
  CompositionalRules.dedConjunctionByQuestion(taskSentence,belief,memory);
  short tIndex=tLink.getIndex(0);
  short bIndex=bLink.getIndex(0);
switch (tLink.type) {
case TermLink.SELF:
switch (bLink.type) {
case TermLink.COMPONENT:
      compoundAndSelf((CompoundTerm)taskTerm,beliefTerm,true,memory);
    break;
case TermLink.COMPOUND:
  compoundAndSelf((CompoundTerm)beliefTerm,taskTerm,false,memory);
break;
case TermLink.COMPONENT_STATEMENT:
if (belief != null) {
SyllogisticRules.detachment(task.getSentence(),belief,bIndex,memory);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
SyllogisticRules.detachment(belief,task.getSentence(),bIndex,memory);
}
break;
case TermLink.COMPONENT_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd((Implication)taskTerm,bIndex,beliefTerm,tIndex,memory);
}
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
SyllogisticRules.conditionalDedInd((Implication)beliefTerm,bIndex,taskTerm,tIndex,memory);
}
break;
}
break;
case TermLink.COMPOUND:
switch (bLink.type) {
case TermLink.COMPOUND:
compoundAndCompound((CompoundTerm)taskTerm,(CompoundTerm)beliefTerm,memory);
break;
case TermLink.COMPOUND_STATEMENT:
compoundAndStatement((CompoundTerm)taskTerm,tIndex,(Statement)beliefTerm,bIndex,beliefTerm,memory);
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
if (beliefTerm instanceof Implication) {
if (Variable.unify(Symbols.VAR_INDEPENDENT,((Implication)beliefTerm).getSubject(),taskTerm,beliefTerm,taskTerm)) {
detachmentWithVar(belief,taskSentence,bIndex,memory);
}
 else {
SyllogisticRules.conditionalDedInd((Implication)beliefTerm,bIndex,taskTerm,-1,memory);
}
}
 else if (beliefTerm instanceof Equivalence) {
SyllogisticRules.conditionalAna((Equivalence)beliefTerm,bIndex,taskTerm,-1,memory);
}
}
break;
}
break;
case TermLink.COMPOUND_STATEMENT:
switch (bLink.type) {
case TermLink.COMPONENT:
componentAndStatement((CompoundTerm)memory.getCurrentTerm(),bIndex,(Statement)taskTerm,tIndex,memory);
break;
case TermLink.COMPOUND:
compoundAndStatement((CompoundTerm)beliefTerm,bIndex,(Statement)taskTerm,tIndex,beliefTerm,memory);
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
syllogisms(tLink,bLink,taskTerm,beliefTerm,memory);
}
break;
case TermLink.COMPOUND_CONDITION:
if (belief != null) {
bIndex=bLink.getIndex(1);
if (beliefTerm instanceof Implication) {
conditionalDedIndWithVar((Implication)beliefTerm,bIndex,(Statement)taskTerm,tIndex,memory);
}
}
break;
}
break;
case TermLink.COMPOUND_CONDITION:
switch (bLink.type) {
case TermLink.COMPOUND:
if (belief != null) {
detachmentWithVar(taskSentence,belief,tIndex,memory);
}
break;
case TermLink.COMPOUND_STATEMENT:
if (belief != null) {
if (taskTerm instanceof Implication) {
Term subj=((Implication)taskTerm).getSubject();
if (subj instanceof Negation) {
if (task.getSentence().isJudgment()) {
componentAndStatement((CompoundTerm)subj,bIndex,(Statement)taskTerm,tIndex,memory);
}
 else {
componentAndStatement((CompoundTerm)subj,tIndex,(Statement)beliefTerm,bIndex,memory);
}
}
 else {
conditionalDedIndWithVar((Implication)taskTerm,tIndex,(Statement)beliefTerm,bIndex,memory);
}
}
break;
}
break;
}
}
}",0.991365598727562
166801,"/** 
 * The TaskLink is of type TRANSFORM, and the conclusion is an equivalent transformation
 * @param tLink The task link
 * @param memory Reference to the memory
 */
public static void transformTask(TaskLink tLink,Memory memory){
  CompoundTerm content=(CompoundTerm)memory.getCurrentTask().getContent().clone();
  short[] indices=tLink.getIndices();
  Term inh=null;
  if ((indices.length == 2) || (content instanceof Inheritance)) {
    inh=content;
  }
 else   if (indices.length == 3) {
    inh=content.componentAt(indices[0]);
  }
 else   if (indices.length == 4) {
    Term component=content.componentAt(indices[0]);
    if ((component instanceof Conjunction) && (((content instanceof Implication) && (indices[0] == 0)) || (content instanceof Equivalence))) {
      inh=((CompoundTerm)component).componentAt(indices[1]);
    }
 else {
      return;
    }
  }
  if (inh instanceof Inheritance) {
    StructuralRules.transformProductImage((Inheritance)inh,content,indices,memory);
  }
}","/** 
 * The TaskLink is of type TRANSFORM, and the conclusion is an equivalent transformation
 * @param tLink The task link
 * @param memory Reference to the memory
 */
public static void transformTask(TaskLink tLink,Memory memory){
  CompoundTerm content=(CompoundTerm)memory.getCurrentTask().getContent().clone();
  short[] indices=tLink.index;
  Term inh=null;
  if ((indices.length == 2) || (content instanceof Inheritance)) {
    inh=content;
  }
 else   if (indices.length == 3) {
    inh=content.componentAt(indices[0]);
  }
 else   if (indices.length == 4) {
    Term component=content.componentAt(indices[0]);
    if ((component instanceof Conjunction) && (((content instanceof Implication) && (indices[0] == 0)) || (content instanceof Equivalence))) {
      inh=((CompoundTerm)component).componentAt(indices[1]);
    }
 else {
      return;
    }
  }
  if (inh instanceof Inheritance) {
    StructuralRules.transformProductImage((Inheritance)inh,content,indices,memory);
  }
}",0.9914098029307732
166802,"/** 
 * Add a new Item into the Bag
 * @param newItem The new Item
 * @return Whether the new Item is added into the Bag
 */
public boolean putIn(final E newItem){
  final String newKey=newItem.getKey();
  final E oldItem=nameTable.put(newKey,newItem);
  if (oldItem != null) {
    outOfBase(oldItem);
    newItem.merge(oldItem);
  }
  final E overflowItem=intoBase(newItem);
  if (overflowItem != null) {
    final String overflowKey=overflowItem.getKey();
    nameTable.remove(overflowKey);
    return (overflowItem != newItem);
  }
 else {
    return true;
  }
}","/** 
 * Add a new Item into the Bag
 * @param newItem The new Item
 * @return Whether the new Item is added into the Bag
 */
public boolean putIn(final E newItem){
  final String newKey=newItem.getKey();
  final E oldItem=nameTable.put(newKey,newItem);
  if (oldItem != null) {
    try {
      outOfBase(oldItem);
    }
 catch (    NullPointerException e) {
      System.out.println(""String_Node_Str"");
    }
    newItem.merge(oldItem);
  }
  final E overflowItem=intoBase(newItem);
  if (overflowItem != null) {
    final String overflowKey=overflowItem.getKey();
    nameTable.remove(overflowKey);
    return (overflowItem != newItem);
  }
 else {
    return true;
  }
}",0.9135004042037188
166803,"public void addConceptTermLinks(Concept c){
  final Term source=c.term;
  if (!containsVertex(c)) {
    addVertex(c);
{
      for (      TermLink t : c.termLinks.nameTable.values()) {
        Term target=t.getTarget();
        if (!containsVertex(target)) {
          addVertex(target);
        }
        addEdge(source,target,t);
      }
    }
{
      for (      TaskLink t : c.taskLinks.nameTable.values()) {
        Term target=t.getTarget();
        if (!containsVertex(target)) {
          addVertex(target);
        }
        addEdge(source,target,t);
      }
    }
{
      for (      Sentence s : c.beliefs) {
        Term target=s.getContent();
        if (!containsVertex(target))         addVertex(target);
        addEdge(source,target,s);
      }
    }
{
      for (      Task t : c.questions) {
        Term target=t.getContent();
        if (!containsVertex(target))         addVertex(target);
        addEdge(source,target,t);
      }
    }
  }
}","public void addConceptTermLinks(Concept c){
  final Term source=c.term;
  if (!containsVertex(c)) {
    addVertex(c);
{
      for (      TermLink t : c.termLinks.nameTable.values()) {
        Term target=t.target;
        if (!containsVertex(target)) {
          addVertex(target);
        }
        addEdge(source,target,t);
      }
    }
{
      for (      TaskLink t : c.taskLinks.nameTable.values()) {
        Term target=t.target;
        if (!containsVertex(target)) {
          addVertex(target);
        }
        addEdge(source,target,t);
      }
    }
{
      for (      Sentence s : c.beliefs) {
        Term target=s.getContent();
        if (!containsVertex(target))         addVertex(target);
        addEdge(source,target,s);
      }
    }
{
      for (      Task t : c.questions) {
        Term target=t.getContent();
        if (!containsVertex(target))         addVertex(target);
        addEdge(source,target,t);
      }
    }
  }
}",0.9822175732217572
166804,"public void add(Iterable<Concept> concepts,boolean includeTermLinks,boolean includeTaskLinks){
  for (  final Concept c : concepts) {
    final Term source=c.term;
    if (!containsVertex(source)) {
      addVertex(source);
      if (includeTermLinks) {
        for (        TermLink t : c.termLinks.nameTable.values()) {
          Term target=t.getTarget();
          if (!containsVertex(target)) {
            addVertex(target);
          }
          addEdge(source,target,t);
        }
      }
      if (includeTaskLinks) {
        for (        TaskLink t : c.taskLinks.nameTable.values()) {
          Term target=t.getTarget();
          if (!containsVertex(target)) {
            addVertex(target);
          }
          addEdge(source,target,t);
        }
      }
    }
  }
}","public void add(Iterable<Concept> concepts,boolean includeTermLinks,boolean includeTaskLinks){
  for (  final Concept c : concepts) {
    final Term source=c.term;
    if (!containsVertex(source)) {
      addVertex(source);
      if (includeTermLinks) {
        for (        TermLink t : c.termLinks.nameTable.values()) {
          Term target=t.target;
          if (!containsVertex(target)) {
            addVertex(target);
          }
          addEdge(source,target,t);
        }
      }
      if (includeTaskLinks) {
        for (        TaskLink t : c.taskLinks.nameTable.values()) {
          Term target=t.target;
          if (!containsVertex(target)) {
            addVertex(target);
          }
          addEdge(source,target,t);
        }
      }
    }
  }
}",0.9780927835051546
166805,"@Test public void testNARState() throws IOException {
  int N=2;
  double[] x=randomArray(N,1.0,0);
  NAR n=new NAR();
  new Number1DInput(n,""String_Node_Str"",x,2);
  n.finish(16);
  HashMap<String,Object> d=new NARState(n).measure();
  assert(d.keySet().size() > 0);
}","@Test public void testNARState() throws IOException {
  int N=2;
  double[] x=randomArray(N,1.0,0);
  NAR n=new NAR();
  n.finish(16);
  HashMap<String,Object> d=new NARState(n).measure();
  assert(d.keySet().size() > 0);
}",0.9065040650406504
166806,"@Test public void test2() throws Exception {
  int N=4;
  int resolution=4;
  double[] x=randomArray(N,1.0,0);
  NAR n=new NAR();
  new TextOutput(n,System.out);
  Number1DInput v=new Number1DInput(n,""String_Node_Str"",x,resolution);
  for (int i=0; i < 10; i++) {
    v.next(randomArray(N,1.0,0));
  }
  v.close();
  n.finish(12);
  Assert.assertTrue(true);
}","public void test2() throws Exception {
  int N=4;
  int resolution=4;
  double[] x=randomArray(N,1.0,0);
  NAR n=new NAR();
  Number1DInput v=new Number1DInput(n,""String_Node_Str"",x,resolution);
  for (int i=0; i < 10; i++) {
    v.next(randomArray(N,1.0,0));
  }
  v.close();
  n.finish(12);
  Assert.assertTrue(true);
}",0.9441176470588236
166807,"@Test public void test1() throws Exception {
  int N=4;
  double[] x=randomArray(N,1.0,0);
  NAR n=new NAR();
  Number1DInput v=new Number1DInput(n,""String_Node_Str"",x,2);
  for (int i=0; i < 10; i++) {
    v.next(pulse(N,i % N));
  }
  v.close();
  n.finish(256);
  Assert.assertTrue(true);
}","@Test public void test1() throws Exception {
  int N=4;
  double[] x=randomArray(N,1.0,0);
  NAR n=new NAR();
  Number1DInput v=new Number1DInput(n,""String_Node_Str"",x,2);
  Assert.assertTrue(true);
}",0.8113590263691683
166808,"/** 
 * Generate a new stamp for derived sentence by merging the two from parents the first one is no shorter than the second
 * @param first The first Stamp
 * @param second The second Stamp
 */
private Stamp(final Stamp first,final Stamp second,final long time){
  int i1, i2, j;
  i1=i2=j=0;
  baseLength=Math.min(first.length() + second.length(),Parameters.MAXIMUM_EVIDENTAL_BASE_LENGTH);
  evidentialBase=new long[baseLength];
  final long[] firstBase=first.getBase();
  final long[] secondBase=second.getBase();
  while (i2 < second.length() && j < baseLength) {
    evidentialBase[j++]=firstBase[i1++];
    evidentialBase[j++]=secondBase[i2++];
  }
  while (i1 < first.length() && j < baseLength) {
    evidentialBase[j++]=firstBase[i1++];
  }
  final List<Term> chain1=first.getChain();
  final List<Term> chain2=second.getChain();
  i1=chain1.size() - 1;
  i2=chain2.size() - 1;
  derivationChain=new ArrayList<>(baseLength);
  j=0;
  while (j < Parameters.MAXIMUM_DERIVATION_CHAIN_LENGTH && (i1 >= 0 || i2 >= 0)) {
    if (j % 2 == 0) {
      if (i1 >= 0) {
        final Term c1i1=chain1.get(i1);
        if (!derivationChain.contains(c1i1)) {
          derivationChain.add(c1i1);
        }
 else {
          j--;
        }
        i1--;
      }
    }
 else {
      if (i2 >= 0) {
        final Term c2i2=chain2.get(i2);
        if (!derivationChain.contains(c2i2)) {
          derivationChain.add(c2i2);
        }
 else {
          j--;
        }
        i2--;
      }
    }
    j++;
  }
  Collections.reverse(derivationChain);
  creationTime=time;
  occurrenceTime=first.getOccurrenceTime();
}","/** 
 * Generate a new stamp for derived sentence by merging the two from parents the first one is no shorter than the second
 * @param first The first Stamp
 * @param second The second Stamp
 */
private Stamp(final Stamp first,final Stamp second,final long time){
  int i1, i2, j;
  i1=i2=j=0;
  baseLength=Math.min(first.length() + second.length(),Parameters.MAXIMUM_EVIDENTAL_BASE_LENGTH);
  evidentialBase=new long[baseLength];
  final long[] firstBase=first.getBase();
  final long[] secondBase=second.getBase();
  int firstLength=firstBase.length;
  int secondLength=secondBase.length;
  while (i2 < secondLength && j < baseLength) {
    evidentialBase[j++]=secondBase[i2++];
  }
  while (i1 < firstLength && j < baseLength) {
    evidentialBase[j++]=firstBase[i1++];
  }
  final List<Term> chain1=first.getChain();
  final List<Term> chain2=second.getChain();
  i1=chain1.size() - 1;
  i2=chain2.size() - 1;
  derivationChain=new ArrayList<>(baseLength);
  j=0;
  while (j < Parameters.MAXIMUM_DERIVATION_CHAIN_LENGTH && (i1 >= 0 || i2 >= 0)) {
    if (j % 2 == 0) {
      if (i1 >= 0) {
        final Term c1i1=chain1.get(i1);
        if (!derivationChain.contains(c1i1)) {
          derivationChain.add(c1i1);
        }
 else {
          j--;
        }
        i1--;
      }
    }
 else {
      if (i2 >= 0) {
        final Term c2i2=chain2.get(i2);
        if (!derivationChain.contains(c2i2)) {
          derivationChain.add(c2i2);
        }
 else {
          j--;
        }
        i2--;
      }
    }
    j++;
  }
  Collections.reverse(derivationChain);
  creationTime=time;
  occurrenceTime=first.getOccurrenceTime();
}",0.950910774930534
166809,"/** 
 * Add element to the chain.
 * @return The evidentialBase of numbers
 */
public void addToChain(final Term T,Sentence owner){
  derivationChain.add(T);
  if (derivationChain.size() > Parameters.MAXIMUM_DERIVATION_CHAIN_LENGTH) {
    derivationChain.remove(0);
  }
  owner.setStamp(this);
}","/** 
 * Add element to the chain.
 * @return The evidentialBase of numbers
 */
public void addToChain(final Term T){
  derivationChain.add(T);
  if (derivationChain.size() > Parameters.MAXIMUM_DERIVATION_CHAIN_LENGTH) {
    derivationChain.remove(0);
  }
}",0.9292196007259528
166810,"/** 
 * Check if a Sentence provide a better answer to a Question or Goal
 * @param belief The proposed answer
 * @param task The task to be processed
 * @param memory Reference to the memory
 */
public static void trySolution(Sentence belief,final Task task,final Memory memory){
  Sentence problem=task.getSentence();
  if (TemporalRules.matchingOrder(problem.getTemporalOrder(),belief.getTemporalOrder())) {
    Sentence oldBest=task.getBestSolution();
    float newQ=solutionQuality(problem,belief);
    if (oldBest != null) {
      float oldQ=solutionQuality(problem,oldBest);
      if (oldQ >= newQ) {
        return;
      }
    }
    Term content=belief.cloneContent();
    if (Variable.containVarIndep(content.getName())) {
      Variable.unify(Symbols.VAR_INDEPENDENT,content,problem.cloneContent());
      belief=(Sentence)belief.clone();
      belief.setContent(content);
      Stamp st=new Stamp(belief.getStamp(),memory.getTime());
      st.addToChain(belief.getContent(),belief);
    }
    task.setBestSolution(belief);
    if (task.isInput()) {
      memory.nar.output(OUT.class,belief);
    }
    BudgetValue budget=BudgetFunctions.solutionEval(problem,belief,task,memory);
    if ((budget != null) && budget.aboveThreshold()) {
      memory.activatedTask(budget,belief,task.getParentBelief());
    }
  }
}","/** 
 * Check if a Sentence provide a better answer to a Question or Goal
 * @param belief The proposed answer
 * @param task The task to be processed
 * @param memory Reference to the memory
 */
public static void trySolution(Sentence belief,final Task task,final Memory memory){
  Sentence problem=task.getSentence();
  if (TemporalRules.matchingOrder(problem.getTemporalOrder(),belief.getTemporalOrder())) {
    Sentence oldBest=task.getBestSolution();
    float newQ=solutionQuality(problem,belief);
    if (oldBest != null) {
      float oldQ=solutionQuality(problem,oldBest);
      if (oldQ >= newQ) {
        return;
      }
    }
    Term content=belief.cloneContent();
    if (Variable.containVarIndep(content.getName())) {
      Variable.unify(Symbols.VAR_INDEPENDENT,content,problem.cloneContent());
      belief=(Sentence)belief.clone();
      belief.setContent(content);
      Stamp st=new Stamp(belief.getStamp(),memory.getTime());
      st.addToChain(belief.getContent());
    }
    task.setBestSolution(belief);
    if (task.isInput()) {
      memory.nar.output(OUT.class,belief);
    }
    BudgetValue budget=BudgetFunctions.solutionEval(problem,belief,task,memory);
    if ((budget != null) && budget.aboveThreshold()) {
      memory.activatedTask(budget,belief,task.getParentBelief());
    }
  }
}",0.9973474801061007
166811,"/** 
 * Constructor called from subclasses constructors to initialize the fields
 * @param name Name of the compound
 * @param components Component list
 */
protected CompoundTerm(final String name,final ArrayList<Term> components){
  this.components=components;
  calcComplexity();
  setName(name);
  isConstant=!Variable.containVar(name);
}","/** 
 * Constructor called from subclasses constructors to initialize the fields
 * @param name Name of the compound
 * @param components Component list
 */
protected CompoundTerm(final String name,final ArrayList<Term> components){
  this.components=ensureValidComponents(components);
  calcComplexity();
  setName(name);
  isConstant=!Variable.containVar(name);
}",0.9391796322489392
166812,"/** 
 * Recursively apply a substitute to the current CompoundTerm
 * @param subs
 */
public void applySubstitute(final HashMap<Term,Term> subs){
  int i=0;
  for (  final Term t1 : components) {
    if (subs.containsKey(t1)) {
      Term t2=subs.get(t1);
      while (subs.containsKey(t2)) {
        t2=subs.get(t2);
      }
      components.set(i,(Term)t2.clone());
    }
 else     if (t1 instanceof CompoundTerm) {
      ((CompoundTerm)t1).applySubstitute(subs);
    }
    i++;
  }
  if (this.isCommutative()) {
    components.clear();
    components.addAll(new TreeSet<>(components));
  }
  name=makeName();
}","/** 
 * Recursively apply a substitute to the current CompoundTerm
 * @param subs
 */
public void applySubstitute(final HashMap<Term,Term> subs){
  int i=0;
  for (  final Term t1 : components) {
    if (subs.containsKey(t1)) {
      Term t2=subs.get(t1);
      while (subs.containsKey(t2)) {
        t2=subs.get(t2);
      }
      components.set(i,(Term)t2.clone());
    }
 else     if (t1 instanceof CompoundTerm) {
      ((CompoundTerm)t1).applySubstitute(subs);
    }
    i++;
  }
  if (this.isCommutative()) {
    final TreeSet<Term> ordered=new TreeSet<>(components);
    components.clear();
    components.addAll(ordered);
  }
  name=makeName();
}",0.9013417521704814
166813,"/** 
 * default method to make the oldName of a compound term from given fields
 * @param op the term operator
 * @param arg the list of components
 * @return the oldName of the term
 */
protected static String makeCompoundName(final Operator op,final ArrayList<Term> arg){
  final StringBuilder nameBuilder=new StringBuilder(16).append(Symbols.COMPOUND_TERM_OPENER).append(op.toString());
  for (  final Term t : arg) {
    nameBuilder.append(Symbols.ARGUMENT_SEPARATOR);
    if (t instanceof CompoundTerm) {
      ((CompoundTerm)t).setName(((CompoundTerm)t).makeName());
    }
    nameBuilder.append(t.getName());
  }
  nameBuilder.append(Symbols.COMPOUND_TERM_CLOSER);
  return nameBuilder.toString();
}","/** 
 * default method to make the oldName of a compound term from given fields
 * @param op the term operator
 * @param arg the list of components
 * @return the oldName of the term
 */
protected static String makeCompoundName(final Operator op,final List<Term> arg){
  final StringBuilder nameBuilder=new StringBuilder(16).append(Symbols.COMPOUND_TERM_OPENER).append(op.toString());
  for (  final Term t : arg) {
    nameBuilder.append(Symbols.ARGUMENT_SEPARATOR);
    if (t instanceof CompoundTerm) {
      ((CompoundTerm)t).setName(((CompoundTerm)t).makeName());
    }
    nameBuilder.append(t.getName());
  }
  nameBuilder.append(Symbols.COMPOUND_TERM_CLOSER);
  return nameBuilder.toString();
}",0.9964463397299218
166814,"/** 
 * make the oldName of an ExtensionSet or IntensionSet
 * @param opener the set opener
 * @param closer the set closer
 * @param arg the list of components
 * @return the oldName of the term
 */
protected static String makeSetName(final char opener,final ArrayList<Term> arg,final char closer){
  StringBuilder name=new StringBuilder(16).append(opener);
  if (arg.size() == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  name.append(arg.get(0).getName());
  for (int i=1; i < arg.size(); i++) {
    name.append(Symbols.ARGUMENT_SEPARATOR);
    name.append(arg.get(i).getName());
  }
  name.append(closer);
  return name.toString();
}","/** 
 * make the oldName of an ExtensionSet or IntensionSet
 * @param opener the set opener
 * @param closer the set closer
 * @param arg the list of components
 * @return the oldName of the term
 */
protected static String makeSetName(final char opener,final List<Term> arg,final char closer){
  StringBuilder name=new StringBuilder(16).append(opener);
  if (arg.size() == 0) {
  }
 else {
    name.append(arg.get(0).getName());
    for (int i=1; i < arg.size(); i++) {
      name.append(Symbols.ARGUMENT_SEPARATOR);
      name.append(arg.get(i).getName());
    }
  }
  name.append(closer);
  return name.toString();
}",0.8789308176100629
166815,"/** 
 * Get the component list
 * @return The component list
 */
public ArrayList<Term> getComponents(){
  return components;
}","/** 
 * Get the component list
 * @return The component list
 */
public List<Term> getComponents(){
  return components;
}",0.9799196787148594
166816,"/** 
 * Deep clone an array list of terms
 * @param original The original component list
 * @return an identical and separate copy of the list
 */
public static ArrayList<Term> cloneList(final ArrayList<Term> original){
  if (original == null) {
    return null;
  }
  final int osize=original.size();
  final ArrayList<Term> arr=new ArrayList(osize);
  for (int i=0; i < osize; i++) {
    Term original1=original.get(i);
    arr.add((Term)(original1.clone()));
  }
  return arr;
}","/** 
 * Deep clone an array list of terms
 * @param original The original component list
 * @return an identical and separate copy of the list
 */
public static ArrayList<Term> cloneList(final List<Term> original){
  if (original == null) {
    return null;
  }
  final int osize=original.size();
  final ArrayList<Term> arr=new ArrayList(osize);
  for (int i=0; i < osize; i++) {
    Term original1=original.get(i);
    arr.add((Term)(original1.clone()));
  }
  return arr;
}",0.7460815047021944
166817,"/** 
 * default method to make the oldName of an image term from given fields
 * @param op the term operator
 * @param arg the list of components
 * @param relationIndex the location of the place holder
 * @return the oldName of the term
 */
protected static String makeImageName(final Operator op,final ArrayList<Term> arg,final int relationIndex){
  StringBuilder name=new StringBuilder(16).append(Symbols.COMPOUND_TERM_OPENER).append(op).append(Symbols.ARGUMENT_SEPARATOR).append(arg.get(relationIndex).getName());
  for (int i=0; i < arg.size(); i++) {
    name.append(Symbols.ARGUMENT_SEPARATOR);
    if (i == relationIndex) {
      name.append(Symbols.IMAGE_PLACE_HOLDER);
    }
 else {
      name.append(arg.get(i).getName());
    }
  }
  name.append(Symbols.COMPOUND_TERM_CLOSER);
  return name.toString();
}","/** 
 * default method to make the oldName of an image term from given fields
 * @param op the term operator
 * @param arg the list of components
 * @param relationIndex the location of the place holder
 * @return the oldName of the term
 */
protected static String makeImageName(final Operator op,final List<Term> arg,final int relationIndex){
  StringBuilder name=new StringBuilder(16).append(Symbols.COMPOUND_TERM_OPENER).append(op).append(Symbols.ARGUMENT_SEPARATOR).append(arg.get(relationIndex).getName());
  for (int i=0; i < arg.size(); i++) {
    name.append(Symbols.ARGUMENT_SEPARATOR);
    if (i == relationIndex) {
      name.append(Symbols.IMAGE_PLACE_HOLDER);
    }
 else {
      name.append(arg.get(i).getName());
    }
  }
  name.append(Symbols.COMPOUND_TERM_CLOSER);
  return name.toString();
}",0.9969268592501536
166818,"/** 
 * Constructor with full values, called by clone
 * @param n The name of the term
 * @param cs Component list
 * @param con Whether the term is a constant
 * @param i Syntactic complexity of the compound
 */
private Conjunction(String n,ArrayList<Term> cs,boolean con,short i,int order){
  super(n,cs,con,i);
  temporalOrder=order;
}","/** 
 * Constructor with full values, called by clone
 * @param n The name of the term
 * @param cs Component list
 * @param con Whether the term is a constant
 * @param i Syntactic complexity of the compound
 */
private Conjunction(String n,ArrayList<Term> arg,boolean con,short i,int order){
  super(n,arg,con,i);
  temporalOrder=order;
}",0.9852507374631267
166819,"/** 
 * Constructor with full values, called by clone
 * @param n The name of the term
 * @param cs Component list
 * @param open Open variable list
 * @param i Syntactic complexity of the compound
 */
private Disjunction(String n,ArrayList<Term> cs,boolean con,short i){
  super(n,cs,con,i);
}","/** 
 * Constructor with full values, called by clone
 * @param n The name of the term
 * @param cs Component list
 * @param open Open variable list
 * @param i Syntactic complexity of the compound
 */
private Disjunction(String n,ArrayList<Term> arg,boolean con,short i){
  super(n,arg,con,i);
  if (arg.size() < 2) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.866965620328849
166820,"public DefaultNARBuilder(){
  super();
  setConceptBagSize(1000);
  setBagLevels(100);
}","public DefaultNARBuilder(){
  super();
  setConceptBagLevels(DefaultLevels);
  setConceptBagSize(1000);
  setTaskLinkBagLevels(DefaultLevels);
  setTaskLinkBagSize(20);
  setTermLinkBagLevels(DefaultLevels);
  setTermLinkBagSize(100);
}",0.4876543209876543
166821,"/** 
 * Constructor, called in Memory.getConcept only
 * @param tm A term corresponding to the concept
 * @param memory A reference to the memory
 */
public Concept(final Term tm,final Memory memory){
  super(tm.getName());
  term=tm;
  this.memory=memory;
  questions=new LinkedList();
  beliefs=new ArrayList<>();
  taskLinks=new TaskLinkBag(memory.nar.config.getBagLevels(),Parameters.TASK_LINK_BAG_SIZE,memory.taskForgettingRate);
  termLinks=new TermLinkBag(memory.nar.config.getBagLevels(),Parameters.TERM_LINK_BAG_SIZE,memory.beliefForgettingRate);
  if (tm instanceof CompoundTerm) {
    termLinkTemplates=((CompoundTerm)tm).prepareComponentLinks();
  }
}","/** 
 * Constructor, called in Memory.getConcept only
 * @param tm A term corresponding to the concept
 * @param memory A reference to the memory
 */
public Concept(final Term tm,final Memory memory){
  super(tm.getName());
  term=tm;
  this.memory=memory;
  questions=new LinkedList();
  beliefs=new ArrayList<>();
  taskLinks=new TaskLinkBag(memory.nar.config.getTaskLinkBagLevels(),memory.nar.config.getTaskLinkBagSize(),memory.taskForgettingRate);
  termLinks=new TermLinkBag(memory.nar.config.getTermLinkBagLevels(),memory.nar.config.getTermLinkBagSize(),memory.beliefForgettingRate);
  if (tm instanceof CompoundTerm) {
    termLinkTemplates=((CompoundTerm)tm).prepareComponentLinks();
  }
}",0.6544117647058824
166822,"/** 
 * Add element to the chain
 * @return The evidentialBase of numbers
 */
public void addToChain(final Term T){
  derivationChain.add(T);
  if (derivationChain.size() > Parameters.MAXIMUM_DERIVATION_CHAIN_LENGTH) {
    derivationChain.remove(0);
  }
}","/** 
 * Add element to the chain.
 * @return The evidentialBase of numbers
 */
public void addToChain(final Term T,Sentence owner){
  derivationChain.add(T);
  if (derivationChain.size() > Parameters.MAXIMUM_DERIVATION_CHAIN_LENGTH) {
    derivationChain.remove(0);
  }
  owner.setStamp(this);
}",0.9272727272727272
166823,"/** 
 * Check if a Sentence provide a better answer to a Question or Goal
 * @param belief The proposed answer
 * @param task The task to be processed
 * @param memory Reference to the memory
 */
public static void trySolution(Sentence belief,Task task,Memory memory){
  Sentence problem=task.getSentence();
  Sentence oldBest=task.getBestSolution();
  float newQ=solutionQuality(problem,belief);
  if (oldBest != null) {
    float oldQ=solutionQuality(problem,oldBest);
    if (oldQ >= newQ) {
      return;
    }
  }
  Term content=belief.cloneContent();
  if (Variable.containVarIndep(content.getName())) {
    Variable.unify(Symbols.VAR_INDEPENDENT,content,problem.cloneContent());
    belief=(Sentence)belief.clone();
    belief.setContent(content);
    Stamp st=new Stamp(belief.getStamp(),memory.getTime());
    st.addToChain(belief.getContent());
    belief.setStamp(st);
  }
  task.setBestSolution(belief);
  if (task.isInput()) {
    memory.nar.output(OUT.class,belief);
  }
  BudgetValue budget=BudgetFunctions.solutionEval(problem,belief,task,memory);
  if ((budget != null) && budget.aboveThreshold()) {
    memory.activatedTask(budget,belief,task.getParentBelief());
  }
}","/** 
 * Check if a Sentence provide a better answer to a Question or Goal
 * @param belief The proposed answer
 * @param task The task to be processed
 * @param memory Reference to the memory
 */
public static void trySolution(Sentence belief,Task task,Memory memory){
  Sentence problem=task.getSentence();
  Sentence oldBest=task.getBestSolution();
  float newQ=solutionQuality(problem,belief);
  if (oldBest != null) {
    float oldQ=solutionQuality(problem,oldBest);
    if (oldQ >= newQ) {
      return;
    }
  }
  Term content=belief.cloneContent();
  if (Variable.containVarIndep(content.getName())) {
    Variable.unify(Symbols.VAR_INDEPENDENT,content,problem.cloneContent());
    belief=(Sentence)belief.clone();
    belief.setContent(content);
    Stamp st=new Stamp(belief.getStamp(),memory.getTime());
    st.addToChain(belief.getContent(),belief);
  }
  task.setBestSolution(belief);
  if (task.isInput()) {
    memory.nar.output(OUT.class,belief);
  }
  BudgetValue budget=BudgetFunctions.solutionEval(problem,belief,task,memory);
  if ((budget != null) && budget.aboveThreshold()) {
    memory.activatedTask(budget,belief,task.getParentBelief());
  }
}",0.9864061172472388
166824,"public static void main(String[] args) throws Exception {
  NAR n=new DefaultNARBuilder().setConceptBagSize(8192).build();
  new TextOutput(n,System.out);
  n.start(0);
  new XMLInput(n,""String_Node_Str"",""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  NAR n=new DefaultNARBuilder().setConceptBagSize(8192).setTermLinkBagLevels(8).setTaskLinkBagLevels(8).build();
  n.start(0);
  new XMLInput(n,""String_Node_Str"",""String_Node_Str"");
}",0.8283261802575107
166825,"/** 
 * Recursively apply a substitute to the current CompoundTerm
 * @param subs
 */
public void applySubstitute(HashMap<Term,Term> subs){
  for (int i=0; i < size(); i++) {
    final Term t1=componentAt(i);
    if (subs.containsKey(t1)) {
      Term t2=subs.get(t1);
      while (subs.containsKey(t2)) {
        t2=subs.get(t2);
      }
      components.set(i,(Term)t2.clone());
    }
 else     if (t1 instanceof CompoundTerm) {
      ((CompoundTerm)t1).applySubstitute(subs);
    }
  }
  if (this.isCommutative()) {
    components=new ArrayList<>(new TreeSet<>(components));
  }
  name=makeName();
}","/** 
 * Recursively apply a substitute to the current CompoundTerm
 * @param subs
 */
public void applySubstitute(final HashMap<Term,Term> subs){
  int i=0;
  for (  final Term t1 : components) {
    Term t2=subs.get(t1);
    if (t2 != null) {
      while (subs.containsKey(t2)) {
        t2=subs.get(t2);
      }
      components.set(i,(Term)t2.clone());
    }
 else     if (t1 instanceof CompoundTerm) {
      ((CompoundTerm)t1).applySubstitute(subs);
    }
    i++;
  }
  if (this.isCommutative()) {
    components=new ArrayList<>(new TreeSet<>(components));
  }
  name=makeName();
}",0.4579124579124579
166826,"@Override public int hashCode(){
  int hash=7;
  hash=43 * hash + Objects.hashCode(this.components);
  return hash;
}","@Override public int hashCode(){
  int hash=7;
  hash=43 * hash + Objects.hashCode(this.components);
  hash=43 * hash + operator().hashCode();
  return hash;
}",0.8478260869565217
166827,"/** 
 * Recursively rename the variables in the compound
 * @param map The substitution established so far
 */
private void renameVariables(final HashMap<Variable,Variable> map){
  if (containVar()) {
    for (int i=0; i < components.size(); i++) {
      final Term term=componentAt(i);
      if (term instanceof Variable) {
        Variable var;
        if (term.getName().length() == 1) {
          var=new Variable(term.getName().charAt(0) + ""String_Node_Str"" + (map.size() + 1));
        }
 else {
          var=(Variable)map.get((Variable)term);
          if (var == null) {
            var=new Variable(term.getName().charAt(0) + ""String_Node_Str"" + (map.size() + 1));
          }
        }
        if (!term.equals(var)) {
          components.set(i,var);
        }
        map.put((Variable)term,var);
      }
 else       if (term instanceof CompoundTerm) {
        ((CompoundTerm)term).renameVariables(map);
        ((CompoundTerm)term).setName(((CompoundTerm)term).makeName());
      }
    }
  }
}","/** 
 * Recursively rename the variables in the compound
 * @param map The substitution established so far
 */
private void renameVariables(final HashMap<Variable,Variable> map){
  if (containVar()) {
    int i=0;
    for (    final Term term : components) {
      if (term instanceof Variable) {
        Variable var;
        if (term.getName().length() == 1) {
          var=new Variable(term.getName().charAt(0) + String.valueOf(map.size() + 1));
        }
 else {
          var=(Variable)map.get((Variable)term);
          if (var == null) {
            var=new Variable(term.getName().charAt(0) + String.valueOf(map.size() + 1));
          }
        }
        if (!term.equals(var)) {
          components.set(i,var);
        }
        map.put((Variable)term,var);
      }
 else       if (term instanceof CompoundTerm) {
        CompoundTerm ct=(CompoundTerm)term;
        ct.renameVariables(map);
        ct.setName(ct.makeName());
      }
      i++;
    }
  }
}",0.2379746835443038
166828,"/** 
 * Create a new memory <p> Called in Reasoner.reset only
 * @param nar
 */
public Memory(NAR nar){
  this.nar=nar;
  recorder=NullInferenceRecorder.global;
  concepts=new ConceptBag(nar.config.getBagLevels(),nar.config.getConceptBagSize(),conceptForgettingRate);
  novelTasks=new NovelTaskBag(nar.config.getBagLevels(),Parameters.TASK_BUFFER_SIZE);
  newTasks=new LinkedList<>();
}","/** 
 * Create a new memory <p> Called in Reasoner.reset only
 * @param nar
 */
public Memory(NAR nar){
  this.nar=nar;
  recorder=NullInferenceRecorder.global;
  concepts=new ConceptBag(nar.config.getConceptBagLevels(),nar.config.getConceptBagSize(),conceptForgettingRate);
  novelTasks=new NovelTaskBag(nar.config.getConceptBagLevels(),Parameters.TASK_BUFFER_SIZE);
  newTasks=new LinkedList<>();
}",0.9821882951653944
166829,"/** 
 * Derived task comes from the inference rules.
 * @param task the derived task
 */
private void derivedTask(final Task task,final boolean revised,final boolean single){
  if (task.getBudget().aboveThreshold()) {
    if (task.getSentence() != null && task.getSentence().getTruth() != null) {
      float conf=task.getSentence().getTruth().getConfidence();
      if (conf == 0) {
        if (recorder.isActive()) {
          recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
        }
        return;
      }
    }
    final Stamp stamp=task.getSentence().getStamp();
    final List<Term> chain=stamp.getChain();
    if (currentBelief != null) {
      final Term currentBeliefContent=currentBelief.getContent();
      if (chain.contains(currentBeliefContent)) {
        chain.remove(currentBeliefContent);
      }
      stamp.addToChain(currentBeliefContent);
    }
    if (currentTask != null && !single) {
      final Term currentTaskContent=currentTask.getContent();
      if (chain.contains(currentTaskContent)) {
        chain.remove(currentTaskContent);
      }
      stamp.addToChain(currentTaskContent);
    }
    if (!revised) {
      for (      final Term chain1 : chain) {
        if (task.getContent() == chain1) {
          if (recorder.isActive()) {
            recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
          }
          return;
        }
      }
    }
 else {
      final int stampLength=stamp.length();
      for (int i=0; i < stampLength; i++) {
        final long baseI=stamp.getBase()[i];
        for (int j=0; j < stampLength; j++) {
          if ((i != j) && (baseI == stamp.getBase()[j])) {
            if (recorder.isActive()) {
              recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
            }
            return;
          }
        }
      }
    }
    if (recorder.isActive()) {
      recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
    }
    float budget=task.getBudget().summary();
    float minSilent=nar.param.getSilenceLevel() / 100.0f;
    if (budget > minSilent) {
      nar.output(OUT.class,task.getSentence());
    }
    newTasks.add(task);
  }
 else {
    if (recorder.isActive()) {
      recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
    }
  }
}","/** 
 * Derived task comes from the inference rules.
 * @param task the derived task
 */
private void derivedTask(final Task task,final boolean revised,final boolean single){
  if (task.getBudget().aboveThreshold()) {
    if (task.getSentence() != null && task.getSentence().getTruth() != null) {
      float conf=task.getSentence().getTruth().getConfidence();
      if (conf == 0) {
        if (recorder.isActive()) {
          recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
        }
        return;
      }
    }
    final Stamp stamp=task.getSentence().getStamp();
    final List<Term> chain=stamp.getChain();
    if (currentBelief != null) {
      final Term currentBeliefContent=currentBelief.getContent();
      if (chain.contains(currentBeliefContent)) {
        chain.remove(currentBeliefContent);
      }
      stamp.addToChain(currentBeliefContent,task.getSentence());
    }
    if (currentTask != null && !single) {
      final Term currentTaskContent=currentTask.getContent();
      if (chain.contains(currentTaskContent)) {
        chain.remove(currentTaskContent);
      }
      stamp.addToChain(currentTaskContent,task.getSentence());
    }
    if (!revised) {
      for (      final Term chain1 : chain) {
        if (task.getContent() == chain1) {
          if (recorder.isActive()) {
            recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
          }
          return;
        }
      }
    }
 else {
      final int stampLength=stamp.length();
      for (int i=0; i < stampLength; i++) {
        final long baseI=stamp.getBase()[i];
        for (int j=0; j < stampLength; j++) {
          if ((i != j) && (baseI == stamp.getBase()[j])) {
            if (recorder.isActive()) {
              recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
            }
            return;
          }
        }
      }
    }
    if (recorder.isActive()) {
      recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
    }
    float budget=task.getBudget().summary();
    float minSilent=nar.param.getSilenceLevel() / 100.0f;
    if (budget > minSilent) {
      nar.output(OUT.class,task.getSentence());
    }
    newTasks.add(task);
  }
 else {
    if (recorder.isActive()) {
      recorder.append(""String_Node_Str"" + task + ""String_Node_Str"");
    }
  }
}",0.99174272055628
166830,"public static void main(String[] args) throws Exception {
  NAR n=new DefaultNARBuilder().setConceptBagSize(2048).setBagLevels(512).build();
  n.param.setSilenceLevel(99);
  KIFInput k=new KIFInput(n,""String_Node_Str"");
  k.setIncludeSubclass(true);
  k.start();
  TextOutput t=new TextOutput(n,System.out);
  t.setErrors(true);
  t.setErrorStackTrace(true);
  n.finish(16);
  new NARSwing(n);
  System.err.println(new NARState(n).measure());
}","public static void main(String[] args) throws Exception {
  NAR n=new DefaultNARBuilder().setConceptBagSize(2048).setConceptBagLevels(512).build();
  n.param.setSilenceLevel(99);
  KIFInput k=new KIFInput(n,""String_Node_Str"");
  k.setIncludeSubclass(true);
  k.start();
  TextOutput t=new TextOutput(n,System.out);
  t.setErrors(true);
  t.setErrorStackTrace(true);
  n.finish(16);
  new NARSwing(n);
  System.err.println(new NARState(n).measure());
}",0.9921787709497206
166831,"/** 
 * Equivalent transformation between products and images when the subject is a compound {<(*, S, M) --> P>, S@(*, S, M)} |- <S --> (/, P, _, M)> {<S --> (/, P, _, M)>, P@(/, P, _, M)} |- <(*, S, M) --> P> {<S --> (/, P, _, M)>, M@(/, P, _, M)} |- <M --> (/, P, S, _)>
 * @param subject The subject term
 * @param predicate The predicate term
 * @param memory Reference to the memory
 */
private static void transformSubjectPI(CompoundTerm subject,Term predicate,Memory memory){
  TruthValue truth=memory.currentTask.getSentence().getTruth();
  BudgetValue budget;
  Inheritance inheritance;
  Term newSubj, newPred;
  if (subject instanceof Product) {
    Product product=(Product)subject;
    for (short i=0; i < product.size(); i++) {
      newSubj=product.componentAt(i);
      newPred=ImageExt.make(product,predicate,i,memory);
      inheritance=Inheritance.make(newSubj,newPred,memory);
      if (inheritance != null) {
        if (truth == null) {
          budget=BudgetFunctions.compoundBackward(inheritance,memory);
        }
 else {
          budget=BudgetFunctions.compoundForward(truth,inheritance,memory);
        }
        memory.singlePremiseTask(inheritance,truth,budget);
      }
    }
  }
 else   if (subject instanceof ImageInt) {
    ImageInt image=(ImageInt)subject;
    int relationIndex=image.getRelationIndex();
    for (short i=0; i < image.size(); i++) {
      if (i == relationIndex) {
        newSubj=image.componentAt(relationIndex);
        newPred=Product.make(image,predicate,relationIndex,memory);
      }
 else {
        newSubj=ImageInt.make((ImageInt)image,predicate,i,memory);
        newPred=image.componentAt(i);
      }
      inheritance=Inheritance.make(newSubj,newPred,memory);
      if (truth == null) {
        budget=BudgetFunctions.compoundBackward(inheritance,memory);
      }
 else {
        budget=BudgetFunctions.compoundForward(truth,inheritance,memory);
      }
      memory.singlePremiseTask(inheritance,truth,budget);
    }
  }
}","/** 
 * Equivalent transformation between products and images when the subject is a compound {<(*, S, M) --> P>, S@(*, S, M)} |- <S --> (/, P, _, M)> {<S --> (/, P, _, M)>, P@(/, P, _, M)} |- <(*, S, M) --> P> {<S --> (/, P, _, M)>, M@(/, P, _, M)} |- <M --> (/, P, S, _)>
 * @param subject The subject term
 * @param predicate The predicate term
 * @param memory Reference to the memory
 */
private static void transformSubjectPI(CompoundTerm subject,Term predicate,Memory memory){
  TruthValue truth=memory.currentTask.getSentence().getTruth();
  BudgetValue budget;
  Inheritance inheritance;
  Term newSubj, newPred;
  if (subject instanceof Product) {
    Product product=(Product)subject;
    for (short i=0; i < product.size(); i++) {
      newSubj=product.componentAt(i);
      newPred=ImageExt.make(product,predicate,i,memory);
      inheritance=Inheritance.make(newSubj,newPred,memory);
      if (inheritance != null) {
        if (truth == null) {
          budget=BudgetFunctions.compoundBackward(inheritance,memory);
        }
 else {
          budget=BudgetFunctions.compoundForward(truth,inheritance,memory);
        }
        memory.singlePremiseTask(inheritance,truth,budget);
      }
    }
  }
 else   if (subject instanceof ImageInt) {
    ImageInt image=(ImageInt)subject;
    int relationIndex=image.getRelationIndex();
    for (short i=0; i < image.size(); i++) {
      if (i == relationIndex) {
        newSubj=image.componentAt(relationIndex);
        newPred=Product.make(image,predicate,relationIndex,memory);
      }
 else {
        newSubj=ImageInt.make((ImageInt)image,predicate,i,memory);
        newPred=image.componentAt(i);
      }
      inheritance=Inheritance.make(newSubj,newPred,memory);
      if (inheritance != null) {
        if (truth == null) {
          budget=BudgetFunctions.compoundBackward(inheritance,memory);
        }
 else {
          budget=BudgetFunctions.compoundForward(truth,inheritance,memory);
        }
        memory.singlePremiseTask(inheritance,truth,budget);
      }
    }
  }
}",0.9833705634152397
166832,"/** 
 * Try to make a new compound from two components. Called by the inference rules.
 * @param subject The first compoment
 * @param predicate The second compoment
 * @param memory Reference to the memory
 * @return A compound generated or null
 */
public static Inheritance make(Term subject,Term predicate,Memory memory){
  if (invalidStatement(subject,predicate)) {
    throw new RuntimeException(""String_Node_Str"" + subject + ""String_Node_Str""+ predicate);
  }
  String name=makeStatementName(subject,Relation.INHERITANCE.toString(),predicate);
  Term t=memory.nameToListedTerm(name);
  if (t != null) {
    return (Inheritance)t;
  }
  ArrayList<Term> argument=argumentsToList(subject,predicate);
  return new Inheritance(argument);
}","/** 
 * Try to make a new compound from two components. Called by the inference rules.
 * @param subject The first compoment
 * @param predicate The second compoment
 * @param memory Reference to the memory
 * @return A compound generated or null
 */
public static Inheritance make(Term subject,Term predicate,Memory memory){
  if (invalidStatement(subject,predicate)) {
    return null;
  }
  String name=makeStatementName(subject,Relation.INHERITANCE.toString(),predicate);
  Term t=memory.nameToListedTerm(name);
  if (t != null) {
    return (Inheritance)t;
  }
  ArrayList<Term> argument=argumentsToList(subject,predicate);
  return new Inheritance(argument);
}",0.9310589907604832
166833,"@Override public void write(CastExpression castExpression){
  Expression expression=castExpression.getExpression();
  Type type=castExpression.getType();
  if (isGenericArrayCreation(castExpression))   writeGenericArrayCreation((ArrayType)type,(ArrayCreation)expression);
 else {
    matchAndWrite(""String_Node_Str"");
    copySpaceAndComments();
    writeNode(type);
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"");
    copySpaceAndComments();
    writeNode(expression);
  }
}","@Override public void write(CastExpression castExpression){
  Expression expression=castExpression.getExpression();
  Type type=castExpression.getType();
  if (isGenericArrayCreation(castExpression))   writeGenericArrayCreation((ArrayType)type,(ArrayCreation)expression);
 else {
    boolean makeUncheckedCast=isNumericPrimitiveType(type) && expression instanceof NumberLiteral;
    if (makeUncheckedCast)     write(""String_Node_Str"");
    matchAndWrite(""String_Node_Str"");
    copySpaceAndComments();
    writeNode(type);
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"");
    copySpaceAndComments();
    writeNode(expression);
    if (makeUncheckedCast)     write(""String_Node_Str"");
  }
}",0.6655546288573811
166834,"protected void writeMethodInvocation(T methodInvocationNode,@Nullable Expression expression,SimpleName methodName,List typeArguments,List arguments,IMethodBinding methodBinding){
  String methodNameString=methodName.getIdentifier();
  ArrayList<Expression> args=new ArrayList<>();
  for (  Object argument : arguments)   args.add((Expression)argument);
  if (expression != null) {
    writeNode(expression);
    copySpaceAndComments();
    if (writeMethodMappedToOperatorOverload(methodNameString,args,methodBinding))     return;
    @Nullable ITypeBinding expressionTypeBinding=expression.resolveTypeBinding();
    if (expressionTypeBinding != null && isFunctionalInterface(expressionTypeBinding)) {
      match(""String_Node_Str"");
      skipSpaceAndComments();
      match(methodNameString);
      skipSpaceAndComments();
      writeMethodInvocationArgumentList(arguments);
      return;
    }
    matchAndWrite(""String_Node_Str"");
    copySpaceAndComments();
  }
  ITypeBinding objectType;
  if (expression != null)   objectType=expression.resolveTypeBinding();
 else   objectType=methodBinding.getDeclaringClass();
  if (writeMappedObjectMethod(methodInvocationNode,methodNameString,args,methodBinding))   return;
  if (implementsInterface(objectType,""String_Node_Str""))   if (writeMappedListMethod(methodInvocationNode,methodNameString,args,methodBinding))   return;
  if (isType(objectType,""String_Node_Str""))   writeMappedStringMethod(methodInvocationNode,methodNameString,args,methodBinding);
 else   if (isType(objectType,""String_Node_Str""))   writeMappedStringBuilderMethod(methodInvocationNode,methodNameString,args,methodBinding);
 else {
    if (typeArguments != null && !typeArguments.isEmpty()) {
      writeNodeAtDifferentPosition(methodName);
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(typeArguments,(      Type type) -> {
        copySpaceAndComments();
        writeNode(type);
      }
);
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      setPositionToEndOfNode(methodName);
    }
 else     matchAndWrite(methodNameString);
    copySpaceAndComments();
    writeMethodInvocationArgumentList(arguments);
  }
}","protected void writeMethodInvocation(T methodInvocationNode,@Nullable Expression expression,SimpleName methodName,List typeArguments,List arguments,IMethodBinding methodBinding){
  String methodNameString=methodName.getIdentifier();
  ArrayList<Expression> args=new ArrayList<>();
  for (  Object argument : arguments)   args.add((Expression)argument);
  ITypeBinding objectType;
  if (expression != null)   objectType=expression.resolveTypeBinding();
 else   objectType=methodBinding.getDeclaringClass();
  boolean addParentheses=false;
  if (isType(objectType,""String_Node_Str"") && methodNameString.equals(""String_Node_Str""))   addParentheses=true;
  if (addParentheses)   write(""String_Node_Str"");
  if (expression != null) {
    writeNode(expression);
    copySpaceAndComments();
    if (writeMethodMappedToOperatorOverload(methodNameString,args,methodBinding))     return;
    @Nullable ITypeBinding expressionTypeBinding=expression.resolveTypeBinding();
    if (expressionTypeBinding != null && isFunctionalInterface(expressionTypeBinding)) {
      match(""String_Node_Str"");
      skipSpaceAndComments();
      match(methodNameString);
      skipSpaceAndComments();
      writeMethodInvocationArgumentList(arguments);
      return;
    }
    matchAndWrite(""String_Node_Str"");
    copySpaceAndComments();
  }
  if (writeMappedObjectMethod(methodInvocationNode,methodNameString,args,methodBinding))   ;
 else   if (implementsInterface(objectType,""String_Node_Str"") && writeMappedListMethod(methodInvocationNode,methodNameString,args,methodBinding))   ;
 else   if (isType(objectType,""String_Node_Str""))   writeMappedStringMethod(methodInvocationNode,methodNameString,args,methodBinding);
 else   if (isType(objectType,""String_Node_Str""))   writeMappedStringBuilderMethod(methodInvocationNode,methodNameString,args,methodBinding);
 else {
    if (typeArguments != null && !typeArguments.isEmpty()) {
      writeNodeAtDifferentPosition(methodName);
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(typeArguments,(      Type type) -> {
        copySpaceAndComments();
        writeNode(type);
      }
);
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      setPositionToEndOfNode(methodName);
    }
 else     matchAndWrite(methodNameString);
    copySpaceAndComments();
    writeMethodInvocationArgumentList(arguments);
  }
  if (addParentheses)   write(""String_Node_Str"");
}",0.8706802868941534
166835,"private void writeMappedStringMethod(T methodInvocation,String methodName,ArrayList<Expression> args,IMethodBinding methodBinding){
  match(methodName);
  if (isStatic(methodBinding)) {
switch (methodName) {
default :
      throw sourceNotSupported(""String_Node_Str"" + methodName + ""String_Node_Str"");
  }
}
 else {
switch (methodName) {
case ""String_Node_Str"":
    verifyArgCount(args,1);
  writeMappedMethod(""String_Node_Str"",args.get(0));
break;
case ""String_Node_Str"":
verifyArgCount(args,1);
writeMappedMethod(""String_Node_Str"",args.get(0));
break;
case ""String_Node_Str"":
verifyArgCount(args,1);
writeMappedMethod(""String_Node_Str"",args.get(0),nativeReference(""String_Node_Str"",""String_Node_Str""));
break;
case ""String_Node_Str"":
verifyArgCount(args,1,2);
if (args.size() == 1) writeMappedMethod(""String_Node_Str"",args.get(0));
 else writeMappedMethod(""String_Node_Str"",args.get(0),args.get(1));
break;
case ""String_Node_Str"":
verifyArgCount(args,1,2);
if (args.size() == 1) writeMappedMethod(""String_Node_Str"",args.get(0));
 else writeMappedMethod(""String_Node_Str"",args.get(0),args.get(1));
break;
case ""String_Node_Str"":
verifyArgCount(args,0);
write(""String_Node_Str"");
break;
case ""String_Node_Str"":
verifyArgCount(args,0);
write(""String_Node_Str"");
break;
case ""String_Node_Str"":
verifyArgCount(args,2);
writeMappedMethod(""String_Node_Str"",args.get(0),args.get(1));
break;
case ""String_Node_Str"":
verifyArgCount(args,1);
writeMappedMethod(""String_Node_Str"",args.get(0),nativeReference(""String_Node_Str"",""String_Node_Str""));
break;
case ""String_Node_Str"":
verifyArgCount(args,1,2);
if (args.size() == 1) writeMappedMethod(""String_Node_Str"",args.get(0));
 else {
Expression arg0=args.get(0);
Expression arg1=args.get(1);
write(""String_Node_Str"");
write(""String_Node_Str"");
setPositionToStartOfNode(arg0);
writeNode(arg0);
write(""String_Node_Str"");
setPositionToStartOfNode(arg1);
writeNode(arg1);
write(""String_Node_Str"");
setPositionToStartOfNode(arg0);
writeNode(arg0);
write(""String_Node_Str"");
}
break;
case ""String_Node_Str"":
verifyArgCount(args,0);
writeMappedMethod(""String_Node_Str"");
break;
case ""String_Node_Str"":
verifyArgCount(args,1);
writeMappedMethod(""String_Node_Str"");
break;
case ""String_Node_Str"":
verifyArgCount(args,0);
writeMappedMethod(""String_Node_Str"");
break;
default :
throw sourceNotSupported(""String_Node_Str"" + methodName + ""String_Node_Str"");
}
}
setPositionToEndOfNode(methodInvocation);
}","private void writeMappedStringMethod(T methodInvocation,String methodName,ArrayList<Expression> args,IMethodBinding methodBinding){
  match(methodName);
  if (isStatic(methodBinding)) {
switch (methodName) {
default :
      throw sourceNotSupported(""String_Node_Str"" + methodName + ""String_Node_Str"");
  }
}
 else {
switch (methodName) {
case ""String_Node_Str"":
    verifyArgCount(args,1);
  writeMappedMethod(""String_Node_Str"",args.get(0));
break;
case ""String_Node_Str"":
verifyArgCount(args,1);
writeMappedMethod(""String_Node_Str"",args.get(0));
break;
case ""String_Node_Str"":
verifyArgCount(args,1);
writeMappedMethod(""String_Node_Str"",args.get(0),nativeReference(""String_Node_Str"",""String_Node_Str""));
break;
case ""String_Node_Str"":
verifyArgCount(args,1,2);
if (args.size() == 1) writeMappedMethod(""String_Node_Str"",args.get(0));
 else writeMappedMethod(""String_Node_Str"",args.get(0),args.get(1));
break;
case ""String_Node_Str"":
verifyArgCount(args,1,2);
if (args.size() == 1) writeMappedMethod(""String_Node_Str"",args.get(0));
 else writeMappedMethod(""String_Node_Str"",args.get(0),args.get(1));
break;
case ""String_Node_Str"":
verifyArgCount(args,0);
write(""String_Node_Str"");
break;
case ""String_Node_Str"":
verifyArgCount(args,0);
write(""String_Node_Str"");
break;
case ""String_Node_Str"":
verifyArgCount(args,2);
writeMappedMethod(""String_Node_Str"",args.get(0),args.get(1));
break;
case ""String_Node_Str"":
verifyArgCount(args,1);
writeMappedMethod(""String_Node_Str"",args.get(0),nativeReference(""String_Node_Str"",""String_Node_Str""));
break;
case ""String_Node_Str"":
verifyArgCount(args,1,2);
if (args.size() == 1) writeMappedMethod(""String_Node_Str"",args.get(0));
 else {
Expression arg0=args.get(0);
Expression arg1=args.get(1);
write(""String_Node_Str"");
write(""String_Node_Str"");
setPositionToStartOfNode(arg0);
writeNode(arg0);
write(""String_Node_Str"");
setPositionToStartOfNode(arg1);
writeNode(arg1);
write(""String_Node_Str"");
setPositionToStartOfNode(arg0);
writeNode(arg0);
write(""String_Node_Str"");
}
break;
case ""String_Node_Str"":
verifyArgCount(args,1,1);
writeMappedMethod(""String_Node_Str"");
break;
case ""String_Node_Str"":
verifyArgCount(args,0);
writeMappedMethod(""String_Node_Str"");
break;
case ""String_Node_Str"":
verifyArgCount(args,0);
writeMappedMethod(""String_Node_Str"");
break;
default :
throw sourceNotSupported(""String_Node_Str"" + methodName + ""String_Node_Str"");
}
}
setPositionToEndOfNode(methodInvocation);
}",0.998766447368421
166836,"public <TElmt>void writeNodes(List list,ASTUtil.IProcessListElmt<TElmt> processList){
  boolean first=true;
  for (  Object elmtObject : list) {
    TElmt elmt=(TElmt)elmtObject;
    processList.process(elmt);
  }
}","public <TElmt>void writeNodes(List list,Consumer<TElmt> consumer){
  boolean first=true;
  for (  Object elmtObject : list) {
    TElmt elmt=(TElmt)elmtObject;
    consumer.accept(elmt);
  }
}",0.8206388206388207
166837,"public static boolean isFunctionalInterfaceImplementation(SourceFileWriter sourceFileWriter,Type type){
  ITypeBinding typeBinding=sourceFileWriter.resolveTypeBinding(type);
  if (!typeBinding.isInterface())   return false;
  int methodCount=typeBinding.getDeclaredMethods().length;
  if (methodCount != 1)   return false;
  boolean hasFunctionalInterfaceAnnotation=false;
  typeBinding.getAnnotations();
  for (  IAnnotationBinding annotationBinding : typeBinding.getAnnotations()) {
    annotationBinding.getAnnotationType().getQualifiedName().equals(""String_Node_Str"");
    hasFunctionalInterfaceAnnotation=true;
  }
  if (!hasFunctionalInterfaceAnnotation)   return false;
  return true;
}","public static boolean isFunctionalInterfaceImplementation(SourceFileWriter sourceFileWriter,Type type){
  ITypeBinding typeBinding=sourceFileWriter.resolveTypeBinding(type);
  if (!typeBinding.isInterface())   return false;
  int methodCount=typeBinding.getDeclaredMethods().length;
  if (methodCount != 1)   return false;
  boolean hasFunctionalInterfaceAnnotation=false;
  for (  IAnnotationBinding annotationBinding : typeBinding.getAnnotations()) {
    annotationBinding.getAnnotationType().getQualifiedName().equals(""String_Node_Str"");
    hasFunctionalInterfaceAnnotation=true;
  }
  if (!hasFunctionalInterfaceAnnotation)   return false;
  return true;
}",0.9763663220088626
166838,"public static <T>void forEach(List list,IProcessListElmtWithFirst<T> listDo){
  boolean first=true;
  for (  Object elmtObject : list) {
    T elmt=(T)elmtObject;
    listDo.process(elmt,first);
    first=false;
  }
}","public static <T>boolean forEach(List list,ConsumerWithFirst<T> consumerWithFirst){
  boolean first=true;
  for (  Object elmtObject : list) {
    T elmt=(T)elmtObject;
    consumerWithFirst.accept(elmt,first);
    first=false;
  }
  return !first;
}",0.7665952890792291
166839,"/** 
 * Add all the wildcards referenced from a given type, searching recursively in the type definition to add all of them.   That is, for a type like this: <p> ""Foo< Bar<? extends Fizz>, <Blip <? super Pop>>, ? >"" <p> 3 wildcard types would be added (<? extends Fizz>, <? super Pop>, and ?) since essentially the ? appears 3 times the in the type definition above.
 * @param type
 * @param wildcardTypes
 */
public static void addWildcardTypes(Type type,ArrayList<WildcardType> wildcardTypes){
  if (type.isParameterizedType()) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    for (    Object typeArgumentObject : parameterizedType.typeArguments()) {
      Type typeArgument=(Type)typeArgumentObject;
      addWildcardTypes(typeArgument,wildcardTypes);
    }
  }
 else   if (type.isWildcardType()) {
    WildcardType wildcardType=(WildcardType)type;
    wildcardTypes.add(wildcardType);
    @Nullable Type bound=wildcardType.getBound();
    if (bound != null)     addWildcardTypes(bound,wildcardTypes);
  }
}","/** 
 * Add all the wildcards referenced from a given type, searching recursively in the type definition to add all of them.   That is, for a type like this: <p> ""Foo< Bar<? extends Fizz>, <Blip <? super Pop>>, ? >"" <p> 3 wildcard types would be added (<? extends Fizz>, <? super Pop>, and ?) since essentially the ? appears 3 times the in the type definition above.
 * @param type
 * @param wildcardTypes
 */
public static void addWildcardTypes(Type type,ArrayList<WildcardType> wildcardTypes){
  if (type.isParameterizedType()) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    forEach(parameterizedType.typeArguments(),(    Type typeArgument) -> {
      addWildcardTypes(typeArgument,wildcardTypes);
    }
);
  }
 else   if (type.isWildcardType()) {
    WildcardType wildcardType=(WildcardType)type;
    wildcardTypes.add(wildcardType);
    @Nullable Type bound=wildcardType.getBound();
    if (bound != null)     addWildcardTypes(bound,wildcardTypes);
  }
}",0.900695134061569
166840,"public void setTypeDeclaration(TypeDeclaration typeDeclaration){
  this.typeDeclaration=typeDeclaration;
}","public void setTypeDeclaration(TypeDeclaration typeDeclaration){
  if (typeDeclaration != this.typeDeclaration) {
    this.typeDeclaration=typeDeclaration;
    this.typeMethodNames=null;
  }
}",0.7114093959731543
166841,"/** 
 * Add visitors for the different kinds of statements.
 */
private void addStatementWriters(){
  addWriter(Block.class,new CSharpASTNodeWriter<Block>(this){
    @Override public void write(    Block block){
      matchAndWrite(""String_Node_Str"");
      writeNodes(block.statements());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(EmptyStatement.class,new CSharpASTNodeWriter<EmptyStatement>(this){
    @Override public void write(    EmptyStatement emptyStatement){
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(ExpressionStatement.class,new CSharpASTNodeWriter<ExpressionStatement>(this){
    @Override public void write(    ExpressionStatement expressionStatement){
      writeNode(expressionStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(IfStatement.class,new CSharpASTNodeWriter<IfStatement>(this){
    @Override public void write(    IfStatement ifStatement){
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(ifStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(ifStatement.getThenStatement());
      Statement elseStatement=ifStatement.getElseStatement();
      if (elseStatement != null) {
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        writeNode(elseStatement);
      }
    }
  }
);
  addWriter(WhileStatement.class,new CSharpASTNodeWriter<WhileStatement>(this){
    @Override public void write(    WhileStatement whileStatement){
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(whileStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(whileStatement.getBody());
    }
  }
);
  addWriter(DoStatement.class,new CSharpASTNodeWriter<DoStatement>(this){
    @Override public void write(    DoStatement doStatement){
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(doStatement.getBody());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(doStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(ContinueStatement.class,new CSharpASTNodeWriter<ContinueStatement>(this){
    @Override public void write(    ContinueStatement continueStatement){
      if (continueStatement.getLabel() != null)       throw sourceNotSupported(""String_Node_Str"");
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(BreakStatement.class,new CSharpASTNodeWriter<BreakStatement>(this){
    @Override public void write(    BreakStatement breakStatement){
      if (breakStatement.getLabel() != null)       throw sourceNotSupported(""String_Node_Str"");
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(ForStatement.class,new ForStatementWriter(this));
  addWriter(EnhancedForStatement.class,new CSharpASTNodeWriter<EnhancedForStatement>(this){
    @Override public void write(    EnhancedForStatement enhancedForStatement){
      matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(enhancedForStatement.getParameter());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      copySpaceAndComments();
      writeNode(enhancedForStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(enhancedForStatement.getBody());
    }
  }
);
  addWriter(SwitchStatement.class,new SwitchStatementWriter(this));
  addWriter(ReturnStatement.class,new CSharpASTNodeWriter<ReturnStatement>(this){
    @Override public void write(    ReturnStatement returnStatement){
      matchAndWrite(""String_Node_Str"");
      Expression expression=returnStatement.getExpression();
      if (expression != null) {
        copySpaceAndComments();
        writeNode(returnStatement.getExpression());
      }
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(VariableDeclarationStatement.class,new CSharpASTNodeWriter<VariableDeclarationStatement>(this){
    @Override public void write(    VariableDeclarationStatement variableDeclarationStatement){
      writeVariableDeclaration(variableDeclarationStatement.modifiers(),variableDeclarationStatement.getType(),variableDeclarationStatement.fragments());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(TryStatement.class,new TryStatementWriter(this));
  addWriter(ThrowStatement.class,new CSharpASTNodeWriter<ThrowStatement>(this){
    @Override public void write(    ThrowStatement throwStatement){
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(throwStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(ConstructorInvocation.class,new CSharpASTNodeWriter(this){
    @Override public void write(    ASTNode node){
      throw sourceNotSupported(""String_Node_Str"");
    }
  }
);
  addWriter(AssertStatement.class,new CSharpASTNodeWriter<AssertStatement>(this){
    @Override public void write(    AssertStatement assertStatement){
      getContext().addExtraUsing(""String_Node_Str"");
      matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      skipSpaceAndComments();
      writeNode(assertStatement.getExpression());
      @Nullable Expression message=assertStatement.getMessage();
      if (message != null) {
        skipSpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
        copySpaceAndComments();
        writeNode(message);
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  addWriter(SynchronizedStatement.class,new CSharpASTNodeWriter<SynchronizedStatement>(this){
    @Override public void write(    SynchronizedStatement synchronizedStatement){
      matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      writeNode(synchronizedStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(synchronizedStatement.getBody());
    }
  }
);
}","/** 
 * Add visitors for the different kinds of statements.
 */
private void addStatementWriters(){
  addWriter(Block.class,new CSharpASTNodeWriter<Block>(this){
    @Override public void write(    Block block){
      matchAndWrite(""String_Node_Str"");
      writeNodes(block.statements());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(EmptyStatement.class,new CSharpASTNodeWriter<EmptyStatement>(this){
    @Override public void write(    EmptyStatement emptyStatement){
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(ExpressionStatement.class,new CSharpASTNodeWriter<ExpressionStatement>(this){
    @Override public void write(    ExpressionStatement expressionStatement){
      writeNode(expressionStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(IfStatement.class,new CSharpASTNodeWriter<IfStatement>(this){
    @Override public void write(    IfStatement ifStatement){
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(ifStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(ifStatement.getThenStatement());
      Statement elseStatement=ifStatement.getElseStatement();
      if (elseStatement != null) {
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        writeNode(elseStatement);
      }
    }
  }
);
  addWriter(WhileStatement.class,new CSharpASTNodeWriter<WhileStatement>(this){
    @Override public void write(    WhileStatement whileStatement){
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(whileStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(whileStatement.getBody());
    }
  }
);
  addWriter(DoStatement.class,new CSharpASTNodeWriter<DoStatement>(this){
    @Override public void write(    DoStatement doStatement){
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(doStatement.getBody());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(doStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(ContinueStatement.class,new CSharpASTNodeWriter<ContinueStatement>(this){
    @Override public void write(    ContinueStatement continueStatement){
      if (continueStatement.getLabel() != null)       throw sourceNotSupported(""String_Node_Str"");
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(BreakStatement.class,new CSharpASTNodeWriter<BreakStatement>(this){
    @Override public void write(    BreakStatement breakStatement){
      if (breakStatement.getLabel() != null)       throw sourceNotSupported(""String_Node_Str"");
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(ForStatement.class,new ForStatementWriter(this));
  addWriter(EnhancedForStatement.class,new CSharpASTNodeWriter<EnhancedForStatement>(this){
    @Override public void write(    EnhancedForStatement enhancedForStatement){
      matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(enhancedForStatement.getParameter());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      copySpaceAndComments();
      writeNode(enhancedForStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(enhancedForStatement.getBody());
    }
  }
);
  addWriter(SwitchStatement.class,new SwitchStatementWriter(this));
  addWriter(ReturnStatement.class,new CSharpASTNodeWriter<ReturnStatement>(this){
    @Override public void write(    ReturnStatement returnStatement){
      matchAndWrite(""String_Node_Str"");
      Expression expression=returnStatement.getExpression();
      if (expression != null) {
        copySpaceAndComments();
        writeNode(returnStatement.getExpression());
      }
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(VariableDeclarationStatement.class,new CSharpASTNodeWriter<VariableDeclarationStatement>(this){
    @Override public void write(    VariableDeclarationStatement variableDeclarationStatement){
      writeVariableDeclaration(variableDeclarationStatement.modifiers(),variableDeclarationStatement.getType(),variableDeclarationStatement.fragments());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(TryStatement.class,new TryStatementWriter(this));
  addWriter(ThrowStatement.class,new CSharpASTNodeWriter<ThrowStatement>(this){
    @Override public void write(    ThrowStatement throwStatement){
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(throwStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(ConstructorInvocation.class,new CSharpASTNodeWriter(this){
    @Override public void write(    ASTNode node){
      throw sourceNotSupported(""String_Node_Str"");
    }
  }
);
  addWriter(AssertStatement.class,new CSharpASTNodeWriter<AssertStatement>(this){
    @Override public void write(    AssertStatement assertStatement){
      matchAndWrite(""String_Node_Str"",nativeReference(""String_Node_Str"",""String_Node_Str""));
      write(""String_Node_Str"");
      skipSpaceAndComments();
      writeNode(assertStatement.getExpression());
      @Nullable Expression message=assertStatement.getMessage();
      if (message != null) {
        skipSpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
        copySpaceAndComments();
        writeNode(message);
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  addWriter(SynchronizedStatement.class,new CSharpASTNodeWriter<SynchronizedStatement>(this){
    @Override public void write(    SynchronizedStatement synchronizedStatement){
      matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      writeNode(synchronizedStatement.getExpression());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      copySpaceAndComments();
      writeNode(synchronizedStatement.getBody());
    }
  }
);
}",0.9914845302299176
166842,"/** 
 * Add visitors for class, method, field, and type declarations.
 */
private void addDeclarationWriters(){
  addWriter(CompilationUnit.class,new CompilationUnitWriter(this));
  addWriter(Javadoc.class,new JavadocCommentWriter(this));
  addWriter(TypeDeclaration.class,new TypeDeclarationWriter(this));
  addWriter(EnumDeclaration.class,new EnumDeclarationWriter(this));
  addWriter(MethodDeclaration.class,new MethodDeclarationWriter(this));
  addWriter(FieldDeclaration.class,new FieldDeclarationWriter(this));
  addWriter(SimpleType.class,new SimpleTypeWriter(this));
  addWriter(VariableDeclarationFragment.class,new CSharpASTNodeWriter<VariableDeclarationFragment>(this){
    @Override public void write(    VariableDeclarationFragment variableDeclarationFragment){
      if (variableDeclarationFragment.getExtraDimensions() > 0)       throw sourceNotSupported(""String_Node_Str"");
      writeNode(variableDeclarationFragment.getName());
      Expression initializer=variableDeclarationFragment.getInitializer();
      if (initializer != null) {
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        writeNode(initializer);
      }
    }
  }
);
  addWriter(SingleVariableDeclaration.class,new CSharpASTNodeWriter<SingleVariableDeclaration>(this){
    @Override public void write(    SingleVariableDeclaration singleVariableDeclaration){
      if (singleVariableDeclaration.getExtraDimensions() > 0)       throw sourceNotSupported(""String_Node_Str"");
      List<?> modifiers=singleVariableDeclaration.modifiers();
      ensureModifiersJustFinalOrAnnotations(modifiers);
      skipModifiers(modifiers);
      Type type=singleVariableDeclaration.getType();
      if (singleVariableDeclaration.isVarargs()) {
        write(""String_Node_Str"");
        writeNode(type);
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      }
 else       writeNode(type);
      copySpaceAndComments();
      writeNode(singleVariableDeclaration.getName());
      if (singleVariableDeclaration.getInitializer() != null)       throw new JUniversalException(""String_Node_Str"");
    }
  }
);
  addWriter(ParameterizedType.class,new CSharpASTNodeWriter<ParameterizedType>(this){
    @Override public void write(    ParameterizedType parameterizedType){
      writeNode(parameterizedType.getType());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(parameterizedType.typeArguments());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(WildcardType.class,new CSharpASTNodeWriter<WildcardType>(this){
    @Override public void write(    WildcardType wildcardType){
      ArrayList<WildcardType> wildcardTypes=getContext().getMethodWildcardTypes();
      if (wildcardTypes == null)       throw sourceNotSupported(""String_Node_Str"");
      writeWildcardTypeSyntheticName(wildcardTypes,wildcardType);
      setPositionToEndOfNode(wildcardType);
    }
  }
);
  addWriter(ArrayType.class,new CSharpASTNodeWriter<ArrayType>(this){
    @Override public void write(    ArrayType arrayType){
      writeNode(arrayType.getElementType());
      forEach(arrayType.dimensions(),(      Dimension dimension) -> {
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
      }
);
    }
  }
);
  addWriter(PrimitiveType.class,new CSharpASTNodeWriter<PrimitiveType>(this){
    @Override public void write(    PrimitiveType primitiveType){
      PrimitiveType.Code code=primitiveType.getPrimitiveTypeCode();
      if (code == PrimitiveType.BYTE)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       if (code == PrimitiveType.SHORT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.CHAR)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.INT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.LONG)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.FLOAT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.DOUBLE)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.BOOLEAN)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       if (code == PrimitiveType.VOID)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       throw invalidAST(""String_Node_Str"" + code);
    }
  }
);
  addWriter(ArrayInitializer.class,new CSharpASTNodeWriter<ArrayInitializer>(this){
    @Override public void write(    ArrayInitializer arrayInitializer){
      if (arrayInitializer.getParent() instanceof ArrayInitializer) {
        write(""String_Node_Str"");
      }
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(arrayInitializer.expressions());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
}","/** 
 * Add visitors for class, method, field, and type declarations.
 */
private void addDeclarationWriters(){
  addWriter(CompilationUnit.class,new CompilationUnitWriter(this));
  addWriter(Javadoc.class,new JavadocCommentWriter(this));
  addWriter(TypeDeclaration.class,new TypeDeclarationWriter(this));
  addWriter(EnumDeclaration.class,new EnumDeclarationWriter(this));
  addWriter(MethodDeclaration.class,new MethodDeclarationWriter(this));
  addWriter(FieldDeclaration.class,new FieldDeclarationWriter(this));
  addWriter(SimpleType.class,new SimpleTypeWriter(this));
  addWriter(VariableDeclarationFragment.class,new CSharpASTNodeWriter<VariableDeclarationFragment>(this){
    @Override public void write(    VariableDeclarationFragment variableDeclarationFragment){
      String name=variableDeclarationFragment.getName().getIdentifier();
      if (getContext().getTypeMethodNames().contains(name))       throw sourceNotSupported(""String_Node_Str"" + name + ""String_Node_Str"");
      if (variableDeclarationFragment.getExtraDimensions() > 0)       throw sourceNotSupported(""String_Node_Str"");
      writeNode(variableDeclarationFragment.getName());
      Expression initializer=variableDeclarationFragment.getInitializer();
      if (initializer != null) {
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        writeNode(initializer);
      }
    }
  }
);
  addWriter(SingleVariableDeclaration.class,new CSharpASTNodeWriter<SingleVariableDeclaration>(this){
    @Override public void write(    SingleVariableDeclaration singleVariableDeclaration){
      if (singleVariableDeclaration.getExtraDimensions() > 0)       throw sourceNotSupported(""String_Node_Str"");
      List<?> modifiers=singleVariableDeclaration.modifiers();
      ensureModifiersJustFinalOrAnnotations(modifiers);
      skipModifiers(modifiers);
      Type type=singleVariableDeclaration.getType();
      if (singleVariableDeclaration.isVarargs()) {
        write(""String_Node_Str"");
        writeNode(type);
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      }
 else       writeNode(type);
      copySpaceAndComments();
      writeNode(singleVariableDeclaration.getName());
      if (singleVariableDeclaration.getInitializer() != null)       throw new JUniversalException(""String_Node_Str"");
    }
  }
);
  addWriter(ParameterizedType.class,new CSharpASTNodeWriter<ParameterizedType>(this){
    @Override public void write(    ParameterizedType parameterizedType){
      writeNode(parameterizedType.getType());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(parameterizedType.typeArguments());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(WildcardType.class,new CSharpASTNodeWriter<WildcardType>(this){
    @Override public void write(    WildcardType wildcardType){
      ArrayList<WildcardType> wildcardTypes=getContext().getMethodWildcardTypes();
      if (wildcardTypes == null)       throw sourceNotSupported(""String_Node_Str"");
      writeWildcardTypeSyntheticName(wildcardTypes,wildcardType);
      setPositionToEndOfNode(wildcardType);
    }
  }
);
  addWriter(ArrayType.class,new CSharpASTNodeWriter<ArrayType>(this){
    @Override public void write(    ArrayType arrayType){
      writeNode(arrayType.getElementType());
      forEach(arrayType.dimensions(),(      Dimension dimension) -> {
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
      }
);
    }
  }
);
  addWriter(PrimitiveType.class,new CSharpASTNodeWriter<PrimitiveType>(this){
    @Override public void write(    PrimitiveType primitiveType){
      PrimitiveType.Code code=primitiveType.getPrimitiveTypeCode();
      if (code == PrimitiveType.BYTE)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       if (code == PrimitiveType.SHORT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.CHAR)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.INT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.LONG)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.FLOAT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.DOUBLE)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.BOOLEAN)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       if (code == PrimitiveType.VOID)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       throw invalidAST(""String_Node_Str"" + code);
    }
  }
);
  addWriter(ArrayInitializer.class,new CSharpASTNodeWriter<ArrayInitializer>(this){
    @Override public void write(    ArrayInitializer arrayInitializer){
      if (arrayInitializer.getParent() instanceof ArrayInitializer) {
        write(""String_Node_Str"");
      }
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(arrayInitializer.expressions());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
}",0.9793116972252182
166843,"private void writeUsingStatements(CompilationUnit compilationUnit){
  forEach(compilationUnit.imports(),(  ImportDeclaration importDeclaration) -> {
    Name importDeclarationName=importDeclaration.getName();
    if (isThisName(importDeclarationName,""String_Node_Str"")) {
      setPositionToEndOfNode(importDeclaration);
      return;
    }
    if (importDeclaration.isStatic())     throw sourceNotSupported(""String_Node_Str"");
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"",""String_Node_Str"");
    if (importDeclaration.isOnDemand()) {
      copySpaceAndComments();
      writeNode(importDeclarationName);
    }
 else {
      if (!(importDeclarationName instanceof QualifiedName))       throw sourceNotSupported(""String_Node_Str"");
      QualifiedName qualifiedName=(QualifiedName)importDeclarationName;
      copySpaceAndComments();
      writeNodeAtDifferentPosition(qualifiedName.getName());
      write(""String_Node_Str"");
      writeNode(qualifiedName);
    }
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"");
  }
);
  for (  String extraUsing : getContext().getExtraUsings()) {
    write(""String_Node_Str"");
    write(extraUsing);
    writeln(""String_Node_Str"");
  }
}","private void writeUsingStatements(CompilationUnit compilationUnit){
  Set<String> genericUsings=new HashSet<>();
  Var<Boolean> wroteUsing=new Var<>(false);
  forEach(compilationUnit.imports(),(  ImportDeclaration importDeclaration) -> {
    Name importDeclarationName=importDeclaration.getName();
    if (isThisName(importDeclarationName,""String_Node_Str"")) {
      setPositionToEndOfNode(importDeclaration);
      return;
    }
    if (importDeclaration.isStatic())     throw sourceNotSupported(""String_Node_Str"");
    if (!(importDeclarationName instanceof QualifiedName))     throw sourceNotSupported(""String_Node_Str"");
    QualifiedName qualifiedName=(QualifiedName)importDeclarationName;
    @Nullable String namespaceToImportForGenericClass=null;
    if (isGenericImport(importDeclaration)) {
      namespaceToImportForGenericClass=qualifiedName.getQualifier().getFullyQualifiedName();
      if (genericUsings.contains(namespaceToImportForGenericClass))       return;
    }
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"",""String_Node_Str"");
    copySpaceAndComments();
    if (importDeclaration.isOnDemand()) {
      writeNode(importDeclarationName);
    }
 else {
      if (namespaceToImportForGenericClass != null) {
        write(namespaceToImportForGenericClass);
        genericUsings.add(namespaceToImportForGenericClass);
        setPositionToEndOfNode(qualifiedName);
      }
 else {
        writeNodeAtDifferentPosition(qualifiedName.getName());
        write(""String_Node_Str"");
        writeNode(qualifiedName);
      }
    }
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"");
    wroteUsing.set(true);
  }
);
  if (wroteUsing.get())   writeln();
  for (  String extraUsing : getContext().getExtraUsings()) {
    write(""String_Node_Str"");
    write(extraUsing);
    writeln(""String_Node_Str"");
  }
}",0.5297580117724002
166844,"public static boolean isPrivate(MethodDeclaration methodDeclaration){
  return getAccessModifier(methodDeclaration.modifiers()) == AccessLevel.PRIVATE;
}","public static boolean isPrivate(BodyDeclaration bodyDeclaration){
  return getAccessModifier(bodyDeclaration.modifiers()) == AccessLevel.PRIVATE;
}",0.94
166845,"public static boolean isFinal(MethodDeclaration methodDeclaration){
  return containsFinal(methodDeclaration.modifiers());
}","public static boolean isFinal(BodyDeclaration bodyDeclaration){
  return containsFinal(bodyDeclaration.modifiers());
}",0.9256198347107438
166846,"/** 
 * Add visitors for class, method, field, and type declarations.
 */
private void addDeclarationWriters(){
  addWriter(CompilationUnit.class,new CompilationUnitWriter(this));
  addWriter(TypeDeclaration.class,new TypeDeclarationWriter(this));
  addWriter(EnumDeclaration.class,new EnumDeclarationWriter(this));
  addWriter(MethodDeclaration.class,new MethodDeclarationWriter(this));
  addWriter(FieldDeclaration.class,new FieldDeclarationWriter(this));
  addWriter(VariableDeclarationFragment.class,new CSharpASTNodeWriter<VariableDeclarationFragment>(this){
    @Override public void write(    VariableDeclarationFragment variableDeclarationFragment){
      if (variableDeclarationFragment.getExtraDimensions() > 0)       throw sourceNotSupported(""String_Node_Str"");
      writeNode(variableDeclarationFragment.getName());
      Expression initializer=variableDeclarationFragment.getInitializer();
      if (initializer != null) {
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        writeNode(initializer);
      }
    }
  }
);
  addWriter(SingleVariableDeclaration.class,new CSharpASTNodeWriter<SingleVariableDeclaration>(this){
    @Override public void write(    SingleVariableDeclaration singleVariableDeclaration){
      if (singleVariableDeclaration.getExtraDimensions() > 0)       throw sourceNotSupported(""String_Node_Str"");
      List<?> modifiers=singleVariableDeclaration.modifiers();
      ensureModifiersJustFinalOrAnnotations(modifiers);
      skipModifiers(modifiers);
      Type type=singleVariableDeclaration.getType();
      if (singleVariableDeclaration.isVarargs()) {
        write(""String_Node_Str"");
        writeNode(type);
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      }
 else       writeNode(type);
      copySpaceAndComments();
      SimpleName name=singleVariableDeclaration.getName();
      writeNode(name);
      Expression initializer=singleVariableDeclaration.getInitializer();
      if (initializer != null)       throw new JUniversalException(""String_Node_Str"");
    }
  }
);
  addWriter(SimpleType.class,new CSharpASTNodeWriter<SimpleType>(this){
    @Override public void write(    SimpleType simpleType){
      Name name=simpleType.getName();
      if (isType(simpleType,""String_Node_Str"")) {
        write(""String_Node_Str"");
        setPositionToEndOfNode(name);
      }
 else       if (isType(simpleType,""String_Node_Str"")) {
        write(""String_Node_Str"");
        setPositionToEndOfNode(name);
      }
 else       if (isType(simpleType,""String_Node_Str"")) {
        write(""String_Node_Str"");
        setPositionToEndOfNode(name);
      }
 else       if (name instanceof QualifiedName) {
        QualifiedName qualifiedName=(QualifiedName)name;
        write(getNamespaceNameForPackageName(qualifiedName.getQualifier()));
        setPositionToEndOfNode(qualifiedName.getQualifier());
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
        matchAndWrite(qualifiedName.getName().getIdentifier());
      }
 else {
        SimpleName simpleName=(SimpleName)name;
        matchAndWrite(simpleName.getIdentifier());
      }
    }
  }
);
  addWriter(ParameterizedType.class,new CSharpASTNodeWriter<ParameterizedType>(this){
    @Override public void write(    ParameterizedType parameterizedType){
      writeNode(parameterizedType.getType());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(parameterizedType.typeArguments());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(WildcardType.class,new CSharpASTNodeWriter<WildcardType>(this){
    @Override public void write(    WildcardType wildcardType){
      ArrayList<WildcardType> wildcardTypes=getContext().getMethodWildcardTypes();
      if (wildcardTypes == null)       throw sourceNotSupported(""String_Node_Str"");
      writeWildcardTypeSyntheticName(wildcardTypes,wildcardType);
      setPositionToEndOfNode(wildcardType);
    }
  }
);
  addWriter(ArrayType.class,new CSharpASTNodeWriter<ArrayType>(this){
    @Override public void write(    ArrayType arrayType){
      writeNode(arrayType.getElementType());
      for (      Object dimensionObject : arrayType.dimensions()) {
        Dimension dimension=(Dimension)dimensionObject;
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
      }
    }
  }
);
  addWriter(PrimitiveType.class,new CSharpASTNodeWriter<PrimitiveType>(this){
    @Override public void write(    PrimitiveType primitiveType){
      PrimitiveType.Code code=primitiveType.getPrimitiveTypeCode();
      if (code == PrimitiveType.BYTE)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       if (code == PrimitiveType.SHORT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.CHAR)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.INT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.LONG)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.FLOAT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.DOUBLE)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.BOOLEAN)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       if (code == PrimitiveType.VOID)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       throw invalidAST(""String_Node_Str"" + code);
    }
  }
);
  addWriter(ArrayInitializer.class,new CSharpASTNodeWriter<ArrayInitializer>(this){
    @Override public void write(    ArrayInitializer arrayInitializer){
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(arrayInitializer.expressions());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
}","/** 
 * Add visitors for class, method, field, and type declarations.
 */
private void addDeclarationWriters(){
  addWriter(CompilationUnit.class,new CompilationUnitWriter(this));
  addWriter(TypeDeclaration.class,new TypeDeclarationWriter(this));
  addWriter(EnumDeclaration.class,new EnumDeclarationWriter(this));
  addWriter(MethodDeclaration.class,new MethodDeclarationWriter(this));
  addWriter(FieldDeclaration.class,new FieldDeclarationWriter(this));
  addWriter(VariableDeclarationFragment.class,new CSharpASTNodeWriter<VariableDeclarationFragment>(this){
    @Override public void write(    VariableDeclarationFragment variableDeclarationFragment){
      if (variableDeclarationFragment.getExtraDimensions() > 0)       throw sourceNotSupported(""String_Node_Str"");
      writeNode(variableDeclarationFragment.getName());
      Expression initializer=variableDeclarationFragment.getInitializer();
      if (initializer != null) {
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        writeNode(initializer);
      }
    }
  }
);
  addWriter(SingleVariableDeclaration.class,new CSharpASTNodeWriter<SingleVariableDeclaration>(this){
    @Override public void write(    SingleVariableDeclaration singleVariableDeclaration){
      if (singleVariableDeclaration.getExtraDimensions() > 0)       throw sourceNotSupported(""String_Node_Str"");
      List<?> modifiers=singleVariableDeclaration.modifiers();
      ensureModifiersJustFinalOrAnnotations(modifiers);
      skipModifiers(modifiers);
      Type type=singleVariableDeclaration.getType();
      if (singleVariableDeclaration.isVarargs()) {
        write(""String_Node_Str"");
        writeNode(type);
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
      }
 else       writeNode(type);
      copySpaceAndComments();
      SimpleName name=singleVariableDeclaration.getName();
      writeNode(name);
      Expression initializer=singleVariableDeclaration.getInitializer();
      if (initializer != null)       throw new JUniversalException(""String_Node_Str"");
    }
  }
);
  addWriter(SimpleType.class,new CSharpASTNodeWriter<SimpleType>(this){
    @Override public void write(    SimpleType simpleType){
      Name name=simpleType.getName();
      if (isType(simpleType,""String_Node_Str"")) {
        write(""String_Node_Str"");
        setPositionToEndOfNode(name);
      }
 else       if (isType(simpleType,""String_Node_Str"")) {
        write(""String_Node_Str"");
        setPositionToEndOfNode(name);
      }
 else       if (isType(simpleType,""String_Node_Str"")) {
        write(""String_Node_Str"");
        setPositionToEndOfNode(name);
      }
 else       if (name instanceof QualifiedName) {
        QualifiedName qualifiedName=(QualifiedName)name;
        write(getNamespaceNameForPackageName(qualifiedName.getQualifier()));
        setPositionToEndOfNode(qualifiedName.getQualifier());
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"",""String_Node_Str"");
        matchAndWrite(qualifiedName.getName().getIdentifier());
      }
 else {
        SimpleName simpleName=(SimpleName)name;
        matchAndWrite(simpleName.getIdentifier());
      }
    }
  }
);
  addWriter(ParameterizedType.class,new CSharpASTNodeWriter<ParameterizedType>(this){
    @Override public void write(    ParameterizedType parameterizedType){
      writeNode(parameterizedType.getType());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(parameterizedType.typeArguments());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
  addWriter(WildcardType.class,new CSharpASTNodeWriter<WildcardType>(this){
    @Override public void write(    WildcardType wildcardType){
      ArrayList<WildcardType> wildcardTypes=getContext().getMethodWildcardTypes();
      if (wildcardTypes == null)       throw sourceNotSupported(""String_Node_Str"");
      writeWildcardTypeSyntheticName(wildcardTypes,wildcardType);
      setPositionToEndOfNode(wildcardType);
    }
  }
);
  addWriter(ArrayType.class,new CSharpASTNodeWriter<ArrayType>(this){
    @Override public void write(    ArrayType arrayType){
      writeNode(arrayType.getElementType());
      for (      Object dimensionObject : arrayType.dimensions()) {
        Dimension dimension=(Dimension)dimensionObject;
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
        copySpaceAndComments();
        matchAndWrite(""String_Node_Str"");
      }
    }
  }
);
  addWriter(PrimitiveType.class,new CSharpASTNodeWriter<PrimitiveType>(this){
    @Override public void write(    PrimitiveType primitiveType){
      PrimitiveType.Code code=primitiveType.getPrimitiveTypeCode();
      if (code == PrimitiveType.BYTE)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       if (code == PrimitiveType.SHORT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.CHAR)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.INT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.LONG)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.FLOAT)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.DOUBLE)       matchAndWrite(""String_Node_Str"");
 else       if (code == PrimitiveType.BOOLEAN)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       if (code == PrimitiveType.VOID)       matchAndWrite(""String_Node_Str"",""String_Node_Str"");
 else       throw invalidAST(""String_Node_Str"" + code);
    }
  }
);
  addWriter(ArrayInitializer.class,new CSharpASTNodeWriter<ArrayInitializer>(this){
    @Override public void write(    ArrayInitializer arrayInitializer){
      if (arrayInitializer.getParent() instanceof ArrayInitializer) {
        context.write(""String_Node_Str"");
      }
      matchAndWrite(""String_Node_Str"");
      writeCommaDelimitedNodes(arrayInitializer.expressions());
      copySpaceAndComments();
      matchAndWrite(""String_Node_Str"");
    }
  }
);
}",0.99009083402147
166847,"public void write(CompilationUnit compilationUnit){
  copySpaceAndComments();
  @Nullable PackageDeclaration packageDeclaration=compilationUnit.getPackage();
  if (packageDeclaration != null) {
    setPositionToEndOfNodeSpaceAndComments(packageDeclaration);
  }
  for (  Object importDeclarationObject : compilationUnit.imports()) {
    ImportDeclaration importDeclaration=(ImportDeclaration)importDeclarationObject;
    Name importDeclarationName=importDeclaration.getName();
    if (importDeclaration.isStatic())     throw sourceNotSupported(""String_Node_Str"");
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"",""String_Node_Str"");
    if (importDeclaration.isOnDemand()) {
      copySpaceAndComments();
      writeNode(importDeclarationName);
    }
 else {
      if (!(importDeclarationName instanceof QualifiedName))       throw sourceNotSupported(""String_Node_Str"");
      QualifiedName qualifiedName=(QualifiedName)importDeclarationName;
      copySpaceAndComments();
      writeNodeAtDifferentPosition(qualifiedName.getName());
      write(""String_Node_Str"");
      writeNode(qualifiedName);
    }
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"");
  }
  copySpaceAndComments();
  int previousIndent=0;
  if (packageDeclaration != null) {
    int previousPosition=getPosition();
    setPositionToStartOfNode(packageDeclaration);
    matchAndWrite(""String_Node_Str"",""String_Node_Str"");
    copySpaceAndComments();
    writeNode(packageDeclaration.getName());
    write(""String_Node_Str"");
    previousIndent=getTargetWriter().incrementAdditionalIndentation(getPreferredIndent());
    writeln();
    setPosition(previousPosition);
  }
  AbstractTypeDeclaration firstTypeDeclaration=(AbstractTypeDeclaration)compilationUnit.types().get(0);
  writeNode(firstTypeDeclaration);
  copySpaceAndComments();
  if (packageDeclaration != null) {
    getTargetWriter().setAdditionalIndentation(previousIndent);
    writeln();
    writeln(""String_Node_Str"");
  }
}","public void write(CompilationUnit compilationUnit){
  copySpaceAndComments();
  @Nullable PackageDeclaration packageDeclaration=compilationUnit.getPackage();
  if (packageDeclaration != null) {
    setPositionToEndOfNodeSpaceAndComments(packageDeclaration);
  }
  for (  Object importDeclarationObject : compilationUnit.imports()) {
    ImportDeclaration importDeclaration=(ImportDeclaration)importDeclarationObject;
    Name importDeclarationName=importDeclaration.getName();
    if (isThisName(importDeclarationName,""String_Node_Str"")) {
      setPositionToEndOfNode(importDeclaration);
      continue;
    }
    if (importDeclaration.isStatic())     throw sourceNotSupported(""String_Node_Str"");
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"",""String_Node_Str"");
    if (importDeclaration.isOnDemand()) {
      copySpaceAndComments();
      writeNode(importDeclarationName);
    }
 else {
      if (!(importDeclarationName instanceof QualifiedName))       throw sourceNotSupported(""String_Node_Str"");
      QualifiedName qualifiedName=(QualifiedName)importDeclarationName;
      copySpaceAndComments();
      writeNodeAtDifferentPosition(qualifiedName.getName());
      write(""String_Node_Str"");
      writeNode(qualifiedName);
    }
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"");
  }
  copySpaceAndComments();
  int previousIndent=0;
  if (packageDeclaration != null) {
    int previousPosition=getPosition();
    setPositionToStartOfNode(packageDeclaration);
    matchAndWrite(""String_Node_Str"",""String_Node_Str"");
    copySpaceAndComments();
    writeNode(packageDeclaration.getName());
    write(""String_Node_Str"");
    previousIndent=getTargetWriter().incrementAdditionalIndentation(getPreferredIndent());
    writeln();
    setPosition(previousPosition);
  }
  AbstractTypeDeclaration firstTypeDeclaration=(AbstractTypeDeclaration)compilationUnit.types().get(0);
  writeNode(firstTypeDeclaration);
  copySpaceAndComments();
  if (packageDeclaration != null) {
    getTargetWriter().setAdditionalIndentation(previousIndent);
    writeln();
    writeln(""String_Node_Str"");
  }
}",0.9673648319532392
166848,"@Override public void write(FieldDeclaration fieldDeclaration){
  List<?> modifiers=fieldDeclaration.modifiers();
  boolean[] wroteModifier=new boolean[1];
  writeAccessModifier(modifiers);
  skipModifiers(modifiers);
  skipSpaceAndComments();
  if (wroteModifier[0])   write(""String_Node_Str"");
  writeNode(fieldDeclaration.getType());
  writeCommaDelimitedNodes(fieldDeclaration.fragments());
  copySpaceAndComments();
  matchAndWrite(""String_Node_Str"");
}","@Override public void write(FieldDeclaration fieldDeclaration){
  boolean isFinal=isFinal(fieldDeclaration);
  boolean isStatic=isStatic(fieldDeclaration);
  List<?> modifiers=fieldDeclaration.modifiers();
  writeAccessModifier(modifiers);
  if (isStatic)   writeStaticModifier();
  if (isFinal)   writeReadonlyModifier();
  skipModifiers(modifiers);
  skipSpaceAndComments();
  writeNode(fieldDeclaration.getType());
  writeCommaDelimitedNodes(fieldDeclaration.fragments());
  copySpaceAndComments();
  matchAndWrite(""String_Node_Str"");
}",0.3671013039117352
166849,"@Override public void write(MethodDeclaration methodDeclaration){
  TypeDeclaration typeDeclaration=getContext().getTypeDeclaration();
  boolean isInterface=typeDeclaration.isInterface();
  boolean classIsFinal=isFinal(typeDeclaration);
  boolean methodIsFinal=isFinal(methodDeclaration);
  boolean methodIsOverride=isOverride(methodDeclaration);
  boolean methodIsStatic=isStatic(methodDeclaration);
  boolean methodIsConstructor=isConstructor(methodDeclaration);
  @Nullable Type returnType=null;
  if (!methodDeclaration.isConstructor())   returnType=methodDeclaration.getReturnType2();
  List<?> modifiers=methodDeclaration.modifiers();
  if (!isInterface)   writeAccessModifier(modifiers);
  if (!classIsFinal && !isInterface && !methodIsFinal&& !methodIsOverride&& !methodIsConstructor&& !isPrivate(methodDeclaration)&& !methodIsStatic)   writeModifier(""String_Node_Str"");
  if (methodIsOverride) {
    writeOverrideModifier();
    if (methodIsFinal)     writeSealedModifier();
  }
  if (methodIsStatic)   writeStaticModifier();
  setPositionToStartOfNode(returnType != null ? returnType : methodDeclaration.getName());
  if (returnType != null)   writeNode(returnType);
  copySpaceAndComments();
  String mappedMethodName;
  if (isMethod(methodDeclaration,""String_Node_Str"",""String_Node_Str""))   mappedMethodName=""String_Node_Str"";
 else   if (isMethod(methodDeclaration,""String_Node_Str""))   mappedMethodName=""String_Node_Str"";
 else   if (isMethod(methodDeclaration,""String_Node_Str""))   mappedMethodName=""String_Node_Str"";
 else   mappedMethodName=methodDeclaration.getName().getIdentifier();
  matchAndWrite(methodDeclaration.getName().getIdentifier(),mappedMethodName);
  ArrayList<WildcardType> wildcardTypes=new ArrayList<>();
  for (  Object parameterObject : methodDeclaration.parameters()) {
    SingleVariableDeclaration parameter=(SingleVariableDeclaration)parameterObject;
    addWildcardTypes(parameter.getType(),wildcardTypes);
  }
  writeTypeParameters(methodDeclaration,wildcardTypes);
  copySpaceAndComments();
  getContext().setMethodWildcardTypes(wildcardTypes);
  writeParameterList(methodDeclaration);
  getContext().setMethodWildcardTypes(null);
  writeTypeConstraints(methodDeclaration,wildcardTypes);
  writeThrownExceptions(methodDeclaration);
  if (methodDeclaration.isConstructor())   writeOtherConstructorInvocation(methodDeclaration);
  Block body=methodDeclaration.getBody();
  if (body != null) {
    writeBody(body);
  }
 else {
    if (!isInterface)     write(""String_Node_Str"");
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"");
  }
}","@Override public void write(MethodDeclaration methodDeclaration){
  TypeDeclaration typeDeclaration=getContext().getTypeDeclaration();
  boolean isInterface=typeDeclaration.isInterface();
  boolean classIsFinal=isFinal(typeDeclaration);
  boolean methodIsFinal=isFinal(methodDeclaration);
  boolean methodIsOverride=isOverride(methodDeclaration);
  boolean methodIsStatic=isStatic(methodDeclaration);
  boolean methodIsConstructor=isConstructor(methodDeclaration);
  @Nullable Type returnType=null;
  if (!methodDeclaration.isConstructor())   returnType=methodDeclaration.getReturnType2();
  List<?> modifiers=methodDeclaration.modifiers();
  if (!isInterface)   writeAccessModifier(modifiers);
  if (!classIsFinal && !isInterface && !methodIsFinal&& !methodIsOverride&& !methodIsConstructor&& !isPrivate(methodDeclaration)&& !methodIsStatic)   writeModifier(""String_Node_Str"");
  if (methodIsOverride) {
    writeOverrideModifier();
    if (methodIsFinal)     writeSealedModifier();
  }
  if (methodIsStatic)   writeStaticModifier();
  setPositionToStartOfNode(returnType != null ? returnType : methodDeclaration.getName());
  if (returnType != null)   writeNode(returnType);
  copySpaceAndComments();
  String mappedMethodName;
  if (isThisMethod(methodDeclaration,""String_Node_Str"",""String_Node_Str""))   mappedMethodName=""String_Node_Str"";
 else   if (isThisMethod(methodDeclaration,""String_Node_Str""))   mappedMethodName=""String_Node_Str"";
 else   if (isThisMethod(methodDeclaration,""String_Node_Str""))   mappedMethodName=""String_Node_Str"";
 else   mappedMethodName=methodDeclaration.getName().getIdentifier();
  matchAndWrite(methodDeclaration.getName().getIdentifier(),mappedMethodName);
  ArrayList<WildcardType> wildcardTypes=new ArrayList<>();
  for (  Object parameterObject : methodDeclaration.parameters()) {
    SingleVariableDeclaration parameter=(SingleVariableDeclaration)parameterObject;
    addWildcardTypes(parameter.getType(),wildcardTypes);
  }
  writeTypeParameters(methodDeclaration,wildcardTypes);
  copySpaceAndComments();
  getContext().setMethodWildcardTypes(wildcardTypes);
  writeParameterList(methodDeclaration);
  getContext().setMethodWildcardTypes(null);
  writeTypeConstraints(methodDeclaration,wildcardTypes);
  writeThrownExceptions(methodDeclaration);
  if (methodDeclaration.isConstructor())   writeOtherConstructorInvocation(methodDeclaration);
  Block body=methodDeclaration.getBody();
  if (body != null) {
    writeBody(body);
  }
 else {
    if (!isInterface)     write(""String_Node_Str"");
    copySpaceAndComments();
    matchAndWrite(""String_Node_Str"");
  }
}",0.9976905311778292
166850,"public boolean isLookingAtObject(Object3D target,float maxAngle){
  Quaternion o=getCurrentCamera().getOrientation().invertAndCreate();
  Vector3 forward=new Vector3(0,0,1);
  forward.transform(o);
  Vector3 pos=getCurrentCamera().getPosition().clone();
  pos.subtract(target.getPosition());
  pos.normalize();
  return pos.angle(forward) < maxAngle;
}","public boolean isLookingAtObject(Object3D target,float maxAngle){
  mHeadViewQuaternion.fromMatrix(mHeadViewMatrix);
  mHeadViewQuaternion.inverse();
  mForwardVec.setAll(0,0,1);
  mForwardVec.transform(mHeadViewQuaternion);
  mHeadTranslation.setAll(mHeadViewMatrix.getTranslation());
  mHeadTranslation.subtract(target.getPosition());
  mHeadTranslation.normalize();
  return mHeadTranslation.angle(mForwardVec) < maxAngle;
}",0.3902439024390244
166851,"@Override public void onDrawEye(Eye eye){
  getCurrentCamera().updatePerspective(eye.getFov().getLeft(),eye.getFov().getRight(),eye.getFov().getBottom(),eye.getFov().getTop());
  mCurrentEyeMatrix.setAll(eye.getEyeView());
  mCurrentEyeOrientation.fromMatrix(mCurrentEyeMatrix);
  getCurrentCamera().setOrientation(mCurrentEyeOrientation);
  getCurrentCamera().setPosition(mCameraPosition);
  getCurrentCamera().getPosition().add(mCurrentEyeMatrix.getTranslation());
  super.onRenderFrame(null);
}","@Override public void onDrawEye(Eye eye){
  getCurrentCamera().updatePerspective(eye.getFov().getLeft(),eye.getFov().getRight(),eye.getFov().getBottom(),eye.getFov().getTop());
  mCurrentEyeMatrix.setAll(eye.getEyeView());
  mCurrentEyeOrientation.fromMatrix(mCurrentEyeMatrix);
  getCurrentCamera().setOrientation(mCurrentEyeOrientation);
  getCurrentCamera().setPosition(mCameraPosition);
  getCurrentCamera().getPosition().add(mCurrentEyeMatrix.getTranslation().inverse());
  super.onRenderFrame(null);
}",0.9900398406374502
166852,"public RajawaliVRRenderer(Context context){
  super(context);
  mCurrentEyeMatrix=new Matrix4();
  mHeadViewMatrix=new Matrix4();
  mLookingAtMatrix=new Matrix4();
  mCurrentEyeOrientation=new Quaternion();
  mHeadView=new float[16];
  mCameraPosition=new Vector3();
}","public RajawaliVRRenderer(Context context){
  super(context);
  mCurrentEyeMatrix=new Matrix4();
  mHeadViewMatrix=new Matrix4();
  mLookingAtMatrix=new Matrix4();
  mCurrentEyeOrientation=new Quaternion();
  mHeadViewQuaternion=new Quaternion();
  mHeadView=new float[16];
  mCameraPosition=new Vector3();
  mForwardVec=new Vector3();
  mHeadTranslation=new Vector3();
}",0.838810641627543
166853,"@Override public void onNewFrame(HeadTransform headTransform){
  headTransform.getHeadView(mHeadView,0);
}","@Override public void onNewFrame(HeadTransform headTransform){
  headTransform.getHeadView(mHeadView,0);
  mHeadViewMatrix.setAll(mHeadView);
}",0.8514056224899599
166854,"public void testParseFromIntentExtras(){
  Track track=TestTrackFactory.newTrackWithRandomData();
  Intent intent=new Intent();
  intent.putExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME,track.getPlayerPackageName());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_TRACK,track.getTrack());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_ARTIST,track.getArtist());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_ALBUM,track.getAlbum());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_DURATION,track.getDurationInMillis());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_TIMESTAMP,track.getTimestamp());
  Track parsedTrack=CommonMusicAppReceiver.parseFromIntentExtras(intent);
  assertEquals(track.getPlayerPackageName(),parsedTrack.getPlayerPackageName());
  assertEquals(track.getTrack(),parsedTrack.getTrack());
  assertEquals(track.getArtist(),parsedTrack.getArtist());
  assertEquals(track.getAlbum(),parsedTrack.getAlbum());
  assertEquals(track.getDurationInMillis(),parsedTrack.getDurationInMillis());
  assertEquals(track.getTimestamp(),parsedTrack.getTimestamp());
}","public void testParseFromIntentExtras(){
  Track track=TestTrackFactory.newTrackWithRandomData();
  Intent intent=new Intent();
  intent.putExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME,track.getPlayerPackageName());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_TRACK,track.getTrack());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_ARTIST,track.getArtist());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_ALBUM,track.getAlbum());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_DURATION,track.getDuration());
  intent.putExtra(CommonMusicAppReceiver.EXTRA_TIMESTAMP,track.getTimestamp());
  Track parsedTrack=CommonMusicAppReceiver.parseFromIntentExtras(intent);
  assertEquals(track.getPlayerPackageName(),parsedTrack.getPlayerPackageName());
  assertEquals(track.getTrack(),parsedTrack.getTrack());
  assertEquals(track.getArtist(),parsedTrack.getArtist());
  assertEquals(track.getAlbum(),parsedTrack.getAlbum());
  assertEquals(track.getDuration(),parsedTrack.getDuration());
  assertEquals(track.getTimestamp(),parsedTrack.getTimestamp());
}",0.988795518207283
166855,"public LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track trackModel){
  artist=trackModel.getArtist();
  track=trackModel.getTrack();
  timeStamp=trackModel.getTimestamp() / 1000;
  album=trackModel.getAlbum();
  duration=(int)(trackModel.getDurationInMillis() / 1000);
}","public LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track trackModel){
  artist=trackModel.getArtist();
  track=trackModel.getTrack();
  timeStamp=trackModel.getTimestamp() / 1000;
  album=trackModel.getAlbum();
  duration=(int)(trackModel.getDuration() / 1000);
}",0.9858657243816256
166856,"private void handleTrack(final Intent intent){
  if (intent == null || !WAILSettings.isEnabled(this)) {
    Loggi.w(""String_Node_Str"");
    return;
  }
  final String player=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME);
  AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      Loggi.i(""String_Node_Str"" + intent);
      mayBeCleanDB();
      final String extraAction=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_ACTION);
      if (extraAction == null || extraAction.lastIndexOf('.') == -1) {
        Loggi.e(""String_Node_Str"");
        return null;
      }
      final boolean isCurrentTrackPlaying=intent.getBooleanExtra(CommonMusicAppReceiver.EXTRA_PLAYING,false);
      final Track currentTrack=CommonMusicAppReceiver.parseFromIntentExtras(intent);
      if (isCurrentTrackPlaying) {
        WAILSettings.setNowScrobblingTrack(getApplicationContext(),currentTrack);
        String applicationLabel=null;
        try {
          PackageManager packageManager=getApplication().getPackageManager();
          ApplicationInfo applicationInfo=packageManager.getApplicationInfo(player,0);
          applicationLabel=packageManager.getApplicationLabel(applicationInfo).toString();
        }
 catch (        PackageManager.NameNotFoundException e) {
          Loggi.w(""String_Node_Str"" + player);
        }
        WAILSettings.setNowScrobblingPlayerLabel(getApplicationContext(),applicationLabel);
        WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),player);
        StatusBarNotificationsManager.getInstance(getApplicationContext()).showTrackScrobblingStatusBarNotification(currentTrack);
        updateNowPlaying(currentTrack);
      }
 else {
        StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackScrobblingStatusBarNotification();
        WAILSettings.setNowScrobblingTrack(getApplicationContext(),null);
        WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),null);
      }
      LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(new Intent(TracksDBHelper.INTENT_TRACKS_CHANGED));
      final LastCapturedTrackInfo mLastCapturedTrackInfo=WAILSettings.getLastCapturedTrackInfo(getApplicationContext());
      if (mLastCapturedTrackInfo == null) {
      }
 else {
        final long trackPlayingDurationInMillis=currentTrack.getTimestamp() - mLastCapturedTrackInfo.getTrack().getTimestamp();
        final long minTrackDurationInMillis=WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000;
        if ((!isCurrentTrackPlaying && mLastCapturedTrackInfo.isPlaying()) || mLastCapturedTrackInfo.isPlaying()) {
          Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ (WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000));
          long duration=mLastCapturedTrackInfo.getTrack().getDurationInMillis();
          if (duration != -1) {
            final int trackDurationInPercents=(int)(100 * trackPlayingDurationInMillis / (duration + 2500));
            int minTrackDurationInPercents=WAILSettings.getMinTrackDurationInPercents(getApplicationContext());
            if (trackDurationInPercents >= minTrackDurationInPercents) {
              Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ trackDurationInPercents+ ""String_Node_Str""+ minTrackDurationInPercents);
              mLastCapturedTrackInfo.getTrack().setStateTimestamp(System.currentTimeMillis());
              addTrackToDB(mLastCapturedTrackInfo.getTrack());
            }
 else {
              Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ trackDurationInPercents+ ""String_Node_Str""+ minTrackDurationInPercents);
              SoundNotificationsManager.getInstance(getApplicationContext()).playTrackSkippedSound();
            }
          }
 else {
            Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ minTrackDurationInMillis+ ""String_Node_Str"");
          }
        }
 else {
          Loggi.w(""String_Node_Str"");
        }
      }
      WAILSettings.setLastCapturedTrackInfo(getApplicationContext(),new LastCapturedTrackInfo(currentTrack,isCurrentTrackPlaying));
      return null;
    }
    @Override protected void onPostExecute(    Void aVoid){
      scrobblePendingTracks(false);
    }
  }
);
}","private void handleTrack(final Intent intent){
  if (intent == null || !WAILSettings.isEnabled(this)) {
    Loggi.w(""String_Node_Str"");
    return;
  }
  final String player=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME);
  AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      Loggi.i(""String_Node_Str"" + intent);
      mayBeCleanDB();
      final String extraAction=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_ACTION);
      if (extraAction == null || extraAction.lastIndexOf('.') == -1) {
        Loggi.e(""String_Node_Str"");
        return null;
      }
      final boolean isCurrentTrackPlaying=intent.getBooleanExtra(CommonMusicAppReceiver.EXTRA_PLAYING,false);
      final Track currentTrack=CommonMusicAppReceiver.parseFromIntentExtras(intent);
      if (isCurrentTrackPlaying) {
        WAILSettings.setNowScrobblingTrack(getApplicationContext(),currentTrack);
        String applicationLabel=null;
        try {
          PackageManager packageManager=getApplication().getPackageManager();
          ApplicationInfo applicationInfo=packageManager.getApplicationInfo(player,0);
          applicationLabel=packageManager.getApplicationLabel(applicationInfo).toString();
        }
 catch (        PackageManager.NameNotFoundException e) {
          Loggi.w(""String_Node_Str"" + player);
        }
        WAILSettings.setNowScrobblingPlayerLabel(getApplicationContext(),applicationLabel);
        WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),player);
        StatusBarNotificationsManager.getInstance(getApplicationContext()).showTrackScrobblingStatusBarNotification(currentTrack);
        updateNowPlaying(currentTrack);
      }
 else {
        StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackScrobblingStatusBarNotification();
        WAILSettings.setNowScrobblingTrack(getApplicationContext(),null);
        WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),null);
      }
      LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(new Intent(TracksDBHelper.INTENT_TRACKS_CHANGED));
      final LastCapturedTrackInfo mLastCapturedTrackInfo=WAILSettings.getLastCapturedTrackInfo(getApplicationContext());
      if (mLastCapturedTrackInfo != null) {
        final long trackPlayingDurationInMillis=currentTrack.getTimestamp() - mLastCapturedTrackInfo.getTrack().getTimestamp();
        final long minTrackDurationInMillis=WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000;
        final int minTrackDurationInPercents=WAILSettings.getMinTrackDurationInPercents(getApplicationContext());
        if ((!isCurrentTrackPlaying && mLastCapturedTrackInfo.isPlaying()) || mLastCapturedTrackInfo.isPlaying()) {
          long duration=mLastCapturedTrackInfo.getTrack().getDuration();
          if (duration != -1) {
            final int trackDurationInPercents=(int)(100 * trackPlayingDurationInMillis / (duration + 2500));
            if (trackDurationInPercents >= minTrackDurationInPercents && trackPlayingDurationInMillis >= minTrackDurationInMillis) {
              scrobble(mLastCapturedTrackInfo,trackPlayingDurationInMillis,minTrackDurationInMillis,duration,minTrackDurationInPercents);
            }
 else {
              skip(trackPlayingDurationInMillis,minTrackDurationInMillis,minTrackDurationInPercents,duration);
            }
          }
 else           if (trackPlayingDurationInMillis >= minTrackDurationInMillis) {
            Loggi.d(""String_Node_Str"");
            scrobble(mLastCapturedTrackInfo,trackPlayingDurationInMillis,minTrackDurationInMillis,duration,minTrackDurationInPercents);
          }
 else {
            skip(trackPlayingDurationInMillis,minTrackDurationInMillis,minTrackDurationInPercents,duration);
          }
        }
 else {
          Loggi.w(""String_Node_Str"");
        }
      }
      WAILSettings.setLastCapturedTrackInfo(getApplicationContext(),new LastCapturedTrackInfo(currentTrack,isCurrentTrackPlaying));
      return null;
    }
    @Override protected void onPostExecute(    Void aVoid){
      scrobblePendingTracks(false);
    }
    private void scrobble(    LastCapturedTrackInfo mLastCapturedTrackInfo,    long trackPlayingDurationInMillis,    long minTrackDurationInMillis,    long duration,    int minTrackDurationInPercents){
      Loggi.i(String.format(""String_Node_Str"" + ""String_Node_Str"",duration,trackPlayingDurationInMillis,minTrackDurationInMillis,minTrackDurationInPercents));
      addTrackToDB(mLastCapturedTrackInfo.getTrack());
      SoundNotificationsManager.getInstance(getApplicationContext()).playTrackMarkedAsScrobbledSound();
    }
    private void skip(    long trackPlayingDurationInMillis,    long minTrackDurationInMillis,    int minTrackDurationInPercents,    long duration){
      Loggi.i(String.format(""String_Node_Str"" + ""String_Node_Str"",duration,trackPlayingDurationInMillis,minTrackDurationInMillis,minTrackDurationInPercents));
      SoundNotificationsManager.getInstance(getApplicationContext()).playTrackSkippedSound();
    }
  }
);
}",0.7164830596549574
166857,"public String toJSON(){
  final JSONObject json=new JSONObject();
  try {
    json.put(""String_Node_Str"",track.getPlayerPackageName());
    json.put(""String_Node_Str"",track.getTrack());
    json.put(""String_Node_Str"",track.getArtist());
    json.put(""String_Node_Str"",track.getAlbum());
    json.put(""String_Node_Str"",track.getDurationInMillis());
    json.put(""String_Node_Str"",track.getTimestamp());
    json.put(""String_Node_Str"",track.getState());
    json.put(""String_Node_Str"",track.getStateTimestamp());
    json.put(""String_Node_Str"",isPlaying);
  }
 catch (  Exception e) {
    return null;
  }
  return json.toString();
}","public String toJSON(){
  final JSONObject json=new JSONObject();
  try {
    json.put(""String_Node_Str"",track.getPlayerPackageName());
    json.put(""String_Node_Str"",track.getTrack());
    json.put(""String_Node_Str"",track.getArtist());
    json.put(""String_Node_Str"",track.getAlbum());
    json.put(""String_Node_Str"",track.getDuration());
    json.put(""String_Node_Str"",track.getTimestamp());
    json.put(""String_Node_Str"",track.getState());
    json.put(""String_Node_Str"",track.getStateTimestamp());
    json.put(""String_Node_Str"",isPlaying);
  }
 catch (  Exception e) {
    return null;
  }
  return json.toString();
}",0.5502392344497608
166858,"public static ContentValues asContentValues(Track track){
  final ContentValues contentValues=new ContentValues();
  contentValues.put(TableInfo.COLUMN_PLAYER_PACKAGE_NAME,track.getPlayerPackageName());
  contentValues.put(TableInfo.COLUMN_TRACK,track.getTrack());
  contentValues.put(TableInfo.COLUMN_ARTIST,track.getArtist());
  contentValues.put(TableInfo.COLUMN_ALBUM,track.getAlbum());
  contentValues.put(TableInfo.COLUMN_DURATION,track.getDurationInMillis());
  contentValues.put(TableInfo.COLUMN_TIMESTAMP,track.getTimestamp());
  contentValues.put(TableInfo.COLUMN_STATE,track.getState());
  contentValues.put(TableInfo.COLUMN_STATE_TIMESTAMP,track.getStateTimestamp());
  return contentValues;
}","public static ContentValues asContentValues(Track track){
  final ContentValues contentValues=new ContentValues();
  contentValues.put(TableInfo.COLUMN_PLAYER_PACKAGE_NAME,track.getPlayerPackageName());
  contentValues.put(TableInfo.COLUMN_TRACK,track.getTrack());
  contentValues.put(TableInfo.COLUMN_ARTIST,track.getArtist());
  contentValues.put(TableInfo.COLUMN_ALBUM,track.getAlbum());
  contentValues.put(TableInfo.COLUMN_DURATION,track.getDuration());
  contentValues.put(TableInfo.COLUMN_TIMESTAMP,track.getTimestamp());
  contentValues.put(TableInfo.COLUMN_STATE,track.getState());
  contentValues.put(TableInfo.COLUMN_STATE_TIMESTAMP,track.getStateTimestamp());
  return contentValues;
}",0.9942938659058488
166859,"/** 
 * Checks equality only of some Track's fields
 * @param track to compare
 * @return true if special fields are equal, false otherwise
 */
public boolean specialEquals(Track track){
  if (track == null)   return false;
  if (!StringUtil.equals(getPlayerPackageName(),track.getPlayerPackageName())) {
    return false;
  }
  if (!StringUtil.equals(getTrack(),track.getTrack())) {
    return false;
  }
  if (!StringUtil.equals(getAlbum(),track.getAlbum())) {
    return false;
  }
  if (duration != track.getDurationInMillis()) {
    return false;
  }
  return true;
}","/** 
 * Checks equality only of some Track's fields
 * @param track to compare
 * @return true if special fields are equal, false otherwise
 */
public boolean specialEquals(Track track){
  if (track == null)   return false;
  if (!StringUtil.equals(getPlayerPackageName(),track.getPlayerPackageName())) {
    return false;
  }
  if (!StringUtil.equals(getTrack(),track.getTrack())) {
    return false;
  }
  if (!StringUtil.equals(getAlbum(),track.getAlbum())) {
    return false;
  }
  if (duration != track.getDuration()) {
    return false;
  }
  return true;
}",0.9929577464788732
166860,"private void handleTrack(final Intent intent){
  if (intent == null || !WAILSettings.isEnabled(this)) {
    Loggi.w(""String_Node_Str"");
    return;
  }
  final String player=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME);
  if (ignoredPlayersDBHelper.contains(player)) {
    Loggi.w(String.format(""String_Node_Str"",player));
    return;
  }
  AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      Loggi.i(""String_Node_Str"" + intent);
      mayBeCleanDB();
      final String extraAction=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_ACTION);
      if (extraAction == null || extraAction.lastIndexOf('.') == -1) {
        Loggi.e(""String_Node_Str"");
        return null;
      }
      final boolean isCurrentTrackPlaying=intent.getBooleanExtra(CommonMusicAppReceiver.EXTRA_PLAYING,false);
      final Track currentTrack=CommonMusicAppReceiver.parseFromIntentExtras(intent);
      if (isCurrentTrackPlaying) {
        WAILSettings.setNowScrobblingTrack(getApplicationContext(),currentTrack);
        String applicationLabel=null;
        try {
          PackageManager packageManager=getApplication().getPackageManager();
          ApplicationInfo applicationInfo=packageManager.getApplicationInfo(player,0);
          applicationLabel=packageManager.getApplicationLabel(applicationInfo).toString();
        }
 catch (        PackageManager.NameNotFoundException e) {
          Loggi.w(""String_Node_Str"" + player);
        }
        WAILSettings.setNowScrobblingPlayerLabel(getApplicationContext(),applicationLabel);
        WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),player);
        StatusBarNotificationsManager.getInstance(getApplicationContext()).showTrackScrobblingStatusBarNotification(currentTrack);
        updateNowPlaying(currentTrack);
      }
 else {
        StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackScrobblingStatusBarNotification();
        WAILSettings.setNowScrobblingTrack(getApplicationContext(),null);
        WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),null);
      }
      LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(new Intent(TracksDBHelper.INTENT_TRACKS_CHANGED));
      final LastCapturedTrackInfo mLastCapturedTrackInfo=WAILSettings.getLastCapturedTrackInfo(getApplicationContext());
      if (mLastCapturedTrackInfo == null) {
      }
 else {
        final long trackPlayingDurationInMillis=currentTrack.getTimestamp() - mLastCapturedTrackInfo.getTrack().getTimestamp();
        final long minTrackDurationInMillis=WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000;
        if ((!isCurrentTrackPlaying && mLastCapturedTrackInfo.isPlaying()) || mLastCapturedTrackInfo.isPlaying()) {
          if (trackPlayingDurationInMillis >= minTrackDurationInMillis) {
            Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ (WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000));
            long duration=mLastCapturedTrackInfo.getTrack().getDurationInMillis();
            if (duration != -1) {
              final int trackDurationInPercents=(int)(100 * trackPlayingDurationInMillis / (duration + 2500));
              int minTrackDurationInPercents=WAILSettings.getMinTrackDurationInPercents(getApplicationContext());
              if (trackDurationInPercents >= minTrackDurationInPercents) {
                Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ trackDurationInPercents+ ""String_Node_Str""+ minTrackDurationInPercents);
                mLastCapturedTrackInfo.getTrack().setStateTimestamp(System.currentTimeMillis());
                addTrackToDB(mLastCapturedTrackInfo.getTrack());
              }
 else {
                Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ trackDurationInPercents+ ""String_Node_Str""+ minTrackDurationInPercents);
                SoundNotificationsManager.getInstance(getApplicationContext()).playTrackSkippedSound();
              }
            }
 else {
              Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ minTrackDurationInMillis+ ""String_Node_Str"");
            }
          }
 else {
            mLastCapturedTrackInfo.getTrack().setStateTimestamp(System.currentTimeMillis());
            addTrackToDB(mLastCapturedTrackInfo.getTrack());
          }
        }
 else {
          Loggi.w(""String_Node_Str"");
        }
      }
      WAILSettings.setLastCapturedTrackInfo(getApplicationContext(),new LastCapturedTrackInfo(currentTrack,isCurrentTrackPlaying));
      return null;
    }
    @Override protected void onPostExecute(    Void aVoid){
      scrobblePendingTracks(false);
    }
  }
);
}","private void handleTrack(final Intent intent){
  if (intent == null || !WAILSettings.isEnabled(this)) {
    Loggi.w(""String_Node_Str"");
    return;
  }
  final String player=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME);
  if (ignoredPlayersDBHelper.contains(player)) {
    Loggi.w(String.format(""String_Node_Str"",player));
    return;
  }
  AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      Loggi.i(""String_Node_Str"" + intent);
      mayBeCleanDB();
      final String extraAction=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_ACTION);
      if (extraAction == null || extraAction.lastIndexOf('.') == -1) {
        Loggi.e(""String_Node_Str"");
        return null;
      }
      final boolean isCurrentTrackPlaying=intent.getBooleanExtra(CommonMusicAppReceiver.EXTRA_PLAYING,false);
      final Track currentTrack=CommonMusicAppReceiver.parseFromIntentExtras(intent);
      if (isCurrentTrackPlaying) {
        WAILSettings.setNowScrobblingTrack(getApplicationContext(),currentTrack);
        String applicationLabel=null;
        try {
          PackageManager packageManager=getApplication().getPackageManager();
          ApplicationInfo applicationInfo=packageManager.getApplicationInfo(player,0);
          applicationLabel=packageManager.getApplicationLabel(applicationInfo).toString();
        }
 catch (        PackageManager.NameNotFoundException e) {
          Loggi.w(""String_Node_Str"" + player);
        }
        WAILSettings.setNowScrobblingPlayerLabel(getApplicationContext(),applicationLabel);
        WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),player);
        StatusBarNotificationsManager.getInstance(getApplicationContext()).showTrackScrobblingStatusBarNotification(currentTrack);
        updateNowPlaying(currentTrack);
      }
 else {
        StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackScrobblingStatusBarNotification();
        WAILSettings.setNowScrobblingTrack(getApplicationContext(),null);
        WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),null);
      }
      LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(new Intent(TracksDBHelper.INTENT_TRACKS_CHANGED));
      final LastCapturedTrackInfo mLastCapturedTrackInfo=WAILSettings.getLastCapturedTrackInfo(getApplicationContext());
      if (mLastCapturedTrackInfo == null) {
      }
 else {
        final long trackPlayingDurationInMillis=currentTrack.getTimestamp() - mLastCapturedTrackInfo.getTrack().getTimestamp();
        final long minTrackDurationInMillis=WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000;
        if ((!isCurrentTrackPlaying && mLastCapturedTrackInfo.isPlaying()) || mLastCapturedTrackInfo.isPlaying()) {
          Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ (WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000));
          long duration=mLastCapturedTrackInfo.getTrack().getDurationInMillis();
          if (duration != -1) {
            final int trackDurationInPercents=(int)(100 * trackPlayingDurationInMillis / (duration + 2500));
            int minTrackDurationInPercents=WAILSettings.getMinTrackDurationInPercents(getApplicationContext());
            if (trackDurationInPercents >= minTrackDurationInPercents) {
              Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ trackDurationInPercents+ ""String_Node_Str""+ minTrackDurationInPercents);
              mLastCapturedTrackInfo.getTrack().setStateTimestamp(System.currentTimeMillis());
              addTrackToDB(mLastCapturedTrackInfo.getTrack());
            }
 else {
              Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ trackDurationInPercents+ ""String_Node_Str""+ minTrackDurationInPercents);
              SoundNotificationsManager.getInstance(getApplicationContext()).playTrackSkippedSound();
            }
          }
 else {
            Loggi.w(""String_Node_Str"" + trackPlayingDurationInMillis + ""String_Node_Str""+ minTrackDurationInMillis+ ""String_Node_Str"");
          }
        }
 else {
          Loggi.w(""String_Node_Str"");
        }
      }
      WAILSettings.setLastCapturedTrackInfo(getApplicationContext(),new LastCapturedTrackInfo(currentTrack,isCurrentTrackPlaying));
      return null;
    }
    @Override protected void onPostExecute(    Void aVoid){
      scrobblePendingTracks(false);
    }
  }
);
}",0.9690874444209188
166861,"@OnClick(R.id.settings_logout_menu_item) public void logout(){
  new MaterialDialog.Builder(getActivity()).theme(Theme.DARK).title(R.string.setting_logout_warning).positiveText(""String_Node_Str"").negativeText(R.string.dialog_cancel).callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog dialog){
      WAILSettings.clearAllSettings(getActivity());
      AppDBManager.getInstance(getActivity()).clearAll();
      startActivity(new Intent(getActivity(),NonAuthorizedActivity.class));
      getActivity().finish();
    }
    @Override public void onNegative(    MaterialDialog dialog){
      dialog.dismiss();
    }
  }
).build().show();
}","@OnClick(R.id.settings_logout_menu_item) public void logout(){
  new MaterialDialog.Builder(getActivity()).theme(Theme.DARK).title(R.string.setting_logout_warning).positiveText(""String_Node_Str"").negativeText(R.string.dialog_cancel).callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog dialog){
      WAILSettings.clearAllSettings(getActivity());
      AppDBManager.getInstance(getActivity()).clearAll();
      LocaleUtil.updateLanguage(getActivity(),null);
      startActivity(new Intent(getActivity(),MainActivity.class));
      getActivity().finish();
    }
    @Override public void onNegative(    MaterialDialog dialog){
      dialog.dismiss();
    }
  }
).build().show();
}",0.9447592067988668
166862,"@Override public void onPositive(MaterialDialog dialog){
  WAILSettings.clearAllSettings(getActivity());
  AppDBManager.getInstance(getActivity()).clearAll();
  startActivity(new Intent(getActivity(),NonAuthorizedActivity.class));
  getActivity().finish();
}","@Override public void onPositive(MaterialDialog dialog){
  WAILSettings.clearAllSettings(getActivity());
  AppDBManager.getInstance(getActivity()).clearAll();
  LocaleUtil.updateLanguage(getActivity(),null);
  startActivity(new Intent(getActivity(),MainActivity.class));
  getActivity().finish();
}",0.7410071942446043
166863,"public static synchronized String getLanguage(Context context){
  return getSharedPreferences(context).getString(KEY_LOCALE,Locale.getDefault().getLanguage());
}","public static synchronized String getLanguage(Context context){
  return getSharedPreferences(context).getString(KEY_LOCALE,null);
}",0.8873720136518771
166864,"public static void updateLanguage(Context context,String newLanguage){
  Configuration configuration=new Configuration();
  String language=WAILSettings.getLanguage(context);
  String lang=lang(language);
  String newLang=lang(newLanguage);
  if (TextUtils.isEmpty(language) && newLanguage == null) {
    configuration.locale=Locale.getDefault();
  }
 else   if (newLanguage != null) {
    configuration.locale=new Locale(newLang);
    WAILSettings.setLanguage(context,newLanguage);
  }
 else   if (!TextUtils.isEmpty(language)) {
    configuration.locale=new Locale(lang);
  }
  context.getResources().updateConfiguration(configuration,null);
  if (newLang != null && !lang.equals(newLang)) {
    Intent intent=context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    context.startActivity(intent);
  }
}","public static void updateLanguage(Context context,String newLanguage){
  Configuration configuration=new Configuration();
  String language=WAILSettings.getLanguage(context);
  String lang=lang(language);
  String newLang=lang(newLanguage);
  if (TextUtils.isEmpty(language) && newLanguage == null) {
    configuration.locale=Locale.getDefault();
  }
 else   if (newLanguage != null) {
    configuration.locale=new Locale(newLang);
    WAILSettings.setLanguage(context,newLanguage);
  }
 else   if (!TextUtils.isEmpty(language)) {
    configuration.locale=new Locale(lang);
  }
  context.getResources().updateConfiguration(configuration,null);
  if (newLang != null && !newLang.equals(lang)) {
    Intent intent=context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    context.startActivity(intent);
  }
}",0.9943566591422122
166865,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  ButterKnife.inject(this);
  setSupportActionBar(toolbar);
  if (!WAILSettings.isAuthorized(this)) {
    startActivityForResult(new Intent(this,NonAuthorizedActivity.class),REQUEST_CODE_NON_AUTHORIZED_ACTIVITY_INTENT);
  }
  ((TypefaceTextView)findViewById(R.id.main_left_drawer_title_main)).setText(WAILSettings.getLastfmUserName(this));
  ((TypefaceTextView)findViewById(R.id.main_left_drawer_title_secondary)).setText(getString(R.string.drawer_registered_at) + WAILSettings.getLastfmUserRegistered(this).split(""String_Node_Str"")[0]);
  if (drawerLayout != null) {
    drawerLayout.setStatusBarBackgroundColor(getResources().getColor(R.color.primary_dark));
    DisplayMetrics displayMetrics=getResources().getDisplayMetrics();
    float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56,displayMetrics);
    ViewGroup.LayoutParams params=drawer.getLayoutParams();
    params.width=displayMetrics.widthPixels - Math.round(px);
    drawer.setLayoutParams(params);
    actionBarDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,R.string.app_name,R.string.app_name);
    drawerLayout.setDrawerListener(actionBarDrawerToggle);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setHomeButtonEnabled(true);
  }
 else   if (drawerLayoutLand != null) {
    drawerLayoutLand.setStatusBarBackgroundColor(getResources().getColor(R.color.primary_dark));
  }
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.settings_ignored_players_item_layout,getResources().getStringArray(R.array.drawer_items)){
    @Override public View getView(    int position,    View view,    ViewGroup parent){
      ViewHolder holder;
      View rowView=view;
      if (rowView == null) {
        LayoutInflater inflater=getLayoutInflater();
        rowView=inflater.inflate(R.layout.activity_main_drawer_item_layout,null,true);
        holder=new ViewHolder();
        holder.background=rowView;
        holder.textView=(TypefaceTextView)rowView.findViewById(R.id.activity_main_drawer_item_text);
        holder.imageView=(ImageView)rowView.findViewById(R.id.activity_main_drawer_item_image);
        rowView.setTag(holder);
      }
 else {
        holder=(ViewHolder)rowView.getTag();
      }
      holder.textView.setText(getItem(position));
switch (position) {
case 0:
        holder.imageView.setImageResource(R.drawable.ic_home_grey600_24dp);
      break;
case 1:
    holder.imageView.setImageResource(R.drawable.ic_list_grey600_24dp);
  break;
case 2:
holder.imageView.setImageResource(R.drawable.ic_settings_grey600_24dp);
break;
}
if (position == 0 && lastItemSelected == -1) {
holder.background.setBackgroundColor(getResources().getColor(R.color.drawer_item_selected_background));
lastItemSelected=0;
}
return rowView;
}
class ViewHolder {
View background;
TypefaceTextView textView;
ImageView imageView;
}
}
;
drawerList.setAdapter(adapter);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  ButterKnife.inject(this);
  setSupportActionBar(toolbar);
  if (!WAILSettings.isAuthorized(this)) {
    startActivityForResult(new Intent(this,NonAuthorizedActivity.class),REQUEST_CODE_NON_AUTHORIZED_ACTIVITY_INTENT);
  }
  setDrawerHeaderText();
  if (drawerLayout != null) {
    drawerLayout.setStatusBarBackgroundColor(getResources().getColor(R.color.primary_dark));
    DisplayMetrics displayMetrics=getResources().getDisplayMetrics();
    float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56,displayMetrics);
    ViewGroup.LayoutParams params=drawer.getLayoutParams();
    params.width=displayMetrics.widthPixels - Math.round(px);
    drawer.setLayoutParams(params);
    actionBarDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,R.string.app_name,R.string.app_name){
      @Override public void onDrawerOpened(      View drawerView){
        super.onDrawerOpened(drawerView);
        if (StringUtil.isNullOrEmpty(drawerTitleMain.getText().toString()) || StringUtil.isNullOrEmpty(drawerTitleSecondary.getText().toString())) {
          setDrawerHeaderText();
        }
      }
    }
;
    drawerLayout.setDrawerListener(actionBarDrawerToggle);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setHomeButtonEnabled(true);
  }
 else   if (drawerLayoutLand != null) {
    drawerLayoutLand.setStatusBarBackgroundColor(getResources().getColor(R.color.primary_dark));
  }
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.settings_ignored_players_item_layout,getResources().getStringArray(R.array.drawer_items)){
    @Override public View getView(    int position,    View view,    ViewGroup parent){
      ViewHolder holder;
      View rowView=view;
      if (rowView == null) {
        LayoutInflater inflater=getLayoutInflater();
        rowView=inflater.inflate(R.layout.activity_main_drawer_item_layout,null,true);
        holder=new ViewHolder();
        holder.background=rowView;
        holder.textView=(TypefaceTextView)rowView.findViewById(R.id.activity_main_drawer_item_text);
        holder.imageView=(ImageView)rowView.findViewById(R.id.activity_main_drawer_item_image);
        rowView.setTag(holder);
      }
 else {
        holder=(ViewHolder)rowView.getTag();
      }
      holder.textView.setText(getItem(position));
switch (position) {
case 0:
        holder.imageView.setImageResource(R.drawable.ic_home_grey600_24dp);
      break;
case 1:
    holder.imageView.setImageResource(R.drawable.ic_list_grey600_24dp);
  break;
case 2:
holder.imageView.setImageResource(R.drawable.ic_settings_grey600_24dp);
break;
}
if (position == 0 && lastItemSelected == -1) {
holder.background.setBackgroundColor(getResources().getColor(R.color.drawer_item_selected_background));
lastItemSelected=0;
}
return rowView;
}
class ViewHolder {
View background;
TypefaceTextView textView;
ImageView imageView;
}
}
;
drawerList.setAdapter(adapter);
}",0.739344262295082
166866,"@OnCheckedChanged(R.id.settings_disable_scrobbling_over_mobile_network_switch) public void onDisableScrobblingOverMobileChanged(boolean isChecked){
  WAILSettings.setDisableScrobblingOverMobileNetwork(getActivity(),isChecked);
}","@OnCheckedChanged(R.id.settings_disable_scrobbling_over_mobile_network_switch) public void onDisableScrobblingOverMobileChanged(boolean isChecked){
  if (isChecked == WAILSettings.isEnableScrobblingOverMobileNetwork(getActivity())) {
    return;
  }
  WAILSettings.setDisableScrobblingOverMobileNetwork(getActivity(),isChecked);
  final String toast=isChecked ? getString(R.string.settings_scrobbling_over_mobile_network_enabled_toast) : getString(R.string.settings_scrobbling_over_mobile_network_disabled_toast);
  Toast.makeText(getActivity(),toast,Toast.LENGTH_SHORT).show();
  EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_FRAGMENT,""String_Node_Str"" + isChecked,null,isChecked ? 1L : 0L).build());
}",0.4701030927835051
166867,"@OnCheckedChanged(R.id.settings_lastfm_update_nowplaying_switch) public void onLastfmUpdateNowPlayingChanged(boolean isChecked){
  WAILSettings.setLastfmNowplayingUpdateEnabled(getActivity(),isChecked);
  final String toast=isChecked ? getString(R.string.settings_lastfm_update_nowplaying_enabled_toast) : getString(R.string.settings_lastfm_update_nowplaying_disabled_toast);
  Toast.makeText(getActivity(),toast,Toast.LENGTH_SHORT).show();
  EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_FRAGMENT,""String_Node_Str"" + isChecked,null,isChecked ? 1L : 0L).build());
}","@OnCheckedChanged(R.id.settings_lastfm_update_nowplaying_switch) public void onLastfmUpdateNowPlayingChanged(boolean isChecked){
  if (isChecked == WAILSettings.isLastfmNowplayingUpdateEnabled(getActivity())) {
    return;
  }
  WAILSettings.setLastfmNowplayingUpdateEnabled(getActivity(),isChecked);
  final String toast=isChecked ? getString(R.string.settings_lastfm_update_nowplaying_enabled_toast) : getString(R.string.settings_lastfm_update_nowplaying_disabled_toast);
  Toast.makeText(getActivity(),toast,Toast.LENGTH_SHORT).show();
  EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_FRAGMENT,""String_Node_Str"" + isChecked,null,isChecked ? 1L : 0L).build());
}",0.9249617151607964
166868,"@OnCheckedChanged(R.id.settings_sound_notifications_track_skipped_switch) public void onTrackSkippedChanged(boolean isChecked){
  final Activity activity=getActivity();
  WAILSettings.setSoundNotificationTrackSkippedEnabled(activity,isChecked);
  EasyTracker.getInstance(activity).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_SOUND_NOTIFICATIONS,""String_Node_Str"",isChecked ? ""String_Node_Str"" : ""String_Node_Str"",isChecked ? 1L : 0L).build());
}","@OnCheckedChanged(R.id.settings_sound_notifications_track_skipped_switch) public void onTrackSkippedChanged(boolean isChecked){
  final Activity activity=getActivity();
  if (isChecked == WAILSettings.isSoundNotificationTrackSkippedEnabled(activity)) {
    return;
  }
  WAILSettings.setSoundNotificationTrackSkippedEnabled(activity,isChecked);
  EasyTracker.getInstance(activity).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_SOUND_NOTIFICATIONS,""String_Node_Str"",isChecked ? ""String_Node_Str"" : ""String_Node_Str"",isChecked ? 1L : 0L).build());
}",0.8993963782696177
166869,"@OnCheckedChanged(R.id.settings_sound_notifications_track_marked_as_scrobbled_switch) public void onTrackMarkedAsScrobbledChanged(boolean isChecked){
  final Activity activity=getActivity();
  WAILSettings.setSoundNotificationTrackMarkedAsScrobbledEnabled(activity,isChecked);
  EasyTracker.getInstance(activity).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_SOUND_NOTIFICATIONS,""String_Node_Str"",isChecked ? ""String_Node_Str"" : ""String_Node_Str"",isChecked ? 1L : 0L).build());
}","@OnCheckedChanged(R.id.settings_sound_notifications_track_marked_as_scrobbled_switch) public void onTrackMarkedAsScrobbledChanged(boolean isChecked){
  final Activity activity=getActivity();
  if (isChecked == WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(activity)) {
    return;
  }
  WAILSettings.setSoundNotificationTrackMarkedAsScrobbledEnabled(activity,isChecked);
  EasyTracker.getInstance(activity).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_SOUND_NOTIFICATIONS,""String_Node_Str"",isChecked ? ""String_Node_Str"" : ""String_Node_Str"",isChecked ? 1L : 0L).build());
}",0.897003745318352
166870,"@OnCheckedChanged(R.id.settings_status_bar_notifications_track_now_scrobbling_switch) public void onStatusBarNotificationSwitchChanged(boolean isChecked){
  WAILSettings.setStatusBarNotificationTrackScrobblingEnabled(getActivity(),isChecked);
  if (isChecked) {
    Track track=WAILSettings.getNowScrobblingTrack(getActivity());
    if (track != null) {
      StatusBarNotificationsManager.getInstance(getActivity()).showTrackScrobblingStatusBarNotification(track);
    }
  }
 else {
    StatusBarNotificationsManager.getInstance(getActivity()).cancelAllNotifications();
  }
  EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_STATUS_BAR_NOTIFICATIONS,""String_Node_Str"",isChecked ? ""String_Node_Str"" : ""String_Node_Str"",isChecked ? 1L : 0L).build());
}","@OnCheckedChanged(R.id.settings_status_bar_notifications_track_now_scrobbling_switch) public void onStatusBarNotificationSwitchChanged(boolean isChecked){
  if (isChecked == WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(getActivity())) {
    return;
  }
  WAILSettings.setStatusBarNotificationTrackScrobblingEnabled(getActivity(),isChecked);
  if (isChecked) {
    Track track=WAILSettings.getNowScrobblingTrack(getActivity());
    if (track != null) {
      StatusBarNotificationsManager.getInstance(getActivity()).showTrackScrobblingStatusBarNotification(track);
    }
  }
 else {
    StatusBarNotificationsManager.getInstance(getActivity()).cancelAllNotifications();
  }
  EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(GA_EVENT_SETTINGS_STATUS_BAR_NOTIFICATIONS,""String_Node_Str"",isChecked ? ""String_Node_Str"" : ""String_Node_Str"",isChecked ? 1L : 0L).build());
}",0.933570581257414
166871,"private void refreshMinTrackDurationInPercents(){
  minDurationInSecondsDescription.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_desc,WAILSettings.getMinTrackDurationInPercents(getActivity())));
}","private void refreshMinTrackDurationInPercents(){
  minDurationInPercentsDescription.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_desc,WAILSettings.getMinTrackDurationInPercents(getActivity())));
}",0.9706546275395034
166872,"private void refreshMinTrackDurationInSeconds(){
  final int minTrackDurationInSeconds=WAILSettings.getMinTrackDurationInSeconds(getActivity());
  minDurationInPercentsDescription.setText(getString(R.string.settings_min_track_elapsed_time_in_seconds_desc,minTrackDurationInSeconds + ""String_Node_Str"" + WordFormUtil.getWordForm(minTrackDurationInSeconds,getResources().getStringArray(R.array.word_forms_second))));
}","private void refreshMinTrackDurationInSeconds(){
  final int minTrackDurationInSeconds=WAILSettings.getMinTrackDurationInSeconds(getActivity());
  minDurationInSecondsDescription.setText(getString(R.string.settings_min_track_elapsed_time_in_seconds_desc,minTrackDurationInSeconds + ""String_Node_Str"" + WordFormUtil.getWordForm(minTrackDurationInSeconds,getResources().getStringArray(R.array.word_forms_second))));
}",0.9843561973525872
166873,"void fromNotifyJsonInEdge(JsonNode vertexLabelJson){
  for (  String s : Arrays.asList(""String_Node_Str"",""String_Node_Str"")) {
    ArrayNode uncommittedInEdgeLabels=(ArrayNode)vertexLabelJson.get(s);
    if (uncommittedInEdgeLabels != null) {
      for (      JsonNode uncommittedInEdgeLabel : uncommittedInEdgeLabels) {
        String schemaName=uncommittedInEdgeLabel.get(""String_Node_Str"").asText();
        String edgeLabelName=uncommittedInEdgeLabel.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema().getTopology().getSchema(schemaName);
        Preconditions.checkState(schemaOptional.isPresent(),""String_Node_Str"",schemaName);
        @SuppressWarnings(""String_Node_Str"") Optional<EdgeLabel> edgeLabelOptional=schemaOptional.get().getEdgeLabel(edgeLabelName);
        Preconditions.checkState(edgeLabelOptional.isPresent(),""String_Node_Str"",edgeLabelName);
        @SuppressWarnings(""String_Node_Str"") EdgeLabel edgeLabel=edgeLabelOptional.get();
        edgeLabel.addToInVertexLabel(this);
        this.inEdgeLabels.put(schemaName + ""String_Node_Str"" + edgeLabel.getLabel(),edgeLabel);
        edgeLabel.fromPropertyNotifyJson(uncommittedInEdgeLabel,false);
        this.getSchema().getTopology().addInForeignKeysToVertexLabel(this,edgeLabel);
        this.getSchema().getTopology().addToEdgeForeignKeyCache(edgeLabel.getSchema().getName() + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabel.getLabel(),this.getSchema().getName() + ""String_Node_Str"" + this.getLabel()+ Topology.IN_VERTEX_COLUMN_END);
      }
    }
  }
  ArrayNode uncommittedRemoveInEdgeLabels=(ArrayNode)vertexLabelJson.get(""String_Node_Str"");
  if (uncommittedRemoveInEdgeLabels != null) {
    for (    JsonNode n : uncommittedRemoveInEdgeLabels) {
      EdgeLabel lbl=this.inEdgeLabels.remove(n.get(""String_Node_Str"").asText());
      if (lbl != null) {
        EdgeRemoveType ert=EdgeRemoveType.valueOf(n.get(""String_Node_Str"").asText());
        if (lbl.isValid()) {
          this.getSchema().getTopology().removeFromEdgeForeignKeyCache(lbl.getSchema().getName() + ""String_Node_Str"" + EDGE_PREFIX+ lbl.getLabel(),this.getSchema().getName() + ""String_Node_Str"" + this.getLabel()+ Topology.IN_VERTEX_COLUMN_END);
          this.getSchema().getTopology().removeInForeignKeysFromVertexLabel(this,lbl);
        }
        lbl.inVertexLabels.remove(this);
switch (ert) {
case LABEL:
          this.getSchema().getTopology().fire(lbl,""String_Node_Str"",TopologyChangeAction.DELETE);
        break;
case ROLE:
      this.getSchema().getTopology().fire(new EdgeRole(this,lbl,Direction.IN,true),""String_Node_Str"",TopologyChangeAction.DELETE);
    break;
}
}
}
}
}","void fromNotifyJsonInEdge(JsonNode vertexLabelJson){
  for (  String s : Arrays.asList(""String_Node_Str"",""String_Node_Str"")) {
    ArrayNode uncommittedInEdgeLabels=(ArrayNode)vertexLabelJson.get(s);
    if (uncommittedInEdgeLabels != null) {
      for (      JsonNode uncommittedInEdgeLabel : uncommittedInEdgeLabels) {
        String schemaName=uncommittedInEdgeLabel.get(""String_Node_Str"").asText();
        String edgeLabelName=uncommittedInEdgeLabel.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema().getTopology().getSchema(schemaName);
        Preconditions.checkState(schemaOptional.isPresent(),""String_Node_Str"",schemaName);
        @SuppressWarnings(""String_Node_Str"") Optional<EdgeLabel> edgeLabelOptional=schemaOptional.get().getEdgeLabel(edgeLabelName);
        if (edgeLabelOptional.isPresent()) {
          @SuppressWarnings(""String_Node_Str"") EdgeLabel edgeLabel=edgeLabelOptional.get();
          edgeLabel.addToInVertexLabel(this);
          this.inEdgeLabels.put(schemaName + ""String_Node_Str"" + edgeLabel.getLabel(),edgeLabel);
          edgeLabel.fromPropertyNotifyJson(uncommittedInEdgeLabel,false);
          this.getSchema().getTopology().addInForeignKeysToVertexLabel(this,edgeLabel);
          this.getSchema().getTopology().addToEdgeForeignKeyCache(edgeLabel.getSchema().getName() + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabel.getLabel(),this.getSchema().getName() + ""String_Node_Str"" + this.getLabel()+ Topology.IN_VERTEX_COLUMN_END);
        }
      }
    }
  }
  ArrayNode uncommittedRemoveInEdgeLabels=(ArrayNode)vertexLabelJson.get(""String_Node_Str"");
  if (uncommittedRemoveInEdgeLabels != null) {
    for (    JsonNode n : uncommittedRemoveInEdgeLabels) {
      EdgeLabel lbl=this.inEdgeLabels.remove(n.get(""String_Node_Str"").asText());
      if (lbl != null) {
        EdgeRemoveType ert=EdgeRemoveType.valueOf(n.get(""String_Node_Str"").asText());
        if (lbl.isValid()) {
          this.getSchema().getTopology().removeFromEdgeForeignKeyCache(lbl.getSchema().getName() + ""String_Node_Str"" + EDGE_PREFIX+ lbl.getLabel(),this.getSchema().getName() + ""String_Node_Str"" + this.getLabel()+ Topology.IN_VERTEX_COLUMN_END);
          this.getSchema().getTopology().removeInForeignKeysFromVertexLabel(this,lbl);
        }
        lbl.inVertexLabels.remove(this);
switch (ert) {
case LABEL:
          this.getSchema().getTopology().fire(lbl,""String_Node_Str"",TopologyChangeAction.DELETE);
        break;
case ROLE:
      this.getSchema().getTopology().fire(new EdgeRole(this,lbl,Direction.IN,true),""String_Node_Str"",TopologyChangeAction.DELETE);
    break;
}
}
}
}
}",0.983358547655068
166874,"/** 
 * flushes the cache via the copy command.
 * @param vertexCache A rather complex object.The map's key is the vertex being cached. The Triple holds, 1) The in labels 2) The out labels 3) The properties as a map of key values
 */
@Override public void flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> vertexCache){
  Connection con=sqlgGraph.tx().getConnection();
  for (  SchemaTable schemaTable : vertexCache.keySet()) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertices=vertexCache.get(schemaTable);
    String sql=internalConstructCompleteCopyCommandSqlVertex(sqlgGraph,schemaTable.isTemporary(),schemaTable.getSchema(),schemaTable.getTable(),vertices.getLeft());
    int numberInserted=0;
    try (Writer writer=streamSql(sqlgGraph,sql)){
      for (      Map<String,Object> keyValueMap : vertices.getRight().values()) {
        LinkedHashMap<String,Object> values=new LinkedHashMap<>();
        for (        String key : vertices.getLeft()) {
          values.put(key,keyValueMap.get(key));
        }
        writeStreamingVertex(writer,values);
        numberInserted++;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (!schemaTable.isTemporary() && numberInserted > 0) {
      long endHigh;
      sql=""String_Node_Str"" + maybeWrapInQoutes(schemaTable.getSchema()) + ""String_Node_Str""+ maybeWrapInQoutes(VERTEX_PREFIX + schemaTable.getTable() + ""String_Node_Str"")+ ""String_Node_Str"";
      if (logger.isDebugEnabled()) {
        logger.debug(sql);
      }
      try (PreparedStatement preparedStatement=con.prepareStatement(sql)){
        ResultSet resultSet=preparedStatement.executeQuery();
        resultSet.next();
        endHigh=resultSet.getLong(1);
        resultSet.close();
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
      long id=endHigh - numberInserted + 1;
      for (      SqlgVertex sqlgVertex : vertices.getRight().keySet()) {
        sqlgVertex.setInternalPrimaryKey(RecordId.from(schemaTable,id++));
      }
    }
  }
}","/** 
 * flushes the cache via the copy command.
 * @param vertexCache A rather complex object.The map's key is the vertex being cached. The Triple holds, 1) The in labels 2) The out labels 3) The properties as a map of key values
 */
@Override public void flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> vertexCache){
  Connection con=sqlgGraph.tx().getConnection();
  for (  SchemaTable schemaTable : vertexCache.keySet()) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertices=vertexCache.get(schemaTable);
    String sql=""String_Node_Str"" + maybeWrapInQoutes(schemaTable.getSchema()) + ""String_Node_Str""+ maybeWrapInQoutes(VERTEX_PREFIX + schemaTable.getTable() + ""String_Node_Str"")+ ""String_Node_Str""+ vertices.getRight().values().size()+ ""String_Node_Str"";
    if (logger.isDebugEnabled()) {
      logger.debug(sql);
    }
    List<Long> ids=new LinkedList<>();
    try (PreparedStatement preparedStatement=con.prepareStatement(sql)){
      ResultSet resultSet=preparedStatement.executeQuery();
      while (resultSet.next()) {
        ids.add(resultSet.getLong(1));
      }
      resultSet.close();
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
    Iterator<Long> it=ids.iterator();
    sql=internalConstructCompleteCopyCommandSqlVertex(sqlgGraph,schemaTable.isTemporary(),schemaTable.getSchema(),schemaTable.getTable(),vertices.getLeft());
    try (Writer writer=streamSql(sqlgGraph,sql)){
      for (      SqlgVertex sqlgVertex : vertices.getRight().keySet()) {
        Map<String,Object> keyValueMap=vertices.getRight().get(sqlgVertex);
        long id=it.next();
        sqlgVertex.setInternalPrimaryKey(RecordId.from(schemaTable,id));
        LinkedHashMap<String,Object> values=new LinkedHashMap<>();
        values.put(""String_Node_Str"",id);
        for (        String key : vertices.getLeft()) {
          values.put(key,keyValueMap.get(key));
        }
        writeStreamingVertex(writer,values);
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",0.587847385774847
166875,"private String internalConstructCompleteCopyCommandSqlVertex(SqlgGraph sqlgGraph,boolean isTemp,String schema,String table,Set<String> keys){
  Map<String,PropertyType> propertyTypeMap;
  if (isTemp) {
    propertyTypeMap=sqlgGraph.getTopology().getPublicSchema().getTemporaryTable(VERTEX_PREFIX + table);
  }
 else {
    propertyTypeMap=sqlgGraph.getTopology().getTableFor(SchemaTable.of(schema,VERTEX_PREFIX + table));
  }
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  if (!isTemp) {
    sql.append(maybeWrapInQoutes(schema));
    sql.append(""String_Node_Str"");
  }
  sql.append(maybeWrapInQoutes(VERTEX_PREFIX + table));
  sql.append(""String_Node_Str"");
  if (keys.isEmpty()) {
    Map<String,PropertyType> columns=new HashMap<>();
    columns.put(COPY_DUMMY,PropertyType.from(0));
    sqlgGraph.getTopology().ensureVertexLabelPropertiesExist(schema,table,columns);
    sql.append(maybeWrapInQoutes(COPY_DUMMY));
  }
 else {
    int count=1;
    for (    String key : keys) {
      if (count > 1 && count <= keys.size()) {
        sql.append(""String_Node_Str"");
      }
      count++;
      appendKeyForStream(propertyTypeMap.get(key),sql,key);
    }
  }
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_DELIMITER);
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_QUOTE);
  sql.append(""String_Node_Str"");
  sql.append(ESCAPE);
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(BATCH_NULL);
  sql.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  return sql.toString();
}","private String internalConstructCompleteCopyCommandSqlVertex(SqlgGraph sqlgGraph,boolean isTemp,String schema,String table,Set<String> keys){
  Map<String,PropertyType> propertyTypeMap;
  if (isTemp) {
    propertyTypeMap=sqlgGraph.getTopology().getPublicSchema().getTemporaryTable(VERTEX_PREFIX + table);
  }
 else {
    propertyTypeMap=sqlgGraph.getTopology().getTableFor(SchemaTable.of(schema,VERTEX_PREFIX + table));
  }
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  if (!isTemp) {
    sql.append(maybeWrapInQoutes(schema));
    sql.append(""String_Node_Str"");
  }
  sql.append(maybeWrapInQoutes(VERTEX_PREFIX + table));
  sql.append(""String_Node_Str"");
  for (  String key : keys) {
    sql.append(""String_Node_Str"");
    appendKeyForStream(propertyTypeMap.get(key),sql,key);
  }
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_DELIMITER);
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_QUOTE);
  sql.append(""String_Node_Str"");
  sql.append(ESCAPE);
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(BATCH_NULL);
  sql.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  return sql.toString();
}",0.8394062078272605
166876,"@Test public void testMultiThreadAddVertex() throws InterruptedException {
  sqlgGraph.tx().rollback();
  Set<Integer> tables=new ConcurrentSkipListSet<>();
  ExecutorService executorService=Executors.newFixedThreadPool(1);
  for (int j=0; j < 50; j++) {
    executorService.submit(() -> {
      sqlgGraph.tx().rollback();
      sqlgGraph.tx().normalBatchModeOn();
      final Random random=new Random();
      int randomInt=random.nextInt();
      try {
        for (int i=0; i < 1000; i++) {
          Vertex v1=sqlgGraph.addVertex(T.label,""String_Node_Str"" + String.valueOf(randomInt),""String_Node_Str"",randomInt);
          Vertex v2=sqlgGraph.addVertex(T.label,""String_Node_Str"" + String.valueOf(randomInt),""String_Node_Str"",randomInt);
          v1.addEdge(String.valueOf(randomInt),v2,""String_Node_Str"",randomInt);
          tables.add(randomInt);
        }
        sqlgGraph.tx().commit();
        sqlgGraph.tx().normalBatchModeOn();
      }
 catch (      Exception e) {
        Assert.fail(e.getMessage());
      }
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(60000,TimeUnit.SECONDS);
  Assert.assertEquals(50,tables.size());
  testNultiThreadAddVertex_assert(this.sqlgGraph,tables);
  if (this.sqlgGraph1 != null) {
    Thread.sleep(SLEEP_TIME);
    testNultiThreadAddVertex_assert(this.sqlgGraph1,tables);
  }
}","@Test public void testMultiThreadAddVertex() throws InterruptedException {
  sqlgGraph.tx().rollback();
  Set<Integer> tables=new ConcurrentSkipListSet<>();
  ExecutorService executorService=Executors.newFixedThreadPool(2);
  for (int j=0; j < 50; j++) {
    executorService.submit(() -> {
      sqlgGraph.tx().rollback();
      sqlgGraph.tx().normalBatchModeOn();
      final Random random=new Random();
      int randomInt=random.nextInt();
      try {
        for (int i=0; i < 1000; i++) {
          Vertex v1=sqlgGraph.addVertex(T.label,""String_Node_Str"" + String.valueOf(randomInt),""String_Node_Str"",randomInt);
          Vertex v2=sqlgGraph.addVertex(T.label,""String_Node_Str"" + String.valueOf(randomInt),""String_Node_Str"",randomInt);
          v1.addEdge(String.valueOf(randomInt),v2,""String_Node_Str"",randomInt);
        }
        tables.add(randomInt);
        sqlgGraph.tx().commit();
        sqlgGraph.tx().normalBatchModeOn();
      }
 catch (      Exception e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(60000,TimeUnit.SECONDS);
  Assert.assertEquals(50,tables.size());
  testMultiThreadAddVertex_assert(this.sqlgGraph,tables);
  if (this.sqlgGraph1 != null) {
    Thread.sleep(SLEEP_TIME);
    testMultiThreadAddVertex_assert(this.sqlgGraph1,tables);
  }
}",0.9258312020460358
166877,"/** 
 * flushes the cache via the copy command.
 * @param vertexCache A rather complex object.The map's key is the vertex being cached. The Triple holds, 1) The in labels 2) The out labels 3) The properties as a map of key values
 */
@Override public void flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> vertexCache){
  Connection con=sqlgGraph.tx().getConnection();
  for (  SchemaTable schemaTable : vertexCache.keySet()) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertices=vertexCache.get(schemaTable);
    String sql=""String_Node_Str"" + maybeWrapInQoutes(schemaTable.getSchema()) + ""String_Node_Str""+ maybeWrapInQoutes(VERTEX_PREFIX + schemaTable.getTable() + ""String_Node_Str"")+ ""String_Node_Str""+ vertices.getRight().values().size()+ ""String_Node_Str"";
    if (logger.isDebugEnabled()) {
      logger.debug(sql);
    }
    List<Long> ids=new LinkedList<>();
    try (PreparedStatement preparedStatement=con.prepareStatement(sql)){
      ResultSet resultSet=preparedStatement.executeQuery();
      while (resultSet.next()) {
        ids.add(resultSet.getLong(1));
      }
      resultSet.close();
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
    Iterator<Long> it=ids.iterator();
    sql=internalConstructCompleteCopyCommandSqlVertex(sqlgGraph,schemaTable.isTemporary(),schemaTable.getSchema(),schemaTable.getTable(),vertices.getLeft());
    try (Writer writer=streamSql(sqlgGraph,sql)){
      for (      SqlgVertex sqlgVertex : vertices.getRight().keySet()) {
        Map<String,Object> keyValueMap=vertices.getRight().get(sqlgVertex);
        long id=it.next();
        sqlgVertex.setInternalPrimaryKey(RecordId.from(schemaTable,id));
        LinkedHashMap<String,Object> values=new LinkedHashMap<>();
        values.put(""String_Node_Str"",id);
        for (        String key : vertices.getLeft()) {
          values.put(key,keyValueMap.get(key));
        }
        writeStreamingVertex(writer,values);
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}","/** 
 * flushes the cache via the copy command.
 * @param vertexCache A rather complex object.The map's key is the vertex being cached. The Triple holds, 1) The in labels 2) The out labels 3) The properties as a map of key values
 */
@Override public void flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> vertexCache){
  Connection con=sqlgGraph.tx().getConnection();
  for (  SchemaTable schemaTable : vertexCache.keySet()) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertices=vertexCache.get(schemaTable);
    List<Long> ids=new LinkedList<>();
    if (!schemaTable.isTemporary()) {
      String sql=""String_Node_Str"" + maybeWrapInQoutes(schemaTable.getSchema()) + ""String_Node_Str""+ maybeWrapInQoutes(VERTEX_PREFIX + schemaTable.getTable() + ""String_Node_Str"")+ ""String_Node_Str""+ vertices.getRight().values().size()+ ""String_Node_Str"";
      if (logger.isDebugEnabled()) {
        logger.debug(sql);
      }
      try (PreparedStatement preparedStatement=con.prepareStatement(sql)){
        ResultSet resultSet=preparedStatement.executeQuery();
        while (resultSet.next()) {
          ids.add(resultSet.getLong(1));
        }
        resultSet.close();
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
    Iterator<Long> it=ids.iterator();
    String sql=internalConstructCompleteCopyCommandSqlVertex(sqlgGraph,schemaTable.isTemporary(),schemaTable.getSchema(),schemaTable.getTable(),!schemaTable.isTemporary(),vertices.getLeft());
    try (Writer writer=streamSql(sqlgGraph,sql)){
      for (      SqlgVertex sqlgVertex : vertices.getRight().keySet()) {
        Map<String,Object> keyValueMap=vertices.getRight().get(sqlgVertex);
        LinkedHashMap<String,Object> values=new LinkedHashMap<>();
        if (!schemaTable.isTemporary()) {
          long id=it.next();
          sqlgVertex.setInternalPrimaryKey(RecordId.from(schemaTable,id));
          values.put(""String_Node_Str"",id);
        }
        for (        String key : vertices.getLeft()) {
          values.put(key,keyValueMap.get(key));
        }
        writeStreamingVertex(writer,values);
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",0.809437386569873
166878,"@Override public String constructCompleteCopyCommandSqlVertex(SqlgGraph sqlgGraph,String schema,String table,Set<String> keys){
  return internalConstructCompleteCopyCommandSqlVertex(sqlgGraph,false,schema,table,keys);
}","@Override public String constructCompleteCopyCommandSqlVertex(SqlgGraph sqlgGraph,String schema,String table,Set<String> keys){
  return internalConstructCompleteCopyCommandSqlVertex(sqlgGraph,false,schema,table,false,keys);
}",0.9865470852017936
166879,"@Override public void flushEdgeCache(SqlgGraph sqlgGraph,Map<MetaEdge,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache){
  Connection con=sqlgGraph.tx().getConnection();
  try {
    for (    MetaEdge metaEdge : edgeCache.keySet()) {
      Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=edgeCache.get(metaEdge);
      Map<String,PropertyType> propertyTypeMap=sqlgGraph.getTopology().getTableFor(metaEdge.getSchemaTable().withPrefix(EDGE_PREFIX));
      StringBuilder sql=new StringBuilder();
      sql.append(""String_Node_Str"");
      sql.append(maybeWrapInQoutes(metaEdge.getSchemaTable().getSchema()));
      sql.append(""String_Node_Str"");
      sql.append(maybeWrapInQoutes(EDGE_PREFIX + metaEdge.getSchemaTable().getTable()));
      sql.append(""String_Node_Str"");
      for (      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple : triples.getRight().values()) {
        int count=1;
        sql.append(maybeWrapInQoutes(triple.getLeft().getSchema() + ""String_Node_Str"" + triple.getLeft().getTable()+ Topology.OUT_VERTEX_COLUMN_END));
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(triple.getMiddle().getSchema() + ""String_Node_Str"" + triple.getMiddle().getTable()+ Topology.IN_VERTEX_COLUMN_END));
        for (        String key : triples.getLeft()) {
          if (count <= triples.getLeft().size()) {
            sql.append(""String_Node_Str"");
          }
          count++;
          appendKeyForStream(propertyTypeMap.get(key),sql,key);
        }
        break;
      }
      sql.append(""String_Node_Str"");
      sql.append(""String_Node_Str"");
      sql.append(COPY_COMMAND_DELIMITER);
      sql.append(""String_Node_Str"");
      sql.append(""String_Node_Str"");
      sql.append(COPY_COMMAND_QUOTE);
      sql.append(""String_Node_Str"");
      sql.append(ESCAPE);
      sql.append(""String_Node_Str"");
      if (logger.isDebugEnabled()) {
        logger.debug(sql.toString());
      }
      long numberInserted=0;
      try (Writer writer=streamSql(sqlgGraph,sql.toString())){
        for (        Map.Entry<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> sqlgEdgeTripleEntry : triples.getRight().entrySet()) {
          SqlgEdge sqlgEdge=sqlgEdgeTripleEntry.getKey();
          Triple<SqlgVertex,SqlgVertex,Map<String,Object>> outInVertexKeyValueMap=sqlgEdgeTripleEntry.getValue();
          LinkedHashMap<String,Object> values=new LinkedHashMap<>();
          for (          String key : triples.getLeft()) {
            values.put(key,outInVertexKeyValueMap.getRight().get(key));
          }
          writeStreamingEdge(writer,sqlgEdge,outInVertexKeyValueMap.getLeft(),outInVertexKeyValueMap.getMiddle(),values);
          numberInserted++;
        }
      }
       long endHigh;
      sql.setLength(0);
      sql.append(""String_Node_Str"" + maybeWrapInQoutes(metaEdge.getSchemaTable().getSchema()) + ""String_Node_Str""+ maybeWrapInQoutes(EDGE_PREFIX + metaEdge.getSchemaTable().getTable() + ""String_Node_Str"")+ ""String_Node_Str"");
      if (logger.isDebugEnabled()) {
        logger.debug(sql.toString());
      }
      try (PreparedStatement preparedStatement=con.prepareStatement(sql.toString())){
        ResultSet resultSet=preparedStatement.executeQuery();
        resultSet.next();
        endHigh=resultSet.getLong(1);
        resultSet.close();
      }
       long id=endHigh - numberInserted + 1;
      for (      SqlgEdge sqlgEdge : triples.getRight().keySet()) {
        sqlgEdge.setInternalPrimaryKey(RecordId.from(metaEdge.getSchemaTable(),id++));
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public void flushEdgeCache(SqlgGraph sqlgGraph,Map<MetaEdge,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache){
  Connection con=sqlgGraph.tx().getConnection();
  try {
    for (    MetaEdge metaEdge : edgeCache.keySet()) {
      Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=edgeCache.get(metaEdge);
      List<Long> ids=new LinkedList<>();
      String seqsql=""String_Node_Str"" + maybeWrapInQoutes(metaEdge.getSchemaTable().getSchema()) + ""String_Node_Str""+ maybeWrapInQoutes(EDGE_PREFIX + metaEdge.getSchemaTable().getTable() + ""String_Node_Str"")+ ""String_Node_Str""+ triples.getRight().values().size()+ ""String_Node_Str"";
      if (logger.isDebugEnabled()) {
        logger.debug(seqsql);
      }
      try (PreparedStatement preparedStatement=con.prepareStatement(seqsql)){
        ResultSet resultSet=preparedStatement.executeQuery();
        while (resultSet.next()) {
          ids.add(resultSet.getLong(1));
        }
        resultSet.close();
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
      Iterator<Long> it=ids.iterator();
      Map<String,PropertyType> propertyTypeMap=sqlgGraph.getTopology().getTableFor(metaEdge.getSchemaTable().withPrefix(EDGE_PREFIX));
      StringBuilder sql=new StringBuilder();
      sql.append(""String_Node_Str"");
      sql.append(maybeWrapInQoutes(metaEdge.getSchemaTable().getSchema()));
      sql.append(""String_Node_Str"");
      sql.append(maybeWrapInQoutes(EDGE_PREFIX + metaEdge.getSchemaTable().getTable()));
      sql.append(""String_Node_Str"");
      for (      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple : triples.getRight().values()) {
        int count=1;
        sql.append(maybeWrapInQoutes(triple.getLeft().getSchema() + ""String_Node_Str"" + triple.getLeft().getTable()+ Topology.OUT_VERTEX_COLUMN_END));
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(triple.getMiddle().getSchema() + ""String_Node_Str"" + triple.getMiddle().getTable()+ Topology.IN_VERTEX_COLUMN_END));
        sql.append(""String_Node_Str"");
        sql.append(""String_Node_Str"");
        for (        String key : triples.getLeft()) {
          if (count <= triples.getLeft().size()) {
            sql.append(""String_Node_Str"");
          }
          count++;
          appendKeyForStream(propertyTypeMap.get(key),sql,key);
        }
        break;
      }
      sql.append(""String_Node_Str"");
      sql.append(""String_Node_Str"");
      sql.append(COPY_COMMAND_DELIMITER);
      sql.append(""String_Node_Str"");
      sql.append(""String_Node_Str"");
      sql.append(COPY_COMMAND_QUOTE);
      sql.append(""String_Node_Str"");
      sql.append(ESCAPE);
      sql.append(""String_Node_Str"");
      if (logger.isDebugEnabled()) {
        logger.debug(sql.toString());
      }
      long numberInserted=0;
      try (Writer writer=streamSql(sqlgGraph,sql.toString())){
        for (        Map.Entry<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> sqlgEdgeTripleEntry : triples.getRight().entrySet()) {
          SqlgEdge sqlgEdge=sqlgEdgeTripleEntry.getKey();
          long id=it.next();
          sqlgEdge.setInternalPrimaryKey(RecordId.from(metaEdge.getSchemaTable(),id));
          Triple<SqlgVertex,SqlgVertex,Map<String,Object>> outInVertexKeyValueMap=sqlgEdgeTripleEntry.getValue();
          LinkedHashMap<String,Object> values=new LinkedHashMap<>();
          values.put(""String_Node_Str"",id);
          for (          String key : triples.getLeft()) {
            values.put(key,outInVertexKeyValueMap.getRight().get(key));
          }
          writeStreamingEdge(writer,sqlgEdge,outInVertexKeyValueMap.getLeft(),outInVertexKeyValueMap.getMiddle(),values);
          numberInserted++;
        }
      }
     }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.7572687804236284
166880,"@Override public String constructCompleteCopyCommandTemporarySqlVertex(SqlgGraph sqlgGraph,SqlgVertex vertex,Map<String,Object> keyValueMap){
  return internalConstructCompleteCopyCommandSqlVertex(sqlgGraph,true,vertex,keyValueMap);
}","@Override public String constructCompleteCopyCommandTemporarySqlVertex(SqlgGraph sqlgGraph,SqlgVertex vertex,Map<String,Object> keyValueMap){
  return internalConstructCompleteCopyCommandSqlVertex(sqlgGraph,true,vertex,false,keyValueMap);
}",0.9873417721518988
166881,"private String internalConstructCompleteCopyCommandSqlVertex(SqlgGraph sqlgGraph,boolean isTemp,String schema,String table,Set<String> keys){
  Map<String,PropertyType> propertyTypeMap;
  if (isTemp) {
    propertyTypeMap=sqlgGraph.getTopology().getPublicSchema().getTemporaryTable(VERTEX_PREFIX + table);
  }
 else {
    propertyTypeMap=sqlgGraph.getTopology().getTableFor(SchemaTable.of(schema,VERTEX_PREFIX + table));
  }
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  if (!isTemp) {
    sql.append(maybeWrapInQoutes(schema));
    sql.append(""String_Node_Str"");
  }
  sql.append(maybeWrapInQoutes(VERTEX_PREFIX + table));
  sql.append(""String_Node_Str"");
  for (  String key : keys) {
    sql.append(""String_Node_Str"");
    appendKeyForStream(propertyTypeMap.get(key),sql,key);
  }
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_DELIMITER);
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_QUOTE);
  sql.append(""String_Node_Str"");
  sql.append(ESCAPE);
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(BATCH_NULL);
  sql.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  return sql.toString();
}","/** 
 * construct the copy command for a vertex
 * @param sqlgGraph the graph
 * @param isTemp is the table temporary?
 * @param schema the schema
 * @param table the table name
 * @param needID do we need the ID column to be copied?
 * @param keys the property keys
 * @return the SQL generated
 */
private String internalConstructCompleteCopyCommandSqlVertex(SqlgGraph sqlgGraph,boolean isTemp,String schema,String table,boolean needID,Set<String> keys){
  Map<String,PropertyType> propertyTypeMap;
  if (isTemp) {
    propertyTypeMap=sqlgGraph.getTopology().getPublicSchema().getTemporaryTable(VERTEX_PREFIX + table);
  }
 else {
    propertyTypeMap=sqlgGraph.getTopology().getTableFor(SchemaTable.of(schema,VERTEX_PREFIX + table));
  }
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  if (!isTemp) {
    sql.append(maybeWrapInQoutes(schema));
    sql.append(""String_Node_Str"");
  }
  sql.append(maybeWrapInQoutes(VERTEX_PREFIX + table));
  sql.append(""String_Node_Str"");
  if (needID) {
    sql.append(""String_Node_Str"");
  }
  if (keys.isEmpty()) {
    if (!needID) {
      Map<String,PropertyType> columns=new HashMap<>();
      columns.put(COPY_DUMMY,PropertyType.from(0));
      sqlgGraph.getTopology().ensureVertexLabelPropertiesExist(schema,table,columns);
      sql.append(maybeWrapInQoutes(COPY_DUMMY));
    }
  }
 else {
    if (needID) {
      sql.append(""String_Node_Str"");
    }
    int count=1;
    for (    String key : keys) {
      if (count > 1 && count <= keys.size()) {
        sql.append(""String_Node_Str"");
      }
      count++;
      appendKeyForStream(propertyTypeMap.get(key),sql,key);
    }
  }
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_DELIMITER);
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_QUOTE);
  sql.append(""String_Node_Str"");
  sql.append(ESCAPE);
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(BATCH_NULL);
  sql.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  return sql.toString();
}",0.7479579929988331
166882,"void add(PreparedStatement preparedStatement){
  this.cache.add(preparedStatement);
}","void add(PreparedStatement preparedStatement){
  this.cache.put(preparedStatement,Boolean.TRUE);
}",0.8961748633879781
166883,"public void close() throws SQLException {
  for (  PreparedStatement preparedStatement : this.cache) {
    preparedStatement.close();
  }
  this.cache.clear();
}","public void close() throws SQLException {
  for (  PreparedStatement preparedStatement : this.cache.keySet()) {
    preparedStatement.close();
  }
  this.cache.clear();
}",0.972809667673716
166884,"private void closePreparedStatement(){
  if (this.queryResult != null) {
    try {
      this.queryResult.getRight().close();
      this.queryResult=null;
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}","private void closePreparedStatement(){
  if (this.queryResult != null) {
    try {
      this.queryResult.getRight().close();
      this.sqlgGraph.tx().getPreparedStatementCache().remove(this.queryResult.getRight());
      this.queryResult=null;
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}",0.8400702987697716
166885,"private String printLabeledOuterFromClauseFor(String sql,int counter,Map<String,String> columnNameAliasMapCopy){
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.getSchemaTable().toString());
  int count=1;
  for (  String propertyName : propertyTypeMap.keySet()) {
    sql+=""String_Node_Str"" + counter + ""String_Node_Str"";
    sql+=this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.labeledMappedAliasPropertyNameForOuterFromClause(propertyName,columnNameAliasMapCopy));
    if (count++ < propertyTypeMap.size()) {
      sql+=""String_Node_Str"";
    }
  }
  return sql;
}","private String printLabeledOuterFromClauseFor(String sql,int counter,Map<String,String> columnNameAliasMapCopy){
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.getSchemaTable().toString());
  int count=1;
  for (  Map.Entry<String,PropertyType> property : propertyTypeMap.entrySet()) {
    sql+=""String_Node_Str"" + counter + ""String_Node_Str"";
    String alias=this.labeledMappedAliasPropertyNameForOuterFromClause(property.getKey(),columnNameAliasMapCopy);
    sql+=this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(alias);
    for (    String postFix : property.getValue().getPostFixes()) {
      sql+=""String_Node_Str"";
      alias=this.mappedAliasPropertyName(property.getKey() + postFix,columnNameAliasMapCopy);
      sql+=this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(alias);
    }
    if (count++ < propertyTypeMap.size()) {
      sql+=""String_Node_Str"";
    }
  }
  return sql;
}",0.595939751146038
166886,"private String printLabeledOuterFromClauseFor(String sql,int counter,Map<String,String> columnNameAliasMapCopy){
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.getSchemaTable().toString());
  int count=1;
  for (  String propertyName : propertyTypeMap.keySet()) {
    sql+=""String_Node_Str"" + counter + ""String_Node_Str"";
    sql+=this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.labeledMappedAliasPropertyNameForOuterFromClause(propertyName,columnNameAliasMapCopy));
    if (count++ < propertyTypeMap.size()) {
      sql+=""String_Node_Str"";
    }
  }
  return sql;
}","private String printLabeledOuterFromClauseFor(String sql,int counter,Map<String,String> columnNameAliasMapCopy){
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.getSchemaTable().toString());
  int count=1;
  for (  Map.Entry<String,PropertyType> property : propertyTypeMap.entrySet()) {
    sql+=""String_Node_Str"" + counter + ""String_Node_Str"";
    String alias=this.labeledMappedAliasPropertyNameForOuterFromClause(property.getKey(),columnNameAliasMapCopy);
    sql+=this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(alias);
    for (    String postFix : property.getValue().getPostFixes()) {
      sql+=""String_Node_Str"";
      alias=this.mappedAliasPropertyName(property.getKey() + postFix,columnNameAliasMapCopy);
      sql+=this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(alias);
    }
    if (count++ < propertyTypeMap.size()) {
      sql+=""String_Node_Str"";
    }
  }
  return sql;
}",0.595939751146038
166887,"private void toSql(SqlgGraph sqlgGraph,SchemaTableTree schemaTableTree,StringBuilder result,int depth){
  if (!this.hasContainers.isEmpty()) {
    boolean first=true;
    for (    HasContainer h : this.hasContainers) {
      if (!SqlgUtil.isBulkWithin(sqlgGraph,h)) {
        if (first) {
          first=false;
          result.append(""String_Node_Str"");
        }
 else {
          result.append(""String_Node_Str"");
        }
        WhereClause whereClause=WhereClause.from(h.getPredicate());
        result.append(whereClause.toSql(sqlgGraph,schemaTableTree,h));
      }
    }
    if (!first) {
      result.append(""String_Node_Str"");
    }
  }
  int count=1;
  if (!this.andOrHasContainers.isEmpty()) {
    result.append(""String_Node_Str"");
    for (int i=0; i < depth; i++) {
      result.append(""String_Node_Str"");
    }
    result.append(""String_Node_Str"");
  }
  for (  AndOrHasContainer andOrHasContainer : this.andOrHasContainers) {
    andOrHasContainer.toSql(sqlgGraph,schemaTableTree,result,depth + 1);
    if (count++ < this.andOrHasContainers.size()) {
switch (this.type) {
case AND:
        result.append(""String_Node_Str"");
      break;
case OR:
    result.append(""String_Node_Str"");
  break;
case NONE:
break;
}
}
}
if (!this.andOrHasContainers.isEmpty()) {
result.append(""String_Node_Str"");
for (int i=0; i < depth - 1; i++) {
result.append(""String_Node_Str"");
}
result.append(""String_Node_Str"");
}
}","private void toSql(SqlgGraph sqlgGraph,SchemaTableTree schemaTableTree,StringBuilder result,int depth){
  if (!this.hasContainers.isEmpty()) {
    boolean first=true;
    for (    HasContainer h : this.hasContainers) {
      if (!SqlgUtil.isBulkWithin(sqlgGraph,h)) {
        if (first) {
          first=false;
          result.append(""String_Node_Str"");
        }
 else {
          result.append(""String_Node_Str"");
        }
        String k=h.getKey();
        WhereClause whereClause=WhereClause.from(h.getPredicate());
        String bool=null;
        if (!k.equals(T.id.getAccessor())) {
          Map<String,PropertyType> pts=sqlgGraph.getTopology().getTableFor(schemaTableTree.getSchemaTable());
          if (pts != null && !pts.containsKey(k)) {
            Multimap<String,Object> keyValueMap=LinkedListMultimap.create();
            whereClause.putKeyValueMap(h,keyValueMap);
            if (keyValueMap.size() > 0) {
              bool=""String_Node_Str"";
            }
 else {
              if (Existence.NULL.equals(h.getBiPredicate())) {
                bool=""String_Node_Str"";
              }
 else {
                bool=""String_Node_Str"";
              }
            }
          }
        }
        if (bool != null) {
          result.append(bool);
        }
 else {
          result.append(whereClause.toSql(sqlgGraph,schemaTableTree,h));
        }
      }
    }
    if (!first) {
      result.append(""String_Node_Str"");
    }
  }
  int count=1;
  if (!this.andOrHasContainers.isEmpty()) {
    result.append(""String_Node_Str"");
    for (int i=0; i < depth; i++) {
      result.append(""String_Node_Str"");
    }
    result.append(""String_Node_Str"");
  }
  for (  AndOrHasContainer andOrHasContainer : this.andOrHasContainers) {
    andOrHasContainer.toSql(sqlgGraph,schemaTableTree,result,depth + 1);
    if (count++ < this.andOrHasContainers.size()) {
switch (this.type) {
case AND:
        result.append(""String_Node_Str"");
      break;
case OR:
    result.append(""String_Node_Str"");
  break;
case NONE:
break;
}
}
}
if (!this.andOrHasContainers.isEmpty()) {
result.append(""String_Node_Str"");
for (int i=0; i < depth - 1; i++) {
result.append(""String_Node_Str"");
}
result.append(""String_Node_Str"");
}
}",0.7683863885839737
166888,"private String constructSelectSinglePathSql(SqlgGraph sqlgGraph,boolean partOfDuplicateQuery,LinkedList<SchemaTableTree> distinctQueryStack,SchemaTableTree lastOfPrevious,SchemaTableTree firstOfNextStack,Set<SchemaTableTree> leftJoinOn,boolean dropStep){
  StringBuilder singlePathSql=new StringBuilder(""String_Node_Str"");
  SchemaTableTree firstSchemaTableTree=distinctQueryStack.getFirst();
  SchemaTable firstSchemaTable=firstSchemaTableTree.getSchemaTable();
  if (!dropStep && lastOfPrevious == null && distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP) {
    if (this.parentIdsAndIndexes.size() == 1) {
      singlePathSql.append(this.parentIdsAndIndexes.get(0).getRight());
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
 else     if (sqlgGraph.getSqlDialect().supportsValuesExpression()) {
      if (sqlgGraph.getSqlDialect().supportsFullValueExpression()) {
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      }
 else {
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      }
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
 else {
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
    singlePathSql.append(""String_Node_Str"");
  }
  singlePathSql.append(constructFromClause(sqlgGraph,distinctQueryStack,lastOfPrevious,firstOfNextStack,dropStep));
  singlePathSql.append(""String_Node_Str"");
  singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTableTree.getSchemaTable().getSchema()));
  singlePathSql.append(""String_Node_Str"");
  singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTableTree.getSchemaTable().getTable()));
  SchemaTableTree previous=firstSchemaTableTree;
  boolean skipFirst=true;
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    if (skipFirst) {
      skipFirst=false;
      continue;
    }
    singlePathSql.append(constructJoinBetweenSchemaTables(sqlgGraph,previous,schemaTableTree));
    previous=schemaTableTree;
  }
  SchemaTableTree previousLeftJoinSchemaTableTree=null;
  for (  SchemaTableTree schemaTableTree : leftJoinOn) {
    if (previousLeftJoinSchemaTableTree == null || !previousLeftJoinSchemaTableTree.getSchemaTable().equals(schemaTableTree.getSchemaTable())) {
      singlePathSql.append(constructJoinBetweenSchemaTables(sqlgGraph,previous,schemaTableTree,true));
    }
 else {
      singlePathSql.append(appendToJoinBetweenSchemaTables(sqlgGraph,previous,schemaTableTree,true));
    }
    previousLeftJoinSchemaTableTree=schemaTableTree;
  }
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    if (sqlgGraph.getSqlDialect().supportsBulkWithinOut() && schemaTableTree.hasBulkWithinOrOut(sqlgGraph)) {
      singlePathSql.append(schemaTableTree.bulkWithJoin(sqlgGraph));
    }
  }
  MutableBoolean mutableWhere=new MutableBoolean(false);
  MutableBoolean mutableOrderBy=new MutableBoolean(false);
  if (lastOfPrevious == null && distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP) {
    if (this.parentIdsAndIndexes.size() != 1 && sqlgGraph.getSqlDialect().supportsValuesExpression()) {
      singlePathSql.append(""String_Node_Str"");
      int count=1;
      for (      Pair<Long,Long> parentIdAndIndex : this.parentIdsAndIndexes) {
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(parentIdAndIndex.getLeft());
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(parentIdAndIndex.getRight());
        singlePathSql.append(""String_Node_Str"");
        if (count++ < this.parentIdsAndIndexes.size()) {
          singlePathSql.append(""String_Node_Str"");
        }
      }
      if (sqlgGraph.getSqlDialect().supportsFullValueExpression()) {
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema()));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable()));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(Topology.ID));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      }
 else {
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema()));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable()));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(Topology.ID));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      }
    }
 else     if (this.parentIdsAndIndexes.size() != 1 && !sqlgGraph.getSqlDialect().supportsValuesExpression()) {
      SecureRandom random=new SecureRandom();
      byte bytes[]=new byte[6];
      random.nextBytes(bytes);
      String tmpTableIdentified=Base64.getEncoder().encodeToString(bytes);
      sqlgGraph.tx().normalBatchModeOn();
      for (      Pair<Long,Long> parentIdsAndIndex : this.parentIdsAndIndexes) {
        sqlgGraph.addTemporaryVertex(T.label,tmpTableIdentified,""String_Node_Str"",parentIdsAndIndex.getLeft(),""String_Node_Str"",parentIdsAndIndex.getRight());
      }
      sqlgGraph.tx().flush();
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(sqlgGraph.getSqlDialect().getPublicSchema()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(VERTEX_PREFIX + tmpTableIdentified));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(Topology.ID));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
 else {
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(Topology.ID));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(this.parentIdsAndIndexes.get(0).getLeft());
      mutableWhere.setTrue();
    }
  }
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    singlePathSql.append(schemaTableTree.toWhereClause(sqlgGraph,mutableWhere));
  }
  for (  SchemaTableTree schemaTableTree : leftJoinOn) {
    singlePathSql.append(schemaTableTree.toOptionalLeftJoinWhereClause(sqlgGraph,mutableWhere));
  }
  if (!partOfDuplicateQuery) {
    if (!dropStep && lastOfPrevious == null && distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP) {
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      mutableOrderBy.setTrue();
    }
    for (    SchemaTableTree schemaTableTree : distinctQueryStack) {
      singlePathSql.append(schemaTableTree.toOrderByClause(sqlgGraph,mutableOrderBy,-1));
      singlePathSql.append(schemaTableTree.toRangeClause(sqlgGraph,mutableOrderBy));
    }
  }
  return singlePathSql.toString();
}","private String constructSelectSinglePathSql(SqlgGraph sqlgGraph,boolean partOfDuplicateQuery,LinkedList<SchemaTableTree> distinctQueryStack,SchemaTableTree lastOfPrevious,SchemaTableTree firstOfNextStack,Set<SchemaTableTree> leftJoinOn,boolean dropStep){
  StringBuilder singlePathSql=new StringBuilder(""String_Node_Str"");
  SchemaTableTree firstSchemaTableTree=distinctQueryStack.getFirst();
  SchemaTable firstSchemaTable=firstSchemaTableTree.getSchemaTable();
  if (!dropStep && lastOfPrevious == null && distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP) {
    if (this.parentIdsAndIndexes.size() == 1) {
      singlePathSql.append(this.parentIdsAndIndexes.get(0).getRight());
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
 else     if (sqlgGraph.getSqlDialect().supportsValuesExpression()) {
      if (sqlgGraph.getSqlDialect().supportsFullValueExpression()) {
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      }
 else {
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      }
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
 else {
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
    singlePathSql.append(""String_Node_Str"");
  }
  singlePathSql.append(constructFromClause(sqlgGraph,distinctQueryStack,lastOfPrevious,firstOfNextStack,dropStep));
  singlePathSql.append(""String_Node_Str"");
  singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTableTree.getSchemaTable().getSchema()));
  singlePathSql.append(""String_Node_Str"");
  singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTableTree.getSchemaTable().getTable()));
  SchemaTableTree previous=firstSchemaTableTree;
  boolean skipFirst=true;
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    if (skipFirst) {
      skipFirst=false;
      continue;
    }
    singlePathSql.append(constructJoinBetweenSchemaTables(sqlgGraph,previous,schemaTableTree));
    previous=schemaTableTree;
  }
  SchemaTableTree previousLeftJoinSchemaTableTree=null;
  for (  SchemaTableTree schemaTableTree : leftJoinOn) {
    if (previousLeftJoinSchemaTableTree == null || !previousLeftJoinSchemaTableTree.getSchemaTable().equals(schemaTableTree.getSchemaTable())) {
      singlePathSql.append(constructJoinBetweenSchemaTables(sqlgGraph,previous,schemaTableTree,true));
    }
 else {
      singlePathSql.append(appendToJoinBetweenSchemaTables(sqlgGraph,previous,schemaTableTree,true));
    }
    previousLeftJoinSchemaTableTree=schemaTableTree;
  }
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    if (sqlgGraph.getSqlDialect().supportsBulkWithinOut() && schemaTableTree.hasBulkWithinOrOut(sqlgGraph)) {
      singlePathSql.append(schemaTableTree.bulkWithJoin(sqlgGraph));
    }
  }
  MutableBoolean mutableWhere=new MutableBoolean(false);
  MutableBoolean mutableOrderBy=new MutableBoolean(false);
  if (lastOfPrevious == null && distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP) {
    if (this.parentIdsAndIndexes.size() != 1 && sqlgGraph.getSqlDialect().supportsValuesExpression()) {
      singlePathSql.append(""String_Node_Str"");
      int count=1;
      for (      Pair<Long,Long> parentIdAndIndex : this.parentIdsAndIndexes) {
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(parentIdAndIndex.getLeft());
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(parentIdAndIndex.getRight());
        singlePathSql.append(""String_Node_Str"");
        if (count++ < this.parentIdsAndIndexes.size()) {
          singlePathSql.append(""String_Node_Str"");
        }
      }
      if (sqlgGraph.getSqlDialect().supportsFullValueExpression()) {
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema()));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable()));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(Topology.ID));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      }
 else {
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema()));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable()));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(Topology.ID));
        singlePathSql.append(""String_Node_Str"");
        singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      }
    }
 else     if (this.parentIdsAndIndexes.size() != 1 && !sqlgGraph.getSqlDialect().supportsValuesExpression()) {
      SecureRandom random=new SecureRandom();
      byte bytes[]=new byte[6];
      random.nextBytes(bytes);
      String tmpTableIdentified=Base64.getEncoder().encodeToString(bytes);
      sqlgGraph.tx().normalBatchModeOn();
      for (      Pair<Long,Long> parentIdsAndIndex : this.parentIdsAndIndexes) {
        sqlgGraph.addTemporaryVertex(T.label,tmpTableIdentified,""String_Node_Str"",parentIdsAndIndex.getLeft(),""String_Node_Str"",parentIdsAndIndex.getRight());
      }
      sqlgGraph.tx().flush();
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(sqlgGraph.getSqlDialect().getPublicSchema()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(VERTEX_PREFIX + tmpTableIdentified));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(Topology.ID));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
 else {
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(Topology.ID));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(this.parentIdsAndIndexes.get(0).getLeft());
      mutableWhere.setTrue();
    }
  }
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    singlePathSql.append(schemaTableTree.toWhereClause(sqlgGraph,mutableWhere));
  }
  for (  SchemaTableTree schemaTableTree : leftJoinOn) {
    singlePathSql.append(schemaTableTree.toOptionalLeftJoinWhereClause(sqlgGraph,mutableWhere));
    if (dropStep) {
      String rawLabel;
      if (schemaTableTree.getSchemaTable().getTable().startsWith(VERTEX_PREFIX)) {
        rawLabel=schemaTableTree.getSchemaTable().getTable().substring(VERTEX_PREFIX.length());
      }
 else {
        rawLabel=schemaTableTree.getSchemaTable().getTable();
      }
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(previous.getSchemaTable().getSchema()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(previous.getSchemaTable().getTable()));
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getSchema() + ""String_Node_Str"" + rawLabel+ (schemaTableTree.getDirection() == Direction.IN ? Topology.OUT_VERTEX_COLUMN_END : Topology.IN_VERTEX_COLUMN_END)));
      singlePathSql.append(""String_Node_Str"");
    }
  }
  if (!partOfDuplicateQuery) {
    if (!dropStep && lastOfPrevious == null && distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP) {
      singlePathSql.append(""String_Node_Str"");
      singlePathSql.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
      mutableOrderBy.setTrue();
    }
    for (    SchemaTableTree schemaTableTree : distinctQueryStack) {
      singlePathSql.append(schemaTableTree.toOrderByClause(sqlgGraph,mutableOrderBy,-1));
      singlePathSql.append(schemaTableTree.toRangeClause(sqlgGraph,mutableOrderBy));
    }
  }
  return singlePathSql.toString();
}",0.9461077844311376
166889,"void addToEdgeForeignKeyCache(String name,String foreignKey){
  Preconditions.checkState(isSqlWriteLockHeldByCurrentThread() || isTopologyMapWriteLockHeldByCurrentThread());
  Set<String> foreignKeys=this.edgeForeignKeyCache.get(name);
  if (foreignKeys == null) {
    foreignKeys=new HashSet<>();
    foreignKeys.add(foreignKey);
    this.edgeForeignKeyCache.put(name,foreignKeys);
  }
 else {
    foreignKeys.add(foreignKey);
  }
}","void addToEdgeForeignKeyCache(String name,String foreignKey){
  Preconditions.checkState(isSqlWriteLockHeldByCurrentThread() || isTopologyMapWriteLockHeldByCurrentThread());
  Set<String> foreignKeys=this.edgeForeignKeyCache.get(name);
  if (foreignKeys == null) {
    foreignKeys=new HashSet<>();
    this.edgeForeignKeyCache.put(name,foreignKeys);
  }
  foreignKeys.add(foreignKey);
}",0.8693528693528694
166890,"/** 
 * remove a given schema
 * @param schema       the schema
 * @param preserveData should we preserve the SQL data?
 */
void removeSchema(Schema schema,boolean preserveData){
  lock();
  if (!this.uncommittedRemovedSchemas.contains(schema.getName())) {
    for (    VertexLabel vlbl : schema.getVertexLabels().values()) {
      for (      EdgeRole er : vlbl.getInEdgeRoles().values()) {
        if (er.getEdgeLabel().getSchema() != schema) {
          er.remove(preserveData);
        }
      }
    }
    this.uncommittedRemovedSchemas.add(schema.getName());
    TopologyManager.removeSchema(sqlgGraph,schema.getName());
    if (!preserveData) {
      schema.delete();
    }
    fire(schema,""String_Node_Str"",TopologyChangeAction.DELETE);
  }
}","/** 
 * remove a given schema
 * @param schema       the schema
 * @param preserveData should we preserve the SQL data?
 */
void removeSchema(Schema schema,boolean preserveData){
  lock();
  if (!this.uncommittedRemovedSchemas.contains(schema.getName())) {
    for (    VertexLabel vlbl : schema.getVertexLabels().values()) {
      for (      EdgeRole er : vlbl.getInEdgeRoles().values()) {
        if (er.getEdgeLabel().getSchema() != schema) {
          er.remove(preserveData);
        }
      }
      for (      EdgeRole er : vlbl.getOutEdgeRoles().values()) {
        if (er.getEdgeLabel().getSchema() == schema) {
          for (          EdgeRole erIn : er.getEdgeLabel().getInEdgeRoles()) {
            if (erIn.getVertexLabel().getSchema() != schema) {
              erIn.remove(preserveData);
            }
          }
        }
      }
    }
    this.uncommittedRemovedSchemas.add(schema.getName());
    TopologyManager.removeSchema(sqlgGraph,schema.getName());
    if (!preserveData) {
      schema.delete();
    }
    fire(schema,""String_Node_Str"",TopologyChangeAction.DELETE);
  }
}",0.8112798264642083
166891,"void removeFromEdgeForeignKeyCache(String name,String foreignKey){
  Preconditions.checkState(isSqlWriteLockHeldByCurrentThread() || isTopologyMapWriteLockHeldByCurrentThread());
  Set<String> foreignKeys=this.edgeForeignKeyCache.get(name);
  if (foreignKeys != null) {
    foreignKeys.remove(foreignKey);
  }
  if (foreignKeys.isEmpty()) {
    this.edgeForeignKeyCache.remove(name);
  }
}","void removeFromEdgeForeignKeyCache(String name,String foreignKey){
  Preconditions.checkState(isSqlWriteLockHeldByCurrentThread() || isTopologyMapWriteLockHeldByCurrentThread());
  Set<String> foreignKeys=this.edgeForeignKeyCache.get(name);
  if (foreignKeys != null) {
    foreignKeys.remove(foreignKey);
    if (foreignKeys.isEmpty()) {
      this.edgeForeignKeyCache.remove(name);
    }
  }
}",0.8035714285714286
166892,"private void toSql(SqlgGraph sqlgGraph,SchemaTableTree schemaTableTree,StringBuilder result,int depth){
  if (!this.hasContainers.isEmpty()) {
    boolean first=true;
    for (    HasContainer h : this.hasContainers) {
      if (!SqlgUtil.isBulkWithin(sqlgGraph,h)) {
        if (first) {
          first=false;
          result.append(""String_Node_Str"");
        }
        WhereClause whereClause=WhereClause.from(h.getPredicate());
        result.append(whereClause.toSql(sqlgGraph,schemaTableTree,h));
      }
    }
    if (!first) {
      result.append(""String_Node_Str"");
    }
  }
  int count=1;
  if (!this.andOrHasContainers.isEmpty()) {
    result.append(""String_Node_Str"");
    for (int i=0; i < depth; i++) {
      result.append(""String_Node_Str"");
    }
    result.append(""String_Node_Str"");
  }
  for (  AndOrHasContainer andOrHasContainer : this.andOrHasContainers) {
    andOrHasContainer.toSql(sqlgGraph,schemaTableTree,result,depth + 1);
    if (count++ < this.andOrHasContainers.size()) {
switch (this.type) {
case AND:
        result.append(""String_Node_Str"");
      break;
case OR:
    result.append(""String_Node_Str"");
  break;
case NONE:
break;
}
}
}
if (!this.andOrHasContainers.isEmpty()) {
result.append(""String_Node_Str"");
for (int i=0; i < depth - 1; i++) {
result.append(""String_Node_Str"");
}
result.append(""String_Node_Str"");
}
}","private void toSql(SqlgGraph sqlgGraph,SchemaTableTree schemaTableTree,StringBuilder result,int depth){
  if (!this.hasContainers.isEmpty()) {
    boolean first=true;
    for (    HasContainer h : this.hasContainers) {
      if (!SqlgUtil.isBulkWithin(sqlgGraph,h)) {
        if (first) {
          first=false;
          result.append(""String_Node_Str"");
        }
 else {
          result.append(""String_Node_Str"");
        }
        WhereClause whereClause=WhereClause.from(h.getPredicate());
        result.append(whereClause.toSql(sqlgGraph,schemaTableTree,h));
      }
    }
    if (!first) {
      result.append(""String_Node_Str"");
    }
  }
  int count=1;
  if (!this.andOrHasContainers.isEmpty()) {
    result.append(""String_Node_Str"");
    for (int i=0; i < depth; i++) {
      result.append(""String_Node_Str"");
    }
    result.append(""String_Node_Str"");
  }
  for (  AndOrHasContainer andOrHasContainer : this.andOrHasContainers) {
    andOrHasContainer.toSql(sqlgGraph,schemaTableTree,result,depth + 1);
    if (count++ < this.andOrHasContainers.size()) {
switch (this.type) {
case AND:
        result.append(""String_Node_Str"");
      break;
case OR:
    result.append(""String_Node_Str"");
  break;
case NONE:
break;
}
}
}
if (!this.andOrHasContainers.isEmpty()) {
result.append(""String_Node_Str"");
for (int i=0; i < depth - 1; i++) {
result.append(""String_Node_Str"");
}
result.append(""String_Node_Str"");
}
}",0.9776817854571634
166893,"public static TYPE from(ConnectiveStep connectiveStep){
  if (connectiveStep instanceof AndStep) {
    return AND;
  }
 else   if (connectiveStep instanceof OrStep) {
    return OR;
  }
 else {
    return NONE;
  }
}","public static TYPE from(ConnectiveStep<?> connectiveStep){
  if (connectiveStep instanceof AndStep) {
    return AND;
  }
 else   if (connectiveStep instanceof OrStep) {
    return OR;
  }
 else {
    return NONE;
  }
}",0.993103448275862
166894,"@Test public void testOrStepOptimizedWith3Ors(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a4=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.sqlgGraph.tx().commit();
  DefaultGraphTraversal<Vertex,Vertex> traversal=(DefaultGraphTraversal<Vertex,Vertex>)this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").or(__.has(""String_Node_Str"",""String_Node_Str""),__.has(""String_Node_Str"",""String_Node_Str""),__.has(""String_Node_Str"",""String_Node_Str""));
  List<Vertex> vertices=traversal.toList();
  Assert.assertEquals(1,traversal.getSteps().size());
  Assert.assertEquals(3,vertices.size());
  Assert.assertTrue(vertices.contains(a1) && vertices.contains(a2) && vertices.contains(a3));
}","@Test public void testOrStepOptimizedWith3Ors(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.sqlgGraph.tx().commit();
  DefaultGraphTraversal<Vertex,Vertex> traversal=(DefaultGraphTraversal<Vertex,Vertex>)this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").or(__.has(""String_Node_Str"",""String_Node_Str""),__.has(""String_Node_Str"",""String_Node_Str""),__.has(""String_Node_Str"",""String_Node_Str""));
  List<Vertex> vertices=traversal.toList();
  Assert.assertEquals(1,traversal.getSteps().size());
  Assert.assertEquals(3,vertices.size());
  Assert.assertTrue(vertices.contains(a1) && vertices.contains(a2) && vertices.contains(a3));
}",0.99498997995992
166895,"void addToEdgeForeignKeyCache(String name,String foreignKey){
  Preconditions.checkState(isSqlWriteLockHeldByCurrentThread() || isTopologyMapWriteLockHeldByCurrentThread());
  Set<String> foreignKeys=this.edgeForeignKeyCache.get(name);
  if (foreignKeys == null) {
    foreignKeys=new HashSet<>();
    foreignKeys.add(foreignKey);
    this.edgeForeignKeyCache.put(name,foreignKeys);
  }
 else {
    foreignKeys.add(foreignKey);
  }
}","void addToEdgeForeignKeyCache(String name,String foreignKey){
  Preconditions.checkState(isSqlWriteLockHeldByCurrentThread() || isTopologyMapWriteLockHeldByCurrentThread());
  Set<String> foreignKeys=this.edgeForeignKeyCache.get(name);
  if (foreignKeys == null) {
    foreignKeys=new HashSet<>();
    this.edgeForeignKeyCache.put(name,foreignKeys);
  }
  foreignKeys.add(foreignKey);
}",0.8693528693528694
166896,"/** 
 * remove a given schema
 * @param schema       the schema
 * @param preserveData should we preserve the SQL data?
 */
void removeSchema(Schema schema,boolean preserveData){
  lock();
  if (!this.uncommittedRemovedSchemas.contains(schema.getName())) {
    for (    VertexLabel vlbl : schema.getVertexLabels().values()) {
      for (      EdgeRole er : vlbl.getInEdgeRoles().values()) {
        if (er.getEdgeLabel().getSchema() != schema) {
          er.remove(preserveData);
        }
      }
    }
    this.uncommittedRemovedSchemas.add(schema.getName());
    TopologyManager.removeSchema(sqlgGraph,schema.getName());
    if (!preserveData) {
      schema.delete();
    }
    fire(schema,""String_Node_Str"",TopologyChangeAction.DELETE);
  }
}","/** 
 * remove a given schema
 * @param schema       the schema
 * @param preserveData should we preserve the SQL data?
 */
void removeSchema(Schema schema,boolean preserveData){
  lock();
  if (!this.uncommittedRemovedSchemas.contains(schema.getName())) {
    for (    VertexLabel vlbl : schema.getVertexLabels().values()) {
      for (      EdgeRole er : vlbl.getInEdgeRoles().values()) {
        if (er.getEdgeLabel().getSchema() != schema) {
          er.remove(preserveData);
        }
      }
      for (      EdgeRole er : vlbl.getOutEdgeRoles().values()) {
        if (er.getEdgeLabel().getSchema() == schema) {
          for (          EdgeRole erIn : er.getEdgeLabel().getInEdgeRoles()) {
            if (erIn.getVertexLabel().getSchema() != schema) {
              erIn.remove(preserveData);
            }
          }
        }
      }
    }
    this.uncommittedRemovedSchemas.add(schema.getName());
    TopologyManager.removeSchema(sqlgGraph,schema.getName());
    if (!preserveData) {
      schema.delete();
    }
    fire(schema,""String_Node_Str"",TopologyChangeAction.DELETE);
  }
}",0.8112798264642083
166897,"void removeFromEdgeForeignKeyCache(String name,String foreignKey){
  Preconditions.checkState(isSqlWriteLockHeldByCurrentThread() || isTopologyMapWriteLockHeldByCurrentThread());
  Set<String> foreignKeys=this.edgeForeignKeyCache.get(name);
  if (foreignKeys != null) {
    foreignKeys.remove(foreignKey);
  }
  if (foreignKeys.isEmpty()) {
    this.edgeForeignKeyCache.remove(name);
  }
}","void removeFromEdgeForeignKeyCache(String name,String foreignKey){
  Preconditions.checkState(isSqlWriteLockHeldByCurrentThread() || isTopologyMapWriteLockHeldByCurrentThread());
  Set<String> foreignKeys=this.edgeForeignKeyCache.get(name);
  if (foreignKeys != null) {
    foreignKeys.remove(foreignKey);
    if (foreignKeys.isEmpty()) {
      this.edgeForeignKeyCache.remove(name);
    }
  }
}",0.8035714285714286
166898,"protected void handleHasSteps(ListIterator<Step<?,?>> iterator,int pathCount){
  int countToGoPrevious=0;
  while (iterator.hasNext()) {
    Step<?,?> currentStep=iterator.next();
    countToGoPrevious++;
    String notNullKey=null;
    String nullKey=null;
    if (currentStep instanceof HasContainerHolder) {
      HasContainerHolder hasContainerHolder=(HasContainerHolder)currentStep;
      List<HasContainer> hasContainers=hasContainerHolder.getHasContainers();
      List<HasContainer> toRemoveHasContainers=new ArrayList<>();
      toRemoveHasContainers.addAll(optimizeLabelHas(this.currentReplacedStep,hasContainers));
      toRemoveHasContainers.addAll(optimizeIdHas(this.currentReplacedStep,hasContainers));
      toRemoveHasContainers.addAll(optimizeHas(this.currentReplacedStep,hasContainers));
      toRemoveHasContainers.addAll(optimizeWithInOut(this.currentReplacedStep,hasContainers));
      toRemoveHasContainers.addAll(optimizeBetween(this.currentReplacedStep,hasContainers));
      toRemoveHasContainers.addAll(optimizeInside(this.currentReplacedStep,hasContainers));
      toRemoveHasContainers.addAll(optimizeOutside(this.currentReplacedStep,hasContainers));
      toRemoveHasContainers.addAll(optimizeTextContains(this.currentReplacedStep,hasContainers));
      if (toRemoveHasContainers.size() == hasContainers.size()) {
        if (!currentStep.getLabels().isEmpty()) {
          final IdentityStep identityStep=new IdentityStep<>(this.traversal);
          currentStep.getLabels().forEach(l -> this.currentReplacedStep.addLabel(pathCount + BaseStrategy.PATH_LABEL_SUFFIX + l));
          TraversalHelper.insertAfterStep(identityStep,currentStep,this.traversal);
        }
        if (this.traversal.getSteps().contains(currentStep)) {
          this.traversal.removeStep(currentStep);
        }
        iterator.remove();
        countToGoPrevious--;
      }
    }
 else     if ((notNullKey=isNotNullStep(currentStep)) != null) {
      this.currentReplacedStep.addHasContainer(new HasContainer(notNullKey,new P<String>(Existence.NOTNULL,null)));
      if (!currentStep.getLabels().isEmpty()) {
        final IdentityStep identityStep=new IdentityStep<>(this.traversal);
        currentStep.getLabels().forEach(l -> this.currentReplacedStep.addLabel(pathCount + BaseStrategy.PATH_LABEL_SUFFIX + l));
        TraversalHelper.insertAfterStep(identityStep,currentStep,this.traversal);
      }
      if (this.traversal.getSteps().contains(currentStep)) {
        this.traversal.removeStep(currentStep);
      }
      iterator.remove();
      countToGoPrevious--;
    }
 else     if ((nullKey=isNullStep(currentStep)) != null) {
      this.currentReplacedStep.addHasContainer(new HasContainer(nullKey,new P<String>(Existence.NULL,null)));
      if (!currentStep.getLabels().isEmpty()) {
        final IdentityStep identityStep=new IdentityStep<>(this.traversal);
        currentStep.getLabels().forEach(l -> this.currentReplacedStep.addLabel(pathCount + BaseStrategy.PATH_LABEL_SUFFIX + l));
        TraversalHelper.insertAfterStep(identityStep,currentStep,this.traversal);
      }
      if (this.traversal.getSteps().contains(currentStep)) {
        this.traversal.removeStep(currentStep);
      }
      iterator.remove();
      countToGoPrevious--;
    }
 else     if (currentStep instanceof IdentityStep) {
    }
 else {
      for (int i=0; i < countToGoPrevious; i++) {
        iterator.previous();
      }
      break;
    }
  }
}","protected void handleHasSteps(ListIterator<Step<?,?>> iterator,int pathCount){
  int countToGoPrevious=0;
  while (iterator.hasNext()) {
    Step<?,?> currentStep=iterator.next();
    countToGoPrevious++;
    String notNullKey=null;
    String nullKey=null;
    if (currentStep instanceof HasContainerHolder) {
      HasContainerHolder hasContainerHolder=(HasContainerHolder)currentStep;
      List<HasContainer> hasContainers=hasContainerHolder.getHasContainers();
      if (isNotWithMultipleColumnValue(hasContainerHolder)) {
        List<HasContainer> toRemoveHasContainers=new ArrayList<>();
        toRemoveHasContainers.addAll(optimizeLabelHas(this.currentReplacedStep,hasContainers));
        toRemoveHasContainers.addAll(optimizeIdHas(this.currentReplacedStep,hasContainers));
        toRemoveHasContainers.addAll(optimizeHas(this.currentReplacedStep,hasContainers));
        toRemoveHasContainers.addAll(optimizeWithInOut(this.currentReplacedStep,hasContainers));
        toRemoveHasContainers.addAll(optimizeBetween(this.currentReplacedStep,hasContainers));
        toRemoveHasContainers.addAll(optimizeInside(this.currentReplacedStep,hasContainers));
        toRemoveHasContainers.addAll(optimizeOutside(this.currentReplacedStep,hasContainers));
        toRemoveHasContainers.addAll(optimizeTextContains(this.currentReplacedStep,hasContainers));
        if (toRemoveHasContainers.size() == hasContainers.size()) {
          if (!currentStep.getLabels().isEmpty()) {
            final IdentityStep identityStep=new IdentityStep<>(this.traversal);
            currentStep.getLabels().forEach(l -> this.currentReplacedStep.addLabel(pathCount + BaseStrategy.PATH_LABEL_SUFFIX + l));
            TraversalHelper.insertAfterStep(identityStep,currentStep,this.traversal);
          }
          if (this.traversal.getSteps().contains(currentStep)) {
            this.traversal.removeStep(currentStep);
          }
          iterator.remove();
          countToGoPrevious--;
        }
      }
    }
 else     if ((notNullKey=isNotNullStep(currentStep)) != null) {
      this.currentReplacedStep.addHasContainer(new HasContainer(notNullKey,new P<String>(Existence.NOTNULL,null)));
      if (!currentStep.getLabels().isEmpty()) {
        final IdentityStep identityStep=new IdentityStep<>(this.traversal);
        currentStep.getLabels().forEach(l -> this.currentReplacedStep.addLabel(pathCount + BaseStrategy.PATH_LABEL_SUFFIX + l));
        TraversalHelper.insertAfterStep(identityStep,currentStep,this.traversal);
      }
      if (this.traversal.getSteps().contains(currentStep)) {
        this.traversal.removeStep(currentStep);
      }
      iterator.remove();
      countToGoPrevious--;
    }
 else     if ((nullKey=isNullStep(currentStep)) != null) {
      this.currentReplacedStep.addHasContainer(new HasContainer(nullKey,new P<String>(Existence.NULL,null)));
      if (!currentStep.getLabels().isEmpty()) {
        final IdentityStep identityStep=new IdentityStep<>(this.traversal);
        currentStep.getLabels().forEach(l -> this.currentReplacedStep.addLabel(pathCount + BaseStrategy.PATH_LABEL_SUFFIX + l));
        TraversalHelper.insertAfterStep(identityStep,currentStep,this.traversal);
      }
      if (this.traversal.getSteps().contains(currentStep)) {
        this.traversal.removeStep(currentStep);
      }
      iterator.remove();
      countToGoPrevious--;
    }
 else     if (currentStep instanceof IdentityStep) {
    }
 else {
      for (int i=0; i < countToGoPrevious; i++) {
        iterator.previous();
      }
      break;
    }
  }
}",0.9840410373325734
166899,"private void testEqualsZonedDateTime2_assert(SqlgGraph sqlgGraph,ZonedDateTime born2){
  DefaultGraphTraversal<Vertex,Vertex> traversal=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.gt(born2));
  Assert.assertEquals(2,traversal.getSteps().size());
  List<Vertex> vertices=traversal.toList();
  Assert.assertEquals(1,traversal.getSteps().size());
  Assert.assertEquals(1,vertices.size());
}","private void testEqualsZonedDateTime2_assert(SqlgGraph sqlgGraph,ZonedDateTime born2){
  DefaultGraphTraversal<Vertex,Vertex> traversal=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.gt(born2));
  Assert.assertEquals(2,traversal.getSteps().size());
  List<Vertex> vertices=traversal.toList();
  Assert.assertEquals(2,traversal.getSteps().size());
  Assert.assertEquals(1,vertices.size());
}",0.8649237472766884
166900,"private void testEqualsZonedDateTime_assert(SqlgGraph sqlgGraph,ZonedDateTime born1,ZonedDateTime born2,ZonedDateTime born3,Vertex v1,Vertex v2,Vertex v3){
  DefaultGraphTraversal<Vertex,Vertex> traversal=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.eq(born1));
  Assert.assertEquals(2,traversal.getSteps().size());
  List<Vertex> vertices=traversal.toList();
  Assert.assertEquals(1,traversal.getSteps().size());
  Assert.assertEquals(1,vertices.size());
  Assert.assertEquals(v1,vertices.get(0));
  DefaultGraphTraversal<Vertex,Vertex> traversal1=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.eq(born2));
  Assert.assertEquals(2,traversal1.getSteps().size());
  vertices=traversal1.toList();
  Assert.assertEquals(1,traversal1.getSteps().size());
  Assert.assertEquals(1,vertices.size());
  Assert.assertEquals(v2,vertices.get(0));
  DefaultGraphTraversal<Vertex,Vertex> traversal2=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.lt(born3));
  Assert.assertEquals(2,traversal2.getSteps().size());
  vertices=traversal2.toList();
  Assert.assertEquals(1,traversal2.getSteps().size());
  Assert.assertEquals(2,vertices.size());
  Assert.assertTrue(vertices.contains(v1));
  Assert.assertTrue(vertices.contains(v2));
  DefaultGraphTraversal<Vertex,Vertex> traversal3=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.gt(born1));
  Assert.assertEquals(2,traversal3.getSteps().size());
  vertices=traversal3.toList();
  Assert.assertEquals(1,traversal3.getSteps().size());
  Assert.assertEquals(2,vertices.size());
  Assert.assertTrue(vertices.contains(v2));
  Assert.assertTrue(vertices.contains(v3));
  DefaultGraphTraversal<Vertex,Vertex> traversal4=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.between(born1,born3));
  Assert.assertEquals(2,traversal4.getSteps().size());
  vertices=traversal4.toList();
  Assert.assertEquals(1,traversal4.getSteps().size());
  Assert.assertEquals(2,vertices.size());
  Assert.assertTrue(vertices.contains(v1));
  Assert.assertTrue(vertices.contains(v2));
  DefaultGraphTraversal<Vertex,Vertex> traversal5=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.within(born1,born3));
  Assert.assertEquals(2,traversal5.getSteps().size());
  vertices=traversal5.toList();
  Assert.assertEquals(1,traversal5.getSteps().size());
  Assert.assertEquals(2,vertices.size());
  Assert.assertTrue(vertices.contains(v1));
  Assert.assertTrue(vertices.contains(v3));
}","private void testEqualsZonedDateTime_assert(SqlgGraph sqlgGraph,ZonedDateTime born1,ZonedDateTime born2,ZonedDateTime born3,Vertex v1,Vertex v2,Vertex v3){
  DefaultGraphTraversal<Vertex,Vertex> traversal=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.eq(born1));
  Assert.assertEquals(2,traversal.getSteps().size());
  List<Vertex> vertices=traversal.toList();
  Assert.assertEquals(2,traversal.getSteps().size());
  Assert.assertEquals(1,vertices.size());
  Assert.assertEquals(v1,vertices.get(0));
  DefaultGraphTraversal<Vertex,Vertex> traversal1=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.eq(born2));
  Assert.assertEquals(2,traversal1.getSteps().size());
  vertices=traversal1.toList();
  Assert.assertEquals(2,traversal1.getSteps().size());
  Assert.assertEquals(1,vertices.size());
  Assert.assertEquals(v2,vertices.get(0));
  DefaultGraphTraversal<Vertex,Vertex> traversal2=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.lt(born3));
  Assert.assertEquals(2,traversal2.getSteps().size());
  vertices=traversal2.toList();
  Assert.assertEquals(2,traversal2.getSteps().size());
  Assert.assertEquals(2,vertices.size());
  Assert.assertTrue(vertices.contains(v1));
  Assert.assertTrue(vertices.contains(v2));
  DefaultGraphTraversal<Vertex,Vertex> traversal3=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.gt(born1));
  Assert.assertEquals(2,traversal3.getSteps().size());
  vertices=traversal3.toList();
  Assert.assertEquals(2,traversal3.getSteps().size());
  Assert.assertEquals(2,vertices.size());
  Assert.assertTrue(vertices.contains(v2));
  Assert.assertTrue(vertices.contains(v3));
  DefaultGraphTraversal<Vertex,Vertex> traversal4=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.between(born1,born3));
  Assert.assertEquals(2,traversal4.getSteps().size());
  vertices=traversal4.toList();
  Assert.assertEquals(2,traversal4.getSteps().size());
  Assert.assertEquals(2,vertices.size());
  Assert.assertTrue(vertices.contains(v1));
  Assert.assertTrue(vertices.contains(v2));
  DefaultGraphTraversal<Vertex,Vertex> traversal5=(DefaultGraphTraversal<Vertex,Vertex>)sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").has(""String_Node_Str"",P.within(born1,born3));
  Assert.assertEquals(2,traversal5.getSteps().size());
  vertices=traversal5.toList();
  Assert.assertEquals(2,traversal5.getSteps().size());
  Assert.assertEquals(2,vertices.size());
  Assert.assertTrue(vertices.contains(v1));
  Assert.assertTrue(vertices.contains(v3));
}",0.9574544154451198
166901,"@Override public SqlgDataSource setup(String driver,Configuration configuration) throws Exception {
  Preconditions.checkState(configuration.containsKey(SqlgGraph.JDBC_URL));
  Preconditions.checkState(configuration.containsKey(""String_Node_Str""));
  Preconditions.checkState(configuration.containsKey(""String_Node_Str""));
  String connectURI=configuration.getString(SqlgGraph.JDBC_URL);
  String username=configuration.getString(""String_Node_Str"");
  String password=configuration.getString(""String_Node_Str"");
  ComboPooledDataSource comboPooledDataSource=new ComboPooledDataSource();
  comboPooledDataSource.setDriverClass(driver);
  comboPooledDataSource.setJdbcUrl(connectURI);
  comboPooledDataSource.setMaxPoolSize(configuration.getInt(""String_Node_Str"",100));
  comboPooledDataSource.setMaxIdleTime(configuration.getInt(""String_Node_Str"",3600));
  comboPooledDataSource.setForceUseNamedDriverClass(true);
  if (!StringUtils.isEmpty(username)) {
    comboPooledDataSource.setUser(username);
  }
  if (!StringUtils.isEmpty(username)) {
    comboPooledDataSource.setPassword(password);
  }
  return new C3P0DataSource(connectURI,comboPooledDataSource);
}","@Override public SqlgDataSource setup(String driver,Configuration configuration) throws Exception {
  Preconditions.checkState(configuration.containsKey(SqlgGraph.JDBC_URL));
  Preconditions.checkState(configuration.containsKey(""String_Node_Str""));
  Preconditions.checkState(configuration.containsKey(""String_Node_Str""));
  String connectURI=configuration.getString(SqlgGraph.JDBC_URL);
  String username=configuration.getString(""String_Node_Str"");
  String password=configuration.getString(""String_Node_Str"");
  ComboPooledDataSource comboPooledDataSource=new ComboPooledDataSource();
  comboPooledDataSource.setDriverClass(driver);
  comboPooledDataSource.setJdbcUrl(connectURI);
  comboPooledDataSource.setMaxPoolSize(configuration.getInt(""String_Node_Str"",100));
  comboPooledDataSource.setMaxIdleTime(configuration.getInt(""String_Node_Str"",3600));
  comboPooledDataSource.setForceUseNamedDriverClass(true);
  if (!StringUtils.isEmpty(username)) {
    comboPooledDataSource.setUser(username);
  }
  if (!StringUtils.isEmpty(password)) {
    comboPooledDataSource.setPassword(password);
  }
  return new C3P0DataSource(connectURI,comboPooledDataSource);
}",0.993097497842968
166902,"private static String constructOuterOrderByClause(SqlgGraph sqlgGraph,List<LinkedList<SchemaTableTree>> subQueryLinkedLists){
  String result=""String_Node_Str"";
  int countOuter=1;
  MutableBoolean mutableOrderBy=new MutableBoolean(false);
  for (  LinkedList<SchemaTableTree> subQueryLinkedList : subQueryLinkedLists) {
    int countInner=1;
    for (    SchemaTableTree schemaTableTree : subQueryLinkedList) {
      if (countOuter == subQueryLinkedLists.size() && countInner == subQueryLinkedList.size()) {
        result+=schemaTableTree.toOrderByClause(sqlgGraph,mutableOrderBy,countOuter);
        result+=schemaTableTree.toRangeClause(sqlgGraph,mutableOrderBy);
      }
      countInner++;
    }
    countOuter++;
  }
  return result;
}","private static String constructOuterOrderByClause(SqlgGraph sqlgGraph,List<LinkedList<SchemaTableTree>> subQueryLinkedLists){
  String result=""String_Node_Str"";
  int countOuter=1;
  int winningOrder=0;
  for (  LinkedList<SchemaTableTree> subQueryLinkedList : subQueryLinkedLists) {
    if (!subQueryLinkedList.isEmpty()) {
      SchemaTableTree schemaTableTree=subQueryLinkedList.peekLast();
      if (!schemaTableTree.getDbComparators().isEmpty()) {
        winningOrder=countOuter;
      }
    }
    countOuter++;
  }
  countOuter=1;
  MutableBoolean mutableOrderBy=new MutableBoolean(false);
  for (  LinkedList<SchemaTableTree> subQueryLinkedList : subQueryLinkedLists) {
    if (!subQueryLinkedList.isEmpty()) {
      SchemaTableTree schemaTableTree=subQueryLinkedList.peekLast();
      if (countOuter == winningOrder) {
        result+=schemaTableTree.toOrderByClause(sqlgGraph,mutableOrderBy,countOuter);
      }
      result+=schemaTableTree.toRangeClause(sqlgGraph,mutableOrderBy);
    }
    countOuter++;
  }
  return result;
}",0.4514317798989332
166903,"@Test public void testOrderOnEdgeWithInV(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Edge e1=a1.addEdge(""String_Node_Str"",b1,""String_Node_Str"",0);
  Edge e2=a1.addEdge(""String_Node_Str"",b2,""String_Node_Str"",11);
  Edge e3=a1.addEdge(""String_Node_Str"",b3,""String_Node_Str"",2);
  this.sqlgGraph.tx().commit();
  DefaultGraphTraversal<Vertex,Vertex> traversal=(DefaultGraphTraversal<Vertex,Vertex>)this.sqlgGraph.traversal().V(a1.id()).hasLabel(""String_Node_Str"").outE().order().by(""String_Node_Str"",Order.decr).inV();
  Assert.assertEquals(5,traversal.getSteps().size());
  List<Vertex> vertices=traversal.toList();
  Assert.assertEquals(1,traversal.getSteps().size());
  assertStep(traversal.getSteps().get(0),true,false,false,false);
  Assert.assertEquals(3,vertices.size());
  Assert.assertEquals(b2,vertices.get(0));
  Assert.assertEquals(b3,vertices.get(1));
  Assert.assertEquals(b1,vertices.get(2));
}","@Test public void testOrderOnEdgeWithInV(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1,""String_Node_Str"",0);
  a1.addEdge(""String_Node_Str"",b2,""String_Node_Str"",11);
  a1.addEdge(""String_Node_Str"",b3,""String_Node_Str"",2);
  this.sqlgGraph.tx().commit();
  DefaultGraphTraversal<Vertex,Vertex> traversal=(DefaultGraphTraversal<Vertex,Vertex>)this.sqlgGraph.traversal().V(a1.id()).outE(""String_Node_Str"").order().by(""String_Node_Str"",Order.decr).inV();
  assertEquals(4,traversal.getSteps().size());
  List<Vertex> vertices=traversal.toList();
  assertEquals(1,traversal.getSteps().size());
  assertStep(traversal.getSteps().get(0),true,false,false,false);
  assertEquals(3,vertices.size());
  assertEquals(b2,vertices.get(0));
  assertEquals(b3,vertices.get(1));
  assertEquals(b1,vertices.get(2));
  traversal=(DefaultGraphTraversal<Vertex,Vertex>)this.sqlgGraph.traversal().V(a1.id()).outE(""String_Node_Str"").order().by(""String_Node_Str"",Order.incr).inV();
  assertEquals(4,traversal.getSteps().size());
  vertices=traversal.toList();
  assertEquals(1,traversal.getSteps().size());
  assertStep(traversal.getSteps().get(0),true,false,false,false);
  assertEquals(3,vertices.size());
  assertEquals(b1,vertices.get(0));
  assertEquals(b3,vertices.get(1));
  assertEquals(b2,vertices.get(2));
}",0.7502807937102209
166904,"@Test public void testOrderOnEdge(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Edge e1=a1.addEdge(""String_Node_Str"",b1,""String_Node_Str"",0);
  Edge e2=a1.addEdge(""String_Node_Str"",b2,""String_Node_Str"",1);
  Edge e3=a1.addEdge(""String_Node_Str"",b3,""String_Node_Str"",2);
  this.sqlgGraph.tx().commit();
  DefaultGraphTraversal<Vertex,Edge> traversal=(DefaultGraphTraversal<Vertex,Edge>)this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").outE().order().by(""String_Node_Str"",Order.decr);
  Assert.assertEquals(4,traversal.getSteps().size());
  List<Edge> edges=traversal.toList();
  Assert.assertEquals(1,traversal.getSteps().size());
  assertStep(traversal.getSteps().get(0),true,false,false,false);
  Assert.assertEquals(3,edges.size());
  Assert.assertEquals(e3,edges.get(0));
  Assert.assertEquals(e2,edges.get(1));
  Assert.assertEquals(e1,edges.get(2));
}","@Test public void testOrderOnEdge(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Edge e1=a1.addEdge(""String_Node_Str"",b1,""String_Node_Str"",0);
  Edge e2=a1.addEdge(""String_Node_Str"",b2,""String_Node_Str"",1);
  Edge e3=a1.addEdge(""String_Node_Str"",b3,""String_Node_Str"",2);
  this.sqlgGraph.tx().commit();
  DefaultGraphTraversal<Vertex,Edge> traversal=(DefaultGraphTraversal<Vertex,Edge>)this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").outE().order().by(""String_Node_Str"",Order.decr);
  assertEquals(4,traversal.getSteps().size());
  List<Edge> edges=traversal.toList();
  assertEquals(1,traversal.getSteps().size());
  assertStep(traversal.getSteps().get(0),true,false,false,false);
  assertEquals(3,edges.size());
  assertEquals(e3,edges.get(0));
  assertEquals(e2,edges.get(1));
  assertEquals(e1,edges.get(2));
  traversal=(DefaultGraphTraversal<Vertex,Edge>)this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").outE().order().by(""String_Node_Str"",Order.incr);
  assertEquals(4,traversal.getSteps().size());
  edges=traversal.toList();
  assertEquals(1,traversal.getSteps().size());
  assertStep(traversal.getSteps().get(0),true,false,false,false);
  assertEquals(3,edges.size());
  assertEquals(e1,edges.get(0));
  assertEquals(e2,edges.get(1));
  assertEquals(e3,edges.get(2));
  traversal=(DefaultGraphTraversal<Vertex,Edge>)this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").outE().order().by(""String_Node_Str"");
  assertEquals(4,traversal.getSteps().size());
  edges=traversal.toList();
  assertEquals(1,traversal.getSteps().size());
  assertStep(traversal.getSteps().get(0),true,false,false,false);
  assertEquals(3,edges.size());
  assertEquals(e1,edges.get(0));
  assertEquals(e2,edges.get(1));
  assertEquals(e3,edges.get(2));
}",0.6801434626671014
166905,"public Optional<VertexLabel> getVertexLabel(String vertexLabelName){
  Preconditions.checkArgument(!vertexLabelName.startsWith(VERTEX_PREFIX),""String_Node_Str"",Topology.VERTEX_PREFIX);
  if (this.topology.isSqlWriteLockHeldByCurrentThread() && this.uncommittedRemovedVertexLabels.contains(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName)) {
    return Optional.empty();
  }
  VertexLabel result=this.vertexLabels.get(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName);
  if (result == null && this.topology.isSqlWriteLockHeldByCurrentThread()) {
    result=this.uncommittedVertexLabels.get(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName);
  }
  return Optional.ofNullable(result);
}","public Optional<VertexLabel> getVertexLabel(String vertexLabelName){
  Preconditions.checkArgument(!vertexLabelName.startsWith(VERTEX_PREFIX),""String_Node_Str"",Topology.VERTEX_PREFIX);
  if (this.topology.isSqlWriteLockHeldByCurrentThread() && this.uncommittedRemovedVertexLabels.contains(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName)) {
    return Optional.empty();
  }
  VertexLabel result=null;
  if (this.topology.isSqlWriteLockHeldByCurrentThread()) {
    result=this.uncommittedVertexLabels.get(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName);
  }
  if (result == null) {
    result=this.vertexLabels.get(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName);
  }
  return Optional.ofNullable(result);
}",0.8424611223799865
166906,"private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value).replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)).replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(shiftDST(s).toLocalTime().toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(escapeQuotes(value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(escapeQuotes(value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(escapeQuotes(PGbytea.toPGString((byte[])value)));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(escapeQuotes(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value))));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(shiftDST(s).toLocalTime().toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.990228267667292
166907,"@Override public String valueToValuesString(PropertyType propertyType,Object value){
  Preconditions.checkState(supportsType(propertyType),""String_Node_Str"",propertyType.name());
switch (propertyType) {
case BYTE_ARRAY:
    return ""String_Node_Str"" + PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)) + ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case byte_ARRAY:
  return ""String_Node_Str"" + PGbytea.toPGString((byte[])value) + ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case BOOLEAN:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case boolean_ARRAY:
StringBuilder sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case BOOLEAN_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case SHORT:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case short_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case SHORT_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case INTEGER:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case int_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case INTEGER_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LONG:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case long_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LONG_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case FLOAT:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case float_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case FLOAT_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case DOUBLE:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case double_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case DOUBLE_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case STRING:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case STRING_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LOCALDATE:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case LOCALDATE_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LOCALDATETIME:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case LOCALDATETIME_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LOCALTIME:
LocalTime lt=(LocalTime)value;
return ""String_Node_Str"" + shiftDST(lt).toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case LOCALTIME_ARRAY:
sb=new StringBuilder();
sb.append(""String_Node_Str"");
int length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
LocalTime valueOfArray=(LocalTime)java.lang.reflect.Array.get(value,i);
sb.append(shiftDST(valueOfArray).toString());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(this.propertyTypeToSqlDefinition(propertyType)[0]);
return sb.toString();
case ZONEDDATETIME:
throw new IllegalStateException(""String_Node_Str"");
case ZONEDDATETIME_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
case PERIOD:
throw new IllegalStateException(""String_Node_Str"");
case PERIOD_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
case DURATION:
throw new IllegalStateException(""String_Node_Str"");
case DURATION_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
case JSON:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case JSON_ARRAY:
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
String valueOfArray=java.lang.reflect.Array.get(value,i).toString();
sb.append(""String_Node_Str"");
sb.append(valueOfArray.replace(""String_Node_Str"",""String_Node_Str""));
sb.append(""String_Node_Str"");
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(this.propertyTypeToSqlDefinition(propertyType)[0]);
return sb.toString();
case POINT:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case LINESTRING:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case POLYGON:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case GEOGRAPHY_POINT:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case GEOGRAPHY_POLYGON:
return ""String_Node_Str"" + value.toString() + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
default :
throw SqlgExceptions.invalidPropertyType(propertyType);
}
}","@Override public String valueToValuesString(PropertyType propertyType,Object value){
  Preconditions.checkState(supportsType(propertyType),""String_Node_Str"",propertyType.name());
switch (propertyType) {
case BYTE_ARRAY:
    return ""String_Node_Str"" + PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)) + ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case byte_ARRAY:
  return ""String_Node_Str"" + PGbytea.toPGString((byte[])value) + ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case BOOLEAN:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case boolean_ARRAY:
StringBuilder sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case BOOLEAN_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case SHORT:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case short_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case SHORT_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case INTEGER:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case int_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case INTEGER_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LONG:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case long_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LONG_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case FLOAT:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case float_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case FLOAT_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case DOUBLE:
return value.toString() + ""String_Node_Str"" + this.propertyTypeToSqlDefinition(propertyType)[0];
case double_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case DOUBLE_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case STRING:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case STRING_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LOCALDATE:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case LOCALDATE_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LOCALDATETIME:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case LOCALDATETIME_ARRAY:
sb=toValuesArray(this.propertyTypeToSqlDefinition(propertyType)[0],value);
return sb.toString();
case LOCALTIME:
LocalTime lt=(LocalTime)value;
return ""String_Node_Str"" + escapeQuotes(shiftDST(lt)) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case LOCALTIME_ARRAY:
sb=new StringBuilder();
sb.append(""String_Node_Str"");
int length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
LocalTime valueOfArray=(LocalTime)java.lang.reflect.Array.get(value,i);
sb.append(shiftDST(valueOfArray).toString());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(this.propertyTypeToSqlDefinition(propertyType)[0]);
return sb.toString();
case ZONEDDATETIME:
throw new IllegalStateException(""String_Node_Str"");
case ZONEDDATETIME_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
case PERIOD:
throw new IllegalStateException(""String_Node_Str"");
case PERIOD_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
case DURATION:
throw new IllegalStateException(""String_Node_Str"");
case DURATION_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
case JSON:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case JSON_ARRAY:
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
String valueOfArray=java.lang.reflect.Array.get(value,i).toString();
sb.append(""String_Node_Str"");
sb.append(escapeQuotes(valueOfArray.replace(""String_Node_Str"",""String_Node_Str"")));
sb.append(""String_Node_Str"");
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(this.propertyTypeToSqlDefinition(propertyType)[0]);
return sb.toString();
case POINT:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case LINESTRING:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case POLYGON:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case GEOGRAPHY_POINT:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
case GEOGRAPHY_POLYGON:
return ""String_Node_Str"" + escapeQuotes(value) + ""String_Node_Str""+ ""String_Node_Str""+ this.propertyTypeToSqlDefinition(propertyType)[0];
default :
throw SqlgExceptions.invalidPropertyType(propertyType);
}
}",0.979720744680851
166908,"@Test public void testEscapedValuesWithinQuery(){
  String[] vals=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String s : vals) {
    this.sqlgGraph.addVertex(""String_Node_Str"").property(""String_Node_Str"",s);
  }
  this.sqlgGraph.tx().commit();
  assertEquals(vals.length,1L,this.sqlgGraph.traversal().V().has(""String_Node_Str"",P.within(vals)).count().next().longValue());
}","@Test public void testEscapedValuesWithinQuery(){
  String[] vals=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String s : vals) {
    this.sqlgGraph.addVertex(""String_Node_Str"").property(""String_Node_Str"",s);
  }
  this.sqlgGraph.tx().commit();
  assertEquals(vals.length,1L,this.sqlgGraph.traversal().V().has(""String_Node_Str"",P.within(vals)).count().next().longValue());
}",0.9808510638297872
166909,"@Test public void testEscapedValuesSingleQuery(){
  String[] vals=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String s : vals) {
    this.sqlgGraph.addVertex(""String_Node_Str"").property(""String_Node_Str"",s);
  }
  this.sqlgGraph.tx().commit();
  for (  String s : vals) {
    assertEquals(s,1L,this.sqlgGraph.traversal().V().has(""String_Node_Str"",s).count().next().longValue());
    assertEquals(s,s,this.sqlgGraph.traversal().V().has(""String_Node_Str"",s).values(""String_Node_Str"").next());
  }
}","@Test public void testEscapedValuesSingleQuery(){
  String[] vals=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String s : vals) {
    this.sqlgGraph.addVertex(""String_Node_Str"").property(""String_Node_Str"",s);
  }
  this.sqlgGraph.tx().commit();
  for (  String s : vals) {
    assertEquals(s,1L,this.sqlgGraph.traversal().V().has(""String_Node_Str"",s).count().next().longValue());
    assertEquals(s,s,this.sqlgGraph.traversal().V().has(""String_Node_Str"",s).values(""String_Node_Str"").next());
  }
}",0.984822934232715
166910,"@Test public void testEscapedValuesSingleQueryBatch(){
  Assume.assumeTrue(this.sqlgGraph.getSqlDialect().supportsBatchMode());
  this.sqlgGraph.tx().normalBatchModeOn();
  String[] vals=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String s : vals) {
    this.sqlgGraph.addVertex(""String_Node_Str"").property(""String_Node_Str"",s);
  }
  this.sqlgGraph.tx().commit();
  for (  String s : vals) {
    assertEquals(s,1L,this.sqlgGraph.traversal().V().has(""String_Node_Str"",s).count().next().longValue());
    assertEquals(s,s,this.sqlgGraph.traversal().V().has(""String_Node_Str"",s).values(""String_Node_Str"").next());
  }
}","@Test public void testEscapedValuesSingleQueryBatch(){
  Assume.assumeTrue(this.sqlgGraph.getSqlDialect().supportsBatchMode());
  this.sqlgGraph.tx().normalBatchModeOn();
  String[] vals=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String s : vals) {
    this.sqlgGraph.addVertex(""String_Node_Str"").property(""String_Node_Str"",s);
  }
  this.sqlgGraph.tx().commit();
  for (  String s : vals) {
    assertEquals(s,1L,this.sqlgGraph.traversal().V().has(""String_Node_Str"",s).count().next().longValue());
    assertEquals(s,s,this.sqlgGraph.traversal().V().has(""String_Node_Str"",s).values(""String_Node_Str"").next());
  }
}",0.9873949579831932
166911,"private String toOrderByClause(SqlgGraph sqlgGraph,MutableBoolean printedOrderBy,int counter){
  String result=""String_Node_Str"";
  for (  org.javatuples.Pair<Traversal.Admin<?,?>,Comparator<?>> comparator : this.getDbComparators()) {
    if (!printedOrderBy.booleanValue()) {
      printedOrderBy.setTrue();
      result+=""String_Node_Str"";
    }
 else {
      result+=""String_Node_Str"";
    }
    if (comparator.getValue1() instanceof ElementValueComparator) {
      ElementValueComparator elementValueComparator=(ElementValueComparator)comparator.getValue1();
      String prefix=this.getSchemaTable().getSchema();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=this.getSchemaTable().getTable();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=elementValueComparator.getPropertyKey();
      String alias;
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getColumnNameAliasMap().get(prefix));
      }
 else {
        alias=""String_Node_Str"" + counter + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getColumnNameAliasMap().get(prefix));
      }
      result+=""String_Node_Str"" + alias;
      if (elementValueComparator.getValueComparator() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (elementValueComparator.getValueComparator() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + elementValueComparator.getValueComparator().toString());
      }
    }
 else     if (comparator.getValue0() instanceof ElementValueTraversal<?> && comparator.getValue1() instanceof Order) {
      ElementValueTraversal elementValueTraversal=(ElementValueTraversal)comparator.getValue0();
      String prefix=String.valueOf(this.stepDepth);
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=this.reducedLabels();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=this.getSchemaTable().getSchema();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=this.getSchemaTable().getTable();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=elementValueTraversal.getPropertyKey();
      String alias;
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getColumnNameAliasMap().get(prefix));
        if (alias.equals(""String_Node_Str"")) {
          throw new IllegalArgumentException(""String_Node_Str"" + elementValueTraversal.getPropertyKey() + ""String_Node_Str"");
        }
      }
 else {
        alias=""String_Node_Str"" + counter + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getColumnNameAliasMap().get(prefix));
      }
      result+=""String_Node_Str"" + alias;
      if (comparator.getValue1() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (comparator.getValue1() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + comparator.getValue1().toString());
      }
    }
 else {
      Preconditions.checkState(comparator.getValue0().getSteps().size() == 1,""String_Node_Str"");
      Preconditions.checkState(comparator.getValue0().getSteps().get(0) instanceof SelectOneStep,""String_Node_Str"");
      SelectOneStep selectOneStep=(SelectOneStep)comparator.getValue0().getSteps().get(0);
      Preconditions.checkState(selectOneStep.getScopeKeys().size() == 1,""String_Node_Str"");
      Preconditions.checkState(selectOneStep.getLocalChildren().size() == 1,""String_Node_Str"");
      Traversal.Admin<?,?> t=(Traversal.Admin<?,?>)selectOneStep.getLocalChildren().get(0);
      Preconditions.checkState(t instanceof ElementValueTraversal || t instanceof TokenTraversal,""String_Node_Str"");
      String select=(String)selectOneStep.getScopeKeys().iterator().next();
      SchemaTableTree selectSchemaTableTree=findSelectSchemaTable(select);
      Preconditions.checkState(selectSchemaTableTree != null,""String_Node_Str"" + select);
      String prefix;
      if (selectSchemaTableTree.children.isEmpty()) {
        prefix=String.valueOf(selectSchemaTableTree.stepDepth);
        prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      }
 else {
        prefix=String.valueOf(selectSchemaTableTree.stepDepth);
        prefix+=SchemaTableTree.ALIAS_SEPARATOR;
        prefix+=selectSchemaTableTree.labels.iterator().next();
        prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      }
      prefix+=selectSchemaTableTree.getSchemaTable().getSchema();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=selectSchemaTableTree.getSchemaTable().getTable();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      if (t instanceof ElementValueTraversal) {
        ElementValueTraversal elementValueTraversal=(ElementValueTraversal)t;
        prefix+=elementValueTraversal.getPropertyKey();
      }
 else {
        TokenTraversal tokenTraversal=(TokenTraversal)t;
        prefix+=tokenTraversal.getToken().getAccessor();
      }
      String alias;
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getColumnNameAliasMap().get(prefix));
      }
 else {
        alias=""String_Node_Str"" + selectSchemaTableTree.stepDepth + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getColumnNameAliasMap().get(prefix));
      }
      result+=""String_Node_Str"" + alias;
      if (comparator.getValue1() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (comparator.getValue1() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + comparator.toString());
      }
    }
  }
  return result;
}","private String toOrderByClause(SqlgGraph sqlgGraph,MutableBoolean printedOrderBy,int counter){
  String result=""String_Node_Str"";
  for (  org.javatuples.Pair<Traversal.Admin<?,?>,Comparator<?>> comparator : this.getDbComparators()) {
    if (!printedOrderBy.booleanValue()) {
      printedOrderBy.setTrue();
      result+=""String_Node_Str"";
    }
 else {
      result+=""String_Node_Str"";
    }
    if (comparator.getValue1() instanceof ElementValueComparator) {
      ElementValueComparator<?> elementValueComparator=(ElementValueComparator<?>)comparator.getValue1();
      String prefix=this.getSchemaTable().getSchema();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=this.getSchemaTable().getTable();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=elementValueComparator.getPropertyKey();
      String alias;
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getColumnNameAliasMap().get(prefix));
      }
 else {
        alias=""String_Node_Str"" + counter + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getColumnNameAliasMap().get(prefix));
      }
      result+=""String_Node_Str"" + alias;
      if (elementValueComparator.getValueComparator() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (elementValueComparator.getValueComparator() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + elementValueComparator.getValueComparator().toString());
      }
    }
 else     if ((comparator.getValue0() instanceof ElementValueTraversal<?> || comparator.getValue0() instanceof TokenTraversal<?,?>) && comparator.getValue1() instanceof Order) {
      Traversal.Admin<?,?> t=(Traversal.Admin<?,?>)comparator.getValue0();
      String prefix=String.valueOf(this.stepDepth);
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=this.reducedLabels();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=this.getSchemaTable().getSchema();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=this.getSchemaTable().getTable();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      String key;
      if (t instanceof ElementValueTraversal) {
        ElementValueTraversal<?> elementValueTraversal=(ElementValueTraversal<?>)t;
        key=elementValueTraversal.getPropertyKey();
      }
 else {
        TokenTraversal<?,?> tokenTraversal=(TokenTraversal<?,?>)t;
        if (tokenTraversal.getToken().equals(T.id)) {
          key=Topology.ID;
        }
 else {
          key=tokenTraversal.getToken().getAccessor();
        }
      }
      prefix+=key;
      String alias;
      String rawAlias=this.getColumnNameAliasMap().get(prefix);
      if (rawAlias == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + prefix + ""String_Node_Str"");
      }
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(rawAlias);
      }
 else {
        alias=""String_Node_Str"" + counter + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(rawAlias);
      }
      result+=""String_Node_Str"" + alias;
      if (comparator.getValue1() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (comparator.getValue1() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + comparator.getValue1().toString());
      }
    }
 else {
      Preconditions.checkState(comparator.getValue0().getSteps().size() == 1,""String_Node_Str"");
      Preconditions.checkState(comparator.getValue0().getSteps().get(0) instanceof SelectOneStep,""String_Node_Str"");
      SelectOneStep selectOneStep=(SelectOneStep)comparator.getValue0().getSteps().get(0);
      Preconditions.checkState(selectOneStep.getScopeKeys().size() == 1,""String_Node_Str"");
      Preconditions.checkState(selectOneStep.getLocalChildren().size() == 1,""String_Node_Str"");
      Traversal.Admin<?,?> t=(Traversal.Admin<?,?>)selectOneStep.getLocalChildren().get(0);
      Preconditions.checkState(t instanceof ElementValueTraversal || t instanceof TokenTraversal,""String_Node_Str"");
      String select=(String)selectOneStep.getScopeKeys().iterator().next();
      SchemaTableTree selectSchemaTableTree=findSelectSchemaTable(select);
      Preconditions.checkState(selectSchemaTableTree != null,""String_Node_Str"" + select);
      String prefix;
      if (selectSchemaTableTree.children.isEmpty()) {
        prefix=String.valueOf(selectSchemaTableTree.stepDepth);
        prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      }
 else {
        prefix=String.valueOf(selectSchemaTableTree.stepDepth);
        prefix+=SchemaTableTree.ALIAS_SEPARATOR;
        prefix+=selectSchemaTableTree.labels.iterator().next();
        prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      }
      prefix+=selectSchemaTableTree.getSchemaTable().getSchema();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      prefix+=selectSchemaTableTree.getSchemaTable().getTable();
      prefix+=SchemaTableTree.ALIAS_SEPARATOR;
      if (t instanceof ElementValueTraversal) {
        ElementValueTraversal<?> elementValueTraversal=(ElementValueTraversal<?>)t;
        prefix+=elementValueTraversal.getPropertyKey();
      }
 else {
        TokenTraversal<?,?> tokenTraversal=(TokenTraversal<?,?>)t;
        if (tokenTraversal.getToken().equals(T.id)) {
          prefix+=Topology.ID;
        }
 else {
          prefix+=tokenTraversal.getToken().getAccessor();
        }
      }
      String alias;
      String rawAlias=this.getColumnNameAliasMap().get(prefix);
      if (rawAlias == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + prefix + ""String_Node_Str"");
      }
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(rawAlias);
      }
 else {
        alias=""String_Node_Str"" + selectSchemaTableTree.stepDepth + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(rawAlias);
      }
      result+=""String_Node_Str"" + alias;
      if (comparator.getValue1() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (comparator.getValue1() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + comparator.toString());
      }
    }
  }
  return result;
}",0.4959667359667359
166912,"@Override public boolean supportsTransactionalSchema(){
  return false;
}","@Override public boolean supportsTransactionalSchema(){
  return true;
}",0.9517241379310344
166913,"public EdgeLabel ensureEdgeLabelExist(final String edgeLabelName,final VertexLabel outVertexLabel,final VertexLabel inVertexLabel,Map<String,PropertyType> columns){
  Objects.requireNonNull(edgeLabelName,""String_Node_Str"");
  Objects.requireNonNull(outVertexLabel,""String_Node_Str"");
  Objects.requireNonNull(inVertexLabel,""String_Node_Str"");
  EdgeLabel edgeLabel;
  Optional<EdgeLabel> edgeLabelOptional=this.getEdgeLabel(edgeLabelName);
  if (!edgeLabelOptional.isPresent()) {
    this.topology.lock();
    edgeLabelOptional=this.getEdgeLabel(edgeLabelName);
    if (!edgeLabelOptional.isPresent()) {
      edgeLabel=this.createEdgeLabel(edgeLabelName,outVertexLabel,inVertexLabel,columns);
      this.uncommittedOutEdgeLabels.put(this.name + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabelName,edgeLabel);
      this.getTopology().fire(edgeLabel,""String_Node_Str"",TopologyChangeAction.CREATE);
    }
 else {
      edgeLabel=internalEnsureEdgeTableExists(edgeLabelOptional.get(),outVertexLabel,inVertexLabel,columns);
    }
  }
 else {
    edgeLabel=internalEnsureEdgeTableExists(edgeLabelOptional.get(),outVertexLabel,inVertexLabel,columns);
  }
  return edgeLabel;
}","public EdgeLabel ensureEdgeLabelExist(final String edgeLabelName,final VertexLabel outVertexLabel,final VertexLabel inVertexLabel,Map<String,PropertyType> columns){
  Objects.requireNonNull(edgeLabelName,""String_Node_Str"");
  Objects.requireNonNull(outVertexLabel,""String_Node_Str"");
  Objects.requireNonNull(inVertexLabel,""String_Node_Str"");
  EdgeLabel edgeLabel;
  Optional<EdgeLabel> edgeLabelOptional=this.getEdgeLabel(edgeLabelName);
  if (!edgeLabelOptional.isPresent()) {
    this.topology.lock();
    edgeLabelOptional=this.getEdgeLabel(edgeLabelName);
    if (!edgeLabelOptional.isPresent()) {
      edgeLabel=this.createEdgeLabel(edgeLabelName,outVertexLabel,inVertexLabel,columns);
      this.uncommittedRemovedEdgeLabels.remove(this.name + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabelName);
      this.uncommittedOutEdgeLabels.put(this.name + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabelName,edgeLabel);
      this.getTopology().fire(edgeLabel,""String_Node_Str"",TopologyChangeAction.CREATE);
    }
 else {
      edgeLabel=internalEnsureEdgeTableExists(edgeLabelOptional.get(),outVertexLabel,inVertexLabel,columns);
    }
  }
 else {
    edgeLabel=internalEnsureEdgeTableExists(edgeLabelOptional.get(),outVertexLabel,inVertexLabel,columns);
  }
  return edgeLabel;
}",0.9418032786885244
166914,"private VertexLabel createVertexLabel(String vertexLabelName,Map<String,PropertyType> columns){
  Preconditions.checkState(!this.isSqlgSchema(),""String_Node_Str"",SQLG_SCHEMA);
  Preconditions.checkArgument(!vertexLabelName.startsWith(VERTEX_PREFIX),""String_Node_Str"" + VERTEX_PREFIX);
  VertexLabel vertexLabel=VertexLabel.createVertexLabel(this.sqlgGraph,this,vertexLabelName,columns);
  this.uncommittedVertexLabels.put(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName,vertexLabel);
  this.getTopology().fire(vertexLabel,""String_Node_Str"",TopologyChangeAction.CREATE);
  return vertexLabel;
}","private VertexLabel createVertexLabel(String vertexLabelName,Map<String,PropertyType> columns){
  Preconditions.checkState(!this.isSqlgSchema(),""String_Node_Str"",SQLG_SCHEMA);
  Preconditions.checkArgument(!vertexLabelName.startsWith(VERTEX_PREFIX),""String_Node_Str"" + VERTEX_PREFIX);
  this.uncommittedRemovedVertexLabels.remove(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName);
  VertexLabel vertexLabel=VertexLabel.createVertexLabel(this.sqlgGraph,this,vertexLabelName,columns);
  this.uncommittedVertexLabels.put(this.name + ""String_Node_Str"" + VERTEX_PREFIX+ vertexLabelName,vertexLabel);
  this.getTopology().fire(vertexLabel,""String_Node_Str"",TopologyChangeAction.CREATE);
  return vertexLabel;
}",0.7164404223227753
166915,"/** 
 * Ensures that the schema exists.
 * @param schemaName The schema to create if it does not exist.
 */
public Schema ensureSchemaExist(final String schemaName){
  Optional<Schema> schemaOptional=this.getSchema(schemaName);
  Schema schema;
  if (!schemaOptional.isPresent()) {
    this.lock();
    schemaOptional=this.getSchema(schemaName);
    if (!schemaOptional.isPresent()) {
      schema=Schema.createSchema(this.sqlgGraph,this,schemaName);
      this.uncommittedSchemas.put(schemaName,schema);
      fire(schema,""String_Node_Str"",TopologyChangeAction.CREATE);
      return schema;
    }
 else {
      return schemaOptional.get();
    }
  }
 else {
    return schemaOptional.get();
  }
}","/** 
 * Ensures that the schema exists.
 * @param schemaName The schema to create if it does not exist.
 */
public Schema ensureSchemaExist(final String schemaName){
  Optional<Schema> schemaOptional=this.getSchema(schemaName);
  Schema schema;
  if (!schemaOptional.isPresent()) {
    this.lock();
    schemaOptional=this.getSchema(schemaName);
    if (!schemaOptional.isPresent()) {
      schema=Schema.createSchema(this.sqlgGraph,this,schemaName);
      this.uncommittedRemovedSchemas.remove(schemaName);
      this.uncommittedSchemas.put(schemaName,schema);
      fire(schema,""String_Node_Str"",TopologyChangeAction.CREATE);
      return schema;
    }
 else {
      return schemaOptional.get();
    }
  }
 else {
    return schemaOptional.get();
  }
}",0.9607167470709856
166916,"/** 
 * Global lock on the topology. For distributed graph (multiple jvm) this happens on the db via a lock sql statement.
 */
void lock(){
  if (!isWriteLockHeldByCurrentThread()) {
    try {
      this.sqlgGraph.tx().readWrite();
      if (!this.reentrantReadWriteLock.writeLock().tryLock(LOCK_TIMEOUT,TimeUnit.SECONDS)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (this.distributed) {
        ((SqlSchemaChangeDialect)this.sqlgGraph.getSqlDialect()).lock(this.sqlgGraph);
        if (!this.notificationTimestamps.isEmpty()) {
          LocalDateTime timestamp=this.notificationTimestamps.last();
          List<Vertex> logs=this.sqlgGraph.topology().V().hasLabel(SQLG_SCHEMA + ""String_Node_Str"" + SQLG_SCHEMA_LOG).has(SQLG_SCHEMA_LOG_TIMESTAMP,P.gt(timestamp)).toList();
          for (          Vertex logVertex : logs) {
            ObjectNode log=logVertex.value(""String_Node_Str"");
            fromNotifyJson(timestamp,log);
          }
        }
      }
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
}","/** 
 * Global lock on the topology. For distributed graph (multiple jvm) this happens on the db via a lock sql statement.
 */
void lock(){
  if (!isWriteLockHeldByCurrentThread()) {
    try {
      this.sqlgGraph.tx().readWrite();
      if (!this.reentrantReadWriteLock.writeLock().tryLock(LOCK_TIMEOUT,TimeUnit.SECONDS)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (this.distributed) {
        ((SqlSchemaChangeDialect)this.sqlgGraph.getSqlDialect()).lock(this.sqlgGraph);
        if (!this.notificationTimestamps.isEmpty()) {
          LocalDateTime timestamp=this.notificationTimestamps.last();
          List<Vertex> logs=this.sqlgGraph.topology().V().hasLabel(SQLG_SCHEMA + ""String_Node_Str"" + SQLG_SCHEMA_LOG).has(SQLG_SCHEMA_LOG_TIMESTAMP,P.gt(timestamp)).toList();
          for (          Vertex logVertex : logs) {
            int pid=logVertex.value(""String_Node_Str"");
            LocalDateTime timestamp2=logVertex.value(""String_Node_Str"");
            if (!ownPids.contains(new ImmutablePair<>(pid,timestamp2))) {
              ObjectNode log=logVertex.value(""String_Node_Str"");
              fromNotifyJson(timestamp,log);
            }
          }
        }
      }
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
}",0.9074926747593136
166917,"private void beforeCommit(){
  Optional<JsonNode> jsonNodeOptional=this.toNotifyJson();
  if (jsonNodeOptional.isPresent() && this.distributed) {
    SqlSchemaChangeDialect sqlSchemaChangeDialect=(SqlSchemaChangeDialect)this.sqlgGraph.getSqlDialect();
    LocalDateTime timestamp=LocalDateTime.now();
    int pid=sqlSchemaChangeDialect.notifyChange(sqlgGraph,timestamp,jsonNodeOptional.get());
    this.ownPids.add(pid);
  }
}","private void beforeCommit(){
  Optional<JsonNode> jsonNodeOptional=this.toNotifyJson();
  if (jsonNodeOptional.isPresent() && this.distributed) {
    SqlSchemaChangeDialect sqlSchemaChangeDialect=(SqlSchemaChangeDialect)this.sqlgGraph.getSqlDialect();
    LocalDateTime timestamp=LocalDateTime.now();
    int pid=sqlSchemaChangeDialect.notifyChange(sqlgGraph,timestamp,jsonNodeOptional.get());
    this.ownPids.add(new ImmutablePair<>(pid,timestamp));
  }
}",0.958097395243488
166918,"private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(shiftDST(s).toLocalTime().toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value).replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)).replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(shiftDST(s).toLocalTime().toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.9955579800498752
166919,"private String valueToStreamString(PropertyType propertyType,Object value){
  String result;
  if (value == null) {
    result=getBatchNull();
  }
 else {
switch (propertyType) {
case ZONEDDATETIME:
      ZonedDateTime zonedDateTime=(ZonedDateTime)value;
    LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
  TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
result=localDateTime.toString() + COPY_COMMAND_DELIMITER + timeZone.getID();
break;
case PERIOD:
Period period=(Period)value;
result=period.getYears() + COPY_COMMAND_DELIMITER + period.getMonths()+ COPY_COMMAND_DELIMITER+ period.getDays();
break;
case DURATION:
Duration duration=(Duration)value;
result=duration.getSeconds() + COPY_COMMAND_DELIMITER + duration.getNano();
break;
case LOCALTIME:
LocalTime lt=(LocalTime)value;
result=shiftDST(lt).toString();
break;
case ZONEDDATETIME_ARRAY:
ZonedDateTime[] zonedDateTimes=(ZonedDateTime[])value;
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
int length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
zonedDateTime=zonedDateTimes[i];
localDateTime=zonedDateTime.toLocalDateTime();
result=localDateTime.toString();
sb.append(result);
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(COPY_COMMAND_DELIMITER);
sb.append(""String_Node_Str"");
for (int i=0; i < length; i++) {
zonedDateTime=zonedDateTimes[i];
timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
result=timeZone.getID();
sb.append(result);
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
case DURATION_ARRAY:
Duration[] durations=(Duration[])value;
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
duration=durations[i];
sb.append(duration.getSeconds());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(COPY_COMMAND_DELIMITER);
sb.append(""String_Node_Str"");
for (int i=0; i < length; i++) {
duration=durations[i];
sb.append(duration.getNano());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
case PERIOD_ARRAY:
Period[] periods=(Period[])value;
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
period=periods[i];
sb.append(period.getYears());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(COPY_COMMAND_DELIMITER);
sb.append(""String_Node_Str"");
for (int i=0; i < length; i++) {
period=periods[i];
sb.append(period.getMonths());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(COPY_COMMAND_DELIMITER);
sb.append(""String_Node_Str"");
for (int i=0; i < length; i++) {
period=periods[i];
sb.append(period.getDays());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
case LOCALTIME_ARRAY:
LocalTime[] localTimes=(LocalTime[])value;
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
LocalTime localTime=localTimes[i];
result=shiftDST(localTime).toString();
sb.append(result);
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
case JSON_ARRAY:
throw SqlgExceptions.invalidPropertyType(propertyType);
case BYTE_ARRAY:
return PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value));
case byte_ARRAY:
return PGbytea.toPGString((byte[])value);
default :
if (value.getClass().isArray()) {
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
String valueOfArray=java.lang.reflect.Array.get(value,i).toString();
sb.append(escapeSpecialCharacters(valueOfArray));
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
}
result=escapeSpecialCharacters(value.toString());
}
}
return result;
}","private String valueToStreamString(PropertyType propertyType,Object value){
  String result;
  if (value == null) {
    result=getBatchNull();
  }
 else {
switch (propertyType) {
case ZONEDDATETIME:
      ZonedDateTime zonedDateTime=(ZonedDateTime)value;
    LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
  TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
result=localDateTime.toString() + COPY_COMMAND_DELIMITER + timeZone.getID();
break;
case PERIOD:
Period period=(Period)value;
result=period.getYears() + COPY_COMMAND_DELIMITER + period.getMonths()+ COPY_COMMAND_DELIMITER+ period.getDays();
break;
case DURATION:
Duration duration=(Duration)value;
result=duration.getSeconds() + COPY_COMMAND_DELIMITER + duration.getNano();
break;
case LOCALTIME:
LocalTime lt=(LocalTime)value;
result=shiftDST(lt).toString();
break;
case ZONEDDATETIME_ARRAY:
ZonedDateTime[] zonedDateTimes=(ZonedDateTime[])value;
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"");
int length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
zonedDateTime=zonedDateTimes[i];
localDateTime=zonedDateTime.toLocalDateTime();
result=localDateTime.toString();
sb.append(result);
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(COPY_COMMAND_DELIMITER);
sb.append(""String_Node_Str"");
for (int i=0; i < length; i++) {
zonedDateTime=zonedDateTimes[i];
timeZone=TimeZone.getTimeZone(zonedDateTime.getZone());
result=timeZone.getID();
sb.append(result);
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
case DURATION_ARRAY:
Duration[] durations=(Duration[])value;
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
duration=durations[i];
sb.append(duration.getSeconds());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(COPY_COMMAND_DELIMITER);
sb.append(""String_Node_Str"");
for (int i=0; i < length; i++) {
duration=durations[i];
sb.append(duration.getNano());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
case PERIOD_ARRAY:
Period[] periods=(Period[])value;
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
period=periods[i];
sb.append(period.getYears());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(COPY_COMMAND_DELIMITER);
sb.append(""String_Node_Str"");
for (int i=0; i < length; i++) {
period=periods[i];
sb.append(period.getMonths());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
sb.append(COPY_COMMAND_DELIMITER);
sb.append(""String_Node_Str"");
for (int i=0; i < length; i++) {
period=periods[i];
sb.append(period.getDays());
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
case LOCALTIME_ARRAY:
LocalTime[] localTimes=(LocalTime[])value;
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
LocalTime localTime=localTimes[i];
result=shiftDST(localTime).toString();
sb.append(result);
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
case JSON_ARRAY:
throw SqlgExceptions.invalidPropertyType(propertyType);
case BYTE_ARRAY:
return PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value));
case byte_ARRAY:
return PGbytea.toPGString((byte[])value);
default :
if (value.getClass().isArray()) {
sb=new StringBuilder();
sb.append(""String_Node_Str"");
length=java.lang.reflect.Array.getLength(value);
for (int i=0; i < length; i++) {
String valueOfArray=java.lang.reflect.Array.get(value,i).toString();
sb.append(escapeSpecialCharacters(valueOfArray));
if (i < length - 1) {
sb.append(""String_Node_Str"");
}
}
sb.append(""String_Node_Str"");
return sb.toString();
}
result=escapeSpecialCharacters(value.toString());
}
}
return result;
}",0.9980897803247374
166920,"@Test public void testDateTimeProperties() throws Exception {
  Vertex v=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LocalDateTime ldt=LocalDateTime.now();
  v.property(""String_Node_Str"",ldt);
  v.property(""String_Node_Str"",ldt.toLocalDate());
  LocalTime lt=ldt.toLocalTime().truncatedTo(ChronoUnit.SECONDS);
  v.property(""String_Node_Str"",lt);
  ZonedDateTime zdt=ZonedDateTime.now();
  v.property(""String_Node_Str"",zdt);
  Period p=Period.ofDays(3);
  v.property(""String_Node_Str"",p);
  Duration d=Duration.ofHours(12);
  v.property(""String_Node_Str"",d);
  Vertex vJ=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  vJ.addEdge(""String_Node_Str"",v);
  this.sqlgGraph.tx().commit();
  assertProperty(v,""String_Node_Str"",ldt);
  assertProperty(v,""String_Node_Str"",ldt.toLocalDate());
  assertProperty(v,""String_Node_Str"",lt);
  assertProperty(v,""String_Node_Str"",zdt);
  assertProperty(v,""String_Node_Str"",p);
  assertProperty(v,""String_Node_Str"",d);
  Vertex vJ2=sqlgGraph.vertices(vJ.id()).next();
  Vertex v2=vJ2.edges(Direction.OUT).next().inVertex();
  assertProperty(v2,""String_Node_Str"",ldt);
  assertProperty(v2,""String_Node_Str"",ldt.toLocalDate());
  assertProperty(v2,""String_Node_Str"",lt);
  assertProperty(v2,""String_Node_Str"",zdt);
  assertProperty(v2,""String_Node_Str"",p);
  assertProperty(v2,""String_Node_Str"",d);
  this.sqlgGraph.close();
  try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    v2=sqlgGraph1.vertices(v.id()).next();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
   try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    v2=sqlgGraph1.traversal().V().hasLabel(""String_Node_Str"").next();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
   try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    vJ2=sqlgGraph1.vertices(vJ.id()).next();
    v2=vJ2.edges(Direction.OUT).next().inVertex();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
 }","@Test public void testDateTimeProperties() throws Exception {
  Vertex v=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LocalDateTime ldt=LocalDateTime.now();
  v.property(""String_Node_Str"",ldt);
  v.property(""String_Node_Str"",ldt.toLocalDate());
  LocalTime lt=ldt.toLocalTime().truncatedTo(ChronoUnit.SECONDS);
  v.property(""String_Node_Str"",lt);
  ZonedDateTime zdt=ZonedDateTime.now();
  v.property(""String_Node_Str"",zdt);
  ZonedDateTime zdt2=ZonedDateTime.of(LocalDateTime.now(),ZoneId.of(""String_Node_Str""));
  v.property(""String_Node_Str"",zdt2);
  Period p=Period.ofDays(3);
  v.property(""String_Node_Str"",p);
  Duration d=Duration.ofHours(12);
  v.property(""String_Node_Str"",d);
  Vertex vJ=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  vJ.addEdge(""String_Node_Str"",v);
  this.sqlgGraph.tx().commit();
  assertProperty(v,""String_Node_Str"",ldt);
  assertProperty(v,""String_Node_Str"",ldt.toLocalDate());
  assertProperty(v,""String_Node_Str"",lt);
  assertProperty(v,""String_Node_Str"",zdt);
  assertProperty(v,""String_Node_Str"",zdt2);
  assertProperty(v,""String_Node_Str"",p);
  assertProperty(v,""String_Node_Str"",d);
  Vertex vJ2=sqlgGraph.vertices(vJ.id()).next();
  Vertex v2=vJ2.edges(Direction.OUT).next().inVertex();
  assertProperty(v2,""String_Node_Str"",ldt);
  assertProperty(v2,""String_Node_Str"",ldt.toLocalDate());
  assertProperty(v2,""String_Node_Str"",lt);
  assertProperty(v2,""String_Node_Str"",zdt);
  assertProperty(v2,""String_Node_Str"",zdt2);
  assertProperty(v2,""String_Node_Str"",p);
  assertProperty(v2,""String_Node_Str"",d);
  this.sqlgGraph.close();
  try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    v2=sqlgGraph1.vertices(v.id()).next();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt2);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
   try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    v2=sqlgGraph1.traversal().V().hasLabel(""String_Node_Str"").next();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt2);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
   try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    vJ2=sqlgGraph1.vertices(vJ.id()).next();
    v2=vJ2.edges(Direction.OUT).next().inVertex();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt2);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
 }",0.9367129480142072
166921,"@Test public void testDateTimeArrayProperties(){
  Vertex v=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LocalDateTime ldt=LocalDateTime.now();
  v.property(""String_Node_Str"",new LocalDateTime[]{ldt});
  v.property(""String_Node_Str"",new LocalDate[]{ldt.toLocalDate()});
  LocalTime lt=ldt.toLocalTime().truncatedTo(ChronoUnit.SECONDS);
  v.property(""String_Node_Str"",new LocalTime[]{lt});
  ZonedDateTime zdt=ZonedDateTime.now();
  v.property(""String_Node_Str"",new ZonedDateTime[]{zdt});
  Period p=Period.ofDays(3);
  v.property(""String_Node_Str"",new Period[]{p});
  Duration d=Duration.ofHours(12);
  v.property(""String_Node_Str"",new Duration[]{d});
  this.sqlgGraph.tx().commit();
  assertObjectArrayProperty(v,""String_Node_Str"",ldt);
  assertObjectArrayProperty(v,""String_Node_Str"",ldt.toLocalDate());
  assertObjectArrayProperty(v,""String_Node_Str"",lt);
  assertObjectArrayProperty(v,""String_Node_Str"",zdt);
  assertObjectArrayProperty(v,""String_Node_Str"",p);
  assertObjectArrayProperty(v,""String_Node_Str"",d);
}","@Test public void testDateTimeArrayProperties(){
  Vertex v=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LocalDateTime ldt=LocalDateTime.now();
  v.property(""String_Node_Str"",new LocalDateTime[]{ldt});
  v.property(""String_Node_Str"",new LocalDate[]{ldt.toLocalDate()});
  LocalTime lt=ldt.toLocalTime().truncatedTo(ChronoUnit.SECONDS);
  v.property(""String_Node_Str"",new LocalTime[]{lt});
  ZonedDateTime zdt=ZonedDateTime.now();
  v.property(""String_Node_Str"",new ZonedDateTime[]{zdt});
  ZonedDateTime zdt2=ZonedDateTime.of(LocalDateTime.now(),ZoneId.of(""String_Node_Str""));
  v.property(""String_Node_Str"",new ZonedDateTime[]{zdt2});
  Period p=Period.ofDays(3);
  v.property(""String_Node_Str"",new Period[]{p});
  Duration d=Duration.ofHours(12);
  v.property(""String_Node_Str"",new Duration[]{d});
  this.sqlgGraph.tx().commit();
  assertObjectArrayProperty(v,""String_Node_Str"",ldt);
  assertObjectArrayProperty(v,""String_Node_Str"",ldt.toLocalDate());
  assertObjectArrayProperty(v,""String_Node_Str"",lt);
  assertObjectArrayProperty(v,""String_Node_Str"",zdt);
  assertObjectArrayProperty(v,""String_Node_Str"",zdt2);
  assertObjectArrayProperty(v,""String_Node_Str"",p);
  assertObjectArrayProperty(v,""String_Node_Str"",d);
}",0.827970827970828
166922,"@Test public void testSetBytePrimitiveArrayProperty(){
  Assume.assumeTrue(this.sqlgGraph.getSqlDialect().supportsByteArrayValues());
  Vertex marko=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  marko.property(""String_Node_Str"",new byte[]{(byte)1,(byte)2});
  this.sqlgGraph.tx().commit();
  Assert.assertArrayEquals(new byte[]{(byte)1,(byte)2},(byte[])marko.property(""String_Node_Str"").value());
}","@Test public void testSetBytePrimitiveArrayProperty(){
  Assume.assumeTrue(this.sqlgGraph.getSqlDialect().supportsByteArrayValues());
  Vertex marko=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  marko.property(""String_Node_Str"",new byte[]{(byte)1,(byte)2});
  this.sqlgGraph.tx().commit();
  Assert.assertArrayEquals(new byte[]{(byte)1,(byte)2},(byte[])marko.property(""String_Node_Str"").value());
  marko.property(""String_Node_Str"",""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(""String_Node_Str"",new String((byte[])marko.property(""String_Node_Str"").value(),StandardCharsets.UTF_8));
}",0.7819947043248014
166923,"@Test public void testSetByteArrayProperty(){
  Assume.assumeTrue(this.sqlgGraph.getSqlDialect().supportsByteArrayValues());
  Vertex marko=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  marko.property(""String_Node_Str"",new Byte[]{(byte)1,(byte)2});
  this.sqlgGraph.tx().commit();
  Assert.assertArrayEquals(new Byte[]{(byte)1,(byte)2},(Byte[])marko.property(""String_Node_Str"").value());
}","@Test public void testSetByteArrayProperty(){
  Assume.assumeTrue(this.sqlgGraph.getSqlDialect().supportsByteArrayValues());
  Vertex marko=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  marko.property(""String_Node_Str"",new Byte[]{(byte)1,(byte)2});
  this.sqlgGraph.tx().commit();
  Assert.assertArrayEquals(new Byte[]{(byte)1,(byte)2},(Byte[])marko.property(""String_Node_Str"").value());
  marko.property(""String_Node_Str"",""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(""String_Node_Str"",new String((byte[])marko.property(""String_Node_Str"").value(),StandardCharsets.UTF_8));
}",0.7784753363228699
166924,"@Test public void testZonedDateTime() throws InterruptedException {
  ZonedDateTime zonedDateTime=ZonedDateTime.now();
  this.sqlgGraph.tx().batchMode(BatchManager.BatchModeType.NORMAL);
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",zonedDateTime);
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(zonedDateTime,this.sqlgGraph.traversal().V(a1).values(""String_Node_Str"").next());
  if (this.sqlgGraph1 != null) {
    Thread.sleep(SLEEP_TIME);
    Assert.assertEquals(zonedDateTime,this.sqlgGraph1.traversal().V(a1).values(""String_Node_Str"").next());
  }
}","@Test public void testZonedDateTime() throws InterruptedException {
  ZonedDateTime zonedDateTime=ZonedDateTime.now();
  ZonedDateTime zdt2=ZonedDateTime.of(LocalDateTime.now(),ZoneId.of(""String_Node_Str""));
  ZonedDateTime zdt2Fixed=ZonedDateTime.of(zdt2.toLocalDateTime(),ZoneId.of(""String_Node_Str""));
  this.sqlgGraph.tx().batchMode(BatchManager.BatchModeType.NORMAL);
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",zonedDateTime,""String_Node_Str"",zdt2,""String_Node_Str"",zdt2Fixed);
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(zonedDateTime,this.sqlgGraph.traversal().V(a1).values(""String_Node_Str"").next());
  Assert.assertEquals(zdt2Fixed,this.sqlgGraph.traversal().V(a1).values(""String_Node_Str"").next());
  Assert.assertEquals(zdt2Fixed,this.sqlgGraph.traversal().V(a1).values(""String_Node_Str"").next());
  if (this.sqlgGraph1 != null) {
    Thread.sleep(SLEEP_TIME);
    Assert.assertEquals(zonedDateTime,this.sqlgGraph1.traversal().V(a1).values(""String_Node_Str"").next());
    Assert.assertEquals(zdt2Fixed,this.sqlgGraph1.traversal().V(a1).values(""String_Node_Str"").next());
    Assert.assertEquals(zdt2Fixed,this.sqlgGraph1.traversal().V(a1).values(""String_Node_Str"").next());
  }
}",0.6492089470812875
166925,"@Test public void testBatchArraybyte() throws InterruptedException {
  this.sqlgGraph.tx().normalBatchModeOn();
  Vertex god=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",new byte[]{1,3});
  this.sqlgGraph.tx().commit();
  testBatchArraybyte_assert(this.sqlgGraph,god);
  if (this.sqlgGraph1 != null) {
    Thread.sleep(SLEEP_TIME);
    testBatchArraybyte_assert(this.sqlgGraph1,god);
  }
}","@Test public void testBatchArraybyte() throws InterruptedException {
  this.sqlgGraph.tx().normalBatchModeOn();
  Vertex god=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",new byte[]{1,3});
  this.sqlgGraph.tx().commit();
  testBatchArraybyte_assert(this.sqlgGraph,god);
  if (this.sqlgGraph1 != null) {
    Thread.sleep(SLEEP_TIME);
    testBatchArraybyte_assert(this.sqlgGraph1,god);
  }
  this.sqlgGraph.tx().normalBatchModeOn();
  god.property(""String_Node_Str"",""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  this.sqlgGraph.tx().commit();
  testBatchArraybyteSpecial_assert(this.sqlgGraph,god);
  if (this.sqlgGraph1 != null) {
    Thread.sleep(SLEEP_TIME);
    testBatchArraybyteSpecial_assert(this.sqlgGraph1,god);
  }
}",0.7065868263473054
166926,"@Override protected void load(){
  if (recordId != null && this.properties.isEmpty()) {
    if (this.sqlgGraph.tx().getBatchManager().isStreaming()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") EdgeLabel edgeLabel=this.sqlgGraph.getTopology().getSchema(this.schema).get().getEdgeLabel(this.table).get();
    StringBuilder sql=new StringBuilder(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    for (    PropertyColumn propertyColumn : edgeLabel.properties.values()) {
      sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(propertyColumn.getName()));
    }
    for (    VertexLabel vertexLabel : edgeLabel.getOutVertexLabels()) {
      sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getName()+ SchemaManager.OUT_VERTEX_COLUMN_END));
    }
    for (    VertexLabel vertexLabel : edgeLabel.getInVertexLabels()) {
      sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getName()+ SchemaManager.IN_VERTEX_COLUMN_END));
    }
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + this.table));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    sql.append(""String_Node_Str"");
    if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
      sql.append(""String_Node_Str"");
    }
    Connection conn=this.sqlgGraph.tx().getConnection();
    if (logger.isDebugEnabled()) {
      logger.debug(sql.toString());
    }
    try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
      preparedStatement.setCursorName(""String_Node_Str"");
      preparedStatement.setLong(1,this.recordId.getId());
      ResultSet resultSet=preparedStatement.executeQuery();
      if (resultSet.next()) {
        loadResultSet(resultSet);
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}","@Override protected void load(){
  if (recordId != null && this.properties.isEmpty()) {
    if (this.sqlgGraph.tx().getBatchManager().isStreaming()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") EdgeLabel edgeLabel=this.sqlgGraph.getTopology().getSchema(this.schema).get().getEdgeLabel(this.table).get();
    StringBuilder sql=new StringBuilder(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    for (    PropertyColumn propertyColumn : edgeLabel.properties.values()) {
      sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(propertyColumn.getName()));
      String[] ps=propertyColumn.getPropertyType().getPostFixes();
      if (ps != null) {
        for (        String p : propertyColumn.getPropertyType().getPostFixes()) {
          sql.append(""String_Node_Str"");
          sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(propertyColumn.getName() + p));
        }
      }
    }
    for (    VertexLabel vertexLabel : edgeLabel.getOutVertexLabels()) {
      sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getName()+ SchemaManager.OUT_VERTEX_COLUMN_END));
    }
    for (    VertexLabel vertexLabel : edgeLabel.getInVertexLabels()) {
      sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getName()+ SchemaManager.IN_VERTEX_COLUMN_END));
    }
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + this.table));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    sql.append(""String_Node_Str"");
    if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
      sql.append(""String_Node_Str"");
    }
    Connection conn=this.sqlgGraph.tx().getConnection();
    if (logger.isDebugEnabled()) {
      logger.debug(sql.toString());
    }
    try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
      preparedStatement.setCursorName(""String_Node_Str"");
      preparedStatement.setLong(1,this.recordId.getId());
      ResultSet resultSet=preparedStatement.executeQuery();
      if (resultSet.next()) {
        loadResultSet(resultSet);
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}",0.934429438246232
166927,"@Override protected void load(){
  if ((!this.sqlgGraph.tx().isInBatchMode() && this.properties.isEmpty()) || (this.properties.isEmpty() && this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode()&& !this.sqlgGraph.tx().getBatchManager().vertexIsCached(this))) {
    if (this.sqlgGraph.tx().getBatchManager().isStreaming()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") VertexLabel vertexLabel=this.sqlgGraph.getTopology().getSchema(this.schema).get().getVertexLabel(this.table).get();
    StringBuilder sql=new StringBuilder(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    for (    PropertyColumn propertyColumn : vertexLabel.properties.values()) {
      sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(propertyColumn.getName()));
    }
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + this.table));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    sql.append(""String_Node_Str"");
    if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
      sql.append(""String_Node_Str"");
    }
    Connection conn=this.sqlgGraph.tx().getConnection();
    if (logger.isDebugEnabled()) {
      logger.debug(sql.toString());
    }
    try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
      preparedStatement.setLong(1,this.recordId.getId());
      ResultSet resultSet=preparedStatement.executeQuery();
      if (resultSet.next()) {
        loadResultSet(resultSet);
      }
 else {
        throw new IllegalStateException(String.format(""String_Node_Str"",new Object[]{this.schema + ""String_Node_Str"" + this.table,this.recordId.getId()}));
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}","@Override protected void load(){
  if ((!this.sqlgGraph.tx().isInBatchMode() && this.properties.isEmpty()) || (this.properties.isEmpty() && this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode()&& !this.sqlgGraph.tx().getBatchManager().vertexIsCached(this))) {
    if (this.sqlgGraph.tx().getBatchManager().isStreaming()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") VertexLabel vertexLabel=this.sqlgGraph.getTopology().getSchema(this.schema).get().getVertexLabel(this.table).get();
    StringBuilder sql=new StringBuilder(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    for (    PropertyColumn propertyColumn : vertexLabel.properties.values()) {
      sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(propertyColumn.getName()));
      String[] ps=propertyColumn.getPropertyType().getPostFixes();
      if (ps != null) {
        for (        String p : propertyColumn.getPropertyType().getPostFixes()) {
          sql.append(""String_Node_Str"");
          sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(propertyColumn.getName() + p));
        }
      }
    }
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + this.table));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    sql.append(""String_Node_Str"");
    if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
      sql.append(""String_Node_Str"");
    }
    Connection conn=this.sqlgGraph.tx().getConnection();
    if (logger.isDebugEnabled()) {
      logger.debug(sql.toString());
    }
    try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
      preparedStatement.setLong(1,this.recordId.getId());
      ResultSet resultSet=preparedStatement.executeQuery();
      if (resultSet.next()) {
        loadResultSet(resultSet);
      }
 else {
        throw new IllegalStateException(String.format(""String_Node_Str"",new Object[]{this.schema + ""String_Node_Str"" + this.table,this.recordId.getId()}));
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}",0.9266476899496388
166928,"private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value);
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.99603127824276
166929,"@Override public Object convertArray(PropertyType propertyType,java.sql.Array array) throws SQLException {
switch (propertyType) {
case BOOLEAN_ARRAY:
    return array.getArray();
case boolean_ARRAY:
  return SqlgUtil.convertObjectArrayToBooleanPrimitiveArray((Object[])array.getArray());
case SHORT_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortArray((Object[])array.getArray());
case short_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortPrimitiveArray((Object[])array.getArray());
case INTEGER_ARRAY:
return array.getArray();
case int_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToIntegerPrimitiveArray((Object[])array.getArray());
case LONG_ARRAY:
return array.getArray();
case long_ARRAY:
return SqlgUtil.convertObjectOfLongsArrayToLongPrimitiveArray((Object[])array.getArray());
case DOUBLE_ARRAY:
return array.getArray();
case double_ARRAY:
return SqlgUtil.convertObjectOfDoublesArrayToDoublePrimitiveArray((Object[])array.getArray());
case FLOAT_ARRAY:
return array.getArray();
case float_ARRAY:
return SqlgUtil.convertObjectOfFloatsArrayToFloatPrimitiveArray((Object[])array.getArray());
case STRING_ARRAY:
return array.getArray();
case LOCALDATETIME_ARRAY:
Timestamp[] timestamps=(Timestamp[])array.getArray();
return SqlgUtil.copyToLocalDateTime(timestamps,new LocalDateTime[timestamps.length]);
case LOCALDATE_ARRAY:
Date[] dates=(Date[])array.getArray();
return SqlgUtil.copyToLocalDate(dates,new LocalDate[dates.length]);
case LOCALTIME_ARRAY:
Time[] times=(Time[])array.getArray();
return SqlgUtil.copyToLocalTime(times,new LocalTime[times.length]);
case JSON_ARRAY:
String arrayAsString=array.toString();
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
arrayAsString=StringEscapeUtils.unescapeJava(arrayAsString);
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
String[] jsons=arrayAsString.split(""String_Node_Str"");
JsonNode[] jsonNodes=new JsonNode[jsons.length];
ObjectMapper objectMapper=new ObjectMapper();
int count=0;
for (String json : jsons) {
try {
JsonNode jsonNode=objectMapper.readTree(json);
jsonNodes[count++]=jsonNode;
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
return jsonNodes;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","@Override public Object convertArray(PropertyType propertyType,java.sql.Array array) throws SQLException {
switch (propertyType) {
case BOOLEAN_ARRAY:
    return array.getArray();
case boolean_ARRAY:
  return SqlgUtil.convertObjectArrayToBooleanPrimitiveArray((Object[])array.getArray());
case SHORT_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortArray((Object[])array.getArray());
case short_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortPrimitiveArray((Object[])array.getArray());
case INTEGER_ARRAY:
return array.getArray();
case int_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToIntegerPrimitiveArray((Object[])array.getArray());
case LONG_ARRAY:
return array.getArray();
case long_ARRAY:
return SqlgUtil.convertObjectOfLongsArrayToLongPrimitiveArray((Object[])array.getArray());
case DOUBLE_ARRAY:
return array.getArray();
case double_ARRAY:
return SqlgUtil.convertObjectOfDoublesArrayToDoublePrimitiveArray((Object[])array.getArray());
case FLOAT_ARRAY:
return array.getArray();
case float_ARRAY:
return SqlgUtil.convertObjectOfFloatsArrayToFloatPrimitiveArray((Object[])array.getArray());
case STRING_ARRAY:
return array.getArray();
case LOCALDATETIME_ARRAY:
Timestamp[] timestamps=(Timestamp[])array.getArray();
return SqlgUtil.copyToLocalDateTime(timestamps,new LocalDateTime[timestamps.length]);
case LOCALDATE_ARRAY:
Date[] dates=(Date[])array.getArray();
return SqlgUtil.copyToLocalDate(dates,new LocalDate[dates.length]);
case LOCALTIME_ARRAY:
Time[] times=(Time[])array.getArray();
LocalTime[] lts=SqlgUtil.copyToLocalTime(times,new LocalTime[times.length]);
for (int a=0; a < times.length; a++) {
lts[a]=shiftDST(lts[a]).toLocalTime();
}
return lts;
case JSON_ARRAY:
String arrayAsString=array.toString();
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
arrayAsString=StringEscapeUtils.unescapeJava(arrayAsString);
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
String[] jsons=arrayAsString.split(""String_Node_Str"");
JsonNode[] jsonNodes=new JsonNode[jsons.length];
ObjectMapper objectMapper=new ObjectMapper();
int count=0;
for (String json : jsons) {
try {
JsonNode jsonNode=objectMapper.readTree(json);
jsonNodes[count++]=jsonNode;
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
return jsonNodes;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.9762739839075716
166930,"@Test public void testDateTimeProperties(){
  Vertex v=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LocalDateTime ldt=LocalDateTime.now();
  v.property(""String_Node_Str"",ldt);
  v.property(""String_Node_Str"",ldt.toLocalDate());
  LocalTime lt=ldt.toLocalTime().truncatedTo(ChronoUnit.SECONDS);
  v.property(""String_Node_Str"",lt);
  ZonedDateTime zdt=ZonedDateTime.now();
  v.property(""String_Node_Str"",zdt);
  Period p=Period.ofDays(3);
  v.property(""String_Node_Str"",p);
  Duration d=Duration.ofHours(12);
  v.property(""String_Node_Str"",d);
  this.sqlgGraph.tx().commit();
  assertProperty(v,""String_Node_Str"",ldt);
  assertProperty(v,""String_Node_Str"",ldt.toLocalDate());
  assertProperty(v,""String_Node_Str"",lt);
  assertProperty(v,""String_Node_Str"",zdt);
  assertProperty(v,""String_Node_Str"",p);
  assertProperty(v,""String_Node_Str"",d);
}","@Test public void testDateTimeProperties() throws Exception {
  Vertex v=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LocalDateTime ldt=LocalDateTime.now();
  v.property(""String_Node_Str"",ldt);
  v.property(""String_Node_Str"",ldt.toLocalDate());
  LocalTime lt=ldt.toLocalTime().truncatedTo(ChronoUnit.SECONDS);
  v.property(""String_Node_Str"",lt);
  ZonedDateTime zdt=ZonedDateTime.now();
  v.property(""String_Node_Str"",zdt);
  Period p=Period.ofDays(3);
  v.property(""String_Node_Str"",p);
  Duration d=Duration.ofHours(12);
  v.property(""String_Node_Str"",d);
  Vertex vJ=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  vJ.addEdge(""String_Node_Str"",v);
  this.sqlgGraph.tx().commit();
  assertProperty(v,""String_Node_Str"",ldt);
  assertProperty(v,""String_Node_Str"",ldt.toLocalDate());
  assertProperty(v,""String_Node_Str"",lt);
  assertProperty(v,""String_Node_Str"",zdt);
  assertProperty(v,""String_Node_Str"",p);
  assertProperty(v,""String_Node_Str"",d);
  Vertex vJ2=sqlgGraph.vertices(vJ.id()).next();
  Vertex v2=vJ2.edges(Direction.OUT).next().inVertex();
  assertProperty(v2,""String_Node_Str"",ldt);
  assertProperty(v2,""String_Node_Str"",ldt.toLocalDate());
  assertProperty(v2,""String_Node_Str"",lt);
  assertProperty(v2,""String_Node_Str"",zdt);
  assertProperty(v2,""String_Node_Str"",p);
  assertProperty(v2,""String_Node_Str"",d);
  this.sqlgGraph.close();
  try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    v2=sqlgGraph1.vertices(v.id()).next();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
   try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    v2=sqlgGraph1.traversal().V().hasLabel(""String_Node_Str"").next();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
   try (SqlgGraph sqlgGraph1=SqlgGraph.open(configuration)){
    vJ2=sqlgGraph1.vertices(vJ.id()).next();
    v2=vJ2.edges(Direction.OUT).next().inVertex();
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",ldt.toLocalDate());
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",lt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",zdt);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",p);
    assertProperty(sqlgGraph1,v2,""String_Node_Str"",d);
  }
 }",0.4681974135655846
166931,"private <TP>void assertProperty(Vertex v,String property,TP expected){
  Assert.assertEquals(expected,v.property(property).value());
  Assert.assertEquals(expected,this.sqlgGraph.traversal().V(v).values(property).next());
}","private static <TP>void assertProperty(SqlgGraph g,Edge e,String property,TP expected){
  Assert.assertEquals(expected,e.property(property).value());
  Assert.assertEquals(expected,g.traversal().E(e).values(property).next());
}",0.8177777777777778
166932,"public static IndexType fromNotifyJson(JsonNode node){
  IndexType it=new IndexType(node.get(""String_Node_Str"").asText());
  Iterator<String> keys=node.fieldNames();
  while (keys.hasNext()) {
    String k=keys.next();
    if (!""String_Node_Str"".equals(k)) {
      it.getProperties().put(k,node.get(k).asText());
    }
  }
  return it;
}","public static IndexType fromNotifyJson(JsonNode node){
  if (node.isValueNode()) {
    String s=node.asText();
    if (""String_Node_Str"".equalsIgnoreCase(s)) {
      return UNIQUE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(s)) {
      return NON_UNIQUE;
    }
  }
  IndexType it=new IndexType(node.get(""String_Node_Str"").asText());
  Iterator<String> keys=node.fieldNames();
  while (keys.hasNext()) {
    String k=keys.next();
    if (!""String_Node_Str"".equals(k)) {
      it.getProperties().put(k,node.get(k).asText());
    }
  }
  return it;
}",0.7522321428571429
166933,"private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(shiftDST(s).toLocalTime().toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.9990615468835536
166934,"private Array createArrayOf(Connection conn,PropertyType propertyType,Object[] data){
  try {
switch (propertyType) {
case STRING_ARRAY:
case long_ARRAY:
case LONG_ARRAY:
case int_ARRAY:
case INTEGER_ARRAY:
case short_ARRAY:
case SHORT_ARRAY:
case float_ARRAY:
case FLOAT_ARRAY:
case double_ARRAY:
case DOUBLE_ARRAY:
case boolean_ARRAY:
case BOOLEAN_ARRAY:
case LOCALDATETIME_ARRAY:
case LOCALDATE_ARRAY:
case LOCALTIME_ARRAY:
case ZONEDDATETIME_ARRAY:
case JSON_ARRAY:
      return conn.createArrayOf(getArrayDriverType(propertyType),data);
default :
    throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}","private Array createArrayOf(Connection conn,PropertyType propertyType,Object[] data){
  try {
switch (propertyType) {
case LOCALTIME_ARRAY:
      if (data != null) {
        int a=0;
        for (        Object o : data) {
          data[a++]=shiftDST(((Time)o).toLocalTime());
        }
      }
case STRING_ARRAY:
case long_ARRAY:
case LONG_ARRAY:
case int_ARRAY:
case INTEGER_ARRAY:
case short_ARRAY:
case SHORT_ARRAY:
case float_ARRAY:
case FLOAT_ARRAY:
case double_ARRAY:
case DOUBLE_ARRAY:
case boolean_ARRAY:
case BOOLEAN_ARRAY:
case LOCALDATETIME_ARRAY:
case LOCALDATE_ARRAY:
case ZONEDDATETIME_ARRAY:
case JSON_ARRAY:
    return conn.createArrayOf(getArrayDriverType(propertyType),data);
default :
  throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}",0.8558441558441559
166935,"@Override public Object convertArray(PropertyType propertyType,java.sql.Array array) throws SQLException {
switch (propertyType) {
case BOOLEAN_ARRAY:
    return array.getArray();
case boolean_ARRAY:
  return SqlgUtil.convertObjectArrayToBooleanPrimitiveArray((Object[])array.getArray());
case SHORT_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortArray((Object[])array.getArray());
case short_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortPrimitiveArray((Object[])array.getArray());
case INTEGER_ARRAY:
return array.getArray();
case int_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToIntegerPrimitiveArray((Object[])array.getArray());
case LONG_ARRAY:
return array.getArray();
case long_ARRAY:
return SqlgUtil.convertObjectOfLongsArrayToLongPrimitiveArray((Object[])array.getArray());
case DOUBLE_ARRAY:
return array.getArray();
case double_ARRAY:
return SqlgUtil.convertObjectOfDoublesArrayToDoublePrimitiveArray((Object[])array.getArray());
case FLOAT_ARRAY:
return array.getArray();
case float_ARRAY:
return SqlgUtil.convertObjectOfFloatsArrayToFloatPrimitiveArray((Object[])array.getArray());
case STRING_ARRAY:
return array.getArray();
case LOCALDATETIME_ARRAY:
Timestamp[] timestamps=(Timestamp[])array.getArray();
return SqlgUtil.copyToLocalDateTime(timestamps,new LocalDateTime[timestamps.length]);
case LOCALDATE_ARRAY:
Date[] dates=(Date[])array.getArray();
return SqlgUtil.copyToLocalDate(dates,new LocalDate[dates.length]);
case LOCALTIME_ARRAY:
Time[] times=(Time[])array.getArray();
LocalTime[] lts=SqlgUtil.copyToLocalTime(times,new LocalTime[times.length]);
for (int a=0; a < times.length; a++) {
lts[a]=shiftDST(lts[a]).toLocalTime();
}
return lts;
case JSON_ARRAY:
String arrayAsString=array.toString();
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
arrayAsString=StringEscapeUtils.unescapeJava(arrayAsString);
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
String[] jsons=arrayAsString.split(""String_Node_Str"");
JsonNode[] jsonNodes=new JsonNode[jsons.length];
ObjectMapper objectMapper=new ObjectMapper();
int count=0;
for (String json : jsons) {
try {
JsonNode jsonNode=objectMapper.readTree(json);
jsonNodes[count++]=jsonNode;
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
return jsonNodes;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","@Override public Object convertArray(PropertyType propertyType,java.sql.Array array) throws SQLException {
switch (propertyType) {
case BOOLEAN_ARRAY:
    return array.getArray();
case boolean_ARRAY:
  return SqlgUtil.convertObjectArrayToBooleanPrimitiveArray((Object[])array.getArray());
case SHORT_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortArray((Object[])array.getArray());
case short_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortPrimitiveArray((Object[])array.getArray());
case INTEGER_ARRAY:
return array.getArray();
case int_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToIntegerPrimitiveArray((Object[])array.getArray());
case LONG_ARRAY:
return array.getArray();
case long_ARRAY:
return SqlgUtil.convertObjectOfLongsArrayToLongPrimitiveArray((Object[])array.getArray());
case DOUBLE_ARRAY:
return array.getArray();
case double_ARRAY:
return SqlgUtil.convertObjectOfDoublesArrayToDoublePrimitiveArray((Object[])array.getArray());
case FLOAT_ARRAY:
return array.getArray();
case float_ARRAY:
return SqlgUtil.convertObjectOfFloatsArrayToFloatPrimitiveArray((Object[])array.getArray());
case STRING_ARRAY:
return array.getArray();
case LOCALDATETIME_ARRAY:
Timestamp[] timestamps=(Timestamp[])array.getArray();
return SqlgUtil.copyToLocalDateTime(timestamps,new LocalDateTime[timestamps.length]);
case LOCALDATE_ARRAY:
Date[] dates=(Date[])array.getArray();
return SqlgUtil.copyToLocalDate(dates,new LocalDate[dates.length]);
case LOCALTIME_ARRAY:
Time[] times=(Time[])array.getArray();
return SqlgUtil.copyToLocalTime(times,new LocalTime[times.length]);
case JSON_ARRAY:
String arrayAsString=array.toString();
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
arrayAsString=StringEscapeUtils.unescapeJava(arrayAsString);
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
String[] jsons=arrayAsString.split(""String_Node_Str"");
JsonNode[] jsonNodes=new JsonNode[jsons.length];
ObjectMapper objectMapper=new ObjectMapper();
int count=0;
for (String json : jsons) {
try {
JsonNode jsonNode=objectMapper.readTree(json);
jsonNodes[count++]=jsonNode;
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
return jsonNodes;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.9762739839075716
166936,"default String sqlgSqlgSchemaCreationScript(){
  return ""String_Node_Str"";
}","default String sqlgSqlgSchemaCreationScript(){
  return ""String_Node_Str"" + this.maybeWrapInQoutes(""String_Node_Str"");
}",0.7755102040816326
166937,"private boolean existGuiSchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    if (this.sqlDialect.supportSchemas()) {
      DatabaseMetaData metadata=conn.getMetaData();
      ResultSet schemaRs=metadata.getSchemas(null,Schema.GLOBAL_UNIQUE_INDEX_SCHEMA);
      return schemaRs.next();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","private boolean existGuiSchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    if (this.sqlDialect.supportSchemas()) {
      DatabaseMetaData metadata=conn.getMetaData();
      return this.sqlDialect.schemaExists(metadata,null,Schema.GLOBAL_UNIQUE_INDEX_SCHEMA);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.8926174496644296
166938,"private boolean existSqlgSchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    if (this.sqlDialect.supportSchemas()) {
      DatabaseMetaData metadata=conn.getMetaData();
      ResultSet schemaRs=metadata.getSchemas(null,SQLG_SCHEMA);
      return schemaRs.next();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","private boolean existSqlgSchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    if (this.sqlDialect.supportSchemas()) {
      DatabaseMetaData metadata=conn.getMetaData();
      return this.sqlDialect.schemaExists(metadata,null,SQLG_SCHEMA);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.8873239436619719
166939,"private void createGuiSchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try (Statement statement=conn.createStatement()){
    statement.execute(""String_Node_Str"" + Schema.GLOBAL_UNIQUE_INDEX_SCHEMA + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","private void createGuiSchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try (Statement statement=conn.createStatement()){
    statement.execute(""String_Node_Str"" + this.sqlDialect.maybeWrapInQoutes(Schema.GLOBAL_UNIQUE_INDEX_SCHEMA) + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9464012251148544
166940,"private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","private void appendSqlValue(StringBuilder sql,Object value,PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    if (value != null) {
      sql.append(value);
    }
 else {
      sql.append(""String_Node_Str"");
    }
  break;
case BYTE:
if (value != null) {
  sql.append(value);
}
 else {
  sql.append(""String_Node_Str"");
}
break;
case SHORT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE:
if (value != null) {
sql.append(value);
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(shiftDST((LocalTime)value).toString());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME:
if (value != null) {
ZonedDateTime zonedDateTime=(ZonedDateTime)value;
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION:
if (value != null) {
Duration duration=(Duration)value;
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD:
if (value != null) {
Period period=(Period)value;
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case JSON:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(value.toString().replace(""String_Node_Str"",""String_Node_Str""));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case boolean_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
boolean[] booleanArray=(boolean[])value;
int countBooleanArray=1;
for (Boolean b : booleanArray) {
sql.append(b);
if (countBooleanArray++ < booleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BOOLEAN_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Boolean[] BooleanArray=(Boolean[])value;
int countBOOLEANArray=1;
for (Boolean b : BooleanArray) {
sql.append(b);
if (countBOOLEANArray++ < BooleanArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case byte_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])value));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case BYTE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
sql.append(PGbytea.toPGString((byte[])SqlgUtil.convertByteArrayToPrimitiveArray((Byte[])value)));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case short_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
short[] sortArray=(short[])value;
int countShortArray=1;
for (Short s : sortArray) {
sql.append(s);
if (countShortArray++ < sortArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case SHORT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Short[] shortObjectArray=(Short[])value;
for (int i=0; i < shortObjectArray.length; i++) {
Short s=shortObjectArray[i];
sql.append(s);
if (i < shortObjectArray.length - 1) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case int_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
int[] intArray=(int[])value;
int countIntArray=1;
for (Integer i : intArray) {
sql.append(i);
if (countIntArray++ < intArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case INTEGER_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Integer[] integerArray=(Integer[])value;
int countIntegerArray=1;
for (Integer i : integerArray) {
sql.append(i);
if (countIntegerArray++ < integerArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LONG_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Long[] longArray=(Long[])value;
int countLongArray=1;
for (Long l : longArray) {
sql.append(l);
if (countLongArray++ < longArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case long_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
long[] longPrimitiveArray=(long[])value;
int countLongPrimitiveArray=1;
for (Long l : longPrimitiveArray) {
sql.append(l);
if (countLongPrimitiveArray++ < longPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case FLOAT_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Float[] floatArray=(Float[])value;
int countFloatArray=1;
for (Float f : floatArray) {
sql.append(f);
if (countFloatArray++ < floatArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case float_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
float[] floatPrimitiveArray=(float[])value;
int countFloatPrimitiveArray=1;
for (Float f : floatPrimitiveArray) {
sql.append(f);
if (countFloatPrimitiveArray++ < floatPrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DOUBLE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Double[] doubleArray=(Double[])value;
int countDoubleArray=1;
for (Double d : doubleArray) {
sql.append(d);
if (countDoubleArray++ < doubleArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case double_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
double[] doublePrimitiveArray=(double[])value;
int countDoublePrimitiveArray=1;
for (Double d : doublePrimitiveArray) {
sql.append(d);
if (countDoublePrimitiveArray++ < doublePrimitiveArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case STRING_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
String[] stringArray=(String[])value;
int countStringArray=1;
for (String s : stringArray) {
sql.append(""String_Node_Str"");
sql.append(s);
sql.append(""String_Node_Str"");
if (countStringArray++ < stringArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDateTime[] localDateTimeArray=(LocalDateTime[])value;
int countStringArray=1;
for (LocalDateTime s : localDateTimeArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALDATE_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalDate[] localDateArray=(LocalDate[])value;
int countStringArray=1;
for (LocalDate s : localDateArray) {
sql.append(""String_Node_Str"");
sql.append(s.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localDateArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case LOCALTIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
LocalTime[] localTimeArray=(LocalTime[])value;
int countStringArray=1;
for (LocalTime s : localTimeArray) {
sql.append(""String_Node_Str"");
sql.append(shiftDST(s).toLocalTime().toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case ZONEDDATETIME_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
ZonedDateTime[] localZonedDateTimeArray=(ZonedDateTime[])value;
int countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(localDateTime.toString());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (ZonedDateTime zonedDateTime : localZonedDateTimeArray) {
LocalDateTime localDateTime=zonedDateTime.toLocalDateTime();
TimeZone timeZone=TimeZone.getTimeZone(zonedDateTime.getZone().getId());
sql.append(""String_Node_Str"");
sql.append(timeZone.getID());
sql.append(""String_Node_Str"");
if (countStringArray++ < localZonedDateTimeArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case DURATION_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Duration[] durationArray=(Duration[])value;
int countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getSeconds());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Duration duration : durationArray) {
sql.append(""String_Node_Str"");
sql.append(duration.getNano());
sql.append(""String_Node_Str"");
if (countStringArray++ < durationArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case PERIOD_ARRAY:
if (value != null) {
sql.append(""String_Node_Str"");
Period[] periodArray=(Period[])value;
int countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getYears());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getMonths());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
countStringArray=1;
for (Period period : periodArray) {
sql.append(""String_Node_Str"");
sql.append(period.getDays());
sql.append(""String_Node_Str"");
if (countStringArray++ < periodArray.length) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
break;
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case LINESTRING:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case JSON_ARRAY:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.9990615468835536
166941,"private Array createArrayOf(Connection conn,PropertyType propertyType,Object[] data){
  try {
switch (propertyType) {
case STRING_ARRAY:
case long_ARRAY:
case LONG_ARRAY:
case int_ARRAY:
case INTEGER_ARRAY:
case short_ARRAY:
case SHORT_ARRAY:
case float_ARRAY:
case FLOAT_ARRAY:
case double_ARRAY:
case DOUBLE_ARRAY:
case boolean_ARRAY:
case BOOLEAN_ARRAY:
case LOCALDATETIME_ARRAY:
case LOCALDATE_ARRAY:
case LOCALTIME_ARRAY:
case ZONEDDATETIME_ARRAY:
case JSON_ARRAY:
      return conn.createArrayOf(getArrayDriverType(propertyType),data);
default :
    throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}","private Array createArrayOf(Connection conn,PropertyType propertyType,Object[] data){
  try {
switch (propertyType) {
case LOCALTIME_ARRAY:
      if (data != null) {
        int a=0;
        for (        Object o : data) {
          data[a++]=shiftDST(((Time)o).toLocalTime());
        }
      }
case STRING_ARRAY:
case long_ARRAY:
case LONG_ARRAY:
case int_ARRAY:
case INTEGER_ARRAY:
case short_ARRAY:
case SHORT_ARRAY:
case float_ARRAY:
case FLOAT_ARRAY:
case double_ARRAY:
case DOUBLE_ARRAY:
case boolean_ARRAY:
case BOOLEAN_ARRAY:
case LOCALDATETIME_ARRAY:
case LOCALDATE_ARRAY:
case ZONEDDATETIME_ARRAY:
case JSON_ARRAY:
    return conn.createArrayOf(getArrayDriverType(propertyType),data);
default :
  throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}",0.8558441558441559
166942,"@Override public Object convertArray(PropertyType propertyType,java.sql.Array array) throws SQLException {
switch (propertyType) {
case BOOLEAN_ARRAY:
    return array.getArray();
case boolean_ARRAY:
  return SqlgUtil.convertObjectArrayToBooleanPrimitiveArray((Object[])array.getArray());
case SHORT_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortArray((Object[])array.getArray());
case short_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortPrimitiveArray((Object[])array.getArray());
case INTEGER_ARRAY:
return array.getArray();
case int_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToIntegerPrimitiveArray((Object[])array.getArray());
case LONG_ARRAY:
return array.getArray();
case long_ARRAY:
return SqlgUtil.convertObjectOfLongsArrayToLongPrimitiveArray((Object[])array.getArray());
case DOUBLE_ARRAY:
return array.getArray();
case double_ARRAY:
return SqlgUtil.convertObjectOfDoublesArrayToDoublePrimitiveArray((Object[])array.getArray());
case FLOAT_ARRAY:
return array.getArray();
case float_ARRAY:
return SqlgUtil.convertObjectOfFloatsArrayToFloatPrimitiveArray((Object[])array.getArray());
case STRING_ARRAY:
return array.getArray();
case LOCALDATETIME_ARRAY:
Timestamp[] timestamps=(Timestamp[])array.getArray();
return SqlgUtil.copyToLocalDateTime(timestamps,new LocalDateTime[timestamps.length]);
case LOCALDATE_ARRAY:
Date[] dates=(Date[])array.getArray();
return SqlgUtil.copyToLocalDate(dates,new LocalDate[dates.length]);
case LOCALTIME_ARRAY:
Time[] times=(Time[])array.getArray();
LocalTime[] lts=SqlgUtil.copyToLocalTime(times,new LocalTime[times.length]);
for (int a=0; a < times.length; a++) {
lts[a]=shiftDST(lts[a]).toLocalTime();
}
return lts;
case JSON_ARRAY:
String arrayAsString=array.toString();
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
arrayAsString=StringEscapeUtils.unescapeJava(arrayAsString);
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
String[] jsons=arrayAsString.split(""String_Node_Str"");
JsonNode[] jsonNodes=new JsonNode[jsons.length];
ObjectMapper objectMapper=new ObjectMapper();
int count=0;
for (String json : jsons) {
try {
JsonNode jsonNode=objectMapper.readTree(json);
jsonNodes[count++]=jsonNode;
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
return jsonNodes;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","@Override public Object convertArray(PropertyType propertyType,java.sql.Array array) throws SQLException {
switch (propertyType) {
case BOOLEAN_ARRAY:
    return array.getArray();
case boolean_ARRAY:
  return SqlgUtil.convertObjectArrayToBooleanPrimitiveArray((Object[])array.getArray());
case SHORT_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortArray((Object[])array.getArray());
case short_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToShortPrimitiveArray((Object[])array.getArray());
case INTEGER_ARRAY:
return array.getArray();
case int_ARRAY:
return SqlgUtil.convertObjectOfIntegersArrayToIntegerPrimitiveArray((Object[])array.getArray());
case LONG_ARRAY:
return array.getArray();
case long_ARRAY:
return SqlgUtil.convertObjectOfLongsArrayToLongPrimitiveArray((Object[])array.getArray());
case DOUBLE_ARRAY:
return array.getArray();
case double_ARRAY:
return SqlgUtil.convertObjectOfDoublesArrayToDoublePrimitiveArray((Object[])array.getArray());
case FLOAT_ARRAY:
return array.getArray();
case float_ARRAY:
return SqlgUtil.convertObjectOfFloatsArrayToFloatPrimitiveArray((Object[])array.getArray());
case STRING_ARRAY:
return array.getArray();
case LOCALDATETIME_ARRAY:
Timestamp[] timestamps=(Timestamp[])array.getArray();
return SqlgUtil.copyToLocalDateTime(timestamps,new LocalDateTime[timestamps.length]);
case LOCALDATE_ARRAY:
Date[] dates=(Date[])array.getArray();
return SqlgUtil.copyToLocalDate(dates,new LocalDate[dates.length]);
case LOCALTIME_ARRAY:
Time[] times=(Time[])array.getArray();
return SqlgUtil.copyToLocalTime(times,new LocalTime[times.length]);
case JSON_ARRAY:
String arrayAsString=array.toString();
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
arrayAsString=StringEscapeUtils.unescapeJava(arrayAsString);
arrayAsString=arrayAsString.substring(1);
arrayAsString=arrayAsString.substring(0,arrayAsString.length() - 1);
String[] jsons=arrayAsString.split(""String_Node_Str"");
JsonNode[] jsonNodes=new JsonNode[jsons.length];
ObjectMapper objectMapper=new ObjectMapper();
int count=0;
for (String json : jsons) {
try {
JsonNode jsonNode=objectMapper.readTree(json);
jsonNodes[count++]=jsonNode;
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
return jsonNodes;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.9762739839075716
166943,"void combineSteps(Traversal.Admin<?,?> traversal,List<Step> steps,ListIterator<Step> stepIterator){
  SqlgStep sqlgStep=null;
  Step previous=null;
  ReplacedStep<?,?> lastReplacedStep=null;
  int pathCount=0;
  boolean alreadyReplacedGraphStep=false;
  boolean repeatStepAdded;
  boolean chooseStepAdded=false;
  MutableInt repeatStepsAdded=new MutableInt(0);
  while (stepIterator.hasNext()) {
    Step step=stepIterator.next();
    if (step instanceof RepeatStep) {
      try {
        repeatStepAdded=flattenRepeatStep(steps,stepIterator,(RepeatStep)step,traversal,repeatStepsAdded);
        if (this instanceof SqlgVertexStepStrategy && !repeatStepAdded) {
          traversal.addStep(new IdentityStep<>(traversal));
        }
      }
 catch (      UnoptimizableException e) {
        lastReplacedStep.addLabel((pathCount) + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
        return;
      }
    }
 else     if (step instanceof ChooseStep) {
      try {
        chooseStepAdded=flattenChooseStep(steps,stepIterator,(ChooseStep)step,traversal);
      }
 catch (      UnoptimizableException e) {
        return;
      }
    }
 else {
      if (isReplaceableStep(step.getClass(),alreadyReplacedGraphStep)) {
        boolean emit=false;
        boolean emitFirst=false;
        boolean untilFirst=false;
        Set<String> labels=new HashSet<>();
        if (repeatStepsAdded.getValue() > 0) {
          repeatStepsAdded.decrement();
          RepeatStep repeatStep=(RepeatStep)step.getTraversal().getParent();
          emit=repeatStep.getEmitTraversal() != null;
          emitFirst=repeatStep.emitFirst;
          untilFirst=repeatStep.untilFirst;
          labels.addAll(repeatStep.getLabels());
        }
        pathCount++;
        @SuppressWarnings(""String_Node_Str"") ReplacedStep replacedStep=ReplacedStep.from(((SqlgGraph)traversal.getGraph().get()).getTopology(),(AbstractStep)step,pathCount);
        if (sqlgStep == null || step instanceof GraphStep) {
          sqlgStep=constructSqlgStep(traversal,step);
          if (previous != null) {
            sqlgStep.setPreviousStep(previous);
          }
          alreadyReplacedGraphStep=alreadyReplacedGraphStep || step instanceof GraphStep;
          if (this instanceof SqlgGraphStepStrategy) {
            sqlgStep.addReplacedStep(replacedStep);
          }
 else           if (this instanceof SqlgVertexStepStrategy) {
            previous=step;
          }
 else {
            throw new IllegalStateException(""String_Node_Str"" + this.getClass().getName());
          }
          replaceStepInTraversal(step,sqlgStep,traversal);
          if (sqlgStep instanceof SqlgGraphStepCompiled && ((SqlgGraphStepCompiled)sqlgStep).getIds().length > 0) {
            addHasContainerForIds((SqlgGraphStepCompiled)sqlgStep,replacedStep);
          }
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
        if (emit) {
          List<ReplacedStep> previousReplacedSteps=sqlgStep.getReplacedSteps();
          ReplacedStep previousReplacedStep;
          if (emitFirst) {
            previousReplacedStep=previousReplacedSteps.get(previousReplacedSteps.size() - 1);
            pathCount--;
          }
 else {
            previousReplacedStep=replacedStep;
          }
          previousReplacedStep.setEmit(true);
          previousReplacedStep.setUntilFirst(untilFirst);
          if (labels.isEmpty()) {
            previousReplacedStep.addLabel(pathCount + BaseSqlgStrategy.EMIT_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          }
 else {
            for (            String label : labels) {
              previousReplacedStep.addLabel(pathCount + BaseSqlgStrategy.EMIT_LABEL_SUFFIX + label);
            }
          }
          previousReplacedStep.getLabels().remove(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          if (emitFirst) {
            pathCount++;
          }
        }
        if (chooseStepAdded) {
          pathCount--;
          List<ReplacedStep> previousReplacedSteps=sqlgStep.getReplacedSteps();
          ReplacedStep previousReplacedStep=previousReplacedSteps.get(previousReplacedSteps.size() - 1);
          previousReplacedStep.setLeftJoin(true);
          previousReplacedStep.getLabels().remove(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          previousReplacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          pathCount++;
        }
        if (replacedStep.getLabels().isEmpty()) {
          boolean precedesPathStep=precedesPathOrTreeStep(traversal);
          if (precedesPathStep) {
            replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          }
        }
        if (previous != null && !(step instanceof GraphStep)) {
          sqlgStep.addReplacedStep(replacedStep);
          int index=TraversalHelper.stepIndex(step,traversal);
          if (index != -1) {
            traversal.removeStep(step);
          }
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
        previous=step;
        lastReplacedStep=replacedStep;
        chooseStepAdded=false;
      }
 else {
        if (lastReplacedStep != null) {
          boolean doLastEntry=step instanceof OrderGlobalStep || step instanceof RangeGlobalStep;
          if (!doLastEntry && (step instanceof SelectStep || step instanceof SelectOneStep || step instanceof EmptyStep) && stepIterator.hasNext()) {
            Step<?,?> nextStep=stepIterator.next();
            doLastEntry=nextStep instanceof OrderGlobalStep || nextStep instanceof RangeGlobalStep;
            stepIterator.previous();
          }
          if (doLastEntry) {
            doLastEntry(step,stepIterator,traversal,lastReplacedStep,sqlgStep);
          }
        }
        break;
      }
    }
  }
  if (lastReplacedStep != null && !lastReplacedStep.isEmit() && lastReplacedStep.getLabels().isEmpty()) {
    lastReplacedStep.addLabel((pathCount) + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
  }
}","void combineSteps(Traversal.Admin<?,?> traversal,List<Step> steps,ListIterator<Step> stepIterator){
  SqlgStep sqlgStep=null;
  Step previous=null;
  ReplacedStep<?,?> lastReplacedStep=null;
  int pathCount=0;
  boolean alreadyReplacedGraphStep=false;
  boolean repeatStepAdded;
  boolean chooseStepAdded=false;
  MutableInt repeatStepsAdded=new MutableInt(0);
  while (stepIterator.hasNext()) {
    Step step=stepIterator.next();
    if (step instanceof RepeatStep) {
      try {
        repeatStepAdded=flattenRepeatStep(steps,stepIterator,(RepeatStep)step,traversal,repeatStepsAdded);
        if (this instanceof SqlgVertexStepStrategy && !repeatStepAdded) {
          traversal.addStep(new IdentityStep<>(traversal));
        }
      }
 catch (      UnoptimizableException e) {
        lastReplacedStep.addLabel((pathCount) + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
        return;
      }
    }
 else     if (step instanceof ChooseStep) {
      try {
        chooseStepAdded=flattenChooseStep(steps,stepIterator,(ChooseStep)step,traversal);
      }
 catch (      UnoptimizableException e) {
        return;
      }
    }
 else {
      if (isReplaceableStep(step.getClass(),alreadyReplacedGraphStep)) {
        boolean emit=false;
        boolean emitFirst=false;
        boolean untilFirst=false;
        Set<String> labels=new HashSet<>();
        if (repeatStepsAdded.getValue() > 0) {
          repeatStepsAdded.decrement();
          RepeatStep repeatStep=(RepeatStep)step.getTraversal().getParent();
          emit=repeatStep.getEmitTraversal() != null;
          emitFirst=repeatStep.emitFirst;
          untilFirst=repeatStep.untilFirst;
          labels.addAll(repeatStep.getLabels());
        }
        pathCount++;
        @SuppressWarnings(""String_Node_Str"") ReplacedStep replacedStep=ReplacedStep.from(((SqlgGraph)traversal.getGraph().get()).getTopology(),(AbstractStep)step,pathCount);
        if (sqlgStep == null || step instanceof GraphStep) {
          sqlgStep=constructSqlgStep(traversal,step);
          if (previous != null) {
            sqlgStep.setPreviousStep(previous);
          }
          alreadyReplacedGraphStep=alreadyReplacedGraphStep || step instanceof GraphStep;
          if (this instanceof SqlgGraphStepStrategy) {
            sqlgStep.addReplacedStep(replacedStep);
          }
 else           if (this instanceof SqlgVertexStepStrategy) {
            previous=step;
          }
 else {
            throw new IllegalStateException(""String_Node_Str"" + this.getClass().getName());
          }
          replaceStepInTraversal(step,sqlgStep,traversal);
          if (sqlgStep instanceof SqlgGraphStepCompiled && ((SqlgGraphStepCompiled)sqlgStep).getIds().length > 0) {
            addHasContainerForIds((SqlgGraphStepCompiled)sqlgStep,replacedStep);
          }
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
        if (emit) {
          List<ReplacedStep> previousReplacedSteps=sqlgStep.getReplacedSteps();
          ReplacedStep previousReplacedStep;
          if (emitFirst) {
            previousReplacedStep=previousReplacedSteps.get(previousReplacedSteps.size() - 1);
            pathCount--;
          }
 else {
            previousReplacedStep=replacedStep;
          }
          previousReplacedStep.setEmit(true);
          previousReplacedStep.setUntilFirst(untilFirst);
          if (labels.isEmpty()) {
            previousReplacedStep.addLabel(pathCount + BaseSqlgStrategy.EMIT_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          }
 else {
            for (            String label : labels) {
              previousReplacedStep.addLabel(pathCount + BaseSqlgStrategy.EMIT_LABEL_SUFFIX + label);
            }
          }
          previousReplacedStep.getLabels().remove(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          if (emitFirst) {
            pathCount++;
          }
        }
        if (chooseStepAdded) {
          pathCount--;
          List<ReplacedStep> previousReplacedSteps=sqlgStep.getReplacedSteps();
          ReplacedStep previousReplacedStep=previousReplacedSteps.get(previousReplacedSteps.size() - 1);
          previousReplacedStep.setLeftJoin(true);
          previousReplacedStep.getLabels().remove(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          previousReplacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          pathCount++;
        }
        if (replacedStep.getLabels().isEmpty()) {
          boolean precedesPathStep=precedesPathOrTreeStep(traversal);
          if (precedesPathStep) {
            replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          }
        }
        if (previous != null && !(step instanceof GraphStep)) {
          sqlgStep.addReplacedStep(replacedStep);
          int index=TraversalHelper.stepIndex(step,traversal);
          if (index != -1) {
            traversal.removeStep(step);
          }
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
        previous=step;
        lastReplacedStep=replacedStep;
        chooseStepAdded=false;
      }
 else {
        if (lastReplacedStep != null) {
          boolean doLastEntry=step instanceof OrderGlobalStep || step instanceof RangeGlobalStep;
          if (!doLastEntry && (step instanceof SelectStep || step instanceof SelectOneStep || step instanceof EmptyStep) && stepIterator.hasNext()) {
            Step<?,?> nextStep=stepIterator.next();
            doLastEntry=nextStep instanceof OrderGlobalStep || nextStep instanceof RangeGlobalStep;
            stepIterator.previous();
          }
          if (doLastEntry) {
            doLastEntry(step,stepIterator,traversal,lastReplacedStep,sqlgStep,pathCount);
          }
        }
        break;
      }
    }
  }
  if (lastReplacedStep != null && !lastReplacedStep.isEmit() && lastReplacedStep.getLabels().isEmpty()) {
    lastReplacedStep.addLabel((pathCount) + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
  }
}",0.9991944578701466
166944,"protected abstract void doLastEntry(Step step,ListIterator<Step> stepIterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> lastReplacedStep,SqlgStep sqlgStep);","protected abstract void doLastEntry(Step step,ListIterator<Step> stepIterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> lastReplacedStep,SqlgStep sqlgStep,int pathCount);",0.9588235294117649
166945,"private static void collectOrderGlobalSteps(Step step,ListIterator<Step> iterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> replacedStep){
  if (step instanceof OrderGlobalStep && isElementValueComparator((OrderGlobalStep)step)) {
    iterator.remove();
    traversal.removeStep(step);
    replacedStep.getComparators().addAll(((OrderGlobalStep)step).getComparators());
    if (iterator.hasNext()) {
      step=iterator.next();
      if (!collectRangeGlobalStep(step,iterator,traversal,replacedStep,false)) {
        iterator.previous();
      }
    }
  }
 else   if (collectRangeGlobalStep(step,iterator,traversal,replacedStep,false)) {
  }
 else {
    collectSelectOrderGlobalSteps(iterator,traversal,replacedStep);
  }
}","private static void collectOrderGlobalSteps(Step step,ListIterator<Step> iterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> replacedStep,int pathCount){
  if (step instanceof OrderGlobalStep && isElementValueComparator((OrderGlobalStep)step)) {
    iterator.remove();
    traversal.removeStep(step);
    replacedStep.getComparators().addAll(((OrderGlobalStep)step).getComparators());
    for (    Object l : step.getLabels()) {
      replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + l);
    }
    if (iterator.hasNext()) {
      step=iterator.next();
      if (!collectRangeGlobalStep(step,iterator,traversal,replacedStep,false,pathCount)) {
        iterator.previous();
      }
    }
  }
 else   if (collectRangeGlobalStep(step,iterator,traversal,replacedStep,false,pathCount)) {
  }
 else {
    collectSelectOrderGlobalSteps(iterator,traversal,replacedStep,pathCount);
  }
}",0.8782874617737003
166946,"@Override protected void doLastEntry(Step step,ListIterator<Step> stepIterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> lastReplacedStep,SqlgStep sqlgStep){
  Preconditions.checkArgument(lastReplacedStep != null);
  sqlgStep.parseForStrategy();
  if (!sqlgStep.isForMultipleQueries()) {
    collectOrderGlobalSteps(step,stepIterator,traversal,lastReplacedStep);
  }
 else {
    if (stepIterator.hasNext()) {
      step=stepIterator.next();
      if (!collectRangeGlobalStep(step,stepIterator,traversal,lastReplacedStep,true)) {
        stepIterator.previous();
      }
    }
  }
}","@Override protected void doLastEntry(Step step,ListIterator<Step> stepIterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> lastReplacedStep,SqlgStep sqlgStep,int pathCount){
  Preconditions.checkArgument(lastReplacedStep != null);
  sqlgStep.parseForStrategy();
  if (!sqlgStep.isForMultipleQueries()) {
    collectOrderGlobalSteps(step,stepIterator,traversal,lastReplacedStep,pathCount);
  }
 else {
    if (stepIterator.hasNext()) {
      step=stepIterator.next();
      if (!collectRangeGlobalStep(step,stepIterator,traversal,lastReplacedStep,true,pathCount)) {
        stepIterator.previous();
      }
    }
  }
}",0.971900826446281
166947,"/** 
 * collect a range global step
 * @param step the current step to collect
 * @param iterator the step iterator
 * @param traversal the traversal of all steps
 * @param replacedStep the current replaced step collecting the info
 * @param multiple are we in a multiple label query?
 * @return true if we impacted the iterator by removing the current step, false otherwise
 */
private static boolean collectRangeGlobalStep(Step step,ListIterator<Step> iterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> replacedStep,boolean multiple){
  if (step instanceof RangeGlobalStep<?>) {
    RangeGlobalStep<?> rgs=(RangeGlobalStep<?>)step;
    if (!multiple || rgs.getLowRange() == 0) {
      long high=rgs.getHighRange();
      if (multiple) {
        high+=1;
      }
      replacedStep.setRange(Range.between(rgs.getLowRange(),high));
      if (!multiple) {
        iterator.remove();
        traversal.removeStep(step);
        return true;
      }
    }
  }
  return false;
}","/** 
 * collect a range global step
 * @param step the current step to collect
 * @param iterator the step iterator
 * @param traversal the traversal of all steps
 * @param replacedStep the current replaced step collecting the info
 * @param multiple are we in a multiple label query?
 * @return true if we impacted the iterator by removing the current step, false otherwise
 */
private static boolean collectRangeGlobalStep(Step step,ListIterator<Step> iterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> replacedStep,boolean multiple,int pathCount){
  if (step instanceof RangeGlobalStep<?>) {
    RangeGlobalStep<?> rgs=(RangeGlobalStep<?>)step;
    if (!multiple || rgs.getLowRange() == 0) {
      long high=rgs.getHighRange();
      if (multiple) {
        high+=1;
      }
      replacedStep.setRange(Range.between(rgs.getLowRange(),high));
      for (      Object l : step.getLabels()) {
        replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + l);
      }
      if (!multiple) {
        iterator.remove();
        traversal.removeStep(step);
        return true;
      }
    }
  }
  return false;
}",0.9267139479905436
166948,"private static void collectSelectOrderGlobalSteps(ListIterator<Step> iterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> replacedStep){
  while (iterator.hasNext()) {
    Step<?,?> currentStep=iterator.next();
    if (currentStep instanceof OrderGlobalStep && (isElementValueComparator((OrderGlobalStep)currentStep) || isTraversalComparatorWithSelectOneStep((OrderGlobalStep)currentStep))) {
      iterator.remove();
      traversal.removeStep(currentStep);
      replacedStep.getComparators().addAll(((OrderGlobalStep)currentStep).getComparators());
    }
 else     if (currentStep instanceof IdentityStep) {
    }
 else     if (collectRangeGlobalStep(currentStep,iterator,traversal,replacedStep,false)) {
    }
 else {
      iterator.previous();
      break;
    }
  }
}","private static void collectSelectOrderGlobalSteps(ListIterator<Step> iterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> replacedStep,int pathCount){
  while (iterator.hasNext()) {
    Step<?,?> currentStep=iterator.next();
    if (currentStep instanceof OrderGlobalStep && (isElementValueComparator((OrderGlobalStep)currentStep) || isTraversalComparatorWithSelectOneStep((OrderGlobalStep)currentStep))) {
      iterator.remove();
      traversal.removeStep(currentStep);
      replacedStep.getComparators().addAll(((OrderGlobalStep)currentStep).getComparators());
      for (      Object l : currentStep.getLabels()) {
        replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + l);
      }
    }
 else     if (currentStep instanceof IdentityStep) {
    }
 else     if (collectRangeGlobalStep(currentStep,iterator,traversal,replacedStep,false,pathCount)) {
    }
 else {
      iterator.previous();
      break;
    }
  }
}",0.9015063731170336
166949,"@Override protected void doLastEntry(Step step,ListIterator<Step> stepIterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> lastReplacedStep,SqlgStep sqlgStep){
  Preconditions.checkArgument(lastReplacedStep != null);
  replaceOrderGlobalSteps(step,stepIterator,traversal,lastReplacedStep);
}","@Override protected void doLastEntry(Step step,ListIterator<Step> stepIterator,Traversal.Admin<?,?> traversal,ReplacedStep<?,?> lastReplacedStep,SqlgStep sqlgStep,int pathCount){
  Preconditions.checkArgument(lastReplacedStep != null);
  replaceOrderGlobalSteps(step,stepIterator,traversal,lastReplacedStep);
}",0.976897689768977
166950,"public String toSql(SqlgGraph sqlgGraph,SchemaTableTree schemaTableTree,HasContainer hasContainer){
  String result=""String_Node_Str"";
  String prefix=sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getSchema());
  prefix+=""String_Node_Str"";
  prefix+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getTable());
  if (p.getBiPredicate() instanceof Compare) {
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      result+=prefix + ""String_Node_Str"";
    }
 else {
      result+=prefix + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    }
    result+=compareToSql((Compare)p.getBiPredicate());
    return result;
  }
 else   if ((!sqlgGraph.getSqlDialect().supportsBulkWithinOut() || (!SqlgUtil.isBulkWithinAndOut(sqlgGraph,hasContainer))) && p.getBiPredicate() instanceof Contains) {
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      result+=prefix + ""String_Node_Str"";
    }
 else {
      result+=prefix + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    }
    result+=containsToSql((Contains)p.getBiPredicate(),((Collection<?>)p.getValue()).size());
    return result;
  }
 else   if (sqlgGraph.getSqlDialect().supportsBulkWithinOut() && p.getBiPredicate() instanceof Contains) {
    result+=""String_Node_Str"" + (schemaTableTree.rootSchemaTableTree().getTmpTableAliasCounter() - 1);
    result+=""String_Node_Str"";
    return result;
  }
 else   if (p instanceof AndP) {
    AndP<?> andP=(AndP<?>)p;
    Preconditions.checkState(andP.getPredicates().size() == 2,""String_Node_Str"");
    P<?> p1=andP.getPredicates().get(0);
    String key;
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      key=result + ""String_Node_Str"";
    }
 else {
      key=result + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    }
    result+=prefix + key + compareToSql((Compare)p1.getBiPredicate());
    P<?> p2=andP.getPredicates().get(1);
    result+=""String_Node_Str"" + prefix + key+ compareToSql((Compare)p2.getBiPredicate());
    return result;
  }
 else   if (p instanceof OrP) {
    OrP<?> orP=(OrP<?>)p;
    Preconditions.checkState(orP.getPredicates().size() == 2,""String_Node_Str"");
    P<?> p1=orP.getPredicates().get(0);
    String key;
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      key=result + ""String_Node_Str"";
    }
 else {
      key=result + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    }
    result+=prefix + key + compareToSql((Compare)p1.getBiPredicate());
    P<?> p2=orP.getPredicates().get(1);
    result+=""String_Node_Str"" + prefix + key+ compareToSql((Compare)p2.getBiPredicate());
    return result;
  }
 else   if (p.getBiPredicate() instanceof Text) {
    prefix+=""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    result+=textToSql(sqlgGraph.getSqlDialect(),prefix,(Text)p.getBiPredicate());
    return result;
  }
 else   if (p.getBiPredicate() instanceof FullText) {
    prefix+=""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    FullText ft=(FullText)p.getBiPredicate();
    result+=sqlgGraph.getSqlDialect().getFullTextQueryText(ft,prefix);
    return result;
  }
  throw new IllegalStateException(""String_Node_Str"" + p.getBiPredicate().toString());
}","public String toSql(SqlgGraph sqlgGraph,SchemaTableTree schemaTableTree,HasContainer hasContainer){
  String result=""String_Node_Str"";
  String prefix=sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getSchema());
  prefix+=""String_Node_Str"";
  prefix+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getTable());
  if (p.getBiPredicate() instanceof Compare) {
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      result+=prefix + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str"");
    }
 else {
      result+=prefix + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    }
    result+=compareToSql((Compare)p.getBiPredicate());
    return result;
  }
 else   if ((!sqlgGraph.getSqlDialect().supportsBulkWithinOut() || (!SqlgUtil.isBulkWithinAndOut(sqlgGraph,hasContainer))) && p.getBiPredicate() instanceof Contains) {
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      result+=prefix + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str"");
    }
 else {
      result+=prefix + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    }
    result+=containsToSql((Contains)p.getBiPredicate(),((Collection<?>)p.getValue()).size());
    return result;
  }
 else   if (sqlgGraph.getSqlDialect().supportsBulkWithinOut() && p.getBiPredicate() instanceof Contains) {
    result+=""String_Node_Str"" + (schemaTableTree.rootSchemaTableTree().getTmpTableAliasCounter() - 1);
    result+=""String_Node_Str"";
    return result;
  }
 else   if (p instanceof AndP) {
    AndP<?> andP=(AndP<?>)p;
    Preconditions.checkState(andP.getPredicates().size() == 2,""String_Node_Str"");
    P<?> p1=andP.getPredicates().get(0);
    String key;
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      key=result + sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str"");
    }
 else {
      key=result + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    }
    result+=prefix + key + compareToSql((Compare)p1.getBiPredicate());
    P<?> p2=andP.getPredicates().get(1);
    result+=""String_Node_Str"" + prefix + key+ compareToSql((Compare)p2.getBiPredicate());
    return result;
  }
 else   if (p instanceof OrP) {
    OrP<?> orP=(OrP<?>)p;
    Preconditions.checkState(orP.getPredicates().size() == 2,""String_Node_Str"");
    P<?> p1=orP.getPredicates().get(0);
    String key;
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      key=result + sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str"");
    }
 else {
      key=result + ""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    }
    result+=prefix + key + compareToSql((Compare)p1.getBiPredicate());
    P<?> p2=orP.getPredicates().get(1);
    result+=""String_Node_Str"" + prefix + key+ compareToSql((Compare)p2.getBiPredicate());
    return result;
  }
 else   if (p.getBiPredicate() instanceof Text) {
    prefix+=""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    result+=textToSql(sqlgGraph.getSqlDialect(),prefix,(Text)p.getBiPredicate());
    return result;
  }
 else   if (p.getBiPredicate() instanceof FullText) {
    prefix+=""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
    FullText ft=(FullText)p.getBiPredicate();
    result+=sqlgGraph.getSqlDialect().getFullTextQueryText(ft,prefix);
    return result;
  }
  throw new IllegalStateException(""String_Node_Str"" + p.getBiPredicate().toString());
}",0.9532657657657656
166951,"/** 
 * verify the ""has"" containers we have are valid with the schema table tree given
 * @param schemaTableTree
 * @return true if any has container does NOT match, false if everything is fine
 */
private boolean invalidateByHas(SchemaTableTree schemaTableTree){
  for (  HasContainer hasContainer : schemaTableTree.hasContainers) {
    if (!hasContainer.getKey().equals(TopologyStrategy.TOPOLOGY_SELECTION_WITHOUT) && !hasContainer.getKey().equals(TopologyStrategy.TOPOLOGY_SELECTION_FROM)) {
      if (hasContainer.getKey().equals(label.getAccessor())) {
        SchemaTable hasContainerLabelSchemaTable;
        SchemaTable predicateSchemaTable=SchemaTable.from(sqlgGraph,hasContainer.getValue().toString());
        if (schemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.VERTEX_PREFIX)) {
          hasContainerLabelSchemaTable=SchemaTable.of(predicateSchemaTable.getSchema(),SchemaManager.VERTEX_PREFIX + predicateSchemaTable.getTable());
        }
 else {
          hasContainerLabelSchemaTable=SchemaTable.of(predicateSchemaTable.getSchema(),SchemaManager.EDGE_PREFIX + predicateSchemaTable.getTable());
        }
        if (hasContainer.getBiPredicate().equals(Compare.eq) && !hasContainerLabelSchemaTable.toString().equals(schemaTableTree.getSchemaTable().toString())) {
          return true;
        }
      }
 else       if (!hasContainer.getKey().equals(T.id.getAccessor())) {
        if (hasContainer.getBiPredicate() instanceof FullText && ((FullText)hasContainer.getBiPredicate()).getQuery() != null) {
          return false;
        }
        if (!this.getFilteredAllTables().get(schemaTableTree.getSchemaTable().toString()).containsKey(hasContainer.getKey())) {
          return true;
        }
        if (hasEmptyWithin(hasContainer)) {
          return true;
        }
      }
 else       if (hasEmptyWithin(hasContainer)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * verify the ""has"" containers we have are valid with the schema table tree given
 * @param schemaTableTree
 * @return true if any has container does NOT match, false if everything is fine
 */
private boolean invalidateByHas(SchemaTableTree schemaTableTree){
  for (  HasContainer hasContainer : schemaTableTree.hasContainers) {
    if (!hasContainer.getKey().equals(TopologyStrategy.TOPOLOGY_SELECTION_WITHOUT) && !hasContainer.getKey().equals(TopologyStrategy.TOPOLOGY_SELECTION_FROM)) {
      if (hasContainer.getKey().equals(label.getAccessor())) {
        SchemaTable predicateSchemaTable=SchemaTable.from(sqlgGraph,hasContainer.getValue().toString());
        SchemaTable hasContainerLabelSchemaTable=getHasContainerSchemaTable(schemaTableTree,predicateSchemaTable);
        if (hasContainer.getBiPredicate().equals(Compare.eq) && !hasContainerLabelSchemaTable.toString().equals(schemaTableTree.getSchemaTable().toString())) {
          return true;
        }
      }
 else       if (hasContainer.getKey().equals(T.id.getAccessor())) {
        if (hasContainer.getBiPredicate().equals(Compare.eq)) {
          Object value=hasContainer.getValue();
          SchemaTable hasContainerLabelSchemaTable=getIDContainerSchemaTable(schemaTableTree,value);
          if (!hasContainerLabelSchemaTable.equals(schemaTableTree.getSchemaTable())) {
            return true;
          }
        }
 else         if (hasContainer.getBiPredicate().equals(Contains.within)) {
          Collection<?> c=(Collection<?>)hasContainer.getPredicate().getValue();
          Iterator<?> it=c.iterator();
          Collection<Object> ok=new LinkedList<>();
          while (it.hasNext()) {
            Object value=it.next();
            SchemaTable hasContainerLabelSchemaTable=getIDContainerSchemaTable(schemaTableTree,value);
            if (hasContainerLabelSchemaTable.equals(schemaTableTree.getSchemaTable())) {
              ok.add(value);
            }
          }
          if (ok.isEmpty()) {
            return true;
          }
          ((P<Collection<Object>>)(hasContainer.getPredicate())).setValue(ok);
        }
      }
 else {
        if (hasContainer.getBiPredicate() instanceof FullText && ((FullText)hasContainer.getBiPredicate()).getQuery() != null) {
          return false;
        }
        if (!this.getFilteredAllTables().get(schemaTableTree.getSchemaTable().toString()).containsKey(hasContainer.getKey())) {
          return true;
        }
        if (hasEmptyWithin(hasContainer)) {
          return true;
        }
      }
    }
  }
  return false;
}",0.5613722432613054
166952,"@Test public void test(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a11=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex c1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1);
  b1.addEdge(""String_Node_Str"",c1);
  this.sqlgGraph.tx().commit();
  List<Path> paths=gt.V(a1).local(out().out()).path().toList();
  for (  Path path : paths) {
    System.out.println(path);
  }
}","@Test public void test(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a11=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex c1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1);
  b1.addEdge(""String_Node_Str"",c1);
  this.sqlgGraph.tx().commit();
  DefaultGraphTraversal<Vertex,Path> traversal=(DefaultGraphTraversal)gt.V(a1).local(out().out()).path();
  Assert.assertEquals(3,traversal.getSteps().size());
  Assert.assertTrue(traversal.getSteps().get(1) instanceof LocalStep);
  LocalStep<?,?> localStep=(LocalStep)traversal.getSteps().get(1);
  Assert.assertEquals(1,localStep.getLocalChildren().size());
  Traversal.Admin<?,?> traversal1=localStep.getLocalChildren().get(0);
  Assert.assertEquals(2,traversal1.getSteps().size());
  List<Path> paths=traversal.toList();
  Assert.assertEquals(1,paths.size());
  Assert.assertEquals(3,traversal.getSteps().size());
  Assert.assertTrue(traversal.getSteps().get(1) instanceof LocalStep);
  localStep=(LocalStep)traversal.getSteps().get(1);
  Assert.assertEquals(1,localStep.getLocalChildren().size());
  traversal1=localStep.getLocalChildren().get(0);
  Assert.assertEquals(1,traversal1.getSteps().size());
}",0.530360531309298
166953,"private String printLabeledOuterFromClause(String sql,int counter,Map<String,String> columnNameAliasMapCopy){
  sql+=""String_Node_Str"" + counter + ""String_Node_Str""+ this.labeledMappedAliasIdForOuterFromClause(columnNameAliasMapCopy)+ ""String_Node_Str"";
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.getSchemaTable().toString());
  if (!propertyTypeMap.isEmpty()) {
    sql+=""String_Node_Str"";
  }
  sql=this.printLabeledOuterFromClauseFor(sql,counter,columnNameAliasMapCopy);
  if (this.getSchemaTable().isEdgeTable()) {
    sql+=""String_Node_Str"";
    sql=printLabeledEdgeInOutVertexIdOuterFromClauseFor(sql,counter,columnNameAliasMapCopy);
  }
  return sql;
}","private String printLabeledOuterFromClause(String sql,int counter,Map<String,String> columnNameAliasMapCopy){
  sql+=""String_Node_Str"" + counter + ""String_Node_Str""+ this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.labeledMappedAliasIdForOuterFromClause(columnNameAliasMapCopy));
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.getSchemaTable().toString());
  if (!propertyTypeMap.isEmpty()) {
    sql+=""String_Node_Str"";
  }
  sql=this.printLabeledOuterFromClauseFor(sql,counter,columnNameAliasMapCopy);
  if (this.getSchemaTable().isEdgeTable()) {
    sql+=""String_Node_Str"";
    sql=printLabeledEdgeInOutVertexIdOuterFromClauseFor(sql,counter,columnNameAliasMapCopy);
  }
  return sql;
}",0.9515108924806748
166954,"private static String constructSectionedJoin(SchemaTableTree fromSchemaTableTree,SchemaTableTree toSchemaTableTree,int count){
  if (toSchemaTableTree.direction == Direction.BOTH) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  String rawToLabel;
  if (toSchemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.VERTEX_PREFIX)) {
    rawToLabel=toSchemaTableTree.getSchemaTable().getTable().substring(SchemaManager.VERTEX_PREFIX.length());
  }
 else {
    rawToLabel=toSchemaTableTree.getSchemaTable().getTable();
  }
  String rawFromLabel;
  if (fromSchemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.VERTEX_PREFIX)) {
    rawFromLabel=fromSchemaTableTree.getSchemaTable().getTable().substring(SchemaManager.VERTEX_PREFIX.length());
  }
 else {
    rawFromLabel=fromSchemaTableTree.getSchemaTable().getTable();
  }
  String result;
  if (fromSchemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.EDGE_PREFIX)) {
    if (toSchemaTableTree.isEdgeVertexStep()) {
      if (toSchemaTableTree.direction == Direction.OUT) {
        result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ toSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ rawToLabel+ SchemaManager.OUT_VERTEX_COLUMN_END+ ""String_Node_Str"";
        result+=""String_Node_Str"" + count + ""String_Node_Str""+ toSchemaTableTree.lastMappedAliasId()+ ""String_Node_Str"";
      }
 else {
        result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ toSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ rawToLabel+ SchemaManager.IN_VERTEX_COLUMN_END+ ""String_Node_Str"";
        result+=""String_Node_Str"" + count + ""String_Node_Str""+ toSchemaTableTree.lastMappedAliasId()+ ""String_Node_Str"";
      }
    }
 else {
      if (toSchemaTableTree.direction == Direction.OUT) {
        result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ toSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ rawToLabel+ SchemaManager.IN_VERTEX_COLUMN_END+ ""String_Node_Str"";
        result+=""String_Node_Str"" + count + ""String_Node_Str""+ toSchemaTableTree.lastMappedAliasId()+ ""String_Node_Str"";
      }
 else {
        result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ toSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ rawToLabel+ SchemaManager.OUT_VERTEX_COLUMN_END+ ""String_Node_Str"";
        result+=""String_Node_Str"" + count + ""String_Node_Str""+ toSchemaTableTree.lastMappedAliasId()+ ""String_Node_Str"";
      }
    }
  }
 else {
    if (toSchemaTableTree.direction == Direction.OUT) {
      result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ SchemaManager.ID+ ""String_Node_Str"";
      result+=""String_Node_Str"" + count + ""String_Node_Str""+ toSchemaTableTree.mappedAliasVertexForeignKeyColumnEnd(fromSchemaTableTree,toSchemaTableTree.direction,rawFromLabel)+ ""String_Node_Str"";
    }
 else {
      result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ SchemaManager.ID+ ""String_Node_Str"";
      result+=""String_Node_Str"" + count + ""String_Node_Str""+ toSchemaTableTree.mappedAliasVertexForeignKeyColumnEnd(fromSchemaTableTree,toSchemaTableTree.direction,rawFromLabel)+ ""String_Node_Str"";
    }
  }
  return result;
}","private static String constructSectionedJoin(SqlgGraph sqlgGraph,SchemaTableTree fromSchemaTableTree,SchemaTableTree toSchemaTableTree,int count){
  if (toSchemaTableTree.direction == Direction.BOTH) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  String rawToLabel;
  if (toSchemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.VERTEX_PREFIX)) {
    rawToLabel=toSchemaTableTree.getSchemaTable().getTable().substring(SchemaManager.VERTEX_PREFIX.length());
  }
 else {
    rawToLabel=toSchemaTableTree.getSchemaTable().getTable();
  }
  String rawFromLabel;
  if (fromSchemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.VERTEX_PREFIX)) {
    rawFromLabel=fromSchemaTableTree.getSchemaTable().getTable().substring(SchemaManager.VERTEX_PREFIX.length());
  }
 else {
    rawFromLabel=fromSchemaTableTree.getSchemaTable().getTable();
  }
  String result;
  if (fromSchemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.EDGE_PREFIX)) {
    if (toSchemaTableTree.isEdgeVertexStep()) {
      if (toSchemaTableTree.direction == Direction.OUT) {
        result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(fromSchemaTableTree.getSchemaTable().getSchema() + ""String_Node_Str"" + fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ toSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ rawToLabel+ SchemaManager.OUT_VERTEX_COLUMN_END);
        result+=""String_Node_Str"" + count + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(toSchemaTableTree.lastMappedAliasId());
      }
 else {
        result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(fromSchemaTableTree.getSchemaTable().getSchema() + ""String_Node_Str"" + fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ toSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ rawToLabel+ SchemaManager.IN_VERTEX_COLUMN_END);
        result+=""String_Node_Str"" + count + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(toSchemaTableTree.lastMappedAliasId());
      }
    }
 else {
      if (toSchemaTableTree.direction == Direction.OUT) {
        result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(fromSchemaTableTree.getSchemaTable().getSchema() + ""String_Node_Str"" + fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ toSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ rawToLabel+ SchemaManager.IN_VERTEX_COLUMN_END);
        result+=""String_Node_Str"" + count + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(toSchemaTableTree.lastMappedAliasId());
      }
 else {
        result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(fromSchemaTableTree.getSchemaTable().getSchema() + ""String_Node_Str"" + fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ toSchemaTableTree.getSchemaTable().getSchema()+ ""String_Node_Str""+ rawToLabel+ SchemaManager.OUT_VERTEX_COLUMN_END);
        result+=""String_Node_Str"" + count + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(toSchemaTableTree.lastMappedAliasId());
      }
    }
  }
 else {
    if (toSchemaTableTree.direction == Direction.OUT) {
      result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(fromSchemaTableTree.getSchemaTable().getSchema() + ""String_Node_Str"" + fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ SchemaManager.ID);
      result+=""String_Node_Str"" + count + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(toSchemaTableTree.mappedAliasVertexForeignKeyColumnEnd(fromSchemaTableTree,toSchemaTableTree.direction,rawFromLabel));
    }
 else {
      result=""String_Node_Str"" + (count - 1) + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(fromSchemaTableTree.getSchemaTable().getSchema() + ""String_Node_Str"" + fromSchemaTableTree.getSchemaTable().getTable()+ ""String_Node_Str""+ SchemaManager.ID);
      result+=""String_Node_Str"" + count + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(toSchemaTableTree.mappedAliasVertexForeignKeyColumnEnd(fromSchemaTableTree,toSchemaTableTree.direction,rawFromLabel));
    }
  }
  return result;
}",0.8777936281502615
166955,"private String printEdgeInOutVertexIdOuterFromClauseFor(String prepend,String sql,SchemaTableTree previousSchemaTableTree){
  Preconditions.checkState(this.getSchemaTable().isEdgeTable());
  Set<String> edgeForeignKeys=this.sqlgGraph.getTopology().getAllEdgeForeignKeys().get(this.getSchemaTable().toString()).stream().filter(foreignKeyName -> foreignKeyName.equals(previousSchemaTableTree.getSchemaTable().withOutPrefix().toString() + SchemaManager.IN_VERTEX_COLUMN_END) || foreignKeyName.equals(previousSchemaTableTree.getSchemaTable().withOutPrefix() + SchemaManager.OUT_VERTEX_COLUMN_END)).collect(Collectors.toSet());
  for (  String edgeForeignKey : edgeForeignKeys) {
    sql+=""String_Node_Str"";
    sql+=prepend;
    sql+=""String_Node_Str"";
    sql+=this.mappedAliasPropertyName(edgeForeignKey,this.getColumnNameAliasMap());
    sql+=""String_Node_Str"";
  }
  return sql;
}","private String printEdgeInOutVertexIdOuterFromClauseFor(String prepend,String sql,SchemaTableTree previousSchemaTableTree){
  Preconditions.checkState(this.getSchemaTable().isEdgeTable());
  Set<String> edgeForeignKeys=this.sqlgGraph.getTopology().getAllEdgeForeignKeys().get(this.getSchemaTable().toString()).stream().filter(foreignKeyName -> foreignKeyName.equals(previousSchemaTableTree.getSchemaTable().withOutPrefix().toString() + SchemaManager.IN_VERTEX_COLUMN_END) || foreignKeyName.equals(previousSchemaTableTree.getSchemaTable().withOutPrefix() + SchemaManager.OUT_VERTEX_COLUMN_END)).collect(Collectors.toSet());
  for (  String edgeForeignKey : edgeForeignKeys) {
    sql+=""String_Node_Str"";
    sql+=prepend;
    sql+=""String_Node_Str"";
    sql+=this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.mappedAliasPropertyName(edgeForeignKey,this.getColumnNameAliasMap()));
  }
  return sql;
}",0.9562289562289562
166956,"private Optional<String> printEmitMappedAliasIdForOuterFromClause(int countOuter,Map<String,String> columnNameAliasMap){
  Optional<String> optional=this.mappedAliasIdForOuterFromClause(columnNameAliasMap);
  if (optional.isPresent()) {
    return Optional.of(""String_Node_Str"" + countOuter + ""String_Node_Str""+ optional.get()+ ""String_Node_Str"");
  }
 else {
    return Optional.empty();
  }
}","private Optional<String> printEmitMappedAliasIdForOuterFromClause(int countOuter,Map<String,String> columnNameAliasMap){
  Optional<String> optional=this.mappedAliasIdForOuterFromClause(columnNameAliasMap);
  if (optional.isPresent()) {
    return Optional.of(""String_Node_Str"" + countOuter + ""String_Node_Str""+ this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(optional.get()));
  }
 else {
    return Optional.empty();
  }
}",0.8815628815628815
166957,"/** 
 * Construct a sql statement for one original path to a leaf node. As the path contains the same label more than once it existVertexLabel been split into a List of Stacks.
 */
private static String constructDuplicatePathSql(SqlgGraph sqlgGraph,List<LinkedList<SchemaTableTree>> subQueryLinkedLists,Set<SchemaTableTree> leftJoinOn){
  String singlePathSql=""String_Node_Str"";
  int count=1;
  SchemaTableTree lastOfPrevious=null;
  for (  LinkedList<SchemaTableTree> subQueryLinkedList : subQueryLinkedLists) {
    SchemaTableTree firstOfNext=null;
    boolean last=count == subQueryLinkedLists.size();
    if (!last) {
      LinkedList<SchemaTableTree> nextList=subQueryLinkedLists.get(count);
      firstOfNext=nextList.getFirst();
    }
    SchemaTableTree firstSchemaTableTree=subQueryLinkedList.getFirst();
    String sql;
    if (last) {
      sql=constructSinglePathSql(sqlgGraph,true,subQueryLinkedList,lastOfPrevious,null,leftJoinOn);
    }
 else {
      sql=constructSinglePathSql(sqlgGraph,true,subQueryLinkedList,lastOfPrevious,firstOfNext);
    }
    singlePathSql+=sql;
    if (count == 1) {
      singlePathSql+=""String_Node_Str"" + count++ + ""String_Node_Str"";
    }
 else {
      singlePathSql+=""String_Node_Str"" + count + ""String_Node_Str"";
      singlePathSql+=constructSectionedJoin(lastOfPrevious,firstSchemaTableTree,count);
      if (count++ < subQueryLinkedLists.size()) {
        singlePathSql+=""String_Node_Str"";
      }
    }
    lastOfPrevious=subQueryLinkedList.getLast();
  }
  singlePathSql+=constructOuterOrderByClause(sqlgGraph,subQueryLinkedLists);
  String result=""String_Node_Str"" + constructOuterFromClause(subQueryLinkedLists);
  return result + singlePathSql;
}","/** 
 * Construct a sql statement for one original path to a leaf node. As the path contains the same label more than once it existVertexLabel been split into a List of Stacks.
 */
private static String constructDuplicatePathSql(SqlgGraph sqlgGraph,List<LinkedList<SchemaTableTree>> subQueryLinkedLists,Set<SchemaTableTree> leftJoinOn){
  String singlePathSql=""String_Node_Str"";
  int count=1;
  SchemaTableTree lastOfPrevious=null;
  for (  LinkedList<SchemaTableTree> subQueryLinkedList : subQueryLinkedLists) {
    SchemaTableTree firstOfNext=null;
    boolean last=count == subQueryLinkedLists.size();
    if (!last) {
      LinkedList<SchemaTableTree> nextList=subQueryLinkedLists.get(count);
      firstOfNext=nextList.getFirst();
    }
    SchemaTableTree firstSchemaTableTree=subQueryLinkedList.getFirst();
    String sql;
    if (last) {
      sql=constructSinglePathSql(sqlgGraph,true,subQueryLinkedList,lastOfPrevious,null,leftJoinOn);
    }
 else {
      sql=constructSinglePathSql(sqlgGraph,true,subQueryLinkedList,lastOfPrevious,firstOfNext);
    }
    singlePathSql+=sql;
    if (count == 1) {
      singlePathSql+=""String_Node_Str"" + count++ + ""String_Node_Str"";
    }
 else {
      singlePathSql+=""String_Node_Str"" + count + ""String_Node_Str"";
      singlePathSql+=constructSectionedJoin(sqlgGraph,lastOfPrevious,firstSchemaTableTree,count);
      if (count++ < subQueryLinkedLists.size()) {
        singlePathSql+=""String_Node_Str"";
      }
    }
    lastOfPrevious=subQueryLinkedList.getLast();
  }
  singlePathSql+=constructOuterOrderByClause(sqlgGraph,subQueryLinkedLists);
  String result=""String_Node_Str"" + constructOuterFromClause(subQueryLinkedLists);
  return result + singlePathSql;
}",0.997070884592853
166958,"private String printOuterFromClause(int count,Map<String,String> columnNameAliasMapCopy,SchemaTableTree previousSchemaTableTree){
  String sql=""String_Node_Str"";
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.toString());
  Optional<String> optional=this.lastMappedAliasIdForOuterFrom(columnNameAliasMapCopy);
  if (optional.isPresent()) {
    sql=""String_Node_Str"" + count + ""String_Node_Str""+ optional.get()+ ""String_Node_Str"";
    if (propertyTypeMap.size() > 0) {
      sql+=""String_Node_Str"";
    }
  }
  int propertyCount=1;
  for (  Map.Entry<String,PropertyType> propertyNameEntry : propertyTypeMap.entrySet()) {
    sql+=""String_Node_Str"" + count + ""String_Node_Str""+ this.mappedAliasPropertyName(propertyNameEntry.getKey(),columnNameAliasMapCopy)+ ""String_Node_Str"";
    for (    String postFix : propertyNameEntry.getValue().getPostFixes()) {
      sql+=""String_Node_Str"";
      sql+=""String_Node_Str"" + count + ""String_Node_Str""+ this.mappedAliasPropertyName(propertyNameEntry.getKey() + postFix,columnNameAliasMapCopy)+ ""String_Node_Str"";
    }
    if (propertyCount++ < propertyTypeMap.size()) {
      sql+=""String_Node_Str"";
    }
  }
  if (this.getSchemaTable().isEdgeTable()) {
    sql=printEdgeInOutVertexIdOuterFromClauseFor(""String_Node_Str"" + count,sql,previousSchemaTableTree);
  }
  return sql;
}","private String printOuterFromClause(int count,Map<String,String> columnNameAliasMapCopy,SchemaTableTree previousSchemaTableTree){
  String sql=""String_Node_Str"";
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.toString());
  Optional<String> optional=this.lastMappedAliasIdForOuterFrom(columnNameAliasMapCopy);
  if (optional.isPresent()) {
    sql=""String_Node_Str"" + count + ""String_Node_Str""+ this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(optional.get());
    if (propertyTypeMap.size() > 0) {
      sql+=""String_Node_Str"";
    }
  }
  int propertyCount=1;
  for (  Map.Entry<String,PropertyType> propertyNameEntry : propertyTypeMap.entrySet()) {
    sql+=""String_Node_Str"" + count + ""String_Node_Str""+ this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.mappedAliasPropertyName(propertyNameEntry.getKey(),columnNameAliasMapCopy));
    for (    String postFix : propertyNameEntry.getValue().getPostFixes()) {
      sql+=""String_Node_Str"";
      sql+=""String_Node_Str"" + count + ""String_Node_Str""+ this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.mappedAliasPropertyName(propertyNameEntry.getKey() + postFix,columnNameAliasMapCopy));
    }
    if (propertyCount++ < propertyTypeMap.size()) {
      sql+=""String_Node_Str"";
    }
  }
  if (this.getSchemaTable().isEdgeTable()) {
    sql=printEdgeInOutVertexIdOuterFromClauseFor(""String_Node_Str"" + count,sql,previousSchemaTableTree);
  }
  return sql;
}",0.9159814086521272
166959,"private String bulkWithJoin(SqlgGraph sqlgGraph){
  StringBuilder sb=new StringBuilder();
  List<HasContainer> bulkHasContainers=this.hasContainers.stream().filter(h -> SqlgUtil.isBulkWithinAndOut(sqlgGraph,h)).collect(Collectors.toList());
  for (  HasContainer hasContainer : bulkHasContainers) {
    P<List<Object>> predicate=(P<List<Object>>)hasContainer.getPredicate();
    Collection<Object> withInList=predicate.getValue();
    Set<Object> withInOuts=new HashSet<>(withInList);
    Map<String,PropertyType> columns=new HashMap<>();
    Object next=withInOuts.iterator().next();
    if (next instanceof RecordId) {
      next=((RecordId)next).getId();
    }
    if (hasContainer.getBiPredicate() == Contains.within) {
      columns.put(WITHIN,PropertyType.from(next));
    }
 else     if (hasContainer.getBiPredicate() == Contains.without) {
      columns.put(WITHOUT,PropertyType.from(next));
    }
 else {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    SecureRandom random=new SecureRandom();
    byte bytes[]=new byte[6];
    random.nextBytes(bytes);
    String tmpTableIdentified=Base64.getEncoder().encodeToString(bytes);
    tmpTableIdentified=SchemaManager.VERTEX_PREFIX + SchemaManager.BULK_TEMP_EDGE + tmpTableIdentified;
    sqlgGraph.getTopology().createTempTable(tmpTableIdentified,columns);
    Map<String,Object> withInOutMap=new HashMap<>();
    if (hasContainer.getBiPredicate() == Contains.within) {
      withInOutMap.put(WITHIN,""String_Node_Str"");
    }
 else {
      withInOutMap.put(WITHOUT,""String_Node_Str"");
    }
    String copySql=((SqlBulkDialect)sqlgGraph.getSqlDialect()).temporaryTableCopyCommandSqlVertex(sqlgGraph,SchemaTable.of(""String_Node_Str"",tmpTableIdentified.substring(SchemaManager.VERTEX_PREFIX.length())),withInOutMap.keySet());
    Writer writer=((SqlBulkDialect)sqlgGraph.getSqlDialect()).streamSql(this.sqlgGraph,copySql);
    for (    Object withInOutValue : withInOuts) {
      if (withInOutValue instanceof RecordId) {
        withInOutValue=((RecordId)withInOutValue).getId();
      }
      withInOutMap=new HashMap<>();
      if (hasContainer.getBiPredicate() == Contains.within) {
        withInOutMap.put(WITHIN,withInOutValue);
      }
 else {
        withInOutMap.put(WITHOUT,withInOutValue);
      }
      ((SqlBulkDialect)sqlgGraph.getSqlDialect()).writeStreamingVertex(writer,withInOutMap);
    }
    try {
      writer.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (hasContainer.getBiPredicate() == Contains.within) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(tmpTableIdentified);
    sb.append(""String_Node_Str"");
    sb.append(this.rootSchemaTableTree().tmpTableAliasCounter);
    sb.append(""String_Node_Str"");
    sb.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getSchemaTable().getSchema()));
    sb.append(""String_Node_Str"");
    sb.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getSchemaTable().getTable()));
    sb.append(""String_Node_Str"");
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      sb.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
 else {
      sb.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey()));
    }
    if (hasContainer.getBiPredicate() == Contains.within) {
      sb.append(""String_Node_Str"");
      sb.append(this.rootSchemaTableTree().tmpTableAliasCounter++);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(this.rootSchemaTableTree().tmpTableAliasCounter++);
      sb.append(""String_Node_Str"");
    }
  }
  return sb.toString();
}","private String bulkWithJoin(SqlgGraph sqlgGraph){
  StringBuilder sb=new StringBuilder();
  List<HasContainer> bulkHasContainers=this.hasContainers.stream().filter(h -> SqlgUtil.isBulkWithinAndOut(sqlgGraph,h)).collect(Collectors.toList());
  for (  HasContainer hasContainer : bulkHasContainers) {
    P<List<Object>> predicate=(P<List<Object>>)hasContainer.getPredicate();
    Collection<Object> withInList=predicate.getValue();
    Set<Object> withInOuts=new HashSet<>(withInList);
    Map<String,PropertyType> columns=new HashMap<>();
    Object next=withInOuts.iterator().next();
    if (next instanceof RecordId) {
      next=((RecordId)next).getId();
    }
    if (hasContainer.getBiPredicate() == Contains.within) {
      columns.put(WITHIN,PropertyType.from(next));
    }
 else     if (hasContainer.getBiPredicate() == Contains.without) {
      columns.put(WITHOUT,PropertyType.from(next));
    }
 else {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    SecureRandom random=new SecureRandom();
    byte bytes[]=new byte[6];
    random.nextBytes(bytes);
    String tmpTableIdentified=Base64.getEncoder().encodeToString(bytes);
    tmpTableIdentified=SchemaManager.VERTEX_PREFIX + SchemaManager.BULK_TEMP_EDGE + tmpTableIdentified;
    sqlgGraph.getTopology().createTempTable(tmpTableIdentified,columns);
    Map<String,Object> withInOutMap=new HashMap<>();
    if (hasContainer.getBiPredicate() == Contains.within) {
      withInOutMap.put(WITHIN,""String_Node_Str"");
    }
 else {
      withInOutMap.put(WITHOUT,""String_Node_Str"");
    }
    String copySql=((SqlBulkDialect)sqlgGraph.getSqlDialect()).temporaryTableCopyCommandSqlVertex(sqlgGraph,SchemaTable.of(""String_Node_Str"",tmpTableIdentified.substring(SchemaManager.VERTEX_PREFIX.length())),withInOutMap.keySet());
    Writer writer=((SqlBulkDialect)sqlgGraph.getSqlDialect()).streamSql(this.sqlgGraph,copySql);
    for (    Object withInOutValue : withInOuts) {
      if (withInOutValue instanceof RecordId) {
        withInOutValue=((RecordId)withInOutValue).getId();
      }
      withInOutMap=new HashMap<>();
      if (hasContainer.getBiPredicate() == Contains.within) {
        withInOutMap.put(WITHIN,withInOutValue);
      }
 else {
        withInOutMap.put(WITHOUT,withInOutValue);
      }
      ((SqlBulkDialect)sqlgGraph.getSqlDialect()).writeStreamingVertex(writer,withInOutMap);
    }
    try {
      writer.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (hasContainer.getBiPredicate() == Contains.within) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    sb.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(tmpTableIdentified));
    sb.append(""String_Node_Str"");
    sb.append(this.rootSchemaTableTree().tmpTableAliasCounter);
    sb.append(""String_Node_Str"");
    sb.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getSchemaTable().getSchema()));
    sb.append(""String_Node_Str"");
    sb.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.getSchemaTable().getTable()));
    sb.append(""String_Node_Str"");
    if (hasContainer.getKey().equals(T.id.getAccessor())) {
      sb.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    }
 else {
      sb.append(sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey()));
    }
    if (hasContainer.getBiPredicate() == Contains.within) {
      sb.append(""String_Node_Str"");
      sb.append(this.rootSchemaTableTree().tmpTableAliasCounter++);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(this.rootSchemaTableTree().tmpTableAliasCounter++);
      sb.append(""String_Node_Str"");
    }
  }
  return sb.toString();
}",0.9933669408331124
166960,"private String printLabeledOuterFromClauseFor(String sql,int counter,Map<String,String> columnNameAliasMapCopy){
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.getSchemaTable().toString());
  int count=1;
  for (  String propertyName : propertyTypeMap.keySet()) {
    sql+=""String_Node_Str"" + counter + ""String_Node_Str"";
    sql+=""String_Node_Str"";
    sql+=this.labeledMappedAliasPropertyNameForOuterFromClause(propertyName,columnNameAliasMapCopy);
    sql+=""String_Node_Str"";
    if (count++ < propertyTypeMap.size()) {
      sql+=""String_Node_Str"";
    }
  }
  return sql;
}","private String printLabeledOuterFromClauseFor(String sql,int counter,Map<String,String> columnNameAliasMapCopy){
  Map<String,PropertyType> propertyTypeMap=this.getFilteredAllTables().get(this.getSchemaTable().toString());
  int count=1;
  for (  String propertyName : propertyTypeMap.keySet()) {
    sql+=""String_Node_Str"" + counter + ""String_Node_Str"";
    sql+=this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.labeledMappedAliasPropertyNameForOuterFromClause(propertyName,columnNameAliasMapCopy));
    if (count++ < propertyTypeMap.size()) {
      sql+=""String_Node_Str"";
    }
  }
  return sql;
}",0.819078947368421
166961,"@SuppressWarnings(""String_Node_Str"") private void loadSqlgSchemaFromInformationSchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    String catalog=null;
    String schemaPattern=null;
    String[] types=new String[]{""String_Node_Str""};
    try (ResultSet schemaRs=metadata.getSchemas()){
      while (schemaRs.next()) {
        String schema=schemaRs.getString(1);
        if (schema.equals(SQLG_SCHEMA) || this.sqlDialect.getDefaultSchemas().contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
          continue;
        }
        TopologyManager.addSchema(this.sqlgGraph,schema);
      }
    }
     try (ResultSet vertexRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types)){
      while (vertexRs.next()) {
        String schema=vertexRs.getString(2);
        String table=vertexRs.getString(3);
        Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
        schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
        if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
          continue;
        }
        if (this.sqlDialect.getSpacialRefTable().contains(table)) {
          continue;
        }
        Map<String,PropertyType> columns=new ConcurrentHashMap<>();
        ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
        List<Triple<String,Integer,String>> metaDatas=new ArrayList<>();
        while (columnsRs.next()) {
          String columnName=columnsRs.getString(4);
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          metaDatas.add(Triple.of(columnName,columnType,typeName));
        }
        columnsRs.close();
        ListIterator<Triple<String,Integer,String>> metaDataIter=metaDatas.listIterator();
        while (metaDataIter.hasNext()) {
          Triple<String,Integer,String> tripple=metaDataIter.next();
          String columnName=tripple.getLeft();
          int columnType=tripple.getMiddle();
          String typeName=tripple.getRight();
          if (!columnName.equals(SchemaManager.ID)) {
            extractProperty(schema,table,columnName,columnType,typeName,columns,metaDataIter);
          }
        }
        TopologyManager.addVertexLabel(this.sqlgGraph,schema,table.substring(SchemaManager.VERTEX_PREFIX.length()),columns);
      }
    }
     try (ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types)){
      while (edgeRs.next()) {
        String schema=edgeRs.getString(2);
        String table=edgeRs.getString(3);
        Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
        schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
        if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
          continue;
        }
        if (this.sqlDialect.getSpacialRefTable().contains(table)) {
          continue;
        }
        Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTableMap=new HashMap<>();
        Map<String,PropertyType> columns=Collections.emptyMap();
        ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
        SchemaTable edgeSchemaTable=SchemaTable.of(schema,table);
        boolean edgeAdded=false;
        while (columnsRs.next()) {
          String column=columnsRs.getString(4);
          if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
            String[] split=column.split(""String_Node_Str"");
            SchemaTable foreignKey=SchemaTable.of(split[0],split[1]);
            if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
              SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.IN_VERTEX_COLUMN_END.length()));
              if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
                MutablePair<SchemaTable,SchemaTable> inSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
                if (inSchemaTable.getLeft() == null) {
                  inSchemaTable.setLeft(schemaTable);
                }
 else {
                  TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,true,foreignKey);
                }
              }
 else {
                inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(schemaTable,null));
              }
            }
 else             if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
              SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()));
              if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
                MutablePair<SchemaTable,SchemaTable> outSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
                if (outSchemaTable.getRight() == null) {
                  outSchemaTable.setRight(schemaTable);
                }
 else {
                  TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,false,foreignKey);
                }
              }
 else {
                inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(null,schemaTable));
              }
            }
            MutablePair<SchemaTable,SchemaTable> inOutLabels=inOutSchemaTableMap.get(edgeSchemaTable);
            if (!edgeAdded && inOutLabels.getLeft() != null && inOutLabels.getRight() != null) {
              TopologyManager.addEdgeLabel(this.sqlgGraph,schema,table,inOutLabels.getRight(),inOutLabels.getLeft(),columns);
              edgeAdded=true;
            }
          }
        }
      }
    }
     try (ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types)){
      while (edgeRs.next()) {
        String schema=edgeRs.getString(2);
        String table=edgeRs.getString(3);
        Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
        schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
        if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
          continue;
        }
        if (this.sqlDialect.getSpacialRefTable().contains(table)) {
          continue;
        }
        Map<String,PropertyType> columns=new HashMap<>();
        ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
        List<Triple<String,Integer,String>> metaDatas=new ArrayList<>();
        while (columnsRs.next()) {
          String columnName=columnsRs.getString(4);
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          metaDatas.add(Triple.of(columnName,columnType,typeName));
        }
        columnsRs.close();
        ListIterator<Triple<String,Integer,String>> metaDataIter=metaDatas.listIterator();
        while (metaDataIter.hasNext()) {
          Triple<String,Integer,String> tripple=metaDataIter.next();
          String columnName=tripple.getLeft();
          String typeName=tripple.getRight();
          int columnType=tripple.getMiddle();
          if (!columnName.equals(SchemaManager.ID)) {
            extractProperty(schema,table,columnName,columnType,typeName,columns,metaDataIter);
          }
        }
        TopologyManager.addEdgeColumn(this.sqlgGraph,schema,table,columns);
      }
    }
   }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") private void loadSqlgSchemaFromInformationSchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    String catalog=null;
    String schemaPattern=null;
    String[] types=new String[]{""String_Node_Str""};
    try (ResultSet schemaRs=metadata.getSchemas()){
      while (schemaRs.next()) {
        String schema=schemaRs.getString(1);
        if (schema.equals(SQLG_SCHEMA) || this.sqlDialect.getDefaultSchemas().contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
          continue;
        }
        TopologyManager.addSchema(this.sqlgGraph,schema);
      }
    }
     try (ResultSet vertexRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types)){
      while (vertexRs.next()) {
        String schema=vertexRs.getString(2);
        String table=vertexRs.getString(3);
        Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
        schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
        if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
          continue;
        }
        if (this.sqlDialect.getSpacialRefTable().contains(table)) {
          continue;
        }
        Map<String,PropertyType> columns=new ConcurrentHashMap<>();
        ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
        List<Triple<String,Integer,String>> metaDatas=new ArrayList<>();
        while (columnsRs.next()) {
          String columnName=columnsRs.getString(4);
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          metaDatas.add(Triple.of(columnName,columnType,typeName));
        }
        columnsRs.close();
        ListIterator<Triple<String,Integer,String>> metaDataIter=metaDatas.listIterator();
        while (metaDataIter.hasNext()) {
          Triple<String,Integer,String> tripple=metaDataIter.next();
          String columnName=tripple.getLeft();
          int columnType=tripple.getMiddle();
          String typeName=tripple.getRight();
          if (!columnName.equals(SchemaManager.ID)) {
            extractProperty(schema,table,columnName,columnType,typeName,columns,metaDataIter);
          }
        }
        String label=table.substring(SchemaManager.VERTEX_PREFIX.length());
        TopologyManager.addVertexLabel(this.sqlgGraph,schema,label,columns);
        extractIndices(metadata,catalog,schema,table,label,true);
      }
    }
     try (ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types)){
      while (edgeRs.next()) {
        String schema=edgeRs.getString(2);
        String table=edgeRs.getString(3);
        Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
        schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
        if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
          continue;
        }
        if (this.sqlDialect.getSpacialRefTable().contains(table)) {
          continue;
        }
        Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTableMap=new HashMap<>();
        Map<String,PropertyType> columns=Collections.emptyMap();
        ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
        SchemaTable edgeSchemaTable=SchemaTable.of(schema,table);
        boolean edgeAdded=false;
        while (columnsRs.next()) {
          String column=columnsRs.getString(4);
          if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
            String[] split=column.split(""String_Node_Str"");
            SchemaTable foreignKey=SchemaTable.of(split[0],split[1]);
            if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
              SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.IN_VERTEX_COLUMN_END.length()));
              if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
                MutablePair<SchemaTable,SchemaTable> inSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
                if (inSchemaTable.getLeft() == null) {
                  inSchemaTable.setLeft(schemaTable);
                }
 else {
                  TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,true,foreignKey);
                }
              }
 else {
                inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(schemaTable,null));
              }
            }
 else             if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
              SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()));
              if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
                MutablePair<SchemaTable,SchemaTable> outSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
                if (outSchemaTable.getRight() == null) {
                  outSchemaTable.setRight(schemaTable);
                }
 else {
                  TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,false,foreignKey);
                }
              }
 else {
                inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(null,schemaTable));
              }
            }
            MutablePair<SchemaTable,SchemaTable> inOutLabels=inOutSchemaTableMap.get(edgeSchemaTable);
            if (!edgeAdded && inOutLabels.getLeft() != null && inOutLabels.getRight() != null) {
              TopologyManager.addEdgeLabel(this.sqlgGraph,schema,table,inOutLabels.getRight(),inOutLabels.getLeft(),columns);
              edgeAdded=true;
            }
          }
        }
      }
    }
     try (ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types)){
      while (edgeRs.next()) {
        String schema=edgeRs.getString(2);
        String table=edgeRs.getString(3);
        Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
        schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
        if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
          continue;
        }
        if (this.sqlDialect.getSpacialRefTable().contains(table)) {
          continue;
        }
        Map<String,PropertyType> columns=new HashMap<>();
        ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
        List<Triple<String,Integer,String>> metaDatas=new ArrayList<>();
        while (columnsRs.next()) {
          String columnName=columnsRs.getString(4);
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          metaDatas.add(Triple.of(columnName,columnType,typeName));
        }
        columnsRs.close();
        ListIterator<Triple<String,Integer,String>> metaDataIter=metaDatas.listIterator();
        while (metaDataIter.hasNext()) {
          Triple<String,Integer,String> tripple=metaDataIter.next();
          String columnName=tripple.getLeft();
          String typeName=tripple.getRight();
          int columnType=tripple.getMiddle();
          if (!columnName.equals(SchemaManager.ID)) {
            extractProperty(schema,table,columnName,columnType,typeName,columns,metaDataIter);
          }
        }
        TopologyManager.addEdgeColumn(this.sqlgGraph,schema,table,columns);
        String label=table.substring(SchemaManager.EDGE_PREFIX.length());
        extractIndices(metadata,catalog,schema,table,label,false);
      }
    }
   }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9769959404600812
166962,"public static void addIndex(SqlgGraph sqlgGraph,AbstractLabel abstractLabel,Index index,IndexType indexType,List<PropertyColumn> properties){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.topology();
    List<Vertex> abstractLabelVertexes;
    if (abstractLabel instanceof VertexLabel) {
      abstractLabelVertexes=traversalSource.V().hasLabel(SQLG_SCHEMA + ""String_Node_Str"" + SQLG_SCHEMA_SCHEMA).has(SQLG_SCHEMA_SCHEMA_NAME,abstractLabel.getSchema().getName()).out(SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",abstractLabel.getLabel()).toList();
    }
 else {
      abstractLabelVertexes=traversalSource.V().hasLabel(SQLG_SCHEMA + ""String_Node_Str"" + SQLG_SCHEMA_SCHEMA).has(SQLG_SCHEMA_SCHEMA_NAME,abstractLabel.getSchema().getName()).out(SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).out(SQLG_SCHEMA_OUT_EDGES_EDGE).has(""String_Node_Str"",abstractLabel.getLabel()).toList();
    }
    Preconditions.checkState(!abstractLabelVertexes.isEmpty(),""String_Node_Str"",abstractLabel.getSchema().getName(),abstractLabel.getLabel());
    Preconditions.checkState(abstractLabelVertexes.size() == 1,""String_Node_Str"",abstractLabel.getSchema().getName(),abstractLabel.getLabel());
    Vertex abstractLabelVertex=abstractLabelVertexes.get(0);
    Vertex indexVertex=sqlgGraph.addVertex(T.label,SQLG_SCHEMA + ""String_Node_Str"" + SQLG_SCHEMA_INDEX,SQLG_SCHEMA_INDEX_NAME,index.getName(),SQLG_SCHEMA_INDEX_INDEX_TYPE,indexType.toString(),CREATED_ON,LocalDateTime.now());
    if (abstractLabel instanceof VertexLabel) {
      abstractLabelVertex.addEdge(SQLG_SCHEMA_VERTEX_INDEX_EDGE,indexVertex);
    }
 else {
      abstractLabelVertex.addEdge(SQLG_SCHEMA_EDGE_INDEX_EDGE,indexVertex);
    }
    for (    PropertyColumn property : properties) {
      List<Vertex> propertyVertexes=traversalSource.V(abstractLabelVertex).out(abstractLabel instanceof VertexLabel ? SQLG_SCHEMA_VERTEX_PROPERTIES_EDGE : SQLG_SCHEMA_EDGE_PROPERTIES_EDGE).has(""String_Node_Str"",property.getName()).toList();
      Preconditions.checkState(!propertyVertexes.isEmpty(),""String_Node_Str"",property.getName(),abstractLabel.getSchema().getName(),abstractLabel.getLabel());
      Preconditions.checkState(propertyVertexes.size() == 1,""String_Node_Str"",property.getName(),abstractLabel.getSchema().getName(),abstractLabel.getLabel());
      Vertex propertyVertex=propertyVertexes.get(0);
      indexVertex.addEdge(SQLG_SCHEMA_INDEX_PROPERTY_EDGE,propertyVertex);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","/** 
 * add an index from information schema
 * @param sqlgGraph the graph
 * @param schema the schema name
 * @param label the label name
 * @param vertex is it a vertex or an edge label?
 * @param index the index name
 * @param indexType index type
 * @param properties the column names
 */
public static void addIndex(SqlgGraph sqlgGraph,String schema,String label,boolean vertex,String index,IndexType indexType,List<String> properties){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.topology();
    List<Vertex> abstractLabelVertexes;
    if (vertex) {
      abstractLabelVertexes=traversalSource.V().hasLabel(SQLG_SCHEMA + ""String_Node_Str"" + SQLG_SCHEMA_SCHEMA).has(SQLG_SCHEMA_SCHEMA_NAME,schema).out(SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",label).toList();
    }
 else {
      abstractLabelVertexes=traversalSource.V().hasLabel(SQLG_SCHEMA + ""String_Node_Str"" + SQLG_SCHEMA_SCHEMA).has(SQLG_SCHEMA_SCHEMA_NAME,schema).out(SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).out(SQLG_SCHEMA_OUT_EDGES_EDGE).has(""String_Node_Str"",label).toList();
    }
    Preconditions.checkState(!abstractLabelVertexes.isEmpty(),""String_Node_Str"",schema,label);
    Preconditions.checkState(abstractLabelVertexes.size() == 1,""String_Node_Str"",schema,label);
    Vertex abstractLabelVertex=abstractLabelVertexes.get(0);
    Vertex indexVertex=sqlgGraph.addVertex(T.label,SQLG_SCHEMA + ""String_Node_Str"" + SQLG_SCHEMA_INDEX,SQLG_SCHEMA_INDEX_NAME,index,SQLG_SCHEMA_INDEX_INDEX_TYPE,indexType.toString(),CREATED_ON,LocalDateTime.now());
    if (vertex) {
      abstractLabelVertex.addEdge(SQLG_SCHEMA_VERTEX_INDEX_EDGE,indexVertex);
    }
 else {
      abstractLabelVertex.addEdge(SQLG_SCHEMA_EDGE_INDEX_EDGE,indexVertex);
    }
    for (    String property : properties) {
      List<Vertex> propertyVertexes=traversalSource.V(abstractLabelVertex).out(vertex ? SQLG_SCHEMA_VERTEX_PROPERTIES_EDGE : SQLG_SCHEMA_EDGE_PROPERTIES_EDGE).has(""String_Node_Str"",property).toList();
      Preconditions.checkState(!propertyVertexes.isEmpty(),""String_Node_Str"",property,schema,label);
      Preconditions.checkState(propertyVertexes.size() == 1,""String_Node_Str"",property,schema,label);
      Vertex propertyVertex=propertyVertexes.get(0);
      indexVertex.addEdge(SQLG_SCHEMA_INDEX_PROPERTY_EDGE,propertyVertex);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.6860326303223239
166963,"@Override public void prepareDB(Connection conn){
  String dbName;
  try (Statement st=conn.createStatement();ResultSet rs=st.executeQuery(""String_Node_Str"")){
    if (!rs.next()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    dbName=rs.getString(1);
  }
 catch (  SQLException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  try (Statement st=conn.createStatement()){
    dbName=dbName.replace(""String_Node_Str"",""String_Node_Str"");
    st.executeUpdate(""String_Node_Str"" + dbName + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override public void prepareDB(Connection conn){
  String dbName;
  try (Statement st=conn.createStatement();ResultSet rs=st.executeQuery(""String_Node_Str"")){
    if (!rs.next()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    dbName=rs.getString(1);
  }
 catch (  SQLException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  try (Statement st=conn.createStatement()){
    dbName=dbName.replace(""String_Node_Str"",""String_Node_Str"");
    st.executeUpdate(""String_Node_Str"" + dbName + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    if (!e.getMessage().toLowerCase().contains(""String_Node_Str"")) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
  }
}",0.94186902133922
166964,"/** 
 * @param vertexLabelJson
 * @param fire should we fire topology events
 */
void fromNotifyJsonOutEdge(JsonNode vertexLabelJson,boolean fire){
  super.fromPropertyNotifyJson(vertexLabelJson,fire);
  for (  String s : Arrays.asList(""String_Node_Str"",""String_Node_Str"")) {
    ArrayNode uncommittedOutEdgeLabels=(ArrayNode)vertexLabelJson.get(s);
    if (uncommittedOutEdgeLabels != null) {
      for (      JsonNode uncommittedOutEdgeLabel : uncommittedOutEdgeLabels) {
        String schemaName=uncommittedOutEdgeLabel.get(""String_Node_Str"").asText();
        Preconditions.checkState(schemaName.equals(getSchema().getName()),""String_Node_Str"");
        String edgeLabelName=uncommittedOutEdgeLabel.get(""String_Node_Str"").asText();
        Optional<EdgeLabel> edgeLabelOptional=this.schema.getEdgeLabel(edgeLabelName);
        EdgeLabel edgeLabel;
        if (!edgeLabelOptional.isPresent()) {
          edgeLabel=new EdgeLabel(this.getSchema().getTopology(),edgeLabelName);
          this.getSchema().getTopology().fire(edgeLabel,""String_Node_Str"",TopologyChangeAction.CREATE);
        }
 else {
          edgeLabel=edgeLabelOptional.get();
        }
        edgeLabel.addToOutVertexLabel(this);
        this.outEdgeLabels.put(schemaName + ""String_Node_Str"" + edgeLabel.getLabel(),edgeLabel);
        edgeLabel.fromPropertyNotifyJson(uncommittedOutEdgeLabel,edgeLabelOptional.isPresent());
        this.getSchema().getTopology().addToAllTables(getSchema().getName() + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabel.getLabel(),edgeLabel.getPropertyTypeMap());
        this.getSchema().addToAllEdgeCache(edgeLabel);
        this.getSchema().getTopology().addOutForeignKeysToVertexLabel(this,edgeLabel);
        this.getSchema().getTopology().addToEdgeForeignKeyCache(this.getSchema().getName() + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabel.getLabel(),this.getSchema().getName() + ""String_Node_Str"" + this.getLabel()+ SchemaManager.OUT_VERTEX_COLUMN_END);
      }
    }
  }
}","/** 
 * @param vertexLabelJson
 * @param fire should we fire topology events
 */
void fromNotifyJsonOutEdge(JsonNode vertexLabelJson,boolean fire){
  super.fromPropertyNotifyJson(vertexLabelJson,fire);
  for (  String s : Arrays.asList(""String_Node_Str"",""String_Node_Str"")) {
    ArrayNode uncommittedOutEdgeLabels=(ArrayNode)vertexLabelJson.get(s);
    if (uncommittedOutEdgeLabels != null) {
      for (      JsonNode uncommittedOutEdgeLabel : uncommittedOutEdgeLabels) {
        String schemaName=uncommittedOutEdgeLabel.get(""String_Node_Str"").asText();
        Preconditions.checkState(schemaName.equals(getSchema().getName()),""String_Node_Str"");
        String edgeLabelName=uncommittedOutEdgeLabel.get(""String_Node_Str"").asText();
        Optional<EdgeLabel> edgeLabelOptional=this.schema.getEdgeLabel(edgeLabelName);
        EdgeLabel edgeLabel;
        if (!edgeLabelOptional.isPresent()) {
          edgeLabel=new EdgeLabel(this.getSchema().getTopology(),edgeLabelName);
        }
 else {
          edgeLabel=edgeLabelOptional.get();
        }
        edgeLabel.addToOutVertexLabel(this);
        this.outEdgeLabels.put(schemaName + ""String_Node_Str"" + edgeLabel.getLabel(),edgeLabel);
        edgeLabel.fromPropertyNotifyJson(uncommittedOutEdgeLabel,edgeLabelOptional.isPresent());
        this.getSchema().getTopology().addToAllTables(getSchema().getName() + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabel.getLabel(),edgeLabel.getPropertyTypeMap());
        this.getSchema().addToAllEdgeCache(edgeLabel);
        this.getSchema().getTopology().addOutForeignKeysToVertexLabel(this,edgeLabel);
        this.getSchema().getTopology().addToEdgeForeignKeyCache(this.getSchema().getName() + ""String_Node_Str"" + EDGE_PREFIX+ edgeLabel.getLabel(),this.getSchema().getName() + ""String_Node_Str"" + this.getLabel()+ SchemaManager.OUT_VERTEX_COLUMN_END);
        if (!edgeLabelOptional.isPresent()) {
          this.getSchema().getTopology().fire(edgeLabel,""String_Node_Str"",TopologyChangeAction.CREATE);
        }
      }
    }
  }
}",0.934032983508246
166965,"@Test public void testAddSchemaAndVertexAndEdge(){
  TopologyListenerTest topologyListenerTest=new TopologyListenerTest(topologyListenerTriple);
  this.sqlgGraph.getTopology().registerListener(topologyListenerTest);
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Edge e1=a1.addEdge(""String_Node_Str"",a2);
  a1.property(""String_Node_Str"",""String_Node_Str"");
  e1.property(""String_Node_Str"",""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Edge e2=a1.addEdge(""String_Node_Str"",b1);
  Schema schema=this.sqlgGraph.getTopology().getSchema(""String_Node_Str"").get();
  VertexLabel aVertexLabel=schema.getVertexLabel(""String_Node_Str"").get();
  EdgeLabel edgeLabel=aVertexLabel.getOutEdgeLabel(""String_Node_Str"").get();
  PropertyColumn vertexPropertyColumn=aVertexLabel.getProperty(""String_Node_Str"").get();
  PropertyColumn edgePropertyColumn=edgeLabel.getProperty(""String_Node_Str"").get();
  VertexLabel bVertexLabel=schema.getVertexLabel(""String_Node_Str"").get();
  Index index=aVertexLabel.ensureIndexExists(IndexType.UNIQUE,new ArrayList<>(aVertexLabel.getProperties().values()));
  GlobalUniqueIndex globalUniqueIndex=schema.ensureGlobalUniqueIndexExist(new HashSet<>(aVertexLabel.getProperties().values()));
  assertEquals(12,this.topologyListenerTriple.size());
  assertEquals(schema,this.topologyListenerTriple.get(0).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(0).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(0).getRight());
  assertEquals(aVertexLabel,this.topologyListenerTriple.get(1).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(1).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(1).getRight());
  assertEquals(edgeLabel,this.topologyListenerTriple.get(2).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(2).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(2).getRight());
  assertEquals(vertexPropertyColumn,this.topologyListenerTriple.get(3).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(3).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(3).getRight());
  assertEquals(edgePropertyColumn,this.topologyListenerTriple.get(4).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(4).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(4).getRight());
  assertEquals(bVertexLabel,this.topologyListenerTriple.get(5).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(5).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(5).getRight());
  assertEquals(edgeLabel,this.topologyListenerTriple.get(6).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(6).getMiddle());
  assertEquals(TopologyChangeAction.ADD_IN_VERTEX_LABELTO_EDGE,this.topologyListenerTriple.get(6).getRight());
  assertEquals(index,this.topologyListenerTriple.get(7).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(7).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(7).getRight());
  assertEquals(globalUniqueIndex,this.topologyListenerTriple.get(11).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(11).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(11).getRight());
  this.sqlgGraph.tx().commit();
}","@Test public void testAddSchemaAndVertexAndEdge(){
  TopologyListenerTest topologyListenerTest=new TopologyListenerTest(topologyListenerTriple);
  this.sqlgGraph.getTopology().registerListener(topologyListenerTest);
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex a2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Edge e1=a1.addEdge(""String_Node_Str"",a2);
  a1.property(""String_Node_Str"",""String_Node_Str"");
  e1.property(""String_Node_Str"",""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Edge e2=a1.addEdge(""String_Node_Str"",b1);
  Schema schema=this.sqlgGraph.getTopology().getSchema(""String_Node_Str"").get();
  VertexLabel aVertexLabel=schema.getVertexLabel(""String_Node_Str"").get();
  EdgeLabel edgeLabel=aVertexLabel.getOutEdgeLabel(""String_Node_Str"").get();
  PropertyColumn vertexPropertyColumn=aVertexLabel.getProperty(""String_Node_Str"").get();
  PropertyColumn edgePropertyColumn=edgeLabel.getProperty(""String_Node_Str"").get();
  VertexLabel bVertexLabel=schema.getVertexLabel(""String_Node_Str"").get();
  Index index=aVertexLabel.ensureIndexExists(IndexType.UNIQUE,new ArrayList<>(aVertexLabel.getProperties().values()));
  GlobalUniqueIndex globalUniqueIndex=schema.ensureGlobalUniqueIndexExist(new HashSet<>(aVertexLabel.getProperties().values()));
  assertEquals(12,this.topologyListenerTriple.size());
  assertEquals(schema,this.topologyListenerTriple.get(0).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(0).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(0).getRight());
  assertEquals(aVertexLabel,this.topologyListenerTriple.get(1).getLeft());
  Map<String,PropertyColumn> props=((VertexLabel)this.topologyListenerTriple.get(1).getLeft()).getProperties();
  assertTrue(props.containsKey(""String_Node_Str""));
  assertTrue(props.containsKey(""String_Node_Str""));
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(1).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(1).getRight());
  assertEquals(edgeLabel,this.topologyListenerTriple.get(2).getLeft());
  String s=this.topologyListenerTriple.get(2).getLeft().toString();
  assertTrue(s.contains(edgeLabel.getSchema().getName()));
  props=((EdgeLabel)this.topologyListenerTriple.get(2).getLeft()).getProperties();
  assertTrue(props.containsKey(""String_Node_Str""));
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(2).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(2).getRight());
  assertEquals(vertexPropertyColumn,this.topologyListenerTriple.get(3).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(3).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(3).getRight());
  assertEquals(edgePropertyColumn,this.topologyListenerTriple.get(4).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(4).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(4).getRight());
  assertEquals(bVertexLabel,this.topologyListenerTriple.get(5).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(5).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(5).getRight());
  assertEquals(edgeLabel,this.topologyListenerTriple.get(6).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(6).getMiddle());
  assertEquals(TopologyChangeAction.ADD_IN_VERTEX_LABELTO_EDGE,this.topologyListenerTriple.get(6).getRight());
  assertEquals(index,this.topologyListenerTriple.get(7).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(7).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(7).getRight());
  assertEquals(globalUniqueIndex,this.topologyListenerTriple.get(11).getLeft());
  assertEquals(""String_Node_Str"",this.topologyListenerTriple.get(11).getMiddle());
  assertEquals(TopologyChangeAction.CREATE,this.topologyListenerTriple.get(11).getRight());
  this.sqlgGraph.tx().commit();
}",0.9405768274490304
166966,"@Override public void change(TopologyInf topologyInf,String oldValue,TopologyChangeAction action){
  topologyListenerTriple.add(Triple.of(topologyInf,oldValue,action));
}","@Override public void change(TopologyInf topologyInf,String oldValue,TopologyChangeAction action){
  String s=topologyInf.toString();
  assertNotNull(s);
  assertTrue(s + ""String_Node_Str"" + topologyInf.getName(),s.contains(topologyInf.getName()));
  topologyListenerTriple.add(Triple.of(topologyInf,oldValue,action));
}",0.6938775510204082
166967,"private boolean unoptimizableChooseStep(List<Step> steps,int index){
  List<Step> toCome=steps.subList(index,steps.size());
  Step step=toCome.get(0);
  Preconditions.checkState(step instanceof ChooseStep,""String_Node_Str"" + step.getClass().getSimpleName() + ""String_Node_Str"");
  ChooseStep chooseStep=(ChooseStep)step;
  List<Traversal.Admin<?,?>> traversalAdmins=chooseStep.getGlobalChildren();
  Preconditions.checkState(traversalAdmins.size() == 2);
  Traversal.Admin<?,?> predicate=(Traversal.Admin<?,?>)chooseStep.getLocalChildren().get(0);
  List<Step> predicateSteps=new ArrayList<>(predicate.getSteps());
  predicateSteps.remove(predicate.getSteps().size() - 1);
  Traversal.Admin<?,?> globalChildOne=(Traversal.Admin<?,?>)chooseStep.getGlobalChildren().get(0);
  List<Step> globalChildOneSteps=new ArrayList<>(globalChildOne.getSteps());
  globalChildOneSteps.remove(globalChildOneSteps.size() - 1);
  Traversal.Admin<?,?> globalChildTwo=(Traversal.Admin<?,?>)chooseStep.getGlobalChildren().get(1);
  List<Step> globalChildTwoSteps=new ArrayList<>(globalChildTwo.getSteps());
  globalChildTwoSteps.remove(globalChildTwoSteps.size() - 1);
  boolean hasIdentity=globalChildOne.getSteps().stream().anyMatch(s -> s instanceof IdentityStep);
  if (!hasIdentity) {
    hasIdentity=globalChildTwo.getSteps().stream().anyMatch(s -> s instanceof IdentityStep);
    if (hasIdentity) {
      if (!predicateSteps.equals(globalChildOneSteps)) {
        return true;
      }
    }
 else {
      return true;
    }
  }
 else {
    if (!predicateSteps.equals(globalChildTwoSteps)) {
      return true;
    }
  }
  return false;
}","private boolean unoptimizableChooseStep(List<Step> steps,int index){
  List<Step> toCome=steps.subList(index,steps.size());
  Step step=toCome.get(0);
  Preconditions.checkState(step instanceof ChooseStep,""String_Node_Str"" + step.getClass().getSimpleName() + ""String_Node_Str"");
  ChooseStep chooseStep=(ChooseStep)step;
  List<Traversal.Admin<?,?>> traversalAdmins=chooseStep.getGlobalChildren();
  if (traversalAdmins.size() != 2) {
    return true;
  }
  Traversal.Admin<?,?> predicate=(Traversal.Admin<?,?>)chooseStep.getLocalChildren().get(0);
  List<Step> predicateSteps=new ArrayList<>(predicate.getSteps());
  predicateSteps.remove(predicate.getSteps().size() - 1);
  Traversal.Admin<?,?> globalChildOne=(Traversal.Admin<?,?>)chooseStep.getGlobalChildren().get(0);
  List<Step> globalChildOneSteps=new ArrayList<>(globalChildOne.getSteps());
  globalChildOneSteps.remove(globalChildOneSteps.size() - 1);
  Traversal.Admin<?,?> globalChildTwo=(Traversal.Admin<?,?>)chooseStep.getGlobalChildren().get(1);
  List<Step> globalChildTwoSteps=new ArrayList<>(globalChildTwo.getSteps());
  globalChildTwoSteps.remove(globalChildTwoSteps.size() - 1);
  boolean hasIdentity=globalChildOne.getSteps().stream().anyMatch(s -> s instanceof IdentityStep);
  if (!hasIdentity) {
    hasIdentity=globalChildTwo.getSteps().stream().anyMatch(s -> s instanceof IdentityStep);
    if (hasIdentity) {
      if (!predicateSteps.equals(globalChildOneSteps)) {
        return true;
      }
    }
 else {
      return true;
    }
  }
 else {
    if (!predicateSteps.equals(globalChildTwoSteps)) {
      return true;
    }
  }
  return false;
}",0.9836872883964296
166968,"private void afterRollback(){
  this.temporaryTables.clear();
  if (this.isWriteLockHeldByCurrentThread()) {
    for (Iterator<Map.Entry<String,Schema>> it=this.uncommittedSchemas.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry<String,Schema> entry=it.next();
      entry.getValue().afterRollback();
      it.remove();
    }
    z_internalReadLock();
    try {
      for (      Schema schema : this.schemas.values()) {
        schema.afterRollback();
      }
    }
  finally {
      z_internalReadUnLock();
    }
    this.reentrantReadWriteLock.writeLock().unlock();
  }
}","private void afterRollback(){
  this.temporaryTables.clear();
  if (this.isWriteLockHeldByCurrentThread()) {
    for (Iterator<Map.Entry<String,Schema>> it=this.uncommittedSchemas.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry<String,Schema> entry=it.next();
      entry.getValue().afterRollback();
      it.remove();
    }
    z_internalReadLock();
    try {
      for (      Schema schema : this.schemas.values()) {
        schema.afterRollback();
      }
    }
  finally {
      z_internalReadUnLock();
    }
    this.uncommittedGlobalUniqueIndexes.clear();
    this.reentrantReadWriteLock.writeLock().unlock();
  }
}",0.9595375722543352
166969,"@SuppressWarnings(""String_Node_Str"") private void fromNotifyJson(LocalDateTime timestamp,ObjectNode log){
  for (  String s : Arrays.asList(""String_Node_Str"",""String_Node_Str"")) {
    ArrayNode schemas=(ArrayNode)log.get(s);
    if (schemas != null) {
      for (      JsonNode jsonSchema : schemas) {
        String schemaName=jsonSchema.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema(schemaName);
        Schema schema;
        if (!schemaOptional.isPresent()) {
          schema=Schema.instantiateSchema(this,schemaName);
          this.schemas.put(schemaName,schema);
        }
      }
      for (      JsonNode jsonSchema : schemas) {
        String schemaName=jsonSchema.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema(schemaName);
        Preconditions.checkState(schemaOptional.isPresent(),""String_Node_Str"");
        @SuppressWarnings(""String_Node_Str"") Schema schema=schemaOptional.get();
        schema.fromNotifyJsonOutEdges(jsonSchema);
      }
      for (      JsonNode jsonSchema : schemas) {
        String schemaName=jsonSchema.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema(schemaName);
        Preconditions.checkState(schemaOptional.isPresent(),""String_Node_Str"");
        @SuppressWarnings(""String_Node_Str"") Schema schema=schemaOptional.get();
        schema.fromNotifyJsonInEdges(jsonSchema);
      }
    }
  }
  ArrayNode globalUniqueIndexes=(ArrayNode)log.get(""String_Node_Str"");
  if (globalUniqueIndexes != null) {
    for (    JsonNode jsonGlobalUniqueIndex : globalUniqueIndexes) {
      String globalUniqueIndexName=jsonGlobalUniqueIndex.get(""String_Node_Str"").asText();
      Optional<GlobalUniqueIndex> globalUniqueIndexOptional=getGlobalUniqueIndexes(globalUniqueIndexName);
      Preconditions.checkState(!globalUniqueIndexOptional.isPresent(),""String_Node_Str"");
      GlobalUniqueIndex globalUniqueIndex=GlobalUniqueIndex.instantiateGlobalUniqueIndex(this,globalUniqueIndexName);
      Set<PropertyColumn> properties=new HashSet<>();
      ArrayNode jsonProperties=(ArrayNode)jsonGlobalUniqueIndex.get(""String_Node_Str"");
      for (      JsonNode jsonProperty : jsonProperties) {
        ObjectNode propertyObjectNode=(ObjectNode)jsonProperty;
        String propertyName=propertyObjectNode.get(""String_Node_Str"").asText();
        String schemaName=propertyObjectNode.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema(schemaName);
        Preconditions.checkState(schemaOptional.isPresent(),""String_Node_Str"");
        Schema schema=schemaOptional.get();
        String abstractLabelName=propertyObjectNode.get(""String_Node_Str"").asText();
        AbstractLabel abstractLabel;
        Optional<VertexLabel> vertexLabelOptional=schema.getVertexLabel(abstractLabelName);
        if (!vertexLabelOptional.isPresent()) {
          Optional<EdgeLabel> edgeLabelOptional=schema.getEdgeLabel(abstractLabelName);
          Preconditions.checkState(edgeLabelOptional.isPresent(),""String_Node_Str"");
          abstractLabel=edgeLabelOptional.get();
        }
 else {
          abstractLabel=vertexLabelOptional.get();
        }
        Optional<PropertyColumn> propertyColumnOptional=abstractLabel.getProperty(propertyName);
        Preconditions.checkState(propertyColumnOptional.isPresent(),""String_Node_Str"");
        properties.add(propertyColumnOptional.get());
      }
      globalUniqueIndex.addGlobalUniqueProperties(properties);
      this.globalUniqueIndexes.add(globalUniqueIndex);
    }
  }
  this.notificationTimestamps.add(timestamp);
}","@SuppressWarnings(""String_Node_Str"") private void fromNotifyJson(LocalDateTime timestamp,ObjectNode log){
  for (  String s : Arrays.asList(""String_Node_Str"",""String_Node_Str"")) {
    ArrayNode schemas=(ArrayNode)log.get(s);
    if (schemas != null) {
      for (      JsonNode jsonSchema : schemas) {
        String schemaName=jsonSchema.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema(schemaName);
        Schema schema;
        if (!schemaOptional.isPresent()) {
          schema=Schema.instantiateSchema(this,schemaName);
          this.schemas.put(schemaName,schema);
        }
      }
      for (      JsonNode jsonSchema : schemas) {
        String schemaName=jsonSchema.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema(schemaName);
        Preconditions.checkState(schemaOptional.isPresent(),""String_Node_Str"");
        @SuppressWarnings(""String_Node_Str"") Schema schema=schemaOptional.get();
        schema.fromNotifyJsonOutEdges(jsonSchema);
      }
      for (      JsonNode jsonSchema : schemas) {
        String schemaName=jsonSchema.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema(schemaName);
        Preconditions.checkState(schemaOptional.isPresent(),""String_Node_Str"");
        @SuppressWarnings(""String_Node_Str"") Schema schema=schemaOptional.get();
        schema.fromNotifyJsonInEdges(jsonSchema);
      }
    }
  }
  ArrayNode globalUniqueIndexes=(ArrayNode)log.get(""String_Node_Str"");
  if (globalUniqueIndexes != null) {
    for (    JsonNode jsonGlobalUniqueIndex : globalUniqueIndexes) {
      String globalUniqueIndexName=jsonGlobalUniqueIndex.get(""String_Node_Str"").asText();
      Optional<GlobalUniqueIndex> globalUniqueIndexOptional=getGlobalUniqueIndexes(globalUniqueIndexName);
      GlobalUniqueIndex globalUniqueIndex;
      if (!globalUniqueIndexOptional.isPresent()) {
        globalUniqueIndex=GlobalUniqueIndex.instantiateGlobalUniqueIndex(this,globalUniqueIndexName);
      }
 else {
        globalUniqueIndex=globalUniqueIndexOptional.get();
      }
      Set<PropertyColumn> properties=new HashSet<>();
      ArrayNode jsonProperties=(ArrayNode)jsonGlobalUniqueIndex.get(""String_Node_Str"");
      for (      JsonNode jsonProperty : jsonProperties) {
        ObjectNode propertyObjectNode=(ObjectNode)jsonProperty;
        String propertyName=propertyObjectNode.get(""String_Node_Str"").asText();
        String schemaName=propertyObjectNode.get(""String_Node_Str"").asText();
        Optional<Schema> schemaOptional=getSchema(schemaName);
        Preconditions.checkState(schemaOptional.isPresent(),""String_Node_Str"");
        Schema schema=schemaOptional.get();
        String abstractLabelName=propertyObjectNode.get(""String_Node_Str"").asText();
        AbstractLabel abstractLabel;
        Optional<VertexLabel> vertexLabelOptional=schema.getVertexLabel(abstractLabelName);
        if (!vertexLabelOptional.isPresent()) {
          Optional<EdgeLabel> edgeLabelOptional=schema.getEdgeLabel(abstractLabelName);
          Preconditions.checkState(edgeLabelOptional.isPresent(),""String_Node_Str"");
          abstractLabel=edgeLabelOptional.get();
        }
 else {
          abstractLabel=vertexLabelOptional.get();
        }
        Optional<PropertyColumn> propertyColumnOptional=abstractLabel.getProperty(propertyName);
        Preconditions.checkState(propertyColumnOptional.isPresent(),""String_Node_Str"");
        properties.add(propertyColumnOptional.get());
      }
      globalUniqueIndex.addGlobalUniqueProperties(properties);
      this.globalUniqueIndexes.add(globalUniqueIndex);
    }
  }
  this.notificationTimestamps.add(timestamp);
}",0.9696223316912972
166970,"public void loadProperty(ResultSet resultSet,SqlgElement sqlgElement) throws SQLException {
  for (int ix=1; ix <= resultSet.getMetaData().getColumnCount(); ix++) {
    String columnName=resultSet.getMetaData().getColumnLabel(ix);
    Pair<String,PropertyType> p=getColumnNamePropertyName().get(columnName);
    if (p != null) {
      String propertyName=p.getKey();
      PropertyType propertyType=p.getValue();
      Object o=(propertyType != null && propertyType.isArray() && propertyType != PropertyType.byte_ARRAY && propertyType != PropertyType.BYTE_ARRAY) ? resultSet.getArray(ix) : resultSet.getObject(ix);
      if (!Objects.isNull(o)) {
        if (propertyName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
          ((SqlgEdge)sqlgElement).loadInVertex(resultSet,propertyName,ix);
        }
 else         if (propertyName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
          ((SqlgEdge)sqlgElement).loadOutVertex(resultSet,propertyName,ix);
        }
 else {
          sqlgElement.loadProperty(resultSet,propertyName,o,getColumnNameAliasMap(),this.stepDepth,propertyType);
        }
      }
    }
  }
}","public void loadProperty(ResultSet resultSet,SqlgElement sqlgElement) throws SQLException {
  for (int ix=1; ix <= resultSet.getMetaData().getColumnCount(); ix++) {
    String columnName=resultSet.getMetaData().getColumnLabel(ix);
    Pair<String,PropertyType> p=getColumnNamePropertyName().get(columnName);
    if (p != null) {
      String propertyName=p.getKey();
      PropertyType propertyType=p.getValue();
      if (propertyName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
        ((SqlgEdge)sqlgElement).loadInVertex(resultSet,propertyName,ix);
      }
 else       if (propertyName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
        ((SqlgEdge)sqlgElement).loadOutVertex(resultSet,propertyName,ix);
      }
 else {
        sqlgElement.loadProperty(resultSet,propertyName,ix,getColumnNameAliasMap(),this.stepDepth,propertyType);
      }
    }
  }
}",0.8686462003019627
166971,"public void loadOutVertex(ResultSet resultSet,String label,int columnIdx) throws SQLException {
  SchemaTable outVertexColumnName=SchemaTable.from(this.sqlgGraph,label,this.sqlgGraph.getSqlDialect().getPublicSchema());
  Long outId=resultSet.getLong(columnIdx);
  this.outVertex=SqlgVertex.of(this.sqlgGraph,outId,outVertexColumnName.getSchema(),SqlgUtil.removeTrailingOutId(outVertexColumnName.getTable()));
}","public void loadOutVertex(ResultSet resultSet,String label,int columnIdx) throws SQLException {
  SchemaTable outVertexColumnName=SchemaTable.from(this.sqlgGraph,label,this.sqlgGraph.getSqlDialect().getPublicSchema());
  Long outId=resultSet.getLong(columnIdx);
  if (!resultSet.wasNull()) {
    this.outVertex=SqlgVertex.of(this.sqlgGraph,outId,outVertexColumnName.getSchema(),SqlgUtil.removeTrailingOutId(outVertexColumnName.getTable()));
  }
}",0.9579439252336448
166972,"public void loadInVertex(ResultSet resultSet,String label,int columnIdx) throws SQLException {
  SchemaTable inVertexColumnName=SchemaTable.from(this.sqlgGraph,label,this.sqlgGraph.getSqlDialect().getPublicSchema());
  Long inId=resultSet.getLong(columnIdx);
  this.inVertex=SqlgVertex.of(this.sqlgGraph,inId,inVertexColumnName.getSchema(),SqlgUtil.removeTrailingInId(inVertexColumnName.getTable()));
}","public void loadInVertex(ResultSet resultSet,String label,int columnIdx) throws SQLException {
  SchemaTable inVertexColumnName=SchemaTable.from(this.sqlgGraph,label,this.sqlgGraph.getSqlDialect().getPublicSchema());
  Long inId=resultSet.getLong(columnIdx);
  if (!resultSet.wasNull()) {
    this.inVertex=SqlgVertex.of(this.sqlgGraph,inId,inVertexColumnName.getSchema(),SqlgUtil.removeTrailingInId(inVertexColumnName.getTable()));
  }
}",0.9571428571428572
166973,"@Override public void loadResultSet(ResultSet resultSet) throws SQLException {
  SchemaTable inVertexColumnName=null;
  SchemaTable outVertexColumnName=null;
  int inVertexColumnIndex=0;
  int outVertexColumnIndex=0;
  ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
  for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
    String columnName=resultSetMetaData.getColumnLabel(i);
    Object o=resultSet.getObject(i);
    if (!columnName.equals(""String_Node_Str"") && !Objects.isNull(o) && !columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)&& !columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
      loadProperty(resultSet,columnName,o);
    }
    if (!Objects.isNull(o)) {
      if (columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
        inVertexColumnName=SchemaTable.from(this.sqlgGraph,columnName,this.sqlgGraph.getSqlDialect().getPublicSchema());
        inVertexColumnIndex=i;
      }
 else       if (columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
        outVertexColumnName=SchemaTable.from(this.sqlgGraph,columnName,this.sqlgGraph.getSqlDialect().getPublicSchema());
        outVertexColumnIndex=i;
      }
    }
  }
  if (inVertexColumnName == null || inVertexColumnIndex == 0 || outVertexColumnName == null || outVertexColumnIndex == 0) {
    throw new IllegalStateException(IN_OR_OUT_VERTEX_ID_NOT_SET);
  }
  Long inId=resultSet.getLong(inVertexColumnIndex);
  Long outId=resultSet.getLong(outVertexColumnIndex);
  this.inVertex=SqlgVertex.of(this.sqlgGraph,inId,inVertexColumnName.getSchema(),SqlgUtil.removeTrailingInId(inVertexColumnName.getTable()));
  this.outVertex=SqlgVertex.of(this.sqlgGraph,outId,outVertexColumnName.getSchema(),SqlgUtil.removeTrailingOutId(outVertexColumnName.getTable()));
}","@Override public void loadResultSet(ResultSet resultSet) throws SQLException {
  SchemaTable inVertexColumnName=null;
  SchemaTable outVertexColumnName=null;
  int inVertexColumnIndex=0;
  int outVertexColumnIndex=0;
  ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
  for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
    String columnName=resultSetMetaData.getColumnLabel(i);
    if (!columnName.equals(""String_Node_Str"") && !columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END) && !columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
      loadProperty(resultSet,columnName,i);
    }
    if (columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
      inVertexColumnName=SchemaTable.from(this.sqlgGraph,columnName,this.sqlgGraph.getSqlDialect().getPublicSchema());
      inVertexColumnIndex=i;
    }
 else     if (columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
      outVertexColumnName=SchemaTable.from(this.sqlgGraph,columnName,this.sqlgGraph.getSqlDialect().getPublicSchema());
      outVertexColumnIndex=i;
    }
  }
  if (inVertexColumnName == null || inVertexColumnIndex == 0 || outVertexColumnName == null || outVertexColumnIndex == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Long inId=resultSet.getLong(inVertexColumnIndex);
  Long outId=resultSet.getLong(outVertexColumnIndex);
  this.inVertex=SqlgVertex.of(this.sqlgGraph,inId,inVertexColumnName.getSchema(),SqlgUtil.removeTrailingInId(inVertexColumnName.getTable()));
  this.outVertex=SqlgVertex.of(this.sqlgGraph,outId,outVertexColumnName.getSchema(),SqlgUtil.removeTrailingOutId(outVertexColumnName.getTable()));
}",0.6949941792782305
166974,"@Override public E next(){
  List<Emit<SqlgElement>> result=this.elements;
  this.elements=null;
  return (E)result;
}","@Override public E next(){
  if (lazy) {
    return nextLazy();
  }
  return (E)allElements.next();
}",0.5388127853881278
166975,"public SqlgCompiledResultIterator(SqlgGraph sqlgGraph,Set<SchemaTableTree> rootSchemaTableTrees){
  this.sqlgGraph=sqlgGraph;
  this.rootSchemaTableTrees=rootSchemaTableTrees;
  this.rootSchemaTableTreeIterator=rootSchemaTableTrees.iterator();
}","public SqlgCompiledResultIterator(SqlgGraph sqlgGraph,Set<SchemaTableTree> rootSchemaTableTrees){
  this.sqlgGraph=sqlgGraph;
  this.rootSchemaTableTrees=rootSchemaTableTrees;
  this.rootSchemaTableTreeIterator=rootSchemaTableTrees.iterator();
  this.lazy=sqlgGraph.tx().isLazyQueries();
}",0.9176029962546816
166976,"@Override public boolean hasNext(){
  try {
    while (true) {
switch (this.queryState) {
case REGULAR:
        if (this.elements != null) {
          return true;
        }
 else {
          if (this.queryResult != null) {
            iterateRegularQueries();
            this.first=false;
          }
          if (this.elements == null) {
            closePreparedStatement();
            if (this.distinctQueriesIterator.hasNext()) {
              this.currentDistinctQueryStack=this.distinctQueriesIterator.next();
              this.subQueryStacks=SchemaTableTree.splitIntoSubStacks(this.currentDistinctQueryStack);
              this.currentRootSchemaTableTree.resetColumnAliasMaps();
              executeRegularQuery();
              this.first=true;
            }
 else {
              if (this.rootSchemaTableTreeIterator.hasNext()) {
                this.currentRootSchemaTableTree=this.rootSchemaTableTreeIterator.next();
                this.distinctQueriesIterator=this.currentRootSchemaTableTree.constructDistinctQueries().iterator();
              }
 else {
                if (this.currentRootSchemaTableTree != null) {
                  this.currentRootSchemaTableTree.resetColumnAliasMaps();
                }
                this.queryState=QUERY.OPTIONAL;
                this.rootSchemaTableTreeIterator=this.rootSchemaTableTrees.iterator();
                break;
              }
            }
          }
        }
      break;
case OPTIONAL:
    if (this.elements != null) {
      return true;
    }
 else {
      if (this.queryResult != null) {
        iterateOptionalQueries();
        this.first=false;
      }
      if (this.elements == null) {
        closePreparedStatement();
        if (this.optionalLeftJoinResultsIterator.hasNext()) {
          this.optionalCurrentLeftJoinResult=this.optionalLeftJoinResultsIterator.next();
          this.subQueryStacks=SchemaTableTree.splitIntoSubStacks(this.optionalCurrentLeftJoinResult.getLeft());
          this.currentRootSchemaTableTree.resetColumnAliasMaps();
          executeOptionalQuery();
          this.first=true;
        }
 else {
          if (this.rootSchemaTableTreeIterator.hasNext()) {
            this.currentRootSchemaTableTree=this.rootSchemaTableTreeIterator.next();
            List<Pair<LinkedList<SchemaTableTree>,Set<SchemaTableTree>>> leftJoinResult=new ArrayList<>();
            SchemaTableTree.constructDistinctOptionalQueries(this.currentRootSchemaTableTree,leftJoinResult);
            this.optionalLeftJoinResultsIterator=leftJoinResult.iterator();
          }
 else {
            if (this.currentRootSchemaTableTree != null) {
              this.currentRootSchemaTableTree.resetColumnAliasMaps();
            }
            this.queryState=QUERY.EMIT;
            this.rootSchemaTableTreeIterator=this.rootSchemaTableTrees.iterator();
            break;
          }
        }
      }
    }
  break;
case EMIT:
if (this.elements != null) {
  return true;
}
 else {
  if (this.queryResult != null) {
    iterateEmitQueries();
    this.first=false;
  }
  if (this.elements == null) {
    closePreparedStatement();
    if (this.emitLeftJoinResultsIterator.hasNext()) {
      this.emitCurrentLeftJoinResult=this.emitLeftJoinResultsIterator.next();
      this.subQueryStacks=SchemaTableTree.splitIntoSubStacks(this.emitCurrentLeftJoinResult);
      this.currentRootSchemaTableTree.resetColumnAliasMaps();
      executeEmitQuery();
      this.first=true;
    }
 else {
      if (this.rootSchemaTableTreeIterator.hasNext()) {
        this.currentRootSchemaTableTree=this.rootSchemaTableTreeIterator.next();
        List<LinkedList<SchemaTableTree>> leftJoinResult=new ArrayList<>();
        SchemaTableTree.constructDistinctEmitBeforeQueries(this.currentRootSchemaTableTree,leftJoinResult);
        this.emitLeftJoinResultsIterator=leftJoinResult.iterator();
        if (currentRootSchemaTableTree.isFakeEmit()) {
          List<Emit<SqlgElement>> fake=new ArrayList<>();
          fake.add(new Emit<>());
          this.elements=fake;
          this.currentRootSchemaTableTree.setFakeEmit(false);
        }
      }
 else {
        if (this.currentRootSchemaTableTree != null) {
          this.currentRootSchemaTableTree.resetColumnAliasMaps();
        }
        return false;
      }
    }
  }
}
break;
}
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}","@Override public boolean hasNext(){
  if (lazy) {
    return hasNextLazy();
  }
  if (allElements == null) {
    List<List<Emit<SqlgElement>>> allList=new LinkedList<>();
    while (hasNextLazy()) {
      allList.add(this.elements);
      this.elements=null;
    }
    allElements=allList.iterator();
  }
  return allElements.hasNext();
}",0.046314000424899
166977,"@Override protected void doOpen(){
  if (isOpen())   throw Transaction.Exceptions.transactionAlreadyOpen();
 else {
    try {
      Connection connection=this.sqlgGraph.getSqlgDataSource().get(this.sqlgGraph.getJdbcUrl()).getConnection();
      connection.setAutoCommit(false);
      if (this.sqlgGraph.getSqlDialect().supportsClientInfo()) {
        connection.setClientInfo(""String_Node_Str"",Thread.currentThread().getName());
      }
      this.threadLocalTx.set(TransactionCache.of(this.cacheVertices,connection,new BatchManager(this.sqlgGraph,((SqlBulkDialect)this.sqlgGraph.getSqlDialect()))));
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}","@Override protected void doOpen(){
  if (isOpen())   throw Transaction.Exceptions.transactionAlreadyOpen();
 else {
    try {
      Connection connection=this.sqlgGraph.getSqlgDataSource().get(this.sqlgGraph.getJdbcUrl()).getConnection();
      connection.setAutoCommit(false);
      if (this.sqlgGraph.getSqlDialect().supportsClientInfo()) {
        connection.setClientInfo(""String_Node_Str"",Thread.currentThread().getName());
      }
      boolean lazy=this.sqlgGraph.getConfiguration().getBoolean(QUERY_LAZY,true);
      this.threadLocalTx.set(TransactionCache.of(this.cacheVertices,connection,new BatchManager(this.sqlgGraph,((SqlBulkDialect)this.sqlgGraph.getSqlDialect())),lazy));
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}",0.9402882635552504
166978,"private Iterator<Edge> internalEdges(Direction direction,String... labels){
  this.sqlgGraph.tx().readWrite();
  if (this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode() && this.sqlgGraph.tx().getBatchManager().vertexIsCached(this)) {
    this.sqlgGraph.tx().flush();
  }
switch (direction) {
case OUT:
    return this.sqlgGraph.traversal().V(this).outE(labels).toList().iterator();
case IN:
  return this.sqlgGraph.traversal().V(this).inE(labels).toList().iterator();
case BOTH:
return this.sqlgGraph.traversal().V(this).bothE(labels).toList().iterator();
}
return Collections.emptyIterator();
}","private Iterator<Edge> internalEdges(Direction direction,String... labels){
  this.sqlgGraph.tx().readWrite();
  if (this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode() && this.sqlgGraph.tx().getBatchManager().vertexIsCached(this)) {
    this.sqlgGraph.tx().flush();
  }
switch (direction) {
case OUT:
    return this.sqlgGraph.traversal().V(this).outE(labels);
case IN:
  return this.sqlgGraph.traversal().V(this).inE(labels);
case BOTH:
return this.sqlgGraph.traversal().V(this).bothE(labels);
}
return Collections.emptyIterator();
}",0.9498327759197324
166979,"static TransactionCache of(boolean cacheVertices,Connection connection,BatchManager batchManager){
  return new TransactionCache(cacheVertices,connection,batchManager);
}","static TransactionCache of(boolean cacheVertices,Connection connection,BatchManager batchManager,boolean lazyQueries){
  return new TransactionCache(cacheVertices,connection,batchManager,lazyQueries);
}",0.913978494623656
166980,"private TransactionCache(boolean cacheVertices,Connection connection,BatchManager batchManager){
  this.cacheVertices=cacheVertices;
  this.connection=connection;
  this.batchManager=batchManager;
}","private TransactionCache(boolean cacheVertices,Connection connection,BatchManager batchManager,boolean lazyQueries){
  this.cacheVertices=cacheVertices;
  this.connection=connection;
  this.batchManager=batchManager;
  this.lazyQueries=lazyQueries;
}",0.8839285714285714
166981,"@Test public void testBothEOnEdgeToSelf(){
  final Vertex v1=this.sqlgGraph.addVertex(""String_Node_Str"",""String_Node_Str"");
  final Vertex v2=this.sqlgGraph.addVertex(""String_Node_Str"",""String_Node_Str"");
  v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",2010);
  v1.addEdge(""String_Node_Str"",v2);
  v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",""String_Node_Str"");
  v2.addEdge(""String_Node_Str"",v1,""String_Node_Str"",2010);
  assertEquals(4,vertexTraversal(v1).bothE().count().next().intValue());
  assertEquals(4,vertexTraversal(v2).bothE().count().next().intValue());
  v1.edges(Direction.BOTH).forEachRemaining(edge -> {
    v1.addEdge(""String_Node_Str"",v2);
    v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",""String_Node_Str"");
    edge.remove();
  }
);
  this.sqlgGraph.tx().commit();
  List<Edge> edgeList=vertexTraversal(v1).outE().toList();
  for (  Edge edge : edgeList) {
    System.out.println(edge);
  }
  assertEquals(8,vertexTraversal(v1).outE().count().next().intValue());
  assertEquals(0,vertexTraversal(v2).outE().count().next().intValue());
  v1.edges(Direction.BOTH).forEachRemaining(Edge::remove);
  assertEquals(0,vertexTraversal(v1).bothE().count().next().intValue());
  assertEquals(0,vertexTraversal(v2).bothE().count().next().intValue());
}","@Test public void testBothEOnEdgeToSelf(){
  final Vertex v1=this.sqlgGraph.addVertex(""String_Node_Str"",""String_Node_Str"");
  final Vertex v2=this.sqlgGraph.addVertex(""String_Node_Str"",""String_Node_Str"");
  v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",2010);
  v1.addEdge(""String_Node_Str"",v2);
  v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",""String_Node_Str"");
  v2.addEdge(""String_Node_Str"",v1,""String_Node_Str"",2010);
  this.sqlgGraph.tx().setLazyQueries(false);
  assertEquals(4,vertexTraversal(v1).bothE().count().next().intValue());
  assertEquals(4,vertexTraversal(v2).bothE().count().next().intValue());
  v1.edges(Direction.BOTH).forEachRemaining(edge -> {
    v1.addEdge(""String_Node_Str"",v2);
    v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",""String_Node_Str"");
    edge.remove();
  }
);
  this.sqlgGraph.tx().commit();
  List<Edge> edgeList=vertexTraversal(v1).outE().toList();
  for (  Edge edge : edgeList) {
    System.out.println(edge);
  }
  assertEquals(8,vertexTraversal(v1).outE().count().next().intValue());
  assertEquals(0,vertexTraversal(v2).outE().count().next().intValue());
  v1.edges(Direction.BOTH).forEachRemaining(Edge::remove);
  assertEquals(0,vertexTraversal(v1).bothE().count().next().intValue());
  assertEquals(0,vertexTraversal(v2).bothE().count().next().intValue());
}",0.9826856483262794
166982,"@Test public void testBothEOnEdgeToSelf(){
  final Vertex v1=this.sqlgGraph.addVertex(""String_Node_Str"",""String_Node_Str"");
  final Vertex v2=this.sqlgGraph.addVertex(""String_Node_Str"",""String_Node_Str"");
  v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",2010);
  v1.addEdge(""String_Node_Str"",v2);
  v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",""String_Node_Str"");
  v2.addEdge(""String_Node_Str"",v1,""String_Node_Str"",2010);
  Assert.assertEquals(4,vertexTraversal(v1).bothE().count().next().intValue());
  Assert.assertEquals(4,vertexTraversal(v2).bothE().count().next().intValue());
  v1.edges(Direction.BOTH).forEachRemaining(edge -> {
    v1.addEdge(""String_Node_Str"",v2);
    v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",""String_Node_Str"");
    edge.remove();
  }
);
  this.sqlgGraph.tx().commit();
  List<Edge> edgeList=vertexTraversal(v1).outE().toList();
  for (  Edge edge : edgeList) {
    System.out.println(edge);
  }
  Assert.assertEquals(8,vertexTraversal(v1).outE().count().next().intValue());
  Assert.assertEquals(0,vertexTraversal(v2).outE().count().next().intValue());
  v1.edges(Direction.BOTH).forEachRemaining(Edge::remove);
  Assert.assertEquals(0,vertexTraversal(v1).bothE().count().next().intValue());
  Assert.assertEquals(0,vertexTraversal(v2).bothE().count().next().intValue());
}","@Test public void testBothEOnEdgeToSelf(){
  final Vertex v1=this.sqlgGraph.addVertex(""String_Node_Str"",""String_Node_Str"");
  final Vertex v2=this.sqlgGraph.addVertex(""String_Node_Str"",""String_Node_Str"");
  v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",2010);
  v1.addEdge(""String_Node_Str"",v2);
  v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",""String_Node_Str"");
  v2.addEdge(""String_Node_Str"",v1,""String_Node_Str"",2010);
  Assert.assertEquals(4,vertexTraversal(v1).bothE().count().next().intValue());
  Assert.assertEquals(4,vertexTraversal(v2).bothE().count().next().intValue());
  this.sqlgGraph.tx().setLazyQueries(false);
  v1.edges(Direction.BOTH).forEachRemaining(edge -> {
    v1.addEdge(""String_Node_Str"",v2);
    v1.addEdge(""String_Node_Str"",v2,""String_Node_Str"",""String_Node_Str"");
    edge.remove();
  }
);
  this.sqlgGraph.tx().commit();
  List<Edge> edgeList=vertexTraversal(v1).outE().toList();
  for (  Edge edge : edgeList) {
    System.out.println(edge);
  }
  Assert.assertEquals(8,vertexTraversal(v1).outE().count().next().intValue());
  Assert.assertEquals(0,vertexTraversal(v2).outE().count().next().intValue());
  v1.edges(Direction.BOTH).forEachRemaining(Edge::remove);
  Assert.assertEquals(0,vertexTraversal(v1).bothE().count().next().intValue());
  Assert.assertEquals(0,vertexTraversal(v2).bothE().count().next().intValue());
}",0.983227730152814
166983,"@Test public void testVertexEdges(){
  final Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  final Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  final Vertex c1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1);
  a1.addEdge(""String_Node_Str"",c1);
  this.sqlgGraph.tx().commit();
  AtomicInteger count=new AtomicInteger(0);
  a1.edges(Direction.BOTH).forEachRemaining(e -> count.incrementAndGet());
  Assert.assertEquals(2,count.get());
  count.set(0);
  a1.edges(Direction.BOTH).forEachRemaining(edge -> {
    a1.addEdge(""String_Node_Str"",b1);
    count.getAndIncrement();
  }
);
  Assert.assertEquals(2,count.get());
}","private void testVertexEdges(boolean lazy){
  final Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  final Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  final Vertex c1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1);
  a1.addEdge(""String_Node_Str"",c1);
  this.sqlgGraph.tx().commit();
  this.sqlgGraph.tx().setLazyQueries(lazy);
  AtomicInteger count=new AtomicInteger(0);
  a1.edges(Direction.BOTH).forEachRemaining(e -> count.incrementAndGet());
  Assert.assertEquals(2,count.get());
  count.set(0);
  a1.edges(Direction.BOTH).forEachRemaining(edge -> {
    a1.addEdge(""String_Node_Str"",b1);
    count.getAndIncrement();
  }
);
  Assert.assertEquals(lazy ? 3 : 2,count.get());
}",0.913103448275862
166984,"Map<String,PropertyType> getTableFor(SchemaTable schemaTable){
  Optional<VertexLabel> vertexLabelOptional=getVertexLabel(schemaTable.getTable());
  if (vertexLabelOptional.isPresent()) {
    return vertexLabelOptional.get().getPropertyTypeMap();
  }
 else {
    Optional<EdgeLabel> edgeLabelOptional=getEdgeLabel(schemaTable.getTable());
    if (edgeLabelOptional.isPresent()) {
      return edgeLabelOptional.get().getPropertyTypeMap();
    }
  }
  return Collections.emptyMap();
}","Map<String,PropertyType> getTableFor(SchemaTable schemaTable){
  Preconditions.checkArgument(schemaTable.getTable().startsWith(VERTEX_PREFIX) || schemaTable.getTable().startsWith(EDGE_PREFIX),""String_Node_Str"",SchemaManager.VERTEX_PREFIX,SchemaManager.EDGE_PREFIX);
  if (schemaTable.isVertexTable()) {
    Optional<VertexLabel> vertexLabelOptional=getVertexLabel(schemaTable.withOutPrefix().getTable());
    if (vertexLabelOptional.isPresent()) {
      return vertexLabelOptional.get().getPropertyTypeMap();
    }
  }
 else {
    Optional<EdgeLabel> edgeLabelOptional=getEdgeLabel(schemaTable.withOutPrefix().getTable());
    if (edgeLabelOptional.isPresent()) {
      return edgeLabelOptional.get().getPropertyTypeMap();
    }
  }
  return Collections.emptyMap();
}",0.7728
166985,"public Map<String,PropertyType> getTableFor(SchemaTable schemaTable){
  z_internalReadLock();
  try {
    Optional<Schema> schemaOptional=getSchema(schemaTable.getSchema());
    if (schemaOptional.isPresent()) {
      return schemaOptional.get().getTableFor(schemaTable.withOutPrefix());
    }
    if (isWriteLockHeldByCurrentThread()) {
      Map<String,PropertyType> temporaryPropertyMap=this.temporaryTables.get(schemaTable.getTable());
      if (temporaryPropertyMap != null) {
        return Collections.unmodifiableMap(temporaryPropertyMap);
      }
    }
    return Collections.emptyMap();
  }
  finally {
    z_internalReadUnLock();
  }
}","public Map<String,PropertyType> getTableFor(SchemaTable schemaTable){
  z_internalReadLock();
  try {
    Optional<Schema> schemaOptional=getSchema(schemaTable.getSchema());
    if (schemaOptional.isPresent()) {
      return schemaOptional.get().getTableFor(schemaTable);
    }
    if (isWriteLockHeldByCurrentThread()) {
      Map<String,PropertyType> temporaryPropertyMap=this.temporaryTables.get(schemaTable.getTable());
      if (temporaryPropertyMap != null) {
        return Collections.unmodifiableMap(temporaryPropertyMap);
      }
    }
    return Collections.emptyMap();
  }
  finally {
    z_internalReadUnLock();
  }
}",0.987460815047022
166986,"@Test public void testMultiThreadEdges() throws InterruptedException, ExecutionException {
  Vertex v1=sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sqlgGraph.tx().commit();
  Set<Integer> tables=new ConcurrentSkipListSet<>();
  ExecutorService executorService=newFixedThreadPool(10);
  for (int j=0; j < 100; j++) {
    executorService.submit(() -> {
      final Random random=new Random();
      int randomInt=random.nextInt();
      for (int i=0; i < 10; i++) {
        Vertex v2=sqlgGraph.addVertex(T.label,""String_Node_Str"" + String.valueOf(randomInt),""String_Node_Str"",String.valueOf(randomInt));
        v1.addEdge(""String_Node_Str"" + String.valueOf(randomInt),v2);
        tables.add(randomInt);
      }
      sqlgGraph.tx().commit();
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(60,TimeUnit.SECONDS);
  assertEquals(100,tables.size());
  for (  Integer i : tables) {
    assertTrue(this.sqlgGraph.getSchemaManager().tableExist(this.sqlgGraph.getSqlDialect().getPublicSchema(),""String_Node_Str"" + String.valueOf(i)));
    assertEquals(10,this.sqlgGraph.traversal().V().has(T.label,""String_Node_Str"" + String.valueOf(i)).has(""String_Node_Str"",String.valueOf(i)).count().next().intValue());
    assertEquals(10,vertexTraversal(v1).out(""String_Node_Str"" + String.valueOf(i)).count().next().intValue());
  }
}","@Test public void testMultiThreadEdges() throws InterruptedException, ExecutionException {
  Vertex v1=sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sqlgGraph.tx().commit();
  Set<Integer> tables=new ConcurrentSkipListSet<>();
  ExecutorService executorService=newFixedThreadPool(10);
  for (int j=0; j < 100; j++) {
    executorService.submit(() -> {
      final Random random=new Random();
      int randomInt=random.nextInt();
      for (int i=0; i < 10; i++) {
        Vertex v2=sqlgGraph.addVertex(T.label,""String_Node_Str"" + String.valueOf(randomInt),""String_Node_Str"",String.valueOf(randomInt));
        v1.addEdge(""String_Node_Str"" + String.valueOf(randomInt),v2);
        tables.add(randomInt);
      }
      sqlgGraph.tx().commit();
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(60,TimeUnit.SECONDS);
  for (  Integer i : tables) {
    assertTrue(this.sqlgGraph.getSchemaManager().tableExist(this.sqlgGraph.getSqlDialect().getPublicSchema(),""String_Node_Str"" + String.valueOf(i)));
    assertEquals(10,this.sqlgGraph.traversal().V().has(T.label,""String_Node_Str"" + String.valueOf(i)).has(""String_Node_Str"",String.valueOf(i)).count().next().intValue());
    assertEquals(10,vertexTraversal(v1).out(""String_Node_Str"" + String.valueOf(i)).count().next().intValue());
  }
}",0.9872122762148338
166987,"@Test public void testMultiThreadVertices() throws InterruptedException, ExecutionException {
  Set<Integer> tables=new ConcurrentSkipListSet<>();
  ExecutorService executorService=newFixedThreadPool(10);
  for (int j=0; j < 100; j++) {
    executorService.submit(() -> {
      final Random random=new Random();
      int randomInt=random.nextInt();
      for (int i=0; i < 10; i++) {
        sqlgGraph.addVertex(T.label,""String_Node_Str"" + String.valueOf(randomInt),""String_Node_Str"",String.valueOf(randomInt));
        tables.add(randomInt);
      }
      sqlgGraph.tx().commit();
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(6000,TimeUnit.SECONDS);
  assertEquals(100,tables.size());
  for (  Integer i : tables) {
    assertTrue(this.sqlgGraph.getSchemaManager().tableExist(this.sqlgGraph.getSqlDialect().getPublicSchema(),""String_Node_Str"" + String.valueOf(i)));
    assertEquals(10,this.sqlgGraph.traversal().V().has(T.label,""String_Node_Str"" + String.valueOf(i)).has(""String_Node_Str"",String.valueOf(i)).count().next().intValue());
  }
}","@Test public void testMultiThreadVertices() throws InterruptedException, ExecutionException {
  Set<Integer> tables=new ConcurrentSkipListSet<>();
  ExecutorService executorService=newFixedThreadPool(10);
  for (int j=0; j < 100; j++) {
    executorService.submit(() -> {
      final Random random=new Random();
      int randomInt=random.nextInt();
      for (int i=0; i < 10; i++) {
        sqlgGraph.addVertex(T.label,""String_Node_Str"" + String.valueOf(randomInt),""String_Node_Str"",String.valueOf(randomInt));
        tables.add(randomInt);
      }
      sqlgGraph.tx().commit();
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(6000,TimeUnit.SECONDS);
  for (  Integer i : tables) {
    assertTrue(this.sqlgGraph.getSchemaManager().tableExist(this.sqlgGraph.getSqlDialect().getPublicSchema(),""String_Node_Str"" + String.valueOf(i)));
    assertEquals(10,this.sqlgGraph.traversal().V().has(T.label,""String_Node_Str"" + String.valueOf(i)).has(""String_Node_Str"",String.valueOf(i)).count().next().intValue());
  }
}",0.983482774893818
166988,"default String getPublicSchema(){
  return ""String_Node_Str"";
}","/** 
 * A getter to return the ""public"" schema for the database. For postgresql it is ""public"" and for HSQLDB it is ""PUBLIC""
 * @return the database's public schema.
 */
default String getPublicSchema(){
  return ""String_Node_Str"";
}",0.4256756756756756
166989,"public JsonNode toJson(){
  ArrayNode propertyArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  PropertyColumn property : this.properties.values()) {
    propertyArrayNode.add(property.toNotifyJson());
  }
  return propertyArrayNode;
}","protected JsonNode toJson(){
  ArrayNode propertyArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  PropertyColumn property : this.properties.values()) {
    propertyArrayNode.add(property.toNotifyJson());
  }
  return propertyArrayNode;
}",0.9789674952198852
166990,"public void fromPropertyNotifyJson(JsonNode vertexLabelJson){
  ArrayNode propertiesNode=(ArrayNode)vertexLabelJson.get(""String_Node_Str"");
  if (propertiesNode != null) {
    for (    JsonNode propertyNode : propertiesNode) {
      PropertyColumn property=PropertyColumn.fromNotifyJson(this,propertyNode);
      this.properties.put(property.getName(),property);
    }
  }
}","void fromPropertyNotifyJson(JsonNode vertexLabelJson){
  ArrayNode propertiesNode=(ArrayNode)vertexLabelJson.get(""String_Node_Str"");
  if (propertiesNode != null) {
    for (    JsonNode propertyNode : propertiesNode) {
      PropertyColumn property=PropertyColumn.fromNotifyJson(this,propertyNode);
      this.properties.put(property.getName(),property);
    }
  }
}",0.99055330634278
166991,"public void addToOutVertexLabel(VertexLabel vertexLabel){
  this.outVertexLabels.add(vertexLabel);
}","void addToOutVertexLabel(VertexLabel vertexLabel){
  this.outVertexLabels.add(vertexLabel);
}",0.9637305699481864
166992,"public static EdgeLabel createEdgeLabel(SqlgGraph sqlgGraph,String edgeLabelName,VertexLabel outVertexLabel,VertexLabel inVertexLabel,Map<String,PropertyType> properties){
  EdgeLabel edgeLabel=new EdgeLabel(false,edgeLabelName,outVertexLabel,inVertexLabel,properties);
  if (!inVertexLabel.getSchema().isSqlgSchema()) {
    edgeLabel.createEdgeTable(sqlgGraph,outVertexLabel,inVertexLabel,properties);
  }
  return edgeLabel;
}","static EdgeLabel createEdgeLabel(SqlgGraph sqlgGraph,String edgeLabelName,VertexLabel outVertexLabel,VertexLabel inVertexLabel,Map<String,PropertyType> properties){
  EdgeLabel edgeLabel=new EdgeLabel(false,edgeLabelName,outVertexLabel,inVertexLabel,properties);
  if (!inVertexLabel.getSchema().isSqlgSchema()) {
    edgeLabel.createEdgeTable(sqlgGraph,outVertexLabel,inVertexLabel,properties);
  }
  return edgeLabel;
}",0.9917550058892816
166993,"public void ensureEdgeForeignKeysExist(SqlgGraph sqlgGraph,boolean in,VertexLabel vertexLabel,SchemaTable vertexSchemaTable){
  Preconditions.checkArgument(vertexLabel.getSchema().getName().equals(vertexSchemaTable.getSchema()));
  Preconditions.checkArgument(vertexLabel.getLabel().equals(vertexSchemaTable.getTable()));
  Set<String> allEdgeForeignKeys=getAllEdgeForeignKeys();
  SchemaTable foreignKey=SchemaTable.of(vertexSchemaTable.getSchema(),vertexSchemaTable.getTable() + (in ? SchemaManager.IN_VERTEX_COLUMN_END : SchemaManager.OUT_VERTEX_COLUMN_END));
  if (!allEdgeForeignKeys.contains(foreignKey.getSchema() + ""String_Node_Str"" + foreignKey.getTable())) {
    Schema schema=this.getSchema();
    schema.getTopology().lock();
    allEdgeForeignKeys=getAllEdgeForeignKeys();
    if (!allEdgeForeignKeys.contains(foreignKey.getSchema() + ""String_Node_Str"" + foreignKey.getTable())) {
      TopologyManager.addLabelToEdge(sqlgGraph,this.getSchema().getName(),EDGE_PREFIX + getLabel(),in,foreignKey);
      if (in) {
        this.uncommittedInVertexLabels.add(vertexLabel);
        vertexLabel.addToUncommittedInEdgeLabels(schema,this);
      }
 else {
        this.uncommittedOutVertexLabels.add(vertexLabel);
        vertexLabel.addToUncommittedOutEdgeLabels(schema,this);
      }
      addEdgeForeignKey(sqlgGraph,schema.getName(),EDGE_PREFIX + getLabel(),foreignKey,vertexSchemaTable);
    }
  }
}","void ensureEdgeForeignKeysExist(SqlgGraph sqlgGraph,boolean in,VertexLabel vertexLabel,SchemaTable vertexSchemaTable){
  Preconditions.checkArgument(vertexLabel.getSchema().getName().equals(vertexSchemaTable.getSchema()));
  Preconditions.checkArgument(vertexLabel.getLabel().equals(vertexSchemaTable.getTable()));
  Set<String> allEdgeForeignKeys=getAllEdgeForeignKeys();
  SchemaTable foreignKey=SchemaTable.of(vertexSchemaTable.getSchema(),vertexSchemaTable.getTable() + (in ? SchemaManager.IN_VERTEX_COLUMN_END : SchemaManager.OUT_VERTEX_COLUMN_END));
  if (!allEdgeForeignKeys.contains(foreignKey.getSchema() + ""String_Node_Str"" + foreignKey.getTable())) {
    Schema schema=this.getSchema();
    schema.getTopology().lock();
    allEdgeForeignKeys=getAllEdgeForeignKeys();
    if (!allEdgeForeignKeys.contains(foreignKey.getSchema() + ""String_Node_Str"" + foreignKey.getTable())) {
      TopologyManager.addLabelToEdge(sqlgGraph,this.getSchema().getName(),EDGE_PREFIX + getLabel(),in,foreignKey);
      if (in) {
        this.uncommittedInVertexLabels.add(vertexLabel);
        vertexLabel.addToUncommittedInEdgeLabels(schema,this);
      }
 else {
        this.uncommittedOutVertexLabels.add(vertexLabel);
        vertexLabel.addToUncommittedOutEdgeLabels(schema,this);
      }
      addEdgeForeignKey(sqlgGraph,schema.getName(),EDGE_PREFIX + getLabel(),foreignKey,vertexSchemaTable);
    }
  }
}",0.9975097829953752
166994,"public boolean deepEquals(EdgeLabel otherEdgeLabel){
  Preconditions.checkState(this.equals(otherEdgeLabel),""String_Node_Str"");
  for (  VertexLabel outVertexLabel : this.outVertexLabels) {
    boolean ok=false;
    for (    VertexLabel otherOutVertexLabel : otherEdgeLabel.outVertexLabels) {
      if (outVertexLabel.equals(otherOutVertexLabel)) {
        ok=true;
        break;
      }
    }
    if (!ok) {
      return false;
    }
  }
  for (  VertexLabel inVertexLabel : this.inVertexLabels) {
    boolean ok=false;
    for (    VertexLabel otherInVertexLabel : otherEdgeLabel.inVertexLabels) {
      if (inVertexLabel.equals(otherInVertexLabel)) {
        ok=true;
        break;
      }
    }
    if (!ok) {
      return false;
    }
  }
  return true;
}","boolean deepEquals(EdgeLabel otherEdgeLabel){
  Preconditions.checkState(this.equals(otherEdgeLabel),""String_Node_Str"");
  for (  VertexLabel outVertexLabel : this.outVertexLabels) {
    boolean ok=false;
    for (    VertexLabel otherOutVertexLabel : otherEdgeLabel.outVertexLabels) {
      if (outVertexLabel.equals(otherOutVertexLabel)) {
        ok=true;
        break;
      }
    }
    if (!ok) {
      return false;
    }
  }
  for (  VertexLabel inVertexLabel : this.inVertexLabels) {
    boolean ok=false;
    for (    VertexLabel otherInVertexLabel : otherEdgeLabel.inVertexLabels) {
      if (inVertexLabel.equals(otherInVertexLabel)) {
        ok=true;
        break;
      }
    }
    if (!ok) {
      return false;
    }
  }
  return true;
}",0.995385629531971
166995,"public static EdgeLabel loadSqlgSchemaEdgeLabel(String edgeLabelName,VertexLabel outVertexLabel,VertexLabel inVertexLabel,Map<String,PropertyType> properties){
  EdgeLabel edgeLabel=new EdgeLabel(true,edgeLabelName,outVertexLabel,inVertexLabel,properties);
  return edgeLabel;
}","static EdgeLabel loadSqlgSchemaEdgeLabel(String edgeLabelName,VertexLabel outVertexLabel,VertexLabel inVertexLabel,Map<String,PropertyType> properties){
  EdgeLabel edgeLabel=new EdgeLabel(true,edgeLabelName,outVertexLabel,inVertexLabel,properties);
  return edgeLabel;
}",0.9872495446265938
166996,"@Override public Schema getSchema(){
  if (!this.outVertexLabels.isEmpty()) {
    VertexLabel vertexLabel=this.outVertexLabels.iterator().next();
    return vertexLabel.getSchema();
  }
 else   if (this.topology.isWriteLockHeldByCurrentThread() && !this.uncommittedOutVertexLabels.isEmpty()) {
    VertexLabel vertexLabel=this.uncommittedOutVertexLabels.iterator().next();
    return vertexLabel.getSchema();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override protected Schema getSchema(){
  if (!this.outVertexLabels.isEmpty()) {
    VertexLabel vertexLabel=this.outVertexLabels.iterator().next();
    return vertexLabel.getSchema();
  }
 else   if (this.topology.isWriteLockHeldByCurrentThread() && !this.uncommittedOutVertexLabels.isEmpty()) {
    VertexLabel vertexLabel=this.uncommittedOutVertexLabels.iterator().next();
    return vertexLabel.getSchema();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9865563598759048
166997,"public void ensureColumnsExist(SqlgGraph sqlgGraph,Map<String,PropertyType> columns){
  for (  Map.Entry<String,PropertyType> column : columns.entrySet()) {
    if (!this.properties.containsKey(column.getKey())) {
      if (!this.uncommittedProperties.containsKey(column.getKey())) {
        this.getSchema().getTopology().lock();
        if (!this.uncommittedProperties.containsKey(column.getKey())) {
          TopologyManager.addEdgeColumn(sqlgGraph,this.getSchema().getName(),EDGE_PREFIX + getLabel(),column);
          addColumn(sqlgGraph,this.getSchema().getName(),EDGE_PREFIX + getLabel(),ImmutablePair.of(column.getKey(),column.getValue()));
          this.uncommittedProperties.put(column.getKey(),new PropertyColumn(this,column.getKey(),column.getValue()));
        }
      }
    }
  }
}","void ensureColumnsExist(SqlgGraph sqlgGraph,Map<String,PropertyType> columns){
  for (  Map.Entry<String,PropertyType> column : columns.entrySet()) {
    if (!this.properties.containsKey(column.getKey())) {
      if (!this.uncommittedProperties.containsKey(column.getKey())) {
        this.getSchema().getTopology().lock();
        if (!this.uncommittedProperties.containsKey(column.getKey())) {
          TopologyManager.addEdgeColumn(sqlgGraph,this.getSchema().getName(),EDGE_PREFIX + getLabel(),column);
          addColumn(sqlgGraph,this.getSchema().getName(),EDGE_PREFIX + getLabel(),ImmutablePair.of(column.getKey(),column.getValue()));
          this.uncommittedProperties.put(column.getKey(),new PropertyColumn(this,column.getKey(),column.getValue()));
        }
      }
    }
  }
}",0.9955891619407689
166998,"public void addToInVertexLabel(VertexLabel vertexLabel){
  this.inVertexLabels.add(vertexLabel);
}","void addToInVertexLabel(VertexLabel vertexLabel){
  this.inVertexLabels.add(vertexLabel);
}",0.9629629629629628
166999,"public JsonNode toJson(){
  ObjectNode edgeLabelNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
  edgeLabelNode.put(""String_Node_Str"",getSchema().getName());
  edgeLabelNode.put(""String_Node_Str"",getLabel());
  JsonNode propertyNode=super.toJson();
  edgeLabelNode.set(""String_Node_Str"",propertyNode);
  ArrayNode outVertexLabelArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  VertexLabel outVertexLabel : this.outVertexLabels) {
    ObjectNode outVertexLabelObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
    outVertexLabelObjectNode.put(""String_Node_Str"",outVertexLabel.getLabel());
    outVertexLabelArrayNode.add(outVertexLabelObjectNode);
  }
  edgeLabelNode.set(""String_Node_Str"",outVertexLabelArrayNode);
  ArrayNode inVertexLabelArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  VertexLabel inVertexLabel : this.inVertexLabels) {
    ObjectNode inVertexLabelObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
    inVertexLabelObjectNode.put(""String_Node_Str"",inVertexLabel.getLabel());
    inVertexLabelArrayNode.add(inVertexLabelObjectNode);
  }
  edgeLabelNode.set(""String_Node_Str"",inVertexLabelArrayNode);
  if (this.getSchema().getTopology().isWriteLockHeldByCurrentThread()) {
    outVertexLabelArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
    for (    VertexLabel outVertexLabel : this.uncommittedOutVertexLabels) {
      ObjectNode outVertexLabelObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
      outVertexLabelObjectNode.put(""String_Node_Str"",outVertexLabel.getLabel());
      outVertexLabelArrayNode.add(outVertexLabelObjectNode);
    }
    edgeLabelNode.set(""String_Node_Str"",outVertexLabelArrayNode);
    inVertexLabelArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
    for (    VertexLabel inVertexLabel : this.uncommittedInVertexLabels) {
      ObjectNode inVertexLabelObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
      inVertexLabelObjectNode.put(""String_Node_Str"",inVertexLabel.getLabel());
      inVertexLabelArrayNode.add(inVertexLabelObjectNode);
    }
    edgeLabelNode.set(""String_Node_Str"",inVertexLabelArrayNode);
  }
  return edgeLabelNode;
}","@Override protected JsonNode toJson(){
  ObjectNode edgeLabelNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
  edgeLabelNode.put(""String_Node_Str"",getSchema().getName());
  edgeLabelNode.put(""String_Node_Str"",getLabel());
  edgeLabelNode.set(""String_Node_Str"",super.toJson());
  ArrayNode outVertexLabelArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  VertexLabel outVertexLabel : this.outVertexLabels) {
    ObjectNode outVertexLabelObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
    outVertexLabelObjectNode.put(""String_Node_Str"",outVertexLabel.getLabel());
    outVertexLabelArrayNode.add(outVertexLabelObjectNode);
  }
  edgeLabelNode.set(""String_Node_Str"",outVertexLabelArrayNode);
  ArrayNode inVertexLabelArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  VertexLabel inVertexLabel : this.inVertexLabels) {
    ObjectNode inVertexLabelObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
    inVertexLabelObjectNode.put(""String_Node_Str"",inVertexLabel.getLabel());
    inVertexLabelArrayNode.add(inVertexLabelObjectNode);
  }
  edgeLabelNode.set(""String_Node_Str"",inVertexLabelArrayNode);
  if (this.getSchema().getTopology().isWriteLockHeldByCurrentThread()) {
    outVertexLabelArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
    for (    VertexLabel outVertexLabel : this.uncommittedOutVertexLabels) {
      ObjectNode outVertexLabelObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
      outVertexLabelObjectNode.put(""String_Node_Str"",outVertexLabel.getLabel());
      outVertexLabelArrayNode.add(outVertexLabelObjectNode);
    }
    edgeLabelNode.set(""String_Node_Str"",outVertexLabelArrayNode);
    inVertexLabelArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
    for (    VertexLabel inVertexLabel : this.uncommittedInVertexLabels) {
      ObjectNode inVertexLabelObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
      inVertexLabelObjectNode.put(""String_Node_Str"",inVertexLabel.getLabel());
      inVertexLabelArrayNode.add(inVertexLabelObjectNode);
    }
    edgeLabelNode.set(""String_Node_Str"",inVertexLabelArrayNode);
  }
  return edgeLabelNode;
}",0.9659924427650588
167000,"public Set<String> getAllEdgeForeignKeys(){
  Set<String> result=new HashSet<>();
  for (  VertexLabel vertexLabel : this.inVertexLabels) {
    result.add(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getLabel()+ SchemaManager.IN_VERTEX_COLUMN_END);
  }
  for (  VertexLabel vertexLabel : this.outVertexLabels) {
    result.add(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getLabel()+ SchemaManager.OUT_VERTEX_COLUMN_END);
  }
  if (this.getSchema().getTopology().isWriteLockHeldByCurrentThread()) {
    for (    VertexLabel vertexLabel : this.uncommittedInVertexLabels) {
      result.add(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getLabel()+ SchemaManager.IN_VERTEX_COLUMN_END);
    }
    for (    VertexLabel vertexLabel : this.uncommittedOutVertexLabels) {
      result.add(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getLabel()+ SchemaManager.OUT_VERTEX_COLUMN_END);
    }
  }
  return result;
}","Set<String> getAllEdgeForeignKeys(){
  Set<String> result=new HashSet<>();
  for (  VertexLabel vertexLabel : this.inVertexLabels) {
    result.add(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getLabel()+ SchemaManager.IN_VERTEX_COLUMN_END);
  }
  for (  VertexLabel vertexLabel : this.outVertexLabels) {
    result.add(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getLabel()+ SchemaManager.OUT_VERTEX_COLUMN_END);
  }
  if (this.getSchema().getTopology().isWriteLockHeldByCurrentThread()) {
    for (    VertexLabel vertexLabel : this.uncommittedInVertexLabels) {
      result.add(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getLabel()+ SchemaManager.IN_VERTEX_COLUMN_END);
    }
    for (    VertexLabel vertexLabel : this.uncommittedOutVertexLabels) {
      result.add(vertexLabel.getSchema().getName() + ""String_Node_Str"" + vertexLabel.getLabel()+ SchemaManager.OUT_VERTEX_COLUMN_END);
    }
  }
  return result;
}",0.9964699949571356
