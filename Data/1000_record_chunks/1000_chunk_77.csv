record_number,buggy_code,fixed_code,code_similarity
76001,"/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws GenerationException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  LegendData legendData=new LegendData();
  if (!lg.isSetOrientation()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  if (!lg.isSetDirection()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  final Orientation orientation=lg.getOrientation();
  final Direction direction=lg.getDirection();
  final Position lgPosition=lg.getPosition();
  final boolean bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  Label la=LabelImpl.create();
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  ClientArea ca=lg.getClientArea();
  LineAttributes lia=ca.getOutline();
  legendData.dSeparatorThickness=lia.getThickness();
  la.getCaption().setValue(""String_Node_Str"");
  final ITextMetrics itm=xs.getTextMetrics(la);
  legendData.dItemHeight=itm.getFullHeight();
  la.getCaption().setValue(ELLIPSIS_STRING);
  itm.reuse(la);
  legendData.dEllipsisWidth=itm.getFullWidth();
  legendData.dScale=xs.getDpiResolution() / 72d;
  legendData.insCa=ca.getInsets().scaledInstance(legendData.dScale);
  legendData.maxWrappingSize=lg.getWrappingSize() * legendData.dScale;
  legendData.dHorizontalSpacing=3 * legendData.dScale;
  legendData.dVerticalSpacing=3 * legendData.dScale;
  legendData.dSafeSpacing=3 * legendData.dScale;
  legendData.dHorizonalReservedSpace=legendData.insCa.getLeft() + legendData.insCa.getRight() + (3 * legendData.dItemHeight) / 2 + legendData.dHorizontalSpacing;
  legendData.dVerticalReservedSpace=legendData.insCa.getTop() + legendData.insCa.getBottom() + legendData.dVerticalSpacing;
  final Block bl=cm.getBlock();
  final Bounds boFull=bl.getBounds().scaledInstance(legendData.dScale);
  final Insets ins=bl.getInsets().scaledInstance(legendData.dScale);
  final Insets lgIns=lg.getInsets().scaledInstance(legendData.dScale);
  int titleWPos=0;
  int titleHPos=0;
  final TitleBlock titleBlock=cm.getTitle();
  final Bounds titleBounds=titleBlock.getBounds().scaledInstance(legendData.dScale);
  if (titleBlock.isVisible()) {
switch (titleBlock.getAnchor().getValue()) {
case Anchor.EAST:
case Anchor.WEST:
      titleWPos=1;
    break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
  titleHPos=1;
break;
}
}
legendData.dAvailableWidth=boFull.getWidth() - ins.getLeft() - ins.getRight()- lgIns.getLeft()- lgIns.getRight()- titleBounds.getWidth() * titleWPos;
legendData.dAvailableHeight=boFull.getHeight() - ins.getTop() - ins.getBottom()- lgIns.getTop()- lgIns.getBottom()- titleBounds.getHeight() * titleHPos;
double dMaxLegendWidth=boFull.getWidth() / 3;
double dMaxLegendHeight=boFull.getHeight() / 3;
switch (lgPosition.getValue()) {
case Position.LEFT:
case Position.RIGHT:
case Position.OUTSIDE:
if (legendData.dAvailableWidth > dMaxLegendWidth) {
legendData.dAvailableWidth=dMaxLegendWidth;
}
break;
case Position.ABOVE:
case Position.BELOW:
if (legendData.dAvailableHeight > dMaxLegendHeight) {
legendData.dAvailableHeight=dMaxLegendHeight;
}
break;
}
boolean bMinSliceDefined=false;
if (cm instanceof ChartWithoutAxes) {
bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
}
 else {
legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
}
}
if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
calculateExtraLegend(cm,rtc,legendData);
}
Label lgTitle=lg.getTitle();
Size titleSize=null;
BoundingBox titleBounding=null;
int iTitlePos=-1;
if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
try {
titleBounding=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
}
iTitlePos=lg.getTitlePosition().getValue();
if (rtc.isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
break;
case Position.LEFT:
case Position.RIGHT:
legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
if (orientation.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
size=computeVerticalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeVerticalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeVerticalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction.getName()},Messages.getResourceBundle(xs.getULocale()));
}
}
 else if (orientation.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
size=computeHorizalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeHorizalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeHorizalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction},Messages.getResourceBundle(xs.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{orientation},Messages.getResourceBundle(xs.getULocale()));
}
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
itm.dispose();
if (rtc != null) {
List legendItems=legendData.legendItems;
LegendItemHints[] liha=(LegendItemHints[])legendItems.toArray(new LegendItemHints[legendItems.size()]);
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
return sz;
}","/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws GenerationException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  LegendData legendData=new LegendData();
  if (!lg.isSetOrientation()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  if (!lg.isSetDirection()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  final Orientation orientation=lg.getOrientation();
  final Direction direction=lg.getDirection();
  final Position lgPosition=lg.getPosition();
  final boolean bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  Label la=LabelImpl.create();
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  ClientArea ca=lg.getClientArea();
  LineAttributes lia=ca.getOutline();
  legendData.dSeparatorThickness=lia.getThickness();
  la.getCaption().setValue(""String_Node_Str"");
  final ITextMetrics itm=xs.getTextMetrics(la);
  legendData.dItemHeight=itm.getFullHeight();
  la.getCaption().setValue(ELLIPSIS_STRING);
  itm.reuse(la);
  legendData.dEllipsisWidth=itm.getFullWidth();
  legendData.dScale=xs.getDpiResolution() / 72d;
  legendData.insCa=ca.getInsets().scaledInstance(legendData.dScale);
  legendData.maxWrappingSize=lg.getWrappingSize() * legendData.dScale;
  legendData.dHorizontalSpacing=3 * legendData.dScale;
  legendData.dVerticalSpacing=3 * legendData.dScale;
  legendData.dSafeSpacing=3 * legendData.dScale;
  legendData.dHorizonalReservedSpace=legendData.insCa.getLeft() + legendData.insCa.getRight() + (3 * legendData.dItemHeight) / 2 + legendData.dHorizontalSpacing;
  legendData.dVerticalReservedSpace=legendData.insCa.getTop() + legendData.insCa.getBottom() + legendData.dVerticalSpacing;
  final Block bl=cm.getBlock();
  final Bounds boFull=bl.getBounds().scaledInstance(legendData.dScale);
  final Insets ins=bl.getInsets().scaledInstance(legendData.dScale);
  final Insets lgIns=lg.getInsets().scaledInstance(legendData.dScale);
  int titleWPos=0;
  int titleHPos=0;
  final TitleBlock titleBlock=cm.getTitle();
  final Bounds titleBounds=titleBlock.getBounds().scaledInstance(legendData.dScale);
  if (titleBlock.isVisible()) {
switch (titleBlock.getAnchor().getValue()) {
case Anchor.EAST:
case Anchor.WEST:
      titleWPos=1;
    break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
  titleHPos=1;
break;
}
}
legendData.dAvailableWidth=boFull.getWidth() - ins.getLeft() - ins.getRight()- lgIns.getLeft()- lgIns.getRight()- titleBounds.getWidth() * titleWPos;
legendData.dAvailableHeight=boFull.getHeight() - ins.getTop() - ins.getBottom()- lgIns.getTop()- lgIns.getBottom()- titleBounds.getHeight() * titleHPos;
double dMaxLegendWidth=boFull.getWidth() / 3;
double dMaxLegendHeight=boFull.getHeight() / 3;
switch (lgPosition.getValue()) {
case Position.LEFT:
case Position.RIGHT:
case Position.OUTSIDE:
if (legendData.dAvailableWidth > dMaxLegendWidth) {
legendData.dAvailableWidth=dMaxLegendWidth;
}
break;
case Position.ABOVE:
case Position.BELOW:
if (legendData.dAvailableHeight > dMaxLegendHeight) {
legendData.dAvailableHeight=dMaxLegendHeight;
}
break;
}
boolean bMinSliceDefined=false;
if (cm instanceof ChartWithoutAxes) {
bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
}
 else {
legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
}
}
if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
calculateExtraLegend(cm,rtc,legendData);
}
Label lgTitle=lg.getTitle();
Size titleSize=null;
BoundingBox titleBounding=null;
int iTitlePos=-1;
if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
try {
titleBounding=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
}
iTitlePos=lg.getTitlePosition().getValue();
if (rtc.isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
break;
case Position.LEFT:
case Position.RIGHT:
legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
if (orientation.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
size=computeVerticalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeVerticalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeVerticalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction.getName()},Messages.getResourceBundle(xs.getULocale()));
}
}
 else if (orientation.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
size=computeHorizalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeHorizalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeHorizalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction},Messages.getResourceBundle(xs.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{orientation},Messages.getResourceBundle(xs.getULocale()));
}
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
itm.dispose();
if (rtc != null) {
List legendItems=legendData.legendItems;
LegendItemHints[] liha=(LegendItemHints[])legendItems.toArray(new LegendItemHints[legendItems.size()]);
if (liha.length > 1) {
boolean needInvert=false;
if (cm instanceof ChartWithAxes) {
needInvert=((ChartWithAxes)cm).isTransposed();
}
boolean isStack=true;
boolean hasOptionalGrouping=false;
exitStackCheck: for (int i=0; i < seda.length; i++) {
if (!hasOptionalGrouping && seda[i].getQuery() != null) {
String query=seda[i].getQuery().getDefinition();
if (query != null && query.trim().length() != 0) {
hasOptionalGrouping=true;
}
}
if (isStack) {
for (Iterator iter=seda[i].getSeries().iterator(); iter.hasNext(); ) {
Series series=(Series)iter.next();
if (!series.isStacked()) {
isStack=false;
if (hasOptionalGrouping) {
break exitStackCheck;
}
break;
}
}
}
}
if (!hasOptionalGrouping & isStack) {
needInvert=!needInvert;
}
if (needInvert) {
liha=invertLegendItems(liha);
}
}
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
return sz;
}",0.9511351487327842
76002,"/** 
 */
void produceaggregationNameMap(){
  AggregationFunctionDefinition[] functions=aggregation.getAggregationFunctions();
  aggregationResultNameMap=new HashMap();
  for (int i=0; i < functions.length; i++) {
    if (functions[i].getName() != null) {
      aggregationResultNameMap.put(functions[i].getName(),new Integer(i));
    }
  }
}","/** 
 */
private void produceaggregationNameMap(){
  AggregationFunctionDefinition[] functions=aggregation.getAggregationFunctions();
  aggregationResultNameMap=new HashMap();
  if (functions == null) {
    return;
  }
  for (int i=0; i < functions.length; i++) {
    if (functions[i].getName() != null) {
      aggregationResultNameMap.put(functions[i].getName(),new Integer(i));
    }
  }
}",0.9304229195088676
76003,"/** 
 * Returns the GetParameterDefinitionTask
 * @param reportDesignName
 * @param options
 * @return
 * @throws EngineException
 */
private IGetParameterDefinitionTask getParameterDefinitionTask(String reportDesignName,InputOptions options) throws EngineException {
  IReportRunnable runnable=ReportEngineService.getInstance().openReportDesign(reportDesignName,getModuleOptions(options));
  IGetParameterDefinitionTask paramTask=ReportEngineService.getInstance().createGetParameterDefinitionTask(runnable);
  return paramTask;
}","/** 
 * Returns the GetParameterDefinitionTask
 * @param reportDesignName
 * @param options
 * @return
 * @throws EngineException
 */
private IGetParameterDefinitionTask getParameterDefinitionTask(String reportDesignName,InputOptions options) throws EngineException {
  IReportRunnable runnable=ReportEngineService.getInstance().openReportDesign(reportDesignName,getModuleOptions(options));
  IGetParameterDefinitionTask paramTask=ReportEngineService.getInstance().createGetParameterDefinitionTask(runnable,options);
  return paramTask;
}",0.99250936329588
76004,"/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9474228135899756
76005,"/** 
 * createGetParameterDefinitionTask.
 * @param runnable
 * @return the get parameter definition task
 */
public IGetParameterDefinitionTask createGetParameterDefinitionTask(IReportRunnable runnable){
  IGetParameterDefinitionTask task=null;
  try {
    task=engine.createGetParameterDefinitionTask(runnable);
  }
 catch (  Exception e) {
  }
  return task;
}","/** 
 * createGetParameterDefinitionTask.
 * @param runnable
 * @return the get parameter definition task
 */
public IGetParameterDefinitionTask createGetParameterDefinitionTask(IReportRunnable runnable,InputOptions options){
  IGetParameterDefinitionTask task=null;
  try {
    HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
    task=engine.createGetParameterDefinitionTask(runnable);
    Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
    task.setAppContext(context);
  }
 catch (  Exception e) {
  }
  return task;
}",0.7353244078269825
76006,"public int getAggregationIndex(String name) throws IOException {
  return ((Integer)aggregationResultNameMap.get(name)).intValue();
}","public int getAggregationIndex(String name) throws IOException {
  Object index=aggregationResultNameMap.get(name);
  if (index == null) {
    return -1;
  }
  return ((Integer)index).intValue();
}",0.7272727272727273
76007,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=(IContainer)ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      String displayName=handle.getDisplayName();
      if (displayName != null && displayName.trim().length() > 0) {
        handle.setDisplayName(Messages.getString(displayName));
      }
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  container.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          OpenCheatSheetAction action=null;
          action=new OpenCheatSheetAction(cheatId);
          action.run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=(IContainer)ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      String displayName=handle.getDisplayName();
      if (displayName != null && displayName.trim().length() > 0) {
        handle.setDisplayName(Messages.getString(displayName));
      }
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  container.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.9704783258594918
76008,"public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    IDE.openEditor(page,file,true);
    BasicNewProjectResourceWizard.updatePerspective(configElement);
    if (showCheat && !cheatId.equals(""String_Node_Str"")) {
      OpenCheatSheetAction action=null;
      action=new OpenCheatSheetAction(cheatId);
      action.run();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    IDE.openEditor(page,file,true);
    BasicNewProjectResourceWizard.updatePerspective(configElement);
    if (showCheat && !cheatId.equals(""String_Node_Str"")) {
      Display.getCurrent().getActiveShell().setData(page);
      new OpenCheatSheetAction(cheatId).run();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.8620037807183365
76009,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,String sourceFileName,final String cheatSheetId,final boolean showCheatSheet,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    if (!container.exists()) {
      container.mkdirs();
    }
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      String displayName=handle.getDisplayName();
      if (displayName != null && displayName.trim().length() > 0) {
        handle.setDisplayName(Messages.getString(displayName));
      }
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          OpenCheatSheetAction action=new OpenCheatSheetAction(cheatSheetId);
          action.run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,String sourceFileName,final String cheatSheetId,final boolean showCheatSheet,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    if (!container.exists()) {
      container.mkdirs();
    }
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      String displayName=handle.getDisplayName();
      if (displayName != null && displayName.trim().length() > 0) {
        handle.setDisplayName(Messages.getString(displayName));
      }
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.975153960501168
76010,"public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    if (page == null) {
      throw new IllegalArgumentException();
    }
    page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
    if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
      OpenCheatSheetAction action=new OpenCheatSheetAction(cheatSheetId);
      action.run();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    if (page == null) {
      throw new IllegalArgumentException();
    }
    page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
    if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
      Display.getCurrent().getActiveShell().setData(page);
      new OpenCheatSheetAction(cheatSheetId).run();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.885547201336675
76011,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  __initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  ParameterAccessor.setClean(request);
  __initParameters(request);
}",0.9903632320237212
76012,"/** 
 * When session destroyed
 * @see javax.servlet.http.HttpSessionListener#sessionDestroyed(javax.servlet.http.HttpSessionEvent)
 */
public void sessionDestroyed(HttpSessionEvent event){
  String sessionId=event.getSession().getId();
  ParameterAccessor.clearSessionFiles(sessionId);
}","/** 
 * When session destroyed
 * @see javax.servlet.http.HttpSessionListener#sessionDestroyed(javax.servlet.http.HttpSessionEvent)
 */
public void sessionDestroyed(HttpSessionEvent event){
  if (ParameterAccessor.isCleanSessionFiles) {
    String sessionId=event.getSession().getId();
    ParameterAccessor.clearSessionFiles(sessionId);
  }
}",0.91283676703645
76013,"protected String getRenderingStyle(Object key){
  Object value=renderingHints.get(key);
  if (key.equals(RenderingHints.KEY_TEXT_ANTIALIASING)) {
    if (value.equals(RenderingHints.VALUE_TEXT_ANTIALIAS_OFF))     return ""String_Node_Str"";
 else     return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","protected String getRenderingStyle(Object key){
  Object value=renderingHints.get(key);
  if (key.equals(RenderingHints.KEY_TEXT_ANTIALIASING)) {
    if (value.equals(RenderingHints.VALUE_TEXT_ANTIALIAS_OFF)) {
      if (transforms.getType() != AffineTransform.TYPE_IDENTITY)       return ""String_Node_Str"";
 else       return ""String_Node_Str"";
    }
 else     return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}",0.8449931412894376
76014,"/** 
 * Delegate method to the Graphics2D drawString method.
 * @param g2d graphics context that is SVG graphic context.
 * @param x the x value to draw the string
 * @param y the y value to draw the string
 */
public void draw(Graphics2D g2d,float x,float y){
  SVGGraphics2D SVGg2d=(SVGGraphics2D)g2d;
  SVGg2d.drawString(value,x,y);
}","/** 
 * Delegate method to the Graphics2D drawString method.
 * @param g2d graphics context that is SVG graphic context.
 * @param x the x value to draw the string
 * @param y the y value to draw the string
 */
public void draw(Graphics2D g2d,float x,float y){
  SVGGraphics2D SVGg2d=(SVGGraphics2D)g2d;
  if (frc.isAntiAliased())   SVGg2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
 else   SVGg2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
  SVGg2d.drawString(value,x,y);
}",0.7358078602620087
76015,"/** 
 * starts a TOC entry, mostly used for non-leaf TOC entry, which can not be closed until its children have been written.
 * @param content report item content object
 */
protected void startTOCEntry(IContent content){
  TOCBuilder tocBuilder=context.getTOCBuilder();
  if (tocBuilder != null) {
    if (content != null) {
      TOCEntry parentTOCEntry=getParentTOCEntry();
      String hiddenFormats=content.getStyle().getVisibleFormat();
      Object tocValue=content.getTOC();
      if (tocValue != null) {
        long elementId=((ReportElementDesign)content.getGenerateBy()).getID();
        String bookmark=content.getBookmark();
        tocEntry=tocBuilder.startEntry(parentTOCEntry,tocValue,bookmark,hiddenFormats,elementId);
        String tocId=tocEntry.getNode().getNodeID();
        if (bookmark == null) {
          content.setBookmark(tocId);
        }
        return;
      }
 else       if (hiddenFormats != null) {
        tocEntry=tocBuilder.startDummyEntry(parentTOCEntry,hiddenFormats);
      }
    }
  }
}","/** 
 * starts a TOC entry, mostly used for non-leaf TOC entry, which can not be closed until its children have been written.
 * @param content report item content object
 */
protected void startTOCEntry(IContent content){
  TOCBuilder tocBuilder=context.getTOCBuilder();
  if (tocBuilder != null) {
    if (content != null) {
      TOCEntry parentTOCEntry=getParentTOCEntry();
      String hiddenFormats=content.getStyle().getVisibleFormat();
      Object tocValue=content.getTOC();
      if (tocValue != null) {
        long elementId=getElementId(content);
        String bookmark=content.getBookmark();
        tocEntry=tocBuilder.startEntry(parentTOCEntry,tocValue,bookmark,hiddenFormats,elementId);
        String tocId=tocEntry.getNode().getNodeID();
        if (bookmark == null) {
          content.setBookmark(tocId);
        }
        return;
      }
 else       if (hiddenFormats != null) {
        tocEntry=tocBuilder.startDummyEntry(parentTOCEntry,hiddenFormats);
      }
    }
  }
}",0.9659595461272816
76016,"protected void startGroupTOCEntry(IGroupContent group){
  TOCBuilder tocBuilder=context.getTOCBuilder();
  if (tocBuilder != null) {
    TOCEntry entry=getParentTOCEntry();
    String hiddenFormats=group.getStyle().getVisibleFormat();
    long elementId=((ReportElementDesign)group.getGenerateBy()).getID();
    tocEntry=tocBuilder.startGroupEntry(entry,group.getTOC(),group.getBookmark(),hiddenFormats,elementId);
    String tocId=tocEntry.getNode().getNodeID();
    if (group.getBookmark() == null) {
      group.setBookmark(tocId);
    }
  }
}","protected void startGroupTOCEntry(IGroupContent group){
  TOCBuilder tocBuilder=context.getTOCBuilder();
  if (tocBuilder != null) {
    TOCEntry entry=getParentTOCEntry();
    String hiddenFormats=group.getStyle().getVisibleFormat();
    long elementId=getElementId(group);
    tocEntry=tocBuilder.startGroupEntry(entry,group.getTOC(),group.getBookmark(),hiddenFormats,elementId);
    String tocId=tocEntry.getNode().getNodeID();
    if (group.getBookmark() == null) {
      group.setBookmark(tocId);
    }
  }
}",0.9348441926345608
76017,"/** 
 * Tests drop().
 * @throws Exception
 */
public void testDrop() throws Exception {
  createDesign();
  PropertyHandle propHandle=designHandle.getPropertyHandle(ReportDesign.LIBRARIES_PROP);
  IncludedLibrary structure1=StructureFactory.createIncludeLibrary();
  structure1.setFileName(""String_Node_Str"");
  StructureHandle sHandle1=propHandle.addItem(structure1);
  IncludedLibrary structure2=StructureFactory.createIncludeLibrary();
  structure2.setFileName(""String_Node_Str"");
  StructureHandle sHandle2=propHandle.addItem(structure2);
  IncludedLibrary structure3=StructureFactory.createIncludeLibrary();
  structure3.setFileName(""String_Node_Str"");
  StructureHandle sHandle3=propHandle.addItem(structure3);
  sHandle2.drop();
  List value=propHandle.getListValue();
  assertEquals(2,value.size());
  assertEquals(sHandle1.getStructure(),value.get(0));
  assertNull(sHandle2.getStructure());
  assertEquals(sHandle3.getStructure(),value.get(1));
  designHandle.close();
  openDesign(""String_Node_Str"");
  ImageHandle imageHandle=(ImageHandle)designHandle.findElement(""String_Node_Str"");
  ActionHandle actionHandle=imageHandle.getActionHandle();
  MemberHandle memberHandle=actionHandle.getParamBindings();
  assertEquals(2,memberHandle.getListValue().size());
  sHandle1=memberHandle.getAt(0);
  sHandle2=memberHandle.getAt(1);
  sHandle1.drop();
  value=memberHandle.getListValue();
  assertEquals(1,value.size());
  assertEquals(sHandle2.getStructure(),value.get(0));
}","/** 
 * Tests drop().
 * @throws Exception
 */
public void testDrop() throws Exception {
  createDesign();
  PropertyHandle propHandle=designHandle.getPropertyHandle(ReportDesign.LIBRARIES_PROP);
  IncludedLibrary structure1=StructureFactory.createIncludeLibrary();
  structure1.setFileName(""String_Node_Str"");
  StructureHandle sHandle1=propHandle.addItem(structure1);
  IncludedLibrary structure2=StructureFactory.createIncludeLibrary();
  structure2.setFileName(""String_Node_Str"");
  StructureHandle sHandle2=propHandle.addItem(structure2);
  IncludedLibrary structure3=StructureFactory.createIncludeLibrary();
  structure3.setFileName(""String_Node_Str"");
  StructureHandle sHandle3=propHandle.addItem(structure3);
  sHandle2.drop();
  List value=propHandle.getListValue();
  assertEquals(2,value.size());
  assertEquals(sHandle1.getStructure(),value.get(0));
  assertNull(sHandle2.getStructure());
  assertEquals(sHandle3.getStructure(),value.get(1));
  designHandle.close();
  openDesign(""String_Node_Str"");
  ImageHandle imageHandle=(ImageHandle)designHandle.findElement(""String_Node_Str"");
  ActionHandle actionHandle=imageHandle.getActionHandle();
  MemberHandle memberHandle=actionHandle.getParamBindings();
  assertEquals(2,memberHandle.getListValue().size());
  sHandle1=memberHandle.getAt(0);
  sHandle2=memberHandle.getAt(1);
  sHandle1.drop();
  value=memberHandle.getListValue();
  assertEquals(1,value.size());
  assertEquals(sHandle2.getStructure(),value.get(0));
  createDesign();
  TabularCubeHandle cube=designHandle.getElementFactory().newTabularCube(""String_Node_Str"");
  designHandle.getCubes().add(cube);
  DimensionConditionHandle condition=cube.addDimensionCondition(StructureFactory.createCubeJoinCondition());
  DimensionJoinCondition tmpJoin=StructureFactory.createDimensionJoinCondition();
  tmpJoin.setCubeKey(""String_Node_Str"");
  tmpJoin.setHierarchyKey(""String_Node_Str"");
  DimensionJoinConditionHandle joinCondition1=condition.addJoinCondition(tmpJoin);
  condition=cube.addDimensionCondition(StructureFactory.createCubeJoinCondition());
  tmpJoin=StructureFactory.createDimensionJoinCondition();
  tmpJoin.setCubeKey(""String_Node_Str"");
  tmpJoin.setHierarchyKey(""String_Node_Str"");
  DimensionJoinConditionHandle joinCondition2=condition.addJoinCondition(tmpJoin);
  joinCondition2.drop();
  condition.drop();
  condition=(DimensionConditionHandle)cube.joinConditionsIterator().next();
  joinCondition1.drop();
  condition.drop();
}",0.75
76018,"/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showTopValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  final SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  final FontDefinition fd=la.getCaption().getFont();
  final double dAngleInDegrees=fd.getRotation();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  final double shadowness=3 * _sxs.getDpiResolution() / 72d;
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  dX-=dFW / 2;
  if (dAngleInDegrees == 0) {
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dDeltaX=dFW / 2;
    dX+=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=new SVGTextLayout(itm.getLine(iLC - i - 1),g2d.getFont().getAttributes(),g2d.getFontRenderContext());
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    dX-=dFW / 2 - (dFW - dFW * dCosTheta);
    dY-=dFW * dSineTheta;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == 90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW + dH) / 2;
    dX+=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW - dH) / 2;
    double dDeltaY=dFW;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}","/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showTopValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  final SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  final FontDefinition fd=la.getCaption().getFont();
  final double dAngleInDegrees=fd.getRotation();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  final double shadowness=3 * _sxs.getDpiResolution() / 72d;
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  dX-=dFW / 2;
  if (dAngleInDegrees == 0) {
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dDeltaX=dFW / 2;
    dX+=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=new SVGTextLayout(itm.getLine(iLC - i - 1),g2d.getFont().getAttributes(),g2d.getFontRenderContext());
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    dX-=dFW / 2 - (dFW - dFW * dCosTheta);
    dY-=dFW * dSineTheta;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFH) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dFH) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dFH) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == 90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW + dH) / 2;
    dX+=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW - dH) / 2;
    double dDeltaY=dFW;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + shadowness + dFW,(dY - dYHalfOffset) + shadowness + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}",0.9996450544249882
76019,"/** 
 * @param extension
 * @param object
 * @return
 */
public static Object doExtension(IExtension extension,Object object){
  List list=ExtensionPointManager.getInstance().getExtendedElementPoints();
  if (list == null || list.size() == 0) {
    return null;
  }
  Object retValue=null;
  if (PALETTE_DESIGNER.equals(extension.getExtendsionIdentify()) || PALETTE_MASTERPAGE.equals(extension.getExtendsionIdentify())) {
    retValue=doPalette(object,extension.getExtendsionIdentify());
  }
 else   if (DESIGNER_FACTORY.equals(extension.getExtendsionIdentify())) {
    retValue=doDesignerFactory(object);
  }
  return retValue;
}","/** 
 * @param extension
 * @param object
 * @return
 */
public static Object doExtension(IExtension extension,Object object){
  Object retValue=null;
  if (PALETTE_DESIGNER.equals(extension.getExtendsionIdentify()) || PALETTE_MASTERPAGE.equals(extension.getExtendsionIdentify())) {
    retValue=doPalette(object,extension.getExtendsionIdentify());
  }
 else   if (DESIGNER_FACTORY.equals(extension.getExtendsionIdentify())) {
    retValue=doDesignerFactory(object);
  }
  return retValue;
}",0.8760035682426405
76020,"private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ParameterDefinition parameter=attrBean.findParameterDefinition(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item == null)       continue;
      Object value=item.getValue();
      try {
        value=DataUtil.convert(value,parameter.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value);
      if (displayValue == null)       continue;
      String label=item.getLabel();
      if (label == null || label.length() <= 0) {
        label=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),value,attrBean.getLocale());
      }
      if (label != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(displayValue);
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}","/** 
 * Returns the cascading parameter selection list
 * @param paramName
 * @param design
 * @param groupName
 * @param groupKeys
 * @param options
 * @param attrBean
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  ParameterDefinition parameter=attrBean.findParameterDefinition(paramName);
  List selectionList=preHandleCascadeParameterSelectionList(parameter,attrBean);
  int index=selectionList.size();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    Iterator iList=list.iterator();
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item == null)       continue;
      Object value=item.getValue();
      try {
        value=DataUtil.convert(value,parameter.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value);
      if (displayValue == null)       continue;
      String label=item.getLabel();
      if (label == null || label.length() <= 0) {
        label=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),value,attrBean.getLocale());
      }
      if (label != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(displayValue);
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}",0.8433587786259542
76021,"/** 
 * Handle output Text Box type parameter
 * @throws Exception
 */
protected void __handleTextBox() throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  boolean isNullValue=param.getValue() == null;
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (paramDef.isRequired() || !isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  String valueId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String isLocaleId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str""+ encParamName+ ""String_Node_Str"");
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (param.getPattern() != null) {
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String controlType=paramDef.concealValue() ? ""String_Node_Str"" : ""String_Node_Str"";
  if (paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
 else {
    String nullValueId=encParamId + ""String_Node_Str"";
    String radioTextValueId=encParamId + ""String_Node_Str"";
    String radioNullValueId=encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (!isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}","/** 
 * Handle output Text Box type parameter
 * @throws Exception
 */
protected void __handleTextBox() throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  boolean isNullValue=param.getValue() == null;
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (paramDef.isRequired() || !isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  String valueId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String isLocaleId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str""+ encParamName+ ""String_Node_Str"");
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (param.getPattern() != null) {
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String controlType=paramDef.concealValue() ? ""String_Node_Str"" : ""String_Node_Str"";
  if (paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
 else {
    String nullValueId=encParamId + ""String_Node_Str"";
    String radioTextValueId=encParamId + ""String_Node_Str"";
    String radioNullValueId=encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (!isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + IBirtConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(IBirtConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}",0.9988335277453758
76022,"/** 
 * Handle output Radio Button type parameter
 * @throws Exception
 */
protected void __handleRadioButton() throws Exception {
  Collection selectionList=BirtReportServiceFactory.getReportService().getParameterSelectionList(viewer.getReportDesignHandle(),this.options,param.getName());
  if (selectionList == null || selectionList.size() <= 0)   return;
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioNullValueId=encParamId + ""String_Node_Str"";
  String radioName=encParamId + ""String_Node_Str"";
  String valueId=encParamId + ""String_Node_Str"";
  boolean isChecked=false;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  int index=0;
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? ParameterAccessor.htmlEncode(label) : ""String_Node_Str"";
    String ctlId=encParamId + ""String_Node_Str"" + index;
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ctlId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (displayValue.equalsIgnoreCase(DataUtil.getDisplayValue(param.getValue()))) {
      isChecked=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (ctlId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + label + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ctlId + ""String_Node_Str"");
    writer.write(label);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    index++;
  }
  if (!paramDef.isRequired()) {
    boolean isNullValue=param.getValue() == null;
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (isChecked) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (isChecked) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
}","/** 
 * Handle output Radio Button type parameter
 * @throws Exception
 */
protected void __handleRadioButton() throws Exception {
  Collection selectionList=BirtReportServiceFactory.getReportService().getParameterSelectionList(viewer.getReportDesignHandle(),this.options,param.getName());
  if (selectionList == null || selectionList.size() <= 0)   return;
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioNullValueId=encParamId + ""String_Node_Str"";
  String radioName=encParamId + ""String_Node_Str"";
  String valueId=encParamId + ""String_Node_Str"";
  boolean isChecked=false;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  int index=0;
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? ParameterAccessor.htmlEncode(label) : ""String_Node_Str"";
    String ctlId=encParamId + ""String_Node_Str"" + index;
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ctlId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (displayValue.equalsIgnoreCase(DataUtil.getDisplayValue(param.getValue()))) {
      isChecked=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (ctlId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + label + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ctlId + ""String_Node_Str"");
    writer.write(label);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    index++;
  }
  if (!paramDef.isRequired()) {
    boolean isNullValue=param.getValue() == null;
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + IBirtConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(IBirtConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (isChecked) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (isChecked) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
}",0.9988329443147717
76023,"/** 
 * Handle Common List Box type parameter( not cascading parameter )
 * @param selectionList
 * @throws Exception
 */
protected void __handleCommonListBox(Collection selectionList) throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  boolean isSelected=false;
  boolean isNullValue=param.getValue() == null;
  String valueId=encParamId + ""String_Node_Str"";
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioSelectId=encParamId + ""String_Node_Str"";
  String radioTextId=encParamId + ""String_Node_Str"";
  String inputTextId=encParamId + ""String_Node_Str"";
  String isLocaleId=encParamId + ""String_Node_Str"";
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onChange=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  __handleGeneralDefinition();
  writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (paramDef.mustMatch() && !paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (param.getValue() != null && DataUtil.getString(param.getValue()).length() <= 0) {
      writer.write(""String_Node_Str"");
      isSelected=true;
    }
    writer.write(""String_Node_Str"");
  }
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? label : ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    if (displayValue.equals(DataUtil.getDisplayValue(param.getValue()))) {
      isSelected=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(ParameterAccessor.htmlEncode(label));
    writer.write(""String_Node_Str"");
  }
  String defaultValueText=null;
  if (!isSelected && paramDef.mustMatch()) {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (defaultValue == null) {
      isNullValue=true;
    }
 else {
      isNullValue=false;
      defaultValueText=DataUtil.getDisplayValue(defaultValue);
      if (defaultValueText != null)       this.valueString=defaultValueText;
      String defaultDisplayText=ParameterValidationUtil.getDisplayValue(null,this.pattern,defaultValue,locale);
      if (defaultDisplayText != null)       this.displayTextString=defaultDisplayText;
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
  }
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
    }
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    if (!isSelected) {
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str""+ (isNullValue || isSelected)+ ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  if (!isSelected && paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (defaultValueText != null) {
      writer.write(""String_Node_Str"" + defaultValueText + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}","/** 
 * Handle Common List Box type parameter( not cascading parameter )
 * @param selectionList
 * @throws Exception
 */
protected void __handleCommonListBox(Collection selectionList) throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  boolean isSelected=false;
  boolean isNullValue=param.getValue() == null;
  String valueId=encParamId + ""String_Node_Str"";
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioSelectId=encParamId + ""String_Node_Str"";
  String radioTextId=encParamId + ""String_Node_Str"";
  String inputTextId=encParamId + ""String_Node_Str"";
  String isLocaleId=encParamId + ""String_Node_Str"";
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + IBirtConstants.NULL_VALUE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onChange=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  __handleGeneralDefinition();
  writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (param.getValue() != null && DataUtil.getString(param.getValue()).length() <= 0) {
      writer.write(""String_Node_Str"");
      isSelected=true;
    }
    writer.write(""String_Node_Str"");
  }
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? label : ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    if (displayValue.equals(DataUtil.getDisplayValue(param.getValue()))) {
      isSelected=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(ParameterAccessor.htmlEncode(label));
    writer.write(""String_Node_Str"");
  }
  String defaultValueText=null;
  if (!isSelected) {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (defaultValue == null) {
      isNullValue=true;
    }
 else {
      isNullValue=false;
      defaultValueText=DataUtil.getDisplayValue(defaultValue);
      if (this.valueString.equalsIgnoreCase(defaultValueText) || paramDef.mustMatch()) {
        if (defaultValueText != null)         this.valueString=defaultValueText;
        String defaultDisplayText=ParameterValidationUtil.getDisplayValue(null,this.pattern,defaultValue,locale);
        if (defaultDisplayText != null)         this.displayTextString=defaultDisplayText;
        writer.write(""String_Node_Str"");
        writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
        writer.write(""String_Node_Str"");
        writer.write(ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
        isSelected=true;
      }
    }
  }
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(IBirtConstants.NULL_VALUE + ""String_Node_Str"");
    isSelected=true;
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
    }
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    if (!isSelected) {
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str""+ isSelected+ ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  if (!isSelected && paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (defaultValueText != null) {
      writer.write(""String_Node_Str"" + defaultValueText + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}",0.9830405814657784
76024,"public Object get(String arg0,Scriptable scope){
  try {
    return cursor.getObject(arg0);
  }
 catch (  OLAPException e) {
    return null;
  }
}","public Object get(String arg0,Scriptable scope){
  try {
    return it.getValue(arg0);
  }
 catch (  BirtException e) {
    return null;
  }
}",0.9134948096885812
76025,"/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 */
public static void registerJSObject(Scriptable targetScope,Object source){
  if (source instanceof IResultIterator) {
    Scriptable scope=((IResultIterator)source).getScope();
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
  }
 else   if (source instanceof CubeCursor) {
    targetScope.put(""String_Node_Str"",targetScope,new JSCubeBindingObject((CubeCursor)source));
  }
}","/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 */
public static void registerJSObject(Scriptable targetScope,Object source){
  if (source instanceof IResultIterator) {
    targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((IResultIterator)source));
  }
 else   if (source instanceof ICubeCursor) {
    Scriptable scope=((ICubeCursor)source).getScope();
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
  }
}",0.7592503604036521
76026,"public void testRegisterJSObject(){
  try {
    Context cx=Context.enter();
    Scriptable target=new ImporterTopLevel(cx);
    Scriptable source=new ImporterTopLevel(cx);
    assertFalse(target.get(""String_Node_Str"",target) instanceof DummyJSObject);
    DummyResultIterator ri=new DummyResultIterator(source);
    assertFalse(target.get(""String_Node_Str"",target) instanceof DummyJSObject);
    assertTrue(source.get(""String_Node_Str"",source) instanceof DummyJSObject);
    DataAdapterUtil.registerJSObject(target,ri);
    assertTrue(source.get(""String_Node_Str"",source) instanceof DummyJSObject);
    assertTrue(target.get(""String_Node_Str"",target) instanceof DummyJSObject);
  }
  finally {
    Context.exit();
  }
}","public void testRegisterJSObject(){
  try {
  }
  finally {
    Context.exit();
  }
}",0.2114427860696517
76027,"public JSMeasureAccessor(ICubeQueryDefinition defn,CubeCursor cursor) throws OLAPException {
  this.cursor=cursor;
}","public JSMeasureAccessor(CubeCursor cursor) throws OLAPException {
  this.cursor=cursor;
}",0.8737864077669902
76028,"public void buildStyle(IContent element,StringBuffer styleBuffer){
  IStyle style;
  if (isEmbeddable) {
    style=element.getStyle();
  }
 else {
    style=element.getInlineStyle();
  }
  AttributeBuilder.buildStyle(styleBuffer,style,parentEmitter);
  AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
}","public void buildStyle(IContent element,StringBuffer styleBuffer){
  IStyle style;
  if (isEmbeddable) {
    style=element.getStyle();
  }
 else {
    style=element.getInlineStyle();
  }
  AttributeBuilder.buildStyle(styleBuffer,style,parentEmitter);
  AttributeBuilder.checkHyperlinkTextDecoration(element.getComputedStyle(),styleBuffer);
}",0.9531013615733736
76029,"/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display,String url){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(foreign,styleBuffer);
  if (!isEmbeddable) {
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
}","/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display,String url){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(foreign,styleBuffer);
  AttributeBuilder.checkHyperlinkTextDecoration(foreign.getComputedStyle(),styleBuffer);
}",0.9090909090909092
76030,"/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(text,styleBuffer);
  if (!isEmbeddable) {
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
}","/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(text,styleBuffer);
  AttributeBuilder.checkHyperlinkTextDecoration(text.getComputedStyle(),styleBuffer);
}",0.907809747504404
76031,"public void drawTotalPage(String text,int textX,int textY,int width,int height,TextStyle textInfo){
  if (totalPageTemplate != null)   drawText(text,textX,textY,width,height,textInfo.getFontInfo(),textInfo.getLetterSpacing(),textInfo.getWordSpacing(),textInfo.getColor(),textInfo.isLinethrough(),textInfo.isOverline(),textInfo.isUnderline(),textInfo.getAlign(),true);
}","private void drawTotalPage(String text,float textX,float textY,float width,float height,TextStyle textInfo){
  drawText(text,textX,textY,width,height,textInfo.getFontInfo(),textInfo.getLetterSpacing(),textInfo.getWordSpacing(),textInfo.getColor(),textInfo.isLinethrough(),textInfo.isOverline(),textInfo.isUnderline(),textInfo.getAlign(),true);
}",0.9047619047619048
76032,"/** 
 * @param measureList
 * @param functionList
 * @param levelView
 * @return
 * @throws SemanticException
 */
public CrosstabCellHandle addSubTotal(List measureList,List functionList) throws SemanticException {
  if (focus == null || !isValidParameters(functionList,measureList))   return null;
  if (focus.isInnerMost()) {
    focus.getLogger().log(Level.WARNING,""String_Node_Str"" + focus.getModelHandle().getName() + ""String_Node_Str"");
    return null;
  }
  if (focus.getAggregationHeader() != null) {
    focus.getLogger().log(Level.INFO,""String_Node_Str"");
  }
  CommandStack stack=focus.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    if (focus.getAggregationHeader() == null)     focus.getAggregationHeaderProperty().add(CrosstabExtendedItemFactory.createCrosstabCell(focus.getModuleHandle()));
    if (crosstab != null && measureList != null) {
      addMeasureAggregations(focus,measureList,functionList,false);
    }
    validateCrosstab();
  }
 catch (  SemanticException e) {
    focus.getLogger().log(Level.WARNING,e.getMessage(),e);
    stack.rollback();
    throw e;
  }
  stack.commit();
  return focus.getAggregationHeader();
}","/** 
 * @param measureList
 * @param functionList
 * @param levelView
 * @return
 * @throws SemanticException
 */
public CrosstabCellHandle addSubTotal(List measureList,List functionList) throws SemanticException {
  if (focus == null || !isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(focus.getAxisType(),functionList,measureList);
  if (focus.isInnerMost()) {
    focus.getLogger().log(Level.WARNING,""String_Node_Str"" + focus.getModelHandle().getName() + ""String_Node_Str"");
    return null;
  }
  if (focus.getAggregationHeader() != null) {
    focus.getLogger().log(Level.INFO,""String_Node_Str"");
  }
  CommandStack stack=focus.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    if (focus.getAggregationHeader() == null)     focus.getAggregationHeaderProperty().add(CrosstabExtendedItemFactory.createCrosstabCell(focus.getModuleHandle()));
    if (crosstab != null && measureList != null) {
      addMeasureAggregations(focus,measureList,functionList,false);
    }
    validateCrosstab();
  }
 catch (  SemanticException e) {
    focus.getLogger().log(Level.WARNING,e.getMessage(),e);
    stack.rollback();
    throw e;
  }
  stack.commit();
  return focus.getAggregationHeader();
}",0.9686864579097194
76033,"/** 
 * Returns if aggregation is defined on given level on specific axis
 * @param measureView
 * @param levelView
 * @param axisType
 * @return
 */
protected boolean isAggregationDefined(MeasureViewHandle measureView,LevelViewHandle levelView,int axisType){
  if (measureView != null) {
    String checkDimensionName=null;
    String checkLevelName=null;
    if (levelView != null) {
      checkDimensionName=((DimensionViewHandle)levelView.getContainer()).getCubeDimensionName();
      checkLevelName=levelView.getCubeLevelName();
    }
    boolean isInnerMost=levelView != null ? levelView.isInnerMost() : false;
    if (isInnerMost) {
      return true;
    }
    if (axisType == ROW_AXIS_TYPE) {
      int totalRowDimensions=crosstab.getDimensionCount(COLUMN_AXIS_TYPE);
      if (totalRowDimensions > 0) {
        for (int i=0; i < totalRowDimensions; i++) {
          DimensionViewHandle dv=crosstab.getDimension(COLUMN_AXIS_TYPE,i);
          int totalLevels=dv.getLevelCount();
          for (int j=0; j < totalLevels; j++) {
            LevelViewHandle lv=dv.getLevel(j);
            if ((i == totalRowDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
              AggregationCellHandle cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,dv.getCubeDimensionName(),lv.getCubeLevelName());
              if (cell != null) {
                return true;
              }
            }
          }
        }
      }
      if (totalRowDimensions == 0 || crosstab.getGrandTotal(COLUMN_AXIS_TYPE) != null) {
        AggregationCellHandle cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,null,null);
        if (cell != null) {
          return true;
        }
      }
    }
 else     if (axisType == COLUMN_AXIS_TYPE) {
      int totalRowDimensions=crosstab.getDimensionCount(ROW_AXIS_TYPE);
      if (totalRowDimensions > 0) {
        for (int i=0; i < totalRowDimensions; i++) {
          DimensionViewHandle dv=crosstab.getDimension(ROW_AXIS_TYPE,i);
          int totalLevels=dv.getLevelCount();
          for (int j=0; j < totalLevels; j++) {
            LevelViewHandle lv=dv.getLevel(j);
            if ((i == totalRowDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
              AggregationCellHandle cell=measureView.getAggregationCell(dv.getCubeDimensionName(),lv.getCubeLevelName(),checkDimensionName,checkLevelName);
              if (cell != null) {
                return true;
              }
            }
          }
        }
      }
      if (totalRowDimensions == 0 || crosstab.getGrandTotal(ROW_AXIS_TYPE) != null) {
        AggregationCellHandle cell=measureView.getAggregationCell(null,null,checkDimensionName,checkLevelName);
        if (cell != null) {
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * Returns if aggregation is defined on given level on specific axis
 * @param measureView
 * @param levelView
 * @param axisType
 * @return
 */
protected boolean isAggregationDefined(MeasureViewHandle measureView,LevelViewHandle levelView,int axisType){
  if (measureView != null) {
    String checkDimensionName=null;
    String checkLevelName=null;
    if (levelView != null) {
      checkDimensionName=((DimensionViewHandle)levelView.getContainer()).getCubeDimensionName();
      checkLevelName=levelView.getCubeLevelName();
    }
    boolean isInnerMost=levelView != null ? levelView.isInnerMost() : false;
    if (isInnerMost) {
      return true;
    }
    if (axisType == ROW_AXIS_TYPE) {
      int totalColDimensions=crosstab.getDimensionCount(COLUMN_AXIS_TYPE);
      if (totalColDimensions > 0) {
        for (int i=0; i < totalColDimensions; i++) {
          DimensionViewHandle dv=crosstab.getDimension(COLUMN_AXIS_TYPE,i);
          int totalLevels=dv.getLevelCount();
          for (int j=0; j < totalLevels; j++) {
            LevelViewHandle lv=dv.getLevel(j);
            if ((i == totalColDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
              AggregationCellHandle cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,dv.getCubeDimensionName(),lv.getCubeLevelName());
              if (cell != null) {
                return true;
              }
            }
          }
        }
      }
      if (totalColDimensions == 0 || crosstab.getGrandTotal(COLUMN_AXIS_TYPE) != null) {
        AggregationCellHandle cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,null,null);
        if (cell != null) {
          return true;
        }
      }
    }
 else     if (axisType == COLUMN_AXIS_TYPE) {
      int totalRowDimensions=crosstab.getDimensionCount(ROW_AXIS_TYPE);
      if (totalRowDimensions > 0) {
        for (int i=0; i < totalRowDimensions; i++) {
          DimensionViewHandle dv=crosstab.getDimension(ROW_AXIS_TYPE,i);
          int totalLevels=dv.getLevelCount();
          for (int j=0; j < totalLevels; j++) {
            LevelViewHandle lv=dv.getLevel(j);
            if ((i == totalRowDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
              AggregationCellHandle cell=measureView.getAggregationCell(dv.getCubeDimensionName(),lv.getCubeLevelName(),checkDimensionName,checkLevelName);
              if (cell != null) {
                return true;
              }
            }
          }
        }
      }
      if (totalRowDimensions == 0 || crosstab.getGrandTotal(ROW_AXIS_TYPE) != null) {
        AggregationCellHandle cell=measureView.getAggregationCell(null,null,checkDimensionName,checkLevelName);
        if (cell != null) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9947405329593269
76034,"/** 
 * @param dimensionView
 * @throws SemanticException
 */
public void removeDimension(DimensionViewHandle dimensionView) throws SemanticException {
  if (dimensionView == null || dimensionView.getContainer() != crosstabView)   return;
  CommandStack stack=crosstabView.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  int count=dimensionView.getLevelCount();
  try {
    if (crosstab != null) {
      for (int i=0; i < count; i++) {
        dimensionView.removeLevel(0);
      }
    }
    dimensionView.getModelHandle().drop();
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * @param dimensionView
 * @throws SemanticException
 */
public void removeDimension(DimensionViewHandle dimensionView) throws SemanticException {
  if (dimensionView == null || dimensionView.getContainer() != crosstabView)   return;
  CommandStack stack=crosstabView.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  int count=dimensionView.getLevelCount();
  try {
    if (crosstab != null) {
      for (int i=0; i < count; i++) {
        dimensionView.removeLevel(0);
      }
    }
    dimensionView.getModelHandle().drop();
    if (crosstabView.getDimensionCount() == 0) {
      crosstabView.removeGrandTotal();
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.9333333333333332
76035,"/** 
 * Removes grand total from crosstab if it is not empty, otherwise do nothing.
 */
public void removeGrandTotal() throws SemanticException {
  PropertyHandle propHandle=crosstabView.getGrandTotalProperty();
  if (propHandle.getContentCount() > 0) {
    CommandStack stack=crosstabView.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
    try {
      if (crosstab != null && CrosstabModelUtil.getAllLevelCount(crosstab,crosstabView.getAxisType()) > 0) {
        removeMeasureAggregations(crosstabView.getAxisType());
      }
      propHandle.drop(0);
    }
 catch (    SemanticException e) {
      crosstabView.getLogger().log(Level.INFO,e.getMessage(),e);
      stack.rollback();
      throw e;
    }
    stack.commit();
  }
}","/** 
 * Removes grand total from crosstab if it is not empty, otherwise do nothing.
 */
public void removeGrandTotal() throws SemanticException {
  PropertyHandle propHandle=crosstabView.getGrandTotalProperty();
  if (propHandle.getContentCount() > 0) {
    CommandStack stack=crosstabView.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
    try {
      if (crosstab != null) {
        removeMeasureAggregations(crosstabView.getAxisType());
      }
      propHandle.drop(0);
    }
 catch (    SemanticException e) {
      crosstabView.getLogger().log(Level.INFO,e.getMessage(),e);
      stack.rollback();
      throw e;
    }
    stack.commit();
  }
}",0.9453287197231834
76036,"/** 
 * Convert parameter to Object with pattern
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validateWithPattern(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  if (isLocale) {
    validateWithLocale(dataType,format,value,locale);
  }
 else {
    if (format == null)     format=getDefaultDateFormat(dataType);
    obj=ParameterValidationUtil.validate(dataType,format,value);
  }
  return obj;
}","/** 
 * Convert parameter to Object with pattern
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validateWithPattern(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  if (isLocale) {
    obj=validateWithLocale(dataType,format,value,locale);
  }
 else {
    if (format == null)     format=getDefaultDateFormat(dataType);
    obj=ParameterValidationUtil.validate(dataType,format,value);
  }
  return obj;
}",0.997037037037037
76037,"/** 
 * Convert parameter to Object
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validate(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  if (isLocale) {
    validateWithLocale(dataType,format,value,locale);
  }
 else {
    obj=ParameterValidationUtil.validate(dataType,getDefaultDateFormat(dataType),value);
  }
  return obj;
}","/** 
 * Convert parameter to Object
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validate(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  if (isLocale) {
    obj=validateWithLocale(dataType,format,value,locale);
  }
 else {
    obj=ParameterValidationUtil.validate(dataType,getDefaultDateFormat(dataType),value);
  }
  return obj;
}",0.9967105263157896
76038,"/** 
 * Test FilterByRow#testAccept case 2
 * @throws Exception
 */
public void testAccept2() throws Exception {
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ScriptExpression(""String_Node_Str""))};
  IResultIterator resultIterator=getResultIterator(filterDefn,null,null);
  while (resultIterator.next()) {
    Integer value0=resultIterator.getInteger(getBindingExpressionName()[0]);
    Integer value1=resultIterator.getInteger(getBindingExpressionName()[1]);
    Integer value2=resultIterator.getInteger(getBindingExpressionName()[2]);
    assertTrue(value0.intValue() + value1.intValue() > value2.intValue());
  }
  resultIterator.close();
}","/** 
 * Test FilterByRow#testAccept case 2
 * @throws Exception
 */
public void testAccept2() throws Exception {
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ScriptExpression(""String_Node_Str""))};
  IResultIterator resultIterator=getResultIterator(filterDefn,null,null,false);
  while (resultIterator.next()) {
    Integer value0=resultIterator.getInteger(getBindingExpressionName()[0]);
    Integer value1=resultIterator.getInteger(getBindingExpressionName()[1]);
    Integer value2=resultIterator.getInteger(getBindingExpressionName()[2]);
    assertTrue(value0.intValue() + value1.intValue() > value2.intValue());
  }
  resultIterator.close();
}",0.9955882352941176
76039,"/** 
 * Test FilterByRow#testAccept case 3
 * @throws Exception
 */
public void testAccept3() throws Exception {
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ScriptExpression(""String_Node_Str""))};
  IResultIterator resultIterator=getResultIterator(filterDefn,null,null);
  while (resultIterator.next()) {
    Integer value0=resultIterator.getInteger(getBindingExpressionName()[0]);
    Integer value1=resultIterator.getInteger(getBindingExpressionName()[1]);
    Integer value2=resultIterator.getInteger(getBindingExpressionName()[2]);
    assertTrue(value0.intValue() * value1.intValue() > value2.intValue());
  }
  resultIterator.close();
}","/** 
 * Test FilterByRow#testAccept case 3
 * @throws Exception
 */
public void testAccept3() throws Exception {
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ScriptExpression(""String_Node_Str""))};
  IResultIterator resultIterator=getResultIterator(filterDefn,null,null,false);
  while (resultIterator.next()) {
    Integer value0=resultIterator.getInteger(getBindingExpressionName()[0]);
    Integer value1=resultIterator.getInteger(getBindingExpressionName()[1]);
    Integer value2=resultIterator.getInteger(getBindingExpressionName()[2]);
    assertTrue(value0.intValue() * value1.intValue() > value2.intValue());
  }
  resultIterator.close();
}",0.9955882352941176
76040,"/** 
 * Test FilterByRow#testAccept case 4
 * @throws Exception
 */
public void testAccept4() throws Exception {
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_GT,""String_Node_Str""))};
  IResultIterator resultIterator=getResultIterator(filterDefn,null,null);
  while (resultIterator.next()) {
    Integer value0=resultIterator.getInteger(getBindingExpressionName()[0]);
    Integer value1=resultIterator.getInteger(getBindingExpressionName()[1]);
    Integer value2=resultIterator.getInteger(getBindingExpressionName()[2]);
    assertTrue(value0.intValue() * value1.intValue() > value2.intValue());
  }
  resultIterator.close();
}","/** 
 * Test FilterByRow#testAccept case 4
 * @throws Exception
 */
public void testAccept4() throws Exception {
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_GT,""String_Node_Str""))};
  IResultIterator resultIterator=getResultIterator(filterDefn,null,null,false);
  while (resultIterator.next()) {
    Integer value0=resultIterator.getInteger(getBindingExpressionName()[0]);
    Integer value1=resultIterator.getInteger(getBindingExpressionName()[1]);
    Integer value2=resultIterator.getInteger(getBindingExpressionName()[2]);
    assertTrue(value0.intValue() * value1.intValue() > value2.intValue());
  }
  resultIterator.close();
}",0.9958960328317372
76041,"/** 
 * Execute Query
 * @return IResultIterator
 * @throws Exception
 */
private IResultIterator getResultIterator(FilterDefinition[] filterDefn,String[] bindingNameFilter,IBaseExpression[] bindingExprFilter) throws Exception {
  QueryDefinition queryDefn=(QueryDefinition)getDefaultQueryDefn(this.dataSet.getName());
  if (filterDefn != null) {
    if (bindingNameFilter != null)     for (int i=0; i < bindingNameFilter.length; i++)     queryDefn.addResultSetExpression(bindingNameFilter[i],bindingExprFilter[i]);
    for (int i=0; i < filterDefn.length; i++)     queryDefn.addFilter(filterDefn[i]);
  }
  return executeQuery(queryDefn);
}","/** 
 * Execute Query
 * @return IResultIterator
 * @throws Exception
 */
private IResultIterator getResultIterator(FilterDefinition[] filterDefn,String[] bindingNameFilter,IBaseExpression[] bindingExprFilter,boolean needCache) throws Exception {
  QueryDefinition queryDefn=(QueryDefinition)getDefaultQueryDefn(this.dataSet.getName());
  queryDefn.setNeedCache(needCache);
  if (filterDefn != null) {
    if (bindingNameFilter != null)     for (int i=0; i < bindingNameFilter.length; i++)     queryDefn.addResultSetExpression(bindingNameFilter[i],bindingExprFilter[i]);
    for (int i=0; i < filterDefn.length; i++)     queryDefn.addFilter(filterDefn[i]);
  }
  return executeQuery(queryDefn);
}",0.9588631264023936
76042,"/** 
 * Test FilterByRow#testAccept case 1
 * @throws Exception
 */
public void testAccept1() throws Exception {
  String[] bindingNameFilter=new String[3];
  bindingNameFilter[0]=""String_Node_Str"";
  bindingNameFilter[1]=""String_Node_Str"";
  bindingNameFilter[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[3];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[2]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ScriptExpression(""String_Node_Str"")),new FilterDefinition(new ScriptExpression(""String_Node_Str"")),new FilterDefinition(new ScriptExpression(""String_Node_Str""))};
  IResultIterator resultIterator=getResultIterator(filterDefn,bindingNameFilter,bindingExprFilter);
  while (resultIterator.next()) {
    Integer value0=resultIterator.getInteger(getBindingExpressionName()[0]);
    Integer value1=resultIterator.getInteger(getBindingExpressionName()[1]);
    Integer value2=resultIterator.getInteger(getBindingExpressionName()[2]);
    assertTrue(value0.intValue() > 0);
    assertTrue(value1.intValue() > 1);
    assertTrue(value2.intValue() > 0);
  }
  resultIterator.close();
}","/** 
 * Test FilterByRow#testAccept case 1
 * @throws Exception
 */
public void testAccept1() throws Exception {
  String[] bindingNameFilter=new String[3];
  bindingNameFilter[0]=""String_Node_Str"";
  bindingNameFilter[1]=""String_Node_Str"";
  bindingNameFilter[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[3];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[2]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ScriptExpression(""String_Node_Str"")),new FilterDefinition(new ScriptExpression(""String_Node_Str"")),new FilterDefinition(new ScriptExpression(""String_Node_Str""))};
  IResultIterator resultIterator=getResultIterator(filterDefn,bindingNameFilter,bindingExprFilter,false);
  while (resultIterator.next()) {
    Integer value0=resultIterator.getInteger(getBindingExpressionName()[0]);
    Integer value1=resultIterator.getInteger(getBindingExpressionName()[1]);
    Integer value2=resultIterator.getInteger(getBindingExpressionName()[2]);
    assertTrue(value0.intValue() > 0);
    assertTrue(value1.intValue() > 1);
    assertTrue(value2.intValue() > 0);
  }
  resultIterator.close();
}",0.9976851851851852
76043,"/** 
 * Handle output Text Box type parameter
 * @throws Exception
 */
protected void __handleTextBox() throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  boolean isNullValue=param.getValue() == null;
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (paramDef.isRequired() || !isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  String valueId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String isLocaleId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str""+ encParamName+ ""String_Node_Str"");
  if (param.getPattern() != null) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
 else {
    String nullValueId=encParamId + ""String_Node_Str"";
    String radioTextValueId=encParamId + ""String_Node_Str"";
    String radioNullValueId=encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (!isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}","/** 
 * Handle output Text Box type parameter
 * @throws Exception
 */
protected void __handleTextBox() throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  boolean isNullValue=param.getValue() == null;
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (paramDef.isRequired() || !isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  String valueId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String isLocaleId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str""+ encParamName+ ""String_Node_Str"");
  if (param.getPattern() != null) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String controlType=paramDef.concealValue() ? ""String_Node_Str"" : ""String_Node_Str"";
  if (paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
 else {
    String nullValueId=encParamId + ""String_Node_Str"";
    String radioTextValueId=encParamId + ""String_Node_Str"";
    String radioNullValueId=encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (!isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}",0.9864532019704434
76044,"private void createHyperlink(IArea area,int x,int y){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    String systemId=reportRunnable == null ? null : reportRunnable.getReportName();
    if (null != hlAction)     try {
      int width=getWidth(area);
      int height=getHeight(area);
      String hyperlink=hlAction.getHyperlink();
      String bookmark=hlAction.getBookmark();
      String targetWindow=hlAction.getTargetWindow();
      int type=hlAction.getType();
switch (type) {
case IHyperlinkAction.ACTION_BOOKMARK:
        currentPage.createHyperlink(hyperlink,bookmark,targetWindow,type,x,y,width,height);
      break;
case IHyperlinkAction.ACTION_HYPERLINK:
    currentPage.createHyperlink(hyperlink,null,targetWindow,type,x,y,width,height);
  break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
Action act=new Action(systemId,hlAction);
IHTMLActionHandler actionHandler=null;
Object ac=services.getOption(RenderOption.ACTION_HANDLER);
if (ac != null && ac instanceof IHTMLActionHandler) {
actionHandler=(IHTMLActionHandler)ac;
}
String link=actionHandler.getURL(act,context);
currentPage.createHyperlink(link,null,targetWindow,type,x,y,width,height);
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}","private void createHyperlink(IArea area,int x,int y){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    String systemId=reportRunnable == null ? null : reportRunnable.getReportName();
    if (null != hlAction)     try {
      int width=getWidth(area);
      int height=getHeight(area);
      String bookmark=hlAction.getBookmark();
      String targetWindow=hlAction.getTargetWindow();
      int type=hlAction.getType();
      Action act=new Action(systemId,hlAction);
      String link=null;
      IHTMLActionHandler actionHandler=null;
      Object ac=services.getOption(RenderOption.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
      }
      if (actionHandler != null) {
        link=actionHandler.getURL(act,context);
      }
 else {
        link=hlAction.getHyperlink();
      }
switch (type) {
case IHyperlinkAction.ACTION_BOOKMARK:
        currentPage.createHyperlink(link,bookmark,targetWindow,type,x,y,width,height);
      break;
case IHyperlinkAction.ACTION_HYPERLINK:
    currentPage.createHyperlink(link,null,targetWindow,type,x,y,width,height);
  break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
currentPage.createHyperlink(link,null,targetWindow,type,x,y,width,height);
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}",0.6428571428571429
76045,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
    }
  }
  if (null == layoutPreference) {
    if (report != null) {
      Report reportDesign=report.getDesign();
      ReportDesignHandle designHandle=reportDesign.getReportDesign();
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    writer.openTag(HTMLTags.TAG_DIV);
    if (report != null) {
      String reportStyleName=report.getDesign().getRootStyleName();
      if (reportStyleName != null) {
        IStyle style=report.findStyle(reportStyleName);
        StringBuffer styleBuffer=new StringBuffer();
        AttributeBuilder.buildStyle(styleBuffer,style,this);
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      }
    }
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    ReportDesignHandle designHandle=reportDesign.getReportDesign();
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      AttributeBuilder.buildStyle(styleBuffer,style,this);
      writer.style('.' + styleName,styleBuffer.toString());
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      writer.attribute(HTMLTags.ATTR_CLASS,reportStyleName);
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
    }
  }
  if (null == layoutPreference) {
    if (report != null) {
      Report reportDesign=report.getDesign();
      ReportDesignHandle designHandle=reportDesign.getReportDesign();
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    writer.openTag(HTMLTags.TAG_DIV);
    if (report != null) {
      String reportStyleName=report.getDesign().getRootStyleName();
      if (reportStyleName != null) {
        IStyle style=report.findStyle(reportStyleName);
        StringBuffer styleBuffer=new StringBuffer();
        AttributeBuilder.buildStyle(styleBuffer,style,this);
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      }
    }
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    ReportDesignHandle designHandle=reportDesign.getReportDesign();
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      AttributeBuilder.buildStyle(styleBuffer,style,this);
      String value=style.getVerticalAlign();
      if (null != value) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(value);
        styleBuffer.append(""String_Node_Str"");
      }
      value=style.getTextAlign();
      if (null != value) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(value);
        styleBuffer.append(""String_Node_Str"");
      }
      writer.style('.' + styleName,styleBuffer.toString());
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      writer.attribute(HTMLTags.ATTR_CLASS,reportStyleName);
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
  }
}",0.9440088045123124
76046,"/** 
 * Computes value precision if more precise than existing one For instance 3.4 has a precision of 0.1 and 1400 has a precision of 100. That is the position where the first significant digit appears, or in double representation, the value of the exponent
 * @param precision
 * @param value
 * @return
 */
protected static double getPrecision(double precision,double value){
  if (value == 0) {
    if (precision < 0)     return precision;
 else     if (precision >= 0)     return 1;
  }
  if (precision == 0) {
    precision=Math.pow(10,Math.floor(Math.log(value) / Math.log(10)));
  }
  double check=value / precision;
  int loopCounter=0;
  while (Math.floor(check) != check && loopCounter < 20) {
    loopCounter++;
    precision/=10;
    check=value / precision;
  }
  if (loopCounter == 20)   logger.log(ILogger.WARNING,""String_Node_Str"" + value);
  return precision;
}","/** 
 * Computes value precision if more precise than existing one For instance 3.4 has a precision of 0.1 and 1400 has a precision of 100. That is the position where the first significant digit appears, or in double representation, the value of the exponent
 * @param precision
 * @param value
 * @return
 */
protected static double getPrecision(double precision,double pValue){
  double value=Math.abs(pValue);
  if (value == 0) {
    if (precision < 0)     return precision;
 else     if (precision >= 0)     return 1;
  }
  if (precision == 0) {
    precision=Math.pow(10,Math.floor(Math.log(value) / Math.log(10)));
  }
  double check=value / precision;
  int loopCounter=0;
  while (Math.floor(check) != check && loopCounter < 20) {
    loopCounter++;
    precision/=10;
    check=value / precision;
  }
  if (loopCounter == 20)   logger.log(ILogger.WARNING,""String_Node_Str"" + value);
  return precision;
}",0.9787946428571428
76047,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  final DataElement oMinimum=scModel.getMin();
  final DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue);
    }
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dDelta=1;
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    dStep=Math.floor(Math.log(dDelta) / LOG_10);
    dStep=Math.pow(10,dStep);
    if (dStep < dPrecision) {
      dStep=dPrecision;
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  final DataElement oMinimum=scModel.getMin();
  final DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue);
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}",0.9818139963167588
76048,"/** 
 * Computes tick count
 * @return tick count
 */
public final int getTickCount() throws ChartException {
  if (this.oStepNumber != null) {
    if (bCategoryScale || (iType & NUMERICAL) != NUMERICAL) {
      logger.log(new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    }
 else {
      return this.oStepNumber.intValue() + 1;
    }
  }
  int nTicks=2;
  if ((iType & TEXT) == TEXT || bCategoryScale) {
    if (dsiData != null) {
      nTicks=dsiData.size() + 1;
      if (!bTickBetweenCategories) {
        nTicks++;
      }
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      nTicks=(int)Math.ceil((dMax - dMin) / dStep - 0.5) + 1;
      if (nTicks < 2) {
        nTicks=2;
      }
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      double dMaxLog=(Math.log(dMax) / LOG_10);
      double dMinLog=(Math.log(dMin) / LOG_10);
      double dStepLog=(Math.log(dStep) / LOG_10);
      nTicks=(int)Math.ceil((dMaxLog - dMinLog) / dStepLog) + 1;
      if (nTicks < 2) {
        nTicks=2;
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    nTicks=(int)(Math.ceil(CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit))) / asInteger(oStep)) + 1;
    if (nTicks < 2) {
      nTicks=2;
    }
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  return nTicks;
}","/** 
 * Computes tick count
 * @return tick count
 */
public final int getTickCount() throws ChartException {
  if (this.oStepNumber != null) {
    if (bCategoryScale || (iType & NUMERICAL) != NUMERICAL) {
      logger.log(new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    }
 else {
      return this.oStepNumber.intValue() + 1;
    }
  }
  int nTicks=2;
  if ((iType & TEXT) == TEXT || bCategoryScale) {
    if (dsiData != null) {
      nTicks=dsiData.size() + 1;
      if (!bTickBetweenCategories) {
        nTicks++;
      }
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      if (dMax != dMin)       nTicks=(int)Math.ceil((dMax - dMin) / dStep - 0.5) + 1;
 else       nTicks=5;
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      double dMaxLog=(Math.log(dMax) / LOG_10);
      double dMinLog=(Math.log(dMin) / LOG_10);
      double dStepLog=(Math.log(dStep) / LOG_10);
      nTicks=(int)Math.ceil((dMaxLog - dMinLog) / dStepLog) + 1;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    nTicks=(int)(Math.ceil(CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit))) / asInteger(oStep)) + 1;
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  if (nTicks > 10000) {
    nTicks=10000;
  }
  if (nTicks < 2) {
    nTicks=2;
  }
  return nTicks;
}",0.9281997918834548
76049,"public void computeMinMax(){
  final double dMinReal, dMaxReal;
  final double dMinValue, dMaxValue;
  double dMargin=0;
  if (bMargin) {
    dMargin=Math.abs(asDouble(oMaxAuto).doubleValue() - asDouble(oMinAuto).doubleValue()) * iMarginPercent / 100;
  }
  dMinReal=asDouble(oMinAuto).doubleValue() - dMargin;
  dMaxReal=asDouble(oMaxAuto).doubleValue() + dMargin;
  dMinValue=bMinimumFixed ? asDouble(oMinFixed).doubleValue() : dMinReal;
  dMaxValue=bMaximumFixed ? asDouble(oMaxFixed).doubleValue() : dMaxReal;
  double dMinAxis=dMinValue;
  double dMaxAxis=dMaxValue;
  double dStep=0;
  if (bStepFixed && oStepNumber != null) {
    oStep=new Double(Math.abs(dMaxValue - dMinValue) / (oStepNumber.intValue()));
    dStep=asDouble(oStep).doubleValue();
  }
 else {
    dStep=asDouble(oStep).doubleValue();
    if (bMargin) {
      dMinAxis=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMaxAxis=(((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) + 1) * dStep;
      if (dMaxAxis - dMaxValue >= dStep) {
        dMaxAxis-=dStep;
      }
    }
 else {
      final double dAbsMax=Math.abs(dMaxValue);
      final double dAbsMin=Math.abs(dMinValue);
      dMinAxis=((dStep > 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep)) * dStep;
      dMaxAxis=((dStep > 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep)) * dStep;
      if (dMinAxis == dAbsMin) {
        dMinAxis+=dStep;
        if (dMinValue < 0) {
          dMinAxis=-dMinAxis;
        }
 else         if (dMinValue == 0) {
          dMinAxis=0;
        }
      }
 else {
        if (dMinValue < 0) {
          dMinAxis=-(dMinAxis + dStep);
        }
 else         if (dMinAxis >= dMinValue && dMinAxis != 0) {
          dMinAxis-=dStep;
        }
      }
      if (dMaxAxis == dAbsMax) {
        dMaxAxis+=dStep;
        if (dMaxValue == 0) {
          dMaxAxis=0;
        }
      }
 else       if (dMinAxis != dMaxValue) {
        if (dMaxValue < 0) {
          dMaxAxis=-(dMaxAxis - dStep);
        }
 else         if (dMaxValue > 0) {
          if (dMaxAxis < dMaxValue) {
            dMaxAxis+=dStep;
          }
        }
      }
      if (dMinValue < 0 && dMaxValue < 0) {
        if (dMaxAxis <= dMaxValue - dStep) {
          dMaxAxis+=2 * dStep;
        }
      }
      if (dMinValue > 0 && dMaxValue > 0) {
        if (dMinAxis >= dMinValue + dStep) {
          dMinAxis-=2 * dStep;
        }
      }
    }
  }
  if (dMinValue == 0 && dMaxValue == 0) {
    if (dMinAxis >= 0) {
      dMinAxis=-1;
    }
    if (dMaxAxis <= 0) {
      dMaxAxis=1;
    }
  }
  if ((iType & PERCENT) == PERCENT) {
    if (dMaxAxis > 0) {
      dMaxAxis=100;
    }
    if (dMinAxis < 0) {
      dMinAxis=-100;
    }
  }
  if (!bMaximumFixed) {
    oMax=new Double(dMaxAxis);
  }
  if (!bMinimumFixed) {
    oMin=new Double(dMinAxis);
  }
  if (bMargin) {
    if (bMinimumFixed && dMinValue > dMinReal) {
      oMinAuto=new Double(dMinReal);
    }
 else {
      oMinAuto=null;
    }
    if (bMaximumFixed && dMaxValue < dMaxReal) {
      oMaxAuto=new Double(dMaxReal);
    }
 else {
      oMaxAuto=null;
    }
  }
 else {
    oMinAuto=null;
    oMaxAuto=null;
  }
}","public void computeMinMax(){
  final double dMinReal, dMaxReal;
  final double dMinValue, dMaxValue;
  double dMargin=0;
  if (bMargin) {
    dMargin=Math.abs(asDouble(oMaxAuto).doubleValue() - asDouble(oMinAuto).doubleValue()) * iMarginPercent / 100;
  }
  dMinReal=asDouble(oMinAuto).doubleValue() - dMargin;
  dMaxReal=asDouble(oMaxAuto).doubleValue() + dMargin;
  dMinValue=bMinimumFixed ? asDouble(oMinFixed).doubleValue() : dMinReal;
  dMaxValue=bMaximumFixed ? asDouble(oMaxFixed).doubleValue() : dMaxReal;
  double dMinAxis=dMinValue;
  double dMaxAxis=dMaxValue;
  double dStep=0;
  if (bStepFixed && oStepNumber != null) {
    oStep=new Double(Math.abs(dMaxValue - dMinValue) / (oStepNumber.intValue()));
    dStep=asDouble(oStep).doubleValue();
  }
 else {
    dStep=asDouble(oStep).doubleValue();
    if (bMargin) {
      dMinAxis=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMaxAxis=(((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) + 1) * dStep;
      if (dMaxAxis - dMaxValue >= dStep) {
        dMaxAxis-=dStep;
      }
    }
 else {
      final double dAbsMax=Math.abs(dMaxValue);
      final double dAbsMin=Math.abs(dMinValue);
      dMinAxis=((dStep > 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep)) * dStep;
      dMaxAxis=((dStep > 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep)) * dStep;
      if (dMinAxis == dAbsMin) {
        dMinAxis+=dStep;
        if (dMinValue < 0) {
          dMinAxis=-dMinAxis;
        }
 else         if (dMinValue == 0) {
          dMinAxis=0;
        }
      }
 else {
        if (dMinValue < 0) {
          dMinAxis=-(dMinAxis + dStep);
        }
 else         if (dMinAxis >= dMinValue && dMinAxis != 0) {
          dMinAxis-=dStep;
        }
      }
      if (dMaxAxis == dAbsMax) {
        dMaxAxis+=dStep;
        if (dMaxValue < 0) {
          dMaxAxis=-dMaxAxis;
        }
 else         if (dMaxValue == 0) {
          dMaxAxis=0;
        }
      }
 else       if (dMinAxis != dMaxValue) {
        if (dMaxValue < 0) {
          dMaxAxis=-(dMaxAxis - dStep);
        }
 else         if (dMaxValue > 0) {
          if (dMaxAxis < dMaxValue) {
            dMaxAxis+=dStep;
          }
        }
      }
      if (dMinValue < 0 && dMaxValue < 0) {
        if (dMaxAxis <= dMaxValue - dStep) {
          dMaxAxis+=2 * dStep;
        }
      }
      if (dMinValue > 0 && dMaxValue > 0) {
        if (dMinAxis >= dMinValue + dStep) {
          dMinAxis-=2 * dStep;
        }
      }
    }
  }
  if (dMinValue == 0 && dMaxValue == 0) {
    if (dMinAxis >= 0) {
      dMinAxis=-1;
    }
    if (dMaxAxis <= 0) {
      dMaxAxis=1;
    }
  }
  if ((iType & PERCENT) == PERCENT) {
    if (dMaxAxis > 0) {
      dMaxAxis=100;
    }
    if (dMinAxis < 0) {
      dMinAxis=-100;
    }
  }
  if (!bMaximumFixed) {
    oMax=new Double(dMaxAxis);
  }
  if (!bMinimumFixed) {
    oMin=new Double(dMinAxis);
  }
  if (bMargin) {
    if (bMinimumFixed && dMinValue > dMinReal) {
      oMinAuto=new Double(dMinReal);
    }
 else {
      oMinAuto=null;
    }
    if (bMaximumFixed && dMaxValue < dMaxReal) {
      oMaxAuto=new Double(dMaxReal);
    }
 else {
      oMaxAuto=null;
    }
  }
 else {
    oMinAuto=null;
    oMaxAuto=null;
  }
}",0.9884562105587196
76050,"/** 
 * Returns the user value of current DataPointHintes.
 * @param key
 * @return
 */
public final Object getUserValue(String key){
  if (userValueMap == null) {
    return null;
  }
  return userValueMap.get(key);
}","/** 
 * Returns the user value of current DataPointHintes.
 * @param key
 * @return
 */
public final Object getUserValue(String key){
  if (userValueMap == null) {
    return null;
  }
  Object value=userValueMap.get(key);
  if (value instanceof CDateTime) {
    return ((CDateTime)value).getTime();
  }
  return value;
}",0.7829313543599258
76051,"/** 
 * Returns the data type associated with a single column resultset subset. Note the result is only valid for single column subset.
 * @return A data type associated with a single column resultset
 */
int getDataType();","/** 
 * Returns the data type of a given column associated with a multi-column resultset subset.
 * @return A data type associated with a multi-column resultset
 */
int getDataType(int columnIndex);",0.7363420427553444
76052,"/** 
 * Populates the trigger datasets from given data source. Only Text data is supported now.
 * @param oResultSetDef
 * @throws ChartException
 */
public DataSet[] populate(Object oResultSetDef) throws ChartException {
  DataSet[] ds=new DataSet[0];
  if (oResultSetDef instanceof IResultSetDataSet) {
    final IResultSetDataSet rsds=(IResultSetDataSet)oResultSetDef;
    final long lRowCount=rsds.getSize();
    if (lRowCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.ZERO_DATASET,""String_Node_Str"",Messages.getResourceBundle());
    }
    final int columnCount=rsds.getColumnCount();
    ds=new DataSet[columnCount];
    final String[][] saDataSet=new String[columnCount][(int)lRowCount];
    int i=0;
    while (rsds.hasNext()) {
      Object[] nextRow=rsds.next();
      for (int k=0; k < columnCount; k++) {
        saDataSet[k][i]=ChartUtil.stringValue(nextRow[k]);
      }
      i++;
    }
    for (int k=0; k < columnCount; k++) {
      ds[k]=TextDataSetImpl.create(saDataSet[k]);
    }
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle());
  }
  return ds;
}","/** 
 * Populates the trigger datasets from given data source. Only Text data is supported now.
 * @param oResultSetDef
 * @throws ChartException
 */
public DataSet[] populate(Object oResultSetDef) throws ChartException {
  DataSet[] ds=new DataSet[0];
  if (oResultSetDef instanceof IResultSetDataSet) {
    final IResultSetDataSet rsds=(IResultSetDataSet)oResultSetDef;
    final long lRowCount=rsds.getSize();
    if (lRowCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.ZERO_DATASET,""String_Node_Str"",Messages.getResourceBundle());
    }
    final int columnCount=rsds.getColumnCount();
    ds=new DataSet[columnCount];
    for (int k=0; k < columnCount; k++) {
switch (rsds.getDataType(k)) {
case IConstants.TEXT:
        final String[] saDataSet=new String[(int)lRowCount];
      ds[k]=TextDataSetImpl.create(saDataSet);
    break;
case IConstants.DATE_TIME:
  final Calendar[] caDataSet=new Calendar[(int)lRowCount];
ds[k]=DateTimeDataSetImpl.create(caDataSet);
break;
case IConstants.NUMERICAL:
final Double[] doaDataSet=new Double[(int)lRowCount];
ds[k]=NumberDataSetImpl.create(doaDataSet);
break;
default :
throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"");
}
}
int i=0;
while (rsds.hasNext()) {
Object row[]=rsds.next();
for (int k=0; k < columnCount; k++) {
Object value=null;
switch (rsds.getDataType(k)) {
case IConstants.TEXT:
value=(String)row[k];
break;
case IConstants.DATE_TIME:
value=Methods.asDateTime(row[k]);
break;
case IConstants.NUMERICAL:
value=Methods.asDouble(row[k]);
break;
default :
throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"");
}
((Object[])ds[k].getValues())[i]=value;
}
i++;
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle());
}
return ds;
}",0.606675392670157
76053,"private void testDimensionFind3(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
  }
}","private void testDimensionFind3(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    Member levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.getDimensionPos(),i);
    levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
  }
}",0.6291293734743694
76054,"private void testDimensionFind2(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level1Col[i]);
    if (i < 5)     assertEquals(indexKey.dimensionPos,0);
    if (i >= 5 && i < 12)     assertEquals(indexKey.dimensionPos,5);
    if (i >= 12)     assertEquals(indexKey.dimensionPos,12);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
  }
}","private void testDimensionFind2(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level1Col[i]);
    if (i < 5)     assertEquals(indexKey.getDimensionPos(),0);
    if (i >= 5 && i < 12)     assertEquals(indexKey.getDimensionPos(),5);
    if (i >= 12)     assertEquals(indexKey.getDimensionPos(),12);
    Member levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.getDimensionPos(),i);
    levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
  }
}",0.9829385456352492
76055,"private void testDimensionCreate(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] attrs={""String_Node_Str"",""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new OneLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < OneLevelDataset.IDCol.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{new Integer(OneLevelDataset.IDCol[i])});
    assertEquals(indexKey.key[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
  }
}","private void testDimensionCreate(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] attrs={""String_Node_Str"",""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new OneLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < OneLevelDataset.IDCol.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{new Integer(OneLevelDataset.IDCol[i])});
    assertEquals(indexKey.getKey()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(indexKey.getDimensionPos(),i);
    Member levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
  }
}",0.9915305505142166
76056,"private void testDimensionCreate2(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    System.out.println(i);
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level1Col[i]);
    if (i < 5)     assertEquals(indexKey.dimensionPos,0);
    if (i >= 5 && i < 12)     assertEquals(indexKey.dimensionPos,5);
    if (i >= 12)     assertEquals(indexKey.dimensionPos,12);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
  }
}","private void testDimensionCreate2(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    System.out.println(i);
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level1Col[i]);
    if (i < 5)     assertEquals(indexKey.getDimensionPos(),0);
    if (i >= 5 && i < 12)     assertEquals(indexKey.getDimensionPos(),5);
    if (i >= 12)     assertEquals(indexKey.getDimensionPos(),12);
    Member levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.getDimensionPos(),i);
    levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
  }
}",0.9843773699378128
76057,"private void testDimensionCreate3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
  }
}","private void testDimensionCreate3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    Member levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.getKey()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.getDimensionPos(),i);
    levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
  }
}",0.9876112371313908
76058,"private void testDimensionCreateAndFind4(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  Member levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
}","private void testDimensionCreateAndFind4(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  Member levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
}",0.9797966459791364
76059,"private void testDimensionCreateAndFind1(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  int memeberCount=10000;
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  String[] IDs=new String[memeberCount];
  for (int i=0; i < memeberCount; i++) {
    IDs[i]=String.valueOf(i);
  }
  Arrays.sort(IDs);
  iterator.setLevelMember(0,IDs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < memeberCount; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{IDs[i]});
    assertEquals(indexKey.key[0],IDs[i]);
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
  }
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  realDimension=(Dimension)dimension;
  for (int i=0; i < memeberCount; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{IDs[i]});
    assertEquals(indexKey.key[0],IDs[i]);
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
  }
}","private void testDimensionCreateAndFind1(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  int memeberCount=10000;
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  String[] IDs=new String[memeberCount];
  for (int i=0; i < memeberCount; i++) {
    IDs[i]=String.valueOf(i);
  }
  Arrays.sort(IDs);
  iterator.setLevelMember(0,IDs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < memeberCount; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{IDs[i]});
    assertEquals(indexKey.getKey()[0],IDs[i]);
    assertEquals(indexKey.getDimensionPos(),i);
    Member levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
  }
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  realDimension=(Dimension)dimension;
  for (int i=0; i < memeberCount; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{IDs[i]});
    assertEquals(indexKey.getKey()[0],IDs[i]);
    assertEquals(indexKey.getDimensionPos(),i);
    Member levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
  }
}",0.9860200961118392
76060,"private void testDimensionCreate5(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  Member levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
}","private void testDimensionCreate5(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  Member levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
}",0.972176759410802
76061,"private void testDimensionFind(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  realDimension=(Dimension)dimension;
  for (int i=0; i < OneLevelDataset.IDCol.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{new Integer(OneLevelDataset.IDCol[i])});
    assertEquals(indexKey.key[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
  }
}","private void testDimensionFind(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  realDimension=(Dimension)dimension;
  for (int i=0; i < OneLevelDataset.IDCol.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{new Integer(OneLevelDataset.IDCol[i])});
    assertEquals(indexKey.getKey()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(indexKey.getDimensionPos(),i);
    Member levelMember=realDimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
  }
}",0.9890034364261168
76062,"private void testDimensionCreateAndFind(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension dimension=createDimension(documentManager);
  ILevel[] level=dimension.getHierarchy().getLevels();
  IDiskArray indexKeys=dimension.find((Level)level[0],new Object[]{new Integer(1)});
  assertEquals(indexKeys.size(),4);
  IndexKey indexKey;
  Member levelMember;
  for (int i=0; i < 4; i++) {
    indexKey=(IndexKey)indexKeys.get(i);
    assertEquals(indexKey.key[0],new Integer(1));
    assertEquals(indexKey.dimensionPos,i);
    levelMember=dimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(1));
    levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  }
  dimension=(Dimension)DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  indexKeys=dimension.find((Level)level[1],new Object[]{new Integer(1)});
  assertEquals(indexKeys.size(),4);
  indexKey=(IndexKey)indexKeys.get(0);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,0);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(1);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,1);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(2);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,4);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(3);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,5);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
}","private void testDimensionCreateAndFind(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension dimension=createDimension(documentManager);
  ILevel[] level=dimension.getHierarchy().getLevels();
  IDiskArray indexKeys=dimension.find((Level)level[0],new Object[]{new Integer(1)});
  assertEquals(indexKeys.size(),4);
  IndexKey indexKey;
  Member levelMember;
  for (int i=0; i < 4; i++) {
    indexKey=(IndexKey)indexKeys.get(i);
    assertEquals(indexKey.getKey()[0],new Integer(1));
    assertEquals(indexKey.getDimensionPos(),i);
    levelMember=dimension.getRowByPosition(indexKey.getDimensionPos()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(1));
    levelMember=dimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  }
  dimension=(Dimension)DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  indexKeys=dimension.find((Level)level[1],new Object[]{new Integer(1)});
  assertEquals(indexKeys.size(),4);
  indexKey=(IndexKey)indexKeys.get(0);
  assertEquals(indexKey.getKey()[0],new Integer(1));
  assertEquals(indexKey.getDimensionPos(),0);
  levelMember=dimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(1);
  assertEquals(indexKey.getKey()[0],new Integer(1));
  assertEquals(indexKey.getDimensionPos(),1);
  levelMember=dimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(2);
  assertEquals(indexKey.getKey()[0],new Integer(1));
  assertEquals(indexKey.getDimensionPos(),4);
  levelMember=dimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(3);
  assertEquals(indexKey.getKey()[0],new Integer(1));
  assertEquals(indexKey.getDimensionPos(),5);
  levelMember=dimension.getDimensionRowByOffset(indexKey.getOffset()).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
}",0.9698905109489052
76063,"private DimensionKey create(int i){
  DimensionKey key=new DimensionKey(3);
  key.keyValues[0]=new Integer(i);
  key.keyValues[1]=String.valueOf(i + 1);
  key.keyValues[2]=new Date(i + 2);
  return key;
}","private DimensionKey create(int i){
  DimensionKey key=new DimensionKey(3);
  key.getKeyValues()[0]=new Integer(i);
  key.getKeyValues()[1]=String.valueOf(i + 1);
  key.getKeyValues()[2]=new Date(i + 2);
  return key;
}",0.950354609929078
76064,"private Member create(int i){
  Member key=new Member();
  key.keyValues=new Object[]{new Integer(i)};
  key.attributes=new Object[2];
  key.attributes[0]=String.valueOf(i + 1);
  key.attributes[1]=new Date(i + 2);
  return key;
}","private Member create(int i){
  Member key=new Member();
  key.setKeyValues(new Object[]{new Integer(i)});
  key.setAttributes(new Object[2]);
  key.getAttributes()[0]=String.valueOf(i + 1);
  key.getAttributes()[1]=new Date(i + 2);
  return key;
}",0.7573221757322176
76065,"public void testSaveAndLoad() throws IOException {
  int keyCount=10000;
  BufferedStructureArray bufferedStructureArray=new BufferedStructureArray(Member.getCreator(),2000);
  for (int i=0; i < keyCount; i++) {
    bufferedStructureArray.add(create(i));
  }
  for (int i=0; i < keyCount; i++) {
    Member member1=(Member)bufferedStructureArray.get(i);
    Member member2=create(i);
    assertEquals(member1.compareTo(member2),0);
    assertEquals(member1.attributes[0],member2.attributes[0]);
    assertEquals(member1.attributes[1],member2.attributes[1]);
  }
}","public void testSaveAndLoad() throws IOException {
  int keyCount=10000;
  BufferedStructureArray bufferedStructureArray=new BufferedStructureArray(Member.getCreator(),2000);
  for (int i=0; i < keyCount; i++) {
    bufferedStructureArray.add(create(i));
  }
  for (int i=0; i < keyCount; i++) {
    Member member1=(Member)bufferedStructureArray.get(i);
    Member member2=create(i);
    assertEquals(member1.compareTo(member2),0);
    assertEquals(member1.getAttributes()[0],member2.getAttributes()[0]);
    assertEquals(member1.getAttributes()[1],member2.getAttributes()[1]);
  }
}",0.912739965095986
76066,"private void testDimensionFind3(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.attributes == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level1Col[i]);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[1];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.attributes == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.attributes == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[2];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.attributes.length,1);
    assertEquals(levelMember.attributes[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.attributes.length,1);
    assertEquals(levelMember.attributes[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
  }
}","private void testDimensionFind3(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
  }
}",0.9448792672772688
76067,"private void testDimensionFind2(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level1Col[i]);
    if (i < 5)     assertEquals(indexKey.dimensionPos,0);
    if (i >= 5 && i < 12)     assertEquals(indexKey.dimensionPos,5);
    if (i >= 12)     assertEquals(indexKey.dimensionPos,12);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.attributes == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.attributes == null);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[1];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.attributes == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[2];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level3Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level3Col[i]);
  }
}","private void testDimensionFind2(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level1Col[i]);
    if (i < 5)     assertEquals(indexKey.dimensionPos,0);
    if (i >= 5 && i < 12)     assertEquals(indexKey.dimensionPos,5);
    if (i >= 12)     assertEquals(indexKey.dimensionPos,12);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
  }
}",0.9821943361031032
76068,"/** 
 * @throws IOException
 * @throws BirtException
 */
public void testDimensionGetAll() throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager();
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  assertEquals(dimension.isTime(),false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray result=realDimension.getAllRows();
  for (int i=0; i < result.size(); i++) {
    DimensionRow dimRow=(DimensionRow)(result.get(i));
    assertEquals(dimRow.members[0].keyValues[0],FourLevelDataset.Level1Col[i]);
    assertEquals(dimRow.members[1].keyValues[0],FourLevelDataset.Level2Col[i]);
    assertEquals(dimRow.members[2].keyValues[0],FourLevelDataset.Level3Col[i]);
    assertEquals(dimRow.members[3].keyValues[0],FourLevelDataset.Level4Col[i]);
  }
}","/** 
 * @throws IOException
 * @throws BirtException
 */
public void testDimensionGetAll() throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager();
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  assertEquals(dimension.isTime(),false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray result=realDimension.getAllRows();
  for (int i=0; i < result.size(); i++) {
    DimensionRow dimRow=(DimensionRow)(result.get(i));
    assertEquals(dimRow.getMembers()[0].getKeyValues()[0],FourLevelDataset.Level1Col[i]);
    assertEquals(dimRow.getMembers()[1].getKeyValues()[0],FourLevelDataset.Level2Col[i]);
    assertEquals(dimRow.getMembers()[2].getKeyValues()[0],FourLevelDataset.Level3Col[i]);
    assertEquals(dimRow.getMembers()[3].getKeyValues()[0],FourLevelDataset.Level4Col[i]);
  }
}",0.9805690492713394
76069,"private void testDimensionCreate(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] attrs={""String_Node_Str"",""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new OneLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < OneLevelDataset.IDCol.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{new Integer(OneLevelDataset.IDCol[i])});
    assertEquals(indexKey.key[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.attributes[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.attributes[1],OneLevelDataset.AgeCol[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.attributes[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.attributes[1],OneLevelDataset.AgeCol[i]);
  }
}","private void testDimensionCreate(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] attrs={""String_Node_Str"",""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new OneLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < OneLevelDataset.IDCol.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{new Integer(OneLevelDataset.IDCol[i])});
    assertEquals(indexKey.key[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
  }
}",0.9827479975354282
76070,"private void testDimensionCreate2(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    System.out.println(i);
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level1Col[i]);
    if (i < 5)     assertEquals(indexKey.dimensionPos,0);
    if (i >= 5 && i < 12)     assertEquals(indexKey.dimensionPos,5);
    if (i >= 12)     assertEquals(indexKey.dimensionPos,12);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.attributes == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.attributes == null);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[1];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.attributes == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.attributes == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[2];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level3Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level3Col[i]);
  }
}","private void testDimensionCreate2(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    System.out.println(i);
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level1Col[i]);
    if (i < 5)     assertEquals(indexKey.dimensionPos,0);
    if (i >= 5 && i < 12)     assertEquals(indexKey.dimensionPos,5);
    if (i >= 12)     assertEquals(indexKey.dimensionPos,12);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
  }
}",0.9826302729528535
76071,"private void testDimensionCreate3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.attributes == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level1Col[i]);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[1];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.attributes == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.attributes == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[2];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.attributes.length,1);
    assertEquals(levelMember.attributes[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
    assertEquals(levelMember.keyValues[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.attributes.length,1);
    assertEquals(levelMember.attributes[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
  }
}","private void testDimensionCreate3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < ThreeLevelDataset.Level1Col.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{ThreeLevelDataset.Level1Col[i]});
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level1Col[i]);
    indexKey=realDimension.findFirst((Level)level[1],new Object[]{ThreeLevelDataset.Level2Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level2Col[i]);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level2Col[i]);
    assertTrue(levelMember.getAttributes() == null);
    indexKey=realDimension.findFirst((Level)level[2],new Object[]{ThreeLevelDataset.Level3Col[i]});
    assertEquals(indexKey.key[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(indexKey.dimensionPos,i);
    levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
    assertEquals(levelMember.getKeyValues()[0],ThreeLevelDataset.Level3Col[i]);
    assertEquals(levelMember.getAttributes().length,1);
    assertEquals(levelMember.getAttributes()[0],new Integer(ThreeLevelDataset.Level3AttributeCol[i]));
  }
}",0.9407977106063315
76072,"private void testDimensionCreateAndFind7(IDocumentManager documentManager) throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray indexArray=new BufferedPrimitiveDiskArray();
  indexArray.add(new Integer(2));
  indexArray.add(new Integer(5));
  indexArray.add(new Integer(8));
  indexArray.add(new Integer(9));
  indexArray.add(new Integer(10));
  indexArray.add(new Integer(11));
  indexArray.add(new Integer(14));
  IDiskArray result=realDimension.getDimensionRowByPositions(indexArray);
  assertEquals(((DimensionRow)(result.get(0))).members[3].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(1))).members[3].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(2))).members[3].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(3))).members[3].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(4))).members[3].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(5))).members[3].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(6))).members[3].keyValues[0],""String_Node_Str"");
}","private void testDimensionCreateAndFind7(IDocumentManager documentManager) throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray indexArray=new BufferedPrimitiveDiskArray();
  indexArray.add(new Integer(2));
  indexArray.add(new Integer(5));
  indexArray.add(new Integer(8));
  indexArray.add(new Integer(9));
  indexArray.add(new Integer(10));
  indexArray.add(new Integer(11));
  indexArray.add(new Integer(14));
  IDiskArray result=realDimension.getDimensionRowByPositions(indexArray);
  assertEquals(((DimensionRow)(result.get(0))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(1))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(2))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(3))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(4))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(5))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(6))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
}",0.9735421166306696
76073,"private void testDimensionCreateAndFind4(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  Member levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
}","private void testDimensionCreateAndFind4(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  String[] attrs={""String_Node_Str""};
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},attrs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new ThreeLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  Member levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  System.out.println(""String_Node_Str"");
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  assertEquals(level[0].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[1].getName(),""String_Node_Str"");
  assertEquals(level[1].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(level[2].getName(),""String_Node_Str"");
  assertEquals(level[2].getKeyDataType(""String_Node_Str""),DataType.STRING_TYPE);
  realDimension=(Dimension)dimension;
}",0.983059962355472
76074,"private void testDimensionCreateAndFind1(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  int memeberCount=10000;
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  String[] IDs=new String[memeberCount];
  for (int i=0; i < memeberCount; i++) {
    IDs[i]=String.valueOf(i);
  }
  Arrays.sort(IDs);
  iterator.setLevelMember(0,IDs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < memeberCount; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{IDs[i]});
    assertEquals(indexKey.key[0],IDs[i]);
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],IDs[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],IDs[i]);
  }
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  realDimension=(Dimension)dimension;
  for (int i=0; i < memeberCount; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{IDs[i]});
    assertEquals(indexKey.key[0],IDs[i]);
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],IDs[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],IDs[i]);
  }
}","private void testDimensionCreateAndFind1(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  int memeberCount=10000;
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  String[] IDs=new String[memeberCount];
  for (int i=0; i < memeberCount; i++) {
    IDs[i]=String.valueOf(i);
  }
  Arrays.sort(IDs);
  iterator.setLevelMember(0,IDs);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  for (int i=0; i < memeberCount; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{IDs[i]});
    assertEquals(indexKey.key[0],IDs[i]);
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
  }
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  realDimension=(Dimension)dimension;
  for (int i=0; i < memeberCount; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{IDs[i]});
    assertEquals(indexKey.key[0],IDs[i]);
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],IDs[i]);
  }
}",0.9875500222321032
76075,"private void testDimensionCreate5(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  Member levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[2];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[3];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[3];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[3];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[3];
  assertEquals(levelMember.keyValues[0],""String_Node_Str"");
}","private void testDimensionCreate5(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  ILevel[] level=hierarchy.getLevels();
  Dimension realDimension=(Dimension)dimension;
  IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  Member levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[0],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[1],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[2],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[2];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
  indexKey=realDimension.findFirst((Level)level[3],new Object[]{""String_Node_Str""});
  levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[3];
  assertEquals(levelMember.getKeyValues()[0],""String_Node_Str"");
}",0.9563758389261744
76076,"private void testDimensionFind(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  realDimension=(Dimension)dimension;
  for (int i=0; i < OneLevelDataset.IDCol.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{new Integer(OneLevelDataset.IDCol[i])});
    assertEquals(indexKey.key[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.attributes[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.attributes[1],OneLevelDataset.AgeCol[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.attributes[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.attributes[1],OneLevelDataset.AgeCol[i]);
  }
}","private void testDimensionFind(IDocumentManager documentManager) throws DataException, IOException {
  IDimension dimension;
  IHierarchy hierarchy;
  ILevel[] level;
  Dimension realDimension;
  dimension=DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  level=hierarchy.getLevels();
  assertEquals(level[0].getName(),""String_Node_Str"");
  realDimension=(Dimension)dimension;
  for (int i=0; i < OneLevelDataset.IDCol.length; i++) {
    IndexKey indexKey=realDimension.findFirst((Level)level[0],new Object[]{new Integer(OneLevelDataset.IDCol[i])});
    assertEquals(indexKey.key[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(indexKey.dimensionPos,i);
    Member levelMember=realDimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
    levelMember=realDimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(OneLevelDataset.IDCol[i]));
    assertEquals(levelMember.getAttributes()[0],OneLevelDataset.NameCol[i]);
    assertEquals(levelMember.getAttributes()[1],OneLevelDataset.AgeCol[i]);
  }
}",0.9466666666666668
76077,"private void testDimensionCreateAndFind8(IDocumentManager documentManager) throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  assertEquals(dimension.isTime(),false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray indexArray=new BufferedPrimitiveDiskArray();
  indexArray.add(new Integer(2));
  indexArray.add(new Integer(5));
  indexArray.add(new Integer(8));
  indexArray.add(new Integer(9));
  indexArray.add(new Integer(10));
  indexArray.add(new Integer(11));
  indexArray.add(new Integer(14));
  IDiskArray result=realDimension.getDimensionRowByPositions(indexArray);
  assertEquals(((DimensionRow)(result.get(0))).members[2].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(1))).members[2].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(2))).members[2].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(3))).members[2].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(4))).members[2].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(5))).members[2].keyValues[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(6))).members[2].keyValues[0],""String_Node_Str"");
}","private void testDimensionCreateAndFind8(IDocumentManager documentManager) throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  assertEquals(dimension.isTime(),false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray indexArray=new BufferedPrimitiveDiskArray();
  indexArray.add(new Integer(2));
  indexArray.add(new Integer(5));
  indexArray.add(new Integer(8));
  indexArray.add(new Integer(9));
  indexArray.add(new Integer(10));
  indexArray.add(new Integer(11));
  indexArray.add(new Integer(14));
  IDiskArray result=realDimension.getDimensionRowByPositions(indexArray);
  assertEquals(((DimensionRow)(result.get(0))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(1))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(2))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(3))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(4))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(5))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(6))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
}",0.974128827877508
76078,"private void testDimensionCreateAndFind(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension dimension=createDimension(documentManager);
  ILevel[] level=dimension.getHierarchy().getLevels();
  IDiskArray indexKeys=dimension.find((Level)level[0],new Object[]{new Integer(1)});
  assertEquals(indexKeys.size(),4);
  IndexKey indexKey;
  Member levelMember;
  for (int i=0; i < 4; i++) {
    indexKey=(IndexKey)indexKeys.get(i);
    assertEquals(indexKey.key[0],new Integer(1));
    assertEquals(indexKey.dimensionPos,i);
    levelMember=dimension.getRowByPosition(indexKey.dimensionPos).members[0];
    assertEquals(levelMember.keyValues[0],new Integer(1));
    levelMember=dimension.getDimensionRowByOffset(indexKey.offset).members[0];
    assertEquals(levelMember.keyValues[0],new Integer(1));
  }
  dimension=(Dimension)DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  indexKeys=dimension.find((Level)level[1],new Object[]{new Integer(1)});
  assertEquals(indexKeys.size(),4);
  indexKey=(IndexKey)indexKeys.get(0);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,0);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(1);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,1);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(2);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,4);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(3);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,5);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).members[1];
  assertEquals(levelMember.keyValues[0],new Integer(1));
}","private void testDimensionCreateAndFind(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension dimension=createDimension(documentManager);
  ILevel[] level=dimension.getHierarchy().getLevels();
  IDiskArray indexKeys=dimension.find((Level)level[0],new Object[]{new Integer(1)});
  assertEquals(indexKeys.size(),4);
  IndexKey indexKey;
  Member levelMember;
  for (int i=0; i < 4; i++) {
    indexKey=(IndexKey)indexKeys.get(i);
    assertEquals(indexKey.key[0],new Integer(1));
    assertEquals(indexKey.dimensionPos,i);
    levelMember=dimension.getRowByPosition(indexKey.dimensionPos).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(1));
    levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[0];
    assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  }
  dimension=(Dimension)DimensionFactory.loadDimension(""String_Node_Str"",documentManager);
  indexKeys=dimension.find((Level)level[1],new Object[]{new Integer(1)});
  assertEquals(indexKeys.size(),4);
  indexKey=(IndexKey)indexKeys.get(0);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,0);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(1);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,1);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(2);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,4);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
  indexKey=(IndexKey)indexKeys.get(3);
  assertEquals(indexKey.key[0],new Integer(1));
  assertEquals(indexKey.dimensionPos,5);
  levelMember=dimension.getDimensionRowByOffset(indexKey.offset).getMembers()[1];
  assertEquals(levelMember.getKeyValues()[0],new Integer(1));
}",0.9802073515551368
76079,"/** 
 * @throws IOException
 * @throws BirtException 
 */
public void testDimensionSegments() throws IOException, BirtException {
  DimensionDivision dimSegments=new DimensionDivision(2,1);
  assertEquals(dimSegments.ranges.length,1);
  assertEquals(dimSegments.ranges[0].start,0);
  assertEquals(dimSegments.ranges[0].end,1);
  dimSegments=new DimensionDivision(1,1);
  assertEquals(dimSegments.ranges.length,1);
  assertEquals(dimSegments.ranges[0].start,0);
  assertEquals(dimSegments.ranges[0].end,0);
  dimSegments=new DimensionDivision(3,3);
  assertEquals(dimSegments.ranges.length,3);
  assertEquals(dimSegments.ranges[0].start,0);
  assertEquals(dimSegments.ranges[0].end,0);
  assertEquals(dimSegments.ranges[1].start,1);
  assertEquals(dimSegments.ranges[1].end,1);
  assertEquals(dimSegments.ranges[2].start,2);
  assertEquals(dimSegments.ranges[2].end,2);
  dimSegments=new DimensionDivision(3,4);
  assertEquals(dimSegments.ranges.length,3);
  assertEquals(dimSegments.ranges[0].start,0);
  assertEquals(dimSegments.ranges[0].end,0);
  assertEquals(dimSegments.ranges[1].start,1);
  assertEquals(dimSegments.ranges[1].end,1);
  assertEquals(dimSegments.ranges[2].start,2);
  assertEquals(dimSegments.ranges[2].end,2);
  dimSegments=new DimensionDivision(10,3);
  assertEquals(dimSegments.ranges.length,3);
  assertEquals(dimSegments.ranges[0].start,0);
  assertEquals(dimSegments.ranges[0].end,3);
  assertEquals(dimSegments.ranges[1].start,4);
  assertEquals(dimSegments.ranges[1].end,6);
  assertEquals(dimSegments.ranges[2].start,7);
  assertEquals(dimSegments.ranges[2].end,9);
  dimSegments=new DimensionDivision(11,3);
  assertEquals(dimSegments.ranges.length,3);
  assertEquals(dimSegments.ranges[0].start,0);
  assertEquals(dimSegments.ranges[0].end,3);
  assertEquals(dimSegments.ranges[1].start,4);
  assertEquals(dimSegments.ranges[1].end,7);
  assertEquals(dimSegments.ranges[2].start,8);
  assertEquals(dimSegments.ranges[2].end,10);
  dimSegments=new DimensionDivision(12,3);
  assertEquals(dimSegments.ranges.length,3);
  assertEquals(dimSegments.ranges[0].start,0);
  assertEquals(dimSegments.ranges[0].end,3);
  assertEquals(dimSegments.ranges[1].start,4);
  assertEquals(dimSegments.ranges[1].end,7);
  assertEquals(dimSegments.ranges[2].start,8);
  assertEquals(dimSegments.ranges[2].end,11);
}","/** 
 * @throws IOException
 * @throws BirtException 
 */
public void testDimensionSegments() throws IOException, BirtException {
  DimensionDivision dimSegments=new DimensionDivision(2,1);
  assertEquals(dimSegments.getRanges().length,1);
  assertEquals(dimSegments.getRanges()[0].start,0);
  assertEquals(dimSegments.getRanges()[0].end,1);
  dimSegments=new DimensionDivision(1,1);
  assertEquals(dimSegments.getRanges().length,1);
  assertEquals(dimSegments.getRanges()[0].start,0);
  assertEquals(dimSegments.getRanges()[0].end,0);
  dimSegments=new DimensionDivision(3,3);
  assertEquals(dimSegments.getRanges().length,3);
  assertEquals(dimSegments.getRanges()[0].start,0);
  assertEquals(dimSegments.getRanges()[0].end,0);
  assertEquals(dimSegments.getRanges()[1].start,1);
  assertEquals(dimSegments.getRanges()[1].end,1);
  assertEquals(dimSegments.getRanges()[2].start,2);
  assertEquals(dimSegments.getRanges()[2].end,2);
  dimSegments=new DimensionDivision(3,4);
  assertEquals(dimSegments.getRanges().length,3);
  assertEquals(dimSegments.getRanges()[0].start,0);
  assertEquals(dimSegments.getRanges()[0].end,0);
  assertEquals(dimSegments.getRanges()[1].start,1);
  assertEquals(dimSegments.getRanges()[1].end,1);
  assertEquals(dimSegments.getRanges()[2].start,2);
  assertEquals(dimSegments.getRanges()[2].end,2);
  dimSegments=new DimensionDivision(10,3);
  assertEquals(dimSegments.getRanges().length,3);
  assertEquals(dimSegments.getRanges()[0].start,0);
  assertEquals(dimSegments.getRanges()[0].end,3);
  assertEquals(dimSegments.getRanges()[1].start,4);
  assertEquals(dimSegments.getRanges()[1].end,6);
  assertEquals(dimSegments.getRanges()[2].start,7);
  assertEquals(dimSegments.getRanges()[2].end,9);
  dimSegments=new DimensionDivision(11,3);
  assertEquals(dimSegments.getRanges().length,3);
  assertEquals(dimSegments.getRanges()[0].start,0);
  assertEquals(dimSegments.getRanges()[0].end,3);
  assertEquals(dimSegments.getRanges()[1].start,4);
  assertEquals(dimSegments.getRanges()[1].end,7);
  assertEquals(dimSegments.getRanges()[2].start,8);
  assertEquals(dimSegments.getRanges()[2].end,10);
  dimSegments=new DimensionDivision(12,3);
  assertEquals(dimSegments.getRanges().length,3);
  assertEquals(dimSegments.getRanges()[0].start,0);
  assertEquals(dimSegments.getRanges()[0].end,3);
  assertEquals(dimSegments.getRanges()[1].start,4);
  assertEquals(dimSegments.getRanges()[1].end,7);
  assertEquals(dimSegments.getRanges()[2].start,8);
  assertEquals(dimSegments.getRanges()[2].end,11);
}",0.7906976744186046
76080,"private void checkEquals(FactTableRow factTableRow1,FactTableRow factTableRow2){
  assertEquals(factTableRow1,factTableRow2);
  assertEquals(factTableRow1.measures.length,factTableRow2.measures.length);
  for (int i=0; i < factTableRow2.measures.length; i++) {
    assertEquals(factTableRow1.measures[i],factTableRow2.measures[i]);
  }
}","private void checkEquals(FactTableRow factTableRow1,FactTableRow factTableRow2){
  assertEquals(factTableRow1,factTableRow2);
  assertEquals(factTableRow1.getMeasures().length,factTableRow2.getMeasures().length);
  for (int i=0; i < factTableRow2.getMeasures().length; i++) {
    assertEquals(factTableRow1.getMeasures()[i],factTableRow2.getMeasures()[i]);
  }
}",0.8497854077253219
76081,"private FactTableRow createRow(int iValue){
  final int dimensionLen=3;
  final int measureLen=3;
  FactTableRow factTableRow=new FactTableRow();
  factTableRow.dimensionKeys=new DimensionKey[dimensionLen];
  for (int i=0; i < dimensionLen; i++) {
    factTableRow.dimensionKeys[i]=new DimensionKey(i);
    for (int j=0; j < i; j++) {
      factTableRow.dimensionKeys[i].keyValues[j]=new Integer(iValue + j);
    }
  }
  factTableRow.measures=new Object[measureLen];
  for (int i=0; i < measureLen; i++) {
    factTableRow.measures[i]=new Integer(iValue + i);
  }
  return factTableRow;
}","private FactTableRow createRow(int iValue){
  final int dimensionLen=3;
  final int measureLen=3;
  FactTableRow factTableRow=new FactTableRow();
  factTableRow.setDimensionKeys(new DimensionKey[dimensionLen]);
  for (int i=0; i < dimensionLen; i++) {
    factTableRow.getDimensionKeys()[i]=new DimensionKey(i);
    for (int j=0; j < i; j++) {
      factTableRow.getDimensionKeys()[i].getKeyValues()[j]=new Integer(iValue + j);
    }
  }
  factTableRow.setMeasures(new Object[measureLen]);
  for (int i=0; i < measureLen; i++) {
    factTableRow.getMeasures()[i]=new Integer(iValue + i);
  }
  return factTableRow;
}",0.9401993355481728
76082,"private FactTableRow createRow2(int iValue){
  final int dimensionLen=3;
  final int measureLen=3;
  FactTableRow factTableRow=new FactTableRow();
  factTableRow.dimensionKeys=new DimensionKey[dimensionLen];
  for (int i=0; i < dimensionLen; i++) {
    factTableRow.dimensionKeys[i]=new DimensionKey(i);
    for (int j=0; j < i; j++) {
      if (j != 1)       factTableRow.dimensionKeys[i].keyValues[j]=new Integer(iValue + j);
    }
  }
  factTableRow.measures=new Object[measureLen];
  for (int i=0; i < measureLen; i++) {
    factTableRow.measures[i]=new Integer(iValue + i);
  }
  return factTableRow;
}","private FactTableRow createRow2(int iValue){
  final int dimensionLen=3;
  final int measureLen=3;
  FactTableRow factTableRow=new FactTableRow();
  factTableRow.setDimensionKeys(new DimensionKey[dimensionLen]);
  for (int i=0; i < dimensionLen; i++) {
    factTableRow.getDimensionKeys()[i]=new DimensionKey(i);
    for (int j=0; j < i; j++) {
      if (j != 1)       factTableRow.getDimensionKeys()[i].getKeyValues()[j]=new Integer(iValue + j);
    }
  }
  factTableRow.setMeasures(new Object[measureLen]);
  for (int i=0; i < measureLen; i++) {
    factTableRow.getMeasures()[i]=new Integer(iValue + i);
  }
  return factTableRow;
}",0.9420289855072465
76083,"/** 
 * @param dimRow
 * @return
 */
private static Object[] getAllFields(DimensionRow dimRow){
  List fields=new ArrayList();
  for (int i=0; i < dimRow.members.length; i++) {
    if (dimRow.members[i].keyValues != null) {
      for (int j=0; j < dimRow.members[i].keyValues.length; j++) {
        fields.add(dimRow.members[i].keyValues[j]);
      }
    }
    if (dimRow.members[i].attributes != null) {
      for (int j=0; j < dimRow.members[i].attributes.length; j++) {
        fields.add(dimRow.members[i].attributes[j]);
      }
    }
  }
  return fields.toArray();
}","/** 
 * @param dimRow
 * @return
 */
private static Object[] getAllFields(DimensionRow dimRow){
  List fields=new ArrayList();
  for (int i=0; i < dimRow.getMembers().length; i++) {
    if (dimRow.getMembers()[i].getKeyValues() != null) {
      for (int j=0; j < dimRow.getMembers()[i].getKeyValues().length; j++) {
        fields.add(dimRow.getMembers()[i].getKeyValues()[j]);
      }
    }
    if (dimRow.getMembers()[i].getAttributes() != null) {
      for (int j=0; j < dimRow.getMembers()[i].getAttributes().length; j++) {
        fields.add(dimRow.getMembers()[i].getAttributes()[j]);
      }
    }
  }
  return fields.toArray();
}",0.770885028949545
76084,"/** 
 * Handle output Text Box type parameter
 * @throws Exception
 */
protected void __handleTextBox() throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  boolean isNullValue=param.getValue() == null;
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (paramDef.isRequired() || !isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  String valueId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String isLocaleId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str""+ encParamName+ ""String_Node_Str"");
  if (param.getPattern() != null) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String controlType=paramDef.concealValue() ? ""String_Node_Str"" : ""String_Node_Str"";
  if (paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
 else {
    String nullValueId=encParamId + ""String_Node_Str"";
    String radioTextValueId=encParamId + ""String_Node_Str"";
    String radioNullValueId=encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (!isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}","/** 
 * Handle output Text Box type parameter
 * @throws Exception
 */
protected void __handleTextBox() throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  boolean isNullValue=param.getValue() == null;
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (paramDef.isRequired() || !isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  String valueId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String isLocaleId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str""+ encParamName+ ""String_Node_Str"");
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (param.getPattern() != null) {
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String controlType=paramDef.concealValue() ? ""String_Node_Str"" : ""String_Node_Str"";
  if (paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
 else {
    String nullValueId=encParamId + ""String_Node_Str"";
    String radioTextValueId=encParamId + ""String_Node_Str"";
    String radioNullValueId=encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (!isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + controlType + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}",0.977637955956126
76085,"/** 
 * Handle Common List Box type parameter( not cascading parameter )
 * @param selectionList
 * @throws Exception
 */
protected void __handleCommonListBox(Collection selectionList) throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  boolean isSelected=false;
  boolean isNullValue=param.getValue() == null;
  String valueId=encParamId + ""String_Node_Str"";
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioSelectId=encParamId + ""String_Node_Str"";
  String radioTextId=encParamId + ""String_Node_Str"";
  String inputTextId=encParamId + ""String_Node_Str"";
  String isLocaleId=encParamId + ""String_Node_Str"";
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onChange=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  __handleGeneralDefinition();
  writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (paramDef.mustMatch() && !paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (param.getValue() != null && DataUtil.getString(param.getValue()).length() <= 0) {
      writer.write(""String_Node_Str"");
      isSelected=true;
    }
    writer.write(""String_Node_Str"");
  }
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? label : ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    if (displayValue.equals(DataUtil.getDisplayValue(param.getValue()))) {
      isSelected=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(ParameterAccessor.htmlEncode(label));
    writer.write(""String_Node_Str"");
  }
  String defaultValueText=null;
  if (!isSelected && paramDef.mustMatch()) {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (defaultValue == null) {
      isNullValue=true;
    }
 else {
      isNullValue=false;
      defaultValueText=DataUtil.getDisplayValue(defaultValue);
      if (defaultValueText != null)       this.valueString=defaultValueText;
      String defaultDisplayText=ParameterValidationUtil.getDisplayValue(null,this.pattern,defaultValue,locale);
      if (defaultDisplayText != null)       this.displayTextString=defaultDisplayText;
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
  }
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
    }
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    if (!isSelected) {
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str""+ (isNullValue || isSelected)+ ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  if (!isSelected && paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (defaultValueText != null) {
      writer.write(""String_Node_Str"" + defaultValueText + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}","/** 
 * Handle Common List Box type parameter( not cascading parameter )
 * @param selectionList
 * @throws Exception
 */
protected void __handleCommonListBox(Collection selectionList) throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  boolean isSelected=false;
  boolean isNullValue=param.getValue() == null;
  String valueId=encParamId + ""String_Node_Str"";
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioSelectId=encParamId + ""String_Node_Str"";
  String radioTextId=encParamId + ""String_Node_Str"";
  String inputTextId=encParamId + ""String_Node_Str"";
  String isLocaleId=encParamId + ""String_Node_Str"";
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onChange=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  __handleGeneralDefinition();
  writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (paramDef.mustMatch() && !paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (param.getValue() != null && DataUtil.getString(param.getValue()).length() <= 0) {
      writer.write(""String_Node_Str"");
      isSelected=true;
    }
    writer.write(""String_Node_Str"");
  }
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? label : ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    if (displayValue.equals(DataUtil.getDisplayValue(param.getValue()))) {
      isSelected=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(ParameterAccessor.htmlEncode(label));
    writer.write(""String_Node_Str"");
  }
  String defaultValueText=null;
  if (!isSelected && paramDef.mustMatch()) {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (defaultValue == null) {
      isNullValue=true;
    }
 else {
      isNullValue=false;
      defaultValueText=DataUtil.getDisplayValue(defaultValue);
      if (defaultValueText != null)       this.valueString=defaultValueText;
      String defaultDisplayText=ParameterValidationUtil.getDisplayValue(null,this.pattern,defaultValue,locale);
      if (defaultDisplayText != null)       this.displayTextString=defaultDisplayText;
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
  }
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
    }
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    if (!isSelected) {
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str""+ (isNullValue || isSelected)+ ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  if (!isSelected && paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (defaultValueText != null) {
      writer.write(""String_Node_Str"" + defaultValueText + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}",0.9670062865814004
76086,"/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display,String url){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(foreign,styleBuffer);
}","/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display,String url){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(foreign,styleBuffer);
  if (!isEmbeddable) {
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
}",0.9442848937392304
76087,"/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(text,styleBuffer);
}","/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(text,styleBuffer);
  if (!isEmbeddable) {
    AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  }
}",0.942501481920569
76088,"/** 
 * process tag function
 * @throws Exception
 */
protected void __process() throws Exception {
  if (viewer == null)   return;
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  this.locale=BirtTagUtil.getLocale(request,viewer.getLocale());
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  Collection paramDefList=viewer.getParameterDefList();
  if (paramDefList == null) {
    BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),options);
    IViewerReportDesignHandle designHandle=BirtTagUtil.getDesignHandle(request,viewer);
    viewer.setReportDesignHandle(designHandle);
    paramDefList=BirtReportServiceFactory.getReportService().getParameterDefinitions(designHandle,options,false);
    viewer.setParameterDefList(paramDefList);
  }
  this.paramDef=BirtUtility.findParameterDefinition(paramDefList,param.getName());
  if (paramDef == null)   return;
  String dataType=ParameterDataTypeConverter.ConvertDataType(paramDef.getDataType());
  this.pattern=param.getPattern();
  if (this.pattern == null)   this.pattern=paramDef.getPattern();
  boolean isLocale=false;
  if (""String_Node_Str"".equalsIgnoreCase(param.getIsLocale()))   isLocale=true;
  if (param.getValue() != null && param.getValue() instanceof String) {
    Object valueObj=DataUtil.validate(dataType,this.pattern,(String)param.getValue(),locale,isLocale);
    param.setValue(valueObj);
  }
  if (param.getValue() == null) {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    param.setValue(defaultValue);
  }
  this.valueString=DataUtil.getDisplayValue(param.getValue());
  if (this.valueString == null)   this.valueString=""String_Node_Str"";
  this.displayTextString=param.getDisplayText();
  if (this.displayTextString == null)   this.displayTextString=ParameterValidationUtil.getDisplayValue(dataType,this.pattern,param.getValue(),locale);
  if (this.displayTextString == null)   this.displayTextString=""String_Node_Str"";
  if (param.getTitle() == null)   param.setTitle(this.displayTextString);
  requesterTag.addParameter(param.getName(),param.getValue());
  if (paramDef.isHidden()) {
    __handleHidden();
  }
 else {
switch (paramDef.getControlType()) {
case IScalarParameterDefn.TEXT_BOX:
      __handleTextBox();
    break;
case IScalarParameterDefn.LIST_BOX:
  __handleListBox();
break;
case IScalarParameterDefn.RADIO_BUTTON:
__handleRadioButton();
break;
case IScalarParameterDefn.CHECK_BOX:
__handleCheckBox();
break;
default :
break;
}
}
}","/** 
 * process tag function
 * @throws Exception
 */
protected void __process() throws Exception {
  if (viewer == null)   return;
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  this.locale=BirtTagUtil.getLocale(request,viewer.getLocale());
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  Collection paramDefList=viewer.getParameterDefList();
  if (paramDefList == null) {
    BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),options);
    IViewerReportDesignHandle designHandle=BirtTagUtil.getDesignHandle(request,viewer);
    viewer.setReportDesignHandle(designHandle);
    paramDefList=BirtReportServiceFactory.getReportService().getParameterDefinitions(designHandle,options,false);
    viewer.setParameterDefList(paramDefList);
  }
  this.paramDef=BirtUtility.findParameterDefinition(paramDefList,param.getName());
  if (paramDef == null)   return;
  String dataType=ParameterDataTypeConverter.ConvertDataType(paramDef.getDataType());
  this.pattern=param.getPattern();
  if (this.pattern == null)   this.pattern=paramDef.getPattern();
  boolean isLocale=false;
  if (""String_Node_Str"".equalsIgnoreCase(param.getIsLocale()))   isLocale=true;
  if (param.getValue() != null && param.getValue() instanceof String) {
    Object valueObj=DataUtil.validateWithPattern(dataType,this.pattern,(String)param.getValue(),locale,isLocale);
    param.setValue(valueObj);
  }
  if (param.getValue() == null) {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    param.setValue(defaultValue);
  }
  this.valueString=DataUtil.getDisplayValue(param.getValue());
  if (this.valueString == null)   this.valueString=""String_Node_Str"";
  this.displayTextString=param.getDisplayText();
  if (this.displayTextString == null)   this.displayTextString=ParameterValidationUtil.getDisplayValue(dataType,this.pattern,param.getValue(),locale);
  if (this.displayTextString == null)   this.displayTextString=""String_Node_Str"";
  if (param.getTitle() == null)   param.setTitle(this.displayTextString);
  requesterTag.addParameter(param.getName(),param.getValue());
  if (paramDef.isHidden()) {
    __handleHidden();
  }
 else {
switch (paramDef.getControlType()) {
case IScalarParameterDefn.TEXT_BOX:
      __handleTextBox();
    break;
case IScalarParameterDefn.LIST_BOX:
  __handleListBox();
break;
case IScalarParameterDefn.RADIO_BUTTON:
__handleRadioButton();
break;
case IScalarParameterDefn.CHECK_BOX:
__handleCheckBox();
break;
default :
break;
}
}
}",0.9980169460969892
76089,"/** 
 * Convert parameter to Object
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validate(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  String defFormat=null;
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_DATETIME_FORMAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_DATE_FORMAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_TIME_FORMAT;
  }
  if (isLocale) {
    try {
      if (format == null) {
        if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
          format=ParameterValidationUtil.DISPLAY_DATE_FORMAT;
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
          format=ParameterValidationUtil.DISPLAY_TIME_FORMAT;
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
          format=DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED;
        }
      }
      obj=ParameterValidationUtil.validate(dataType,format,value,locale);
    }
 catch (    Exception e) {
      obj=ParameterValidationUtil.validate(dataType,defFormat,value);
    }
  }
 else {
    if (format == null)     format=defFormat;
    obj=ParameterValidationUtil.validate(dataType,format,value);
  }
  return obj;
}","/** 
 * Convert parameter to Object
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validate(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  if (isLocale) {
    validateWithLocale(dataType,format,value,locale);
  }
 else {
    obj=ParameterValidationUtil.validate(dataType,getDefaultDateFormat(dataType),value);
  }
  return obj;
}",0.4284497444633731
76090,"private void resolveBorder(BorderStyleInfo[] styles,BorderStyleInfo usedStyle){
  CSSValue[] borderStyles=new CSSValue[styles.length];
  for (int i=0; i < styles.length; i++) {
    borderStyles[i]=styles[i].getBorderStyle();
    if (IStyle.HIDDEN_VALUE.equals(borderStyles[i])) {
      usedStyle.setBorderStyle(IStyle.HIDDEN_VALUE);
      return;
    }
  }
  int maxWidth=0;
  int maxCount=1;
  int maxFirstIndex=0;
  int[] ws=new int[styles.length];
  CSSValue[] borderWidths=new CSSValue[styles.length];
  for (int i=0; i < styles.length; i++) {
    borderWidths[i]=styles[i].getBorderWidth();
    ws[i]=PropertyUtil.getDimensionValue(styles[i].getBorderWidth());
    if (ws[i] > maxWidth) {
      maxWidth=ws[i];
      maxCount=1;
      maxFirstIndex=i;
    }
 else     if (ws[i] == maxWidth) {
      maxCount++;
    }
  }
  if (maxCount == 1) {
    usedStyle.setBorder(borderStyles[maxFirstIndex],borderWidths[maxFirstIndex],styles[maxFirstIndex].getBorderColor());
    return;
  }
 else {
    int max=0;
    int maxStyleIndex=0;
    int[] ss=new int[styles.length];
    for (int i=0; i < styles.length; i++) {
      if (ws[i] == maxWidth) {
        ss[i]=((Integer)styleMap.get(styles[i].getBorderStyle())).intValue();
        if (ss[i] > max) {
          max=ss[i];
          maxStyleIndex=i;
        }
      }
    }
    usedStyle.setBorder(borderStyles[maxStyleIndex],borderWidths[maxStyleIndex],styles[maxStyleIndex].getBorderColor());
  }
}","private void resolveBorder(BorderStyleInfo[] styles,BorderStyleInfo usedStyle){
  CSSValue[] borderStyles=new CSSValue[styles.length];
  for (int i=0; i < styles.length; i++) {
    borderStyles[i]=styles[i].getBorderStyle();
    if (IStyle.HIDDEN_VALUE.equals(borderStyles[i])) {
      usedStyle.setBorderStyle(IStyle.HIDDEN_VALUE);
      return;
    }
  }
  int maxWidth=0;
  int maxCount=1;
  int maxFirstIndex=0;
  int[] ws=new int[styles.length];
  CSSValue[] borderWidths=new CSSValue[styles.length];
  for (int i=0; i < styles.length; i++) {
    borderWidths[i]=styles[i].getBorderWidth();
    ws[i]=PropertyUtil.getDimensionValue(styles[i].getBorderWidth());
    if (ws[i] > maxWidth) {
      maxWidth=ws[i];
      maxCount=1;
      maxFirstIndex=i;
    }
 else     if (ws[i] == maxWidth) {
      maxCount++;
    }
  }
  if (maxCount == 1) {
    usedStyle.setBorder(borderStyles[maxFirstIndex],borderWidths[maxFirstIndex],styles[maxFirstIndex].getBorderColor());
    return;
  }
 else {
    int max=0;
    int maxStyleIndex=0;
    int[] ss=new int[styles.length];
    for (int i=0; i < styles.length; i++) {
      if (ws[i] == maxWidth) {
        ss[i]=((Integer)styleMap.get(styles[i].getBorderStyle())).intValue();
        if (ss[i] > max) {
          max=ss[i];
          maxStyleIndex=i;
        }
      }
    }
    usedStyle.setBorder(borderStyles[maxStyleIndex],borderWidths[maxStyleIndex] != null ? borderWidths[maxStyleIndex] : IStyle.NUMBER_0,styles[maxStyleIndex].getBorderColor());
  }
}",0.981042654028436
76091,"public boolean addArea(IArea area,boolean keepWithPrevious,boolean keepWithNext){
  if (area == null) {
    return true;
  }
  keepWith=keepWith || keepWithNext || pageBreakAvoid;
  if (!keepWith && !keepWithPrevious) {
    clearCache();
  }
  AbstractArea aArea=(AbstractArea)area;
  if (keepWithCache.getHeight() + aArea.getAllocatedHeight() + getCurrentBP() > getMaxAvaHeight()) {
    context.setAutoPageBreak(true);
    return false;
  }
 else {
    if (keepWithPrevious || keepWith) {
      keepWithCache.add(area);
    }
 else {
      addToRoot(aArea);
    }
  }
  return true;
}","public boolean addArea(IArea area,boolean keepWithPrevious,boolean keepWithNext){
  if (area == null) {
    return true;
  }
  keepWith=keepWith || keepWithNext || pageBreakAvoid;
  if (!keepWith && !keepWithPrevious) {
    clearCache();
  }
  AbstractArea aArea=(AbstractArea)area;
  if (keepWithCache.getHeight() + aArea.getAllocatedHeight() + getCurrentBP() > getMaxAvaHeight()) {
    context.setAutoPageBreak(true);
    return false;
  }
 else {
    if (keepWithPrevious || keepWith) {
      keepWithCache.add(area);
    }
 else {
      addToRoot(aArea);
    }
  }
  keepWith=keepWithNext;
  return true;
}",0.9790794979079498
76092,"protected void createRoot(){
  if (!isFirst) {
    int startColumn=cellContent.getColumn();
    int endColumn=startColumn + cellContent.getColSpan();
    columnWidth=tableLM.getCellWidth(startColumn,endColumn);
  }
  if (root == null) {
    CellArea cell=AreaFactory.createCellArea(cellContent);
    cell.setRowSpan(tableLM.getRowSpan(cellContent));
    root=cell;
    if (!isFirst) {
      IStyle areaStyle=root.getStyle();
      areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
      areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
    }
  }
  tableLM.resolveBorderConflict((CellArea)root);
  root.setWidth(columnWidth);
}","protected void createRoot(){
  if (!isFirst) {
    int startColumn=cellContent.getColumn();
    int endColumn=startColumn + cellContent.getColSpan();
    columnWidth=tableLM.getCellWidth(startColumn,endColumn);
  }
  if (root == null) {
    CellArea cell=AreaFactory.createCellArea(cellContent);
    cell.setRowSpan(tableLM.getRowSpan(cellContent));
    root=cell;
    if (!isFirst) {
      IStyle areaStyle=root.getStyle();
      areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
      areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
    }
  }
  tableLM.resolveBorderConflict((CellArea)root,isFirst);
  root.setWidth(columnWidth);
}",0.993939393939394
76093,"protected void initialize(){
  boolean isNewArea=(root == null);
  createRoot();
  if (isNewArea) {
    IStyle areaStyle=root.getStyle();
    removeMargin(areaStyle);
    validateBoxProperty(root.getStyle(),columnWidth,context.getMaxHeight());
    setOffsetX(root.getContentX());
    setOffsetY(root.getContentY());
    if (isFirst) {
      isFirst=false;
    }
    setCurrentBP(0);
    setCurrentIP(0);
  }
  maxAvaWidth=root.getContentWidth();
  root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  maxAvaHeight=root.getContentHeight();
}","protected void initialize(){
  boolean isNewArea=(root == null);
  createRoot();
  if (isNewArea) {
    IStyle areaStyle=root.getStyle();
    removeMargin(areaStyle);
    validateBoxProperty(root.getStyle(),columnWidth,context.getMaxHeight());
    setOffsetX(root.getContentX());
    setOffsetY(root.getContentY());
    setCurrentBP(0);
    setCurrentIP(0);
  }
  maxAvaWidth=root.getContentWidth();
  root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  maxAvaHeight=root.getContentHeight();
}",0.956439393939394
76094,"private void repeat(){
  if (isFirst || tableLM.isFirst) {
    isFirst=false;
    return;
  }
  if (!needRepeat || !isCurrentDetailBand()) {
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setMaxWidth(context.getMaxWidth());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,null);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row,false,true);
      tableLM.addRow(row,true);
      count++;
    }
    repeatCount+=count;
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
  needRepeat=false;
}","private void repeat(){
  if (isFirst || tableLM.isFirst) {
    isFirst=false;
    return;
  }
  if (!needRepeat || !isCurrentDetailBand()) {
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=tableLM.getTableRegionLayout();
  regionLM.initialize(header);
  regionLM.setGroupLevel(getGroupLevel());
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row,false,true);
      tableLM.addRow(row,true,false);
      count++;
    }
    repeatCount+=count;
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
  needRepeat=false;
}",0.8230003212335368
76095,"public int[] resolveFixedLayout(int maxWidth){
  int columnNumber=table.getColumnCount();
  DimensionType[] columns=new DimensionType[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    IColumn column=(IColumn)table.getColumn(i);
    DimensionType w=column.getWidth();
    if (PDFTableLM.this.isColumnHidden(column)) {
      columns[i]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
 else {
      if (w == null) {
        columns[i]=null;
      }
 else {
        columns[i]=new DimensionType(w.getMeasure(),w.getUnits());
      }
    }
  }
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),maxWidth);
  int tableWidth;
  if (specifiedWidth > 0) {
    tableWidth=specifiedWidth;
  }
 else {
    tableWidth=maxWidth;
  }
  formalize(columns,tableWidth);
  return resolve(tableWidth,columns);
}","public int[] resolveFixedLayout(int maxWidth){
  int columnNumber=table.getColumnCount();
  DimensionType[] columns=new DimensionType[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    IColumn column=table.getColumn(i);
    DimensionType w=column.getWidth();
    if (PDFTableLM.this.isColumnHidden(column)) {
      columns[i]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
 else {
      if (w == null) {
        columns[i]=null;
      }
 else {
        columns[i]=new DimensionType(w.getMeasure(),w.getUnits());
      }
    }
  }
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),maxWidth);
  int tableWidth;
  if (specifiedWidth > 0) {
    tableWidth=specifiedWidth;
  }
 else {
    tableWidth=maxWidth;
  }
  formalize(columns,tableWidth);
  return resolve(tableWidth,columns);
}",0.994488671157379
76096,"public int[] resolve(int specifiedWidth,int maxWidth){
  assert(specifiedWidth <= maxWidth);
  int columnNumber=table.getColumnCount();
  int[] columns=new int[columnNumber];
  int columnWithWidth=0;
  int colSum=0;
  for (int j=0; j < table.getColumnCount(); j++) {
    IColumn column=(IColumn)table.getColumn(j);
    int columnWidth=getDimensionValue(column.getWidth(),tableWidth);
    if (columnWidth > 0) {
      columns[j]=columnWidth;
      colSum+=columnWidth;
      columnWithWidth++;
    }
 else {
      columns[j]=-1;
    }
  }
  if (columnWithWidth == columnNumber) {
    if (colSum <= maxWidth) {
      return columns;
    }
 else {
      float delta=colSum - maxWidth;
      for (int i=0; i < columnNumber; i++) {
        columns[i]-=(int)(delta * columns[i] / colSum);
      }
      return columns;
    }
  }
 else {
    if (specifiedWidth == 0) {
      if (colSum < maxWidth) {
        distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
      }
 else {
        redistributeWidth(columns,colSum - maxWidth + (columnNumber - columnWithWidth) * maxWidth / columnNumber,maxWidth,colSum);
      }
    }
 else {
      if (colSum < specifiedWidth) {
        distributeLeftWidth(columns,(specifiedWidth - colSum) / (columnNumber - columnWithWidth));
      }
 else {
        if (colSum < maxWidth) {
          distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
        }
 else {
          redistributeWidth(columns,colSum - specifiedWidth + (columnNumber - columnWithWidth) * specifiedWidth / columnNumber,specifiedWidth,colSum);
        }
      }
    }
  }
  return columns;
}","public int[] resolve(int specifiedWidth,int maxWidth){
  assert(specifiedWidth <= maxWidth);
  int columnNumber=table.getColumnCount();
  int[] columns=new int[columnNumber];
  int columnWithWidth=0;
  int colSum=0;
  for (int j=0; j < table.getColumnCount(); j++) {
    IColumn column=table.getColumn(j);
    int columnWidth=getDimensionValue(column.getWidth(),tableWidth);
    if (columnWidth > 0) {
      columns[j]=columnWidth;
      colSum+=columnWidth;
      columnWithWidth++;
    }
 else {
      columns[j]=-1;
    }
  }
  if (columnWithWidth == columnNumber) {
    if (colSum <= maxWidth) {
      return columns;
    }
 else {
      float delta=colSum - maxWidth;
      for (int i=0; i < columnNumber; i++) {
        columns[i]-=(int)(delta * columns[i] / colSum);
      }
      return columns;
    }
  }
 else {
    if (specifiedWidth == 0) {
      if (colSum < maxWidth) {
        distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
      }
 else {
        redistributeWidth(columns,colSum - maxWidth + (columnNumber - columnWithWidth) * maxWidth / columnNumber,maxWidth,colSum);
      }
    }
 else {
      if (colSum < specifiedWidth) {
        distributeLeftWidth(columns,(specifiedWidth - colSum) / (columnNumber - columnWithWidth));
      }
 else {
        if (colSum < maxWidth) {
          distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
        }
 else {
          redistributeWidth(columns,colSum - specifiedWidth + (columnNumber - columnWithWidth) * specifiedWidth / columnNumber,specifiedWidth,colSum);
        }
      }
    }
  }
  return columns;
}",0.9972669298511996
76097,"/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea){
  if (layout != null) {
    layout.resolveBorderConflict(cellArea);
  }
}","/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  if (layout != null) {
    layout.resolveBorderConflict(cellArea,isFirst);
  }
}",0.9396984924623116
76098,"public void addRow(RowArea row,boolean finished){
  if (layout != null) {
    layout.addRow(row,finished);
  }
}","public void addRow(RowArea row,boolean finished,boolean repeated){
  if (layout != null) {
    layout.addRow(row,finished,repeated);
  }
}",0.896
76099,"protected void closeLayout(){
  if (root == null) {
    return;
  }
  int borderHeight=0;
  if (layout != null) {
    layout.resolveAll();
    borderHeight=layout.resolveBottomBorder();
    layout.remove((TableArea)root);
  }
  root.setHeight(getCurrentBP() + getOffsetY() + borderHeight);
}","protected void closeLayout(){
  regionLayout=null;
  if (root == null) {
    return;
  }
  int borderHeight=0;
  if (layout != null) {
    layout.resolveAll();
    borderHeight=layout.resolveBottomBorder();
    layout.remove((TableArea)root);
  }
  root.setHeight(getCurrentBP() + getOffsetY() + borderHeight);
}",0.965174129353234
76100,"private int getGroupLevel(){
  if (!groupStack.isEmpty()) {
    return ((Integer)groupStack.peek()).intValue();
  }
  return -1;
}","protected int getGroupLevel(){
  if (!groupStack.isEmpty()) {
    return ((Integer)groupStack.peek()).intValue();
  }
  return -1;
}",0.9694656488549618
76101,"protected void createRoot(){
  root=(ContainerArea)AreaFactory.createTableArea((ITableContent)content);
  root.setWidth(tableWidth);
  if (!isFirst) {
    root.getStyle().setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
  }
}","protected void createRoot(){
  root=AreaFactory.createTableArea((ITableContent)content);
  root.setWidth(tableWidth);
  if (!isFirst) {
    root.getStyle().setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
  }
}",0.9662921348314608
76102,"protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  IReportContent report=tableContent.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  captionLabel.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(tableContent.getColumnCount());
  cell.setRowSpan(1);
  cell.setColumn(0);
  captionLabel.setParent(cell);
  cell.getChildren().add(captionLabel);
  IRowContent row=report.createRowContent();
  row.getChildren().add(cell);
  cell.setParent(row);
  ITableBandContent band=report.createTableBandContent();
  band.getChildren().add(row);
  row.setParent(band);
  band.setParent(tableContent);
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(context.getLayoutEngine());
  con.setFactory(context.getFactory());
  con.setFormat(context.getFormat());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,content,layoutInfo);
  regionLM.initialize(band,null);
  regionLM.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea,false,false);
      repeatRowCount++;
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  IReportContent report=tableContent.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  captionLabel.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(tableContent.getColumnCount());
  cell.setRowSpan(1);
  cell.setColumn(0);
  captionLabel.setParent(cell);
  cell.getChildren().add(captionLabel);
  IRowContent row=report.createRowContent();
  row.getChildren().add(cell);
  cell.setParent(row);
  ITableBandContent band=report.createTableBandContent();
  band.getChildren().add(row);
  row.setParent(band);
  band.setParent(tableContent);
  PDFTableRegionLM regionLM=getTableRegionLayout();
  regionLM.initialize(band);
  regionLM.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea,false,false);
      repeatRowCount++;
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.8907159986296677
76103,"protected void repeatHeader(){
  if (isFirst) {
    return;
  }
  ITableBandContent header=(ITableBandContent)tableContent.getHeader();
  if (!repeatHeader || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setMaxWidth(context.getMaxWidth());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableContent,layoutInfo);
  regionLM.initialize(header,null);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableContent.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row,false,pageBreakAvoid);
      addRow(row,true);
      repeatRowCount++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
  }
  tableContent.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (isFirst) {
    return;
  }
  ITableBandContent header=(ITableBandContent)tableContent.getHeader();
  if (!repeatHeader || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_HEADER) {
        return;
      }
    }
  }
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=getTableRegionLayout();
  regionLM.initialize(header);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableContent.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row,false,pageBreakAvoid);
      addRow(row,true,true);
      repeatRowCount++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
  }
  tableContent.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.8412473423104181
76104,"public PDFTableRegionLM(PDFLayoutEngineContext context,IContent content,TableLayoutInfo layoutInfo){
  super(context,null,content,null);
  this.layoutInfo=layoutInfo;
}","public PDFTableRegionLM(PDFLayoutEngineContext context,IContent content,TableLayoutInfo layoutInfo,TableAreaLayout regionLayout){
  super(context,null,content,null);
  this.layoutInfo=layoutInfo;
  this.layout=regionLayout;
}",0.8549618320610687
76105,"/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String pattern,String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder,boolean isDistinct,String sortDirection,String sortBy){
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(sortDirection);
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(sortBy);
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      IDataEngine dataEngine=executionContext.getDataEngine();
      DataRequestSession dteSession=getDataSession();
      dataEngine.defineDataSet(dataSet);
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      if (limit > 0) {
        queryDefn.setMaxRows(limit);
      }
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      String labelColumnName=LABEL_PREFIX;
      ;
      String valueColumnName=VALUE_PREFIX;
      ;
      if (labelExpr != null) {
        queryDefn.addResultSetExpression(labelColumnName,labelExpr);
      }
      queryDefn.addResultSetExpression(valueColumnName,valueExpr);
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteSession.prepare(queryDefn,getAppContext());
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      Map checkPool=new HashMap();
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelColumnName);
        }
        Object value=iter.getValue(valueColumnName);
        value=convertToType(value,dataType);
        if (isDistinct) {
          if (!checkPool.containsKey(value)) {
            checkPool.put(value,value);
            choices.add(new SelectionChoice(label,value));
            count++;
          }
        }
 else {
          choices.add(new SelectionChoice(label,value));
          count++;
        }
        if ((limit != 0) && (count >= limit)) {
          break;
        }
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,pattern,sortDirectionValue,ULocale.forLocale(locale)));
  return choices;
}","/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String pattern,String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder,boolean isDistinct,String sortDirection,String sortBy){
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(sortDirection);
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(sortBy);
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      IDataEngine dataEngine=executionContext.getDataEngine();
      DataRequestSession dteSession=getDataSession();
      dataEngine.defineDataSet(dataSet);
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      if (limit > 0) {
        queryDefn.setMaxRows(limit);
      }
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      String labelColumnName=LABEL_PREFIX;
      ;
      String valueColumnName=VALUE_PREFIX;
      ;
      if (labelExpr != null) {
        queryDefn.addResultSetExpression(labelColumnName,labelExpr);
      }
      queryDefn.addResultSetExpression(valueColumnName,valueExpr);
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteSession.prepare(queryDefn,getAppContext());
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      Map checkPool=new HashMap();
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelColumnName);
        }
        Object value=iter.getValue(valueColumnName);
        value=convertToType(value,dataType);
        if (isDistinct) {
          if (!checkPool.containsKey(value)) {
            checkPool.put(value,value);
            choices.add(new SelectionChoice(label,value));
            count++;
          }
        }
 else {
          choices.add(new SelectionChoice(label,value));
          count++;
        }
        if ((limit != 0) && (count >= limit)) {
          break;
        }
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,pattern,sortDirectionValue,ULocale.forLocale(locale)));
  return choices;
}",0.9969893836159088
76106,"/** 
 * Handle output List Box type parameter
 * @throws Exception
 */
protected void __handleListBox() throws Exception {
  if (paramDef.getGroup() != null && paramDef.getGroup().cascade()) {
    JspWriter writer=pageContext.getOut();
    if (pageContext.findAttribute(IMPORT_FILES_ATTR) == null) {
      String baseURL=""String_Node_Str"";
      if (viewer.getBaseURL() != null) {
        baseURL=viewer.getBaseURL() + baseURL;
      }
 else {
        baseURL=((HttpServletRequest)pageContext.getRequest()).getContextPath() + baseURL;
      }
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      this.__createProgressBar(baseURL);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      pageContext.setAttribute(IMPORT_FILES_ATTR,Boolean.TRUE);
    }
    this.groupObjName=this.viewer.getId() + ""String_Node_Str"" + paramDef.getGroup().getName()+ ""String_Node_Str"";
    if (pageContext.findAttribute(this.groupObjName) == null) {
      writer.write(""String_Node_Str"" + this.groupObjName + ""String_Node_Str"");
      pageContext.setAttribute(this.groupObjName,Boolean.TRUE);
    }
    Collection selectionList=getParameterSelectionListForCascadingGroup();
    __handleCommonListBox(selectionList);
    __handleCascadingListBox();
  }
 else {
    Collection selectionList=BirtReportServiceFactory.getReportService().getParameterSelectionList(viewer.getReportDesignHandle(),options,param.getName());
    __handleCommonListBox(selectionList);
  }
}","/** 
 * Handle output List Box type parameter
 * @throws Exception
 */
protected void __handleListBox() throws Exception {
  if (paramDef.getGroup() != null && paramDef.getGroup().cascade()) {
    JspWriter writer=pageContext.getOut();
    if (pageContext.findAttribute(IMPORT_FILES_ATTR) == null) {
      String baseURL=""String_Node_Str"";
      if (viewer.getBaseURL() != null) {
        baseURL=viewer.getBaseURL() + baseURL;
      }
 else {
        baseURL=((HttpServletRequest)pageContext.getRequest()).getContextPath() + baseURL;
      }
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + baseURL + ""String_Node_Str"");
      this.__createProgressBar(baseURL);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      pageContext.setAttribute(IMPORT_FILES_ATTR,Boolean.TRUE);
    }
    this.groupObjName=""String_Node_Str"" + this.viewer.getId() + ""String_Node_Str""+ paramDef.getGroup().getName();
    if (pageContext.findAttribute(this.groupObjName) == null) {
      writer.write(""String_Node_Str"" + this.groupObjName + ""String_Node_Str"");
      pageContext.setAttribute(this.groupObjName,Boolean.TRUE);
    }
    Collection selectionList=getParameterSelectionListForCascadingGroup();
    __handleCommonListBox(selectionList);
    __handleCascadingListBox();
  }
 else {
    Collection selectionList=BirtReportServiceFactory.getReportService().getParameterSelectionList(viewer.getReportDesignHandle(),options,param.getName());
    __handleCommonListBox(selectionList);
  }
}",0.9915218312844426
76107,"public IReportItemExecutor getNextChild(){
  IReportItemExecutor nextExecutor=null;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (ev.type != ColumnEvent.ROW_EDGE_CHANGE && rowIndex == 0) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),rowSpan,colSpan,currentColIndex - colSpan + 1);
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowGrandTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
}
if (ev.type == ColumnEvent.MEASURE_CHANGE || ev.type == ColumnEvent.COLUMN_EDGE_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
if (columnGroups != null && columnGroups.size() > 0) {
EdgeGroup gp=(EdgeGroup)columnGroups.get(columnGroups.size() - 1);
lastDimensionIndex=gp.dimensionIndex;
lastLevelIndex=gp.levelIndex;
}
 else {
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
}
hasLast=true;
}
 else if (ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.ROW_EDGE_CHANGE && rowIndex == 0) {
rowSpan=hasMeasureHeader(ROW_AXIS_TYPE) ? Math.max(totalMeasureCount,1) : 1;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return nextExecutor;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowIndex == 0) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),rowSpan,colSpan,currentColIndex - colSpan + 1);
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowGrandTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
}
}
return nextExecutor;
}","public IReportItemExecutor getNextChild(){
  IReportItemExecutor nextExecutor=null;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (ev.type != ColumnEvent.ROW_EDGE_CHANGE && isFirstTotalRow) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),rowSpan,colSpan,currentColIndex - colSpan + 1);
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowGrandTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
}
if (ev.type == ColumnEvent.MEASURE_CHANGE || ev.type == ColumnEvent.COLUMN_EDGE_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
if (columnGroups != null && columnGroups.size() > 0) {
EdgeGroup gp=(EdgeGroup)columnGroups.get(columnGroups.size() - 1);
lastDimensionIndex=gp.dimensionIndex;
lastLevelIndex=gp.levelIndex;
}
 else {
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
}
hasLast=true;
}
 else if (ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.ROW_EDGE_CHANGE && isFirstTotalRow) {
rowSpan=totalRowSpan;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return nextExecutor;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (isFirstTotalRow) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),rowSpan,colSpan,currentColIndex - colSpan + 1);
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowGrandTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
}
}
return nextExecutor;
}",0.834144045190648
76108,"private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  totalMeasureCount=crosstabItem.getMeasureCount();
  hasLast=false;
  walker.reload();
}","private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  totalMeasureCount=crosstabItem.getMeasureCount();
  boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  isFirstTotalRow=rowIndex == GroupUtil.getFirstTotalRowIndex(crosstabItem,-1,-1,isVerticalMeasure);
  totalRowSpan=GroupUtil.getTotalRowSpan(crosstabItem,-1,-1,isVerticalMeasure);
  hasLast=false;
  walker.reload();
}",0.631578947368421
76109,"private void prepareChildren(){
  currentGroupIndex=0;
  hasMeasureHeader=hasMeasureHeader(COLUMN_AXIS_TYPE);
}","private void prepareChildren(){
  currentGroupIndex=0;
  hasMeasureHeader=GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE);
}",0.9061224489795918
76110,"/** 
 * Advance until find next executor or till the end.
 */
private void advance(){
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
case ColumnEvent.MEASURE_HEADER_CHANGE:
        if (blankStarted && ev.type != ColumnEvent.ROW_EDGE_CHANGE && ev.type != ColumnEvent.MEASURE_HEADER_CHANGE) {
          nextExecutor=new CrosstabCellExecutor(this,null,rowSpan,colSpan,currentColIndex - colSpan + 1);
          blankStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
    if (edgeStarted && isMeetEdgeEnd(ev)) {
      nextExecutor=new CrosstabCellExecutor(this,levelView.getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
      ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
      ((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
      edgeStarted=false;
      hasLast=false;
    }
 else     if (subTotalStarted && (ev.type != currentChangeType || ev.dimensionIndex != subTotalDimensionIndex || ev.levelIndex != subTotalLevelIndex)) {
      nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(COLUMN_AXIS_TYPE,subTotalDimensionIndex).getLevel(subTotalLevelIndex).getAggregationHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
      ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
      subTotalStarted=false;
      hasLast=false;
    }
  break;
case ColumnEvent.GRAND_TOTAL_CHANGE:
if (grandTotalStarted && ev.type != currentChangeType) {
  nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
  grandTotalStarted=false;
  hasLast=false;
}
break;
}
if (isSubTotalNeedStart(ev)) {
subTotalStarted=true;
rowSpan=GroupUtil.computeGroupSpan(columnGroups,subTotalDimensionIndex,subTotalLevelIndex);
if (isLayoutDownThenOver) {
rowSpan++;
}
colSpan=0;
hasLast=true;
}
 else if (isGrandTotalNeedStart(ev)) {
grandTotalStarted=true;
rowSpan=GroupUtil.computeGroupSpan(columnGroups,currentDimensionIndex,currentLevelIndex) + 1;
colSpan=0;
hasLast=true;
}
 else if (isEdgeNeedStart(ev)) {
edgeStarted=true;
rowSpan=1;
colSpan=0;
hasLast=true;
}
 else if (isBlankNeedStart(ev)) {
blankStarted=true;
rowSpan=GroupUtil.computeGroupSpan(columnGroups,currentDimensionIndex,currentLevelIndex) + 1;
if (hasMeasureHeader(COLUMN_AXIS_TYPE)) {
rowSpan++;
}
hasLast=true;
}
currentEdgePosition=ev.dataPosition;
currentChangeType=ev.type;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
if (blankStarted) {
nextExecutor=new CrosstabCellExecutor(this,null,rowSpan,colSpan,currentColIndex - colSpan + 1);
}
 else if (edgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,levelView.getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
edgeStarted=false;
}
 else if (subTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(COLUMN_AXIS_TYPE,subTotalDimensionIndex).getLevel(subTotalLevelIndex).getAggregationHeader(),rowSpan,colSpan,currentColIndex);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
subTotalStarted=false;
}
 else if (grandTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
grandTotalStarted=false;
}
}
}","/** 
 * Advance until find next executor or till the end.
 */
private void advance(){
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
case ColumnEvent.MEASURE_HEADER_CHANGE:
        if (blankStarted && ev.type != ColumnEvent.ROW_EDGE_CHANGE && ev.type != ColumnEvent.MEASURE_HEADER_CHANGE) {
          nextExecutor=new CrosstabCellExecutor(this,null,rowSpan,colSpan,currentColIndex - colSpan + 1);
          blankStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
    if (edgeStarted && isMeetEdgeEnd(ev)) {
      nextExecutor=new CrosstabCellExecutor(this,levelView.getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
      ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
      ((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
      edgeStarted=false;
      hasLast=false;
    }
 else     if (subTotalStarted && (ev.type != currentChangeType || ev.dimensionIndex != subTotalDimensionIndex || ev.levelIndex != subTotalLevelIndex)) {
      nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(COLUMN_AXIS_TYPE,subTotalDimensionIndex).getLevel(subTotalLevelIndex).getAggregationHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
      ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
      subTotalStarted=false;
      hasLast=false;
    }
  break;
case ColumnEvent.GRAND_TOTAL_CHANGE:
if (grandTotalStarted && ev.type != currentChangeType) {
  nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
  grandTotalStarted=false;
  hasLast=false;
}
break;
}
if (isSubTotalNeedStart(ev)) {
subTotalStarted=true;
rowSpan=GroupUtil.computeGroupSpan(columnGroups,subTotalDimensionIndex,subTotalLevelIndex);
if (isLayoutDownThenOver) {
rowSpan++;
}
colSpan=0;
hasLast=true;
}
 else if (isGrandTotalNeedStart(ev)) {
grandTotalStarted=true;
rowSpan=GroupUtil.computeGroupSpan(columnGroups,currentDimensionIndex,currentLevelIndex) + 1;
colSpan=0;
hasLast=true;
}
 else if (isEdgeNeedStart(ev)) {
edgeStarted=true;
rowSpan=1;
colSpan=0;
hasLast=true;
}
 else if (isBlankNeedStart(ev)) {
blankStarted=true;
rowSpan=GroupUtil.computeGroupSpan(columnGroups,currentDimensionIndex,currentLevelIndex) + 1;
if (GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE)) {
rowSpan++;
}
hasLast=true;
}
currentEdgePosition=ev.dataPosition;
currentChangeType=ev.type;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
if (blankStarted) {
nextExecutor=new CrosstabCellExecutor(this,null,rowSpan,colSpan,currentColIndex - colSpan + 1);
}
 else if (edgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,levelView.getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
edgeStarted=false;
}
 else if (subTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(COLUMN_AXIS_TYPE,subTotalDimensionIndex).getLevel(subTotalLevelIndex).getAggregationHeader(),rowSpan,colSpan,currentColIndex);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
subTotalStarted=false;
}
 else if (grandTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
grandTotalStarted=false;
}
}
}",0.9970172480871482
76111,"private void prepareChildren(){
  int measureCount=crosstabItem.getMeasureCount();
  if (columnGroups.size() > 0 || hasMeasureHeader(COLUMN_AXIS_TYPE)) {
    if (children == null) {
      children=new ArrayList();
    }
    CrosstabHeaderExecutor headerExecutor=new CrosstabHeaderExecutor(this);
    children.add(headerExecutor);
  }
  if (rowGroups.size() > 0 || measureCount > 0) {
    if (children == null) {
      children=new ArrayList();
    }
    try {
      EdgeCursor rowCursor=getRowEdgeCursor();
      if (rowCursor != null) {
        rowCursor.beforeFirst();
        if (rowCursor.next()) {
          CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,0,rowCursor);
          children.add(groupExecutor);
        }
      }
 else {
        CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,0,null);
        children.add(groupExecutor);
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  if (crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
    if (children == null) {
      children=new ArrayList();
    }
    CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
    children.add(totalExecutor);
  }
}","private void prepareChildren(){
  int measureCount=crosstabItem.getMeasureCount();
  if (columnGroups.size() > 0 || GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE)) {
    if (children == null) {
      children=new ArrayList();
    }
    CrosstabHeaderExecutor headerExecutor=new CrosstabHeaderExecutor(this);
    children.add(headerExecutor);
  }
  if (rowGroups.size() > 0 || measureCount > 0) {
    if (children == null) {
      children=new ArrayList();
    }
    try {
      EdgeCursor rowCursor=getRowEdgeCursor();
      if (rowCursor != null) {
        rowCursor.beforeFirst();
        if (rowCursor.next()) {
          CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,0,rowCursor);
          children.add(groupExecutor);
        }
      }
 else {
        CrosstabMeasureExecutor measureExecutor=new CrosstabMeasureExecutor(this);
        children.add(measureExecutor);
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  if (rowGroups.size() > 0 && crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
    if (children == null) {
      children=new ArrayList();
    }
    CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
    children.add(totalExecutor);
  }
}",0.9278810408921933
76112,"private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  isFirst=true;
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  totalMeasureCount=crosstabItem.getMeasureCount();
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  factor=hasMeasureHeader(ROW_AXIS_TYPE) ? Math.max(totalMeasureCount,1) : 1;
  hasLast=false;
  walker.reload();
}","private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  isFirst=true;
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  totalMeasureCount=crosstabItem.getMeasureCount();
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  hasLast=false;
  walker.reload();
}",0.8772845953002611
76113,"private void advance(){
  int mx;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (rowEdgeStarted) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
          rowEdgeStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
}
if (isRowEdgeNeedStart(ev)) {
rowEdgeStarted=true;
rowSpan=GroupUtil.computeRowSpan(crosstabItem,rowGroups,ev.dimensionIndex,ev.levelIndex,getRowEdgeCursor(),isLayoutDownThenOver) * factor;
colSpan=0;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_CHANGE || ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE || ev.type == ColumnEvent.COLUMN_EDGE_CHANGE || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowEdgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
rowEdgeStarted=false;
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
}
}
}","private void advance(){
  int mx;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (rowEdgeStarted) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
          rowEdgeStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
}
if (isRowEdgeNeedStart(ev)) {
rowEdgeStarted=true;
rowSpan=GroupUtil.computeRowSpan(crosstabItem,rowGroups,ev.dimensionIndex,ev.levelIndex,getRowEdgeCursor(),isLayoutDownThenOver);
colSpan=0;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_CHANGE || ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE || ev.type == ColumnEvent.COLUMN_EDGE_CHANGE || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowEdgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
rowEdgeStarted=false;
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? crosstabItem.getMeasure(mx).getCell() : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
}
}
}",0.9988014382740712
76114,"private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  isFirst=true;
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  totalMeasureCount=crosstabItem.getMeasureCount();
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  if (isLayoutDownThenOver) {
    startTotalDimensionIndex=dimensionIndex;
    startTotalLevelIndex=levelIndex;
  }
 else {
    EdgeGroup nextGroup=GroupUtil.getNextGroup(rowGroups,dimensionIndex,levelIndex);
    startTotalDimensionIndex=nextGroup.dimensionIndex;
    startTotalLevelIndex=nextGroup.levelIndex;
  }
  DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex);
  LevelViewHandle lv=dv.getLevel(levelIndex);
  isSubTotalBefore=lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation());
  factor=hasMeasureHeader(ROW_AXIS_TYPE) ? Math.max(totalMeasureCount,1) : 1;
  hasLast=false;
  walker.reload();
}","private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  isFirst=true;
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  totalMeasureCount=crosstabItem.getMeasureCount();
  isLayoutDownThenOver=PAGE_LAYOUT_DOWN_THEN_OVER.equals(crosstabItem.getPageLayout());
  if (isLayoutDownThenOver) {
    startTotalDimensionIndex=dimensionIndex;
    startTotalLevelIndex=levelIndex;
  }
 else {
    EdgeGroup nextGroup=GroupUtil.getNextGroup(rowGroups,dimensionIndex,levelIndex);
    startTotalDimensionIndex=nextGroup.dimensionIndex;
    startTotalLevelIndex=nextGroup.levelIndex;
  }
  DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex);
  LevelViewHandle lv=dv.getLevel(levelIndex);
  isSubTotalBefore=lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation());
  boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  isFirstTotalRow=rowIndex == GroupUtil.getFirstTotalRowIndex(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  totalRowSpan=GroupUtil.getTotalRowSpan(crosstabItem,dimensionIndex,levelIndex,isVerticalMeasure);
  hasLast=false;
  walker.reload();
}",0.8151785714285714
76115,"private void advance(){
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (rowEdgeStarted) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          rowEdgeStarted=false;
          hasLast=false;
        }
 else         if (rowSubTotalStarted && ev.type != ColumnEvent.ROW_EDGE_CHANGE) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex).getLevel(levelIndex).getAggregationHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          rowSubTotalStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
}
if (isRowEdgeNeedStart(ev)) {
rowEdgeStarted=true;
rowSpan=GroupUtil.computeRowSpan(crosstabItem,rowGroups,ev.dimensionIndex,ev.levelIndex,getRowEdgeCursor(),isLayoutDownThenOver) * factor;
colSpan=0;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (!rowSubTotalStarted && ev.type == ColumnEvent.ROW_EDGE_CHANGE && ev.dimensionIndex == startTotalDimensionIndex && ev.levelIndex == startTotalLevelIndex && rowIndex == 0) {
rowSubTotalStarted=true;
rowSpan=factor;
colSpan=0;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_CHANGE || ev.type == ColumnEvent.COLUMN_EDGE_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
if (columnGroups != null && columnGroups.size() > 0) {
EdgeGroup gp=(EdgeGroup)columnGroups.get(columnGroups.size() - 1);
lastDimensionIndex=gp.dimensionIndex;
lastLevelIndex=gp.levelIndex;
}
 else {
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
}
hasLast=true;
}
 else if (ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowEdgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
rowEdgeStarted=false;
}
 else if (rowSubTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex).getLevel(levelIndex).getAggregationHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
}
}
}","private void advance(){
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (rowEdgeStarted) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          rowEdgeStarted=false;
          hasLast=false;
        }
 else         if (rowSubTotalStarted && ev.type != ColumnEvent.ROW_EDGE_CHANGE) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex).getLevel(levelIndex).getAggregationHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          rowSubTotalStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
}
if (isRowEdgeNeedStart(ev)) {
rowEdgeStarted=true;
rowSpan=GroupUtil.computeRowSpan(crosstabItem,rowGroups,ev.dimensionIndex,ev.levelIndex,getRowEdgeCursor(),isLayoutDownThenOver);
colSpan=0;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (!rowSubTotalStarted && ev.type == ColumnEvent.ROW_EDGE_CHANGE && ev.dimensionIndex == startTotalDimensionIndex && ev.levelIndex == startTotalLevelIndex && isFirstTotalRow) {
rowSubTotalStarted=true;
rowSpan=totalRowSpan;
colSpan=0;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_CHANGE || ev.type == ColumnEvent.COLUMN_EDGE_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
if (columnGroups != null && columnGroups.size() > 0) {
EdgeGroup gp=(EdgeGroup)columnGroups.get(columnGroups.size() - 1);
lastDimensionIndex=gp.dimensionIndex;
lastLevelIndex=gp.levelIndex;
}
 else {
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
}
hasLast=true;
}
 else if (ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowEdgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
rowEdgeStarted=false;
}
 else if (rowSubTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,dimensionIndex).getLevel(levelIndex).getAggregationHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
}
}
}",0.99343753728672
76116,"public BidiSplitter(Chunk inputChunk){
  this.chunkText=inputChunk.getText().toCharArray();
  this.baseLevel=inputChunk.getBaseLevel();
  this.bidi=createBidi(inputChunk.getText(),baseLevel);
}","public BidiSplitter(Chunk inputChunk){
  this.chunkText=inputChunk.getText().toCharArray();
  this.baseLevel=inputChunk.getBaseLevel();
  this.bidi=createBidi(inputChunk.getText(),baseLevel);
  if (baseLevel < 0) {
    baseLevel=bidi.getBaseLevel();
    inputChunk.setBaseLevel(baseLevel);
    lastRun=baseLevel;
  }
}",0.7553816046966731
76117,"private Chunk buildChunk(){
  if (currentRun < bidi.getRunCount()) {
    endIndex=bidi.getRunLimit(currentRun);
    int level=bidi.getRunLevel(currentRun);
    String text=null;
    if (level == Bidi.DIRECTION_RIGHT_TO_LEFT) {
      for (int i=beginIndex; i < endIndex; i++) {
        if (needMirroring(chunkText[i])) {
          chunkText[i]=(char)mirrorChars.get(chunkText[i]);
        }
      }
      text=new String(chunkText,beginIndex,endIndex - beginIndex);
    }
 else {
      text=new String(chunkText,beginIndex,endIndex - beginIndex);
    }
    Chunk c=new Chunk(text,beginIndex,baseLevel,bidi.getRunLevel(currentRun));
    beginIndex=endIndex;
    currentRun++;
    return c;
  }
  return null;
}","private Chunk buildChunk(){
  if (currentRun < bidi.getRunCount()) {
    endIndex=bidi.getRunLimit(currentRun);
    int level=getAbsRunLevel();
    String text=null;
    if (level == Bidi.DIRECTION_RIGHT_TO_LEFT) {
      for (int i=beginIndex; i < endIndex; i++) {
        if (needMirroring(chunkText[i])) {
          chunkText[i]=(char)mirrorChars.get(chunkText[i]);
        }
      }
      text=new String(chunkText,beginIndex,endIndex - beginIndex);
    }
 else {
      text=new String(chunkText,beginIndex,endIndex - beginIndex);
    }
    Chunk c=new Chunk(text,beginIndex,baseLevel,level);
    beginIndex=endIndex;
    currentRun++;
    return c;
  }
  return null;
}",0.9645184648805214
76118,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}",0.9962900505902192
76119,"protected Element createText(String text){
  Element elem=dom.createElement(""String_Node_Str"");
  elem.appendChild(dom.createTextNode(text));
switch (getFont().getStyle()) {
case Font.BOLD:
    elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  break;
case Font.ITALIC:
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case (Font.BOLD + Font.ITALIC):
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
}
String textDecorator=null;
Map attributes=getFont().getAttributes();
if (attributes.get(TextAttribute.UNDERLINE) == TextAttribute.UNDERLINE_ON) {
textDecorator=""String_Node_Str"";
}
if (attributes.get(TextAttribute.STRIKETHROUGH) == TextAttribute.STRIKETHROUGH_ON) {
if (textDecorator == null) textDecorator=""String_Node_Str"";
 else textDecorator+=""String_Node_Str"";
}
if (textDecorator != null) elem.setAttribute(""String_Node_Str"",textDecorator);
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",getFont().getFamily());
elem.setAttribute(""String_Node_Str"",Integer.toString(getFont().getSize()));
String style=getRenderingStyle(RenderingHints.KEY_TEXT_ANTIALIASING);
if (color != null) {
String alpha=alphaToString(color);
if (alpha != null) style+=""String_Node_Str"" + alpha + ""String_Node_Str"";
style+=""String_Node_Str"" + serializeToString(color) + ""String_Node_Str"";
}
elem.setAttribute(""String_Node_Str"",style);
if (transforms.getType() != AffineTransform.TYPE_IDENTITY) {
double[] matrix=new double[6];
transforms.getMatrix(matrix);
elem.setAttribute(""String_Node_Str"",""String_Node_Str"" + matrix[0] + ""String_Node_Str""+ matrix[1]+ ""String_Node_Str""+ matrix[2]+ ""String_Node_Str""+ matrix[3]+ ""String_Node_Str""+ matrix[4]+ ""String_Node_Str""+ matrix[5]+ ""String_Node_Str"");
}
return elem;
}","protected Element createText(String text){
  Element elem=dom.createElement(""String_Node_Str"");
  elem.appendChild(dom.createTextNode(text));
switch (getFont().getStyle()) {
case Font.BOLD:
    elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  break;
case Font.ITALIC:
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case (Font.BOLD + Font.ITALIC):
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
}
String textDecorator=null;
Map attributes=getFont().getAttributes();
if (attributes.get(TextAttribute.UNDERLINE) == TextAttribute.UNDERLINE_ON) {
textDecorator=""String_Node_Str"";
}
if (attributes.get(TextAttribute.STRIKETHROUGH) == TextAttribute.STRIKETHROUGH_ON) {
if (textDecorator == null) textDecorator=""String_Node_Str"";
 else textDecorator+=""String_Node_Str"";
}
if (textDecorator != null) elem.setAttribute(""String_Node_Str"",textDecorator);
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",getFont().getFamily());
elem.setAttribute(""String_Node_Str"",Integer.toString(getFont().getSize()));
String style=getRenderingStyle(RenderingHints.KEY_TEXT_ANTIALIASING);
if (color != null) {
String alpha=alphaToString(color);
if (alpha != null) style+=""String_Node_Str"" + alpha + ""String_Node_Str"";
style+=""String_Node_Str"" + serializeToString(color) + ""String_Node_Str"";
}
elem.setAttribute(""String_Node_Str"",style);
if (transforms.getType() != AffineTransform.TYPE_IDENTITY) {
double[] matrix=new double[6];
transforms.getMatrix(matrix);
elem.setAttribute(""String_Node_Str"",""String_Node_Str"" + matrix[0] + ""String_Node_Str""+ matrix[1]+ ""String_Node_Str""+ matrix[2]+ ""String_Node_Str""+ matrix[3]+ ""String_Node_Str""+ matrix[4]+ ""String_Node_Str""+ matrix[5]+ ""String_Node_Str"");
}
return elem;
}",0.9848975188781014
76120,"/** 
 * Retrieves format pattern from arrays given format type categorys.
 * @param category Given format type category.
 * @return The corresponding format pattern string.
 */
public static String getPatternForCategory(String category){
  String pattern;
  if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_GENERAL_DATE.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MUDIUM_DATE.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_DATE.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_TIME.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MEDIUM_TIME.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_TIME.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else {
    pattern=""String_Node_Str"";
  }
  return pattern;
}","/** 
 * Retrieves format pattern from arrays given format type categorys.
 * @param category Given format type category.
 * @return The corresponding format pattern string.
 */
public static String getPatternForCategory(String category){
  String pattern;
  if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_GENERAL_DATE.equals(category) || DesignChoiceConstants.DATE_FORMAT_TYPE_GENERAL_DATE.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE.equals(category) || DesignChoiceConstants.DATE_FORMAT_TYPE_LONG_DATE.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MUDIUM_DATE.equals(category) || DesignChoiceConstants.DATE_FORMAT_TYPE_MUDIUM_DATE.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_DATE.equals(category) || DesignChoiceConstants.DATE_FORMAT_TYPE_SHORT_DATE.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_TIME.equals(category) || DesignChoiceConstants.TIME_FORMAT_TYPE_LONG_TIME.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MEDIUM_TIME.equals(category) || DesignChoiceConstants.TIME_FORMAT_TYPE_MEDIUM_TIME.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_TIME.equals(category) || DesignChoiceConstants.TIME_FORMAT_TYPE_SHORT_TIME.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else {
    pattern=""String_Node_Str"";
  }
  return pattern;
}",0.8251599147121536
76121,"/** 
 * Gets the position after the sibling in the container
 * @param targetObj container or sibling
 * @param canContain <code>CONTAIN_PARENT</code> as sibling, others as container
 * @return the position: after the sibling in the same container, or -1 asthe last position in the container
 */
public static int calculateNextPosition(Object targetObj,int canContain){
  int position=-1;
  if (canContain == CONTAIN_PARENT) {
    DesignElementHandle afterHandle=getDesignElementHandle(targetObj);
    if (afterHandle != null) {
      if (afterHandle.getContainerSlotHandle() != null) {
        position=afterHandle.getContainerSlotHandle().findPosn(afterHandle);
        position++;
      }
 else       if (afterHandle.getContainerPropertyHandle() != null) {
        position=afterHandle.getContainerPropertyHandle().getContents().indexOf(afterHandle);
      }
    }
  }
  return position;
}","/** 
 * Gets the position after the sibling in the container
 * @param targetObj container or sibling
 * @param canContain <code>CONTAIN_PARENT</code> as sibling, others as container
 * @return the position: after the sibling in the same container, or -1 asthe last position in the container
 */
public static int calculateNextPosition(Object targetObj,int canContain){
  int position=-1;
  if (canContain == CONTAIN_PARENT) {
    DesignElementHandle afterHandle=getDesignElementHandle(targetObj);
    if (afterHandle != null) {
      if (afterHandle.getContainerSlotHandle() != null) {
        position=afterHandle.getContainerSlotHandle().findPosn(afterHandle);
      }
 else       if (afterHandle.getContainerPropertyHandle() != null) {
        position=afterHandle.getContainerPropertyHandle().getContents().indexOf(afterHandle);
      }
      position++;
    }
  }
  return position;
}",0.7800224466891134
76122,"private int getPosition(Object target){
  this.newTarget=target;
  int position=DNDUtil.calculateNextPosition(target,canContain);
  if (position > -1) {
    if (DNDUtil.getDesignElementHandle(target).getContainerSlotHandle() != null) {
      this.newTarget=DNDUtil.getDesignElementHandle(target).getContainerSlotHandle();
    }
 else {
      this.newTarget=DNDUtil.getDesignElementHandle(target).getContainerPropertyHandle();
    }
    if (getCurrentLocation() == LOCATION_BEFORE) {
      position--;
    }
  }
  return position;
}","private int getPosition(Object target){
  this.newTarget=target;
  int position=DNDUtil.calculateNextPosition(target,canContain);
  if (position > -1) {
    if (DNDUtil.getDesignElementHandle(target).getContainerSlotHandle() != null) {
      this.newTarget=DNDUtil.getDesignElementHandle(target).getContainerSlotHandle();
    }
 else {
      this.newTarget=DNDUtil.getDesignElementHandle(target).getContainerPropertyHandle();
    }
    if (getCurrentLocation() == LOCATION_BEFORE || (getCurrentLocation() == LOCATION_AFTER && target == getSelectedObject())) {
      position--;
    }
  }
  return position;
}",0.932396839332748
76123,"private String getExpression(String columnName){
  for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
    ResultSetColumnHandle cachedColumn=(ResultSetColumnHandle)iter.next();
    if (cachedColumn.getColumnName().equals(columnName)) {
      return DEUtil.getExpression(cachedColumn);
    }
  }
  return columnName;
}","private String getExpression(String columnName){
  if (columnName.equals(NONE_DISPLAY_TEXT)) {
    return null;
  }
  for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
    ResultSetColumnHandle cachedColumn=(ResultSetColumnHandle)iter.next();
    if (cachedColumn.getColumnName().equals(columnName)) {
      return DEUtil.getExpression(cachedColumn);
    }
  }
  return columnName;
}",0.9073305670816044
76124,"private List buildMeasures(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle crosstab=getCrosstabReportItemHandle();
  int count=crosstab.getMeasureCount();
  for (int i=0; i < count; i++) {
    MeasureViewHandle measureHandle=crosstab.getMeasure(i);
    CrosstabCellHandle handle=measureHandle.getCell();
    CrosstabCellAdapter adapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE,handle,1,-1,i + 1,-1,isVertical());
    retValue.add(adapter);
    int addregationCellCount=measureHandle.getAggregationCount();
    for (int j=0; j < addregationCellCount; j++) {
      AggregationCellHandle cell=measureHandle.getAggregationCell(j);
      LevelViewHandle levelViewHandle=cell.getLevelView(getWorkArea(ICrosstabConstants.COLUMN_AXIS_TYPE));
      int measureCount=count;
      Integer temp;
      List measuresHandles;
      int position;
      if (levelViewHandle == null) {
        temp=(Integer)map.get(getWorkArea(COLUMNAREA_COLUMN));
        measuresHandles=crosstab.getAggregationMeasures(getWorkArea(ICrosstabConstants.COLUMN_AXIS_TYPE));
      }
 else {
        temp=(Integer)map.get(levelViewHandle);
        measuresHandles=levelViewHandle.getAggregationMeasures();
      }
      if (temp == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      measureCount=measuresHandles.size();
      position=measuresHandles.indexOf(measureHandle);
      if (temp.intValue() <= count) {
        measureCount=count;
        position=i;
      }
      int column=temp.intValue() - (measureCount - position) + 1;
      levelViewHandle=cell.getLevelView(getWorkArea(ICrosstabConstants.ROW_AXIS_TYPE));
      if (levelViewHandle == null) {
        temp=(Integer)map.get(getWorkArea(ROWAREA_ROW));
      }
 else {
        temp=(Integer)map.get(levelViewHandle);
      }
      if (temp == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      int row=temp.intValue();
      CrosstabCellAdapter aggregationCell=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_AGGREGATION,cell,row,1,column,1,isVertical());
      retValue.add(aggregationCell);
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter first=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(first);
  }
  return retValue;
}","private List buildMeasures(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle crosstab=getCrosstabReportItemHandle();
  int count=crosstab.getMeasureCount();
  for (int i=0; i < count; i++) {
    MeasureViewHandle measureHandle=crosstab.getMeasure(i);
    CrosstabCellHandle handle=measureHandle.getCell();
    CrosstabCellAdapter adapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE,handle,1,-1,i + 1,-1,isVertical());
    retValue.add(adapter);
    int addregationCellCount=measureHandle.getAggregationCount();
    for (int j=0; j < addregationCellCount; j++) {
      AggregationCellHandle cell=measureHandle.getAggregationCell(j);
      LevelViewHandle levelViewHandle=cell.getLevelView(getWorkArea(ICrosstabConstants.COLUMN_AXIS_TYPE));
      int measureCount=count;
      Integer temp;
      List measuresHandles;
      int position;
      if (levelViewHandle == null) {
        temp=(Integer)map.get(getWorkArea(COLUMNAREA_COLUMN));
        measuresHandles=crosstab.getAggregationMeasures(getWorkArea(ICrosstabConstants.COLUMN_AXIS_TYPE));
      }
 else {
        temp=(Integer)map.get(levelViewHandle);
        measuresHandles=levelViewHandle.getAggregationMeasures();
      }
      if (temp == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      measureCount=measuresHandles.size();
      position=measuresHandles.indexOf(measureHandle);
      if (temp.intValue() <= count) {
        measureCount=count;
        position=i;
      }
      int tempPosition=temp.intValue() >= measureCount ? temp.intValue() : measureCount;
      int column=tempPosition - (measureCount - position) + 1;
      levelViewHandle=cell.getLevelView(getWorkArea(ICrosstabConstants.ROW_AXIS_TYPE));
      if (levelViewHandle == null) {
        temp=(Integer)map.get(getWorkArea(ROWAREA_ROW));
      }
 else {
        temp=(Integer)map.get(levelViewHandle);
      }
      if (temp == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      int row=temp.intValue();
      CrosstabCellAdapter aggregationCell=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_AGGREGATION,cell,row,1,column,1,isVertical());
      retValue.add(aggregationCell);
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter first=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(first);
  }
  return retValue;
}",0.980115990057995
76125,"public Object getValue(int fieldIndex) throws BirtException {
  return it.getValue(this.metadata == null ? it.getResultMetaData().getColumnName(fieldIndex) : this.metadata.getFieldName(fieldIndex));
}","public Object getValue(int fieldIndex) throws BirtException {
  Object value=it.getValue(this.metadata.getFieldName(fieldIndex));
  if (value == null) {
    return this.metadata.getNullValueReplacer(fieldIndex);
  }
  return value;
}",0.5265588914549654
76126,"/** 
 * @param query
 * @param measure
 * @param function
 * @return
 */
private ScriptExpression populateExpression(QueryDefinition query,MeasureHandle measure,String function){
  ScriptExpression se=null;
  if (function == null || function.equals(""String_Node_Str"")) {
    se=new ScriptExpression(""String_Node_Str"" + measure.getMeasureExpression() + ""String_Node_Str""+ query.getGroups().size()+ ""String_Node_Str"");
  }
 else   if (function.equals(""String_Node_Str"")) {
    se=new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"" + query.getGroups().size() + ""String_Node_Str"");
  }
 else   if (function.equals(""String_Node_Str"")) {
    se=new ScriptExpression(""String_Node_Str"" + measure.getMeasureExpression() + ""String_Node_Str""+ query.getGroups().size()+ ""String_Node_Str"");
  }
 else   if (function.equals(""String_Node_Str"")) {
    se=new ScriptExpression(""String_Node_Str"" + measure.getMeasureExpression() + ""String_Node_Str""+ query.getGroups().size()+ ""String_Node_Str"");
  }
  se.setDataType(DataType.DOUBLE_TYPE);
  return se;
}","/** 
 * @param query
 * @param measure
 * @param function
 * @return
 */
private ScriptExpression populateExpression(QueryDefinition query,MeasureHandle measure,String function){
  ScriptExpression se=null;
  if (function == null || function.equals(""String_Node_Str"")) {
    se=new ScriptExpression(""String_Node_Str"" + measure.getMeasureExpression() + ""String_Node_Str""+ query.getGroups().size()+ ""String_Node_Str"");
  }
 else   if (function.equals(""String_Node_Str"")) {
    se=new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"" + query.getGroups().size() + ""String_Node_Str"");
  }
 else   if (function.equals(""String_Node_Str"")) {
    se=new ScriptExpression(""String_Node_Str"" + measure.getMeasureExpression() + ""String_Node_Str""+ query.getGroups().size()+ ""String_Node_Str"");
  }
 else   if (function.equals(""String_Node_Str"")) {
    se=new ScriptExpression(""String_Node_Str"" + measure.getMeasureExpression() + ""String_Node_Str""+ query.getGroups().size()+ ""String_Node_Str"");
  }
  se.setDataType(ModelAdapter.adaptModelDataType(measure.getDataType()));
  return se;
}",0.9745523091423186
76127,"/** 
 * @param name
 */
ColumnMeta(String name){
  this.name=name;
}","/** 
 * @param name
 */
ColumnMeta(String name,boolean isLevelKey){
  this.name=name;
  this.isLevelKey=isLevelKey;
}",0.7351351351351352
76128,"/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List resultMetaList){
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      String function=measure.getFunction();
      if (query.getGroups().size() > 0) {
        ScriptExpression se=populateExpression(query,measure,function);
        query.addResultSetExpression(measure.getName(),se);
      }
 else {
        query.addResultSetExpression(measure.getName(),new ScriptExpression(measure.getMeasureExpression()));
      }
      ColumnMeta meta=new ColumnMeta(measure.getName());
      meta.setDataType(ModelAdapter.adaptModelDataType(measure.getDataType()));
      resultMetaList.add(meta);
    }
  }
}","/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList){
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      String function=measure.getFunction();
      if (query.getGroups().size() > 0) {
        ScriptExpression se=populateExpression(query,measure,function);
        query.addResultSetExpression(measure.getName(),se);
      }
 else {
        query.addResultSetExpression(measure.getName(),new ScriptExpression(measure.getMeasureExpression()));
      }
      ColumnMeta meta=new ColumnMeta(measure.getName(),false);
      meta.setDataType(ModelAdapter.adaptModelDataType(measure.getDataType()));
      metaList.add(meta);
    }
  }
}",0.9897388059701492
76129,"/** 
 * Constructor.
 * @param columnMetas
 */
ResultMeta(List columnMetas){
  this.columnMetaMap=new HashMap();
  this.indexMap=new HashMap();
  for (int i=0; i < columnMetas.size(); i++) {
    ColumnMeta columnMeta=(ColumnMeta)columnMetas.get(i);
    columnMeta.setIndex(i + 1);
    this.columnMetaMap.put(columnMeta.getName(),columnMeta);
    this.indexMap.put(new Integer(i + 1),columnMeta);
  }
}","/** 
 * Constructor.
 * @param columnMetas
 */
ResultMeta(List columnMetas){
  this.columnMetaMap=new HashMap();
  this.indexMap=new HashMap();
  this.nullValueReplacer=new Object[columnMetas.size()];
  for (int i=0; i < columnMetas.size(); i++) {
    ColumnMeta columnMeta=(ColumnMeta)columnMetas.get(i);
    columnMeta.setIndex(i + 1);
    this.columnMetaMap.put(columnMeta.getName(),columnMeta);
    this.indexMap.put(new Integer(i + 1),columnMeta);
    if (columnMeta.isLevelKey()) {
      this.nullValueReplacer[i]=createNullValueReplacer(columnMeta.getType());
    }
  }
}",0.8192032686414709
76130,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 */
private void prepareLevels(QueryDefinition query,List resultMetaList,Map levelNameColumnNamePair,TabularHierarchyHandle hierHandle){
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=new ColumnMeta(level.getName());
    resultMetaList.add(temp);
    levelNameColumnNamePair.put(level.getColumnName(),temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
      resultMetaList.add(meta);
    }
    query.addResultSetExpression(level.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(level.getColumnName())));
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
    query.addGroup(gd);
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList){
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=new ColumnMeta(level.getName(),true);
    int type=ModelAdapter.adaptModelDataType(level.getDataType());
    if (isTimeType(type))     temp.setDataType(DataType.INTEGER_TYPE);
    temp.setDataType(type);
    metaList.add(temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()),false);
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      metaList.add(meta);
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
    }
    String exprString=populateLevelKeyExpression(level,type);
    query.addResultSetExpression(level.getName(),new ScriptExpression(exprString));
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
    query.addGroup(gd);
  }
}",0.7885918003565062
76131,"public void drawBackgroundColor(Color color,float x,float y,float width,float height){
  if (null == color) {
    return;
  }
  y=transformY(y,height);
  cbUnder.saveState();
  cbUnder.setColorFill(color);
  cbUnder.rectangle(x,y,width,height);
  cbUnder.fill();
  cbUnder.restoreState();
}","private void drawBackgroundColor(Color color,float x,float y,float width,float height){
  if (null == color) {
    return;
  }
  y=transformY(y,height);
  cbUnder.saveState();
  cbUnder.setColorFill(color);
  cbUnder.rectangle(x,y,width,height);
  cbUnder.fill();
  cbUnder.restoreState();
}",0.9810671256454389
76132,"public void drawTotalPage(String text,float textX,float textY,float width,float height,TextStyle textInfo){
  if (totalPageTemplate != null)   drawText(text,textX,textY,width,height,textInfo.getFontInfo(),textInfo.getCharacterSpacing(),textInfo.getWordSpacing(),textInfo.getColor(),textInfo.isLinethrough(),textInfo.isOverline(),textInfo.isUnderline(),textInfo.getAlign(),true);
}","public void drawTotalPage(String text,int textX,int textY,int width,int height,TextStyle textInfo){
  if (totalPageTemplate != null)   drawText(text,textX,textY,width,height,textInfo.getFontInfo(),textInfo.getLetterSpacing(),textInfo.getWordSpacing(),textInfo.getColor(),textInfo.isLinethrough(),textInfo.isOverline(),textInfo.isUnderline(),textInfo.getAlign(),true);
}",0.9559412550066756
76133,"public void createBookmark(String bookmark,float x,float y,float width,float height){
  contentByte.localDestination(bookmark,new PdfDestination(PdfDestination.XYZ,-1,transformY(y),0));
}","private void createBookmark(String bookmark,float x,float y,float width,float height){
  contentByte.localDestination(bookmark,new PdfDestination(PdfDestination.XYZ,-1,transformY(y),0));
}",0.976
76134,"public void createTotalPageTemplate(float x,float y,float width,float height){
  if (totalPageTemplate == null) {
    totalPageTemplate=contentByte.createTemplate(width,height);
  }
  y=transformY(y,height);
  contentByte.saveState();
  contentByte.addTemplate(totalPageTemplate,x,y);
  contentByte.restoreState();
}","private void createTotalPageTemplate(float x,float y,float width,float height){
  if (totalPageTemplate == null) {
    totalPageTemplate=contentByte.createTemplate(width,height);
  }
  y=transformY(y,height);
  contentByte.saveState();
  contentByte.addTemplate(totalPageTemplate,x,y);
  contentByte.restoreState();
}",0.9826224328593997
76135,"private void drawText(String text,float textX,float textY,FontInfo fontInfo,float characterSpacing,float wordSpacing,Color color,CSSValue align,boolean isTotalPage){
  PdfContentByte currentContentByte=isTotalPage ? totalPageTemplate : contentByte;
  float containerHeight=isTotalPage ? totalPageTemplate.getHeight() : pageHeight;
  currentContentByte.saveState();
  currentContentByte.beginText();
  if (null != color) {
    currentContentByte.setColorFill(color);
    currentContentByte.setColorStroke(color);
  }
  BaseFont font=fontInfo.getBaseFont();
  float fontSize=fontInfo.getFontSize();
  currentContentByte.setFontAndSize(font,fontSize);
  currentContentByte.setCharacterSpacing(characterSpacing);
  currentContentByte.setWordSpacing(wordSpacing);
  placeText(currentContentByte,fontInfo,textX,transformY(textY,fontInfo.getBaseline(),containerHeight));
  if ((font.getFontType() == BaseFont.FONT_TYPE_TTUNI) && IStyle.JUSTIFY_VALUE.equals(align) && wordSpacing > 0) {
    int idx=text.indexOf(' ');
    if (idx >= 0) {
      float spaceCorrection=-wordSpacing * 1000 / fontSize;
      PdfTextArray textArray=new PdfTextArray(text.substring(0,idx));
      int lastIdx=idx;
      while ((idx=text.indexOf(' ',lastIdx + 1)) >= 0) {
        textArray.add(spaceCorrection);
        textArray.add(text.substring(lastIdx,idx));
        lastIdx=idx;
      }
      textArray.add(spaceCorrection);
      textArray.add(text.substring(lastIdx));
      currentContentByte.showText(textArray);
    }
 else {
      currentContentByte.showText(text);
    }
  }
 else {
    currentContentByte.showText(text);
  }
  currentContentByte.endText();
  currentContentByte.restoreState();
}","private void drawText(String text,float textX,float textY,FontInfo fontInfo,float characterSpacing,float wordSpacing,Color color,CSSValue align,boolean isTotalPage){
  PdfContentByte currentContentByte=isTotalPage ? totalPageTemplate : contentByte;
  float containerHeight=isTotalPage ? totalPageTemplate.getHeight() : pageHeight;
  currentContentByte.saveState();
  currentContentByte.beginText();
  if (null != color) {
    currentContentByte.setColorFill(color);
    currentContentByte.setColorStroke(color);
  }
  BaseFont font=fontInfo.getBaseFont();
  float fontSize=fontInfo.getFontSize();
  currentContentByte.setFontAndSize(font,fontSize);
  currentContentByte.setCharacterSpacing(characterSpacing);
  currentContentByte.setWordSpacing(wordSpacing);
  float baseline=convertToPoint(fontInfo.getBaseline());
  float transformedY=transformY(textY,baseline,containerHeight);
  placeText(currentContentByte,fontInfo,textX,transformedY);
  if ((font.getFontType() == BaseFont.FONT_TYPE_TTUNI) && IStyle.JUSTIFY_VALUE.equals(align) && wordSpacing > 0) {
    int idx=text.indexOf(' ');
    if (idx >= 0) {
      float spaceCorrection=-wordSpacing * 1000 / fontSize;
      PdfTextArray textArray=new PdfTextArray(text.substring(0,idx));
      int lastIdx=idx;
      while ((idx=text.indexOf(' ',lastIdx + 1)) >= 0) {
        textArray.add(spaceCorrection);
        textArray.add(text.substring(lastIdx,idx));
        lastIdx=idx;
      }
      textArray.add(spaceCorrection);
      textArray.add(text.substring(lastIdx));
      currentContentByte.showText(textArray);
    }
 else {
      currentContentByte.showText(text);
    }
  }
 else {
    currentContentByte.showText(text);
  }
  currentContentByte.endText();
  currentContentByte.restoreState();
}",0.9504662004662005
76136,"/** 
 * Draws a line from the start position to the end position with the given linewidth, color, and style at the given pdf layer.
 * @param startX			the start X coordinate of the line
 * @param startY 			the start Y coordinate of the line
 * @param endX 				the end X coordinate of the line
 * @param endY 				the end Y coordinate of the line
 * @param width 			the lineWidth
 * @param color 			the color of the line
 * @param lineStyle 		the given line style
 * @param contentByte 		the given pdf layer
 */
private void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle,PdfContentByte contentByte){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}","/** 
 * Draws a line from the start position to the end position with the given linewidth, color, and style at the given pdf layer.
 * @param startX the start X coordinate of the line
 * @param startY the start Y coordinate of the line
 * @param endX the end X coordinate of the line
 * @param endY the end Y coordinate of the line
 * @param width the lineWidth
 * @param color the color of the line
 * @param lineStyle the given line style
 * @param contentByte the given pdf layer
 */
private void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle,PdfContentByte contentByte){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}",0.9912800837111964
76137,"public void createHyperlink(String hyperlink,String bookmark,String targetWindow,int type,float x,float y,float width,float height){
  y=transformY(y,height);
  writer.addAnnotation(new PdfAnnotation(writer,x,y,x + width,y + height,createPdfAction(hyperlink,bookmark,targetWindow,type)));
}","private void createHyperlink(String hyperlink,String bookmark,String targetWindow,int type,float x,float y,float width,float height){
  y=transformY(y,height);
  writer.addAnnotation(new PdfAnnotation(writer,x,y,x + width,y + height,createPdfAction(hyperlink,bookmark,targetWindow,type)));
}",0.9810671256454389
76138,"public PDFPage(float pageWidth,float pageHeight,Document document,PdfWriter writer){
  this.pageHeight=pageHeight;
  this.writer=writer;
  try {
    Rectangle pageSize=new Rectangle(pageWidth,pageHeight);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
    this.cbUnder=writer.getDirectContentUnder();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}","public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer){
  float ratio=PDFConstants.LAYOUT_TO_PDF_RATIO;
  this.pageHeight=pageHeight / ratio;
  this.writer=writer;
  try {
    Rectangle pageSize=new Rectangle(pageWidth / ratio,pageHeight / ratio);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
    this.cbUnder=writer.getDirectContentUnder();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}",0.9226519337016574
76139,"public void clip(float startX,float startY,float width,float height){
  startY=transformY(startY,height);
  contentByte.clip();
  contentByte.rectangle(startX,startY,width,height);
  contentByte.newPath();
}","private void clip(float startX,float startY,float width,float height){
  startY=transformY(startY,height);
  contentByte.clip();
  contentByte.rectangle(startX,startY,width,height);
  contentByte.newPath();
}",0.9734939759036144
76140,"public IPage newPage(float width,float height,Color backgroundColor){
  currentPage=new PDFPage(width,height,doc,writer);
  currentPage.drawBackgroundColor(backgroundColor,0,0,width,height);
  return currentPage;
}","public IPage newPage(int width,int height,Color backgroundColor){
  currentPage=new PDFPage(width,height,doc,writer);
  currentPage.drawBackgroundColor(backgroundColor,0,0,width,height);
  return currentPage;
}",0.9339622641509434
76141,"public void setTotalPage(ITextArea totalPage){
  super.setTotalPage(totalPage);
  ContainerPosition curPos=getContainerPosition();
  float x=curPos.x + getX(totalPage);
  float y=curPos.y + getY(totalPage);
  isTotalPage=true;
  drawTextAt(totalPage,x,y);
}","public void setTotalPage(ITextArea totalPage){
  super.setTotalPage(totalPage);
  ContainerPosition curPos=getContainerPosition();
  int x=curPos.x + getX(totalPage);
  int y=curPos.y + getY(totalPage);
  isTotalPage=true;
  drawTextAt(totalPage,x,y);
}",0.976470588235294
76142,"public void visitText(ITextArea textArea){
  super.visitText(textArea);
  ContainerPosition curPos=getContainerPosition();
  float x=curPos.x + getX(textArea);
  float y=curPos.y + getY(textArea);
  createBookmark(textArea,x,y);
  createHyperlink(textArea,x,y);
}","public void visitText(ITextArea textArea){
  super.visitText(textArea);
  ContainerPosition curPos=getContainerPosition();
  int x=curPos.x + getX(textArea);
  int y=curPos.y + getY(textArea);
  createBookmark(textArea,x,y);
  createHyperlink(textArea,x,y);
}",0.9770114942528736
76143,"protected void drawTotalPage(String text,float x,float y,float width,float height,TextStyle textInfo){
  currentPage.drawTotalPage(text,x,y,width,height,textInfo);
}","protected void drawTotalPage(String text,int x,int y,int width,int height,TextStyle textInfo){
  currentPage.drawTotalPage(text,x,y,width,height,textInfo);
}",0.9254658385093169
76144,"protected void drawContainer(IContainerArea container){
  super.drawContainer(container);
  ContainerPosition curPos=getContainerPosition();
  float x=curPos.x + getX(container);
  float y=curPos.y + getY(container);
  createBookmark(container,x,y);
  createHyperlink(container,x,y);
}","protected void drawContainer(IContainerArea container){
  super.drawContainer(container);
  ContainerPosition curPos=getContainerPosition();
  int x=curPos.x + getX(container);
  int y=curPos.y + getY(container);
  createBookmark(container,x,y);
  createHyperlink(container,x,y);
}",0.978798586572438
76145,"private void createBookmark(IArea area,float x,float y){
  float height=getHeight(area);
  float width=getWidth(area);
  IContent content=area.getContent();
  if (null != content) {
    String bookmark=content.getBookmark();
    if (null != bookmark) {
      currentPage.createBookmark(bookmark,x,y,width,height);
    }
  }
}","private void createBookmark(IArea area,int x,int y){
  int height=getHeight(area);
  int width=getWidth(area);
  IContent content=area.getContent();
  if (null != content) {
    String bookmark=content.getBookmark();
    if (null != bookmark) {
      currentPage.createBookmark(bookmark,x,y,width,height);
    }
  }
}",0.9626168224299064
76146,"private void createHyperlink(IArea area,float x,float y){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    String systemId=reportRunnable == null ? null : reportRunnable.getReportName();
    if (null != hlAction)     try {
      float width=getWidth(area);
      float height=getHeight(area);
      String hyperlink=hlAction.getHyperlink();
      String bookmark=hlAction.getBookmark();
      String targetWindow=hlAction.getTargetWindow();
      int type=hlAction.getType();
switch (type) {
case IHyperlinkAction.ACTION_BOOKMARK:
        currentPage.createHyperlink(hyperlink,bookmark,targetWindow,type,x,y,width,height);
      break;
case IHyperlinkAction.ACTION_HYPERLINK:
    currentPage.createHyperlink(hyperlink,null,targetWindow,type,x,y,width,height);
  break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
Action act=new Action(systemId,hlAction);
IHTMLActionHandler actionHandler=null;
Object ac=services.getOption(RenderOption.ACTION_HANDLER);
if (ac != null && ac instanceof IHTMLActionHandler) {
actionHandler=(IHTMLActionHandler)ac;
}
String link=actionHandler.getURL(act,context);
currentPage.createHyperlink(link,null,targetWindow,type,x,y,width,height);
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}","private void createHyperlink(IArea area,int x,int y){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    String systemId=reportRunnable == null ? null : reportRunnable.getReportName();
    if (null != hlAction)     try {
      int width=getWidth(area);
      int height=getHeight(area);
      String hyperlink=hlAction.getHyperlink();
      String bookmark=hlAction.getBookmark();
      String targetWindow=hlAction.getTargetWindow();
      int type=hlAction.getType();
switch (type) {
case IHyperlinkAction.ACTION_BOOKMARK:
        currentPage.createHyperlink(hyperlink,bookmark,targetWindow,type,x,y,width,height);
      break;
case IHyperlinkAction.ACTION_HYPERLINK:
    currentPage.createHyperlink(hyperlink,null,targetWindow,type,x,y,width,height);
  break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
Action act=new Action(systemId,hlAction);
IHTMLActionHandler actionHandler=null;
Object ac=services.getOption(RenderOption.ACTION_HANDLER);
if (ac != null && ac instanceof IHTMLActionHandler) {
actionHandler=(IHTMLActionHandler)ac;
}
String link=actionHandler.getURL(act,context);
currentPage.createHyperlink(link,null,targetWindow,type,x,y,width,height);
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}",0.9909433962264153
76147,"public void visitImage(IImageArea imageArea){
  ContainerPosition curPos=getContainerPosition();
  float imageX=curPos.x + getX(imageArea);
  float imageY=curPos.y + getY(imageArea);
  super.visitImage(imageArea);
  createBookmark(imageArea,imageX,imageY);
  createHyperlink(imageArea,imageX,imageY);
}","public void visitImage(IImageArea imageArea){
  ContainerPosition curPos=getContainerPosition();
  int imageX=curPos.x + getX(imageArea);
  int imageY=curPos.y + getY(imageArea);
  super.visitImage(imageArea);
  createBookmark(imageArea,imageX,imageY);
  createHyperlink(imageArea,imageX,imageY);
}",0.98
76148,"protected void drawTextAt(ITextArea text,float x,float y,float width,float height,TextStyle textInfo){
  if (isTotalPage) {
    currentPage.drawTotalPage(text.getText(),x,y,width,height,textInfo);
  }
 else {
    currentPage.drawText(text.getText(),x,y,width,height,textInfo);
  }
}","protected void drawTextAt(ITextArea text,int x,int y,int width,int height,TextStyle textInfo){
  if (isTotalPage) {
    currentPage.drawTotalPage(text.getText(),x,y,width,height,textInfo);
  }
 else {
    currentPage.drawText(text.getText(),x,y,width,height,textInfo);
  }
}",0.8992805755395683
76149,"public void visitAutoText(ITemplateArea templateArea){
  super.visitAutoText(templateArea);
  ContainerPosition curPos=getContainerPosition();
  float x=curPos.x + getX(templateArea);
  float y=curPos.y + getY(templateArea);
  createTotalPageTemplate(x,y,getWidth(templateArea),getHeight(templateArea));
}","public void visitAutoText(ITemplateArea templateArea){
  super.visitAutoText(templateArea);
  ContainerPosition curPos=getContainerPosition();
  int x=curPos.x + getX(templateArea);
  int y=curPos.y + getY(templateArea);
  createTotalPageTemplate(x,y,getWidth(templateArea),getHeight(templateArea));
}",0.9801980198019802
76150,"private void createTotalPageTemplate(float x,float y,float width,float height){
  currentPage.createTotalPageTemplate(x,y,width,height);
}","private void createTotalPageTemplate(int x,int y,int width,int height){
  currentPage.createTotalPageTemplate(x,y,width,height);
}",0.9104477611940298
76151,"public void drawImage(String uri,float imageX,float imageY,float height,float width,String helpText) throws Exception {
  if (uri == null) {
    return;
  }
  drawImage(new URL(uri).openStream(),imageX,imageY,height,width,helpText);
}","public void drawImage(String uri,int imageX,int imageY,int height,int width,String helpText) throws Exception {
  if (uri == null) {
    return;
  }
  drawImage(new URL(uri).openStream(),imageX,imageY,height,width,helpText);
}",0.908695652173913
76152,"public void drawText(String text,float textX,float textY,float width,float height,TextStyle fontStyle){
  writer.drawString(text,textX,textY,fontStyle.getFontInfo(),fontStyle.getCharacterSpacing(),fontStyle.getWordSpacing(),fontStyle.getColor(),fontStyle.isLinethrough(),fontStyle.isOverline(),fontStyle.isUnderline(),fontStyle.getAlign());
}","public void drawText(String text,int textX,int textY,int width,int height,TextStyle fontStyle){
  writer.drawString(text,convertToPoint(textX),convertToPoint(textY),fontStyle.getFontInfo(),convertToPoint(fontStyle.getLetterSpacing()),convertToPoint(fontStyle.getWordSpacing()),fontStyle.getColor(),fontStyle.isLinethrough(),fontStyle.isOverline(),fontStyle.isUnderline(),fontStyle.getAlign());
}",0.8276797829036635
76153,"public void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  writer.drawBackgroundImage(imageUrl,x,y,width,height,absPosX,absPosY,repeat);
}","public void drawBackgroundImage(int x,int y,int width,int height,String repeat,String imageUrl,int absPosX,int absPosY) throws IOException {
  writer.drawBackgroundImage(imageUrl,convertToPoint(x),convertToPoint(y),convertToPoint(width),convertToPoint(height),convertToPoint(absPosX),convertToPoint(absPosY),repeat);
}",0.5072463768115942
76154,"public void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  writer.drawLine(startX,startY,endX,endY,width,color,lineStyle);
}","public void drawLine(int startX,int startY,int endX,int endY,int width,Color color,String lineStyle){
  writer.drawLine(convertToPoint(startX),convertToPoint(startY),convertToPoint(endX),convertToPoint(endY),convertToPoint(width),color,lineStyle);
}",0.4813084112149532
76155,"public void drawBackgroundColor(Color color,float x,float y,float width,float height){
  if (color != null) {
    writer.fillRect(x,y,width,height,color);
  }
}","public void drawBackgroundColor(Color color,int x,int y,int width,int height){
  if (color != null) {
    writer.fillRect(convertToPoint(x),convertToPoint(y),convertToPoint(width),convertToPoint(height),color);
  }
}",0.6808510638297872
76156,"void setPageSize(float pageWidth,float pageHeight){
  writer.startPage(pageWidth,pageHeight);
}","void setPageSize(int pageWidth,int pageHeight){
  writer.startPage(convertToPoint(pageWidth),convertToPoint(pageHeight));
}",0.7981651376146789
76157,"public void clip(float startX,float startY,float width,float height){
  writer.clipRect(startX,startY,width,height);
}","public void clip(int startX,int startY,int width,int height){
  writer.clipRect(convertToPoint(startX),convertToPoint(startY),convertToPoint(width),convertToPoint(height));
}",0.6986301369863014
76158,"public IPage newPage(float width,float height,Color backgroundColor){
  if (currentPage != null) {
    currentPage.dispose();
  }
  currentPage=new PostscriptPage(writer);
  currentPage.setPageSize(width,height);
  currentPage.drawPageBackgroundColor(backgroundColor);
  return currentPage;
}","public IPage newPage(int width,int height,Color backgroundColor){
  if (currentPage != null) {
    currentPage.dispose();
  }
  currentPage=new PostscriptPage(writer);
  currentPage.setPageSize(width,height);
  currentPage.drawPageBackgroundColor(backgroundColor);
  return currentPage;
}",0.9793103448275862
76159,"public void visitContainer(IContainerArea containerArea){
  addContent(containerArea.getContent());
}","public void visitContainer(IContainerArea container){
  addContent(container.getContent());
  Iterator iter=container.getChildren();
  while (iter.hasNext()) {
    IArea child=(IArea)iter.next();
    child.accept(this);
  }
}",0.3680981595092024
76160,"/** 
 * Convert parameter to Object
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validate(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  String defFormat=null;
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_DATETIME_FORMAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_DATE_FORMAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_TIME_FORMAT;
  }
  if (isLocale) {
    try {
      if (format == null) {
        if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
          format=ParameterValidationUtil.DISPLAY_DATE_FORMAT;
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
          format=ParameterValidationUtil.DISPLAY_TIME_FORMAT;
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
          format=DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED;
        }
      }
      obj=ParameterValidationUtil.validate(dataType,format,value,locale);
    }
 catch (    Exception e) {
      obj=ParameterValidationUtil.validate(dataType,defFormat,value);
    }
  }
 else {
    obj=ParameterValidationUtil.validate(dataType,defFormat,value);
  }
  return obj;
}","/** 
 * Convert parameter to Object
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validate(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  String defFormat=null;
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_DATETIME_FORMAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_DATE_FORMAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_TIME_FORMAT;
  }
  if (isLocale) {
    try {
      if (format == null) {
        if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
          format=ParameterValidationUtil.DISPLAY_DATE_FORMAT;
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
          format=ParameterValidationUtil.DISPLAY_TIME_FORMAT;
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
          format=DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED;
        }
      }
      obj=ParameterValidationUtil.validate(dataType,format,value,locale);
    }
 catch (    Exception e) {
      obj=ParameterValidationUtil.validate(dataType,defFormat,value);
    }
  }
 else {
    if (format == null)     format=defFormat;
    obj=ParameterValidationUtil.validate(dataType,format,value);
  }
  return obj;
}",0.985178727114211
76161,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList){
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=new ColumnMeta(level.getName(),true);
    int type=ModelAdapter.adaptModelDataType(level.getDataType());
    if (isTimeType(type))     temp.setDataType(DataType.INTEGER_TYPE);
    temp.setDataType(type);
    metaList.add(temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()),false);
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      metaList.add(meta);
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
    }
    String exprString=populateLevelKeyExpression(level,type);
    query.addResultSetExpression(level.getName(),new ScriptExpression(exprString));
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
    query.addGroup(gd);
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList){
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=new ColumnMeta(level.getName(),true);
    int type=ModelAdapter.adaptModelDataType(level.getDataType());
    if (isTimeType(type))     temp.setDataType(DataType.INTEGER_TYPE);
    temp.setDataType(type);
    metaList.add(temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(level.getName() + ""String_Node_Str"" + levelAttr.getName(),false);
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      metaList.add(meta);
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
    }
    String exprString=populateLevelKeyExpression(level,type);
    query.addResultSetExpression(level.getName(),new ScriptExpression(exprString));
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
    query.addGroup(gd);
  }
}",0.9600833044081916
76162,"/** 
 * Test set format of style
 * @throws Exception
 */
public void testSetStyleFormat() throws Exception {
  designHandle=new SessionHandle(ULocale.getDefault()).createDesign();
  design=(ReportDesign)designHandle.getModule();
  ElementFactory factory=new ElementFactory(design);
  StyleHandle style1=factory.newStyle(""String_Node_Str"");
  try {
    style1.setNumberFormatCategory(""String_Node_Str"");
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_CHOICE_NOT_FOUND,e.getErrorCode());
  }
  style1.setNumberFormat(""String_Node_Str"");
  style1.setNumberFormatCategory(DesignChoiceConstants.NUMBER_FORMAT_TYPE_FIXED);
  FactoryPropertyHandle factoryHandle=style1.getFactoryPropertyHandle(IStyleModel.NUMBER_FORMAT_PROP);
  assertEquals(""String_Node_Str"",factoryHandle.getStringValue());
}","/** 
 * Test set format of style
 * @throws Exception
 */
public void testSetStyleFormat() throws Exception {
  designHandle=new SessionHandle(ULocale.getDefault()).createDesign();
  design=(ReportDesign)designHandle.getModule();
  ElementFactory factory=new ElementFactory(design);
  StyleHandle style1=factory.newStyle(""String_Node_Str"");
  try {
    style1.setNumberFormatCategory(""String_Node_Str"");
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_CHOICE_NOT_FOUND,e.getErrorCode());
  }
  style1.setNumberFormat(""String_Node_Str"");
  style1.setNumberFormatCategory(DesignChoiceConstants.NUMBER_FORMAT_TYPE_FIXED);
  FactoryPropertyHandle factoryHandle=style1.getFactoryPropertyHandle(IStyleModel.NUMBER_FORMAT_PROP);
  assertEquals(""String_Node_Str"",factoryHandle.getStringValue());
  style1.setDateFormatCategory(DesignChoiceConstants.DATE_FORMAT_TYPE_SHORT_DATE);
  style1.setDateFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",style1.getDateFormat());
  assertEquals(DesignChoiceConstants.DATE_FORMAT_TYPE_SHORT_DATE,style1.getDateFormatCategory());
  style1.setTimeFormatCategory(DesignChoiceConstants.TIME_FORMAT_TYPE_SHORT_TIME);
  style1.setTimeFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",style1.getTimeFormat());
  assertEquals(DesignChoiceConstants.TIME_FORMAT_TYPE_SHORT_TIME,style1.getTimeFormatCategory());
}",0.75022143489814
76163,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 */
private void prepareLevels(QueryDefinition query,List resultMetaList,Map levelNameColumnNamePair,TabularHierarchyHandle hierHandle){
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=new ColumnMeta(level.getName());
    resultMetaList.add(temp);
    levelNameColumnNamePair.put(level.getColumnName(),temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
      resultMetaList.add(meta);
    }
    query.addResultSetExpression(level.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(level.getColumnName())));
    if (j == levels.size() - 1) {
      GroupDefinition gd=new GroupDefinition();
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
      query.addGroup(gd);
    }
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 */
private void prepareLevels(QueryDefinition query,List resultMetaList,Map levelNameColumnNamePair,TabularHierarchyHandle hierHandle){
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=new ColumnMeta(level.getName());
    resultMetaList.add(temp);
    levelNameColumnNamePair.put(level.getColumnName(),temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
      resultMetaList.add(meta);
    }
    query.addResultSetExpression(level.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(level.getColumnName())));
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
    query.addGroup(gd);
  }
}",0.9658678286129266
76164,"public abstract void buildImageStyle(IImageContent image,StringBuffer styleBuffer);","public abstract void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display);",0.9325842696629212
76165,"/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  buildStyle(image,styleBuffer);
}","/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  buildStyle(image,styleBuffer);
}",0.9792387543252596
76166,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
    }
  }
  if (null == layoutPreference) {
    if (report != null) {
      Report reportDesign=report.getDesign();
      ReportDesignHandle designHandle=reportDesign.getReportDesign();
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    writer.openTag(HTMLTags.TAG_DIV);
    if (report != null) {
      String reportStyleName=report.getDesign().getRootStyleName();
      if (reportStyleName != null) {
        IStyle style=report.findStyle(reportStyleName);
        StringBuffer styleBuffer=new StringBuffer();
        AttributeBuilder.buildStyle(styleBuffer,style,this);
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      }
    }
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    ReportDesignHandle designHandle=reportDesign.getReportDesign();
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      AttributeBuilder.buildStyle(styleBuffer,style,this);
      writer.style('.' + styleName,styleBuffer.toString());
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      writer.attribute(HTMLTags.ATTR_CLASS,reportStyleName);
    }
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
    }
  }
  if (null == layoutPreference) {
    if (report != null) {
      Report reportDesign=report.getDesign();
      ReportDesignHandle designHandle=reportDesign.getReportDesign();
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    writer.openTag(HTMLTags.TAG_DIV);
    if (report != null) {
      String reportStyleName=report.getDesign().getRootStyleName();
      if (reportStyleName != null) {
        IStyle style=report.findStyle(reportStyleName);
        StringBuffer styleBuffer=new StringBuffer();
        AttributeBuilder.buildStyle(styleBuffer,style,this);
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      }
    }
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    ReportDesignHandle designHandle=reportDesign.getReportDesign();
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      AttributeBuilder.buildStyle(styleBuffer,style,this);
      writer.style('.' + styleName,styleBuffer.toString());
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      writer.attribute(HTMLTags.ATTR_CLASS,reportStyleName);
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
  }
}",0.9907339314605088
76167,"/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  buildStyle(image,styleBuffer);
}","/** 
 * Build the style of image content.
 */
public void buildImageStyle(IImageContent image,StringBuffer styleBuffer,int display){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,image.getWidth());
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,image.getHeight());
  setDisplayProperty(display,0,styleBuffer);
  buildStyle(image,styleBuffer);
}",0.8571428571428571
76168,"/** 
 * Handle output Text Box type parameter
 * @throws Exception
 */
protected void __handleTextBox() throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  boolean isNullValue=param.getValue() == null;
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (paramDef.isRequired() || !isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  String valueId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String isLocaleId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str""+ ParameterAccessor.PARAM_ISLOCALE+ ""String_Node_Str"");
  if (param.getPattern() != null) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
  }
  String valCtl=""String_Node_Str"" + valueId + ""String_Node_Str"";
  String inputCtl=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  String displayCtl=""String_Node_Str"" + displayTextId + ""String_Node_Str"";
  String localeCtl=""String_Node_Str"" + isLocaleId + ""String_Node_Str"";
  String onChange=displayCtl + ""String_Node_Str"" + inputCtl+ ""String_Node_Str""+ valCtl+ ""String_Node_Str""+ inputCtl+ ""String_Node_Str""+ localeCtl+ ""String_Node_Str""+ encParamName+ ""String_Node_Str"";
  if (paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
 else {
    String nullValueId=encParamId + ""String_Node_Str"";
    String radioTextValueId=encParamId + ""String_Node_Str"";
    String radioNullValueId=encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    String nullCtl=""String_Node_Str"" + nullValueId + ""String_Node_Str"";
    String radioTextCtl=""String_Node_Str"" + radioTextValueId + ""String_Node_Str"";
    String radioNullCtl=""String_Node_Str"" + radioNullValueId + ""String_Node_Str"";
    String onClick=radioTextCtl + ""String_Node_Str"" + radioNullCtl+ ""String_Node_Str""+ inputCtl+ ""String_Node_Str""+ displayCtl+ ""String_Node_Str""+ displayTextName+ ""String_Node_Str""+ nullCtl+ ""String_Node_Str"";
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (!isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    onClick=radioNullCtl + ""String_Node_Str"" + radioTextCtl+ ""String_Node_Str""+ inputCtl+ ""String_Node_Str""+ displayCtl+ ""String_Node_Str""+ nullCtl+ ""String_Node_Str""+ encParamName+ ""String_Node_Str"";
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}","/** 
 * Handle output Text Box type parameter
 * @throws Exception
 */
protected void __handleTextBox() throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  boolean isNullValue=param.getValue() == null;
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (paramDef.isRequired() || !isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  String valueId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String isLocaleId=encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str""+ encParamName+ ""String_Node_Str"");
  if (param.getPattern() != null) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
 else {
    String nullValueId=encParamId + ""String_Node_Str"";
    String radioTextValueId=encParamId + ""String_Node_Str"";
    String radioNullValueId=encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (!isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}",0.4539971278123504
76169,"/** 
 * Handle output Radio Button type parameter
 * @throws Exception
 */
protected void __handleRadioButton() throws Exception {
  Collection selectionList=BirtReportServiceFactory.getReportService().getParameterSelectionList(viewer.getReportDesignHandle(),this.options,param.getName());
  if (selectionList == null || selectionList.size() <= 0)   return;
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioNullValueId=encParamId + ""String_Node_Str"";
  String radioName=encParamId + ""String_Node_Str"";
  String valueId=encParamId + ""String_Node_Str"";
  boolean isChecked=false;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  int index=0;
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? ParameterAccessor.htmlEncode(label) : ""String_Node_Str"";
    String ctlId=encParamId + ""String_Node_Str"" + index;
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ctlId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (displayValue.equalsIgnoreCase(DataUtil.getDisplayValue(param.getValue()))) {
      isChecked=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (ctlId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + label + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ctlId + ""String_Node_Str"");
    writer.write(label);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    index++;
  }
  if (!paramDef.isRequired()) {
    boolean isNullValue=param.getValue() == null;
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (isChecked) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (isChecked) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
}","/** 
 * Handle output Radio Button type parameter
 * @throws Exception
 */
protected void __handleRadioButton() throws Exception {
  Collection selectionList=BirtReportServiceFactory.getReportService().getParameterSelectionList(viewer.getReportDesignHandle(),this.options,param.getName());
  if (selectionList == null || selectionList.size() <= 0)   return;
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioNullValueId=encParamId + ""String_Node_Str"";
  String radioName=encParamId + ""String_Node_Str"";
  String valueId=encParamId + ""String_Node_Str"";
  boolean isChecked=false;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  int index=0;
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? ParameterAccessor.htmlEncode(label) : ""String_Node_Str"";
    String ctlId=encParamId + ""String_Node_Str"" + index;
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ctlId + ""String_Node_Str"");
    __handleGeneralDefinition();
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (displayValue.equalsIgnoreCase(DataUtil.getDisplayValue(param.getValue()))) {
      isChecked=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (ctlId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + label + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ctlId + ""String_Node_Str"");
    writer.write(label);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    index++;
  }
  if (!paramDef.isRequired()) {
    boolean isNullValue=param.getValue() == null;
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + (radioNullValueId + ""String_Node_Str"") + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioNullValueId + ""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (isChecked) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (isChecked) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
}",0.5442551770207081
76170,"/** 
 * Handle Common List Box type parameter( not cascading parameter )
 * @param selectionList
 * @throws Exception
 */
protected void __handleCommonListBox(Collection selectionList) throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  boolean isSelected=false;
  boolean isNullValue=param.getValue() == null;
  String valueId=encParamId + ""String_Node_Str"";
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioSelectId=encParamId + ""String_Node_Str"";
  String radioTextId=encParamId + ""String_Node_Str"";
  String inputTextId=encParamId + ""String_Node_Str"";
  String isLocaleId=encParamId + ""String_Node_Str"";
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onChange=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  __handleGeneralDefinition();
  writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (paramDef.mustMatch() && !paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (param.getValue() != null && DataUtil.getString(param.getValue()).length() <= 0) {
      writer.write(""String_Node_Str"");
      isSelected=true;
    }
    writer.write(""String_Node_Str"");
  }
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? label : ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    if (displayValue.equals(DataUtil.getDisplayValue(param.getValue()))) {
      isSelected=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(ParameterAccessor.htmlEncode(label));
    writer.write(""String_Node_Str"");
  }
  String defaultValueText=null;
  if (!isSelected && paramDef.mustMatch()) {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (defaultValue == null) {
      isNullValue=true;
    }
 else {
      isNullValue=false;
      defaultValueText=DataUtil.getDisplayValue(defaultValue);
      if (defaultValueText != null)       this.valueString=defaultValueText;
      String defaultDisplayText=ParameterValidationUtil.getDisplayValue(null,this.pattern,defaultValue,locale);
      if (defaultDisplayText != null)       this.displayTextString=defaultDisplayText;
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
  }
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
    }
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    if (!isSelected) {
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str""+ (isNullValue || isSelected)+ ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  if (!isSelected && paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (defaultValueText != null) {
      writer.write(""String_Node_Str"" + defaultValueText + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}","/** 
 * Handle Common List Box type parameter( not cascading parameter )
 * @param selectionList
 * @throws Exception
 */
protected void __handleCommonListBox(Collection selectionList) throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String displayTextId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  boolean isSelected=false;
  boolean isNullValue=param.getValue() == null;
  String valueId=encParamId + ""String_Node_Str"";
  String nullValueId=encParamId + ""String_Node_Str"";
  String radioSelectId=encParamId + ""String_Node_Str"";
  String radioTextId=encParamId + ""String_Node_Str"";
  String inputTextId=encParamId + ""String_Node_Str"";
  String isLocaleId=encParamId + ""String_Node_Str"";
  String patternId=encParamId + ""String_Node_Str"";
  String patternName=encParamName + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + nullValueId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ITagConstants.NULL_VALUE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onChange=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  if (!paramDef.mustMatch()) {
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioSelectId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  __handleGeneralDefinition();
  writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (paramDef.mustMatch() && !paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (param.getValue() != null && DataUtil.getString(param.getValue()).length() <= 0) {
      writer.write(""String_Node_Str"");
      isSelected=true;
    }
    writer.write(""String_Node_Str"");
  }
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? label : ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    if (displayValue.equals(DataUtil.getDisplayValue(param.getValue()))) {
      isSelected=true;
      writer.write(""String_Node_Str"");
      if (param.getDisplayText() == null) {
        this.displayTextString=label;
      }
 else {
        label=param.getDisplayText();
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(ParameterAccessor.htmlEncode(label));
    writer.write(""String_Node_Str"");
  }
  String defaultValueText=null;
  if (!isSelected && paramDef.mustMatch()) {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (defaultValue == null) {
      isNullValue=true;
    }
 else {
      isNullValue=false;
      defaultValueText=DataUtil.getDisplayValue(defaultValue);
      if (defaultValueText != null)       this.valueString=defaultValueText;
      String defaultDisplayText=ParameterValidationUtil.getDisplayValue(null,this.pattern,defaultValue,locale);
      if (defaultDisplayText != null)       this.displayTextString=defaultDisplayText;
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
  }
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(ITagConstants.NULL_VALUE + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + isLocaleId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + patternName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(param.getPattern()) + ""String_Node_Str"");
    }
    String onClick=""String_Node_Str"" + encParamId + ""String_Node_Str"";
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + radioTextId + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + onClick + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + inputTextId + ""String_Node_Str"");
    if (!isSelected) {
      writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str""+ (isNullValue || isSelected)+ ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.displayTextString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + valueId + ""String_Node_Str"");
  if (!isNullValue) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(this.valueString) + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str""+ nullValueId+ ""String_Node_Str"");
    if (isNullValue)     writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  if (!isSelected && paramDef.mustMatch()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    if (defaultValueText != null) {
      writer.write(""String_Node_Str"" + defaultValueText + ""String_Node_Str"");
    }
    writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
}",0.3400641303405841
76171,"/** 
 * @param documentObject
 * @param dataType
 * @param value
 * @throws IOException
 */
public static void writeValue(IDocumentObject documentObject,int dataType,Object value) throws IOException {
}","/** 
 * @param documentObject
 * @param dataType
 * @param value
 * @throws IOException
 * @throws DataException 
 */
public static void writeValue(IDocumentObject documentObject,int dataType,Object value) throws IOException, DataException {
}",0.907865168539326
76172,"/** 
 * @param levelMember
 * @param keyDataType
 * @param attributesDataType
 * @throws IOException
 */
private void writeLevelMember(Member levelMember,int keyDataType[],int[] attributesDataType) throws IOException {
  for (int i=0; i < levelMember.keyValues.length; i++) {
    DocumentObjectUtil.writeValue(documentObj,keyDataType[i],levelMember.keyValues[i]);
  }
  if (levelMember.attributes != null) {
    for (int i=0; i < levelMember.attributes.length; i++) {
      DocumentObjectUtil.writeValue(documentObj,attributesDataType[i],levelMember.attributes[i]);
    }
  }
}","/** 
 * @param levelMember
 * @param keyDataType
 * @param attributesDataType
 * @throws IOException
 * @throws DataException 
 */
private void writeLevelMember(Member levelMember,int keyDataType[],int[] attributesDataType) throws IOException, DataException {
  for (int i=0; i < levelMember.keyValues.length; i++) {
    DocumentObjectUtil.writeValue(documentObj,keyDataType[i],levelMember.keyValues[i]);
  }
  if (levelMember.attributes != null) {
    for (int i=0; i < levelMember.attributes.length; i++) {
      DocumentObjectUtil.writeValue(documentObj,attributesDataType[i],levelMember.attributes[i]);
    }
  }
}",0.9656903765690376
76173,"/** 
 * @param dimensionMember
 * @param keyDataType
 * @param attributesDataType
 * @throws IOException
 */
private void writeDimensionRow(DimensionRow dimensionMember,int[][] keyDataType,int[][] attributesDataType) throws IOException {
  Member[] levelMembers=dimensionMember.members;
  for (int i=0; i < levelMembers.length; i++) {
    writeLevelMember(levelMembers[i],keyDataType[i],attributesDataType[i]);
  }
}","/** 
 * @param dimensionMember
 * @param keyDataType
 * @param attributesDataType
 * @throws IOException
 * @throws DataException 
 */
private void writeDimensionRow(DimensionRow dimensionMember,int[][] keyDataType,int[][] attributesDataType) throws IOException, DataException {
  Member[] levelMembers=dimensionMember.members;
  for (int i=0; i < levelMembers.length; i++) {
    writeLevelMember(levelMembers[i],keyDataType[i],attributesDataType[i]);
  }
}",0.9530355097365406
76174,"/** 
 * @param sortedKeyArray
 * @param startOffset
 * @param level
 * @param sonLevelTotalNumber
 * @return
 * @throws IOException
 */
private IDiskArray writeNonLeafNode(IDiskArray sortedKeyArray,IDiskArray startOffset,int level,int sonLevelTotalNumber) throws IOException {
  int interval=pow(degree,level);
  BufferedPrimitiveDiskArray sonStartOffset=new BufferedPrimitiveDiskArray(Math.min(Constants.LIST_BUFFER_SIZE,startOffset.size() / degree + 1));
  for (int i=0; i < startOffset.size(); i++) {
    if (i % degree == 0) {
      sonStartOffset.add(new Integer((int)documentObject.getFilePointer()));
    }
    if (i != startOffset.size() - 1) {
      documentObject.writeByte(degree);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(i * interval)).key);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get((i + 1) * interval - 1)).key);
    }
 else {
      documentObject.writeByte(sonLevelTotalNumber - (startOffset.size() - 1) * degree);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(i * interval)).key);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(sortedKeyArray.size() - 1)).key);
    }
    documentObject.writeInt(((Integer)startOffset.get(i)).intValue());
  }
  return sonStartOffset;
}","/** 
 * @param sortedKeyArray
 * @param startOffset
 * @param level
 * @param sonLevelTotalNumber
 * @return
 * @throws IOException
 * @throws DataException 
 */
private IDiskArray writeNonLeafNode(IDiskArray sortedKeyArray,IDiskArray startOffset,int level,int sonLevelTotalNumber) throws IOException, DataException {
  int interval=pow(degree,level);
  BufferedPrimitiveDiskArray sonStartOffset=new BufferedPrimitiveDiskArray(Math.min(Constants.LIST_BUFFER_SIZE,startOffset.size() / degree + 1));
  for (int i=0; i < startOffset.size(); i++) {
    if (i % degree == 0) {
      sonStartOffset.add(new Integer((int)documentObject.getFilePointer()));
    }
    if (i != startOffset.size() - 1) {
      documentObject.writeByte(degree);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(i * interval)).key);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get((i + 1) * interval - 1)).key);
    }
 else {
      documentObject.writeByte(sonLevelTotalNumber - (startOffset.size() - 1) * degree);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(i * interval)).key);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(sortedKeyArray.size() - 1)).key);
    }
    documentObject.writeInt(((Integer)startOffset.get(i)).intValue());
  }
  return sonStartOffset;
}",0.9853832442067736
76175,"/** 
 * @param keyObject
 * @throws IOException
 */
private void writeKeyObject(IndexKey keyObject) throws IOException {
  documentObject.writeInt(keyObject.dimensionPos);
  for (int i=0; i < keyDataType.length; i++) {
    DocumentObjectUtil.writeValue(documentObject,keyDataType[i],keyObject.key[i]);
  }
  documentObject.writeInt(keyObject.offset);
}","/** 
 * @param keyObject
 * @throws IOException
 * @throws DataException 
 */
private void writeKeyObject(IndexKey keyObject) throws IOException, DataException {
  documentObject.writeInt(keyObject.dimensionPos);
  for (int i=0; i < keyDataType.length; i++) {
    DocumentObjectUtil.writeValue(documentObject,keyDataType[i],keyObject.key[i]);
  }
  documentObject.writeInt(keyObject.offset);
}",0.94496644295302
76176,"/** 
 * @param sortedKeyArray
 * @param interval
 * @return
 * @throws IOException
 */
private IDiskArray writeLeafNode(IDiskArray sortedKeyArray,int interval) throws IOException {
  BufferedPrimitiveDiskArray offset=new BufferedPrimitiveDiskArray(Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < sortedKeyArray.size(); i++) {
    if (i % interval == 0) {
      offset.add(new Integer((int)documentObject.getFilePointer()));
    }
    offsetDocumentObject.writeInt((int)documentObject.getFilePointer());
    writeKeyObject((IndexKey)sortedKeyArray.get(i));
  }
  return offset;
}","/** 
 * @param sortedKeyArray
 * @param interval
 * @return
 * @throws IOException
 * @throws DataException 
 */
private IDiskArray writeLeafNode(IDiskArray sortedKeyArray,int interval) throws IOException, DataException {
  BufferedPrimitiveDiskArray offset=new BufferedPrimitiveDiskArray(Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < sortedKeyArray.size(); i++) {
    if (i % interval == 0) {
      offset.add(new Integer((int)documentObject.getFilePointer()));
    }
    offsetDocumentObject.writeInt((int)documentObject.getFilePointer());
    writeKeyObject((IndexKey)sortedKeyArray.get(i));
  }
  return offset;
}",0.9658048373644704
76177,"/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List resultMetaList){
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      String function=measure.getFunction();
      if (query.getGroups().size() > 0) {
        ScriptExpression se=populateExpression(query,measure,function);
        query.addResultSetExpression(measure.getName(),se);
      }
 else {
        query.addResultSetExpression(measure.getName(),new ScriptExpression(measure.getMeasureExpression()));
      }
      ColumnMeta meta=new ColumnMeta(measure.getName());
      meta.setDataType(DataType.DOUBLE_TYPE);
      resultMetaList.add(meta);
    }
  }
}","/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List resultMetaList){
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      String function=measure.getFunction();
      if (query.getGroups().size() > 0) {
        ScriptExpression se=populateExpression(query,measure,function);
        query.addResultSetExpression(measure.getName(),se);
      }
 else {
        query.addResultSetExpression(measure.getName(),new ScriptExpression(measure.getMeasureExpression()));
      }
      ColumnMeta meta=new ColumnMeta(measure.getName());
      meta.setDataType(ModelAdapter.adaptModelDataType(measure.getDataType()));
      resultMetaList.add(meta);
    }
  }
}",0.9555765595463138
76178,"public String[][] getTableItems(){
  String[][] items=new String[][]{new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_GENERAL_DATE),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_GENERAL_DATE)).format(defaultDate)},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE)).format(defaultDate)},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MUDIUM_DATE),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MUDIUM_DATE)).format(defaultDate)},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_DATE),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_DATE)).format(defaultDate)},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_TIME),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_TIME)).format(defaultDate)},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MEDIUM_TIME),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MEDIUM_TIME)).format(defaultDate)},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_TIME),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_TIME)).format(defaultDate)}};
  return items;
}","public String[][] getTableItems(){
  String[][] items=new String[][]{new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_GENERAL_DATE),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_GENERAL_DATE)).format(defaultDate),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_GENERAL_DATE)).getFormatCode()},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE)).format(defaultDate),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE)).getFormatCode()},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MUDIUM_DATE),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MUDIUM_DATE)).format(defaultDate),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MUDIUM_DATE)).getFormatCode()},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_DATE),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_DATE)).format(defaultDate),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_DATE)).getFormatCode()},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_TIME),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_TIME)).format(defaultDate),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_TIME)).getFormatCode()},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MEDIUM_TIME),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MEDIUM_TIME)).format(defaultDate),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_MEDIUM_TIME)).getFormatCode()},new String[]{getDisplayName4Category(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_TIME),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_TIME)).format(defaultDate),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_SHORT_TIME)).getFormatCode()}};
  return items;
}",0.7843047269389628
76179,"/** 
 * Creates the table in custom page.
 * @param parent Parent contains the table.
 */
private void createTable(Composite parent){
  if (!isFormStyle())   table=new Table(parent,SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER);
 else   table=FormWidgetFactory.getInstance().createTable(parent,SWT.FULL_SELECTION | SWT.HIDE_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=2;
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    data.widthHint=240;
  }
  table.setLayoutData(data);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      formatCode.setText(provider.getPattern(((TableItem)e.item).getText(FORMAT_TYPE_INDEX)));
      updatePreview();
      notifyFormatChange();
    }
  }
);
  TableColumn tableColumValue=new TableColumn(table,SWT.NONE);
  tableColumValue.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_CODE);
  tableColumValue.setWidth(120);
  tableColumValue.setResizable(true);
  TableColumn tableColumnDisplay=new TableColumn(table,SWT.NONE);
  tableColumnDisplay.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_RESULT);
  tableColumnDisplay.setWidth(115);
  tableColumnDisplay.setResizable(true);
  String[][] items=provider.getTableItems();
  for (int i=0; i < items.length; i++) {
    new TableItem(table,SWT.NONE).setText(items[i]);
  }
}","/** 
 * Creates the table in custom page.
 * @param parent Parent contains the table.
 */
private void createTable(Composite parent){
  if (!isFormStyle())   table=new Table(parent,SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER);
 else   table=FormWidgetFactory.getInstance().createTable(parent,SWT.FULL_SELECTION | SWT.HIDE_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=2;
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    data.widthHint=240;
  }
  table.setLayoutData(data);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      formatCode.setText(((TableItem)e.item).getText(FORMAT_CODE_INDEX));
      updatePreview();
      notifyFormatChange();
    }
  }
);
  TableColumn tableColumValue=new TableColumn(table,SWT.NONE);
  tableColumValue.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_NAME);
  tableColumValue.setWidth(120);
  tableColumValue.setResizable(true);
  TableColumn tableColumnDisplay=new TableColumn(table,SWT.NONE);
  tableColumnDisplay.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_RESULT);
  tableColumnDisplay.setWidth(115);
  tableColumnDisplay.setResizable(true);
  TableColumn tableColumnFormatCode=new TableColumn(table,SWT.NONE);
  tableColumnFormatCode.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_CODE);
  tableColumnFormatCode.setWidth(150);
  tableColumnFormatCode.setResizable(true);
  String[][] items=provider.getTableItems();
  for (int i=0; i < items.length; i++) {
    new TableItem(table,SWT.NONE).setText(items[i]);
  }
}",0.9147952443857332
76180,"public void widgetSelected(SelectionEvent e){
  formatCode.setText(provider.getPattern(((TableItem)e.item).getText(FORMAT_TYPE_INDEX)));
  updatePreview();
  notifyFormatChange();
}","public void widgetSelected(SelectionEvent e){
  formatCode.setText(((TableItem)e.item).getText(FORMAT_CODE_INDEX));
  updatePreview();
  notifyFormatChange();
}",0.9208211143695014
76181,"/** 
 * Creates the table in custom page.
 * @param parent Parent contains the table.
 */
private void createTable(Composite parent){
  table=new Table(parent,SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=2;
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    data.widthHint=240;
  }
  table.setLayoutData(data);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String displayName=((TableItem)e.item).getText(FORMAT_TYPE_INDEX);
      String category=ChoiceSetFactory.getStructPropValue(DateTimeFormatValue.FORMAT_VALUE_STRUCT,DateTimeFormatValue.CATEGORY_MEMBER,displayName);
      formatCode.setText(FormatDateTimePattern.getFormatCodeForCategory(category));
      updatePreview();
      notifyFormatChange();
    }
  }
);
  TableColumn tableColumValue=new TableColumn(table,SWT.NONE);
  tableColumValue.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_NAME);
  tableColumValue.setWidth(90);
  tableColumValue.setResizable(true);
  TableColumn tableColumnDisplay=new TableColumn(table,SWT.NONE);
  tableColumnDisplay.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_RESULT);
  tableColumnDisplay.setWidth(120);
  tableColumnDisplay.setResizable(true);
  TableColumn tableColumnFormatCode=new TableColumn(table,SWT.NONE);
  tableColumnFormatCode.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_CODE);
  tableColumnFormatCode.setWidth(120);
  tableColumnFormatCode.setResizable(true);
  for (int i=0; i < DATETIME_FORMAT_TYPES.length; i++) {
    new TableItem(table,SWT.NONE).setText(new String[]{getDisplayName4Category(DATETIME_FORMAT_TYPES[i]),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DATETIME_FORMAT_TYPES[i])).format(defaultDate),FormatDateTimePattern.getFormatCodeForCategory(DATETIME_FORMAT_TYPES[i])});
  }
}","/** 
 * Creates the table in custom page.
 * @param parent Parent contains the table.
 */
private void createTable(Composite parent){
  table=new Table(parent,SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=2;
  if (pageAlignment == PAGE_ALIGN_HORIZONTAL) {
    data.widthHint=240;
  }
  table.setLayoutData(data);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      formatCode.setText(((TableItem)e.item).getText(FORMAT_CODE_INDEX));
      updatePreview();
      notifyFormatChange();
    }
  }
);
  TableColumn tableColumValue=new TableColumn(table,SWT.NONE);
  tableColumValue.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_NAME);
  tableColumValue.setWidth(90);
  tableColumValue.setResizable(true);
  TableColumn tableColumnDisplay=new TableColumn(table,SWT.NONE);
  tableColumnDisplay.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_RESULT);
  tableColumnDisplay.setWidth(120);
  tableColumnDisplay.setResizable(true);
  TableColumn tableColumnFormatCode=new TableColumn(table,SWT.NONE);
  tableColumnFormatCode.setText(LABEL_TABLE_COLUMN_EXAMPLE_FORMAT_CODE);
  tableColumnFormatCode.setWidth(120);
  tableColumnFormatCode.setResizable(true);
  for (int i=0; i < DATETIME_FORMAT_TYPES.length; i++) {
    new TableItem(table,SWT.NONE).setText(new String[]{getDisplayName4Category(DATETIME_FORMAT_TYPES[i]),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DATETIME_FORMAT_TYPES[i])).format(defaultDate),new DateFormatter(FormatDateTimePattern.getPatternForCategory(DATETIME_FORMAT_TYPES[i])).getFormatCode()});
  }
}",0.9009981116806044
76182,"public void widgetSelected(SelectionEvent e){
  String displayName=((TableItem)e.item).getText(FORMAT_TYPE_INDEX);
  String category=ChoiceSetFactory.getStructPropValue(DateTimeFormatValue.FORMAT_VALUE_STRUCT,DateTimeFormatValue.CATEGORY_MEMBER,displayName);
  formatCode.setText(FormatDateTimePattern.getFormatCodeForCategory(category));
  updatePreview();
  notifyFormatChange();
}","public void widgetSelected(SelectionEvent e){
  formatCode.setText(((TableItem)e.item).getText(FORMAT_CODE_INDEX));
  updatePreview();
  notifyFormatChange();
}",0.5230202578268877
76183,"/** 
 * @return
 */
protected IModelAdapterHelper getModelAdaptHelper(){
  return helper;
}","/** 
 * @return
 */
public IModelAdapterHelper getModelAdaptHelper(){
  return helper;
}",0.9385474860335196
76184,"/** 
 * Remove cached adapter
 * @param obj Key to find the adapter
 */
public void remove(Object obj){
  removeRelated(obj);
  map.remove(obj);
}","/** 
 * Remove cached adapter
 * @param obj Key to find the adapter
 */
public void remove(Object obj){
  remove(obj,null);
}",0.8856088560885609
76185,"public void deactivate(){
  if (!isActive())   return;
  removeGuideFeedBack();
  super.deactivate();
  HandleAdapterFactory.getInstance().remove(getModel());
}","public void deactivate(){
  if (!isActive())   return;
  removeGuideFeedBack();
  super.deactivate();
  HandleAdapterFactory.getInstance().remove(getModel(),this);
}",0.9846153846153848
76186,"private void clearDefaultValueChooser(boolean isChecked){
  if (isChecked) {
    clearDefaultValueText();
    clearDefaultValueChooserSelections();
  }
 else {
    if (defaultValueChooser.getItemCount() > 0)     return;
    defaultValueChooser.add(CHOICE_NULL_VALUE);
    defaultValueChooser.add(CHOICE_BLANK_VALUE);
  }
}","private void clearDefaultValueChooser(boolean isChecked){
  if (defaultValueChooser == null || defaultValueChooser.isDisposed())   return;
  if (isChecked) {
    clearDefaultValueText();
    clearDefaultValueChooserSelections();
  }
 else {
    if (defaultValueChooser.getItemCount() > 0)     return;
    defaultValueChooser.add(CHOICE_NULL_VALUE);
    defaultValueChooser.add(CHOICE_BLANK_VALUE);
  }
}",0.8882758620689655
76187,"private void clearDefaultValueText(){
  if (defaultValueChooser == null)   return;
  String textValue=defaultValueChooser.getText();
  if (textValue != null && textValue.equals(CHOICE_NULL_VALUE) || textValue.equals(CHOICE_BLANK_VALUE)) {
    defaultValueChooser.setText(""String_Node_Str"");
  }
}","private void clearDefaultValueText(){
  String textValue=defaultValueChooser.getText();
  if (textValue != null && textValue.equals(CHOICE_NULL_VALUE) || textValue.equals(CHOICE_BLANK_VALUE)) {
    defaultValueChooser.setText(""String_Node_Str"");
  }
}",0.9177330895795248
76188,"private void clearDefaultValueChooserSelections(){
  if (defaultValueChooser == null)   return;
  if (defaultValueChooser.getItemCount() > 1) {
    defaultValueChooser.remove(1,defaultValueChooser.getItemCount() - 1);
  }
}","private void clearDefaultValueChooserSelections(){
  if (defaultValueChooser.getItemCount() > 1) {
    defaultValueChooser.remove(1,defaultValueChooser.getItemCount() - 1);
  }
}",0.8877805486284289
76189,"private void updateMessageLine(){
  String errorMessage=validateName();
  if (errorMessage == null) {
    if (!isStatic() && columnChooser != null && columnChooser.getItemCount() == 0) {
      errorMessage=ERROR_MSG_NO_AVAILABLE_COLUMN;
    }
 else     if (defaultValue == null && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType()))) {
      if (!canBeNull() || !containValue(null,null,COLUMN_VALUE)) {
        errorMessage=ERROR_MSG_NO_DEFAULT_VALUE;
      }
    }
  }
  if (errorMessage != null) {
    errorMessageLine.setText(errorMessage);
    errorMessageLine.setImage(ERROR_ICON);
  }
 else {
    errorMessageLine.setText(""String_Node_Str"");
    errorMessageLine.setImage(null);
  }
  if (promptMessageLine != null && !promptMessageLine.isDisposed()) {
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      promptMessageLine.setText(LABEL_DATETIME_PROMPT);
    }
 else {
      promptMessageLine.setText(""String_Node_Str"");
    }
  }
  updateButtons();
}","private void updateMessageLine(){
  String errorMessage=validateName();
  if (errorMessage == null) {
    if (!isStatic() && columnChooser != null && columnChooser.getItemCount() == 0) {
      errorMessage=ERROR_MSG_NO_AVAILABLE_COLUMN;
    }
    if (defaultValue == null && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType()))) {
      errorMessage=canBeNull() ? null : ERROR_MSG_NO_DEFAULT_VALUE;
    }
  }
  if (errorMessage != null) {
    errorMessageLine.setText(errorMessage);
    errorMessageLine.setImage(ERROR_ICON);
  }
 else {
    errorMessageLine.setText(""String_Node_Str"");
    errorMessageLine.setImage(null);
  }
  if (promptMessageLine != null && !promptMessageLine.isDisposed()) {
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      promptMessageLine.setText(LABEL_DATETIME_PROMPT);
    }
 else {
      promptMessageLine.setText(""String_Node_Str"");
    }
  }
  updateButtons();
}",0.9495718363463368
76190,"private void clearDefaultValueChooser(boolean isChecked){
  if (isChecked) {
    clearDefaultValueText();
    clearDefaultValueChooserSelections();
  }
 else {
    if (defaultValueChooser == null || defaultValueChooser.getItemCount() > 1)     return;
    defaultValueChooser.add(CHOICE_NULL_VALUE);
    defaultValueChooser.add(CHOICE_BLANK_VALUE);
  }
}","private void clearDefaultValueChooser(boolean isChecked){
  if (defaultValueChooser == null || defaultValueChooser.isDisposed())   return;
  if (isChecked) {
    clearDefaultValueText();
    clearDefaultValueChooserSelections();
  }
 else {
    if (defaultValueChooser == null || defaultValueChooser.getItemCount() > 1)     return;
    defaultValueChooser.add(CHOICE_NULL_VALUE);
    defaultValueChooser.add(CHOICE_BLANK_VALUE);
  }
}",0.8970775095298602
76191,"private void clearDefaultValueText(){
  if (defaultValueChooser == null)   return;
  String textValue=defaultValueChooser.getText();
  if (textValue != null && textValue.equals(CHOICE_NULL_VALUE) || textValue.equals(CHOICE_BLANK_VALUE)) {
    defaultValueChooser.setText(""String_Node_Str"");
  }
}","private void clearDefaultValueText(){
  String textValue=defaultValueChooser.getText();
  if (textValue != null && textValue.equals(CHOICE_NULL_VALUE) || textValue.equals(CHOICE_BLANK_VALUE)) {
    defaultValueChooser.setText(""String_Node_Str"");
  }
}",0.9177330895795248
76192,"private void clearDefaultValueChooserSelections(){
  if (defaultValueChooser == null)   return;
  if (defaultValueChooser.getItemCount() > 1) {
    defaultValueChooser.remove(CHOICE_NULL_VALUE);
    defaultValueChooser.remove(CHOICE_BLANK_VALUE);
  }
}","private void clearDefaultValueChooserSelections(){
  if (defaultValueChooser.getItemCount() > 1) {
    defaultValueChooser.remove(CHOICE_NULL_VALUE);
    defaultValueChooser.remove(CHOICE_BLANK_VALUE);
  }
}",0.9019607843137256
76193,"public Object getDefaultValue(String name){
  ReportDesignHandle report=(ReportDesignHandle)runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return null;
  }
  usingParameterValues();
  String expr=parameter.getDefaultValue();
  if (expr == null || expr.length() == 0) {
    return null;
  }
  return convertToType(expr,parameter.getDataType());
}","public Object getDefaultValue(String name){
  ReportDesignHandle report=(ReportDesignHandle)runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return null;
  }
  usingParameterValues();
  String expr=parameter.getDefaultValue();
  String dataType=parameter.getDataType();
  if (expr == null || (expr.length() == 0 && !DesignChoiceConstants.PARAM_TYPE_STRING.equals(dataType))) {
    return null;
  }
  return convertToType(expr,dataType);
}",0.8738461538461538
76194,"/** 
 * Close the container tag.
 */
public void closeContainerTag(){
  writer.openTag(HTMLTags.TAG_DIV);
}","/** 
 * Close the container tag.
 */
public void closeContainerTag(){
  writer.closeTag(HTMLTags.TAG_DIV);
}",0.9767441860465116
76195,"/** 
 * Close the container tag.
 */
public void closeContainerTag(){
  writer.openTag(HTMLTags.TAG_DIV);
  int display=((Integer)cellDisplayStack.pop()).intValue();
  if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
    closeInlineBoxTag();
  }
}","/** 
 * Close the container tag.
 */
public void closeContainerTag(){
  writer.closeTag(HTMLTags.TAG_DIV);
  int display=((Integer)cellDisplayStack.pop()).intValue();
  if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
    closeInlineBoxTag();
  }
}",0.9856
76196,"public void drawTotalPage(String text,float textX,float textY,float width,float height,TextStyle textInfo){
  drawText(text,textX,textY,width,height,textInfo.getFontInfo(),textInfo.getCharacterSpacing(),textInfo.getWordSpacing(),textInfo.getColor(),textInfo.isLinethrough(),textInfo.isOverline(),textInfo.isUnderline(),textInfo.getAlign(),true);
}","public void drawTotalPage(String text,float textX,float textY,float width,float height,TextStyle textInfo){
  if (totalPageTemplate != null)   drawText(text,textX,textY,width,height,textInfo.getFontInfo(),textInfo.getCharacterSpacing(),textInfo.getWordSpacing(),textInfo.getColor(),textInfo.isLinethrough(),textInfo.isOverline(),textInfo.isUnderline(),textInfo.getAlign(),true);
}",0.9546079779917468
76197,"public void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  cbUnder.saveState();
  Image img=null;
  try {
    img=Image.getInstance(imageUrl);
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=cbUnder.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      cbUnder.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=cbUnder.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          cbUnder.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          cbUnder.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=cbUnder.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=cbUnder.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              cbUnder.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              cbUnder.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  cbUnder.restoreState();
}","public void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  cbUnder.saveState();
  Image img=null;
  try {
    img=Image.getInstance(imageUrl);
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=cbUnder.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      cbUnder.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=cbUnder.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          cbUnder.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          cbUnder.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=cbUnder.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=cbUnder.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              cbUnder.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              cbUnder.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  cbUnder.restoreState();
}",0.998392418986378
76198,"public void startLabel(ILabelContent label){
  Object design=label.getGenerateBy();
  IContent container=label;
  while (design == null) {
    container=(IContent)container.getParent();
    design=((IContent)container).getGenerateBy();
  }
  String url=parseHyperLink(label);
  addData(design,label.getComputedStyle(),url,label.getText());
}","public void startLabel(ILabelContent label){
  Object design=label.getGenerateBy();
  IContent container=label;
  while (design == null) {
    container=(IContent)container.getParent();
    design=((IContent)container).getGenerateBy();
  }
  HyperlinkDef url=parseHyperLink(label);
  addData(design,label.getComputedStyle(),url,label.getText());
}",0.7703488372093024
76199,"public void startData(IDataContent data){
  String url=parseHyperLink(data);
  addData(data.getGenerateBy(),data.getComputedStyle(),url,data.getText());
}","public void startData(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  addData(data.getGenerateBy(),data.getComputedStyle(),url,data.getText());
}",0.961783439490446
76200,"public void startCell(ICellContent cell){
  CellDesign design=(CellDesign)cell.getGenerateBy();
  if (design.getContentCount() == 0) {
    addData(design,cell.getComputedStyle(),null,EMPTY);
  }
}","public void startCell(ICellContent cell){
  CellDesign design=(CellDesign)cell.getGenerateBy();
  if (design.getContentCount() == 0) {
    HyperlinkDef url=parseHyperLink(cell);
    addData(design,cell.getComputedStyle(),url,EMPTY);
  }
}",0.8894009216589862
76201,"/** 
 * Add an element's data to container.
 * @param design element's design
 * @param style element's style
 * @param url url defined on element
 * @param txt element's value
 */
private void addData(Object design,IStyle style,String url,String txt){
  Span span=(Span)design2ExcelSpan.get(design);
  if (span == null) {
    return;
  }
  StyleEntry entry=engine.getStyle(style,span);
  Data data=new Data(txt,INVALID,span,url,entry);
  for (int col=span.getCol(); col < span.getCol() + span.getColSpan() + 1; col++) {
    lb.add(col,data);
  }
  if (design instanceof DataItemDesign && tableBindings.size() > 0) {
    TableBinding tb=(TableBinding)tableBindings.peek();
    if (tb.isAggregateData(design)) {
      tb.add2DataList(design,data);
    }
 else {
      GroupInfo groupInfo=(GroupInfo)groupInfos.peek();
      int index=tb.getDataItemDesignIndex(design);
      groupInfo.addPosition(index,span.getCol(),lb.getListSize(span.getCol()));
    }
  }
  if (design instanceof DynamicTextItemDesign) {
    engine.calculateTopStyles();
  }
}","/** 
 * Add an element's data to container.
 * @param design element's design
 * @param style element's style
 * @param url url defined on element
 * @param txt element's value
 */
private void addData(Object design,IStyle style,HyperlinkDef url,String txt){
  Span span=(Span)design2ExcelSpan.get(design);
  if (span == null) {
    return;
  }
  StyleEntry entry=engine.getStyle(style,span);
  Data data=new Data(txt,INVALID,span,url,entry);
  for (int col=span.getCol(); col < span.getCol() + span.getColSpan() + 1; col++) {
    if (url != null && url.getBookmark() != null) {
      String cellID=convertCharacter(col) + (lb.getListSize(col) + 1);
      if (bookmarkList.get(url.getBookmark()) == null) {
        bookmarkList.put(url.getBookmark(),cellID);
      }
    }
    lb.add(col,data);
  }
  if (design instanceof DataItemDesign && tableBindings.size() > 0) {
    TableBinding tb=(TableBinding)tableBindings.peek();
    if (tb.isAggregateData(design)) {
      tb.add2DataList(design,data);
    }
 else {
      GroupInfo groupInfo=(GroupInfo)groupInfos.peek();
      int index=tb.getDataItemDesignIndex(design);
      groupInfo.addPosition(index,span.getCol(),lb.getListSize(span.getCol()));
    }
  }
  if (design instanceof DynamicTextItemDesign) {
    engine.calculateTopStyles();
  }
}",0.8360375747224594
76202,"public void startAutoText(IAutoTextContent autoText){
  String url=parseHyperLink(autoText);
  addData(autoText.getGenerateBy(),autoText.getComputedStyle(),url,autoText.getText());
}","public void startAutoText(IAutoTextContent autoText){
  HyperlinkDef url=parseHyperLink(autoText);
  addData(autoText.getGenerateBy(),autoText.getComputedStyle(),url,autoText.getText());
}",0.9675675675675676
76203,"private String parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      return linkaction.getBookmark().replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return linkaction.getHyperlink();
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=eservice.getOption(RenderOptionBase.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        actionHandler.getURL(act,null);
        return actionHandler.getURL(act,eservice.getReportContext());
      }
    }
  }
  return null;
}","private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      return new HyperlinkDef(linkaction.getBookmark().replaceAll(""String_Node_Str"",""String_Node_Str""),IHyperlinkAction.ACTION_BOOKMARK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=eservice.getOption(RenderOptionBase.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        actionHandler.getURL(act,null);
        return new HyperlinkDef(actionHandler.getURL(act,eservice.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null);
      }
    }
  }
 else   if (getBookMark(content) != null) {
    return getBookMark(content);
  }
  return null;
}",0.8333333333333334
76204,"private void writeDatas(ExcelWriter writer){
  try {
    Object[] os;
    lb.open();
    writer.startRow();
    writer.endRow();
    while (lb.more()) {
      writer.startRow();
      os=lb.readLine();
      for (int i=0; i < os.length; i++) {
        Data d=(Data)os[i];
        Object o=formulaDatas.get(d);
        if (o != null) {
          Data x=(Data)o;
          d.isTxtData=x.isTxtData;
          d.txt=x.txt;
        }
        if (d.isTxtData) {
          writer.writeTxtData(d);
        }
 else {
          writer.writeFormulaData(d);
        }
        i+=d.span.getColSpan();
      }
      writer.endRow();
    }
    lb.close();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    throw new RuntimeException(""String_Node_Str"");
  }
}","private void writeDatas(ExcelWriter writer){
  try {
    Object[] os;
    lb.open();
    while (lb.more()) {
      writer.startRow();
      os=lb.readLine();
      for (int i=0; i < os.length; i++) {
        Data d=(Data)os[i];
        HyperlinkDef def=d.getHyperlinkDef();
        if (def != null && def.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          def.setUrl((String)bookmarkList.get(def.getUrl()));
        }
        Object o=formulaDatas.get(d);
        if (o != null) {
          Data x=(Data)o;
          d.isTxtData=x.isTxtData;
          d.txt=x.txt;
        }
        if (d.isTxtData) {
          writer.writeTxtData(d);
        }
 else {
          writer.writeFormulaData(d);
        }
        i+=d.span.getColSpan();
      }
      writer.endRow();
    }
    lb.close();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.8578143360752056
76205,"public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dY+=dUnitSize / 2;
          }
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      double dLength=0;
      for (int j=0; j < iTickCount - 1; j++) {
        if (aax.areAxesSwapped()) {
          if (dY >= daTickCoordinates[j + 1] && dY <= daTickCoordinates[j]) {
            dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
            break;
          }
        }
 else {
          if (dX <= daTickCoordinates[j + 1] && dX >= daTickCoordinates[j]) {
            dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
            break;
          }
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}","public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dY+=dUnitSize / 2;
          }
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      double dLength=0;
      for (int j=0; j < iTickCount - 1; j++) {
        if (aax.areAxesSwapped()) {
          if ((dY <= daTickCoordinates[j] && dY >= daTickCoordinates[j + 1]) || (dY <= daTickCoordinates[j + 1] && dY >= daTickCoordinates[j])) {
            dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
            break;
          }
        }
 else {
          if ((dX <= daTickCoordinates[j + 1] && dX >= daTickCoordinates[j]) || (dX <= daTickCoordinates[j] && dX >= daTickCoordinates[j + 1])) {
            dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
            break;
          }
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}",0.9726572869657552
76206,"protected void dropSourceElementHandle(DesignElementHandle handle) throws SemanticException {
  if (handle.getContainer() != null) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(handle));
    }
    if (handle instanceof CellHandle) {
      dropSourceSlotHandle(((CellHandle)handle).getContent());
    }
 else     if (handle instanceof RowHandle) {
      new DeleteRowCommand(handle).execute();
    }
 else     if (handle instanceof ColumnHandle) {
      new DeleteColumnCommand(handle).execute();
    }
 else {
      handle.drop();
    }
  }
}","protected void dropSourceElementHandle(DesignElementHandle handle) throws SemanticException {
  if (handle.getContainer() != null) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(handle));
    }
    if (handle instanceof CellHandle) {
      dropSourceSlotHandle(((CellHandle)handle).getContent());
    }
 else     if (handle instanceof RowHandle) {
      new DeleteRowCommand(handle).execute();
    }
 else     if (handle instanceof ColumnHandle) {
      new DeleteColumnCommand(handle).execute();
    }
 else {
      handle.dropAndClear();
    }
  }
}",0.9935064935064936
76207,"Data(final String txt,final int styleId,final Span span,final String url,final StyleEntry s){
  this.txt=txt;
  this.span=span;
  this.styleId=styleId;
  this.url=url;
  this.style=s;
  id=ID++;
}","Data(final String txt,final int styleId,final Span span,final HyperlinkDef url,final StyleEntry s){
  this.txt=txt;
  this.span=span;
  this.styleId=styleId;
  this.url=url;
  this.style=s;
  id=ID++;
}",0.9547738693467336
76208,"public void startCell(int index,int colSpan,int rowSpan,int id,String hyperLink){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",index);
  writer.attribute(""String_Node_Str"",id);
  if (hyperLink != null) {
    writer.attribute(""String_Node_Str"",hyperLink);
  }
  writer.attribute(""String_Node_Str"",colSpan);
  writer.attribute(""String_Node_Str"",rowSpan);
}","public void startCell(int index,int colSpan,int rowSpan,int id,HyperlinkDef hyperLink){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",index);
  writer.attribute(""String_Node_Str"",id);
  if (hyperLink != null) {
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"" + hyperLink.getUrl());
    }
 else {
      writer.attribute(""String_Node_Str"",hyperLink.getUrl());
    }
  }
  writer.attribute(""String_Node_Str"",colSpan);
  writer.attribute(""String_Node_Str"",rowSpan);
}",0.7121848739495799
76209,"public Object[] getChildren(Object model){
  if (model instanceof ThemeHandle) {
    ThemeHandle theme=(ThemeHandle)model;
    int count, styleCount=0;
    styleCount+=(super.getChildrenBySlotHandle(((ThemeHandle)model).getStyles())).length;
    count=styleCount;
    count+=theme.getAllCssStyleSheets().size();
    Object obj[]=new Object[count];
    for (int i=0; i < styleCount; i++) {
      obj[i]=(super.getChildrenBySlotHandle(((ThemeHandle)model).getStyles()))[i];
    }
    for (int i=0; i < theme.getAllCssStyleSheets().size(); i++) {
      obj[styleCount + i]=(CssStyleSheetHandle)theme.getAllCssStyleSheets().get(i);
    }
    return obj;
  }
  return super.getChildren(model);
}","public Object[] getChildren(Object model){
  if (model instanceof ThemeHandle) {
    ThemeHandle theme=(ThemeHandle)model;
    int count, styleCount=0;
    styleCount+=(super.getChildrenBySlotHandle(((ThemeHandle)model).getStyles())).length;
    count=styleCount;
    count+=theme.getAllCssStyleSheets().size();
    Object obj[]=new Object[count];
    for (int i=0; i < styleCount; i++) {
      obj[i]=(super.getChildrenBySlotHandle(((ThemeHandle)model).getStyles()))[i];
    }
    for (int i=0; i < theme.getAllCssStyleSheets().size(); i++) {
      obj[styleCount + i]=(CssStyleSheetHandle)theme.getAllCssStyleSheets().get(i);
    }
    Arrays.sort(obj,new AlphabeticallyComparator());
    return obj;
  }
  return super.getChildren(model);
}",0.9630146545708304
76210,"/** 
 * Constructor. If config is null, engine derives BIRT_HOME from the location of the engine jar file, and derives data driver directory as $BIRT_HOME/drivers. For a simple report with no images and links, engine will run without complaining. If the report has image/chart defined, the engine has to be configured with relevant image and chart handlers.
 * @param config an engine configuration object used to configure the engine
 */
public ReportEngine(EngineConfig config){
  logger=intializeLogger();
  logger.log(Level.FINE,""String_Node_Str"",config);
  this.config=config;
  this.helper=new ReportEngineHelper(this);
  setupScriptScope();
}","/** 
 * Constructor. If config is null, engine derives BIRT_HOME from the location of the engine jar file, and derives data driver directory as $BIRT_HOME/drivers. For a simple report with no images and links, engine will run without complaining. If the report has image/chart defined, the engine has to be configured with relevant image and chart handlers.
 * @param config an engine configuration object used to configure the engine
 */
public ReportEngine(EngineConfig config){
  this.config=config;
  logger=intializeLogger();
  logger.log(Level.FINE,""String_Node_Str"",config);
  this.helper=new ReportEngineHelper(this);
  setupScriptScope();
}",0.9661016949152542
76211,"/** 
 * Renders the axis.
 * @throws ChartException
 */
public final void renderEachAxis() throws ChartException {
  final double dStaggeredLabelOffset=sc.computeStaggeredAxisLabelOffset(xs,la,iOrientation);
  if (!lia.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  tre.setLabel(la);
  tre.setTextPosition(iLabelLocation);
  tre.setLocation(lo);
  lre.setLineAttributes(lia);
  lre.setStart(LocationImpl.create(0,0));
  lre.setEnd(LocationImpl.create(0,0));
  double dXStart=0;
  double dXEnd=0;
  double dZStart=0;
  double dZEnd=0;
  if (iDimension == IConstants.THREE_D) {
    AllAxes aax=pwa.getAxes();
    dXEnd=aax.getPrimaryBase().getScale().getEnd();
    dZEnd=aax.getAncillaryBase().getScale().getEnd();
    dXStart=aax.getPrimaryBase().getScale().getStart();
    dZStart=aax.getAncillaryBase().getScale().getStart();
    daEndPoints3D=sc.getEndPoints();
    da3D=sc.getTickCordinates();
    lo3d=Location3DImpl.create(0,0,0);
    t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
    t3dre.setLabel(la);
    t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
    t3dre.setTextPosition(iLabelLocation);
    t3dre.setLocation3D(lo3d);
    l3dre=(Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Line3DRenderEvent.class);
    l3dre.setLineAttributes(lia);
    l3dre.setStart3D(Location3DImpl.create(0,0,0));
    l3dre.setEnd3D(Location3DImpl.create(0,0,0));
  }
  if (iOrientation == IConstants.VERTICAL) {
    final ComputationContext context=new ComputationContext(true);
    context.y3d=0;
    context.dX=dLocation;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      context.dX=l3d.getX();
      dZ=l3d.getZ();
    }
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - IConstants.TICK_SIZE) : context.dX;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + IConstants.TICK_SIZE : context.dX;
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderOrthogonal3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(context.dX,dStart,dZ);
        l3dre.setEnd3D(context.dX,dEnd,dZ);
        dc.addLine(l3dre);
        l3dre.setStart3D(context.dX,dStart,dZEnd);
        l3dre.setEnd3D(context.dX,dEnd,dZEnd);
        dc.addLine(l3dre);
        l3dre.setStart3D(dXEnd,dStart,dZ);
        l3dre.setEnd3D(dXEnd,dEnd,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            ArrayList cachedTriggers=null;
            Location3D[] loaHotspot=new Location3D[4];
            Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot[0]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              cachedTriggers=new ArrayList();
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                cachedTriggers.add(tg);
                iev.addTrigger(TriggerImpl.copyInstance(tg));
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                cachedTriggers=new ArrayList();
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  cachedTriggers.add(tg);
                  iev.addTrigger(TriggerImpl.copyInstance(tg));
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger(TriggerImpl.copyInstance((Trigger)cachedTriggers.get(t)));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  iev.addTrigger(tg);
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger((Trigger)cachedTriggers.get(t));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] + insCA.getBottom(), dEnd=daEndPoints[1] - insCA.getTop();
        if (sc.getDirection() == IConstants.FORWARD) {
          dStart=daEndPoints[1] + insCA.getBottom();
          dEnd=daEndPoints[0] - insCA.getTop();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(context.dX,dStart);
          loa[1]=LocationImpl.create(context.dX + dSeriesThickness,dStart - dSeriesThickness);
          loa[2]=LocationImpl.create(context.dX + dSeriesThickness,dEnd - dSeriesThickness);
          loa[3]=LocationImpl.create(context.dX,dEnd);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(context.dX,dStart);
        lre.getEnd().set(context.dX,dEnd);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[1]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[2]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dEnd);
            loaHotspot[3]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dEnd);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderVerticalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Bounds cbo=renderer.getPlotBounds();
          tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + (cbo.getWidth() / 3d - bb.getWidth()) / 2d,cbo.getTop() + 30,bb.getWidth(),bb.getHeight()));
          tre.setLabel(la);
          tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
          tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + cbo.getWidth() - bb.getWidth(),cbo.getTop() + 30 * 2,bb.getWidth(),bb.getHeight()));
          ipr.drawText(tre);
        }
 else {
          final Bounds bo=BoundsImpl.create(ax.getTitleCoordinate(),daEndPoints[1],bb.getWidth(),daEndPoints[0] - daEndPoints[1]);
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
 else {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          if (ax.getTitle().isVisible()) {
            ipr.drawText(tre);
          }
        }
      }
      la.getCaption().setValue(sRestoreValue);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
 else   if (iOrientation == IConstants.HORIZONTAL) {
    final ComputationContext context=new ComputationContext(false);
    context.x3d=0;
    context.z3d=0;
    context.dY=dLocation;
    double dX=0;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      dX=l3d.getX();
      context.dY=l3d.getY();
      dZ=l3d.getZ();
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + IConstants.TICK_SIZE : context.dY - IConstants.TICK_SIZE) : context.dY;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - IConstants.TICK_SIZE : context.dY + IConstants.TICK_SIZE) : context.dY;
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderBase3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dStart,context.dY,dZ);
        l3dre.setEnd3D(dEnd,context.dY,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[1]=Location3DImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[2]=Location3DImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[3]=Location3DImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else       if (bRenderAncillary3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dX,context.dY,dStart);
        l3dre.setEnd3D(dX,context.dY,dEnd);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[1]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[2]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            loaHotspot[3]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] - insCA.getLeft(), dEnd=daEndPoints[1] + insCA.getRight();
        if (sc.getDirection() == IConstants.BACKWARD) {
          dStart=daEndPoints[1] - insCA.getLeft();
          dEnd=daEndPoints[0] + insCA.getRight();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(dStart,context.dY);
          loa[1]=LocationImpl.create(dStart + dSeriesThickness,context.dY - dSeriesThickness);
          loa[2]=LocationImpl.create(dEnd + dSeriesThickness,context.dY - dSeriesThickness);
          loa[3]=LocationImpl.create(dEnd,context.dY);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(dStart,context.dY);
        lre.getEnd().set(dEnd,context.dY);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[1]=LocationImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[2]=LocationImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_SIZE);
            loaHotspot[3]=LocationImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_SIZE);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderHorizontalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      la.getCaption().getFont().setAlignment(renderer.switchTextAlignment(la.getCaption().getFont().getAlignment()));
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Bounds cbo=renderer.getPlotBounds();
          if (axisType == IConstants.BASE_AXIS) {
            tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + (cbo.getWidth() / 3d - bb.getWidth()),cbo.getTop() + cbo.getHeight() - Math.min(bb.getHeight(),bb.getWidth()) - 30,bb.getWidth(),bb.getHeight()));
          }
 else {
            tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + cbo.getWidth() * 2 / 3d + (cbo.getWidth() / 3d - bb.getWidth()) / 2d,cbo.getTop() + cbo.getHeight() - Math.min(bb.getHeight(),bb.getWidth()) - 30 * 2,bb.getWidth(),bb.getHeight()));
          }
          tre.setLabel(la);
          tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
 else {
          final Bounds bo=BoundsImpl.create(daEndPoints[0],ax.getTitleCoordinate(),daEndPoints[1] - daEndPoints[0],bb.getHeight());
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
 else {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
}","/** 
 * Renders the axis.
 * @throws ChartException
 */
public final void renderEachAxis() throws ChartException {
  final double dStaggeredLabelOffset=sc.computeStaggeredAxisLabelOffset(xs,la,iOrientation);
  if (!lia.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  tre.setLabel(la);
  tre.setTextPosition(iLabelLocation);
  tre.setLocation(lo);
  lre.setLineAttributes(lia);
  lre.setStart(LocationImpl.create(0,0));
  lre.setEnd(LocationImpl.create(0,0));
  double dXStart=0;
  double dXEnd=0;
  double dZStart=0;
  double dZEnd=0;
  if (iDimension == IConstants.THREE_D) {
    AllAxes aax=pwa.getAxes();
    dXEnd=aax.getPrimaryBase().getScale().getEnd();
    dZEnd=aax.getAncillaryBase().getScale().getEnd();
    dXStart=aax.getPrimaryBase().getScale().getStart();
    dZStart=aax.getAncillaryBase().getScale().getStart();
    daEndPoints3D=sc.getEndPoints();
    da3D=sc.getTickCordinates();
    lo3d=Location3DImpl.create(0,0,0);
    t3dre=(Text3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Text3DRenderEvent.class);
    t3dre.setLabel(la);
    t3dre.setAction(Text3DRenderEvent.RENDER_TEXT_AT_LOCATION);
    t3dre.setTextPosition(iLabelLocation);
    t3dre.setLocation3D(lo3d);
    l3dre=(Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Line3DRenderEvent.class);
    l3dre.setLineAttributes(lia);
    l3dre.setStart3D(Location3DImpl.create(0,0,0));
    l3dre.setEnd3D(Location3DImpl.create(0,0,0));
  }
  if (iOrientation == IConstants.VERTICAL) {
    final ComputationContext context=new ComputationContext(true);
    context.y3d=0;
    context.dX=dLocation;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      context.dX=l3d.getX();
      dZ=l3d.getZ();
    }
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - IConstants.TICK_SIZE) : context.dX;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + IConstants.TICK_SIZE : context.dX;
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderOrthogonal3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(context.dX,dStart,dZ);
        l3dre.setEnd3D(context.dX,dEnd,dZ);
        dc.addLine(l3dre);
        l3dre.setStart3D(context.dX,dStart,dZEnd);
        l3dre.setEnd3D(context.dX,dEnd,dZEnd);
        dc.addLine(l3dre);
        l3dre.setStart3D(dXEnd,dStart,dZ);
        l3dre.setEnd3D(dXEnd,dEnd,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            ArrayList cachedTriggers=null;
            Location3D[] loaHotspot=new Location3D[4];
            Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot[0]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(context.dX + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(context.dX - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZ + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              cachedTriggers=new ArrayList();
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                cachedTriggers.add(tg);
                iev.addTrigger(TriggerImpl.copyInstance(tg));
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXStart + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXStart - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                cachedTriggers=new ArrayList();
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  cachedTriggers.add(tg);
                  iev.addTrigger(TriggerImpl.copyInstance(tg));
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger(TriggerImpl.copyInstance((Trigger)cachedTriggers.get(t)));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
            pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[1]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[2]=Location3DImpl.create(dXEnd + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart - IConstants.LINE_EXPAND_DOUBLE_SIZE);
            loaHotspot[3]=Location3DImpl.create(dXEnd - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd,dZStart + IConstants.LINE_EXPAND_DOUBLE_SIZE);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              if (cachedTriggers == null) {
                for (int t=0; t < elTriggers.size(); t++) {
                  tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                  processTrigger(tg,StructureSource.createAxis(axModel));
                  iev.addTrigger(tg);
                }
              }
 else {
                for (int t=0; t < cachedTriggers.size(); t++) {
                  iev.addTrigger((Trigger)cachedTriggers.get(t));
                }
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] + insCA.getBottom(), dEnd=daEndPoints[1] - insCA.getTop();
        if (sc.getDirection() == IConstants.FORWARD) {
          dStart=daEndPoints[1] + insCA.getBottom();
          dEnd=daEndPoints[0] - insCA.getTop();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(context.dX,dStart);
          loa[1]=LocationImpl.create(context.dX + dSeriesThickness,dStart - dSeriesThickness);
          loa[2]=LocationImpl.create(context.dX + dSeriesThickness,dEnd - dSeriesThickness);
          loa[3]=LocationImpl.create(context.dX,dEnd);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(context.dX,dStart);
        lre.getEnd().set(context.dX,dEnd);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[1]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dStart);
            loaHotspot[2]=LocationImpl.create(context.dX + IConstants.LINE_EXPAND_SIZE,dEnd);
            loaHotspot[3]=LocationImpl.create(context.dX - IConstants.LINE_EXPAND_SIZE,dEnd);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderVerticalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Bounds cbo=renderer.getPlotBounds();
          tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + (cbo.getWidth() / 3d - bb.getWidth()) / 2d,cbo.getTop() + 30,bb.getWidth(),bb.getHeight()));
          tre.setLabel(la);
          tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
          tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + cbo.getWidth() - bb.getWidth(),cbo.getTop() + 30 * 2,bb.getWidth(),bb.getHeight()));
          ipr.drawText(tre);
        }
 else {
          final Bounds bo=BoundsImpl.create(ax.getTitleCoordinate(),daEndPoints[1],bb.getWidth(),daEndPoints[0] - daEndPoints[1]);
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
 else {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          if (ax.getTitle().isVisible()) {
            ipr.drawText(tre);
          }
        }
      }
      la.getCaption().setValue(sRestoreValue);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iv.getType() == IntersectionValue.MAX && iDimension == IConstants.TWO_5_D) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
 else   if (iOrientation == IConstants.HORIZONTAL) {
    final ComputationContext context=new ComputationContext(false);
    context.x3d=0;
    context.z3d=0;
    context.dY=dLocation;
    double dX=0;
    double dZ=0;
    if (bRendering3D) {
      Location3D l3d=ax.getAxisCoordinate3D();
      dX=l3d.getX();
      context.dY=l3d.getY();
      dZ=l3d.getZ();
    }
    context.dTick1=((iMajorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + IConstants.TICK_SIZE : context.dY - IConstants.TICK_SIZE) : context.dY;
    context.dTick2=((iMajorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - IConstants.TICK_SIZE : context.dY + IConstants.TICK_SIZE) : context.dY;
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTransform(TransformationEvent.TRANSLATE);
      trae.setTranslation(dSeriesThickness,-dSeriesThickness);
      ipr.applyTransformation(trae);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS && lia.isVisible()) {
      if (bRenderBase3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dStart,context.dY,dZ);
        l3dre.setEnd3D(dEnd,context.dY,dZ);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[1]=Location3DImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[2]=Location3DImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            loaHotspot[3]=Location3DImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dZ);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else       if (bRenderAncillary3DAxis) {
        final double dStart=daEndPoints3D[0];
        final double dEnd=daEndPoints3D[1];
        l3dre.setLineAttributes(lia);
        l3dre.setStart3D(dX,context.dY,dStart);
        l3dre.setEnd3D(dX,context.dY,dEnd);
        dc.addLine(l3dre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final Polygon3DRenderEvent pre3d=(Polygon3DRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),Polygon3DRenderEvent.class);
            Location3D[] loaHotspot=new Location3D[4];
            loaHotspot[0]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[1]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dStart);
            loaHotspot[2]=Location3DImpl.create(dX,context.dY + IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            loaHotspot[3]=Location3DImpl.create(dX,context.dY - IConstants.LINE_EXPAND_DOUBLE_SIZE,dEnd);
            pre3d.setPoints3D(loaHotspot);
            pre3d.setDoubleSided(true);
            if (renderer.get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
              for (int t=0; t < elTriggers.size(); t++) {
                tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
                processTrigger(tg,StructureSource.createAxis(axModel));
                iev.addTrigger(tg);
              }
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
      }
 else {
        double dStart=daEndPoints[0] - insCA.getLeft(), dEnd=daEndPoints[1] + insCA.getRight();
        if (sc.getDirection() == IConstants.BACKWARD) {
          dStart=daEndPoints[1] - insCA.getLeft();
          dEnd=daEndPoints[0] + insCA.getRight();
        }
        if (iv != null && iv.getType() == IntersectionValue.VALUE && iDimension == IConstants.TWO_5_D) {
          final Location[] loa=new Location[4];
          loa[0]=LocationImpl.create(dStart,context.dY);
          loa[1]=LocationImpl.create(dStart + dSeriesThickness,context.dY - dSeriesThickness);
          loa[2]=LocationImpl.create(dEnd + dSeriesThickness,context.dY - dSeriesThickness);
          loa[3]=LocationImpl.create(dEnd,context.dY);
          final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
          pre.setPoints(loa);
          pre.setBackground(ColorDefinitionImpl.create(255,255,255,127));
          pre.setOutline(lia);
          ipr.fillPolygon(pre);
        }
        lre.setLineAttributes(lia);
        lre.getStart().set(dStart,context.dY);
        lre.getEnd().set(dEnd,context.dY);
        ipr.drawLine(lre);
        if (renderer.isInteractivityEnabled()) {
          Trigger tg;
          EList elTriggers=axModel.getTriggers();
          if (!elTriggers.isEmpty()) {
            final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),InteractionEvent.class);
            for (int t=0; t < elTriggers.size(); t++) {
              tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
              processTrigger(tg,StructureSource.createAxis(axModel));
              iev.addTrigger(tg);
            }
            Location[] loaHotspot=new Location[4];
            loaHotspot[0]=LocationImpl.create(dStart,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[1]=LocationImpl.create(dEnd,context.dY - IConstants.LINE_EXPAND_SIZE);
            loaHotspot[2]=LocationImpl.create(dEnd,context.dY + IConstants.LINE_EXPAND_SIZE);
            loaHotspot[3]=LocationImpl.create(dStart,context.dY + IConstants.LINE_EXPAND_SIZE);
            final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),PolygonRenderEvent.class);
            pre.setPoints(loaHotspot);
            iev.setHotSpot(pre);
            ipr.enableInteraction(iev);
          }
        }
      }
    }
    renderHorizontalAxisByType(context,dXEnd,dZEnd,dZ,dStaggeredLabelOffset);
    la=LabelImpl.copyInstance(ax.getTitle());
    if (la.isVisible() && bRenderAxisTitle) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_TITLE,la);
      final String sRestoreValue=la.getCaption().getValue();
      la.getCaption().setValue(getRunTimeContext().externalizedMessage(sRestoreValue));
      la.getCaption().getFont().setAlignment(renderer.switchTextAlignment(la.getCaption().getFont().getAlignment()));
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,ax.getTitlePosition(),la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      if (ax.getTitle().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          Bounds cbo=renderer.getPlotBounds();
          if (axisType == IConstants.BASE_AXIS) {
            tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + (cbo.getWidth() / 3d - bb.getWidth()),cbo.getTop() + cbo.getHeight() - Math.min(bb.getHeight(),bb.getWidth()),bb.getWidth(),bb.getHeight()));
          }
 else {
            tre.setBlockBounds(BoundsImpl.create(cbo.getLeft() + cbo.getWidth() * 2 / 3d + (cbo.getWidth() / 3d - bb.getWidth()) / 2d,cbo.getTop() + cbo.getHeight() - Math.min(bb.getHeight(),bb.getWidth()),bb.getWidth(),bb.getHeight()));
          }
          tre.setLabel(la);
          tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
 else {
          final Bounds bo=BoundsImpl.create(daEndPoints[0],ax.getTitleCoordinate(),daEndPoints[1] - daEndPoints[0],bb.getHeight());
          tre.setBlockBounds(bo);
          tre.setLabel(la);
          if (ax.getModelAxis().getAssociatedAxes().size() != 0) {
            tre.setBlockAlignment(la.getCaption().getFont().getAlignment());
          }
 else {
            tre.setBlockAlignment(ChartUtil.transposeAlignment(la.getCaption().getFont().getAlignment()));
          }
          tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_TITLE,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_TITLE,la);
    }
    la=LabelImpl.copyInstance(ax.getLabel());
    if (iv != null && iDimension == IConstants.TWO_5_D && ((bTransposed && renderer.isRightToLeft() && iv.getType() == IntersectionValue.MIN) || (!renderer.isRightToLeft() && iv.getType() == IntersectionValue.MAX))) {
      trae.setTranslation(-dSeriesThickness,dSeriesThickness);
      ipr.applyTransformation(trae);
    }
  }
}",0.9997085883185546
76212,"public HTMLEmitter(HTMLReportEmitter parentEmitter,HTMLWriter writer,boolean isEmbeddable,String layoutPreference){
  this.parentEmitter=parentEmitter;
  this.writer=writer;
  this.isEmbeddable=isEmbeddable;
  this.layoutPreference=layoutPreference;
}","public HTMLEmitter(HTMLReportEmitter parentEmitter,HTMLWriter writer,boolean isEmbeddable){
  this.parentEmitter=parentEmitter;
  this.writer=writer;
  this.isEmbeddable=isEmbeddable;
}",0.8486238532110092
76213,"public abstract void buildTableStyle(ITableContent table,StringBuffer styleBuffer);","public abstract void buildTableStyle(ITableContent table,StringBuffer styleBuffer,String layoutPreference);",0.8736842105263158
76214,"public HTMLPerformanceOptimize(HTMLReportEmitter parentEmitter,HTMLWriter writer,boolean isEmbeddable,String layoutPreference){
  super(parentEmitter,writer,isEmbeddable,layoutPreference);
}","public HTMLPerformanceOptimize(HTMLReportEmitter parentEmitter,HTMLWriter writer,boolean isEmbeddable){
  super(parentEmitter,writer,isEmbeddable);
}",0.8790560471976401
76215,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  IStyle style=table.getStyle();
  addDefaultTableStyles(styleBuffer);
  handleShrink(HTMLEmitterUtil.DISPLAY_BLOCK,style,table.getHeight(),table.getWidth(),styleBuffer);
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if ((null == style) || !""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  buildStyle(table,styleBuffer);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer,String layoutPreference){
  IStyle style=table.getStyle();
  addDefaultTableStyles(styleBuffer);
  handleShrink(HTMLEmitterUtil.DISPLAY_BLOCK,style,table.getHeight(),table.getWidth(),styleBuffer);
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if ((null == style) || !""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  buildStyle(table,styleBuffer);
}",0.9783783783783784
76216,"public void initialize(IEmitterServices services){
  this.services=services;
  Object fd=services.getOption(RenderOptionBase.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      out=new BufferedOutputStream(new FileOutputStream(file));
    }
  }
 catch (  FileNotFoundException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  if (out == null) {
    Object value=services.getOption(RenderOptionBase.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      out=(OutputStream)value;
    }
 else {
      try {
        file=new File(REPORT_FILE);
        out=new BufferedOutputStream(new FileOutputStream(file));
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=new HTMLWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    HashMap options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    htmlRtLFlag=htmlOption.getHtmlRtLFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=new MetadataEmitter(writer,htmlOption,idGenerator);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable,layoutPreference);
  }
}","public void initialize(IEmitterServices services){
  this.services=services;
  Object fd=services.getOption(RenderOptionBase.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      out=new BufferedOutputStream(new FileOutputStream(file));
    }
  }
 catch (  FileNotFoundException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  if (out == null) {
    Object value=services.getOption(RenderOptionBase.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      out=(OutputStream)value;
    }
 else {
      try {
        file=new File(REPORT_FILE);
        out=new BufferedOutputStream(new FileOutputStream(file));
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=new HTMLWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    HashMap options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    htmlRtLFlag=htmlOption.getHtmlRtLFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=new MetadataEmitter(writer,htmlOption,idGenerator);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable);
  }
}",0.9939652112176074
76217,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  IStyle style=table.getStyle();
  addDefaultTableStyles(styleBuffer);
  DimensionType x=table.getX();
  DimensionType y=table.getY();
  int display=getElementType(x,y,null,null,style);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE,styleBuffer);
  handleShrink(HTMLEmitterUtil.DISPLAY_BLOCK,style,table.getHeight(),table.getWidth(),styleBuffer);
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if ((null == style) || !""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  buildStyle(table,styleBuffer);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer,String layoutPreference){
  IStyle style=table.getStyle();
  addDefaultTableStyles(styleBuffer);
  DimensionType x=table.getX();
  DimensionType y=table.getY();
  int display=getElementType(x,y,null,null,style);
  setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE,styleBuffer);
  handleShrink(HTMLEmitterUtil.DISPLAY_BLOCK,style,table.getHeight(),table.getWidth(),styleBuffer);
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if ((null == style) || !""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  buildStyle(table,styleBuffer);
}",0.9838709677419356
76218,"public HTMLVisionOptimize(HTMLReportEmitter parentEmitter,HTMLWriter writer,boolean isEmbeddable,String layoutPreference){
  super(parentEmitter,writer,isEmbeddable,layoutPreference);
}","public HTMLVisionOptimize(HTMLReportEmitter parentEmitter,HTMLWriter writer,boolean isEmbeddable){
  super(parentEmitter,writer,isEmbeddable);
}",0.8753799392097265
76219,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AttributeBuilderTest.class);
  suite.addTestSuite(HTMLWriterTest.class);
  suite.addTestSuite(HTMLReportEmitterTest.class);
  suite.addTestSuite(MetadataEmitterTest.class);
  suite.addTestSuite(TableLayoutTest.class);
  suite.addTestSuite(ScriptTest.class);
  suite.addTestSuite(DrillThroughActionScriptTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AttributeBuilderTest.class);
  suite.addTestSuite(HTMLWriterTest.class);
  suite.addTestSuite(HTMLReportEmitterTest.class);
  suite.addTestSuite(MetadataEmitterTest.class);
  suite.addTestSuite(TableLayoutTest.class);
  suite.addTestSuite(ScriptTest.class);
  suite.addTestSuite(DrillThroughActionScriptTest.class);
  suite.addTestSuite(HTMLEmitterOptimizeTest.class);
  return suite;
}",0.9424538545059716
76220,"/** 
 * @param dataType
 * @return
 */
private static boolean isDate(int dataType){
  return (dataType == DataType.DATE_TYPE);
}","/** 
 * @param dataType
 * @return
 */
private static boolean isDate(int dataType){
  return (dataType == DataType.DATE_TYPE || dataType == DataType.SQL_DATE_TYPE || dataType == DataType.SQL_TIME_TYPE);
}",0.7710843373493976
76221,"/** 
 * sets configuration for a specific extension to engine, i.e., an emitter extension
 * @param extensionID identifier for the emitter
 * @param extensionConfig configuration object for the emitter
 */
public void setEmitterConfiguration(String format,Object emitterConfig){
  getEmitterConfigs().put(format,emitterConfig);
}","/** 
 * sets configuration for a specific extension to engine, i.e., an emitter extension
 * @param extensionID identifier for the emitter
 * @param extensionConfig configuration object for the emitter, which must be an instance of HashMap or IRenderOption
 */
public void setEmitterConfiguration(String format,Object emitterConfig){
  if (emitterConfig instanceof HashMap) {
    getEmitterConfigs().put(format,new RenderOption((HashMap)emitterConfig));
  }
 else   if (emitterConfig instanceof IRenderOption) {
    getEmitterConfigs().put(format,emitterConfig);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.6528925619834711
76222,"private static String convertApiTypeToROMColumnType(int apiDataType){
switch (apiDataType) {
case DataType.ANY_TYPE:
    return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
case DataType.INTEGER_TYPE:
  return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
case DataType.STRING_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
case DataType.DATE_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
case DataType.DECIMAL_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL;
case DataType.DOUBLE_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT;
case DataType.BOOLEAN_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN;
case DataType.BLOB_TYPE:
case DataType.BINARY_TYPE:
default :
return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
}
}","private static String convertApiTypeToROMColumnType(int apiDataType){
switch (apiDataType) {
case DataType.ANY_TYPE:
    return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
case DataType.INTEGER_TYPE:
  return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
case DataType.STRING_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
case DataType.DATE_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
case DataType.SQL_DATE_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_DATE;
case DataType.SQL_TIME_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_TIME;
case DataType.DECIMAL_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL;
case DataType.DOUBLE_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT;
case DataType.BOOLEAN_TYPE:
return DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN;
case DataType.BLOB_TYPE:
case DataType.BINARY_TYPE:
default :
return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
}
}",0.906032482598608
76223,"private static String convertApiTypeToROMParameterType(int apiDataType){
switch (apiDataType) {
case DataType.INTEGER_TYPE:
    return DesignChoiceConstants.PARAM_TYPE_INTEGER;
case DataType.STRING_TYPE:
  return DesignChoiceConstants.PARAM_TYPE_STRING;
case DataType.DATE_TYPE:
return DesignChoiceConstants.PARAM_TYPE_DATETIME;
case DataType.DECIMAL_TYPE:
return DesignChoiceConstants.PARAM_TYPE_DECIMAL;
case DataType.DOUBLE_TYPE:
return DesignChoiceConstants.PARAM_TYPE_FLOAT;
case DataType.BOOLEAN_TYPE:
return DesignChoiceConstants.PARAM_TYPE_BOOLEAN;
case DataType.ANY_TYPE:
return DesignChoiceConstants.PARAM_TYPE_ANY;
case DataType.BLOB_TYPE:
case DataType.BINARY_TYPE:
default :
return DesignChoiceConstants.PARAM_TYPE_ANY;
}
}","private static String convertApiTypeToROMParameterType(int apiDataType){
switch (apiDataType) {
case DataType.INTEGER_TYPE:
    return DesignChoiceConstants.PARAM_TYPE_INTEGER;
case DataType.STRING_TYPE:
  return DesignChoiceConstants.PARAM_TYPE_STRING;
case DataType.DATE_TYPE:
return DesignChoiceConstants.PARAM_TYPE_DATETIME;
case DataType.SQL_DATE_TYPE:
return DesignChoiceConstants.PARAM_TYPE_DATE;
case DataType.SQL_TIME_TYPE:
return DesignChoiceConstants.PARAM_TYPE_TIME;
case DataType.DECIMAL_TYPE:
return DesignChoiceConstants.PARAM_TYPE_DECIMAL;
case DataType.DOUBLE_TYPE:
return DesignChoiceConstants.PARAM_TYPE_FLOAT;
case DataType.BOOLEAN_TYPE:
return DesignChoiceConstants.PARAM_TYPE_BOOLEAN;
case DataType.ANY_TYPE:
return DesignChoiceConstants.PARAM_TYPE_ANY;
case DataType.BLOB_TYPE:
case DataType.BINARY_TYPE:
default :
return DesignChoiceConstants.PARAM_TYPE_ANY;
}
}",0.9075215782983972
76224,"static public void startContent(IContent content,IContentEmitter emitter){
  starter.visit(content,emitter);
}","static public void startContent(IContent content,IContentEmitter emitter){
  if (content.getStyle().getVisibleFormat().toLowerCase().indexOf(emitter.getOutputFormat().toLowerCase()) > 0) {
    starter.visit(content,emitter);
  }
}",0.6470588235294118
76225,"static public void endContent(IContent content,IContentEmitter emitter){
  ender.visit(content,emitter);
}","static public void endContent(IContent content,IContentEmitter emitter){
  if (content.getStyle().getVisibleFormat().toLowerCase().indexOf(emitter.getOutputFormat().toLowerCase()) > 0) {
    ender.visit(content,emitter);
  }
}",0.6385542168674698
76226,"public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=(CrosstabReportItemHandle)handleAdpter.getCrosstabItemHandle();
  try {
    MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measureHandle,0);
    measureViewHandle.addHeader();
    ComputedColumn bindingColumn=CrosstabAdaptUtil.createComputedColumn((ExtendedItemHandle)reportHandle.getModelHandle(),measureHandle);
    ComputedColumnHandle bindingHandle=((ExtendedItemHandle)reportHandle.getModelHandle()).addColumnBinding(bindingColumn,false);
    CrosstabCellHandle cellHandle=measureViewHandle.getCell();
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(measureHandle.getName());
    dataHandle.setResultSetColumn(bindingHandle.getName());
    cellHandle.addContent(dataHandle);
    LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
    labelHandle.setText(measureHandle.getName());
    measureViewHandle.getHeader().addContent(labelHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
  }
  transEnd();
}","public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=(CrosstabReportItemHandle)handleAdpter.getCrosstabItemHandle();
  try {
    if (reportHandle.getCube() == null) {
      reportHandle.setCube(CrosstabAdaptUtil.getCubeHandle(measureHandle));
    }
    MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measureHandle,0);
    measureViewHandle.addHeader();
    ComputedColumn bindingColumn=CrosstabAdaptUtil.createComputedColumn((ExtendedItemHandle)reportHandle.getModelHandle(),measureHandle);
    ComputedColumnHandle bindingHandle=((ExtendedItemHandle)reportHandle.getModelHandle()).addColumnBinding(bindingColumn,false);
    CrosstabCellHandle cellHandle=measureViewHandle.getCell();
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(measureHandle.getName());
    dataHandle.setResultSetColumn(bindingHandle.getName());
    cellHandle.addContent(dataHandle);
    LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
    labelHandle.setText(measureHandle.getName());
    measureViewHandle.getHeader().addContent(labelHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
  }
  transEnd();
}",0.9466437177280552
76227,"protected Command createAddCommand(EditPart parent,EditPart child,EditPart after){
  Object parentObj=parent.getModel();
  Object source=child.getModel();
  Object afterObj=after == null ? null : after.getModel();
  Object childParent=child.getParent().getModel();
  if (parentObj instanceof CrosstabCellAdapter && childParent instanceof CrosstabCellAdapter) {
    CrosstabCellAdapter childAdapter=(CrosstabCellAdapter)childParent;
    CrosstabCellAdapter parentAdapter=(CrosstabCellAdapter)parentObj;
    if (isFirstDataItem(childAdapter,child.getModel(),ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE) && (ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(parentAdapter.getPositionType()) || ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE.equals(parentAdapter.getPositionType()))) {
      if (afterObj != parentAdapter.getFirstDataItem()) {
        afterObj=null;
      }
      return new ChangeAreaCommand(parentAdapter.getDesignElementHandle(),childAdapter.getDesignElementHandle(),(DesignElementHandle)DNDUtil.unwrapToModel(afterObj));
    }
 else     if (isFirstDataItem(childAdapter,child.getModel(),ICrosstabCellAdapterFactory.CELL_MEASURE) && ICrosstabCellAdapterFactory.CELL_MEASURE.equals(parentAdapter.getPositionType())) {
      if (afterObj != parentAdapter.getFirstDataItem()) {
        afterObj=null;
      }
      return new ChangeMeasureOrderCommand(parentAdapter.getDesignElementHandle(),childAdapter.getDesignElementHandle(),(DesignElementHandle)DNDUtil.unwrapToModel(afterObj));
    }
  }
  if (childParent instanceof CrosstabCellAdapter) {
    CrosstabCellAdapter childAdapter=(CrosstabCellAdapter)childParent;
    if (isFirstDataItem(childAdapter,child.getModel(),ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE) || isFirstDataItem(childAdapter,child.getModel(),ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      return UnexecutableCommand.INSTANCE;
    }
  }
  return new CrosstabPasterCommand((DesignElementHandle)DNDUtil.unwrapToModel(source),(DesignElementHandle)DNDUtil.unwrapToModel(parentObj),(DesignElementHandle)DNDUtil.unwrapToModel(afterObj));
}","protected Command createAddCommand(EditPart parent,EditPart child,EditPart after){
  Object parentObj=parent.getModel();
  Object source=child.getModel();
  Object afterObj=after == null ? null : after.getModel();
  Object childParent=child.getParent().getModel();
  if (parentObj instanceof CrosstabCellAdapter && childParent instanceof CrosstabCellAdapter) {
    CrosstabCellAdapter childAdapter=(CrosstabCellAdapter)childParent;
    CrosstabCellAdapter parentAdapter=(CrosstabCellAdapter)parentObj;
    if (isFirstDataItem(childAdapter,child.getModel(),ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE) && (ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(parentAdapter.getPositionType()) || ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE.equals(parentAdapter.getPositionType()))) {
      if (afterObj != parentAdapter.getFirstDataItem()) {
        afterObj=null;
      }
      if (childAdapter.getCrosstabCellHandle().getCrosstab() == parentAdapter.getCrosstabCellHandle().getCrosstab()) {
        return new ChangeAreaCommand(parentAdapter.getDesignElementHandle(),childAdapter.getDesignElementHandle(),(DesignElementHandle)DNDUtil.unwrapToModel(afterObj));
      }
 else {
        return UnexecutableCommand.INSTANCE;
      }
    }
 else     if (isFirstDataItem(childAdapter,child.getModel(),ICrosstabCellAdapterFactory.CELL_MEASURE) && ICrosstabCellAdapterFactory.CELL_MEASURE.equals(parentAdapter.getPositionType())) {
      if (afterObj != parentAdapter.getFirstDataItem()) {
        afterObj=null;
      }
      if (childAdapter.getCrosstabCellHandle().getCrosstab() == parentAdapter.getCrosstabCellHandle().getCrosstab()) {
        return new ChangeMeasureOrderCommand(parentAdapter.getDesignElementHandle(),childAdapter.getDesignElementHandle(),(DesignElementHandle)DNDUtil.unwrapToModel(afterObj));
      }
 else {
        return UnexecutableCommand.INSTANCE;
      }
    }
  }
  if (childParent instanceof CrosstabCellAdapter) {
    CrosstabCellAdapter childAdapter=(CrosstabCellAdapter)childParent;
    if (isFirstDataItem(childAdapter,child.getModel(),ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE) || isFirstDataItem(childAdapter,child.getModel(),ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      return UnexecutableCommand.INSTANCE;
    }
  }
  return new CrosstabPasterCommand((DesignElementHandle)DNDUtil.unwrapToModel(source),(DesignElementHandle)DNDUtil.unwrapToModel(parentObj),(DesignElementHandle)DNDUtil.unwrapToModel(afterObj));
}",0.9168853893263342
76228,"protected Command createAddCommand(EditPart parent,EditPart child,EditPart after){
  Object parentObj=parent.getModel();
  Object afterObj=after == null ? null : after.getModel();
  Object childParent=child.getParent().getModel();
  if (parentObj instanceof VirtualCrosstabCellAdapter && childParent instanceof CrosstabCellAdapter) {
    CrosstabCellAdapter childAdapter=(CrosstabCellAdapter)childParent;
    VirtualCrosstabCellAdapter parentAdapter=(VirtualCrosstabCellAdapter)parentObj;
    if (parentAdapter.getType() == VirtualCrosstabCellAdapter.IMMACULATE_TYPE || parentAdapter.getType() == VirtualCrosstabCellAdapter.MEASURE_TYPE) {
      return UnexecutableCommand.INSTANCE;
    }
    if (ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(childAdapter.getPositionType())) {
      if (!(after instanceof FirstLevelHandleDataItemEditPart)) {
        afterObj=null;
      }
      ChangeAreaCommand command=new ChangeAreaCommand(parentAdapter.getDesignElementHandle(),childAdapter.getDesignElementHandle(),(DesignElementHandle)DNDUtil.unwrapToModel(afterObj));
      command.setType(parentAdapter.getType());
      return command;
    }
  }
  return UnexecutableCommand.INSTANCE;
}","protected Command createAddCommand(EditPart parent,EditPart child,EditPart after){
  Object parentObj=parent.getModel();
  Object afterObj=after == null ? null : after.getModel();
  Object childParent=child.getParent().getModel();
  if (parentObj instanceof VirtualCrosstabCellAdapter && childParent instanceof CrosstabCellAdapter) {
    CrosstabCellAdapter childAdapter=(CrosstabCellAdapter)childParent;
    VirtualCrosstabCellAdapter parentAdapter=(VirtualCrosstabCellAdapter)parentObj;
    if (parentAdapter.getType() == VirtualCrosstabCellAdapter.IMMACULATE_TYPE || parentAdapter.getType() == VirtualCrosstabCellAdapter.MEASURE_TYPE) {
      return UnexecutableCommand.INSTANCE;
    }
    if (ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(childAdapter.getPositionType())) {
      if (!(after instanceof FirstLevelHandleDataItemEditPart)) {
        afterObj=null;
      }
      if (parent.getParent() == child.getParent().getParent()) {
        ChangeAreaCommand command=new ChangeAreaCommand(parentAdapter.getDesignElementHandle(),childAdapter.getDesignElementHandle(),(DesignElementHandle)DNDUtil.unwrapToModel(afterObj));
        command.setType(parentAdapter.getType());
        return command;
      }
 else {
        return UnexecutableCommand.INSTANCE;
      }
    }
  }
  return UnexecutableCommand.INSTANCE;
}",0.942246835443038
76229,"public static CubeHandle getCubeHandle(DimensionHandle levelHandle){
  DesignElementHandle parent=levelHandle;
  while (parent != null) {
    if (parent instanceof CubeHandle) {
      return (CubeHandle)parent;
    }
    parent=parent.getContainer();
  }
  return null;
}","public static CubeHandle getCubeHandle(DesignElementHandle levelHandle){
  DesignElementHandle parent=levelHandle;
  while (parent != null) {
    if (parent instanceof CubeHandle) {
      return (CubeHandle)parent;
    }
    parent=parent.getContainer();
  }
  return null;
}",0.9743589743589745
76230,"/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  GroupingLookupHelper lhmLookup=new GroupingLookupHelper(cm,iae);
  Collection co=lhmLookup.getExpressions();
  final int iColumnCount=co.size();
  final List liResultSet=new ArrayList();
  Object[] oaTuple;
  int iColumnIndex;
  Iterator it;
  if (idre.first()) {
    int count=0;
    final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount();
    do {
      if (count++ > MAX_ROW_COUNT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{new Integer(MAX_ROW_COUNT)},Messages.getResourceBundle());
      }
      oaTuple=new Object[iColumnCount];
      it=co.iterator();
      iColumnIndex=0;
      while (it.hasNext()) {
        oaTuple[iColumnIndex++]=idre.evaluate((String)it.next());
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  final GroupKey[] groupKeys=findGroupKeys(cm,lhmLookup);
  final ResultSetWrapper rsw=new ResultSetWrapper(lhmLookup,liResultSet,groupKeys);
  SeriesDefinition sdBase=null;
  boolean bBaseGrouping=false;
  AggregationExpressionHelper aggHelper=new AggregationExpressionHelper();
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis[] axaBase=cwa.getBaseAxes();
    Axis[] axaOrthogonal=null;
    for (int j=0; j < axaBase.length; j++) {
      sdBase=(SeriesDefinition)axaBase[j].getSeriesDefinitions().get(0);
      axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
      bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
      for (int i=0; i < axaOrthogonal.length; i++) {
        aggHelper.addSeriesDefinitions(axaOrthogonal[i].getSeriesDefinitions(),lhmLookup);
      }
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    sdBase=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
    aggHelper.addSeriesDefinitions(sdBase.getSeriesDefinitions(),lhmLookup);
  }
  if (bBaseGrouping && aggHelper.getDataDefinitionsForBaseGrouping().size() > 0) {
    aggHelper.addAggregation(sdBase.getGrouping().getAggregateExpression(),aggHelper.getDataDefinitionsForBaseGrouping());
  }
  if (!aggHelper.isEmpty()) {
    rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggHelper.getAggregations(),aggHelper.getDataDefinitions());
  }
  aggHelper.dispose();
  return rsw;
}","/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  GroupingLookupHelper lhmLookup=new GroupingLookupHelper(cm,iae);
  Collection co=lhmLookup.getExpressions();
  final int iColumnCount=co.size();
  final List liResultSet=new ArrayList();
  Object[] oaTuple;
  int iColumnIndex;
  Iterator it;
  if (idre.first()) {
    int count=0;
    final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount();
    do {
      if (count++ > MAX_ROW_COUNT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,""String_Node_Str"",new Object[]{new Integer(MAX_ROW_COUNT)},Messages.getResourceBundle());
      }
      oaTuple=new Object[iColumnCount];
      it=co.iterator();
      iColumnIndex=0;
      while (it.hasNext()) {
        oaTuple[iColumnIndex++]=idre.evaluate((String)it.next());
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  final GroupKey[] groupKeys=findGroupKeys(cm,lhmLookup);
  final ResultSetWrapper rsw=new ResultSetWrapper(lhmLookup,liResultSet,groupKeys);
  SeriesDefinition sdBase=null;
  boolean bBaseGrouping=false;
  AggregationExpressionHelper aggHelper=new AggregationExpressionHelper();
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis[] axaBase=cwa.getBaseAxes();
    Axis[] axaOrthogonal=null;
    for (int j=0; j < axaBase.length; j++) {
      sdBase=(SeriesDefinition)axaBase[j].getSeriesDefinitions().get(0);
      axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
      bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
      for (int i=0; i < axaOrthogonal.length; i++) {
        aggHelper.addSeriesDefinitions(axaOrthogonal[i].getSeriesDefinitions(),lhmLookup);
      }
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    sdBase=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
    aggHelper.addSeriesDefinitions(sdBase.getSeriesDefinitions(),lhmLookup);
  }
  if (bBaseGrouping && aggHelper.getDataDefinitionsForBaseGrouping().size() > 0) {
    aggHelper.addAggregation(sdBase.getGrouping().getAggregateExpression(),aggHelper.getDataDefinitionsForBaseGrouping());
  }
  rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggHelper.getAggregations(),aggHelper.getDataDefinitions());
  aggHelper.dispose();
  return rsw;
}",0.9802680565897244
76231,"static public void startContent(IContent content,IContentEmitter emitter){
  if (content.getStyle().getVisibleFormat().toLowerCase().indexOf(emitter.getOutputFormat().toLowerCase()) > 0) {
    starter.visit(content,emitter);
  }
}","static public void startContent(IContent content,IContentEmitter emitter){
  String vformat=content.getStyle().getVisibleFormat();
  if (vformat == null) {
    starter.visit(content,emitter);
  }
 else {
    if (vformat.toLowerCase().indexOf(emitter.getOutputFormat().toLowerCase()) > 0 || vformat.toLowerCase().indexOf(""String_Node_Str"") > 0) {
      starter.visit(content,emitter);
    }
  }
}",0.688
76232,"static public void endContent(IContent content,IContentEmitter emitter){
  if (content.getStyle().getVisibleFormat().toLowerCase().indexOf(emitter.getOutputFormat().toLowerCase()) > 0) {
    ender.visit(content,emitter);
  }
}","static public void endContent(IContent content,IContentEmitter emitter){
  String vformat=content.getStyle().getVisibleFormat();
  String format=emitter.getOutputFormat();
  if (vformat == null) {
    ender.visit(content,emitter);
  }
 else {
    if (vformat.toLowerCase().indexOf(emitter.getOutputFormat().toLowerCase()) > 0 || vformat.toLowerCase().indexOf(""String_Node_Str"") > 0) {
      ender.visit(content,emitter);
    }
  }
}",0.6413373860182371
76233,"public String getReturnType(){
  return method.getDeclaringClass().getSimpleName();
}","public String getReturnType(){
  return method.getName();
}",0.8194444444444444
76234,"public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=(CrosstabReportItemHandle)handleAdpter.getCrosstabItemHandle();
  try {
    DimensionViewHandle viewHandle=reportHandle.insertDimension(getDimensionHandle(),getType(),0);
    LevelHandle levelHandle=getLevelHandle();
    if (levelHandle == null) {
      rollBack();
      return;
    }
    ComputedColumn bindingColumn=CrosstabAdaptUtil.createComputedColumn((ExtendedItemHandle)reportHandle.getModelHandle(),levelHandle);
    ComputedColumnHandle bindingHandle=((ExtendedItemHandle)reportHandle.getModelHandle()).addColumnBinding(bindingColumn,false);
    LevelViewHandle levelViewHandle=CrosstabUtil.insertLevel(viewHandle,levelHandle,0);
    CrosstabCellHandle cellHandle=levelViewHandle.getCell();
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(levelHandle.getName());
    dataHandle.setResultSetColumn(bindingHandle.getName());
    cellHandle.addContent(dataHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
  }
  transEnd();
}","public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=(CrosstabReportItemHandle)handleAdpter.getCrosstabItemHandle();
  try {
    if (reportHandle.getCube() == null) {
      reportHandle.setCube(CrosstabAdaptUtil.getCubeHandle(getDimensionHandle()));
    }
    DimensionViewHandle viewHandle=reportHandle.insertDimension(getDimensionHandle(),getType(),0);
    LevelHandle levelHandle=getLevelHandle();
    if (levelHandle == null) {
      rollBack();
      return;
    }
    ComputedColumn bindingColumn=CrosstabAdaptUtil.createComputedColumn((ExtendedItemHandle)reportHandle.getModelHandle(),levelHandle);
    ComputedColumnHandle bindingHandle=((ExtendedItemHandle)reportHandle.getModelHandle()).addColumnBinding(bindingColumn,false);
    LevelViewHandle levelViewHandle=CrosstabUtil.insertLevel(viewHandle,levelHandle,0);
    CrosstabCellHandle cellHandle=levelViewHandle.getCell();
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(levelHandle.getName());
    dataHandle.setResultSetColumn(bindingHandle.getName());
    cellHandle.addContent(dataHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
  }
  transEnd();
}",0.9432162982228002
76235,"/** 
 * @param focus
 * @param info
 */
protected void propertyChange(Object focus,Map info){
  if (getViewer() == null) {
    return;
  }
  Object obj=getViewer().getEditPartRegistry().get(focus);
  if (obj instanceof ReportElementEditPart && !((ReportElementEditPart)obj).isDelete()) {
    ((ReportElementEditPart)obj).propertyChange(info);
    return;
  }
  List temp=new ArrayList();
  getEditPartsFormModel(this,focus,temp);
  int size=temp.size();
  for (int i=0; i < size; i++) {
    Object part=temp.get(i);
    if (part instanceof ReportElementEditPart && !((ReportElementEditPart)part).isDelete()) {
      ((ReportElementEditPart)part).propertyChange(info);
    }
  }
}","/** 
 * @param focus
 * @param info
 */
protected void propertyChange(Object focus,Map info){
  if (getViewer() == null) {
    return;
  }
  Object obj=getViewer().getEditPartRegistry().get(focus);
  if (obj instanceof ReportElementEditPart && !((ReportElementEditPart)obj).isDelete()) {
    ((ReportElementEditPart)obj).propertyChange(info);
  }
  List temp=new ArrayList();
  getEditPartsFormModel(this,focus,temp);
  int size=temp.size();
  for (int i=0; i < size; i++) {
    Object part=temp.get(i);
    if (part instanceof ReportElementEditPart && !((ReportElementEditPart)part).isDelete()) {
      ((ReportElementEditPart)part).propertyChange(info);
    }
  }
}",0.9910846953937592
76236,"public boolean handleValidate(Object obj){
  CrosstabReportItemHandle crosstab=getCrosstabCellHandle().getCrosstab();
  if (obj instanceof DimensionHandle) {
    if ((getPositionType().equals(ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE) || getPositionType().equals(ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE)) && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof MeasureHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  return false;
}","public boolean handleValidate(Object obj){
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len != 1) {
      return false;
    }
    return handleValidate(objects[0]);
  }
  CrosstabReportItemHandle crosstab=getCrosstabCellHandle().getCrosstab();
  if (obj instanceof DimensionHandle) {
    if ((getPositionType().equals(ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE) || getPositionType().equals(ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE)) && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof MeasureHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  return false;
}",0.871191135734072
76237,"public void testCancel(){
  copyResource(REPORT_DESIGN_RESOURCE,REPORT_DESIGN);
  removeFile(REPORT_DOCUMENT);
  IReportEngine engine=createReportEngine();
  try {
    IReportRunnable report=engine.openReportDesign(REPORT_DESIGN);
    IRunTask task=engine.createRunTask(report);
    task.run(REPORT_DOCUMENT);
    task.close();
    IReportDocument doc=engine.openReportDocument(REPORT_DOCUMENT);
    assertEquals(3,doc.getPageCount());
    doc.close();
    engine.createRunTask(report);
    task.setErrorHandlingOption(IEngineTask.CANCEL_ON_ERROR);
    task.run(REPORT_DOCUMENT);
    task.close();
    doc=engine.openReportDocument(REPORT_DOCUMENT);
    assertTrue(3 > doc.getPageCount());
    doc.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
  ;
  engine.shutdown();
  removeFile(REPORT_DESIGN);
  removeFile(REPORT_DOCUMENT);
}","public void testCancel(){
  copyResource(REPORT_DESIGN_RESOURCE,REPORT_DESIGN);
  removeFile(REPORT_DOCUMENT);
  IReportEngine engine=createReportEngine();
  try {
    IReportRunnable report=engine.openReportDesign(REPORT_DESIGN);
    IRunTask task=engine.createRunTask(report);
    task.run(REPORT_DOCUMENT);
    task.close();
    IReportDocument doc=engine.openReportDocument(REPORT_DOCUMENT);
    assertEquals(3,doc.getPageCount());
    doc.close();
    task=engine.createRunTask(report);
    task.setErrorHandlingOption(IEngineTask.CANCEL_ON_ERROR);
    task.run(REPORT_DOCUMENT);
    task.close();
    doc=engine.openReportDocument(REPORT_DOCUMENT);
    assertTrue(3 > doc.getPageCount());
    doc.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
  ;
  engine.shutdown();
  removeFile(REPORT_DESIGN);
  removeFile(REPORT_DOCUMENT);
}",0.9971181556195964
76238,"/** 
 */
private void mappingParentColumnBinding(){
  if (baseQueryDefn instanceof ISubqueryDefinition) {
    Map parentBindings=baseQueryDefn.getParentQuery().getResultSetExpressions();
{
      Iterator it=parentBindings.keySet().iterator();
      while (it.hasNext()) {
        Object o=it.next();
        IBaseExpression expr=(IBaseExpression)parentBindings.get(o);
        if (expr instanceof IScriptExpression) {
          if (!ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
            if (baseQueryDefn.getResultSetExpressions().get(o) == null) {
              baseQueryDefn.getResultSetExpressions().put(o,copyScriptExpr(expr));
            }
          }
        }
      }
    }
  }
}","/** 
 */
private void mappingParentColumnBinding(){
  IBaseQueryDefinition queryDef=baseQueryDefn;
  while (queryDef instanceof ISubqueryDefinition) {
    queryDef=queryDef.getParentQuery();
    Map parentBindings=queryDef.getResultSetExpressions();
    addParentBindings(parentBindings);
  }
}",0.313181367690783
76239,"/** 
 * create a PDF outline for tocNode, using the pol as the parent PDF outline.
 * @param tocNode		The tocNode whose kids need to build a PDF outline tree
 * @param pol			The parent PDF outline for these kids
 */
public void createTOC(TOCNode tocNode,PdfOutline pol){
  if (null == tocNode.getChildren())   return;
  for (Iterator i=tocNode.getChildren().iterator(); i.hasNext(); ) {
    TOCNode node=(TOCNode)i.next();
    PdfOutline outline=new PdfOutline(pol,PdfAction.gotoLocalPage(node.getBookmark(),false),node.getDisplayString());
    createTOC(node,outline);
  }
}","/** 
 * create a PDF outline for tocNode, using the pol as the parent PDF outline.
 * @param tocNode		The tocNode whose kids need to build a PDF outline tree
 * @param pol			The parent PDF outline for these kids
 */
public void createTOC(TOCNode tocNode,PdfOutline pol){
  if (null == tocNode.getChildren())   return;
  for (Iterator i=tocNode.getChildren().iterator(); i.hasNext(); ) {
    TOCNode node=(TOCNode)i.next();
    PdfOutline outline=new PdfOutline(pol,PdfAction.gotoLocalPage(node.getBookmark(),false),node.getDisplayString());
    IScriptStyle style=node.getTOCStyle();
    if (style instanceof StyleInstance) {
      StyleInstance instance=(StyleInstance)style;
      CSSValue color=instance.getProperty(StyleConstants.STYLE_COLOR);
      if (color != null && !color.equals(CSSValueConstants.BLACK_VALUE)) {
        outline.setColor(PropertyUtil.getColor(color));
      }
      int styleValue=Font.NORMAL;
      CSSValue fontStyle=instance.getProperty(StyleConstants.STYLE_FONT_STYLE);
      if (CSSValueConstants.OBLIQUE_VALUE.equals(fontStyle) || CSSValueConstants.ITALIC_VALUE.equals(fontStyle)) {
        styleValue|=Font.ITALIC;
      }
      if (PropertyUtil.isBoldFont(instance.getProperty(StyleConstants.STYLE_FONT_WEIGHT))) {
        styleValue|=Font.BOLD;
      }
      outline.setStyle(styleValue);
    }
    createTOC(node,outline);
  }
}",0.5927835051546392
76240,"private void closeReportDocument(){
  writer.close();
}","private void closeReportDocument(){
  writer.close();
  writer=null;
  archive=null;
  documentName=null;
}",0.6790123456790124
76241,"public void contextInitialized(ServletContextEvent event){
}","public void contextInitialized(ServletContextEvent event){
  ParameterAccessor.initParameters(event.getServletContext());
  IViewerReportService instance=new BirtViewerReportService(event.getServletContext());
  BirtReportServiceFactory.init(instance);
}",0.3821656050955414
76242,"/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  config.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}",0.996124031007752
76243,"/** 
 * Test getDefaultTOCStyle method.
 * @throws Exception
 */
public void testGetDefaultTOCStyle() throws Exception {
  StyleHandle styleHandle=session.getDefaultTOCStyle(""String_Node_Str"");
  assertNotNull(styleHandle);
  DimensionHandle dimension=styleHandle.getFontSize();
  assertNotNull(dimension);
  assertEquals(""String_Node_Str"",dimension.getValue());
  try {
    styleHandle.setCanShrink(false);
    fail();
  }
 catch (  IllegalOperationException e) {
    assertEquals(ReadOnlyActivityStack.MESSAGE,e.getMessage());
  }
}","/** 
 * Test getDefaultTOCStyle method.
 * @throws Exception
 */
public void testGetDefaultTOCStyle() throws Exception {
  StyleHandle styleHandle=session.getDefaultTOCStyle(TOCHandle.defaultTOCPrefixName + ""String_Node_Str"");
  assertNotNull(styleHandle);
  DimensionHandle dimension=styleHandle.getFontSize();
  assertNotNull(dimension);
  assertEquals(""String_Node_Str"",dimension.getValue());
  try {
    styleHandle.setCanShrink(false);
    fail();
  }
 catch (  IllegalOperationException e) {
    assertEquals(ReadOnlyActivityStack.MESSAGE,e.getMessage());
  }
}",0.9700272479564032
76244,"/** 
 * Run nested query.
 */
private void runNestedQuery() throws Exception {
  IPreparedQuery preparedQueryCustomer=dataEngine.prepare(queryDefnCustomer);
  IPreparedQuery preparedQueryCall=dataEngine.prepare(queryDefnCall);
  ScriptContext scriptContext=new ScriptContext();
  IQueryResults queryResultsCustomer=preparedQueryCustomer.execute(scriptContext.getScope());
  IResultIterator resultItCustomer=queryResultsCustomer.getResultIterator();
  testPrintln(""String_Node_Str"");
  while (resultItCustomer.next()) {
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[1],resultItCustomer));
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[2],resultItCustomer));
    testPrintln(""String_Node_Str"");
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[3],resultItCustomer));
    testPrintln(""String_Node_Str"");
    scriptContext.enterScope();
    IQueryResults queryResultsCalls=preparedQueryCall.execute(queryResultsCustomer,scriptContext.getScope());
    IResultIterator resultItCalls=queryResultsCalls.getResultIterator();
    while (resultItCalls.next()) {
      for (int i=1; i < expressionsCall.length; i++) {
        testPrint(evalAsString(bindingNameCall[i],resultItCalls));
        testPrint(""String_Node_Str"");
      }
      testPrintln(""String_Node_Str"");
    }
    scriptContext.exitScope();
    testPrintln(""String_Node_Str"");
  }
  scriptContext.exit();
  checkOutputFile();
}","/** 
 * Run nested query.
 */
private void runNestedQuery() throws Exception {
  IPreparedQuery preparedQueryCustomer=dataEngine.prepare(queryDefnCustomer,this.getAppContext());
  IPreparedQuery preparedQueryCall=dataEngine.prepare(queryDefnCall,this.getAppContext());
  ScriptContext scriptContext=new ScriptContext();
  IQueryResults queryResultsCustomer=preparedQueryCustomer.execute(scriptContext.getScope());
  IResultIterator resultItCustomer=queryResultsCustomer.getResultIterator();
  testPrintln(""String_Node_Str"");
  while (resultItCustomer.next()) {
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[1],resultItCustomer));
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[2],resultItCustomer));
    testPrintln(""String_Node_Str"");
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[3],resultItCustomer));
    testPrintln(""String_Node_Str"");
    scriptContext.enterScope();
    IQueryResults queryResultsCalls=preparedQueryCall.execute(queryResultsCustomer,scriptContext.getScope());
    IResultIterator resultItCalls=queryResultsCalls.getResultIterator();
    while (resultItCalls.next()) {
      for (int i=1; i < expressionsCall.length; i++) {
        testPrint(evalAsString(bindingNameCall[i],resultItCalls));
        testPrint(""String_Node_Str"");
      }
      testPrintln(""String_Node_Str"");
    }
    scriptContext.exitScope();
    testPrintln(""String_Node_Str"");
  }
  scriptContext.exit();
  checkOutputFile();
}",0.9860279441117764
76245,"public void contextInitialized(ServletContextEvent event){
  ParameterAccessor.initParameters(event.getServletContext());
  IViewerReportService instance=new BirtViewerReportService(event.getServletContext());
  BirtReportServiceFactory.init(instance);
}","public void contextInitialized(ServletContextEvent event){
}",0.3821656050955414
76246,"public EditPart createEditPart(EditPart context,Object model){
  if (context instanceof CrosstabCellEditPart) {
    if (model instanceof DataItemHandle) {
      String position=((CrosstabCellEditPart)context).getCrosstabCellAdapter().getPositionType();
      if (ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(position) || ICrosstabCellAdapterFactory.CELL_MEASURE.equals(position)) {
        FirstLevelHandleDataItemEditPart first=new FirstLevelHandleDataItemEditPart(model);
        first.setManager(createMenuManager(position,context.getViewer()));
        return first;
      }
 else       if (ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE.equals(position)) {
        return new LevelHandleDataItemEditPart(model);
      }
 else       if (ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER.equals(position)) {
        return new MeasureHandleDataItemEditPart(model);
      }
    }
  }
  if (model instanceof VirtualCrosstabCellAdapter) {
    return new VirtualCellEditPart(model);
  }
  if (model instanceof CrosstabCellAdapter) {
    return new CrosstabCellEditPart(model);
  }
  return null;
}","public EditPart createEditPart(EditPart context,Object model){
  if (context instanceof CrosstabCellEditPart) {
    if (model instanceof DataItemHandle) {
      CrosstabCellAdapter adapter=((CrosstabCellEditPart)context).getCrosstabCellAdapter();
      String position=adapter.getPositionType();
      if ((ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(position) || ICrosstabCellAdapterFactory.CELL_MEASURE.equals(position)) && adapter.getFirstDataItem() == model) {
        FirstLevelHandleDataItemEditPart first=new FirstLevelHandleDataItemEditPart(model);
        first.setManager(createMenuManager(position,context.getViewer()));
        return first;
      }
 else       if (ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE.equals(position)) {
        return new LevelHandleDataItemEditPart(model);
      }
 else       if (ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER.equals(position)) {
        return new MeasureHandleDataItemEditPart(model);
      }
    }
  }
  if (model instanceof VirtualCrosstabCellAdapter) {
    return new VirtualCellEditPart(model);
  }
  if (model instanceof CrosstabCellAdapter) {
    return new CrosstabCellEditPart(model);
  }
  return null;
}",0.9147084421235856
76247,"public boolean equals(Object obj){
  if (obj == getCrosstabItemHandle()) {
    return true;
  }
  if (obj instanceof CrosstabCellAdapter) {
    return getCrosstabItemHandle() == ((CrosstabCellAdapter)obj).getCrosstabItemHandle() && getPositionType() == ((CrosstabCellAdapter)obj).getPositionType();
  }
  return super.equals(obj);
}","public boolean equals(Object obj){
  return super.equals(obj);
}",0.3232323232323232
76248,"public boolean equals(Object obj){
  if (obj == getCrosstabItemHandle()) {
    return true;
  }
  if (obj instanceof CrosstabHandleAdapter) {
    return getCrosstabItemHandle() == ((CrosstabHandleAdapter)obj).getCrosstabItemHandle();
  }
  return super.equals(obj);
}","public boolean equals(Object obj){
  return super.equals(obj);
}",0.3867069486404834
76249,"/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 */
private boolean findValueMatcher(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex){
  if (levelList.isEmpty())   return true;
  int start=0, state=0;
  boolean find=false;
  for (; start < levelList.size(); ) {
    String levelName=levelList.get(start).toString();
    Object value1=valueMap.get(levelName);
    Object value2=rs.getLevelKeyValue(rs.getLevelIndex(levelName))[0];
    int sortType=rs.getSortType(rs.getLevelIndex(levelName)) == IDimensionSortDefn.SORT_DESC ? -1 : 1;
    int direction=sortType * ((Comparable)value1).compareTo(value2) < 0 ? -1 : ((Comparable)value1).compareTo(value2) == 0 ? 0 : 1;
    if (direction < 0 && currentPosition[aggrIndex] > 0 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(--currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction > 0 && currentPosition[aggrIndex] < rs.length() && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(++currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction == 0) {
      if (start == levelList.size() - 1) {
        find=true;
        break;
      }
 else {
        start++;
        continue;
      }
    }
 else     if (currentPosition[aggrIndex] < 0 || currentPosition[aggrIndex] >= rs.length()) {
      return false;
    }
 else     return false;
  }
  return find;
}","/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 */
private boolean findValueMatcher(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex){
  if (levelList.isEmpty())   return true;
  int start=0, state=0;
  boolean find=false;
  for (; start < levelList.size(); ) {
    String levelName=levelList.get(start).toString();
    Object value1=valueMap.get(levelName);
    Object value2=rs.getLevelKeyValue(rs.getLevelIndex(levelName))[0];
    int sortType=rs.getSortType(rs.getLevelIndex(levelName)) == IDimensionSortDefn.SORT_DESC ? -1 : 1;
    int direction=sortType * ((Comparable)value1).compareTo(value2) < 0 ? -1 : ((Comparable)value1).compareTo(value2) == 0 ? 0 : 1;
    if (direction < 0 && currentPosition[aggrIndex] > 0 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(--currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction > 0 && currentPosition[aggrIndex] < rs.length() - 1 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(++currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction == 0) {
      if (start == levelList.size() - 1) {
        find=true;
        break;
      }
 else {
        start++;
        continue;
      }
    }
 else     if (currentPosition[aggrIndex] < 0 || currentPosition[aggrIndex] >= rs.length()) {
      return false;
    }
 else     return false;
  }
  return find;
}",0.9988713318284425
76250,"public void testGetErrors(){
  report_design=INPUT + ""String_Node_Str"";
  copyResource_INPUT(""String_Node_Str"",""String_Node_Str"");
  String fileDocument=OUTPUT + ""String_Node_Str"";
  try {
    runnable=engine.openReportDesign(report_design);
    IRunTask task=engine.createRunTask(runnable);
    task.run(fileDocument);
    if (task != null) {
      assertTrue(""String_Node_Str"",task.getErrors() != null);
      assertTrue(""String_Node_Str"",task.getErrors().get(0).getClass().toString().equalsIgnoreCase(""String_Node_Str""));
    }
    task.close();
  }
 catch (  Exception e) {
  }
}","public void testGetErrors(){
  report_design=INPUT + ""String_Node_Str"";
  copyResource_INPUT(""String_Node_Str"",""String_Node_Str"");
  String fileDocument=OUTPUT + ""String_Node_Str"";
  try {
    runnable=engine.openReportDesign(report_design);
    IRunTask task=engine.createRunTask(runnable);
    task.run(fileDocument);
    if (task != null) {
      assertTrue(""String_Node_Str"",task.getErrors() != null);
      assertTrue(task.getErrors().get(0).getClass().toString().indexOf(""String_Node_Str"") > 0);
    }
    task.close();
  }
 catch (  Exception e) {
  }
}",0.9273840769903762
76251,"private void runReport(String report){
  report_design=INPUT + report + ""String_Node_Str"";
  copyResource_INPUT(report + ""String_Node_Str"",report + ""String_Node_Str"");
  String fileDocument=OUTPUT + report + ""String_Node_Str"";
  String folderDocument=OUTPUT + ""String_Node_Str"" + report+ separator;
  try {
    runnable=engine.openReportDesign(report_design);
    IRunTask task=engine.createRunTask(runnable);
    task.run(fileDocument);
    task.run(folderDocument);
    task.close();
    assertTrue(""String_Node_Str"" + report,new File(fileDocument).exists());
    assertTrue(""String_Node_Str"" + report,new File(folderDocument).exists());
  }
 catch (  EngineException ee) {
    ee.printStackTrace();
    assertTrue(""String_Node_Str"" + report + ee.getLocalizedMessage(),false);
  }
}","private void runReport(String report){
  report_design=INPUT + report + ""String_Node_Str"";
  copyResource_INPUT(report + ""String_Node_Str"",report + ""String_Node_Str"");
  String fileDocument=OUTPUT + report + ""String_Node_Str"";
  String folderDocument=OUTPUT + ""String_Node_Str"" + report+ separator;
  try {
    runnable=engine.openReportDesign(report_design);
    IRunTask task=engine.createRunTask(runnable);
    task.run(fileDocument);
    task.close();
    task=engine.createRunTask(runnable);
    task.run(folderDocument);
    task.close();
    assertTrue(""String_Node_Str"" + report,new File(fileDocument).exists());
    assertTrue(""String_Node_Str"" + report,new File(folderDocument).exists());
  }
 catch (  EngineException ee) {
    ee.printStackTrace();
    assertTrue(""String_Node_Str"" + report + ee.getLocalizedMessage(),false);
  }
}",0.9637369391518132
76252,"protected DragTracker createDragTracker(){
  CrosstabHandleAdapter adapter=((CrosstabTableEditPart)getOwner().getParent()).getCrosstabHandleAdapter();
  if (cursorDirection == PositionConstants.EAST && (adapter.getColumnOprationCell(start) != null || adapter.getColumnOprationCell(end) != null)) {
    return new CrosstabColumnDragTracker(getOwner(),start,end);
  }
  if (cursorDirection == PositionConstants.SOUTH && adapter.getRowOprationCell(start) != null) {
    return new CrosstabRowDragTracker(getOwner(),start,end);
  }
  return new ResizeTracker(getOwner(),cursorDirection){
    protected void showTargetFeedback(){
    }
    protected void eraseTargetFeedback(){
    }
    protected void showSourceFeedback(){
    }
    protected void eraseSourceFeedback(){
    }
  }
;
}","protected DragTracker createDragTracker(){
  CrosstabHandleAdapter adapter=((CrosstabTableEditPart)getOwner().getParent()).getCrosstabHandleAdapter();
  if (cursorDirection == PositionConstants.EAST && (adapter.getColumnOprationCell(start) != null || adapter.getColumnOprationCell(end) != null)) {
    return new CrosstabColumnDragTracker(getOwner(),start,end);
  }
  if (cursorDirection == PositionConstants.SOUTH && adapter.getRowOprationCell(start) != null) {
    return new CrosstabRowDragTracker(getOwner(),start,end);
  }
  return new ResizeTracker(getOwner(),cursorDirection){
    protected void showTargetFeedback(){
    }
    protected void eraseTargetFeedback(){
    }
    protected void showSourceFeedback(){
    }
    protected void eraseSourceFeedback(){
    }
    protected Command getCommand(){
      return UnexecutableCommand.INSTANCE;
    }
  }
;
}",0.9483910139647844
76253,"private void testDimensionIterator(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension dimension=createDimension(documentManager);
  ILevel[] level=dimension.getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(2)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[1];
  IDiskArray positionArray=dimension.find(findLevel,filter);
  assertEquals(positionArray.size(),4);
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionResultIterator dimesionResultSet=new DimensionResultIterator(dimension,positionArray,levelNames);
  assertEquals(dimesionResultSet.getLevelIndex(""String_Node_Str""),1);
  assertEquals(dimesionResultSet.getLevelIndex(""String_Node_Str""),0);
  assertEquals(dimesionResultSet.getLevelKeyDataType(""String_Node_Str"")[0],DataType.INTEGER_TYPE);
  assertEquals(dimesionResultSet.getLevelKeyDataType(""String_Node_Str"")[0],DataType.INTEGER_TYPE);
  assertEquals(dimesionResultSet.length(),4);
  dimesionResultSet.seek(0);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(1));
  dimesionResultSet.seek(1);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(2));
  dimesionResultSet.seek(2);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(1));
  dimesionResultSet.seek(3);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(2));
}","private void testDimensionIterator(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension dimension=createDimension(documentManager);
  ILevel[] level=dimension.getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(2)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[1];
  IDiskArray positionArray=dimension.find(findLevel,filter);
  assertEquals(positionArray.size(),4);
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionResultIterator dimesionResultSet=new DimensionResultIterator(dimension,positionArray,levelNames);
  assertEquals(dimesionResultSet.getLevelIndex(""String_Node_Str""),1);
  assertEquals(dimesionResultSet.getLevelIndex(""String_Node_Str""),0);
  assertEquals(dimesionResultSet.getLevelKeyDataType(""String_Node_Str"")[0],DataType.INTEGER_TYPE);
  assertEquals(dimesionResultSet.getLevelKeyDataType(""String_Node_Str"")[0],DataType.INTEGER_TYPE);
  assertEquals(dimesionResultSet.length(),4);
  dimesionResultSet.seek(0);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(1));
  dimesionResultSet.seek(1);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(2));
  dimesionResultSet.seek(2);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(5));
  dimesionResultSet.seek(3);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(6));
}",0.9167450611476952
76254,"private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[2];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,1,2,2,3,3};
  int[] lL2Col={1,2,1,2,2,3};
  iterator.setLevelMember(0,lL1Col);
  iterator.setLevelMember(1,lL2Col);
  levelDefs=new ILevelDefn[2];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),6);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,6);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,3);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.958087254715184
76255,"public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dY+=dUnitSize / 2;
          }
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      double dLength=0;
      for (int j=0; j < iTickCount - 1; j++) {
        if (aax.areAxesSwapped()) {
          if (dY > daTickCoordinates[j + 1] && dY <= daTickCoordinates[j]) {
            dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
            break;
          }
        }
 else {
          if (dX < daTickCoordinates[j + 1] && dX >= daTickCoordinates[j]) {
            dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
            break;
          }
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}","public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dY+=dUnitSize / 2;
          }
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      double dLength=0;
      for (int j=0; j < iTickCount - 1; j++) {
        if (aax.areAxesSwapped()) {
          if (dY >= daTickCoordinates[j + 1] && dY <= daTickCoordinates[j]) {
            dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
            break;
          }
        }
 else {
          if (dX <= daTickCoordinates[j + 1] && dX >= daTickCoordinates[j]) {
            dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
            break;
          }
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}",0.9998660415271264
76256,"public void setDataSet(String datasetName){
  boolean needClean=false;
  boolean needAddBinding=false;
  try {
    if (datasetName == null) {
      if (getReportDataSet() != null) {
        itemHandle.setDataSet(null);
        needClean=true;
      }
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        needClean=true;
        needAddBinding=true;
      }
    }
    if (needClean) {
      itemHandle.getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
      itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP).clearValue();
      itemHandle.getColumnBindings().clearValue();
    }
    if (needAddBinding) {
      List columnList=generateComputedColumns(itemHandle);
      if (columnList.size() > 0) {
        for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
          DEUtil.addColumn(itemHandle,(ComputedColumn)iter.next(),false);
        }
      }
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(e.getLocalizedMessage());
  }
}","public void setDataSet(String datasetName){
  boolean needClean=false;
  boolean needAddBinding=false;
  try {
    if (datasetName == null) {
      if (getReportDataSet() != null || getBoundDataSet() != null) {
        itemHandle.setDataSet(null);
        needClean=true;
      }
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        needClean=true;
        needAddBinding=true;
      }
    }
    if (needClean) {
      itemHandle.getPropertyHandle(ReportItemHandle.PARAM_BINDINGS_PROP).clearValue();
      itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP).clearValue();
      itemHandle.getColumnBindings().clearValue();
    }
    if (needAddBinding) {
      List columnList=generateComputedColumns(itemHandle);
      if (columnList.size() > 0) {
        for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
          DEUtil.addColumn(itemHandle,(ComputedColumn)iter.next(),false);
        }
      }
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(e.getLocalizedMessage());
  }
}",0.9873307121013544
76257,"protected void init(){
  String currentDataSet=getDataServiceProvider().getBoundDataSet();
  if (currentDataSet != null) {
    cmbDataSet.setItems(getDataServiceProvider().getAllDataSets());
    cmbDataSet.setText((currentDataSet == null) ? BLANK_DATASET : currentDataSet);
    useReportDataSet(false);
    if (currentDataSet != null) {
      switchDataTable();
    }
  }
 else {
    useReportDataSet(true);
    String reportDataSet=getDataServiceProvider().getReportDataSet();
    if (reportDataSet != null) {
      switchDataTable();
    }
  }
  btnFilters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
  btnParameters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
  btnBinding.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
  btnFilters.setVisible(getDataServiceProvider().isEclipseModeSupported());
  btnParameters.setVisible(getDataServiceProvider().isEclipseModeSupported());
  btnBinding.setVisible(getDataServiceProvider().isEclipseModeSupported());
}","protected void init(){
  String currentDataSet=getDataServiceProvider().getBoundDataSet();
  if (currentDataSet != null) {
    cmbDataSet.setItems(getDataServiceProvider().getAllDataSets());
    cmbDataSet.setText((currentDataSet == null) ? BLANK_DATASET : currentDataSet);
    useReportDataSet(false);
    if (currentDataSet != null) {
      switchDataTable();
    }
  }
 else {
    useReportDataSet(true);
    String reportDataSet=getDataServiceProvider().getReportDataSet();
    if (reportDataSet != null) {
      switchDataTable();
    }
  }
  btnFilters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
  btnParameters.setEnabled(getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().isInvokingSupported());
  btnBinding.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
  btnFilters.setVisible(getDataServiceProvider().isEclipseModeSupported());
  btnParameters.setVisible(getDataServiceProvider().isEclipseModeSupported());
  btnBinding.setVisible(getDataServiceProvider().isEclipseModeSupported());
}",0.9709465791940018
76258,"public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnUseReportData)) {
    ColorPalette.getInstance().restore();
    if (!btnUseReportData.getSelection()) {
      return;
    }
    boolean bException=false;
    try {
      switchDataSet(null);
    }
 catch (    ChartException e1) {
      bException=true;
      ChartWizard.showException(e1.getLocalizedMessage());
    }
    if (!bException) {
      WizardBase.removeException();
    }
    cmbDataSet.add(BLANK_DATASET,0);
    cmbDataSet.select(0);
    cmbDataSet.setEnabled(false);
    btnNewData.setEnabled(false);
    btnFilters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnParameters.setEnabled(false);
    btnBinding.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnFilters.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnParameters.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnBinding.setVisible(getDataServiceProvider().isEclipseModeSupported());
  }
 else   if (e.getSource().equals(btnUseDataSet)) {
    if (!btnUseDataSet.getSelection()) {
      return;
    }
    WizardBase.removeException();
    cmbDataSet.removeAll();
    cmbDataSet.add(BLANK_DATASET,0);
    String[] dataSets=getDataServiceProvider().getAllDataSets();
    if (dataSets != null)     for (int i=0; i < dataSets.length; i++) {
      cmbDataSet.add(dataSets[i],i + 1);
    }
    cmbDataSet.select(0);
    cmbDataSet.setEnabled(true);
    btnNewData.setEnabled(getDataServiceProvider().isInvokingSupported());
    btnNewData.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnParameters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
  }
 else   if (e.getSource().equals(cmbDataSet)) {
    boolean bException=false;
    try {
      ColorPalette.getInstance().restore();
      if (!cmbDataSet.getText().equals(BLANK_DATASET)) {
        int bCancel=switchDataSet(cmbDataSet.getText());
        if (bCancel == Window.OK && cmbDataSet.getItem(0).equals(BLANK_DATASET)) {
          cmbDataSet.remove(BLANK_DATASET);
        }
 else         if (bCancel == Window.CANCEL) {
          String[] datasetNames=cmbDataSet.getItems();
          for (int i=0; i < datasetNames.length; i++) {
            if (datasetNames[i].equals(getDataServiceProvider().getBoundDataSet())) {
              cmbDataSet.select(i);
              if (cmbDataSet.getItem(0).equals(BLANK_DATASET)) {
                cmbDataSet.remove(BLANK_DATASET);
              }
              return;
            }
          }
          cmbDataSet.select(0);
        }
      }
    }
 catch (    ChartException e1) {
      bException=true;
      ChartWizard.displayException(e1);
    }
    if (!bException) {
      WizardBase.removeException();
    }
    btnNewData.setEnabled(getDataServiceProvider().isInvokingSupported());
    btnFilters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnParameters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnBinding.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnFilters.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnParameters.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnBinding.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnNewData.setVisible(getDataServiceProvider().isEclipseModeSupported());
  }
 else   if (e.getSource().equals(btnNewData)) {
    int result=getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_NEW_DATASET);
    if (result == Window.CANCEL) {
      return;
    }
    String[] sAllDS=getDataServiceProvider().getAllDataSets();
    String currentDataSet=cmbDataSet.getText();
    int dataSetCount=cmbDataSet.getItemCount();
    if (currentDataSet.equals(BLANK_DATASET)) {
      dataSetCount=dataSetCount - 1;
    }
    if (sAllDS.length == dataSetCount) {
      return;
    }
    if (currentDataSet.equals(BLANK_DATASET)) {
      cmbDataSet.removeAll();
      cmbDataSet.add(BLANK_DATASET,0);
      for (int i=0; i < sAllDS.length; i++) {
        cmbDataSet.add(sAllDS[i],i + 1);
      }
    }
 else {
      cmbDataSet.setItems(sAllDS);
    }
    cmbDataSet.setText(currentDataSet);
  }
 else   if (e.getSource().equals(btnFilters)) {
    if (getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_FILTER) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
      updateApplyButton();
    }
  }
 else   if (e.getSource().equals(btnParameters)) {
    if (getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_PARAMETER) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
      updateApplyButton();
    }
  }
 else   if (e.getSource().equals(btnBinding)) {
    if (getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_BINDING) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
      updateApplyButton();
    }
  }
 else   if (e.getSource() instanceof MenuItem) {
    MenuItem item=(MenuItem)e.getSource();
    IAction action=(IAction)item.getData();
    action.setChecked(!action.isChecked());
    action.run();
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnUseReportData)) {
    ColorPalette.getInstance().restore();
    if (!btnUseReportData.getSelection()) {
      return;
    }
    boolean bException=false;
    try {
      switchDataSet(null);
    }
 catch (    ChartException e1) {
      bException=true;
      ChartWizard.showException(e1.getLocalizedMessage());
    }
    if (!bException) {
      WizardBase.removeException();
    }
    cmbDataSet.add(BLANK_DATASET,0);
    cmbDataSet.select(0);
    cmbDataSet.setEnabled(false);
    btnNewData.setEnabled(false);
    btnFilters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnParameters.setEnabled(false);
    btnBinding.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnFilters.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnParameters.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnBinding.setVisible(getDataServiceProvider().isEclipseModeSupported());
  }
 else   if (e.getSource().equals(btnUseDataSet)) {
    if (!btnUseDataSet.getSelection()) {
      return;
    }
    WizardBase.removeException();
    cmbDataSet.removeAll();
    cmbDataSet.add(BLANK_DATASET,0);
    String[] dataSets=getDataServiceProvider().getAllDataSets();
    if (dataSets != null)     for (int i=0; i < dataSets.length; i++) {
      cmbDataSet.add(dataSets[i],i + 1);
    }
    cmbDataSet.select(0);
    cmbDataSet.setEnabled(true);
    btnNewData.setEnabled(getDataServiceProvider().isInvokingSupported());
    btnNewData.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnParameters.setEnabled(getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().isInvokingSupported());
  }
 else   if (e.getSource().equals(cmbDataSet)) {
    boolean bException=false;
    try {
      ColorPalette.getInstance().restore();
      if (!cmbDataSet.getText().equals(BLANK_DATASET)) {
        int bCancel=switchDataSet(cmbDataSet.getText());
        if (bCancel == Window.OK && cmbDataSet.getItem(0).equals(BLANK_DATASET)) {
          cmbDataSet.remove(BLANK_DATASET);
        }
 else         if (bCancel == Window.CANCEL) {
          String[] datasetNames=cmbDataSet.getItems();
          for (int i=0; i < datasetNames.length; i++) {
            if (datasetNames[i].equals(getDataServiceProvider().getBoundDataSet())) {
              cmbDataSet.select(i);
              if (cmbDataSet.getItem(0).equals(BLANK_DATASET)) {
                cmbDataSet.remove(BLANK_DATASET);
              }
              return;
            }
          }
          cmbDataSet.select(0);
        }
      }
    }
 catch (    ChartException e1) {
      bException=true;
      ChartWizard.displayException(e1);
    }
    if (!bException) {
      WizardBase.removeException();
    }
    btnNewData.setEnabled(getDataServiceProvider().isInvokingSupported());
    btnFilters.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnParameters.setEnabled(getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().isInvokingSupported());
    btnBinding.setEnabled(hasDataSet() && getDataServiceProvider().isInvokingSupported());
    btnFilters.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnParameters.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnBinding.setVisible(getDataServiceProvider().isEclipseModeSupported());
    btnNewData.setVisible(getDataServiceProvider().isEclipseModeSupported());
  }
 else   if (e.getSource().equals(btnNewData)) {
    int result=getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_NEW_DATASET);
    if (result == Window.CANCEL) {
      return;
    }
    String[] sAllDS=getDataServiceProvider().getAllDataSets();
    String currentDataSet=cmbDataSet.getText();
    int dataSetCount=cmbDataSet.getItemCount();
    if (currentDataSet.equals(BLANK_DATASET)) {
      dataSetCount=dataSetCount - 1;
    }
    if (sAllDS.length == dataSetCount) {
      return;
    }
    if (currentDataSet.equals(BLANK_DATASET)) {
      cmbDataSet.removeAll();
      cmbDataSet.add(BLANK_DATASET,0);
      for (int i=0; i < sAllDS.length; i++) {
        cmbDataSet.add(sAllDS[i],i + 1);
      }
    }
 else {
      cmbDataSet.setItems(sAllDS);
    }
    cmbDataSet.setText(currentDataSet);
  }
 else   if (e.getSource().equals(btnFilters)) {
    if (getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_FILTER) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
      updateApplyButton();
    }
  }
 else   if (e.getSource().equals(btnParameters)) {
    if (getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_PARAMETER) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
      updateApplyButton();
    }
  }
 else   if (e.getSource().equals(btnBinding)) {
    if (getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_BINDING) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
      updateApplyButton();
    }
  }
 else   if (e.getSource() instanceof MenuItem) {
    MenuItem item=(MenuItem)e.getSource();
    IAction action=(IAction)item.getData();
    action.setChecked(!action.isChecked());
    action.run();
  }
}",0.9882062012554688
76259,"/** 
 * Convert Scalar Parameter Definition
 * @param engineParam
 * @param group
 * @return
 */
private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  long id=scalarParamHandle != null ? scalarParamHandle.getID() : 0L;
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  String valueExpr=scalarParamHandle == null ? null : scalarParamHandle.getValueExpr();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(id,name,pattern,displayFormat,displayName,helpText,promptText,dataType,valueExpr,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,null);
  return param;
}","/** 
 * Convert Scalar Parameter Definition
 * @param engineParam
 * @param group
 * @return
 */
private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  long id=scalarParamHandle != null ? scalarParamHandle.getID() : 0L;
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  String valueExpr=scalarParamHandle == null ? null : scalarParamHandle.getValueExpr();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean isRequired=engineParam.isRequired();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(id,name,pattern,displayFormat,displayName,helpText,promptText,dataType,valueExpr,controlType,hidden,allowNull,allowBlank,isRequired,mustMatch,concealValue,group,null);
  return param;
}",0.980946123521682
76260,"public boolean allowBlank(){
  return allowBlank;
}","/** 
 * @deprecated
 * @return
 */
public boolean allowBlank(){
  return allowBlank;
}",0.7445255474452555
76261,"public boolean allowNull(){
  return allowNull;
}","/** 
 * @deprecated
 * @return
 */
public boolean allowNull(){
  return allowNull;
}",0.7368421052631579
76262,"public ParameterDefinition(long id,String name,String pattern,String displayFormat,String displayName,String helpText,String promptText,int dataType,String valueExpr,int controlType,boolean hidden,boolean allowNull,boolean allowBlank,boolean mustMatch,boolean concealValue,ParameterGroupDefinition group,Collection selectionList){
  this.id=id;
  this.name=name;
  this.pattern=pattern;
  this.displayFormat=displayFormat;
  this.displayName=displayName;
  this.helpText=helpText;
  this.promptText=promptText;
  this.dataType=dataType;
  this.valueExpr=valueExpr;
  this.controlType=controlType;
  this.hidden=hidden;
  this.allowNull=allowNull;
  this.allowBlank=allowBlank;
  this.mustMatch=mustMatch;
  this.concealValue=concealValue;
  this.group=group;
  this.selectionList=selectionList;
}","public ParameterDefinition(long id,String name,String pattern,String displayFormat,String displayName,String helpText,String promptText,int dataType,String valueExpr,int controlType,boolean hidden,boolean allowNull,boolean allowBlank,boolean isRequired,boolean mustMatch,boolean concealValue,ParameterGroupDefinition group,Collection selectionList){
  this.id=id;
  this.name=name;
  this.pattern=pattern;
  this.displayFormat=displayFormat;
  this.displayName=displayName;
  this.helpText=helpText;
  this.promptText=promptText;
  this.dataType=dataType;
  this.valueExpr=valueExpr;
  this.controlType=controlType;
  this.hidden=hidden;
  this.allowNull=allowNull;
  this.allowBlank=allowBlank;
  this.isRequired=isRequired;
  this.mustMatch=mustMatch;
  this.concealValue=concealValue;
  this.group=group;
  this.selectionList=selectionList;
}",0.9701401584399756
76263,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  String openType=ParameterAccessor.getOpenType(request);
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      response.setContentType(""String_Node_Str"");
    }
 else {
      String mimeType=ReportEngineService.getInstance().getMIMEType(format);
      if (mimeType != null && mimeType.length() > 0)       response.setContentType(mimeType);
 else       response.setContentType(""String_Node_Str"");
    }
    if (!ParameterAccessor.isGetImageOperator(request)) {
      String filename=ParameterAccessor.generateFileName(request);
      response.setHeader(""String_Node_Str"",openType + ""String_Node_Str"" + filename+ ""String_Node_Str"");
    }
  }
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  String openType=ParameterAccessor.getOpenType(request);
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      response.setContentType(""String_Node_Str"");
    }
 else {
      String mimeType=ReportEngineService.getInstance().getMIMEType(format);
      if (mimeType != null && mimeType.length() > 0)       response.setContentType(mimeType);
 else       response.setContentType(""String_Node_Str"");
    }
    if (!ParameterAccessor.isGetImageOperator(request)) {
      String filename=ParameterAccessor.generateFileName(request,format);
      response.setHeader(""String_Node_Str"",openType + ""String_Node_Str"" + filename+ ""String_Node_Str"");
    }
  }
}",0.9971486761710794
76264,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  String format=attrBean.getFormat();
  String openType=ParameterAccessor.getOpenType(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
  }
  String filename=ParameterAccessor.generateFileName(request);
  response.setHeader(""String_Node_Str"",openType + ""String_Node_Str"" + filename+ ""String_Node_Str"");
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  String format=attrBean.getFormat();
  String openType=ParameterAccessor.getOpenType(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
  }
  String filename=ParameterAccessor.generateFileName(request,format);
  response.setHeader(""String_Node_Str"",openType + ""String_Node_Str"" + filename+ ""String_Node_Str"");
}",0.9965363681345868
76265,"/** 
 * Generates a file name for the pdf output.
 * @param request
 * @return the file name
 */
public static String generateFileName(HttpServletRequest request){
  String defaultName=""String_Node_Str"";
  String fileName=defaultName;
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  if (attrBean == null)   return fileName;
  String baseName=attrBean.getReportDesignName();
  if (baseName == null || baseName.length() == 0)   baseName=attrBean.getReportDocumentName();
  if (baseName == null || baseName.trim().length() <= 0)   return fileName;
  int index=baseName.lastIndexOf('/');
  if (index == -1)   index=baseName.lastIndexOf('\\');
  if (index != -1) {
    baseName=baseName.substring(index + 1);
  }
  int dotIndex=baseName.lastIndexOf('.');
  if (dotIndex > 0) {
    fileName=baseName.substring(0,dotIndex);
  }
  for (int i=0; i < fileName.length(); i++) {
    char c=fileName.charAt(i);
    if (c < 0x00 || c >= 0x80) {
      fileName=defaultName;
      break;
    }
  }
  return fileName;
}","/** 
 * Generates a file name for output attachment.
 * @param request
 * @param format
 * @return the file name
 */
public static String generateFileName(HttpServletRequest request,String format){
  String defaultName=""String_Node_Str"";
  String fileName=defaultName;
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  if (attrBean == null)   return fileName;
  String baseName=attrBean.getReportDesignName();
  if (baseName == null || baseName.length() == 0)   baseName=attrBean.getReportDocumentName();
  if (baseName == null || baseName.trim().length() <= 0)   return fileName;
  int index=baseName.lastIndexOf('/');
  if (index == -1)   index=baseName.lastIndexOf('\\');
  if (index != -1) {
    baseName=baseName.substring(index + 1);
  }
  int dotIndex=baseName.lastIndexOf('.');
  if (dotIndex > 0) {
    fileName=baseName.substring(0,dotIndex);
  }
  for (int i=0; i < fileName.length(); i++) {
    char c=fileName.charAt(i);
    if (c < 0x00 || c >= 0x80) {
      fileName=defaultName;
      break;
    }
  }
  String extensionName=getExtensionName(format);
  if (extensionName != null && extensionName.length() > 0) {
    fileName+=""String_Node_Str"" + extensionName;
  }
  return fileName;
}",0.8896581566421462
76266,"public void copyResource(String src,String tgt){
  InputStream in=getClass().getClassLoader().getResourceAsStream(src);
  assertTrue(in != null);
  try {
    int size=in.available();
    byte[] buffer=new byte[size];
    in.read(buffer);
    OutputStream out=new FileOutputStream(tgt);
    out.write(buffer);
    out.close();
    in.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","public void copyResource(String src,String tgt){
  InputStream in=getClass().getClassLoader().getResourceAsStream(src);
  assertTrue(in != null);
  try {
    FileOutputStream fos=new FileOutputStream(tgt);
    byte[] fileData=new byte[5120];
    int readCount=-1;
    while ((readCount=in.read(fileData)) != -1) {
      fos.write(fileData,0,readCount);
    }
    fos.close();
    in.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.6772727272727272
76267,"/** 
 * Render the report in html/pdf format by calling engine service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  OutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
      BirtExtractDataActionHandler extractDataHandler=new BirtExtractDataActionHandler(context,op,upResponse);
      extractDataHandler.execute();
    }
 else     if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else {
      boolean isPrint=false;
      if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(attrBean.getAction())) {
        isPrint=true;
        out=new ByteArrayOutputStream();
      }
      if (ParameterAccessor.isGetReportlet(request)) {
        BirtGetReportletActionHandler getReportletHandler=new BirtGetReportletActionHandler(context,op,upResponse,out);
        getReportletHandler.execute();
      }
 else       if (context.getBean().documentInUrl) {
        BirtRenderReportActionHandler runReportHandler=new BirtRenderReportActionHandler(context,op,upResponse,out);
        runReportHandler.execute();
      }
 else {
        BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse,out);
        runAndRenderHandler.execute();
      }
      if (isPrint) {
        InputStream inputStream=new ByteArrayInputStream(out.toString().getBytes());
        BirtUtility.doPrintAction(inputStream,request,response);
      }
    }
  }
 catch (  RemoteException e) {
    if (!ParameterAccessor.isGetImageOperator(request)) {
      AxisFault fault=(AxisFault)e;
      response.setContentType(""String_Node_Str"");
      BirtUtility.writeMessage(response.getOutputStream(),ParameterAccessor.htmlEncode(fault.getFaultString()),IBirtConstants.MSG_ERROR);
    }
  }
}","/** 
 * Render the report in html/pdf format by calling engine service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  OutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
      BirtExtractDataActionHandler extractDataHandler=new BirtExtractDataActionHandler(context,op,upResponse);
      extractDataHandler.execute();
    }
 else     if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else {
      boolean isPrint=false;
      if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(attrBean.getAction())) {
        isPrint=true;
        out=new ByteArrayOutputStream();
      }
      if (ParameterAccessor.isGetReportlet(request)) {
        BirtGetReportletActionHandler getReportletHandler=new BirtGetReportletActionHandler(context,op,upResponse,out);
        getReportletHandler.execute();
      }
 else       if (context.getBean().documentInUrl) {
        BirtRenderReportActionHandler runReportHandler=new BirtRenderReportActionHandler(context,op,upResponse,out);
        runReportHandler.execute();
      }
 else {
        BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse,out);
        runAndRenderHandler.execute();
      }
      if (isPrint) {
        InputStream inputStream=new ByteArrayInputStream(((ByteArrayOutputStream)out).toByteArray());
        BirtUtility.doPrintAction(inputStream,request,response);
      }
    }
  }
 catch (  RemoteException e) {
    if (!ParameterAccessor.isGetImageOperator(request)) {
      response.setContentType(""String_Node_Str"");
      BirtUtility.appendErrorMessage(response.getOutputStream(),e);
    }
  }
}",0.9620038208448312
76268,"/** 
 * Handle image operate.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  OutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else {
      boolean isPrint=false;
      if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(attrBean.getAction())) {
        isPrint=true;
        out=new ByteArrayOutputStream();
      }
      BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse,out);
      runAndRenderHandler.execute();
      if (isPrint) {
        InputStream inputStream=new ByteArrayInputStream(out.toString().getBytes());
        BirtUtility.doPrintAction(inputStream,request,response);
      }
    }
  }
 catch (  RemoteException e) {
    AxisFault fault=(AxisFault)e;
    response.setContentType(""String_Node_Str"");
    BirtUtility.writeMessage(response.getOutputStream(),ParameterAccessor.htmlEncode(fault.getFaultString()),IBirtConstants.MSG_ERROR);
  }
}","/** 
 * Handle image operate.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  OutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else {
      boolean isPrint=false;
      if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(attrBean.getAction())) {
        isPrint=true;
        out=new ByteArrayOutputStream();
      }
      BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse,out);
      runAndRenderHandler.execute();
      if (isPrint) {
        InputStream inputStream=new ByteArrayInputStream(((ByteArrayOutputStream)out).toByteArray());
        BirtUtility.doPrintAction(inputStream,request,response);
      }
    }
  }
 catch (  RemoteException e) {
    if (!ParameterAccessor.isGetImageOperator(request)) {
      response.setContentType(""String_Node_Str"");
      BirtUtility.appendErrorMessage(response.getOutputStream(),e);
    }
  }
}",0.9253731343283582
76269,"/** 
 * Process exception for non soap request.
 * @param request incoming http request
 * @param response http response
 * @param exception
 * @throws ServletException
 * @throws IOException
 */
protected void __handleNonSoapException(HttpServletRequest request,HttpServletResponse response,Exception exception) throws ServletException, IOException {
  exception.printStackTrace();
  String target=""String_Node_Str"";
  request.setAttribute(""String_Node_Str"",exception);
  RequestDispatcher rd=request.getRequestDispatcher(target);
  rd.include(request,response);
}","/** 
 * Process exception for non soap request.
 * @param request incoming http request
 * @param response http response
 * @param exception
 * @throws ServletException
 * @throws IOException
 */
protected void __handleNonSoapException(HttpServletRequest request,HttpServletResponse response,Exception exception) throws ServletException, IOException {
  exception.printStackTrace();
  BirtUtility.appendErrorMessage(response.getOutputStream(),exception);
}",0.791380999020568
76270,"/** 
 * Process exception for non soap request.
 * @param request incoming http request
 * @param response http response
 * @param exception
 * @throws ServletException
 * @throws IOException
 */
protected void __handleNonSoapException(HttpServletRequest request,HttpServletResponse response,Exception exception) throws ServletException, IOException {
  exception.printStackTrace();
  String target=""String_Node_Str"";
  request.setAttribute(""String_Node_Str"",exception);
  RequestDispatcher rd=request.getRequestDispatcher(target);
  rd.include(request,response);
}","/** 
 * Process exception for non soap request.
 * @param request incoming http request
 * @param response http response
 * @param exception
 * @throws ServletException
 * @throws IOException
 */
protected void __handleNonSoapException(HttpServletRequest request,HttpServletResponse response,Exception exception) throws ServletException, IOException {
  exception.printStackTrace();
  BirtUtility.appendErrorMessage(response.getOutputStream(),exception);
}",0.791380999020568
76271,"/** 
 * Write message into output stream.
 * @param out
 * @param message
 * @param msgType
 */
public static void writeMessage(OutputStream out,String content,String msgType) throws IOException {
  String fontColor=""String_Node_Str"";
  if (IBirtConstants.MSG_ERROR.equalsIgnoreCase(msgType))   fontColor=""String_Node_Str"";
  String message=""String_Node_Str"" + BirtResources.getMessage(""String_Node_Str"" + msgType) + ""String_Node_Str""+ fontColor+ ""String_Node_Str""+ content+ ""String_Node_Str"";
  out.write(message.getBytes());
  out.flush();
  out.close();
}","/** 
 * Write message into output stream.
 * @param out
 * @param message
 * @param msgType
 */
public static void writeMessage(OutputStream out,String content,String msgType) throws IOException {
  String fontColor=""String_Node_Str"";
  if (IBirtConstants.MSG_ERROR.equalsIgnoreCase(msgType))   fontColor=""String_Node_Str"";
  String message=""String_Node_Str"" + BirtResources.getMessage(""String_Node_Str"" + msgType) + ""String_Node_Str"";
  message+=""String_Node_Str"";
  message+=""String_Node_Str"" + fontColor + ""String_Node_Str""+ content+ ""String_Node_Str"";
  out.write(message.getBytes());
  out.flush();
  out.close();
}",0.9473684210526316
76272,"public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  java.sql.ResultSetMetaData resultmd=null;
  try {
    assertNotNull(callStat);
    resultmd=callStat.getMetaData();
  }
 catch (  NullPointerException e) {
    resultmd=null;
  }
catch (  SQLException e) {
  }
  IResultSetMetaData pstmtResultMetaData=null;
  if (resultmd != null) {
    pstmtResultMetaData=new ResultSetMetaData(resultmd);
  }
 else {
    IResultSet mdRs=null;
    try {
      mdRs=executeQuery();
    }
 catch (    OdaException e) {
      throw e;
    }
    try {
      if (mdRs != null)       pstmtResultMetaData=mdRs.getMetaData();
 else       pstmtResultMetaData=new SPResultSetMetaData(null);
    }
 catch (    OdaException e) {
    }
  }
  return pstmtResultMetaData;
}","public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  java.sql.ResultSetMetaData resultmd=null;
  try {
    assertNotNull(callStat);
    resultmd=callStat.getMetaData();
  }
 catch (  NullPointerException e) {
    resultmd=null;
  }
catch (  SQLException e) {
  }
  IResultSetMetaData pstmtResultMetaData=null;
  if (resultmd != null) {
    pstmtResultMetaData=new ResultSetMetaData(resultmd);
  }
 else {
    IResultSet mdRs=null;
    try {
      mdRs=executeQuery();
    }
 catch (    OdaException e) {
      mdRs=null;
    }
    try {
      if (mdRs != null)       pstmtResultMetaData=mdRs.getMetaData();
 else       pstmtResultMetaData=new SPResultSetMetaData(null);
    }
 catch (    OdaException e) {
    }
  }
  return pstmtResultMetaData;
}",0.9907834101382488
76273,"public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}","public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE);
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_TIME);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}",0.9719268396427052
76274,"public IContent execute(){
  pageReader.context.setPageNumber(pageNumber);
  pageReader.context.setExecutingMasterPage(true);
  IContent content=pageReader.loadPageContent(pageNumber);
  pageReader.initializeContent(content);
  pageReader.initalizeContentVisitor.visit(content,null);
  pageReader.context.setExecutingMasterPage(false);
  Fragment childFrag=fragment.getNextFragment(-1);
  if (childFrag != null) {
    this.child=childFrag.offset;
  }
 else {
    this.child=-1;
  }
  return content;
}","public IContent execute(){
  pageReader.context.setPageNumber(pageNumber);
  pageReader.context.setExecutingMasterPage(true);
  IContent content=pageReader.loadLocalizedPageContent(pageNumber);
  pageReader.initializeContent(content);
  pageReader.initalizeContentVisitor.visit(content,null);
  pageReader.context.setExecutingMasterPage(false);
  Fragment childFrag=fragment.getNextFragment(-1);
  if (childFrag != null) {
    this.child=childFrag.offset;
  }
 else {
    this.child=-1;
  }
  return content;
}",0.9910979228486648
76275,"/** 
 * does the output should keep the pagination. For some emitter, it will has its own pagination, so the report page reader only read out the page content and merge the contente together. The emitter will re-paginate the content again. Such as output PDF using HTML paginhints. Some emitter in the otherside, will use the same pagination with the page hint. For those emitter, the output will include the master pages. such as output HTML with the HTML emitter.
 * @param context context used to read the report.
 * @param pages page list
 * @param keepPaginate should the output keep pagianted.
 */
public ReportPageReader(ExecutionContext context,List pages,int paginationType){
  super(context);
  outputPages.addAll(pages);
  this.paginationType=paginationType;
  if (paginationType == IReportContentLoader.SINGLE_PAGE) {
    nextPage=1;
  }
}","/** 
 * does the output should keep the pagination. For some emitter, it will has its own pagination, so the report page reader only read out the page content and merge the contente together. The emitter will re-paginate the content again. Such as output PDF using HTML paginhints. Some emitter in the otherside, will use the same pagination with the page hint. For those emitter, the output will include the master pages. such as output HTML with the HTML emitter.
 * @param context context used to read the report.
 * @param pages page list
 * @param keepPaginate should the output keep pagianted.
 */
public ReportPageReader(ExecutionContext context,List pages,int paginationType){
  super(context);
  outputPages.addAll(pages);
  this.paginationType=paginationType;
  if (paginationType == IReportContentLoader.SINGLE_PAGE) {
    nextPage=1;
  }
  l18nVisitor=new LocalizedContentVisitor(context);
}",0.9703534777651084
76276,"public IPageContent createPage(long pageNumber,MasterPageDesign pageDesign){
  IPageContent pageContent=executor.createPage(pageNumber,pageDesign);
  if (pageContent != null) {
    l18nVisitor.localize(pageContent);
  }
  return pageContent;
}","public IPageContent createPage(long pageNumber,MasterPageDesign pageDesign){
  return createLocalizedPage(pageNumber,pageDesign);
}",0.6310160427807486
76277,"public LocalizedReportExecutor(ExecutionContext context,IReportExecutor executor){
  this.l18nVisitor=new LocalizedContentVisitor(context);
  this.manager=new LocalizedReportItemExecutorManager(l18nVisitor);
  this.executor=executor;
}","public LocalizedReportExecutor(ExecutionContext context,IReportExecutor executor){
  this.l18nVisitor=new LocalizedContentVisitor(context);
  this.manager=new LocalizedReportItemExecutorManager(l18nVisitor);
  this.executor=executor;
  this.context=context;
  this.executorContext=new ExecutorContext(context);
}",0.8592321755027422
76278,"public Object visitPage(IPageContent page,Object value){
  context.setExecutingMasterPage(true);
  value=localizeAllChildren(page);
  context.setExecutingMasterPage(false);
  return value;
}","public Object visitPage(IPageContent page,Object value){
  return page;
}",0.5399239543726235
76279,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 */
private void prepareLevels(QueryDefinition query,List resultMetaList,Map levelNameColumnNamePair,TabularHierarchyHandle hierHandle){
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=new ColumnMeta(level.getName());
    resultMetaList.add(temp);
    levelNameColumnNamePair.put(level.getColumnName(),temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
      resultMetaList.add(meta);
    }
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
    query.addResultSetExpression(level.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(level.getColumnName())));
    query.addGroup(gd);
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 */
private void prepareLevels(QueryDefinition query,List resultMetaList,Map levelNameColumnNamePair,TabularHierarchyHandle hierHandle){
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=new ColumnMeta(level.getColumnName());
    resultMetaList.add(temp);
    levelNameColumnNamePair.put(level.getColumnName(),temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
      resultMetaList.add(meta);
    }
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getColumnName()));
    query.addResultSetExpression(level.getColumnName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(level.getColumnName())));
    query.addGroup(gd);
  }
}",0.9933969185619956
76280,"/** 
 * Convert parameter to Object
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validate(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  if (isLocale) {
    try {
      obj=ParameterValidationUtil.validate(dataType,format,value,locale);
    }
 catch (    ValidationValueException e1) {
      String defFormat=null;
      if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
        defFormat=ParameterValidationUtil.DEFAULT_DATETIME_FORMAT;
      }
      obj=ParameterValidationUtil.validate(dataType,defFormat,value);
    }
  }
 else {
    format=null;
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
      format=ParameterValidationUtil.DEFAULT_DATETIME_FORMAT;
    }
    obj=ParameterValidationUtil.validate(dataType,format,value);
  }
  return obj;
}","/** 
 * Convert parameter to Object
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @param isLocale indicate whether it is a locale string
 * @return Object
 * @throws ValidationValueException
 */
public static Object validate(String dataType,String format,String value,Locale locale,boolean isLocale) throws ValidationValueException {
  Object obj=null;
  if (value == null)   return obj;
  String defFormat=null;
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_DATETIME_FORMAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_DATE_FORMAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
    defFormat=ParameterValidationUtil.DEFAULT_TIME_FORMAT;
  }
  if (isLocale) {
    try {
      if (format == null) {
        if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
          format=ParameterValidationUtil.DISPLAY_DATE_FORMAT;
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
          format=ParameterValidationUtil.DISPLAY_TIME_FORMAT;
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
          format=DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED;
        }
      }
      obj=ParameterValidationUtil.validate(dataType,format,value,locale);
    }
 catch (    Exception e) {
      obj=ParameterValidationUtil.validate(dataType,defFormat,value);
    }
  }
 else {
    obj=ParameterValidationUtil.validate(dataType,defFormat,value);
  }
  return obj;
}",0.5073555794761392
76281,"public static int toDteDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN))   return DataType.BOOLEAN_TYPE;
  return DataType.UNKNOWN_TYPE;
}","public static int toDteDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE))   return DataType.SQL_DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME))   return DataType.SQL_TIME_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN))   return DataType.BOOLEAN_TYPE;
  return DataType.UNKNOWN_TYPE;
}",0.893574297188755
76282,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle){
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    return false;
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      log.log(Level.SEVERE,""String_Node_Str"",paramName);
      return false;
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
  return true;
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle){
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    return false;
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      log.log(Level.SEVERE,""String_Node_Str"",paramName);
      return false;
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
  return true;
}",0.874085684430512
76283,"protected Object convertToType(Object value,String type){
  try {
    if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
      return DataTypeUtil.toBoolean(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
      return DataTypeUtil.toDate(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
      return DataTypeUtil.toBigDecimal(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
      return DataTypeUtil.toDouble(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
      return DataTypeUtil.toString(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
      return DataTypeUtil.toInteger(value);
    }
    return value;
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return null;
}","protected Object convertToType(Object value,String type){
  try {
    if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
      return DataTypeUtil.toBoolean(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
      return DataTypeUtil.toDate(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
      return DataTypeUtil.toSqlDate(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
      return DataTypeUtil.toSqlTime(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
      return DataTypeUtil.toBigDecimal(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
      return DataTypeUtil.toDouble(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
      return DataTypeUtil.toString(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
      return DataTypeUtil.toInteger(value);
    }
    return value;
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return null;
}",0.884765625
76284,"public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE);
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_TIME);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}","public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE);
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}",0.9453868431940422
76285,"/** 
 * convert the string to value.
 * @param value value string
 * @param valueType value type
 * @return object with the specified value
 */
private Object getStringValue(String value,String valueType){
  try {
    if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))     return DataTypeUtil.toBoolean(value);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))     return DataTypeUtil.toDate(value);
    if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))     return DataTypeUtil.toBigDecimal(value);
    if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))     return DataTypeUtil.toDouble(value);
    if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))     return DataTypeUtil.toInteger(value);
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return value;
}","/** 
 * convert the string to value.
 * @param value value string
 * @param valueType value type
 * @return object with the specified value
 */
private Object getStringValue(String value,String valueType){
  try {
    if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))     return DataTypeUtil.toBoolean(value);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))     return DataTypeUtil.toDate(value);
    if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(valueType))     return DataTypeUtil.toSqlDate(value);
    if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(valueType))     return DataTypeUtil.toSqlTime(value);
    if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))     return DataTypeUtil.toBigDecimal(value);
    if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))     return DataTypeUtil.toDouble(value);
    if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))     return DataTypeUtil.toInteger(value);
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return value;
}",0.8903688524590164
76286,"protected void setupLayoutOptions(){
  Object fitToPage=options.get(IPDFRenderOption.FIT_TO_PAGE);
  if (fitToPage != null && fitToPage instanceof Boolean) {
    if (((Boolean)fitToPage).booleanValue()) {
      context.setFitToPage(true);
    }
  }
  Object pageBreakOnly=options.get(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
  if (pageBreakOnly != null && pageBreakOnly instanceof Boolean) {
    if (((Boolean)pageBreakOnly).booleanValue()) {
      context.setPagebreakPaginationOnly(true);
    }
  }
}","protected void setupLayoutOptions(){
  Object fitToPage=options.get(IPDFRenderOption.FIT_TO_PAGE);
  if (fitToPage != null && fitToPage instanceof Boolean) {
    if (((Boolean)fitToPage).booleanValue()) {
      context.setFitToPage(true);
    }
  }
  Object pageBreakOnly=options.get(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
  if (pageBreakOnly != null && pageBreakOnly instanceof Boolean) {
    if (((Boolean)pageBreakOnly).booleanValue()) {
      context.setPagebreakPaginationOnly(true);
    }
  }
  context.setFitToPage(true);
  context.setPagebreakPaginationOnly(true);
}",0.9318600368324124
76287,"public void testLogger() throws Exception {
  Logger logger=Logger.getAnonymousLogger();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  StreamHandler handler=new StreamHandler(out,new SimpleFormatter());
  handler.setLevel(Level.FINEST);
  logger.addHandler(handler);
  logger.setLevel(Level.FINE);
  engine.setLogger(logger);
  new File(""String_Node_Str"").mkdirs();
  copyResource(""String_Node_Str"",""String_Node_Str"");
  IReportRunnable runnable=engine.openReportDesign(""String_Node_Str"");
  IRunTask task=engine.createRunTask(runnable);
  task.setParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  task.run(""String_Node_Str"");
  task.close();
  engine.setLogger(logger);
  removeFile(""String_Node_Str"");
  handler.close();
  System.out.println(out.toString());
  assertTrue(out.toString().contains(""String_Node_Str""));
}","public void testLogger() throws Exception {
  Logger logger=Logger.getAnonymousLogger();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  StreamHandler handler=new StreamHandler(out,new SimpleFormatter());
  handler.setLevel(Level.FINEST);
  logger.addHandler(handler);
  logger.setLevel(Level.FINE);
  engine.setLogger(logger);
  new File(""String_Node_Str"").mkdirs();
  copyResource(""String_Node_Str"",""String_Node_Str"");
  IReportRunnable runnable=engine.openReportDesign(""String_Node_Str"");
  IRunTask task=engine.createRunTask(runnable);
  task.setParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  task.run(""String_Node_Str"");
  task.close();
  engine.setLogger(logger);
  removeFile(""String_Node_Str"");
  handler.close();
  System.out.println(out.toString());
  assertTrue(out.toString().indexOf(""String_Node_Str"") != -1);
}",0.9654364381956648
76288,"/** 
 * Get all EdgeCursor of a CubeCursor.
 * @param cursor
 * @return
 * @throws OLAPException
 */
private static List getAllEdges(CubeCursor cursor) throws OLAPException {
  List ordinateEdge=cursor.getOrdinateEdge();
  ordinateEdge.addAll(cursor.getPageEdge());
  return ordinateEdge;
}","/** 
 * Get all EdgeCursor of a CubeCursor.
 * @param cursor
 * @return
 * @throws OLAPException
 */
private static List getAllEdges(CubeCursor cursor) throws OLAPException {
  List ordinateEdge=new ArrayList();
  ordinateEdge.addAll(cursor.getOrdinateEdge());
  ordinateEdge.addAll(cursor.getPageEdge());
  return ordinateEdge;
}",0.935483870967742
76289,"/** 
 * Set cube cursor to a given position. A cube cursor's position is decided by its edge cursors.
 * @param cursor
 * @param position
 * @throws OLAPException 
 * @throws EngineException 
 */
public static void positionCursor(CubeCursor cursor,String position) throws OLAPException, EngineException {
  if (position == null || position.trim().length() == 0)   return;
  String[] positions=position.split(""String_Node_Str"" + POSITION_DELIMITER + ""String_Node_Str"");
  List edges=getAllEdges(cursor);
  if (positions.length != edges.size())   throw new EngineException(""String_Node_Str"" + position);
  for (int i=0; i < edges.size(); i++) {
    ((EdgeCursor)edges.get(i)).setPosition(new Long(positions[i]).longValue());
  }
}","/** 
 * Set cube cursor to a given position. A cube cursor's position is decided by its edge cursors.
 * @param cursor
 * @param position
 * @throws OLAPException 
 * @throws EngineException 
 */
public static void positionCursor(CubeCursor cursor,String position) throws OLAPException, EngineException {
  if (position == null || position.trim().length() == 0)   return;
  if (position.startsWith(""String_Node_Str"")) {
    position=position.substring(2);
  }
  String[] positions=position.split(""String_Node_Str"" + POSITION_DELIMITER + ""String_Node_Str"");
  List edges=getAllEdges(cursor);
  if (positions.length != edges.size())   throw new EngineException(""String_Node_Str"" + position);
  for (int i=0; i < edges.size(); i++) {
    ((EdgeCursor)edges.get(i)).setPosition(new Long(positions[i]).longValue());
  }
}",0.9430051813471504
76290,"/** 
 * Get the position id of a CubeCursor. The position id is decided by the combination of edge cursors.
 * @param cursor
 * @return
 * @throws OLAPException
 */
public static String getPositionID(CubeCursor cursor) throws OLAPException {
  String result=""String_Node_Str"";
  List ordinateEdge=getAllEdges(cursor);
  for (int i=0; i < ordinateEdge.size(); i++) {
    EdgeCursor edge=(EdgeCursor)ordinateEdge.get(i);
    result+=POSITION_DELIMITER + edge.getPosition();
  }
  return result;
}","/** 
 * Get the position id of a CubeCursor. The position id is decided by the combination of edge cursors.
 * @param cursor
 * @return
 * @throws OLAPException
 */
public static String getPositionID(CubeCursor cursor) throws OLAPException {
  StringBuffer result=new StringBuffer();
  List ordinateEdge=getAllEdges(cursor);
  for (int i=0; i < ordinateEdge.size(); i++) {
    EdgeCursor edge=(EdgeCursor)ordinateEdge.get(i);
    result.append(POSITION_DELIMITER);
    result.append(edge.getPosition());
  }
  return result.toString();
}",0.92725509214355
76291,"static DataID parse(char[] buffer,int offset,int length){
  int ptr=offset + length - 1;
  while (ptr >= offset && buffer[ptr] != ':') {
    ptr--;
  }
  if (ptr >= offset && buffer[ptr] == ':') {
    String strRowId=new String(buffer,ptr + 1,offset + length - ptr - 1);
    ptr--;
    if (ptr >= offset) {
      DataSetID dataSetId=DataSetID.parse(buffer,offset,ptr - offset + 1);
      if (dataSetId != null) {
        try {
          long rowId=Long.parseLong(strRowId);
          return new DataID(dataSetId,rowId);
        }
 catch (        Exception ex) {
        }
        return new DataID(dataSetId,strRowId);
      }
    }
  }
  return null;
}","static DataID parse(char[] buffer,int offset,int length){
  int ptr=offset + length - 1;
  while (ptr >= offset) {
    if (buffer[ptr] != ':') {
      ptr--;
    }
 else {
      if (ptr > offset && buffer[ptr - 1] == ':') {
        ptr--;
        ptr--;
      }
 else {
        break;
      }
    }
  }
  if (ptr >= offset && buffer[ptr] == ':') {
    String strRowId=new String(buffer,ptr + 1,offset + length - ptr - 1);
    ptr--;
    if (ptr >= offset) {
      DataSetID dataSetId=DataSetID.parse(buffer,offset,ptr - offset + 1);
      if (dataSetId != null) {
        try {
          long rowId=Long.parseLong(strRowId);
          return new DataID(dataSetId,rowId);
        }
 catch (        Exception ex) {
        }
        return new DataID(dataSetId,strRowId);
      }
    }
  }
  return null;
}",0.8743994509265615
76292,"/** 
 * add the instance id to the string buffer. It is a util class used by other internal packages.
 * @param buffer
 */
public void append(StringBuffer buffer){
  if (dataSet != null) {
    dataSet.append(buffer);
  }
  buffer.append(""String_Node_Str"");
  buffer.append(rowId);
}","/** 
 * add the instance id to the string buffer. It is a util class used by other internal packages.
 * @param buffer
 */
public void append(StringBuffer buffer){
  if (dataSet != null) {
    dataSet.append(buffer);
  }
  buffer.append(""String_Node_Str"");
  if (rowId != -1) {
    buffer.append(rowId);
  }
 else {
    buffer.append(cellId);
  }
}",0.8539682539682539
76293,"protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    String resultSetID=loadResultSetID(parentResult,queryID);
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    IBaseQueryResults queryResults=dteSession.getQueryResults(resultSetID);
    CubeResultSet resultSet=null;
    if (parentResult == null) {
      resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)queryResults);
    }
 else {
      resultSet=new CubeResultSet(this,context,resultSet,query,(ICubeQueryResults)queryResults);
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}","protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    String resultSetID=loadResultSetID(parentResult,queryID);
    IBaseQueryResults queryResults=null;
    if (resultSetID == null) {
      IBasePreparedQuery pQuery=dteSession.prepare(query,context.getAppContext());
      if (parentResult != null) {
        queryResults=dteSession.execute(pQuery,parentResult.getQueryResults(),context.getSharedScope());
      }
 else {
        queryResults=dteSession.execute(pQuery,null,context.getSharedScope());
      }
    }
 else {
      queryResults=dteSession.getQueryResults(resultSetID);
    }
    CubeResultSet resultSet=null;
    if (parentResult == null) {
      resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)queryResults);
    }
 else {
      resultSet=new CubeResultSet(this,context,resultSet,query,(ICubeQueryResults)queryResults);
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}",0.7534883720930232
76294,"public Object visitExtendedItem(ExtendedItemDesign item,Object value){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String tagName=handle.getExtensionName();
  IReportItemQuery itemQuery=ExtensionManager.getInstance().createQueryItem(tagName);
  IDataQueryDefinition[] queries=null;
  IDataQueryDefinition parentQuery=(IDataQueryDefinition)value;
  if (itemQuery != null) {
    try {
      itemQuery.setModelObject(handle);
      itemQuery.setQueryContext(queryContext);
      queries=itemQuery.createReportQueries(parentQuery);
    }
 catch (    BirtException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
    }
    if (queries != null) {
      if (queries.length > 0) {
        IDataQueryDefinition query=queries[0];
        if (query instanceof IBaseQueryDefinition) {
          transformExpressions(item,(IBaseQueryDefinition)query,null);
        }
      }
      return queries;
    }
  }
  BaseQueryDefinition query=createQuery(item,parentQuery);
  finishVisit(item,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","public Object visitExtendedItem(ExtendedItemDesign item,Object value){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String tagName=handle.getExtensionName();
  IReportItemQuery itemQuery=ExtensionManager.getInstance().createQueryItem(tagName);
  IDataQueryDefinition[] queries=null;
  IDataQueryDefinition parentQuery=(IDataQueryDefinition)value;
  if (itemQuery != null) {
    try {
      itemQuery.setModelObject(handle);
      itemQuery.setQueryContext(queryContext);
      queries=itemQuery.createReportQueries(parentQuery);
    }
 catch (    BirtException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
    }
    if (queries != null) {
      if (queries.length > 0) {
        IDataQueryDefinition query=queries[0];
        if (query instanceof IBaseQueryDefinition) {
          transformExpressions(item,(IBaseQueryDefinition)query,null);
        }
      }
      return queries;
    }
  }
  BaseQueryDefinition query=createQuery(item,parentQuery);
  finishVisit(item,query);
  return getResultQuery(query,value);
}",0.948539638386648
76295,"public Object visitGridItem(GridItemDesign grid,Object value){
  BaseQueryDefinition query=createQuery(grid,value);
  for (int i=0; i < grid.getRowCount(); i++) {
    build(query,grid.getRow(i));
  }
  finishVisit(grid,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","public Object visitGridItem(GridItemDesign grid,Object value){
  BaseQueryDefinition query=createQuery(grid,value);
  for (int i=0; i < grid.getRowCount(); i++) {
    build(query,grid.getRow(i));
  }
  finishVisit(grid,query);
  return getResultQuery(query,value);
}",0.8061749571183533
76296,"public Object visitDynamicTextItem(DynamicTextItemDesign dynamicText,Object value){
  BaseQueryDefinition query=createQuery(dynamicText,value);
  String newContent=transformExpression(dynamicText.getContent(),query,null);
  dynamicText.setContent(newContent);
  finishVisit(dynamicText,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","public Object visitDynamicTextItem(DynamicTextItemDesign dynamicText,Object value){
  BaseQueryDefinition query=createQuery(dynamicText,value);
  String newContent=transformExpression(dynamicText.getContent(),query,null);
  dynamicText.setContent(newContent);
  finishVisit(dynamicText,query);
  return getResultQuery(query,value);
}",0.8619246861924686
76297,"/** 
 * handles a cell in a row
 */
public Object visitCell(CellDesign cell,Object value){
  BaseQueryDefinition query=createQuery(cell,value);
  for (int i=0; i < cell.getContentCount(); i++) {
    build(query,cell.getContent(i));
  }
  finishVisit(cell,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","/** 
 * handles a cell in a row
 */
public Object visitCell(CellDesign cell,Object value){
  BaseQueryDefinition query=createQuery(cell,value);
  for (int i=0; i < cell.getContentCount(); i++) {
    build(query,cell.getContent(i));
  }
  finishVisit(cell,query);
  return getResultQuery(query,value);
}",0.8488549618320611
76298,"public Object visitDataItem(DataItemDesign data,Object value){
  BaseQueryDefinition query=createQuery(data,value);
  finishVisit(data,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","public Object visitDataItem(DataItemDesign data,Object value){
  BaseQueryDefinition query=createQuery(data,value);
  finishVisit(data,query);
  return getResultQuery(query,value);
}",0.8096385542168675
76299,"public Object visitLabelItem(LabelItemDesign label,Object value){
  BaseQueryDefinition query=createQuery(label,value);
  finishVisit(label,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","public Object visitLabelItem(LabelItemDesign label,Object value){
  BaseQueryDefinition query=createQuery(label,value);
  finishVisit(label,query);
  return getResultQuery(query,value);
}",0.8141176470588235
76300,"public Object visitFreeFormItem(FreeFormItemDesign container,Object value){
  BaseQueryDefinition query=createQuery(container,value);
  for (int i=0; i < container.getItemCount(); i++)   build(query,container.getItem(i));
  finishVisit(container,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","public Object visitFreeFormItem(FreeFormItemDesign container,Object value){
  BaseQueryDefinition query=createQuery(container,value);
  for (int i=0; i < container.getItemCount(); i++)   build(query,container.getItem(i));
  finishVisit(container,query);
  return getResultQuery(query,value);
}",0.8226059654631083
76301,"public Object visitListItem(ListItemDesign list,Object value){
  BaseQueryDefinition query=createQuery(list,value);
  if (query == null) {
    handleListingBand(list.getHeader(),query,true,null);
    handleListingBand(list.getFooter(),query,true,null);
  }
 else {
    handleListingBand(list.getHeader(),query,true,null);
    SlotHandle groupsSlot=((ListHandle)list.getHandle()).getGroups();
    for (int i=0; i < list.getGroupCount(); i++) {
      handleListingGroup(list.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=list.getDetail();
    if (detail == null || detail.getContentCount() == 0) {
      query.setUsesDetails(false);
    }
    handleListingBand(detail,query,false,null);
    handleListingBand(list.getFooter(),query,true,null);
  }
  finishVisit(list,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","public Object visitListItem(ListItemDesign list,Object value){
  BaseQueryDefinition query=createQuery(list,value);
  if (query == null) {
    handleListingBand(list.getHeader(),query,true,null);
    handleListingBand(list.getFooter(),query,true,null);
  }
 else {
    handleListingBand(list.getHeader(),query,true,null);
    SlotHandle groupsSlot=((ListHandle)list.getHandle()).getGroups();
    for (int i=0; i < list.getGroupCount(); i++) {
      handleListingGroup(list.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=list.getDetail();
    if (detail == null || detail.getContentCount() == 0) {
      query.setUsesDetails(false);
    }
    handleListingBand(detail,query,false,null);
    handleListingBand(list.getFooter(),query,true,null);
  }
  finishVisit(list,query);
  return getResultQuery(query,value);
}",0.9362435381964388
76302,"/** 
 * @param band the list band
 */
public void handleListingBand(BandDesign band,IBaseQueryDefinition query,boolean onGroup,IGroupDefinition groupDefn){
  if (band != null) {
    ArrayList subQueries=(ArrayList)((ArrayList)query.getSubqueries()).clone();
    for (int i=0; i < band.getContentCount(); i++) {
      build(query,band.getContent(i));
    }
    ArrayList subQueriesChanged=(ArrayList)query.getSubqueries();
    if (subQueriesChanged != null) {
      for (int i=0; i < subQueriesChanged.size(); i++) {
        SubqueryDefinition subQuery=(SubqueryDefinition)subQueriesChanged.get(i);
        if (!subQueries.contains(subQuery) && subQuery instanceof SubqueryDefinition) {
          ((SubqueryDefinition)subQuery).setApplyOnGroupFlag(onGroup);
          if (groupDefn != null) {
            subQueriesChanged.remove(subQuery);
            groupDefn.getSubqueries().add(subQuery);
          }
        }
      }
    }
  }
}","/** 
 * Set the onGroup to the query. Remove the added subQueries from the subQueries of BaseQueryDefinition to GroupDefinition. This is because DTE want to know subQueries is on group or detail. And the subQueries in group must be added to the GroupDefinition, but their parents all should be BaseQueryDefinition. TODO: the relation may be too complex and the arithmetic also be too ugly. Need to talk with DTE about the relations and change the arithmetic be simple.
 * @param band
 * @param query
 * @param onGroup
 * @param groupDefn
 */
public void handleListingBand(BandDesign band,IBaseQueryDefinition query,boolean onGroup,IGroupDefinition groupDefn){
  if (band != null) {
    ArrayList subQueries=(ArrayList)((ArrayList)query.getSubqueries()).clone();
    for (int i=0; i < band.getContentCount(); i++) {
      build(query,band.getContent(i));
    }
    ArrayList subQueriesChanged=(ArrayList)query.getSubqueries();
    if (subQueriesChanged != null) {
      for (int i=0; i < subQueriesChanged.size(); i++) {
        SubqueryDefinition subQuery=(SubqueryDefinition)subQueriesChanged.get(i);
        if (!subQueries.contains(subQuery) && subQuery instanceof SubqueryDefinition) {
          ((SubqueryDefinition)subQuery).setApplyOnGroupFlag(onGroup);
          if (groupDefn != null) {
            subQueriesChanged.remove(subQuery);
            groupDefn.getSubqueries().add(subQuery);
            i--;
          }
        }
      }
    }
  }
}",0.7701967350355797
76303,"public Object visitImageItem(ImageItemDesign image,Object value){
  BaseQueryDefinition query=createQuery(image,value);
  if (image.getImageSource() == ImageItemDesign.IMAGE_EXPRESSION) {
    String newImageExpression=transformExpression(image.getImageExpression(),query,null);
    String newImageFormat=transformExpression(image.getImageFormat(),query,null);
    image.setImageExpression(newImageExpression,newImageFormat);
  }
 else   if (image.getImageSource() == ImageItemDesign.IMAGE_URI) {
    String newImageUri=transformExpression(image.getImageUri(),query,null);
    image.setImageUri(newImageUri);
  }
 else   if (image.getImageSource() == ImageItemDesign.IMAGE_FILE) {
    String newImageUri=transformExpression(image.getImageUri(),query,null);
    image.setImageFile(newImageUri);
  }
  finishVisit(image,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","public Object visitImageItem(ImageItemDesign image,Object value){
  BaseQueryDefinition query=createQuery(image,value);
  if (image.getImageSource() == ImageItemDesign.IMAGE_EXPRESSION) {
    String newImageExpression=transformExpression(image.getImageExpression(),query,null);
    String newImageFormat=transformExpression(image.getImageFormat(),query,null);
    image.setImageExpression(newImageExpression,newImageFormat);
  }
 else   if (image.getImageSource() == ImageItemDesign.IMAGE_URI) {
    String newImageUri=transformExpression(image.getImageUri(),query,null);
    image.setImageUri(newImageUri);
  }
 else   if (image.getImageSource() == ImageItemDesign.IMAGE_FILE) {
    String newImageUri=transformExpression(image.getImageUri(),query,null);
    image.setImageFile(newImageUri);
  }
  finishVisit(image,query);
  return getResultQuery(query,value);
}",0.9443507588532885
76304,"public Object visitTableItem(TableItemDesign table,Object value){
  BaseQueryDefinition query=createQuery(table,value);
  if (query == null) {
    handleListingBand(table.getHeader(),query,true,null);
    handleListingBand(table.getFooter(),query,true,null);
  }
 else {
    for (int i=0; i < table.getColumnCount(); i++) {
      handleColumn(table.getColumn(i),query);
    }
    handleListingBand(table.getHeader(),query,true,null);
    SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
    for (int i=0; i < table.getGroupCount(); i++) {
      handleListingGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=table.getDetail();
    if (detail == null || detail.getContentCount() == 0) {
      query.setUsesDetails(false);
    }
    handleListingBand(detail,query,false,null);
    handleListingBand(table.getFooter(),query,true,null);
  }
  finishVisit(table,query);
  return new IBaseQueryDefinition[]{query};
}","public Object visitTableItem(TableItemDesign table,Object value){
  BaseQueryDefinition query=createQuery(table,value);
  if (query == null) {
    handleListingBand(table.getHeader(),query,true,null);
    handleListingBand(table.getFooter(),query,true,null);
  }
 else {
    for (int i=0; i < table.getColumnCount(); i++) {
      handleColumn(table.getColumn(i),query);
    }
    handleListingBand(table.getHeader(),query,true,null);
    SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
    for (int i=0; i < table.getGroupCount(); i++) {
      handleListingGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i),query);
    }
    BandDesign detail=table.getDetail();
    if (detail == null || detail.getContentCount() == 0) {
      query.setUsesDetails(false);
    }
    handleListingBand(detail,query,false,null);
    handleListingBand(table.getFooter(),query,true,null);
  }
  finishVisit(table,query);
  return getResultQuery(query,value);
}",0.9720785935884176
76305,"/** 
 * visit content of a row
 */
public Object visitRow(RowDesign row,Object value){
  BaseQueryDefinition query=createQuery(row,value);
  for (int i=0; i < row.getCellCount(); i++) {
    CellDesign cell=row.getCell(i);
    build(query,cell);
  }
  finishVisit(row,query);
  if (query != value) {
    return new IBaseQueryDefinition[]{query};
  }
  return null;
}","/** 
 * visit content of a row
 */
public Object visitRow(RowDesign row,Object value){
  BaseQueryDefinition query=createQuery(row,value);
  for (int i=0; i < row.getCellCount(); i++) {
    CellDesign cell=row.getCell(i);
    build(query,cell);
  }
  finishVisit(row,query);
  return getResultQuery(query,value);
}",0.8365243004418262
76306,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=0;
  glContent.horizontalSpacing=2;
  glContent.marginHeight=0;
  glContent.marginWidth=0;
  glContent.numColumns=2;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  cnvSelection=new FontCanvas(cmpContent,SWT.BORDER,fdCurrent,cdCurrent,false,true,false);
  GridData gdCNVSelection=new GridData(GridData.FILL_HORIZONTAL);
  gdCNVSelection.heightHint=iSize;
  cnvSelection.setLayoutData(gdCNVSelection);
  cnvSelection.setToolTipText(TOOLTIP);
  cnvSelection.addMouseListener(new MouseAdapter(){
    public void mouseUp(    MouseEvent e){
      openFontDialog();
    }
  }
);
  btnFont=new Button(cmpContent,SWT.NONE);
  GridData gdBEllipsis=new GridData();
  gdBEllipsis.widthHint=20;
  gdBEllipsis.heightHint=20;
  btnFont.setLayoutData(gdBEllipsis);
  btnFont.setImage(UIHelper.getImage(""String_Node_Str""));
  btnFont.setToolTipText(TOOLTIP);
  btnFont.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openFontDialog();
    }
  }
);
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=0;
  glContent.horizontalSpacing=2;
  glContent.marginHeight=0;
  glContent.marginWidth=0;
  glContent.numColumns=2;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  cnvSelection=new FontCanvas(cmpContent,SWT.BORDER,fdCurrent,cdCurrent,false,true,false);
  GridData gdCNVSelection=new GridData(GridData.FILL_HORIZONTAL);
  gdCNVSelection.heightHint=iSize;
  cnvSelection.setLayoutData(gdCNVSelection);
  cnvSelection.setToolTipText(TOOLTIP);
  cnvSelection.addMouseListener(new MouseAdapter(){
    public void mouseUp(    MouseEvent e){
      openFontDialog();
    }
  }
);
  btnFont=new Button(cmpContent,SWT.NONE);
  GridData gdBEllipsis=new GridData();
  gdBEllipsis.widthHint=20;
  gdBEllipsis.heightHint=20;
  btnFont.setLayoutData(gdBEllipsis);
  btnFont.setText(""String_Node_Str"");
  btnFont.setFont(new Font(Display.getCurrent(),""String_Node_Str"",14,SWT.BOLD));
  btnFont.setToolTipText(TOOLTIP);
  btnFont.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      openFontDialog();
    }
  }
);
}",0.9580556644453156
76307,"public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getText());
  }
  if (e.widget.equals(cmbTypes)) {
    final AxisType axisType=AxisType.getByName(LiteralHelper.axisTypeSet.getNameByDisplayName(cmbTypes.getText()));
    if (getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        ((MarkerLine)markerLines.get(i)).setFormatSpecifier(null);
      }
      EList markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        ((MarkerRange)markerRanges.get(i)).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    getAxisForProcessing().setType(axisType);
    btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(axisType));
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    if (LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText()).equals(IntersectionType.VALUE_LITERAL.getName())) {
      lblValue.setEnabled(true);
      txtValue.setEnabled(true);
    }
 else {
      lblValue.setEnabled(false);
      txtValue.setEnabled(false);
    }
    getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText())));
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    getAxisForProcessing().setCategoryAxis(btnCategoryAxis.getSelection());
  }
 else   if (e.widget.equals(btnTitleVisible)) {
    getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelection());
    setStateOfTitle();
    if (!btnTitleVisible.getSelection() && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnLabelVisible)) {
    getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelection());
    setStateOfLabel();
    if (!btnLabelVisible.getSelection() && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    String sAxisTitle=Messages.getString(""String_Node_Str"");
    try {
      String sTitleString=getAxisForProcessing().getTitle().getCaption().getValue();
      int iSeparatorIndex=sTitleString.indexOf(ExternalizedTextEditorComposite.SEPARATOR);
      if (iSeparatorIndex > 0) {
        sTitleString=sTitleString.substring(iSeparatorIndex);
      }
 else       if (iSeparatorIndex == 0) {
        sTitleString=sTitleString.substring(ExternalizedTextEditorComposite.SEPARATOR.length());
      }
      sAxisTitle+=""String_Node_Str"" + sTitleString + ""String_Node_Str"";
    }
 catch (    NullPointerException e1) {
    }
    FormatSpecifier formatspecifier=null;
    if (getAxisForProcessing().getFormatSpecifier() != null) {
      formatspecifier=getAxisForProcessing().getFormatSpecifier();
    }
    FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getAxisForProcessing().getType(),sAxisTitle);
    if (editor.open() == Window.OK) {
      if (editor.getFormatSpecifier() == null) {
        getAxisForProcessing().eUnset(ComponentPackage.eINSTANCE.getAxis_FormatSpecifier());
        return;
      }
      getAxisForProcessing().setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
 else   if (e.getSource().equals(cbStaggered)) {
    getAxisForProcessing().setStaggered(cbStaggered.getSelection());
  }
}","public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getText());
  }
  if (e.widget.equals(cmbTypes)) {
    final AxisType axisType=AxisType.getByName(LiteralHelper.axisTypeSet.getNameByDisplayName(cmbTypes.getText()));
    if (getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        ((MarkerLine)markerLines.get(i)).setFormatSpecifier(null);
      }
      EList markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        ((MarkerRange)markerRanges.get(i)).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    getAxisForProcessing().setType(axisType);
    btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(axisType));
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    if (LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText()).equals(IntersectionType.VALUE_LITERAL.getName())) {
      lblValue.setEnabled(true);
      txtValue.setEnabled(true);
    }
 else {
      lblValue.setEnabled(false);
      txtValue.setEnabled(false);
    }
    getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText())));
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    getAxisForProcessing().setCategoryAxis(btnCategoryAxis.getSelection());
    refreshPopupSheet();
  }
 else   if (e.widget.equals(btnTitleVisible)) {
    getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelection());
    setStateOfTitle();
    if (!btnTitleVisible.getSelection() && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnLabelVisible)) {
    getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelection());
    setStateOfLabel();
    if (!btnLabelVisible.getSelection() && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    String sAxisTitle=Messages.getString(""String_Node_Str"");
    try {
      String sTitleString=getAxisForProcessing().getTitle().getCaption().getValue();
      int iSeparatorIndex=sTitleString.indexOf(ExternalizedTextEditorComposite.SEPARATOR);
      if (iSeparatorIndex > 0) {
        sTitleString=sTitleString.substring(iSeparatorIndex);
      }
 else       if (iSeparatorIndex == 0) {
        sTitleString=sTitleString.substring(ExternalizedTextEditorComposite.SEPARATOR.length());
      }
      sAxisTitle+=""String_Node_Str"" + sTitleString + ""String_Node_Str"";
    }
 catch (    NullPointerException e1) {
    }
    FormatSpecifier formatspecifier=null;
    if (getAxisForProcessing().getFormatSpecifier() != null) {
      formatspecifier=getAxisForProcessing().getFormatSpecifier();
    }
    FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getAxisForProcessing().getType(),sAxisTitle);
    if (editor.open() == Window.OK) {
      if (editor.getFormatSpecifier() == null) {
        getAxisForProcessing().eUnset(ComponentPackage.eINSTANCE.getAxis_FormatSpecifier());
        return;
      }
      getAxisForProcessing().setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
 else   if (e.getSource().equals(cbStaggered)) {
    getAxisForProcessing().setStaggered(cbStaggered.getSelection());
  }
}",0.9967620774511072
76308,"/** 
 * @param title popup title
 * @param context wizard context
 * @param axis axis model
 * @param angleType indicate axis type, value is AngleType.X or AngleType.Y or AngleType.Z
 */
public AxisGridLinesSheet(String title,ChartWizardContext context,Axis axis,int angleType){
  super(title,context,false);
  this.axis=axis;
  this.angleType=angleType;
}","/** 
 * @param title popup title
 * @param context wizard context
 * @param axis axis model
 * @param angleType indicate axis type, value is AngleType.X or AngleType.Y or AngleType.Z
 */
public AxisGridLinesSheet(String title,ChartWizardContext context,Axis axis,int angleType){
  super(title,context,true);
  this.axis=axis;
  this.angleType=angleType;
}",0.9901547116736992
76309,"public FontInfo(BaseFont bf,float fontSize,int fontStyle,boolean simulation){
  this.bf=bf;
  this.fontSize=fontSize;
  this.fontStyle=fontStyle;
  this.fontPadding=fontSize / 5f;
  this.lineWidth=fontSize / 20f;
  this.simulation=simulation;
}","public FontInfo(FontInfo fontInfo){
  this.bf=fontInfo.bf;
  this.fontSize=fontInfo.fontSize;
  this.fontStyle=fontInfo.fontStyle;
  this.fontPadding=fontInfo.fontSize / 5f;
  this.lineWidth=fontInfo.fontSize / 20f;
  this.simulation=fontInfo.simulation;
}",0.756
76310,"/** 
 * Converts ODA <code>Properties</code> to ROM public properties.
 * @param sourceHandle the data source handle
 */
private void updateROMPublicProperties(Properties designProps,ReportElementHandle sourceHandle) throws SemanticException {
  if (designProps == null)   return;
  EList publicProps=designProps.getProperties();
  for (int i=0; i < publicProps.size(); i++) {
    Property prop=(Property)publicProps.get(i);
    String propName=prop.getName();
    String propValue=prop.getValue();
    PropertyValueValidationUtil.validateProperty(sourceHandle,propName,propValue);
    sourceHandle.getElement().setProperty(propName,propValue);
  }
}","/** 
 * Converts ODA <code>Properties</code> to ROM public properties.
 * @param sourceHandle the data source handle
 */
private void updateROMPublicProperties(Properties designProps,ReportElementHandle sourceHandle) throws SemanticException {
  if (designProps == null)   return;
  EList publicProps=designProps.getProperties();
  for (int i=0; i < publicProps.size(); i++) {
    Property prop=(Property)publicProps.get(i);
    String propName=prop.getName();
    String propValue=prop.getValue();
    PropertyValueValidationUtil.validateProperty(sourceHandle,propName,propValue);
    sourceHandle.setProperty(propName,propValue);
  }
}",0.961926961926962
76311,"public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Region clipping=new Region();
  _gc.getClipping(clipping);
  TriggerCondition tc;
  ArrayList al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),loa,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=are.getStyle();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType == ArcRenderEvent.SECTOR,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
  clipping.dispose();
}","public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Region clipping=new Region();
  _gc.getClipping(clipping);
  TriggerCondition tc;
  ArrayList al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),loa,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=are.getStyle();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType == ArcRenderEvent.SECTOR,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new RegionAction(iev.getStructureSource(),bo,tga[i].getAction(),dTranslateX,dTranslateY,dScale,clipping));
    }
  }
  clipping.dispose();
}",0.9976109215017064
76312,"public Object onRowSets(IRowSet[] irsa) throws BirtException {
  if (irsa == null || irsa.length != 1 || irsa[0] == null) {
    logger.log(new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    return null;
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (handle == null) {
    return null;
  }
  try {
    String javaHandlerClass=handle.getEventHandlerClass();
    if (javaHandlerClass != null && javaHandlerClass.length() > 0) {
      cm.setScript(javaHandlerClass);
    }
    IRowSet rowSet=irsa[0];
    if (rowSet == null || rowSet.isEmpty()) {
      return null;
    }
    rtc.setScriptClassLoader(new BIRTScriptClassLoader(appClassLoader));
    ScriptHandler sh=rtc.getScriptHandler();
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (sh == null) {
      sh=new ScriptHandler();
      rtc.setScriptHandler(sh);
      sh.setScriptClassLoader(rtc.getScriptClassLoader());
      sh.setScriptContext(rtc.getScriptContext());
      final String sScriptContent=cm.getScript();
      if (externalContext != null && externalContext.getScriptable() != null) {
        sh.init(externalContext.getScriptable());
      }
 else {
        sh.init(null);
      }
      sh.setRunTimeModel(cm);
      if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
        sh.register(sScriptContent);
      }
    }
    BIRTDataRowEvaluator rowAdapter=new BIRTDataRowEvaluator(rowSet);
    Generator.instance().bindData(rowAdapter,new BIRTActionEvaluator(),cm,rtc);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    idr=PluginSettings.instance().getDevice(""String_Node_Str"" + sExtension.toUpperCase(Locale.US));
    idr.setProperty(IDeviceRenderer.DPI_RESOLUTION,new Integer(dpi));
    if (""String_Node_Str"".equalsIgnoreCase(sExtension)) {
      idr.setProperty(""String_Node_Str"",Boolean.TRUE);
    }
    final Bounds originalBounds=cm.getBlock().getBounds();
    final Bounds bo=(Bounds)EcoreUtil.copy(originalBounds);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",bo));
    final Generator gr=Generator.instance();
    GeneratedChartState gcs=null;
    rtc.setActionRenderer(new BIRTActionRenderer(this.handle,this.ah,rowAdapter,this.context));
    rtc.setMessageLookup(new BIRTMessageLookup(context));
    Object renderContext=context.getAppContext().get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      IRenderOption renderOption=((HTMLRenderContext)renderContext).getRenderOption();
      if (renderOption instanceof HTMLRenderOption) {
        if (((HTMLRenderOption)renderOption).getHtmlRtLFlag()) {
          rtc.setRightToLeft(true);
        }
      }
    }
    gcs=gr.build(idr.getDisplayServer(),cm,bo,externalContext,rtc,new ChartReportStyleProcessor(handle,this.style));
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    BufferedOutputStream bos=new BufferedOutputStream(baos);
    idr.setProperty(IDeviceRenderer.FILE_IDENTIFIER,bos);
    idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,new EmptyUpdateNotifier(cm,gcs.getChartModel()));
    gr.render(idr,gcs);
    rowAdapter.close();
    try {
      bos.close();
      fis=new ByteArrayInputStream(baos.toByteArray());
    }
 catch (    Exception ioex) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ioex);
    }
    if (!""String_Node_Str"".equals(sExtension) && idr instanceof IImageMapEmitter) {
      imageMap=((IImageMapEmitter)idr).getImageMap();
    }
  }
 catch (  BirtException birtException) {
    Throwable ex=birtException;
    while (ex.getCause() != null) {
      ex=ex.getCause();
    }
    if (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.ZERO_DATASET) {
      return null;
    }
    if (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.ALL_NULL_DATASET) {
      return null;
    }
    if ((ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.INVALID_IMAGE_SIZE)) {
      logger.log(birtException);
      return null;
    }
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(birtException);
    throw birtException;
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (""String_Node_Str"".equals(sExtension)) {
    return fis;
  }
 else {
    return new Object[]{fis,imageMap};
  }
}","public Object onRowSets(IRowSet[] irsa) throws BirtException {
  if (irsa == null || irsa.length < 1 || irsa[0] == null || irsa[0].isEmpty()) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    return null;
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (handle == null) {
    return null;
  }
  try {
    String javaHandlerClass=handle.getEventHandlerClass();
    if (javaHandlerClass != null && javaHandlerClass.length() > 0) {
      cm.setScript(javaHandlerClass);
    }
    IRowSet rowSet=irsa[0];
    if (rowSet == null || rowSet.isEmpty()) {
      return null;
    }
    rtc.setScriptClassLoader(new BIRTScriptClassLoader(appClassLoader));
    ScriptHandler sh=rtc.getScriptHandler();
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (sh == null) {
      sh=new ScriptHandler();
      rtc.setScriptHandler(sh);
      sh.setScriptClassLoader(rtc.getScriptClassLoader());
      sh.setScriptContext(rtc.getScriptContext());
      final String sScriptContent=cm.getScript();
      if (externalContext != null && externalContext.getScriptable() != null) {
        sh.init(externalContext.getScriptable());
      }
 else {
        sh.init(null);
      }
      sh.setRunTimeModel(cm);
      if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
        sh.register(sScriptContent);
      }
    }
    BIRTDataRowEvaluator rowAdapter=new BIRTDataRowEvaluator(rowSet);
    Generator.instance().bindData(rowAdapter,new BIRTActionEvaluator(),cm,rtc);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    idr=PluginSettings.instance().getDevice(""String_Node_Str"" + sExtension.toUpperCase(Locale.US));
    idr.setProperty(IDeviceRenderer.DPI_RESOLUTION,new Integer(dpi));
    if (""String_Node_Str"".equalsIgnoreCase(sExtension)) {
      idr.setProperty(""String_Node_Str"",Boolean.TRUE);
    }
    final Bounds originalBounds=cm.getBlock().getBounds();
    final Bounds bo=(Bounds)EcoreUtil.copy(originalBounds);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",bo));
    final Generator gr=Generator.instance();
    GeneratedChartState gcs=null;
    rtc.setActionRenderer(new BIRTActionRenderer(this.handle,this.ah,rowAdapter,this.context));
    rtc.setMessageLookup(new BIRTMessageLookup(context));
    Object renderContext=context.getAppContext().get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      IRenderOption renderOption=((HTMLRenderContext)renderContext).getRenderOption();
      if (renderOption instanceof HTMLRenderOption) {
        if (((HTMLRenderOption)renderOption).getHtmlRtLFlag()) {
          rtc.setRightToLeft(true);
        }
      }
    }
    gcs=gr.build(idr.getDisplayServer(),cm,bo,externalContext,rtc,new ChartReportStyleProcessor(handle,this.style));
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    BufferedOutputStream bos=new BufferedOutputStream(baos);
    idr.setProperty(IDeviceRenderer.FILE_IDENTIFIER,bos);
    idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,new EmptyUpdateNotifier(cm,gcs.getChartModel()));
    gr.render(idr,gcs);
    rowAdapter.close();
    try {
      bos.close();
      fis=new ByteArrayInputStream(baos.toByteArray());
    }
 catch (    Exception ioex) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ioex);
    }
    if (!""String_Node_Str"".equals(sExtension) && idr instanceof IImageMapEmitter) {
      imageMap=((IImageMapEmitter)idr).getImageMap();
    }
  }
 catch (  BirtException birtException) {
    Throwable ex=birtException;
    while (ex.getCause() != null) {
      ex=ex.getCause();
    }
    if (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.ZERO_DATASET) {
      return null;
    }
    if (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.ALL_NULL_DATASET) {
      return null;
    }
    if ((ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.INVALID_IMAGE_SIZE)) {
      logger.log(birtException);
      return null;
    }
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(birtException);
    throw birtException;
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (""String_Node_Str"".equals(sExtension)) {
    return fis;
  }
 else {
    return new Object[]{fis,imageMap};
  }
}",0.982948637970472
76313,"public void testInteger2() throws IOException {
  BlockRandomAccessObject documentObject=new BlockRandomAccessObject(new BufferedRandomAccessFile(new File(""String_Node_Str""),""String_Node_Str"",1024),""String_Node_Str"",0,0,new DocumentObjectAllocatedTable());
  byte[] bytes=new byte[1024];
  bytes[0]=1;
  bytes[1]=2;
  documentObject.seek(0);
  documentObject.write(bytes,0,bytes.length);
  documentObject.write(bytes,0,bytes.length);
  documentObject.write(bytes,0,bytes.length);
  bytes=new byte[932];
  documentObject.write(bytes,0,bytes.length);
  bytes=new byte[1024];
  documentObject.seek(0);
  assertEquals(documentObject.read(bytes,0,bytes.length),1024);
  assertEquals(bytes[0],1);
  assertEquals(bytes[1],2);
  documentObject.close();
}","public void testInteger2() throws IOException {
  BlockRandomAccessObject documentObject=new BlockRandomAccessObject(new BufferedRandomAccessFile(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str"",1024),""String_Node_Str"",0,0,new DocumentObjectAllocatedTable());
  byte[] bytes=new byte[1024];
  bytes[0]=1;
  bytes[1]=2;
  documentObject.seek(0);
  documentObject.write(bytes,0,bytes.length);
  documentObject.write(bytes,0,bytes.length);
  documentObject.write(bytes,0,bytes.length);
  bytes=new byte[932];
  documentObject.write(bytes,0,bytes.length);
  bytes=new byte[1024];
  documentObject.seek(0);
  assertEquals(documentObject.read(bytes,0,bytes.length),1024);
  assertEquals(bytes[0],1);
  assertEquals(bytes[1],2);
  documentObject.close();
}",0.979645436638214
76314,"public void testInteger3() throws IOException {
  BlockRandomAccessObject documentObject=new BlockRandomAccessObject(new BufferedRandomAccessFile(new File(""String_Node_Str""),""String_Node_Str"",1024),""String_Node_Str"",0,0,new DocumentObjectAllocatedTable());
  byte[] bytes=new byte[1024];
  bytes[0]=1;
  bytes[1]=2;
  documentObject.seek(0);
  documentObject.write(bytes,0,bytes.length);
  documentObject.write(bytes,0,bytes.length);
  documentObject.write(bytes,0,bytes.length);
  bytes=new byte[932];
  documentObject.write(bytes,0,bytes.length);
  assertEquals(documentObject.read(bytes,0,bytes.length),-1);
  documentObject.close();
}","public void testInteger3() throws IOException {
  BlockRandomAccessObject documentObject=new BlockRandomAccessObject(new BufferedRandomAccessFile(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str"",1024),""String_Node_Str"",0,0,new DocumentObjectAllocatedTable());
  byte[] bytes=new byte[1024];
  bytes[0]=1;
  bytes[1]=2;
  documentObject.seek(0);
  documentObject.write(bytes,0,bytes.length);
  documentObject.write(bytes,0,bytes.length);
  documentObject.write(bytes,0,bytes.length);
  bytes=new byte[932];
  documentObject.write(bytes,0,bytes.length);
  assertEquals(documentObject.read(bytes,0,bytes.length),-1);
  documentObject.close();
}",0.9762815608263198
76315,"public void testInteger1() throws IOException {
  int objectNumber=1001;
  BufferedRandomDataAccessObject documentObject=new BufferedRandomDataAccessObject(new SimpleRandomAccessObject(new File(""String_Node_Str""),""String_Node_Str""),1024);
  for (int i=0; i < objectNumber; i++) {
    documentObject.writeInt(i);
  }
  documentObject.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(documentObject.readInt(),i);
  }
  documentObject.seek(400);
  assertEquals(documentObject.readInt(),100);
  documentObject.seek(804);
  assertEquals(documentObject.readInt(),201);
  assertEquals(documentObject.readInt(),202);
  documentObject.seek(2804);
  documentObject.writeInt(1000001);
  assertEquals(documentObject.readInt(),702);
  documentObject.seek(2804);
  assertEquals(documentObject.readInt(),1000001);
  documentObject.close();
}","public void testInteger1() throws IOException {
  int objectNumber=1001;
  BufferedRandomDataAccessObject documentObject=new BufferedRandomDataAccessObject(new SimpleRandomAccessObject(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str""),1024);
  for (int i=0; i < objectNumber; i++) {
    documentObject.writeInt(i);
  }
  documentObject.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(documentObject.readInt(),i);
  }
  documentObject.seek(400);
  assertEquals(documentObject.readInt(),100);
  documentObject.seek(804);
  assertEquals(documentObject.readInt(),201);
  assertEquals(documentObject.readInt(),202);
  documentObject.seek(2804);
  documentObject.writeInt(1000001);
  assertEquals(documentObject.readInt(),702);
  documentObject.seek(2804);
  assertEquals(documentObject.readInt(),1000001);
  documentObject.close();
}",0.9819662594531704
76316,"public void testInteger() throws IOException {
  int objectNumber=1001;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeInt(i);
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readInt(),i);
  }
  file.seek(400);
  assertEquals(file.readInt(),100);
  file.seek(804);
  assertEquals(file.readInt(),201);
  assertEquals(file.readInt(),202);
  file.seek(2804);
  file.writeInt(1000001);
  assertEquals(file.readInt(),702);
  file.seek(2804);
  assertEquals(file.readInt(),1000001);
  file.close();
}","public void testInteger() throws IOException {
  int objectNumber=1001;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeInt(i);
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readInt(),i);
  }
  file.seek(400);
  assertEquals(file.readInt(),100);
  file.seek(804);
  assertEquals(file.readInt(),201);
  assertEquals(file.readInt(),202);
  file.seek(2804);
  file.writeInt(1000001);
  assertEquals(file.readInt(),702);
  file.seek(2804);
  assertEquals(file.readInt(),1000001);
  file.close();
}",0.9767441860465116
76317,"public void testString() throws IOException {
  int objectNumber=3000;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeUTF(""String_Node_Str"" + i);
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readUTF(),""String_Node_Str"" + i);
  }
  file.close();
}","public void testString() throws IOException {
  int objectNumber=3000;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeUTF(""String_Node_Str"" + i);
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readUTF(),""String_Node_Str"" + i);
  }
  file.close();
}",0.963226571767497
76318,"public void testBytes() throws IOException {
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(""String_Node_Str""),""String_Node_Str"",1000);
  byte[] bytes=new byte[1024];
  bytes[0]=1;
  bytes[1]=2;
  file.seek(0);
  file.write(bytes,0,bytes.length);
  file.write(bytes,0,bytes.length);
  file.write(bytes,0,bytes.length);
  bytes=new byte[932];
  file.write(bytes,0,bytes.length);
  bytes=new byte[1024];
  file.seek(0);
  assertEquals(file.read(bytes,0,bytes.length),1024);
  assertEquals(bytes[0],1);
  assertEquals(bytes[1],2);
  file.close();
}","public void testBytes() throws IOException {
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str"",1000);
  byte[] bytes=new byte[1024];
  bytes[0]=1;
  bytes[1]=2;
  file.seek(0);
  file.write(bytes,0,bytes.length);
  file.write(bytes,0,bytes.length);
  file.write(bytes,0,bytes.length);
  bytes=new byte[932];
  file.write(bytes,0,bytes.length);
  bytes=new byte[1024];
  file.seek(0);
  assertEquals(file.read(bytes,0,bytes.length),1024);
  assertEquals(bytes[0],1);
  assertEquals(bytes[1],2);
  file.close();
}",0.9734361610968296
76319,"public void testBigDecimal() throws IOException {
  int objectNumber=3000;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeBigDecimal(new BigDecimal(""String_Node_Str"" + i));
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readBigDecimal(),new BigDecimal(""String_Node_Str"" + i));
  }
  file.close();
}","public void testBigDecimal() throws IOException {
  int objectNumber=3000;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeBigDecimal(new BigDecimal(""String_Node_Str"" + i));
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readBigDecimal(),new BigDecimal(""String_Node_Str"" + i));
  }
  file.close();
}",0.9671261930010604
76320,"public void testDate() throws IOException {
  int objectNumber=4101;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeDate(new Date(1900100000 + i * 1000));
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readDate(),new Date(1900100000 + i * 1000));
  }
  file.close();
}","public void testDate() throws IOException {
  int objectNumber=4101;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeDate(new Date(1900100000 + i * 1000));
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readDate(),new Date(1900100000 + i * 1000));
  }
  file.close();
}",0.9648924122310306
76321,"public void testMixed() throws IOException {
  int objectNumber=1001;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeInt(i);
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readInt(),i);
  }
  file.writeBigDecimal(new BigDecimal(""String_Node_Str""));
  file.writeDate(new Date(12202000));
  file.writeUTF(""String_Node_Str"");
  file.writeShort(1300);
  file.writeLong(300000111l);
  file.seek(0);
  file.skipBytes(objectNumber * 4);
  assertEquals(file.readBigDecimal(),new BigDecimal(""String_Node_Str""));
  assertEquals(file.readDate(),new Date(12202000));
  assertEquals(file.readUTF(),""String_Node_Str"");
  assertEquals(file.readShort(),1300);
  assertEquals(file.readLong(),300000111l);
}","public void testMixed() throws IOException {
  int objectNumber=1001;
  BufferedRandomAccessFile file=new BufferedRandomAccessFile(new File(tmpPath + File.separatorChar + ""String_Node_Str""),""String_Node_Str"",1000);
  for (int i=0; i < objectNumber; i++) {
    file.writeInt(i);
  }
  file.seek(0);
  for (int i=0; i < objectNumber; i++) {
    assertEquals(file.readInt(),i);
  }
  file.writeBigDecimal(new BigDecimal(""String_Node_Str""));
  file.writeDate(new Date(12202000));
  file.writeUTF(""String_Node_Str"");
  file.writeShort(1300);
  file.writeLong(300000111l);
  file.seek(0);
  file.skipBytes(objectNumber * 4);
  assertEquals(file.readBigDecimal(),new BigDecimal(""String_Node_Str""));
  assertEquals(file.readDate(),new Date(12202000));
  assertEquals(file.readUTF(),""String_Node_Str"");
  assertEquals(file.readShort(),1300);
  assertEquals(file.readLong(),300000111l);
}",0.9820289855072464
76322,"public void ensureGlyphAvailable(char c) throws IOException {
  Character character=new Character(c);
  if (!glyphDefined.contains(character)) {
    glyphDefined.add(character);
    out.print(((int)c) + ""String_Node_Str"");
    out.print(getGlyphIndex(c));
    outputAsPsString(out,getGlyphData(c));
    out.println(""String_Node_Str"" + fontName + ""String_Node_Str"");
  }
}","public void ensureGlyphAvailable(char c) throws IOException {
  List charactersToOutput=getCharactersToOutput(c);
  for (int i=0; i < charactersToOutput.size(); i++) {
    ensureRawDataAvailable(((Character)charactersToOutput.get(i)).charValue());
  }
  ensureRawDataAvailable(c);
}",0.2695252679938744
76323,"private byte[] getGlyphData(char c) throws IOException {
  int[] tableLocation=(int[])positionTables.get(""String_Node_Str"");
  int glyphIndex=getGlyphIndex(c);
  int offset=tableLocation[0] + head.locaBytesPerEntry * glyphIndex;
  rf.seek(offset);
  int dataOffsetRelativeToGlyfTable, dataLength;
  if (head.locaBytesPerEntry == 4) {
    dataOffsetRelativeToGlyfTable=rf.readInt();
    dataLength=rf.readInt() - dataOffsetRelativeToGlyfTable;
  }
 else {
    dataOffsetRelativeToGlyfTable=rf.readUnsignedShort() * 2;
    dataLength=rf.readUnsignedShort() * 2 - dataOffsetRelativeToGlyfTable;
  }
  int[] glyphLocation=(int[])positionTables.get(""String_Node_Str"");
  int dataOffset=dataOffsetRelativeToGlyfTable + glyphLocation[0];
  byte[] result=new byte[dataLength];
  rf.seek(dataOffset);
  rf.readFully(result);
  return result;
}","private byte[] getGlyphData(char c) throws IOException {
  int dataOffsetRelativeToGlyfTable, dataLength;
  int[] glyphDataPosition=getGlyphDataPosition(c);
  dataOffsetRelativeToGlyfTable=glyphDataPosition[0];
  dataLength=glyphDataPosition[1];
  int[] glyphLocation=(int[])positionTables.get(""String_Node_Str"");
  int dataOffset=dataOffsetRelativeToGlyfTable + glyphLocation[0];
  byte[] result=new byte[dataLength];
  rf.seek(dataOffset);
  rf.readFully(result);
  return result;
}",0.4355083459787557
76324,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(Regression_101568.class);
  suite.addTestSuite(Regression_101810.class);
  suite.addTestSuite(Regression_101856.class);
  suite.addTestSuite(Regression_101864.class);
  suite.addTestSuite(Regression_102128.class);
  suite.addTestSuite(Regression_103152.class);
  suite.addTestSuite(Regression_103346.class);
  suite.addTestSuite(Regression_103802.class);
  suite.addTestSuite(Regression_104204.class);
  suite.addTestSuite(Regression_104611.class);
  suite.addTestSuite(Regression_107415.class);
  suite.addTestSuite(Regression_108248.class);
  suite.addTestSuite(Regression_110566.class);
  suite.addTestSuite(Regression_112288.class);
  suite.addTestSuite(Regression_113200.class);
  suite.addTestSuite(Regression_114470.class);
  suite.addTestSuite(Regression_115989.class);
  suite.addTestSuite(Regression_116772.class);
  suite.addTestSuite(Regression_117274.class);
  suite.addTestSuite(Regression_117641.class);
  suite.addTestSuite(Regression_117686.class);
  suite.addTestSuite(Regression_121166.class);
  suite.addTestSuite(Regression_122066.class);
  suite.addTestSuite(Regression_122309.class);
  suite.addTestSuite(Regression_122860.class);
  suite.addTestSuite(Regression_123153.class);
  suite.addTestSuite(Regression_123389.class);
  suite.addTestSuite(Regression_123545.class);
  suite.addTestSuite(Regression_123930.class);
  suite.addTestSuite(Regression_124065.class);
  suite.addTestSuite(Regression_124448.class);
  suite.addTestSuite(Regression_124593.class);
  suite.addTestSuite(Regression_128354.class);
  suite.addTestSuite(Regression_131668.class);
  suite.addTestSuite(Regression_132515.class);
  suite.addTestSuite(Regression_132519.class);
  suite.addTestSuite(Regression_132805.class);
  suite.addTestSuite(Regression_133079.class);
  suite.addTestSuite(Regression_134464.class);
  suite.addTestSuite(Regression_134948.class);
  suite.addTestSuite(Regression_135490.class);
  suite.addTestSuite(Regression_136044.class);
  suite.addTestSuite(Regression_136259.class);
  suite.addTestSuite(Regression_136296.class);
  suite.addTestSuite(Regression_136551.class);
  suite.addTestSuite(Regression_136966.class);
  suite.addTestSuite(Regression_137080.class);
  suite.addTestSuite(Regression_137149.class);
  suite.addTestSuite(Regression_137464.class);
  suite.addTestSuite(Regression_138273.class);
  suite.addTestSuite(Regression_138777.class);
  suite.addTestSuite(Regression_139365.class);
  suite.addTestSuite(Regression_140705.class);
  suite.addTestSuite(Regression_142091.class);
  suite.addTestSuite(Regression_142122.class);
  suite.addTestSuite(Regression_142939.class);
  suite.addTestSuite(Regression_143105.class);
  suite.addTestSuite(Regression_143816.class);
  suite.addTestSuite(Regression_144847.class);
  suite.addTestSuite(Regression_145463.class);
  suite.addTestSuite(Regression_145508.class);
  suite.addTestSuite(Regression_146165.class);
  suite.addTestSuite(Regression_146520.class);
  suite.addTestSuite(Regression_146548.class);
  suite.addTestSuite(Regression_146967.class);
  suite.addTestSuite(Regression_147237.class);
  suite.addTestSuite(Regression_147403.class);
  suite.addTestSuite(Regression_147496.class);
  suite.addTestSuite(Regression_147703.class);
  suite.addTestSuite(Regression_148392.class);
  suite.addTestSuite(Regression_148669.class);
  suite.addTestSuite(Regression_148757.class);
  suite.addTestSuite(Regression_148951.class);
  suite.addTestSuite(Regression_149654.class);
  suite.addTestSuite(Regression_150822.class);
  suite.addTestSuite(Regression_153036.class);
  suite.addTestSuite(Regression_155262.class);
  suite.addTestSuite(Regression_156338.class);
  suite.addTestSuite(Regression_158947.class);
  suite.addTestSuite(Regression_159385.class);
  suite.addTestSuite(Regression_159398.class);
  suite.addTestSuite(Regression_76549.class);
  suite.addTestSuite(Regression_78978.class);
  suite.addTestSuite(Regression_79009.class);
  suite.addTestSuite(Regression_79012.class);
  suite.addTestSuite(Regression_79182.class);
  suite.addTestSuite(Regression_79505.class);
  suite.addTestSuite(Regression_93220.class);
  suite.addTestSuite(Regression_96025.class);
  suite.addTestSuite(Regression_119999.class);
  suite.addTestSuite(Regression_123157.class);
  suite.addTestSuite(Regression_117447.class);
  suite.addTestSuite(Regression_119127.class);
  suite.addTestSuite(Regression_120036.class);
  suite.addTestSuite(Regression_146769.class);
  suite.addTestSuite(Regression_144931.class);
  suite.addTestSuite(Regression_153658.class);
  suite.addTestSuite(Regression_147809.class);
  suite.addTestSuite(Regression_154423.class);
  suite.addTestSuite(Regression_160807.class);
  suite.addTestSuite(Regression_155376.class);
  suite.addTestSuite(Regression_152210.class);
  suite.addTestSuite(Regression_105755.class);
  suite.addTestSuite(FeaturesTest.class);
  suite.addTestSuite(MultiPass_FilterTest.class);
  suite.addTestSuite(MultiPass_NestedQueryTest.class);
  suite.addTestSuite(MultiPass_SortTest.class);
  suite.addTestSuite(MultiPassTest.class);
  suite.addTestSuite(DateUtilTest.class);
  suite.addTestSuite(ColumnAliasTest.class);
  suite.addTestSuite(DataSourceTest.class);
  suite.addTestSuite(FilterTest.class);
  suite.addTestSuite(InputParameterTest.class);
  suite.addTestSuite(ParameterInt.class);
  suite.addTestSuite(DsGroupTest.class);
  suite.addTestSuite(DsParameterTest.class);
  suite.addTestSuite(DsSortTest.class);
  suite.addTest(AllSmokeTests.suite());
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(Regression_101568.class);
  suite.addTestSuite(Regression_101810.class);
  suite.addTestSuite(Regression_101856.class);
  suite.addTestSuite(Regression_101864.class);
  suite.addTestSuite(Regression_102128.class);
  suite.addTestSuite(Regression_103152.class);
  suite.addTestSuite(Regression_103346.class);
  suite.addTestSuite(Regression_103802.class);
  suite.addTestSuite(Regression_104204.class);
  suite.addTestSuite(Regression_104611.class);
  suite.addTestSuite(Regression_107415.class);
  suite.addTestSuite(Regression_108248.class);
  suite.addTestSuite(Regression_110566.class);
  suite.addTestSuite(Regression_112288.class);
  suite.addTestSuite(Regression_113200.class);
  suite.addTestSuite(Regression_114470.class);
  suite.addTestSuite(Regression_115989.class);
  suite.addTestSuite(Regression_116772.class);
  suite.addTestSuite(Regression_117274.class);
  suite.addTestSuite(Regression_117641.class);
  suite.addTestSuite(Regression_117686.class);
  suite.addTestSuite(Regression_121166.class);
  suite.addTestSuite(Regression_122066.class);
  suite.addTestSuite(Regression_122309.class);
  suite.addTestSuite(Regression_122860.class);
  suite.addTestSuite(Regression_123153.class);
  suite.addTestSuite(Regression_123389.class);
  suite.addTestSuite(Regression_123545.class);
  suite.addTestSuite(Regression_123930.class);
  suite.addTestSuite(Regression_124065.class);
  suite.addTestSuite(Regression_124448.class);
  suite.addTestSuite(Regression_124593.class);
  suite.addTestSuite(Regression_128354.class);
  suite.addTestSuite(Regression_131668.class);
  suite.addTestSuite(Regression_132515.class);
  suite.addTestSuite(Regression_132519.class);
  suite.addTestSuite(Regression_132805.class);
  suite.addTestSuite(Regression_133079.class);
  suite.addTestSuite(Regression_134464.class);
  suite.addTestSuite(Regression_134948.class);
  suite.addTestSuite(Regression_135490.class);
  suite.addTestSuite(Regression_136044.class);
  suite.addTestSuite(Regression_136259.class);
  suite.addTestSuite(Regression_136296.class);
  suite.addTestSuite(Regression_136551.class);
  suite.addTestSuite(Regression_136966.class);
  suite.addTestSuite(Regression_137080.class);
  suite.addTestSuite(Regression_137149.class);
  suite.addTestSuite(Regression_137464.class);
  suite.addTestSuite(Regression_138273.class);
  suite.addTestSuite(Regression_138777.class);
  suite.addTestSuite(Regression_139365.class);
  suite.addTestSuite(Regression_140705.class);
  suite.addTestSuite(Regression_142091.class);
  suite.addTestSuite(Regression_142122.class);
  suite.addTestSuite(Regression_142939.class);
  suite.addTestSuite(Regression_143105.class);
  suite.addTestSuite(Regression_143816.class);
  suite.addTestSuite(Regression_144847.class);
  suite.addTestSuite(Regression_145463.class);
  suite.addTestSuite(Regression_145508.class);
  suite.addTestSuite(Regression_146165.class);
  suite.addTestSuite(Regression_146520.class);
  suite.addTestSuite(Regression_146548.class);
  suite.addTestSuite(Regression_146967.class);
  suite.addTestSuite(Regression_147237.class);
  suite.addTestSuite(Regression_147403.class);
  suite.addTestSuite(Regression_147496.class);
  suite.addTestSuite(Regression_147703.class);
  suite.addTestSuite(Regression_148392.class);
  suite.addTestSuite(Regression_148669.class);
  suite.addTestSuite(Regression_148757.class);
  suite.addTestSuite(Regression_148951.class);
  suite.addTestSuite(Regression_149654.class);
  suite.addTestSuite(Regression_150822.class);
  suite.addTestSuite(Regression_153036.class);
  suite.addTestSuite(Regression_155262.class);
  suite.addTestSuite(Regression_156338.class);
  suite.addTestSuite(Regression_158947.class);
  suite.addTestSuite(Regression_159385.class);
  suite.addTestSuite(Regression_159398.class);
  suite.addTestSuite(Regression_76549.class);
  suite.addTestSuite(Regression_78978.class);
  suite.addTestSuite(Regression_79009.class);
  suite.addTestSuite(Regression_79012.class);
  suite.addTestSuite(Regression_79182.class);
  suite.addTestSuite(Regression_79505.class);
  suite.addTestSuite(Regression_93220.class);
  suite.addTestSuite(Regression_96025.class);
  suite.addTestSuite(Regression_119999.class);
  suite.addTestSuite(Regression_123157.class);
  suite.addTestSuite(Regression_117447.class);
  suite.addTestSuite(Regression_120036.class);
  suite.addTestSuite(Regression_153658.class);
  suite.addTestSuite(Regression_147809.class);
  suite.addTestSuite(Regression_160807.class);
  suite.addTestSuite(Regression_155376.class);
  suite.addTestSuite(Regression_152210.class);
  suite.addTestSuite(Regression_105755.class);
  suite.addTestSuite(FeaturesTest.class);
  suite.addTestSuite(MultiPass_FilterTest.class);
  suite.addTestSuite(MultiPass_NestedQueryTest.class);
  suite.addTestSuite(MultiPass_SortTest.class);
  suite.addTestSuite(MultiPassTest.class);
  suite.addTestSuite(DateUtilTest.class);
  suite.addTestSuite(ColumnAliasTest.class);
  suite.addTestSuite(DataSourceTest.class);
  suite.addTestSuite(FilterTest.class);
  suite.addTestSuite(InputParameterTest.class);
  suite.addTestSuite(ParameterInt.class);
  suite.addTestSuite(DsGroupTest.class);
  suite.addTestSuite(DsParameterTest.class);
  suite.addTestSuite(DsSortTest.class);
  suite.addTest(AllSmokeTests.suite());
  return suite;
}",0.9829740988951275
76325,"public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0, dLength=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      dLength=0;
      for (int j=0; j < iTickCount - 1; j++) {
        if (dX < daTickCoordinates[j + 1] && dX >= daTickCoordinates[j]) {
          dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}","public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0, dLength=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dY+=dUnitSize / 2;
          }
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      dLength=0;
      for (int j=0; j < iTickCount - 1; j++) {
        if (dX < daTickCoordinates[j + 1] && dX >= daTickCoordinates[j]) {
          dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}",0.9933608218603676
76326,"public void before() throws ChartException {
  super.before();
  _bImageExternallySpecified=(_img != null);
  if (!_bImageExternallySpecified) {
    if (_bo == null) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if ((int)_bo.getWidth() < 0 || (int)_bo.getHeight() < 0) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.INVALID_IMAGE_SIZE,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if ((int)_bo.getWidth() == 0 || (int)_bo.getHeight() == 0) {
      _bo.setWidth(1);
      _bo.setHeight(1);
    }
    _img=new BufferedImage((int)_bo.getWidth(),(int)_bo.getHeight(),getImageType());
  }
  super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,_img.getGraphics());
}","public void before() throws ChartException {
  super.before();
  _bImageExternallySpecified=(_img != null);
  if (!_bImageExternallySpecified) {
    if (_bo == null) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if ((int)_bo.getWidth() < 0 || (int)_bo.getHeight() < 0) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.INVALID_IMAGE_SIZE,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if ((int)_bo.getWidth() == 0 || (int)_bo.getHeight() == 0) {
      _bo.setWidth(1);
      _bo.setHeight(1);
    }
    _img=new BufferedImage((int)_bo.getWidth(),(int)_bo.getHeight(),getImageType());
  }
  super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,_img.getGraphics());
  if (!supportsTransparency()) {
    _g2d.setPaint(Color.WHITE);
    _g2d.fillRect(0,0,_img.getWidth(null),_img.getHeight(null));
  }
}",0.9251396648044692
76327,"public void testParserForSupportedProperties() throws Exception {
  assertNotNull(style1);
  assertNotNull(style2);
  assertNotNull(style3);
  assertEquals(""String_Node_Str"",style1.getProperty(IStyleModel.FONT_FAMILY_PROP));
  assertEquals(""String_Node_Str"",style2.getProperty(IStyleModel.FONT_FAMILY_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.FONT_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.FONT_WEIGHT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.FONT_VARIANT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_UNDERLINE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_OVERLINE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_LINE_THROUGH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_ATTACHMENT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BACKGROUND_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_IMAGE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_POSITION_X_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_POSITION_Y_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BACKGROUND_POSITION_X_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BACKGROUND_POSITION_Y_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_REPEAT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.LETTER_SPACING_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.LETTER_SPACING_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.LINE_HEIGHT_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.LINE_HEIGHT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_ALIGN_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_INDENT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_TRANSFORM_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.VERTICAL_ALIGN_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.VERTICAL_ALIGN_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.WHITE_SPACE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.WIDOWS_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.WIDOWS_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.ORPHANS_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.ORPHANS_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.WORD_SPACING_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.WORD_SPACING_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.DISPLAY_PROP));
  style1.setMasterPage(""String_Node_Str"");
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MASTER_PAGE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PAGE_BREAK_BEFORE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PAGE_BREAK_AFTER_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PAGE_BREAK_INSIDE_PROP));
  style1.setShowIfBlank(true);
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.SHOW_IF_BLANK_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_TOP_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_TOP_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_TOP_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_TOP_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_TOP_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_LEFT_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_LEFT_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_LEFT_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_LEFT_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_LEFT_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_BOTTOM_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_BOTTOM_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_BOTTOM_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_BOTTOM_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_BOTTOM_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_RIGHT_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_RIGHT_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_RIGHT_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_RIGHT_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_RIGHT_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MARGIN_TOP_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.MARGIN_TOP_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MARGIN_BOTTOM_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.MARGIN_BOTTOM_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MARGIN_LEFT_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.MARGIN_LEFT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MARGIN_RIGHT_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.MARGIN_RIGHT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PADDING_TOP_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PADDING_LEFT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PADDING_BOTTOM_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PADDING_RIGHT_PROP));
  DateTimeFormatValue dtfValue=new DateTimeFormatValue();
  dtfValue.setCategory(""String_Node_Str"");
  dtfValue.setPattern(""String_Node_Str"");
  style1.setDateTimeFormatCategory(dtfValue.getCategory());
  style1.setDateTimeFormat(dtfValue.getPattern());
  assertEquals(dtfValue.getCategory(),((DateTimeFormatValue)style1.getProperty(IStyleModel.DATE_TIME_FORMAT_PROP)).getCategory());
  assertEquals(dtfValue.getPattern(),((DateTimeFormatValue)style1.getProperty(IStyleModel.DATE_TIME_FORMAT_PROP)).getPattern());
  NumberFormatValue nfValue=new NumberFormatValue();
  nfValue.setCategory(""String_Node_Str"");
  nfValue.setPattern(""String_Node_Str"");
  style1.setNumberFormatCategory(nfValue.getCategory());
  style1.setNumberFormat(nfValue.getPattern());
  assertEquals(nfValue.getCategory(),((NumberFormatValue)style1.getProperty(IStyleModel.NUMBER_FORMAT_PROP)).getCategory());
  assertEquals(nfValue.getPattern(),((NumberFormatValue)style1.getProperty(IStyleModel.NUMBER_FORMAT_PROP)).getPattern());
  style1.setProperty(IStyleModel.NUMBER_ALIGN_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.NUMBER_ALIGN_PROP));
  StringFormatValue sfValue=new StringFormatValue();
  sfValue.setCategory(""String_Node_Str"");
  sfValue.setPattern(""String_Node_Str"");
  style1.setStringFormatCategory(sfValue.getCategory());
  style1.setStringFormat(sfValue.getPattern());
  assertEquals(sfValue.getCategory(),((StringFormatValue)style1.getProperty(IStyleModel.STRING_FORMAT_PROP)).getCategory());
  assertEquals(sfValue.getPattern(),((StringFormatValue)style1.getProperty(IStyleModel.STRING_FORMAT_PROP)).getPattern());
  style1.setCanShrink(false);
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.CAN_SHRINK_PROP));
  MapRule mr=new MapRule();
  mr.setOperator(""String_Node_Str"");
  mr.setValue1(""String_Node_Str"");
  mr.setValue2(""String_Node_Str"");
  mr.setTestExpression(""String_Node_Str"");
  mr.setDisplay(""String_Node_Str"");
  List mapList=new ArrayList();
  mapList.add(mr);
  PropertyHandle mapRules=style1.getPropertyHandle(IStyleModel.MAP_RULES_PROP);
  mapRules.addItem(mr);
  assertEquals(mr.getOperator(),((MapRule)((List)style1.getProperty(IStyleModel.MAP_RULES_PROP)).get(0)).getOperator());
  assertEquals(mr.getValue1(),((MapRule)((List)style1.getProperty(IStyleModel.MAP_RULES_PROP)).get(0)).getValue1());
  assertEquals(mr.getValue2(),((MapRule)((List)style1.getProperty(IStyleModel.MAP_RULES_PROP)).get(0)).getValue2());
  assertEquals(mr.getTestExpression(),((MapRule)((List)style1.getProperty(IStyleModel.MAP_RULES_PROP)).get(0)).getTestExpression());
  assertEquals(mr.getDisplay(),((MapRule)((List)style1.getProperty(IStyleModel.MAP_RULES_PROP)).get(0)).getDisplay());
  HighlightRule hlr=new HighlightRule();
  hlr.setOperator(""String_Node_Str"");
  hlr.setValue1(""String_Node_Str"");
  hlr.setTestExpression(""String_Node_Str"");
  hlr.setProperty(IStyleModel.BACKGROUND_COLOR_PROP,""String_Node_Str"");
  List highlight=new ArrayList();
  highlight.add(hlr);
  PropertyHandle highlightRules=style1.getPropertyHandle(IStyleModel.HIGHLIGHT_RULES_PROP);
  highlightRules.addItem(hlr);
  assertEquals(hlr.getOperator(),((HighlightRule)((List)style1.getProperty(IStyleModel.HIGHLIGHT_RULES_PROP)).get(0)).getOperator());
  assertEquals(hlr.getValue1(),((HighlightRule)((List)style1.getProperty(IStyleModel.HIGHLIGHT_RULES_PROP)).get(0)).getValue1());
  assertEquals(hlr.getTestExpression(),((HighlightRule)((List)style1.getProperty(IStyleModel.HIGHLIGHT_RULES_PROP)).get(0)).getTestExpression());
  assertEquals(hlr.getProperty(designHandle.getModule(),""String_Node_Str""),((HighlightRule)((List)style1.getProperty(IStyleModel.HIGHLIGHT_RULES_PROP)).get(0)).getProperty(designHandle.getModule(),""String_Node_Str""));
}","public void testParserForSupportedProperties() throws Exception {
  assertNotNull(style1);
  assertNotNull(style2);
  assertNotNull(style3);
  assertEquals(""String_Node_Str"",style1.getProperty(IStyleModel.FONT_FAMILY_PROP));
  assertEquals(""String_Node_Str"",style2.getProperty(IStyleModel.FONT_FAMILY_PROP).toString());
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.FONT_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.FONT_WEIGHT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.FONT_VARIANT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_UNDERLINE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_OVERLINE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_LINE_THROUGH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_ATTACHMENT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BACKGROUND_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_IMAGE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_POSITION_X_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_POSITION_Y_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BACKGROUND_POSITION_X_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BACKGROUND_POSITION_Y_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BACKGROUND_REPEAT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.LETTER_SPACING_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.LETTER_SPACING_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.LINE_HEIGHT_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.LINE_HEIGHT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_ALIGN_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_INDENT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.TEXT_TRANSFORM_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.VERTICAL_ALIGN_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.VERTICAL_ALIGN_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.WHITE_SPACE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.WIDOWS_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.WIDOWS_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.ORPHANS_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.ORPHANS_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.WORD_SPACING_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.WORD_SPACING_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_TOP_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_TOP_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_TOP_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_TOP_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_TOP_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_LEFT_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_LEFT_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_LEFT_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_LEFT_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_LEFT_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_BOTTOM_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_BOTTOM_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_BOTTOM_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_BOTTOM_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_BOTTOM_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_RIGHT_STYLE_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_RIGHT_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_RIGHT_WIDTH_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.BORDER_RIGHT_COLOR_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.BORDER_RIGHT_COLOR_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MARGIN_TOP_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.MARGIN_TOP_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MARGIN_BOTTOM_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.MARGIN_BOTTOM_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MARGIN_LEFT_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.MARGIN_LEFT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.MARGIN_RIGHT_PROP));
  assertEquals(""String_Node_Str"",style2.getStringProperty(IStyleModel.MARGIN_RIGHT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PADDING_TOP_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PADDING_LEFT_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PADDING_BOTTOM_PROP));
  assertEquals(""String_Node_Str"",style1.getStringProperty(IStyleModel.PADDING_RIGHT_PROP));
}",0.7472452183842421
76328,"public void testThemeSearchAlgorithm() throws Exception {
  openDesign(""String_Node_Str"");
  table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  label=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  SharedStyleHandle RCS1=designHandle.findStyle(""String_Node_Str"");
  SharedStyleHandle RCS2=designHandle.findStyle(""String_Node_Str"");
  SharedStyleHandle RSS1=designHandle.findStyle(""String_Node_Str"");
  SharedStyleHandle RSS2=designHandle.findStyle(""String_Node_Str"");
  assertNotNull(table);
  assertNotNull(label);
  assertNotNull(RCS1);
  assertNotNull(RCS2);
  assertNotNull(RSS1);
  assertNotNull(RSS2);
  openLibrary(LibCInclTheme,true);
  libraryHandle.saveAs(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LibC1);
  StyleHandle LCS1=libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"");
  StyleHandle LCS2=libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"");
  StyleHandle LSS1=libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"");
  StyleHandle LSS2=libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"");
  assertNotNull(LCS1);
  assertNotNull(LCS2);
  assertNotNull(LSS1);
  assertNotNull(LSS2);
  designHandle.includeLibrary(LibC1,""String_Node_Str"");
  designHandle.setThemeName(""String_Node_Str"");
  table.setStyleName(""String_Node_Str"");
  label.setStyleName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",table.getStringProperty(Style.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",label.getStringProperty(Style.BACKGROUND_COLOR_PROP));
  designHandle.getStyles().drop(RCS1);
  designHandle.getStyles().drop(RCS2);
  assertEquals(""String_Node_Str"",table.getStringProperty(Style.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",label.getStringProperty(Style.BACKGROUND_COLOR_PROP));
  libraryHandle.findTheme(""String_Node_Str"").getStyles().drop(LCS1);
  libraryHandle.findTheme(""String_Node_Str"").getStyles().drop(LCS2);
  libraryHandle.save();
  openDesign(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.findElement(""String_Node_Str"").getStringProperty(Style.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",designHandle.findElement(""String_Node_Str"").getStringProperty(Style.BACKGROUND_COLOR_PROP));
  designHandle.findStyle(""String_Node_Str"").drop();
  designHandle.findStyle(""String_Node_Str"").drop();
  assertEquals(""String_Node_Str"",designHandle.findElement(""String_Node_Str"").getStringProperty(Style.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",designHandle.findElement(""String_Node_Str"").getStringProperty(Style.BACKGROUND_COLOR_PROP));
  designHandle.save();
  openLibrary(""String_Node_Str"");
  libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"").drop();
  libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"").drop();
  libraryHandle.save();
  openDesign(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.findElement(""String_Node_Str"").getStringProperty(Style.FONT_SIZE_PROP));
  assertNull(designHandle.findElement(""String_Node_Str"").getStringProperty(Style.BACKGROUND_COLOR_PROP));
  openLibrary(""String_Node_Str"");
  libraryHandle.findTheme(""String_Node_Str"").drop();
  assertNull(libraryHandle.findTheme(""String_Node_Str""));
}","public void testThemeSearchAlgorithm() throws Exception {
  openDesign(""String_Node_Str"");
  table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  label=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  SharedStyleHandle RCS1=designHandle.findStyle(""String_Node_Str"");
  SharedStyleHandle RCS2=designHandle.findStyle(""String_Node_Str"");
  SharedStyleHandle RSS1=designHandle.findStyle(""String_Node_Str"");
  SharedStyleHandle RSS2=designHandle.findStyle(""String_Node_Str"");
  assertNotNull(table);
  assertNotNull(label);
  assertNotNull(RCS1);
  assertNotNull(RCS2);
  assertNotNull(RSS1);
  assertNotNull(RSS2);
  openLibrary(LibCInclTheme,true);
  libraryHandle.saveAs(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LibC1);
  StyleHandle LCS1=libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"");
  StyleHandle LCS2=libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"");
  StyleHandle LSS1=libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"");
  StyleHandle LSS2=libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"");
  assertNotNull(LCS1);
  assertNotNull(LCS2);
  assertNotNull(LSS1);
  assertNotNull(LSS2);
  designHandle.includeLibrary(LibC1,""String_Node_Str"");
  designHandle.setThemeName(""String_Node_Str"");
  table.setStyleName(""String_Node_Str"");
  label.setStyleName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",table.getStringProperty(Style.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",label.getStringProperty(Style.BACKGROUND_COLOR_PROP));
  designHandle.getStyles().drop(RCS1);
  designHandle.getStyles().drop(RCS2);
  assertEquals(""String_Node_Str"",table.getStringProperty(Style.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",label.getStringProperty(Style.BACKGROUND_COLOR_PROP));
  libraryHandle.findTheme(""String_Node_Str"").getStyles().drop(LCS1);
  libraryHandle.findTheme(""String_Node_Str"").getStyles().drop(LCS2);
  libraryHandle.save();
  openDesign(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.findElement(""String_Node_Str"").getStringProperty(Style.FONT_SIZE_PROP));
  assertEquals(""String_Node_Str"",designHandle.findElement(""String_Node_Str"").getStringProperty(Style.BACKGROUND_COLOR_PROP));
  openLibrary(""String_Node_Str"");
  libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"").drop();
  libraryHandle.findTheme(""String_Node_Str"").findStyle(""String_Node_Str"").drop();
  libraryHandle.save();
  openDesign(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.findElement(""String_Node_Str"").getStringProperty(Style.FONT_SIZE_PROP));
  assertNull(designHandle.findElement(""String_Node_Str"").getStringProperty(Style.BACKGROUND_COLOR_PROP));
  openLibrary(""String_Node_Str"");
  libraryHandle.findTheme(""String_Node_Str"").drop();
  assertNull(libraryHandle.findTheme(""String_Node_Str""));
}",0.8820479585223591
76329,"/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
}","/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getDisplayName());
}",0.8821548821548821
76330,"public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  resizeTemplateElement(foreign);
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  if (foreign.getGenerateBy() instanceof TemplateDesign) {
    String bookmark=foreign.getBookmark();
    if (bookmark == null) {
      bookmark=idGenerator.generateUniqueID();
      foreign.setBookmark(bookmark);
    }
  }
  String tagName;
  String url=validate(foreign.getHyperlinkAction());
  boolean metadataOutput=false;
  if (url != null) {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startForeign(foreign,HTMLTags.TAG_SPAN);
    }
    tagName=HTMLTags.TAG_A;
    outputAction(foreign.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startForeign(foreign,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(foreign.getStyleClass());
  if (!metadataOutput) {
    outputBookmark(foreign,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  if (isTalbeTemplateElement(foreign)) {
    mergedStyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_FONT_FAMILY,IStyle.SANS_SERIF_VALUE);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(foreign,styleBuffer,false);
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  if (isHtml) {
    CSSValue vAlign=mergedStyle.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
    if (vAlign != null && vAlign != IStyle.BASELINE_VALUE && height != null) {
      writer.openTag(HTMLTags.TAG_TABLE);
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
      writer.openTag(HTMLTags.TAG_TR);
      writer.openTag(HTMLTags.TAG_TD);
      StringBuffer textStyleBuffer=new StringBuffer();
      textStyleBuffer.append(""String_Node_Str"");
      textStyleBuffer.append(vAlign.getCssText());
      textStyleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
      outputHtmlText(foreign);
      writer.closeTag(HTMLTags.TAG_TD);
      writer.closeTag(HTMLTags.TAG_TR);
      writer.closeTag(HTMLTags.TAG_TABLE);
    }
 else {
      outputHtmlText(foreign);
    }
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endForeign(foreign);
  }
  cellFilled=true;
}","public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  resizeTemplateElement(foreign);
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  if (foreign.getGenerateBy() instanceof TemplateDesign) {
    String bookmark=foreign.getBookmark();
    if (bookmark == null) {
      bookmark=idGenerator.generateUniqueID();
      foreign.setBookmark(bookmark);
    }
  }
  String tagName;
  String url=validate(foreign.getHyperlinkAction());
  boolean metadataOutput=false;
  if (url != null) {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startForeign(foreign,HTMLTags.TAG_SPAN);
    }
    tagName=HTMLTags.TAG_A;
    outputAction(foreign.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startForeign(foreign,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(foreign.getStyleClass());
  if (!metadataOutput) {
    outputBookmark(foreign,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  if (isTalbeTemplateElement(foreign)) {
    mergedStyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_FONT_FAMILY,IStyle.SANS_SERIF_VALUE);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(foreign,styleBuffer,false);
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  if (isHtml) {
    CSSValue vAlign=mergedStyle.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
    if (vAlign != null && vAlign != IStyle.BASELINE_VALUE && height != null) {
      writer.openTag(HTMLTags.TAG_TABLE);
      StringBuffer nestingTableStyleBuffer=new StringBuffer();
      nestingTableStyleBuffer.append(""String_Node_Str"");
      nestingTableStyleBuffer.append(height.toString());
      writer.attribute(HTMLTags.ATTR_STYLE,nestingTableStyleBuffer);
      writer.openTag(HTMLTags.TAG_TR);
      writer.openTag(HTMLTags.TAG_TD);
      StringBuffer textStyleBuffer=new StringBuffer();
      textStyleBuffer.append(""String_Node_Str"");
      textStyleBuffer.append(vAlign.getCssText());
      textStyleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
      outputHtmlText(foreign);
      writer.closeTag(HTMLTags.TAG_TD);
      writer.closeTag(HTMLTags.TAG_TR);
      writer.closeTag(HTMLTags.TAG_TABLE);
    }
 else {
      outputHtmlText(foreign);
    }
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endForeign(foreign);
  }
  cellFilled=true;
}",0.8023043417170156
76331,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  String url=validate(text.getHyperlinkAction());
  boolean metadataOutput=false;
  if (url != null) {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startText(text,HTMLTags.TAG_SPAN);
    }
    tagName=HTMLTags.TAG_A;
    outputAction(text.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startText(text,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleStyle(text,styleBuffer,false);
  CSSValue vAlign=mergedStyle.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  CSSValue canShrink=mergedStyle.getProperty(IStyle.STYLE_CAN_SHRINK);
  if (vAlign != null && vAlign != IStyle.BASELINE_VALUE && height != null && canShrink != IStyle.TRUE_VALUE) {
    writer.openTag(HTMLTags.TAG_TABLE);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(vAlign.getCssText());
    textStyleBuffer.append(""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
 else {
    writer.text(textValue);
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endText(text);
  }
  cellFilled=true;
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  String url=validate(text.getHyperlinkAction());
  boolean metadataOutput=false;
  if (url != null) {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startText(text,HTMLTags.TAG_SPAN);
    }
    tagName=HTMLTags.TAG_A;
    outputAction(text.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startText(text,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleStyle(text,styleBuffer,false);
  CSSValue vAlign=mergedStyle.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  CSSValue canShrink=mergedStyle.getProperty(IStyle.STYLE_CAN_SHRINK);
  if (vAlign != null && vAlign != IStyle.BASELINE_VALUE && height != null && canShrink != IStyle.TRUE_VALUE) {
    writer.openTag(HTMLTags.TAG_TABLE);
    StringBuffer nestingTableStyleBuffer=new StringBuffer();
    nestingTableStyleBuffer.append(""String_Node_Str"");
    nestingTableStyleBuffer.append(height.toString());
    writer.attribute(HTMLTags.ATTR_STYLE,nestingTableStyleBuffer);
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(vAlign.getCssText());
    textStyleBuffer.append(""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
 else {
    writer.text(textValue);
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endText(text);
  }
  cellFilled=true;
}",0.9647334113321075
76332,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}",0.9959541469993256
76333,"public CrosstabCellAdapter createCrosstabCellAdapter(String type,CrosstabCellHandle handle,int rowNumber,int rowSpan,int columnNumber,int columnSpan,boolean isConvert){
  CrosstabCellAdapter retValue=null;
  if (CELL_LEVEL_HANDLE.equals(type) || CELL_FIRST_LEVEL_HANDLE.equals(type) || CELL_MEASURE.equals(type)) {
    retValue=new NormalCrosstabCellAdapter(handle);
  }
 else   if (CELL_MEASURE_HEADER.equals(type)) {
    retValue=new HeaderCrosstabCellHandleAdapter(handle);
  }
 else   if (CELL_ROW_VIRTUAL.equals(type)) {
    retValue=new VirtualCrosstabCellAdapter(handle);
    ((VirtualCrosstabCellAdapter)retValue).setType(VirtualCrosstabCellAdapter.ROW_TYPE);
  }
 else   if (CELL_COLUMN_VIRTUAL.equals(type)) {
    retValue=new VirtualCrosstabCellAdapter(handle);
    ((VirtualCrosstabCellAdapter)retValue).setType(VirtualCrosstabCellAdapter.COLUMN_TYPE);
  }
 else   if (CELL_MEASURE_VIRTUAL.equals(type)) {
    retValue=new VirtualCrosstabCellAdapter(handle);
    ((VirtualCrosstabCellAdapter)retValue).setType(VirtualCrosstabCellAdapter.MEASURE_TYPE);
  }
 else   if (LEFT_CONNER.equals(type)) {
    retValue=new VirtualCrosstabCellAdapter(handle);
    ((VirtualCrosstabCellAdapter)retValue).setType(VirtualCrosstabCellAdapter.IMMACULATE_TYPE);
  }
 else   if (CELL_SUB_TOTAL.equals(type)) {
    retValue=new TotalCrosstabCellHandleAdapter(handle);
    ((TotalCrosstabCellHandleAdapter)retValue).setType(TotalCrosstabCellHandleAdapter.SUB_TOTAL);
  }
 else   if (CELL_GRAND_TOTAL.equals(type)) {
    retValue=new TotalCrosstabCellHandleAdapter(handle);
    ((TotalCrosstabCellHandleAdapter)retValue).setType(TotalCrosstabCellHandleAdapter.GRAND_TOTAL);
  }
 else   if (CELL_MEASURE_AGGREGATION.equals(type)) {
    retValue=new AggregationCrosstabCellAdapter((AggregationCellHandle)handle);
  }
  if (retValue == null) {
    return retValue;
  }
  if (isConvert) {
    int temp=rowNumber;
    rowNumber=columnNumber;
    columnNumber=temp;
    temp=rowSpan;
    rowSpan=columnSpan;
    columnSpan=temp;
  }
  if (rowNumber >= 1) {
    retValue.setRowNumber(rowNumber);
  }
  if (rowSpan >= 1) {
    retValue.setRowSpan(rowSpan);
  }
  if (columnNumber >= 1) {
    retValue.setColumnNumber(columnNumber);
  }
  if (columnSpan >= 1) {
    retValue.setColumnSpan(columnSpan);
  }
  retValue.setPositionType(type);
  return retValue;
}","public CrosstabCellAdapter createCrosstabCellAdapter(String type,CrosstabCellHandle handle,int rowNumber,int rowSpan,int columnNumber,int columnSpan,boolean isConvert){
  CrosstabCellAdapter retValue=null;
  if (CELL_LEVEL_HANDLE.equals(type) || CELL_FIRST_LEVEL_HANDLE.equals(type) || CELL_MEASURE.equals(type)) {
    retValue=new NormalCrosstabCellAdapter(handle);
  }
 else   if (CELL_MEASURE_HEADER.equals(type)) {
    retValue=new HeaderCrosstabCellHandleAdapter(handle);
  }
 else   if (CELL_ROW_VIRTUAL.equals(type)) {
    retValue=new VirtualCrosstabCellAdapter(handle);
    ((VirtualCrosstabCellAdapter)retValue).setCrosstabReportItemHandle(getCrosstabReportItemHandle());
    ((VirtualCrosstabCellAdapter)retValue).setType(VirtualCrosstabCellAdapter.ROW_TYPE);
  }
 else   if (CELL_COLUMN_VIRTUAL.equals(type)) {
    retValue=new VirtualCrosstabCellAdapter(handle);
    ((VirtualCrosstabCellAdapter)retValue).setCrosstabReportItemHandle(getCrosstabReportItemHandle());
    ((VirtualCrosstabCellAdapter)retValue).setType(VirtualCrosstabCellAdapter.COLUMN_TYPE);
  }
 else   if (CELL_MEASURE_VIRTUAL.equals(type)) {
    retValue=new VirtualCrosstabCellAdapter(handle);
    ((VirtualCrosstabCellAdapter)retValue).setCrosstabReportItemHandle(getCrosstabReportItemHandle());
    ((VirtualCrosstabCellAdapter)retValue).setType(VirtualCrosstabCellAdapter.MEASURE_TYPE);
  }
 else   if (LEFT_CONNER.equals(type)) {
    retValue=new VirtualCrosstabCellAdapter(handle);
    ((VirtualCrosstabCellAdapter)retValue).setCrosstabReportItemHandle(getCrosstabReportItemHandle());
    ((VirtualCrosstabCellAdapter)retValue).setType(VirtualCrosstabCellAdapter.IMMACULATE_TYPE);
  }
 else   if (CELL_SUB_TOTAL.equals(type)) {
    retValue=new TotalCrosstabCellHandleAdapter(handle);
    ((TotalCrosstabCellHandleAdapter)retValue).setType(TotalCrosstabCellHandleAdapter.SUB_TOTAL);
  }
 else   if (CELL_GRAND_TOTAL.equals(type)) {
    retValue=new TotalCrosstabCellHandleAdapter(handle);
    ((TotalCrosstabCellHandleAdapter)retValue).setType(TotalCrosstabCellHandleAdapter.GRAND_TOTAL);
  }
 else   if (CELL_MEASURE_AGGREGATION.equals(type)) {
    retValue=new AggregationCrosstabCellAdapter((AggregationCellHandle)handle);
  }
  if (retValue == null) {
    return retValue;
  }
  if (isConvert) {
    int temp=rowNumber;
    rowNumber=columnNumber;
    columnNumber=temp;
    temp=rowSpan;
    rowSpan=columnSpan;
    columnSpan=temp;
  }
  if (rowNumber >= 1) {
    retValue.setRowNumber(rowNumber);
  }
  if (rowSpan >= 1) {
    retValue.setRowSpan(rowSpan);
  }
  if (columnNumber >= 1) {
    retValue.setColumnNumber(columnNumber);
  }
  if (columnSpan >= 1) {
    retValue.setColumnSpan(columnSpan);
  }
  retValue.setPositionType(type);
  return retValue;
}",0.9191522762951334
76334,"public boolean handleValidate(Object obj){
  if (obj instanceof DimensionHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE) || getPositionType().equals(ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE)) {
      return true;
    }
  }
  if (obj instanceof MeasureHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      return true;
    }
  }
  return false;
}","public boolean handleValidate(Object obj){
  CrosstabReportItemHandle crosstab=getCrosstabCellHandle().getCrosstab();
  if (obj instanceof DimensionHandle) {
    if ((getPositionType().equals(ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE) || getPositionType().equals(ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE)) && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof MeasureHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  return false;
}",0.8209934395501406
76335,"public boolean handleValidate(Object obj){
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len != 1) {
      return false;
    }
    return handleValidate(objects[0]);
  }
  if (getType() == ICrosstabConstants.ROW_AXIS_TYPE || getType() == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    if (obj instanceof DimensionHandle) {
      return true;
    }
  }
  if (getType() == MEASURE_TYPE) {
    if (obj instanceof MeasureHandle) {
      return true;
    }
  }
  return false;
}","public boolean handleValidate(Object obj){
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len != 1) {
      return false;
    }
    return handleValidate(objects[0]);
  }
  if (getType() == ICrosstabConstants.ROW_AXIS_TYPE || getType() == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    if (obj instanceof DimensionHandle && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
  }
  if (getType() == MEASURE_TYPE) {
    if (obj instanceof MeasureHandle && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  return false;
}",0.9025641025641026
76336,"public void buildContextMenu(IMenuManager menuManager){
  GEFActionConstants.addStandardActionGroups(menuManager);
  Object firstSelectedElement=getFirstElement();
  Object selectedElements=getSelectedElement();
  Object multiSelection=getMultiSelectedElement();
  if (isMutilSelection(multiSelection)) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    if (isRootElementHandleClass(multiSelection)) {
      Action action=new RefreshModuleHandleAction(selectedElements);
      menuManager.add(action);
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      createThemeMenu(menuManager,GEFActionConstants.GROUP_REST);
    }
    if (isListHandleCalss(multiSelection)) {
      IAction action=getAction(CreatePlaceHolderPartAction.ID);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
    }
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"");
    }
  }
 else   if (firstSelectedElement instanceof DesignElementHandle) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (((IStructuredSelection)getSelection()).size() == 1) {
      Object element=((IStructuredSelection)getSelection()).getFirstElement();
      if (element instanceof LabelEditPart || element instanceof ImageEditPart) {
        if (element instanceof DataEditPart) {
          IAction action=getAction(ChangeDataColumnPartAction.ID);
          menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        }
        IAction action=getAction(GEFActionConstants.DIRECT_EDIT);
        action.setAccelerator(SWT.F2);
        if (element instanceof DataEditPart) {
          action.setText(Messages.getString(""String_Node_Str""));
        }
 else {
          action.setText(Messages.getString(""String_Node_Str""));
        }
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof ReportItemHandle) {
        IAction action=getAction(CreatePlaceHolderPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        action=getAction(RevertToReportItemPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        action=getAction(RevertToTemplatePartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof TemplateReportItemHandle) {
        IAction action=getAction(RevertToReportItemPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
    }
    if (firstSelectedElement instanceof RowHandle) {
      if (getRowHandles().size() != 0) {
        MenuManager insertMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        MenuManager rowMenu=new MenuManager(INSERT_ROW_MENU_ITEM_TEXT);
        rowMenu.add(getAction(InsertRowAboveAction.ID));
        rowMenu.add(getAction(InsertRowBelowAction.ID));
        RowHandle row=(RowHandle)getRowHandles().get(0);
        if (!(row.getContainer() instanceof GridHandle)) {
          insertMenu.add(getAction(IncludeHeaderAction.ID));
          insertMenu.add(getAction(IncludeDetailAction.ID));
          insertMenu.add(getAction(IncludeFooterAction.ID));
        }
        insertMenu.add(rowMenu);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,insertMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteRowAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof ColumnHandle) {
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,new InsertPasteColumnAction(selectedElements));
      if (getColumnHandles().size() != 0) {
        MenuManager subMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        subMenu.add(getAction(InsertColumnRightAction.ID));
        subMenu.add(getAction(InsertColumnLeftAction.ID));
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,subMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteColumnAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof CellHandle) {
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    }
 else {
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    }
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((DesignElementHandle)firstSelectedElement).getDefn().getDisplayName());
    }
  }
 else   if (firstSelectedElement instanceof SlotHandle) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((SlotHandle)firstSelectedElement).getSlotID() + ""String_Node_Str""+ ((SlotHandle)firstSelectedElement).getElementHandle().getDefn().getDisplayName());
    }
  }
 else {
  }
  if (!getTableEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getTableEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      createInsertGroupHeaderFooter(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (!getListEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getListEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (getElements().size() == 1 || isMutilSelection(multiSelection)) {
    if (firstSelectedElement instanceof DesignElementHandle) {
      String elementName=((DesignElementHandle)firstSelectedElement).getDefn().getName();
      IMenuBuilder menuBuilder=ExtensionPointManager.getInstance().getMenuBuilder(elementName);
      if (menuBuilder != null) {
        menuBuilder.buildMenu(menuManager,getElements());
      }
    }
  }
}","public void buildContextMenu(IMenuManager menuManager){
  GEFActionConstants.addStandardActionGroups(menuManager);
  Object firstSelectedElement=getFirstElement();
  Object selectedElements=getSelectedElement();
  Object multiSelection=getMultiSelectedElement();
  if (isMutilSelection(multiSelection)) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    if (isRootElementHandleClass(multiSelection)) {
      Action action=new RefreshModuleHandleAction(selectedElements);
      menuManager.add(action);
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      createThemeMenu(menuManager,GEFActionConstants.GROUP_REST);
    }
    if (isListHandleCalss(multiSelection)) {
      IAction action=getAction(CreatePlaceHolderPartAction.ID);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
    }
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"");
    }
  }
 else   if (firstSelectedElement instanceof DesignElementHandle) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (((IStructuredSelection)getSelection()).size() == 1) {
      Object element=((IStructuredSelection)getSelection()).getFirstElement();
      if (element instanceof LabelEditPart || element instanceof ImageEditPart) {
        if (element instanceof DataEditPart) {
          IAction action=getAction(ChangeDataColumnPartAction.ID);
          menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        }
        IAction action=getAction(GEFActionConstants.DIRECT_EDIT);
        action.setAccelerator(SWT.F2);
        if (element instanceof DataEditPart) {
          action.setText(Messages.getString(""String_Node_Str""));
        }
 else {
          action.setText(Messages.getString(""String_Node_Str""));
        }
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof ReportItemHandle) {
        IAction action=getAction(CreatePlaceHolderPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        action=getAction(RevertToReportItemPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        action=getAction(RevertToTemplatePartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof TemplateReportItemHandle) {
        IAction action=getAction(RevertToReportItemPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
    }
    if (firstSelectedElement instanceof RowHandle) {
      if (getRowHandles().size() != 0) {
        MenuManager insertMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        MenuManager rowMenu=new MenuManager(INSERT_ROW_MENU_ITEM_TEXT);
        rowMenu.add(getAction(InsertRowAboveAction.ID));
        rowMenu.add(getAction(InsertRowBelowAction.ID));
        RowHandle row=(RowHandle)getRowHandles().get(0);
        if (!(row.getContainer() instanceof GridHandle)) {
          insertMenu.add(getAction(IncludeHeaderAction.ID));
          insertMenu.add(getAction(IncludeDetailAction.ID));
          insertMenu.add(getAction(IncludeFooterAction.ID));
        }
        insertMenu.add(rowMenu);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,insertMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteRowAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof ColumnHandle) {
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,new InsertPasteColumnAction(selectedElements));
      if (getColumnHandles().size() != 0) {
        MenuManager subMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        subMenu.add(getAction(InsertColumnRightAction.ID));
        subMenu.add(getAction(InsertColumnLeftAction.ID));
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,subMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteColumnAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof CellHandle) {
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    }
 else {
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    }
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((DesignElementHandle)firstSelectedElement).getDefn().getDisplayName());
    }
  }
 else   if (firstSelectedElement instanceof SlotHandle) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((SlotHandle)firstSelectedElement).getSlotID() + ""String_Node_Str""+ ((SlotHandle)firstSelectedElement).getElementHandle().getDefn().getDisplayName());
    }
  }
 else {
  }
  if (!getTableEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getTableEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      createInsertGroupHeaderFooter(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (!getListEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getListEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (getElements().size() == 1 || isMutilSelection(multiSelection)) {
    if (firstSelectedElement instanceof DesignElementHandle) {
      String elementName=((DesignElementHandle)firstSelectedElement).getDefn().getName();
      IMenuBuilder menuBuilder=ExtensionPointManager.getInstance().getMenuBuilder(elementName);
      if (menuBuilder != null) {
        menuBuilder.buildMenu(menuManager,getElements());
      }
    }
  }
}",0.9917671614100184
76337,"/** 
 * Parameter data type convertion from int to string.
 * @param type String
 * @return
 */
public static final String ConvertDataType(int type){
  String dataType=DesignChoiceConstants.PARAM_TYPE_ANY;
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
    dataType=DesignChoiceConstants.PARAM_TYPE_BOOLEAN;
  break;
case IScalarParameterDefn.TYPE_DATE_TIME:
dataType=DesignChoiceConstants.PARAM_TYPE_DATETIME;
break;
case IScalarParameterDefn.TYPE_DECIMAL:
dataType=DesignChoiceConstants.PARAM_TYPE_DECIMAL;
break;
case IScalarParameterDefn.TYPE_FLOAT:
dataType=DesignChoiceConstants.PARAM_TYPE_FLOAT;
break;
case IScalarParameterDefn.TYPE_STRING:
dataType=DesignChoiceConstants.PARAM_TYPE_STRING;
break;
case IScalarParameterDefn.TYPE_INTEGER:
dataType=DesignChoiceConstants.PARAM_TYPE_INTEGER;
break;
}
return dataType;
}","/** 
 * Parameter data type convertion from int to string.
 * @param type String
 * @return
 */
public static final String ConvertDataType(int type){
  String dataType=DesignChoiceConstants.PARAM_TYPE_ANY;
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
    dataType=DesignChoiceConstants.PARAM_TYPE_BOOLEAN;
  break;
case IScalarParameterDefn.TYPE_DATE_TIME:
dataType=DesignChoiceConstants.PARAM_TYPE_DATETIME;
break;
case IScalarParameterDefn.TYPE_DECIMAL:
dataType=DesignChoiceConstants.PARAM_TYPE_DECIMAL;
break;
case IScalarParameterDefn.TYPE_FLOAT:
dataType=DesignChoiceConstants.PARAM_TYPE_FLOAT;
break;
case IScalarParameterDefn.TYPE_STRING:
dataType=DesignChoiceConstants.PARAM_TYPE_STRING;
break;
case IScalarParameterDefn.TYPE_INTEGER:
dataType=DesignChoiceConstants.PARAM_TYPE_INTEGER;
break;
case IScalarParameterDefn.TYPE_DATE:
dataType=DesignChoiceConstants.PARAM_TYPE_DATE;
break;
case IScalarParameterDefn.TYPE_TIME:
dataType=DesignChoiceConstants.PARAM_TYPE_TIME;
break;
}
return dataType;
}",0.9005405405405406
76338,"/** 
 * Try convert an object to given type Types supported: <p> <ul> <li>IScalarParameterDefn.TYPE_INTEGER</li> <li>IScalarParameterDefn.TYPE_DECIMAL</li> <li>IScalarParameterDefn.TYPE_BOOLEAN</li> <li>IScalarParameterDefn.TYPE_DATE_TIME</li> <li>IScalarParameterDefn.TYPE_FLOAT</li> <li>IScalarParameterDefn.TYPE_STRING</li> <ul> </p>
 * @param source
 * @param toType
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,int toType) throws BirtException {
  if (source == null)   return null;
  if (toType == IScalarParameterDefn.TYPE_ANY)   return source;
switch (toType) {
case IScalarParameterDefn.TYPE_INTEGER:
    return DataTypeUtil.toInteger(source);
case IScalarParameterDefn.TYPE_DECIMAL:
  return DataTypeUtil.toBigDecimal(source);
case IScalarParameterDefn.TYPE_BOOLEAN:
return DataTypeUtil.toBoolean(source);
case IScalarParameterDefn.TYPE_DATE_TIME:
return DataTypeUtil.toDate(source);
case IScalarParameterDefn.TYPE_FLOAT:
return DataTypeUtil.toDouble(source);
case IScalarParameterDefn.TYPE_STRING:
return DataTypeUtil.toString(source);
default :
throw new CoreException(""String_Node_Str"");
}
}","/** 
 * Try convert an object to given type Types supported: <p> <ul> <li>IScalarParameterDefn.TYPE_INTEGER</li> <li>IScalarParameterDefn.TYPE_DECIMAL</li> <li>IScalarParameterDefn.TYPE_BOOLEAN</li> <li>IScalarParameterDefn.TYPE_DATE_TIME</li> <li>IScalarParameterDefn.TYPE_FLOAT</li> <li>IScalarParameterDefn.TYPE_STRING</li> <li>IScalarParameterDefn.TYPE_DATE</li> <li>IScalarParameterDefn.TYPE_TIME</li> <ul> </p>
 * @param source
 * @param toType
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,int toType) throws BirtException {
  if (source == null)   return null;
  if (toType == IScalarParameterDefn.TYPE_ANY)   return source;
switch (toType) {
case IScalarParameterDefn.TYPE_INTEGER:
    return DataTypeUtil.toInteger(source);
case IScalarParameterDefn.TYPE_DECIMAL:
  return DataTypeUtil.toBigDecimal(source);
case IScalarParameterDefn.TYPE_BOOLEAN:
return DataTypeUtil.toBoolean(source);
case IScalarParameterDefn.TYPE_DATE_TIME:
return DataTypeUtil.toDate(source);
case IScalarParameterDefn.TYPE_FLOAT:
return DataTypeUtil.toDouble(source);
case IScalarParameterDefn.TYPE_STRING:
return DataTypeUtil.toString(source);
case IScalarParameterDefn.TYPE_DATE:
return DataTypeUtil.toSqlDate(source);
case IScalarParameterDefn.TYPE_TIME:
return DataTypeUtil.toSqlTime(source);
default :
throw new CoreException(""String_Node_Str"");
}
}",0.9077901430842608
76339,"public void startCell(ICellContent cell){
  leafCell=cell;
  cellFilled=false;
  push(false);
  if (isHidden()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  boolean isInTableHead=isCellInTableHead(cell);
  if (isInTableHead) {
    writer.openTag(HTMLTags.TAG_TH);
  }
 else {
    writer.openTag(HTMLTags.TAG_TD);
  }
  setStyleName(cell.getStyleClass());
  int colSpan=cell.getColSpan();
  if (colSpan > 1) {
    writer.attribute(HTMLTags.ATTR_COLSPAN,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan > 1) {
    writer.attribute(HTMLTags.ATTR_ROWSPAN,rowSpan);
  }
  StringBuffer styleBuffer=new StringBuffer();
  handleColumnRelatedStyle(cell,styleBuffer);
  handleVerticalAlign(cell,styleBuffer);
  if (isInTableHead) {
    handleCellFont(cell,styleBuffer);
  }
  handleCellStyle(cell,styleBuffer);
  writer.attribute(HTMLTags.ATTR_ALIGN,cell.getComputedStyle().getTextAlign());
  if (!startedGroups.isEmpty()) {
    Iterator iter=startedGroups.iterator();
    while (iter.hasNext()) {
      IGroupContent group=(IGroupContent)iter.next();
      outputBookmark(group);
    }
    startedGroups.clear();
  }
  if (enableMetadata) {
    metadataEmitter.startCell(cell);
  }
}","public void startCell(ICellContent cell){
  leafCell=cell;
  cellFilled=false;
  push(false);
  if (isHidden()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  boolean isInTableHead=isCellInTableHead(cell);
  if (isInTableHead) {
    writer.openTag(HTMLTags.TAG_TH);
  }
 else {
    writer.openTag(HTMLTags.TAG_TD);
  }
  setStyleName(cell.getStyleClass());
  int colSpan=cell.getColSpan();
  if (colSpan > 1) {
    writer.attribute(HTMLTags.ATTR_COLSPAN,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan > 1) {
    writer.attribute(HTMLTags.ATTR_ROWSPAN,rowSpan);
  }
  StringBuffer styleBuffer=new StringBuffer();
  handleColumnRelatedStyle(cell,styleBuffer);
  if (isInTableHead) {
    handleCellFont(cell,styleBuffer);
  }
  handleCellStyle(cell,styleBuffer);
  handleCellAlign(cell);
  if (!startedGroups.isEmpty()) {
    Iterator iter=startedGroups.iterator();
    while (iter.hasNext()) {
      IGroupContent group=(IGroupContent)iter.next();
      outputBookmark(group);
    }
    startedGroups.clear();
  }
  if (enableMetadata) {
    metadataEmitter.startCell(cell);
  }
}",0.6421780466724287
76340,"/** 
 * Gets a DataEngineContext for use to initialize data engine
 */
public DataEngineContext getDataEngineContext() throws BirtException {
  DataEngineContext context=DataEngineContext.newInstance(mode,getTopScope(),docReader,docWriter);
  if (cacheSet)   context.setCacheOption(cacheOption,cacheCount);
  return context;
}","/** 
 * Gets a DataEngineContext for use to initialize data engine
 */
public DataEngineContext getDataEngineContext() throws BirtException {
  if (this.context != null)   return this.context;
  this.context=DataEngineContext.newInstance(mode,getTopScope(),docReader,docWriter);
  if (cacheSet)   this.context.setCacheOption(cacheOption,cacheCount);
  return this.context;
}",0.88
76341,"/** 
 * @param b Description of Parameter
 * @param pos Description of Parameter
 * @param len Description of Parameter
 * @return Description of the Returned Value
 * @exception IOException Description of Exception
 */
public int read(byte[] b,int pos,int len) throws IOException {
  if (currBuf.pos + len <= currBuf.dataLen) {
    System.arraycopy(currBuf.bytes,currBuf.pos,b,pos,len);
    currBuf.pos+=len;
    return len;
  }
 else {
    syncBuffer(currBuf.filePos + currBuf.pos);
    if (currBuf.dataLen < currBuf.bytes.length) {
      int readLen=Math.min(len,currBuf.dataLen);
      System.arraycopy(currBuf.bytes,currBuf.pos,b,pos,readLen);
      currBuf.pos+=readLen;
      return readLen;
    }
 else {
      if (currBuf.dataLen >= len) {
        return read(b,pos,len);
      }
 else {
        delegate.seek(currBuf.filePos);
        int readLen=delegate.read(b,pos,len);
        if (len > currBuf.bytes.length) {
          currBuf.filePos+=len - currBuf.bytes.length;
        }
        currBuf.dataLen=Math.min(readLen,currBuf.bytes.length);
        System.arraycopy(b,pos,currBuf.bytes,0,currBuf.dataLen);
        return readLen;
      }
    }
  }
}","/** 
 * @param b Description of Parameter
 * @param pos Description of Parameter
 * @param len Description of Parameter
 * @return Description of the Returned Value
 * @exception IOException Description of Exception
 */
public int read(byte[] b,int pos,int len) throws IOException {
  if (currBuf.pos + len <= currBuf.dataLen) {
    System.arraycopy(currBuf.bytes,currBuf.pos,b,pos,len);
    currBuf.pos+=len;
    return len;
  }
 else {
    syncBuffer(currBuf.filePos + currBuf.pos);
    if (currBuf.dataLen < currBuf.bytes.length) {
      int readLen=Math.min(len,currBuf.dataLen);
      if (readLen == 0) {
        return -1;
      }
      System.arraycopy(currBuf.bytes,currBuf.pos,b,pos,readLen);
      currBuf.pos+=readLen;
      return readLen;
    }
 else {
      if (currBuf.dataLen >= len) {
        return read(b,pos,len);
      }
 else {
        delegate.seek(currBuf.filePos);
        int readLen=delegate.read(b,pos,len);
        if (len > currBuf.bytes.length) {
          currBuf.filePos+=len - currBuf.bytes.length;
        }
        currBuf.dataLen=Math.min(readLen,currBuf.bytes.length);
        System.arraycopy(b,pos,currBuf.bytes,0,currBuf.dataLen);
        return readLen;
      }
    }
  }
}",0.9777029869583508
76342,"/** 
 * Returns the TOC Children from a TOCNode
 * @param node
 * @return
 */
private static List getToCChildren(TOCNode node){
  if (node.getChildren() == null)   return null;
  List children=node.getChildren();
  List ret=new ArrayList();
  Iterator it=children.iterator();
  while (it.hasNext()) {
    TOCNode childNode=(TOCNode)it.next();
    ToC child=new ToC(childNode.getNodeID(),childNode.getDisplayString(),childNode.getBookmark());
    child.setChildren(getToCChildren(childNode));
    ret.add(child);
  }
  return ret;
}","/** 
 * Returns the TOC Children from a TOCNode
 * @param node
 * @return
 */
private static List getToCChildren(TOCNode node){
  if (node.getChildren() == null)   return null;
  List children=node.getChildren();
  List ret=new ArrayList();
  Iterator it=children.iterator();
  while (it.hasNext()) {
    TOCNode childNode=(TOCNode)it.next();
    ToC child=new ToC(childNode.getNodeID(),childNode.getDisplayString(),childNode.getBookmark(),BirtUtility.getTOCStyle(childNode));
    child.setChildren(getToCChildren(childNode));
    ret.add(child);
  }
  return ret;
}",0.968094804010939
76343,"/** 
 * Transform TOC Node
 * @param node
 * @return
 */
private static ToC transformTOCNode(TOCNode node){
  ToC toc=new ToC(node.getNodeID(),node.getDisplayString(),node.getBookmark());
  toc.setChildren(getToCChildren(node));
  return toc;
}","/** 
 * Transform TOC Node
 * @param node
 * @return
 */
private static ToC transformTOCNode(TOCNode node){
  ToC toc=new ToC(node.getNodeID(),node.getDisplayString(),node.getBookmark(),BirtUtility.getTOCStyle(node));
  toc.setChildren(getToCChildren(node));
  return toc;
}",0.942084942084942
76344,"/** 
 * Prepare response
 * @throws ReportServiceException
 * @throws RemoteException
 */
protected void prepareResponse() throws ReportServiceException, RemoteException {
  TOC toc=new TOC();
  List children=__node.getChildren();
  if (children != null && children.size() > 0) {
    TOC[] childTOCNodes=new TOC[children.size()];
    for (int i=0; i < children.size(); i++) {
      ToC child=(ToC)children.get(i);
      childTOCNodes[i]=new TOC();
      childTOCNodes[i].setId(child.getID());
      childTOCNodes[i].setDisplayName(child.getDisplayName());
      childTOCNodes[i].setBookmark(child.getBookmark());
      childTOCNodes[i].setIsLeaf(new Boolean(child.getChildren() == null || child.getChildren().size() <= 0));
    }
    toc.setChild(childTOCNodes);
  }
  Data data=new Data();
  data.setTOC(toc);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}","/** 
 * Prepare response
 * @throws ReportServiceException
 * @throws RemoteException
 */
protected void prepareResponse() throws ReportServiceException, RemoteException {
  TOC toc=new TOC();
  List children=__node.getChildren();
  if (children != null && children.size() > 0) {
    TOC[] childTOCNodes=new TOC[children.size()];
    for (int i=0; i < children.size(); i++) {
      ToC child=(ToC)children.get(i);
      childTOCNodes[i]=new TOC();
      childTOCNodes[i].setId(child.getID());
      childTOCNodes[i].setDisplayName(child.getDisplayName());
      childTOCNodes[i].setBookmark(child.getBookmark());
      childTOCNodes[i].setStyle(child.getStyle());
      childTOCNodes[i].setIsLeaf(new Boolean(child.getChildren() == null || child.getChildren().size() <= 0));
    }
    toc.setChild(childTOCNodes);
  }
  Data data=new Data();
  data.setTOC(toc);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}",0.975954738330976
76345,"public List getChildren(){
  return children;
}","/** 
 * @return the children list
 */
public List getChildren(){
  return children;
}",0.7121212121212122
76346,"public String getDisplayName(){
  return displayName;
}","/** 
 * @return the display name
 */
public String getDisplayName(){
  return displayName;
}",0.7482993197278912
76347,"public ToC(String id,String displayName,String bookmark){
  this.id=id;
  this.displayName=displayName;
  this.bookmark=bookmark;
}","/** 
 * Constructor
 * @param id
 * @param displayName
 * @param bookmark
 * @param style
 */
public ToC(String id,String displayName,String bookmark,String style){
  this.id=id;
  this.displayName=displayName;
  this.bookmark=bookmark;
  this.style=style;
}",0.6735218508997429
76348,"public String getID(){
  return id;
}","/** 
 * @return the id
 */
public String getID(){
  return id;
}",0.7326732673267327
76349,"public void setChildren(List children){
  this.children=children;
}","/** 
 * Set children list
 * @param children
 */
public void setChildren(List children){
  this.children=children;
}",0.73224043715847
76350,"public String getBookmark(){
  return bookmark;
}","/** 
 * @return the bookmark
 */
public String getBookmark(){
  return bookmark;
}",0.7480916030534351
76351,"public TOC(java.lang.String id,java.lang.String displayName,java.lang.String bookmark,java.lang.Boolean isLeaf,org.eclipse.birt.report.soapengine.api.TOC[] child){
  this.id=id;
  this.displayName=displayName;
  this.bookmark=bookmark;
  this.isLeaf=isLeaf;
  this.child=child;
}","public TOC(java.lang.String id,java.lang.String displayName,java.lang.String bookmark,java.lang.String style,java.lang.Boolean isLeaf,org.eclipse.birt.report.soapengine.api.TOC[] child){
  this.id=id;
  this.displayName=displayName;
  this.bookmark=bookmark;
  this.style=style;
  this.isLeaf=isLeaf;
  this.child=child;
}",0.9284525790349416
76352,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  if (getId() != null) {
    _hashCode+=getId().hashCode();
  }
  if (getDisplayName() != null) {
    _hashCode+=getDisplayName().hashCode();
  }
  if (getBookmark() != null) {
    _hashCode+=getBookmark().hashCode();
  }
  if (getIsLeaf() != null) {
    _hashCode+=getIsLeaf().hashCode();
  }
  if (getChild() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getChild()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getChild(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  if (getId() != null) {
    _hashCode+=getId().hashCode();
  }
  if (getDisplayName() != null) {
    _hashCode+=getDisplayName().hashCode();
  }
  if (getBookmark() != null) {
    _hashCode+=getBookmark().hashCode();
  }
  if (getStyle() != null) {
    _hashCode+=getStyle().hashCode();
  }
  if (getIsLeaf() != null) {
    _hashCode+=getIsLeaf().hashCode();
  }
  if (getChild() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getChild()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getChild(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  __hashCodeCalc=false;
  return _hashCode;
}",0.9548387096774194
76353,"public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof TOC))   return false;
  TOC other=(TOC)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && ((this.id == null && other.getId() == null) || (this.id != null && this.id.equals(other.getId()))) && ((this.displayName == null && other.getDisplayName() == null) || (this.displayName != null && this.displayName.equals(other.getDisplayName())))&& ((this.bookmark == null && other.getBookmark() == null) || (this.bookmark != null && this.bookmark.equals(other.getBookmark())))&& ((this.isLeaf == null && other.getIsLeaf() == null) || (this.isLeaf != null && this.isLeaf.equals(other.getIsLeaf())))&& ((this.child == null && other.getChild() == null) || (this.child != null && java.util.Arrays.equals(this.child,other.getChild())));
  __equalsCalc=null;
  return _equals;
}","public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof TOC))   return false;
  TOC other=(TOC)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && ((this.id == null && other.getId() == null) || (this.id != null && this.id.equals(other.getId()))) && ((this.displayName == null && other.getDisplayName() == null) || (this.displayName != null && this.displayName.equals(other.getDisplayName())))&& ((this.bookmark == null && other.getBookmark() == null) || (this.bookmark != null && this.bookmark.equals(other.getBookmark())))&& ((this.style == null && other.getStyle() == null) || (this.style != null && this.style.equals(other.getStyle())))&& ((this.isLeaf == null && other.getIsLeaf() == null) || (this.isLeaf != null && this.isLeaf.equals(other.getIsLeaf())))&& ((this.child == null && other.getChild() == null) || (this.child != null && java.util.Arrays.equals(this.child,other.getChild())));
  __equalsCalc=null;
  return _equals;
}",0.8312678741658722
76354,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable report=executionContext.getRunnable();
    writer.saveDesign(report);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      ReportExecutor executor=new ReportExecutor(executionContext,report.getReportIR(),emitter);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    documentBuilder=null;
    closeReportDocument();
    closeFactory();
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable report=executionContext.getRunnable();
    writer.saveDesign(report);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      ReportExecutor executor=new ReportExecutor(executionContext,report.getReportIR(),emitter);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    documentBuilder=null;
    closeReportDocument();
    closeFactory();
  }
}",0.9930743751881964
76355,"/** 
 * upgrade the archive file to the latest version
 * @throws IOException
 */
private void upgradeArchiveV1() throws IOException {
  ArchiveFileV1 reader=new ArchiveFileV1(archiveName);
  try {
    File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempFile.deleteOnExit();
    ArchiveFile writer=new ArchiveFile(tempFile.getAbsolutePath(),""String_Node_Str"");
    List streams=reader.listEntries(""String_Node_Str"");
    Iterator iter=streams.iterator();
    while (iter.hasNext()) {
      String name=(String)iter.next();
      ArchiveEntry src=reader.getEntry(name);
      ArchiveEntry tgt=writer.createEntry(name);
      copyEntry(src,tgt);
    }
    reader.close();
    writer.saveAs(archiveName);
    writer.close();
  }
  finally {
    reader.close();
  }
}","/** 
 * upgrade the archive file to the latest version
 * @throws IOException
 */
private void upgradeArchiveV1() throws IOException {
  ArchiveFileV1 reader=new ArchiveFileV1(archiveName);
  try {
    File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempFile.deleteOnExit();
    ArchiveFile writer=new ArchiveFile(tempFile.getAbsolutePath(),""String_Node_Str"");
    List streams=reader.listEntries(""String_Node_Str"");
    Iterator iter=streams.iterator();
    while (iter.hasNext()) {
      String name=(String)iter.next();
      ArchiveEntry src=reader.getEntry(name);
      ArchiveEntry tgt=writer.createEntry(name);
      copyEntry(src,tgt);
    }
    writer.saveAs(archiveName);
    writer.close();
  }
  finally {
    reader.close();
  }
}",0.9871959026888604
76356,"protected void openArchiveForAppending() throws IOException {
  RandomAccessFile rf=new RandomAccessFile(archiveName,""String_Node_Str"");
  if (rf.length() == 0) {
    af=new ArchiveFileV2(archiveName,rf,""String_Node_Str"");
  }
 else {
    try {
      long magicTag=rf.readLong();
      if (magicTag == ArchiveFileV2.DOCUMENT_TAG) {
        af=new ArchiveFileV2(archiveName,""String_Node_Str"");
        return;
      }
      rf.close();
      upgradeArchiveV1();
      af=new ArchiveFileV2(archiveName,rf,""String_Node_Str"");
      return;
    }
 catch (    IOException ex) {
      rf.close();
      throw ex;
    }
  }
}","protected void openArchiveForAppending() throws IOException {
  RandomAccessFile rf=new RandomAccessFile(archiveName,""String_Node_Str"");
  if (rf.length() == 0) {
    af=new ArchiveFileV2(archiveName,rf,""String_Node_Str"");
  }
 else {
    try {
      long magicTag=rf.readLong();
      if (magicTag == ArchiveFileV2.DOCUMENT_TAG) {
        af=new ArchiveFileV2(archiveName,rf,""String_Node_Str"");
        return;
      }
      rf.close();
      upgradeArchiveV1();
      af=new ArchiveFileV2(archiveName,""String_Node_Str"");
      return;
    }
 catch (    IOException ex) {
      rf.close();
      throw ex;
    }
  }
}",0.9951456310679612
76357,"public int getUsedCache(){
  if (af != null) {
    return af.getUsedCache();
  }
  return 0;
}","public int getUsedCache(){
  if (af == null) {
    return 0;
  }
  return af.getUsedCache();
}",0.8191489361702128
76358,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.getDefaultValue() == null)       continue;
      dteDataSet.addParameter(new ParameterAdapter(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9175747415479184
76359,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.getDefaultValue() == null)       continue;
      dteDataSet.addParameter(newParam(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(newParam(modelParam));
          paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}",0.9275929549902152
76360,"protected void createFieldEditors(){
  super.createFieldEditors();
  name=new EditableComboFieldEditor(StyleHandle.FONT_FAMILY_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_FAMILY_PROP).getDefn().getDisplayNameID()),getFontChoiceArray(),getFieldEditorParent()){
    protected void setPropValue(    String newValue){
      if (UIUtil.needAddQuote(ReportDesignConstants.STYLE_ELEMENT,StyleHandle.FONT_FAMILY_PROP,newValue)) {
        super.setPropValue(DEUtil.AddQuote(newValue));
      }
 else {
        super.setPropValue(newValue);
      }
    }
    protected void updateComboForValue(    String value){
      super.updateComboForValue(DEUtil.RemoveQuote(value));
    }
  }
;
  color=new ColorFieldEditor(StyleHandle.COLOR_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.COLOR_PROP).getDefn().getDisplayNameID()),getFieldEditorParent());
  size=new ComboBoxMeasureFieldEditor(StyleHandle.FONT_SIZE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_SIZE_PROP).getDefn().getDisplayNameID()),getChoiceArray(DesignChoiceConstants.CHOICE_FONT_SIZE),getChoiceArray(DesignChoiceConstants.CHOICE_UNITS),getFieldEditorParent());
  size.setDefaultUnit(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_SIZE_PROP).getDefaultUnit());
  style=new ComboBoxFieldEditor(StyleHandle.FONT_STYLE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_STYLE_PROP).getDefn().getDisplayNameID()),getChoiceArray(DesignChoiceConstants.CHOICE_FONT_STYLE),getFieldEditorParent());
  weight=new ComboBoxFieldEditor(StyleHandle.FONT_WEIGHT_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_WEIGHT_PROP).getDefn().getDisplayNameID()),getChoiceArray(DesignChoiceConstants.CHOICE_FONT_WEIGHT),getFieldEditorParent());
  docoration=new DecorationFieldEditor(StyleHandle.TEXT_UNDERLINE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.TEXT_UNDERLINE_PROP).getDefn().getDisplayNameID()),StyleHandle.TEXT_OVERLINE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.TEXT_OVERLINE_PROP).getDefn().getDisplayNameID()),StyleHandle.TEXT_LINE_THROUGH_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.TEXT_LINE_THROUGH_PROP).getDefn().getDisplayNameID()),Messages.getString(""String_Node_Str""),getFieldEditorParent());
  addField(name);
  addField(color);
  addField(size);
  addField(style);
  addField(weight);
  addField(docoration);
  addField(new SeparatorFieldEditor(getFieldEditorParent(),false));
  Group group=new Group(getFieldEditorParent(),SWT.SHADOW_OUT);
  group.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.widthHint=400;
  gd.heightHint=100;
  gd.horizontalSpan=4;
  group.setLayoutData(gd);
  group.setLayout(new GridLayout());
  sample=new PreviewLabel(group,SWT.NONE);
  sample.setText(Messages.getString(""String_Node_Str""));
  sample.setLayoutData(new GridData(GridData.FILL_BOTH));
  UIUtil.bindHelp(getFieldEditorParent().getParent(),IHelpContextIds.STYLE_BUILDER_FONT_ID);
}","protected void createFieldEditors(){
  super.createFieldEditors();
  name=new EditableComboFieldEditor(StyleHandle.FONT_FAMILY_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_FAMILY_PROP).getDefn().getDisplayNameID()),getFontChoiceArray(),getFieldEditorParent()){
    protected void setPropValue(    String newValue){
      super.setPropValue(newValue);
    }
    protected void updateComboForValue(    String value){
      super.updateComboForValue(DEUtil.RemoveQuote(value));
    }
  }
;
  color=new ColorFieldEditor(StyleHandle.COLOR_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.COLOR_PROP).getDefn().getDisplayNameID()),getFieldEditorParent());
  size=new ComboBoxMeasureFieldEditor(StyleHandle.FONT_SIZE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_SIZE_PROP).getDefn().getDisplayNameID()),getChoiceArray(DesignChoiceConstants.CHOICE_FONT_SIZE),getChoiceArray(DesignChoiceConstants.CHOICE_UNITS),getFieldEditorParent());
  size.setDefaultUnit(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_SIZE_PROP).getDefaultUnit());
  style=new ComboBoxFieldEditor(StyleHandle.FONT_STYLE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_STYLE_PROP).getDefn().getDisplayNameID()),getChoiceArray(DesignChoiceConstants.CHOICE_FONT_STYLE),getFieldEditorParent());
  weight=new ComboBoxFieldEditor(StyleHandle.FONT_WEIGHT_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.FONT_WEIGHT_PROP).getDefn().getDisplayNameID()),getChoiceArray(DesignChoiceConstants.CHOICE_FONT_WEIGHT),getFieldEditorParent());
  docoration=new DecorationFieldEditor(StyleHandle.TEXT_UNDERLINE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.TEXT_UNDERLINE_PROP).getDefn().getDisplayNameID()),StyleHandle.TEXT_OVERLINE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.TEXT_OVERLINE_PROP).getDefn().getDisplayNameID()),StyleHandle.TEXT_LINE_THROUGH_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.TEXT_LINE_THROUGH_PROP).getDefn().getDisplayNameID()),Messages.getString(""String_Node_Str""),getFieldEditorParent());
  addField(name);
  addField(color);
  addField(size);
  addField(style);
  addField(weight);
  addField(docoration);
  addField(new SeparatorFieldEditor(getFieldEditorParent(),false));
  Group group=new Group(getFieldEditorParent(),SWT.SHADOW_OUT);
  group.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.widthHint=400;
  gd.heightHint=100;
  gd.horizontalSpan=4;
  group.setLayoutData(gd);
  group.setLayout(new GridLayout());
  sample=new PreviewLabel(group,SWT.NONE);
  sample.setText(Messages.getString(""String_Node_Str""));
  sample.setLayoutData(new GridData(GridData.FILL_BOTH));
  UIUtil.bindHelp(getFieldEditorParent().getParent(),IHelpContextIds.STYLE_BUILDER_FONT_ID);
}",0.963120799868874
76361,"protected void setPropValue(String newValue){
  if (UIUtil.needAddQuote(ReportDesignConstants.STYLE_ELEMENT,StyleHandle.FONT_FAMILY_PROP,newValue)) {
    super.setPropValue(DEUtil.AddQuote(newValue));
  }
 else {
    super.setPropValue(newValue);
  }
}","protected void setPropValue(String newValue){
  super.setPropValue(newValue);
}",0.4773413897280967
76362,"private double[] computeVerticalByLeftRightValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dW, dMaxW=0, dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dHorizontalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dW=bb.getWidth();
      double dFHeight=bb.getHeight();
      double dExtraHeight=0;
      String extraText=null;
      double dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
      double[] newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
      if (newMetrics != null) {
        dW=newMetrics[0];
        dFHeight=newMetrics[1];
      }
      dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dW=Math.max(dW,itm.getFullWidth());
          dExtraHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dDeltaHeight+=itm.getFullHeight() + 2 * legendData.dScale;
        }
      }
      if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
        dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
        if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
          dMaxW=-legendData.dHorizonalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraWidth+=dColumnWidth;
          dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeight=newMetrics[1];
            dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
          }
          dMaxW=dW;
          dRealHeight=Math.max(dRealHeight,dHeight);
          dHeight=dDeltaHeight;
        }
      }
 else {
        dMaxW=Math.max(dW,dMaxW);
        dHeight+=dDeltaHeight;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dW,dFHeight,la.getCaption().getValue(),dExtraHeight,extraText));
    }
    dRealHeight=Math.max(dRealHeight,dHeight);
    dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
    if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie) {
        dExtraWidth+=dMaxW + legendData.dHorizonalReservedSpace;
        if (j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
          dExtraWidth+=dSeparatorThickness;
          legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dExtraWidth - dSeparatorThickness / 2,0),0,dRealHeight,null,0,null));
        }
      }
    }
    columnList.clear();
    dMaxW=0;
    dHeight=0;
  }
  dWidth+=dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}","private double[] computeVerticalByLeftRightValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dW, dMaxW=0, dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dHorizontalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dW=bb.getWidth();
      double dFHeight=bb.getHeight();
      double dExtraHeight=0;
      String extraText=null;
      double dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
      double[] newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
      if (newMetrics != null) {
        dW=newMetrics[0];
        dFHeight=newMetrics[1];
      }
      dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (!isValidValue(obj) && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dW=Math.max(dW,itm.getFullWidth());
          dExtraHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dDeltaHeight+=itm.getFullHeight() + 2 * legendData.dScale;
        }
      }
      if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
        dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
        if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
          dMaxW=-legendData.dHorizonalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraWidth+=dColumnWidth;
          dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeight=newMetrics[1];
            dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
          }
          dMaxW=dW;
          dRealHeight=Math.max(dRealHeight,dHeight);
          dHeight=dDeltaHeight;
        }
      }
 else {
        dMaxW=Math.max(dW,dMaxW);
        dHeight+=dDeltaHeight;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dW,dFHeight,la.getCaption().getValue(),dExtraHeight,extraText));
    }
    dRealHeight=Math.max(dRealHeight,dHeight);
    dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
    if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie) {
        dExtraWidth+=dMaxW + legendData.dHorizonalReservedSpace;
        if (j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
          dExtraWidth+=dSeparatorThickness;
          legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dExtraWidth - dSeparatorThickness / 2,0),0,dRealHeight,null,0,null));
        }
      }
    }
    columnList.clear();
    dMaxW=0;
    dHeight=0;
  }
  dWidth+=dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}",0.9977992536599368
76363,"private double[] computeHorizalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dRowHeight;
  double dRealWidth=0, dExtraHeight=0;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    while (obj == null && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dRowHeight=dHeight + legendData.dVerticalReservedSpace;
  if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    dHeight=-legendData.dVerticalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dHeight+=dExtraHeight + legendData.dVerticalReservedSpace;
  dWidth=Math.max(dWidth,dRealWidth);
  return new double[]{dWidth,dHeight};
}","private double[] computeHorizalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dRowHeight;
  double dRealWidth=0, dExtraHeight=0;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    while (!isValidValue(obj) && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dRowHeight=dHeight + legendData.dVerticalReservedSpace;
  if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    dHeight=-legendData.dVerticalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dHeight+=dExtraHeight + legendData.dVerticalReservedSpace;
  dWidth=Math.max(dWidth,dRealWidth);
  return new double[]{dWidth,dHeight};
}",0.9977788507967166
76364,"private double[] computeHorizalByTopBottomValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dH, dMaxH=0, dRowHeight;
  double dRealWidth=0, dExtraHeight=0, dDeltaWidth;
  ArrayList columnList=new ArrayList();
  legendData.dSeparatorThickness+=legendData.dVerticalSpacing;
  for (int j=0; j < seda.length; j++) {
    dWidth=0;
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dH=bb.getHeight();
      double dFHeight=dH;
      double dFWidth=bb.getWidth();
      double dEHeight=0;
      String extraText=null;
      dDeltaWidth=legendData.insCa.getLeft() + (3 * legendData.dItemHeight) / 2 + dFWidth + legendData.insCa.getRight() + legendData.dHorizontalSpacing;
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dEHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dH+=dEHeight + 2 * legendData.dScale;
          dDeltaWidth=Math.max(dDeltaWidth,itm.getFullWidth());
        }
      }
      if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
        dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
        if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          dMaxH=-legendData.dVerticalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraHeight+=dRowHeight;
          dMaxH=dH;
          dRealWidth=Math.max(dRealWidth,dWidth);
          dWidth=dDeltaWidth;
        }
      }
 else {
        dMaxH=Math.max(dH,dMaxH);
        dWidth+=dDeltaWidth;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dEHeight,extraText));
    }
    dRealWidth=Math.max(dRealWidth,dWidth);
    dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
    if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie) {
        dExtraHeight+=dRowHeight;
        if (j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
          dHeight+=legendData.dSeparatorThickness;
          legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(0,dExtraHeight - legendData.dSeparatorThickness / 2),dRealWidth,0,null,0,null));
        }
      }
    }
    columnList.clear();
    dMaxH=0;
    dWidth=0;
  }
  dHeight+=dExtraHeight;
  dWidth=Math.max(dRealWidth,dWidth);
  return new double[]{dWidth,dHeight};
}","private double[] computeHorizalByTopBottomValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dH, dMaxH=0, dRowHeight;
  double dRealWidth=0, dExtraHeight=0, dDeltaWidth;
  ArrayList columnList=new ArrayList();
  legendData.dSeparatorThickness+=legendData.dVerticalSpacing;
  for (int j=0; j < seda.length; j++) {
    dWidth=0;
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dH=bb.getHeight();
      double dFHeight=dH;
      double dFWidth=bb.getWidth();
      double dEHeight=0;
      String extraText=null;
      dDeltaWidth=legendData.insCa.getLeft() + (3 * legendData.dItemHeight) / 2 + dFWidth + legendData.insCa.getRight() + legendData.dHorizontalSpacing;
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (!isValidValue(obj) && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dEHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dH+=dEHeight + 2 * legendData.dScale;
          dDeltaWidth=Math.max(dDeltaWidth,itm.getFullWidth());
        }
      }
      if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
        dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
        if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          dMaxH=-legendData.dVerticalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraHeight+=dRowHeight;
          dMaxH=dH;
          dRealWidth=Math.max(dRealWidth,dWidth);
          dWidth=dDeltaWidth;
        }
      }
 else {
        dMaxH=Math.max(dH,dMaxH);
        dWidth+=dDeltaWidth;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dEHeight,extraText));
    }
    dRealWidth=Math.max(dRealWidth,dWidth);
    dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
    if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie) {
        dExtraHeight+=dRowHeight;
        if (j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
          dHeight+=legendData.dSeparatorThickness;
          legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(0,dExtraHeight - legendData.dSeparatorThickness / 2),dRealWidth,0,null,0,null));
        }
      }
    }
    columnList.clear();
    dMaxH=0;
    dWidth=0;
  }
  dHeight+=dExtraHeight;
  dWidth=Math.max(dRealWidth,dWidth);
  return new double[]{dWidth,dHeight};
}",0.9973961281557796
76365,"private double[] computeVerticalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    while (obj == null && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
    double[] newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
    if (newMetrics != null) {
      dFWidth=newMetrics[0];
      dFHeight=newMetrics[1];
    }
    dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
    if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
      dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
      if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        dWidth=-legendData.dHorizonalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraWidth+=dColumnWidth;
        dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
        newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
        if (newMetrics != null) {
          dFWidth=newMetrics[0];
          dFHeight=newMetrics[1];
          dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
        }
        dWidth=dFWidth;
        dRealHeight=Math.max(dRealHeight,dHeight);
        dHeight=dDeltaHeight;
      }
    }
 else {
      dWidth=Math.max(dFWidth,dWidth);
      dHeight+=dDeltaHeight;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
    double[] newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
    if (newMetrics != null) {
      dFWidth=newMetrics[0];
      dFHeight=newMetrics[1];
    }
    dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
    if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
      dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
      if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        dWidth=-legendData.dHorizonalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraWidth+=dColumnWidth;
        dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
        newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
        if (newMetrics != null) {
          dFWidth=newMetrics[0];
          dFHeight=newMetrics[1];
          dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
        }
        dWidth=dFWidth;
        dRealHeight=Math.max(dRealHeight,dHeight);
        dHeight=dDeltaHeight;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dWidth=Math.max(dFWidth,dWidth);
      dHeight+=dDeltaHeight;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
  if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
    dWidth=-legendData.dHorizonalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dWidth+=legendData.dHorizonalReservedSpace + dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}","private double[] computeVerticalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    while (!isValidValue(obj) && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
    double[] newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
    if (newMetrics != null) {
      dFWidth=newMetrics[0];
      dFHeight=newMetrics[1];
    }
    dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
    if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
      dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
      if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        dWidth=-legendData.dHorizonalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraWidth+=dColumnWidth;
        dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
        newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
        if (newMetrics != null) {
          dFWidth=newMetrics[0];
          dFHeight=newMetrics[1];
          dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
        }
        dWidth=dFWidth;
        dRealHeight=Math.max(dRealHeight,dHeight);
        dHeight=dDeltaHeight;
      }
    }
 else {
      dWidth=Math.max(dFWidth,dWidth);
      dHeight+=dDeltaHeight;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
    double[] newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
    if (newMetrics != null) {
      dFWidth=newMetrics[0];
      dFHeight=newMetrics[1];
    }
    dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
    if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
      dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
      if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        dWidth=-legendData.dHorizonalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraWidth+=dColumnWidth;
        dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
        newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
        if (newMetrics != null) {
          dFWidth=newMetrics[0];
          dFHeight=newMetrics[1];
          dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
        }
        dWidth=dFWidth;
        dRealHeight=Math.max(dRealHeight,dHeight);
        dHeight=dDeltaHeight;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dWidth=Math.max(dFWidth,dWidth);
      dHeight+=dDeltaHeight;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
  if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
    dWidth=-legendData.dHorizonalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dWidth+=legendData.dHorizonalReservedSpace + dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}",0.9982478860364136
76366,"private double[] computeVerticalByTopBottomValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dW, dMaxW=0, dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dVerticalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dW=bb.getWidth();
      double dFHeight=bb.getHeight();
      double dExtraHeight=0;
      String extraText=null;
      double dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
      double[] newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
      if (newMetrics != null) {
        dW=newMetrics[0];
        dFHeight=newMetrics[1];
      }
      dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          BoundingBox bbV=null;
          try {
            bbV=Methods.computeBox(xs,IConstants.ABOVE,seLabel,0,0);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
          double dWV=bbV.getWidth();
          double dFHeightV=bbV.getHeight();
          double dExceedingSpaceV=dExtraWidth + dWV + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpaceV,dWV,xs,itm,seLabel,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeightV=newMetrics[1];
          }
          dW=Math.max(dW,itm.getFullWidth());
          dExtraHeight=Math.max(itm.getFullHeight(),dFHeightV);
          extraText=seLabel.getCaption().getValue();
          dDeltaHeight+=dExtraHeight + 2 * legendData.dScale;
        }
      }
      if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
        dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
        if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
          dMaxW=-legendData.dHorizonalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraWidth+=dColumnWidth;
          dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeight=newMetrics[1];
            dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
          }
          dMaxW=dW;
          dRealHeight=Math.max(dRealHeight,dHeight);
          dHeight=dDeltaHeight;
        }
      }
 else {
        dMaxW=Math.max(dW,dMaxW);
        dHeight+=dDeltaHeight;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dW,dFHeight,la.getCaption().getValue(),dExtraHeight,extraText));
    }
    dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
    if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
      dMaxW=-legendData.dHorizonalReservedSpace;
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie && j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
        dHeight+=dSeparatorThickness;
        legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dExtraWidth,dHeight - dSeparatorThickness / 2),dMaxW + legendData.insCa.getLeft() + legendData.insCa.getRight()+ (3 * legendData.dItemHeight) / 2,0,null,0,null));
      }
    }
    columnList.clear();
  }
  dWidth=dMaxW + legendData.dHorizonalReservedSpace + dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}","private double[] computeVerticalByTopBottomValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dW, dMaxW=0, dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dVerticalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dW=bb.getWidth();
      double dFHeight=bb.getHeight();
      double dExtraHeight=0;
      String extraText=null;
      double dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
      double[] newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
      if (newMetrics != null) {
        dW=newMetrics[0];
        dFHeight=newMetrics[1];
      }
      dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (!isValidValue(obj) && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          BoundingBox bbV=null;
          try {
            bbV=Methods.computeBox(xs,IConstants.ABOVE,seLabel,0,0);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
          double dWV=bbV.getWidth();
          double dFHeightV=bbV.getHeight();
          double dExceedingSpaceV=dExtraWidth + dWV + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpaceV,dWV,xs,itm,seLabel,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeightV=newMetrics[1];
          }
          dW=Math.max(dW,itm.getFullWidth());
          dExtraHeight=Math.max(itm.getFullHeight(),dFHeightV);
          extraText=seLabel.getCaption().getValue();
          dDeltaHeight+=dExtraHeight + 2 * legendData.dScale;
        }
      }
      if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
        dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
        if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
          dMaxW=-legendData.dHorizonalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraWidth+=dColumnWidth;
          dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeight=newMetrics[1];
            dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
          }
          dMaxW=dW;
          dRealHeight=Math.max(dRealHeight,dHeight);
          dHeight=dDeltaHeight;
        }
      }
 else {
        dMaxW=Math.max(dW,dMaxW);
        dHeight+=dDeltaHeight;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dW,dFHeight,la.getCaption().getValue(),dExtraHeight,extraText));
    }
    dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
    if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
      dMaxW=-legendData.dHorizonalReservedSpace;
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie && j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
        dHeight+=dSeparatorThickness;
        legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dExtraWidth,dHeight - dSeparatorThickness / 2),dMaxW + legendData.insCa.getLeft() + legendData.insCa.getRight()+ (3 * legendData.dItemHeight) / 2,0,null,0,null));
      }
    }
    columnList.clear();
  }
  dWidth=dMaxW + legendData.dHorizonalReservedSpace + dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}",0.9980850886687204
76367,"private double[] computeHorizalByLeftRightValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dMaxH=0, dRowHeight;
  double dRealWidth=0, dExtraHeight=0, dDeltaWidth;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dHorizontalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      double dH=bb.getHeight();
      double dFHeight=dH;
      double dFWidth=bb.getWidth();
      double dEHeight=0;
      String extraText=null;
      dDeltaWidth=legendData.insCa.getLeft() + (3 * legendData.dItemHeight) / 2 + dFWidth + legendData.insCa.getRight() + legendData.dHorizontalSpacing;
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dEHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dH+=dEHeight + 2 * legendData.dScale;
          dDeltaWidth=Math.max(dDeltaWidth,itm.getFullWidth());
        }
      }
      if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
        dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
        if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          dMaxH=-legendData.dVerticalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraHeight+=dRowHeight;
          dMaxH=dH;
          dRealWidth=Math.max(dRealWidth,dWidth);
          dWidth=dDeltaWidth;
        }
      }
 else {
        dMaxH=Math.max(dH,dMaxH);
        dWidth+=dDeltaWidth;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dEHeight,extraText));
    }
    dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
    if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
      dMaxH=-legendData.dVerticalReservedSpace;
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie && j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
        dWidth+=dSeparatorThickness;
        legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dWidth - dSeparatorThickness / 2,dExtraHeight),0,dMaxH + legendData.insCa.getTop() + legendData.insCa.getBottom(),null,0,null));
      }
    }
    columnList.clear();
  }
  dHeight+=legendData.dVerticalReservedSpace + dMaxH + dExtraHeight;
  dWidth=Math.max(dRealWidth,dWidth);
  return new double[]{dWidth,dHeight};
}","private double[] computeHorizalByLeftRightValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dMaxH=0, dRowHeight;
  double dRealWidth=0, dExtraHeight=0, dDeltaWidth;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dHorizontalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      double dH=bb.getHeight();
      double dFHeight=dH;
      double dFWidth=bb.getWidth();
      double dEHeight=0;
      String extraText=null;
      dDeltaWidth=legendData.insCa.getLeft() + (3 * legendData.dItemHeight) / 2 + dFWidth + legendData.insCa.getRight() + legendData.dHorizontalSpacing;
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (!isValidValue(obj) && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dEHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dH+=dEHeight + 2 * legendData.dScale;
          dDeltaWidth=Math.max(dDeltaWidth,itm.getFullWidth());
        }
      }
      if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
        dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
        if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          dMaxH=-legendData.dVerticalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraHeight+=dRowHeight;
          dMaxH=dH;
          dRealWidth=Math.max(dRealWidth,dWidth);
          dWidth=dDeltaWidth;
        }
      }
 else {
        dMaxH=Math.max(dH,dMaxH);
        dWidth+=dDeltaWidth;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dEHeight,extraText));
    }
    dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
    if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
      dMaxH=-legendData.dVerticalReservedSpace;
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie && j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
        dWidth+=dSeparatorThickness;
        legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dWidth - dSeparatorThickness / 2,dExtraHeight),0,dMaxH + legendData.insCa.getTop() + legendData.insCa.getBottom(),null,0,null));
      }
    }
    columnList.clear();
  }
  dHeight+=legendData.dVerticalReservedSpace + dMaxH + dExtraHeight;
  dWidth=Math.max(dRealWidth,dWidth);
  return new double[]{dWidth,dHeight};
}",0.997405527354766
76368,"/** 
 * Constructors.
 * @param item
 */
public MultiRowItem(ExtendedItemHandle item){
  IReportItem iitem=(IReportItem)ScriptElementFactory.getInstance().getElement(item);
  this.item=iitem;
}","/** 
 * Constructors.
 * @param item
 */
public MultiRowItem(ExtendedItemHandle item){
  this.item=SimpleElementFactory.getInstance().wrapExtensionElement(item);
}",0.8033707865168539
76369,"/** 
 * Initializes the meta-data system and loads all extensions which implements the extension pointers the model defines. The application must call this method once (and only once) before opening or creating a design. It is the application's responsibility because the application will choose the location to store the definition file, and that location may differ for different applications.
 * @param is stream for reading the ""rom.def"" file that provides the meta-data for the system
 * @throws MetaDataReaderException if error occurs during read the meta-data file.
 */
private static void initialize(InputStream is) throws MetaDataReaderException {
  try {
    MetaDataReader.read(is);
    ExtensionManager.initialize();
    ScriptElementFactory.setInstance(new org.eclipse.birt.report.model.api.impl.SimpleElementFactory());
  }
 catch (  MetaDataParserException e) {
    throw new MetaDataReaderException(MetaDataReaderException.DESIGN_EXCEPTION_META_DATA_ERROR,e);
  }
}","/** 
 * Initializes the meta-data system and loads all extensions which implements the extension pointers the model defines. The application must call this method once (and only once) before opening or creating a design. It is the application's responsibility because the application will choose the location to store the definition file, and that location may differ for different applications.
 * @param is stream for reading the ""rom.def"" file that provides the meta-data for the system
 * @throws MetaDataReaderException if error occurs during read the meta-data file.
 */
private static void initialize(InputStream is) throws MetaDataReaderException {
  try {
    MetaDataReader.read(is);
    ExtensionManager.initialize();
    SimpleElementFactory.setInstance(new org.eclipse.birt.report.model.api.impl.SimpleElementFactory());
  }
 catch (  MetaDataParserException e) {
    throw new MetaDataReaderException(MetaDataReaderException.DESIGN_EXCEPTION_META_DATA_ERROR,e);
  }
}",0.9949031600407748
76370,"public static IDesignElement getElement(DesignElementHandle element){
  if (element == null)   return null;
  if (element instanceof ReportDesignHandle)   return new ReportDesign((ReportDesignHandle)element);
  if (!(element instanceof ReportElementHandle))   return null;
  if (element instanceof DataItemHandle)   return new DataItem((DataItemHandle)element);
  if (element instanceof GridHandle)   return new Grid((GridHandle)element);
  if (element instanceof ImageHandle)   return new Image((ImageHandle)element);
  if (element instanceof LabelHandle)   return new Label((LabelHandle)element);
  if (element instanceof ListHandle)   return new List((ListHandle)element);
  if (element instanceof TableHandle)   return new Table((TableHandle)element);
  if (element instanceof TextDataHandle)   return new DynamicText((TextDataHandle)element);
  if (element instanceof TextItemHandle)   return new TextItem((TextItemHandle)element);
  return new ReportElement((ReportElementHandle)element);
}","public static IDesignElement getElement(DesignElementHandle element){
  if (element == null)   return null;
  if (element instanceof ReportDesignHandle)   return new ReportDesign((ReportDesignHandle)element);
  if (!(element instanceof ReportElementHandle))   return null;
  if (element instanceof DataItemHandle)   return new DataItem((DataItemHandle)element);
  if (element instanceof GridHandle)   return new Grid((GridHandle)element);
  if (element instanceof ImageHandle)   return new Image((ImageHandle)element);
  if (element instanceof LabelHandle)   return new Label((LabelHandle)element);
  if (element instanceof ListHandle)   return new List((ListHandle)element);
  if (element instanceof TableHandle)   return new Table((TableHandle)element);
  if (element instanceof TextDataHandle)   return new DynamicText((TextDataHandle)element);
  if (element instanceof TextItemHandle)   return new TextItem((TextItemHandle)element);
  if (element instanceof ExtendedItemHandle) {
    org.eclipse.birt.report.model.api.simpleapi.IReportItem item=null;
    try {
      IReportItem extensionItem=((ExtendedItemHandle)element).getReportItem();
      if (extensionItem != null)       item=extensionItem.getSimpleElement();
    }
 catch (    ExtendedElementException e) {
    }
    if (item == null)     item=new ExtendedItem((ExtendedItemHandle)element);
    return item;
  }
  return new ReportElement((ReportElementHandle)element);
}",0.8139917695473251
76371,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#extractResultSet(java.lang.String,java.lang.String,java.util.Collection,java.util.Set,org.eclipse.birt.report.service.api.InputOptions,java.io.OutputStream)
 */
public void extractResultSet(String docName,String resultSetId,Collection columns,Set filters,InputOptions options,OutputStream out) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName,getModuleOptions(options));
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  try {
    ReportEngineService.getInstance().extractData(doc,resultSetId,columns,locale,out,ParameterAccessor.getExportEncoding(request));
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e);
  }
 finally {
    if (doc != null)     doc.close();
  }
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#extractResultSet(java.lang.String,java.lang.String,java.util.Collection,java.util.Set,org.eclipse.birt.report.service.api.InputOptions,java.io.OutputStream)
 */
public void extractResultSet(String docName,String resultSetId,Collection columns,Set filters,InputOptions options,OutputStream out) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName,getModuleOptions(options));
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  try {
    ReportEngineService.getInstance().extractData(doc,resultSetId,columns,locale,out,ParameterAccessor.getExportEncoding(request));
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
 finally {
    if (doc != null)     doc.close();
  }
}",0.9945082376435348
76372,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#getPage(java.lang.String,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.List)
 */
public ByteArrayOutputStream getPage(String docName,String pageID,InputOptions renderOptions,List activeIds) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(renderOptions),docName,getModuleOptions(renderOptions));
  HttpServletRequest request=(HttpServletRequest)renderOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)renderOptions.getOption(InputOptions.OPT_LOCALE);
  String format=(String)renderOptions.getOption(InputOptions.OPT_FORMAT);
  Boolean isMasterPageContent=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)renderOptions.getOption(InputOptions.OPT_SVG_FLAG);
  Long pageNum=Long.valueOf(pageID);
  Boolean isRtl=(Boolean)renderOptions.getOption(InputOptions.OPT_RTL);
  try {
    ByteArrayOutputStream os=ReportEngineService.getInstance().renderReport(request,doc,format,pageNum.longValue(),isMasterPageContent.booleanValue(),svgFlag.booleanValue(),activeIds,locale,isRtl.booleanValue());
    return os;
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e);
  }
 finally {
    if (doc != null)     doc.close();
  }
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#getPage(java.lang.String,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.List)
 */
public ByteArrayOutputStream getPage(String docName,String pageID,InputOptions renderOptions,List activeIds) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(renderOptions),docName,getModuleOptions(renderOptions));
  HttpServletRequest request=(HttpServletRequest)renderOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)renderOptions.getOption(InputOptions.OPT_LOCALE);
  String format=(String)renderOptions.getOption(InputOptions.OPT_FORMAT);
  Boolean isMasterPageContent=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)renderOptions.getOption(InputOptions.OPT_SVG_FLAG);
  Long pageNum=Long.valueOf(pageID);
  Boolean isRtl=(Boolean)renderOptions.getOption(InputOptions.OPT_RTL);
  try {
    ByteArrayOutputStream os=ReportEngineService.getInstance().renderReport(request,doc,format,pageNum.longValue(),isMasterPageContent.booleanValue(),svgFlag.booleanValue(),activeIds,locale,isRtl.booleanValue());
    return os;
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
 finally {
    if (doc != null)     doc.close();
  }
}",0.9961117002474372
76373,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#renderReportlet(java.lang.String,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.List,java.io.OutputStream)
 */
public void renderReportlet(String docName,String objectId,InputOptions renderOptions,List activeIds,OutputStream out) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(renderOptions),docName,getModuleOptions(renderOptions));
  HttpServletRequest request=(HttpServletRequest)renderOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)renderOptions.getOption(InputOptions.OPT_LOCALE);
  String format=(String)renderOptions.getOption(InputOptions.OPT_FORMAT);
  Boolean isMasterPageContent=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean isMasterPage=isMasterPageContent == null ? false : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean isSvg=svgFlag == null ? false : svgFlag.booleanValue();
  Boolean isRtl=(Boolean)renderOptions.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)renderOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  try {
    ReportEngineService.getInstance().renderReportlet(out,request,doc,objectId,format,isMasterPage,isSvg,null,locale,isRtl.booleanValue(),servletPath);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e);
  }
 finally {
    if (doc != null)     doc.close();
  }
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#renderReportlet(java.lang.String,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.List,java.io.OutputStream)
 */
public void renderReportlet(String docName,String objectId,InputOptions renderOptions,List activeIds,OutputStream out) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(renderOptions),docName,getModuleOptions(renderOptions));
  HttpServletRequest request=(HttpServletRequest)renderOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)renderOptions.getOption(InputOptions.OPT_LOCALE);
  String format=(String)renderOptions.getOption(InputOptions.OPT_FORMAT);
  Boolean isMasterPageContent=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean isMasterPage=isMasterPageContent == null ? false : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean isSvg=svgFlag == null ? false : svgFlag.booleanValue();
  Boolean isRtl=(Boolean)renderOptions.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)renderOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  try {
    ReportEngineService.getInstance().renderReportlet(out,request,doc,objectId,format,isMasterPage,isSvg,null,locale,isRtl.booleanValue(),servletPath);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
 finally {
    if (doc != null)     doc.close();
  }
}",0.9965678627145086
76374,"/** 
 * Returns report runnable object
 * @param design
 * @param moduleOptions
 * @return
 * @throws ReportServiceException
 */
public IReportRunnable getReportRunnable(IViewerReportDesignHandle design,Map moduleOptions) throws ReportServiceException {
  IReportRunnable runnable;
  if (design.getContentType() == IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT) {
    runnable=(IReportRunnable)design.getDesignObject();
  }
 else {
    try {
      runnable=ReportEngineService.getInstance().openReportDesign(design.getFileName(),moduleOptions);
    }
 catch (    EngineException e) {
      throw new ReportServiceException(e.getLocalizedMessage(),e);
    }
  }
  return runnable;
}","/** 
 * Returns report runnable object
 * @param design
 * @param moduleOptions
 * @return
 * @throws ReportServiceException
 */
public IReportRunnable getReportRunnable(IViewerReportDesignHandle design,Map moduleOptions) throws ReportServiceException {
  IReportRunnable runnable;
  if (design.getContentType() == IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT) {
    runnable=(IReportRunnable)design.getDesignObject();
  }
 else {
    try {
      runnable=ReportEngineService.getInstance().openReportDesign(design.getFileName(),moduleOptions);
    }
 catch (    EngineException e) {
      throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
    }
  }
  return runnable;
}",0.9919883466860888
76375,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#runReport(org.eclipse.birt.report.service.api.IViewerReportDesignHandle,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.Map,java.util.Map)
 */
public String runReport(IViewerReportDesignHandle design,String outputDocName,InputOptions runOptions,Map parameters,Map displayTexts) throws ReportServiceException {
  IReportRunnable runnable;
  HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)runOptions.getOption(InputOptions.OPT_LOCALE);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  Map parsedParams=attrBean.getParameters();
  if (parameters != null) {
    parsedParams.putAll(parameters);
  }
  Map displayTextMap=attrBean.getDisplayTexts();
  if (displayTexts != null) {
    displayTextMap.putAll(displayTexts);
  }
  runnable=(IReportRunnable)design.getDesignObject();
  try {
    ReportEngineService.getInstance().runReport(request,runnable,outputDocName,locale,parsedParams,displayTextMap);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e);
  }
  return outputDocName;
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#runReport(org.eclipse.birt.report.service.api.IViewerReportDesignHandle,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.Map,java.util.Map)
 */
public String runReport(IViewerReportDesignHandle design,String outputDocName,InputOptions runOptions,Map parameters,Map displayTexts) throws ReportServiceException {
  IReportRunnable runnable;
  HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)runOptions.getOption(InputOptions.OPT_LOCALE);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  Map parsedParams=attrBean.getParameters();
  if (parameters != null) {
    parsedParams.putAll(parameters);
  }
  Map displayTextMap=attrBean.getDisplayTexts();
  if (displayTexts != null) {
    displayTextMap.putAll(displayTexts);
  }
  runnable=(IReportRunnable)design.getDesignObject();
  try {
    ReportEngineService.getInstance().runReport(request,runnable,outputDocName,locale,parsedParams,displayTextMap);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
  return outputDocName;
}",0.9956331877729258
76376,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#getParameterValues(java.lang.String,org.eclipse.birt.report.service.api.InputOptions)
 * @deprecated     
 */
public Map getParameterValues(String docName,InputOptions options) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName,getModuleOptions(options));
  Map paramValues=doc.getParameterValues();
  doc.close();
  return paramValues;
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#getParameterValues(java.lang.String,org.eclipse.birt.report.service.api.InputOptions)
 * @deprecated
 */
public Map getParameterValues(String docName,InputOptions options) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName,getModuleOptions(options));
  Map paramValues=doc.getParameterValues();
  doc.close();
  return paramValues;
}",0.9949849548645938
76377,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#getImage(java.lang.String,java.lang.String,java.io.OutputStream,org.eclipse.birt.report.service.api.InputOptions)
 */
public void getImage(String docName,String imageId,OutputStream out,InputOptions options) throws ReportServiceException {
  try {
    HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
    ReportEngineService.getInstance().renderImage(imageId,request,out);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#getImage(java.lang.String,java.lang.String,java.io.OutputStream,org.eclipse.birt.report.service.api.InputOptions)
 */
public void getImage(String docName,String imageId,OutputStream out,InputOptions options) throws ReportServiceException {
  try {
    HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
    ReportEngineService.getInstance().renderImage(imageId,request,out);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
}",0.9907795473595976
76378,"/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9701612903225808
76379,"/** 
 * Render reportlet page.
 * @param os
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    renderOption.setOutputFormat(IBirtConstants.PDF_RENDER_FORMAT);
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    renderOption.setOutputFormat(IBirtConstants.HTML_RENDER_FORMAT);
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF))     renderTask.render();
 else {
      renderTask.render();
    }
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param os
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    renderOption.setOutputFormat(IBirtConstants.PDF_RENDER_FORMAT);
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    renderOption.setOutputFormat(IBirtConstants.HTML_RENDER_FORMAT);
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF))     renderTask.render();
 else {
      renderTask.render();
    }
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9706349206349206
76380,"/** 
 * Render image.
 * @param imageId
 * @param request
 * @param outputStream
 * @throws RemoteException
 */
public void renderImage(String imageId,HttpServletRequest request,OutputStream outputStream) throws RemoteException {
  assert(this.imageHandler != null);
  try {
    this.imageHandler.getImage(outputStream,ParameterAccessor.getImageTempFolder(request),imageId);
  }
 catch (  EngineException e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
}","/** 
 * Render image.
 * @param imageId
 * @param request
 * @param outputStream
 * @throws RemoteException
 */
public void renderImage(String imageId,HttpServletRequest request,OutputStream outputStream) throws RemoteException {
  assert(this.imageHandler != null);
  try {
    this.imageHandler.getImage(outputStream,ParameterAccessor.getImageTempFolder(request),imageId);
  }
 catch (  EngineException e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
}",0.9360967184801382
76381,protected abstract void runReport() throws RemoteException ;,protected abstract void runReport() throws Exception ;,0.9473684210526316
76382,"protected void __execute() throws Exception {
  context.getResponse().setContentType(""String_Node_Str"");
  String imageId=context.getRequest().getParameter(ParameterAccessor.PARAM_IMAGEID);
  ServletOutputStream out;
  String docName=null;
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  out=context.getResponse().getOutputStream();
  getReportService().getImage(docName,imageId,out,options);
}","public void __execute() throws Exception {
  context.getResponse().setContentType(""String_Node_Str"");
  String imageId=context.getRequest().getParameter(ParameterAccessor.PARAM_IMAGEID);
  ServletOutputStream out;
  String docName=null;
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  out=context.getResponse().getOutputStream();
  getReportService().getImage(docName,imageId,out,options);
}",0.985792349726776
76383,"protected void runReport() throws RemoteException {
  IActionHandler handler=new BirtRunReportActionHandler(context,operation,response);
  handler.execute();
}","protected void runReport() throws Exception {
  BirtRunReportActionHandler handler=new BirtRunReportActionHandler(context,operation,response);
  handler.__execute();
}",0.9325153374233128
76384,"/** 
 */
protected void __checkDocumentExists() throws RemoteException {
  File file=new File(__docName);
  if (!file.exists()) {
    IActionHandler handler=new BirtRunReportActionHandler(context,operation,response);
    handler.execute();
  }
  file=new File(__docName);
  if (!file.exists()) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    throw fault;
  }
 else {
    BaseAttributeBean bean=(BaseAttributeBean)context.getBean();
    if (bean.isDocumentProcessing()) {
      AxisFault fault=new AxisFault();
      fault.setFaultReason(BirtResources.getMessage(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_PROCESSING));
      throw fault;
    }
  }
}","/** 
 * Check whether document existed
 */
protected void __checkDocumentExists() throws Exception {
  File file=new File(__docName);
  if (!file.exists()) {
    BirtRunReportActionHandler handler=new BirtRunReportActionHandler(context,operation,response);
    handler.__execute();
  }
  file=new File(__docName);
  if (!file.exists()) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    throw fault;
  }
 else {
    BaseAttributeBean bean=(BaseAttributeBean)context.getBean();
    if (bean.isDocumentProcessing()) {
      AxisFault fault=new AxisFault();
      fault.setFaultReason(BirtResources.getMessage(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_PROCESSING));
      throw fault;
    }
  }
}",0.7869062901155327
76385,"/** 
 */
protected String __getReportDocument(){
  return __bean.getReportDocumentName();
}","/** 
 * Returns report document name
 */
protected String __getReportDocument(){
  return __bean.getReportDocumentName();
}",0.8504672897196262
76386,"/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9872732196046574
76387,"/** 
 * Render reportlet page.
 * @param os
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    renderOption.setOutputFormat(IBirtConstants.PDF_RENDER_FORMAT);
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    renderOption.setOutputFormat(IBirtConstants.HTML_RENDER_FORMAT);
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF))     renderTask.render();
 else {
      renderTask.render();
    }
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param os
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    renderOption.setOutputFormat(IBirtConstants.PDF_RENDER_FORMAT);
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    renderOption.setOutputFormat(IBirtConstants.HTML_RENDER_FORMAT);
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF))     renderTask.render();
 else {
      renderTask.render();
    }
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.987476685318412
76388,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  String openType=ParameterAccessor.getOpenType(request);
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      response.setContentType(""String_Node_Str"");
    }
 else {
      String mimeType=ReportEngineService.getInstance().getMIMEType(format);
      if (mimeType != null && mimeType.length() > 0)       response.setContentType(mimeType);
 else       response.setContentType(""String_Node_Str"");
    }
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",openType + ""String_Node_Str"" + filename+ ""String_Node_Str"");
  }
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  String openType=ParameterAccessor.getOpenType(request);
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      response.setContentType(""String_Node_Str"");
    }
 else {
      String mimeType=ReportEngineService.getInstance().getMIMEType(format);
      if (mimeType != null && mimeType.length() > 0)       response.setContentType(mimeType);
 else       response.setContentType(""String_Node_Str"");
    }
    if (!ParameterAccessor.isGetImageOperator(request)) {
      String filename=ParameterAccessor.generateFileName(request);
      response.setHeader(""String_Node_Str"",openType + ""String_Node_Str"" + filename+ ""String_Node_Str"");
    }
  }
}",0.9714285714285714
76389,"/** 
 * Generates a file name for the pdf output.
 * @param request
 * @return the file name
 */
public static String generateFileName(HttpServletRequest request){
}","/** 
 * Generates a file name for the pdf output.
 * @param request
 * @return the file name
 */
public static String generateFileName(HttpServletRequest request){
  String defaultName=""String_Node_Str"";
  String fileName=defaultName;
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  if (attrBean == null)   return fileName;
  String baseName=attrBean.getReportDesignName();
  if (baseName == null || baseName.length() == 0)   baseName=attrBean.getReportDocumentName();
  if (baseName == null || baseName.trim().length() <= 0)   return fileName;
  int index=baseName.lastIndexOf('/');
  if (index == -1)   index=baseName.lastIndexOf('\\');
  if (index != -1) {
    baseName=baseName.substring(index + 1);
  }
  int dotIndex=baseName.lastIndexOf('.');
  if (dotIndex > 0) {
    fileName=baseName.substring(0,dotIndex);
  }
  for (int i=0; i < fileName.length(); i++) {
    char c=fileName.charAt(i);
    if (c < 0x00 || c >= 0x80) {
      fileName=defaultName;
      break;
    }
  }
  return fileName;
}",0.2700490998363339
76390,"/** 
 * @return whether the parameter allow empty string as input. If not, theend user has to supply a string value that is non-empty
 */
boolean allowBlank();","/** 
 * @deprecated
 * @return whether the parameter allow empty string as input. If not, theend user has to supply a string value that is non-empty
 */
boolean allowBlank();",0.954954954954955
76391,"/** 
 * @return whether the parameter allow null value. If it does not, the enduser has to supply a value for the parameter before the report can be run
 */
boolean allowNull();","/** 
 * @deprecated
 * @return whether the parameter allow null value. If it does not, the enduser has to supply a value for the parameter before the report can be run
 */
boolean allowNull();",0.959349593495935
76392,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle){
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (paramHandle.allowNull())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    return false;
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (value.equals(""String_Node_Str"") && !paramHandle.allowBlank()) {
      log.log(Level.SEVERE,""String_Node_Str"",paramName);
      return false;
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
  return true;
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle){
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    return false;
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      log.log(Level.SEVERE,""String_Node_Str"",paramName);
      return false;
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
  return true;
}",0.9638266068759342
76393,"public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}","public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}",0.9940567906669602
76394,"/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String pattern,String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder){
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      IDataEngine dataEngine=executionContext.getDataEngine();
      DataRequestSession dteSession=getDataSession();
      dataEngine.defineDataSet(dataSet);
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      if (limit > 0) {
        queryDefn.setMaxRows(limit);
      }
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      String labelColumnName=LABEL_PREFIX;
      ;
      String valueColumnName=VALUE_PREFIX;
      ;
      if (labelExpr != null) {
        queryDefn.addResultSetExpression(labelColumnName,labelExpr);
      }
      queryDefn.addResultSetExpression(valueColumnName,valueExpr);
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteSession.prepare(queryDefn,getAppContext());
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      Map checkPool=new HashMap();
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelColumnName);
        }
        Object value=iter.getValue(valueColumnName);
        value=convertToType(value,dataType);
        if (!checkPool.containsKey(value)) {
          checkPool.put(value,value);
          choices.add(new SelectionChoice(label,value));
          count++;
          if ((limit != 0) && (count >= limit)) {
            break;
          }
        }
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true,pattern,ULocale.forLocale(locale)));
  return choices;
}","/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String pattern,String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder,boolean isDistinct,String sortDirection,String sortBy){
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(sortDirection);
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(sortBy);
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      IDataEngine dataEngine=executionContext.getDataEngine();
      DataRequestSession dteSession=getDataSession();
      dataEngine.defineDataSet(dataSet);
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      if (limit > 0) {
        queryDefn.setMaxRows(limit);
      }
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      String labelColumnName=LABEL_PREFIX;
      ;
      String valueColumnName=VALUE_PREFIX;
      ;
      if (labelExpr != null) {
        queryDefn.addResultSetExpression(labelColumnName,labelExpr);
      }
      queryDefn.addResultSetExpression(valueColumnName,valueExpr);
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteSession.prepare(queryDefn,getAppContext());
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      Map checkPool=new HashMap();
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelColumnName);
        }
        Object value=iter.getValue(valueColumnName);
        value=convertToType(value,dataType);
        if (isDistinct) {
          if (!checkPool.containsKey(value)) {
            checkPool.put(value,value);
            choices.add(new SelectionChoice(label,value));
            count++;
          }
        }
 else {
          choices.add(new SelectionChoice(label,value));
          count++;
        }
        if ((limit != 0) && (count >= limit)) {
          break;
        }
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,pattern,sortDirectionValue,ULocale.forLocale(locale)));
  return choices;
}",0.9336683417085428
76395,"private Collection getChoicesFromParameterQuery(ScalarParameterHandle parameter){
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  String dataSetName=parameter.getDataSetName();
  String valueExpr=parameter.getValueExpr();
  String labelExpr=parameter.getLabelExpr();
  int limit=parameter.getListlimit();
  String pattern=parameter.getPattern();
  return createDynamicSelectionChoices(pattern,dataSetName,labelExpr,valueExpr,dataType,limit,fixedOrder);
}","private Collection getChoicesFromParameterQuery(ScalarParameterHandle parameter){
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  String dataSetName=parameter.getDataSetName();
  String valueExpr=parameter.getValueExpr();
  String labelExpr=parameter.getLabelExpr();
  boolean isDistinct=parameter.distinct();
  String sortDirection=parameter.getSortDirection();
  String sortBy=parameter.getSortBy();
  int limit=parameter.getListlimit();
  String pattern=parameter.getPattern();
  return createDynamicSelectionChoices(pattern,dataSetName,labelExpr,valueExpr,dataType,limit,fixedOrder,isDistinct,sortDirection,sortBy);
}",0.8564058469475494
76396,"/** 
 * @param allowBlank
 */
public void setAllowBlank(boolean allowBlank){
  this.allowBlank=allowBlank;
}","/** 
 * @deprecated
 * @param allowBlank
 */
public void setAllowBlank(boolean allowBlank){
  this.allowBlank=allowBlank;
}",0.935064935064935
76397,"/** 
 * @param allowNull whether allow null value for the specific parameter
 */
public void setAllowNull(boolean allowNull){
  this.allowNull=allowNull;
}","/** 
 * @deprecated
 * @param allowNull whether allow null value for the specific parameter
 */
public void setAllowNull(boolean allowNull){
  this.allowNull=allowNull;
}",0.953846153846154
76398,"public boolean allowNull(){
  return allowNull;
}","public boolean allowNull(){
  return !isRequired();
}",0.803921568627451
76399,"public boolean allowBlank(){
  return allowBlank;
}","public boolean allowBlank(){
  return !isRequired();
}",0.780952380952381
76400,"public SelectionChoiceComparator(boolean sortDisplayValue,String format,ULocale locale){
  this.sortDisplayValue=sortDisplayValue;
  this.format=format;
  this.locale=locale;
  if (null == this.locale) {
    this.locale=ULocale.getDefault();
  }
}","public SelectionChoiceComparator(boolean sortDisplayValue,String format,boolean sortDirection,ULocale locale){
  this.sortDirection=sortDirection;
  this.sortDisplayValue=sortDisplayValue;
  this.format=format;
  this.locale=locale;
  if (null == this.locale) {
    this.locale=ULocale.getDefault();
  }
}",0.894927536231884
76401,"public int compare(Object o1,Object o2){
  if ((o1 instanceof IParameterSelectionChoice) && (o2 instanceof IParameterSelectionChoice)) {
    Object value1;
    Object value2;
    if (sortDisplayValue) {
      value1=((IParameterSelectionChoice)o1).getLabel();
      value2=((IParameterSelectionChoice)o2).getLabel();
      if (null == value1) {
        value1=getDisplayValue(((IParameterSelectionChoice)o1).getValue());
      }
      if (null == value2) {
        value2=getDisplayValue(((IParameterSelectionChoice)o2).getValue());
      }
    }
 else {
      value1=((IParameterSelectionChoice)o1).getValue();
      value2=((IParameterSelectionChoice)o2).getValue();
    }
    if (value1 == value2) {
      return 0;
    }
    if (value1 == null) {
      return -1;
    }
    if (value2 == null) {
      return 1;
    }
    if ((value1 instanceof Boolean) && (value2 instanceof Boolean)) {
      if (((Boolean)value1).booleanValue() ^ ((Boolean)value1).booleanValue()) {
        return 0;
      }
      return ((Boolean)value1).booleanValue() ? 1 : -1;
    }
    if (value1 instanceof Comparable) {
      return ((Comparable)value1).compareTo(value2);
    }
    if (value2 instanceof Comparable) {
      return -((Comparable)value2).compareTo(value1);
    }
  }
  return -1;
}","public int compare(Object o1,Object o2){
  int compareResult=-1;
  if ((o1 instanceof IParameterSelectionChoice) && (o2 instanceof IParameterSelectionChoice)) {
    Object value1;
    Object value2;
    if (sortDisplayValue) {
      value1=((IParameterSelectionChoice)o1).getLabel();
      value2=((IParameterSelectionChoice)o2).getLabel();
      if (null == value1) {
        value1=getDisplayValue(((IParameterSelectionChoice)o1).getValue());
      }
      if (null == value2) {
        value2=getDisplayValue(((IParameterSelectionChoice)o2).getValue());
      }
    }
 else {
      value1=((IParameterSelectionChoice)o1).getValue();
      value2=((IParameterSelectionChoice)o2).getValue();
    }
    if (value1 == value2) {
      return 0;
    }
 else     if (value1 == null) {
      return -1;
    }
 else     if (value2 == null) {
      return 1;
    }
    if ((value1 instanceof Boolean) && (value2 instanceof Boolean)) {
      if (((Boolean)value1).booleanValue() ^ ((Boolean)value1).booleanValue()) {
        compareResult=0;
      }
 else {
        compareResult=((Boolean)value1).booleanValue() ? 1 : -1;
      }
      return resultByDirection(compareResult);
    }
    if (value1 instanceof Comparable || value2 instanceof Comparable) {
      if (value1 instanceof Comparable) {
        compareResult=((Comparable)value1).compareTo(value2);
      }
 else {
        compareResult=-((Comparable)value2).compareTo(value1);
      }
      return resultByDirection(compareResult);
    }
  }
  return resultByDirection(compareResult);
}",0.8325053229240597
76402,"private void createCube() throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}","private void createCube() throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath,cubeName);
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}",0.9886194952993568
76403,"public void testBasic1() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","public void testBasic1() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9931824379601856
76404,"public void testBasic() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","public void testBasic() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9939569736524052
76405,"/** 
 * without row edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel2() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor productCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  columnCursor.beforeFirst();
  Object obj1, obj2, obj3;
  while (columnCursor.next()) {
    obj1=countryCursor.getObject(""String_Node_Str"");
    print(obj1);
    obj2=cityCursor.getObject(""String_Node_Str"");
    print(obj2);
    obj3=productCursor.getObject(""String_Node_Str"");
    print(obj3);
  }
  columnCursor.beforeFirst();
  while (columnCursor.next()) {
    print(dataCursor.getObject(""String_Node_Str""));
    print(dataCursor.getObject(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"");
  countryCursor.beforeFirst();
  while (countryCursor.next()) {
    cityCursor.beforeFirst();
    while (cityCursor.next()) {
      productCursor.beforeFirst();
      while (productCursor.next()) {
        print(countryCursor.getObject(""String_Node_Str""));
        print(cityCursor.getObject(""String_Node_Str""));
        print(productCursor.getObject(""String_Node_Str""));
      }
    }
  }
  countryCursor.beforeFirst();
  while (countryCursor.next()) {
    cityCursor.beforeFirst();
    while (cityCursor.next()) {
      productCursor.beforeFirst();
      while (productCursor.next()) {
        print(dataCursor.getObject(0));
        print(dataCursor.getObject(1));
      }
    }
  }
}","/** 
 * without row edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel2() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor productCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  columnCursor.beforeFirst();
  Object obj1, obj2, obj3;
  while (columnCursor.next()) {
    obj1=countryCursor.getObject(""String_Node_Str"");
    print(obj1);
    obj2=cityCursor.getObject(""String_Node_Str"");
    print(obj2);
    obj3=productCursor.getObject(""String_Node_Str"");
    print(obj3);
  }
  columnCursor.beforeFirst();
  while (columnCursor.next()) {
    print(dataCursor.getObject(""String_Node_Str""));
    print(dataCursor.getObject(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"");
  countryCursor.beforeFirst();
  while (countryCursor.next()) {
    cityCursor.beforeFirst();
    while (cityCursor.next()) {
      productCursor.beforeFirst();
      while (productCursor.next()) {
        print(countryCursor.getObject(""String_Node_Str""));
        print(cityCursor.getObject(""String_Node_Str""));
        print(productCursor.getObject(""String_Node_Str""));
      }
    }
  }
  countryCursor.beforeFirst();
  while (countryCursor.next()) {
    cityCursor.beforeFirst();
    while (cityCursor.next()) {
      productCursor.beforeFirst();
      while (productCursor.next()) {
        print(dataCursor.getObject(0));
        print(dataCursor.getObject(1));
      }
    }
  }
}",0.9944417976814356
76406,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor productCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  columnCursor.beforeFirst();
  Object obj1, obj2, obj3;
  while (columnCursor.next()) {
    obj1=countryCursor.getObject(""String_Node_Str"");
    print(obj1);
    obj2=cityCursor.getObject(""String_Node_Str"");
    print(obj2);
    obj3=productCursor.getObject(""String_Node_Str"");
    print(obj3);
  }
  rowCursor.beforeFirst();
  while (rowCursor.next()) {
    print(timeCursor.getObject(""String_Node_Str""));
    columnCursor.beforeFirst();
    while (columnCursor.next()) {
      print(dataCursor.getObject(""String_Node_Str""));
      print(dataCursor.getObject(""String_Node_Str""));
    }
  }
  System.out.println(""String_Node_Str"");
  countryCursor.beforeFirst();
  while (countryCursor.next()) {
    cityCursor.beforeFirst();
    while (cityCursor.next()) {
      productCursor.beforeFirst();
      while (productCursor.next()) {
        print(countryCursor.getObject(""String_Node_Str""));
        print(cityCursor.getObject(""String_Node_Str""));
        print(productCursor.getObject(""String_Node_Str""));
      }
    }
  }
  timeCursor.beforeFirst();
  while (timeCursor.next()) {
    print(timeCursor.getString(0));
    countryCursor.beforeFirst();
    while (countryCursor.next()) {
      cityCursor.beforeFirst();
      while (cityCursor.next()) {
        productCursor.beforeFirst();
        while (productCursor.next()) {
          print(dataCursor.getObject(0));
          print(dataCursor.getObject(1));
        }
      }
    }
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor productCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  columnCursor.beforeFirst();
  Object obj1, obj2, obj3;
  while (columnCursor.next()) {
    obj1=countryCursor.getObject(""String_Node_Str"");
    print(obj1);
    obj2=cityCursor.getObject(""String_Node_Str"");
    print(obj2);
    obj3=productCursor.getObject(""String_Node_Str"");
    print(obj3);
  }
  rowCursor.beforeFirst();
  while (rowCursor.next()) {
    print(timeCursor.getObject(""String_Node_Str""));
    columnCursor.beforeFirst();
    while (columnCursor.next()) {
      print(dataCursor.getObject(""String_Node_Str""));
      print(dataCursor.getObject(""String_Node_Str""));
    }
  }
  System.out.println(""String_Node_Str"");
  countryCursor.beforeFirst();
  while (countryCursor.next()) {
    cityCursor.beforeFirst();
    while (cityCursor.next()) {
      productCursor.beforeFirst();
      while (productCursor.next()) {
        print(countryCursor.getObject(""String_Node_Str""));
        print(cityCursor.getObject(""String_Node_Str""));
        print(productCursor.getObject(""String_Node_Str""));
      }
    }
  }
  timeCursor.beforeFirst();
  while (timeCursor.next()) {
    print(timeCursor.getString(0));
    countryCursor.beforeFirst();
    while (countryCursor.next()) {
      cityCursor.beforeFirst();
      while (cityCursor.next()) {
        productCursor.beforeFirst();
        while (productCursor.next()) {
          print(dataCursor.getObject(0));
          print(dataCursor.getObject(1));
        }
      }
    }
  }
}",0.9953807575557608
76407,"/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel3() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  DimensionCursor timeCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  rowCursor.beforeFirst();
  while (rowCursor.next()) {
    print(timeCursor.getObject(""String_Node_Str""));
    print(dataCursor.getObject(""String_Node_Str""));
    print(dataCursor.getObject(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"");
  timeCursor.beforeFirst();
  while (timeCursor.next()) {
    print(timeCursor.getString(0));
    print(dataCursor.getObject(0));
    print(dataCursor.getObject(1));
  }
}","/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel3() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  DimensionCursor timeCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  rowCursor.beforeFirst();
  while (rowCursor.next()) {
    print(timeCursor.getObject(""String_Node_Str""));
    print(dataCursor.getObject(""String_Node_Str""));
    print(dataCursor.getObject(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"");
  timeCursor.beforeFirst();
  while (timeCursor.next()) {
    print(timeCursor.getString(0));
    print(dataCursor.getObject(0));
    print(dataCursor.getObject(1));
  }
}",0.9910692734733284
76408,"/** 
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private void populateSortedFactRows(StopSign stopSign) throws IOException, BirtException {
  Row4AggregationPopulator aggregationRowPopulator=new Row4AggregationPopulator(dimesionResultIterators,facttableRowIterator);
  prepareSortedStacks();
  int measureCount=facttableRowIterator.getMeasureCount();
  while (facttableRowIterator.next() && !stopSign.isStopped()) {
    for (int i=0; i < allSortedFactRows.size(); i++) {
      DiskSortedStackWrapper diskSortedStackWriter=((DiskSortedStackWrapper)allSortedFactRows.get(i));
      int[] levelIndex=diskSortedStackWriter.levelIndex;
      Row4Aggregation aggregationRow=new Row4Aggregation();
      aggregationRow.levelMembers=aggregationRowPopulator.getLevelMembers(levelIndex);
      if (aggregationRow.levelMembers == null) {
        continue;
      }
      aggregationRow.measures=new Object[measureCount];
      for (int j=0; j < measureCount; j++) {
        aggregationRow.measures[j]=facttableRowIterator.getMeasure(j);
      }
      diskSortedStackWriter.diskSortedStack.push(aggregationRow);
    }
  }
}","/** 
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private void populateSortedFactRows(StopSign stopSign) throws IOException, BirtException {
  Row4AggregationPopulator aggregationRowPopulator=new Row4AggregationPopulator(dimesionResultIterators,facttableRowIterator);
  prepareSortedStacks();
  int measureCount=facttableRowIterator.getMeasureCount();
  while (facttableRowIterator.next() && !stopSign.isStopped()) {
    for (int i=0; i < allSortedFactRows.size(); i++) {
      DiskSortedStackWrapper diskSortedStackWrapper=((DiskSortedStackWrapper)allSortedFactRows.get(i));
      int[] levelIndex=diskSortedStackWrapper.levelIndex;
      Row4Aggregation aggregationRow=new Row4Aggregation();
      aggregationRow.levelMembers=aggregationRowPopulator.getLevelMembers(levelIndex);
      if (aggregationRow.levelMembers == null) {
        continue;
      }
      aggregationRow.measures=new Object[measureCount];
      for (int j=0; j < measureCount; j++) {
        aggregationRow.measures[j]=facttableRowIterator.getMeasure(j);
      }
      diskSortedStackWrapper.diskSortedStack.push(aggregationRow);
    }
  }
}",0.9934123847167324
76409,"/** 
 * Convert report parameter from string into object. Need to be pointed out is it return a Double object when the value type is Float.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(ULocale.forLocale(locale));
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(ULocale.forLocale(locale));
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.toString());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.toString());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.toString());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new BigDecimal(num.toString());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
  parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
  Number num=nf.parse(reportParameterValue);
  if (num != null) {
    parameterValueObj=new Integer(num.intValue());
  }
}
 catch (ParseException pex) {
  try {
    parameterValueObj=new Integer(reportParameterValue);
  }
 catch (  NumberFormatException nfe) {
    parameterValueObj=null;
  }
}
}
}
}
}
return parameterValueObj;
}","/** 
 * Convert report parameter from string into object. Need to be pointed out is it return a Double object when the value type is Float.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(ULocale.forLocale(locale));
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(ULocale.forLocale(locale));
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.toString());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.toString());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.toString());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new BigDecimal(num.toString());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_DATE:
{
parameterValueObj=java.sql.Date.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_TIME:
{
parameterValueObj=java.sql.Time.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException pex) {
try {
parameterValueObj=new Integer(reportParameterValue);
}
 catch (NumberFormatException nfe) {
parameterValueObj=null;
}
}
}
}
}
}
return parameterValueObj;
}",0.96684350132626
76410,"/** 
 * @param p the scalar parameter
 * @param expr the default value expression
 */
protected Object stringToObject(int type,String value) throws BirtException {
  if (value == null) {
    return null;
  }
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
    return DataTypeUtil.toBoolean(value);
case IScalarParameterDefn.TYPE_DATE_TIME:
  return DataTypeUtil.toDate(value);
case IScalarParameterDefn.TYPE_DECIMAL:
return DataTypeUtil.toBigDecimal(value);
case IScalarParameterDefn.TYPE_FLOAT:
return DataTypeUtil.toDouble(value);
case IScalarParameterDefn.TYPE_STRING:
return DataTypeUtil.toString(value);
case IScalarParameterDefn.TYPE_INTEGER:
return DataTypeUtil.toInteger(value);
}
return null;
}","/** 
 * @param p the scalar parameter
 * @param expr the default value expression
 */
protected Object stringToObject(int type,String value) throws BirtException {
  if (value == null) {
    return null;
  }
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
    return DataTypeUtil.toBoolean(value);
case IScalarParameterDefn.TYPE_DATE:
  return DataTypeUtil.toSqlDate(value);
case IScalarParameterDefn.TYPE_TIME:
return DataTypeUtil.toSqlTime(value);
case IScalarParameterDefn.TYPE_DATE_TIME:
return DataTypeUtil.toDate(value);
case IScalarParameterDefn.TYPE_DECIMAL:
return DataTypeUtil.toBigDecimal(value);
case IScalarParameterDefn.TYPE_FLOAT:
return DataTypeUtil.toDouble(value);
case IScalarParameterDefn.TYPE_STRING:
return DataTypeUtil.toString(value);
case IScalarParameterDefn.TYPE_INTEGER:
return DataTypeUtil.toInteger(value);
}
return null;
}",0.9020356234096693
76411,"/** 
 * set parameter choice value. The string value is in English locale, and needs to be parsed back into object value based on the data type. 
 * @param value the string value for the object
 * @param type the parameter data type
 */
public void setValue(String value,int type){
  try {
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
      this.value=DataTypeUtil.toBoolean(value);
    break;
case IScalarParameterDefn.TYPE_DATE_TIME:
  this.value=DataTypeUtil.toDate(value);
break;
case IScalarParameterDefn.TYPE_DECIMAL:
this.value=DataTypeUtil.toBigDecimal(value);
break;
case IScalarParameterDefn.TYPE_FLOAT:
this.value=DataTypeUtil.toDouble(value);
break;
case IScalarParameterDefn.TYPE_INTEGER:
this.value=DataTypeUtil.toInteger(value);
break;
case IScalarParameterDefn.TYPE_STRING:
default :
this.value=DataTypeUtil.toString(value);
break;
}
}
 catch (BirtException e) {
log.log(Level.SEVERE,e.getLocalizedMessage(),e);
this.value=null;
}
}","/** 
 * set parameter choice value. The string value is in English locale, and needs to be parsed back into object value based on the data type. 
 * @param value the string value for the object
 * @param type the parameter data type
 */
public void setValue(String value,int type){
  try {
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
      this.value=DataTypeUtil.toBoolean(value);
    break;
case IScalarParameterDefn.TYPE_DATE_TIME:
  this.value=DataTypeUtil.toDate(value);
break;
case IScalarParameterDefn.TYPE_DECIMAL:
this.value=DataTypeUtil.toBigDecimal(value);
break;
case IScalarParameterDefn.TYPE_FLOAT:
this.value=DataTypeUtil.toDouble(value);
break;
case IScalarParameterDefn.TYPE_INTEGER:
this.value=DataTypeUtil.toInteger(value);
break;
case IScalarParameterDefn.TYPE_DATE:
this.value=DataTypeUtil.toSqlDate(value);
case IScalarParameterDefn.TYPE_TIME:
this.value=DataTypeUtil.toSqlTime(value);
case IScalarParameterDefn.TYPE_STRING:
default :
this.value=DataTypeUtil.toString(value);
break;
}
}
 catch (BirtException e) {
log.log(Level.SEVERE,e.getLocalizedMessage(),e);
this.value=null;
}
}",0.9238921001926782
76412,"/** 
 * Test filters in data sets and query with . The dataset filters should  always be applied before the query filters.
 */
public void test15() throws Exception {
  this.dataSet.addFilter(new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_BOTTOM_N,""String_Node_Str"")));
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  IBaseExpression[] bindingExprRow=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0)};
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str""))};
  QueryDefinition queryDefn=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,filterDefn,bindingNameRow,bindingExprRow);
  queryDefn.setMaxRows(2);
  executeQuery(queryDefn,bindingNameRow);
  checkOutputFile();
}","/** 
 * Test filters in data sets and query with . The dataset filters should always be applied before the query filters.
 */
public void test15() throws Exception {
  this.dataSet.addFilter(new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_BOTTOM_N,""String_Node_Str"")));
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  IBaseExpression[] bindingExprRow=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0)};
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str""))};
  QueryDefinition queryDefn=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,filterDefn,bindingNameRow,bindingExprRow);
  queryDefn.setMaxRows(2);
  executeQuery(queryDefn,bindingNameRow);
  checkOutputFile();
}",0.999712395743457
76413,"/** 
 * Test filters in data sets and queries. The dataset filters should  always be applied before the query filters.
 */
public void test14() throws Exception {
  this.dataSet.addFilter(new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_BOTTOM_N,""String_Node_Str"")));
  this.dataSet.addFilter(new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_LE,""String_Node_Str"")));
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  IBaseExpression[] bindingExprRow=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0)};
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str"")),new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_BOTTOM_N,""String_Node_Str"")),new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_TOP_N,""String_Node_Str""))};
  this.createAndRunQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,filterDefn,bindingNameRow,bindingExprRow);
  checkOutputFile();
}","/** 
 * Test filters in data sets and queries. The dataset filters should always be applied before the query filters.
 */
public void test14() throws Exception {
  this.dataSet.addFilter(new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_BOTTOM_N,""String_Node_Str"")));
  this.dataSet.addFilter(new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_LE,""String_Node_Str"")));
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  IBaseExpression[] bindingExprRow=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0)};
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str"")),new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_BOTTOM_N,""String_Node_Str"")),new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_TOP_N,""String_Node_Str""))};
  this.createAndRunQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,filterDefn,bindingNameRow,bindingExprRow);
  checkOutputFile();
}",0.9997525365008662
76414,"/** 
 * Test ""FetchRowLimit"" feature. The fetch row limit is the number of rows that a data set can fetch from data source. In this test case the limit is set to  3, which indicate to max three rows should be fetched from data source.
 * @throws Exception
 */
public void testFetchRowLimit2() throws Exception {
  this.fetchRowLimit(3);
}","/** 
 * Test ""FetchRowLimit"" feature. The fetch row limit is the number of rows that a data set can fetch from data source. In this test case the limit is set to 3, which indicate to max three rows should be fetched from data source.
 * @throws Exception
 */
public void testFetchRowLimit2() throws Exception {
  this.fetchRowLimit(3);
}",0.9985185185185184
76415,"/** 
 * Test ""FetchRowLimit"" feature. The fetch row limit is the number of rows that a data set can fetch from data source. In this test case the limit is set to  zero, which indicate no limit at all.
 * @throws Exception
 */
public void testFetchRowLimit1() throws Exception {
  this.fetchRowLimit(0);
}","/** 
 * Test ""FetchRowLimit"" feature. The fetch row limit is the number of rows that a data set can fetch from data source. In this test case the limit is set to zero, which indicate no limit at all.
 * @throws Exception
 */
public void testFetchRowLimit1() throws Exception {
  this.fetchRowLimit(0);
}",0.99835255354201
76416,"/** 
 * Test ""FetchRowLimit"" feature. The fetch row limit is the number of rows that a data set can fetch from data source. In this test case the limit is set to  negative number, which indicate no limit at all.
 * @throws Exception
 */
public void testFetchRowLimit3() throws Exception {
  this.fetchRowLimit(-10);
}","/** 
 * Test ""FetchRowLimit"" feature. The fetch row limit is the number of rows that a data set can fetch from data source. In this test case the limit is set to negative number, which indicate no limit at all.
 * @throws Exception
 */
public void testFetchRowLimit3() throws Exception {
  this.fetchRowLimit(-10);
}",0.9984202211690364
76417,"/** 
 * Regression Test for  SRC #78568 Filetr on date time doesn't work properly
 */
public void regressionTest78568() throws Exception {
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameSort=new String[1];
  bindingNameSort[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprSort=new IBaseExpression[1];
  bindingExprSort[0]=new ScriptExpression(""String_Node_Str"");
  SortDefinition[] sortDefn=new SortDefinition[]{new SortDefinition()};
  sortDefn[0].setColumn(""String_Node_Str"");
  sortDefn[0].setSortDirection(ISortDefinition.SORT_DESC);
  String[] bindingNameFilter=new String[1];
  bindingNameFilter[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[1];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_GE,""String_Node_Str""))};
  String[] bindingNameRow=new String[4];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[4];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(bindingNameGroup,bindingExprGroup,groupDefn,bindingNameSort,bindingExprSort,sortDefn,bindingNameFilter,bindingExprFilter,filterDefn,bindingNameRow,bindingExprRow);
  checkOutputFile();
}","/** 
 * Regression Test for SRC #78568 Filetr on date time doesn't work properly
 */
public void regressionTest78568() throws Exception {
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameSort=new String[1];
  bindingNameSort[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprSort=new IBaseExpression[1];
  bindingExprSort[0]=new ScriptExpression(""String_Node_Str"");
  SortDefinition[] sortDefn=new SortDefinition[]{new SortDefinition()};
  sortDefn[0].setColumn(""String_Node_Str"");
  sortDefn[0].setSortDirection(ISortDefinition.SORT_DESC);
  String[] bindingNameFilter=new String[1];
  bindingNameFilter[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[1];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_GE,""String_Node_Str""))};
  String[] bindingNameRow=new String[4];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[4];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(bindingNameGroup,bindingExprGroup,groupDefn,bindingNameSort,bindingExprSort,sortDefn,bindingNameFilter,bindingExprFilter,filterDefn,bindingNameRow,bindingExprRow);
  checkOutputFile();
}",0.9997678198281866
76418,"/** 
 * A standard report, test feature of:  group, sort, filter.
 */
public void test1() throws Exception {
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameSort=new String[1];
  bindingNameSort[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprSort=new IBaseExpression[1];
  bindingExprSort[0]=new ScriptExpression(""String_Node_Str"");
  SortDefinition[] sortDefn=new SortDefinition[]{new SortDefinition()};
  sortDefn[0].setColumn(""String_Node_Str"");
  sortDefn[0].setSortDirection(ISortDefinition.SORT_DESC);
  String[] bindingNameFilter=new String[1];
  bindingNameFilter[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[1];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ScriptExpression(""String_Node_Str""))};
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(bindingNameGroup,bindingExprGroup,groupDefn,bindingNameSort,bindingExprSort,sortDefn,bindingNameFilter,bindingExprFilter,filterDefn,bindingNameRow,bindingExprRow);
  checkOutputFile();
}","/** 
 * A standard report, test feature of: group, sort, filter.
 */
public void test1() throws Exception {
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameSort=new String[1];
  bindingNameSort[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprSort=new IBaseExpression[1];
  bindingExprSort[0]=new ScriptExpression(""String_Node_Str"");
  SortDefinition[] sortDefn=new SortDefinition[]{new SortDefinition()};
  sortDefn[0].setColumn(""String_Node_Str"");
  sortDefn[0].setSortDirection(ISortDefinition.SORT_DESC);
  String[] bindingNameFilter=new String[1];
  bindingNameFilter[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[1];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ScriptExpression(""String_Node_Str""))};
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(bindingNameGroup,bindingExprGroup,groupDefn,bindingNameSort,bindingExprSort,sortDefn,bindingNameFilter,bindingExprFilter,filterDefn,bindingNameRow,bindingExprRow);
  checkOutputFile();
}",0.9997799779977998
76419,"/** 
 * Test feature of duplicate column name from different tables
 */
public void test10_DuplicateColName() throws Exception {
  String testSQL=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(testSQL);
  String[] bindingNameRow=new String[2];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[2];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  QueryDefinition queryDefn=this.createQuery(null,null,null,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  assertTrue(resultIt.next());
  resultIt.getValue(bindingNameRow[0]);
  resultIt.getValue(bindingNameRow[1]);
}","/** 
 * Test feature of duplicate column name from different tables
 */
public void test10_DuplicateColName() throws Exception {
  String testSQL=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(testSQL);
  String[] bindingNameRow=new String[2];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[2];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  QueryDefinition queryDefn=this.createQuery(null,null,null,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  try {
    IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    queryResults.getResultIterator();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.8485499462943072
76420,"/** 
 * A standard report, test feature of:  group, sort, filter.
 */
public void test2() throws Exception {
  String[] bindingNameSort=new String[1];
  bindingNameSort[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprSort=new IBaseExpression[1];
  bindingExprSort[0]=new ScriptExpression(""String_Node_Str"");
  SortDefinition[] sortDefn=new SortDefinition[]{new SortDefinition()};
  sortDefn[0].setExpression(""String_Node_Str"");
  sortDefn[0].setSortDirection(ISortDefinition.SORT_DESC);
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(null,null,null,bindingNameSort,bindingExprSort,sortDefn,null,null,null,bindingNameRow,bindingExprRow);
  checkOutputFile();
}","/** 
 * A standard report, test feature of: group, sort, filter.
 */
public void test2() throws Exception {
  String[] bindingNameSort=new String[1];
  bindingNameSort[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprSort=new IBaseExpression[1];
  bindingExprSort[0]=new ScriptExpression(""String_Node_Str"");
  SortDefinition[] sortDefn=new SortDefinition[]{new SortDefinition()};
  sortDefn[0].setExpression(""String_Node_Str"");
  sortDefn[0].setSortDirection(ISortDefinition.SORT_DESC);
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(null,null,null,bindingNameSort,bindingExprSort,sortDefn,null,null,null,bindingNameRow,bindingExprRow);
  checkOutputFile();
}",0.9996258885147774
76421,"public void setUp(){
  List columnsList=new ArrayList();
  ResultFieldMetadata columnMetaData=new ResultFieldMetadata(1,""String_Node_Str"",""String_Node_Str"",DataType.getClass(DataType.STRING_TYPE),""String_Node_Str"",true);
  columnsList.add(columnMetaData);
  resultObjects=new ResultObject[]{new ResultObject(new ResultClass(columnsList),new Object[]{""String_Node_Str""}),new ResultObject(new ResultClass(columnsList),new Object[]{""String_Node_Str""})};
}","public void setUp() throws DataException {
  List columnsList=new ArrayList();
  ResultFieldMetadata columnMetaData=new ResultFieldMetadata(1,""String_Node_Str"",""String_Node_Str"",DataType.getClass(DataType.STRING_TYPE),""String_Node_Str"",true);
  columnsList.add(columnMetaData);
  resultObjects=new ResultObject[]{new ResultObject(new ResultClass(columnsList),new Object[]{""String_Node_Str""}),new ResultObject(new ResultClass(columnsList),new Object[]{""String_Node_Str""})};
}",0.976241900647948
76422,"/** 
 * @return
 */
private ResultClass getResultClass(){
  ArrayList columnList=new ArrayList();
  ResultFieldMetadata metaData=null;
  metaData=new ResultFieldMetadata(1,""String_Node_Str"",""String_Node_Str"",Integer.class,Integer.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(2,""String_Node_Str"",""String_Node_Str"",Double.class,Double.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(3,""String_Node_Str"",""String_Node_Str"",BigDecimal.class,BigDecimal.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(4,""String_Node_Str"",""String_Node_Str"",Date.class,Date.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(5,""String_Node_Str"",""String_Node_Str"",Time.class,Time.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(6,""String_Node_Str"",""String_Node_Str"",Timestamp.class,Timestamp.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(7,""String_Node_Str"",""String_Node_Str"",byte[].class,byte[].class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(8,""String_Node_Str"",""String_Node_Str"",String.class,String.class.getName(),false);
  columnList.add(metaData);
  ResultClass reClass=new ResultClass(columnList);
  return reClass;
}","/** 
 * @return
 * @throws DataException 
 */
private ResultClass getResultClass() throws DataException {
  ArrayList columnList=new ArrayList();
  ResultFieldMetadata metaData=null;
  metaData=new ResultFieldMetadata(1,""String_Node_Str"",""String_Node_Str"",Integer.class,Integer.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(2,""String_Node_Str"",""String_Node_Str"",Double.class,Double.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(3,""String_Node_Str"",""String_Node_Str"",BigDecimal.class,BigDecimal.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(4,""String_Node_Str"",""String_Node_Str"",Date.class,Date.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(5,""String_Node_Str"",""String_Node_Str"",Time.class,Time.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(6,""String_Node_Str"",""String_Node_Str"",Timestamp.class,Timestamp.class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(7,""String_Node_Str"",""String_Node_Str"",byte[].class,byte[].class.getName(),false);
  columnList.add(metaData);
  metaData=new ResultFieldMetadata(8,""String_Node_Str"",""String_Node_Str"",String.class,String.class.getName(),false);
  columnList.add(metaData);
  ResultClass reClass=new ResultClass(columnList);
  return reClass;
}",0.9828203292770222
76423,"/** 
 */
public void testGetTargetLevel(){
  assertEquals(""String_Node_Str"",OlapExpressionUtil.getTargetLevel(""String_Node_Str""));
  assertEquals(null,OlapExpressionUtil.getTargetLevel(""String_Node_Str""));
}","/** 
 */
public void testGetTargetLevel(){
}",0.350597609561753
76424,"public IResultClass getResultClass(){
  return new ResultClass(new ArrayList());
}","public IResultClass getResultClass(){
}",0.6446280991735537
76425,"/** 
 * @param inExprMetas
 */
void init(ExprMetaInfo[] inExprMetas,IExprDataReader exprDataReader){
  this.exprMetas=ExprMetaUtil.buildExprDataMetaInfo(inExprMetas);
  this.rsMeta=ExprMetaUtil.buildExprDataResultClass(exprMetas);
  this.exprDataReader=exprDataReader;
}","/** 
 * @param inExprMetas
 * @throws DataException 
 */
void init(ExprMetaInfo[] inExprMetas,IExprDataReader exprDataReader) throws DataException {
  this.exprMetas=ExprMetaUtil.buildExprDataMetaInfo(inExprMetas);
  this.rsMeta=ExprMetaUtil.buildExprDataResultClass(exprMetas);
  this.exprDataReader=exprDataReader;
}",0.9183673469387756
76426,"/** 
 * @param inputStreamMeta
 * @return
 * @throws DataException
 */
public static IResultClass buildExprDataResultClass(ExprMetaInfo[] exprMetas){
  List newProjectedColumns=new ArrayList();
  for (int i=0; i < exprMetas.length; i++) {
    String name=exprMetas[i].getName();
    Class clazz=DataType.getClass(exprMetas[i].getDataType());
    ResultFieldMetadata metaData=new ResultFieldMetadata(0,name,name,clazz,clazz == null ? null : clazz.toString(),i == exprMetas.length - 1 ? true : false);
    newProjectedColumns.add(metaData);
  }
  return new ResultClass(newProjectedColumns);
}","/** 
 * @param inputStreamMeta
 * @return
 * @throws DataException 
 * @throws DataException
 */
public static IResultClass buildExprDataResultClass(ExprMetaInfo[] exprMetas) throws DataException {
  List newProjectedColumns=new ArrayList();
  for (int i=0; i < exprMetas.length; i++) {
    String name=exprMetas[i].getName();
    Class clazz=DataType.getClass(exprMetas[i].getDataType());
    ResultFieldMetadata metaData=new ResultFieldMetadata(0,name,name,clazz,clazz == null ? null : clazz.toString(),i == exprMetas.length - 1 ? true : false);
    newProjectedColumns.add(metaData);
  }
  return new ResultClass(newProjectedColumns);
}",0.9609756097560976
76427,"private ResultClass doGetResultClass(List projectedColumns){
  String methodName=""String_Node_Str"";
  sm_logger.entering(sm_className,methodName,projectedColumns);
  assert(projectedColumns != null);
  ResultClass ret=new ResultClass(projectedColumns);
  sm_logger.exiting(sm_className,methodName,ret);
  return ret;
}","private ResultClass doGetResultClass(List projectedColumns) throws DataException {
  String methodName=""String_Node_Str"";
  sm_logger.entering(sm_className,methodName,projectedColumns);
  assert(projectedColumns != null);
  ResultClass ret=new ResultClass(projectedColumns);
  sm_logger.exiting(sm_className,methodName,ret);
  return ret;
}",0.9665653495440728
76428,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable report=executionContext.getRunnable();
    writer.saveDesign(report);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      ReportExecutor executor=new ReportExecutor(executionContext,report.getReportIR(),emitter);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
 finally {
    documentBuilder=null;
    closeReportDocument();
    closeFactory();
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable report=executionContext.getRunnable();
    writer.saveDesign(report);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      ReportExecutor executor=new ReportExecutor(executionContext,report.getReportIR(),emitter);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    documentBuilder=null;
    closeReportDocument();
    closeFactory();
  }
}",0.9605222256760956
76429,"/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
}","/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  String format=ParameterAccessor.getFormat(request);
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    context.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,createPDFrenderContext(request.getServletPath(),ParameterAccessor.isDesigner(request)));
  }
 else {
    context.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,createHTMLrenderContext(svgFlag,servletPath,request));
  }
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  HTMLRenderOption setting=new HTMLRenderOption();
  setting.setOutputStream(out);
  setting.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    setting.setEmbeddable(isEmbeddable);
    setting.setHtmlRtLFlag(rtl);
    setting.setInstanceIDs(activeIds);
    setting.setMasterPageContent(masterPage);
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  setting.setActionHandle(handler);
  renderTask.setRenderOption(setting);
  renderTask.setLocale(locale);
  initializeEmitterConfigs(request,setting.getOutputSetting());
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) && pageRange != null)     renderTask.setPageRange(pageRange);
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.266260162601626
76430,"/** 
 * Render reportlet page.
 * @param os
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String reportletId,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
}","/** 
 * Render reportlet page.
 * @param os
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String reportletId,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  String format=ParameterAccessor.getFormat(request);
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    context.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,createPDFrenderContext(request.getServletPath(),ParameterAccessor.isDesigner(request)));
  }
 else {
    context.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,createHTMLrenderContext(svgFlag,servletPath,request));
  }
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  HTMLRenderOption setting=new HTMLRenderOption();
  setting.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF)) {
    setting.setOutputFormat(IBirtConstants.PDF_RENDER_FORMAT);
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    setting.setOutputFormat(IBirtConstants.HTML_RENDER_FORMAT);
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    setting.setEmbeddable(isEmbeddable);
    setting.setHtmlRtLFlag(rtl);
    setting.setInstanceIDs(activeIds);
    setting.setMasterPageContent(masterPage);
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  setting.setActionHandle(handler);
  renderTask.setRenderOption(setting);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    if (format.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_PDF))     renderTask.render();
 else {
      renderTask.render();
    }
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e);
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.2547332185886403
76431,"/** 
 * register dataset of this item. <p> if dataset design of this item is not null, create a new <code>DataSet</code> object by the dataset design. open the dataset, move cursor to the first record , register the first row to script context, and return this <code>DataSet</code> object if dataset design is null, or open error, or empty resultset, return null.
 * @param item the report item design
 * @return the DataSet object if not null, else return null
 */
protected void executeQuery(){
  rset=null;
  IDataQueryDefinition query=design.getQuery();
  IBaseResultSet parentRset=getParentResultSet();
  context.setResultSet(parentRset);
  if (query != null) {
    try {
      rset=(IQueryResultSet)context.executeQuery(parentRset,query);
      context.setResultSet(rset);
      if (rset != null) {
        rsetEmpty=!rset.next();
        return;
      }
    }
 catch (    BirtException ex) {
      context.addException(ex);
    }
  }
}","/** 
 * register dataset of this item. <p> if dataset design of this item is not null, create a new <code>DataSet</code> object by the dataset design. open the dataset, move cursor to the first record , register the first row to script context, and return this <code>DataSet</code> object if dataset design is null, or open error, or empty resultset, return null.
 * @param item the report item design
 * @return the DataSet object if not null, else return null
 */
protected void executeQuery(){
  rset=null;
  IDataQueryDefinition query=design.getQuery();
  IBaseResultSet parentRset=getParentResultSet();
  context.setResultSet(parentRset);
  if (query != null) {
    try {
      rset=(IQueryResultSet)context.executeQuery(parentRset,query);
      context.setResultSet(rset);
      if (rset != null) {
        rsetEmpty=!rset.next();
        return;
      }
    }
 catch (    BirtException ex) {
      rsetEmpty=true;
      context.addException(ex);
    }
  }
}",0.9884575026232948
76432,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null)       resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    if (resourceFolder != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
    }
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null)       resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    if (resourceFolder != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
    }
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9986187845303868
76433,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    return ""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null)     resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (resourceFolder != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    return ""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    return ""String_Node_Str"" + bookmark + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null)     resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (resourceFolder != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}",0.9769145040598632
76434,"/** 
 * Map oda data type to model data type.
 * @param modelDataType
 * @return
 */
public static String toModelDataType(int modelDataType){
  if (modelDataType == DataType.INTEGER_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
 else   if (modelDataType == DataType.STRING_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
 else   if (modelDataType == DataType.DATE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
 else   if (modelDataType == DataType.DECIMAL_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL;
 else   if (modelDataType == DataType.DOUBLE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT;
  return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
}","/** 
 * Map oda data type to model data type.
 * @param modelDataType
 * @return
 */
public static String toModelDataType(int modelDataType){
  if (modelDataType == DataType.INTEGER_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
 else   if (modelDataType == DataType.STRING_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
 else   if (modelDataType == DataType.DATE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
 else   if (modelDataType == DataType.DECIMAL_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL;
 else   if (modelDataType == DataType.DOUBLE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT;
 else   if (modelDataType == DataType.BOOLEAN_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN;
  return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
}",0.926517571884984
76435,"private boolean matchType(ResultSetColumnHandle column){
  if (style.equals(DesignChoiceConstants.PARAM_TYPE_STRING) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(column.getDataType())) {
    return true;
  }
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || style.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER);
  }
  return false;
}","private boolean matchType(ResultSetColumnHandle column){
  if (style.equals(DesignChoiceConstants.PARAM_TYPE_STRING) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(column.getDataType())) {
    return true;
  }
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || style.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_BOOLEAN);
  }
  return false;
}",0.908102766798419
76436,"private boolean matchDataType(ScalarParameterHandle handle,ResultSetColumnHandle columnHandle){
  String type=handle.getDataType();
  if (handle == selectedParameter && dataTypeChooser.isEnabled()) {
    type=getSelectedDataType();
  }
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(columnHandle.getDataType())) {
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(columnHandle.getDataType());
  }
  return false;
}","private boolean matchDataType(ScalarParameterHandle handle,ResultSetColumnHandle columnHandle){
  String type=handle.getDataType();
  if (handle == selectedParameter && dataTypeChooser.isEnabled()) {
    type=getSelectedDataType();
  }
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(columnHandle.getDataType())) {
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(columnHandle.getDataType());
  }
  return false;
}",0.997596153846154
76437,"/** 
 * Create a parameter hint based on Parameter definition and value
 * @param paramDefn
 * @param evaValue
 */
private ParameterHint createParameterHint(IParameterDefinition paramDefn,Object paramValue) throws DataException {
  ParameterHint parameterHint=new ParameterHint(paramDefn.getName(),paramDefn.isInputMode(),paramDefn.isOutputMode());
  if (paramDefn.getPosition() > 0)   parameterHint.setPosition(paramDefn.getPosition());
  Class dataTypeClass=DataType.getClass(paramDefn.getType());
  if (dataTypeClass == DataType.AnyType.class || dataTypeClass == Boolean.class || dataTypeClass == Blob.class) {
    dataTypeClass=String.class;
  }
  parameterHint.setDataType(dataTypeClass);
  parameterHint.setNativeDataType(paramDefn.getNativeType());
  parameterHint.setIsInputOptional(paramDefn.isInputOptional());
  if (parameterHint.isInputMode())   parameterHint.setDefaultInputValue(getParameterValueString(dataTypeClass,paramValue));
  parameterHint.setIsNullable(paramDefn.isNullable());
  return parameterHint;
}","/** 
 * Create a parameter hint based on Parameter definition and value
 * @param paramDefn
 * @param evaValue
 */
private ParameterHint createParameterHint(IParameterDefinition paramDefn,Object paramValue) throws DataException {
  ParameterHint parameterHint=new ParameterHint(paramDefn.getName(),paramDefn.isInputMode(),paramDefn.isOutputMode());
  if (paramDefn.getPosition() > 0)   parameterHint.setPosition(paramDefn.getPosition());
  Class dataTypeClass=DataType.getClass(paramDefn.getType());
  if (dataTypeClass == DataType.AnyType.class || dataTypeClass == Blob.class) {
    dataTypeClass=String.class;
  }
  parameterHint.setDataType(dataTypeClass);
  parameterHint.setNativeDataType(paramDefn.getNativeType());
  parameterHint.setIsInputOptional(paramDefn.isInputOptional());
  if (parameterHint.isInputMode())   parameterHint.setDefaultInputValue(getParameterValueString(dataTypeClass,paramValue));
  parameterHint.setIsNullable(paramDefn.isNullable());
  return parameterHint;
}",0.9831349206349206
76438,"/** 
 * Map oda data type to model data type.
 * @param modelDataType
 * @return
 */
private static String toModelDataType(int modelDataType){
  if (modelDataType == DataType.INTEGER_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
 else   if (modelDataType == DataType.STRING_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
 else   if (modelDataType == DataType.DATE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
 else   if (modelDataType == DataType.DECIMAL_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL;
 else   if (modelDataType == DataType.DOUBLE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT;
  return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
}","/** 
 * Map oda data type to model data type.
 * @param modelDataType
 * @return
 */
private static String toModelDataType(int modelDataType){
  if (modelDataType == DataType.INTEGER_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
 else   if (modelDataType == DataType.STRING_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
 else   if (modelDataType == DataType.DATE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
 else   if (modelDataType == DataType.DECIMAL_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL;
 else   if (modelDataType == DataType.DOUBLE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT;
 else   if (modelDataType == DataType.BOOLEAN_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN;
  return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
}",0.9266113592852584
76439,"/** 
 * Adapts a Model data type (string) to Data Engine data type constant (integer) on column
 */
public static int adaptModelDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  return DataType.UNKNOWN_TYPE;
}","/** 
 * Adapts a Model data type (string) to Data Engine data type constant (integer) on column
 */
public static int adaptModelDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN))   return DataType.BOOLEAN_TYPE;
  return DataType.UNKNOWN_TYPE;
}",0.9256110520722636
76440,"/** 
 * Factory Methods
 */
protected Element createGradientPaint(SVGGradientPaint paint,boolean highlight){
  Element elem=dom.createElement(""String_Node_Str"");
  if (highlight)   elem.setAttribute(""String_Node_Str"",paint.getId() + ""String_Node_Str"");
 else   elem.setAttribute(""String_Node_Str"",paint.getId());
  elem.setAttribute(""String_Node_Str"",Double.toString(paint.getPoint1().getX()));
  elem.setAttribute(""String_Node_Str"",Double.toString(paint.getPoint1().getY()));
  elem.setAttribute(""String_Node_Str"",Double.toString(paint.getPoint2().getX()));
  elem.setAttribute(""String_Node_Str"",Double.toString(paint.getPoint2().getY()));
  elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  if (paint.isCyclic())   elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  Element startColor=dom.createElement(""String_Node_Str"");
  startColor.setAttribute(""String_Node_Str"",""String_Node_Str"");
  if (highlight)   startColor.setAttribute(""String_Node_Str"",serializeHighlightToString(paint.getColor1()));
 else   startColor.setAttribute(""String_Node_Str"",serializeToString(paint.getColor1()));
  elem.appendChild(startColor);
  Element endColor=dom.createElement(""String_Node_Str"");
  endColor.setAttribute(""String_Node_Str"",""String_Node_Str"");
  if (highlight)   endColor.setAttribute(""String_Node_Str"",serializeHighlightToString(paint.getColor2()));
 else   endColor.setAttribute(""String_Node_Str"",serializeToString(paint.getColor2()));
  elem.appendChild(endColor);
  return elem;
}","/** 
 * Factory Methods
 */
protected Element createGradientPaint(SVGGradientPaint paint,boolean highlight){
  Element elem=dom.createElement(""String_Node_Str"");
  if (highlight)   elem.setAttribute(""String_Node_Str"",paint.getId() + ""String_Node_Str"");
 else   elem.setAttribute(""String_Node_Str"",paint.getId());
  elem.setAttribute(""String_Node_Str"",Double.toString(paint.getPoint1().getX()));
  elem.setAttribute(""String_Node_Str"",Double.toString(paint.getPoint1().getY()));
  elem.setAttribute(""String_Node_Str"",Double.toString(paint.getPoint2().getX()));
  elem.setAttribute(""String_Node_Str"",Double.toString(paint.getPoint2().getY()));
  elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  if (paint.isCyclic())   elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  Element startColor=dom.createElement(""String_Node_Str"");
  startColor.setAttribute(""String_Node_Str"",""String_Node_Str"");
  if (highlight) {
    startColor.setAttribute(""String_Node_Str"",serializeHighlightToString(paint.getColor1()));
  }
 else {
    startColor.setAttribute(""String_Node_Str"",serializeToString(paint.getColor1()));
  }
  String alpha=alphaToString(paint.getColor1());
  if (alpha != null)   startColor.setAttribute(""String_Node_Str"",alpha);
  elem.appendChild(startColor);
  Element endColor=dom.createElement(""String_Node_Str"");
  endColor.setAttribute(""String_Node_Str"",""String_Node_Str"");
  if (highlight)   endColor.setAttribute(""String_Node_Str"",serializeHighlightToString(paint.getColor2()));
 else   endColor.setAttribute(""String_Node_Str"",serializeToString(paint.getColor2()));
  alpha=alphaToString(paint.getColor2());
  if (alpha != null)   endColor.setAttribute(""String_Node_Str"",alpha);
  elem.appendChild(endColor);
  return elem;
}",0.9199876428792092
76441,"public Object[] getChildren(Object parentElement){
  if (parentElement instanceof Object[]) {
    return (Object[])parentElement;
  }
  if (parentElement instanceof DimensionHandle) {
    HierarchyHandle hierarchy=(HierarchyHandle)((DimensionHandle)parentElement).getContent(DimensionHandle.HIERARCHIES_PROP,0);
    if (hierarchy.getLevelCount() > 0)     return new Object[]{hierarchy.getLevel(0)};
 else {
      virtualLevel.setModel(parentElement);
      return new Object[]{virtualLevel};
    }
  }
  if (parentElement instanceof CubeHandle) {
    CubeHandle handle=(CubeHandle)parentElement;
    if (dimension == null)     dimension=new CubeModel(handle,CubeModel.TYPE_DIMENSION);
 else     if (dimension.getModel() != handle)     dimension.setModel(handle);
    if (measures == null)     measures=new CubeModel(handle,CubeModel.TYPE_MEASURES);
 else     if (measures.getModel() != handle)     measures.setModel(handle);
    return new Object[]{dimension,measures};
  }
  if (parentElement instanceof CubeModel) {
    CubeModel model=(CubeModel)parentElement;
    if (model.getType() == CubeModel.TYPE_DIMENSION) {
      Object[] dimensions=model.getModel().getContents(CubeHandle.DIMENSIONS_PROP).toArray();
      if (dimensions == null || dimensions.length == 0) {
        TabularDimensionHandle dimension=DesignElementFactory.getInstance().newTabularDimension(""String_Node_Str"");
        try {
          model.getModel().add(CubeHandle.DIMENSIONS_PROP,dimension);
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
      return model.getModel().getContents(CubeHandle.DIMENSIONS_PROP).toArray();
    }
    if (model.getType() == CubeModel.TYPE_MEASURES) {
      Object[] measures=model.getModel().getContents(CubeHandle.MEASURE_GROUPS_PROP).toArray();
      if (measures == null || measures.length == 0) {
        TabularMeasureGroupHandle measureGroup=DesignElementFactory.getInstance().newTabularMeasureGroup(""String_Node_Str"");
        try {
          model.getModel().add(CubeHandle.MEASURE_GROUPS_PROP,measureGroup);
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
      return model.getModel().getContents(CubeHandle.MEASURE_GROUPS_PROP).toArray();
    }
  }
  if (parentElement instanceof LevelHandle) {
    HierarchyHandle hierarchy=(HierarchyHandle)((LevelHandle)parentElement).getContainer();
    int pos=((LevelHandle)parentElement).getIndex();
    return new Object[]{hierarchy.getLevel(pos + 1)};
  }
  if (parentElement instanceof MeasureGroupHandle) {
    Object[] measures=((MeasureGroupHandle)parentElement).getContents(MeasureGroupHandle.MEASURES_PROP).toArray();
    if (measures == null || measures.length == 0) {
      virtualMeasure.setModel(parentElement);
      return new Object[]{virtualMeasure};
    }
 else     return measures;
  }
  return new Object[0];
}","public Object[] getChildren(Object parentElement){
  if (parentElement instanceof Object[]) {
    return (Object[])parentElement;
  }
  if (parentElement instanceof DimensionHandle) {
    HierarchyHandle hierarchy=(HierarchyHandle)((DimensionHandle)parentElement).getContent(DimensionHandle.HIERARCHIES_PROP,0);
    if (hierarchy.getLevelCount() > 0)     return new Object[]{hierarchy.getLevel(0)};
 else {
      virtualLevel.setModel(parentElement);
      return new Object[]{virtualLevel};
    }
  }
  if (parentElement instanceof CubeHandle) {
    CubeHandle handle=(CubeHandle)parentElement;
    if (dimension == null)     dimension=new CubeModel(handle,CubeModel.TYPE_DIMENSION);
 else     if (dimension.getModel() != handle)     dimension.setModel(handle);
    if (measures == null)     measures=new CubeModel(handle,CubeModel.TYPE_MEASURES);
 else     if (measures.getModel() != handle)     measures.setModel(handle);
    return new Object[]{dimension,measures};
  }
  if (parentElement instanceof CubeModel) {
    CubeModel model=(CubeModel)parentElement;
    if (model.getType() == CubeModel.TYPE_DIMENSION) {
      return model.getModel().getContents(CubeHandle.DIMENSIONS_PROP).toArray();
    }
    if (model.getType() == CubeModel.TYPE_MEASURES) {
      return model.getModel().getContents(CubeHandle.MEASURE_GROUPS_PROP).toArray();
    }
  }
  if (parentElement instanceof LevelHandle) {
    HierarchyHandle hierarchy=(HierarchyHandle)((LevelHandle)parentElement).getContainer();
    int pos=((LevelHandle)parentElement).getIndex();
    return new Object[]{hierarchy.getLevel(pos + 1)};
  }
  if (parentElement instanceof MeasureGroupHandle) {
    Object[] measures=((MeasureGroupHandle)parentElement).getContents(MeasureGroupHandle.MEASURES_PROP).toArray();
    if (measures == null || measures.length == 0) {
      virtualMeasure.setModel(parentElement);
      return new Object[]{virtualMeasure};
    }
 else     return measures;
  }
  return new Object[0];
}",0.6646166461664617
76442,"public boolean hasChildren(Object element){
  if (element instanceof Object[]) {
    return ((Object[])element).length > 0;
  }
  if (element instanceof DimensionHandle) {
    return true;
  }
  if (element instanceof LevelHandle) {
    HierarchyHandle hierarchy=(HierarchyHandle)((LevelHandle)element).getContainer();
    int pos=((LevelHandle)element).getIndex();
    return hierarchy.getLevel(pos + 1) != null;
  }
  if (element instanceof MeasureGroupHandle) {
    return true;
  }
  if (element instanceof CubeHandle) {
    return true;
  }
  if (element instanceof CubeModel) {
    CubeModel model=(CubeModel)element;
    if (model.getType() == CubeModel.TYPE_DIMENSION) {
      List dimensionList=model.getModel().getContents(CubeHandle.DIMENSIONS_PROP);
      if (dimensionList != null && dimensionList.size() > 0)       return true;
    }
 else     if (model.getType() == CubeModel.TYPE_MEASURES) {
      List measureList=model.getModel().getContents(CubeHandle.MEASURE_GROUPS_PROP);
      if (measureList != null && measureList.size() > 0)       return true;
    }
  }
  return false;
}","public boolean hasChildren(Object element){
  if (element instanceof Object[]) {
    return ((Object[])element).length > 0;
  }
  if (element instanceof DimensionHandle) {
    return true;
  }
  if (element instanceof LevelHandle) {
    HierarchyHandle hierarchy=(HierarchyHandle)((LevelHandle)element).getContainer();
    int pos=((LevelHandle)element).getIndex();
    return hierarchy.getLevel(pos + 1) != null;
  }
  if (element instanceof MeasureGroupHandle) {
    return true;
  }
  if (element instanceof CubeHandle) {
    return true;
  }
  if (element instanceof CubeModel) {
    CubeModel model=(CubeModel)element;
    if (model.getType() == CubeModel.TYPE_DIMENSION) {
      List dimensionList=model.getModel().getContents(CubeHandle.DIMENSIONS_PROP);
      if (dimensionList == null || dimensionList.size() == 0) {
        TabularDimensionHandle dimension=DesignElementFactory.getInstance().newTabularDimension(""String_Node_Str"");
        try {
          model.getModel().add(CubeHandle.DIMENSIONS_PROP,dimension);
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
      return dimensionList != null && dimensionList.size() > 0;
    }
 else     if (model.getType() == CubeModel.TYPE_MEASURES) {
      List measureList=model.getModel().getContents(CubeHandle.MEASURE_GROUPS_PROP);
      if (measureList == null || measureList.size() == 0) {
        TabularMeasureGroupHandle measureGroup=DesignElementFactory.getInstance().newTabularMeasureGroup(""String_Node_Str"");
        try {
          model.getModel().add(CubeHandle.MEASURE_GROUPS_PROP,measureGroup);
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
      return measureList != null && measureList.size() > 0;
    }
  }
  return false;
}",0.727147766323024
76443,"/** 
 * Checks whether the data type needs quote.
 * @param romDataType the ROM defined data type
 * @return <code>true</code> if data type is string. Otherwise<code>false</code>.
 */
static boolean needsQuoteDelimiters(String romDataType){
  boolean needs=false;
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(romDataType))   needs=true;
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(romDataType))   needs=true;
 else   if (DesignChoiceConstants.PARAM_TYPE_ANY.equals(romDataType))   needs=true;
  return needs;
}","/** 
 * Checks whether the data type needs quote.
 * @param romDataType the ROM defined data type
 * @return <code>true</code> if data type is string. Otherwise<code>false</code>.
 */
static boolean needsQuoteDelimiters(String romDataType){
  boolean needs=false;
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(romDataType))   needs=true;
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(romDataType))   needs=true;
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(romDataType))   needs=true;
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(romDataType))   needs=true;
 else   if (DesignChoiceConstants.PARAM_TYPE_ANY.equals(romDataType))   needs=true;
  return needs;
}",0.8629032258064516
76444,"/** 
 * Tests the function of getDisplayValue().
 */
public void testGetDisplayValue(){
  Calendar dateCal=Calendar.getInstance(ThreadResources.getLocale());
  dateCal.set(1998,8,13,20,1,44);
  Date dateValue=dateCal.getTime();
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DATETIME,DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE,dateValue,ULocale.FRANCE));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DATETIME,null,dateValue));
  Double doubleValue=new Double(""String_Node_Str"");
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_FLOAT,DesignChoiceConstants.NUMBER_FORMAT_TYPE_GENERAL_NUMBER,doubleValue,ULocale.ENGLISH));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_FLOAT,DesignChoiceConstants.NUMBER_FORMAT_TYPE_GENERAL_NUMBER,doubleValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_FLOAT,DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY,doubleValue,ULocale.GERMAN));
  Integer integerValue=new Integer(""String_Node_Str"");
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_INTEGER,DesignChoiceConstants.NUMBER_FORMAT_TYPE_GENERAL_NUMBER,integerValue,ULocale.ENGLISH));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_INTEGER,DesignChoiceConstants.NUMBER_FORMAT_TYPE_GENERAL_NUMBER,integerValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_FLOAT,DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY,integerValue,ULocale.GERMAN));
  BigDecimal decimalValue=new BigDecimal(""String_Node_Str"");
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DECIMAL,DesignChoiceConstants.NUMBER_FORMAT_TYPE_STANDARD,decimalValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DECIMAL,DesignChoiceConstants.NUMBER_FORMAT_TYPE_STANDARD,decimalValue,ULocale.ENGLISH));
  String stringValue=""String_Node_Str"";
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_STRING,DesignChoiceConstants.STRING_FORMAT_TYPE_PHONE_NUMBER,stringValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_STRING,DesignChoiceConstants.STRING_FORMAT_TYPE_PHONE_NUMBER,stringValue,ULocale.ENGLISH));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_STRING,DesignChoiceConstants.STRING_FORMAT_TYPE_ZIP_CODE_4,stringValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_BOOLEAN,null,Boolean.FALSE,ULocale.ENGLISH));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_BOOLEAN,null,Boolean.FALSE,new ULocale(""String_Node_Str"")));
}","/** 
 * Tests the function of getDisplayValue().
 */
public void testGetDisplayValue(){
  Calendar dateCal=Calendar.getInstance(ThreadResources.getLocale());
  dateCal.set(1998,8,13,20,1,44);
  Date dateValue=dateCal.getTime();
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DATETIME,DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE,dateValue,ULocale.FRANCE));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DATETIME,null,dateValue));
  dateValue=new java.sql.Date(100,0,1);
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DATE,DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE,dateValue,ULocale.FRANCE));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DATE,null,dateValue));
  java.sql.Time timeValue=new java.sql.Time(14,20,30);
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_TIME,DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE,timeValue,ULocale.FRANCE));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_TIME,null,timeValue));
  Double doubleValue=new Double(""String_Node_Str"");
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_FLOAT,DesignChoiceConstants.NUMBER_FORMAT_TYPE_GENERAL_NUMBER,doubleValue,ULocale.ENGLISH));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_FLOAT,DesignChoiceConstants.NUMBER_FORMAT_TYPE_GENERAL_NUMBER,doubleValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_FLOAT,DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY,doubleValue,ULocale.GERMAN));
  Integer integerValue=new Integer(""String_Node_Str"");
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_INTEGER,DesignChoiceConstants.NUMBER_FORMAT_TYPE_GENERAL_NUMBER,integerValue,ULocale.ENGLISH));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_INTEGER,DesignChoiceConstants.NUMBER_FORMAT_TYPE_GENERAL_NUMBER,integerValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_FLOAT,DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY,integerValue,ULocale.GERMAN));
  BigDecimal decimalValue=new BigDecimal(""String_Node_Str"");
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DECIMAL,DesignChoiceConstants.NUMBER_FORMAT_TYPE_STANDARD,decimalValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DECIMAL,DesignChoiceConstants.NUMBER_FORMAT_TYPE_STANDARD,decimalValue,ULocale.ENGLISH));
  String stringValue=""String_Node_Str"";
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_STRING,DesignChoiceConstants.STRING_FORMAT_TYPE_PHONE_NUMBER,stringValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_STRING,DesignChoiceConstants.STRING_FORMAT_TYPE_PHONE_NUMBER,stringValue,ULocale.ENGLISH));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_STRING,DesignChoiceConstants.STRING_FORMAT_TYPE_ZIP_CODE_4,stringValue,ULocale.GERMAN));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_BOOLEAN,null,Boolean.FALSE,ULocale.ENGLISH));
  assertEquals(""String_Node_Str"",ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_BOOLEAN,null,Boolean.FALSE,new ULocale(""String_Node_Str"")));
}",0.8981903577842243
76445,"/** 
 * Tests to read properties on scalar parameters.
 * @throws SemanticException
 */
public void testGetsPropertiesOnParameter() throws SemanticException {
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle=(ScalarParameterHandle)params.get(0);
  assertFalse(handle.isHidden());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DECIMAL,handle.getDataType());
  assertFalse(handle.isConcealValue());
  assertEquals(""String_Node_Str"",handle.getDefaultValue());
  assertFalse(handle.isRequired());
  assertEquals(""String_Node_Str"",handle.getPattern());
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX,handle.getControlType());
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT,handle.getAlignment());
  Iterator iter=handle.choiceIterator();
  int count=0;
  for (; iter.hasNext(); iter.next())   count++;
  assertEquals(0,count);
  assertEquals(""String_Node_Str"",handle.getHelpText());
  assertEquals(""String_Node_Str"",handle.getHelpTextKey());
  handle=(ScalarParameterHandle)params.get(1);
  assertFalse(handle.isHidden());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_STRING,handle.getDataType());
  assertFalse(handle.isConcealValue());
  assertNull(handle.getDefaultValue());
  assertTrue(handle.isRequired());
  assertNull(handle.getPattern());
  assertNull(handle.getControlType());
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_AUTO,handle.getAlignment());
  assertNull(handle.getHelpText());
  assertEquals(""String_Node_Str"",handle.getPromptText());
  handle.setPromptText(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPromptText());
  assertEquals(""String_Node_Str"",handle.getPromptTextID());
  handle.setPromptTextID(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPromptTextID());
  assertEquals(""String_Node_Str"",handle.getDataSetName());
  DataSetHandle dataSet=handle.getDataSet();
  assertEquals(""String_Node_Str"",dataSet.getName());
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  assertEquals(""String_Node_Str"",handle.getLabelExpr());
  handle=(ScalarParameterHandle)params.get(2);
  assertTrue(handle.isMustMatch());
  assertFalse(handle.isFixedOrder());
  iter=handle.choiceIterator();
  assertNotNull(iter);
  count=0;
  for (; iter.hasNext(); iter.next())   count++;
  assertEquals(0,count);
  handle=(ScalarParameterHandle)params.get(3);
  assertTrue(handle.isMustMatch());
  assertTrue(handle.isFixedOrder());
  StructureHandle[] choices=new StructureHandle[3];
  count=0;
  for (iter=handle.choiceIterator(); iter.hasNext(); count++)   choices[count]=(StructureHandle)(iter.next());
  assertEquals(3,count);
  assertEquals(""String_Node_Str"",choices[0].getMember(SelectionChoice.VALUE_MEMBER).getValue());
  assertEquals(""String_Node_Str"",choices[0].getMember(SelectionChoice.LABEL_MEMBER).getValue());
  assertEquals(""String_Node_Str"",choices[0].getMember(SelectionChoice.LABEL_RESOURCE_KEY_MEMBER).getValue());
  assertEquals(""String_Node_Str"",choices[2].getMember(SelectionChoice.VALUE_MEMBER).getValue());
  assertNull(choices[2].getMember(SelectionChoice.LABEL_MEMBER).getValue());
  assertNull(choices[2].getMember(SelectionChoice.LABEL_RESOURCE_KEY_MEMBER).getValue());
}","/** 
 * Tests to read properties on scalar parameters.
 * @throws SemanticException
 */
public void testGetsPropertiesOnParameter() throws SemanticException {
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle=(ScalarParameterHandle)params.get(4);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATE,handle.getDataType());
  handle=(ScalarParameterHandle)params.get(5);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_TIME,handle.getDataType());
  handle=(ScalarParameterHandle)params.get(0);
  assertFalse(handle.isHidden());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DECIMAL,handle.getDataType());
  assertFalse(handle.isConcealValue());
  assertEquals(""String_Node_Str"",handle.getDefaultValue());
  assertFalse(handle.isRequired());
  assertEquals(""String_Node_Str"",handle.getPattern());
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX,handle.getControlType());
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT,handle.getAlignment());
  Iterator iter=handle.choiceIterator();
  int count=0;
  for (; iter.hasNext(); iter.next())   count++;
  assertEquals(0,count);
  assertEquals(""String_Node_Str"",handle.getHelpText());
  assertEquals(""String_Node_Str"",handle.getHelpTextKey());
  handle=(ScalarParameterHandle)params.get(1);
  assertFalse(handle.isHidden());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_STRING,handle.getDataType());
  assertFalse(handle.isConcealValue());
  assertNull(handle.getDefaultValue());
  assertTrue(handle.isRequired());
  assertNull(handle.getPattern());
  assertNull(handle.getControlType());
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_AUTO,handle.getAlignment());
  assertNull(handle.getHelpText());
  assertEquals(""String_Node_Str"",handle.getPromptText());
  handle.setPromptText(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPromptText());
  assertEquals(""String_Node_Str"",handle.getPromptTextID());
  handle.setPromptTextID(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPromptTextID());
  assertEquals(""String_Node_Str"",handle.getDataSetName());
  DataSetHandle dataSet=handle.getDataSet();
  assertEquals(""String_Node_Str"",dataSet.getName());
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  assertEquals(""String_Node_Str"",handle.getLabelExpr());
  handle=(ScalarParameterHandle)params.get(2);
  assertTrue(handle.isMustMatch());
  assertFalse(handle.isFixedOrder());
  iter=handle.choiceIterator();
  assertNotNull(iter);
  count=0;
  for (; iter.hasNext(); iter.next())   count++;
  assertEquals(0,count);
  handle=(ScalarParameterHandle)params.get(3);
  assertTrue(handle.isMustMatch());
  assertTrue(handle.isFixedOrder());
  StructureHandle[] choices=new StructureHandle[3];
  count=0;
  for (iter=handle.choiceIterator(); iter.hasNext(); count++)   choices[count]=(StructureHandle)(iter.next());
  assertEquals(3,count);
  assertEquals(""String_Node_Str"",choices[0].getMember(SelectionChoice.VALUE_MEMBER).getValue());
  assertEquals(""String_Node_Str"",choices[0].getMember(SelectionChoice.LABEL_MEMBER).getValue());
  assertEquals(""String_Node_Str"",choices[0].getMember(SelectionChoice.LABEL_RESOURCE_KEY_MEMBER).getValue());
  assertEquals(""String_Node_Str"",choices[2].getMember(SelectionChoice.VALUE_MEMBER).getValue());
  assertNull(choices[2].getMember(SelectionChoice.LABEL_MEMBER).getValue());
  assertNull(choices[2].getMember(SelectionChoice.LABEL_RESOURCE_KEY_MEMBER).getValue());
}",0.9631184407796102
76446,"/** 
 * Sets properties on scalar parameters.
 * @throws Exception
 */
public void testSetsPropertiesOnParameter() throws Exception {
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle=(ScalarParameterHandle)params.get(0);
  assertFalse(handle.isHidden());
  handle.setHidden(true);
  assertTrue(handle.isHidden());
  handle.setDataType(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATETIME,handle.getDataType());
  handle.setDataType(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_FLOAT,handle.getDataType());
  handle.setConcealValue(true);
  assertTrue(handle.isConcealValue());
  handle.setDefaultValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getDefaultValue());
  handle.setIsRequired(false);
  assertFalse(handle.isRequired());
  handle.setPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPattern());
  handle.setControlType(DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON);
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON,handle.getControlType());
  handle.setAlignment(DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT);
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT,handle.getAlignment());
}","/** 
 * Sets properties on scalar parameters.
 * @throws Exception
 */
public void testSetsPropertiesOnParameter() throws Exception {
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle=(ScalarParameterHandle)params.get(0);
  assertFalse(handle.isHidden());
  handle.setHidden(true);
  assertTrue(handle.isHidden());
  handle.setDataType(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATETIME,handle.getDataType());
  handle.setDataType(DesignChoiceConstants.PARAM_TYPE_DATE);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATE,handle.getDataType());
  handle.setDataType(DesignChoiceConstants.PARAM_TYPE_TIME);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_TIME,handle.getDataType());
  handle.setDataType(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_FLOAT,handle.getDataType());
  handle.setConcealValue(true);
  assertTrue(handle.isConcealValue());
  handle.setDefaultValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getDefaultValue());
  handle.setIsRequired(false);
  assertFalse(handle.isRequired());
  handle.setPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPattern());
  handle.setControlType(DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON);
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON,handle.getControlType());
  handle.setAlignment(DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT);
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT,handle.getAlignment());
}",0.90406162464986
76447,"private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ParameterDefinition parameter=attrBean.findParameterDefinition(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item == null)       continue;
      Object value=item.getValue();
      if (value == null)       continue;
      try {
        value=DataUtil.convert(value,parameter.getDataType());
      }
 catch (      Exception e) {
      }
      String displayValue=DataUtil.getDisplayValue(value);
      if (displayValue == null)       continue;
      String label=item.getLabel();
      if (label == null || label.length() <= 0) {
        label=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),value,attrBean.getLocale());
      }
      if (label != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(displayValue);
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}","private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ParameterDefinition parameter=attrBean.findParameterDefinition(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item == null)       continue;
      Object value=item.getValue();
      try {
        value=DataUtil.convert(value,parameter.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value);
      if (displayValue == null)       continue;
      String label=item.getLabel();
      if (label == null || label.length() <= 0) {
        label=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),value,attrBean.getLocale());
      }
      if (label != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(displayValue);
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}",0.9796191112596058
76448,"/** 
 * Removes a dimension view in the given position. Index is 0-based integer.
 * @param index the position index of the dimension to remove, 0-based integer
 * @throws SemanticException
 */
public void removeDimension(int index) throws SemanticException {
  DimensionViewHandle dimensionView=getDimension(index);
  if (dimensionView == null) {
    logger.log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DIMENSION_NOT_FOUND,String.valueOf(index));
    return;
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(null);
  try {
    CrosstabReportItemHandle crosstab=getCrosstab();
    if (crosstab != null) {
      for (int i=0; i < dimensionView.getLevelCount(); i++) {
        LevelViewHandle levelView=dimensionView.getLevel(i);
        CrosstabUtil.adjustForLevelView(crosstab,levelView,dimensionView.getCubeDimensionName(),levelView.getCubeLevelName(),getAxisType(),false);
      }
    }
    dimensionView.handle.drop();
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Removes a dimension view in the given position. Index is 0-based integer.
 * @param index the position index of the dimension to remove, 0-based integer
 * @throws SemanticException
 */
public void removeDimension(int index) throws SemanticException {
  DimensionViewHandle dimensionView=getDimension(index);
  if (dimensionView == null) {
    logger.log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DIMENSION_NOT_FOUND,String.valueOf(index));
    return;
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(null);
  try {
    CrosstabReportItemHandle crosstab=getCrosstab();
    if (crosstab != null) {
      for (int i=0; i < dimensionView.getLevelCount(); i++) {
        LevelViewHandle levelView=dimensionView.getLevel(i);
        CrosstabModelUtil.adjustForLevelView(dimensionView,levelView,false);
      }
    }
    dimensionView.handle.drop();
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.947211155378486
76449,"/** 
 * Adds a row/column grand total to the crosstab if it is empty. The axis type can be either <code>ICrosstabConstants.ROW_AXIS_TYPE</code> or <code>ICrosstabConstants.COLUMN_AXIS_TYPE</code>.
 * @param axisType row/column axis type
 * @return the grand total of this crosstab view
 */
public CrosstabCellHandle addGrandTotal(){
  PropertyHandle propHandle=getGrandTotalProperty();
  if (propHandle.getContentCount() > 0)   return getGrandTotal();
  CommandStack stack=getCommandStack();
  try {
    stack.startTrans(null);
    ExtendedItemHandle grandTotal=CrosstabExtendedItemFactory.createCrosstabCell(moduleHandle);
    propHandle.add(grandTotal);
    CrosstabReportItemHandle crosstab=getCrosstab();
    if (crosstab != null) {
      CrosstabUtil.adjustMeasureAggregations(crosstab,getAxisType(),null,null,null,false,true);
    }
    stack.commit();
    return (CrosstabCellHandle)CrosstabUtil.getReportItem(grandTotal);
  }
 catch (  SemanticException e) {
    logger.log(Level.INFO,e.getMessage(),e);
    stack.rollback();
    return null;
  }
}","/** 
 * Adds a row/column grand total to the crosstab if it is empty. The axis type can be either <code>ICrosstabConstants.ROW_AXIS_TYPE</code> or <code>ICrosstabConstants.COLUMN_AXIS_TYPE</code>.
 * @param axisType row/column axis type
 * @return the grand total of this crosstab view
 */
public CrosstabCellHandle addGrandTotal(){
  PropertyHandle propHandle=getGrandTotalProperty();
  if (propHandle.getContentCount() > 0)   return getGrandTotal();
  CommandStack stack=getCommandStack();
  try {
    stack.startTrans(null);
    ExtendedItemHandle grandTotal=CrosstabExtendedItemFactory.createCrosstabCell(moduleHandle);
    propHandle.add(grandTotal);
    CrosstabReportItemHandle crosstab=getCrosstab();
    if (crosstab != null) {
      CrosstabModelUtil.adjustMeasureAggregations(crosstab,getAxisType(),true);
    }
    stack.commit();
    return (CrosstabCellHandle)CrosstabUtil.getReportItem(grandTotal);
  }
 catch (  SemanticException e) {
    logger.log(Level.INFO,e.getMessage(),e);
    stack.rollback();
    return null;
  }
}",0.9875954198473282
76450,"/** 
 * Removes grand total from crosstab if it is not empty, otherwise do nothing.
 */
public void removeGrandTotal(){
  PropertyHandle propHandle=getGrandTotalProperty();
  if (propHandle.getContentCount() > 0) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabUtil.adjustMeasureAggregations(crosstab,getAxisType(),null,null,null,false,false);
      }
      propHandle.drop(0);
    }
 catch (    SemanticException e) {
      logger.log(Level.INFO,e.getMessage(),e);
      stack.rollback();
    }
    stack.commit();
  }
}","/** 
 * Removes grand total from crosstab if it is not empty, otherwise do nothing.
 */
public void removeGrandTotal(){
  PropertyHandle propHandle=getGrandTotalProperty();
  if (propHandle.getContentCount() > 0) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabModelUtil.adjustMeasureAggregations(crosstab,getAxisType(),false);
      }
      propHandle.drop(0);
    }
 catch (    SemanticException e) {
      logger.log(Level.INFO,e.getMessage(),e);
      stack.rollback();
    }
    stack.commit();
  }
}",0.9799382716049384
76451,"/** 
 * Inserts a level view to the given position. The position index is a 0-based integer.
 * @param levelHandle the cube level handle to insert
 * @param index the target position, 0-based integer
 * @return the level view handle that is generated and inserted to thisdimension view, null if OLAP level handle is used by another level view or insert operation fails
 * @throws SemanticException
 */
public LevelViewHandle insertLevel(LevelHandle levelHandle,int index) throws SemanticException {
  ExtendedItemHandle extendedItemHandle=CrosstabExtendedItemFactory.createLevelView(moduleHandle,levelHandle);
  if (extendedItemHandle == null)   return null;
  if (levelHandle != null) {
    if (!levelHandle.getContainer().getContainer().getQualifiedName().equals(getCubeDimensionName())) {
      logger.log(Level.WARNING,""String_Node_Str"");
      return null;
    }
    if (getLevel(levelHandle.getQualifiedName()) != null) {
      logger.log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_LEVEL,levelHandle.getQualifiedName());
      throw new CrosstabException(handle.getElement(),new String[]{levelHandle.getQualifiedName(),handle.getElement().getIdentifier()},MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_LEVEL);
    }
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(null);
  LevelViewHandle levelView=null;
  try {
    getLevelsProperty().add(extendedItemHandle,index);
    if (levelHandle != null) {
      levelView=(LevelViewHandle)CrosstabUtil.getReportItem(extendedItemHandle,LEVEL_VIEW_EXTENSION_NAME);
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (levelView != null && crosstab != null) {
        CrosstabUtil.adjustForLevelView(crosstab,levelView,getCubeDimensionName(),levelHandle.getQualifiedName(),getAxisType(),true);
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return levelView;
}","/** 
 * Inserts a level view to the given position. The position index is a 0-based integer.
 * @param levelHandle the cube level handle to insert
 * @param index the target position, 0-based integer
 * @return the level view handle that is generated and inserted to thisdimension view, null if OLAP level handle is used by another level view or insert operation fails
 * @throws SemanticException
 */
public LevelViewHandle insertLevel(LevelHandle levelHandle,int index) throws SemanticException {
  ExtendedItemHandle extendedItemHandle=CrosstabExtendedItemFactory.createLevelView(moduleHandle,levelHandle);
  if (extendedItemHandle == null)   return null;
  if (levelHandle != null) {
    if (!levelHandle.getContainer().getContainer().getQualifiedName().equals(getCubeDimensionName())) {
      logger.log(Level.WARNING,""String_Node_Str"");
      return null;
    }
    if (getLevel(levelHandle.getQualifiedName()) != null) {
      logger.log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_LEVEL,levelHandle.getQualifiedName());
      throw new CrosstabException(handle.getElement(),new String[]{levelHandle.getQualifiedName(),handle.getElement().getIdentifier()},MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_LEVEL);
    }
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(null);
  LevelViewHandle levelView=null;
  try {
    getLevelsProperty().add(extendedItemHandle,index);
    if (levelHandle != null) {
      levelView=(LevelViewHandle)CrosstabUtil.getReportItem(extendedItemHandle,LEVEL_VIEW_EXTENSION_NAME);
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (levelView != null && crosstab != null) {
        CrosstabModelUtil.adjustForLevelView(this,levelView,true);
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return levelView;
}",0.9060420548309822
76452,"/** 
 * Removes a level view at the given position. The position index is 0-based integer.
 * @param index the position index of the level view to remove
 * @throws SemanticException
 */
public void removeLevel(int index) throws SemanticException {
  LevelViewHandle levelView=getLevel(index);
  if (levelView != null) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabUtil.adjustForLevelView(crosstab,levelView,getCubeDimensionName(),levelView.getCubeLevelName(),getAxisType(),false);
      }
      levelView.handle.drop();
    }
 catch (    SemanticException e) {
      stack.rollback();
      throw e;
    }
    stack.commit();
  }
}","/** 
 * Removes a level view at the given position. The position index is 0-based integer.
 * @param index the position index of the level view to remove
 * @throws SemanticException
 */
public void removeLevel(int index) throws SemanticException {
  LevelViewHandle levelView=getLevel(index);
  if (levelView != null) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabModelUtil.adjustForLevelView(this,levelView,false);
      }
      levelView.handle.drop();
    }
 catch (    SemanticException e) {
      stack.rollback();
      throw e;
    }
    stack.commit();
  }
}",0.943652410047522
76453,"/** 
 * Removes the aggregation header cell if it is not empty, otherwise do nothing.
 */
public void removeAggregationHeader(){
  if (getAggregationHeaderProperty().getContentCount() > 0) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabUtil.adjustMeasureAggregations(crosstab,getAxisType(),this,((DimensionViewHandle)getContainer()).getCubeDimensionName(),getCubeLevelName(),isInnerMost(),false);
      }
      getAggregationHeaderProperty().drop(0);
    }
 catch (    SemanticException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      stack.rollback();
    }
    stack.commit();
  }
}","/** 
 * Removes the aggregation header cell if it is not empty, otherwise do nothing.
 */
public void removeAggregationHeader(){
  if (getAggregationHeaderProperty().getContentCount() > 0) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabModelUtil.adjustMeasureAggregations(crosstab,this,false);
      }
      getAggregationHeaderProperty().drop(0);
    }
 catch (    SemanticException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      stack.rollback();
    }
    stack.commit();
  }
}",0.917094644167278
76454,"/** 
 * Adds a aggregation header to the level if it is empty.
 */
public void addAggregationHeader(){
  if (getAggregationHeaderProperty().getContentCount() != 0) {
    logger.log(Level.INFO,""String_Node_Str"");
    return;
  }
  if (isInnerMost()) {
    logger.log(Level.WARNING,""String_Node_Str"" + handle.getName() + ""String_Node_Str"");
    return;
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(null);
  try {
    getAggregationHeaderProperty().add(CrosstabExtendedItemFactory.createCrosstabCell(moduleHandle));
    CrosstabReportItemHandle crosstab=getCrosstab();
    if (crosstab != null) {
      CrosstabUtil.adjustMeasureAggregations(crosstab,getAxisType(),this,((DimensionViewHandle)getContainer()).getCubeDimensionName(),getCubeLevelName(),false,true);
    }
  }
 catch (  SemanticException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    stack.rollback();
  }
  stack.commit();
}","/** 
 * Adds a aggregation header to the level if it is empty.
 */
public void addAggregationHeader(){
  if (getAggregationHeaderProperty().getContentCount() != 0) {
    logger.log(Level.INFO,""String_Node_Str"");
    return;
  }
  if (isInnerMost()) {
    logger.log(Level.WARNING,""String_Node_Str"" + handle.getName() + ""String_Node_Str"");
    return;
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(null);
  try {
    getAggregationHeaderProperty().add(CrosstabExtendedItemFactory.createCrosstabCell(moduleHandle));
    CrosstabReportItemHandle crosstab=getCrosstab();
    if (crosstab != null) {
      CrosstabModelUtil.adjustMeasureAggregations(crosstab,this,true);
    }
  }
 catch (  SemanticException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    stack.rollback();
  }
  stack.commit();
}",0.9394114252740912
76455,"public void cancel(Object signal){
  if (signal == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  cancelFlag=true;
  long waitingTime=0;
  do {
    waitingTime+=100;
    try {
      Thread.sleep(100);
    }
 catch (    Exception ex) {
    }
    if (runningStatus != RUNNING_STATUS_RUNNING) {
      return;
    }
  }
 while (waitingTime < 5000);
  return;
}","public void cancel(Object signal){
  if (signal == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  cancelFlag=true;
  long waitingTime=0;
  do {
    waitingTime+=100;
    try {
      Thread.sleep(100);
    }
 catch (    Exception ex) {
    }
    if (runningStatus != STATUS_RUNNING) {
      return;
    }
  }
 while (waitingTime < 5000);
  return;
}",0.9894179894179894
76456,"public int getStatus(){
}","public int getStatus(){
  return runningStatus;
}",0.6756756756756757
76457,"public void setErrorHandlingOption(int option){
  if (option == CANCEL_ON_ERROR) {
    this.errorHandlingOption=CANCEL_ON_ERROR;
    executionContext.setCancelOnError(true);
  }
 else {
    this.errorHandlingOption=CONTINUE_ON_ERROR;
    executionContext.setCancelOnError(false);
  }
}","public void setErrorHandlingOption(int option){
  if (option == CANCEL_ON_ERROR) {
    executionContext.setCancelOnError(true);
  }
 else {
    executionContext.setCancelOnError(false);
  }
}",0.8025210084033614
76458,"public void run() throws EngineException {
  try {
    runningStatus=RUNNING_STATUS_RUNNING;
    doRun();
  }
  finally {
    runningStatus=RUNNING_STATUS_STOP;
  }
}","public void run() throws EngineException {
  try {
    changeStatusToRunning();
    doRun();
  }
  finally {
    changeStatusToStopped();
  }
}",0.7249190938511327
76459,"/** 
 * @deprecated
 */
public void run(FolderArchive fArchive) throws EngineException {
  try {
    runningStatus=RUNNING_STATUS_RUNNING;
    setDataSource(fArchive);
    run((IDocArchiveWriter)fArchive);
  }
  finally {
    runningStatus=RUNNING_STATUS_STOP;
  }
}","/** 
 * @deprecated
 */
public void run(FolderArchive fArchive) throws EngineException {
  try {
    changeStatusToRunning();
    setDataSource(fArchive);
    run((IDocArchiveWriter)fArchive);
  }
  finally {
    changeStatusToStopped();
  }
}",0.7819253438113949
76460,"public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof ReportItemDesign) {
    return ((ReportItemDesign)generateBy).getStyleName();
  }
  return null;
}","public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof StyledElementDesign) {
    return ((StyledElementDesign)generateBy).getStyleName();
  }
  return null;
}",0.9116279069767442
76461,"public IPageContent executeMasterPage(int pageNo,MasterPageDesign masterPage){
  IReportContent reportContent=context.getReportContent();
  IPageContent pageContent=reportContent.createPageContent();
  pageContent.setGenerateBy(masterPage);
  pageContent.setPageNumber(pageNo);
  context.setPageNumber(pageNo);
  if (masterPage instanceof SimpleMasterPageDesign) {
    TOCBuilder tocBuilder=context.getTOCBuilder();
    context.setTOCBuilder(null);
    context.setExecutingMasterPage(true);
    SimpleMasterPageDesign pageDesign=(SimpleMasterPageDesign)masterPage;
    pageContent.setStyleClass(masterPage.getStyleName());
    InstanceID iid=new InstanceID(null,pageDesign.getID(),null);
    pageContent.setInstanceID(iid);
    IContent header=reportContent.createContainerContent();
    header.setStyleClass(masterPage.getStyleName());
    pageContent.setPageHeader(header);
    header.setParent(pageContent);
    IContentEmitter domEmitter=new DOMBuilderEmitter(header);
    ExecutorManager manager=new ExecutorManager(context,domEmitter,executorContext);
    for (int i=0; i < pageDesign.getHeaderCount(); i++) {
      ReportItemDesign design=pageDesign.getHeader(i);
      ReportItemExecutor executor=manager.createExecutor(null,design);
      executor.execute(design,domEmitter);
    }
    IContent body=reportContent.createContainerContent();
    pageContent.setPageBody(body);
    body.setParent(pageContent);
    IContent footer=reportContent.createContainerContent();
    footer.setStyleClass(masterPage.getStyleName());
    pageContent.setPageFooter(footer);
    footer.setParent(pageContent);
    domEmitter=new DOMBuilderEmitter(footer);
    manager=new ExecutorManager(context,domEmitter,executorContext);
    for (int i=0; i < pageDesign.getFooterCount(); i++) {
      ReportItemDesign design=pageDesign.getFooter(i);
      ReportItemExecutor executor=manager.createExecutor(null,design);
      executor.execute(design,domEmitter);
    }
    context.setExecutingMasterPage(false);
    context.setTOCBuilder(tocBuilder);
  }
  return pageContent;
}","public IPageContent executeMasterPage(int pageNo,MasterPageDesign masterPage){
  IReportContent reportContent=context.getReportContent();
  IPageContent pageContent=reportContent.createPageContent();
  pageContent.setGenerateBy(masterPage);
  pageContent.setPageNumber(pageNo);
  context.setPageNumber(pageNo);
  if (masterPage instanceof SimpleMasterPageDesign) {
    TOCBuilder tocBuilder=context.getTOCBuilder();
    context.setTOCBuilder(null);
    context.setExecutingMasterPage(true);
    SimpleMasterPageDesign pageDesign=(SimpleMasterPageDesign)masterPage;
    InstanceID iid=new InstanceID(null,pageDesign.getID(),null);
    pageContent.setInstanceID(iid);
    IContent header=reportContent.createContainerContent();
    pageContent.setPageHeader(header);
    header.setParent(pageContent);
    IContentEmitter domEmitter=new DOMBuilderEmitter(header);
    ExecutorManager manager=new ExecutorManager(context,domEmitter,executorContext);
    for (int i=0; i < pageDesign.getHeaderCount(); i++) {
      ReportItemDesign design=pageDesign.getHeader(i);
      ReportItemExecutor executor=manager.createExecutor(null,design);
      executor.execute(design,domEmitter);
    }
    IContent body=reportContent.createContainerContent();
    pageContent.setPageBody(body);
    body.setParent(pageContent);
    IContent footer=reportContent.createContainerContent();
    pageContent.setPageFooter(footer);
    footer.setParent(pageContent);
    domEmitter=new DOMBuilderEmitter(footer);
    manager=new ExecutorManager(context,domEmitter,executorContext);
    for (int i=0; i < pageDesign.getFooterCount(); i++) {
      ReportItemDesign design=pageDesign.getFooter(i);
      ReportItemExecutor executor=manager.createExecutor(null,design);
      executor.execute(design,domEmitter);
    }
    context.setExecutingMasterPage(false);
    context.setTOCBuilder(tocBuilder);
  }
  return pageContent;
}",0.9585649317837291
76462,"/** 
 * Test CssSharedStyleHandle is readonly.
 * @throws Exception
 */
public void testReadOnlyCssStyleHandle() throws Exception {
  openDesign(""String_Node_Str"");
  designHandle.addCss(""String_Node_Str"");
  List styles=designHandle.getAllStyles();
  SharedStyleHandle styleHandle=(SharedStyleHandle)styles.get(0);
  try {
    styleHandle.setFontStyle(DesignChoiceConstants.FONT_STYLE_ITALIC);
    fail();
  }
 catch (  IllegalOperationException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_READONLY,e.getMessage());
  }
  HighlightRule highlightRule=StructureFactory.createHighlightRule();
  PropertyHandle propHandle=styleHandle.getPropertyHandle(IStyleModel.HIGHLIGHT_RULES_PROP);
  try {
    propHandle.addItem(highlightRule);
    fail();
  }
 catch (  IllegalOperationException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_READONLY,e.getMessage());
  }
  DimensionHandle fontSize=styleHandle.getFontSize();
  try {
    fontSize.setStringValue(""String_Node_Str"");
    fail();
  }
 catch (  IllegalOperationException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_READONLY,e.getMessage());
  }
}","/** 
 * Test CssSharedStyleHandle is readonly.
 * @throws Exception
 */
public void testReadOnlyCssStyleHandle() throws Exception {
  openDesign(""String_Node_Str"");
  CssStyleSheetHandle sheetHandle=designHandle.openCssStyleSheet(getResource(""String_Node_Str"").getFile());
  designHandle.addCss(sheetHandle);
  List styles=designHandle.getAllStyles();
  SharedStyleHandle styleHandle=(SharedStyleHandle)styles.get(0);
  try {
    styleHandle.setFontStyle(DesignChoiceConstants.FONT_STYLE_ITALIC);
    fail();
  }
 catch (  IllegalOperationException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_READONLY,e.getMessage());
  }
  HighlightRule highlightRule=StructureFactory.createHighlightRule();
  PropertyHandle propHandle=styleHandle.getPropertyHandle(IStyleModel.HIGHLIGHT_RULES_PROP);
  try {
    propHandle.addItem(highlightRule);
    fail();
  }
 catch (  IllegalOperationException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_READONLY,e.getMessage());
  }
  DimensionHandle fontSize=styleHandle.getFontSize();
  try {
    fontSize.setStringValue(""String_Node_Str"");
    fail();
  }
 catch (  IllegalOperationException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_READONLY,e.getMessage());
  }
}",0.940119760479042
76463,"/** 
 * Tests css style sheet.
 * @throws Exception
 */
public void testCssStyleSheet() throws Exception {
  openDesign(""String_Node_Str"");
  designHandle.addCss(""String_Node_Str"");
  List styles=designHandle.getAllStyles();
  assertEquals(5,styles.size());
  try {
    designHandle.addCss(""String_Node_Str"");
    fail();
  }
 catch (  CssException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_DUPLICATE_CSS,e.getErrorCode());
  }
  LabelHandle labelHandle=designHandle.getElementFactory().newLabel(""String_Node_Str"");
  designHandle.getBody().add(labelHandle);
  labelHandle.setStyle((SharedStyleHandle)styles.get(0));
  IncludedCssStyleSheetHandle sheetHandle=(IncludedCssStyleSheetHandle)designHandle.includeCssesIterator().next();
  ElementRefValue value=(ElementRefValue)labelHandle.getElement().getLocalProperty(designHandle.getModule(),""String_Node_Str"");
  assertTrue(value.isResolved());
  designHandle.dropCss(sheetHandle);
  assertFalse(value.isResolved());
  assertNull(designHandle.includeCssesIterator().next());
  assertNull(labelHandle.getStyle());
}","/** 
 * Tests css style sheet.
 * @throws Exception
 */
public void testCssStyleSheet() throws Exception {
  openDesign(""String_Node_Str"");
  assertTrue(designHandle.canAddCssStyleSheet(getResource(""String_Node_Str"").getFile()));
  CssStyleSheetHandle sheetHandle=designHandle.openCssStyleSheet(getResource(""String_Node_Str"").getFile());
  designHandle.addCss(sheetHandle);
  assertFalse(designHandle.canAddCssStyleSheet(getResource(""String_Node_Str"").getFile()));
  assertFalse(designHandle.canAddCssStyleSheet(sheetHandle));
  List styles=designHandle.getAllStyles();
  assertEquals(5,styles.size());
  try {
    designHandle.addCss(sheetHandle);
    fail();
  }
 catch (  CssException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_DUPLICATE_CSS,e.getErrorCode());
  }
  LabelHandle labelHandle=designHandle.getElementFactory().newLabel(""String_Node_Str"");
  designHandle.getBody().add(labelHandle);
  labelHandle.setStyle((SharedStyleHandle)styles.get(0));
  assertTrue(designHandle.canDropCssStyleSheet(sheetHandle));
  ElementRefValue value=(ElementRefValue)labelHandle.getElement().getLocalProperty(designHandle.getModule(),""String_Node_Str"");
  assertTrue(value.isResolved());
  designHandle.dropCss(sheetHandle);
  assertFalse(value.isResolved());
  assertNull(designHandle.includeCssesIterator().next());
  assertNull(labelHandle.getStyle());
  assertFalse(designHandle.canDropCssStyleSheet(sheetHandle));
  designHandle.addCss(""String_Node_Str"");
  styles=designHandle.getAllStyles();
  assertEquals(5,styles.size());
}",0.7108895705521472
76464,"public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (ev.getEventType() == NotificationEvent.CSS_EVENT) {
    CssEvent event=(CssEvent)ev;
    action=event.getAction();
    eventType=event.getEventType();
  }
 else   if (ev.getEventType() == NotificationEvent.CSS_RELOADED_EVENT) {
    CssReloadedEvent event=(CssReloadedEvent)ev;
    eventType=event.getEventType();
  }
}","public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (ev.getEventType() == NotificationEvent.CSS_EVENT) {
    CssEvent event=(CssEvent)ev;
    action=event.getAction();
    eventType=event.getEventType();
  }
 else   if (ev.getEventType() == NotificationEvent.CSS_RELOADED_EVENT) {
    CssReloadedEvent event=(CssReloadedEvent)ev;
    eventType=event.getEventType();
  }
  ++count;
}",0.9864364981504316
76465,"/** 
 * Test addCss method.
 * @throws Exception
 */
public void testAdd() throws Exception {
  openDesign(""String_Node_Str"");
  MyListener listener=new MyListener();
  designHandle.addListener(listener);
  designHandle.addCss(""String_Node_Str"");
  assertEquals(NotificationEvent.CSS_EVENT,listener.getEventType());
  assertEquals(CssEvent.ADD,listener.getAction());
  designHandle.dropCss((IncludedCssStyleSheetHandle)designHandle.includeCssesIterator().next());
  assertEquals(CssEvent.DROP,listener.getAction());
}","/** 
 * Test addCss method.
 * @throws Exception
 */
public void testAdd() throws Exception {
  openDesign(""String_Node_Str"");
  MyListener listener=new MyListener();
  designHandle.addListener(listener);
  CssStyleSheetHandle sheetHandle=designHandle.openCssStyleSheet(""String_Node_Str"");
  designHandle.addCss(sheetHandle);
  assertEquals(NotificationEvent.CSS_EVENT,listener.getEventType());
  assertEquals(CssEvent.ADD,listener.getAction());
  assertEquals(1,listener.getEventCount());
  listener.clearEventCount();
  sheetHandle=(CssStyleSheetHandle)designHandle.getAllCssStyleSheets().get(0);
  designHandle.reloadCss(sheetHandle);
  assertEquals(NotificationEvent.CSS_RELOADED_EVENT,listener.getEventType());
  assertEquals(1,listener.getEventCount());
  listener.clearEventCount();
  designHandle.dropCss(sheetHandle);
  assertEquals(CssEvent.DROP,listener.getAction());
  assertEquals(1,listener.getEventCount());
}",0.5676613462873005
76466,"private void setParameterValue(String paramName,int paramIndex,Object paramValue) throws DataException {
  final String methodName=""String_Node_Str"";
  try {
    if (paramValue == null) {
      setNull(paramName,paramIndex);
      return;
    }
    if (paramValue instanceof Integer) {
      int i=((Integer)paramValue).intValue();
      setInt(paramName,paramIndex,i);
      return;
    }
    if (paramValue instanceof Double) {
      double d=((Double)paramValue).doubleValue();
      setDouble(paramName,paramIndex,d);
      return;
    }
    if (paramValue instanceof String) {
      String string=(String)paramValue;
      setString(paramName,paramIndex,string);
      return;
    }
    if (paramValue instanceof BigDecimal) {
      BigDecimal decimal=(BigDecimal)paramValue;
      setBigDecimal(paramName,paramIndex,decimal);
      return;
    }
    if (paramValue instanceof Time) {
      Time time=(Time)paramValue;
      setTime(paramName,paramIndex,time);
      return;
    }
    if (paramValue instanceof Timestamp) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramName,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof java.util.Date) {
      java.util.Date date=(java.util.Date)paramValue;
      Date sqlDate=new Date(date.getTime());
      setDate(paramName,paramIndex,sqlDate);
      return;
    }
    if (paramValue instanceof Boolean) {
      boolean val=((Boolean)paramValue).booleanValue();
      setBoolean(paramName,paramIndex,val);
      return;
    }
  }
 catch (  RuntimeException ex) {
    retrySetParameterValue(paramName,paramIndex,paramValue,ex);
    return;
  }
catch (  DataException ex) {
    retrySetParameterValue(paramName,paramIndex,paramValue,ex);
    return;
  }
  sm_logger.logp(Level.SEVERE,sm_className,methodName,""String_Node_Str"");
  throw new DataException(ResourceConstants.UNSUPPORTED_PARAMETER_VALUE_TYPE,new Object[]{paramValue.getClass()});
}","private void setParameterValue(String paramName,int paramIndex,Object paramValue) throws DataException {
  final String methodName=""String_Node_Str"";
  try {
    if (paramValue == null) {
      setNull(paramName,paramIndex);
      return;
    }
    if (paramValue instanceof Integer) {
      int i=((Integer)paramValue).intValue();
      setInt(paramName,paramIndex,i);
      return;
    }
    if (paramValue instanceof Double) {
      double d=((Double)paramValue).doubleValue();
      setDouble(paramName,paramIndex,d);
      return;
    }
    if (paramValue instanceof String) {
      String string=(String)paramValue;
      setString(paramName,paramIndex,string);
      return;
    }
    if (paramValue instanceof BigDecimal) {
      BigDecimal decimal=(BigDecimal)paramValue;
      setBigDecimal(paramName,paramIndex,decimal);
      return;
    }
    if (paramValue instanceof Time) {
      Time time=(Time)paramValue;
      setTime(paramName,paramIndex,time);
      return;
    }
    if (paramValue instanceof Timestamp) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramName,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof java.sql.Date) {
      java.util.Date date=(java.util.Date)paramValue;
      Date sqlDate=new Date(date.getTime());
      setDate(paramName,paramIndex,sqlDate);
      return;
    }
    if (paramValue instanceof java.util.Date) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramName,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof Boolean) {
      boolean val=((Boolean)paramValue).booleanValue();
      setBoolean(paramName,paramIndex,val);
      return;
    }
  }
 catch (  RuntimeException ex) {
    retrySetParameterValue(paramName,paramIndex,paramValue,ex);
    return;
  }
catch (  DataException ex) {
    retrySetParameterValue(paramName,paramIndex,paramValue,ex);
    return;
  }
  sm_logger.logp(Level.SEVERE,sm_className,methodName,""String_Node_Str"");
  throw new DataException(ResourceConstants.UNSUPPORTED_PARAMETER_VALUE_TYPE,new Object[]{paramValue.getClass()});
}",0.9569945625308948
76467,"/** 
 * Converts an ODA data type code to the Java class of its corresponding Data Engine ODI data type. <br><br> <b>ODA Data Type -> ODI Type Class</b><br> <i>Integer -> java.lang.Integer<br> Double -> java.lang.Double<br> Character -> java.lang.String<br> Decimal -> java.math.BigDecimal<br> Date -> java.util.Date<br> Time -> java.sql.Time<br> Timestamp -> java.sql.Timestamp<br> Blob -> java.sql.Blob<br> Clob -> java.sql.Clob<br> Boolean -> java.lang.Boolean<br></i>
 * @param odaDataTypeCode   an ODA data type code
 * @return  the ODI type class that corresponds with the specified ODA data type
 * @throws BirtException if the specified ODA data type is not a supported type
 */
public static Class toOdiTypeClass(int odaDataTypeCode) throws BirtException {
  if (odaDataTypeCode != Types.CHAR && odaDataTypeCode != Types.INTEGER && odaDataTypeCode != Types.DOUBLE && odaDataTypeCode != Types.DECIMAL && odaDataTypeCode != Types.DATE && odaDataTypeCode != Types.TIME && odaDataTypeCode != Types.TIMESTAMP && odaDataTypeCode != Types.BLOB && odaDataTypeCode != Types.CLOB && odaDataTypeCode != Types.BOOLEAN && odaDataTypeCode != Types.NULL) {
    throw new CoreException(ResourceConstants.INVALID_TYPE);
  }
  Class fieldClass=null;
switch (odaDataTypeCode) {
case Types.CHAR:
    fieldClass=String.class;
  break;
case Types.INTEGER:
fieldClass=Integer.class;
break;
case Types.DOUBLE:
fieldClass=Double.class;
break;
case Types.DECIMAL:
fieldClass=BigDecimal.class;
break;
case Types.DATE:
fieldClass=Date.class;
break;
case Types.TIME:
fieldClass=Time.class;
break;
case Types.TIMESTAMP:
fieldClass=Timestamp.class;
break;
case Types.BLOB:
fieldClass=Blob.class;
break;
case Types.CLOB:
fieldClass=Clob.class;
break;
case Types.BOOLEAN:
fieldClass=Boolean.class;
break;
case Types.NULL:
fieldClass=null;
break;
}
return fieldClass;
}","/** 
 * Converts an ODA data type code to the Java class of its corresponding Data Engine ODI data type. <br><br> <b>ODA Data Type -> ODI Type Class</b><br> <i>Integer -> java.lang.Integer<br> Double -> java.lang.Double<br> Character -> java.lang.String<br> Decimal -> java.math.BigDecimal<br> Date -> java.util.Date<br> Time -> java.sql.Time<br> Timestamp -> java.sql.Timestamp<br> Blob -> java.sql.Blob<br> Clob -> java.sql.Clob<br> Boolean -> java.lang.Boolean<br></i>
 * @param odaDataTypeCode   an ODA data type code
 * @return  the ODI type class that corresponds with the specified ODA data type
 * @throws BirtException if the specified ODA data type is not a supported type
 */
public static Class toOdiTypeClass(int odaDataTypeCode) throws BirtException {
  if (odaDataTypeCode != Types.CHAR && odaDataTypeCode != Types.INTEGER && odaDataTypeCode != Types.DOUBLE && odaDataTypeCode != Types.DECIMAL && odaDataTypeCode != Types.DATE && odaDataTypeCode != Types.TIME && odaDataTypeCode != Types.TIMESTAMP && odaDataTypeCode != Types.BLOB && odaDataTypeCode != Types.CLOB && odaDataTypeCode != Types.BOOLEAN && odaDataTypeCode != Types.NULL) {
    throw new CoreException(ResourceConstants.INVALID_TYPE);
  }
  Class fieldClass=null;
switch (odaDataTypeCode) {
case Types.CHAR:
    fieldClass=String.class;
  break;
case Types.INTEGER:
fieldClass=Integer.class;
break;
case Types.DOUBLE:
fieldClass=Double.class;
break;
case Types.DECIMAL:
fieldClass=BigDecimal.class;
break;
case Types.DATE:
fieldClass=java.sql.Date.class;
break;
case Types.TIME:
fieldClass=Time.class;
break;
case Types.TIMESTAMP:
fieldClass=Timestamp.class;
break;
case Types.BLOB:
fieldClass=Blob.class;
break;
case Types.CLOB:
fieldClass=Clob.class;
break;
case Types.BOOLEAN:
fieldClass=Boolean.class;
break;
case Types.NULL:
fieldClass=null;
break;
}
return fieldClass;
}",0.9975655937246416
76468,"/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toTime(source);
  if (Date.class.isAssignableFrom(toTypeClass))   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class)   return toBlob(source);
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}","/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class)   return toBlob(source);
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}",0.9322200392927308
76469,"/** 
 * To ease the methods compare and between. Exception with specific explanation will be thrown if anything goes wrong.
 * @param obj
 * @param op1
 * @param op2
 * @return
 * @throws DataException
 */
private static Object[] formatToComparable(Object obj,ExprTextAndValue op1,ExprTextAndValue op2) throws DataException {
  Object[] obArray=new Object[3];
  obArray[0]=obj;
  obArray[1]=op1.value;
  obArray[2]=op2.value;
  if (isSameType(obj,obArray[1])) {
    if (obArray[2] == null || (obArray[2] != null && isSameType(obj,obArray[2]))) {
      return obArray;
    }
  }
  try {
    if (obj instanceof Number) {
      obArray[0]=DataTypeUtil.toDouble(obj);
      obArray[1]=DataTypeUtil.toDouble(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toDouble(obArray[2]);
      }
    }
 else     if (obj instanceof Date) {
      obArray[0]=DataTypeUtil.toDate(obj);
      obArray[1]=DataTypeUtil.toDate(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toDate(obArray[2]);
      }
    }
 else     if (obj instanceof Boolean) {
      obArray[0]=DataTypeUtil.toBoolean(obj);
      obArray[1]=DataTypeUtil.toBoolean(obArray[1]);
    }
  }
 catch (  BirtException e) {
    try {
      makeObjectArrayStringArray(obArray);
    }
 catch (    BirtException e1) {
    }
  }
  return obArray;
}","/** 
 * To ease the methods compare and between. Exception with specific explanation will be thrown if anything goes wrong.
 * @param obj
 * @param op1
 * @param op2
 * @return
 * @throws DataException
 */
private static Object[] formatToComparable(Object obj,ExprTextAndValue op1,ExprTextAndValue op2) throws DataException {
  Object[] obArray=new Object[3];
  obArray[0]=obj;
  obArray[1]=op1.value;
  obArray[2]=op2.value;
  if (isSameType(obj,obArray[1])) {
    if (obArray[2] == null || (obArray[2] != null && isSameType(obj,obArray[2]))) {
      return obArray;
    }
  }
  try {
    if (obj instanceof Number) {
      obArray[0]=DataTypeUtil.toDouble(obj);
      obArray[1]=DataTypeUtil.toDouble(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toDouble(obArray[2]);
      }
    }
 else     if (obj instanceof java.sql.Date) {
      obArray[0]=DataTypeUtil.toSqlDate(obj);
      obArray[1]=DataTypeUtil.toSqlDate(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toSqlDate(obArray[2]);
      }
    }
 else     if (obj instanceof java.sql.Time) {
      obArray[0]=DataTypeUtil.toSqlTime(obj);
      obArray[1]=DataTypeUtil.toSqlTime(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toSqlTime(obArray[2]);
      }
    }
 else     if (obj instanceof Date) {
      obArray[0]=DataTypeUtil.toDate(obj);
      obArray[1]=DataTypeUtil.toDate(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toDate(obArray[2]);
      }
    }
 else     if (obj instanceof Boolean) {
      obArray[0]=DataTypeUtil.toBoolean(obj);
      obArray[1]=DataTypeUtil.toBoolean(obArray[1]);
    }
  }
 catch (  BirtException e) {
    try {
      makeObjectArrayStringArray(obArray);
    }
 catch (    BirtException e1) {
    }
  }
  return obArray;
}",0.845088161209068
76470,"/** 
 * Test DataTypeUtil#toApiDataType( int odaDataTypeCode )
 * @throws BirtException
 */
public void testToApiFromOdaDataType() throws BirtException {
  assertEquals(DataType.STRING_TYPE,DataTypeUtil.toApiDataType(Types.CHAR));
  assertEquals(DataType.INTEGER_TYPE,DataTypeUtil.toApiDataType(Types.INTEGER));
  assertEquals(DataType.DOUBLE_TYPE,DataTypeUtil.toApiDataType(Types.DOUBLE));
  assertEquals(DataType.DECIMAL_TYPE,DataTypeUtil.toApiDataType(Types.DECIMAL));
  assertEquals(DataType.DATE_TYPE,DataTypeUtil.toApiDataType(Types.DATE));
  assertEquals(DataType.DATE_TYPE,DataTypeUtil.toApiDataType(Types.TIME));
  assertEquals(DataType.DATE_TYPE,DataTypeUtil.toApiDataType(Types.TIMESTAMP));
  assertEquals(DataType.BINARY_TYPE,DataTypeUtil.toApiDataType(Types.BLOB));
  assertEquals(DataType.STRING_TYPE,DataTypeUtil.toApiDataType(Types.CLOB));
  assertEquals(DataType.UNKNOWN_TYPE,DataTypeUtil.toApiDataType(Types.NULL));
  boolean hasException=false;
  try {
    DataTypeUtil.toApiDataType(Types.OTHER);
  }
 catch (  BirtException e) {
    hasException=true;
  }
  assertTrue(hasException);
}","/** 
 * Test DataTypeUtil#toApiDataType( int odaDataTypeCode )
 * @throws BirtException
 */
public void testToApiFromOdaDataType() throws BirtException {
  assertEquals(DataType.STRING_TYPE,DataTypeUtil.toApiDataType(Types.CHAR));
  assertEquals(DataType.INTEGER_TYPE,DataTypeUtil.toApiDataType(Types.INTEGER));
  assertEquals(DataType.DOUBLE_TYPE,DataTypeUtil.toApiDataType(Types.DOUBLE));
  assertEquals(DataType.DECIMAL_TYPE,DataTypeUtil.toApiDataType(Types.DECIMAL));
  assertEquals(DataType.SQL_DATE_TYPE,DataTypeUtil.toApiDataType(Types.DATE));
  assertEquals(DataType.SQL_TIME_TYPE,DataTypeUtil.toApiDataType(Types.TIME));
  assertEquals(DataType.DATE_TYPE,DataTypeUtil.toApiDataType(Types.TIMESTAMP));
  assertEquals(DataType.BINARY_TYPE,DataTypeUtil.toApiDataType(Types.BLOB));
  assertEquals(DataType.STRING_TYPE,DataTypeUtil.toApiDataType(Types.CLOB));
  assertEquals(DataType.UNKNOWN_TYPE,DataTypeUtil.toApiDataType(Types.NULL));
  boolean hasException=false;
  try {
    DataTypeUtil.toApiDataType(Types.OTHER);
  }
 catch (  BirtException e) {
    hasException=true;
  }
  assertTrue(hasException);
}",0.9936936936936936
76471,"/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class)   return toBlob(source);
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}","/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == java.sql.Timestamp.class)   return toDate(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class)   return toBlob(source);
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}",0.9667590027700832
76472,"public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      String masterPageStyleName=masterPage.getStyleName();
      IStyle classStyle=report.findStyle(masterPageStyleName);
      StringBuffer styleBuffer=new StringBuffer();
      AttributeBuilder.buildBackgroundStyle(styleBuffer,classStyle,this);
      styleBuffer.append(""String_Node_Str"" + masterPage.getPageWidth().toString() + ""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null) {
    if (outputMasterPageContent) {
      boolean showHeader=true;
      Object genBy=page.getGenerateBy();
      if (genBy instanceof SimpleMasterPageDesign) {
        SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)genBy;
        if (!masterPage.isShowHeaderOnFirst()) {
          if (page.getPageNumber() == 1) {
            showHeader=false;
          }
        }
      }
      if (showHeader) {
        writer.openTag(HTMLTags.TAG_DIV);
        StringBuffer styleBuffer=new StringBuffer();
        buildPageStyle(page.getPageHeader().getStyleClass(),page.getPageHeader().getStyle(),styleBuffer);
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        contentVisitor.visitChildren(page.getPageHeader(),null);
        writer.closeTag(HTMLTags.TAG_DIV);
      }
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    IContent pageBody=page.getPageBody();
    IStyle bodyStyle=pageBody.getStyle();
    String bodyStyleName=pageBody.getStyleClass();
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      StringBuffer styleBuffer=new StringBuffer();
      if (isEmbeddable) {
        AttributeBuilder.buildPageStyle(styleBuffer,bodyStyle,this);
      }
 else {
        IStyle classStyle=report.findStyle(bodyStyleName);
        AttributeBuilder.buildPageStyle(styleBuffer,classStyle,this);
      }
      if (!pageFooterFloatFlag) {
        AttributeBuilder.buildSize(styleBuffer,HTMLTags.ATTR_MIN_HEIGHT,masterPage.getPageHeight());
      }
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}","public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      String masterPageStyleName=masterPage.getStyleName();
      IStyle classStyle=report.findStyle(masterPageStyleName);
      StringBuffer styleBuffer=new StringBuffer();
      AttributeBuilder.buildBackgroundStyle(styleBuffer,classStyle,this);
      if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
        styleBuffer.append(""String_Node_Str"" + masterPage.getPageWidth().toString() + ""String_Node_Str"");
      }
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null) {
    if (outputMasterPageContent) {
      boolean showHeader=true;
      Object genBy=page.getGenerateBy();
      if (genBy instanceof SimpleMasterPageDesign) {
        SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)genBy;
        if (!masterPage.isShowHeaderOnFirst()) {
          if (page.getPageNumber() == 1) {
            showHeader=false;
          }
        }
      }
      if (showHeader) {
        writer.openTag(HTMLTags.TAG_DIV);
        StringBuffer styleBuffer=new StringBuffer();
        buildPageStyle(page.getPageHeader().getStyleClass(),page.getPageHeader().getStyle(),styleBuffer);
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        contentVisitor.visitChildren(page.getPageHeader(),null);
        writer.closeTag(HTMLTags.TAG_DIV);
      }
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    IContent pageBody=page.getPageBody();
    IStyle bodyStyle=pageBody.getStyle();
    String bodyStyleName=pageBody.getStyleClass();
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      StringBuffer styleBuffer=new StringBuffer();
      if (isEmbeddable) {
        AttributeBuilder.buildPageStyle(styleBuffer,bodyStyle,this);
      }
 else {
        IStyle classStyle=report.findStyle(bodyStyleName);
        AttributeBuilder.buildPageStyle(styleBuffer,classStyle,this);
      }
      if (!pageFooterFloatFlag) {
        AttributeBuilder.buildSize(styleBuffer,HTMLTags.ATTR_MIN_HEIGHT,masterPage.getPageHeight());
      }
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}",0.9836846929422548
76473,"public void testSearchStringStringInt(){
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(6));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(6));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(6));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(-1));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(0));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(21));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(2));
}","public void testSearchStringStringInt(){
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(6));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(6));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(6));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(-1));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(0));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(21));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(2));
  assertEquals(((Integer)cx.evaluateString(scope,""String_Node_Str"",""String_Node_Str"",1,null)),new Integer(0));
}",0.9366799771819736
76474,"public int getGroupLevel(){
  if (generateBy instanceof GroupDesign) {
    GroupDesign design=(GroupDesign)generateBy;
    return design.getGroupLevel();
  }
  return -1;
}","public int getGroupLevel(){
  if (groupLevel == -1) {
    if (generateBy instanceof GroupDesign) {
      GroupDesign design=(GroupDesign)generateBy;
      groupLevel=design.getGroupLevel();
    }
 else     if (parent instanceof GroupContent) {
      groupLevel=((GroupContent)parent).getGroupLevel();
    }
 else {
      return 0;
    }
  }
  return groupLevel;
}",0.5570093457943925
76475,"/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null && modelValueList.size() > 0) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date) {
            DateFormatter formatter=new DateFormatter(ULocale.US);
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date) {
            DateFormatter formatter=new DateFormatter(ULocale.US);
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9890026545316648
76476,"public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  IQueryResults queryResults=getGroupingQueryResults(dataSet,inputParamBindings,columnBindings,boundColumnName);
  IResultIterator resultIt=queryResults.getResultIterator();
  int maxRowCount=-1;
  if (requestInfo != null) {
    resultIt.moveTo(requestInfo.getStartRow());
    maxRowCount=requestInfo.getMaxRow();
  }
  ArrayList values=new ArrayList();
  while (resultIt.next() && maxRowCount != 0) {
    Object value=resultIt.getValue(boundColumnName);
    values.add(value);
    resultIt.skipToEnd(1);
    maxRowCount--;
  }
  resultIt.close();
  queryResults.close();
  return values;
}","public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings.hasNext()) {
    temp.add(columnBindings.next());
  }
  if (referToAggregation(temp,boundColumnName))   return new ArrayList();
  IQueryResults queryResults=getGroupingQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  IResultIterator resultIt=queryResults.getResultIterator();
  int maxRowCount=-1;
  if (requestInfo != null) {
    resultIt.moveTo(requestInfo.getStartRow());
    maxRowCount=requestInfo.getMaxRow();
  }
  ArrayList values=new ArrayList();
  while (resultIt.next() && maxRowCount != 0) {
    Object value=resultIt.getValue(boundColumnName);
    values.add(value);
    resultIt.skipToEnd(1);
    maxRowCount--;
  }
  resultIt.close();
  queryResults.close();
  return values;
}",0.8757943385326401
76477,"/** 
 * This method returns a list of ICubeAggrDefn instances which describes the aggregations that need to be calcualted in cube query.
 * @param bindings
 * @return
 */
public static ICubeAggrDefn[] getAggrDefns(List bindings){
  if (bindings == null || bindings.size() == 0)   return new ICubeAggrDefn[0];
  List cubeAggrDefns=new ArrayList();
  for (Iterator it=bindings.iterator(); it.hasNext(); ) {
    IBinding binding=((IBinding)it.next());
    String measure=getMeasure(binding.getExpression());
    if (measure != null)     cubeAggrDefns.add(new CubeAggrDefn(binding.getBindingName(),measure,binding.getAggregatOns(),binding.getAggrFunction()));
  }
  ICubeAggrDefn[] result=new ICubeAggrDefn[cubeAggrDefns.size()];
  for (int i=0; i < result.length; i++) {
    result[i]=(ICubeAggrDefn)cubeAggrDefns.get(i);
  }
  return result;
}","/** 
 * This method returns a list of ICubeAggrDefn instances which describes the aggregations that need to be calcualted in cube query.
 * @param bindings
 * @return
 */
public static ICubeAggrDefn[] getAggrDefns(List bindings){
  if (bindings == null || bindings.size() == 0)   return new ICubeAggrDefn[0];
  List cubeAggrDefns=new ArrayList();
  for (Iterator it=bindings.iterator(); it.hasNext(); ) {
    IBinding binding=((IBinding)it.next());
    if (binding.getExpression() instanceof IScriptExpression) {
      String measure=getMeasure(((IScriptExpression)binding.getExpression()).getText());
      if (measure != null)       cubeAggrDefns.add(new CubeAggrDefn(binding.getBindingName(),measure,binding.getAggregatOns(),binding.getAggrFunction()));
    }
  }
  ICubeAggrDefn[] result=new ICubeAggrDefn[cubeAggrDefns.size()];
  for (int i=0; i < result.length; i++) {
    result[i]=(ICubeAggrDefn)cubeAggrDefns.get(i);
  }
  return result;
}",0.8999441028507547
76478,"/** 
 * Inserts a dimension view to given row/column axis in the specified position.
 * @param crosstab
 * @param dimensionView
 * @param axisType
 * @param index
 * @param measureListMap
 * @param functionMap
 * @throws SemanticException
 */
public static void insertDimension(CrosstabReportItemHandle crosstab,DimensionViewHandle dimensionView,int axisType,int index,Map measureListMap,Map functionMap) throws SemanticException {
  if (crosstab == null || dimensionView == null || !isValidAxisType(axisType))   return;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(null);
  try {
    CrosstabViewHandle crosstabView=crosstab.getCrosstabView(axisType);
    if (crosstabView == null) {
      crosstabView=crosstab.addCrosstabView(axisType);
    }
    crosstabView.getViewsProperty().add(dimensionView.getModelHandle(),index);
    String dimensionName=dimensionView.getCubeDimensionName();
    for (int i=0; i < dimensionView.getLevelCount(); i++) {
      LevelViewHandle levelView=dimensionView.getLevel(i);
      String levelName=levelView.getCubeLevelName();
      List measures=(List)(measureListMap == null ? null : measureListMap.get(levelName));
      List functions=(List)(functionMap == null ? null : functionMap.get(levelName));
      addMeasureAggregations(crosstab,axisType,levelView,dimensionName,levelView.getCubeLevelName(),false,functions,measures,true);
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Inserts a dimension view to given row/column axis in the specified position.
 * @param crosstab
 * @param dimensionView
 * @param axisType
 * @param index
 * @param measureListMap
 * @param functionMap
 * @throws SemanticException
 */
public static void insertDimension(CrosstabReportItemHandle crosstab,DimensionViewHandle dimensionView,int axisType,int index,Map measureListMap,Map functionMap) throws SemanticException {
  if (crosstab == null || dimensionView == null || !isValidAxisType(axisType))   return;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(null);
  try {
    CrosstabViewHandle crosstabView=crosstab.getCrosstabView(axisType);
    if (crosstabView == null) {
      crosstabView=crosstab.addCrosstabView(axisType);
    }
    crosstabView.getViewsProperty().add(dimensionView.getModelHandle(),index);
    String dimensionName=dimensionView.getCubeDimensionName();
    for (int i=0; i < dimensionView.getLevelCount(); i++) {
      LevelViewHandle levelView=dimensionView.getLevel(i);
      String levelName=levelView.getCubeLevelName();
      List measures=(List)(measureListMap == null ? null : measureListMap.get(levelName));
      List functions=(List)(functionMap == null ? null : functionMap.get(levelName));
      insertLevel(crosstab,levelView,dimensionName,levelView.getCubeLevelName(),axisType,measures,functions);
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.9331983805668016
76479,"/** 
 * Adjusts the measure aggregations when row/column dimension or level is changed.
 * @param crosstab
 * @param axisType the axis type where the dimension or level is changed or the grand total is changed
 * @param dimensionName
 * @param levelName
 * @param isLevelInnerMost
 * @param isAdd
 * @throws SemanticException
 */
private static void addMeasureAggregations(CrosstabReportItemHandle crosstab,int axisType,LevelViewHandle theLevelView,String dimensionName,String levelName,boolean isInnerMost,List functions,List measures,boolean checkCounterMeasureList) throws SemanticException {
  if (crosstab == null || measures == null || measures.isEmpty() || !isValidAxisType(axisType))   return;
  int counterAxisType=getOppositeAxisType(axisType);
  boolean isCounterAxisEmpty=true;
  for (int dimension=0; dimension < crosstab.getDimensionCount(counterAxisType); dimension++) {
    DimensionViewHandle dimensionView=crosstab.getDimension(counterAxisType,dimension);
    for (int level=0; level < dimensionView.getLevelCount(); level++) {
      isCounterAxisEmpty=false;
      LevelViewHandle levelView=dimensionView.getLevel(level);
      String rowDimension=null;
      String rowLevel=null;
      String colDimension=null;
      String colLevel=null;
      if (counterAxisType == ROW_AXIS_TYPE) {
        rowDimension=dimensionView.getCubeDimensionName();
        rowLevel=levelView.getCubeLevelName();
        colDimension=dimensionName;
        colLevel=levelName;
      }
 else       if (counterAxisType == COLUMN_AXIS_TYPE) {
        rowDimension=dimensionName;
        rowLevel=levelName;
        colDimension=dimensionView.getCubeDimensionName();
        colLevel=levelView.getCubeLevelName();
      }
      if ((isInnerMost && !levelView.isInnerMost() && levelView.getAggregationHeader() != null) || (!isInnerMost && (levelView.isInnerMost() || levelView.getAggregationHeader() != null))) {
        for (int i=0; i < measures.size(); i++) {
          MeasureViewHandle measureView=(MeasureViewHandle)measures.get(i);
          String function=functions == null ? null : (String)functions.get(i);
          if (measureView.getCrosstab() != crosstab)           continue;
          if (checkCounterMeasureList && !isAggregationOn(measureView,levelView.getCubeLevelName(),counterAxisType))           continue;
          addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
        }
      }
    }
  }
  if (crosstab.getGrandTotal(counterAxisType) != null || (isCounterAxisEmpty && (theLevelView == null || theLevelView.getAggregationHeader() != null))) {
    String rowDimension=null;
    String rowLevel=null;
    String colDimension=null;
    String colLevel=null;
    if (counterAxisType == ROW_AXIS_TYPE) {
      colDimension=dimensionName;
      colLevel=levelName;
    }
 else     if (counterAxisType == COLUMN_AXIS_TYPE) {
      rowDimension=dimensionName;
      rowLevel=levelName;
    }
    for (int i=0; i < measures.size(); i++) {
      MeasureViewHandle measureView=(MeasureViewHandle)measures.get(i);
      if (measureView.getCrosstab() != crosstab)       continue;
      String function=functions == null ? null : (String)functions.get(i);
      if (checkCounterMeasureList && !isAggregationOn(measureView,null,counterAxisType))       continue;
      addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    }
  }
}","/** 
 * Adjusts the measure aggregations when row/column dimension or level is changed.
 * @param crosstab
 * @param axisType the axis type where the dimension or level is changed or the grand total is changed
 * @param dimensionName
 * @param levelName
 * @param isLevelInnerMost
 * @param isAdd
 * @throws SemanticException
 */
private static void addMeasureAggregations(CrosstabReportItemHandle crosstab,int axisType,LevelViewHandle theLevelView,String dimensionName,String levelName,boolean isInnerMost,List functions,List measures,boolean checkCounterMeasureList) throws SemanticException {
  if (crosstab == null || measures == null || measures.isEmpty() || !isValidAxisType(axisType))   return;
  int counterAxisType=getOppositeAxisType(axisType);
  boolean isCounterAxisEmpty=true;
  for (int dimension=0; dimension < crosstab.getDimensionCount(counterAxisType); dimension++) {
    DimensionViewHandle dimensionView=crosstab.getDimension(counterAxisType,dimension);
    for (int level=0; level < dimensionView.getLevelCount(); level++) {
      isCounterAxisEmpty=false;
      LevelViewHandle levelView=dimensionView.getLevel(level);
      String rowDimension=null;
      String rowLevel=null;
      String colDimension=null;
      String colLevel=null;
      if (counterAxisType == ROW_AXIS_TYPE) {
        rowDimension=dimensionView.getCubeDimensionName();
        rowLevel=levelView.getCubeLevelName();
        colDimension=dimensionName;
        colLevel=levelName;
      }
 else       if (counterAxisType == COLUMN_AXIS_TYPE) {
        rowDimension=dimensionName;
        rowLevel=levelName;
        colDimension=dimensionView.getCubeDimensionName();
        colLevel=levelView.getCubeLevelName();
      }
      if ((isInnerMost && !levelView.isInnerMost() && levelView.getAggregationHeader() != null) || (!isInnerMost && (theLevelView == null || theLevelView.getAggregationHeader() != null) && (levelView.isInnerMost() || levelView.getAggregationHeader() != null))) {
        for (int i=0; i < measures.size(); i++) {
          MeasureViewHandle measureView=(MeasureViewHandle)measures.get(i);
          String function=functions == null ? null : (String)functions.get(i);
          if (measureView.getCrosstab() != crosstab)           continue;
          if (checkCounterMeasureList && !isAggregationOn(measureView,levelView.getCubeLevelName(),counterAxisType))           continue;
          addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
        }
      }
    }
  }
  if (crosstab.getGrandTotal(counterAxisType) != null || (isCounterAxisEmpty && (theLevelView == null || theLevelView.getAggregationHeader() != null))) {
    String rowDimension=null;
    String rowLevel=null;
    String colDimension=null;
    String colLevel=null;
    if (counterAxisType == ROW_AXIS_TYPE) {
      colDimension=dimensionName;
      colLevel=levelName;
    }
 else     if (counterAxisType == COLUMN_AXIS_TYPE) {
      rowDimension=dimensionName;
      rowLevel=levelName;
    }
    for (int i=0; i < measures.size(); i++) {
      MeasureViewHandle measureView=(MeasureViewHandle)measures.get(i);
      if (measureView.getCrosstab() != crosstab)       continue;
      String function=functions == null ? null : (String)functions.get(i);
      if (checkCounterMeasureList && !isAggregationOn(measureView,null,counterAxisType))       continue;
      addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    }
  }
}",0.9894156879802812
76480,"/** 
 * @param crosstab
 * @param levelView
 * @param dimensionName
 * @param levelName
 * @param axisType
 * @param isAdd
 * @throws SemanticException
 */
private static void insertLevel(CrosstabReportItemHandle crosstab,LevelViewHandle levelView,String dimensionName,String levelName,int axisType) throws SemanticException {
}","/** 
 * @param crosstab
 * @param levelView
 * @param dimensionName
 * @param levelName
 * @param axisType
 * @param isAdd
 * @throws SemanticException
 */
private static void insertLevel(CrosstabReportItemHandle crosstab,LevelViewHandle levelView,String dimensionName,String levelName,int axisType,List measures,List functions) throws SemanticException {
}",0.9576642335766424
76481,"public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    paramMetaList2.add(paramMetaList1.get(index - 1));
  }
  return new SPParameterMetaData(paramMetaList2);
}","public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  if (positionArray.length != paramMetaList1.size())   throw new OdaException(""String_Node_Str"");
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    paramMetaList2.add(paramMetaList1.get(index - 1));
  }
  return new SPParameterMetaData(paramMetaList2);
}",0.8997955010224948
76482,"public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  java.sql.ResultSetMetaData resultmd=null;
  try {
    assertNotNull(callStat);
    resultmd=callStat.getMetaData();
  }
 catch (  NullPointerException e) {
    resultmd=null;
  }
catch (  SQLException e) {
  }
  IResultSetMetaData pstmtResultMetaData=null;
  if (resultmd != null) {
    pstmtResultMetaData=new ResultSetMetaData(resultmd);
  }
 else {
    IResultSet mdRs=null;
    try {
      mdRs=executeQuery();
    }
 catch (    OdaException e) {
      mdRs=null;
    }
    try {
      if (mdRs != null)       pstmtResultMetaData=mdRs.getMetaData();
 else       pstmtResultMetaData=new SPResultSetMetaData(null);
    }
 catch (    OdaException e) {
    }
  }
  return pstmtResultMetaData;
}","public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  java.sql.ResultSetMetaData resultmd=null;
  try {
    assertNotNull(callStat);
    resultmd=callStat.getMetaData();
  }
 catch (  NullPointerException e) {
    resultmd=null;
  }
catch (  SQLException e) {
  }
  IResultSetMetaData pstmtResultMetaData=null;
  if (resultmd != null) {
    pstmtResultMetaData=new ResultSetMetaData(resultmd);
  }
 else {
    IResultSet mdRs=null;
    try {
      mdRs=executeQuery();
    }
 catch (    OdaException e) {
      throw e;
    }
    try {
      if (mdRs != null)       pstmtResultMetaData=mdRs.getMetaData();
 else       pstmtResultMetaData=new SPResultSetMetaData(null);
    }
 catch (    OdaException e) {
    }
  }
  return pstmtResultMetaData;
}",0.9907834101382488
76483,"/** 
 * This method will return NULL if the named data set is not cached. Otherwise, it will return a IResultMetaData instance which provides at least the ColumnName and ColumnType information for all cached columns. Please note that the ParameterHint information will usually essential to the result of data set design is omitted for it has nothing to do with the metadata.
 * @param dataSource
 * @param dataSet
 * @param parameterHints
 * @return
 * @throws BirtException
 */
abstract public IResultMetaData getCachedDataSetMetaData(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws BirtException ;","/** 
 * This method will return NULL if the named data set is not cached. Otherwise, it will return an IResultMetaData instance which provides at least the ColumnName and ColumnType information for all cached columns. Please note that the ParameterHint information will usually essential to the result of data set design is omitted for it has nothing to do with the metadata.
 * @param dataSource
 * @param dataSet
 * @param parameterHints
 * @return
 * @throws BirtException
 */
abstract public IResultMetaData getCachedDataSetMetaData(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws BirtException ;",0.9991928974979822
76484,"/** 
 * Removes grand total from crosstab if it is not empty, otherwise do nothing.
 */
public void removeGrandTotal(){
  PropertyHandle propHandle=getGrandTotalProperty();
  if (propHandle.getContentCount() > 0) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      propHandle.drop(0);
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabUtil.adjustMeasureAggregations(crosstab,getAxisType(),null,null,null,false,false);
      }
    }
 catch (    SemanticException e) {
      logger.log(Level.INFO,e.getMessage(),e);
      stack.rollback();
    }
    stack.commit();
  }
}","/** 
 * Removes grand total from crosstab if it is not empty, otherwise do nothing.
 */
public void removeGrandTotal(){
  PropertyHandle propHandle=getGrandTotalProperty();
  if (propHandle.getContentCount() > 0) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabUtil.adjustMeasureAggregations(crosstab,getAxisType(),null,null,null,false,false);
      }
      propHandle.drop(0);
    }
 catch (    SemanticException e) {
      logger.log(Level.INFO,e.getMessage(),e);
      stack.rollback();
    }
    stack.commit();
  }
}",0.9603658536585366
76485,"/** 
 * Removes the aggregation header cell if it is not empty, otherwise do nothing.
 */
public void removeAggregationHeader(){
  if (getAggregationHeaderProperty().getContentCount() > 0) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      getAggregationHeaderProperty().drop(0);
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabUtil.adjustMeasureAggregations(crosstab,getAxisType(),this,((DimensionViewHandle)getContainer()).getCubeDimensionName(),getCubeLevelName(),isInnerMost(),false);
      }
    }
 catch (    SemanticException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      stack.rollback();
    }
    stack.commit();
  }
}","/** 
 * Removes the aggregation header cell if it is not empty, otherwise do nothing.
 */
public void removeAggregationHeader(){
  if (getAggregationHeaderProperty().getContentCount() > 0) {
    CommandStack stack=getCommandStack();
    stack.startTrans(null);
    try {
      CrosstabReportItemHandle crosstab=getCrosstab();
      if (crosstab != null) {
        CrosstabUtil.adjustMeasureAggregations(crosstab,getAxisType(),this,((DimensionViewHandle)getContainer()).getCubeDimensionName(),getCubeLevelName(),isInnerMost(),false);
      }
      getAggregationHeaderProperty().drop(0);
    }
 catch (    SemanticException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      stack.rollback();
    }
    stack.commit();
  }
}",0.937244201909959
76486,"/** 
 * Test case: <br> To read a design file, uses adapter to create a data source design. Checks values of the created data source design.
 * @throws Exception
 */
public void testROMDataSetToODADataSet() throws Exception {
  openDesign(INPUT_FILE);
  OdaDataSetHandle setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  DataSetDesign setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  assertEquals(""String_Node_Str"",setDesign.getName());
  assertEquals(DATA_SET_EXTENSIONID,setDesign.getOdaExtensionDataSetId());
  assertEquals(""String_Node_Str"",setDesign.getDisplayName());
  Properties props=setDesign.getPublicProperties();
  assertEquals(1,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  props=setDesign.getPrivateProperties();
  assertEquals(1,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  DataSetParameters params=setDesign.getParameters();
  ParameterDefinition paramDefn=(ParameterDefinition)params.getParameterDefinitions().get(0);
  DataElementAttributes dataAttrs=paramDefn.getAttributes();
  assertEquals(ElementNullability.NULLABLE,dataAttrs.getNullability().getValue());
  assertEquals(1,dataAttrs.getPosition());
  assertEquals(0,dataAttrs.getNativeDataTypeCode());
  assertEquals(ParameterMode.IN,paramDefn.getInOutMode().getValue());
  InputParameterAttributes inParamAttrs=paramDefn.getInputAttributes();
  InputElementAttributes inElementAttrs=inParamAttrs.getElementAttributes();
  assertTrue(inElementAttrs.isOptional());
  assertEquals(""String_Node_Str"",inElementAttrs.getDefaultScalarValue());
  assertNull(setDesign.getResultSets());
  assertEquals(0,dataAttrs.getNativeDataTypeCode());
  assertEquals(""String_Node_Str"",setDesign.getPrimaryResultSetName());
  assertEquals(""String_Node_Str"",setDesign.getQueryText());
  DataSourceDesign sourceDesign=setDesign.getDataSourceDesign();
  assertNotNull(sourceDesign);
  assertEquals(""String_Node_Str"",sourceDesign.getName());
  assertEquals(DATA_SOURCE_EXTENSIONID,sourceDesign.getOdaExtensionId());
  assertEquals(""String_Node_Str"",sourceDesign.getDisplayName());
  props=sourceDesign.getPublicProperties();
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  props=sourceDesign.getPrivateProperties();
  assertEquals(2,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
}","/** 
 * Test case: <br> To read a design file, uses adapter to create a data source design. Checks values of the created data source design.
 * @throws Exception
 */
public void testROMDataSetToODADataSet() throws Exception {
  openDesign(INPUT_FILE);
  OdaDataSetHandle setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  DataSetDesign setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  assertEquals(""String_Node_Str"",setDesign.getName());
  assertEquals(DATA_SET_EXTENSIONID,setDesign.getOdaExtensionDataSetId());
  assertEquals(""String_Node_Str"",setDesign.getDisplayName());
  Properties props=setDesign.getPublicProperties();
  assertEquals(3,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  props=setDesign.getPrivateProperties();
  assertEquals(1,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  DataSetParameters params=setDesign.getParameters();
  ParameterDefinition paramDefn=(ParameterDefinition)params.getParameterDefinitions().get(0);
  DataElementAttributes dataAttrs=paramDefn.getAttributes();
  assertEquals(ElementNullability.NULLABLE,dataAttrs.getNullability().getValue());
  assertEquals(1,dataAttrs.getPosition());
  assertEquals(0,dataAttrs.getNativeDataTypeCode());
  assertEquals(ParameterMode.IN,paramDefn.getInOutMode().getValue());
  InputParameterAttributes inParamAttrs=paramDefn.getInputAttributes();
  InputElementAttributes inElementAttrs=inParamAttrs.getElementAttributes();
  assertTrue(inElementAttrs.isOptional());
  assertEquals(""String_Node_Str"",inElementAttrs.getDefaultScalarValue());
  assertNull(setDesign.getResultSets());
  assertEquals(0,dataAttrs.getNativeDataTypeCode());
  assertEquals(""String_Node_Str"",setDesign.getPrimaryResultSetName());
  assertEquals(""String_Node_Str"",setDesign.getQueryText());
  DataSourceDesign sourceDesign=setDesign.getDataSourceDesign();
  assertNotNull(sourceDesign);
  assertEquals(""String_Node_Str"",sourceDesign.getName());
  assertEquals(DATA_SOURCE_EXTENSIONID,sourceDesign.getOdaExtensionId());
  assertEquals(""String_Node_Str"",sourceDesign.getDisplayName());
  props=sourceDesign.getPublicProperties();
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  props=sourceDesign.getPrivateProperties();
  assertEquals(2,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
}",0.9996451383960256
76487,"/** 
 * Test case: <br> To read a design file, uses adapter to create a data source design. Checks values of the created data source design.
 * @throws Exception
 */
public void testROMDataSourceToODADataSource() throws Exception {
  openDesign(INPUT_FILE);
  OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)designHandle.findDataSource(""String_Node_Str"");
  DataSourceDesign sourceDesign=new ModelOdaAdapter().createDataSourceDesign(sourceHandle);
  assertEquals(""String_Node_Str"",sourceDesign.getName());
  assertEquals(DATA_SOURCE_EXTENSIONID,sourceDesign.getOdaExtensionId());
  assertEquals(""String_Node_Str"",sourceDesign.getDisplayName());
  Properties props=sourceDesign.getPublicProperties();
  assertEquals(5,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  props=sourceDesign.getPrivateProperties();
  assertEquals(2,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
}","/** 
 * Test case: <br> To read a design file, uses adapter to create a data source design. Checks values of the created data source design.
 * @throws Exception
 */
public void testROMDataSourceToODADataSource() throws Exception {
  openDesign(INPUT_FILE);
  OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)designHandle.findDataSource(""String_Node_Str"");
  DataSourceDesign sourceDesign=new ModelOdaAdapter().createDataSourceDesign(sourceHandle);
  assertEquals(""String_Node_Str"",sourceDesign.getName());
  assertEquals(DATA_SOURCE_EXTENSIONID,sourceDesign.getOdaExtensionId());
  assertEquals(""String_Node_Str"",sourceDesign.getDisplayName());
  Properties props=sourceDesign.getPublicProperties();
  assertEquals(7,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  props=sourceDesign.getPrivateProperties();
  assertEquals(2,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
}",0.9992378048780488
76488,"private void configTreeViewer(){
  ViewsTreeProvider provider=new SampleReportsExplorerProvider();
  samplesTree.setContentProvider(provider);
  samplesTree.setLabelProvider(provider);
  samplesTree.getTree().addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (item != null) {
        if (item.getData() instanceof ReportDesignHandle) {
          String reportname=item.getText().substring(0,item.getText().lastIndexOf(""String_Node_Str""));
          description.setText(DescriptionMessages.getDescription(reportname));
          previewSampleReport(reportname);
          setSelectedElement(item);
        }
 else         if (item.getText().equals(""String_Node_Str"")) {
          description.setText(DescriptionMessages.getDescription(""String_Node_Str""));
          setSelectedElement(item.getData());
        }
 else {
          description.setText(Messages.getString(""String_Node_Str""));
          setSelectedElement(item.getData());
        }
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  samplesTree.getTree().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      Object input=samplesTree.getInput();
      if (input instanceof Object[]) {
        Object[] array=(Object[])input;
        for (int i=0; i < array.length; i++) {
          if (array[i] instanceof ResourceEntry)           ((ResourceEntry)array[i]).dispose();
        }
      }
    }
  }
);
  samplesTree.setSorter(new SampleReportsSorter());
}","private void configTreeViewer(){
  ViewsTreeProvider provider=new SampleReportsExplorerProvider();
  samplesTree.setContentProvider(provider);
  samplesTree.setLabelProvider(provider);
  samplesTree.getTree().addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (item != null) {
        if (item.getData() instanceof ReportDesignHandle) {
          String reportname=item.getText().substring(0,item.getText().lastIndexOf(""String_Node_Str""));
          description.setText(DescriptionMessages.getDescription(reportname));
          previewSampleReport(reportname);
          setSelectedElement(item);
        }
 else         if (item.getText().equals(""String_Node_Str"")) {
          description.setText(DescriptionMessages.getDescription(""String_Node_Str""));
          setSelectedElement(item);
        }
 else {
          description.setText(Messages.getString(""String_Node_Str""));
          setSelectedElement(item);
        }
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  samplesTree.getTree().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      Object input=samplesTree.getInput();
      if (input instanceof Object[]) {
        Object[] array=(Object[])input;
        for (int i=0; i < array.length; i++) {
          if (array[i] instanceof ResourceEntry)           ((ResourceEntry)array[i]).dispose();
        }
      }
    }
  }
);
  samplesTree.setSorter(new SampleReportsSorter());
}",0.9936988027725268
76489,"public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  if (item != null) {
    if (item.getData() instanceof ReportDesignHandle) {
      String reportname=item.getText().substring(0,item.getText().lastIndexOf(""String_Node_Str""));
      description.setText(DescriptionMessages.getDescription(reportname));
      previewSampleReport(reportname);
      setSelectedElement(item);
    }
 else     if (item.getText().equals(""String_Node_Str"")) {
      description.setText(DescriptionMessages.getDescription(""String_Node_Str""));
      setSelectedElement(item.getData());
    }
 else {
      description.setText(Messages.getString(""String_Node_Str""));
      setSelectedElement(item.getData());
    }
  }
}","public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  if (item != null) {
    if (item.getData() instanceof ReportDesignHandle) {
      String reportname=item.getText().substring(0,item.getText().lastIndexOf(""String_Node_Str""));
      description.setText(DescriptionMessages.getDescription(reportname));
      previewSampleReport(reportname);
      setSelectedElement(item);
    }
 else     if (item.getText().equals(""String_Node_Str"")) {
      description.setText(DescriptionMessages.getDescription(""String_Node_Str""));
      setSelectedElement(item);
    }
 else {
      description.setText(Messages.getString(""String_Node_Str""));
      setSelectedElement(item);
    }
  }
}",0.9859943977591036
76490,"/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit3() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(4));
  this.testUseCache1();
}","/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit3() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(4));
  this.testUseCache1();
}",0.9587813620071683
76491,"/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit2() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(2);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,3);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
  this.testUseCache1();
}","/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit2() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(2);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,3);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
  this.testUseCache1();
}",0.9627228525121556
76492,"/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,100);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(0));
  this.testUseCache1();
}","/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,100);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(0));
  this.testUseCache1();
}",0.9629032258064516
76493,"/** 
 * @param dataSourceDesign2
 * @param dataSetDesign2
 */
void clearCache(DataSourceAndDataSet dsAndDs){
  Object cacheDir=null;
synchronized (cacheMap) {
    cacheDir=cacheMap.remove(dsAndDs);
  }
  if (cacheDir != null) {
    folderUtil.deleteDir((String)cacheDir);
  }
}","/** 
 * @param dataSourceDesign2
 * @param dataSetDesign2
 */
void clearCache(DataSourceAndDataSet dsAndDs){
  List cacheDir=new ArrayList();
synchronized (cacheMap) {
    while (getKey(dsAndDs) != null) {
      cacheDir.add(cacheMap.remove(getKey(dsAndDs)));
    }
  }
  for (int i=0; i < cacheDir.size(); i++) {
    folderUtil.deleteDir(cacheDir.get(i).toString());
  }
}",0.6061538461538462
76494,"public boolean equals(Object obj){
  if (obj == null || obj instanceof DataSourceAndDataSet == false)   return false;
  if (this == obj)   return true;
  IBaseDataSourceDesign dataSourceDesign2=((DataSourceAndDataSet)obj).dataSourceDesign;
  IBaseDataSetDesign dataSetDesign2=((DataSourceAndDataSet)obj).dataSetDesign;
  Collection paramterHints2=((DataSourceAndDataSet)obj).paramterHints;
  if (this.dataSourceDesign == dataSourceDesign2) {
    if (this.dataSetDesign == dataSetDesign2) {
      if (isEqualParamterHints(this.paramterHints,paramterHints2))       return true;
    }
 else     if (this.dataSetDesign == null || dataSetDesign2 == null) {
      return false;
    }
  }
 else   if (this.dataSourceDesign == null || dataSourceDesign2 == null) {
    return false;
  }
 else {
    if ((this.dataSetDesign != dataSetDesign2) && (this.dataSetDesign == null || dataSetDesign2 == null))     return false;
  }
  if (isEqualDataSourceDesign(dataSourceDesign,dataSourceDesign2) == false)   return false;
  if (isEqualDataSetDesign(dataSetDesign,dataSetDesign2) == false)   return false;
  if (this.isEqualParamterHints(this.paramterHints,paramterHints2) == false)   return false;
  return true;
}","public boolean equals(Object obj){
  if (obj == null || obj instanceof DataSourceAndDataSet == false)   return false;
  if (this == obj)   return true;
  return this.isDataSourceDataSetEqual((DataSourceAndDataSet)obj,true);
}",0.2304989458889669
76495,"public void setUp() throws Exception {
  super.setUp();
  Context context=Context.enter();
  scope=context.initStandardObjects();
  Context.exit();
  expectedValue=new ArrayList();
  appContextMap.put(DataEngine.DATASET_CACHE_OPTION,""String_Node_Str"");
  DataEngine myDataEngine=newDataEngine();
  myDataEngine.clearCache(this.dataSource,this.dataSet);
}","public void setUp() throws Exception {
  super.setUp();
  Context context=Context.enter();
  scope=context.initStandardObjects();
  Context.exit();
  expectedValue=new ArrayList();
  appContextMap.put(DataEngine.DATASET_CACHE_OPTION,""String_Node_Str"");
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,null);
  DataEngine myDataEngine=newDataEngine();
  myDataEngine.clearCache(this.dataSource,this.dataSet);
}",0.9123711340206184
76496,"/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseCache1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineImpl myDataEngine=newDataEngine();
  assertFalse(getDataSetCacheManager(myDataEngine).doesLoadFromCache());
  assertFalse(getDataSetCacheManager(myDataEngine).doesSaveToCache());
  QueryDefinition qd=this.newReportQuery();
  rowBeArray=getRowExpr();
  totalBeArray=getAggrExpr();
  bindingNameRow=getRowExprName();
  bindingExprRow=getAggrExprName();
  prepareExprNameAndQuery(rowBeArray,bindingNameRow,totalBeArray,bindingExprRow,qd);
  IQueryResults qr=myDataEngine.prepare(qd,appContextMap).execute(null);
  qr.getResultIterator().next();
  qr.close();
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.STRING_PREFIX_INTERVAL);
  qd.addResultSetExpression(bindingNameGroup[0],bindingExprGroup[0]);
  qd.addGroup(groupDefn[0]);
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String outputStr=getOutputStrForGroupTest(30,qd,0,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
  getDataSetCacheManager(myDataEngine).resetForTest();
}","/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseCache1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineImpl myDataEngine=newDataEngine();
  assertFalse(getDataSetCacheManager(myDataEngine).doesLoadFromCache());
  assertFalse(getDataSetCacheManager(myDataEngine).doesSaveToCache());
  executeQuery(myDataEngine);
}",0.390020366598778
76497,"/** 
 * This method will return NULL if the named data set is not cached. Otherwise, it will return a IResultMetaData instance which provides at least the ColumnName and ColumnType information for all cached columns. Please that the ParameterHint information
 * @param dataSource
 * @param dataSet
 * @param parameterHints
 * @return
 * @throws BirtException
 */
abstract public IResultMetaData getCachedDataSetMetaData(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws BirtException ;","/** 
 * This method will return NULL if the named data set is not cached. Otherwise, it will return a IResultMetaData instance which provides at least the ColumnName and ColumnType information for all cached columns. Please note that the ParameterHint information will usually essential to the result of data set design is omitted for it has nothing to do with the metadata.
 * @param dataSource
 * @param dataSet
 * @param parameterHints
 * @return
 * @throws BirtException
 */
abstract public IResultMetaData getCachedDataSetMetaData(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws BirtException ;",0.8966131907308378
76498,"public void run(){
  TreeItem item=(TreeItem)composite.getSelectedElement();
  Object selectedElement=item.getData();
  if (selectedElement == null || !(selectedElement instanceof ReportDesignHandle)) {
    return;
  }
  reportProject=createProject(item.getText().substring(0,item.getText().lastIndexOf(""String_Node_Str"")),false);
  if (reportProject != null) {
    PlaceResources.copy(composite.getShell(),reportProject.getLocation().toOSString(),item.getText(),((ReportDesignHandle)selectedElement).getFileName());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedPng(composite.getShell(),reportProject.getLocation().toOSString());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedLibraries(composite.getShell(),reportProject.getLocation().toOSString());
  }
  if (item.getParentItem().getText().equals(SCRIPTING_CATEGORY)) {
    IProject javaProject=createProject(SCRIPTING_CATEGORY,true);
    if (javaProject != null) {
      createSourceAndOutputFolder(javaProject);
      try {
        setClasspath(javaProject);
      }
 catch (      JavaModelException e) {
        ExceptionHandler.handle(e);
      }
catch (      CoreException e) {
        ExceptionHandler.handle(e);
      }
    }
    Enumeration enumeration=SampleIncludedSourceEntry.getJavaObjects();
    while (enumeration.hasMoreElements()) {
      URL javaObjectURL=(URL)enumeration.nextElement();
      String filename=javaObjectURL.getFile();
      String desFileName=filename.substring(filename.lastIndexOf('/') + 1);
      PlaceResources.copy(composite.getShell(),javaProject.getFolder(""String_Node_Str"").getLocation().toOSString(),desFileName,javaObjectURL);
    }
    refreshReportProject(javaProject);
  }
  refreshReportProject(reportProject);
  if (item.getParentItem().getParentItem().getText().equals(EXTENDING_CATEGORY)) {
    PlaceExtendedPlugin(item.getParentItem().getText());
  }
}","public void run(){
  TreeItem item=(TreeItem)composite.getSelectedElement();
  Object selectedElement=item.getData();
  if (selectedElement == null || !(selectedElement instanceof ReportDesignHandle)) {
    return;
  }
  reportProject=createProject(item.getText().substring(0,item.getText().lastIndexOf(""String_Node_Str"")),false);
  if (reportProject != null) {
    PlaceResources.copy(composite.getShell(),reportProject.getLocation().toOSString(),item.getText(),((ReportDesignHandle)selectedElement).getFileName());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedPng(composite.getShell(),reportProject.getLocation().toOSString());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedLibraries(composite.getShell(),reportProject.getLocation().toOSString());
  }
  if (item.getParentItem().getText().equals(SCRIPTING_CATEGORY)) {
    IProject javaProject=createProject(SCRIPTING_CATEGORY,true);
    if (javaProject != null) {
      createSourceAndOutputFolder(javaProject);
      try {
        setClasspath(javaProject);
      }
 catch (      JavaModelException e) {
        ExceptionHandler.handle(e);
      }
catch (      CoreException e) {
        ExceptionHandler.handle(e);
      }
    }
    Enumeration enumeration=SampleIncludedSourceEntry.getJavaObjects();
    while (enumeration.hasMoreElements()) {
      URL javaObjectURL=(URL)enumeration.nextElement();
      String filename=javaObjectURL.getFile();
      String desFileName=filename.substring(filename.lastIndexOf('/') + 1);
      PlaceResources.copy(composite.getShell(),javaProject.getFolder(""String_Node_Str"").getLocation().toOSString(),desFileName,javaObjectURL);
    }
    refreshReportProject(javaProject);
  }
  refreshReportProject(reportProject);
  if (item.getParentItem().getParentItem() != null && item.getParentItem().getParentItem().getText().equals(EXTENDING_CATEGORY)) {
    PlaceExtendedPlugin(item.getParentItem().getText());
  }
}",0.9879396984924624
76499,"public void testTotalMode() throws Exception {
  IAggregation ag=BuiltInAggregationFactory.getInstance().getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(BuiltInAggregationFactory.TOTAL_MODE_FUNC,ag.getName());
  assertEquals(IAggregation.SUMMARY_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  assertTrue(ag.getParameterDefn()[0]);
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray1[i])});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray2.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray2[i])});
  }
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  for (int i=0; i < str1.length; i++) {
    ac.onRow(new Object[]{str1[i]});
  }
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
  ac.start();
  ac.onRow(new Double[]{new Double(4)});
  ac.onRow(new Double[]{new Double(4)});
  ac.onRow(new Double[]{new Double(3)});
  ac.finish();
  assertEquals(ac.getValue(),new Double(4));
  ac.start();
  for (int i=0; i < dates.length; i++) {
    ac.onRow(new Object[]{dates[i]});
  }
  ac.finish();
  assertEquals(ac.getValue(),null);
  ac.start();
  for (int i=0; i < dates2.length; i++) {
    ac.onRow(new Object[]{dates2[i]});
  }
  ac.finish();
  assertEquals(ac.getValue(),new Date(2000000L));
}","public void testTotalMode() throws Exception {
  IAggregation ag=BuiltInAggregationFactory.getInstance().getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(BuiltInAggregationFactory.TOTAL_MODE_FUNC,ag.getName());
  assertEquals(IAggregation.SUMMARY_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  assertTrue(ag.getParameterDefn()[0]);
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray1[i])});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray2.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray2[i])});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray4.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray4[i])});
  }
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray5.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray5[i])});
  }
  ac.finish();
  assertEquals(new Double(1.0),ac.getValue());
  ac.start();
  for (int i=0; i < str1.length; i++) {
    ac.onRow(new Object[]{str1[i]});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
  ac.start();
  ac.onRow(new Double[]{new Double(4)});
  ac.onRow(new Double[]{new Double(4)});
  ac.onRow(new Double[]{new Double(3)});
  ac.finish();
  assertEquals(ac.getValue(),new Double(4));
  ac.start();
  for (int i=0; i < dates.length; i++) {
    ac.onRow(new Object[]{dates[i]});
  }
  ac.finish();
  assertEquals(ac.getValue(),null);
  ac.start();
  for (int i=0; i < dates2.length; i++) {
    ac.onRow(new Object[]{dates2[i]});
  }
  ac.finish();
  assertEquals(ac.getValue(),new Date(2000000L));
}",0.8846690868472493
76500,"private void loadFromDisk() throws IOException, DataException {
  documentObj=documentManager.openDocumentObject(NamingUtil.getDimensionDocName(name));
  if (documentObj == null) {
    throw new DataException(ResourceConstants.DIMENSION_NOT_EXIST,name);
  }
  isTime=documentObj.readBoolean();
  hierarchy=new Hierarchy(documentManager,name);
  hierarchy.loadFromDisk();
  length=hierarchy.size();
  documentObj.close();
  documentObj=null;
}","private void loadFromDisk() throws IOException, DataException {
  documentObj=documentManager.openDocumentObject(NamingUtil.getDimensionDocName(name));
  if (documentObj == null) {
    throw new DataException(ResourceConstants.DIMENSION_NOT_EXIST,name);
  }
  isTime=documentObj.readBoolean();
  String hierarchyName=documentObj.readString();
  hierarchy=new Hierarchy(documentManager,hierarchyName);
  hierarchy.loadFromDisk();
  length=hierarchy.size();
  documentObj.close();
  documentObj=null;
}",0.9193205944798302
76501,"/** 
 * Constructor
 * @param sourceHandle
 * @param newContainer
 * @param afterHandle
 */
public CrosstabPasterCommand(DesignElementHandle sourceHandle,DesignElementHandle newContainer,DesignElementHandle afterHandle){
  this.sourceHandle=sourceHandle;
  this.newContainer=newContainer;
  this.afterHandle=afterHandle;
}","/** 
 * Constructor
 * @param sourceHandle
 * @param newContainer
 * @param afterHandle
 */
public CrosstabPasterCommand(DesignElementHandle sourceHandle,DesignElementHandle newContainer,DesignElementHandle afterHandle){
  this.sourceHandle=sourceHandle;
  this.cloneElement=sourceHandle.copy();
  this.newContainer=newContainer;
  this.afterHandle=afterHandle;
}",0.94014598540146
76502,"/** 
 * Executes the Command.
 */
public void execute(){
  try {
    calculatePositionAndSlotId();
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    DesignElementHandle newHandle=copyNewHandle(sourceHandle.copy(),currentDesignHandle);
    addHandleToReport(newHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}","/** 
 * Executes the Command.
 */
public void execute(){
  try {
    calculatePositionAndSlotId();
    ModuleHandle currentDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    DesignElementHandle newHandle=copyNewHandle(cloneElement,currentDesignHandle);
    addHandleToReport(newHandle);
  }
 catch (  Exception e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}",0.9671957671957672
76503,"AbstractRunTask(IReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
}","AbstractRunTask(IReportEngine engine,IReportRunnable runnable,int taskType){
  super(engine,runnable,taskType);
}",0.8921568627450981
76504,"public DataExtractionTask(IReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
}","public DataExtractionTask(IReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable,IEngineTask.TASK_DATAEXTRACTION);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
}",0.9593908629441624
76505,"/** 
 * @param engine reference to report engine
 * @param appContext a user-defined object that capsulates the context for running a task. The context object is passed to callback functions (i.e., functions in image handlers, action handlers, etc. ) that are written by those who embeds engine in their applications
 */
protected EngineTask(IReportEngine engine,IReportRunnable runnable){
  taskID=id++;
  this.engine=engine;
  executionContext=new ExecutionContext(this);
  executionContext.setReportContext(new ReportContextImpl(executionContext));
  setReportRunnable(runnable);
  executionContext.setAppContext(engine.getConfig().getAppContext());
  cancelFlag=false;
  runningStatus=RUNNING_STATUS_START;
}","protected EngineTask(IReportEngine engine,IReportRunnable runnable,int taskType){
  this(engine,runnable);
  this.taskType=taskType;
}",0.2482269503546099
76506,"/** 
 * @param engine reference to the report engine
 * @param runnable the runnable report design
 */
public GetParameterDefinitionTask(IReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
}","/** 
 * @param engine reference to the report engine
 * @param runnable the runnable report design
 */
public GetParameterDefinitionTask(IReportEngine engine,IReportRunnable runnable){
  super(engine,runnable,IEngineTask.TASK_GETPARAMETERDEFINITION);
}",0.913793103448276
76507,"/** 
 * @param engine the report engine
 * @param runnable the report runnable object
 * @param reportDoc the report document instance
 */
public RenderTask(IReportEngine engine,IReportRunnable runnable,IReportDocument reportDoc){
  super(engine,runnable);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  openReportDocument(reportDoc);
  loadDesign();
  innerRender=new PageRangeRender(new long[]{1,this.reportDoc.getPageCount()});
}","/** 
 * @param engine the report engine
 * @param runnable the report runnable object
 * @param reportDoc the report document instance
 */
public RenderTask(IReportEngine engine,IReportRunnable runnable,IReportDocument reportDoc){
  super(engine,runnable,IEngineTask.TASK_RENDER);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  openReportDocument(reportDoc);
  loadDesign();
  innerRender=new PageRangeRender(new long[]{1,this.reportDoc.getPageCount()});
}",0.9753593429158112
76508,"/** 
 * @param engine reference to the report engine
 * @param runnable the runnable report design reference
 */
public RunAndRenderTask(IReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
}","/** 
 * @param engine reference to the report engine
 * @param runnable the runnable report design reference
 */
public RunAndRenderTask(IReportEngine engine,IReportRunnable runnable){
  super(engine,runnable,IEngineTask.TASK_RUNANDRENDER);
}",0.933920704845815
76509,"/** 
 * @param engine the report engine
 * @param runnable the report runnable instance
 */
public RunTask(IReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
  executionContext.setFactoryMode(true);
  executionContext.setPresentationMode(false);
}","/** 
 * @param engine the report engine
 * @param runnable the report runnable instance
 */
public RunTask(IReportEngine engine,IReportRunnable runnable){
  super(engine,runnable,IEngineTask.TASK_RUN);
  executionContext.setFactoryMode(true);
  executionContext.setPresentationMode(false);
}",0.962566844919786
76510,"/** 
 * is in factory mode
 * @return true, factory mode, false not in factory mode
 */
public boolean isInFactory(){
  return true;
}","/** 
 * is in factory mode
 * @return true, factory mode, false not in factory mode
 */
public boolean isInFactory(){
  return factoryMode;
}",0.9672727272727272
76511,"public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0, dLength=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      dLength=(i < iTickCount - 1) ? daTickCoordinates[i + 1] - daTickCoordinates[i] : 0;
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}","public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0, dLength=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      dLength=0;
      for (int j=0; j < iTickCount - 1; j++) {
        if (dX < daTickCoordinates[j + 1] && dX >= daTickCoordinates[j]) {
          dLength=daTickCoordinates[j + 1] - daTickCoordinates[j];
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}",0.9886363636363636
76512,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  GridLayout glGapWidth=new GridLayout();
  glGapWidth.numColumns=8;
  glGapWidth.horizontalSpacing=5;
  glGapWidth.marginHeight=2;
  glGapWidth.marginWidth=2;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(3,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbCategory=new Button(choiceComposite,SWT.CHECK);
  cbCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbCategory.setText(Messages.getString(""String_Node_Str""));
  cbCategory.setSelection(axis.isCategoryAxis());
  cbCategory.addSelectionListener(this);
  cbCategory.setEnabled(!AxisType.TEXT_LITERAL.equals(axis.getType()) && !BarChart.TYPE_LITERAL.equals(getChart().getType()) && !StockChart.TYPE_LITERAL.equals(getChart().getType()));
  cbCategory.setVisible(angleType == AngleType.X);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible(angleType == AngleType.X);
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.widthHint=260;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  Label lblOrientation=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLOrientation=new GridData(GridData.FILL);
  gdLBLOrientation.widthHint=90;
  gdLBLOrientation.grabExcessVerticalSpace=false;
  lblOrientation.setLayoutData(gdLBLOrientation);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Label(cmpGeneral,SWT.SINGLE);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBOrientation.horizontalSpan=4;
  gdCMBOrientation.widthHint=120;
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.setText(LiteralHelper.orientationSet.getDisplayNameByName(getAxisForProcessing().getOrientation().getName()));
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMinorGrid();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  GridLayout glGapWidth=new GridLayout();
  glGapWidth.numColumns=8;
  glGapWidth.horizontalSpacing=5;
  glGapWidth.marginHeight=2;
  glGapWidth.marginWidth=2;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(3,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbCategory=new Button(choiceComposite,SWT.CHECK);
  cbCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbCategory.setText(Messages.getString(""String_Node_Str""));
  cbCategory.setSelection(axis.isCategoryAxis());
  cbCategory.addSelectionListener(this);
  cbCategory.setEnabled(!AxisType.TEXT_LITERAL.equals(axis.getType()));
  cbCategory.setVisible(angleType == AngleType.X);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible(angleType == AngleType.X);
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.widthHint=260;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  Label lblOrientation=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLOrientation=new GridData(GridData.FILL);
  gdLBLOrientation.widthHint=90;
  gdLBLOrientation.grabExcessVerticalSpace=false;
  lblOrientation.setLayoutData(gdLBLOrientation);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Label(cmpGeneral,SWT.SINGLE);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBOrientation.horizontalSpan=4;
  gdCMBOrientation.widthHint=120;
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.setText(LiteralHelper.orientationSet.getDisplayNameByName(getAxisForProcessing().getOrientation().getName()));
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMinorGrid();
  return cmpContent;
}",0.989363722697056
76513,"/** 
 * Sets the cache option. This function only available for MODE_DIRECT_PRESENTATION mode. In other cases, exception will be thrown.
 */
public void setCacheOption(int option,int cacheCount) throws BirtException {
  if (!(option == CACHE_USE_DEFAULT || option == CACHE_USE_DISABLE || option == CACHE_USE_ALWAYS))   throw new AdapterException(ResourceConstants.INVALID_CAHCE_OPTION,new Integer(option));
  this.cacheOption=option;
  this.cacheCount=cacheCount;
}","/** 
 * Sets the cache option. This function only available for MODE_DIRECT_PRESENTATION mode. In other cases, exception will be thrown.
 */
public void setCacheOption(int option,int cacheCount) throws BirtException {
  if (!(option == CACHE_USE_DEFAULT || option == CACHE_USE_DISABLE || option == CACHE_USE_ALWAYS))   throw new AdapterException(ResourceConstants.INVALID_CAHCE_OPTION,new Integer(option));
  this.cacheSet=true;
  this.cacheOption=option;
  this.cacheCount=cacheCount;
}",0.9159663865546218
76514,"/** 
 * Gets a DataEngineContext for use to initialize data engine
 */
public DataEngineContext getDataEngineContext() throws BirtException {
  DataEngineContext context=DataEngineContext.newInstance(mode,getTopScope(),docReader,docWriter);
  context.setCacheOption(cacheOption,cacheCount);
  return context;
}","/** 
 * Gets a DataEngineContext for use to initialize data engine
 */
public DataEngineContext getDataEngineContext() throws BirtException {
  DataEngineContext context=DataEngineContext.newInstance(mode,getTopScope(),docReader,docWriter);
  if (cacheSet)   context.setCacheOption(cacheOption,cacheCount);
  return context;
}",0.9748427672955976
76515,"public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=(CrosstabReportItemHandle)handleAdpter.getCrosstabItemHandle();
  try {
    int position=reportHandle.getDimensionCount(getType());
    DimensionViewHandle viewHandle=reportHandle.insertDimension(getDimensionHandle(),getType(),position);
    HierarchyHandle hierarchyHandle=getDimensionHandle().getDefaultHierarchy();
    int count=hierarchyHandle.getLevelCount();
    if (count == 0) {
      rollBack();
      return;
    }
    LevelHandle levelHandle=hierarchyHandle.getLevel(0);
    ComputedColumn bindingColumn=CrosstabAdaptUtil.createComputedColumn((ExtendedItemHandle)reportHandle.getModelHandle(),levelHandle);
    ((ExtendedItemHandle)reportHandle.getModelHandle()).addColumnBinding(bindingColumn,false);
    LevelViewHandle levelViewHandle=viewHandle.insertLevel(levelHandle,0);
    CrosstabCellHandle cellHandle=levelViewHandle.getCell();
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(levelHandle.getName());
    dataHandle.setResultSetColumn(bindingColumn.getName());
    cellHandle.addContent(dataHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    e.printStackTrace();
  }
  transEnd();
}","public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=(CrosstabReportItemHandle)handleAdpter.getCrosstabItemHandle();
  try {
    int position=reportHandle.getDimensionCount(getType());
    DimensionViewHandle viewHandle=reportHandle.insertDimension(getDimensionHandle(),getType(),position);
    HierarchyHandle hierarchyHandle=getDimensionHandle().getDefaultHierarchy();
    int count=hierarchyHandle.getLevelCount();
    if (count == 0) {
      rollBack();
      return;
    }
    LevelHandle levelHandle=hierarchyHandle.getLevel(0);
    ComputedColumn bindingColumn=CrosstabAdaptUtil.createComputedColumn((ExtendedItemHandle)reportHandle.getModelHandle(),levelHandle);
    ((ExtendedItemHandle)reportHandle.getModelHandle()).addColumnBinding(bindingColumn,false);
    LevelViewHandle levelViewHandle=CrosstabUtil.insertLevel(viewHandle,levelHandle,0);
    CrosstabCellHandle cellHandle=levelViewHandle.getCell();
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(levelHandle.getName());
    dataHandle.setResultSetColumn(bindingColumn.getName());
    cellHandle.addContent(dataHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    e.printStackTrace();
  }
  transEnd();
}",0.9842169162282476
76516,"public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=(CrosstabReportItemHandle)handleAdpter.getCrosstabItemHandle();
  try {
    DimensionViewHandle viewHandle=reportHandle.insertDimension(getDimensionHandle(),getType(),0);
    HierarchyHandle hierarchyHandle=getDimensionHandle().getDefaultHierarchy();
    int count=hierarchyHandle.getLevelCount();
    if (count == 0) {
      rollBack();
      return;
    }
    LevelHandle levelHandle=hierarchyHandle.getLevel(0);
    ComputedColumn bindingColumn=CrosstabAdaptUtil.createComputedColumn((ExtendedItemHandle)reportHandle.getModelHandle(),levelHandle);
    ((ExtendedItemHandle)reportHandle.getModelHandle()).addColumnBinding(bindingColumn,false);
    LevelViewHandle levelViewHandle=viewHandle.insertLevel(levelHandle,0);
    CrosstabCellHandle cellHandle=levelViewHandle.getCell();
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(levelHandle.getName());
    dataHandle.setResultSetColumn(bindingColumn.getName());
    cellHandle.addContent(dataHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    e.printStackTrace();
  }
  transEnd();
}","public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=(CrosstabReportItemHandle)handleAdpter.getCrosstabItemHandle();
  try {
    DimensionViewHandle viewHandle=reportHandle.insertDimension(getDimensionHandle(),getType(),0);
    HierarchyHandle hierarchyHandle=getDimensionHandle().getDefaultHierarchy();
    int count=hierarchyHandle.getLevelCount();
    if (count == 0) {
      rollBack();
      return;
    }
    LevelHandle levelHandle=hierarchyHandle.getLevel(0);
    ComputedColumn bindingColumn=CrosstabAdaptUtil.createComputedColumn((ExtendedItemHandle)reportHandle.getModelHandle(),levelHandle);
    ((ExtendedItemHandle)reportHandle.getModelHandle()).addColumnBinding(bindingColumn,false);
    LevelViewHandle levelViewHandle=CrosstabUtil.insertLevel(viewHandle,levelHandle,0);
    CrosstabCellHandle cellHandle=levelViewHandle.getCell();
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(levelHandle.getName());
    dataHandle.setResultSetColumn(bindingColumn.getName());
    cellHandle.addContent(dataHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    e.printStackTrace();
  }
  transEnd();
}",0.9833119383825416
76517,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLM.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}",0.9958074309671824
76518,"/** 
 * Gets the Java class used to represent the specified data type.
 * @return Class for the specified data type. If data type is unknown or ANY, returns null. 
 */
public static Class getClass(int typeCode){
  if (typeCode < 0 || typeCode >= classes.length) {
    return null;
  }
  return classes[typeCode];
}","/** 
 * Gets the Java class used to represent the specified data type.
 * @return Class for the specified data type. If data type is unknown orANY, returns null.
 */
public static Class getClass(int typeCode){
  if (typeCode < 0 || typeCode >= classes.length) {
    return null;
  }
  for (int i=0; i < typeCodes.length; i++) {
    if (typeCodes[i] == typeCode) {
      return classes[i];
    }
  }
  return null;
}",0.8010973936899863
76519,"/** 
 * Gets the description of a data type.
 * @param typeCode Data type enumeration value
 * @return Textual description of data type. ""Unknown"" if an undefined data type is passed in.
 */
public static String getName(int typeCode){
  if (typeCode < 0 || typeCode >= names.length) {
    return new String(""String_Node_Str"");
  }
  return names[typeCode];
}","/** 
 * Gets the description of a data type.
 * @param typeCode Data type enumeration value
 * @return Textual description of data type. ""Unknown"" if an undefined datatype is passed in.
 */
public static String getName(int typeCode){
  if (typeCode < 0 || typeCode >= typeCodes.length) {
    return new String(""String_Node_Str"");
  }
  for (int i=0; i < typeCodes.length; i++) {
    if (typeCodes[i] == typeCode) {
      return names[i];
    }
  }
  return null;
}",0.8418491484184915
76520,"public static int getDataType(Class objClass){
  for (int i=0; i < classes.length; i++) {
    if (classes[i].equals(objClass)) {
      return i;
    }
  }
  return UNKNOWN_TYPE;
}","/** 
 * @param objClass
 * @return
 */
public static int getDataType(Class objClass){
  for (int i=0; i < classes.length; i++) {
    if (classes[i].equals(objClass)) {
      return typeCodes[i];
    }
  }
  return UNKNOWN_TYPE;
}",0.8725490196078431
76521,"/** 
 * Adjust size of table layout.
 * @param size is all figure size
 * @throws SemanticException
 */
public void ajustSize(Dimension size) throws SemanticException {
  if (!(getModelAdaptHelper() instanceof ITableAdapterHelper)) {
    return;
  }
  ITableAdapterHelper tableHelper=(ITableAdapterHelper)getModelAdaptHelper();
  size=size.shrink(tableHelper.getInsets().getWidth(),tableHelper.getInsets().getHeight());
  int columnCount=getColumnCount();
  int samColumnWidth=0;
  for (int i=0; i < columnCount; i++) {
    if (i != columnCount - 1) {
      samColumnWidth=samColumnWidth + tableHelper.caleVisualWidth(i + 1);
    }
  }
  int lastColumnWidth=size.width - samColumnWidth;
  if (lastColumnWidth < tableHelper.getMinWidth(columnCount)) {
    lastColumnWidth=tableHelper.getMinWidth(columnCount);
    HandleAdapterFactory.getInstance().getColumnHandleAdapter(getColumn(columnCount)).setWidth(lastColumnWidth);
  }
 else   if (lastColumnWidth != tableHelper.caleVisualWidth(columnCount)) {
    HandleAdapterFactory.getInstance().getColumnHandleAdapter(getColumn(columnCount)).setWidth(lastColumnWidth);
  }
  int rowCount=getRowCount();
  int samRowHeight=0;
  for (int i=0; i < rowCount; i++) {
    if (i != rowCount - 1) {
      samRowHeight=samRowHeight + tableHelper.caleVisualHeight(i + 1);
    }
  }
  int lastRowHeight=size.height - samRowHeight;
  if (lastRowHeight < tableHelper.getMinHeight(rowCount)) {
    lastRowHeight=tableHelper.getMinHeight(rowCount);
    HandleAdapterFactory.getInstance().getRowHandleAdapter(getRow(rowCount)).setHeight(lastRowHeight);
  }
 else   if (lastRowHeight != tableHelper.caleVisualHeight(rowCount)) {
    HandleAdapterFactory.getInstance().getRowHandleAdapter(getRow(rowCount)).setHeight(lastRowHeight);
  }
  HandleAdapterFactory.getInstance().getRowHandleAdapter(getRow(rowCount)).setHeight(lastRowHeight);
  setSize(new Dimension(samColumnWidth + lastColumnWidth,samRowHeight + lastRowHeight).expand(tableHelper.getInsets().getWidth(),tableHelper.getInsets().getHeight()));
}","/** 
 * Adjust size of table layout.
 * @param size is all figure size
 * @throws SemanticException
 */
public void ajustSize(Dimension size) throws SemanticException {
  if (!(getModelAdaptHelper() instanceof ITableAdapterHelper)) {
    return;
  }
  ITableAdapterHelper tableHelper=(ITableAdapterHelper)getModelAdaptHelper();
  size=size.shrink(tableHelper.getInsets().getWidth(),tableHelper.getInsets().getHeight());
  int columnCount=getColumnCount();
  int samColumnWidth=0;
  for (int i=0; i < columnCount; i++) {
    if (i != columnCount - 1) {
      samColumnWidth=samColumnWidth + tableHelper.caleVisualWidth(i + 1);
    }
  }
  int lastColumnWidth=size.width - samColumnWidth;
  if (lastColumnWidth < tableHelper.getMinWidth(columnCount)) {
    lastColumnWidth=tableHelper.getMinWidth(columnCount);
    HandleAdapterFactory.getInstance().getColumnHandleAdapter(getColumn(columnCount)).setWidth(lastColumnWidth);
  }
 else   if (lastColumnWidth != tableHelper.caleVisualWidth(columnCount)) {
    HandleAdapterFactory.getInstance().getColumnHandleAdapter(getColumn(columnCount)).setWidth(lastColumnWidth);
  }
  int rowCount=getRowCount();
  int samRowHeight=0;
  for (int i=0; i < rowCount; i++) {
    if (i != rowCount - 1) {
      samRowHeight=samRowHeight + tableHelper.caleVisualHeight(i + 1);
    }
  }
  int lastRowHeight=size.height - samRowHeight;
  if (lastRowHeight < tableHelper.getMinHeight(rowCount)) {
    lastRowHeight=tableHelper.getMinHeight(rowCount);
    HandleAdapterFactory.getInstance().getRowHandleAdapter(getRow(rowCount)).setHeight(lastRowHeight);
  }
 else   if (lastRowHeight != tableHelper.caleVisualHeight(rowCount)) {
    HandleAdapterFactory.getInstance().getRowHandleAdapter(getRow(rowCount)).setHeight(lastRowHeight);
  }
  setSize(new Dimension(samColumnWidth + lastColumnWidth,samRowHeight + lastRowHeight).expand(tableHelper.getInsets().getWidth(),tableHelper.getInsets().getHeight()));
}",0.9170657927905218
76522,"public void buildUI(Composite parent){
  super.buildUI(parent);
  container.setLayout(WidgetUtil.createGridLayout(1));
  OutputPropertyDescriptorProvider provider=new OutputPropertyDescriptorProvider();
  OutputSection output=new OutputSection(container,true);
  output.setProvider(provider);
  addSection(PageSectionId.VISIBILITY_OUTPUT,output);
  createSections();
  layoutSections();
}","public void buildUI(Composite parent){
  super.buildUI(parent);
  container.setLayout(WidgetUtil.createGridLayout(1));
  OutputPropertyDescriptorProvider provider=new OutputPropertyDescriptorProvider();
  OutputSection output=new OutputSection(container,true);
  output.setHeight(300);
  output.setProvider(provider);
  addSection(PageSectionId.VISIBILITY_OUTPUT,output);
  createSections();
  layoutSections();
}",0.968789013732834
76523,"public void layout(){
  GridData gd=(GridData)output.getControl().getLayoutData();
  if (getLayoutNum() > 0)   gd.horizontalSpan=getLayoutNum() - placeholder;
 else   gd.horizontalSpan=((GridLayout)parent.getLayout()).numColumns - placeholder;
}","public void layout(){
  GridData gd=(GridData)output.getControl().getLayoutData();
  if (getLayoutNum() > 0)   gd.horizontalSpan=getLayoutNum() - placeholder;
 else   gd.horizontalSpan=((GridLayout)parent.getLayout()).numColumns - placeholder;
  if (height > -1) {
    gd.heightHint=height;
    gd.grabExcessVerticalSpace=false;
    if (displayLabel != null) {
      gd=(GridData)displayLabel.getLayoutData();
      gd.verticalAlignment=GridData.VERTICAL_ALIGN_FILL;
    }
  }
}",0.677731673582296
76524,"/** 
 * Draws a chunk of text at the pdf.
 * @param text					the textArea to be drawed.
 * @param textX					the X position of the textArea relative to current page.
 * @param textY					the Y position of the textArea relative to current page.
 * @param contentByte			the content byte to draw the text.
 * @param contentByteHeight		the height of the content byte.
 */
protected void drawTextAt(ITextArea text,int textX,int textY,PdfContentByte contentByte,float contentByteHeight){
}","/** 
 * Draws a chunk of text at the pdf.
 * @param text					the textArea to be drawed.
 * @param tx					the X position of the textArea relative to current page.
 * @param ty					the Y position of the textArea relative to current page.
 * @param contentByte			the content byte to draw the text.
 * @param contentByteHeight		the height of the content byte.
 */
protected void drawTextAt(ITextArea text,int tx,int ty,PdfContentByte contentByte,float contentByteHeight){
}",0.96
76525,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}",0.995869575781136
76526,"public IBasePreparedQuery prepare(IDataQueryDefinition query,Map appContext) throws AdapterException {
  try {
    if (query instanceof IQueryDefinition)     return prepare((IQueryDefinition)query,appContext == null ? this.sessionContext.getAppContext() : appContext);
 else     if (query instanceof ICubeQueryDefinition)     return prepare((ICubeQueryDefinition)query);
 else     return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","public IBasePreparedQuery prepare(IDataQueryDefinition query,Map appContext) throws AdapterException {
  try {
    if (query instanceof IQueryDefinition)     return prepare((IQueryDefinition)query,appContext);
 else     if (query instanceof ICubeQueryDefinition)     return prepare((ICubeQueryDefinition)query);
 else     return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.5201305767138193
76527,"/** 
 * convert path from System Properties Definition. For example: ${java.io.tmpdir}
 * @param path
 * @return
 */
protected static String convertSystemPath(String path){
  if (path == null)   return path;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(path);
  if (m.find()) {
    String sysPath=trimSep(System.getProperty(m.group(1).trim()));
    return DataUtil.trimString(sysPath) + m.group(2).trim();
  }
  return path;
}","/** 
 * convert path from System Properties Definition. For example: ${java.io.tmpdir}
 * @param path
 * @return
 */
protected static String convertSystemPath(String path){
  if (path == null)   return path;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(path);
  if (m.find()) {
    String sysPath=DataUtil.trimSepEnd(System.getProperty(m.group(1).trim()));
    return DataUtil.trimString(sysPath) + m.group(2).trim();
  }
  return path;
}",0.9730290456431536
76528,"/** 
 * If set isWorkingFolderAccessOnly as true, check the file if exist in working folder.
 * @param filePath
 * @return boolean
 */
public static boolean isValidFilePath(String filePath){
  if (filePath == null)   return false;
  if (isWorkingFolderAccessOnly) {
    File docFile=new File(filePath);
    if (!docFile.isAbsolute())     return true;
    File docFolder=new File(workingFolder);
    if (docFolder.isAbsolute()) {
      String absolutePath=docFile.getAbsolutePath();
      String docFolderPath=docFolder.getAbsolutePath();
      if (isWindowsPlatform()) {
        absolutePath=absolutePath.toLowerCase();
        docFolderPath=docFolderPath.toLowerCase();
      }
      return absolutePath.startsWith(docFolderPath);
    }
 else {
      return false;
    }
  }
  return true;
}","/** 
 * If set isWorkingFolderAccessOnly as true, check the file if exist in working folder.
 * @param filePath
 * @return boolean
 */
public static boolean isValidFilePath(String filePath){
  if (filePath == null)   return false;
  if (isWorkingFolderAccessOnly) {
    File docFile=new File(filePath);
    if (!docFile.isAbsolute()) {
      if (filePath.indexOf(""String_Node_Str"") != -1)       return false;
      return true;
    }
    File docFolder=new File(workingFolder);
    if (docFolder.isAbsolute()) {
      String absolutePath=docFile.getAbsolutePath();
      String docFolderPath=docFolder.getAbsolutePath();
      if (isWindowsPlatform()) {
        absolutePath=absolutePath.toLowerCase();
        docFolderPath=docFolderPath.toLowerCase();
      }
      return absolutePath.startsWith(docFolderPath);
    }
 else {
      return false;
    }
  }
  return true;
}",0.9082183563287344
76529,"/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  boolean isRelative=false;
  path=convertSystemPath(path);
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  if (isRelativePath(path)) {
    isRelative=true;
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=trimSep(getRealPath(path,context));
  }
 else {
    realPath=trimSep(path);
  }
  boolean flag=makeDir(realPath);
  if (!canWrite)   return realPath;
  if (flag) {
    try {
      if (canWrite && new File(realPath).canWrite())       return realPath;
    }
 catch (    Exception e) {
    }
  }
  if (isRelative) {
    realPath=trimSep(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    if (defaultPath != null)     realPath=trimSep(System.getProperty(""String_Node_Str"")) + File.separator + defaultPath;
  }
  makeDir(realPath);
  return realPath;
}","/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  boolean isRelative=false;
  path=convertSystemPath(path);
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  if (isRelativePath(path)) {
    isRelative=true;
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=DataUtil.trimSepEnd(getRealPath(path,context));
  }
 else {
    realPath=DataUtil.trimSepEnd(path);
  }
  boolean flag=makeDir(realPath);
  if (!canWrite)   return realPath;
  if (flag) {
    try {
      if (canWrite && new File(realPath).canWrite())       return realPath;
    }
 catch (    Exception e) {
    }
  }
  if (isRelative) {
    realPath=DataUtil.trimSepEnd(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    if (defaultPath != null)     realPath=DataUtil.trimSepEnd(System.getProperty(""String_Node_Str"")) + File.separator + defaultPath;
  }
  makeDir(realPath);
  return realPath;
}",0.9606060606060606
76530,"/** 
 * Process working folder setting. If path is a relative path, first relative to context.
 * @param context
 * @param path
 * @return
 */
public static String processWorkingFolder(ServletContext context,String path){
  path=convertSystemPath(DataUtil.trimString(path));
  String realPath=null;
  if (isRelativePath(path)) {
    realPath=getRealPath(path,context);
    makeDir(realPath);
    return trimSep(path);
  }
 else {
    realPath=path;
  }
  makeDir(realPath);
  return trimSep(realPath);
}","/** 
 * Process working folder setting. If path is a relative path, first relative to context.
 * @param context
 * @param path
 * @return
 */
public static String processWorkingFolder(ServletContext context,String path){
  path=convertSystemPath(DataUtil.trimString(path));
  String realPath=null;
  if (isRelativePath(path)) {
    realPath=getRealPath(path,context);
    makeDir(realPath);
    return DataUtil.trimSepEnd(path);
  }
 else {
    realPath=path;
  }
  makeDir(realPath);
  return DataUtil.trimSepEnd(realPath);
}",0.9495145631067962
76531,"/** 
 * Configure the context param settings
 * @param map
 * @param project
 * @param query
 * @param monitor
 * @throws CoreException
 */
public static void configureContextParam(Map map,IProject project,IOverwriteQuery query,IProgressMonitor monitor) throws CoreException {
  if (monitor.isCanceled())   return;
  if (map == null || project == null) {
    return;
  }
  WebArtifactEdit webEdit=WebArtifactEdit.getWebArtifactEditForWrite(project);
  if (webEdit == null)   return;
  try {
    WebApp webapp=(WebApp)webEdit.getDeploymentDescriptorRoot();
    Iterator it=map.keySet().iterator();
    while (it.hasNext()) {
      String name=DataUtil.getString(it.next(),false);
      ContextParamBean bean=(ContextParamBean)map.get(name);
      if (bean == null)       continue;
      List list=null;
      if (webapp.getVersionID() == 23) {
        list=webapp.getContexts();
      }
 else {
        list=webapp.getContextParams();
      }
      Object obj=getContextParamByName(list,name);
      if (obj != null) {
        String ret=query.queryOverwrite(""String_Node_Str"" + name + ""String_Node_Str"");
        if (IOverwriteQuery.NO.equalsIgnoreCase(ret)) {
          continue;
        }
        if (IOverwriteQuery.CANCEL.equalsIgnoreCase(ret)) {
          monitor.setCanceled(true);
          return;
        }
        webapp.getContextParams().remove(obj);
      }
      String value=bean.getValue();
      String description=bean.getDescription();
      if (webapp.getVersionID() == 23) {
        ContextParam param=WebapplicationFactory.eINSTANCE.createContextParam();
        param.setParamName(name);
        param.setParamValue(value);
        if (description != null)         param.setDescription(description);
        param.setWebApp(webapp);
      }
 else {
        ParamValue param=CommonFactory.eINSTANCE.createParamValue();
        param.setName(name);
        param.setValue(value);
        if (description != null)         param.setDescription(description);
        webapp.getContextParams().add(param);
      }
    }
    webEdit.saveIfNecessary(monitor);
  }
  finally {
    webEdit.dispose();
  }
}","/** 
 * Configure the context param settings
 * @param map
 * @param project
 * @param query
 * @param monitor
 * @throws CoreException
 */
public static void configureContextParam(Map map,IProject project,IOverwriteQuery query,IProgressMonitor monitor) throws CoreException {
  if (monitor.isCanceled())   return;
  if (map == null || project == null) {
    return;
  }
  WebArtifactEdit webEdit=WebArtifactEdit.getWebArtifactEditForWrite(project);
  if (webEdit == null)   return;
  try {
    WebApp webapp=(WebApp)webEdit.getDeploymentDescriptorRoot();
    Iterator it=map.keySet().iterator();
    while (it.hasNext()) {
      String name=DataUtil.getString(it.next(),false);
      ContextParamBean bean=(ContextParamBean)map.get(name);
      if (bean == null)       continue;
      List list=null;
      if (webapp.getVersionID() == 23) {
        list=webapp.getContexts();
      }
 else {
        list=webapp.getContextParams();
      }
      Object obj=getContextParamByName(list,name);
      if (obj != null) {
        String ret=query.queryOverwrite(""String_Node_Str"" + name + ""String_Node_Str"");
        if (IOverwriteQuery.NO.equalsIgnoreCase(ret)) {
          continue;
        }
        if (IOverwriteQuery.CANCEL.equalsIgnoreCase(ret)) {
          monitor.setCanceled(true);
          return;
        }
        webapp.getContextParams().remove(obj);
      }
      String value=bean.getValue();
      String description=bean.getDescription();
      if (webapp.getVersionID() == 23) {
        ContextParam param=WebapplicationFactory.eINSTANCE.createContextParam();
        param.setParamName(name);
        param.setParamValue(value);
        if (description != null)         param.setDescription(description);
        param.setWebApp(webapp);
      }
 else {
        ParamValue param=CommonFactory.eINSTANCE.createParamValue();
        param.setName(name);
        param.setValue(value);
        if (description != null) {
          Description descriptionObj=CommonFactory.eINSTANCE.createDescription();
          descriptionObj.setValue(description);
          param.getDescriptions().add(descriptionObj);
          param.setDescription(description);
        }
        webapp.getContextParams().add(param);
      }
    }
    webEdit.saveIfNecessary(monitor);
  }
  finally {
    webEdit.dispose();
  }
}",0.9411764705882352
76532,"protected boolean needPageBreakBefore(String pageBreak){
  boolean ret=hasMasterPageChanged();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak) {
    return true;
  }
  return ret;
}","protected boolean needPageBreakBefore(String pageBreak){
  boolean ret=hasMasterPageChanged();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak || IStyle.CSS_SOFT_VALUE == pageBreak) {
    return true;
  }
  return ret;
}",0.9304029304029304
76533,"/** 
 * Gets the proper expression for the given model
 * @param model the given model
 * @return Returns the proper expression for the given model, or null if noproper one exists
 */
public static String getExpression(Object model){
  if (model instanceof ParameterHandle) {
    return ExpressionUtil.createJSParameterExpression(((ParameterHandle)model).getQualifiedName());
  }
  if (model instanceof DataSetItemModel) {
    String colName=((DataSetItemModel)model).getAlias();
    if (colName == null || colName.trim().length() == 0) {
      colName=((DataSetItemModel)model).getName();
    }
    return getColumnExpression(colName);
  }
  if (model instanceof ComputedColumnHandle) {
    return getColumnExpression(((ComputedColumnHandle)model).getName());
  }
  if (model instanceof ResultSetColumnHandle) {
    return getResultSetColumnExpression(((ResultSetColumnHandle)model).getColumnName());
  }
  if (model instanceof DataSetParameterHandle) {
    return IReportElementConstants.STOREDPROCUDURE_OUTPUT_PREFIX + ""String_Node_Str"" + escape(((DataSetParameterHandle)model).getName())+ ""String_Node_Str"";
  }
  return null;
}","/** 
 * Gets the proper expression for the given model
 * @param model the given model
 * @return Returns the proper expression for the given model, or null if noproper one exists
 */
public static String getExpression(Object model){
  if (model instanceof ParameterHandle) {
    return ExpressionUtil.createJSParameterExpression(((ParameterHandle)model).getQualifiedName());
  }
  if (model instanceof LevelHandle) {
    LevelHandle handle=(LevelHandle)model;
    DesignElementHandle temp=handle.getContainer();
    String dimensionName=""String_Node_Str"";
    while (temp != null) {
      if (temp instanceof org.eclipse.birt.report.model.api.olap.DimensionHandle) {
        dimensionName=((org.eclipse.birt.report.model.api.olap.DimensionHandle)temp).getName();
        break;
      }
      temp=temp.getContainer();
    }
    return ExpressionUtil.createJSDimensionExpression(dimensionName,handle.getName());
  }
  if (model instanceof MeasureHandle) {
    return ExpressionUtil.createJSMeasureExpression((((MeasureHandle)model)).getName());
  }
  if (model instanceof DataSetItemModel) {
    String colName=((DataSetItemModel)model).getAlias();
    if (colName == null || colName.trim().length() == 0) {
      colName=((DataSetItemModel)model).getName();
    }
    return getColumnExpression(colName);
  }
  if (model instanceof ComputedColumnHandle) {
    return getColumnExpression(((ComputedColumnHandle)model).getName());
  }
  if (model instanceof ResultSetColumnHandle) {
    return getResultSetColumnExpression(((ResultSetColumnHandle)model).getColumnName());
  }
  if (model instanceof DataSetParameterHandle) {
    return IReportElementConstants.STOREDPROCUDURE_OUTPUT_PREFIX + ""String_Node_Str"" + escape(((DataSetParameterHandle)model).getName())+ ""String_Node_Str"";
  }
  return null;
}",0.7719058983975452
76534,"public List convertSelectionToModelLisr(List list){
  List retValue=new ArrayList();
  int size=list.size();
  boolean isDummy=false;
  for (int i=0; i < size; i++) {
    Object object=list.get(i);
    if (!(object instanceof EditPart)) {
      continue;
    }
    EditPart part=(EditPart)object;
    if (part instanceof DummyEditpart) {
      retValue.add(part.getModel());
      isDummy=true;
    }
 else     if (isDummy) {
      break;
    }
 else     if (part.getModel() instanceof ListBandProxy) {
      retValue.add(((ListBandProxy)part.getModel()).getSlotHandle());
    }
 else {
      retValue.add(part.getModel());
    }
  }
  return retValue;
}","public List convertSelectionToModelLisr(List list){
  List retValue=new ArrayList();
  int size=list.size();
  boolean isDummy=false;
  for (int i=0; i < size; i++) {
    Object object=list.get(i);
    if (!(object instanceof EditPart)) {
      continue;
    }
    EditPart part=(EditPart)object;
    if (part instanceof DummyEditpart) {
      retValue.add(part.getModel());
      isDummy=true;
    }
 else     if (isDummy) {
      break;
    }
 else     if (part.getModel() instanceof ListBandProxy) {
      retValue.add(((ListBandProxy)part.getModel()).getSlotHandle());
    }
 else {
      Object model=part.getModel();
      if (model instanceof IAdaptable) {
        Object temp=((IAdaptable)model).getAdapter(DesignElementHandle.class);
        model=temp == null ? model : temp;
      }
      retValue.add(model);
    }
  }
  return retValue;
}",0.8491694352159468
76535,"/** 
 * Get the default width.
 * @param colNumber The column number.
 * @return The default width.
 */
public int getDefaultWidth(int colNumber){
  Dimension size=getFigure().getPreferredSize().shrink(getFigure().getInsets().getWidth(),getFigure().getInsets().getHeight());
  ;
  if (getRowCount() == 0) {
    return size.width;
  }
  int allNumbers=getColumnCount();
  if (allNumbers <= 0) {
    return size.width;
  }
  if (colNumber <= 0) {
    return size.width;
  }
  int width=size.width;
  int columnNumber=allNumbers;
  for (int i=1; i < columnNumber + 1; i++) {
    DimensionHandle dimHandle=getCrosstabHandleAdapter().getColumnWidth(colNumber);
    if (dimHandle != null && dimHandle.getMeasure() > 0) {
      allNumbers=allNumbers - 1;
      width=width - getColumnWidthValue(colNumber);
    }
 else     if (dimHandle == null) {
      ITableLayoutOwner.DimensionInfomation info=getColumnWidth(colNumber);
      if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(info.getUnits())) {
        Dimension dim=getFigure().getParent().getClientArea().getSize();
        int containerWidth=dim.width;
        width=width - ((int)(info.getMeasure() * containerWidth / 100));
      }
    }
  }
  if (colNumber == allNumbers) {
    return width / allNumbers + width % allNumbers;
  }
  return (width / allNumbers);
}","/** 
 * Get the default width.
 * @param colNumber The column number.
 * @return The default width.
 */
public int getDefaultWidth(int colNumber){
  Dimension size=getPreferredSize().shrink(getFigure().getInsets().getWidth(),getFigure().getInsets().getHeight());
  ;
  if (getRowCount() == 0) {
    return size.width;
  }
  int allNumbers=getColumnCount();
  if (allNumbers <= 0) {
    return size.width;
  }
  if (colNumber <= 0) {
    return size.width;
  }
  int width=size.width;
  int columnNumber=allNumbers;
  for (int i=1; i < columnNumber + 1; i++) {
    DimensionHandle dimHandle=getCrosstabHandleAdapter().getColumnWidth(colNumber);
    if (dimHandle != null && dimHandle.getMeasure() > 0) {
      allNumbers=allNumbers - 1;
      width=width - getColumnWidthValue(colNumber);
    }
 else     if (dimHandle == null) {
      ITableLayoutOwner.DimensionInfomation info=getColumnWidth(colNumber);
      if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(info.getUnits())) {
        Dimension dim=getFigure().getParent().getClientArea().getSize();
        int containerWidth=dim.width;
        width=width - ((int)(info.getMeasure() * containerWidth / 100));
      }
    }
  }
  if (colNumber == allNumbers) {
    return width / allNumbers + width % allNumbers;
  }
  return (width / allNumbers);
}",0.9954198473282444
76536,"/** 
 * @param ob1
 * @param ob2
 * @return
 */
public static int compareObjects(Object ob1,Object ob2){
  int result=0;
  if (ob1 == ob2) {
    return result;
  }
  if (ob1 == null || ob2 == null) {
    if (ob1 == null) {
      result=-1;
    }
 else {
      result=1;
    }
    return result;
  }
  if (ob1.equals(ob2)) {
    return result;
  }
 else   if (ob1 instanceof Comparable && ob2 instanceof Comparable) {
    Comparable comp1=(Comparable)ob1;
    Comparable comp2=(Comparable)ob2;
    if (ob1.getClass() != ob2.getClass() && ob1 instanceof Number && ob2 instanceof Number) {
      try {
        comp1=(Comparable)DataTypeUtil.toDouble(ob1);
        comp2=(Comparable)DataTypeUtil.toDouble(ob2);
      }
 catch (      BirtException ex) {
      }
    }
    result=comp1.compareTo(comp2);
  }
 else   if (ob1 instanceof Boolean && ob2 instanceof Boolean) {
    Boolean bool=(Boolean)ob1;
    if (bool.equals(Boolean.TRUE))     result=1;
 else     result=-1;
  }
 else {
  }
  return result;
}","/** 
 * @param ob1
 * @param ob2
 * @return
 */
public static int compareObjects(Object ob1,Object ob2){
  int result=0;
  if (ob1 == ob2) {
    return result;
  }
  if (ob1 == null || ob2 == null) {
    if (ob1 == null) {
      result=-1;
    }
 else {
      result=1;
    }
    return result;
  }
  if (ob1.equals(ob2)) {
    return result;
  }
 else   if (ob1 instanceof Comparable && ob2 instanceof Comparable) {
    Comparable comp1=(Comparable)ob1;
    Comparable comp2=(Comparable)ob2;
    if (ob1.getClass() != ob2.getClass()) {
      try {
        if (ob1 instanceof Number && ob2 instanceof Number) {
          comp1=DataTypeUtil.toDouble(ob1);
          comp2=DataTypeUtil.toDouble(ob2);
        }
 else         if (ob1 instanceof Date && ob2 instanceof Date) {
          comp1=DataTypeUtil.toDate(ob1);
          comp2=DataTypeUtil.toDate(ob1);
        }
      }
 catch (      BirtException ex) {
      }
    }
    result=comp1.compareTo(comp2);
  }
 else   if (ob1 instanceof Boolean && ob2 instanceof Boolean) {
    Boolean bool=(Boolean)ob1;
    if (bool.equals(Boolean.TRUE))     result=1;
 else     result=-1;
  }
 else {
  }
  return result;
}",0.8353376503237743
76537,"public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=new DummyEditpart(model);
  if (model instanceof ReportItemHandle && !((ReportItemHandle)model).isValidLayoutForCompoundElement()) {
    return new DestroyEditPart(model);
  }
 else   if (model instanceof ReportDesignHandle) {
    return new ReportDesignEditPart(model);
  }
 else   if (model instanceof MasterPageHandle) {
    return new MasterPageEditPart(model);
  }
 else   if (model instanceof ImageHandle) {
    return new ImageEditPart(model);
  }
  if (model instanceof TableHandle) {
    return new TableEditPart(model);
  }
  if (model instanceof CellHandle) {
    return new TableCellEditPart(model);
  }
  if (model instanceof AutoTextHandle) {
    return new AutoTextEditPart(model);
  }
  if (model instanceof LabelHandle) {
    return new LabelEditPart(model);
  }
  if (model instanceof TextItemHandle) {
    return new TextEditPart(model);
  }
  if (model instanceof DataItemHandle) {
    return new DataEditPart(model);
  }
  if (model instanceof TextDataHandle) {
    return new TextDataEditPart(model);
  }
  if (model instanceof SlotHandle && (((SlotHandle)model).getElementHandle() instanceof SimpleMasterPageHandle)) {
    return new AreaEditPart(model);
  }
  if (model instanceof GridHandle) {
    return new GridEditPart(model);
  }
  if (model instanceof ListHandle) {
    return new ListEditPart(model);
  }
  if (model instanceof ListBandProxy) {
    return new ListBandEditPart(model);
  }
  if (model instanceof TemplateElementHandle) {
    return new PlaceHolderEditPart(model);
  }
  IExtension extension=new IExtension.Stub(){
    public String getExtendsionIdentify(){
      return GuiExtensionManager.DESIGNER_FACTORY;
    }
  }
;
  Object obj=GuiExtensionManager.doExtension(extension,model);
  if (obj != null) {
    return (EditPart)obj;
  }
  EditPart eep=EditpartExtensionManager.createEditPart(context,model);
  if (eep != null)   return eep;
  return editPart;
}","public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=new DummyEditpart(model);
  if (model instanceof ReportItemHandle && !((ReportItemHandle)model).isValidLayoutForCompoundElement()) {
    return new DestroyEditPart(model);
  }
 else   if (model instanceof ReportDesignHandle) {
    return new ReportDesignEditPart(model);
  }
 else   if (model instanceof MasterPageHandle) {
    return new MasterPageEditPart(model);
  }
 else   if (model instanceof ImageHandle) {
    return new ImageEditPart(model);
  }
  if (model instanceof TableHandle) {
    return new TableEditPart(model);
  }
  if (model instanceof CellHandle) {
    return new TableCellEditPart(model);
  }
  if (model instanceof AutoTextHandle) {
    return new AutoTextEditPart(model);
  }
  if (model instanceof LabelHandle) {
    return new LabelEditPart(model);
  }
  if (model instanceof TextItemHandle) {
    return new TextEditPart(model);
  }
  if (model instanceof DataItemHandle) {
    return new DataEditPart(model);
  }
  if (model instanceof TextDataHandle) {
    return new TextDataEditPart(model);
  }
  if (model instanceof SlotHandle && (((SlotHandle)model).getElementHandle() instanceof SimpleMasterPageHandle)) {
    return new AreaEditPart(model);
  }
  if (model instanceof GridHandle) {
    return new GridEditPart(model);
  }
  if (model instanceof ListHandle) {
    return new ListEditPart(model);
  }
  if (model instanceof ListBandProxy) {
    return new ListBandEditPart(model);
  }
  if (model instanceof TemplateElementHandle) {
    return new PlaceHolderEditPart(model);
  }
  EditPart eep=EditpartExtensionManager.createEditPart(context,model);
  if (eep != null)   return eep;
  IExtension extension=new IExtension.Stub(){
    public String getExtendsionIdentify(){
      return GuiExtensionManager.DESIGNER_FACTORY;
    }
  }
;
  Object obj=GuiExtensionManager.doExtension(extension,model);
  if (obj != null) {
    return (EditPart)obj;
  }
  return editPart;
}",0.9476861167002012
76538,"/** 
 * convert path from System Properties Definition. For example: ${java.io.tmpdir}
 * @param path
 * @return
 */
protected static String convertSystemPath(String path){
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(path);
  if (m.find()) {
    String sysPath=trimSep(System.getProperty(m.group(1).trim()));
    return DataUtil.trimString(sysPath) + m.group(2).trim();
  }
  return path;
}","/** 
 * convert path from System Properties Definition. For example: ${java.io.tmpdir}
 * @param path
 * @return
 */
protected static String convertSystemPath(String path){
  if (path == null)   return path;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(path);
  if (m.find()) {
    String sysPath=trimSep(System.getProperty(m.group(1).trim()));
    return DataUtil.trimString(sysPath) + m.group(2).trim();
  }
  return path;
}",0.9618320610687024
76539,"/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  boolean isRelative=false;
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  path=convertSystemPath(path);
  if (isRelativePath(path)) {
    isRelative=true;
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=trimSep(getRealPath(path,context));
  }
 else {
    realPath=trimSep(path);
  }
  boolean flag=makeDir(realPath);
  if (!canWrite)   return realPath;
  if (flag) {
    try {
      if (canWrite && new File(realPath).canWrite())       return realPath;
    }
 catch (    Exception e) {
    }
  }
  if (isRelative) {
    realPath=trimSep(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    if (defaultPath != null)     realPath=trimSep(System.getProperty(""String_Node_Str"")) + File.separator + defaultPath;
  }
  makeDir(realPath);
  return realPath;
}","/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  boolean isRelative=false;
  path=convertSystemPath(path);
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  if (isRelativePath(path)) {
    isRelative=true;
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=trimSep(getRealPath(path,context));
  }
 else {
    realPath=trimSep(path);
  }
  boolean flag=makeDir(realPath);
  if (!canWrite)   return realPath;
  if (flag) {
    try {
      if (canWrite && new File(realPath).canWrite())       return realPath;
    }
 catch (    Exception e) {
    }
  }
  if (isRelative) {
    realPath=trimSep(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    if (defaultPath != null)     realPath=trimSep(System.getProperty(""String_Node_Str"")) + File.separator + defaultPath;
  }
  makeDir(realPath);
  return realPath;
}",0.9753086419753086
76540,"public void testDesignStream(){
  try {
    IReportRunnable runnable=engine.openReportDesign(new FileInputStream(new File(REPORT_DESIGN)));
    IRunTask runTask=engine.createRunTask(runnable);
    runTask.run(REPORT_DOCUMENT);
    IReportDocument rptDoc=engine.openReportDocument(REPORT_DOCUMENT);
    InputStream inputStream=rptDoc.getDesignStream();
    assertTrue(inputStream != null);
    int streamLength=((RAFileInputStream)inputStream).available();
    assertTrue(streamLength > 0);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","public void testDesignStream(){
  try {
    IReportRunnable runnable=engine.openReportDesign(new FileInputStream(new File(REPORT_DESIGN)));
    IRunTask runTask=engine.createRunTask(runnable);
    runTask.run(REPORT_DOCUMENT);
    IReportDocument rptDoc=engine.openReportDocument(REPORT_DOCUMENT);
    InputStream inputStream=rptDoc.getDesignStream();
    assertTrue(inputStream != null);
    int streamLength=((RAInputStream)inputStream).available();
    assertTrue(streamLength > 0);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.9964349376114082
76541,"private void checkChartLengend(ContainerArea map,int x,int y,int width,int height,String hyperlink,String bookmark,String targetWindow){
  IContent mapContent=(IContent)map.getContent();
  IHyperlinkAction link=mapContent.getHyperlinkAction();
  assertEquals(x,map.getX());
  assertEquals(y,map.getY());
  assertEquals(width,map.getWidth());
  assertEquals(height,map.getHeight());
  assertEquals(hyperlink,link.getHyperlink());
  assertEquals(bookmark,link.getBookmark());
  assertEquals(targetWindow,link.getTargetWindow());
}","private void checkChartLengend(ContainerArea map,int x,int y,int width,int height,String hyperlink,String bookmark,String targetWindow){
  IContent mapContent=(IContent)map.getContent();
  IHyperlinkAction link=mapContent.getHyperlinkAction();
  assertEquals(x,map.getX());
  assertEquals(y,map.getY());
  assertEquals(width,map.getWidth());
  assertEquals(height,map.getHeight());
  assertTrue(link.getHyperlink().matches(hyperlink));
  assertEquals(bookmark,link.getBookmark());
  assertEquals(targetWindow,link.getTargetWindow());
}",0.8598306679209784
76542,"/** 
 * Can not store objects of this list property type directly. Call to this method will always throw an exception.
 */
public Object validateValue(Module module,PropertyDefn defn,Object value) throws PropertyValueException {
  if (value == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return null;
  }
  if (defn.isList()) {
    if (value instanceof List) {
      if (((List)value).isEmpty()) {
        return value;
      }
    }
    throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,STRUCT_TYPE);
  }
  if (value instanceof Structure) {
    logger.log(Level.INFO,""String_Node_Str"");
    Iterator iter=((Structure)value).getDefn().propertiesIterator();
    while (iter.hasNext()) {
      PropertyDefn memberDefn=(PropertyDefn)iter.next();
      if (!memberDefn.isList()) {
        Object propValue=((Structure)value).getProperty(module,memberDefn);
        memberDefn.validateValue(module,propValue);
      }
    }
    return value;
  }
  logger.log(Level.WARNING,""String_Node_Str"");
  throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,STRUCT_TYPE);
}","/** 
 * Can not store objects of this list property type directly. Call to this method will always throw an exception.
 */
public Object validateValue(Module module,PropertyDefn defn,Object value) throws PropertyValueException {
  if (value == null)   return null;
  if (defn.isList()) {
    if (value instanceof List) {
      if (((List)value).isEmpty()) {
        return value;
      }
    }
    throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,STRUCT_TYPE);
  }
  if (value instanceof Structure) {
    Iterator iter=((Structure)value).getDefn().propertiesIterator();
    while (iter.hasNext()) {
      PropertyDefn memberDefn=(PropertyDefn)iter.next();
      if (!memberDefn.isList()) {
        Object propValue=((Structure)value).getProperty(module,memberDefn);
        memberDefn.validateValue(module,propValue);
      }
    }
    return value;
  }
  logger.log(Level.WARNING,""String_Node_Str"");
  throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,STRUCT_TYPE);
}",0.3714414821509263
76543,"public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=new DummyEditpart(model);
  if (model instanceof ReportItemHandle && !((ReportItemHandle)model).isValidLayoutForCompoundElement()) {
    return new DestroyEditPart(model);
  }
 else   if (model instanceof ReportDesignHandle) {
    return new ReportDesignEditPart(model);
  }
 else   if (model instanceof MasterPageHandle) {
    return new MasterPageEditPart(model);
  }
 else   if (model instanceof ImageHandle) {
    return new ImageEditPart(model);
  }
  if (model instanceof TableHandle) {
    return new TableEditPart(model);
  }
  if (model instanceof CellHandle) {
    return new TableCellEditPart(model);
  }
  if (model instanceof AutoTextHandle) {
    return new AutoTextEditPart(model);
  }
  if (model instanceof LabelHandle) {
    return new LabelEditPart(model);
  }
  if (model instanceof TextItemHandle) {
    return new TextEditPart(model);
  }
  if (model instanceof DataItemHandle) {
    return new DataEditPart(model);
  }
  if (model instanceof TextDataHandle) {
    return new TextDataEditPart(model);
  }
  if (model instanceof SlotHandle && (((SlotHandle)model).getElementHandle() instanceof SimpleMasterPageHandle)) {
    return new AreaEditPart(model);
  }
  if (model instanceof GridHandle) {
    return new GridEditPart(model);
  }
  if (model instanceof ListHandle) {
    return new ListEditPart(model);
  }
  if (model instanceof ListBandProxy) {
    return new ListBandEditPart(model);
  }
  if (model instanceof TemplateElementHandle) {
    return new PlaceHolderEditPart(model);
  }
  EditPart eep=EditpartExtensionManager.createEditPart(context,model);
  if (eep != null)   return eep;
  return editPart;
}","public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=new DummyEditpart(model);
  if (model instanceof ReportItemHandle && !((ReportItemHandle)model).isValidLayoutForCompoundElement()) {
    return new DestroyEditPart(model);
  }
 else   if (model instanceof ReportDesignHandle) {
    return new ReportDesignEditPart(model);
  }
 else   if (model instanceof MasterPageHandle) {
    return new MasterPageEditPart(model);
  }
 else   if (model instanceof ImageHandle) {
    return new ImageEditPart(model);
  }
  if (model instanceof TableHandle) {
    return new TableEditPart(model);
  }
  if (model instanceof CellHandle) {
    return new TableCellEditPart(model);
  }
  if (model instanceof AutoTextHandle) {
    return new AutoTextEditPart(model);
  }
  if (model instanceof LabelHandle) {
    return new LabelEditPart(model);
  }
  if (model instanceof TextItemHandle) {
    return new TextEditPart(model);
  }
  if (model instanceof DataItemHandle) {
    return new DataEditPart(model);
  }
  if (model instanceof TextDataHandle) {
    return new TextDataEditPart(model);
  }
  if (model instanceof SlotHandle && (((SlotHandle)model).getElementHandle() instanceof SimpleMasterPageHandle)) {
    return new AreaEditPart(model);
  }
  if (model instanceof GridHandle) {
    return new GridEditPart(model);
  }
  if (model instanceof ListHandle) {
    return new ListEditPart(model);
  }
  if (model instanceof ListBandProxy) {
    return new ListBandEditPart(model);
  }
  if (model instanceof TemplateElementHandle) {
    return new PlaceHolderEditPart(model);
  }
  IExtension extension=new IExtension.Stub(){
    public String getExtendsionIdentify(){
      return GuiExtensionManager.DESIGNER_FACTORY;
    }
  }
;
  Object obj=GuiExtensionManager.doExtension(extension,model);
  if (obj != null) {
    return (EditPart)obj;
  }
  EditPart eep=EditpartExtensionManager.createEditPart(context,model);
  if (eep != null)   return eep;
  return editPart;
}",0.9283018867924528
76544,"/** 
 */
protected void __checkDocumentExists() throws RemoteException {
  File file=new File(__docName);
  if (!file.exists()) {
    IActionHandler handler=new BirtRunReportActionHandler(context,operation,response);
    handler.execute();
  }
  file=new File(__docName);
  if (!file.exists()) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    throw fault;
  }
 else {
    ViewerAttributeBean bean=(ViewerAttributeBean)context.getBean();
    if (bean.isDocumentProcessing()) {
      AxisFault fault=new AxisFault();
      fault.setFaultReason(BirtResources.getMessage(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_PROCESSING));
      throw fault;
    }
  }
}","/** 
 */
protected void __checkDocumentExists() throws RemoteException {
  File file=new File(__docName);
  if (!file.exists()) {
    IActionHandler handler=new BirtRunReportActionHandler(context,operation,response);
    handler.execute();
  }
  file=new File(__docName);
  if (!file.exists()) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    throw fault;
  }
 else {
    BaseAttributeBean bean=(BaseAttributeBean)context.getBean();
    if (bean.isDocumentProcessing()) {
      AxisFault fault=new AxisFault();
      fault.setFaultReason(BirtResources.getMessage(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_PROCESSING));
      throw fault;
    }
  }
}",0.986842105263158
76545,"/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  path=convertSystemPath(path);
  if (isRelativePath(path)) {
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=getRealPath(path,context);
    if (realPath != null && makeDir(realPath)) {
      if (!canWrite)       return trimSep(realPath);
      try {
        if (canWrite && new File(realPath).canWrite())         return trimSep(realPath);
      }
 catch (      Exception e) {
      }
    }
    realPath=trimSep(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    realPath=trimSep(path);
  }
  makeDir(realPath);
  return realPath;
}","/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  boolean isRelative=false;
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  path=convertSystemPath(path);
  if (isRelativePath(path)) {
    isRelative=true;
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=trimSep(getRealPath(path,context));
  }
 else {
    realPath=trimSep(path);
  }
  boolean flag=makeDir(realPath);
  if (!canWrite)   return realPath;
  if (flag) {
    try {
      if (canWrite && new File(realPath).canWrite())       return realPath;
    }
 catch (    Exception e) {
    }
  }
  if (isRelative) {
    realPath=trimSep(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    if (defaultPath != null)     realPath=trimSep(System.getProperty(""String_Node_Str"")) + File.separator + defaultPath;
  }
  makeDir(realPath);
  return realPath;
}",0.7444168734491315
76546,"/** 
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException 
 */
public void test_regression_155943() throws DesignFileException, SemanticException, IOException {
  String report=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ INPUT;
  String libA=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY;
  sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle(ULocale.ENGLISH);
  designHandle=sessionHandle.openDesign(report);
  ExtendedItemHandle chart=(ExtendedItemHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(chart);
  assertEquals(""String_Node_Str"",chart.getName());
  List list=new ArrayList();
  list.add(chart);
  SimpleGroupElementHandle group=new SimpleGroupElementHandle(designHandle,list);
  assertFalse(group.hasLocalPropertiesForExtendedElements());
  chart.setProperty(ReportItemHandle.WIDTH_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",chart.getProperty(ReportItemHandle.WIDTH_PROP).toString());
  assertTrue(group.hasLocalPropertiesForExtendedElements());
  group.clearLocalProperties();
  assertFalse(group.hasLocalPropertiesForExtendedElements());
}","/** 
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException
 */
public void test_regression_155943() throws DesignFileException, SemanticException, IOException {
  String report=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ INPUT;
  String libA=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY;
  openDesign(INPUT);
  ExtendedItemHandle chart=(ExtendedItemHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(chart);
  assertEquals(""String_Node_Str"",chart.getName());
  List elements=new ArrayList();
  elements.add(chart);
  GroupElementHandle group=new SimpleGroupElementHandle(designHandle,elements);
  assertEquals(""String_Node_Str"",chart.getProperty(ReportItemHandle.WIDTH_PROP).toString());
  assertFalse(group.hasLocalPropertiesForExtendedElements());
  chart.setProperty(ReportItemHandle.WIDTH_PROP,""String_Node_Str"");
  assertFalse(group.hasLocalPropertiesForExtendedElements());
  group.clearLocalProperties();
  assertFalse(group.hasLocalPropertiesForExtendedElements());
}",0.6824978012313104
76547,"protected void handleSelectedEvent(){
  BigDecimal bigValue=new BigDecimal(spinner.getSelection());
  bigValue=bigValue.movePointLeft(spinner.getDigits());
  String value=bigValue.toString();
  if (provider.getUnit(combo.getText()) != null)   value+=provider.getUnit(combo.getText());
  try {
    save(value);
  }
 catch (  SemanticException e) {
    WidgetUtil.processError(combo.getShell(),e);
  }
}","protected void handleSelectedEvent(){
  if (isKeyPressed == true) {
    isKeyPressed=false;
    return;
  }
  BigDecimal bigValue=new BigDecimal(spinner.getSelection());
  bigValue=bigValue.movePointLeft(spinner.getDigits());
  String value=bigValue.toString();
  if (provider.getUnit(combo.getText()) != null)   value+=provider.getUnit(combo.getText());
  try {
    save(value);
  }
 catch (  SemanticException e) {
    WidgetUtil.processError(combo.getShell(),e);
  }
}",0.9197247706422018
76548,"public Control createControl(Composite parent){
  container=new Composite(parent,SWT.NONE);
  FormLayout layout=new FormLayout();
  if (isFormStyle()) {
    layout.marginHeight=1;
    layout.marginWidth=2;
    layout.spacing=4;
  }
 else {
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.spacing=0;
  }
  container.setLayout(layout);
  Label label=FormWidgetFactory.getInstance().createLabel(container,isFormStyle());
  label.setText(provider.getDisplayName());
  if (isFormStyle())   spinner=FormWidgetFactory.getInstance().createSpinner(container);
 else   spinner=new Spinner(container,SWT.BORDER);
  spinner.setDigits(2);
  spinner.setMaximum(10000);
  spinner.setMinimum(-10000);
  spinner.setIncrement(25);
  spinner.setSelection(0);
  spinner.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      handleSelectedEvent();
    }
    public void widgetSelected(    SelectionEvent e){
      handleSelectedEvent();
    }
  }
);
  if (!isFormStyle())   combo=new CCombo(container,SWT.BORDER | SWT.READ_ONLY);
 else   combo=FormWidgetFactory.getInstance().createCCombo(container,true);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleSelectedEvent();
    }
  }
);
  FormData data=new FormData();
  data.top=new FormAttachment(spinner,0,SWT.BOTTOM);
  data.left=new FormAttachment(spinner,0,SWT.LEFT);
  data.right=new FormAttachment(spinner,0,SWT.RIGHT);
  combo.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(label,0,SWT.BOTTOM);
  data.left=new FormAttachment(label,0,SWT.LEFT);
  data.right=new FormAttachment(100,-layout.spacing);
  spinner.setLayoutData(data);
  return container;
}","public Control createControl(Composite parent){
  container=new Composite(parent,SWT.NONE);
  FormLayout layout=new FormLayout();
  if (isFormStyle()) {
    layout.marginHeight=1;
    layout.marginWidth=2;
    layout.spacing=4;
  }
 else {
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.spacing=0;
  }
  container.setLayout(layout);
  Label label=FormWidgetFactory.getInstance().createLabel(container,isFormStyle());
  label.setText(provider.getDisplayName());
  if (isFormStyle())   spinner=FormWidgetFactory.getInstance().createSpinner(container);
 else   spinner=new Spinner(container,SWT.BORDER);
  spinner.setDigits(2);
  spinner.setMaximum(10000);
  spinner.setMinimum(-10000);
  spinner.setIncrement(25);
  spinner.setSelection(0);
  spinner.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      handleSelectedEvent();
    }
    public void widgetSelected(    SelectionEvent e){
      handleSelectedEvent();
    }
  }
);
  spinner.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      isKeyPressed=true;
      timer=new Timer();
      timer.schedule(new TimerTask(){
        public void run(){
          spinner.getDisplay().asyncExec(new Runnable(){
            public void run(){
              spinner.setEnabled(false);
              handleSelectedEvent();
              spinner.setEnabled(true);
            }
          }
);
        }
      }
,1200);
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  if (!isFormStyle())   combo=new CCombo(container,SWT.BORDER | SWT.READ_ONLY);
 else   combo=FormWidgetFactory.getInstance().createCCombo(container,true);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleSelectedEvent();
    }
  }
);
  FormData data=new FormData();
  data.top=new FormAttachment(spinner,0,SWT.BOTTOM);
  data.left=new FormAttachment(spinner,0,SWT.LEFT);
  data.right=new FormAttachment(spinner,0,SWT.RIGHT);
  combo.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(label,0,SWT.BOTTOM);
  data.left=new FormAttachment(label,0,SWT.LEFT);
  data.right=new FormAttachment(100,-layout.spacing);
  spinner.setLayoutData(data);
  return container;
}",0.8695007414730598
76549,"/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  if (isRelativePath(path)) {
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=getRealPath(path,context);
    if (realPath != null && makeDir(realPath)) {
      if (!canWrite)       return trimSep(realPath);
      try {
        if (canWrite && new File(realPath).canWrite())         return trimSep(realPath);
      }
 catch (      Exception e) {
      }
    }
    realPath=trimSep(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    realPath=trimSep(path);
  }
  makeDir(realPath);
  return realPath;
}","/** 
 * Process folder settings with absolute path. If path is a relative path, first relative to context. If set canWrite to true, then check the folder if writable.If not, relative to ${java.io.tmpdir} folder.
 * @param context
 * @param path
 * @param defaultPath
 * @param canWrite
 * @return
 */
public static String processRealPath(ServletContext context,String path,String defaultPath,boolean canWrite){
  String realPath=null;
  if (path == null || path.trim().length() <= 0) {
    path=DataUtil.trimString(defaultPath);
  }
  path=convertSystemPath(path);
  if (isRelativePath(path)) {
    if (!path.startsWith(""String_Node_Str""))     path=""String_Node_Str"" + path;
    realPath=getRealPath(path,context);
    if (realPath != null && makeDir(realPath)) {
      if (!canWrite)       return trimSep(realPath);
      try {
        if (canWrite && new File(realPath).canWrite())         return trimSep(realPath);
      }
 catch (      Exception e) {
      }
    }
    realPath=trimSep(System.getProperty(""String_Node_Str"")) + path;
  }
 else {
    realPath=trimSep(path);
  }
  makeDir(realPath);
  return realPath;
}",0.9855334538878844
76550,"/** 
 * Process working folder setting. If path is a relative path, first relative to context.
 * @param context
 * @param path
 * @return
 */
public static String processWorkingFolder(ServletContext context,String path){
  path=DataUtil.trimString(path);
  String realPath=null;
  if (isRelativePath(path)) {
    realPath=getRealPath(path,context);
    makeDir(realPath);
    return trimSep(path);
  }
 else {
    realPath=path;
  }
  makeDir(realPath);
  return trimSep(realPath);
}","/** 
 * Process working folder setting. If path is a relative path, first relative to context.
 * @param context
 * @param path
 * @return
 */
public static String processWorkingFolder(ServletContext context,String path){
  path=convertSystemPath(DataUtil.trimString(path));
  String realPath=null;
  if (isRelativePath(path)) {
    realPath=getRealPath(path,context);
    makeDir(realPath);
    return trimSep(path);
  }
 else {
    realPath=path;
  }
  makeDir(realPath);
  return trimSep(realPath);
}",0.9807497467071936
76551,"public void buildUI(Composite parent){
  container=new ScrolledComposite(parent,SWT.V_SCROLL);
  container.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((ScrolledComposite)container).setExpandHorizontal(true);
  ((ScrolledComposite)container).setExpandVertical(true);
  container.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      computeSize();
    }
  }
);
  container.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      deRegisterEventManager();
    }
  }
);
  composite=new Composite(container,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (sections == null)   sections=new SortMap();
  composite.setLayout(WidgetUtil.createGridLayout(1));
  formSection=new FormSection(provider.getDisplayName(),composite,true,isTabbed);
  formSection.setProvider(provider);
  formSection.setButtonWithDialog(withDialog);
  formSection.setStyle(style);
  formSection.setFillForm(true);
  addSection(PageSectionId.FORM_FORM,formSection);
  createSections();
  layoutSections();
  ((ScrolledComposite)container).setContent(composite);
}","public void buildUI(Composite parent){
  container=new ScrolledComposite(parent,SWT.V_SCROLL | SWT.H_SCROLL);
  container.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((ScrolledComposite)container).setExpandHorizontal(true);
  ((ScrolledComposite)container).setExpandVertical(true);
  container.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      computeSize();
    }
  }
);
  container.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      deRegisterEventManager();
    }
  }
);
  composite=new Composite(container,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (sections == null)   sections=new SortMap();
  composite.setLayout(WidgetUtil.createGridLayout(1));
  formSection=new FormSection(provider.getDisplayName(),composite,true,isTabbed);
  formSection.setProvider(provider);
  formSection.setButtonWithDialog(withDialog);
  formSection.setStyle(style);
  formSection.setFillForm(true);
  addSection(PageSectionId.FORM_FORM,formSection);
  createSections();
  layoutSections();
  ((ScrolledComposite)container).setContent(composite);
}",0.9935483870967742
76552,"/** 
 * This function should only called by the main application that starts BIRT. It will add a new log handler to the global BIRT logger. 
 * @param directoryName - the directory name of the log file (e.g. C:\Log). The final file name will be the directory name plus an unique file name.For example, if the directory name is C:\Log, the log file name will be something like C:\Log\ReportEngine_2005_02_26_11_26_56.log
 * @param logLevel - the log level to be set. If logLevel is null, it will be ignored.
 */
public static void startEngineLogging(String directoryName,Level logLevel){
  dirName=directoryName;
  Logger logger=Logger.getLogger(BIRT_NAME_SPACE);
  assert(logger != null);
  if (logLevel != null)   logger.setLevel(logLevel);
  createLogFile(logger);
}","/** 
 * This function should only called by the main application that starts BIRT. It will add a new log handler to the global BIRT logger. 
 * @param directoryName - the directory name of the log file (e.g. C:\Log). The final file name will be the directory name plus an unique file name.For example, if the directory name is C:\Log, the log file name will be something like C:\Log\ReportEngine_2005_02_26_11_26_56.log
 * @param logLevel - the log level to be set. If logLevel is null, it will be ignored.
 */
public static void startEngineLogging(String directoryName,Level logLevel){
  dirName=directoryName;
  Logger logger=Logger.getLogger(BIRT_NAME_SPACE);
  assert(logger != null);
  if (logLevel != null)   logger.setLevel(logLevel);
  if (logger.getLevel() != Level.OFF) {
    createLogFile(logger);
  }
}",0.9709228824273072
76553,"private void initValueArea(){
  if (isStatic()) {
    if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(getSelectedControlType())) {
      if (isValidValue(defaultValue) != null) {
        defaultValue=null;
        defaultValueChooser.select(0);
      }
 else {
        if (Boolean.valueOf(defaultValue).booleanValue()) {
          defaultValueChooser.select(1);
        }
 else {
          defaultValueChooser.select(2);
        }
      }
    }
 else     if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType()) && defaultValue != null) {
      if (defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false))) {
        defaultValue=null;
      }
 else {
        defaultValueEditor.setText(defaultValue);
      }
    }
 else {
      defaultValue=null;
    }
    refreshValueTable();
  }
 else {
    refreshDataSets();
    if (inputParameter.getDataSetName() != null) {
      dataSetChooser.setText(inputParameter.getDataSetName());
    }
    refreshColumns(false);
    String columnName=getColumnName(inputParameter.getValueExpr());
    if (columnName != null) {
      columnChooser.setText(columnName);
    }
    columnName=getColumnName(inputParameter.getLabelExpr());
    if (columnName != null) {
      displayTextChooser.setText(columnName);
    }
    if (defaultValue != null) {
      defaultValueEditor.setText(defaultValue);
    }
  }
  updateMessageLine();
}","private void initValueArea(){
  if (isStatic()) {
    if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(getSelectedControlType())) {
      if (isValidValue(defaultValue) != null) {
        defaultValue=null;
        defaultValueChooser.select(0);
      }
 else {
        if (Boolean.valueOf(defaultValue).booleanValue()) {
          defaultValueChooser.select(1);
        }
 else {
          defaultValueChooser.select(2);
        }
      }
    }
 else     if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType()) && defaultValue != null) {
      if (defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false))) {
        defaultValue=null;
      }
 else {
        defaultValueEditor.setText(defaultValue);
      }
    }
    refreshValueTable();
  }
 else {
    refreshDataSets();
    if (inputParameter.getDataSetName() != null) {
      dataSetChooser.setText(inputParameter.getDataSetName());
    }
    refreshColumns(false);
    String columnName=getColumnName(inputParameter.getValueExpr());
    if (columnName != null) {
      columnChooser.setText(columnName);
    }
    columnName=getColumnName(inputParameter.getLabelExpr());
    if (columnName != null) {
      displayTextChooser.setText(columnName);
    }
    if (defaultValue != null) {
      defaultValueEditor.setText(defaultValue);
    }
  }
  updateMessageLine();
}",0.9862044570215776
76554,"private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null && modelValueList.size() > 0) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date)           displayCandiateValue=ParameterValidationUtil.getDisplayValue(DesignChoiceConstants.PARAM_TYPE_DATETIME,null,candiateValue);
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null && modelValueList.size() > 0) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date) {
            SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
            displayCandiateValue=sdf.format((Date)candiateValue);
          }
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.8870056497175142
76555,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          Object paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName((String)paramValue,parameterList);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam,parameterList);
            if (paramName != null) {
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_EXPR;
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            if (!cachedExpr.equals(parameter.getValueExpr()))             continue;
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          Object paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName((String)paramValue,parameterList);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam,parameterList);
            if (paramName != null) {
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_EXPR;
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            String expr=parameter.getValueExpr();
            if (expr == null)             expr=""String_Node_Str"";
            if (!cachedExpr.equals(expr))             continue;
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}",0.971182510765154
76556,"/** 
 * Convert Scalar Parameter Definition
 * @param engineParam
 * @param group
 * @return
 */
private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  long id=scalarParamHandle != null ? scalarParamHandle.getID() : 0L;
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  String valueExpr=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getValueExpr();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(id,name,pattern,displayFormat,displayName,helpText,promptText,dataType,valueExpr,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,null);
  return param;
}","/** 
 * Convert Scalar Parameter Definition
 * @param engineParam
 * @param group
 * @return
 */
private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  long id=scalarParamHandle != null ? scalarParamHandle.getID() : 0L;
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  String valueExpr=scalarParamHandle == null ? null : scalarParamHandle.getValueExpr();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(id,name,pattern,displayFormat,displayName,helpText,promptText,dataType,valueExpr,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,null);
  return param;
}",0.9929976658886296
76557,"/** 
 */
private void mappingParentColumnBinding(){
  if (baseQueryDefn instanceof ISubqueryDefinition) {
    Map parentBindings=baseQueryDefn.getParentQuery().getResultSetExpressions();
{
      Iterator it=parentBindings.keySet().iterator();
      while (it.hasNext()) {
        Object o=it.next();
        IBaseExpression expr=(IBaseExpression)parentBindings.get(o);
        if (expr instanceof IScriptExpression) {
          if (!ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
            if (baseQueryDefn.getResultSetExpressions().get(o) == null)             baseQueryDefn.getResultSetExpressions().put(o,expr);
          }
        }
      }
    }
  }
}","/** 
 */
private void mappingParentColumnBinding(){
  if (baseQueryDefn instanceof ISubqueryDefinition) {
    Map parentBindings=baseQueryDefn.getParentQuery().getResultSetExpressions();
{
      Iterator it=parentBindings.keySet().iterator();
      while (it.hasNext()) {
        Object o=it.next();
        IBaseExpression expr=(IBaseExpression)parentBindings.get(o);
        if (expr instanceof IScriptExpression) {
          if (!ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
            if (baseQueryDefn.getResultSetExpressions().get(o) == null) {
              baseQueryDefn.getResultSetExpressions().put(o,copyScriptExpr(expr));
            }
          }
        }
      }
    }
  }
}",0.9699140401146132
76558,"/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null && modelValueList.size() > 0) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date) {
            SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
            displayCandiateValue=sdf.format((Date)candiateValue);
          }
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null && modelValueList.size() > 0) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date) {
            DateFormatter formatter=new DateFormatter(ULocale.US);
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9479326186830016
76559,"/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
    if (isValidDocument) {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(this.reportDocumentName)) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
    }
    if (reportRunnable == null) {
      if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
      }
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
    }
    if (reportRunnable == null) {
      if (!ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
      }
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9506863243518048
76560,"/** 
 * Returns report design handle
 * @return IViewerReportDesignHandle
 * @throws Exception
 */
protected IViewerReportDesignHandle getDesignHandle() throws Exception {
  if (viewer == null)   return null;
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  String designFile=ParameterAccessor.getReport(request,viewer.getReportDesign());
  String documentFile=ParameterAccessor.getReportDocument(request,viewer.getReportDocument(),false);
  boolean isValidDocument=ParameterAccessor.isValidFilePath(documentFile);
  if (documentFile != null && isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(designFile,documentFile,getModuleOptions());
    if (reportDocumentInstance != null) {
      this.documentInUrl=true;
      reportRunnable=reportDocumentInstance.getReportRunnable();
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (documentFile != null && designFile == null) {
      if (isValidDocument)       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{documentFile});
 else       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{documentFile});
    }
    if (!ParameterAccessor.isValidFilePath(designFile)) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{designFile});
    }
 else {
      reportRunnable=BirtUtility.getRunnableFromDesignFile(request,designFile,this.getModuleOptions());
      if (reportRunnable == null) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{designFile});
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns report design handle
 * @return IViewerReportDesignHandle
 * @throws Exception
 */
protected IViewerReportDesignHandle getDesignHandle() throws Exception {
  if (viewer == null)   return null;
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  String designFile=ParameterAccessor.getReport(request,viewer.getReportDesign());
  String documentFile=ParameterAccessor.getReportDocument(request,viewer.getReportDocument(),false);
  boolean isValidDocument=ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
  if (documentFile != null && isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(designFile,documentFile,getModuleOptions());
    if (reportDocumentInstance != null) {
      this.documentInUrl=true;
      reportRunnable=reportDocumentInstance.getReportRunnable();
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (documentFile != null && designFile == null) {
      if (isValidDocument)       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{documentFile});
 else       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{documentFile});
    }
    if (!ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{designFile});
    }
 else {
      reportRunnable=BirtUtility.getRunnableFromDesignFile(request,designFile,this.getModuleOptions());
      if (reportRunnable == null) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{designFile});
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.958180484225972
76561,"public void resolveDropCells(int dropValue){
  assert(dropValue < 0);
  if (rows.size() == 0 || !hasDropCell) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  assert(row != null);
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean needResolve=false;
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=row.getCell(start + i);
    assert(cell != null);
    if (cell.getRowSpan() == dropValue) {
      height=Math.max(height,cell.getHeight());
      needResolve=true;
    }
  }
  if (needResolve) {
    HashSet dropCells=new HashSet();
    int delta=height - rowHeight;
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=row.getCell(start + i);
      if (cell.getRowSpan() == dropValue) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
        cell.setRowSpan(1);
      }
 else       if (cell.getRowSpan() == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
    }
  }
}","public void resolveDropCells(int dropValue){
  assert(dropValue < 0);
  if (rows.size() == 0 || !hasDropCell) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  assert(row != null);
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean needResolve=false;
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=row.getCell(start + i);
    if (cell != null && cell.getRowSpan() == dropValue) {
      height=Math.max(height,cell.getHeight());
      needResolve=true;
    }
  }
  if (needResolve) {
    HashSet dropCells=new HashSet();
    int delta=height - rowHeight;
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=row.getCell(start + i);
      if (cell == null) {
        continue;
      }
      if (cell.getRowSpan() == dropValue) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
        cell.setRowSpan(1);
      }
 else       if (cell.getRowSpan() == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
    }
  }
}",0.9776864357017028
76562,"public void resolveBottomBorder(){
  if (rows.size() == 0) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  HashSet cells=new HashSet();
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=row.getCell(start + i);
    if (cell instanceof DummyCell) {
      CellArea ref=((DummyCell)cell).getCell();
      if (!cells.contains(ref)) {
        int width=resolveBottomBorder(ref);
        if (width > 0) {
          ref.setHeight(ref.getHeight() + width);
        }
        cells.add(ref);
      }
    }
 else {
      if (!cells.contains(cell)) {
        int width=resolveBottomBorder(cell);
        if (width > 0) {
          cell.setHeight(cell.getHeight() + width);
        }
        cells.add(cell);
      }
    }
  }
}","public void resolveBottomBorder(){
  if (rows.size() == 0) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  HashSet cells=new HashSet();
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=row.getCell(start + i);
    if (cell != null) {
      if (cell instanceof DummyCell) {
        CellArea ref=((DummyCell)cell).getCell();
        if (!cells.contains(ref)) {
          int width=resolveBottomBorder(ref);
          if (width > 0) {
            ref.setHeight(ref.getHeight() + width);
          }
          cells.add(ref);
        }
      }
 else {
        if (!cells.contains(cell)) {
          int width=resolveBottomBorder(cell);
          if (width > 0) {
            cell.setHeight(cell.getHeight() + width);
          }
          cells.add(cell);
        }
      }
    }
  }
}",0.8335517693315858
76563,"protected void keepUnresolvedCell(Row lastRow){
  unfinishedRow=new UnresolvedRow();
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=lastRow.getCell(start + i);
    int rowSpan=cell.getRowSpan();
    if (rowSpan < 0 || rowSpan > 1) {
      unfinishedRow.addUnresolvedCell((ICellContent)cell.getContent(),getLeftRowSpan(lastRow.finished,rowSpan));
    }
 else     if (rowSpan == 1) {
      if (!lastRow.finished) {
        unfinishedRow.addUnresolvedCell((ICellContent)cell.getContent(),1);
      }
    }
  }
}","protected void keepUnresolvedCell(Row lastRow){
  unfinishedRow=new UnresolvedRow();
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=lastRow.getCell(start + i);
    if (cell != null) {
      int rowSpan=cell.getRowSpan();
      if (rowSpan < 0 || rowSpan > 1) {
        unfinishedRow.addUnresolvedCell((ICellContent)cell.getContent(),getLeftRowSpan(lastRow.finished,rowSpan));
      }
 else       if (rowSpan == 1) {
        if (!lastRow.finished) {
          unfinishedRow.addUnresolvedCell((ICellContent)cell.getContent(),1);
        }
      }
    }
  }
}",0.9558823529411764
76564,"public void resolveAll(){
  if (rows.size() == 0 || !hasDropCell) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean hasDropCell=false;
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=row.getCell(start + i);
    assert(cell != null);
    if (cell.getRowSpan() < 0 || cell.getRowSpan() > 1) {
      height=Math.max(height,cell.getHeight());
      hasDropCell=true;
    }
  }
  if (hasDropCell) {
    unfinishedRow=new UnresolvedRow();
    HashSet dropCells=new HashSet();
    int delta=height - rowHeight;
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=row.getCell(start + i);
      assert(cell != null);
      int rowSpan=cell.getRowSpan();
      if (rowSpan < 0 || rowSpan > 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
        unfinishedRow.addUnresolvedCell((ICellContent)cell.getContent(),getLeftRowSpan(row.finished,rowSpan));
      }
 else       if (rowSpan == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
        if (row != null && !row.finished) {
          unfinishedRow.addUnresolvedCell((ICellContent)cell.getContent(),1);
        }
      }
    }
  }
  if (hasDropCell || (row != null && !row.finished)) {
    this.keepUnresolvedCell(row);
  }
}","public void resolveAll(){
  if (rows.size() == 0 || !hasDropCell) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean hasDropCell=false;
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=row.getCell(start + i);
    if (cell != null) {
      if (cell.getRowSpan() < 0 || cell.getRowSpan() > 1) {
        height=Math.max(height,cell.getHeight());
        hasDropCell=true;
      }
    }
  }
  if (hasDropCell) {
    unfinishedRow=new UnresolvedRow();
    HashSet dropCells=new HashSet();
    int delta=height - rowHeight;
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=row.getCell(start + i);
      if (cell == null) {
        continue;
      }
      int rowSpan=cell.getRowSpan();
      if (rowSpan < 0 || rowSpan > 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
        unfinishedRow.addUnresolvedCell((ICellContent)cell.getContent(),getLeftRowSpan(row.finished,rowSpan));
      }
 else       if (rowSpan == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
        if (row != null && !row.finished) {
          unfinishedRow.addUnresolvedCell((ICellContent)cell.getContent(),1);
        }
      }
    }
  }
  if (hasDropCell || (row != null && !row.finished)) {
    this.keepUnresolvedCell(row);
  }
}",0.9804592085979482
76565,"public void visitText(ITextArea textArea){
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int x=curPos.x + textArea.getX() + (int)(textArea.getFontInfo().getFontSize() * hTextSpace);
  int y=curPos.y + textArea.getY() + (int)(textArea.getFontInfo().getFontSize() * vTextSpace);
  drawTextAt(textArea,x,y,cb,pageHeight);
  makeBookmark(textArea,curPos);
  handleHyperlinkAction(textArea,curPos);
}","public void visitText(ITextArea textArea){
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int x=curPos.x + textArea.getX();
  int y=curPos.y + textArea.getY();
  drawTextAt(textArea,x,y,cb,pageHeight);
  makeBookmark(textArea,curPos);
  handleHyperlinkAction(textArea,curPos);
}",0.8277404921700223
76566,"public static void main(String[] args){
  File manifestHead=new File(args[0]);
  File manifestBody=new File(args[1]);
  File mainfestRslt=new File(args[2]);
  try {
    FileInputStream f=new FileInputStream(manifestHead);
    int len=f.available();
    byte[] b=new byte[len + 1];
    int j=f.read(b,0,len);
    f.close();
    String ff=new String(b,0,len);
    StringBuffer strb=new StringBuffer(ff);
    System.out.println(strb.toString());
    FileReader freader=new FileReader(manifestBody);
    BufferedReader breader=new BufferedReader(freader);
    String myString;
    while ((myString=breader.readLine()) != null) {
      if (myString.startsWith(""String_Node_Str""))       continue;
      if (myString.startsWith(""String_Node_Str""))       continue;
      strb.append(myString);
      strb.append(""String_Node_Str"");
    }
    int lastDelimer=strb.lastIndexOf(""String_Node_Str"");
    String result=strb.substring(0,lastDelimer);
    result.concat(""String_Node_Str"");
    System.out.println(result);
    FileOutputStream Result=new FileOutputStream(mainfestRslt);
    byte[] writeByte=new byte[result.length() + 1];
    writeByte=result.getBytes();
    Result.write(writeByte);
  }
 catch (  Exception e) {
    throw new BuildException(""String_Node_Str"");
  }
}","public static void main(String[] args){
  File manifestHead=new File(args[0]);
  File manifestBody=new File(args[1]);
  File mainfestRslt=new File(args[2]);
  String suffix=""String_Node_Str"";
  String manifestBody_proc=args[1] + suffix;
  File fBody_proc=new File(manifestBody_proc);
  if (fBody_proc.exists()) {
    fBody_proc.delete();
  }
  try {
    fBody_proc.createNewFile();
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  try {
    FileInputStream f=new FileInputStream(manifestHead);
    int len=f.available();
    byte[] b=new byte[len];
    f.read(b,0,len);
    f.close();
    String ff=new String(b,0,len);
    StringBuffer strb=new StringBuffer(ff);
    ProcFile(manifestBody,fBody_proc);
    FileReader freader=new FileReader(fBody_proc);
    BufferedReader breader=new BufferedReader(freader);
    String myString;
    while ((myString=breader.readLine()) != null) {
      strb.append(myString);
      strb.append(""String_Node_Str"");
    }
    int lastDelimer=strb.lastIndexOf(""String_Node_Str"");
    String tmp=strb.substring(0,lastDelimer);
    String result=new String(tmp.getBytes(""String_Node_Str""));
    result=result + ""String_Node_Str"";
    System.out.println(result);
    FileOutputStream Result=new FileOutputStream(mainfestRslt);
    Result.write(result.getBytes(""String_Node_Str""));
    fBody_proc.delete();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new BuildException(""String_Node_Str"");
  }
}",0.6096845194424064
76567,"/** 
 * Draws the borders of a container.
 * @param borders		the border info
 */
private void drawBorder(BorderInfo border){
  if (IStyle.SOLID_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOTTED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DASHED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOUBLE_VALUE.equals(border.borderStyle)) {
    int outerBorderWidth=border.borderWidth / 3;
    int innerBorderWidth=border.borderWidth / 3;
switch (border.borderType) {
case BorderInfo.TOP_BORDER:
      drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY - innerBorderWidth),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
    drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY + border.borderWidth / 2 - innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
  return;
case BorderInfo.RIGHT_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.BOTTOM_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY + border.borderWidth / 2 - outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY - border.borderWidth / 2 + innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.LEFT_BORDER:
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}
}
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}","/** 
 * Draws the borders of a container.
 * @param borders the border info
 */
private void drawBorder(BorderInfo border){
  if (IStyle.SOLID_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOTTED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DASHED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOUBLE_VALUE.equals(border.borderStyle)) {
    int outerBorderWidth=border.borderWidth / 3;
    int innerBorderWidth=border.borderWidth / 3;
switch (border.borderType) {
case BorderInfo.TOP_BORDER:
      drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY - innerBorderWidth),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
    drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY + border.borderWidth / 2 - innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
  return;
case BorderInfo.RIGHT_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.BOTTOM_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY + border.borderWidth / 2 - outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY - border.borderWidth / 2 + innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.LEFT_BORDER:
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}
}
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}",0.9996219281663516
76568,"/** 
 * Draws image at the contentByte
 * @param image		the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  Image img=null;
  TranscoderInput ti=null;
  cb.saveState();
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int imageX=curPos.x + image.getX();
  int imageY=curPos.y + image.getY();
  IImageContent imageContent=((IImageContent)image.getContent());
  try {
    boolean isSvg=false;
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
      if (null == imageContent.getURI())       return;
    URL url=reportDesign.findResource(imageContent.getURI(),IResourceLocator.IMAGE);
  InputStream in=url.openStream();
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
  isSvg=true;
  ti=new TranscoderInput(in);
}
 else {
  try {
    byte[] buffer=new byte[in.available()];
    in.read(buffer);
    img=Image.getInstance(buffer);
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,ex.getMessage(),ex);
  }
 finally {
    in.close();
  }
}
break;
case IImageContent.IMAGE_URL:
if (null == imageContent.getURI()) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
ti=new TranscoderInput(imageContent.getURI());
}
 else {
img=Image.getInstance(imageContent.getURI());
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
if (null == imageContent.getData()) return;
isSvg=((imageContent.getMIMEType() != null) && imageContent.getMIMEType().equalsIgnoreCase(""String_Node_Str"")) || ((imageContent.getURI() != null) && imageContent.getURI().toLowerCase().endsWith(""String_Node_Str"")) || ((imageContent.getExtension() != null) && imageContent.getExtension().toLowerCase().endsWith(""String_Node_Str""));
if (isSvg) {
ti=new TranscoderInput(new ByteArrayInputStream(imageContent.getData()));
}
 else {
img=Image.getInstance(imageContent.getData());
}
}
if (!isSvg) {
cb.addImage(img,pdfMeasure(image.getWidth()),0f,0f,pdfMeasure(image.getHeight()),layoutAreaX2PDF(imageX),layoutAreaY2PDF(imageY,image.getHeight()));
}
 else {
try {
if (ti != null) {
double width=pdfMeasure(image.getWidth());
double height=pdfMeasure(image.getHeight());
double x=layoutAreaX2PDF(imageX);
double y=layoutAreaY2PDF(imageY,image.getHeight());
PdfTemplate template=cb.createTemplate(new Float(width).floatValue(),new Float(height).floatValue());
Graphics2D g2=template.createGraphics(new Float(width).floatValue(),new Float(height).floatValue());
PrintTranscoder prm=new PrintTranscoder();
prm.addTranscodingHint(PrintTranscoder.KEY_SCALE_TO_PAGE,new Boolean(true));
prm.transcode(ti,null);
PageFormat pg=new PageFormat();
Paper pp=new Paper();
pp.setSize(width,height);
pp.setImageableArea(0,0,width,height);
pg.setPaper(pp);
prm.print(g2,pg,0);
g2.dispose();
cb.addTemplate(template,new Float(x).floatValue(),new Float(y).floatValue());
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
 catch (BadElementException bee) {
logger.log(Level.WARNING,bee.getMessage(),bee);
}
catch (IOException ioe) {
logger.log(Level.WARNING,ioe.getMessage(),ioe);
}
catch (DocumentException de) {
logger.log(Level.WARNING,de.getMessage(),de);
}
catch (Throwable t) {
logger.log(Level.WARNING,t.getMessage(),t);
}
cb.restoreState();
makeBookmark(image,curPos);
handleHyperlinkAction(image,curPos);
}","/** 
 * Draws image at the contentByte
 * @param image		the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  Image img=null;
  TranscoderInput ti=null;
  cb.saveState();
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int imageX=curPos.x + image.getX();
  int imageY=curPos.y + image.getY();
  IImageContent imageContent=((IImageContent)image.getContent());
  try {
    boolean isSvg=false;
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
      if (null == imageContent.getURI())       return;
    URL url=reportDesign.findResource(imageContent.getURI(),IResourceLocator.IMAGE);
  InputStream in=url.openStream();
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
  isSvg=true;
  ti=new TranscoderInput(in);
}
 else {
  try {
    byte[] buffer=new byte[in.available()];
    in.read(buffer);
    img=Image.getInstance(buffer);
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,ex.getMessage(),ex);
  }
 finally {
    in.close();
  }
}
break;
case IImageContent.IMAGE_URL:
if (null == imageContent.getURI()) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
ti=new TranscoderInput(imageContent.getURI());
}
 else {
img=Image.getInstance(imageContent.getURI());
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
if (null == imageContent.getData()) return;
isSvg=((imageContent.getMIMEType() != null) && imageContent.getMIMEType().equalsIgnoreCase(""String_Node_Str"")) || ((imageContent.getURI() != null) && imageContent.getURI().toLowerCase().endsWith(""String_Node_Str"")) || ((imageContent.getExtension() != null) && imageContent.getExtension().toLowerCase().endsWith(""String_Node_Str""));
if (isSvg) {
ti=new TranscoderInput(new ByteArrayInputStream(imageContent.getData()));
}
 else {
img=Image.getInstance(imageContent.getData());
}
}
float width=pdfMeasure(image.getWidth());
float height=pdfMeasure(image.getHeight());
float x=layoutAreaX2PDF(imageX);
float y=layoutAreaY2PDF(imageY,image.getHeight());
if (!isSvg) {
cb.addImage(img,width,0f,0f,height,x,y);
String helpText=imageContent.getHelpText();
if (helpText != null) {
showHelpText(x,y,width,height,helpText);
}
}
 else {
try {
if (ti != null) {
PdfTemplate template=cb.createTemplate(new Float(width).floatValue(),new Float(height).floatValue());
Graphics2D g2=template.createGraphics(new Float(width).floatValue(),new Float(height).floatValue());
PrintTranscoder prm=new PrintTranscoder();
prm.addTranscodingHint(PrintTranscoder.KEY_SCALE_TO_PAGE,new Boolean(true));
prm.transcode(ti,null);
PageFormat pg=new PageFormat();
Paper pp=new Paper();
pp.setSize(width,height);
pp.setImageableArea(0,0,width,height);
pg.setPaper(pp);
prm.print(g2,pg,0);
g2.dispose();
cb.addTemplate(template,new Float(x).floatValue(),new Float(y).floatValue());
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
 catch (BadElementException bee) {
logger.log(Level.WARNING,bee.getMessage(),bee);
}
catch (IOException ioe) {
logger.log(Level.WARNING,ioe.getMessage(),ioe);
}
catch (DocumentException de) {
logger.log(Level.WARNING,de.getMessage(),de);
}
catch (Throwable t) {
logger.log(Level.WARNING,t.getMessage(),t);
}
cb.restoreState();
makeBookmark(image,curPos);
handleHyperlinkAction(image,curPos);
}",0.9372323142814946
76569,"/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String configFileName=getConfigFileName(this.getFileUri());
  if (configFileName == null)   return configVars;
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String paramName=getParameterName(configVar.getName());
            ScalarParameterHandle parameter=findParameter(paramName);
            if (parameter != null) {
              String typeVarName=configVar.getName() + ""String_Node_Str"" + PROP_TYPE;
              ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
              String dataType=null;
              if (typeVar != null)               dataType=typeVar.getValue();
              if (dataType == null || !dataType.equalsIgnoreCase(parameter.getDataType())) {
                continue;
              }
            }
            if (paramName != null && paramName.length() > 0) {
              configVars.put(paramName,configVar.getValue());
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
  return configVars;
}","/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String configFileName=getConfigFileName(this.getFileUri());
  if (configFileName == null)   return configVars;
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String paramName=getParameterName(configVar.getName());
            ScalarParameterHandle parameter=findParameter(paramName);
            if (parameter != null) {
              String typeVarName=configVar.getName() + ""String_Node_Str"" + PROP_TYPE;
              ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
              String dataType=null;
              if (typeVar != null)               dataType=typeVar.getValue();
              if (dataType == null || !dataType.equalsIgnoreCase(parameter.getDataType()))               continue;
              String exprVarName=configVar.getName() + ""String_Node_Str"" + PROP_EXPR;
              ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
              String expr=parameter.getValueExpr();
              String cachedExpr=null;
              if (exprVar != null)               cachedExpr=exprVar.getValue();
              if (cachedExpr == null)               cachedExpr=""String_Node_Str"";
              if (expr == null)               expr=""String_Node_Str"";
              if (!cachedExpr.equals(expr))               continue;
            }
            if (paramName != null && paramName.length() > 0) {
              configVars.put(paramName,configVar.getValue());
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
  return configVars;
}",0.8534217381008762
76570,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          Object paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName((String)paramValue,parameterList);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam,parameterList);
            if (paramName != null) {
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType)) {
              continue;
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          Object paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName((String)paramValue,parameterList);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam,parameterList);
            if (paramName != null) {
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_EXPR;
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            if (!cachedExpr.equals(parameter.getValueExpr()))             continue;
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}",0.8624818577648766
76571,"/** 
 * Convert Scalar Parameter Definition
 * @param engineParam
 * @param group
 * @return
 */
private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  long id=scalarParamHandle != null ? scalarParamHandle.getID() : 0L;
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(id,name,pattern,displayFormat,displayName,helpText,promptText,dataType,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,null);
  return param;
}","/** 
 * Convert Scalar Parameter Definition
 * @param engineParam
 * @param group
 * @return
 */
private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  long id=scalarParamHandle != null ? scalarParamHandle.getID() : 0L;
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  String valueExpr=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getValueExpr();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(id,name,pattern,displayFormat,displayName,helpText,promptText,dataType,valueExpr,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,null);
  return param;
}",0.9617373319544984
76572,"public ParameterDefinition(long id,String name,String pattern,String displayFormat,String displayName,String helpText,String promptText,int dataType,int controlType,boolean hidden,boolean allowNull,boolean allowBlank,boolean mustMatch,boolean concealValue,ParameterGroupDefinition group,Collection selectionList){
  this.id=id;
  this.name=name;
  this.pattern=pattern;
  this.displayFormat=displayFormat;
  this.displayName=displayName;
  this.helpText=helpText;
  this.promptText=promptText;
  this.dataType=dataType;
  this.controlType=controlType;
  this.hidden=hidden;
  this.allowNull=allowNull;
  this.allowBlank=allowBlank;
  this.mustMatch=mustMatch;
  this.concealValue=concealValue;
  this.group=group;
  this.selectionList=selectionList;
}","public ParameterDefinition(long id,String name,String pattern,String displayFormat,String displayName,String helpText,String promptText,int dataType,String valueExpr,int controlType,boolean hidden,boolean allowNull,boolean allowBlank,boolean mustMatch,boolean concealValue,ParameterGroupDefinition group,Collection selectionList){
  this.id=id;
  this.name=name;
  this.pattern=pattern;
  this.displayFormat=displayFormat;
  this.displayName=displayName;
  this.helpText=helpText;
  this.promptText=promptText;
  this.dataType=dataType;
  this.valueExpr=valueExpr;
  this.controlType=controlType;
  this.hidden=hidden;
  this.allowNull=allowNull;
  this.allowBlank=allowBlank;
  this.mustMatch=mustMatch;
  this.concealValue=concealValue;
  this.group=group;
  this.selectionList=selectionList;
}",0.9709114414996768
76573,"/** 
 */
public ExprManager(){
  bindingExprs=new ArrayList();
  autoBindingExprMap=new HashMap();
  entryLevel=OVERALL_GROUP;
}","/** 
 */
public ExprManager(IBaseQueryDefinition baseQueryDefn){
  bindingExprs=new ArrayList();
  autoBindingExprMap=new HashMap();
  entryLevel=OVERALL_GROUP;
  this.baseQueryDefn=baseQueryDefn;
}",0.7852760736196319
76574,"/** 
 * @throws DataException
 */
public void validateColumnBinding() throws DataException {
  ExprManagerUtil.validateColumnBinding(this);
}","/** 
 * @throws DataException
 */
public void validateColumnBinding() throws DataException {
  ExprManagerUtil.validateColumnBinding(this,baseQueryDefn);
}",0.9527027027027029
76575,"/** 
 * This method tests whether column bindings in ExprManager is valid or not.
 * @param exprManager
 * @return
 * @throws DataException
 */
public static void validateColumnBinding(ExprManager exprManager) throws DataException {
  ExprManagerUtil util=new ExprManagerUtil(exprManager);
  util.checkColumnBindingExpression();
  util.checkDependencyCycle();
  util.checkGroupNameValidation();
}","/** 
 * This method tests whether column bindings in ExprManager is valid or not.
 * @param exprManager
 * @return
 * @throws DataException
 */
public static void validateColumnBinding(ExprManager exprManager,IBaseQueryDefinition baseQueryDefn) throws DataException {
  ExprManagerUtil util=new ExprManagerUtil(exprManager);
  util.checkColumnBindingExpression(baseQueryDefn);
  util.checkDependencyCycle();
  util.checkGroupNameValidation();
}",0.8238095238095238
76576,"/** 
 * Check whether the expression of all the column bindings is valid.
 * @param exprManager
 * @return
 * @throws DataException
 */
private void checkColumnBindingExpression() throws DataException {
  List list=this.getColumnNames();
  for (int i=0; i < list.size(); i++) {
    String name=list.get(i).toString();
    IBaseExpression expr=exprManager.getExpr(name);
    if (expr != null) {
      if (!(expr instanceof IScriptExpression || expr instanceof IConditionalExpression)) {
        throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
      }
      List l=null;
      try {
        if (expr instanceof IScriptExpression)         l=ExpressionCompilerUtil.extractColumnExpression((IScriptExpression)expr);
 else         if (expr instanceof IConditionalExpression)         l=ExpressionCompilerUtil.extractColumnExpression((IConditionalExpression)expr);
      }
 catch (      DataException e) {
      }
      if (l != null) {
        for (int j=0; j < l.size(); j++) {
          checkColumnBindingExist(l.get(j).toString(),list);
        }
      }
    }
  }
}","/** 
 * Check whether the expression of all the column bindings is valid.
 * @param exprManager
 * @return
 * @throws DataException
 */
private void checkColumnBindingExpression(IBaseQueryDefinition baseQueryDefn) throws DataException {
  List list=this.getColumnNames();
  for (int i=0; i < list.size(); i++) {
    String name=list.get(i).toString();
    IBaseExpression expr=exprManager.getExpr(name);
    if (expr != null) {
      if (!(expr instanceof IScriptExpression || expr instanceof IConditionalExpression)) {
        throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
      }
      List l=null;
      try {
        if (expr instanceof IScriptExpression)         l=ExpressionCompilerUtil.extractColumnExpression((IScriptExpression)expr);
 else         if (expr instanceof IConditionalExpression)         l=ExpressionCompilerUtil.extractColumnExpression((IConditionalExpression)expr);
      }
 catch (      DataException e) {
      }
      if (l != null) {
        for (int j=0; j < l.size(); j++) {
          checkColumnBindingExist(l.get(j).toString(),list);
        }
      }
      List usedBindings=null;
      if (expr instanceof IScriptExpression) {
        try {
          usedBindings=ExpressionUtil.extractColumnExpressions(((IScriptExpression)expr).getText(),true);
        }
 catch (        BirtException e) {
          return;
        }
        validateReferredColumnBinding(name,usedBindings,baseQueryDefn);
      }
    }
  }
}",0.8488188976377953
76577,"/** 
 * @throws DataException
 */
private void prepare() throws DataException {
  Context cx=Context.enter();
  try {
    if (this.baseQueryDefn.getResultSetExpressions() != null && this.baseQueryDefn.getResultSetExpressions().size() > 0) {
      this.expressionCompiler.setDataSetMode(false);
    }
    List groups=baseQueryDefn.getGroups();
    Set groupNameSet=new HashSet();
    IGroupDefinition group;
    for (int i=0; i < groups.size(); i++) {
      group=(IGroupDefinition)groups.get(i);
      if (group.getName() == null || group.getName().trim().length() == 0)       continue;
      for (int j=0; j < groups.size(); j++) {
        if (group.getName().equals(((IGroupDefinition)groups.get(j)).getName() == null ? ""String_Node_Str"" : ((IGroupDefinition)groups.get(j)).getName()) && j != i)         throw new DataException(ResourceConstants.DUPLICATE_GROUP_NAME);
      }
      groupNameSet.add(group.getName());
    }
    Map map=baseQueryDefn.getResultSetExpressions();
    if (map != null) {
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        Object key=it.next();
        IBaseExpression icbe=(IBaseExpression)map.get(key);
        if ((!icbe.getGroupName().equals(IBaseExpression.GROUP_OVERALL)) && !groupNameSet.contains(icbe.getGroupName())) {
          throw new DataException(ResourceConstants.GROUP_NOT_EXIST,new Object[]{icbe.getGroupName(),key});
        }
        validateColumnBinding(key.toString(),map,icbe);
      }
    }
    mappingParentColumnBinding();
    for (int i=0; i <= groups.size(); i++) {
      prepareGroup(baseQueryDefn,i,cx);
    }
  }
  finally {
    Context.exit();
  }
}","/** 
 * @throws DataException
 */
private void prepare() throws DataException {
  Context cx=Context.enter();
  try {
    if (this.baseQueryDefn.getResultSetExpressions() != null && this.baseQueryDefn.getResultSetExpressions().size() > 0) {
      this.expressionCompiler.setDataSetMode(false);
    }
    List groups=baseQueryDefn.getGroups();
    Set groupNameSet=new HashSet();
    IGroupDefinition group;
    for (int i=0; i < groups.size(); i++) {
      group=(IGroupDefinition)groups.get(i);
      if (group.getName() == null || group.getName().trim().length() == 0)       continue;
      for (int j=0; j < groups.size(); j++) {
        if (group.getName().equals(((IGroupDefinition)groups.get(j)).getName() == null ? ""String_Node_Str"" : ((IGroupDefinition)groups.get(j)).getName()) && j != i)         throw new DataException(ResourceConstants.DUPLICATE_GROUP_NAME);
      }
      groupNameSet.add(group.getName());
    }
    Map map=baseQueryDefn.getResultSetExpressions();
    if (map != null) {
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        Object key=it.next();
        IBaseExpression icbe=(IBaseExpression)map.get(key);
        if ((!icbe.getGroupName().equals(IBaseExpression.GROUP_OVERALL)) && !groupNameSet.contains(icbe.getGroupName())) {
          throw new DataException(ResourceConstants.GROUP_NOT_EXIST,new Object[]{icbe.getGroupName(),key});
        }
      }
    }
    mappingParentColumnBinding();
    for (int i=0; i <= groups.size(); i++) {
      prepareGroup(baseQueryDefn,i,cx);
    }
  }
  finally {
    Context.exit();
  }
}",0.9826410415375078
76578,"/** 
 * Test reference to not exist column binding in an expression.
 * @throws DataException
 */
public void testValidateNodes13() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
    e.printStackTrace();
  }
}","/** 
 * Test reference to not exist column binding in an expression.
 * @throws DataException
 */
public void testValidateNodes13() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
    e.printStackTrace();
  }
}",0.9938900203665988
76579,"public void testValidateNodes12() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}","public void testValidateNodes12() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}",0.9926650366748166
76580,"public void testValidateNodes11() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","public void testValidateNodes11() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.9938650306748468
76581,"public void testValidateNodes10() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}","public void testValidateNodes10() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}",0.9938650306748468
76582,"/** 
 * Test invalid group key. The key of group 1 directly uses the column binding defined in group 3.
 * @throws DataException
 */
public void testValidateNodes9() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","/** 
 * Test invalid group key. The key of group 1 directly uses the column binding defined in group 3.
 * @throws DataException
 */
public void testValidateNodes9() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.99712368168744
76583,"public void testValidateNodes2() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","public void testValidateNodes2() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.9926530612244898
76584,"public void testValidateNodes1() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}","public void testValidateNodes1() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}",0.9926530612244898
76585,"public void testValidateNodes4() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","public void testValidateNodes4() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.9926530612244898
76586,"public void testValidateNodes3() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","public void testValidateNodes3() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(null,m,0);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.9926530612244898
76587,"/** 
 * Test invalid group keys. The group key of group 2 directly uses the column binding defined in group 3.
 * @throws DataException
 */
public void testValidateNodes6() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","/** 
 * Test invalid group keys. The group key of group 2 directly uses the column binding defined in group 3.
 * @throws DataException
 */
public void testValidateNodes6() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.9971364937957364
76588,"/** 
 * Test valid group keys
 * @throws DataException
 */
public void testValidateNodes5() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * Test valid group keys
 * @throws DataException
 */
public void testValidateNodes5() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}",0.996980878899698
76589,"/** 
 * Test invalid group key. The key of group 2 directly uses the column binding defined in group 3.
 * @throws DataException
 */
public void testValidateNodes8() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","/** 
 * Test invalid group key. The key of group 2 directly uses the column binding defined in group 3.
 * @throws DataException
 */
public void testValidateNodes8() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.99712368168744
76590,"/** 
 * Test valid group column bindings. One non-key column binding  of group 2 directly uses the column binding defined in group 3.
 * @throws DataException
 */
public void testValidateNodes7() throws DataException {
  ExprManager em=new ExprManager();
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * Test valid group column bindings. One non-key column binding  of group 2 directly uses the column binding defined in group 3.
 * @throws DataException
 */
public void testValidateNodes7() throws DataException {
  ExprManager em=new ExprManager(null);
  Map m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,1);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,2);
  m=new HashMap();
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  m.put(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  em.addBindingExpr(""String_Node_Str"",m,3);
  try {
    ExprManagerUtil.validateColumnBinding(em,null);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}",0.9971777986829728
76591,"private String getAttributeValue(String value){
  if (value != null) {
    int length=value.length();
    if (length > 2) {
      value=value.substring(1,length - 1);
    }
  }
  return value;
}","private String getAttributeValue(String value){
  if (value != null) {
    int length=value.length();
    if (length > 2) {
      if (value.charAt(0) == '""' || value.charAt(0) == '\'') {
        value=value.substring(1,length - 1);
      }
    }
  }
  return value;
}",0.841648590021692
76592,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null)       resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    if (resourceFolder != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
    }
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.8431144683323649
76593,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    return ""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    return ""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null)     resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (resourceFolder != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}",0.943100511073254
76594,"/** 
 * Check whether the expression of all the column bindings is valid.
 * @param exprManager
 * @return
 * @throws DataException
 */
private void checkColumnBindingExpression(IBaseQueryDefinition baseQueryDefn) throws DataException {
  List list=this.getColumnNames();
  for (int i=0; i < list.size(); i++) {
    String name=list.get(i).toString();
    IBaseExpression expr=exprManager.getExpr(name);
    if (expr != null) {
      if (!(expr instanceof IScriptExpression || expr instanceof IConditionalExpression)) {
        throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
      }
      List l=null;
      try {
        if (expr instanceof IScriptExpression)         l=ExpressionCompilerUtil.extractColumnExpression((IScriptExpression)expr);
 else         if (expr instanceof IConditionalExpression)         l=ExpressionCompilerUtil.extractColumnExpression((IConditionalExpression)expr);
      }
 catch (      DataException e) {
      }
      if (l != null) {
        for (int j=0; j < l.size(); j++) {
          checkColumnBindingExist(l.get(j).toString(),list);
        }
      }
      List usedBindings=null;
      if (expr instanceof IScriptExpression) {
        try {
          usedBindings=ExpressionUtil.extractColumnExpressions(((IScriptExpression)expr).getText(),true);
        }
 catch (        BirtException e) {
          return;
        }
        validateReferredColumnBinding(name,usedBindings,baseQueryDefn);
      }
    }
  }
}","/** 
 * Check whether the expression of all the column bindings is valid.
 * @param exprManager
 * @return
 * @throws DataException
 */
private void checkColumnBindingExpression(IBaseQueryDefinition baseQueryDefn) throws DataException {
  List list=this.getColumnNames();
  for (int i=0; i < list.size(); i++) {
    String name=list.get(i).toString();
    IBaseExpression expr=exprManager.getExpr(name);
    if (expr != null) {
      if (!(expr instanceof IScriptExpression || expr instanceof IConditionalExpression)) {
        throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
      }
      List l=null;
      try {
        if (expr instanceof IScriptExpression)         l=ExpressionCompilerUtil.extractColumnExpression((IScriptExpression)expr);
 else         if (expr instanceof IConditionalExpression)         l=ExpressionCompilerUtil.extractColumnExpression((IConditionalExpression)expr);
      }
 catch (      DataException e) {
      }
      if (l != null) {
        for (int j=0; j < l.size(); j++) {
          checkColumnBindingExist(l.get(j).toString(),list);
        }
      }
      List usedBindings=null;
      if (expr instanceof IScriptExpression) {
        try {
          usedBindings=ExpressionUtil.extractColumnExpressions(((IScriptExpression)expr).getText(),true);
        }
 catch (        BirtException e) {
          continue;
        }
        validateReferredColumnBinding(name,usedBindings,baseQueryDefn);
      }
    }
  }
}",0.9952153110047848
76595,"public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.callStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
}","public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.callStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY)) {
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
}",0.7166123778501629
76596,"/** 
 * Creates bound columns for list/table group.
 * @param element the list/table group
 * @param module the root of the report item
 */
private void dealListingGroup(GroupElement element,Module module){
  String value=(String)element.getLocalProperty(module,IGroupElementModel.KEY_EXPR_PROP);
  if (value != null)   handleBoundsForValue(element,module,value);
  value=(String)element.getLocalProperty(module,IGroupElementModel.TOC_PROP);
  if (value != null)   handleBoundsForValue(element,module,value);
  List values=(List)element.getLocalProperty(module,IGroupElementModel.FILTER_PROP);
  if (!(values == null || values.size() < 1)) {
    for (int i=0; i < values.size(); i++) {
      FilterCondition struct=(FilterCondition)values.get(i);
      handleBoundsForValue(element,module,struct.getExpr());
      handleBoundsForValue(element,module,struct.getValue1());
      handleBoundsForValue(element,module,struct.getValue2());
    }
  }
  values=(List)element.getLocalProperty(module,IGroupElementModel.SORT_PROP);
  if (!(values == null || values.size() < 1)) {
    for (int i=0; i < values.size(); i++) {
      SortKey struct=(SortKey)values.get(i);
      handleBoundsForValue(element,module,struct.getKey());
    }
  }
}","/** 
 * Creates bound columns for list/table group.
 * @param element the list/table group
 * @param module the root of the report item
 */
private void dealListingGroup(GroupElement element,Module module){
  String value=(String)element.getLocalProperty(module,IGroupElementModel.KEY_EXPR_PROP);
  if (value != null)   handleBoundsForValue(element,module,value);
  TOC toc=(TOC)element.getLocalProperty(module,IGroupElementModel.TOC_PROP);
  if (toc != null)   handleBoundsForValue(element,module,toc.getExpression());
  List values=(List)element.getLocalProperty(module,IGroupElementModel.FILTER_PROP);
  if (!(values == null || values.size() < 1)) {
    for (int i=0; i < values.size(); i++) {
      FilterCondition struct=(FilterCondition)values.get(i);
      handleBoundsForValue(element,module,struct.getExpr());
      handleBoundsForValue(element,module,struct.getValue1());
      handleBoundsForValue(element,module,struct.getValue2());
    }
  }
  values=(List)element.getLocalProperty(module,IGroupElementModel.SORT_PROP);
  if (!(values == null || values.size() < 1)) {
    for (int i=0; i < values.size(); i++) {
      SortKey struct=(SortKey)values.get(i);
      handleBoundsForValue(element,module,struct.getKey());
    }
  }
}",0.9769324160259004
76597,"/** 
 * @param projectedColumns
 */
private void initColumnsInfo(List projectedColumns){
  m_fieldCount=projectedColumns.size();
  projectedCols=new ResultFieldMetadata[m_fieldCount];
  nameToIdMapping=new HashMap();
  this.originalAnyTypeField=new ArrayList();
  for (int i=0, n=projectedColumns.size(); i < n; i++) {
    projectedCols[i]=(ResultFieldMetadata)projectedColumns.get(i);
    ResultFieldMetadata column=projectedCols[i];
    if (isOfAnyType(column)) {
      this.hasAny=true;
      this.originalAnyTypeField.add(Integer.valueOf(i + 1));
    }
    String upperCaseName=column.getName();
    Integer index=new Integer(i + 1);
    if (!nameToIdMapping.containsKey(upperCaseName)) {
      nameToIdMapping.put(upperCaseName,index);
    }
    String upperCaseAlias=column.getAlias();
    if (upperCaseAlias != null && upperCaseAlias.length() > 0 && !nameToIdMapping.containsKey(upperCaseAlias)) {
      nameToIdMapping.put(upperCaseAlias,index);
    }
  }
}","/** 
 * @param projectedColumns
 */
private void initColumnsInfo(List projectedColumns){
  m_fieldCount=projectedColumns.size();
  projectedCols=new ResultFieldMetadata[m_fieldCount];
  nameToIdMapping=new HashMap();
  this.originalAnyTypeField=new ArrayList();
  for (int i=0, n=projectedColumns.size(); i < n; i++) {
    projectedCols[i]=(ResultFieldMetadata)projectedColumns.get(i);
    ResultFieldMetadata column=projectedCols[i];
    if (isOfAnyType(column)) {
      this.hasAny=true;
      this.originalAnyTypeField.add(new Integer(i + 1));
    }
    String upperCaseName=column.getName();
    Integer index=new Integer(i + 1);
    if (!nameToIdMapping.containsKey(upperCaseName)) {
      nameToIdMapping.put(upperCaseName,index);
    }
    String upperCaseAlias=column.getAlias();
    if (upperCaseAlias != null && upperCaseAlias.length() > 0 && !nameToIdMapping.containsKey(upperCaseAlias)) {
      nameToIdMapping.put(upperCaseAlias,index);
    }
  }
}",0.9937694704049844
76598,"public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.preStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
}","public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.preStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY)) {
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
}",0.7147540983606557
76599,"/** 
 * Tests to read and set properties on a GroupElement.
 * @throws Exception if errors occur when opens the design file
 */
public void testProperties() throws Exception {
  openDesign(""String_Node_Str"");
  ListHandle list=(ListHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(list);
  SlotHandle groupSlot=list.getGroups();
  GroupHandle group=(GroupHandle)groupSlot.get(0);
  group.setName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getDisplayLabel(DesignElement.FULL_LABEL));
  assertEquals(""String_Node_Str"",group.getGroupStart());
  group.setPageBreakAfter(DesignChoiceConstants.PAGE_BREAK_AFTER_AVOID);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_AVOID,group.getPageBreakAfter());
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_AVOID,(String)group.getFactoryPropertyHandle(Style.PAGE_BREAK_AFTER_PROP).getValue());
  group.setPageBreakBefore(DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST,group.getPageBreakBefore());
  group.setRepeatHeader(false);
  assertFalse(group.repeatHeader());
  group.setHideDetail(true);
  assertTrue(group.hideDetail());
  try {
    group.setPageBreakAfter(""String_Node_Str"");
    fail();
  }
 catch (  PropertyValueException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_CHOICE_NOT_FOUND,e.getErrorCode());
  }
  assertNull(group.getPropertyDefn(IStyleModel.BACKGROUND_ATTACHMENT_PROP));
  group.setName(""String_Node_Str"");
  assertEquals(null,group.getDisplayLabel(DesignElement.USER_LABEL));
  group.setName(""String_Node_Str"");
  assertEquals(null,group.getDisplayLabel(DesignElement.USER_LABEL));
  group.setInterval(DesignChoiceConstants.INTERVAL_PREFIX);
  assertEquals(DesignChoiceConstants.INTERVAL_PREFIX,group.getInterval());
  group.setIntervalRange(0.1234);
  assertTrue(0.1234 == group.getIntervalRange());
  group.setKeyExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getKeyExpr());
  group.setTocExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getTocExpression());
  group.setTocExpression(null);
  assertEquals(""String_Node_Str"",group.getKeyExpr());
  assertNull(group.getTocExpression());
  group.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
  assertEquals(DesignChoiceConstants.SORT_DIRECTION_DESC,group.getSortDirection());
  group.setOnPrepare(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getOnPrepare());
}","/** 
 * Tests to read and set properties on a GroupElement.
 * @throws Exception if errors occur when opens the design file
 */
public void testProperties() throws Exception {
  openDesign(""String_Node_Str"");
  ListHandle list=(ListHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(list);
  SlotHandle groupSlot=list.getGroups();
  GroupHandle group=(GroupHandle)groupSlot.get(0);
  group.setName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getDisplayLabel(DesignElement.FULL_LABEL));
  assertEquals(""String_Node_Str"",group.getGroupStart());
  group.setPageBreakAfter(DesignChoiceConstants.PAGE_BREAK_AFTER_AVOID);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_AVOID,group.getPageBreakAfter());
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_AVOID,(String)group.getFactoryPropertyHandle(Style.PAGE_BREAK_AFTER_PROP).getValue());
  group.setPageBreakBefore(DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST,group.getPageBreakBefore());
  group.setRepeatHeader(false);
  assertFalse(group.repeatHeader());
  group.setHideDetail(true);
  assertTrue(group.hideDetail());
  try {
    group.setPageBreakAfter(""String_Node_Str"");
    fail();
  }
 catch (  PropertyValueException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_CHOICE_NOT_FOUND,e.getErrorCode());
  }
  assertNull(group.getPropertyDefn(IStyleModel.BACKGROUND_ATTACHMENT_PROP));
  group.setName(""String_Node_Str"");
  assertEquals(null,group.getDisplayLabel(DesignElement.USER_LABEL));
  group.setName(""String_Node_Str"");
  assertEquals(null,group.getDisplayLabel(DesignElement.USER_LABEL));
  group.setInterval(DesignChoiceConstants.INTERVAL_PREFIX);
  assertEquals(DesignChoiceConstants.INTERVAL_PREFIX,group.getInterval());
  group.setIntervalRange(0.1234);
  assertTrue(0.1234 == group.getIntervalRange());
  group.setKeyExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getKeyExpr());
  group.setTocExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getTocExpression());
  group.setTocExpression(null);
  assertEquals(""String_Node_Str"",group.getKeyExpr());
  assertNull(group.getTocExpression());
  group.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
  assertEquals(DesignChoiceConstants.SORT_DIRECTION_DESC,group.getSortDirection());
  group.setOnPrepare(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getOnPrepare());
  assertNull(group.getBookmark());
  group.setBookmark(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getBookmark());
}",0.9746390948107686
76600,"/** 
 * Test cases: Test the getAllBookmarks method on the ModuleHandle which returns all the bookmarks defined in the report design.
 * @throws Exception
 */
public void testGetBookmarksAndTocs() throws Exception {
  openDesign(""String_Node_Str"");
  List bookmarks=designHandle.getAllBookmarks();
  assertEquals(3,bookmarks.size());
  assertEquals(""String_Node_Str"",bookmarks.get(0));
  assertEquals(""String_Node_Str"",bookmarks.get(1));
  assertEquals(""String_Node_Str"",bookmarks.get(2));
  List tocs=designHandle.getAllTocs();
  assertEquals(3,tocs.size());
  assertEquals(""String_Node_Str"",tocs.get(0));
  assertEquals(""String_Node_Str"",tocs.get(1));
  assertEquals(""String_Node_Str"",tocs.get(2));
}","/** 
 * Test cases: Test the getAllBookmarks method on the ModuleHandle which returns all the bookmarks defined in the report design.
 * @throws Exception
 */
public void testGetBookmarksAndTocs() throws Exception {
  openDesign(""String_Node_Str"");
  List bookmarks=designHandle.getAllBookmarks();
  assertEquals(4,bookmarks.size());
  assertEquals(""String_Node_Str"",bookmarks.get(0));
  assertEquals(""String_Node_Str"",bookmarks.get(1));
  assertEquals(""String_Node_Str"",bookmarks.get(2));
  assertEquals(""String_Node_Str"",bookmarks.get(3));
  List tocs=designHandle.getAllTocs();
  assertEquals(3,tocs.size());
  assertEquals(""String_Node_Str"",tocs.get(0));
  assertEquals(""String_Node_Str"",tocs.get(1));
  assertEquals(""String_Node_Str"",tocs.get(2));
}",0.6291208791208791
76601,"protected void parseRenderOptions() throws Exception {
  assert(mode.equalsIgnoreCase(""String_Node_Str""));
  if (results.hasOption('f')) {
    format=results.getOptionValue('f');
  }
  if (results.hasOption('t')) {
    htmlType=results.getOptionValue('t');
  }
  if (results.hasOption('o')) {
    targetFile=results.getOptionValue('o');
  }
  if (results.hasOption('l')) {
    locale=results.getOptionValue('l');
  }
  if (results.hasOption('e')) {
    encoding=results.getOptionValue('e');
  }
  if (results.hasOption('p')) {
    pageNumber=Long.parseLong(results.getOptionValue('p'));
  }
  parseParameterOptions();
}","protected void parseRenderOptions() throws Exception {
  assert(mode.equalsIgnoreCase(""String_Node_Str""));
  if (results.hasOption('f')) {
    format=results.getOptionValue('f');
  }
  if (results.hasOption('t')) {
    htmlType=results.getOptionValue('t');
  }
  if (results.hasOption('o')) {
    targetFile=results.getOptionValue('o');
  }
  if (results.hasOption('l')) {
    locale=results.getOptionValue('l');
  }
  if (results.hasOption('e')) {
    encoding=results.getOptionValue('e');
  }
  if (results.hasOption('p')) {
    String paramPageNumber=results.getOptionValue('p');
    try {
      pageNumber=Long.parseLong(paramPageNumber);
    }
 catch (    NumberFormatException nfe) {
      logger.log(Level.SEVERE,""String_Node_Str"" + paramPageNumber + ""String_Node_Str"");
    }
  }
  parseParameterOptions();
}",0.8222996515679443
76602,"/** 
 * Initializes the data view page.
 */
protected void initPage(){
  createContextMenus();
  treeViewer.setSorter(new ItemSorter());
  treeViewer.getTree().addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == treeViewer.getTree()) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=treeViewer.getTree().getItem(pt);
        treeViewer.getTree().setToolTipText(getTooltip(item));
      }
    }
  }
);
  IEclipsePreferences rootNode=(IEclipsePreferences)Platform.getPreferencesService().getRootNode().node(InstanceScope.SCOPE);
  final String reportName=ReportPlugin.getDefault().getBundle().getSymbolicName();
  try {
    if (rootNode.nodeExists(reportName)) {
      reportPreferenceNode=(IEclipsePreferences)rootNode.node(reportName);
      reportPreferenceNode.addPreferenceChangeListener(this);
    }
  }
 catch (  BackingStoreException e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * Initializes the data view page.
 */
protected void initPage(){
  createContextMenus();
  treeViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof LibraryHandle) {
        return 1;
      }
      return super.category(element);
    }
  }
);
  treeViewer.getTree().addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == treeViewer.getTree()) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=treeViewer.getTree().getItem(pt);
        treeViewer.getTree().setToolTipText(getTooltip(item));
      }
    }
  }
);
  IEclipsePreferences rootNode=(IEclipsePreferences)Platform.getPreferencesService().getRootNode().node(InstanceScope.SCOPE);
  final String reportName=ReportPlugin.getDefault().getBundle().getSymbolicName();
  try {
    if (rootNode.nodeExists(reportName)) {
      reportPreferenceNode=(IEclipsePreferences)rootNode.node(reportName);
      reportPreferenceNode.addPreferenceChangeListener(this);
    }
  }
 catch (  BackingStoreException e) {
    ExceptionHandler.handle(e);
  }
}",0.91847075080608
76603,"protected AbstractParseState versionConditionalJumpTo(){
  if (handler.versionNumber < VersionUtil.VERSION_3_2_11 && propDefn == null && element instanceof ScalarParameter && (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name))) {
    CompatibleParamAllowMumbleState state=new CompatibleParamAllowMumbleState(handler,element,name);
    state.setName(ScalarParameter.IS_REQUIRED_PROP);
    return state;
  }
  if (handler.versionNumber <= VersionUtil.VERSION_3_2_10 && propDefn == null && element instanceof IOdaExtendableElementModel) {
    ODAExtensionElementDefn elementDefn=null;
    if (element instanceof OdaDataSet)     elementDefn=(ODAExtensionElementDefn)((OdaDataSet)element).getExtDefn();
 else     if (element instanceof OdaDataSource)     elementDefn=(ODAExtensionElementDefn)((OdaDataSource)element).getExtDefn();
    if (elementDefn != null) {
      List privatePropDefns=elementDefn.getODAPrivateDriverPropertyNames();
      if (privatePropDefns.contains(name)) {
        CompatibleODAPrivatePropertyState state=new CompatibleODAPrivatePropertyState(handler,element);
        state.setName(name);
        return state;
      }
    }
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_10) {
    if (element instanceof ReportItem) {
      if (IReportItemModel.TOC_PROP.equalsIgnoreCase(name)) {
        CompatibleTOCPropertyState state=new CompatibleTOCPropertyState(handler,element);
        state.setName(IReportItemModel.TOC_PROP);
        return state;
      }
    }
    if (element instanceof GroupElement) {
      if (IGroupElementModel.TOC_PROP.equalsIgnoreCase(name)) {
        CompatibleTOCPropertyState state=new CompatibleTOCPropertyState(handler,element);
        state.setName(IGroupElementModel.TOC_PROP);
        return state;
      }
    }
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_2 && (DesignChoiceConstants.CHOICE_VERTICAL_ALIGN.equals(name))) {
    CompatibleVerticalAlignState state=new CompatibleVerticalAlignState(handler,element);
    state.setName(DesignChoiceConstants.CHOICE_VERTICAL_ALIGN);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_4 && (element instanceof ScalarParameter) && (IScalarParameterModel.DEFAULT_VALUE_PROP.equalsIgnoreCase(name))) {
    CompatiblePropertyTypeState state=new CompatiblePropertyTypeState(handler,element);
    state.setName(IScalarParameterModel.DEFAULT_VALUE_PROP);
    return state;
  }
  if (handler.versionNumber <= VersionUtil.VERSION_3_2_0 && struct instanceof DataSetParameter && ""String_Node_Str"".equals(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,propDefn,struct,""String_Node_Str"");
    state.setName(DataSetParameter.ALLOW_NULL_MEMBER);
    return state;
  }
  if ((IReportItemModel.ON_CREATE_METHOD.equalsIgnoreCase(name)) && handler.versionNumber < VersionUtil.VERSION_3_2_0) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  if (struct instanceof ComputedColumn && ""String_Node_Str"".equalsIgnoreCase(name) && (element instanceof ScalarParameter || element instanceof ReportItem) & handler.versionNumber <= VersionUtil.VERSION_3_2_2) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,propDefn,struct,""String_Node_Str"");
    state.setName(ComputedColumn.AGGREGATEON_MEMBER);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_6 && (struct instanceof DataSetParameter || struct instanceof OdaDataSetParameter) && DataSetParameter.DATA_TYPE_MEMBER.equalsIgnoreCase(name)) {
    CompatibleColumnDataTypeState state=new CompatibleColumnDataTypeState(handler,element,propDefn,struct);
    state.setName(DataSetParameter.DATA_TYPE_MEMBER);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_9 && element instanceof ScalarParameter && IScalarParameterModel.MUCH_MATCH_PROP.equalsIgnoreCase(name)) {
    CompatibleMustMatchState state=new CompatibleMustMatchState(handler,element);
    state.setName(IScalarParameterModel.MUCH_MATCH_PROP);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0 && (IStyleModel.PAGE_BREAK_BEFORE_PROP.equalsIgnoreCase(name) || IStyleModel.PAGE_BREAK_AFTER_PROP.equalsIgnoreCase(name))) {
    CompatiblePageBreakPropState state=new CompatiblePageBreakPropState(handler,element);
    state.setName(name);
    return state;
  }
  return super.versionConditionalJumpTo();
}","protected AbstractParseState versionConditionalJumpTo(){
  if (handler.versionNumber < VersionUtil.VERSION_3_2_11 && propDefn == null && element instanceof ScalarParameter && (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name))) {
    CompatibleParamAllowMumbleState state=new CompatibleParamAllowMumbleState(handler,element,name);
    state.setName(ScalarParameter.IS_REQUIRED_PROP);
    return state;
  }
  if (handler.versionNumber <= VersionUtil.VERSION_3_2_10 && propDefn == null && element instanceof IOdaExtendableElementModel) {
    ODAExtensionElementDefn elementDefn=null;
    if (element instanceof OdaDataSet)     elementDefn=(ODAExtensionElementDefn)((OdaDataSet)element).getExtDefn();
 else     if (element instanceof OdaDataSource)     elementDefn=(ODAExtensionElementDefn)((OdaDataSource)element).getExtDefn();
    if (elementDefn != null) {
      List privatePropDefns=elementDefn.getODAPrivateDriverPropertyNames();
      if (privatePropDefns.contains(name)) {
        CompatibleODAPrivatePropertyState state=new CompatibleODAPrivatePropertyState(handler,element);
        state.setName(name);
        return state;
      }
    }
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_10) {
    if (element instanceof ReportItem) {
      if (IReportItemModel.TOC_PROP.equalsIgnoreCase(name)) {
        CompatibleTOCPropertyState state=new CompatibleTOCPropertyState(handler,element);
        state.setName(IReportItemModel.TOC_PROP);
        return state;
      }
    }
    if (element instanceof GroupElement) {
      if (IGroupElementModel.TOC_PROP.equalsIgnoreCase(name)) {
        CompatibleTOCPropertyState state=new CompatibleTOCPropertyState(handler,element);
        state.setName(IGroupElementModel.TOC_PROP);
        return state;
      }
    }
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_2 && (DesignChoiceConstants.CHOICE_VERTICAL_ALIGN.equals(name))) {
    CompatibleVerticalAlignState state=new CompatibleVerticalAlignState(handler,element);
    state.setName(DesignChoiceConstants.CHOICE_VERTICAL_ALIGN);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_4 && (element instanceof ScalarParameter) && (IScalarParameterModel.DEFAULT_VALUE_PROP.equalsIgnoreCase(name))) {
    CompatiblePropertyTypeState state=new CompatiblePropertyTypeState(handler,element);
    state.setName(IScalarParameterModel.DEFAULT_VALUE_PROP);
    return state;
  }
  if (handler.versionNumber <= VersionUtil.VERSION_3_2_0 && struct instanceof DataSetParameter && ""String_Node_Str"".equals(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,propDefn,struct,""String_Node_Str"");
    state.setName(DataSetParameter.ALLOW_NULL_MEMBER);
    return state;
  }
  if ((IReportItemModel.ON_CREATE_METHOD.equalsIgnoreCase(name)) && handler.versionNumber < VersionUtil.VERSION_3_2_0) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  if (struct instanceof ComputedColumn && ""String_Node_Str"".equalsIgnoreCase(name) && (element instanceof ScalarParameter || element instanceof ReportItem) & handler.versionNumber <= VersionUtil.VERSION_3_2_2) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,propDefn,struct,""String_Node_Str"");
    state.setName(ComputedColumn.AGGREGATEON_MEMBER);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_6 && (struct instanceof DataSetParameter || struct instanceof OdaDataSetParameter) && DataSetParameter.DATA_TYPE_MEMBER.equalsIgnoreCase(name)) {
    CompatibleColumnDataTypeState state=new CompatibleColumnDataTypeState(handler,element,propDefn,struct);
    state.setName(DataSetParameter.DATA_TYPE_MEMBER);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_2_9 && element instanceof ScalarParameter && IScalarParameterModel.MUCH_MATCH_PROP.equalsIgnoreCase(name)) {
    CompatibleMustMatchState state=new CompatibleMustMatchState(handler,element);
    state.setName(IScalarParameterModel.MUCH_MATCH_PROP);
    return state;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_1_0 && (IStyleModel.PAGE_BREAK_BEFORE_PROP.equalsIgnoreCase(name) || IStyleModel.PAGE_BREAK_AFTER_PROP.equalsIgnoreCase(name))) {
    CompatiblePageBreakPropState state=new CompatiblePageBreakPropState(handler,element);
    state.setName(name);
    return state;
  }
  return super.versionConditionalJumpTo();
}",0.99977939554379
76604,"/** 
 * shuts down the report engine
 */
public void destroy();","/** 
 * shut down the engine, release all the resources.
 */
public void destroy();",0.7534246575342466
76605,"/** 
 * shut down the engine, release all the resources.
 */
public void shutdown();","/** 
 * shut down the engine, release all the resources.
 * @deprecated
 */
public void shutdown();",0.918032786885246
76606,"/** 
 * shut down the engine, release all the resources.
 */
public void shutdown(){
  engine.shutdown();
}","/** 
 * shut down the engine, release all the resources.
 * @deprecated
 */
public void shutdown(){
  engine.shutdown();
}",0.9344978165938864
76607,"/** 
 * shut down the engine, release all the resources.
 */
public void shutdown(){
  logger.fine(""String_Node_Str"");
}","/** 
 * shut down the engine, release all the resources.
 * @deprecated
 */
public void shutdown(){
  destroy();
}",0.811965811965812
76608,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  __initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  __initParameters(request);
}",0.9756954612005856
76609,"public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) ? getLocation(scBase,0) : scBase.getStart();
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
  }
  double dX=0, dY=0, dLength=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      fsBase=dpc.getFormatSpecifier();
      if (fsBase == null) {
        fsBase=sdBase.getFormatSpecifier();
      }
      fsOrthogonal=dpc.getFormatSpecifier();
      if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
        fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
      }
      fsSeries=dpc.getFormatSpecifier();
      fsPercentile=dpc.getFormatSpecifier();
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      dLength=(i < iTickCount - 1) ? daTickCoordinates[i + 1] - daTickCoordinates[i] : 0;
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}","public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  double[] daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) ? getLocation(scBase,0) : scBase.getStart();
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
  }
  double dX=0, dY=0, dLength=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates[0] + dUnitSize * i;
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates[0] + dUnitSize * i;
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      dLength=(i < iTickCount - 1) ? daTickCoordinates[i + 1] - daTickCoordinates[i] : 0;
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}",0.9721041650567962
76610,"/** 
 * @param seOrthogonal
 * @return
 */
public final SeriesRenderingHints getSeriesRenderingHints(Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  final EList elCategories=cwoa.getSeriesDefinitions();
  if (elCategories.size() != 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  final SeriesDefinition sd=(SeriesDefinition)elCategories.get(0);
  final List al=sd.getRunTimeSeries();
  if (al.size() != 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  final Series seBase=(Series)al.get(0);
  final DataSetIterator dsiBaseValues=new DataSetIterator(seBase.getDataSet());
  final DataSetIterator dsiOrthogonalValues=new DataSetIterator(seOrthogonal.getDataSet());
  DataPointHints[] dpha=null;
  if (dsiBaseValues.size() != dsiOrthogonalValues.size()) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(dsiBaseValues.size()),new Integer(dsiOrthogonalValues.size())},rtc.getULocale()));
  }
 else {
    final int iCount=dsiOrthogonalValues.size();
    dpha=new DataPointHints[iCount];
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      fsBase=dpc.getFormatSpecifier();
      if (fsBase == null) {
        fsBase=sd.getFormatSpecifier();
      }
      fsOrthogonal=dpc.getFormatSpecifier();
      if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
        fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
      }
      fsSeries=dpc.getFormatSpecifier();
      fsPercentile=dpc.getFormatSpecifier();
    }
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    for (int i=0; i < iCount; i++) {
      Object v=dsiOrthogonalValues.next();
      if (v instanceof Number) {
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiOrthogonalValues.reset();
    for (int i=0; i < iCount; i++) {
      Object orthValue=dsiOrthogonalValues.next();
      Object percentileValue=null;
      if (total != 0) {
        if (orthValue instanceof Number) {
          percentileValue=new Double(((Number)orthValue).doubleValue() / total);
        }
 else         if (orthValue instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)orthValue).getValue() / total);
        }
      }
 else {
        percentileValue=new Double(0);
      }
      dpha[i]=new DataPointHints(dsiBaseValues.next(),orthValue,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,null,-1,rtc);
      udsh.next(dpha[i]);
    }
  }
  return new SeriesRenderingHints(this,dpha,dsiBaseValues,dsiOrthogonalValues);
}","/** 
 * @param seOrthogonal
 * @return
 */
public final SeriesRenderingHints getSeriesRenderingHints(Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  final EList elCategories=cwoa.getSeriesDefinitions();
  if (elCategories.size() != 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  final SeriesDefinition sd=(SeriesDefinition)elCategories.get(0);
  final List al=sd.getRunTimeSeries();
  if (al.size() != 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  final Series seBase=(Series)al.get(0);
  final DataSetIterator dsiBaseValues=new DataSetIterator(seBase.getDataSet());
  final DataSetIterator dsiOrthogonalValues=new DataSetIterator(seOrthogonal.getDataSet());
  DataPointHints[] dpha=null;
  if (dsiBaseValues.size() != dsiOrthogonalValues.size()) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(dsiBaseValues.size()),new Integer(dsiOrthogonalValues.size())},rtc.getULocale()));
  }
 else {
    final int iCount=dsiOrthogonalValues.size();
    dpha=new DataPointHints[iCount];
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sd.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    for (int i=0; i < iCount; i++) {
      Object v=dsiOrthogonalValues.next();
      if (v instanceof Number) {
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiOrthogonalValues.reset();
    for (int i=0; i < iCount; i++) {
      Object orthValue=dsiOrthogonalValues.next();
      Object percentileValue=null;
      if (total != 0) {
        if (orthValue instanceof Number) {
          percentileValue=new Double(((Number)orthValue).doubleValue() / total);
        }
 else         if (orthValue instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)orthValue).getValue() / total);
        }
      }
 else {
        percentileValue=new Double(0);
      }
      dpha[i]=new DataPointHints(dsiBaseValues.next(),orthValue,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,null,-1,rtc);
      udsh.next(dpha[i]);
    }
  }
  return new SeriesRenderingHints(this,dpha,dsiBaseValues,dsiOrthogonalValues);
}",0.9494043447792572
76611,"public void keyReleased(KeyEvent e){
  cancelTimer();
  if (e.keyCode == SWT.F2 && e.stateMask == 0) {
    if (selectedItem != null) {
      new RenameAction(sourceViewer).run();
    }
  }
}","public void keyReleased(KeyEvent e){
  cancelTimer();
  if (e.keyCode == SWT.F2 && e.stateMask == 0) {
    if (selectedItem != null) {
      RenameAction action=new RenameAction(sourceViewer);
      if (action.isEnabled() && action.isHandled())       action.run();
    }
  }
}",0.7896995708154506
76612,"/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws GenerationException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  LegendData legendData=new LegendData();
  if (!lg.isSetOrientation()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  if (!lg.isSetDirection()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  final Orientation orientation=lg.getOrientation();
  final Direction direction=lg.getDirection();
  final Position lgPosition=lg.getPosition();
  final boolean bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  Label la=LabelImpl.create();
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  ClientArea ca=lg.getClientArea();
  LineAttributes lia=ca.getOutline();
  legendData.dSeparatorThickness=lia.getThickness();
  la.getCaption().setValue(""String_Node_Str"");
  final ITextMetrics itm=xs.getTextMetrics(la);
  legendData.dItemHeight=itm.getFullHeight();
  la.getCaption().setValue(ELLIPSIS_STRING);
  itm.reuse(la);
  legendData.dEllipsisWidth=itm.getFullWidth();
  legendData.dScale=xs.getDpiResolution() / 72d;
  legendData.insCa=ca.getInsets().scaledInstance(legendData.dScale);
  legendData.maxWrappingSize=lg.getWrappingSize() * legendData.dScale;
  legendData.dHorizontalSpacing=3 * legendData.dScale;
  legendData.dVerticalSpacing=3 * legendData.dScale;
  legendData.dSafeSpacing=3 * legendData.dScale;
  legendData.dHorizonalReservedSpace=legendData.insCa.getLeft() + legendData.insCa.getRight() + (3 * legendData.dItemHeight) / 2 + legendData.dHorizontalSpacing;
  legendData.dVerticalReservedSpace=legendData.insCa.getTop() + legendData.insCa.getBottom() + legendData.dVerticalSpacing;
  final Block bl=cm.getBlock();
  final Bounds boFull=bl.getBounds().scaledInstance(legendData.dScale);
  final Insets ins=bl.getInsets().scaledInstance(legendData.dScale);
  final Insets lgIns=lg.getInsets().scaledInstance(legendData.dScale);
  int titleWPos=0;
  int titleHPos=0;
  final TitleBlock titleBlock=cm.getTitle();
  final Bounds titleBounds=titleBlock.getBounds().scaledInstance(legendData.dScale);
  if (titleBlock.isVisible()) {
switch (titleBlock.getAnchor().getValue()) {
case Anchor.EAST:
case Anchor.WEST:
      titleWPos=1;
    break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
  titleHPos=1;
break;
}
}
legendData.dAvailableWidth=boFull.getWidth() - ins.getLeft() - ins.getRight()- lgIns.getLeft()- lgIns.getRight()- titleBounds.getWidth() * titleWPos;
legendData.dAvailableHeight=boFull.getHeight() - ins.getTop() - ins.getBottom()- lgIns.getTop()- lgIns.getBottom()- titleBounds.getHeight() * titleHPos;
double dMaxLegendWidth=boFull.getWidth() / 3;
double dMaxLegendHeight=boFull.getHeight() / 3;
switch (lgPosition.getValue()) {
case Position.LEFT:
case Position.RIGHT:
case Position.OUTSIDE:
if (legendData.dAvailableWidth > dMaxLegendWidth) {
legendData.dAvailableWidth=dMaxLegendWidth;
}
break;
case Position.ABOVE:
case Position.BELOW:
if (legendData.dAvailableHeight > dMaxLegendHeight) {
legendData.dAvailableHeight=dMaxLegendHeight;
}
break;
}
boolean bMinSliceDefined=false;
if (cm instanceof ChartWithoutAxes) {
bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
}
 else {
legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
}
}
if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
calculateExtraLegend(cm,rtc,legendData);
}
double[] size=null;
if (orientation.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
size=computeVerticalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeVerticalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeVerticalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction.getName()},Messages.getResourceBundle(xs.getULocale()));
}
}
 else if (orientation.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
size=computeHorizalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeHorizalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeHorizalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction},Messages.getResourceBundle(xs.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{orientation},Messages.getResourceBundle(xs.getULocale()));
}
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
Label lgTitle=lg.getTitle();
Size titleSize=null;
if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
BoundingBox bb=null;
try {
bb=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
}
int iTitlePos=lg.getTitlePosition().getValue();
if (rtc.isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=bb.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,bb.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=bb.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,bb.getHeight() + 2 * shadowness);
break;
}
titleSize=SizeImpl.create(bb.getWidth() + 2 * shadowness,bb.getHeight() + 2 * shadowness);
}
itm.dispose();
if (rtc != null) {
List legendItems=legendData.legendItems;
LegendItemHints[] liha=(LegendItemHints[])legendItems.toArray(new LegendItemHints[legendItems.size()]);
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
return sz;
}","/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws GenerationException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  LegendData legendData=new LegendData();
  if (!lg.isSetOrientation()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  if (!lg.isSetDirection()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  final Orientation orientation=lg.getOrientation();
  final Direction direction=lg.getDirection();
  final Position lgPosition=lg.getPosition();
  final boolean bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  Label la=LabelImpl.create();
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  ClientArea ca=lg.getClientArea();
  LineAttributes lia=ca.getOutline();
  legendData.dSeparatorThickness=lia.getThickness();
  la.getCaption().setValue(""String_Node_Str"");
  final ITextMetrics itm=xs.getTextMetrics(la);
  legendData.dItemHeight=itm.getFullHeight();
  la.getCaption().setValue(ELLIPSIS_STRING);
  itm.reuse(la);
  legendData.dEllipsisWidth=itm.getFullWidth();
  legendData.dScale=xs.getDpiResolution() / 72d;
  legendData.insCa=ca.getInsets().scaledInstance(legendData.dScale);
  legendData.maxWrappingSize=lg.getWrappingSize() * legendData.dScale;
  legendData.dHorizontalSpacing=3 * legendData.dScale;
  legendData.dVerticalSpacing=3 * legendData.dScale;
  legendData.dSafeSpacing=3 * legendData.dScale;
  legendData.dHorizonalReservedSpace=legendData.insCa.getLeft() + legendData.insCa.getRight() + (3 * legendData.dItemHeight) / 2 + legendData.dHorizontalSpacing;
  legendData.dVerticalReservedSpace=legendData.insCa.getTop() + legendData.insCa.getBottom() + legendData.dVerticalSpacing;
  final Block bl=cm.getBlock();
  final Bounds boFull=bl.getBounds().scaledInstance(legendData.dScale);
  final Insets ins=bl.getInsets().scaledInstance(legendData.dScale);
  final Insets lgIns=lg.getInsets().scaledInstance(legendData.dScale);
  int titleWPos=0;
  int titleHPos=0;
  final TitleBlock titleBlock=cm.getTitle();
  final Bounds titleBounds=titleBlock.getBounds().scaledInstance(legendData.dScale);
  if (titleBlock.isVisible()) {
switch (titleBlock.getAnchor().getValue()) {
case Anchor.EAST:
case Anchor.WEST:
      titleWPos=1;
    break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
  titleHPos=1;
break;
}
}
legendData.dAvailableWidth=boFull.getWidth() - ins.getLeft() - ins.getRight()- lgIns.getLeft()- lgIns.getRight()- titleBounds.getWidth() * titleWPos;
legendData.dAvailableHeight=boFull.getHeight() - ins.getTop() - ins.getBottom()- lgIns.getTop()- lgIns.getBottom()- titleBounds.getHeight() * titleHPos;
double dMaxLegendWidth=boFull.getWidth() / 3;
double dMaxLegendHeight=boFull.getHeight() / 3;
switch (lgPosition.getValue()) {
case Position.LEFT:
case Position.RIGHT:
case Position.OUTSIDE:
if (legendData.dAvailableWidth > dMaxLegendWidth) {
legendData.dAvailableWidth=dMaxLegendWidth;
}
break;
case Position.ABOVE:
case Position.BELOW:
if (legendData.dAvailableHeight > dMaxLegendHeight) {
legendData.dAvailableHeight=dMaxLegendHeight;
}
break;
}
boolean bMinSliceDefined=false;
if (cm instanceof ChartWithoutAxes) {
bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
}
 else {
legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
}
}
if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
calculateExtraLegend(cm,rtc,legendData);
}
Label lgTitle=lg.getTitle();
Size titleSize=null;
BoundingBox titleBounding=null;
int iTitlePos=-1;
if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
try {
titleBounding=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
}
iTitlePos=lg.getTitlePosition().getValue();
if (rtc.isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
break;
case Position.LEFT:
case Position.RIGHT:
legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
if (orientation.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
size=computeVerticalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeVerticalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeVerticalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction.getName()},Messages.getResourceBundle(xs.getULocale()));
}
}
 else if (orientation.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
size=computeHorizalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeHorizalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeHorizalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction},Messages.getResourceBundle(xs.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{orientation},Messages.getResourceBundle(xs.getULocale()));
}
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
itm.dispose();
if (rtc != null) {
List legendItems=legendData.legendItems;
LegendItemHints[] liha=(LegendItemHints[])legendItems.toArray(new LegendItemHints[legendItems.size()]);
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
return sz;
}",0.8026136673019331
76613,"/** 
 * Returns a localized message based on an error code. Overwrite this method if you do not want to pass in the resource bundle
 * @param errorCode the error code
 * @return Localized display message.
 */
protected String getLocalizedMessage(String errorCode){
  String localizedMessage;
  Locale locale=null;
  if (rb == null) {
    localizedMessage=""String_Node_Str"" + errorCode;
  }
 else {
    locale=rb.getLocale();
    try {
      localizedMessage=rb.getString(errorCode);
    }
 catch (    Exception e) {
      localizedMessage=errorCode;
    }
  }
  try {
    MessageFormat form=new MessageFormat(localizedMessage,locale == null ? Locale.getDefault() : locale);
    return form.format(oaMessageArguments);
  }
 catch (  Throwable ex) {
    return localizedMessage;
  }
}","/** 
 * Returns a localized message based on an error code. Overwrite this method if you do not want to pass in the resource bundle
 * @param errorCode the error code
 * @return Localized display message.
 */
protected String getLocalizedMessage(String errorCode){
  String localizedMessage;
  Locale locale=null;
  if (rb == null) {
    localizedMessage=errorCode;
  }
 else {
    locale=rb.getLocale();
    try {
      localizedMessage=rb.getString(errorCode);
    }
 catch (    Exception e) {
      localizedMessage=errorCode;
    }
  }
  try {
    MessageFormat form=new MessageFormat(localizedMessage,locale == null ? Locale.getDefault() : locale);
    return form.format(oaMessageArguments);
  }
 catch (  Throwable ex) {
    return localizedMessage;
  }
}",0.9870466321243524
76614,"public void startup(PlatformConfig config) throws BirtException {
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  platformConfig=config;
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(PluginId,""String_Node_Str"" + root,root);
  }
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  try {
    osgiFramework=new File(path).toURL();
  }
 catch (  MalformedURLException ex) {
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new ChildFirstURLClassLoader(new URL[]{osgiFramework},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    setupOSGiProperties();
    Method initPropertiesMethod=clazz.getMethod(""String_Node_Str"",new Class[]{Map.class});
    if (initPropertiesMethod != null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      initPropertiesMethod.invoke(null,new Object[]{properties});
    }
 else {
      Iterator iter=properties.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String key=(String)entry.getKey();
        String value=(String)entry.getValue();
        System.setProperty(key,value);
      }
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{new String[]{},null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}","public void startup(PlatformConfig config) throws BirtException {
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  platformConfig=config;
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(PluginId,""String_Node_Str"" + root,root);
  }
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(PluginId,""String_Node_Str"",""String_Node_Str"");
  }
  try {
    osgiFramework=new File(path).toURL();
  }
 catch (  MalformedURLException ex) {
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new ChildFirstURLClassLoader(new URL[]{osgiFramework},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    setupOSGiProperties();
    Method initPropertiesMethod=clazz.getMethod(""String_Node_Str"",new Class[]{Map.class});
    if (initPropertiesMethod != null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      initPropertiesMethod.invoke(null,new Object[]{properties});
    }
 else {
      Iterator iter=properties.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String key=(String)entry.getKey();
        String value=(String)entry.getValue();
        System.setProperty(key,value);
      }
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{new String[]{},null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}",0.9971705739692804
76615,"/** 
 * Determine the report design and doc 's timestamp
 * @param request
 * @throws Exception
 */
protected void processReport(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(this.requestType) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath()))   return;
  File reportDocFile=new File(this.reportDocumentName);
  long lastModifiedOfDesign=getLastModifiedOfDesign(request);
  if (lastModifiedOfDesign != -1L && reportDocFile != null && reportDocFile.exists() && reportDocFile.isFile()) {
    if (lastModifiedOfDesign > reportDocFile.lastModified() || ParameterAccessor.isOverwrite(request)) {
      reportDocFile.delete();
    }
  }
}","/** 
 * Determine the report design and doc 's timestamp
 * @param request
 * @throws Exception
 */
protected void processReport(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(this.requestType) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath()))   return;
  if (this.reportDocumentName == null)   return;
  File reportDocFile=new File(this.reportDocumentName);
  long lastModifiedOfDesign=getLastModifiedOfDesign(request);
  if (lastModifiedOfDesign != -1L && reportDocFile != null && reportDocFile.exists() && reportDocFile.isFile()) {
    if (lastModifiedOfDesign > reportDocFile.lastModified() || ParameterAccessor.isOverwrite(request)) {
      reportDocFile.delete();
    }
  }
}",0.9676140118968936
76616,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  __initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  __initParameters(request);
}",0.9388535031847134
76617,"/** 
 * Handle use IFrame to preview report. Each IFrame should have an unique id.
 * @param src
 * @param target
 * @throws Exception
 */
protected void __handleIFrame(String src,String target) throws Exception {
  JspWriter writer=pageContext.getOut();
  String paramContainerId=""String_Node_Str"" + viewer.getId();
  writer.write(""String_Node_Str"" + paramContainerId + ""String_Node_Str"");
  Iterator it=viewer.getParameters().values().iterator();
  while (it.hasNext()) {
    ParameterField param=(ParameterField)it.next();
    String encParamName=ParameterAccessor.htmlEncode(param.getName());
    String paramValue=DataUtil.getDisplayValue(param.getValue());
    if (param.getValue() == null) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
      continue;
    }
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + paramValue + ""String_Node_Str"");
    if (param.getValue() instanceof String && param.isLocale()) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    }
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + param.getPattern() + ""String_Node_Str"");
    }
    if (param.getDisplayText() != null) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + param.getDisplayText() + ""String_Node_Str"");
    }
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + paramContainerId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + src + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (target != null)   writer.write(""String_Node_Str"" + target + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(__handleIFrameDefinition());
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
}","/** 
 * Handle use IFrame to preview report. Each IFrame should have an unique id.
 * @param src
 * @param target
 * @throws Exception
 */
protected void __handleIFrame(String src,String target) throws Exception {
  JspWriter writer=pageContext.getOut();
  String paramContainerId=""String_Node_Str"" + viewer.getId();
  writer.write(""String_Node_Str"" + paramContainerId + ""String_Node_Str"");
  Iterator it=viewer.getParameters().values().iterator();
  while (it.hasNext()) {
    ParameterField param=(ParameterField)it.next();
    String encParamName=ParameterAccessor.htmlEncode(param.getName());
    String paramValue=DataUtil.getDisplayValue(param.getValue());
    if (param.getValue() == null) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
      continue;
    }
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + paramValue + ""String_Node_Str"");
    if (param.getValue() instanceof String && param.isLocale()) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    }
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + param.getPattern() + ""String_Node_Str"");
    }
    if (param.getDisplayText() != null) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + param.getDisplayText() + ""String_Node_Str"");
    }
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + paramContainerId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + src + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (target != null)   writer.write(""String_Node_Str"" + target + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(__handleIFrameDefinition());
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
}",0.9828066153594236
76618,"/** 
 * If set isWorkingFolderAccessOnly as true, check the file if exist in working folder.
 * @param filePath
 * @return boolean
 */
public static boolean isValidFilePath(String filePath){
}","/** 
 * If set isWorkingFolderAccessOnly as true, check the file if exist in working folder.
 * @param filePath
 * @return boolean
 */
public static boolean isValidFilePath(String filePath){
  if (filePath == null)   return false;
  if (isWorkingFolderAccessOnly) {
    File docFile=new File(filePath);
    if (!docFile.isAbsolute())     return true;
    File docFolder=new File(workingFolder);
    if (docFolder.isAbsolute()) {
      String absolutePath=docFile.getAbsolutePath();
      String docFolderPath=docFolder.getAbsolutePath();
      if (isWindowsPlatform()) {
        absolutePath=absolutePath.toLowerCase();
        docFolderPath=docFolderPath.toLowerCase();
      }
      return absolutePath.startsWith(docFolderPath);
    }
 else {
      return false;
    }
  }
  return true;
}",0.3902439024390244
76619,"public void visitGraphicMasterPage(GraphicMasterPageHandle handle){
  GraphicMasterPageDesign page=new GraphicMasterPageDesign();
  setupMasterPage(page,handle);
  page.setColumns(handle.getColumnCount());
  DimensionType spacing=createDimension(handle.getColumnSpacing());
  page.setColumnSpacing(spacing);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      page.addContent((ReportItemDesign)currentElement);
    }
  }
  currentElement=page;
  Assert.isTrue(false,""String_Node_Str"");
}","public void visitGraphicMasterPage(GraphicMasterPageHandle handle){
  GraphicMasterPageDesign page=new GraphicMasterPageDesign();
  setupMasterPage(page,handle);
  page.setColumns(handle.getColumnCount());
  DimensionType spacing=createDimension(handle.getColumnSpacing(),true);
  page.setColumnSpacing(spacing);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      page.addContent((ReportItemDesign)currentElement);
    }
  }
  currentElement=page;
  Assert.isTrue(false,""String_Node_Str"");
}",0.9958711808422792
76620,"public void visitColumn(ColumnHandle handle){
  ColumnDesign col=new ColumnDesign();
  setupStyledElement(col,handle);
  DimensionType width=createDimension(handle.getWidth());
  col.setWidth(width);
  boolean supress=handle.suppressDuplicates();
  col.setSuppressDuplicate(supress);
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  col.setVisibility(visibility);
  setupHighlight(col,null);
  currentElement=col;
}","public void visitColumn(ColumnHandle handle){
  ColumnDesign col=new ColumnDesign();
  setupStyledElement(col,handle);
  DimensionType width=createDimension(handle.getWidth(),false);
  col.setWidth(width);
  boolean supress=handle.suppressDuplicates();
  col.setSuppressDuplicate(supress);
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  col.setVisibility(visibility);
  setupHighlight(col,null);
  currentElement=col;
}",0.9933774834437086
76621,"/** 
 * setup the master page object from the base master page handle.
 * @param page page object
 * @param handle page handle
 */
private void setupMasterPage(MasterPageDesign page,MasterPageHandle handle){
  setupStyledElement(page,handle);
  page.setPageType(handle.getPageType());
  DimensionValue effectWidth=handle.getPageWidth();
  DimensionValue effectHeight=handle.getPageHeight();
  DimensionType width=null;
  DimensionType height=null;
  if (effectWidth != null) {
    width=new DimensionType(effectWidth.getMeasure(),effectWidth.getUnits());
  }
  if (effectHeight != null) {
    height=new DimensionType(effectHeight.getMeasure(),effectHeight.getUnits());
  }
  page.setPageSize(width,height);
  page.setOrientation(handle.getOrientation());
  DimensionType top=createDimension(handle.getTopMargin());
  DimensionType left=createDimension(handle.getLeftMargin());
  DimensionType bottom=createDimension(handle.getBottomMargin());
  DimensionType right=createDimension(handle.getRightMargin());
  page.setMargin(top,left,bottom,right);
}","/** 
 * setup the master page object from the base master page handle.
 * @param page page object
 * @param handle page handle
 */
private void setupMasterPage(MasterPageDesign page,MasterPageHandle handle){
  setupStyledElement(page,handle);
  page.setPageType(handle.getPageType());
  DimensionValue effectWidth=handle.getPageWidth();
  DimensionValue effectHeight=handle.getPageHeight();
  DimensionType width=null;
  DimensionType height=null;
  if (effectWidth != null) {
    width=new DimensionType(effectWidth.getMeasure(),effectWidth.getUnits());
  }
  if (effectHeight != null) {
    height=new DimensionType(effectHeight.getMeasure(),effectHeight.getUnits());
  }
  page.setPageSize(width,height);
  page.setOrientation(handle.getOrientation());
  DimensionType top=createDimension(handle.getTopMargin(),true);
  DimensionType left=createDimension(handle.getLeftMargin(),true);
  DimensionType bottom=createDimension(handle.getBottomMargin(),true);
  DimensionType right=createDimension(handle.getRightMargin(),true);
  page.setMargin(top,left,bottom,right);
}",0.9905660377358492
76622,"protected DimensionType createDimension(DimensionHandle handle){
  if (handle == null || !handle.isSet()) {
    return null;
  }
  if (handle.isKeyword()) {
    return new DimensionType(handle.getStringValue());
  }
  double measure=handle.getMeasure();
  String unit=handle.getUnits();
  return new DimensionType(measure,unit);
}","protected DimensionType createDimension(DimensionHandle handle,boolean useDefault){
  if (handle == null || !useDefault && !handle.isSet()) {
    return null;
  }
  if (handle.isKeyword()) {
    return new DimensionType(handle.getStringValue());
  }
  double measure=handle.getMeasure();
  String unit=handle.getUnits();
  return new DimensionType(measure,unit);
}",0.9510086455331412
76623,"/** 
 * setup the attribute of report item
 * @param item Engine's Report Item
 * @param handle DE's report item.
 */
private void setupReportItem(ReportItemDesign item,ReportItemHandle handle){
  setupStyledElement(item,handle);
  DimensionType height=createDimension(handle.getHeight());
  DimensionType width=createDimension(handle.getWidth());
  DimensionType x=createDimension(handle.getX());
  DimensionType y=createDimension(handle.getY());
  item.setHeight(height);
  item.setWidth(width);
  item.setX(x);
  item.setY(y);
  String toc=handle.getTocExpression();
  item.setTOC(createExpression(toc));
  String bookmark=handle.getBookmark();
  item.setBookmark(createExpression(bookmark));
  String onCreate=handle.getOnCreate();
  item.setOnCreate(createExpression(onCreate));
  item.setOnRender(handle.getOnRender());
  item.setOnPageBreak(handle.getOnPageBreak());
  Iterator visibilityIter=handle.visibilityRulesIterator();
  VisibilityDesign visibility=createVisibility(visibilityIter);
  item.setVisibility(visibility);
  setupHighlight(item,null);
}","/** 
 * setup the attribute of report item
 * @param item Engine's Report Item
 * @param handle DE's report item.
 */
private void setupReportItem(ReportItemDesign item,ReportItemHandle handle){
  setupStyledElement(item,handle);
  DimensionType height=createDimension(handle.getHeight(),false);
  DimensionType width=createDimension(handle.getWidth(),false);
  DimensionType x=createDimension(handle.getX(),false);
  DimensionType y=createDimension(handle.getY(),false);
  item.setHeight(height);
  item.setWidth(width);
  item.setX(x);
  item.setY(y);
  String toc=handle.getTocExpression();
  item.setTOC(createExpression(toc));
  String bookmark=handle.getBookmark();
  item.setBookmark(createExpression(bookmark));
  String onCreate=handle.getOnCreate();
  item.setOnCreate(createExpression(onCreate));
  item.setOnRender(handle.getOnRender());
  item.setOnPageBreak(handle.getOnPageBreak());
  Iterator visibilityIter=handle.visibilityRulesIterator();
  VisibilityDesign visibility=createVisibility(visibilityIter);
  item.setVisibility(visibility);
  setupHighlight(item,null);
}",0.988826815642458
76624,"public void visitSimpleMasterPage(SimpleMasterPageHandle handle){
  SimpleMasterPageDesign page=new SimpleMasterPageDesign();
  setupMasterPage(page,handle);
  page.setHeaderHeight(createDimension(handle.getHeaderHeight()));
  page.setFooterHeight(createDimension(handle.getFooterHeight()));
  page.setShowFooterOnLast(handle.showFooterOnLast());
  page.setShowHeaderOnFirst(handle.showHeaderOnFirst());
  page.setFloatingFooter(handle.isFloatingFooter());
  SlotHandle headerSlot=handle.getPageHeader();
  for (int i=0; i < headerSlot.getCount(); i++) {
    apply(headerSlot.get(i));
    if (currentElement != null) {
      page.addHeader((ReportItemDesign)currentElement);
    }
  }
  SlotHandle footerSlot=handle.getPageFooter();
  for (int i=0; i < footerSlot.getCount(); i++) {
    apply(footerSlot.get(i));
    if (currentElement != null) {
      page.addFooter((ReportItemDesign)currentElement);
    }
  }
  currentElement=page;
}","public void visitSimpleMasterPage(SimpleMasterPageHandle handle){
  SimpleMasterPageDesign page=new SimpleMasterPageDesign();
  setupMasterPage(page,handle);
  page.setHeaderHeight(createDimension(handle.getHeaderHeight(),true));
  page.setFooterHeight(createDimension(handle.getFooterHeight(),true));
  page.setShowFooterOnLast(handle.showFooterOnLast());
  page.setShowHeaderOnFirst(handle.showHeaderOnFirst());
  page.setFloatingFooter(handle.isFloatingFooter());
  SlotHandle headerSlot=handle.getPageHeader();
  for (int i=0; i < headerSlot.getCount(); i++) {
    apply(headerSlot.get(i));
    if (currentElement != null) {
      page.addHeader((ReportItemDesign)currentElement);
    }
  }
  SlotHandle footerSlot=handle.getPageFooter();
  for (int i=0; i < footerSlot.getCount(); i++) {
    apply(footerSlot.get(i));
    if (currentElement != null) {
      page.addFooter((ReportItemDesign)currentElement);
    }
  }
  currentElement=page;
}",0.994692144373673
76625,"public void visitRow(RowHandle handle){
  RowDesign row=new RowDesign();
  setupStyledElement(row,handle);
  DimensionType height=createDimension(handle.getHeight());
  row.setHeight(height);
  String bookmark=handle.getBookmark();
  row.setBookmark(createExpression(bookmark));
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  row.setVisibility(visibility);
  SlotHandle cellSlot=handle.getCells();
  for (int i=0; i < cellSlot.getCount(); i++) {
    apply(cellSlot.get(i));
    if (currentElement != null) {
      row.addCell((CellDesign)currentElement);
    }
  }
  String onCreate=handle.getOnCreate();
  row.setOnCreate(createExpression(onCreate));
  row.setOnRender(((RowHandle)handle).getOnRender());
  setupHighlight(row,null);
  currentElement=row;
}","public void visitRow(RowHandle handle){
  RowDesign row=new RowDesign();
  setupStyledElement(row,handle);
  DimensionType height=createDimension(handle.getHeight(),false);
  row.setHeight(height);
  String bookmark=handle.getBookmark();
  row.setBookmark(createExpression(bookmark));
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  row.setVisibility(visibility);
  SlotHandle cellSlot=handle.getCells();
  for (int i=0; i < cellSlot.getCount(); i++) {
    apply(cellSlot.get(i));
    if (currentElement != null) {
      row.addCell((CellDesign)currentElement);
    }
  }
  String onCreate=handle.getOnCreate();
  row.setOnCreate(createExpression(onCreate));
  row.setOnRender(((RowHandle)handle).getOnRender());
  setupHighlight(row,null);
  currentElement=row;
}",0.9962358845671268
76626,"/** 
 * Test compatibility of page breaks.
 * @throws Exception
 */
public void testCompatibilityOfPageBreaks() throws Exception {
  openDesign(""String_Node_Str"");
  TableHandle table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS,((GroupHandle)table.getGroups().get(0)).getProperty(IStyleModel.PAGE_BREAK_AFTER_PROP));
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_AUTO,table.getProperty(IStyleModel.PAGE_BREAK_AFTER_PROP));
  assertEquals(DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS,table.getProperty(IStyleModel.PAGE_BREAK_BEFORE_PROP));
}","/** 
 * Test compatibility of page breaks.
 * @throws Exception
 */
public void testCompatibilityOfPageBreaks() throws Exception {
  openDesign(""String_Node_Str"");
  TableHandle table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_AUTO,table.getProperty(IStyleModel.PAGE_BREAK_AFTER_PROP));
  assertEquals(DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS,table.getProperty(IStyleModel.PAGE_BREAK_BEFORE_PROP));
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_AUTO,((GroupHandle)table.getGroups().get(0)).getProperty(IStyleModel.PAGE_BREAK_AFTER_PROP));
  assertEquals(""String_Node_Str"",((GroupHandle)table.getGroups().get(0)).getHeader().get(0).getProperty(IStyleModel.PAGE_BREAK_AFTER_PROP));
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS,((GroupHandle)table.getGroups().get(0)).getFooter().get(0).getProperty(IStyleModel.PAGE_BREAK_AFTER_PROP));
}",0.7175866495507061
76627,"/** 
 * Returns line number in design file, where error is found. Note: For INVALID_XML, the line number is not accurate. Basically, the error can be found after the indicated line a bit.
 * @return line number in design file
 */
public int getLineNo(){
  if (lineNo == 0) {
    Module root=element.getRoot();
    if (root != null)     return root.getLineNo(element);
 else     return 1;
  }
 else   return lineNo;
}","/** 
 * Returns line number in design file, where error is found. Note: For INVALID_XML, the line number is not accurate. Basically, the error can be found after the indicated line a bit.
 * @return line number in design file
 */
public int getLineNo(){
  if (lineNo == 0) {
    if (element == null)     return 1;
    Module root=element.getRoot();
    if (root != null)     return root.getLineNo(element);
 else     return 1;
  }
 else   return lineNo;
}",0.9552238805970148
76628,"protected boolean getBooleanOption(String name,boolean defaultValue){
  Object value=options.get(name);
  if (value instanceof Boolean) {
    return ((Boolean)value).booleanValue();
  }
  return defaultValue;
}","protected boolean getBooleanOption(String name,boolean defaultValue){
  Object value=options.get(name);
  if (value instanceof Boolean) {
    return ((Boolean)value).booleanValue();
  }
 else   if (value instanceof String) {
    return ""String_Node_Str"".equalsIgnoreCase((String)value);
  }
  return defaultValue;
}",0.7695238095238095
76629,"/** 
 * Fills dynamic options with parameters from request.
 */
private void initializeEmitterConfigs(HttpServletRequest request,Map config){
  if (config == null) {
    return;
  }
  for (Iterator itr=request.getParameterMap().entrySet().iterator(); itr.hasNext(); ) {
    Entry entry=(Entry)itr.next();
    String name=String.valueOf(entry.getKey());
    if (name.startsWith(""String_Node_Str"")) {
      name=name.substring(2);
      config.put(name,entry.getValue());
    }
  }
}","/** 
 * Fills dynamic options with parameters from request.
 */
private void initializeEmitterConfigs(HttpServletRequest request,Map config){
  if (config == null) {
    return;
  }
  for (Iterator itr=request.getParameterMap().entrySet().iterator(); itr.hasNext(); ) {
    Entry entry=(Entry)itr.next();
    String name=String.valueOf(entry.getKey());
    if (name.startsWith(""String_Node_Str"")) {
      config.put(name.substring(2),ParameterAccessor.getParameter(request,name));
    }
  }
}",0.9003083247687564
76630,"/** 
 * test case to test the parser,especially the capability to parse the Page Setup. To get the content about Page Setup from an external file and then compare the expected result with the real result of each property of Page Setup. If they are the same,that means the IR is correct, otherwise, there exists errors in the parser
 */
public void testMasterPage() throws Exception {
  PageSetupDesign pageSetup=report.getPageSetup();
  assertEquals(pageSetup.getMasterPageCount(),1);
  SimpleMasterPageDesign page=(SimpleMasterPageDesign)pageSetup.getMasterPage(0);
  assertEquals(""String_Node_Str"",page.getName());
  assertEquals(29.7,page.getPageHeight().convertTo(DimensionType.UNITS_CM),0.1);
  assertEquals(21,page.getPageWidth().convertTo(DimensionType.UNITS_CM),0.1);
  assertEquals(""String_Node_Str"",page.getBottomMargin().toString());
  assertEquals(""String_Node_Str"",page.getTopMargin().toString());
  assertEquals(""String_Node_Str"",page.getLeftMargin().toString());
  assertEquals(""String_Node_Str"",page.getRightMargin().toString());
}","/** 
 * test case to test the parser,especially the capability to parse the Page Setup. To get the content about Page Setup from an external file and then compare the expected result with the real result of each property of Page Setup. If they are the same,that means the IR is correct, otherwise, there exists errors in the parser
 */
public void testMasterPage() throws Exception {
  PageSetupDesign pageSetup=report.getPageSetup();
  assertEquals(pageSetup.getMasterPageCount(),2);
  SimpleMasterPageDesign page=(SimpleMasterPageDesign)pageSetup.getMasterPage(0);
  assertEquals(""String_Node_Str"",page.getName());
  assertEquals(29.7,page.getPageHeight().convertTo(DimensionType.UNITS_CM),0.1);
  assertEquals(21,page.getPageWidth().convertTo(DimensionType.UNITS_CM),0.1);
  assertEquals(""String_Node_Str"",page.getBottomMargin().toString());
  assertEquals(""String_Node_Str"",page.getTopMargin().toString());
  assertEquals(""String_Node_Str"",page.getLeftMargin().toString());
  assertEquals(""String_Node_Str"",page.getRightMargin().toString());
  page=(SimpleMasterPageDesign)pageSetup.getMasterPage(1);
  assertEquals(""String_Node_Str"",page.getName());
  assertEquals(""String_Node_Str"",page.getBottomMargin().toString());
  assertEquals(""String_Node_Str"",page.getTopMargin().toString());
  assertEquals(""String_Node_Str"",page.getLeftMargin().toString());
  assertEquals(""String_Node_Str"",page.getRightMargin().toString());
  assertEquals(""String_Node_Str"",page.getHeaderHeight().toString());
  assertEquals(""String_Node_Str"",page.getFooterHeight().toString());
}",0.8012255840674071
76631,"protected void save() throws SemanticException {
  if (itemName.getText() != null && itemName.getText().trim().length() > 0) {
    if (bindingColumn == null) {
      if (itemExpression.getText() == null || itemExpression.getText().length() == 0) {
        return;
      }
      newBinding.setName(itemName.getText());
      newBinding.setDisplayName(itemDisplayName.getText());
      for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
        if (DATA_TYPE_CHOICES[i].getDisplayName().endsWith(itemType.getText())) {
          newBinding.setDataType(DATA_TYPE_CHOICES[i].getName());
          break;
        }
      }
      newBinding.setExpression(itemExpression.getText());
      if (itemAggregateOn.isVisible() && !(itemAggregateOn.getText().equals(ALL) || itemAggregateOn.getText().equals(NONE))) {
        newBinding.setAggregateOn(itemAggregateOn.getText());
      }
 else       newBinding.setAggregateOn(null);
      bindingColumn=DEUtil.addColumn(getBindingObject(),newBinding,isForceBinding());
    }
 else {
      if (itemExpression.getText() != null && itemExpression.getText().length() == 0) {
        DataItemHandle itemHandle=(DataItemHandle)getBindingObject();
        String resultSetName=itemHandle.getResultSetColumn();
        if (bindingColumn.getName().equals(resultSetName)) {
          itemHandle.setResultSetColumn(null);
        }
        itemHandle.getColumnBindings().removeItem(bindingColumn.getStructure());
        bindingColumn=null;
        return;
      }
      if (!(bindingColumn.getName() != null && bindingColumn.getName().equals(itemName.getText().trim())))       bindingColumn.setName(itemName.getText());
      for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
        if (DATA_TYPE_CHOICES[i].getDisplayName().endsWith(itemType.getText())) {
          bindingColumn.setDataType(DATA_TYPE_CHOICES[i].getName());
          break;
        }
      }
      bindingColumn.setExpression(itemExpression.getText());
      if (itemAggregateOn.isVisible() && !(itemAggregateOn.getText().equals(ALL) || itemAggregateOn.getText().equals(NONE))) {
        bindingColumn.setAggregateOn(itemAggregateOn.getText());
      }
 else       bindingColumn.setAggregateOn(null);
    }
  }
}","protected void save() throws SemanticException {
  if (itemName.getText() != null && itemName.getText().trim().length() > 0) {
    if (bindingColumn == null) {
      if (itemExpression.getText() == null || itemExpression.getText().length() == 0) {
        return;
      }
      newBinding.setName(itemName.getText());
      newBinding.setDisplayName(itemDisplayName.getText());
      for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
        if (DATA_TYPE_CHOICES[i].getDisplayName().endsWith(itemType.getText())) {
          newBinding.setDataType(DATA_TYPE_CHOICES[i].getName());
          break;
        }
      }
      newBinding.setExpression(itemExpression.getText());
      if (itemAggregateOn.isVisible() && !(itemAggregateOn.getText().equals(ALL) || itemAggregateOn.getText().equals(NONE))) {
        newBinding.setAggregateOn(itemAggregateOn.getText());
      }
 else       newBinding.setAggregateOn(null);
      bindingColumn=DEUtil.addColumn(getBindingObject(),newBinding,isForceBinding());
    }
 else {
      if (itemExpression.getText() != null && itemExpression.getText().length() == 0) {
        DataItemHandle itemHandle=(DataItemHandle)getBindingObject();
        String resultSetName=itemHandle.getResultSetColumn();
        if (bindingColumn.getName().equals(resultSetName)) {
          itemHandle.setResultSetColumn(null);
        }
        itemHandle.getColumnBindings().removeItem(bindingColumn.getStructure());
        bindingColumn=null;
        return;
      }
      if (!(bindingColumn.getName() != null && bindingColumn.getName().equals(itemName.getText().trim())))       bindingColumn.setName(itemName.getText());
      if (!(bindingColumn.getDisplayName() != null && bindingColumn.getDisplayName().equals(itemDisplayName.getText().trim())))       bindingColumn.setDisplayName(itemDisplayName.getText());
      for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
        if (DATA_TYPE_CHOICES[i].getDisplayName().endsWith(itemType.getText())) {
          bindingColumn.setDataType(DATA_TYPE_CHOICES[i].getName());
          break;
        }
      }
      bindingColumn.setExpression(itemExpression.getText());
      if (itemAggregateOn.isVisible() && !(itemAggregateOn.getText().equals(ALL) || itemAggregateOn.getText().equals(NONE))) {
        bindingColumn.setAggregateOn(itemAggregateOn.getText());
      }
 else       bindingColumn.setAggregateOn(null);
    }
  }
}",0.9585413501193836
76632,"protected Control createDialogArea(Composite parent){
  final Composite composite=(Composite)super.createDialogArea(parent);
  UIUtil.bindHelp(composite,IHelpContextIds.DATA_ITEM_BINDING_DIALOG);
  ((GridLayout)composite.getLayout()).numColumns=3;
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=380;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(NAME);
  itemName=new Text(composite,SWT.BORDER);
  itemName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  WidgetUtil.createGridPlaceholder(composite,1,false);
  itemName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (DataItemBindingDialog.this.getOkButton() != null) {
        if (itemName.getText() == null || itemName.getText().trim().equals(""String_Node_Str""))         DataItemBindingDialog.this.getOkButton().setEnabled(false);
 else         DataItemBindingDialog.this.getOkButton().setEnabled(true);
      }
    }
  }
);
  new Label(composite,SWT.NONE).setText(DISPLAY_NAME);
  itemDisplayName=new Text(composite,SWT.BORDER);
  int width=itemDisplayName.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  gd.widthHint=width < 250 ? 250 : width;
  itemDisplayName.setLayoutData(gd);
  WidgetUtil.createGridPlaceholder(composite,1,false);
  new Label(composite,SWT.NONE).setText(DATA_TYPE);
  itemType=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  itemType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  WidgetUtil.createGridPlaceholder(composite,1,false);
  new Label(composite,SWT.NONE).setText(EXPRESSION);
  itemExpression=new Text(composite,SWT.BORDER);
  itemExpression.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  Button expressionButton=new Button(composite,SWT.PUSH);
  expressionButton.setLayoutData(gd);
  expressionButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleExpressionButtonSelectEvent();
    }
  }
);
  setExpressionButtonImage(expressionButton);
  itemExpression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (ExpressionUtil.hasAggregation(itemExpression.getText())) {
        String groupType=DEUtil.getGroupControlType(input);
        if (!(bindingColumn != null && bindingColumn.getExpression() != null && bindingColumn.getExpression().equals(itemExpression.getText()))) {
          if (groupType.equals(DEUtil.TYPE_GROUP_GROUP)) {
            setAggregateOnSelect(((GroupHandle)DEUtil.getGroups(input).get(0)).getName());
          }
 else           if (groupType.equals(DEUtil.TYPE_GROUP_LISTING)) {
            setAggregateOnSelect(ALL);
          }
 else           setAggregateOnSelect(NONE);
        }
 else         if (groupType.equals(DEUtil.TYPE_GROUP_NONE)) {
          setAggregateOnSelect(NONE);
        }
      }
      if (ExpressionUtil.hasAggregation(itemExpression.getText()) && !itemAggregateOn.getVisible()) {
        aggregateOnLabel.setVisible(true);
        itemAggregateOn.setVisible(true);
        hiddenLabel.setVisible(true);
      }
 else       if (!ExpressionUtil.hasAggregation(itemExpression.getText()) && itemAggregateOn.getVisible()) {
        aggregateOnLabel.setVisible(false);
        itemAggregateOn.setVisible(false);
        hiddenLabel.setVisible(false);
      }
    }
  }
);
  aggregateOnLabel=new Label(composite,SWT.NONE);
  aggregateOnLabel.setText(AGGREGATE_ON);
  itemAggregateOn=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  itemAggregateOn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hiddenLabel=WidgetUtil.createGridPlaceholder(composite,1,false);
  aggregateOnLabel.setVisible(false);
  itemAggregateOn.setVisible(false);
  hiddenLabel.setVisible(false);
  init();
  return composite;
}","protected Control createDialogArea(Composite parent){
  final Composite composite=(Composite)super.createDialogArea(parent);
  UIUtil.bindHelp(composite,IHelpContextIds.DATA_ITEM_BINDING_DIALOG);
  ((GridLayout)composite.getLayout()).numColumns=3;
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=380;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(NAME);
  itemName=new Text(composite,SWT.BORDER);
  itemName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  WidgetUtil.createGridPlaceholder(composite,1,false);
  itemName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (DataItemBindingDialog.this.getOkButton() != null) {
        if (itemName.getText() == null || itemName.getText().trim().equals(""String_Node_Str""))         DataItemBindingDialog.this.getOkButton().setEnabled(false);
 else         DataItemBindingDialog.this.getOkButton().setEnabled(true);
      }
    }
  }
);
  new Label(composite,SWT.NONE).setText(DISPLAY_NAME);
  itemDisplayName=new Text(composite,SWT.BORDER);
  itemDisplayName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  WidgetUtil.createGridPlaceholder(composite,1,false);
  new Label(composite,SWT.NONE).setText(DATA_TYPE);
  itemType=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  itemType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  WidgetUtil.createGridPlaceholder(composite,1,false);
  new Label(composite,SWT.NONE).setText(EXPRESSION);
  itemExpression=new Text(composite,SWT.BORDER);
  itemExpression.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  Button expressionButton=new Button(composite,SWT.PUSH);
  expressionButton.setLayoutData(gd);
  expressionButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleExpressionButtonSelectEvent();
    }
  }
);
  setExpressionButtonImage(expressionButton);
  itemExpression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (ExpressionUtil.hasAggregation(itemExpression.getText())) {
        String groupType=DEUtil.getGroupControlType(input);
        if (!(bindingColumn != null && bindingColumn.getExpression() != null && bindingColumn.getExpression().equals(itemExpression.getText()))) {
          if (groupType.equals(DEUtil.TYPE_GROUP_GROUP)) {
            setAggregateOnSelect(((GroupHandle)DEUtil.getGroups(input).get(0)).getName());
          }
 else           if (groupType.equals(DEUtil.TYPE_GROUP_LISTING)) {
            setAggregateOnSelect(ALL);
          }
 else           setAggregateOnSelect(NONE);
        }
 else         if (groupType.equals(DEUtil.TYPE_GROUP_NONE)) {
          setAggregateOnSelect(NONE);
        }
      }
      if (ExpressionUtil.hasAggregation(itemExpression.getText()) && !itemAggregateOn.getVisible()) {
        aggregateOnLabel.setVisible(true);
        itemAggregateOn.setVisible(true);
        hiddenLabel.setVisible(true);
      }
 else       if (!ExpressionUtil.hasAggregation(itemExpression.getText()) && itemAggregateOn.getVisible()) {
        aggregateOnLabel.setVisible(false);
        itemAggregateOn.setVisible(false);
        hiddenLabel.setVisible(false);
      }
    }
  }
);
  aggregateOnLabel=new Label(composite,SWT.NONE);
  aggregateOnLabel.setText(AGGREGATE_ON);
  itemAggregateOn=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  itemAggregateOn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hiddenLabel=WidgetUtil.createGridPlaceholder(composite,1,false);
  aggregateOnLabel.setVisible(false);
  itemAggregateOn.setVisible(false);
  hiddenLabel.setVisible(false);
  init();
  return composite;
}",0.9700301007721502
76633,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  GridLayout glGapWidth=new GridLayout();
  glGapWidth.numColumns=8;
  glGapWidth.horizontalSpacing=5;
  glGapWidth.marginHeight=2;
  glGapWidth.marginWidth=2;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(3,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbCategory=new Button(choiceComposite,SWT.CHECK);
  cbCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbCategory.setText(Messages.getString(""String_Node_Str""));
  cbCategory.setSelection(axis.isCategoryAxis());
  cbCategory.addSelectionListener(this);
  cbCategory.setEnabled(!AxisType.TEXT_LITERAL.equals(axis.getType()));
  cbCategory.setVisible(angleType == AngleType.X);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible(angleType == AngleType.X);
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.widthHint=260;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  Label lblOrientation=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLOrientation=new GridData(GridData.FILL);
  gdLBLOrientation.widthHint=90;
  gdLBLOrientation.grabExcessVerticalSpace=false;
  lblOrientation.setLayoutData(gdLBLOrientation);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Label(cmpGeneral,SWT.SINGLE);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBOrientation.horizontalSpan=4;
  gdCMBOrientation.widthHint=120;
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.setText(LiteralHelper.orientationSet.getDisplayNameByName(getAxisForProcessing().getOrientation().getName()));
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMinorGrid();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  GridLayout glGapWidth=new GridLayout();
  glGapWidth.numColumns=8;
  glGapWidth.horizontalSpacing=5;
  glGapWidth.marginHeight=2;
  glGapWidth.marginWidth=2;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(3,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbCategory=new Button(choiceComposite,SWT.CHECK);
  cbCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbCategory.setText(Messages.getString(""String_Node_Str""));
  cbCategory.setSelection(axis.isCategoryAxis());
  cbCategory.addSelectionListener(this);
  cbCategory.setEnabled(!AxisType.TEXT_LITERAL.equals(axis.getType()) && !BarChart.TYPE_LITERAL.equals(getChart().getType()) && !StockChart.TYPE_LITERAL.equals(getChart().getType()));
  cbCategory.setVisible(angleType == AngleType.X);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible(angleType == AngleType.X);
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.widthHint=260;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  Label lblOrientation=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLOrientation=new GridData(GridData.FILL);
  gdLBLOrientation.widthHint=90;
  gdLBLOrientation.grabExcessVerticalSpace=false;
  lblOrientation.setLayoutData(gdLBLOrientation);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Label(cmpGeneral,SWT.SINGLE);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBOrientation.horizontalSpan=4;
  gdCMBOrientation.widthHint=120;
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.setText(LiteralHelper.orientationSet.getDisplayNameByName(getAxisForProcessing().getOrientation().getName()));
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMinorGrid();
  return cmpContent;
}",0.989363722697056
76634,"/** 
 * Get report page from Http request. If frameset pattern, default page is 1.
 * @param request http request
 * @return report page number
 */
public static int getPage(HttpServletRequest request){
  int page=getParameterAsInt(request,PARAM_PAGE);
  if (page > 0)   return page;
  String servletPath=request.getServletPath();
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath)) {
    page=1;
  }
 else {
    page=0;
  }
  return page;
}","/** 
 * Get report page from Http request. If frameset pattern, default page is 1.
 * @param request http request
 * @return report page number
 */
public static int getPage(HttpServletRequest request){
  int page=getParameterAsInt(request,PARAM_PAGE);
  if (page > 0)   return page;
  String servletPath=request.getServletPath();
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) && PARAM_FORMAT_HTML.equalsIgnoreCase(getFormat(request))) {
    page=1;
  }
 else {
    page=0;
  }
  return page;
}",0.9410569105691056
76635,"private Map getParameterSelectionLists(IViewerReportDesignHandle design,Map params,InputOptions options,ViewerAttributeBean attrBean) throws ReportServiceException {
  if (params == null || params.size() == 0)   return new HashMap();
  List[] listArray=null;
  Map ret=new HashMap();
  List remainingParamNames=new ArrayList();
  String firstName=(String)params.keySet().iterator().next();
  Collection paramDefs=attrBean.getParameterDefList();
  ParameterDefinition paramDef=null;
  for (Iterator it=paramDefs.iterator(); it.hasNext(); ) {
    ParameterDefinition temp=(ParameterDefinition)it.next();
    if (temp.getName().equals(firstName)) {
      paramDef=temp;
      break;
    }
  }
  if (paramDef == null) {
    throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.REPORT_SERVICE_EXCEPTION_INVALID_PARAMETER,new String[]{firstName}));
  }
  ParameterGroupDefinition group=paramDef.getGroup();
  if (group != null) {
    if (group.getParameterCount() > params.size()) {
      int remainingParams=group.getParameterCount() - params.size();
      for (int i=0; i < remainingParams; i++) {
        ParameterDefinition def=(ParameterDefinition)group.getParameters().get(params.size() + i);
        remainingParamNames.add(def.getName());
      }
    }
  }
  try {
    if (remainingParamNames.size() > 0) {
      listArray=new List[remainingParamNames.size()];
      for (int k=0; k < remainingParamNames.size(); k++) {
        Object[] keyValue=new Object[params.size() + k];
        Set values=params.keySet();
        int i=0;
        for (Iterator it=values.iterator(); it.hasNext(); ) {
          keyValue[i]=params.get(it.next());
          i++;
        }
        for (i=0; i < k; i++) {
          if (listArray[i].isEmpty()) {
            keyValue[params.size() + i]=null;
          }
 else {
            keyValue[params.size() + i]=listArray[i].get(0);
          }
        }
        listArray[k]=doQueryCascadeParameterSelectionList(remainingParamNames.get(k).toString(),design,group.getName(),keyValue,options,attrBean);
        ret.put(remainingParamNames.get(k),listArray[k]);
      }
    }
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  return ret;
}","private Map getParameterSelectionLists(IViewerReportDesignHandle design,Map params,InputOptions options,ViewerAttributeBean attrBean) throws ReportServiceException {
  if (params == null || params.size() == 0)   return new HashMap();
  List paramList=null;
  Map ret=new HashMap();
  List remainingParamNames=new ArrayList();
  String firstName=(String)params.keySet().iterator().next();
  Collection paramDefs=attrBean.getParameterDefList();
  ParameterDefinition paramDef=null;
  for (Iterator it=paramDefs.iterator(); it.hasNext(); ) {
    ParameterDefinition temp=(ParameterDefinition)it.next();
    if (temp.getName().equals(firstName)) {
      paramDef=temp;
      break;
    }
  }
  if (paramDef == null) {
    throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.REPORT_SERVICE_EXCEPTION_INVALID_PARAMETER,new String[]{firstName}));
  }
  ParameterGroupDefinition group=paramDef.getGroup();
  if (group != null) {
    if (group.getParameterCount() > params.size()) {
      int remainingParams=group.getParameterCount() - params.size();
      for (int i=0; i < remainingParams; i++) {
        ParameterDefinition def=(ParameterDefinition)group.getParameters().get(params.size() + i);
        remainingParamNames.add(def.getName());
      }
    }
  }
  try {
    if (remainingParamNames.size() > 0) {
      Object[] keyValue=new Object[params.size()];
      Set values=params.keySet();
      int i=0;
      for (Iterator it=values.iterator(); it.hasNext(); ) {
        keyValue[i]=params.get(it.next());
        i++;
      }
      paramList=doQueryCascadeParameterSelectionList(remainingParamNames.get(0).toString(),design,group.getName(),keyValue,options,attrBean);
      ret.put(remainingParamNames.get(0),paramList);
    }
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  return ret;
}",0.8231292517006803
76636,"/** 
 * New extended item from library.
 * @throws Exception
 */
public void testNewExtendedItemFrom() throws Exception {
  new PeerExtensionLoader().load();
  openDesign(""String_Node_Str"");
  LibraryHandle libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  ExtendedItemHandle extendedItem=(ExtendedItemHandle)libraryHandle.getElementByID(77);
  DesignElementHandle handle=designHandle.getElementFactory().newElementFrom(extendedItem,""String_Node_Str"");
  assertNotNull(handle);
  assertEquals(""String_Node_Str"",handle.getName());
}","/** 
 * New extended item from library.
 * @throws Exception
 */
public void testNewExtendedItemFrom() throws Exception {
  openDesign(""String_Node_Str"");
  LibraryHandle libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  ExtendedItemHandle extendedItem=(ExtendedItemHandle)libraryHandle.getElementByID(77);
  DesignElementHandle handle=designHandle.getElementFactory().newElementFrom(extendedItem,""String_Node_Str"");
  assertNotNull(handle);
  assertEquals(""String_Node_Str"",handle.getName());
}",0.965583173996176
76637,"/** 
 * Service provided by the fragment. This is the entry point of engine framgent. It generally includes a JSP page to render a certain part of web viewer.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException, BirtException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  if (attrBean != null && !attrBean.isMissingParameter() && !this.__checkHTMLFormat(request)) {
    this.doPreService(request,response);
    this.doService(request,response);
    this.doPostService(request,response);
  }
 else {
    super.doPreService(request,response);
    super.doService(request,response);
    String target=super.doPostService(request,response);
    if (target != null && target.length() > 0) {
      RequestDispatcher rd=request.getRequestDispatcher(target);
      rd.include(request,response);
    }
  }
}","/** 
 * Service provided by the fragment. This is the entry point of engine framgent. It generally includes a JSP page to render a certain part of web viewer.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException, BirtException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  if (attrBean != null && !attrBean.isShowParameterPage() && !this.__checkHTMLFormat(request)) {
    this.doPreService(request,response);
    this.doService(request,response);
    this.doPostService(request,response);
  }
 else {
    super.doPreService(request,response);
    super.doService(request,response);
    String target=super.doPostService(request,response);
    if (target != null && target.length() > 0) {
      RequestDispatcher rd=request.getRequestDispatcher(target);
      rd.include(request,response);
    }
  }
}",0.9928808732795444
76638,"public void testFont() throws IOException, FactoryConfigurationError, ParserConfigurationException, SAXException {
  String configFile=""String_Node_Str"";
  fontMappingManager=getFontMappingManager(configFile);
  assertTrue(isMappedTo((char)1,""String_Node_Str"",""String_Node_Str""));
  assertTrue(isMappedTo((char)1,""String_Node_Str"",""String_Node_Str""));
  assertTrue(isMappedTo((char)1,""String_Node_Str"",""String_Node_Str""));
  assertTrue(isDefaultMappedTo((char)0x501,""String_Node_Str"",""String_Node_Str""));
  assertTrue(isDefaultMappedTo((char)0x501,""String_Node_Str"",""String_Node_Str""));
}","public void testFont() throws IOException, FactoryConfigurationError, ParserConfigurationException, SAXException {
  String configFile=""String_Node_Str"";
  fontMappingManager=getFontMappingManager(configFile);
  assertTrue(isMappedTo('1',""String_Node_Str"",""String_Node_Str""));
  assertTrue(isMappedTo('1',""String_Node_Str"",""String_Node_Str""));
  assertTrue(isDefaultMappedTo((char)0xe81,""String_Node_Str"",""String_Node_Str""));
  assertTrue(isMappedTo('1',""String_Node_Str"",""String_Node_Str""));
  assertTrue(isMappedTo('1',""String_Node_Str"",""String_Node_Str""));
  assertTrue(isMappedTo('1',""String_Node_Str"",""String_Node_Str""));
  assertTrue(isDefaultMappedTo((char)0x501,""String_Node_Str"",""String_Node_Str""));
  assertTrue(isDefaultMappedTo((char)0x501,""String_Node_Str"",""String_Node_Str""));
}",0.7420289855072464
76639,"private String getMappedFont(String fontFamilyName,Map fontMap){
  String mappedFontFamily=(String)fontMap.get(fontFamilyName);
  if (mappedFontFamily == null) {
    mappedFontFamily=(String)fontMap.get(FONT_NAME_ALL_FONTS);
  }
  return mappedFontFamily;
}","private BaseFont getMappedFont(char c,int fontStyle,String fontFamilyName){
  String fontName=getMappedFontName(fontFamilyName,fontMapping);
  fontName=fontName == null ? fontFamilyName : fontName;
  BaseFont candidateFont=getBaseFont(fontName,c,fontStyle);
  return candidateFont;
}",0.2
76640,"protected BaseFont getMappedFontByFontName(char c,CSSValueList fontFamilies,int fontStyle){
  String fontName=null;
  BaseFont candidateFont=null;
  for (int i=0; i < fontFamilies.getLength(); i++) {
    String fontFamilyName=fontFamilies.item(i).getCssText();
    fontName=getMappedFont(fontFamilyName,fontMapping);
    candidateFont=getBaseFont(fontName,c,fontStyle);
    if (null != candidateFont)     return candidateFont;
  }
  return null;
}","protected BaseFont getMappedFontByFontName(char c,CSSValueList fontFamilies,int fontStyle){
  BaseFont candidateFont=null;
  for (int i=0; i < fontFamilies.getLength(); i++) {
    String fontFamilyName=fontFamilies.item(i).getCssText();
    candidateFont=getMappedFont(c,fontStyle,fontFamilyName);
    if (null != candidateFont)     return candidateFont;
    candidateFont=getMappedFont(c,fontStyle,FONT_NAME_ALL_FONTS);
    if (candidateFont != null) {
      return candidateFont;
    }
  }
  return null;
}",0.6031413612565445
76641,"/** 
 * Gets font for the character which is not listed in ""all-fonts"" blocks.
 * @param fontFamilies the font families used for the character
 * @param fontStyle the font style.
 * @return the default font.
 */
public BaseFont getDefaultFont(CSSValueList fontFamilies,int fontStyle){
  BaseFont result=null;
  for (int i=0; i < fontFamilies.getLength(); i++) {
    String fontFamilyName=fontFamilies.item(i).getCssText();
    String fontName=getMappedFont(fontFamilyName,defaultFonts);
    if (fontName != null)     result=createFont(fontName,fontStyle);
  }
  if (result == null) {
    result=createFont(DEFAULT_FONT,fontStyle);
  }
  return result;
}","/** 
 * Gets font for the character which is not listed in ""all-fonts"" blocks.
 * @param fontFamilies the font families used for the character
 * @param fontStyle the font style.
 * @return the default font.
 */
public BaseFont getDefaultFont(CSSValueList fontFamilies,int fontStyle){
  BaseFont result=null;
  for (int i=0; i < fontFamilies.getLength(); i++) {
    String fontFamilyName=fontFamilies.item(i).getCssText();
    String fontName=getMappedFontName(fontFamilyName,defaultFonts);
    if (fontName != null)     result=createFont(fontName,fontStyle);
  }
  if (result == null) {
    result=createFont(getMappedFontName(FONT_NAME_ALL_FONTS,defaultFonts),fontStyle);
  }
  return result;
}",0.9592290585618976
76642,"/** 
 * Tests cases for reading and setting properties of report design.
 * @throws Exception if any exception.
 */
public void testReportDesignProperties() throws Exception {
  assertEquals(""String_Node_Str"",designHandle.getBase());
  assertEquals(""String_Node_Str"",designHandle.getFileName());
  designHandle.setBase(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getBase());
  assertEquals(""String_Node_Str"",designHandle.getAuthor());
  assertEquals(""String_Node_Str"",designHandle.getHelpGuide());
  assertEquals(""String_Node_Str"",designHandle.getCreatedBy());
  assertEquals(30,designHandle.getRefreshRate());
  designHandle.setAuthor(""String_Node_Str"");
  designHandle.setHelpGuide(""String_Node_Str"");
  designHandle.setCreatedBy(""String_Node_Str"");
  designHandle.setRefreshRate(50);
  assertEquals(""String_Node_Str"",designHandle.getAuthor());
  assertEquals(""String_Node_Str"",designHandle.getHelpGuide());
  assertEquals(""String_Node_Str"",designHandle.getCreatedBy());
  assertEquals(50,designHandle.getRefreshRate());
}","/** 
 * Tests cases for reading and setting properties of report design.
 * @throws Exception if any exception.
 */
public void testReportDesignProperties() throws Exception {
  designHandle.setBase(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getBase());
  assertEquals(""String_Node_Str"",designHandle.getAuthor());
  assertEquals(""String_Node_Str"",designHandle.getHelpGuide());
  assertEquals(""String_Node_Str"",designHandle.getCreatedBy());
  assertEquals(30,designHandle.getRefreshRate());
  designHandle.setAuthor(""String_Node_Str"");
  designHandle.setHelpGuide(""String_Node_Str"");
  designHandle.setCreatedBy(""String_Node_Str"");
  designHandle.setRefreshRate(50);
  assertEquals(""String_Node_Str"",designHandle.getAuthor());
  assertEquals(""String_Node_Str"",designHandle.getHelpGuide());
  assertEquals(""String_Node_Str"",designHandle.getCreatedBy());
  assertEquals(50,designHandle.getRefreshRate());
}",0.9391480730223124
76643,"/** 
 * Tests <code>setFileName</code> function. Cases are <ul> <li>setFileName with HTTP protocol</li> <li>setFileName with HTTP protocol and Chinese character.</li> <li>setFileName with unix file schema.</li> <li>setFileName with windows file schema.</li> </ul>
 * @throws Exception
 */
public void testSetFileName() throws Exception {
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getModule().getSystemId().toString());
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getModule().getSystemId().toString());
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getModule().getSystemId().toString());
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(new File(""String_Node_Str"").getParentFile().toURL().toString(),designHandle.getModule().getSystemId().toString());
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getModule().getSystemId().toString());
}","/** 
 * Tests <code>setFileName</code> function. Cases are <ul> <li>setFileName with HTTP protocol</li> <li>setFileName with HTTP protocol and Chinese character.</li> <li>setFileName with unix file schema.</li> <li>setFileName with windows file schema.</li> </ul>
 * @throws Exception
 */
public void testSetFileName() throws Exception {
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getModule().getSystemId().toString());
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getModule().getSystemId().toString());
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",designHandle.getModule().getSystemId().toString());
  designHandle.setFileName(""String_Node_Str"");
  assertEquals(new File(""String_Node_Str"").getParentFile().toURL().toString(),designHandle.getModule().getSystemId().toString());
}",0.9325153374233128
76644,"/** 
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException
 */
public void test_regression_132938() throws DesignFileException, SemanticException, IOException {
  openDesign(INPUT);
  LabelHandle label=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",label.getText());
  openLibrary(LIBRARY_A);
  LabelHandle label_A=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",label_A.getText());
  openLibrary(LIBRARY_B);
  LabelHandle label_B=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",label_B.getText());
  label_B.setText(""String_Node_Str"");
  libraryHandle.saveAs(getTempFolder() + ""String_Node_Str"" + GOLDEN_FOLDER+ ""String_Node_Str""+ LIBRARY_B);
  System.out.println(getResource(INPUT_FOLDER + ""String_Node_Str"" + LIBRARY_B).toString());
  copyFile(getTempFolder() + ""String_Node_Str"" + GOLDEN_FOLDER+ ""String_Node_Str""+ LIBRARY_B,LIBRARY_B);
  designHandle.reloadLibraries();
  LabelHandle label_1=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",label_1.getText());
  copyFile(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY_B,LIBRARY_B);
  designHandle.reloadLibraries();
}","/** 
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException
 */
public void test_regression_132938() throws DesignFileException, SemanticException, IOException {
  String report=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ INPUT;
  String libB=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY_B;
  sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle(ULocale.ENGLISH);
  designHandle=sessionHandle.openDesign(report);
  designHandle.includeLibrary(LIBRARY_A,""String_Node_Str"");
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  LabelHandle label=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertNotNull(label);
  ElementFactory factory=designHandle.getElementFactory();
  LabelHandle rLabel=(LabelHandle)factory.newElementFrom(label,""String_Node_Str"");
  assertEquals(""String_Node_Str"",rLabel.getText());
  designHandle.saveAs(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ INPUT);
  libraryHandle=sessionHandle.openLibrary(libB);
  LabelHandle label_lib2=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  label_lib2.setText(""String_Node_Str"");
  libraryHandle.saveAs(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY_B);
  designHandle.reloadLibrary(libraryHandle);
  ElementFactory factory1=designHandle.getElementFactory();
  LabelHandle l=(LabelHandle)factory1.newElementFrom(label,""String_Node_Str"");
  assertEquals(""String_Node_Str"",l.getText());
}",0.3621716287215412
76645,"/** 
 * @throws DesignFileException
 * @throws SemanticException
 */
public void test_regression_134018() throws DesignFileException, SemanticException {
  openLibrary(LIBRARY);
  DesignEngine engine=new DesignEngine(new DesignConfig());
  SessionHandle session=engine.newSessionHandle(ULocale.ENGLISH);
  ReportDesignHandle designHandle=session.createDesign();
  LibraryHandle lib=designHandle.getLibrary(""String_Node_Str"");
  MasterPageHandle basePage=lib.findMasterPage(""String_Node_Str"");
  assertNull(basePage);
  ElementFactory factory=designHandle.getElementFactory();
  SimpleMasterPageHandle newPage=(SimpleMasterPageHandle)factory.newElementFrom(basePage,""String_Node_Str"");
  designHandle.getMasterPages().add(newPage);
  LabelHandle baseLabel=(LabelHandle)((SimpleMasterPageHandle)libraryHandle.findMasterPage(""String_Node_Str"")).getPageHeader().get(0);
  assertEquals(""String_Node_Str"",baseLabel.getName());
  assertEquals(""String_Node_Str"",baseLabel.getText());
  baseLabel.setText(""String_Node_Str"");
  designHandle.reloadLibrary(libraryHandle);
  LabelHandle childLabel=(LabelHandle)((SimpleMasterPageHandle)designHandle.findMasterPage(""String_Node_Str"")).getPageHeader().get(0);
  assertNotNull(childLabel);
}","/** 
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException
 */
public void test_regression_134018() throws DesignFileException, SemanticException, IOException {
  String report=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ INPUT;
  String libA=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY;
  sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle(ULocale.ENGLISH);
  designHandle=sessionHandle.openDesign(report);
  designHandle.includeLibrary(LIBRARY,""String_Node_Str"");
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  MasterPageHandle basePage=libraryHandle.findMasterPage(""String_Node_Str"");
  assertNotNull(basePage);
  ElementFactory factory=designHandle.getElementFactory();
  SimpleMasterPageHandle newPage=(SimpleMasterPageHandle)factory.newElementFrom(basePage,""String_Node_Str"");
  assertNotNull(newPage);
  designHandle.getMasterPages().add(newPage);
  designHandle.saveAs(report);
  libraryHandle=sessionHandle.openLibrary(libA);
  LabelHandle baseLabel=(LabelHandle)((SimpleMasterPageHandle)libraryHandle.findMasterPage(""String_Node_Str"")).getPageHeader().get(0);
  assertNotNull(baseLabel);
  assertEquals(""String_Node_Str"",baseLabel.getName());
  assertEquals(""String_Node_Str"",baseLabel.getText());
  baseLabel.setText(""String_Node_Str"");
  libraryHandle.saveAs(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY);
  designHandle.reloadLibrary(libraryHandle);
  LabelHandle baseLabel1=(LabelHandle)((SimpleMasterPageHandle)libraryHandle.findMasterPage(""String_Node_Str"")).getPageHeader().get(0);
  assertNotNull(baseLabel1);
  assertEquals(""String_Node_Str"",baseLabel1.getText());
}",0.5594876980114594
76646,"protected void setUp() throws Exception {
  super.setUp();
  removeResource();
  copyInputToFile(INPUT_FOLDER + ""String_Node_Str"" + LIBRARY);
}","protected void setUp() throws Exception {
  super.setUp();
  removeResource();
  copyInputToFile(INPUT_FOLDER + ""String_Node_Str"" + INPUT);
  copyInputToFile(INPUT_FOLDER + ""String_Node_Str"" + LIBRARY);
}",0.8242074927953891
76647,"void renderVerticalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=axModel.isCategoryAxis() ? (axModel.getScale().isTickBetweenCategories() ? iDirection : -iDirection) * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.length - 1 : da.length;
  final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int y=(int)da[i];
    if (bRendering3D) {
      context.y3d=(int)da3D[i];
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dXMinorTick1=((iMinorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - IConstants.TICK_SIZE) : context.dX;
      double dXMinorTick2=((iMinorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + IConstants.TICK_SIZE : context.dX;
      if (dXMinorTick1 != dXMinorTick2) {
        if (i != da.length - 1) {
          if (bRenderOrthogonal3DAxis) {
          }
 else {
            LineRenderEvent lreMinor=null;
            for (int k=0; k < daMinor.length - 1; k++) {
              if (computation instanceof LinearAxisTypeComputation) {
                if ((iDirection == -1 && y - daMinor[k] <= da[i + 1]) || (iDirection == 1 && y + daMinor[k] >= da[i + 1])) {
                  continue;
                }
              }
              lreMinor=(LineRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
              lreMinor.setLineAttributes(liaMinorTick);
              lreMinor.setStart(LocationImpl.create(dXMinorTick1,y + iDirection * daMinor[k]));
              lreMinor.setEnd(LocationImpl.create(dXMinorTick2,y + iDirection * daMinor[k]));
              ipr.drawLine(lreMinor);
            }
          }
        }
      }
      if (context.dTick1 != context.dTick2) {
        if (bRenderOrthogonal3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(context.dTick1,y);
          lre.getEnd().set(context.dTick2,y);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IntersectionValue.VALUE) {
          lre.setStart(LocationImpl.create(context.dX,y));
          lre.setEnd(LocationImpl.create(context.dX + dSeriesThickness,y - dSeriesThickness));
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      double sx=x;
      double sx2=dXEnd;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.LEFT) {
          sx-=dStaggeredLabelOffset;
          sx2+=dStaggeredLabelOffset;
        }
 else {
          sx+=dStaggeredLabelOffset;
          sx2-=dStaggeredLabelOffset;
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          lo3d.set(sx - pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZEnd + pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.LEFT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          lo3d.set(sx2 + pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZ - pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.RIGHT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          lo.set(sx,y + dOffset);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}","void renderVerticalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.length - 1 : da.length;
  final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int y=(int)da[i];
    if (bRendering3D) {
      context.y3d=(int)da3D[i];
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dXMinorTick1=((iMinorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - IConstants.TICK_SIZE) : context.dX;
      double dXMinorTick2=((iMinorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + IConstants.TICK_SIZE : context.dX;
      if (dXMinorTick1 != dXMinorTick2) {
        if (i != da.length - 1) {
          if (bRenderOrthogonal3DAxis) {
          }
 else {
            LineRenderEvent lreMinor=null;
            for (int k=0; k < daMinor.length - 1; k++) {
              if (computation instanceof LinearAxisTypeComputation) {
                if ((iDirection == -1 && y - daMinor[k] <= da[i + 1]) || (iDirection == 1 && y + daMinor[k] >= da[i + 1])) {
                  continue;
                }
              }
              lreMinor=(LineRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
              lreMinor.setLineAttributes(liaMinorTick);
              lreMinor.setStart(LocationImpl.create(dXMinorTick1,y + iDirection * daMinor[k]));
              lreMinor.setEnd(LocationImpl.create(dXMinorTick2,y + iDirection * daMinor[k]));
              ipr.drawLine(lreMinor);
            }
          }
        }
      }
      if (context.dTick1 != context.dTick2) {
        if (bRenderOrthogonal3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(context.dTick1,y);
          lre.getEnd().set(context.dTick2,y);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IntersectionValue.VALUE) {
          lre.setStart(LocationImpl.create(context.dX,y));
          lre.setEnd(LocationImpl.create(context.dX + dSeriesThickness,y - dSeriesThickness));
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      double sx=x;
      double sx2=dXEnd;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.LEFT) {
          sx-=dStaggeredLabelOffset;
          sx2+=dStaggeredLabelOffset;
        }
 else {
          sx+=dStaggeredLabelOffset;
          sx2-=dStaggeredLabelOffset;
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          lo3d.set(sx - pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZEnd + pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.LEFT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          lo3d.set(sx2 + pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZ - pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.RIGHT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          lo.set(sx,y + dOffset);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}",0.9854976198383704
76648,"void renderHorizontalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=axModel.isCategoryAxis() ? (axModel.getScale().isTickBetweenCategories() ? iDirection : 2 * iDirection) * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.length - 1 : da.length;
  double y=(iLabelLocation == IConstants.ABOVE) ? (bRendering3D ? context.dTick1 + 1 : context.dTick1 - 1) : (bRendering3D ? context.dTick2 - 1 : context.dTick2 + 1);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int x=(int)da[i];
    if (bRendering3D) {
      context.x3d=(int)da3D[i];
      context.z3d=(int)da3D[i];
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dYMinorTick1=((iMinorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + IConstants.TICK_SIZE : context.dY - IConstants.TICK_SIZE) : context.dY;
      double dYMinorTick2=((iMinorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - IConstants.TICK_SIZE : context.dY + IConstants.TICK_SIZE) : context.dY;
      if (dYMinorTick1 != -dYMinorTick2) {
        if (i != da.length - 1) {
          if (bRenderBase3DAxis) {
          }
 else           if (bRenderAncillary3DAxis) {
          }
 else {
            LineRenderEvent lreMinor=null;
            for (int k=0; k < daMinor.length - 1; k++) {
              if (computation instanceof LinearAxisTypeComputation) {
                if ((iDirection == 1 && x + daMinor[k] >= da[i + 1]) || (iDirection == -1 && x - daMinor[k] <= da[i + 1])) {
                  continue;
                }
              }
              lreMinor=(LineRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
              lreMinor.setLineAttributes(liaMinorTick);
              lreMinor.setStart(LocationImpl.create(x + iDirection * daMinor[k],dYMinorTick1));
              lreMinor.setEnd(LocationImpl.create(x + iDirection * daMinor[k],dYMinorTick2));
              ipr.drawLine(lreMinor);
            }
          }
        }
      }
      if (context.dTick1 != context.dTick2) {
        if (bRenderBase3DAxis) {
        }
 else         if (bRenderAncillary3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(x,context.dTick1);
          lre.getEnd().set(x,context.dTick2);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IntersectionValue.VALUE) {
          lre.getStart().set(x,context.dY);
          lre.getEnd().set(x + dSeriesThickness,context.dY - dSeriesThickness);
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      double sy=y;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.ABOVE) {
          sy-=dStaggeredLabelOffset;
        }
 else {
          sy+=dStaggeredLabelOffset;
        }
      }
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          if (axisType == IConstants.BASE_AXIS) {
            lo3d.set(context.x3d + dOffset,sy - pwa.getVerticalSpacingInPixels(),dZEnd + pwa.getVerticalSpacingInPixels());
          }
 else {
            lo3d.set(dXEnd + pwa.getVerticalSpacingInPixels(),sy - pwa.getVerticalSpacingInPixels(),context.z3d + dOffset);
          }
          t3dre.setLocation3D(lo3d);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          lo.set(x + dOffset,sy);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}","void renderHorizontalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.length - 1 : da.length;
  double y=(iLabelLocation == IConstants.ABOVE) ? (bRendering3D ? context.dTick1 + 1 : context.dTick1 - 1) : (bRendering3D ? context.dTick2 - 1 : context.dTick2 + 1);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int x=(int)da[i];
    if (bRendering3D) {
      context.x3d=(int)da3D[i];
      context.z3d=(int)da3D[i];
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dYMinorTick1=((iMinorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + IConstants.TICK_SIZE : context.dY - IConstants.TICK_SIZE) : context.dY;
      double dYMinorTick2=((iMinorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - IConstants.TICK_SIZE : context.dY + IConstants.TICK_SIZE) : context.dY;
      if (dYMinorTick1 != -dYMinorTick2) {
        if (i != da.length - 1) {
          if (bRenderBase3DAxis) {
          }
 else           if (bRenderAncillary3DAxis) {
          }
 else {
            LineRenderEvent lreMinor=null;
            for (int k=0; k < daMinor.length - 1; k++) {
              if (computation instanceof LinearAxisTypeComputation) {
                if ((iDirection == 1 && x + daMinor[k] >= da[i + 1]) || (iDirection == -1 && x - daMinor[k] <= da[i + 1])) {
                  continue;
                }
              }
              lreMinor=(LineRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
              lreMinor.setLineAttributes(liaMinorTick);
              lreMinor.setStart(LocationImpl.create(x + iDirection * daMinor[k],dYMinorTick1));
              lreMinor.setEnd(LocationImpl.create(x + iDirection * daMinor[k],dYMinorTick2));
              ipr.drawLine(lreMinor);
            }
          }
        }
      }
      if (context.dTick1 != context.dTick2) {
        if (bRenderBase3DAxis) {
        }
 else         if (bRenderAncillary3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(x,context.dTick1);
          lre.getEnd().set(x,context.dTick2);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IntersectionValue.VALUE) {
          lre.getStart().set(x,context.dY);
          lre.getEnd().set(x + dSeriesThickness,context.dY - dSeriesThickness);
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      double sy=y;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.ABOVE) {
          sy-=dStaggeredLabelOffset;
        }
 else {
          sy+=dStaggeredLabelOffset;
        }
      }
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          if (axisType == IConstants.BASE_AXIS) {
            lo3d.set(context.x3d + dOffset,sy - pwa.getVerticalSpacingInPixels(),dZEnd + pwa.getVerticalSpacingInPixels());
          }
 else {
            lo3d.set(dXEnd + pwa.getVerticalSpacingInPixels(),sy - pwa.getVerticalSpacingInPixels(),context.z3d + dOffset);
          }
          t3dre.setLocation3D(lo3d);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          lo.set(x + dOffset,sy);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}",0.9852292768959436
76649,"/** 
 * Checks out-of-range of each data point. If outside data is visible, adjust the coordinates; otherwise, clip the plot area. Note that coordinates array may be modified.
 * @param ipr renderer
 * @param srh SeriesRenderingHints
 * @param faX X coordinates
 * @param faY Y coordinates
 * @param bShowAsTape indicates if it's 2d+ chart
 */
protected final void handleOutsideDataPoints(final IPrimitiveRenderer ipr,final SeriesRenderingHints srh,final double[] faX,final double[] faY,final boolean bShowAsTape){
  final AutoScale scale=getAxisInternal().getScale();
  if ((scale.getType() & IConstants.PERCENT) == IConstants.PERCENT) {
    return;
  }
  final boolean bHideOutside=!getAxis().getScale().isShowOutside();
  final DataPointHints[] dpha=srh.getDataPoints();
  final boolean isCategory=srh.isCategoryScale();
  final Bounds boClientArea=srh.getClientAreaBounds(true);
  if (bShowAsTape) {
    final double dSeriesThickness=srh.getSeriesThickness();
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  renderClipping(ipr,boClientArea);
  for (int i=0; i < dpha.length; i++) {
    if (!isCategory && dpha[i].getBaseValue() == null) {
      dpha[i].markOutside();
      continue;
    }
    int iOutside=0;
    if (dpha[i].getStackOrthogonalValue() != null) {
      double value=dpha[i].getStackOrthogonalValue().doubleValue();
      double min=Methods.asDouble(scale.getMinimum()).doubleValue();
      double max=Methods.asDouble(scale.getMaximum()).doubleValue();
      if (value < min) {
        iOutside=1;
      }
 else       if (value > max) {
        iOutside=2;
      }
    }
 else     if (dpha[i].getOrthogonalValue() == null) {
      iOutside=1;
    }
 else     if (dpha[i].getOrthogonalValue() instanceof Double) {
      double value=((Double)dpha[i].getOrthogonalValue()).doubleValue();
      double min=Methods.asDouble(scale.getMinimum()).doubleValue();
      double max=Methods.asDouble(scale.getMaximum()).doubleValue();
      if (value < min) {
        iOutside=1;
      }
 else       if (value > max) {
        iOutside=2;
      }
    }
 else     if (dpha[i].getOrthogonalValue() instanceof CDateTime) {
      CDateTime value=(CDateTime)dpha[i].getOrthogonalValue();
      CDateTime min=Methods.asDateTime(scale.getMinimum());
      CDateTime max=Methods.asDateTime(scale.getMaximum());
      if (value.before(min)) {
        iOutside=1;
      }
 else       if (value.after(max)) {
        iOutside=2;
      }
    }
 else {
      iOutside=checkEntryInRange(dpha[i].getOrthogonalValue(),scale.getMinimum(),scale.getMaximum());
    }
    if (iOutside > 0) {
      if (bHideOutside) {
        dpha[i].markOutside();
      }
 else {
        if (isTransposed()) {
          faX[i]=iOutside == 1 ? boClientArea.getLeft() : boClientArea.getLeft() + boClientArea.getWidth();
        }
 else {
          faY[i]=iOutside == 1 ? boClientArea.getTop() + boClientArea.getHeight() : boClientArea.getTop();
        }
      }
    }
  }
}","/** 
 * Checks out-of-range of each data point. If outside data is visible, adjust the coordinates; otherwise, clip the plot area. Note that coordinates array may be modified.
 * @param ipr renderer
 * @param srh SeriesRenderingHints
 * @param faX X coordinates
 * @param faY Y coordinates
 * @param bShowAsTape indicates if it's 2d+ chart
 */
protected final void handleOutsideDataPoints(final IPrimitiveRenderer ipr,final SeriesRenderingHints srh,final double[] faX,final double[] faY,final boolean bShowAsTape){
  final AutoScale scale=getAxisInternal().getScale();
  if ((scale.getType() & IConstants.PERCENT) == IConstants.PERCENT) {
    return;
  }
  final boolean bHideOutside=!getAxis().getScale().isShowOutside();
  final DataPointHints[] dpha=srh.getDataPoints();
  final boolean isCategory=srh.isCategoryScale();
  final boolean bTransposed=isTransposed();
  final Bounds boClientArea=srh.getClientAreaBounds(true);
  if (bShowAsTape) {
    final double dSeriesThickness=srh.getSeriesThickness();
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  renderClipping(ipr,boClientArea);
  for (int i=0; i < dpha.length; i++) {
    if (!isCategory && dpha[i].getBaseValue() == null) {
      dpha[i].markOutside();
      continue;
    }
    int iOutside=0;
    if (dpha[i].getStackOrthogonalValue() != null) {
      double value=dpha[i].getStackOrthogonalValue().doubleValue();
      double min=Methods.asDouble(scale.getMinimum()).doubleValue();
      double max=Methods.asDouble(scale.getMaximum()).doubleValue();
      if (value < min) {
        iOutside=1;
      }
 else       if (value > max) {
        iOutside=2;
      }
    }
 else     if (dpha[i].getOrthogonalValue() == null) {
      iOutside=1;
    }
 else     if (dpha[i].getOrthogonalValue() instanceof Double) {
      double value=((Double)dpha[i].getOrthogonalValue()).doubleValue();
      double min=Methods.asDouble(scale.getMinimum()).doubleValue();
      double max=Methods.asDouble(scale.getMaximum()).doubleValue();
      if (value < min) {
        iOutside=1;
      }
 else       if (value > max) {
        iOutside=2;
      }
    }
 else     if (dpha[i].getOrthogonalValue() instanceof CDateTime) {
      CDateTime value=(CDateTime)dpha[i].getOrthogonalValue();
      CDateTime min=Methods.asDateTime(scale.getMinimum());
      CDateTime max=Methods.asDateTime(scale.getMaximum());
      if (value.before(min)) {
        iOutside=1;
      }
 else       if (value.after(max)) {
        iOutside=2;
      }
    }
 else {
      iOutside=checkEntryInRange(dpha[i].getOrthogonalValue(),scale.getMinimum(),scale.getMaximum());
    }
    if (iOutside > 0) {
      if (bHideOutside) {
        dpha[i].markOutside();
      }
 else {
        if (bTransposed) {
          if (!Double.isNaN(faX[i])) {
            faX[i]=iOutside == 1 ? boClientArea.getLeft() : boClientArea.getLeft() + boClientArea.getWidth();
          }
        }
 else {
          if (!Double.isNaN(faY[i])) {
            faY[i]=iOutside == 1 ? boClientArea.getTop() + boClientArea.getHeight() : boClientArea.getTop();
          }
        }
      }
    }
  }
}",0.9745191517343416
76650,"/** 
 * Initializes the data view page.
 */
protected void initPage(){
  createContextMenus();
  handleGlobalAction();
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  getTreeViewer().getTree().addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == getTreeViewer().getTree()) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=getTreeViewer().getTree().getItem(pt);
        getTreeViewer().getTree().setToolTipText(getTooltip(item));
      }
    }
  }
);
}","/** 
 * Initializes the data view page.
 */
protected void initPage(){
  createContextMenus();
  handleGlobalAction();
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  getTreeViewer().getTree().addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == getTreeViewer().getTree()) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=getTreeViewer().getTree().getItem(pt);
        getTreeViewer().getTree().setToolTipText(getTooltip(item));
      }
    }
  }
);
  getTreeViewer().getTree().addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
}",0.6019512195121951
76651,"public void widgetDefaultSelected(SelectionEvent e){
  if (getSelection() instanceof StructuredSelection) {
    List list=new ArrayList();
    list.add(((StructuredSelection)getSelection()).getFirstElement());
    ReportRequest r=new ReportRequest();
    r.setType(ReportRequest.OPEN_EDITOR);
    r.setRequestConvert(new IRequestConvert(){
      public List convertSelectionToModelLisr(      List list){
        List lst=new ArrayList();
        for (Iterator itr=list.iterator(); itr.hasNext(); ) {
          Object obj=itr.next();
          lst.add(obj);
        }
        return lst;
      }
    }
);
    r.setSelectionObject(list);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
  }
}","public void widgetDefaultSelected(SelectionEvent e){
  if (getSelection() instanceof StructuredSelection) {
    List list=new ArrayList();
    Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
    list.add(selectedObject);
    ReportRequest r=new ReportRequest();
    r.setType(ReportRequest.OPEN_EDITOR);
    r.setRequestConvert(new IRequestConvert(){
      public List convertSelectionToModelLisr(      List list){
        List lst=new ArrayList();
        for (Iterator itr=list.iterator(); itr.hasNext(); ) {
          Object obj=itr.next();
          lst.add(obj);
        }
        return lst;
      }
    }
);
    r.setSelectionObject(list);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
    try {
      Tree tree=(Tree)e.getSource();
      TreeItem[] selectedItems=tree.getSelection();
      if (selectedItems.length > 0) {
        if (selectedItems[0].getExpanded()) {
          selectedItems[0].setExpanded(false);
        }
 else {
          getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
        }
      }
    }
 catch (    Exception e2) {
    }
  }
}",0.7526766595289079
76652,"/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(reportHandle);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        list.add(((StructuredSelection)getSelection()).getFirstElement());
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConvert(new IRequestConvert(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator().addColleague(getSelectionSynchronizer());
}","/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(reportHandle);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConvert(new IRequestConvert(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator().addColleague(getSelectionSynchronizer());
}",0.923935389133627
76653,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AttributeBuilderTest.class);
  suite.addTestSuite(HTMLWriterTest.class);
  suite.addTestSuite(HTMLReportEmitterTest.class);
  suite.addTestSuite(MetadataEmitterTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AttributeBuilderTest.class);
  suite.addTestSuite(HTMLWriterTest.class);
  suite.addTestSuite(HTMLReportEmitterTest.class);
  suite.addTestSuite(MetadataEmitterTest.class);
  suite.addTestSuite(TableLayoutTest.class);
  suite.addTestSuite(ScriptTest.class);
  return suite;
}",0.8725637181409296
76654,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      boolean skipPageHint=context.getSkipPageHint();
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(true);
      engine.layout(this,header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(skipPageHint);
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      boolean skipPageHint=context.getSkipPageHint();
      context.setAllowPageBreak(false);
      context.setSkipPageHint(true);
      engine.layout(this,header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(skipPageHint);
    }
  }
  isFirstLayout=false;
}",0.9871794871794872
76655,"protected boolean allowPageBreak(){
  IBandContent band=(IBandContent)content;
  int type=band.getBandType();
  if (type == IBandContent.BAND_HEADER) {
    if (IStyle.SOFT_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE))) {
      return true;
    }
    IElement listContent=band.getParent();
    if (listContent instanceof IListContent) {
      return !((IListContent)listContent).isHeaderRepeat();
    }
  }
 else   if (type == IBandContent.BAND_GROUP_HEADER) {
    if (IStyle.SOFT_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE))) {
      return true;
    }
    IElement groupContent=band.getParent();
    if (groupContent instanceof IGroupContent) {
      return !((IGroupContent)groupContent).isHeaderRepeat();
    }
  }
  return true;
}","protected boolean allowPageBreak(){
  IBandContent band=(IBandContent)content;
  int type=band.getBandType();
  if (type == IBandContent.BAND_HEADER) {
    if (IStyle.SOFT_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE))) {
      return true;
    }
    IElement listContent=band.getParent();
    if (listContent instanceof IListContent) {
      return !((IListContent)listContent).isHeaderRepeat();
    }
    if (listContent instanceof ITableContent) {
      return !((ITableContent)listContent).isHeaderRepeat();
    }
  }
 else   if (type == IBandContent.BAND_GROUP_HEADER) {
    if (IStyle.SOFT_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE))) {
      return true;
    }
    IElement groupContent=band.getParent();
    if (groupContent instanceof IGroupContent) {
      return !((IGroupContent)groupContent).isHeaderRepeat();
    }
  }
  return true;
}",0.9327091866588648
76656,"protected void repeatHeader(){
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(false);
        context.setSkipPageHint(true);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}",0.9879310344827588
76657,"/** 
 * @param groupLevel
 * @throws DataException
 * @throws BirtException
 */
protected void goThroughGapRows(int groupLevel) throws DataException, BirtException {
  while (groupLevel != odiResult.getEndingGroupLevel() && this.next()) {
  }
}","/** 
 * @param groupLevel
 * @throws DataException
 * @throws BirtException
 */
protected void goThroughGapRows(int groupLevel) throws DataException, BirtException {
  while (groupLevel < odiResult.getEndingGroupLevel() && odiResult.getEndingGroupLevel() != 0 && odiResult.next()) {
    this.prepareCurrentRow();
  }
}",0.7437722419928826
76658,"/** 
 * @param engine reference to report engine
 * @param appContext a user-defined object that capsulates the context for running a task. The context object is passed to callback functions (i.e., functions in image handlers, action handlers, etc. ) that are written by those who embeds engine in their applications
 */
protected EngineTask(IReportEngine engine,IReportRunnable runnable){
  taskID=id++;
  executionContext=new ExecutionContext(this);
  executionContext.setReportContext(new ReportContextImpl(executionContext));
  setReportEngine(engine);
  setReportRunnable(runnable);
  executionContext.setAppContext(engine.getConfig().getAppContext());
  cancelFlag=false;
  runningStatus=RUNNING_STATUS_START;
}","/** 
 * @param engine reference to report engine
 * @param appContext a user-defined object that capsulates the context for running a task. The context object is passed to callback functions (i.e., functions in image handlers, action handlers, etc. ) that are written by those who embeds engine in their applications
 */
protected EngineTask(IReportEngine engine,IReportRunnable runnable){
  taskID=id++;
  this.engine=engine;
  executionContext=new ExecutionContext(this);
  executionContext.setReportContext(new ReportContextImpl(executionContext));
  setReportRunnable(runnable);
  executionContext.setAppContext(engine.getConfig().getAppContext());
  cancelFlag=false;
  runningStatus=RUNNING_STATUS_START;
}",0.9657102869139258
76659,"private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        currentPos=chunk.getText().length();
        PDFTextLM.this.newLine();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      this.wr=new DefaultWordRecognizer(chunk.getText());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      Dimension d=new Dimension(0,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      IArea builtArea=buildArea(""String_Node_Str"",content,chunk.getFontInfo(),d);
      PDFTextLM.this.addTextLine(builtArea);
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    IHyphenationManager hm=new DefaultHyphenationManager();
    Hyphenation hyph=hm.getHyphenation(str);
    int endHyphenIndex=hyphen(0,freeSpace - prevAreaWidth,hyph,chunk.getFontInfo());
    if (endHyphenIndex == 0) {
      if (nothingSplitted) {
        str=hyph.getHyphenText(0,endHyphenIndex + 1);
        addByForce=true;
        nothingSplitted=false;
      }
 else {
        nothingSplitted=true;
        vestigeIndex=currentPos;
        vestigeLength=(null == currentWord) ? vestigeLength : currentWord.getLength();
        return;
      }
    }
 else {
      str=hyph.getHyphenText(0,endHyphenIndex);
    }
    currentPos+=str.length();
    vestigeIndex=currentPos;
    vestigeLength=(null == currentWord) ? vestigeLength - str.length() : currentWord.getLength() - str.length();
    Dimension d=null;
    if (addByForce) {
      d=new Dimension(freeSpace,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      addByForce=false;
    }
 else {
      d=new Dimension(prevAreaWidth + (int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length(),(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    }
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),vestigeIndex);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}","private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        FontHandler handler=new FontHandler(content);
        handler.selectFont(MaxHighChar);
        ContainerArea con=(ContainerArea)createInlineContainer(content,false,true);
        con.setWidth(0);
        con.setHeight((int)(handler.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        PDFTextLM.this.addSpaceHolder(con);
        currentPos=chunk.getText().length();
        PDFTextLM.this.newLine();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      this.wr=new DefaultWordRecognizer(chunk.getText());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      Dimension d=new Dimension(0,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      IArea builtArea=buildArea(""String_Node_Str"",content,chunk.getFontInfo(),d);
      PDFTextLM.this.addTextLine(builtArea);
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    IHyphenationManager hm=new DefaultHyphenationManager();
    Hyphenation hyph=hm.getHyphenation(str);
    int endHyphenIndex=hyphen(0,freeSpace - prevAreaWidth,hyph,chunk.getFontInfo());
    if (endHyphenIndex == 0) {
      if (nothingSplitted) {
        str=hyph.getHyphenText(0,endHyphenIndex + 1);
        addByForce=true;
        nothingSplitted=false;
      }
 else {
        nothingSplitted=true;
        vestigeIndex=currentPos;
        vestigeLength=(null == currentWord) ? vestigeLength : currentWord.getLength();
        return;
      }
    }
 else {
      str=hyph.getHyphenText(0,endHyphenIndex);
    }
    currentPos+=str.length();
    vestigeIndex=currentPos;
    vestigeLength=(null == currentWord) ? vestigeLength - str.length() : currentWord.getLength() - str.length();
    Dimension d=null;
    if (addByForce) {
      d=new Dimension(freeSpace,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      addByForce=false;
    }
 else {
      d=new Dimension(prevAreaWidth + (int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length(),(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    }
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),vestigeIndex);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}",0.3301109917651271
76660,"private void updateOutLineView(IFormPage activePageInstance){
  if (outlinePage == null) {
    return;
  }
  Object designOutLinePage=activePageInstance.getAdapter(IContentOutlinePage.class);
  outlinePage.setActivePage((IPageBookViewPage)designOutLinePage);
}","private void updateOutLineView(IFormPage activePageInstance){
  if (outlinePage == null) {
    return;
  }
  if (reloadOutlinePage()) {
    return;
  }
  Object designOutLinePage=activePageInstance.getAdapter(IContentOutlinePage.class);
  outlinePage.setActivePage((IPageBookViewPage)designOutLinePage);
}",0.9203539823008848
76661,"public void reloadOutlinePage(){
  if (!getActivePageInstance().getId().equals(XMLSourcePage_ID) || outlinePage == null) {
    return;
  }
  if (outlinePage.getCurrentPage() instanceof DesignerOutlinePage) {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(IContentOutlinePage.class));
  }
 else {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(ContentOutlinePage.class));
  }
  outlinePage.getSite().getActionBars().updateActionBars();
}","public boolean reloadOutlinePage(){
  if (!getActivePageInstance().getId().equals(XMLSourcePage_ID) || outlinePage == null) {
    return false;
  }
  if (outlinePage.getCurrentPage() instanceof DesignerOutlinePage) {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(IContentOutlinePage.class));
  }
 else {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(ContentOutlinePage.class));
  }
  outlinePage.getSite().getActionBars().updateActionBars();
  return true;
}",0.9693486590038314
76662,"/** 
 * @param composite
 */
private void createPluginViewer(Composite composite){
  fPluginTreeViewer=new CheckboxTreeViewer(composite,2048);
  fPluginTreeViewer.setContentProvider(new PluginContentProvider());
  fPluginTreeViewer.setLabelProvider(new PDELabelProvider(){
    public String getText(    Object obj){
      if (obj instanceof IProject) {
        return ((IProject)obj).getName();
      }
      if (obj instanceof IResource) {
        return ((IResource)obj).getName();
      }
      return super.getText(obj);
    }
  }
);
  fPluginTreeViewer.setAutoExpandLevel(2);
  fPluginTreeViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    final CheckStateChangedEvent event){
      Object element=event.getElement();
      if (element instanceof IPluginModelBase) {
        handleCheckStateChanged((IPluginModelBase)element,event.getChecked());
      }
 else {
        handleGroupStateChanged(element,event.getChecked());
      }
      updateLaunchConfigurationDialog();
    }
  }
);
  fPluginTreeViewer.setSorter(new ListUtil.PluginSorter(){
    public int category(    Object obj){
      for (int i=0; i < fWorkspacePlugins.length; i++) {
        if (obj == fWorkspacePlugins[i])         return -1;
      }
      return 0;
    }
  }
);
  fPluginTreeViewer.getTree().setLayoutData(new GridData(1808));
  Image pluginsImage=PDEPlugin.getDefault().getLabelProvider().get(PDEPluginImages.DESC_REQ_PLUGINS_OBJ);
  fWorkspacePlugins=new NamedElement[]{new NamedElement(Messages.getString(""String_Node_Str""),pluginsImage),new NamedElement(Messages.getString(""String_Node_Str""),pluginsImage)};
}","/** 
 * @param composite
 */
private void createPluginViewer(Composite composite){
  fPluginTreeViewer=new CheckboxTreeViewer(composite,2048);
  fPluginTreeViewer.setContentProvider(new PluginContentProvider());
  fPluginTreeViewer.setLabelProvider(new PDELabelProvider(){
    public String getText(    Object obj){
      if (obj instanceof IProject) {
        return ((IProject)obj).getName();
      }
      if (obj instanceof IResource) {
        return ((IResource)obj).getName();
      }
      return super.getText(obj);
    }
  }
);
  fPluginTreeViewer.setAutoExpandLevel(2);
  fPluginTreeViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    final CheckStateChangedEvent event){
      Object element=event.getElement();
      if (element instanceof IPluginModelBase) {
        handleCheckStateChanged((IPluginModelBase)element,event.getChecked());
      }
 else {
        handleGroupStateChanged(element,event.getChecked());
      }
      updateLaunchConfigurationDialog();
    }
  }
);
  fPluginTreeViewer.setComparator(new ListUtil.PluginComparator(){
    public int category(    Object obj){
      for (int i=0; i < fWorkspacePlugins.length; i++) {
        if (obj == fWorkspacePlugins[i])         return -1;
      }
      return 0;
    }
  }
);
  fPluginTreeViewer.getTree().setLayoutData(new GridData(1808));
  Image pluginsImage=PDEPlugin.getDefault().getLabelProvider().get(PDEPluginImages.DESC_REQ_PLUGINS_OBJ);
  fWorkspacePlugins=new NamedElement[]{new NamedElement(Messages.getString(""String_Node_Str""),pluginsImage),new NamedElement(Messages.getString(""String_Node_Str""),pluginsImage)};
}",0.9914738124238732
76663,"public boolean performFinish(){
  return newLibraryFileWizardPage.performFinish();
}","public boolean performFinish(){
  boolean bool=newLibraryFileWizardPage.performFinish();
  if (bool == true) {
    newLibraryFileWizardPage.updatePerspective(getConfigElement());
  }
  return bool;
}",0.5653710247349824
76664,"protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.verticalSpacing=0;
    layout.horizontalSpacing=0;
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    composite.setFont(parent.getFont());
  }
  Label lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmpTaskContainer=new CTabFolder(composite,SWT.TOP | SWT.FLAT);
{
    cmpTaskContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpTaskContainer.setTabHeight(25);
    cmpTaskContainer.addSelectionListener(this);
  }
  lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  FormData layoutData=(FormData)getTitleImageLabel().getParent().getLayoutData();
  layoutData.width=iWizardWidthMinimum;
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.verticalSpacing=0;
    layout.horizontalSpacing=0;
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    composite.setFont(parent.getFont());
  }
  Label lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmpTaskContainer=new CTabFolder(composite,SWT.TOP | SWT.FLAT);
{
    cmpTaskContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpTaskContainer.setTabHeight(25);
    cmpTaskContainer.addSelectionListener(this);
  }
  lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData layoutData=(GridData)getTitleImageLabel().getParent().getLayoutData();
  layoutData.widthHint=iWizardWidthMinimum;
  return composite;
}",0.9905838041431262
76665,"public boolean modify(Object data,String property,Object value) throws NameException, SemanticException {
  if (property.equals(modelAdapter.getColumnNames(columnKeys)[1])) {
    if (!(value.equals(getDisplayName(FilterCondition.OPERATOR_MEMBER,DesignChoiceConstants.FILTER_OPERATOR_BETWEEN)) || value.equals(getDisplayName(FilterCondition.OPERATOR_MEMBER,DesignChoiceConstants.FILTER_OPERATOR_NOT_BETWEEN)))) {
      modelAdapter.setStringValue(input.get(0),data,FilterCondition.VALUE2_MEMBER,""String_Node_Str"");
    }
  }
  int index=Arrays.asList(columnNames).indexOf(property);
  String key=columnKeys[index];
  String strValue=""String_Node_Str"";
  if (value instanceof Integer) {
    int intValue=((Integer)value).intValue();
    if (intValue == -1) {
      CCombo combo=(CCombo)editors[index].getControl();
      strValue=combo.getText();
    }
 else {
      String[] choices=modelAdapter.getChoiceSet(input.get(0),columnKeys[index]);
      strValue=choices[intValue];
    }
  }
 else {
    strValue=(String)value;
  }
  return modelAdapter.setStringValue(input.get(0),data,key,strValue);
}","public boolean modify(Object data,String property,Object value) throws NameException, SemanticException {
  int index=Arrays.asList(columnNames).indexOf(property);
  String key=columnKeys[index];
  String strValue=""String_Node_Str"";
  if (value instanceof Integer) {
    int intValue=((Integer)value).intValue();
    if (intValue == -1) {
      CCombo combo=(CCombo)editors[index].getControl();
      strValue=combo.getText();
    }
 else {
      String[] choices=modelAdapter.getChoiceSet(input.get(0),columnKeys[index]);
      strValue=choices[intValue];
    }
  }
 else {
    strValue=(String)value;
  }
  return modelAdapter.setStringValue(input.get(0),data,key,strValue);
}",0.3652762119503946
76666,"protected void okPressed(){
  try {
    String familyValue=getRawFontFamily();
    String sizeValue=getRawFontSize();
    int colorValue=DEUtil.getRGBInt(color.getRGB());
    int backColorValue=DEUtil.getRGBInt(backColor.getRGB());
    String italicValue=italic.getSelection() ? DesignChoiceConstants.FONT_STYLE_ITALIC : DesignChoiceConstants.FONT_STYLE_NORMAL;
    String weightValue=bold.getSelection() ? DesignChoiceConstants.FONT_WEIGHT_BOLD : DesignChoiceConstants.FONT_WEIGHT_NORMAL;
    String underlineValue=underline.getSelection() ? DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE : DesignChoiceConstants.TEXT_UNDERLINE_NONE;
    String lingthroughValue=linethrough.getSelection() ? DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH : DesignChoiceConstants.TEXT_LINE_THROUGH_NONE;
    if (handle == null) {
      HighlightRule rule=StructureFactory.createHighlightRule();
      rule.setProperty(HighlightRule.OPERATOR_MEMBER,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      rule.setProperty(HighlightRule.VALUE1_MEMBER,DEUtil.resolveNull(value1.getText()));
      rule.setProperty(HighlightRule.VALUE2_MEMBER,DEUtil.resolveNull(value2.getText()));
      rule.setTestExpression(DEUtil.resolveNull(expression.getText()));
      if (!stylesChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        rule.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
      }
 else {
        if (color.getRGB() != null) {
          rule.setProperty(HighlightRule.COLOR_MEMBER,new Integer(colorValue));
        }
        if (backColor.getRGB() != null) {
          rule.setProperty(HighlightRule.BACKGROUND_COLOR_MEMBER,new Integer(backColorValue));
        }
        if (familyValue != null) {
          rule.setProperty(HighlightRule.FONT_FAMILY_MEMBER,familyValue);
        }
        if (sizeValue != null) {
          rule.setProperty(HighlightRule.FONT_SIZE_MEMBER,sizeValue);
        }
        if (isItalicChanged) {
          rule.setProperty(HighlightRule.FONT_STYLE_MEMBER,italicValue);
        }
        if (isBoldChanged) {
          rule.setProperty(HighlightRule.FONT_WEIGHT_MEMBER,weightValue);
        }
        if (isLinethroughChanged) {
          rule.setProperty(HighlightRule.TEXT_LINE_THROUGH_MEMBER,lingthroughValue);
        }
        if (isUnderlineChanged) {
          rule.setProperty(HighlightRule.TEXT_UNDERLINE_MEMBER,underlineValue);
        }
      }
      handle=provider.doAddItem(rule,handleCount);
    }
 else {
      handle.setTestExpression(DEUtil.resolveNull(expression.getText()));
      handle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      handle.setValue1(DEUtil.resolveNull(value1.getText()));
      if (handle.getOperator().equals(DesignChoiceConstants.MAP_OPERATOR_BETWEEN) || handle.getOperator().equals(DesignChoiceConstants.MAP_OPERATOR_NOT_BETWEEN)) {
        handle.setValue2(DEUtil.resolveNull(value2.getText()));
      }
      if (!stylesChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        if (handle.getStyle() == null) {
          handle.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
        }
 else         if (!stylesChooser.getText().equals(handle.getStyle().getName())) {
          handle.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
        }
        removeLocalStyleProperties();
      }
 else {
        handle.setStyle(null);
        handle.getFontFamilyHandle().setStringValue(DEUtil.resolveNull(familyValue));
        handle.getFontSize().setStringValue(DEUtil.resolveNull(sizeValue));
        if (color.getRGB() != null) {
          handle.getColor().setRGB(colorValue);
        }
 else {
          handle.getColor().setValue(null);
        }
        if (backColor.getRGB() != null) {
          handle.getBackgroundColor().setRGB(backColorValue);
        }
 else {
          handle.getBackgroundColor().setValue(null);
        }
        if (isItalicChanged) {
          handle.setFontStyle(italicValue);
        }
        if (isBoldChanged) {
          handle.setFontWeight(weightValue);
        }
        if (isUnderlineChanged) {
          handle.setTextUnderline(underlineValue);
        }
        if (isLinethroughChanged) {
          handle.setTextLineThrough(lingthroughValue);
        }
      }
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}","protected void okPressed(){
  try {
    String familyValue=getRawFontFamily();
    String sizeValue=getRawFontSize();
    int colorValue=DEUtil.getRGBInt(color.getRGB());
    int backColorValue=DEUtil.getRGBInt(backColor.getRGB());
    String italicValue=italic.getSelection() ? DesignChoiceConstants.FONT_STYLE_ITALIC : DesignChoiceConstants.FONT_STYLE_NORMAL;
    String weightValue=bold.getSelection() ? DesignChoiceConstants.FONT_WEIGHT_BOLD : DesignChoiceConstants.FONT_WEIGHT_NORMAL;
    String underlineValue=underline.getSelection() ? DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE : DesignChoiceConstants.TEXT_UNDERLINE_NONE;
    String lingthroughValue=linethrough.getSelection() ? DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH : DesignChoiceConstants.TEXT_LINE_THROUGH_NONE;
    if (handle == null) {
      HighlightRule rule=StructureFactory.createHighlightRule();
      rule.setProperty(HighlightRule.OPERATOR_MEMBER,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (value1.isVisible()) {
        rule.setProperty(HighlightRule.VALUE1_MEMBER,DEUtil.resolveNull(value1.getText()));
      }
      if (value2.isVisible()) {
        rule.setProperty(HighlightRule.VALUE2_MEMBER,DEUtil.resolveNull(value2.getText()));
      }
      rule.setTestExpression(DEUtil.resolveNull(expression.getText()));
      if (!stylesChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        rule.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
      }
 else {
        if (color.getRGB() != null) {
          rule.setProperty(HighlightRule.COLOR_MEMBER,new Integer(colorValue));
        }
        if (backColor.getRGB() != null) {
          rule.setProperty(HighlightRule.BACKGROUND_COLOR_MEMBER,new Integer(backColorValue));
        }
        if (familyValue != null) {
          rule.setProperty(HighlightRule.FONT_FAMILY_MEMBER,familyValue);
        }
        if (sizeValue != null) {
          rule.setProperty(HighlightRule.FONT_SIZE_MEMBER,sizeValue);
        }
        if (isItalicChanged) {
          rule.setProperty(HighlightRule.FONT_STYLE_MEMBER,italicValue);
        }
        if (isBoldChanged) {
          rule.setProperty(HighlightRule.FONT_WEIGHT_MEMBER,weightValue);
        }
        if (isLinethroughChanged) {
          rule.setProperty(HighlightRule.TEXT_LINE_THROUGH_MEMBER,lingthroughValue);
        }
        if (isUnderlineChanged) {
          rule.setProperty(HighlightRule.TEXT_UNDERLINE_MEMBER,underlineValue);
        }
      }
      handle=provider.doAddItem(rule,handleCount);
    }
 else {
      handle.setTestExpression(DEUtil.resolveNull(expression.getText()));
      handle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (value1.isVisible()) {
        handle.setValue1(DEUtil.resolveNull(value1.getText()));
      }
      if (value2.isVisible()) {
        handle.setValue2(DEUtil.resolveNull(value2.getText()));
      }
      if (!stylesChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        if (handle.getStyle() == null) {
          handle.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
        }
 else         if (!stylesChooser.getText().equals(handle.getStyle().getName())) {
          handle.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
        }
        removeLocalStyleProperties();
      }
 else {
        handle.setStyle(null);
        handle.getFontFamilyHandle().setStringValue(DEUtil.resolveNull(familyValue));
        handle.getFontSize().setStringValue(DEUtil.resolveNull(sizeValue));
        if (color.getRGB() != null) {
          handle.getColor().setRGB(colorValue);
        }
 else {
          handle.getColor().setValue(null);
        }
        if (backColor.getRGB() != null) {
          handle.getBackgroundColor().setRGB(backColorValue);
        }
 else {
          handle.getBackgroundColor().setValue(null);
        }
        if (isItalicChanged) {
          handle.setFontStyle(italicValue);
        }
        if (isBoldChanged) {
          handle.setFontWeight(weightValue);
        }
        if (isUnderlineChanged) {
          handle.setTextUnderline(underlineValue);
        }
        if (isLinethroughChanged) {
          handle.setTextLineThrough(lingthroughValue);
        }
      }
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}",0.9641461732934956
76667,"private void fillStyles(Combo stylesChooser){
  stylesChooser.removeAll();
  styles.clear();
  stylesChooser.add(NONE_DISPLAY_TEXT);
  for (Iterator iter=DEUtil.getStyles(); iter.hasNext(); ) {
    StyleHandle styleHandle=(StyleHandle)iter.next();
    String styleName=styleHandle.getName();
    stylesChooser.add(styleName);
    styles.put((Object)styleName,(Object)styleHandle);
  }
  if (handle != null && handle.getStyle() != null) {
    stylesChooser.setText(handle.getStyle().getName());
  }
 else {
    stylesChooser.setText(NONE_DISPLAY_TEXT);
  }
}","private void fillStyles(Combo stylesChooser){
  stylesChooser.removeAll();
  styles.clear();
  stylesChooser.add(NONE_DISPLAY_TEXT);
  for (Iterator iter=DEUtil.getStyles(); iter.hasNext(); ) {
    StyleHandle styleHandle=(StyleHandle)iter.next();
    if (styleHandle.isPredefined()) {
      continue;
    }
    String styleName=styleHandle.getName();
    stylesChooser.add(styleName);
    styles.put((Object)styleName,(Object)styleHandle);
  }
  if (handle != null && handle.getStyle() != null) {
    stylesChooser.setText(handle.getStyle().getName());
  }
 else {
    stylesChooser.setText(NONE_DISPLAY_TEXT);
  }
}",0.948892674616695
76668,"protected void okPressed(){
  try {
    if (handle == null) {
      MapRule rule=StructureFactory.createMapRule();
      rule.setProperty(HighlightRule.OPERATOR_MEMBER,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      rule.setProperty(HighlightRule.VALUE1_MEMBER,DEUtil.resolveNull(value1.getText()));
      rule.setProperty(HighlightRule.VALUE2_MEMBER,DEUtil.resolveNull(value2.getText()));
      rule.setProperty(MapRule.DISPLAY_MEMBER,DEUtil.resolveNull(display.getText()));
      rule.setTestExpression(DEUtil.resolveNull(expression.getText()));
      handle=provider.doAddItem(rule,handleCount);
    }
 else {
      handle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      handle.setValue1(DEUtil.resolveNull(value1.getText()));
      handle.setValue2(DEUtil.resolveNull(value2.getText()));
      handle.setDisplay(DEUtil.resolveNull(display.getText()));
      handle.setTestExpression(DEUtil.resolveNull(expression.getText()));
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}","protected void okPressed(){
  try {
    if (handle == null) {
      MapRule rule=StructureFactory.createMapRule();
      rule.setProperty(HighlightRule.OPERATOR_MEMBER,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (value1.isVisible()) {
        rule.setProperty(HighlightRule.VALUE1_MEMBER,DEUtil.resolveNull(value1.getText()));
      }
      if (value2.isVisible()) {
        rule.setProperty(HighlightRule.VALUE2_MEMBER,DEUtil.resolveNull(value2.getText()));
      }
      rule.setProperty(MapRule.DISPLAY_MEMBER,DEUtil.resolveNull(display.getText()));
      rule.setTestExpression(DEUtil.resolveNull(expression.getText()));
      handle=provider.doAddItem(rule,handleCount);
    }
 else {
      handle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (value1.isVisible()) {
        handle.setValue1(DEUtil.resolveNull(value1.getText()));
      }
      if (value2.isVisible()) {
        handle.setValue2(DEUtil.resolveNull(value2.getText()));
      }
      handle.setDisplay(DEUtil.resolveNull(display.getText()));
      handle.setTestExpression(DEUtil.resolveNull(expression.getText()));
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}",0.9111111111111112
76669,"public boolean reloadOutlinePage(){
  if (!getActivePageInstance().getId().equals(XMLSourcePage_ID) || outlinePage == null) {
    return false;
  }
  if (outlinePage.getCurrentPage() instanceof DesignerOutlinePage) {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(IContentOutlinePage.class));
  }
 else {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(ContentOutlinePage.class));
  }
  outlinePage.getSite().getActionBars().updateActionBars();
  return true;
}","public boolean reloadOutlinePage(){
  if (!getActivePageInstance().getId().equals(XMLSourcePage_ID) || outlinePage == null || !getCurrentPageInstance().getId().equals(XMLSourcePage_ID)) {
    return false;
  }
  if (outlinePage.getCurrentPage() instanceof DesignerOutlinePage || outlinePage.getCurrentPage() == null) {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(IContentOutlinePage.class));
  }
 else {
    outlinePage.setActivePage((IPageBookViewPage)getActivePageInstance().getAdapter(ContentOutlinePage.class));
  }
  if (outlinePage.getSite() != null) {
    outlinePage.getSite().getActionBars().updateActionBars();
  }
  return true;
}",0.8790123456790123
76670,"public void stackChanged(ActivityStackEvent event){
  if (isActive()) {
    reloadEditorInput();
  }
}","public void stackChanged(ActivityStackEvent event){
  if (isActive() && event.getAction() != ActivityStackEvent.ROLL_BACK) {
    reloadEditorInput();
  }
}",0.7937743190661478
76671,"private ActivityStackListener getCommandStackListener(){
  if (commandStackListener == null) {
    commandStackListener=new ActivityStackListener(){
      public void stackChanged(      ActivityStackEvent event){
        if (isActive()) {
          reloadEditorInput();
        }
      }
    }
;
  }
  return commandStackListener;
}","private ActivityStackListener getCommandStackListener(){
  if (commandStackListener == null) {
    commandStackListener=new ActivityStackListener(){
      public void stackChanged(      ActivityStackEvent event){
        if (isActive() && event.getAction() != ActivityStackEvent.ROLL_BACK) {
          reloadEditorInput();
        }
      }
    }
;
  }
  return commandStackListener;
}",0.9260808926080892
76672,"/** 
 * Test the rerpot design initialize method. After the initialize method is called, there should be one master page created for the report. The properties values given by the argument should be set to the report deisgn element. All thos operation should not go into command stack.
 * @throws SemanticException
 * @throws IOException
 */
public void testInitializeReportDesign() throws SemanticException, IOException {
  SessionHandle sessionHandle=new SessionHandle((ULocale)null);
  designHandle=sessionHandle.createDesign();
  Map properties=new HashMap();
  String createdBy=""String_Node_Str"";
  properties.put(ReportDesign.CREATED_BY_PROP,createdBy);
  designHandle.initializeModule(properties);
  assertEquals(0,designHandle.getMasterPages().getCount());
  assertEquals(createdBy,designHandle.getCreatedBy());
  CommandStack stack=designHandle.getCommandStack();
  assertFalse(stack.canRedo());
  assertFalse(stack.canUndo());
}","/** 
 * Test the rerpot design initialize method. After the initialize method is called, there should be one master page created for the report. The properties values given by the argument should be set to the report deisgn element. All thos operation should not go into command stack.
 * @throws SemanticException
 * @throws IOException
 */
public void testInitializeReportDesign() throws SemanticException, IOException {
  SessionHandle sessionHandle=new SessionHandle((ULocale)null);
  designHandle=sessionHandle.createDesign();
  Map properties=new HashMap();
  String createdBy=""String_Node_Str"";
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(ReportDesign.CREATED_BY_PROP,createdBy);
  designHandle.initializeModule(properties);
  assertEquals(0,designHandle.getMasterPages().getCount());
  assertNull(designHandle.getProperty(""String_Node_Str""));
  assertEquals(createdBy,designHandle.getProperty(ReportDesign.CREATED_BY_PROP));
  CommandStack stack=designHandle.getCommandStack();
  assertFalse(stack.canRedo());
  assertFalse(stack.canUndo());
}",0.9221616261774912
76673,"/** 
 * Initializes the report design when it is just created. <p> Set the value to the properties on repot design element which need the initialize valuel. All initialize operations will not go into the command stack and can not be undo redo.
 * @param properties the property name value pairs.Those properties in the map are which need to be initialized.
 * @throws SemanticException SemamticException will throw out when the give properties map contians invlid property name or property value.
 */
public void initializeModule(Map properties) throws SemanticException {
  if (isInitialized)   return;
  String name=null;
  Object value=null;
  Module root=(Module)getElement();
  Set propNames=properties.keySet();
  Iterator itre=propNames.iterator();
  while (itre.hasNext()) {
    name=(String)itre.next();
    value=PropertyValueValidationUtil.validateProperty(this,name,properties.get(name));
    root.setProperty(name,value);
  }
  isInitialized=true;
}","/** 
 * Initializes the report design when it is just created. <p> Set the value to the properties on repot design element which need the initialize valuel. All initialize operations will not go into the command stack and can not be undo redo.
 * @param properties the property name value pairs.Those properties in the map are which need to be initialized.
 * @throws SemanticException SemamticException will throw out when the give properties map contians invlid property name or property value.
 */
public void initializeModule(Map properties) throws SemanticException {
  if (isInitialized)   return;
  String name=null;
  Object value=null;
  Module root=(Module)getElement();
  Set propNames=properties.keySet();
  Iterator itre=propNames.iterator();
  while (itre.hasNext()) {
    name=(String)itre.next();
    try {
      value=PropertyValueValidationUtil.validateProperty(this,name,properties.get(name));
      root.setProperty(name,value);
    }
 catch (    SemanticException e) {
    }
  }
  isInitialized=true;
}",0.9692695214105792
76674,"public void widgetSelected(SelectionEvent e){
  if (((Button)e.widget).getSelection()) {
    SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation information=new BorderInfomation();
      information.setPosition(toggleProviders[i].getPosition());
      information.setColor(builder.getRGB());
      information.setStyle((String)styleCombo.getSelectedItem());
      information.setWidth((String)widthCombo.getSelectedItem());
      toggles[i].setSelection(true);
      previewCanvas.setBorderInfomation(information);
      try {
        toggleProviders[i].save(information);
      }
 catch (      Exception e1) {
        ExceptionHandler.handle(e1);
      }
    }
    restoreInfo=(BorderInfomation)toggleProviders[toggleProviders.length - 1].load();
    SessionHandleAdapter.getInstance().getCommandStack().commit();
  }
 else {
    boolean reset=true;
    RGB oldColor=null;
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
      oldColor=info.getColor();
      if (oldColor == null) {
        oldColor=autoColor;
      }
      if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldColor.equals(builder.getRGB())) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
        reset=false;
        break;
      }
    }
    if (reset) {
      SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
      for (int i=0; i < toggleProviders.length; i++) {
        previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
        toggles[i].setSelection(false);
        try {
          toggleProviders[i].reset();
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
      SessionHandleAdapter.getInstance().getCommandStack().commit();
    }
 else {
      SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
      for (int i=0; i < toggleProviders.length; i++) {
        BorderInfomation information=new BorderInfomation();
        information.setPosition(toggleProviders[i].getPosition());
        information.setColor(builder.getRGB());
        information.setStyle((String)styleCombo.getSelectedItem());
        information.setWidth((String)widthCombo.getSelectedItem());
        previewCanvas.setBorderInfomation(information);
        restoreInfo=information;
        try {
          toggleProviders[i].save(information);
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
      ((Button)e.widget).setSelection(true);
      SessionHandleAdapter.getInstance().getCommandStack().commit();
    }
  }
  previewCanvas.redraw();
}","public void widgetSelected(SelectionEvent e){
  RGB selectedColor=null;
  RGB oldColor=null;
  if (((Button)e.widget).getSelection()) {
    SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
    selectedColor=builder.getRGB();
    if (selectedColor == null) {
      selectedColor=autoColor;
    }
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation information=new BorderInfomation();
      information.setPosition(toggleProviders[i].getPosition());
      information.setColor(selectedColor);
      information.setStyle((String)styleCombo.getSelectedItem());
      information.setWidth((String)widthCombo.getSelectedItem());
      toggles[i].setSelection(true);
      previewCanvas.setBorderInfomation(information);
      restoreInfo=information;
      try {
        toggleProviders[i].save(information);
      }
 catch (      Exception e1) {
        ExceptionHandler.handle(e1);
      }
    }
    SessionHandleAdapter.getInstance().getCommandStack().commit();
  }
 else {
    boolean reset=true;
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
      oldColor=info.getColor();
      selectedColor=builder.getRGB();
      if (oldColor == null) {
        oldColor=autoColor;
      }
      if (selectedColor == null) {
        selectedColor=autoColor;
      }
      if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldColor.equals(selectedColor)) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
        reset=false;
        break;
      }
    }
    if (reset) {
      SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
      for (int i=0; i < toggleProviders.length; i++) {
        previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
        toggles[i].setSelection(false);
        try {
          toggleProviders[i].reset();
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
      SessionHandleAdapter.getInstance().getCommandStack().commit();
    }
 else {
      SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
      for (int i=0; i < toggleProviders.length; i++) {
        BorderInfomation information=new BorderInfomation();
        information.setPosition(toggleProviders[i].getPosition());
        if (builder.getRGB() == null) {
          information.setColor(autoColor);
        }
 else {
          information.setColor(builder.getRGB());
        }
        information.setStyle((String)styleCombo.getSelectedItem());
        information.setWidth((String)widthCombo.getSelectedItem());
        previewCanvas.setBorderInfomation(information);
        restoreInfo=information;
        try {
          toggleProviders[i].save(information);
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
      ((Button)e.widget).setSelection(true);
      SessionHandleAdapter.getInstance().getCommandStack().commit();
    }
  }
  previewCanvas.redraw();
}",0.2988087359364659
76675,"public Control createControl(Composite parent){
  content=new Composite(parent,SWT.NONE);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin(2,false);
  layout.marginHeight=1;
  layout.marginWidth=1;
  layout.horizontalSpacing=10;
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite choices=new Composite(content,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  choices.setLayoutData(data);
  layout=WidgetUtil.createGridLayout(2);
  layout.marginHeight=1;
  layout.marginWidth=2;
  choices.setLayout(layout);
  Label styleLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  styleLabel.setText(styleProvider.getDisplayName());
  styleLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    styleCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)styleProvider);
  }
 else {
    styleCombo=new StyleCombo(choices,style,(IComboProvider)styleProvider);
  }
  data=new GridData();
  data.widthHint=200;
  styleCombo.setLayoutData(data);
  styleCombo.setItems(((IComboProvider)styleProvider).getItems());
  Label colorLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  colorLabel.setText(colorProvider.getDisplayName());
  colorLabel.setLayoutData(new GridData());
  builder=new ColorBuilder(choices,SWT.NONE,isFormStyle);
  builder.setChoiceSet(colorProvider.getElementChoiceSet());
  colorProvider.setIndex(IColorConstants.BLACK);
  data=new GridData();
  data.widthHint=200;
  data.heightHint=builder.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  builder.setLayoutData(data);
  Label widthLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  widthLabel.setText(widthProvider.getDisplayName());
  widthLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    widthCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)widthProvider);
  }
 else {
    widthCombo=new StyleCombo(choices,style,(IComboProvider)widthProvider);
  }
  widthProvider.setIndex(widthProvider.getItems()[1].toString());
  data=new GridData();
  data.widthHint=200;
  widthCombo.setLayoutData(data);
  widthCombo.setItems(((IComboProvider)widthProvider).getItems());
  Composite composite=new Composite(choices,SWT.NONE);
  layout=new GridLayout();
  layout.horizontalSpacing=7;
  layout.numColumns=toggleProviders.length + 1;
  composite.setLayout(layout);
  data=new GridData();
  data.horizontalSpan=2;
  composite.setLayoutData(data);
  toggles=new Button[toggleProviders.length];
  for (int i=0; i < toggleProviders.length; i++) {
    Button button=new Button(composite,SWT.TOGGLE);
    toggles[i]=button;
    button.setLayoutData(new GridData());
    button.setToolTipText(toggleProviders[i].getTooltipText());
    button.setImage(ReportPlatformUIImages.getImage(toggleProviders[i].getImageName()));
    final BorderToggleDescriptorProvider provider=toggleProviders[i];
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (((Button)e.widget).getSelection()) {
          SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
          BorderInfomation information=new BorderInfomation();
          information.setPosition(provider.getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          previewCanvas.setBorderInfomation(information);
          restoreInfo=information;
          try {
            provider.save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
          checkToggleButtons();
          SessionHandleAdapter.getInstance().getCommandStack().commit();
        }
 else {
          BorderInfomation oldInfo=(BorderInfomation)provider.load();
          RGB oldColor=oldInfo.getColor();
          if (oldColor == null) {
            oldColor=autoColor;
          }
          if (!(oldInfo.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldColor.equals(builder.getRGB())) || !(oldInfo.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
            BorderInfomation information=new BorderInfomation();
            information.setPosition(provider.getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              provider.save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
            ((Button)e.widget).setSelection(true);
            SessionHandleAdapter.getInstance().getCommandStack().commit();
          }
 else {
            SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
            previewCanvas.removeBorderInfomation(provider.getPosition());
            if (allButton.getSelection())             allButton.setSelection(false);
            try {
              provider.reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
            SessionHandleAdapter.getInstance().getCommandStack().commit();
          }
        }
        previewCanvas.redraw();
      }
    }
);
  }
  allButton=new Button(composite,SWT.TOGGLE);
  allButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME));
  allButton.setToolTipText(Messages.getString(""String_Node_Str""));
  allButton.setLayoutData(new GridData());
  allButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (((Button)e.widget).getSelection()) {
        SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(toggleProviders[i].getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          toggles[i].setSelection(true);
          previewCanvas.setBorderInfomation(information);
          try {
            toggleProviders[i].save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
        }
        restoreInfo=(BorderInfomation)toggleProviders[toggleProviders.length - 1].load();
        SessionHandleAdapter.getInstance().getCommandStack().commit();
      }
 else {
        boolean reset=true;
        RGB oldColor=null;
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
          oldColor=info.getColor();
          if (oldColor == null) {
            oldColor=autoColor;
          }
          if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldColor.equals(builder.getRGB())) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            reset=false;
            break;
          }
        }
        if (reset) {
          SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
          for (int i=0; i < toggleProviders.length; i++) {
            previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
            toggles[i].setSelection(false);
            try {
              toggleProviders[i].reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
          SessionHandleAdapter.getInstance().getCommandStack().commit();
        }
 else {
          SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
          for (int i=0; i < toggleProviders.length; i++) {
            BorderInfomation information=new BorderInfomation();
            information.setPosition(toggleProviders[i].getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              toggleProviders[i].save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
          ((Button)e.widget).setSelection(true);
          SessionHandleAdapter.getInstance().getCommandStack().commit();
        }
      }
      previewCanvas.redraw();
    }
  }
);
  Composite previewContainer=new Composite(content,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  previewContainer.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=1;
  layout.marginWidth=10;
  previewContainer.setLayout(layout);
  Label previewLabel=FormWidgetFactory.getInstance().createLabel(previewContainer,SWT.LEFT,isFormStyle);
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  previewLabel.setLayoutData(data);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  previewCanvas=new BorderCanvas(previewContainer,SWT.NONE);
  data=new GridData();
  data.widthHint=130;
  data.heightHint=130;
  previewCanvas.setLayoutData(data);
  return content;
}","public Control createControl(Composite parent){
  content=new Composite(parent,SWT.NONE);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin(2,false);
  layout.marginHeight=1;
  layout.marginWidth=1;
  layout.horizontalSpacing=10;
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite choices=new Composite(content,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  choices.setLayoutData(data);
  layout=WidgetUtil.createGridLayout(2);
  layout.marginHeight=1;
  layout.marginWidth=2;
  choices.setLayout(layout);
  Label styleLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  styleLabel.setText(styleProvider.getDisplayName());
  styleLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    styleCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)styleProvider);
  }
 else {
    styleCombo=new StyleCombo(choices,style,(IComboProvider)styleProvider);
  }
  data=new GridData();
  data.widthHint=200;
  styleCombo.setLayoutData(data);
  styleCombo.setItems(((IComboProvider)styleProvider).getItems());
  Label colorLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  colorLabel.setText(colorProvider.getDisplayName());
  colorLabel.setLayoutData(new GridData());
  builder=new ColorBuilder(choices,SWT.NONE,isFormStyle);
  builder.setChoiceSet(colorProvider.getElementChoiceSet());
  colorProvider.setIndex(IColorConstants.BLACK);
  data=new GridData();
  data.widthHint=200;
  data.heightHint=builder.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  builder.setLayoutData(data);
  Label widthLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  widthLabel.setText(widthProvider.getDisplayName());
  widthLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    widthCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)widthProvider);
  }
 else {
    widthCombo=new StyleCombo(choices,style,(IComboProvider)widthProvider);
  }
  widthProvider.setIndex(widthProvider.getItems()[1].toString());
  data=new GridData();
  data.widthHint=200;
  widthCombo.setLayoutData(data);
  widthCombo.setItems(((IComboProvider)widthProvider).getItems());
  Composite composite=new Composite(choices,SWT.NONE);
  layout=new GridLayout();
  layout.horizontalSpacing=7;
  layout.numColumns=toggleProviders.length + 1;
  composite.setLayout(layout);
  data=new GridData();
  data.horizontalSpan=2;
  composite.setLayoutData(data);
  toggles=new Button[toggleProviders.length];
  for (int i=0; i < toggleProviders.length; i++) {
    Button button=new Button(composite,SWT.TOGGLE);
    toggles[i]=button;
    button.setLayoutData(new GridData());
    button.setToolTipText(toggleProviders[i].getTooltipText());
    button.setImage(ReportPlatformUIImages.getImage(toggleProviders[i].getImageName()));
    final BorderToggleDescriptorProvider provider=toggleProviders[i];
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (((Button)e.widget).getSelection()) {
          SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
          BorderInfomation information=new BorderInfomation();
          information.setPosition(provider.getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          previewCanvas.setBorderInfomation(information);
          restoreInfo=information;
          try {
            provider.save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
          checkToggleButtons();
          SessionHandleAdapter.getInstance().getCommandStack().commit();
        }
 else {
          BorderInfomation oldInfo=(BorderInfomation)provider.load();
          RGB oldColor=oldInfo.getColor();
          RGB selectedColor=builder.getRGB();
          if (oldColor == null) {
            oldColor=autoColor;
          }
          if (selectedColor == null) {
            selectedColor=autoColor;
          }
          if (!(oldInfo.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldColor.equals(selectedColor)) || !(oldInfo.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
            BorderInfomation information=new BorderInfomation();
            information.setPosition(provider.getPosition());
            information.setColor(selectedColor);
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              provider.save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
            ((Button)e.widget).setSelection(true);
            SessionHandleAdapter.getInstance().getCommandStack().commit();
          }
 else {
            SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
            previewCanvas.removeBorderInfomation(provider.getPosition());
            if (allButton.getSelection())             allButton.setSelection(false);
            try {
              provider.reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
            SessionHandleAdapter.getInstance().getCommandStack().commit();
          }
        }
        previewCanvas.redraw();
      }
    }
);
  }
  allButton=new Button(composite,SWT.TOGGLE);
  allButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME));
  allButton.setToolTipText(Messages.getString(""String_Node_Str""));
  allButton.setLayoutData(new GridData());
  allButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      RGB selectedColor=null;
      RGB oldColor=null;
      if (((Button)e.widget).getSelection()) {
        SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
        selectedColor=builder.getRGB();
        if (selectedColor == null) {
          selectedColor=autoColor;
        }
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(toggleProviders[i].getPosition());
          information.setColor(selectedColor);
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          toggles[i].setSelection(true);
          previewCanvas.setBorderInfomation(information);
          restoreInfo=information;
          try {
            toggleProviders[i].save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
        }
        SessionHandleAdapter.getInstance().getCommandStack().commit();
      }
 else {
        boolean reset=true;
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
          oldColor=info.getColor();
          selectedColor=builder.getRGB();
          if (oldColor == null) {
            oldColor=autoColor;
          }
          if (selectedColor == null) {
            selectedColor=autoColor;
          }
          if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldColor.equals(selectedColor)) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            reset=false;
            break;
          }
        }
        if (reset) {
          SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
          for (int i=0; i < toggleProviders.length; i++) {
            previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
            toggles[i].setSelection(false);
            try {
              toggleProviders[i].reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
          SessionHandleAdapter.getInstance().getCommandStack().commit();
        }
 else {
          SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
          for (int i=0; i < toggleProviders.length; i++) {
            BorderInfomation information=new BorderInfomation();
            information.setPosition(toggleProviders[i].getPosition());
            if (builder.getRGB() == null) {
              information.setColor(autoColor);
            }
 else {
              information.setColor(builder.getRGB());
            }
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              toggleProviders[i].save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
          ((Button)e.widget).setSelection(true);
          SessionHandleAdapter.getInstance().getCommandStack().commit();
        }
      }
      previewCanvas.redraw();
    }
  }
);
  Composite previewContainer=new Composite(content,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  previewContainer.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=1;
  layout.marginWidth=10;
  previewContainer.setLayout(layout);
  Label previewLabel=FormWidgetFactory.getInstance().createLabel(previewContainer,SWT.LEFT,isFormStyle);
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  previewLabel.setLayoutData(data);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  previewCanvas=new BorderCanvas(previewContainer,SWT.NONE);
  data=new GridData();
  data.widthHint=130;
  data.heightHint=130;
  previewCanvas.setLayoutData(data);
  return content;
}",0.7284859189480914
76676,"/** 
 * @param absPos the vertical position relative to its containing box
 * @param containerBaseAbsPos the absolute position of the container's top
 * @param containerSize container height
 * @param ImageSize the height of template which image lies in
 * @return a triple(the vertical position of template's left-bottom origin,template height, and image's vertical translation relative to the template )
 */
private tplValueTriple computeTplVerticalValTriple(float absPos,float containerBaseAbsPos,float containerSize,float ImageSize){
  float tplOrigin=0.0f, tplSize=0.0f, translation=0.0f;
  if (absPos <= 0) {
    if (ImageSize + absPos > 0 && ImageSize + absPos <= containerSize) {
      tplOrigin=containerBaseAbsPos - ImageSize - absPos;
      tplSize=ImageSize + absPos;
    }
 else     if (ImageSize + absPos > containerSize) {
      tplOrigin=containerBaseAbsPos - containerSize;
      tplSize=containerSize;
      translation=containerSize - ImageSize;
    }
 else {
    }
  }
 else   if (absPos >= containerSize) {
  }
 else {
    if (ImageSize + absPos <= containerSize) {
      tplOrigin=containerBaseAbsPos - ImageSize - absPos;
      tplSize=ImageSize;
      translation=0.0f;
    }
 else {
      tplOrigin=containerBaseAbsPos - containerSize;
      tplSize=containerSize - absPos;
      translation=containerSize - absPos - ImageSize;
    }
  }
  return new tplValueTriple(tplOrigin,tplSize,translation);
}","/** 
 * @param absPos the vertical position relative to its containing box
 * @param containerBaseAbsPos the absolute position of the container's top
 * @param containerSize container height
 * @param ImageSize the height of template which image lies in
 * @return a triple(the vertical position of template's left-bottom origin,template height, and image's vertical translation relative to the template )
 */
private tplValueTriple computeTplVerticalValTriple(float absPos,float containerBaseAbsPos,float containerSize,float ImageSize){
  float tplOrigin=0.0f, tplSize=0.0f, translation=0.0f;
  if (absPos <= 0) {
    if (ImageSize + absPos > 0 && ImageSize + absPos <= containerSize) {
      tplOrigin=containerBaseAbsPos - ImageSize - absPos;
      tplSize=ImageSize + absPos;
    }
 else     if (ImageSize + absPos > containerSize) {
      tplOrigin=containerBaseAbsPos - containerSize;
      tplSize=containerSize;
      translation=containerSize - ImageSize - absPos;
    }
 else {
    }
  }
 else   if (absPos >= containerSize) {
  }
 else {
    if (ImageSize + absPos <= containerSize) {
      tplOrigin=containerBaseAbsPos - ImageSize - absPos;
      tplSize=ImageSize;
      translation=0.0f;
    }
 else {
      tplOrigin=containerBaseAbsPos - containerSize;
      tplSize=containerSize - absPos;
      translation=containerSize - absPos - ImageSize;
    }
  }
  return new tplValueTriple(tplOrigin,tplSize,translation);
}",0.9968498424921246
76677,"/** 
 * Render the report in html/pdf format by calling engine service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletOutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
      BirtExtractDataActionHandler extractDataHandler=new BirtExtractDataActionHandler(context,op,upResponse);
      extractDataHandler.execute();
    }
 else     if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else     if (ParameterAccessor.isGetReportlet(request)) {
      BirtGetReportletActionHandler getReportletHandler=new BirtGetReportletActionHandler(context,op,upResponse);
      getReportletHandler.execute();
    }
 else     if (context.getBean().documentInUrl) {
      BirtRenderReportActionHandler runReportHandler=new BirtRenderReportActionHandler(context,op,upResponse,out);
      runReportHandler.execute();
    }
 else {
      BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse);
      runAndRenderHandler.execute();
    }
  }
 catch (  RemoteException e) {
    AxisFault fault=(AxisFault)e;
    response.setContentType(""String_Node_Str"");
    String message=""String_Node_Str"" + BirtResources.getMessage(""String_Node_Str"") + ""String_Node_Str""+ ParameterAccessor.htmlEncode(fault.getFaultString())+ ""String_Node_Str"";
    out.write(message.getBytes());
    out.flush();
    out.close();
  }
}","/** 
 * Render the report in html/pdf format by calling engine service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletOutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
      BirtExtractDataActionHandler extractDataHandler=new BirtExtractDataActionHandler(context,op,upResponse);
      extractDataHandler.execute();
    }
 else     if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else     if (ParameterAccessor.isGetReportlet(request)) {
      BirtGetReportletActionHandler getReportletHandler=new BirtGetReportletActionHandler(context,op,upResponse);
      getReportletHandler.execute();
    }
 else     if (context.getBean().documentInUrl) {
      BirtRenderReportActionHandler runReportHandler=new BirtRenderReportActionHandler(context,op,upResponse,out);
      runReportHandler.execute();
    }
 else {
      BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse);
      runAndRenderHandler.execute();
    }
  }
 catch (  RemoteException e) {
    if (!ParameterAccessor.isGetImageOperator(request)) {
      AxisFault fault=(AxisFault)e;
      response.setContentType(""String_Node_Str"");
      String message=""String_Node_Str"" + BirtResources.getMessage(""String_Node_Str"") + ""String_Node_Str""+ ParameterAccessor.htmlEncode(fault.getFaultString())+ ""String_Node_Str"";
      out.write(message.getBytes());
      out.flush();
      out.close();
    }
  }
}",0.980875691997987
76678,"private void populateLists(Series series){
  String[] componentsDisplayName=LiteralHelper.dataPointComponentTypeSet.getDisplayNames();
  try {
    IDataPointDefinition dpd=PluginSettings.instance().getDataPointDefinition(getSeriesForProcessing().getClass());
    if (dpd != null) {
      String[] dpType=dpd.getDataPointTypes();
      String[] dpTypeDisplay=new String[dpType.length];
      for (int i=0; i < dpType.length; i++) {
        dpTypeDisplay[i]=dpd.getDisplayText(dpType[i]);
        mapDataPointNames.put(dpType[i],dpTypeDisplay[i]);
        mapDataPointNames.put(dpTypeDisplay[i],dpType[i]);
      }
      componentsDisplayName=concatenateArrays(dpTypeDisplay,componentsDisplayName);
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  cmbComponentTypes.setItems(componentsDisplayName);
  cmbComponentTypes.select(0);
  this.lstComponents.setItems(getDataPointComponents(series.getDataPoint()));
  String str=series.getDataPoint().getPrefix();
  this.txtPrefix.setText((str == null) ? ""String_Node_Str"" : str);
  str=series.getDataPoint().getSuffix();
  this.txtSuffix.setText((str == null) ? ""String_Node_Str"" : str);
  str=series.getDataPoint().getSeparator();
  this.txtSeparator.setText((str == null) ? ""String_Node_Str"" : str);
  int positionScope=(getSeriesForProcessing() instanceof PieSeries || getSeriesForProcessing() instanceof BarSeries) ? LabelAttributesComposite.ALLOW_INOUT_POSITION : (LabelAttributesComposite.ALLOW_HORIZONTAL_POSITION | LabelAttributesComposite.ALLOW_VERTICAL_POSITION);
  Position lpCurrent=getSeriesForProcessing().getLabelPosition();
  if (positionScope == LabelAttributesComposite.ALLOW_ALL_POSITION) {
    cmbPosition.setItems(LiteralHelper.fullPositionSet.getDisplayNames());
    if (lpCurrent != null) {
      if (context.getModel() instanceof ChartWithAxes) {
        cmbPosition.select(LiteralHelper.fullPositionSet.getSafeNameIndex(ChartUIUtil.getFlippedPosition(lpCurrent,isFlippedAxes()).getName()));
      }
 else {
        cmbPosition.select(LiteralHelper.fullPositionSet.getSafeNameIndex(lpCurrent.getName()));
      }
    }
  }
 else {
    if ((positionScope & LabelAttributesComposite.ALLOW_VERTICAL_POSITION) != 0) {
      if (context.getModel() instanceof ChartWithAxes && isFlippedAxes()) {
        String[] ns=LiteralHelper.horizontalPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
 else {
        String[] ns=LiteralHelper.verticalPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
    }
    if ((positionScope & LabelAttributesComposite.ALLOW_HORIZONTAL_POSITION) != 0) {
      if (context.getModel() instanceof ChartWithAxes && isFlippedAxes()) {
        String[] ns=LiteralHelper.verticalPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
 else {
        String[] ns=LiteralHelper.horizontalPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
    }
    if ((positionScope & LabelAttributesComposite.ALLOW_INOUT_POSITION) != 0) {
      if ((getSeriesForProcessing() instanceof BarSeries) && (getContext().getModel().getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL)) {
        cmbPosition.add(LiteralHelper.inoutPositionSet.getDisplayNameByName(Position.OUTSIDE_LITERAL.getName()));
      }
 else {
        String[] ns=LiteralHelper.inoutPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
    }
    if (lpCurrent != null) {
      String positionName=null;
      if (context.getModel() instanceof ChartWithAxes) {
        positionName=ChartUIUtil.getFlippedPosition(lpCurrent,isFlippedAxes()).getName();
      }
 else {
        positionName=lpCurrent.getName();
      }
      for (int i=0; i < cmbPosition.getItemCount(); i++) {
        if (positionName.equals(LiteralHelper.fullPositionSet.getNameByDisplayName(cmbPosition.getItem(i)))) {
          cmbPosition.select(i);
        }
      }
      if (cmbPosition.getSelectionIndex() < 0) {
        cmbPosition.select(0);
        cmbPosition.notifyListeners(SWT.Selection,new Event());
      }
    }
  }
}","private void populateLists(Series series){
  String[] componentsDisplayName=LiteralHelper.dataPointComponentTypeSet.getDisplayNames();
  try {
    IDataPointDefinition dpd=PluginSettings.instance().getDataPointDefinition(getSeriesForProcessing().getClass());
    if (dpd != null) {
      String[] dpType=dpd.getDataPointTypes();
      String[] dpTypeDisplay=new String[dpType.length];
      for (int i=0; i < dpType.length; i++) {
        dpTypeDisplay[i]=dpd.getDisplayText(dpType[i]);
        mapDataPointNames.put(dpType[i],dpTypeDisplay[i]);
        mapDataPointNames.put(dpTypeDisplay[i],dpType[i]);
      }
      componentsDisplayName=concatenateArrays(dpTypeDisplay,componentsDisplayName);
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  cmbComponentTypes.setItems(componentsDisplayName);
  cmbComponentTypes.select(0);
  this.lstComponents.setItems(getDataPointComponents(series.getDataPoint()));
  String str=series.getDataPoint().getPrefix();
  this.txtPrefix.setText((str == null) ? ""String_Node_Str"" : str);
  str=series.getDataPoint().getSuffix();
  this.txtSuffix.setText((str == null) ? ""String_Node_Str"" : str);
  str=series.getDataPoint().getSeparator();
  this.txtSeparator.setText((str == null) ? ""String_Node_Str"" : str);
  int positionScope=LabelAttributesComposite.ALLOW_HORIZONTAL_POSITION | LabelAttributesComposite.ALLOW_VERTICAL_POSITION;
  if (getSeriesForProcessing() instanceof PieSeries || getSeriesForProcessing() instanceof BarSeries) {
    positionScope=LabelAttributesComposite.ALLOW_INOUT_POSITION;
  }
 else   if (getSeriesForProcessing() instanceof GanttSeriesImpl) {
    positionScope|=LabelAttributesComposite.ALLOW_INOUT_POSITION;
  }
  Position lpCurrent=getSeriesForProcessing().getLabelPosition();
  if (positionScope == LabelAttributesComposite.ALLOW_ALL_POSITION) {
    cmbPosition.setItems(LiteralHelper.fullPositionSet.getDisplayNames());
    if (lpCurrent != null) {
      if (context.getModel() instanceof ChartWithAxes) {
        cmbPosition.select(LiteralHelper.fullPositionSet.getSafeNameIndex(ChartUIUtil.getFlippedPosition(lpCurrent,isFlippedAxes()).getName()));
      }
 else {
        cmbPosition.select(LiteralHelper.fullPositionSet.getSafeNameIndex(lpCurrent.getName()));
      }
    }
  }
 else {
    if ((positionScope & LabelAttributesComposite.ALLOW_VERTICAL_POSITION) != 0) {
      if (context.getModel() instanceof ChartWithAxes && isFlippedAxes()) {
        String[] ns=LiteralHelper.horizontalPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
 else {
        String[] ns=LiteralHelper.verticalPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
    }
    if ((positionScope & LabelAttributesComposite.ALLOW_HORIZONTAL_POSITION) != 0) {
      if (context.getModel() instanceof ChartWithAxes && isFlippedAxes()) {
        String[] ns=LiteralHelper.verticalPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
 else {
        String[] ns=LiteralHelper.horizontalPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
    }
    if ((positionScope & LabelAttributesComposite.ALLOW_INOUT_POSITION) != 0) {
      if ((getSeriesForProcessing() instanceof BarSeries) && (getContext().getModel().getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL)) {
        cmbPosition.add(LiteralHelper.inoutPositionSet.getDisplayNameByName(Position.OUTSIDE_LITERAL.getName()));
      }
 else       if (getSeriesForProcessing() instanceof GanttSeriesImpl) {
        cmbPosition.add(LiteralHelper.inoutPositionSet.getDisplayNameByName(Position.INSIDE_LITERAL.getName()));
      }
 else {
        String[] ns=LiteralHelper.inoutPositionSet.getDisplayNames();
        for (int i=0; i < ns.length; i++) {
          cmbPosition.add(ns[i]);
        }
      }
    }
    if (lpCurrent != null) {
      String positionName=null;
      if (context.getModel() instanceof ChartWithAxes) {
        positionName=ChartUIUtil.getFlippedPosition(lpCurrent,isFlippedAxes()).getName();
      }
 else {
        positionName=lpCurrent.getName();
      }
      for (int i=0; i < cmbPosition.getItemCount(); i++) {
        if (positionName.equals(LiteralHelper.fullPositionSet.getNameByDisplayName(cmbPosition.getItem(i)))) {
          cmbPosition.select(i);
        }
      }
      if (cmbPosition.getSelectionIndex() < 0) {
        cmbPosition.select(0);
        cmbPosition.notifyListeners(SWT.Selection,new Event());
      }
    }
  }
}",0.9278054173576562
76679,"/** 
 * update row height
 * @param row
 */
public void updateRow(RowArea row,int specifiedHeight){
  ArrayList dropCells=this.dropList;
  CellWrapper[] cells=currentRowContent;
  Iterator iter=row.getChildren();
  int height=specifiedHeight;
  boolean[] hasCell=new boolean[columnNumber];
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colID=cell.getColumnID();
    if (currentRowContent[colID] != null && currentRowContent[colID].rowSpan == 1) {
      height=Math.max(height,cell.getHeight());
    }
    for (int i=colID; i < cell.getColumnID() + cell.getColSpan(); i++) {
      hasCell[i]=true;
    }
    if (cells[colID] != null && (cells[colID].rowSpan != 1)) {
      dropCells.add(new DropCellInfo(cell,cells[colID].rowSpan));
    }
  }
  Iterator iterator=dropCells.iterator();
  while (iterator.hasNext()) {
    DropCellInfo dropCell=(DropCellInfo)iterator.next();
    for (int i=dropCell.cell.getColumnID(); i < dropCell.cell.getColumnID() + dropCell.cell.getColSpan(); i++) {
      hasCell[i]=true;
    }
  }
  if (height > 0) {
    for (int i=0; i < dropCells.size(); i++) {
      DropCellInfo dropCell=(DropCellInfo)dropCells.get(i);
      dropCell.leftHeight-=height;
      if (dropCell.leftHeight <= 0) {
        dropCell.cell.setHeight(dropCell.cell.getHeight() - dropCell.leftHeight);
        dropCell.leftHeight=0;
      }
    }
    for (int i=0; i < columnNumber; i++) {
      if (!hasCell[i]) {
        ICellContent cellContent=null;
        if (cells[i] != null) {
          cellContent=cells[i].cell;
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(currentRow.row);
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        row.addChild(emptyCell);
        emptyCell.setHeight(height);
        for (int j=startColumn; j < endColumn; j++) {
          hasCell[j]=true;
        }
        if (cells[i] != null) {
          if (cells[i].rowSpan != 1) {
            dropList.add(new DropCellInfo(emptyCell,0,cells[i].rowSpan));
          }
        }
      }
    }
    iter=row.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      int colID=cell.getColumnID();
      if (currentRowContent[colID] != null && currentRowContent[colID].rowSpan == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    row.setHeight(height);
  }
}","/** 
 * update row height
 * @param row
 */
public void updateRow(RowArea row,int specifiedHeight){
  ArrayList dropCells=this.dropList;
  CellWrapper[] cells=currentRowContent;
  Iterator iter=row.getChildren();
  int height=specifiedHeight;
  boolean[] hasCell=new boolean[columnNumber];
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colID=cell.getColumnID();
    if (currentRowContent[colID] != null && currentRowContent[colID].rowSpan == 1) {
      height=Math.max(height,cell.getHeight());
    }
    for (int i=colID; i < cell.getColumnID() + cell.getColSpan(); i++) {
      hasCell[i]=true;
    }
    if (cells[colID] != null && (cells[colID].rowSpan != 1)) {
      dropCells.add(new DropCellInfo(cell,cells[colID].rowSpan));
    }
  }
  Iterator iterator=dropCells.iterator();
  while (iterator.hasNext()) {
    DropCellInfo dropCell=(DropCellInfo)iterator.next();
    for (int i=dropCell.cell.getColumnID(); i < dropCell.cell.getColumnID() + dropCell.cell.getColSpan(); i++) {
      hasCell[i]=true;
    }
  }
  if (height > 0) {
    for (int i=0; i < dropCells.size(); i++) {
      DropCellInfo dropCell=(DropCellInfo)dropCells.get(i);
      dropCell.leftHeight-=height;
      if (dropCell.leftHeight <= 0) {
        dropCell.cell.setHeight(dropCell.cell.getHeight() - dropCell.leftHeight);
        dropCell.leftHeight=0;
      }
    }
    for (int i=0; i < columnNumber; i++) {
      if (!hasCell[i]) {
        ICellContent cellContent=null;
        if (cells[i] != null) {
          cellContent=cells[i].cell;
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(currentRow.row);
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        row.addChild(emptyCell);
        emptyCell.setHeight(height);
        for (int j=startColumn; j < endColumn; j++) {
          hasCell[j]=true;
        }
        if (cells[i] != null) {
          if (cells[i].rowSpan != 1) {
            dropList.add(new DropCellInfo(emptyCell,0,cells[i].rowSpan));
          }
        }
      }
    }
    iter=row.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      int colID=cell.getColumnID();
      if (currentRowContent[colID] != null && currentRowContent[colID].rowSpan == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    row.setHeight(height);
  }
}",0.987378640776699
76680,"protected boolean initDialog(){
  try {
    engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  dataSetChooser.setItems(ChoiceSetFactory.getDataSets());
  dataSetChooser.select(0);
  currentDataSetName=dataSetChooser.getText();
  selectedList.removeAll();
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    selectedList.add((String)iter.next());
  }
  refreshColumns();
  return true;
}","protected boolean initDialog(){
  try {
    engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  dataSetChooser.setItems(ChoiceSetFactory.getDataSets());
  dataSetChooser.select(0);
  currentDataSetName=dataSetChooser.getText();
  selectedList.removeAll();
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    String value=(String)iter.next();
    if (value != null) {
      selectedList.add(value);
    }
  }
  refreshColumns();
  return true;
}",0.9138959931798808
76681,"private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableAreaComposite=new Composite(valueArea,SWT.NONE);
  tableAreaComposite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableAreaComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableArea tableArea=new TableArea(tableAreaComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER,tableAreaModifier);
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=tableArea.getTable();
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  String[] columns;
  int[] columnWidth;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=tableArea.getTableViewer();
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  tableArea.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableAreaComposite,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      boolean defaultValueRemoved=true;
      String type=getSelectedDataType();
      List choices=new ArrayList();
      for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
        SelectionChoice choice=(SelectionChoice)iter.next();
        choices.add(choice.getValue());
      }
      ImportValueDialog dialog=new ImportValueDialog(type,choices);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        choiceList.clear();
        for (int i=0; i < importValues.length; i++) {
          SelectionChoice choice=StructureFactory.createSelectionChoice();
          choice.setValue(importValues[i]);
          choiceList.add(choice);
          if (defaultValue != null && defaultValue.equals(importValues[i])) {
            defaultValueRemoved=false;
          }
        }
        refreshValueTable();
        if (defaultValue != null && defaultValueRemoved) {
          changeDefaultValue(null);
        }
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        changeDefaultValue(null);
      }
 else {
        changeDefaultValue(choice.getValue());
      }
      refreshValueTable();
      changeDefault.getParent().layout();
    }
  }
);
  createPromptLine(tableAreaComposite);
  updateTableButtons();
}","private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableAreaComposite=new Composite(valueArea,SWT.NONE);
  tableAreaComposite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableAreaComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableArea tableArea=new TableArea(tableAreaComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER,tableAreaModifier);
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=tableArea.getTable();
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  String[] columns;
  int[] columnWidth;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=tableArea.getTableViewer();
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  tableArea.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableAreaComposite,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      boolean defaultValueRemoved=true;
      String type=getSelectedDataType();
      List choices=new ArrayList();
      Map labelMap=new HashMap();
      for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
        SelectionChoice choice=(SelectionChoice)iter.next();
        choices.add(choice.getValue());
        if (choice.getLabel() != null) {
          labelMap.put(choice.getValue(),choice.getLabel());
        }
      }
      ImportValueDialog dialog=new ImportValueDialog(type,choices);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        choiceList.clear();
        for (int i=0; i < importValues.length; i++) {
          SelectionChoice choice=StructureFactory.createSelectionChoice();
          choice.setValue(importValues[i]);
          if (labelMap.get(importValues[i]) != null) {
            choice.setLabel((String)labelMap.get(importValues[i]));
          }
          choiceList.add(choice);
          if (defaultValue != null && defaultValue.equals(importValues[i])) {
            defaultValueRemoved=false;
          }
        }
        refreshValueTable();
        if (defaultValue != null && defaultValueRemoved) {
          changeDefaultValue(null);
        }
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        changeDefaultValue(null);
      }
 else {
        changeDefaultValue(choice.getValue());
      }
      refreshValueTable();
      changeDefault.getParent().layout();
    }
  }
);
  createPromptLine(tableAreaComposite);
  updateTableButtons();
}",0.9609342416238008
76682,"/** 
 * Open a design/library file.
 * @param fileName The file name
 * @param input The input stream
 * @throws DesignFileException
 */
public ModuleHandle init(String fileName,InputStream input) throws DesignFileException {
  ModuleHandle handle=null;
  handle=getSessionHandle().openModule(fileName,input);
  postInit(handle,null);
  setReportDesignHandle(handle);
  return handle;
}","/** 
 * Open a design/library file.
 * @param fileName The file name
 * @param input The input stream
 * @throws DesignFileException
 */
public ModuleHandle init(String fileName,InputStream input) throws DesignFileException {
  return init(fileName,input,null);
}",0.7611710323574731
76683,"/** 
 * @param handle The moudle handle
 * @param properties The properties
 */
private void postInit(ModuleHandle handle,Map properties){
  if (properties != null && !properties.isEmpty()) {
    String createInfo=model.getCreatedBy();
    if (createInfo == null || createInfo.length() == 0) {
      try {
        handle.initializeModule(properties);
      }
 catch (      SemanticException e) {
      }
    }
  }
  SimpleMasterPageHandle masterPage=null;
  if (handle.getMasterPages().getCount() == 0) {
    masterPage=handle.getElementFactory().newSimpleMasterPage(null);
    try {
      handle.getMasterPages().add(masterPage);
    }
 catch (    ContentException e) {
      new DesignFileException(handle.getFileName(),e);
    }
catch (    NameException e) {
      new DesignFileException(handle.getFileName(),e);
    }
  }
}","/** 
 * @param handle The moudle handle
 * @param properties The properties
 */
private void postInit(ModuleHandle handle,Map properties){
  if (properties != null && !properties.isEmpty()) {
    String createInfo=handle.getCreatedBy();
    if (createInfo == null || createInfo.length() == 0) {
      try {
        handle.initializeModule(properties);
      }
 catch (      SemanticException e) {
      }
    }
  }
  SimpleMasterPageHandle masterPage=null;
  if (handle.getMasterPages().getCount() == 0) {
    masterPage=handle.getElementFactory().newSimpleMasterPage(null);
    try {
      handle.getMasterPages().add(masterPage);
    }
 catch (    ContentException e) {
      new DesignFileException(handle.getFileName(),e);
    }
catch (    NameException e) {
      new DesignFileException(handle.getFileName(),e);
    }
  }
}",0.9933614966807484
76684,"public ModuleHandle getReportModuleHandle(Object element,boolean reset){
  if ((model == null && element instanceof IPathEditorInput) || reset) {
    IPath path=((IPathEditorInput)element).getPath();
    if (path != null) {
      String fileName=path.toOSString();
      try {
        InputStream stream=new FileInputStream(path.toFile());
        Map properties=new HashMap();
        properties.put(IModuleModel.CREATED_BY_PROP,MessageFormat.format(VERSION_MESSAGE,new String[]{ReportPlugin.getVersion(),ReportPlugin.getBuildInfo()}));
        model=SessionHandleAdapter.getInstance().init(fileName,stream,properties);
      }
 catch (      DesignFileException e) {
      }
catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
  return model;
}","public ModuleHandle getReportModuleHandle(Object element,boolean reset){
  if ((model == null || reset) && element instanceof IPathEditorInput) {
    IPath path=((IPathEditorInput)element).getPath();
    if (path != null) {
      String fileName=path.toOSString();
      try {
        InputStream stream=new FileInputStream(path.toFile());
        Map properties=new HashMap();
        properties.put(IModuleModel.CREATED_BY_PROP,MessageFormat.format(VERSION_MESSAGE,new String[]{ReportPlugin.getVersion(),ReportPlugin.getBuildInfo()}));
        String projectFolder=getProjectFolder((IPathEditorInput)element);
        if (projectFolder != null) {
          properties.put(IModuleOption.RESOURCE_FOLDER_KEY,projectFolder);
        }
        model=SessionHandleAdapter.getInstance().init(fileName,stream,properties);
      }
 catch (      DesignFileException e) {
      }
catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
  return model;
}",0.876993166287016
76685,"public String getFontFamily(Object object){
  HighlightRuleHandle hrHandle=(HighlightRuleHandle)object;
  String rfm=hrHandle.getFontFamilyHandle().getStringValue();
  if (rfm == null || rfm.length() == 0) {
    if (getDesignElementHandle() != null) {
      rfm=getDesignElementHandle().getPrivateStyle().getFontFamilyHandle().getStringValue();
    }
 else {
      rfm=DesignChoiceConstants.FONT_FAMILY_SERIF;
    }
  }
  return HighlightHandleProvider.getFontFamily(rfm);
}","public String getFontFamily(Object object){
  HighlightRuleHandle hrHandle=(HighlightRuleHandle)object;
  String rfm=DEUtil.RemoveQuote(hrHandle.getFontFamilyHandle().getStringValue());
  if (rfm == null || rfm.length() == 0) {
    if (getDesignElementHandle() != null) {
      rfm=getDesignElementHandle().getPrivateStyle().getFontFamilyHandle().getStringValue();
    }
 else {
      rfm=DesignChoiceConstants.FONT_FAMILY_SERIF;
    }
  }
  return HighlightHandleProvider.getFontFamily(rfm);
}",0.9793388429752066
76686,"protected void updatePreview(Object handle){
  if (handle != null) {
    String familyValue=provider.getFontFamily(handle);
    int sizeValue=provider.getFontSize(handle);
    previewLabel.setFontFamily(familyValue);
    previewLabel.setFontSize(sizeValue);
    previewLabel.setBold(provider.isBold(handle));
    previewLabel.setItalic(provider.isItalic(handle));
    previewLabel.setForeground(provider.getColor(handle));
    previewLabel.setBackground(provider.getBackgroundColor(handle));
    previewLabel.setUnderline(provider.isUnderline(handle));
    previewLabel.setLinethrough(provider.isLinethrough(handle));
    previewLabel.updateView();
    if (provider.getBackgroundColor(handle) == null && isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
 else {
    previewLabel.restoreDefaultState();
    previewLabel.setForeground(ColorManager.getColor(-1));
    previewLabel.setBackground(ColorManager.getColor(-1));
    previewLabel.updateView();
    if (isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
}","protected void updatePreview(Object handle){
  if (handle != null) {
    String familyValue=provider.getFontFamily(handle);
    int sizeValue=provider.getFontSize(handle);
    previewLabel.setFontFamily(familyValue);
    previewLabel.setFontSize(sizeValue);
    previewLabel.setBold(provider.isBold(handle));
    previewLabel.setItalic(provider.isItalic(handle));
    previewLabel.setForeground(provider.getColor(handle));
    previewLabel.setBackground(provider.getBackgroundColor(handle));
    previewLabel.setUnderline(provider.isUnderline(handle));
    previewLabel.setLinethrough(provider.isLinethrough(handle));
    previewLabel.setOverline(provider.isOverline(handle));
    previewLabel.updateView();
    if (provider.getBackgroundColor(handle) == null && isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
 else {
    previewLabel.restoreDefaultState();
    previewLabel.setForeground(ColorManager.getColor(-1));
    previewLabel.setBackground(ColorManager.getColor(-1));
    previewLabel.updateView();
    if (isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
}",0.9763527054108216
76687,"/** 
 * Create Dialog Content
 * @see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)
 */
protected Control createDialogArea(Composite parent){
  getShell().setText(BirtWTPMessages.BIRTConfigurationDialog_title);
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setFont(parent.getFont());
  initializeDialogUnits(parent);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Group paths=new Group(composite,SWT.NULL);
  paths.setLayout(new GridLayout());
  paths.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  paths.setText(BirtWTPMessages.BIRTConfiguration_group_paths);
  paths.setEnabled(true);
  UIUtil uit=new UIUtil(properties);
  this.txtResourceFolder=uit.createResourceFolderGroup(paths);
  this.txtDocumentFolder=uit.createDocumentFolderGroup(paths);
  this.txtImageFolder=uit.createImageFolderGroup(paths);
  this.txtScriptlibFolder=uit.createScriptLibFolderGroup(paths);
  this.txtLogFolder=uit.createLogFolderGroup(paths);
  Group others=new Group(composite,SWT.NULL);
  others.setLayout(new GridLayout());
  others.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  others.setText(BirtWTPMessages.BIRTConfiguration_group_others);
  others.setEnabled(true);
  this.btAccessOnly=uit.createAccessOnlyGroup(others);
  this.btOverwrite=uit.createOverwriteGroup(others);
  this.cbLogLevel=uit.createLogLevelGroup(others);
  this.txtMaxRows=uit.createMaxRowsGroup(others);
  this.btClear=uit.createImportClearSetting(composite);
  this.isClear=this.btClear.getSelection();
  initializeProperties();
  return composite;
}","/** 
 * Create Dialog Content
 * @see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)
 */
protected Control createDialogArea(Composite parent){
  getShell().setText(BirtWTPMessages.BIRTConfigurationDialog_title);
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setFont(parent.getFont());
  initializeDialogUnits(parent);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Group paths=new Group(composite,SWT.NULL);
  paths.setLayout(new GridLayout());
  paths.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  paths.setText(BirtWTPMessages.BIRTConfiguration_group_paths);
  paths.setEnabled(true);
  UIUtil uit=new UIUtil(properties);
  this.txtResourceFolder=uit.createResourceFolderGroup(paths);
  ContextParamBean param=(ContextParamBean)properties.get(BIRT_RESOURCE_FOLDER_SETTING);
  String resFolder=null;
  if (param != null) {
    resFolder=param.getValue();
  }
  if (resFolder != null && resFolder.trim().length() > 0) {
    this.txtResourceFolder.setText(resFolder.trim());
  }
  this.txtDocumentFolder=uit.createDocumentFolderGroup(paths);
  this.txtImageFolder=uit.createImageFolderGroup(paths);
  this.txtScriptlibFolder=uit.createScriptLibFolderGroup(paths);
  this.txtLogFolder=uit.createLogFolderGroup(paths);
  Group others=new Group(composite,SWT.NULL);
  others.setLayout(new GridLayout());
  others.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  others.setText(BirtWTPMessages.BIRTConfiguration_group_others);
  others.setEnabled(true);
  this.btAccessOnly=uit.createAccessOnlyGroup(others);
  this.btOverwrite=uit.createOverwriteGroup(others);
  this.cbLogLevel=uit.createLogLevelGroup(others);
  this.txtMaxRows=uit.createMaxRowsGroup(others);
  this.btClear=uit.createImportClearSetting(composite);
  this.isClear=this.btClear.getSelection();
  initializeProperties();
  return composite;
}",0.9188737106216894
76688,"public void startup(PlatformConfig config) throws BirtException {
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  platformConfig=config;
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(PluginId,""String_Node_Str"" + root,root);
  }
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  try {
    osgiFramework=new File(path).toURL();
  }
 catch (  MalformedURLException ex) {
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{osgiFramework},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    setupOSGiProperties();
    Method initPropertiesMethod=clazz.getMethod(""String_Node_Str"",new Class[]{Map.class});
    if (initPropertiesMethod != null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      initPropertiesMethod.invoke(null,new Object[]{properties});
    }
 else {
      Iterator iter=properties.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String key=(String)entry.getKey();
        String value=(String)entry.getValue();
        System.setProperty(key,value);
      }
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{null,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}","public void startup(PlatformConfig config) throws BirtException {
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  platformConfig=config;
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(PluginId,""String_Node_Str"" + root,root);
  }
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  try {
    osgiFramework=new File(path).toURL();
  }
 catch (  MalformedURLException ex) {
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{osgiFramework},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    setupOSGiProperties();
    Method initPropertiesMethod=clazz.getMethod(""String_Node_Str"",new Class[]{Map.class});
    if (initPropertiesMethod != null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      initPropertiesMethod.invoke(null,new Object[]{properties});
    }
 else {
      Iterator iter=properties.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String key=(String)entry.getKey();
        String value=(String)entry.getValue();
        System.setProperty(key,value);
      }
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{new String[]{},null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}",0.9967558799675588
76689,"/** 
 * Then entry to validate tag
 * @throws Exception
 */
public abstract void __validate() throws Exception ;","/** 
 * Then entry to validate tag
 * @throws Exception
 */
public abstract boolean __validate() throws Exception ;",0.960352422907489
76690,"/** 
 * When reach the end tag, fire this operation
 * @see javax.servlet.jsp.tagext.TagSupport#doEndTag()
 */
public int doEndTag() throws JspException {
  try {
    __validate();
    __beforeEndTag();
    __process();
  }
 catch (  Exception e) {
    __handleException(e);
  }
  return EVAL_PAGE;
}","/** 
 * When reach the end tag, fire this operation
 * @see javax.servlet.jsp.tagext.TagSupport#doEndTag()
 */
public int doEndTag() throws JspException {
  try {
    if (__validate()) {
      __beforeEndTag();
      __process();
    }
  }
 catch (  Exception e) {
    __handleException(e);
  }
  return EVAL_PAGE;
}",0.8896103896103896
76691,"/** 
 * Handle event before doEndTag
 */
protected void __beforeEndTag(){
  super.__beforeEndTag();
  viewer.setParameters(parameters);
  pageContext.setAttribute(viewer.getId(),viewer.getId());
}","/** 
 * Handle event before doEndTag
 */
protected void __beforeEndTag(){
  super.__beforeEndTag();
  viewer.setParameters(parameters);
  pageContext.setAttribute(viewer.getId(),viewer.getId());
  if (viewer.isHostPage())   pageContext.setAttribute(ATTR_HOSTPAGE,""String_Node_Str"");
}",0.8166666666666667
76692,"/** 
 * validate the tag
 * @see org.eclipse.birt.report.taglib.AbstractBaseTag#__validate()
 */
public void __validate() throws Exception {
  this.locale=BirtTagUtil.getLocale((HttpServletRequest)pageContext.getRequest(),viewer.getLocale());
  BirtResources.setLocale(this.locale);
  if (viewer.getId() == null || viewer.getId().length() <= 0) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_VIEWER_ID));
  }
  if (!__validateViewerId()) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_INVALID_VIEWER_ID));
  }
  if (pageContext.findAttribute(viewer.getId()) != null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_VIEWER_ID_DUPLICATE));
  }
  if (viewer.getReportDesign() == null && viewer.getReportDocument() == null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REPORT_SOURCE));
  }
  if (viewer.getReportletId() != null && viewer.getReportDocument() == null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REPORT_DOCUMENT));
  }
}","/** 
 * validate the tag
 * @see org.eclipse.birt.report.taglib.AbstractBaseTag#__validate()
 */
public boolean __validate() throws Exception {
  String hasHostPage=(String)pageContext.getAttribute(ATTR_HOSTPAGE);
  if (hasHostPage != null && ""String_Node_Str"".equalsIgnoreCase(hasHostPage)) {
    return false;
  }
  this.locale=BirtTagUtil.getLocale((HttpServletRequest)pageContext.getRequest(),viewer.getLocale());
  BirtResources.setLocale(this.locale);
  if (viewer.getId() == null || viewer.getId().length() <= 0) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_VIEWER_ID));
  }
  if (!__validateViewerId()) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_INVALID_VIEWER_ID));
  }
  if (pageContext.findAttribute(viewer.getId()) != null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_VIEWER_ID_DUPLICATE));
  }
  if (viewer.getReportDesign() == null && viewer.getReportDocument() == null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REPORT_SOURCE));
  }
  if (viewer.getReportletId() != null && viewer.getReportDocument() == null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REPORT_DOCUMENT));
  }
  return true;
}",0.8978583196046128
76693,"/** 
 * process tag function
 * @see org.eclipse.birt.report.taglib.AbstractBaseTag#__process()
 */
public void __process() throws Exception {
  outputFormat=BirtTagUtil.getFormat(viewer.getFormat());
  if (!outputFormat.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_HTML) || BirtTagUtil.convertToBoolean(viewer.getForceParameterPrompting()) || viewer.isForceIFrame()|| isContextChanged(viewer.getContextRoot())) {
    __handleIFrame(viewer.createURI(IBirtConstants.VIEWER_PREVIEW),viewer.getId());
    return;
  }
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,(HttpServletRequest)pageContext.getRequest());
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,Boolean.valueOf(viewer.getAllowMasterPage()));
  options.setOption(InputOptions.OPT_SVG_FLAG,Boolean.valueOf(viewer.getSvg()));
  options.setOption(InputOptions.OPT_FORMAT,outputFormat);
  options.setOption(InputOptions.OPT_IS_DESIGNER,new Boolean(false));
  options.setOption(InputOptions.OPT_SERVLET_PATH,IBirtConstants.SERVLET_PATH_PREVIEW);
  BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),this.options);
  reportDesignHandle=getDesignHandle();
  Collection parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (BirtUtility.validateParameters(parameterDefList,getParameterMap())) {
    __handleIFrame(viewer.createURI(IBirtConstants.VIEWER_PREVIEW),viewer.getId());
  }
 else {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    __handleOutputReport(out);
    String content=out.toString();
    JspWriter writer=pageContext.getOut();
    if (viewer.isHostPage()) {
      writer.write(content);
    }
 else {
      writer.write(__handleStyle(content));
      writer.write(__handleScript(content));
      writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str""+ __handleDivAppearance()+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + __handleBodyStyle(content) + ""String_Node_Str"");
      writer.write(__handleBody(content) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
  }
}","/** 
 * process tag function
 * @see org.eclipse.birt.report.taglib.AbstractBaseTag#__process()
 */
public void __process() throws Exception {
  outputFormat=BirtTagUtil.getFormat(viewer.getFormat());
  if (!outputFormat.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_HTML) || BirtTagUtil.convertToBoolean(viewer.getForceParameterPrompting()) || viewer.isForceIFrame()|| isContextChanged(viewer.getContextRoot())) {
    __processWithIFrame();
    return;
  }
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,(HttpServletRequest)pageContext.getRequest());
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,Boolean.valueOf(viewer.getAllowMasterPage()));
  options.setOption(InputOptions.OPT_SVG_FLAG,Boolean.valueOf(viewer.getSvg()));
  options.setOption(InputOptions.OPT_FORMAT,outputFormat);
  options.setOption(InputOptions.OPT_IS_DESIGNER,new Boolean(false));
  options.setOption(InputOptions.OPT_SERVLET_PATH,IBirtConstants.SERVLET_PATH_PREVIEW);
  BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),this.options);
  reportDesignHandle=getDesignHandle();
  Collection parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (BirtUtility.validateParameters(parameterDefList,getParameterMap())) {
    __processWithIFrame();
  }
 else {
    if (viewer.isHostPage()) {
      HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
      __handleOutputReport(response.getOutputStream());
    }
 else {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      __handleOutputReport(out);
      String content=out.toString();
      JspWriter writer=pageContext.getOut();
      writer.write(__handleStyle(content));
      writer.write(__handleScript(content));
      writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str""+ __handleDivAppearance()+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + __handleBodyStyle(content) + ""String_Node_Str"");
      writer.write(__handleBody(content) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
  }
}",0.3392624728850325
76694,"/** 
 * validate the tag
 * @see org.eclipse.birt.report.taglib.AbstractBaseTag#__validate()
 */
public void __validate() throws Exception {
  Locale locale=BirtTagUtil.getLocale((HttpServletRequest)pageContext.getRequest(),viewer.getLocale());
  BirtResources.setLocale(locale);
  if (viewer.isCustom() && (viewer.getName() == null || viewer.getName().length() <= 0)) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REQUESTER_NAME));
  }
  if (viewer.getReportDesign() == null && viewer.getReportDocument() == null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REPORT_SOURCE));
  }
  if (viewer.getReportletId() != null && viewer.getReportDocument() == null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REPORT_DOCUMENT));
  }
}","/** 
 * validate the tag
 * @see org.eclipse.birt.report.taglib.AbstractBaseTag#__validate()
 */
public boolean __validate() throws Exception {
  Locale locale=BirtTagUtil.getLocale((HttpServletRequest)pageContext.getRequest(),viewer.getLocale());
  BirtResources.setLocale(locale);
  if (viewer.isCustom() && (viewer.getName() == null || viewer.getName().length() <= 0)) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REQUESTER_NAME));
  }
  if (viewer.getReportDesign() == null && viewer.getReportDocument() == null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REPORT_SOURCE));
  }
  if (viewer.getReportletId() != null && viewer.getReportDocument() == null) {
    throw new JspTagException(BirtResources.getMessage(ResourceConstants.TAGLIB_NO_REPORT_DOCUMENT));
  }
  return true;
}",0.9847953216374268
76695,"public void widgetSelected(SelectionEvent e){
  SessionHandleAdapter.getInstance().getCommandStack().startTrans(""String_Node_Str"");
  if (((Button)e.widget).getSelection()) {
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation information=new BorderInfomation();
      information.setPosition(toggleProviders[i].getPosition());
      information.setColor(builder.getRGB());
      information.setStyle((String)styleCombo.getSelectedItem());
      information.setWidth((String)widthCombo.getSelectedItem());
      toggles[i].setSelection(true);
      previewCanvas.setBorderInfomation(information);
      try {
        toggleProviders[i].save(information);
      }
 catch (      Exception e1) {
        ExceptionHandler.handle(e1);
      }
    }
    restoreInfo=(BorderInfomation)toggleProviders[toggleProviders.length - 1].load();
  }
 else {
    boolean reset=true;
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
      if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(info.getColor().equals(builder.getRGB())) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
        reset=false;
        break;
      }
    }
    if (reset) {
      for (int i=0; i < toggleProviders.length; i++) {
        previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
        toggles[i].setSelection(false);
        try {
          toggleProviders[i].reset();
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
 else {
      for (int i=0; i < toggleProviders.length; i++) {
        BorderInfomation information=new BorderInfomation();
        information.setPosition(toggleProviders[i].getPosition());
        information.setColor(builder.getRGB());
        information.setStyle((String)styleCombo.getSelectedItem());
        information.setWidth((String)widthCombo.getSelectedItem());
        previewCanvas.setBorderInfomation(information);
        restoreInfo=information;
        try {
          toggleProviders[i].save(information);
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
      ((Button)e.widget).setSelection(true);
    }
  }
  previewCanvas.redraw();
  SessionHandleAdapter.getInstance().getCommandStack().commit();
}","public void widgetSelected(SelectionEvent e){
  SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
  if (((Button)e.widget).getSelection()) {
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation information=new BorderInfomation();
      information.setPosition(toggleProviders[i].getPosition());
      information.setColor(builder.getRGB());
      information.setStyle((String)styleCombo.getSelectedItem());
      information.setWidth((String)widthCombo.getSelectedItem());
      toggles[i].setSelection(true);
      previewCanvas.setBorderInfomation(information);
      try {
        toggleProviders[i].save(information);
      }
 catch (      Exception e1) {
        ExceptionHandler.handle(e1);
      }
    }
    restoreInfo=(BorderInfomation)toggleProviders[toggleProviders.length - 1].load();
  }
 else {
    boolean reset=true;
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
      if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(info.getColor().equals(builder.getRGB())) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
        reset=false;
        break;
      }
    }
    if (reset) {
      for (int i=0; i < toggleProviders.length; i++) {
        previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
        toggles[i].setSelection(false);
        try {
          toggleProviders[i].reset();
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
 else {
      for (int i=0; i < toggleProviders.length; i++) {
        BorderInfomation information=new BorderInfomation();
        information.setPosition(toggleProviders[i].getPosition());
        information.setColor(builder.getRGB());
        information.setStyle((String)styleCombo.getSelectedItem());
        information.setWidth((String)widthCombo.getSelectedItem());
        previewCanvas.setBorderInfomation(information);
        restoreInfo=information;
        try {
          toggleProviders[i].save(information);
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
      ((Button)e.widget).setSelection(true);
    }
  }
  previewCanvas.redraw();
  SessionHandleAdapter.getInstance().getCommandStack().commit();
}",0.9958123953098827
76696,"public Control createControl(Composite parent){
  content=new Composite(parent,SWT.NONE);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin(2,false);
  layout.marginHeight=1;
  layout.marginWidth=1;
  layout.horizontalSpacing=10;
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite choices=new Composite(content,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  choices.setLayoutData(data);
  layout=WidgetUtil.createGridLayout(2);
  layout.marginHeight=1;
  layout.marginWidth=2;
  choices.setLayout(layout);
  Label styleLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  styleLabel.setText(styleProvider.getDisplayName());
  styleLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    styleCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)styleProvider);
  }
 else {
    styleCombo=new StyleCombo(choices,style,(IComboProvider)styleProvider);
  }
  data=new GridData();
  data.widthHint=200;
  styleCombo.setLayoutData(data);
  styleCombo.setItems(((IComboProvider)styleProvider).getItems());
  Label colorLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  colorLabel.setText(colorProvider.getDisplayName());
  colorLabel.setLayoutData(new GridData());
  builder=new ColorBuilder(choices,SWT.NONE,isFormStyle);
  builder.setChoiceSet(colorProvider.getElementChoiceSet());
  colorProvider.setIndex(IColorConstants.BLACK);
  data=new GridData();
  data.widthHint=200;
  data.heightHint=builder.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  builder.setLayoutData(data);
  Label widthLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  widthLabel.setText(widthProvider.getDisplayName());
  widthLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    widthCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)widthProvider);
  }
 else {
    widthCombo=new StyleCombo(choices,style,(IComboProvider)widthProvider);
  }
  widthProvider.setIndex(widthProvider.getItems()[1].toString());
  data=new GridData();
  data.widthHint=200;
  widthCombo.setLayoutData(data);
  widthCombo.setItems(((IComboProvider)widthProvider).getItems());
  Composite composite=new Composite(choices,SWT.NONE);
  layout=new GridLayout();
  layout.horizontalSpacing=7;
  layout.numColumns=toggleProviders.length + 1;
  composite.setLayout(layout);
  data=new GridData();
  data.horizontalSpan=2;
  composite.setLayoutData(data);
  toggles=new Button[toggleProviders.length];
  for (int i=0; i < toggleProviders.length; i++) {
    Button button=new Button(composite,SWT.TOGGLE);
    toggles[i]=button;
    button.setLayoutData(new GridData());
    button.setToolTipText(toggleProviders[i].getTooltipText());
    button.setImage(ReportPlatformUIImages.getImage(toggleProviders[i].getImageName()));
    final BorderToggleDescriptorProvider provider=toggleProviders[i];
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        SessionHandleAdapter.getInstance().getCommandStack().startTrans(""String_Node_Str"");
        if (((Button)e.widget).getSelection()) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(provider.getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          previewCanvas.setBorderInfomation(information);
          restoreInfo=information;
          try {
            provider.save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
          checkToggleButtons();
        }
 else {
          BorderInfomation oldInfo=(BorderInfomation)provider.load();
          if (!(oldInfo.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldInfo.getColor().equals(builder.getRGB())) || !(oldInfo.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            BorderInfomation information=new BorderInfomation();
            information.setPosition(provider.getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              provider.save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
            ((Button)e.widget).setSelection(true);
          }
 else {
            previewCanvas.removeBorderInfomation(provider.getPosition());
            if (allButton.getSelection())             allButton.setSelection(false);
            try {
              provider.reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
        }
        previewCanvas.redraw();
        SessionHandleAdapter.getInstance().getCommandStack().commit();
      }
    }
);
  }
  allButton=new Button(composite,SWT.TOGGLE);
  allButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME));
  allButton.setToolTipText(Messages.getString(""String_Node_Str""));
  allButton.setLayoutData(new GridData());
  allButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SessionHandleAdapter.getInstance().getCommandStack().startTrans(""String_Node_Str"");
      if (((Button)e.widget).getSelection()) {
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(toggleProviders[i].getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          toggles[i].setSelection(true);
          previewCanvas.setBorderInfomation(information);
          try {
            toggleProviders[i].save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
        }
        restoreInfo=(BorderInfomation)toggleProviders[toggleProviders.length - 1].load();
      }
 else {
        boolean reset=true;
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
          if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(info.getColor().equals(builder.getRGB())) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            reset=false;
            break;
          }
        }
        if (reset) {
          for (int i=0; i < toggleProviders.length; i++) {
            previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
            toggles[i].setSelection(false);
            try {
              toggleProviders[i].reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
        }
 else {
          for (int i=0; i < toggleProviders.length; i++) {
            BorderInfomation information=new BorderInfomation();
            information.setPosition(toggleProviders[i].getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              toggleProviders[i].save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
          ((Button)e.widget).setSelection(true);
        }
      }
      previewCanvas.redraw();
      SessionHandleAdapter.getInstance().getCommandStack().commit();
    }
  }
);
  Composite previewContainer=new Composite(content,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  previewContainer.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=1;
  layout.marginWidth=10;
  previewContainer.setLayout(layout);
  Label previewLabel=FormWidgetFactory.getInstance().createLabel(previewContainer,SWT.LEFT,isFormStyle);
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  previewLabel.setLayoutData(data);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  previewCanvas=new BorderCanvas(previewContainer,SWT.NONE);
  data=new GridData();
  data.widthHint=130;
  data.heightHint=130;
  previewCanvas.setLayoutData(data);
  return content;
}","public Control createControl(Composite parent){
  content=new Composite(parent,SWT.NONE);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin(2,false);
  layout.marginHeight=1;
  layout.marginWidth=1;
  layout.horizontalSpacing=10;
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite choices=new Composite(content,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  choices.setLayoutData(data);
  layout=WidgetUtil.createGridLayout(2);
  layout.marginHeight=1;
  layout.marginWidth=2;
  choices.setLayout(layout);
  Label styleLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  styleLabel.setText(styleProvider.getDisplayName());
  styleLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    styleCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)styleProvider);
  }
 else {
    styleCombo=new StyleCombo(choices,style,(IComboProvider)styleProvider);
  }
  data=new GridData();
  data.widthHint=200;
  styleCombo.setLayoutData(data);
  styleCombo.setItems(((IComboProvider)styleProvider).getItems());
  Label colorLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  colorLabel.setText(colorProvider.getDisplayName());
  colorLabel.setLayoutData(new GridData());
  builder=new ColorBuilder(choices,SWT.NONE,isFormStyle);
  builder.setChoiceSet(colorProvider.getElementChoiceSet());
  colorProvider.setIndex(IColorConstants.BLACK);
  data=new GridData();
  data.widthHint=200;
  data.heightHint=builder.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  builder.setLayoutData(data);
  Label widthLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  widthLabel.setText(widthProvider.getDisplayName());
  widthLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    widthCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)widthProvider);
  }
 else {
    widthCombo=new StyleCombo(choices,style,(IComboProvider)widthProvider);
  }
  widthProvider.setIndex(widthProvider.getItems()[1].toString());
  data=new GridData();
  data.widthHint=200;
  widthCombo.setLayoutData(data);
  widthCombo.setItems(((IComboProvider)widthProvider).getItems());
  Composite composite=new Composite(choices,SWT.NONE);
  layout=new GridLayout();
  layout.horizontalSpacing=7;
  layout.numColumns=toggleProviders.length + 1;
  composite.setLayout(layout);
  data=new GridData();
  data.horizontalSpan=2;
  composite.setLayoutData(data);
  toggles=new Button[toggleProviders.length];
  for (int i=0; i < toggleProviders.length; i++) {
    Button button=new Button(composite,SWT.TOGGLE);
    toggles[i]=button;
    button.setLayoutData(new GridData());
    button.setToolTipText(toggleProviders[i].getTooltipText());
    button.setImage(ReportPlatformUIImages.getImage(toggleProviders[i].getImageName()));
    final BorderToggleDescriptorProvider provider=toggleProviders[i];
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
        if (((Button)e.widget).getSelection()) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(provider.getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          previewCanvas.setBorderInfomation(information);
          restoreInfo=information;
          try {
            provider.save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
          checkToggleButtons();
        }
 else {
          BorderInfomation oldInfo=(BorderInfomation)provider.load();
          if (!(oldInfo.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldInfo.getColor().equals(builder.getRGB())) || !(oldInfo.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            BorderInfomation information=new BorderInfomation();
            information.setPosition(provider.getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              provider.save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
            ((Button)e.widget).setSelection(true);
          }
 else {
            previewCanvas.removeBorderInfomation(provider.getPosition());
            if (allButton.getSelection())             allButton.setSelection(false);
            try {
              provider.reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
        }
        previewCanvas.redraw();
        SessionHandleAdapter.getInstance().getCommandStack().commit();
      }
    }
);
  }
  allButton=new Button(composite,SWT.TOGGLE);
  allButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME));
  allButton.setToolTipText(Messages.getString(""String_Node_Str""));
  allButton.setLayoutData(new GridData());
  allButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SessionHandleAdapter.getInstance().getCommandStack().startTrans(Messages.getString(""String_Node_Str""));
      if (((Button)e.widget).getSelection()) {
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(toggleProviders[i].getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          toggles[i].setSelection(true);
          previewCanvas.setBorderInfomation(information);
          try {
            toggleProviders[i].save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
        }
        restoreInfo=(BorderInfomation)toggleProviders[toggleProviders.length - 1].load();
      }
 else {
        boolean reset=true;
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
          if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(info.getColor().equals(builder.getRGB())) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            reset=false;
            break;
          }
        }
        if (reset) {
          for (int i=0; i < toggleProviders.length; i++) {
            previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
            toggles[i].setSelection(false);
            try {
              toggleProviders[i].reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
        }
 else {
          for (int i=0; i < toggleProviders.length; i++) {
            BorderInfomation information=new BorderInfomation();
            information.setPosition(toggleProviders[i].getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              toggleProviders[i].save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
          ((Button)e.widget).setSelection(true);
        }
      }
      previewCanvas.redraw();
      SessionHandleAdapter.getInstance().getCommandStack().commit();
    }
  }
);
  Composite previewContainer=new Composite(content,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  previewContainer.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=1;
  layout.marginWidth=10;
  previewContainer.setLayout(layout);
  Label previewLabel=FormWidgetFactory.getInstance().createLabel(previewContainer,SWT.LEFT,isFormStyle);
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  previewLabel.setLayoutData(data);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  previewCanvas=new BorderCanvas(previewContainer,SWT.NONE);
  data=new GridData();
  data.widthHint=130;
  data.heightHint=130;
  previewCanvas.setLayoutData(data);
  return content;
}",0.9977588525324966
76697,"protected void openReportDocument(IReportDocument reportDoc){
  this.reportDoc=reportDoc;
  executionContext.setReportDocument(reportDoc);
  setParameterValues(reportDoc.getParameterValues());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDoc.getGlobalVariables(null));
}","protected void openReportDocument(IReportDocument reportDoc){
  this.reportDoc=reportDoc;
  executionContext.setReportDocument(reportDoc);
  setParameterValues(reportDoc.getParameterValues());
  setParameterDisplayTexts(reportDoc.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDoc.getGlobalVariables(null));
}",0.8996960486322189
76698,"public ReportDocumentInfo(ExecutionContext context,long pageNumber,boolean finished){
  this.context=context;
  this.pageNumber=pageNumber;
  this.finished=finished;
  params.putAll(context.getParameterValues());
  beans.putAll(context.getGlobalBeans());
  errors=context.getErrors();
}","public ReportDocumentInfo(ExecutionContext context,long pageNumber,boolean finished){
  this.context=context;
  this.pageNumber=pageNumber;
  this.finished=finished;
  params.putAll(context.getParameterValues());
  parameterDisplayTexts.putAll(context.getParameterDisplayTexts());
  beans.putAll(context.getGlobalBeans());
  errors=context.getErrors();
}",0.88125
76699,"/** 
 * open the document for reading, the document must be closed by the caller.
 * @return
 */
public IReportDocument openReportDocument() throws BirtException {
  IReportEngine engine=context.getEngine();
  String documentName=context.getReportDocWriter().getName();
  if (new File(documentName).isDirectory()) {
    char lastChar=documentName.charAt(documentName.length() - 1);
    if (lastChar != '\\' && lastChar != '/' && lastChar != File.separatorChar) {
      documentName=documentName + File.separatorChar;
    }
  }
  IReportDocument document=engine.openReportDocument(documentName);
  return new TransientReportDocument(document,pageNumber,params,beans,finished);
}","/** 
 * open the document for reading, the document must be closed by the caller.
 * @return
 */
public IReportDocument openReportDocument() throws BirtException {
  IReportEngine engine=context.getEngine();
  String documentName=context.getReportDocWriter().getName();
  if (new File(documentName).isDirectory()) {
    char lastChar=documentName.charAt(documentName.length() - 1);
    if (lastChar != '\\' && lastChar != '/' && lastChar != File.separatorChar) {
      documentName=documentName + File.separatorChar;
    }
  }
  IReportDocument document=engine.openReportDocument(documentName);
  return new TransientReportDocument(document,pageNumber,params,parameterDisplayTexts,beans,finished);
}",0.9840116279069768
76700,"TransientReportDocument(IReportDocument document,long pageNumber,Map paramters,Map globalVariables,boolean isComplete){
  this.document=document;
  this.pageNumber=pageNumber;
  this.parameters=paramters;
  this.globalVariables=globalVariables;
  this.isComplete=isComplete;
}","TransientReportDocument(IReportDocument document,long pageNumber,Map paramters,Map parameterDisplayTexts,Map globalVariables,boolean isComplete){
  this.document=document;
  this.pageNumber=pageNumber;
  this.parameters=paramters;
  this.parameterDisplayTexts=parameterDisplayTexts;
  this.globalVariables=globalVariables;
  this.isComplete=isComplete;
}",0.8761904761904762
76701,"public void contextInitialized(ServletContextEvent event){
  ParameterAccessor.initParameters(event.getServletContext());
}","public void contextInitialized(ServletContextEvent event){
  ParameterAccessor.initParameters(event.getServletContext());
  IViewerReportService instance=new BirtViewerReportService(event.getServletContext());
  BirtReportServiceFactory.init(instance);
}",0.6525198938992043
76702,"public Collection getSelectionListForCascadingGroup(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  try {
    task=getParameterDefinitionTask(design,options);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(options);
      if (bean != null)       task.setParameterValues(bean.getParameters());
      BirtUtility.addTask(request,task);
      task.evaluateQuery(groupName);
      Collection selectionList=task.getSelectionListForCascadingGroup(groupName,groupKeys);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    BirtUtility.removeTask(request);
    if (task != null)     task.close();
  }
  return null;
}","public Collection getSelectionListForCascadingGroup(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  try {
    task=getParameterDefinitionTask(design,options);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(options);
      if (bean != null) {
        task.setLocale(bean.getLocale());
        task.setParameterValues(bean.getParameters());
      }
      BirtUtility.addTask(request,task);
      task.evaluateQuery(groupName);
      Collection selectionList=task.getSelectionListForCascadingGroup(groupName,groupKeys);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    BirtUtility.removeTask(request);
    if (task != null)     task.close();
  }
  return null;
}",0.9704595185995624
76703,"public BirtViewerReportService(ServletConfig conf){
  try {
    ReportEngineService.initEngineInstance(conf);
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}","public BirtViewerReportService(ServletContext context){
  try {
    ReportEngineService.initEngineInstance(context);
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}",0.9518413597733713
76704,"public Collection getParameterSelectionList(IViewerReportDesignHandle design,InputOptions runOptions,String paramName) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,runOptions);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(runOptions);
      if (bean != null)       task.setParameterValues(bean.getParameters());
      Collection selectionList=task.getSelectionList(paramName);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}","public Collection getParameterSelectionList(IViewerReportDesignHandle design,InputOptions runOptions,String paramName) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,runOptions);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(runOptions);
      if (bean != null) {
        task.setLocale(bean.getLocale());
        task.setParameterValues(bean.getParameters());
      }
      Collection selectionList=task.getSelectionList(paramName);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}",0.9590909090909092
76705,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str"")) {
        resetInterval();
      }
    }
  }
);
  keyChooser.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (keyChooser.getSelectionIndex() != -1) {
        tocEditor.setText(DEUtil.getExpression(columnList.get(keyChooser.getSelectionIndex())));
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  keyChooser.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      String key=UIUtil.convertToModelString(keyChooser.getText(),true);
      if (key != null && keyChooser.indexOf(key) != -1) {
        String tocExp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(key)));
        if (!tocEditor.getText().equals(tocExp)) {
          tocEditor.setText(tocExp);
          return;
        }
      }
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
        keyChooser.setFocus();
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Text(intervalRangeArea,SWT.SINGLE | SWT.BORDER);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent event){
      if (event.text.length() <= 0) {
        return;
      }
      int beginIndex=Math.min(event.start,event.end);
      int endIndex=Math.max(event.start,event.end);
      String inputtedText=intervalRange.getText();
      String newString=inputtedText.substring(0,beginIndex);
      newString+=event.text;
      newString+=inputtedText.substring(endIndex);
      event.doit=false;
      try {
        double value=Double.parseDouble(newString);
        if (value >= 0) {
          event.doit=true;
        }
      }
 catch (      NumberFormatException e) {
        return;
      }
    }
  }
);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str"")) {
        resetInterval();
      }
    }
  }
);
  keyChooser.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (keyChooser.getSelectionIndex() != -1) {
        tocEditor.setText(DEUtil.getExpression(columnList.get(keyChooser.getSelectionIndex())));
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  keyChooser.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      String key=UIUtil.convertToModelString(keyChooser.getText(),true);
      if (key != null) {
        String tocExp=null;
        if (keyChooser.indexOf(key) != -1) {
          tocExp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(key)));
        }
 else {
          for (int i=0; i < columnList.size(); i++) {
            if (key.equals(DEUtil.getExpression(columnList.get(i)))) {
              tocExp=DEUtil.getExpression(columnList.get(i));
              break;
            }
          }
        }
        if (!tocEditor.getText().equals(tocExp)) {
          tocEditor.setText(tocExp);
          return;
        }
      }
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
        keyChooser.setFocus();
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Text(intervalRangeArea,SWT.SINGLE | SWT.BORDER);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent event){
      if (event.text.length() <= 0) {
        return;
      }
      int beginIndex=Math.min(event.start,event.end);
      int endIndex=Math.max(event.start,event.end);
      String inputtedText=intervalRange.getText();
      String newString=inputtedText.substring(0,beginIndex);
      newString+=event.text;
      newString+=inputtedText.substring(endIndex);
      event.doit=false;
      try {
        double value=Double.parseDouble(newString);
        if (value >= 0) {
          event.doit=true;
        }
      }
 catch (      NumberFormatException e) {
        return;
      }
    }
  }
);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}",0.9722149180471558
76706,"public void focusLost(FocusEvent e){
  String key=UIUtil.convertToModelString(keyChooser.getText(),true);
  if (key != null && keyChooser.indexOf(key) != -1) {
    String tocExp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(key)));
    if (!tocEditor.getText().equals(tocExp)) {
      tocEditor.setText(tocExp);
      return;
    }
  }
}","public void focusLost(FocusEvent e){
  String key=UIUtil.convertToModelString(keyChooser.getText(),true);
  if (key != null) {
    String tocExp=null;
    if (keyChooser.indexOf(key) != -1) {
      tocExp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(key)));
    }
 else {
      for (int i=0; i < columnList.size(); i++) {
        if (key.equals(DEUtil.getExpression(columnList.get(i)))) {
          tocExp=DEUtil.getExpression(columnList.get(i));
          break;
        }
      }
    }
    if (!tocEditor.getText().equals(tocExp)) {
      tocEditor.setText(tocExp);
      return;
    }
  }
}",0.708113804004215
76707,"/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
      inputGroup.setTocExpression(newToc);
    }
    int index=keyChooser.getSelectionIndex();
    if (index == -1) {
      index=keyChooser.indexOf(UIUtil.convertToModelString(keyChooser.getText(),true));
    }
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getText());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakInside(pagebreakInsideChoicesAll[pagebreakInsideCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
      inputGroup.setTocExpression(newToc);
    }
    int index=keyChooser.getSelectionIndex();
    if (index == -1 && UIUtil.convertToModelString(keyChooser.getText(),true) != null) {
      String groupKey=UIUtil.convertToModelString(keyChooser.getText(),true);
      if (keyChooser.indexOf(groupKey) != -1) {
        index=keyChooser.indexOf(groupKey);
      }
 else {
        for (int i=0; i < columnList.size(); i++) {
          if (groupKey.equals(DEUtil.getExpression(columnList.get(i)))) {
            index=i;
            break;
          }
        }
      }
    }
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getText());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakInside(pagebreakInsideChoicesAll[pagebreakInsideCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.9297886843899114
76708,"private String getKeyExpression(){
  String exp=null;
  String keyText=UIUtil.convertToModelString(keyChooser.getText(),true);
  if (keyChooser.getSelectionIndex() != -1) {
    exp=DEUtil.getExpression(columnList.get(keyChooser.getSelectionIndex()));
  }
 else   if (keyChooser.indexOf(keyText) != -1) {
    exp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(keyText)));
  }
 else {
    exp=keyChooser.getText().trim();
  }
  return exp;
}","private String getKeyExpression(){
  String exp=null;
  String keyText=UIUtil.convertToModelString(keyChooser.getText(),true);
  if (keyChooser.getSelectionIndex() != -1) {
    exp=DEUtil.getExpression(columnList.get(keyChooser.getSelectionIndex()));
  }
 else   if (keyText != null && keyChooser.indexOf(keyText) != -1) {
    exp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(keyText)));
  }
 else {
    exp=keyChooser.getText().trim();
  }
  return exp;
}",0.9791894852135816
76709,"/** 
 * Tests addcolumnBinding method.
 * @throws SemanticException
 * @throws DesignFileException
 */
public void testColumnBinding() throws SemanticException {
  createDesign();
  TableHandle tableHandle=designHandle.getElementFactory().newTableItem(""String_Node_Str"");
  designHandle.getBody().add(tableHandle);
  tableHandle=(TableHandle)designHandle.findElement(""String_Node_Str"");
  ComputedColumn col=StructureFactory.createComputedColumn();
  col.setName(null);
  col.setExpression(""String_Node_Str"");
  assertNull(tableHandle.addColumnBinding(null,true));
  try {
    tableHandle.addColumnBinding(col,true);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_REQUIRED,e.getErrorCode());
  }
  col.setName(""String_Node_Str"");
  tableHandle.addColumnBinding(col,true);
  ComputedColumn col2=StructureFactory.createComputedColumn();
  col2.setName(""String_Node_Str"");
  col2.setExpression(""String_Node_Str"");
  try {
    tableHandle.addColumnBinding(col2,true);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS,e.getErrorCode());
  }
  col=StructureFactory.createComputedColumn();
  col.setName(""String_Node_Str"");
  col.setExpression(""String_Node_Str"");
  try {
    tableHandle.addColumnBinding(col,true);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS,e.getErrorCode());
  }
  col=StructureFactory.createComputedColumn();
  col.setName(""String_Node_Str"");
  col.setExpression(""String_Node_Str"");
  tableHandle.addColumnBinding(col,true);
  col=(ComputedColumn)((ComputedColumnHandle)tableHandle.columnBindingsIterator().next()).getStructure();
  PropertyHandle propertyHandle=tableHandle.getPropertyHandle(IReportItemModel.BOUND_DATA_COLUMNS_PROP);
  ComputedColumn newCol=StructureFactory.createComputedColumn();
  newCol.setName(null);
  newCol.setExpression(""String_Node_Str"");
  try {
    propertyHandle.replaceItem(col,newCol);
    fail();
  }
 catch (  SemanticException e) {
    assertTrue(e instanceof PropertyValueException);
  }
  newCol.setName(""String_Node_Str"");
  try {
    propertyHandle.replaceItem(col,newCol);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS,e.getErrorCode());
  }
  newCol.setName(""String_Node_Str"");
  propertyHandle.replaceItem(col,newCol);
}","/** 
 * Tests addcolumnBinding method.
 * @throws SemanticException
 * @throws DesignFileException
 */
public void testColumnBinding() throws SemanticException {
  createDesign();
  TableHandle tableHandle=designHandle.getElementFactory().newTableItem(""String_Node_Str"");
  designHandle.getBody().add(tableHandle);
  tableHandle=(TableHandle)designHandle.findElement(""String_Node_Str"");
  ComputedColumn col=StructureFactory.createComputedColumn();
  col.setName(null);
  col.setExpression(""String_Node_Str"");
  assertNull(tableHandle.addColumnBinding(null,true));
  try {
    tableHandle.addColumnBinding(col,true);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_REQUIRED,e.getErrorCode());
  }
  col.setName(""String_Node_Str"");
  tableHandle.addColumnBinding(col,true);
  ComputedColumn col2=StructureFactory.createComputedColumn();
  col2.setName(""String_Node_Str"");
  col2.setExpression(""String_Node_Str"");
  try {
    tableHandle.addColumnBinding(col2,true);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS,e.getErrorCode());
  }
  col=StructureFactory.createComputedColumn();
  col.setName(""String_Node_Str"");
  col.setExpression(""String_Node_Str"");
  try {
    tableHandle.addColumnBinding(col,true);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS,e.getErrorCode());
  }
  col=StructureFactory.createComputedColumn();
  col.setName(""String_Node_Str"");
  col.setExpression(""String_Node_Str"");
  tableHandle.addColumnBinding(col,true);
  col=(ComputedColumn)((ComputedColumnHandle)tableHandle.columnBindingsIterator().next()).getStructure();
  PropertyHandle propertyHandle=tableHandle.getPropertyHandle(IReportItemModel.BOUND_DATA_COLUMNS_PROP);
  ComputedColumn newCol=StructureFactory.createComputedColumn();
  newCol.setName(null);
  newCol.setExpression(""String_Node_Str"");
  try {
    propertyHandle.replaceItem(col,newCol);
    fail();
  }
 catch (  SemanticException e) {
    assertTrue(e instanceof PropertyValueException);
  }
  newCol.setName(""String_Node_Str"");
  try {
    propertyHandle.replaceItem(col,newCol);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS,e.getErrorCode());
  }
  newCol.setName(""String_Node_Str"");
  propertyHandle.replaceItem(col,newCol);
  tableHandle.clearProperty(IReportItemModel.BOUND_DATA_COLUMNS_PROP);
  assertNull(tableHandle.getListProperty(IReportItemModel.BOUND_DATA_COLUMNS_PROP));
  GroupHandle groupHandle=designHandle.getElementFactory().newTableGroup();
  groupHandle.setName(""String_Node_Str"");
  tableHandle.getGroups().add(groupHandle);
  ComputedColumn groupCol=StructureFactory.createComputedColumn();
  groupCol.setName(""String_Node_Str"");
  groupCol.setExpression(""String_Node_Str"");
  groupCol.setAggregateOn(""String_Node_Str"");
  groupCol.setDataType(DesignChoiceConstants.PARAM_TYPE_STRING);
  tableHandle.addColumnBinding(groupCol,false);
  ComputedColumn tableCol=StructureFactory.createComputedColumn();
  tableCol.setName(""String_Node_Str"");
  tableCol.setExpression(""String_Node_Str"");
  tableCol.setAggregateOn(""String_Node_Str"");
  tableCol.setDataType(DesignChoiceConstants.PARAM_TYPE_STRING);
  tableHandle.addColumnBinding(tableCol,false);
  List boundList=tableHandle.getListProperty(IReportItemModel.BOUND_DATA_COLUMNS_PROP);
  assertEquals(2,boundList.size());
  assertEquals(""String_Node_Str"",((ComputedColumn)boundList.get(0)).getName());
  assertEquals(""String_Node_Str"",((ComputedColumn)boundList.get(0)).getAggregateOn());
  assertEquals(""String_Node_Str"",((ComputedColumn)boundList.get(1)).getName());
  assertEquals(""String_Node_Str"",((ComputedColumn)boundList.get(1)).getAggregateOn());
}",0.7790440012662235
76710,"/** 
 * Adds a bound column to the list.
 * @param addColumn the bound column to add
 * @param inForce <code>true</code> the column is added to the list regardless of duplicate expression. <code>false</code> do not add the column if the expression already exist
 * @param column the bound column
 * @return the newly created <code>ComputedColumnHandle</code> or theexisted <code>ComputedColumnHandle</code> in the list
 * @throws SemanticException if expression is not duplicate but the name duplicates the exsiting bound column. Or, if the both name/expression are duplicate, but <code>inForce</code> is <code>true</code>.
 */
public ComputedColumnHandle addColumnBinding(ComputedColumn addColumn,boolean inForce) throws SemanticException {
  if (addColumn == null)   return null;
  String expr=addColumn.getExpression();
  if (expr == null)   return null;
  List columns=(List)getProperty(BOUND_DATA_COLUMNS_PROP);
  if (columns == null)   return (ComputedColumnHandle)getPropertyHandle(BOUND_DATA_COLUMNS_PROP).addItem(addColumn);
  ComputedColumn column=DataBoundColumnUtil.getColumn(columns,expr);
  if (column != null && !inForce) {
    return (ComputedColumnHandle)column.handle(getPropertyHandle(BOUND_DATA_COLUMNS_PROP),columns.indexOf(column));
  }
  return (ComputedColumnHandle)getPropertyHandle(BOUND_DATA_COLUMNS_PROP).addItem(addColumn);
}","/** 
 * Adds a bound column to the list.
 * @param addColumn the bound column to add
 * @param inForce <code>true</code> the column is added to the list regardless of duplicate expression. <code>false</code> do not add the column if the expression already exist
 * @param column the bound column
 * @return the newly created <code>ComputedColumnHandle</code> or theexisted <code>ComputedColumnHandle</code> in the list
 * @throws SemanticException if expression is not duplicate but the name duplicates the exsiting bound column. Or, if the both name/expression are duplicate, but <code>inForce</code> is <code>true</code>.
 */
public ComputedColumnHandle addColumnBinding(ComputedColumn addColumn,boolean inForce) throws SemanticException {
  if (addColumn == null)   return null;
  String expr=addColumn.getExpression();
  if (expr == null)   return null;
  List columns=(List)getProperty(BOUND_DATA_COLUMNS_PROP);
  if (columns == null)   return (ComputedColumnHandle)getPropertyHandle(BOUND_DATA_COLUMNS_PROP).addItem(addColumn);
  String aggregateOn=addColumn.getAggregateOn();
  ComputedColumn column=DataBoundColumnUtil.getColumn(columns,expr,aggregateOn);
  if (column != null && !inForce) {
    return (ComputedColumnHandle)column.handle(getPropertyHandle(BOUND_DATA_COLUMNS_PROP),columns.indexOf(column));
  }
  return (ComputedColumnHandle)getPropertyHandle(BOUND_DATA_COLUMNS_PROP).addItem(addColumn);
}",0.9779703864210908
76711,"/** 
 * Adds a bound column to the list.
 * @param addColumn the bound column to add
 * @param inForce <code>true</code> the column is added to the list regardless of duplicate expression. <code>false</code> do not add the column if the expression already exist
 * @param column the bound column
 * @return the newly created <code>ComputedColumnHandle</code> or theexisted <code>ComputedColumnHandle</code> in the list
 * @throws SemanticException if expression is not duplicate but the name duplicates the exsiting bound column. Or, if the both name/expression are duplicate, but <code>inForce</code> is <code>true</code>.
 */
public ComputedColumnHandle addColumnBinding(ComputedColumn addColumn,boolean inForce) throws SemanticException {
  if (addColumn == null)   return null;
  String expr=addColumn.getExpression();
  if (expr == null)   return null;
  List columns=(List)getProperty(BOUND_DATA_COLUMNS_PROP);
  if (columns == null)   return (ComputedColumnHandle)getPropertyHandle(BOUND_DATA_COLUMNS_PROP).addItem(addColumn);
  ComputedColumn column=DataBoundColumnUtil.getColumn(columns,expr);
  if (column != null && !inForce) {
    return (ComputedColumnHandle)column.handle(getPropertyHandle(BOUND_DATA_COLUMNS_PROP),columns.indexOf(column));
  }
  return (ComputedColumnHandle)getPropertyHandle(BOUND_DATA_COLUMNS_PROP).addItem(addColumn);
}","/** 
 * Adds a bound column to the list.
 * @param addColumn the bound column to add
 * @param inForce <code>true</code> the column is added to the list regardless of duplicate expression. <code>false</code> do not add the column if the expression already exist
 * @param column the bound column
 * @return the newly created <code>ComputedColumnHandle</code> or theexisted <code>ComputedColumnHandle</code> in the list
 * @throws SemanticException if expression is not duplicate but the name duplicates the exsiting bound column. Or, if the both name/expression are duplicate, but <code>inForce</code> is <code>true</code>.
 */
public ComputedColumnHandle addColumnBinding(ComputedColumn addColumn,boolean inForce) throws SemanticException {
  if (addColumn == null)   return null;
  String expr=addColumn.getExpression();
  if (expr == null)   return null;
  List columns=(List)getProperty(BOUND_DATA_COLUMNS_PROP);
  if (columns == null)   return (ComputedColumnHandle)getPropertyHandle(BOUND_DATA_COLUMNS_PROP).addItem(addColumn);
  String aggregateOn=addColumn.getAggregateOn();
  ComputedColumn column=DataBoundColumnUtil.getColumn(columns,expr,aggregateOn);
  if (column != null && !inForce) {
    return (ComputedColumnHandle)column.handle(getPropertyHandle(BOUND_DATA_COLUMNS_PROP),columns.indexOf(column));
  }
  return (ComputedColumnHandle)getPropertyHandle(BOUND_DATA_COLUMNS_PROP).addItem(addColumn);
}",0.9779703864210908
76712,"public void visitText(ITextArea textArea){
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int x=curPos.x + textArea.getX();
  int y=curPos.y + textArea.getY();
  drawTextAt(textArea,x,y,cb,pageHeight);
  makeBookmark(textArea,curPos);
  handleHyperlinkAction(textArea,curPos);
}","public void visitText(ITextArea textArea){
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int x=curPos.x + textArea.getX() + (int)(textArea.getFontInfo().getFontSize() * 70);
  int y=curPos.y + textArea.getY() + (int)(textArea.getFontInfo().getFontSize() * 100);
  drawTextAt(textArea,x,y,cb,pageHeight);
  makeBookmark(textArea,curPos);
  handleHyperlinkAction(textArea,curPos);
}",0.8828213879408419
76713,"CellArea(ICellContent cell){
  super(cell);
  removeBorder();
}","CellArea(ICellContent cell){
  super(cell);
  removeBorder();
  setDefaultPadding();
}",0.8456375838926175
76714,"public boolean layout(){
  boolean childBreak=super.layout();
  if (childBreak) {
    if (tbl != null) {
      if (!isFinished() && needPageBreakBefore(null)) {
        tbl.setTableCloseStateAsForced();
      }
 else       if (isFinished() && needPageBreakAfter(null)) {
        tbl.setTableCloseStateAsForced();
      }
    }
  }
  return childBreak;
}","public boolean layout(){
  boolean childBreak=super.layout();
  if (childBreak) {
    if (tbl != null) {
      IStyle cStyle=content.getStyle();
      if (!isFinished() && needPageBreakBefore(cStyle.getPageBreakBefore())) {
        tbl.setTableCloseStateAsForced();
      }
 else       if (isFinished() && needPageBreakAfter(cStyle.getPageBreakAfter())) {
        tbl.setTableCloseStateAsForced();
      }
    }
  }
  return childBreak;
}",0.8723135271807838
76715,"/** 
 * Gets the height of the specified word.
 * @return					the height of the font, it equals ascent+|descent|+leading
 */
public float getWordHeight(){
  if (bf == null)   return fontSize;
  return bf.getFontDescriptor(BaseFont.AWT_ASCENT,fontSize) - bf.getFontDescriptor(BaseFont.AWT_DESCENT,fontSize) + bf.getFontDescriptor(BaseFont.AWT_LEADING,fontSize) + fontSize / 5f;
}","/** 
 * Gets the height of the specified word.
 * @return					the height of the font, it equals ascent+|descent|+leading
 */
public float getWordHeight(){
  if (bf == null)   return fontSize;
  return bf.getFontDescriptor(BaseFont.AWT_ASCENT,fontSize) - bf.getFontDescriptor(BaseFont.AWT_DESCENT,fontSize) + bf.getFontDescriptor(BaseFont.AWT_LEADING,fontSize) + fontSize / 4f;
}",0.9973544973544972
76716,"protected Object convertToType(Object value,String type){
  try {
    if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
      return DataTypeUtil.toBoolean(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
      return DataTypeUtil.toDate(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
      return DataTypeUtil.toBigDecimal(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
      return DataTypeUtil.toDouble(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
      return DataTypeUtil.toString(value);
    }
    return value;
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return null;
}","protected Object convertToType(Object value,String type){
  try {
    if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
      return DataTypeUtil.toBoolean(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
      return DataTypeUtil.toDate(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
      return DataTypeUtil.toBigDecimal(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
      return DataTypeUtil.toDouble(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
      return DataTypeUtil.toString(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
      return DataTypeUtil.toInteger(value);
    }
    return value;
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return null;
}",0.9284447072738023
76717,"public void load(){
  setEnabled(true);
  String[] result=(String[])provider.load();
  if (result.length == 1)   setInput(result[0]);
  if (result.length == 2)   setInput(result[0],result[1]);
}","public void load(){
  setEnabled(true);
  String[] result=(String[])provider.load();
  if (result == null)   return;
  if (result.length == 1)   setInput(result[0]);
  if (result.length == 2)   setInput(result[0],result[1]);
}",0.923809523809524
76718,"private boolean isModelInModuleHandle(){
  List list=getModelChildren();
  int size=list.size();
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof DesignElementHandle) {
      DesignElementHandle handle=(DesignElementHandle)obj;
      if (handle.getRoot() == null) {
        return false;
      }
    }
  }
  return true;
}","private boolean isModelInModuleHandle(){
  List list=getModelChildren();
  int size=list.size();
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof DesignElementHandle) {
      DesignElementHandle handle=(DesignElementHandle)obj;
      if (handle.getRoot() == null && (!getChildren().isEmpty() && ((EditPart)getChildren().get(0)).getModel().equals(handle))) {
        return false;
      }
    }
  }
  return true;
}",0.8858560794044665
76719,"public void setTotalPage(ITextArea totalPage){
  drawTextAt(totalPage,0,0,tpl,tpl.getHeight());
}","public void setTotalPage(ITextArea totalPage){
  if (tpl != null) {
    drawTextAt(totalPage,0,0,tpl,tpl.getHeight());
  }
}",0.8778280542986425
76720,"public void testGroup() throws ScriptException {
  GroupHandle groupHandle=factory.newTableGroup();
  IGroup group=new Group(groupHandle);
  group.setInterval(YEAR);
  assertEquals(YEAR,group.getInterval());
  group.setIntervalBase(INTERVAL_BASE);
  assertEquals(INTERVAL_BASE,group.getIntervalBase());
  group.setIntervalRange(INTERVAL_RANGE);
  assertTrue(INTERVAL_RANGE == group.getIntervalRange());
  group.setKeyExpr(EXPRESSION);
  assertEquals(EXPRESSION,group.getKeyExpr());
  group.setName(NAME);
  assertEquals(NAME,group.getName());
  group.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
  assertEquals(DesignChoiceConstants.SORT_DIRECTION_DESC,group.getSortDirection());
  try {
    group.setSortDirection(TEST);
    fail(""String_Node_Str"");
  }
 catch (  ScriptException e) {
  }
  group.setTocExpression(TOC);
  assertEquals(TOC,group.getTocExpression());
}","public void testGroup() throws ScriptException {
  GroupHandle groupHandle=factory.newTableGroup();
  IGroup group=new Group(groupHandle);
  group.setInterval(YEAR);
  assertEquals(YEAR,group.getInterval());
  group.setIntervalBase(INTERVAL_BASE);
  assertEquals(INTERVAL_BASE,group.getIntervalBase());
  group.setIntervalRange(INTERVAL_RANGE);
  assertTrue(INTERVAL_RANGE == group.getIntervalRange());
  group.setKeyExpr(EXPRESSION);
  assertEquals(EXPRESSION,group.getKeyExpr());
  group.setName(NAME);
  assertEquals(NAME,group.getName());
  group.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
  assertEquals(DesignChoiceConstants.SORT_DIRECTION_DESC,group.getSortDirection());
  try {
    group.setSortDirection(TEST);
    fail(""String_Node_Str"");
  }
 catch (  ScriptException e) {
  }
  group.setTocExpression(TOC);
  assertEquals(TOC,group.getTocExpression());
  group.setHideDetail(true);
  assertTrue(group.getHideDetail());
}",0.9640130861504908
76721,"/** 
 * handle generate report content
 * @param out
 * @throws Exception
 */
protected void __handleOutputReport(OutputStream out) throws Exception {
  if (this.documentInUrl) {
    String doc=createAbsolutePath(viewer.getReportDocument());
    if (viewer.getReportletId() != null) {
      getReportService().renderReportlet(doc,viewer.getReportletId(),this.options,new ArrayList(),out);
    }
 else {
      getReportService().renderReport(doc,null,this.options,out);
    }
  }
 else {
    Map params=__handleParameters(reportDesignHandle,null);
    Map displayTexts=BirtUtility.getDisplayTexts(null,(HttpServletRequest)pageContext.getRequest());
    getReportService().runAndRenderReport(reportDesignHandle,null,this.options,params,out,new ArrayList(),displayTexts);
  }
}","/** 
 * handle generate report content
 * @param out
 * @throws Exception
 */
protected void __handleOutputReport(OutputStream out) throws Exception {
  ReportEngineService.getInstance().setMaxRows(viewer.getMaxRowsOfRecords());
  if (this.documentInUrl) {
    String doc=createAbsolutePath(viewer.getReportDocument());
    if (viewer.getReportletId() != null) {
      getReportService().renderReportlet(doc,viewer.getReportletId(),this.options,new ArrayList(),out);
    }
 else {
      getReportService().renderReport(doc,null,this.options,out);
    }
  }
 else {
    Map params=__handleParameters(reportDesignHandle,null);
    Map displayTexts=BirtUtility.getDisplayTexts(null,(HttpServletRequest)pageContext.getRequest());
    getReportService().runAndRenderReport(reportDesignHandle,null,this.options,params,out,new ArrayList(),displayTexts);
  }
}",0.9520295202952028
76722,"/** 
 * Get column bindings of certain query.
 * @param defn
 * @return
 */
private Map getColumnBindings(IBaseQueryDefinition defn){
  Map result=defn.getResultSetExpressions();
  result.putAll(populateGroupColumnBindings(defn.getGroups().iterator()));
  result.putAll(populateSubQueryColumnBindings(defn.getSubqueries().iterator()));
  return result;
}","/** 
 * Get column bindings of certain query.
 * @param defn
 * @return
 */
private Map getColumnBindings(IBaseQueryDefinition defn){
  Map result=new HashMap();
  Iterator temp=defn.getResultSetExpressions().keySet().iterator();
  while (temp.hasNext()) {
    Object key=temp.next();
    result.put(key,defn.getResultSetExpressions().get(key));
  }
  result.putAll(populateGroupColumnBindings(defn.getGroups().iterator()));
  result.putAll(populateSubQueryColumnBindings(defn.getSubqueries().iterator()));
  return result;
}",0.8031854379977247
76723,"/** 
 * Create the final URI string to preview report
 * @param iPattern
 * @return
 */
public String createURI(String iPattern){
  String uri=iPattern;
  if (uri == null)   uri=this.pattern;
  if (uri == null) {
    uri=IBirtConstants.VIEWER_FRAMESET;
    if ((reportDocument != null && reportletId != null) || !allowPageBreak) {
      uri=IBirtConstants.VIEWER_RUN;
    }
  }
  if (contextRoot != null)   uri=""String_Node_Str"" + contextRoot + ""String_Node_Str""+ uri;
  if (format != null) {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ urlParamValueEncode(format);
  }
 else {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ ParameterAccessor.PARAM_FORMAT_HTML;
  }
  if (reportDesign != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT + ""String_Node_Str""+ urlParamValueEncode(reportDesign);
  if (reportDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT_DOCUMENT + ""String_Node_Str""+ urlParamValueEncode(reportDocument);
  if (reportletId != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_INSTANCEID + ""String_Node_Str""+ urlParamValueEncode(reportletId);
  if (allowPageBreak && id != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_ID + ""String_Node_Str""+ urlParamValueEncode(id);
  if (allowPageBreak && title != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TITLE + ""String_Node_Str""+ urlParamValueEncode(title);
  if (allowPageBreak && showTitle != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SHOW_TITLE + ""String_Node_Str""+ urlParamValueEncode(showTitle);
  if (bookmark != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_BOOKMARK + ""String_Node_Str""+ urlParamValueEncode(bookmark);
  if (!isCustom && pattern != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SERVLET_PATTERN + ""String_Node_Str""+ urlParamValueEncode(pattern);
  if (!isCustom && target != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TARGET + ""String_Node_Str""+ urlParamValueEncode(target);
  if (locale != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_LOCALE + ""String_Node_Str""+ urlParamValueEncode(locale);
  if (svg != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SVG + ""String_Node_Str""+ urlParamValueEncode(svg);
  if (rtl != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RTL + ""String_Node_Str""+ urlParamValueEncode(rtl);
  if (allowMasterPage != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MASTERPAGE + ""String_Node_Str""+ urlParamValueEncode(allowMasterPage);
  if (resourceFolder != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RESOURCE_FOLDER + ""String_Node_Str""+ urlParamValueEncode(resourceFolder);
  if (maxRowsOfRecords >= 0)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MAXROWS + ""String_Node_Str""+ maxRowsOfRecords;
  if (forceOverwriteDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_OVERWRITE + ""String_Node_Str""+ urlParamValueEncode(forceOverwriteDocument);
  if (forceParameterPrompting != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PARAMETER_PROMPTING + ""String_Node_Str""+ urlParamValueEncode(forceParameterPrompting);
  if (showToolBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TOOLBAR + ""String_Node_Str""+ urlParamValueEncode(showToolBar);
  if (showNavigationBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_NAVIGATIONBAR + ""String_Node_Str""+ urlParamValueEncode(showNavigationBar);
  return uri;
}","/** 
 * Create the final URI string to preview report
 * @param iPattern
 * @return
 */
public String createURI(String iPattern){
  String uri=iPattern;
  if (uri == null)   uri=this.pattern;
  if (uri == null) {
    uri=IBirtConstants.VIEWER_FRAMESET;
    if ((reportDocument != null && reportletId != null) || !allowPageBreak) {
      uri=IBirtConstants.VIEWER_RUN;
    }
  }
  if (contextRoot != null)   uri=""String_Node_Str"" + contextRoot + ""String_Node_Str""+ uri;
  if (format != null) {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ urlParamValueEncode(format);
  }
 else {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ ParameterAccessor.PARAM_FORMAT_HTML;
  }
  if (reportDesign != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT + ""String_Node_Str""+ urlParamValueEncode(reportDesign);
  if (reportDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT_DOCUMENT + ""String_Node_Str""+ urlParamValueEncode(reportDocument);
  if (reportletId != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_INSTANCEID + ""String_Node_Str""+ urlParamValueEncode(reportletId);
  if (allowPageBreak && id != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_ID + ""String_Node_Str""+ urlParamValueEncode(id);
  if (allowPageBreak && title != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TITLE + ""String_Node_Str""+ urlParamValueEncode(title);
  if (allowPageBreak && showTitle != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SHOW_TITLE + ""String_Node_Str""+ urlParamValueEncode(showTitle);
  if (!isCustom && pattern != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SERVLET_PATTERN + ""String_Node_Str""+ urlParamValueEncode(pattern);
  if (!isCustom && target != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TARGET + ""String_Node_Str""+ urlParamValueEncode(target);
  if (locale != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_LOCALE + ""String_Node_Str""+ urlParamValueEncode(locale);
  if (svg != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SVG + ""String_Node_Str""+ urlParamValueEncode(svg);
  if (rtl != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RTL + ""String_Node_Str""+ urlParamValueEncode(rtl);
  if (allowMasterPage != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MASTERPAGE + ""String_Node_Str""+ urlParamValueEncode(allowMasterPage);
  if (resourceFolder != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RESOURCE_FOLDER + ""String_Node_Str""+ urlParamValueEncode(resourceFolder);
  if (maxRowsOfRecords >= 0)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MAXROWS + ""String_Node_Str""+ maxRowsOfRecords;
  if (forceOverwriteDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_OVERWRITE + ""String_Node_Str""+ urlParamValueEncode(forceOverwriteDocument);
  if (forceParameterPrompting != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PARAMETER_PROMPTING + ""String_Node_Str""+ urlParamValueEncode(forceParameterPrompting);
  if (showToolBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TOOLBAR + ""String_Node_Str""+ urlParamValueEncode(showToolBar);
  if (showNavigationBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_NAVIGATIONBAR + ""String_Node_Str""+ urlParamValueEncode(showNavigationBar);
  if (bookmark != null) {
    if (IBirtConstants.VIEWER_PREVIEW.equalsIgnoreCase(iPattern)) {
      uri+=""String_Node_Str"" + urlParamValueEncode(bookmark);
    }
 else {
      uri+=""String_Node_Str"" + ParameterAccessor.PARAM_BOOKMARK + ""String_Node_Str""+ urlParamValueEncode(bookmark);
    }
  }
  return uri;
}",0.4892847202894517
76724,"public void widgetSelected(SelectionEvent e){
  if (((Button)e.widget).getSelection()) {
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation information=new BorderInfomation();
      information.setPosition(toggleProviders[i].getPosition());
      information.setColor(builder.getRGB());
      information.setStyle((String)styleCombo.getSelectedItem());
      information.setWidth((String)widthCombo.getSelectedItem());
      previewCanvas.setBorderInfomation(information);
      toggles[i].setSelection(true);
      try {
        toggleProviders[i].save(information);
      }
 catch (      Exception e1) {
        ExceptionHandler.handle(e1);
      }
    }
    restoreButton=toggles[toggleProviders.length - 1];
  }
 else {
    for (int i=0; i < toggleProviders.length; i++) {
      previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
      toggles[i].setSelection(false);
      try {
        toggleProviders[i].reset();
      }
 catch (      Exception e1) {
        ExceptionHandler.handle(e1);
      }
    }
    restoreButton=null;
  }
  previewCanvas.redraw();
}","public void widgetSelected(SelectionEvent e){
  SessionHandleAdapter.getInstance().getCommandStack().startTrans(""String_Node_Str"");
  if (((Button)e.widget).getSelection()) {
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation information=new BorderInfomation();
      information.setPosition(toggleProviders[i].getPosition());
      information.setColor(builder.getRGB());
      information.setStyle((String)styleCombo.getSelectedItem());
      information.setWidth((String)widthCombo.getSelectedItem());
      toggles[i].setSelection(true);
      previewCanvas.setBorderInfomation(information);
      try {
        toggleProviders[i].save(information);
      }
 catch (      Exception e1) {
        ExceptionHandler.handle(e1);
      }
    }
    restoreInfo=(BorderInfomation)toggleProviders[toggleProviders.length - 1].load();
  }
 else {
    boolean reset=true;
    for (int i=0; i < toggleProviders.length; i++) {
      BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
      if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(info.getColor().equals(builder.getRGB())) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
        reset=false;
        break;
      }
    }
    if (reset) {
      for (int i=0; i < toggleProviders.length; i++) {
        previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
        toggles[i].setSelection(false);
        try {
          toggleProviders[i].reset();
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
 else {
      for (int i=0; i < toggleProviders.length; i++) {
        BorderInfomation information=new BorderInfomation();
        information.setPosition(toggleProviders[i].getPosition());
        information.setColor(builder.getRGB());
        information.setStyle((String)styleCombo.getSelectedItem());
        information.setWidth((String)widthCombo.getSelectedItem());
        previewCanvas.setBorderInfomation(information);
        restoreInfo=information;
        try {
          toggleProviders[i].save(information);
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
      ((Button)e.widget).setSelection(true);
    }
  }
  previewCanvas.redraw();
  SessionHandleAdapter.getInstance().getCommandStack().commit();
}",0.3944954128440367
76725,"public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  PropertyEvent event=(PropertyEvent)ev;
  String propertyName=event.getPropertyName();
  if (propertyName.equals(StyleHandle.BORDER_TOP_WIDTH_PROP) || propertyName.equals(StyleHandle.BORDER_LEFT_WIDTH_PROP) || propertyName.equals(StyleHandle.BORDER_BOTTOM_WIDTH_PROP)|| propertyName.equals(StyleHandle.BORDER_RIGHT_WIDTH_PROP)) {
    load();
  }
}","public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  PropertyEvent event=(PropertyEvent)ev;
  String propertyName=event.getPropertyName();
  if (propertyName.equals(StyleHandle.BORDER_BOTTOM_WIDTH_PROP) || propertyName.equals(StyleHandle.BORDER_TOP_WIDTH_PROP) || propertyName.equals(StyleHandle.BORDER_LEFT_WIDTH_PROP)|| propertyName.equals(StyleHandle.BORDER_RIGHT_WIDTH_PROP)) {
    load();
  }
 else   if (propertyName.equals(StyleHandle.BORDER_BOTTOM_STYLE_PROP) || propertyName.equals(StyleHandle.BORDER_TOP_STYLE_PROP) || propertyName.equals(StyleHandle.BORDER_LEFT_STYLE_PROP)|| propertyName.equals(StyleHandle.BORDER_RIGHT_STYLE_PROP)) {
    load();
  }
 else   if (propertyName.equals(StyleHandle.BORDER_BOTTOM_COLOR_PROP) || propertyName.equals(StyleHandle.BORDER_LEFT_COLOR_PROP) || propertyName.equals(StyleHandle.BORDER_RIGHT_COLOR_PROP)|| propertyName.equals(StyleHandle.BORDER_TOP_COLOR_PROP)) {
    load();
  }
}",0.5965166908563135
76726,"public void load(){
  boolean init=false;
  for (int i=toggleProviders.length - 1; i >= 0; i--) {
    BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
    previewCanvas.setBorderInfomation(info);
    if (!info.getStyle().equals(""String_Node_Str"")) {
      toggles[i].setSelection(true);
      if ((!init && restoreButton == null) || toggles[i] == restoreButton) {
        refreshStyle(info.getStyle());
        refreshWidth(info.getWidth());
        refreshColor(info.getColor());
        init=true;
      }
    }
 else     toggles[i].setSelection(false);
  }
  previewCanvas.redraw();
  if (!init) {
    if (styleCombo.getSelectedItem() == null) {
      String borderStyle=styleProvider.load().toString();
      refreshStyle(borderStyle);
    }
    if (widthCombo.getSelectedItem() == null) {
      String borderWidth=widthProvider.load().toString();
      refreshWidth(borderWidth);
    }
    if (builder.getRGB() == null) {
      String borderColor=colorProvider.load().toString();
      refreshColor(borderColor);
    }
  }
  checkToggleButtons();
}","public void load(){
  for (int i=0; i < toggleProviders.length; i++) {
    BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
    previewCanvas.setBorderInfomation(info);
    if (!info.getStyle().equals(""String_Node_Str"")) {
      toggles[i].setSelection(true);
    }
 else {
      toggles[i].setSelection(false);
    }
  }
  previewCanvas.redraw();
  if (restoreInfo == null) {
    if (styleCombo.getSelectedItem() == null) {
      String borderStyle=styleProvider.load().toString();
      refreshStyle(borderStyle);
    }
    if (widthCombo.getSelectedItem() == null) {
      String borderWidth=widthProvider.load().toString();
      refreshWidth(borderWidth);
    }
    if (builder.getRGB() == null) {
      String borderColor=colorProvider.load().toString();
      refreshColor(borderColor);
    }
  }
 else {
    refreshStyle(restoreInfo.getStyle());
    refreshWidth(restoreInfo.getWidth());
    refreshColor(restoreInfo.getColor());
  }
  checkToggleButtons();
}",0.7470817120622568
76727,"public Control createControl(Composite parent){
  content=new Composite(parent,SWT.NONE);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin(2,false);
  layout.marginHeight=1;
  layout.marginWidth=1;
  layout.horizontalSpacing=10;
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite choices=new Composite(content,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  choices.setLayoutData(data);
  layout=WidgetUtil.createGridLayout(2);
  layout.marginHeight=1;
  layout.marginWidth=2;
  choices.setLayout(layout);
  Label styleLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  styleLabel.setText(styleProvider.getDisplayName());
  styleLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    styleCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)styleProvider);
  }
 else {
    styleCombo=new StyleCombo(choices,style,(IComboProvider)styleProvider);
  }
  data=new GridData();
  data.widthHint=200;
  styleCombo.setLayoutData(data);
  styleCombo.setItems(((IComboProvider)styleProvider).getItems());
  Label colorLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  colorLabel.setText(colorProvider.getDisplayName());
  colorLabel.setLayoutData(new GridData());
  builder=new ColorBuilder(choices,SWT.NONE,isFormStyle);
  builder.setChoiceSet(colorProvider.getElementChoiceSet());
  colorProvider.setIndex(IColorConstants.BLACK);
  data=new GridData();
  data.widthHint=200;
  data.heightHint=builder.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  builder.setLayoutData(data);
  Label widthLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  widthLabel.setText(widthProvider.getDisplayName());
  widthLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    widthCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)widthProvider);
  }
 else {
    widthCombo=new StyleCombo(choices,style,(IComboProvider)widthProvider);
  }
  widthProvider.setIndex(widthProvider.getItems()[1].toString());
  data=new GridData();
  data.widthHint=200;
  widthCombo.setLayoutData(data);
  widthCombo.setItems(((IComboProvider)widthProvider).getItems());
  Composite composite=new Composite(choices,SWT.NONE);
  layout=new GridLayout();
  layout.horizontalSpacing=7;
  layout.numColumns=toggleProviders.length + 1;
  composite.setLayout(layout);
  data=new GridData();
  data.horizontalSpan=2;
  composite.setLayoutData(data);
  toggles=new Button[toggleProviders.length];
  for (int i=0; i < toggleProviders.length; i++) {
    Button button=new Button(composite,SWT.TOGGLE);
    toggles[i]=button;
    button.setLayoutData(new GridData());
    button.setToolTipText(toggleProviders[i].getTooltipText());
    button.setImage(ReportPlatformUIImages.getImage(toggleProviders[i].getImageName()));
    final BorderToggleDescriptorProvider provider=toggleProviders[i];
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (((Button)e.widget).getSelection()) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(provider.getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          previewCanvas.setBorderInfomation(information);
          try {
            restoreButton=(Button)e.widget;
            provider.save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
          checkToggleButtons();
        }
 else {
          previewCanvas.removeBorderInfomation(provider.getPosition());
          if (allButton.getSelection())           allButton.setSelection(false);
          try {
            if ((Button)e.widget == restoreButton)             restoreButton=null;
            provider.reset();
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
        }
        previewCanvas.redraw();
      }
    }
);
  }
  allButton=new Button(composite,SWT.TOGGLE);
  allButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME));
  allButton.setToolTipText(Messages.getString(""String_Node_Str""));
  allButton.setLayoutData(new GridData());
  allButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (((Button)e.widget).getSelection()) {
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(toggleProviders[i].getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          previewCanvas.setBorderInfomation(information);
          toggles[i].setSelection(true);
          try {
            toggleProviders[i].save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
        }
        restoreButton=toggles[toggleProviders.length - 1];
      }
 else {
        for (int i=0; i < toggleProviders.length; i++) {
          previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
          toggles[i].setSelection(false);
          try {
            toggleProviders[i].reset();
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
        }
        restoreButton=null;
      }
      previewCanvas.redraw();
    }
  }
);
  Composite previewContainer=new Composite(content,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  previewContainer.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=1;
  layout.marginWidth=10;
  previewContainer.setLayout(layout);
  Label previewLabel=FormWidgetFactory.getInstance().createLabel(previewContainer,SWT.LEFT,isFormStyle);
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  previewLabel.setLayoutData(data);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  previewCanvas=new BorderCanvas(previewContainer,SWT.NONE);
  data=new GridData();
  data.widthHint=130;
  data.heightHint=130;
  previewCanvas.setLayoutData(data);
  return content;
}","public Control createControl(Composite parent){
  content=new Composite(parent,SWT.NONE);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin(2,false);
  layout.marginHeight=1;
  layout.marginWidth=1;
  layout.horizontalSpacing=10;
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite choices=new Composite(content,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  choices.setLayoutData(data);
  layout=WidgetUtil.createGridLayout(2);
  layout.marginHeight=1;
  layout.marginWidth=2;
  choices.setLayout(layout);
  Label styleLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  styleLabel.setText(styleProvider.getDisplayName());
  styleLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    styleCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)styleProvider);
  }
 else {
    styleCombo=new StyleCombo(choices,style,(IComboProvider)styleProvider);
  }
  data=new GridData();
  data.widthHint=200;
  styleCombo.setLayoutData(data);
  styleCombo.setItems(((IComboProvider)styleProvider).getItems());
  Label colorLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  colorLabel.setText(colorProvider.getDisplayName());
  colorLabel.setLayoutData(new GridData());
  builder=new ColorBuilder(choices,SWT.NONE,isFormStyle);
  builder.setChoiceSet(colorProvider.getElementChoiceSet());
  colorProvider.setIndex(IColorConstants.BLACK);
  data=new GridData();
  data.widthHint=200;
  data.heightHint=builder.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  builder.setLayoutData(data);
  Label widthLabel=FormWidgetFactory.getInstance().createLabel(choices,SWT.LEFT,isFormStyle);
  widthLabel.setText(widthProvider.getDisplayName());
  widthLabel.setLayoutData(new GridData());
  if (isFormStyle) {
    widthCombo=FormWidgetFactory.getInstance().createStyleCombo(choices,(IComboProvider)widthProvider);
  }
 else {
    widthCombo=new StyleCombo(choices,style,(IComboProvider)widthProvider);
  }
  widthProvider.setIndex(widthProvider.getItems()[1].toString());
  data=new GridData();
  data.widthHint=200;
  widthCombo.setLayoutData(data);
  widthCombo.setItems(((IComboProvider)widthProvider).getItems());
  Composite composite=new Composite(choices,SWT.NONE);
  layout=new GridLayout();
  layout.horizontalSpacing=7;
  layout.numColumns=toggleProviders.length + 1;
  composite.setLayout(layout);
  data=new GridData();
  data.horizontalSpan=2;
  composite.setLayoutData(data);
  toggles=new Button[toggleProviders.length];
  for (int i=0; i < toggleProviders.length; i++) {
    Button button=new Button(composite,SWT.TOGGLE);
    toggles[i]=button;
    button.setLayoutData(new GridData());
    button.setToolTipText(toggleProviders[i].getTooltipText());
    button.setImage(ReportPlatformUIImages.getImage(toggleProviders[i].getImageName()));
    final BorderToggleDescriptorProvider provider=toggleProviders[i];
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        SessionHandleAdapter.getInstance().getCommandStack().startTrans(""String_Node_Str"");
        if (((Button)e.widget).getSelection()) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(provider.getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          previewCanvas.setBorderInfomation(information);
          restoreInfo=information;
          try {
            provider.save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
          checkToggleButtons();
        }
 else {
          BorderInfomation oldInfo=(BorderInfomation)provider.load();
          if (!(oldInfo.getStyle().equals((String)styleCombo.getSelectedItem())) || !(oldInfo.getColor().equals(builder.getRGB())) || !(oldInfo.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            BorderInfomation information=new BorderInfomation();
            information.setPosition(provider.getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              provider.save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
            ((Button)e.widget).setSelection(true);
          }
 else {
            previewCanvas.removeBorderInfomation(provider.getPosition());
            if (allButton.getSelection())             allButton.setSelection(false);
            try {
              provider.reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
        }
        previewCanvas.redraw();
        SessionHandleAdapter.getInstance().getCommandStack().commit();
      }
    }
);
  }
  allButton=new Button(composite,SWT.TOGGLE);
  allButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME));
  allButton.setToolTipText(Messages.getString(""String_Node_Str""));
  allButton.setLayoutData(new GridData());
  allButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SessionHandleAdapter.getInstance().getCommandStack().startTrans(""String_Node_Str"");
      if (((Button)e.widget).getSelection()) {
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation information=new BorderInfomation();
          information.setPosition(toggleProviders[i].getPosition());
          information.setColor(builder.getRGB());
          information.setStyle((String)styleCombo.getSelectedItem());
          information.setWidth((String)widthCombo.getSelectedItem());
          toggles[i].setSelection(true);
          previewCanvas.setBorderInfomation(information);
          try {
            toggleProviders[i].save(information);
          }
 catch (          Exception e1) {
            ExceptionHandler.handle(e1);
          }
        }
        restoreInfo=(BorderInfomation)toggleProviders[toggleProviders.length - 1].load();
      }
 else {
        boolean reset=true;
        for (int i=0; i < toggleProviders.length; i++) {
          BorderInfomation info=(BorderInfomation)toggleProviders[i].load();
          if (!(info.getStyle().equals((String)styleCombo.getSelectedItem())) || !(info.getColor().equals(builder.getRGB())) || !(info.getWidth().equals((String)widthCombo.getSelectedItem()))) {
            reset=false;
            break;
          }
        }
        if (reset) {
          for (int i=0; i < toggleProviders.length; i++) {
            previewCanvas.removeBorderInfomation(toggleProviders[i].getPosition());
            toggles[i].setSelection(false);
            try {
              toggleProviders[i].reset();
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
        }
 else {
          for (int i=0; i < toggleProviders.length; i++) {
            BorderInfomation information=new BorderInfomation();
            information.setPosition(toggleProviders[i].getPosition());
            information.setColor(builder.getRGB());
            information.setStyle((String)styleCombo.getSelectedItem());
            information.setWidth((String)widthCombo.getSelectedItem());
            previewCanvas.setBorderInfomation(information);
            restoreInfo=information;
            try {
              toggleProviders[i].save(information);
            }
 catch (            Exception e1) {
              ExceptionHandler.handle(e1);
            }
          }
          ((Button)e.widget).setSelection(true);
        }
      }
      previewCanvas.redraw();
      SessionHandleAdapter.getInstance().getCommandStack().commit();
    }
  }
);
  Composite previewContainer=new Composite(content,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  previewContainer.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=1;
  layout.marginWidth=10;
  previewContainer.setLayout(layout);
  Label previewLabel=FormWidgetFactory.getInstance().createLabel(previewContainer,SWT.LEFT,isFormStyle);
  data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  previewLabel.setLayoutData(data);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  previewCanvas=new BorderCanvas(previewContainer,SWT.NONE);
  data=new GridData();
  data.widthHint=130;
  data.heightHint=130;
  previewCanvas.setLayoutData(data);
  return content;
}",0.7938425565081839
76728,"/** 
 * create block text area by text content
 * @param content the text content
 * @param text the text string
 * @param contentDimension the content dimension
 * @param isFirst if this area is the first area of the content
 * @param isLast if this area is the last area of the content
 * @return
 */
protected IArea createBlockTextArea(String text,ITextContent content,FontInfo fi,Dimension contentDimension){
  AbstractArea textArea=(AbstractArea)AreaFactory.createTextArea(content,text,fi);
  textArea.setWidth(contentDimension.getWidth());
  textArea.setHeight(contentDimension.getHeight());
  return textArea;
}","/** 
 * create block text area by text content
 * @param content the text content
 * @param text the text string
 * @param contentDimension the content dimension
 * @param isFirst if this area is the first area of the content
 * @param isLast if this area is the last area of the content
 * @return
 */
protected IArea createBlockTextArea(String text,ITextContent content,FontInfo fi,Dimension contentDimension){
  AbstractArea textArea=(AbstractArea)AreaFactory.createTextArea(content,text,fi);
  textArea.setWidth(Math.min(context.getMaxWidth(),contentDimension.getWidth()));
  textArea.setHeight(Math.min(context.getMaxHeight(),contentDimension.getHeight()));
  return textArea;
}",0.9500384319754036
76729,"protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getCurrentMaxContentWidth();
  Dimension contentDimension=getSpecifiedDimension(image);
  root=(ContainerArea)createInlineContainer(image,true,true);
  validateBoxProperty(root.getStyle(),maxWidth,context.getMaxHeight());
  root.setAllocatedWidth(maxWidth);
  int maxContentWidth=root.getContentWidth();
  if (contentDimension.getWidth() > maxContentWidth) {
    contentDimension.setDimension(maxContentWidth,(int)(maxContentWidth / contentDimension.getRatio()));
  }
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  root.setContentWidth(contentDimension.getWidth());
  root.setContentHeight(contentDimension.getHeight());
}","protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getCurrentMaxContentWidth();
  Dimension contentDimension=getSpecifiedDimension(image);
  root=(ContainerArea)createInlineContainer(image,true,true);
  validateBoxProperty(root.getStyle(),maxWidth,context.getMaxHeight());
  root.setAllocatedWidth(maxWidth);
  int maxContentWidth=root.getContentWidth();
  if (contentDimension.getWidth() > maxContentWidth) {
    contentDimension.setDimension(maxContentWidth,(int)(maxContentWidth / contentDimension.getRatio()));
  }
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  root.setContentWidth(contentDimension.getWidth());
  root.setContentHeight(Math.min(context.getMaxHeight(),contentDimension.getHeight()));
}",0.9625832906201948
76730,"/** 
 * create inline text area by text content
 * @param content the text content
 * @param text the text string
 * @param contentDimension the content dimension
 * @param isFirst if this area is the first area of the content
 * @param isLast if this area is the last area of the content
 * @return
 */
private IArea createInlineTextArea(String text,ITextContent content,FontInfo fi,Dimension contentDimension){
  ContainerArea con=(ContainerArea)createInlineContainer(content,false,false);
  int textHeight=contentDimension.getHeight();
  int textWidth=contentDimension.getWidth();
  con.setWidth(textWidth);
  con.setHeight(textHeight + topPadding + topBorder+ bottomPadding+ bottomBorder);
  AbstractArea textArea=(AbstractArea)AreaFactory.createTextArea(content,text,fi);
  con.addChild(textArea);
  textArea.setHeight(textHeight);
  textArea.setWidth(textWidth);
  textArea.setPosition(0,topPadding + topBorder);
  return con;
}","/** 
 * create inline text area by text content
 * @param content the text content
 * @param text the text string
 * @param contentDimension the content dimension
 * @param isFirst if this area is the first area of the content
 * @param isLast if this area is the last area of the content
 * @return
 */
private IArea createInlineTextArea(String text,ITextContent content,FontInfo fi,Dimension contentDimension){
  ContainerArea con=(ContainerArea)createInlineContainer(content,false,false);
  int textHeight=contentDimension.getHeight();
  int textWidth=contentDimension.getWidth();
  con.setWidth(Math.min(textWidth,context.getMaxWidth()));
  con.setHeight(Math.min(textHeight + topPadding + topBorder+ bottomPadding+ bottomBorder,context.getMaxHeight()));
  AbstractArea textArea=(AbstractArea)AreaFactory.createTextArea(content,text,fi);
  con.addChild(textArea);
  textArea.setHeight(textHeight);
  textArea.setWidth(textWidth);
  textArea.setPosition(0,topPadding + topBorder);
  return con;
}",0.966373512674599
76731,"/** 
 * @param meta
 * @param projectedColumns
 * @throws DataException
 */
private void addOriginalMetadata(IResultClass meta,List projectedColumns) throws DataException {
  for (int i=1; i <= meta.getFieldCount(); i++) {
    projectedColumns.add(new ResultFieldMetadata(i,meta.getFieldName(i),meta.getFieldName(i),meta.getFieldValueClass(i),meta.getFieldNativeTypeName(i),false));
  }
}","/** 
 * @param meta
 * @param projectedColumns
 * @throws DataException
 */
private void addOriginalMetadata(IResultClass meta,List projectedColumns) throws DataException {
  for (int i=1; i <= meta.getFieldCount(); i++) {
    ResultFieldMetadata rfm=new ResultFieldMetadata(i,meta.getFieldName(i),meta.getFieldName(i),meta.getFieldValueClass(i),meta.getFieldNativeTypeName(i),false);
    rfm.setAlias(meta.getFieldAlias(i));
    projectedColumns.add(rfm);
  }
}",0.8611764705882353
76732,"public AutoText(ReportElementHandle handle){
  super(handle);
}","public AutoText(ReportItemHandle handle){
  super(handle);
}",0.943089430894309
76733,"public Group(GroupHandle group){
  super(group);
}","public Group(GroupHandle handle){
  super(handle);
}",0.7843137254901961
76734,"public boolean canLeaveThePage(){
  return true;
}","public boolean canLeaveThePage(){
  handleLeaveThePage();
  return true;
}",0.8064516129032258
76735,"/** 
 * Search the file on the local disk resources.
 * @param fileDir the file directory
 * @param filePath the file path. May contain the relative directory.
 * @return url of the resource if found, null otherwise.
 */
private URL tryDiskFileSearch(String fileDir,String filePath){
  File f=null;
  String tmpFilePath=toUniversalFileFormat(filePath);
  if (StringUtil.isBlank(fileDir))   f=new File(tmpFilePath);
 else   f=new File(fileDir,tmpFilePath);
  try {
    if (f.exists() && f.isFile())     return f.getCanonicalFile().toURL();
  }
 catch (  IOException e) {
  }
  return null;
}","/** 
 * Search the file on the local disk resources.
 * @param fileDir the file directory
 * @param filePath the file path. May contain the relative directory.
 * @return url of the resource if found, null otherwise.
 */
private URL tryDiskFileSearch(String fileDir,String filePath){
  File f=null;
  String tmpFilePath=ModelUtil.toUniversalFileFormat(filePath);
  if (StringUtil.isBlank(fileDir))   f=new File(tmpFilePath);
 else   f=new File(fileDir,tmpFilePath);
  try {
    if (f.exists() && f.isFile())     return f.getCanonicalFile().toURL();
  }
 catch (  IOException e) {
  }
  return null;
}",0.9915966386554622
76736,"/** 
 * Converts a filename to a valid URL string. The filename can include directory information, either relative or absolute directory.
 * @param filePath the file name
 * @return a valid URL String
 */
public static String convertFileNameToURLString(String filePath){
  StringBuffer buffer=new StringBuffer();
  String path=filePath;
  if (File.separatorChar != '/')   path=path.replace(File.separatorChar,'/');
  for (int i=0; i < path.length(); i++) {
    char c=path.charAt(i);
    if (c < 0x1F || c == 0x7f)     buffer.append(""String_Node_Str"" + Character.toString(c));
 else     if (c == '#')     buffer.append(""String_Node_Str"");
 else     if (c == '%')     buffer.append(""String_Node_Str"");
 else     if (c == '<')     buffer.append(""String_Node_Str"");
 else     if (c == '>')     buffer.append(""String_Node_Str"");
 else     if (c == '""')     buffer.append(""String_Node_Str"");
 else     buffer.append(c);
  }
  return buffer.toString();
}","/** 
 * Converts a filename to a valid URL string. The filename can include directory information, either relative or absolute directory.
 * @param filePath the file name
 * @return a valid URL String
 */
public static String convertFileNameToURLString(String filePath){
  StringBuffer buffer=new StringBuffer();
  String path=filePath;
  path=ModelUtil.toUniversalFileFormat(path);
  for (int i=0; i < path.length(); i++) {
    char c=path.charAt(i);
    if (c < 0x1F || c == 0x7f)     buffer.append(""String_Node_Str"" + Character.toString(c));
 else     if (c == '#')     buffer.append(""String_Node_Str"");
 else     if (c == '%')     buffer.append(""String_Node_Str"");
 else     if (c == '<')     buffer.append(""String_Node_Str"");
 else     if (c == '>')     buffer.append(""String_Node_Str"");
 else     if (c == '""')     buffer.append(""String_Node_Str"");
 else     buffer.append(c);
  }
  return buffer.toString();
}",0.944206008583691
76737,"/** 
 * Computes tick count
 * @return tick count
 */
public final int getTickCount() throws ChartException {
  if (this.oStepNumber != null) {
    if (bCategoryScale || (iType & NUMERICAL) != NUMERICAL) {
      logger.log(new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    }
    return this.oStepNumber.intValue();
  }
  int nTicks=2;
  if ((iType & TEXT) == TEXT || bCategoryScale) {
    if (dsiData != null) {
      nTicks=dsiData.size() + 1;
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      nTicks=(int)Math.ceil((dMax - dMin) / dStep) + 1;
      if (nTicks < 2) {
        nTicks=2;
      }
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      double dMaxLog=(Math.log(dMax) / LOG_10);
      double dMinLog=(Math.log(dMin) / LOG_10);
      double dStepLog=(Math.log(dStep) / LOG_10);
      nTicks=(int)Math.ceil((dMaxLog - dMinLog) / dStepLog) + 1;
      if (nTicks < 2) {
        nTicks=2;
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    nTicks=(int)(Math.ceil(CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit))) / asInteger(oStep)) + 1;
    if (nTicks < 2) {
      nTicks=2;
    }
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  return nTicks;
}","/** 
 * Computes tick count
 * @return tick count
 */
public final int getTickCount() throws ChartException {
  if (this.oStepNumber != null) {
    if (bCategoryScale || (iType & NUMERICAL) != NUMERICAL) {
      logger.log(new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale())));
    }
 else {
      return this.oStepNumber.intValue();
    }
  }
  int nTicks=2;
  if ((iType & TEXT) == TEXT || bCategoryScale) {
    if (dsiData != null) {
      nTicks=dsiData.size() + 1;
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      nTicks=(int)Math.ceil((dMax - dMin) / dStep) + 1;
      if (nTicks < 2) {
        nTicks=2;
      }
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      double dMax=asDouble(oMaximum).doubleValue();
      double dMin=asDouble(oMinimum).doubleValue();
      double dStep=asDouble(oStep).doubleValue();
      double dMaxLog=(Math.log(dMax) / LOG_10);
      double dMinLog=(Math.log(dMin) / LOG_10);
      double dStepLog=(Math.log(dStep) / LOG_10);
      nTicks=(int)Math.ceil((dMaxLog - dMinLog) / dStepLog) + 1;
      if (nTicks < 2) {
        nTicks=2;
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    nTicks=(int)(Math.ceil(CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit))) / asInteger(oStep)) + 1;
    if (nTicks < 2) {
      nTicks=2;
    }
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  return nTicks;
}",0.9956709956709956
76738,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_SCALE);
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(4,false);
    glContent.marginHeight=10;
    glContent.marginWidth=10;
    glContent.horizontalSpacing=5;
    glContent.verticalSpacing=10;
    cmpContent.setLayout(glContent);
  }
  Group grpScale=new Group(cmpContent,SWT.NONE);
{
    GridData gdGRPScale=new GridData(GridData.FILL_BOTH);
    gdGRPScale.horizontalSpan=4;
    grpScale.setLayoutData(gdGRPScale);
    GridLayout glScale=new GridLayout();
    glScale.numColumns=4;
    glScale.horizontalSpacing=5;
    glScale.verticalSpacing=5;
    glScale.marginHeight=2;
    glScale.marginWidth=7;
    grpScale.setLayout(glScale);
    grpScale.setText(Messages.getString(""String_Node_Str""));
  }
  btnStepAuto=new Button(grpScale,SWT.RADIO);
{
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    btnStepAuto.setLayoutData(gd);
    btnStepAuto.setText(Messages.getString(""String_Node_Str""));
    btnStepAuto.setSelection(!getScale().isSetStep() && (!getScale().isSetStepNumber() || getValueType() != TextEditorComposite.TYPE_NUMBERIC));
    btnStepAuto.addListener(SWT.Selection,this);
  }
  btnStepSize=new Button(grpScale,SWT.RADIO);
{
    btnStepSize.setText(Messages.getString(""String_Node_Str""));
    btnStepSize.setSelection(getScale().isSetStep());
    btnStepSize.addListener(SWT.Selection,this);
  }
  txtStepSize=new TextEditorComposite(grpScale,SWT.BORDER | SWT.SINGLE,TextEditorComposite.TYPE_NUMBERIC);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=100;
    txtStepSize.setLayoutData(gd);
    String str=""String_Node_Str"";
    if (getScale().isSetStep()) {
      str=String.valueOf(getScale().getStep());
    }
    txtStepSize.setText(str);
    txtStepSize.addListener(this);
    txtStepSize.addListener(SWT.Modify,this);
    txtStepSize.setDefaultValue(""String_Node_Str"");
  }
  lblUnit=new Label(grpScale,SWT.NONE);
{
    lblUnit.setText(Messages.getString(""String_Node_Str""));
  }
  cmbScaleUnit=new Combo(grpScale,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gdCMBScaleUnit=new GridData(GridData.FILL_HORIZONTAL);
    cmbScaleUnit.setLayoutData(gdCMBScaleUnit);
    cmbScaleUnit.addListener(SWT.Selection,this);
    NameSet ns=LiteralHelper.scaleUnitTypeSet;
    cmbScaleUnit.setItems(ns.getDisplayNames());
    cmbScaleUnit.select(ns.getSafeNameIndex(getScale().getUnit().getName()));
  }
  btnStepNumber=new Button(grpScale,SWT.RADIO);
{
    btnStepNumber.setText(Messages.getString(""String_Node_Str""));
    btnStepNumber.setSelection(getScale().isSetStepNumber());
    btnStepNumber.addListener(SWT.Selection,this);
  }
  spnStepNumber=new Spinner(grpScale,SWT.BORDER);
{
    spnStepNumber.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    spnStepNumber.setMinimum(2);
    spnStepNumber.setMaximum(100);
    spnStepNumber.setSelection(getScale().getStepNumber());
    spnStepNumber.addListener(SWT.Selection,this);
  }
  new Label(grpScale,SWT.NONE);
  new Label(grpScale,SWT.NONE);
  lblMin=new Label(cmpContent,SWT.NONE);
  lblMin.setText(Messages.getString(""String_Node_Str""));
  txtScaleMin=new TextEditorComposite(cmpContent,SWT.BORDER | SWT.SINGLE,getValueType());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=80;
    txtScaleMin.setLayoutData(gd);
    txtScaleMin.setText(getValue(getScale().getMin()));
    txtScaleMin.addListener(this);
    txtScaleMin.setDefaultValue(""String_Node_Str"");
  }
  lblMax=new Label(cmpContent,SWT.NONE);
  lblMax.setText(Messages.getString(""String_Node_Str""));
  txtScaleMax=new TextEditorComposite(cmpContent,SWT.BORDER | SWT.SINGLE,getValueType());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=80;
    txtScaleMax.setLayoutData(gd);
    txtScaleMax.setText(getValue(getScale().getMax()));
    txtScaleMax.addListener(this);
    txtScaleMax.setDefaultValue(""String_Node_Str"");
  }
  setState();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_SCALE);
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(4,false);
    glContent.marginHeight=10;
    glContent.marginWidth=10;
    glContent.horizontalSpacing=5;
    glContent.verticalSpacing=10;
    cmpContent.setLayout(glContent);
  }
  Group grpScale=new Group(cmpContent,SWT.NONE);
{
    GridData gdGRPScale=new GridData(GridData.FILL_BOTH);
    gdGRPScale.horizontalSpan=4;
    grpScale.setLayoutData(gdGRPScale);
    GridLayout glScale=new GridLayout();
    glScale.numColumns=4;
    glScale.horizontalSpacing=5;
    glScale.verticalSpacing=5;
    glScale.marginHeight=2;
    glScale.marginWidth=7;
    grpScale.setLayout(glScale);
    grpScale.setText(Messages.getString(""String_Node_Str""));
  }
  btnStepAuto=new Button(grpScale,SWT.RADIO);
{
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    btnStepAuto.setLayoutData(gd);
    btnStepAuto.setText(Messages.getString(""String_Node_Str""));
    btnStepAuto.addListener(SWT.Selection,this);
  }
  btnStepSize=new Button(grpScale,SWT.RADIO);
{
    btnStepSize.setText(Messages.getString(""String_Node_Str""));
    btnStepSize.addListener(SWT.Selection,this);
  }
  txtStepSize=new TextEditorComposite(grpScale,SWT.BORDER | SWT.SINGLE,TextEditorComposite.TYPE_NUMBERIC);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=100;
    txtStepSize.setLayoutData(gd);
    String str=""String_Node_Str"";
    if (getScale().isSetStep()) {
      str=String.valueOf(getScale().getStep());
    }
    txtStepSize.setText(str);
    txtStepSize.addListener(this);
    txtStepSize.addListener(SWT.Modify,this);
    txtStepSize.setDefaultValue(""String_Node_Str"");
  }
  lblUnit=new Label(grpScale,SWT.NONE);
{
    lblUnit.setText(Messages.getString(""String_Node_Str""));
  }
  cmbScaleUnit=new Combo(grpScale,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gdCMBScaleUnit=new GridData(GridData.FILL_HORIZONTAL);
    cmbScaleUnit.setLayoutData(gdCMBScaleUnit);
    cmbScaleUnit.addListener(SWT.Selection,this);
    NameSet ns=LiteralHelper.scaleUnitTypeSet;
    cmbScaleUnit.setItems(ns.getDisplayNames());
    cmbScaleUnit.select(ns.getSafeNameIndex(getScale().getUnit().getName()));
  }
  btnStepNumber=new Button(grpScale,SWT.RADIO);
{
    btnStepNumber.setText(Messages.getString(""String_Node_Str""));
    btnStepNumber.addListener(SWT.Selection,this);
  }
  spnStepNumber=new Spinner(grpScale,SWT.BORDER);
{
    spnStepNumber.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    spnStepNumber.setMinimum(2);
    spnStepNumber.setMaximum(100);
    spnStepNumber.setSelection(getScale().getStepNumber());
    spnStepNumber.addListener(SWT.Selection,this);
  }
  new Label(grpScale,SWT.NONE);
  new Label(grpScale,SWT.NONE);
  lblMin=new Label(cmpContent,SWT.NONE);
  lblMin.setText(Messages.getString(""String_Node_Str""));
  txtScaleMin=new TextEditorComposite(cmpContent,SWT.BORDER | SWT.SINGLE,getValueType());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=80;
    txtScaleMin.setLayoutData(gd);
    txtScaleMin.setText(getValue(getScale().getMin()));
    txtScaleMin.addListener(this);
    txtScaleMin.setDefaultValue(""String_Node_Str"");
  }
  lblMax=new Label(cmpContent,SWT.NONE);
  lblMax.setText(Messages.getString(""String_Node_Str""));
  txtScaleMax=new TextEditorComposite(cmpContent,SWT.BORDER | SWT.SINGLE,getValueType());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=80;
    txtScaleMax.setLayoutData(gd);
    txtScaleMax.setText(getValue(getScale().getMax()));
    txtScaleMax.addListener(this);
    txtScaleMax.setDefaultValue(""String_Node_Str"");
  }
  btnStepSize.setSelection(getScale().isSetStep());
  if (!btnStepSize.getSelection()) {
    if (getValueType() != TextEditorComposite.TYPE_NUMBERIC) {
      btnStepAuto.setSelection(true);
    }
 else {
      btnStepNumber.setSelection(getScale().isSetStepNumber());
      btnStepAuto.setSelection(!getScale().isSetStep() && !getScale().isSetStepNumber());
    }
  }
  setState();
  return cmpContent;
}",0.9158855751673768
76739,"private double[] computeHorizalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dRowHeight;
  double dRealWidth=0, dExtraHeight=0;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    while (obj == null && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dRowHeight=dHeight + legendData.dVerticalReservedSpace;
  if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    dHeight=-legendData.dVerticalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dHeight+=dExtraHeight + legendData.dVerticalReservedSpace;
  dWidth=Math.max(dWidth,dRealWidth);
  return new double[]{dHeight,dWidth};
}","private double[] computeHorizalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dRowHeight;
  double dRealWidth=0, dExtraHeight=0;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    while (obj == null && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dRowHeight=dHeight + legendData.dVerticalReservedSpace;
  if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    dHeight=-legendData.dVerticalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dHeight+=dExtraHeight + legendData.dVerticalReservedSpace;
  dWidth=Math.max(dWidth,dRealWidth);
  return new double[]{dWidth,dHeight};
}",0.9984538074990336
76740,"private double[] computeHorizalByTopBottomValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dH, dMaxH=0, dRowHeight;
  double dRealWidth=0, dExtraHeight=0, dDeltaWidth;
  ArrayList columnList=new ArrayList();
  legendData.dSeparatorThickness+=legendData.dVerticalSpacing;
  for (int j=0; j < seda.length; j++) {
    dWidth=0;
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dH=bb.getHeight();
      double dFHeight=dH;
      double dFWidth=bb.getWidth();
      double dEHeight=0;
      String extraText=null;
      dDeltaWidth=legendData.insCa.getLeft() + (3 * legendData.dItemHeight) / 2 + dFWidth + legendData.insCa.getRight() + legendData.dHorizontalSpacing;
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dEHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dH+=dEHeight + 2 * legendData.dScale;
          dDeltaWidth=Math.max(dDeltaWidth,itm.getFullWidth());
        }
      }
      if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
        dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
        if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          dMaxH=-legendData.dVerticalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraHeight+=dRowHeight;
          dMaxH=dH;
          dRealWidth=Math.max(dRealWidth,dWidth);
          dWidth=dDeltaWidth;
        }
      }
 else {
        dMaxH=Math.max(dH,dMaxH);
        dWidth+=dDeltaWidth;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dEHeight,extraText));
    }
    dRealWidth=Math.max(dRealWidth,dWidth);
    dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
    if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie) {
        dExtraHeight+=dRowHeight;
        if (j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
          dHeight+=legendData.dSeparatorThickness;
          legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(0,dExtraHeight - legendData.dSeparatorThickness / 2),dRealWidth,0,null,0,null));
        }
      }
    }
    columnList.clear();
    dMaxH=0;
    dWidth=0;
  }
  dHeight+=dExtraHeight;
  dWidth=Math.max(dRealWidth,dWidth);
  return new double[]{dHeight,dWidth};
}","private double[] computeHorizalByTopBottomValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dH, dMaxH=0, dRowHeight;
  double dRealWidth=0, dExtraHeight=0, dDeltaWidth;
  ArrayList columnList=new ArrayList();
  legendData.dSeparatorThickness+=legendData.dVerticalSpacing;
  for (int j=0; j < seda.length; j++) {
    dWidth=0;
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dH=bb.getHeight();
      double dFHeight=dH;
      double dFWidth=bb.getWidth();
      double dEHeight=0;
      String extraText=null;
      dDeltaWidth=legendData.insCa.getLeft() + (3 * legendData.dItemHeight) / 2 + dFWidth + legendData.insCa.getRight() + legendData.dHorizontalSpacing;
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dEHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dH+=dEHeight + 2 * legendData.dScale;
          dDeltaWidth=Math.max(dDeltaWidth,itm.getFullWidth());
        }
      }
      if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
        dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
        if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          dMaxH=-legendData.dVerticalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraHeight+=dRowHeight;
          dMaxH=dH;
          dRealWidth=Math.max(dRealWidth,dWidth);
          dWidth=dDeltaWidth;
        }
      }
 else {
        dMaxH=Math.max(dH,dMaxH);
        dWidth+=dDeltaWidth;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dEHeight,extraText));
    }
    dRealWidth=Math.max(dRealWidth,dWidth);
    dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
    if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie) {
        dExtraHeight+=dRowHeight;
        if (j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
          dHeight+=legendData.dSeparatorThickness;
          legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(0,dExtraHeight - legendData.dSeparatorThickness / 2),dRealWidth,0,null,0,null));
        }
      }
    }
    columnList.clear();
    dMaxH=0;
    dWidth=0;
  }
  dHeight+=dExtraHeight;
  dWidth=Math.max(dRealWidth,dWidth);
  return new double[]{dWidth,dHeight};
}",0.9981871742578744
76741,"private double[] computeVerticalByTopBottomValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dW, dMaxW=0, dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dVerticalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dW=bb.getWidth();
      double dFHeight=bb.getHeight();
      double dExtraHeight=0;
      String extraText=null;
      double dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
      double[] newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
      if (newMetrics != null) {
        dW=newMetrics[0];
        dFHeight=newMetrics[1];
      }
      dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dW=Math.max(dW,itm.getFullWidth());
          dExtraHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dDeltaHeight+=dExtraHeight + 2 * legendData.dScale;
        }
      }
      if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
        dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
        if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
          dMaxW=-legendData.dHorizonalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraWidth+=dColumnWidth;
          dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeight=newMetrics[1];
            dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
          }
          dMaxW=dW;
          dRealHeight=Math.max(dRealHeight,dHeight);
          dHeight=dDeltaHeight;
        }
      }
 else {
        dMaxW=Math.max(dW,dMaxW);
        dHeight+=dDeltaHeight;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dW,dFHeight,la.getCaption().getValue(),dExtraHeight,extraText));
    }
    dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
    if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
      dMaxW=-legendData.dHorizonalReservedSpace;
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie && j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
        dHeight+=dSeparatorThickness;
        legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dExtraWidth,dHeight - dSeparatorThickness / 2),dMaxW + legendData.insCa.getLeft() + legendData.insCa.getRight()+ (3 * legendData.dItemHeight) / 2,0,null,0,null));
      }
    }
    columnList.clear();
  }
  dWidth=dMaxW + legendData.dHorizonalReservedSpace + dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}","private double[] computeVerticalByTopBottomValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dW, dMaxW=0, dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dVerticalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      dW=bb.getWidth();
      double dFHeight=bb.getHeight();
      double dExtraHeight=0;
      String extraText=null;
      double dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
      double[] newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
      if (newMetrics != null) {
        dW=newMetrics[0];
        dFHeight=newMetrics[1];
      }
      dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          BoundingBox bbV=null;
          try {
            bbV=Methods.computeBox(xs,IConstants.ABOVE,seLabel,0,0);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
          double dWV=bbV.getWidth();
          double dFHeightV=bbV.getHeight();
          double dExceedingSpaceV=dExtraWidth + dWV + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpaceV,dWV,xs,itm,seLabel,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeightV=newMetrics[1];
          }
          dW=Math.max(dW,itm.getFullWidth());
          dExtraHeight=Math.max(itm.getFullHeight(),dFHeightV);
          extraText=seLabel.getCaption().getValue();
          dDeltaHeight+=dExtraHeight + 2 * legendData.dScale;
        }
      }
      if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
        dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
        if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
          dMaxW=-legendData.dHorizonalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraWidth+=dColumnWidth;
          dExceedingSpace=dExtraWidth + dW + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
          newMetrics=checkEllipsisText(dExceedingSpace,dW,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
          if (newMetrics != null) {
            dW=newMetrics[0];
            dFHeight=newMetrics[1];
            dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
          }
          dMaxW=dW;
          dRealHeight=Math.max(dRealHeight,dHeight);
          dHeight=dDeltaHeight;
        }
      }
 else {
        dMaxW=Math.max(dW,dMaxW);
        dHeight+=dDeltaHeight;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dW,dFHeight,la.getCaption().getValue(),dExtraHeight,extraText));
    }
    dColumnWidth=dMaxW + legendData.dHorizonalReservedSpace;
    if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
      dMaxW=-legendData.dHorizonalReservedSpace;
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie && j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
        dHeight+=dSeparatorThickness;
        legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dExtraWidth,dHeight - dSeparatorThickness / 2),dMaxW + legendData.insCa.getLeft() + legendData.insCa.getRight()+ (3 * legendData.dItemHeight) / 2,0,null,0,null));
      }
    }
    columnList.clear();
  }
  dWidth=dMaxW + legendData.dHorizonalReservedSpace + dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}",0.9274329979520968
76742,"private double[] computeHorizalByLeftRightValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dMaxH=0, dRowHeight;
  double dRealWidth=0, dExtraHeight=0, dDeltaWidth;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dHorizontalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      double dH=bb.getHeight();
      double dFHeight=dH;
      double dFWidth=bb.getWidth();
      double dEHeight=0;
      String extraText=null;
      dDeltaWidth=legendData.insCa.getLeft() + (3 * legendData.dItemHeight) / 2 + dFWidth + legendData.insCa.getRight() + legendData.dHorizontalSpacing;
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dEHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dH+=dEHeight + 2 * legendData.dScale;
          dDeltaWidth=Math.max(dDeltaWidth,itm.getFullWidth());
        }
      }
      if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
        dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
        if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          dMaxH=-legendData.dVerticalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraHeight+=dRowHeight;
          dMaxH=dH;
          dRealWidth=Math.max(dRealWidth,dWidth);
          dWidth=dDeltaWidth;
        }
      }
 else {
        dMaxH=Math.max(dH,dMaxH);
        dWidth+=dDeltaWidth;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dEHeight,extraText));
    }
    dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
    if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
      dMaxH=-legendData.dVerticalReservedSpace;
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie && j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
        dWidth+=dSeparatorThickness;
        legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dWidth - dSeparatorThickness / 2,dExtraHeight),0,dMaxH + legendData.insCa.getTop() + legendData.insCa.getBottom(),null,0,null));
      }
    }
    columnList.clear();
  }
  dHeight+=legendData.dVerticalReservedSpace + dMaxH + dExtraHeight;
  dWidth=Math.max(dRealWidth,dWidth);
  return new double[]{dHeight,dWidth};
}","private double[] computeHorizalByLeftRightValue(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dMaxH=0, dRowHeight;
  double dRealWidth=0, dExtraHeight=0, dDeltaWidth;
  ArrayList columnList=new ArrayList();
  double dSeparatorThickness=legendData.dSeparatorThickness + legendData.dHorizontalSpacing;
  for (int j=0; j < seda.length; j++) {
    List al=seda[j].getRunTimeSeries();
    FormatSpecifier fs=seda[j].getFormatSpecifier();
    boolean oneVisibleSerie=false;
    for (int i=0; i < al.size(); i++) {
      Series se=(Series)al.get(i);
      if (se.isVisible()) {
        oneVisibleSerie=true;
      }
 else {
        continue;
      }
      Object obj=se.getSeriesIdentifier();
      String lgtext=rtc.externalizedMessage(String.valueOf(obj));
      if (fs != null) {
        try {
          lgtext=ValueFormatter.format(lgtext,fs,rtc.getULocale(),null);
        }
 catch (        ChartException e) {
        }
      }
      la.getCaption().setValue(lgtext);
      itm.reuse(la,legendData.maxWrappingSize);
      BoundingBox bb=null;
      try {
        bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
      }
      double dH=bb.getHeight();
      double dFHeight=dH;
      double dFWidth=bb.getWidth();
      double dEHeight=0;
      String extraText=null;
      dDeltaWidth=legendData.insCa.getLeft() + (3 * legendData.dItemHeight) / 2 + dFWidth + legendData.insCa.getRight() + legendData.dHorizontalSpacing;
      if (cm.getLegend().isShowValue()) {
        DataSetIterator dsiBase=null;
        try {
          dsiBase=new DataSetIterator(se.getDataSet());
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
        }
        if (dsiBase.hasNext()) {
          obj=dsiBase.next();
          while (obj == null && dsiBase.hasNext()) {
            obj=dsiBase.next();
          }
          String valueText=String.valueOf(obj);
          if (fs != null) {
            try {
              lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
            }
 catch (            ChartException e) {
            }
          }
          Label seLabel=LabelImpl.copyInstance(se.getLabel());
          seLabel.getCaption().setValue(valueText);
          itm.reuse(seLabel);
          dEHeight=itm.getFullHeight();
          extraText=seLabel.getCaption().getValue();
          dH+=dEHeight + 2 * legendData.dScale;
          dDeltaWidth=Math.max(dDeltaWidth,itm.getFullWidth());
        }
      }
      if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
        dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
        if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
          dMaxH=-legendData.dVerticalReservedSpace;
          columnList.clear();
          break;
        }
 else {
          legendData.legendItems.addAll(columnList);
          columnList.clear();
          dExtraHeight+=dRowHeight;
          dMaxH=dH;
          dRealWidth=Math.max(dRealWidth,dWidth);
          dWidth=dDeltaWidth;
        }
      }
 else {
        dMaxH=Math.max(dH,dMaxH);
        dWidth+=dDeltaWidth;
      }
      columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dEHeight,extraText));
    }
    dRowHeight=dMaxH + legendData.dVerticalReservedSpace;
    if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
      dMaxH=-legendData.dVerticalReservedSpace;
    }
 else {
      legendData.legendItems.addAll(columnList);
      if (oneVisibleSerie && j < seda.length - 1 && (cm.getLegend().getSeparator() == null || cm.getLegend().getSeparator().isVisible())) {
        dWidth+=dSeparatorThickness;
        legendData.legendItems.add(new LegendItemHints(LEGEND_SEPERATOR,new Point(dWidth - dSeparatorThickness / 2,dExtraHeight),0,dMaxH + legendData.insCa.getTop() + legendData.insCa.getBottom(),null,0,null));
      }
    }
    columnList.clear();
  }
  dHeight+=legendData.dVerticalReservedSpace + dMaxH + dExtraHeight;
  dWidth=Math.max(dRealWidth,dWidth);
  return new double[]{dWidth,dHeight};
}",0.997516369383608
76743,"/** 
 * Return URL for test table
 * @return
 */
public static String getURL(){
  String url=System.getProperty(""String_Node_Str"");
  if (url == null)   url=""String_Node_Str"" + System.getProperty(""String_Node_Str"") + File.separator+ ""String_Node_Str"";
  try {
    new File(System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"").createNewFile();
  }
 catch (  Exception e) {
  }
  throw new NullPointerException(url + ""String_Node_Str"" + System.getProperty(""String_Node_Str""));
}","/** 
 * Return URL for test table
 * @return
 */
public static String getURL(){
  String url=System.getProperty(""String_Node_Str"");
  if (url == null)   url=""String_Node_Str"" + System.getProperty(""String_Node_Str"") + File.separator+ ""String_Node_Str"";
  return url;
}",0.6710182767624021
76744,"/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode){
  QueryDefinition qd=new QueryDefinition();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName1);
      subRowExprName1=new String[3];
      subRowExprName1[0]=""String_Node_Str"";
      subRowExprName1[1]=""String_Node_Str"";
      subRowExprName1[2]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[3];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      exprs[2]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName1.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName1[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  return qd;
}","/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode){
  QueryDefinition qd=new QueryDefinition();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName1);
      subRowExprName1=new String[3];
      subRowExprName1[0]=""String_Node_Str"";
      subRowExprName1[1]=""String_Node_Str"";
      subRowExprName1[2]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[3];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      exprs[2]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName1.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName1[i],exprs[i]);
      if (this.USE_DATE_IN_SUBQUERY)       subqueryDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  return qd;
}",0.9850328416065468
76745,"/** 
 * @throws BirtException
 */
private void displayPreResult(IQueryResults qr,boolean printGroupInfo,boolean useSkipTo) throws BirtException {
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  if (useSkipTo) {
    if (this.PRE_use_skipto_num == -1)     ri.moveTo(0);
 else     ri.moveTo(this.PRE_use_skipto_num);
  }
 else {
    ri.next();
  }
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    if (this.updateNewBindingName != null && this.updateNewBindingExpr != null)     abc+=ri.getValue(this.updateNewBindingName) + ""String_Node_Str"";
    if (printGroupInfo)     abc+=ri.getStartingGroupLevel() + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    if (this.UPDATE_add_subquery == 1) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
    if (this.UPDATE_add_subquery == 2) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName2,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName2.length; i++)         abc+=subRi.getValue(subRowExprName2[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
  }
 while (ri.next());
  if (this.TEST_ISEMPTY)   assertTrue(ri.isEmpty());
 else   assertFalse(ri.isEmpty());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  myPreDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void displayPreResult(IQueryResults qr,boolean printGroupInfo,boolean useSkipTo) throws BirtException {
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  if (useSkipTo) {
    if (this.PRE_use_skipto_num == -1)     ri.moveTo(0);
 else     ri.moveTo(this.PRE_use_skipto_num);
  }
 else {
    ri.next();
  }
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    if (this.updateNewBindingName != null && this.updateNewBindingExpr != null)     abc+=ri.getValue(this.updateNewBindingName) + ""String_Node_Str"";
    if (printGroupInfo)     abc+=ri.getStartingGroupLevel() + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    if (this.UPDATE_add_subquery == 1) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
        this.testPrintln(abc);
      }
    }
    if (this.UPDATE_add_subquery == 2) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName2,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName2.length; i++)         abc+=subRi.getValue(subRowExprName2[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
  }
 while (ri.next());
  if (this.TEST_ISEMPTY)   assertTrue(ri.isEmpty());
 else   assertFalse(ri.isEmpty());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  myPreDataEngine.shutdown();
}",0.9764291519913304
76746,"public void setUp() throws Exception {
  super.setUp();
  this.USE_ROW_IN_AGGREGATION=false;
  this.GEN_queryResultID=null;
  this.UPDATE_queryResultID=null;
  this.USE_DATE_IN_COLUMNBINDING=true;
  this.GEN_add_subquery=false;
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_print=false;
  this.GEN_use_invalid_column=false;
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=false;
  this.UPDATE_add_diff_group=false;
  this.UPDATE_add_same_group=false;
  this.UPDATE_add_subquery=0;
  this.PRE_add_filter=-1;
  this.PRE_add_sort=false;
  this.PRE_execute_query=false;
  this.PRE_print_groupinfo=false;
  this.PRE_use_skipto=false;
  this.PRE_use_skipto_num=-1;
  this.PRE_add_group=-1;
  this.PRE_basedon_genfilter=false;
  this.GEN_filterDefn=new ArrayList();
  this.UPDATE_filterDefn=new ArrayList();
  this.TEST_ISEMPTY=false;
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
}","public void setUp() throws Exception {
  super.setUp();
  this.USE_ROW_IN_AGGREGATION=false;
  this.GEN_queryResultID=null;
  this.UPDATE_queryResultID=null;
  this.USE_DATE_IN_COLUMNBINDING=true;
  this.GEN_add_subquery=false;
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_print=false;
  this.GEN_use_invalid_column=false;
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=false;
  this.UPDATE_add_diff_group=false;
  this.UPDATE_add_same_group=false;
  this.UPDATE_add_subquery=0;
  this.USE_DATE_IN_SUBQUERY=false;
  this.PRE_add_filter=-1;
  this.PRE_add_sort=false;
  this.PRE_execute_query=false;
  this.PRE_print_groupinfo=false;
  this.PRE_use_skipto=false;
  this.PRE_use_skipto_num=-1;
  this.PRE_add_group=-1;
  this.PRE_basedon_genfilter=false;
  this.GEN_filterDefn=new ArrayList();
  this.UPDATE_filterDefn=new ArrayList();
  this.TEST_ISEMPTY=false;
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
}",0.981313400961025
76747,"/** 
 * @throws BirtException
 */
private void genBasicIV() throws BirtException {
  QueryDefinition qd=newGenIVReportQuery();
  if (!this.usesDetails) {
    qd.setUsesDetails(false);
  }
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  GEN_queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    if (this.GEN_print == true)     this.testPrintln(abc);
    if (this.GEN_add_subquery == true) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++) {
          abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        }
      }
      subRi.close();
    }
  }
  if (this.GEN_print == true)   this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genBasicIV() throws BirtException {
  QueryDefinition qd=newGenIVReportQuery();
  if (!this.usesDetails) {
    qd.setUsesDetails(false);
  }
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  GEN_queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    if (this.GEN_print == true)     this.testPrintln(abc);
    if (this.GEN_add_subquery == true) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++) {
          abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        }
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
      }
      subRi.close();
    }
  }
  if (this.GEN_print == true)   this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.9634607307853844
76748,"/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  SortDefinition sortDefn=new SortDefinition();
  sortDefn.setColumn(""String_Node_Str"");
  qd.addSort(sortDefn);
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName1);
      subRowExprName1=new String[3];
      subRowExprName1[0]=""String_Node_Str"";
      subRowExprName1[1]=""String_Node_Str"";
      subRowExprName1[2]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[3];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      exprs[2]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName1.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName1[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  return qd;
}","/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  SortDefinition sortDefn=new SortDefinition();
  sortDefn.setColumn(""String_Node_Str"");
  qd.addSort(sortDefn);
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName1);
      subRowExprName1=new String[3];
      subRowExprName1[0]=""String_Node_Str"";
      subRowExprName1[1]=""String_Node_Str"";
      subRowExprName1[2]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[3];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      exprs[2]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName1.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName1[i],exprs[i]);
      if (this.USE_DATE_IN_SUBQUERY)       subqueryDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  return qd;
}",0.9686583990980834
76749,"protected static Command pasteParameterGroup(String commandType,Object childGroup,ParameterGroupHandle targetGroup){
  CompoundCommand commands=new CompoundCommand();
  ParameterGroupHandle childHandle=null;
  if (childGroup instanceof ParameterGroupHandle) {
    childHandle=(ParameterGroupHandle)childGroup;
  }
 else   if (DEUtil.isParameterGroup(childGroup)) {
    childHandle=(ParameterGroupHandle)((IDesignElement)childGroup).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  }
  if (childHandle != null) {
    SlotHandle transferSlot=childHandle.getParameters();
    for (Iterator i=transferSlot.iterator(); i.hasNext(); ) {
      commands.add(getNewCommand(commandType,i.next(),targetGroup,-1));
    }
  }
  return commands;
}","protected static Command pasteParameterGroup(String commandType,Object childGroup,ParameterGroupHandle targetGroup) throws SemanticException {
  CompoundCommand commands=new CompoundCommand();
  ParameterGroupHandle childHandle=null;
  if (childGroup instanceof ParameterGroupHandle) {
    childHandle=(ParameterGroupHandle)childGroup;
  }
 else   if (DEUtil.isParameterGroup(childGroup)) {
    childHandle=(ParameterGroupHandle)((IDesignElement)childGroup).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  }
  if (childHandle != null) {
    SlotHandle transferSlot=childHandle.getParameters();
    for (Iterator i=transferSlot.iterator(); i.hasNext(); ) {
      commands.add(getNewCommand(commandType,i.next(),targetGroup,-1));
    }
  }
  if (commandType.equals(TYPE_CUT)) {
    childHandle.drop();
  }
  return commands;
}",0.9226993865030676
76750,"/** 
 * Returns specified command
 * @param commandType command type, value is <code>TYPE_CUT</code> or <code>TYPE_COPY</code>
 * @param transferSource transfer source
 * @param newContainer the new container
 * @param position the position will be added
 * @return command
 */
protected static Command getNewCommand(String commandType,Object transferSource,Object newContainer,int position){
  boolean isCut=TYPE_CUT.equals(commandType);
  if (newContainer instanceof ParameterGroupHandle && (transferSource instanceof ParameterGroupHandle || DEUtil.isParameterGroup(transferSource))) {
    return pasteParameterGroup(commandType,transferSource,(ParameterGroupHandle)newContainer);
  }
 else   if (transferSource instanceof DesignElementHandle) {
    return new PasteCommand((DesignElementHandle)transferSource,newContainer,position,isCut);
  }
 else   if (transferSource instanceof IDesignElement) {
    return new PasteCommand((IDesignElement)transferSource,newContainer,position);
  }
  return null;
}","/** 
 * Returns specified command
 * @param commandType command type, value is <code>TYPE_CUT</code> or <code>TYPE_COPY</code>
 * @param transferSource transfer source
 * @param newContainer the new container
 * @param position the position will be added
 * @return command
 */
protected static Command getNewCommand(String commandType,Object transferSource,Object newContainer,int position) throws SemanticException {
  boolean isCut=TYPE_CUT.equals(commandType);
  if (newContainer instanceof ParameterGroupHandle && (transferSource instanceof ParameterGroupHandle || DEUtil.isParameterGroup(transferSource))) {
    return pasteParameterGroup(commandType,transferSource,(ParameterGroupHandle)newContainer);
  }
 else   if (transferSource instanceof DesignElementHandle) {
    return new PasteCommand((DesignElementHandle)transferSource,newContainer,position,isCut);
  }
 else   if (transferSource instanceof IDesignElement) {
    return new PasteCommand((IDesignElement)transferSource,newContainer,position);
  }
  return null;
}",0.987229862475442
76751,"protected static void addCommandToCompound(Object transferData,Object targetObj,int position,String commandName,String commandType,CompoundCommand commands){
  if (transferData instanceof SlotHandle) {
    transferData=transferSlotHandle(commandType,transferData);
  }
  if (transferData instanceof Object[]) {
    Object[] array=(Object[])transferData;
    for (int i=0; i < array.length; i++) {
      if (array[i] instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)array[i]).getElementHandle().getRoot() instanceof LibraryHandle) {
          try {
            array[i]=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)array[i],SessionHandleAdapter.getInstance().getReportDesignHandle());
          }
 catch (          LibraryException e) {
          }
        }
      }
      addCommandToCompound(array[i],targetObj,position,commandName,commandType,commands);
      if (position > -1) {
        position++;
      }
    }
  }
 else   if (transferData instanceof DesignElementHandle || transferData instanceof IDesignElement) {
    if (targetObj instanceof DesignElementHandle || targetObj instanceof SlotHandle) {
      commands.add(getNewCommand(commandType,transferData,targetObj,position));
    }
  }
 else   if (transferData instanceof IStructure) {
    commands.add(new PasteStructureCommand((IStructure)transferData,targetObj));
  }
 else   if (transferData instanceof StructureHandle) {
    commands.add(new PasteStructureCommand(((StructureHandle)transferData).getStructure(),targetObj));
  }
}","protected static void addCommandToCompound(Object transferData,Object targetObj,int position,String commandName,String commandType,CompoundCommand commands) throws SemanticException {
  if (transferData instanceof SlotHandle) {
    transferData=transferSlotHandle(commandType,transferData);
  }
  if (transferData instanceof Object[]) {
    Object[] array=(Object[])transferData;
    for (int i=0; i < array.length; i++) {
      if (array[i] instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)array[i]).getElementHandle().getRoot() instanceof LibraryHandle) {
          try {
            array[i]=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)array[i],SessionHandleAdapter.getInstance().getReportDesignHandle());
          }
 catch (          LibraryException e) {
          }
        }
      }
      addCommandToCompound(array[i],targetObj,position,commandName,commandType,commands);
      if (position > -1) {
        position++;
      }
    }
  }
 else   if (transferData instanceof DesignElementHandle || transferData instanceof IDesignElement) {
    if (targetObj instanceof DesignElementHandle || targetObj instanceof SlotHandle) {
      commands.add(getNewCommand(commandType,transferData,targetObj,position));
    }
  }
 else   if (transferData instanceof IStructure) {
    commands.add(new PasteStructureCommand((IStructure)transferData,targetObj));
  }
 else   if (transferData instanceof StructureHandle) {
    commands.add(new PasteStructureCommand(((StructureHandle)transferData).getStructure(),targetObj));
  }
}",0.9915748541801686
76752,"/** 
 * @param transferSource
 * @return true if parameter is parameter group.
 */
public static boolean isParameterGroup(Object transferSource){
  return (transferSource instanceof IDesignElement && ((IDesignElement)transferSource).getDefn().getName().equals(ReportDesignConstants.PARAMETER_GROUP_ELEMENT));
}","/** 
 * @param transferSource
 * @return true if parameter is parameter group.
 */
public static boolean isParameterGroup(Object transferSource){
  return (transferSource instanceof IDesignElement && (((IDesignElement)transferSource).getDefn().getName().equals(ReportDesignConstants.PARAMETER_GROUP_ELEMENT) || ((IDesignElement)transferSource).getDefn().getName().equals(ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT)));
}",0.8355795148247979
76753,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str"")) {
        resetInterval();
      }
    }
  }
);
  if (getTitle().equals(GroupDialog.GROUP_DLG_TITLE_NEW)) {
    focusListener=new FocusAdapter(){
      public void focusLost(      FocusEvent e){
        if (UIUtil.convertToModelString(keyChooser.getText(),true) != null && UIUtil.convertToModelString(tocEditor.getText(),true) == null) {
          tocEditor.setText(getKeyExpression());
          keyChooser.removeFocusListener(focusListener);
          focusListener=null;
        }
      }
    }
;
    keyChooser.addFocusListener(focusListener);
  }
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
        keyChooser.setFocus();
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Text(intervalRangeArea,SWT.SINGLE | SWT.BORDER);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent event){
      if (event.text.length() <= 0) {
        return;
      }
      int beginIndex=Math.min(event.start,event.end);
      int endIndex=Math.max(event.start,event.end);
      String inputtedText=intervalRange.getText();
      String newString=inputtedText.substring(0,beginIndex);
      newString+=event.text;
      newString+=inputtedText.substring(endIndex);
      event.doit=false;
      try {
        double value=Double.parseDouble(newString);
        if (value >= 0) {
          event.doit=true;
        }
      }
 catch (      NumberFormatException e) {
        return;
      }
    }
  }
);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str"")) {
        resetInterval();
      }
    }
  }
);
  keyChooser.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (keyChooser.getSelectionIndex() != -1) {
        tocEditor.setText(DEUtil.getExpression(columnList.get(keyChooser.getSelectionIndex())));
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  keyChooser.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      String key=UIUtil.convertToModelString(keyChooser.getText(),true);
      if (key != null && keyChooser.indexOf(key) != -1) {
        String tocExp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(key)));
        if (!tocEditor.getText().equals(tocExp)) {
          tocEditor.setText(tocExp);
          return;
        }
      }
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
        keyChooser.setFocus();
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Text(intervalRangeArea,SWT.SINGLE | SWT.BORDER);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent event){
      if (event.text.length() <= 0) {
        return;
      }
      int beginIndex=Math.min(event.start,event.end);
      int endIndex=Math.max(event.start,event.end);
      String inputtedText=intervalRange.getText();
      String newString=inputtedText.substring(0,beginIndex);
      newString+=event.text;
      newString+=inputtedText.substring(endIndex);
      event.doit=false;
      try {
        double value=Double.parseDouble(newString);
        if (value >= 0) {
          event.doit=true;
        }
      }
 catch (      NumberFormatException e) {
        return;
      }
    }
  }
);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}",0.901109057301294
76754,"public void focusLost(FocusEvent e){
  if (UIUtil.convertToModelString(keyChooser.getText(),true) != null && UIUtil.convertToModelString(tocEditor.getText(),true) == null) {
    tocEditor.setText(getKeyExpression());
    keyChooser.removeFocusListener(focusListener);
    focusListener=null;
  }
}","public void focusLost(FocusEvent e){
  String key=UIUtil.convertToModelString(keyChooser.getText(),true);
  if (key != null && keyChooser.indexOf(key) != -1) {
    String tocExp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(key)));
    if (!tocEditor.getText().equals(tocExp)) {
      tocEditor.setText(tocExp);
      return;
    }
  }
}",0.4199066874027994
76755,"/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    if (focusListener != null && UIUtil.convertToModelString(keyChooser.getText(),true) != null && UIUtil.convertToModelString(tocEditor.getText(),true) == null) {
      tocEditor.setText(getKeyExpression());
    }
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
      inputGroup.setTocExpression(newToc);
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getText());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakInside(pagebreakInsideChoicesAll[pagebreakInsideCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
      inputGroup.setTocExpression(newToc);
    }
    int index=keyChooser.getSelectionIndex();
    if (index == -1) {
      index=keyChooser.indexOf(UIUtil.convertToModelString(keyChooser.getText(),true));
    }
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getText());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakInside(pagebreakInsideChoicesAll[pagebreakInsideCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.9407777381377096
76756,"private String getKeyExpression(){
  String exp=null;
  if (keyChooser.getSelectionIndex() != -1) {
    exp=DEUtil.getExpression(columnList.get(keyChooser.getSelectionIndex()));
  }
 else {
    exp=keyChooser.getText().trim();
  }
  return exp;
}","private String getKeyExpression(){
  String exp=null;
  String keyText=UIUtil.convertToModelString(keyChooser.getText(),true);
  if (keyChooser.getSelectionIndex() != -1) {
    exp=DEUtil.getExpression(columnList.get(keyChooser.getSelectionIndex()));
  }
 else   if (keyChooser.indexOf(keyText) != -1) {
    exp=DEUtil.getExpression(columnList.get(keyChooser.indexOf(keyText)));
  }
 else {
    exp=keyChooser.getText().trim();
  }
  return exp;
}",0.6378066378066378
76757,"/** 
 * Initializes all member variables within this object recursively Note: Manually written
 */
protected final void initialize(){
  super.initialize();
  Marker sm=MarkerImpl.create(MarkerType.NABLA_LITERAL,4);
  setStartMarker(sm);
  Marker em=MarkerImpl.create(MarkerType.NABLA_LITERAL,4);
  setEndMarker(em);
  setStartMarkerPosition(Position.BELOW_LITERAL);
  setEndMarkerPosition(Position.ABOVE_LITERAL);
  setLabelPosition(Position.ABOVE_LITERAL);
  LineAttributes la=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  setConnectionLine(la);
  la=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  la.setVisible(false);
  setOutline(la);
  Label lb=LabelImpl.create();
  setDecorationLabel(lb);
}","/** 
 * Initializes all member variables within this object recursively Note: Manually written
 */
protected final void initialize(){
  super.initialize();
  Marker sm=MarkerImpl.create(MarkerType.NABLA_LITERAL,4);
  sm.setVisible(false);
  setStartMarker(sm);
  Marker em=MarkerImpl.create(MarkerType.NABLA_LITERAL,4);
  setEndMarker(em);
  em.setVisible(false);
  setStartMarkerPosition(Position.BELOW_LITERAL);
  setEndMarkerPosition(Position.ABOVE_LITERAL);
  setLabelPosition(Position.ABOVE_LITERAL);
  LineAttributes la=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,8);
  this.setPaletteLineColor(true);
  setConnectionLine(la);
  la=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  la.setVisible(true);
  setOutline(la);
  Label lb=LabelImpl.create();
  setDecorationLabel(lb);
}",0.944
76758,"private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=8;
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  GridLayout glMarker=new GridLayout();
  glMarker.marginHeight=4;
  glMarker.marginWidth=4;
  glMarker.verticalSpacing=4;
  glMarker.horizontalSpacing=4;
  Composite cmpMarker=new Composite(this,SWT.NONE);
  cmpMarker.setLayout(new GridLayout());
  GridData gdMarker=new GridData(GridData.FILL_BOTH);
  gdMarker.horizontalSpan=2;
  cmpMarker.setLayoutData(gdMarker);
  grpMarkerStart=new Group(cmpMarker,SWT.NONE);
  grpMarkerStart.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpMarkerStart.setLayout(glMarker);
  grpMarkerStart.setText(Messages.getString(""String_Node_Str""));
  new MarkerEditorComposite(grpMarkerStart,createMarker(((GanttSeries)series).getStartMarker()));
  grpMarkerEnd=new Group(cmpMarker,SWT.NONE);
  grpMarkerEnd.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpMarkerEnd.setLayout(glMarker);
  grpMarkerEnd.setText(Messages.getString(""String_Node_Str""));
  new MarkerEditorComposite(grpMarkerEnd,createMarker(((GanttSeries)series).getEndMarker()));
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
  gdGRPLine.horizontalSpan=2;
  grpLine.setLayout(new FillLayout());
  grpLine.setLayoutData(gdGRPLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  gliacGantt=new GanttLineAttributesComposite(grpLine,context,SWT.NONE,((GanttSeries)series).getConnectionLine(),true,true,true);
  gliacGantt.addListener(this);
  grpOutline=new Group(this,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_BOTH);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayout(new FillLayout());
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  oliacGantt=new LineAttributesComposite(grpOutline,SWT.NONE,context,((GanttSeries)series).getOutline(),true,true,true);
  oliacGantt.addListener(this);
  Composite cmpFill=new Composite(this,SWT.NONE);
  cmpFill.setLayout(new GridLayout());
  GridData gdFill=new GridData(GridData.FILL_BOTH);
  gdFill.horizontalSpan=2;
  cmpMarker.setLayoutData(gdFill);
  Label lblFill=new Label(cmpFill,SWT.NONE);
  GridData gdLBLFill=new GridData();
  lblFill.setLayoutData(gdLBLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccFill=new FillChooserComposite(cmpFill,SWT.NONE,context,((GanttSeries)series).getOutlineFill(),false,false);
  fccFill.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fccFill.addListener(this);
  btnDecoration=new Button(cmpFill,SWT.CHECK);
{
    btnDecoration.setText(Messages.getString(""String_Node_Str""));
    btnDecoration.setSelection(((GanttSeries)series).isUseDecorationLabelValue());
    btnDecoration.addSelectionListener(this);
  }
  btnPalette=new Button(cmpFill,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((GanttSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
}","private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=8;
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  GridLayout glMarker=new GridLayout();
  glMarker.marginHeight=4;
  glMarker.marginWidth=4;
  glMarker.verticalSpacing=4;
  glMarker.horizontalSpacing=4;
  Composite cmpMarker=new Composite(this,SWT.NONE);
  cmpMarker.setLayout(new GridLayout());
  GridData gdMarker=new GridData(GridData.FILL_BOTH);
  gdMarker.horizontalSpan=2;
  cmpMarker.setLayoutData(gdMarker);
  grpMarkerStart=new Group(cmpMarker,SWT.NONE);
  grpMarkerStart.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpMarkerStart.setLayout(glMarker);
  grpMarkerStart.setText(Messages.getString(""String_Node_Str""));
  new MarkerEditorComposite(grpMarkerStart,createMarker(((GanttSeries)series).getStartMarker()));
  grpMarkerEnd=new Group(cmpMarker,SWT.NONE);
  grpMarkerEnd.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpMarkerEnd.setLayout(glMarker);
  grpMarkerEnd.setText(Messages.getString(""String_Node_Str""));
  new MarkerEditorComposite(grpMarkerEnd,createMarker(((GanttSeries)series).getEndMarker()));
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
  gdGRPLine.horizontalSpan=2;
  grpLine.setLayout(new FillLayout());
  grpLine.setLayoutData(gdGRPLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  gliacGantt=new GanttLineAttributesComposite(grpLine,context,SWT.NONE,((GanttSeries)series).getConnectionLine(),true,true,true);
  gliacGantt.addListener(this);
  grpOutline=new Group(this,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_BOTH);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayout(new FillLayout());
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  oliacGantt=new LineAttributesComposite(grpOutline,SWT.NONE,context,((GanttSeries)series).getOutline(),true,true,true);
  oliacGantt.addListener(this);
  Composite cmpFill=new Composite(this,SWT.NONE);
  cmpFill.setLayout(new GridLayout());
  GridData gdFill=new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_BEGINNING);
  gdFill.horizontalSpan=2;
  cmpFill.setLayoutData(gdFill);
  btnDecoration=new Button(cmpFill,SWT.CHECK);
{
    btnDecoration.setText(Messages.getString(""String_Node_Str""));
    btnDecoration.setSelection(((GanttSeries)series).isUseDecorationLabelValue());
    btnDecoration.addSelectionListener(this);
  }
  btnPalette=new Button(cmpFill,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((GanttSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
}",0.9260981912144702
76759,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  String url=validate(text.getHyperlinkAction());
  boolean metadataOutput=false;
  if (url != null) {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startText(text,HTMLTags.TAG_SPAN);
    }
    tagName=HTMLTags.TAG_A;
    outputAction(text.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startText(text,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleStyle(text,styleBuffer,false);
  String verticalAlign=mergedStyle.getVerticalAlign();
  if (!""String_Node_Str"".equals(verticalAlign) && height != null) {
    writer.openTag(HTMLTags.TAG_TABLE);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(verticalAlign);
    textStyleBuffer.append(""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
 else {
    writer.text(textValue);
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endText(text);
  }
  cellFilled=true;
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  String url=validate(text.getHyperlinkAction());
  boolean metadataOutput=false;
  if (url != null) {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startText(text,HTMLTags.TAG_SPAN);
    }
    tagName=HTMLTags.TAG_A;
    outputAction(text.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startText(text,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleStyle(text,styleBuffer,false);
  String verticalAlign=null;
  String canShrink=""String_Node_Str"";
  if (mergedStyle != null) {
    verticalAlign=mergedStyle.getVerticalAlign();
    canShrink=mergedStyle.getCanShrink();
  }
  if (!""String_Node_Str"".equals(verticalAlign) && height != null && !""String_Node_Str"".equalsIgnoreCase(canShrink)) {
    writer.openTag(HTMLTags.TAG_TABLE);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(verticalAlign == null ? ""String_Node_Str"" : verticalAlign);
    textStyleBuffer.append(""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
 else {
    writer.text(textValue);
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endText(text);
  }
  cellFilled=true;
}",0.9599167100468506
76760,"protected void closeLayout(){
  if (root == null) {
    return;
  }
  IStyle areaStyle=root.getStyle();
  if (!isLast) {
    areaStyle.setProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_MARGIN_BOTTOM,IStyle.NUMBER_0);
  }
  root.setHeight(getCurrentBP() + getOffsetY() + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_BOTTOM))+ getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH)));
}","protected void closeLayout(){
  if (root == null) {
    return;
  }
  IStyle areaStyle=root.getStyle();
  if (!isLast) {
    areaStyle.setProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_MARGIN_BOTTOM,IStyle.NUMBER_0);
  }
  int height=getCurrentBP() + getOffsetY() + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_BOTTOM))+ getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
  if (isFirst && isLast) {
    calculateSpecifiedHeight();
    if (specifiedHeight > height) {
      CSSValue verticalAlign=areaStyle.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        int offset=specifiedHeight - height;
        if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
          Iterator iter=root.getChildren();
          while (iter.hasNext()) {
            AbstractArea child=(AbstractArea)iter.next();
            child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
          }
        }
 else         if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
          Iterator iter=root.getChildren();
          while (iter.hasNext()) {
            AbstractArea child=(AbstractArea)iter.next();
            child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
          }
        }
      }
      height=specifiedHeight;
    }
  }
  root.setHeight(height);
}",0.5060804490177736
76761,"/** 
 * Creates a PdfAction.
 * @param hyperlink			the hyperlink.
 * @param bookmark			the bookmark.
 * @param target			if target equals ""_blank"", the target will be opened in a new window,else the target will be opened in the current window.
 * @return					the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      if (type == IHyperlinkAction.ACTION_HYPERLINK) {
        return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
      }
 else {
        return new PdfAction(hyperlink);
      }
    }
  }
}","/** 
 * Creates a PdfAction.
 * @param hyperlink			the hyperlink.
 * @param bookmark			the bookmark.
 * @param target			if target equals ""_blank"", the target will be opened in a new window,else the target will be opened in the current window.
 * @return					the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}",0.9176788124156544
76762,"/** 
 * Gets the embedded image
 * @param embeddedImage the embedded image data
 * @return Returns the image,or null if the embedded image doesn't exist.
 */
public Image getImage(ModuleHandle handle,String name){
  String key=generateKey(handle,name);
  EmbeddedImage embeddedImage=handle.findImage(name);
  if (embeddedImage == null) {
    removeCachedImage(key);
    return null;
  }
  Image image=getImageRegistry().get(key);
  if (image != null) {
    return image;
  }
  InputStream in=null;
  try {
    if (key.toLowerCase().endsWith(""String_Node_Str"")) {
      JPEGTranscoder transcoder=new JPEGTranscoder();
      transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
      TranscoderInput input=new TranscoderInput(new ByteArrayInputStream(embeddedImage.getData(handle.getModule())));
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput output=new TranscoderOutput(ostream);
      try {
        transcoder.transcode(input,output);
      }
 catch (      TranscoderException e) {
      }
      ostream.flush();
      in=new ByteArrayInputStream(ostream.toByteArray());
    }
 else {
      in=new ByteArrayInputStream(embeddedImage.getData(handle.getModule()));
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  image=new Image(null,in);
  if (image != null) {
    getImageRegistry().put(key,image);
    if (DesignerConstants.TRACING_IMAGE_MANAGER_IMAGE_ADD) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
  return image;
}","/** 
 * Gets the embedded image
 * @param embeddedImage the embedded image data
 * @return Returns the image,or null if the embedded image doesn't exist.
 */
public Image getImage(ModuleHandle handle,String name){
  String key=generateKey(handle,name);
  EmbeddedImage embeddedImage=handle.findImage(name);
  if (embeddedImage == null) {
    removeCachedImage(key);
    return null;
  }
  Image image=getImageRegistry().get(key);
  if (image != null) {
    return image;
  }
  InputStream in=null;
  try {
    if (key.toLowerCase().endsWith(""String_Node_Str"")) {
      JPEGTranscoder transcoder=new JPEGTranscoder();
      transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
      TranscoderInput input=new TranscoderInput(new ByteArrayInputStream(embeddedImage.getData(handle.getModule())));
      input.setURI(generateURL(handle.getFileName()).toString());
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput output=new TranscoderOutput(ostream);
      try {
        transcoder.transcode(input,output);
      }
 catch (      TranscoderException e) {
      }
      ostream.flush();
      in=new ByteArrayInputStream(ostream.toByteArray());
    }
 else {
      in=new ByteArrayInputStream(embeddedImage.getData(handle.getModule()));
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  image=new Image(null,in);
  if (image != null) {
    getImageRegistry().put(key,image);
    if (DesignerConstants.TRACING_IMAGE_MANAGER_IMAGE_ADD) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
  return image;
}",0.9802039592081584
76763,"/** 
 * Returns report design handle
 * @return IViewerReportDesignHandle
 * @throws Exception
 */
protected IViewerReportDesignHandle getDesignHandle() throws Exception {
  if (viewer == null)   return null;
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  String designFile=createAbsolutePath(viewer.getReportDesign());
  String documentFile=createAbsolutePath(viewer.getReportDocument());
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  boolean isValidDocument=ParameterAccessor.isValidFilePath(documentFile);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(designFile,documentFile,getModuleOptions());
    if (reportDocumentInstance != null) {
      this.documentInUrl=true;
      reportRunnable=reportDocumentInstance.getReportRunnable();
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (documentFile != null && designFile == null) {
      if (isValidDocument)       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{documentFile});
 else       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{documentFile});
    }
    if (!ParameterAccessor.isValidFilePath(designFile)) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{designFile});
    }
 else {
      File file=new File(designFile);
      if (file.exists()) {
        reportRunnable=ReportEngineService.getInstance().openReportDesign(designFile,getModuleOptions());
      }
 else       if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
        InputStream is=null;
        URL url=null;
        try {
          String reportPath=designFile;
          if (!reportPath.startsWith(""String_Node_Str""))           reportPath=""String_Node_Str"" + reportPath;
          url=request.getSession().getServletContext().getResource(reportPath);
          if (url != null)           is=url.openStream();
          if (is != null)           reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,getModuleOptions());
        }
 catch (        Exception e) {
        }
      }
      if (reportRunnable == null) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{designFile});
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns report design handle
 * @return IViewerReportDesignHandle
 * @throws Exception
 */
protected IViewerReportDesignHandle getDesignHandle() throws Exception {
  if (viewer == null)   return null;
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  String designFile=createAbsolutePath(viewer.getReportDesign());
  String documentFile=createAbsolutePath(viewer.getReportDocument());
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  boolean isValidDocument=ParameterAccessor.isValidFilePath(documentFile);
  if (documentFile != null && isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(designFile,documentFile,getModuleOptions());
    if (reportDocumentInstance != null) {
      this.documentInUrl=true;
      reportRunnable=reportDocumentInstance.getReportRunnable();
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (documentFile != null && designFile == null) {
      if (isValidDocument)       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{documentFile});
 else       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{documentFile});
    }
    if (!ParameterAccessor.isValidFilePath(designFile)) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{designFile});
    }
 else {
      File file=new File(designFile);
      if (file.exists()) {
        reportRunnable=ReportEngineService.getInstance().openReportDesign(designFile,getModuleOptions());
      }
 else       if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
        InputStream is=null;
        URL url=null;
        try {
          String reportPath=viewer.getReportDesign();
          if (!reportPath.startsWith(""String_Node_Str""))           reportPath=""String_Node_Str"" + reportPath;
          url=request.getSession().getServletContext().getResource(reportPath);
          if (url != null)           is=url.openStream();
          if (is != null)           reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,getModuleOptions());
        }
 catch (        Exception e) {
        }
      }
      if (reportRunnable == null) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{designFile});
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9889397406559878
76764,"/** 
 * Build size style string say, ""width: 10.0mm;"".
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The property name
 * @param value The values of the property
 */
public static void buildSize(StringBuffer content,String name,DimensionType value){
  if (value != null) {
    if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) {
      addPropName(content,HTMLTags.ATTR_MIN_HEIGHT);
      addPropValue(content,""String_Node_Str"");
      content.append(';');
      addPropName(content,HTMLTags.ATTR_HEIGHT);
      addPropValue(content,value.toString());
      content.append(';');
      addPropName(content,HTMLTags.ATTR_MIN_HEIGHT);
      addPropValue(content,value.toString());
      content.append(';');
    }
 else {
      addPropName(content,name);
      addPropValue(content,value.toString());
      content.append(';');
    }
  }
}","/** 
 * Build size style string say, ""width: 10.0mm;"".
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The property name
 * @param value The values of the property
 */
public static void buildSize(StringBuffer content,String name,DimensionType value){
  if (value != null) {
    if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) {
      addPropName(content,HTMLTags.ATTR_HEIGHT);
      addPropValue(content,""String_Node_Str"");
      content.append(';');
      addPropName(content,HTMLTags.ATTR_HEIGHT);
      addPropValue(content,value.toString());
      content.append(';');
      addPropName(content,HTMLTags.ATTR_MIN_HEIGHT);
      addPropValue(content,value.toString());
      content.append(';');
    }
 else {
      addPropName(content,name);
      addPropValue(content,value.toString());
      content.append(';');
    }
  }
}",0.9977116704805492
76765,"/** 
 * Test feature of aggregation expression
 */
public void test_FilteWithTopN() throws Exception {
  String[] bindingNameFilter=new String[3];
  bindingNameFilter[0]=""String_Node_Str"";
  bindingNameFilter[1]=""String_Node_Str"";
  bindingNameFilter[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[3];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[2]=new ScriptExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=null;
  SortDefinition[] sortDefn=null;
  String[] bindingNameFilter1=new String[1];
  bindingNameFilter[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter1=new IBaseExpression[1];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filters=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""))};
  createAndRunQuery(null,null,null,null,null,null,bindingNameFilter,bindingExprFilter,filters,bindingNameRow,bindingExprRow);
}","/** 
 * Test feature of aggregation expression
 */
public void test_FilteWithTopN() throws Exception {
  String[] bindingNameFilter=new String[3];
  bindingNameFilter[0]=""String_Node_Str"";
  bindingNameFilter[1]=""String_Node_Str"";
  bindingNameFilter[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[3];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[2]=new ScriptExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filters=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""))};
  createAndRunQuery(null,null,null,null,null,null,bindingNameFilter,bindingExprFilter,filters,bindingNameRow,bindingExprRow);
}",0.9148170365926814
76766,"/** 
 * filter on date time type column with operator Bottom N
 */
public void test_FilterWithBottomN() throws Exception {
  String[] bindingNameFilter=new String[3];
  bindingNameFilter[0]=""String_Node_Str"";
  bindingNameFilter[1]=""String_Node_Str"";
  bindingNameFilter[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[3];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[2]=new ScriptExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=null;
  SortDefinition[] sortDefn=null;
  String[] bindingNameFilter1=new String[1];
  bindingNameFilter[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter1=new IBaseExpression[1];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filters=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""))};
  createAndRunQuery(null,null,null,null,null,null,bindingNameFilter,bindingExprFilter,filters,bindingNameRow,bindingExprRow);
}","/** 
 * filter on date time type column with operator Bottom N
 */
public void test_FilterWithBottomN() throws Exception {
  String[] bindingNameFilter=new String[3];
  bindingNameFilter[0]=""String_Node_Str"";
  bindingNameFilter[1]=""String_Node_Str"";
  bindingNameFilter[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[3];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprFilter[2]=new ScriptExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filters=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""))};
  createAndRunQuery(null,null,null,null,null,null,bindingNameFilter,bindingExprFilter,filters,bindingNameRow,bindingExprRow);
}",0.9159763313609468
76767,"public void test_sortOnGroupKey() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",2)};
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition()};
}","public void test_sortOnGroupKey() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
}",0.6236933797909407
76768,"public void testToDate1(){
  String[] testStrings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar calendar=Calendar.getInstance();
  Date[] resultDates={null,null,null,null,null,null,null,null,null,null};
  calendar.clear();
  calendar.set(1997,0,1);
  resultDates[0]=calendar.getTime();
  calendar.set(1997,6,1);
  resultDates[1]=calendar.getTime();
  calendar.set(1997,6,16);
  resultDates[2]=calendar.getTime();
  calendar.set(1997,6,16,19,20,0);
  resultDates[3]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  resultDates[4]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,450);
  resultDates[5]=calendar.getTime();
  calendar.set(1997,6,16,19,20,0);
  calendar.set(Calendar.MILLISECOND,0);
  resultDates[6]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  resultDates[7]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,450);
  resultDates[8]=calendar.getTime();
  resultDates[9]=resultDates[8];
  for (int i=0; i < testStrings.length; i++) {
    try {
      Date dateResult=DataTypeUtil.toDate(testStrings[i]);
      System.out.println(""String_Node_Str"" + i);
      System.out.println(dateResult);
      System.out.println(resultDates[i]);
      System.out.println();
      System.out.println(dateResult.getTime());
      System.out.println(resultDates[i].getTime());
      assertEquals(dateResult,resultDates[i]);
    }
 catch (    BirtException e) {
      fail(""String_Node_Str"");
    }
  }
}","public void testToDate1(){
  String[] testStrings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar calendar=Calendar.getInstance();
  Date[] resultDates={null,null,null,null,null,null,null,null,null,null};
  calendar.clear();
  calendar.set(1997,0,1);
  resultDates[0]=calendar.getTime();
  calendar.set(1997,6,1);
  resultDates[1]=calendar.getTime();
  calendar.set(1997,6,16);
  resultDates[2]=calendar.getTime();
  calendar.set(1997,6,16,19,20,0);
  resultDates[3]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  resultDates[4]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,45);
  resultDates[5]=calendar.getTime();
  calendar.set(1997,6,16,19,20,0);
  calendar.set(Calendar.MILLISECOND,0);
  resultDates[6]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  resultDates[7]=calendar.getTime();
  calendar.set(1997,6,16,19,20,30);
  calendar.set(Calendar.MILLISECOND,45);
  resultDates[8]=calendar.getTime();
  resultDates[9]=resultDates[8];
  for (int i=0; i < testStrings.length; i++) {
    try {
      Date dateResult=DataTypeUtil.toDate(testStrings[i]);
      System.out.println(""String_Node_Str"" + i);
      System.out.println(dateResult);
      System.out.println(resultDates[i]);
      System.out.println();
      System.out.println(dateResult.getTime());
      System.out.println(resultDates[i].getTime());
      assertEquals(dateResult,resultDates[i]);
    }
 catch (    BirtException e) {
      fail(""String_Node_Str"");
    }
  }
}",0.9993946731234868
76769,"/** 
 * Test DataTypeUtil#checkValid
 */
public void testCheckValid(){
  ULocale locale;
  DateFormat df;
  String dateStr;
  boolean isValid;
  locale=ULocale.UK;
  df=DateFormat.getDateInstance(DateFormat.SHORT,locale);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  locale=ULocale.US;
  df=DateFormat.getDateInstance(DateFormat.SHORT,locale);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  locale=ULocale.CHINA;
  df=DateFormat.getDateInstance(DateFormat.SHORT,locale);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
}","/** 
 * Test DataTypeUtil#checkValid
 */
public void testCheckValid(){
  ULocale locale;
  DateFormat df;
  String dateStr;
  boolean isValid;
  locale=ULocale.UK;
  df=DateFormat.getDateInstance(DateFormat.SHORT,locale.toLocale());
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  locale=ULocale.US;
  df=DateFormat.getDateInstance(DateFormat.SHORT,locale.toLocale());
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  locale=ULocale.CHINA;
  df=DateFormat.getDateInstance(DateFormat.SHORT,locale.toLocale());
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertFalse(isValid);
  dateStr=""String_Node_Str"";
  try {
    df.parse(dateStr);
  }
 catch (  ParseException e) {
    fail(""String_Node_Str"");
  }
  isValid=DateUtil.checkValid(df,dateStr);
  assertTrue(isValid);
}",0.9955022488755624
76770,"/** 
 * Convert string to date with check. JDK may do incorrect converse, for example: 2005/1/1 Local.US, format pattern is MM/dd/YY. Above conversion can be done without error, but obviously the result is not right. This method will do such a simple check, in DateFormat.SHORT case instead of all cases. Year is not lower than 0. Month is from 1 to 12. Day is from 1 to 31.  
 * @param source
 * @param locale
 * @return Date
 * @throws BirtException
 */
public static Date toDateWithCheck(String source,ULocale locale) throws BirtException {
  DateFormat dateFormat=DateFormatHolder.getDateInstance(DateFormat.SHORT,locale);
  Date resultDate=null;
  try {
    resultDate=dateFormat.parse(source);
  }
 catch (  ParseException e) {
    return toDate(source,locale);
  }
  if (DateUtil.checkValid(dateFormat,source) == false) {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
  return resultDate;
}","/** 
 * Convert string to date with check. JDK may do incorrect converse, for example: 2005/1/1 Local.US, format pattern is MM/dd/YY. Above conversion can be done without error, but obviously the result is not right. This method will do such a simple check, in DateFormat.SHORT case instead of all cases. Year is not lower than 0. Month is from 1 to 12. Day is from 1 to 31.  
 * @param source
 * @param locale
 * @return Date
 * @throws BirtException
 */
public static Date toDateWithCheck(String source,ULocale locale) throws BirtException {
  DateFormat dateFormat=DateFormatFactory.getDateInstance(DateFormat.SHORT,locale);
  Date resultDate=null;
  try {
    resultDate=dateFormat.parse(source);
  }
 catch (  ParseException e) {
    return toDate(source,locale);
  }
  if (DateUtil.checkValid(dateFormat,source) == false) {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
  return resultDate;
}",0.99328165374677
76771,"/** 
 * Handle IFrame definition
 * @return
 */
protected String __handleIFrameDefinition(){
  String iframe=""String_Node_Str"" + viewer.getId() + ""String_Node_Str""+ viewer.getBorder()+ ""String_Node_Str"";
  if (viewer.getScrolling() != null)   iframe+=""String_Node_Str"" + viewer.getScrolling() + ""String_Node_Str"";
  iframe+=__handleAppearance() + ""String_Node_Str"";
  return iframe;
}","/** 
 * Handle IFrame definition
 * @return
 */
protected String __handleIFrameDefinition(){
  String iframe=""String_Node_Str"" + viewer.getId() + ""String_Node_Str""+ viewer.getFrameborder()+ ""String_Node_Str"";
  if (viewer.getScrolling() != null)   iframe+=""String_Node_Str"" + viewer.getScrolling() + ""String_Node_Str"";
  iframe+=__handleAppearance() + ""String_Node_Str"";
  return iframe;
}",0.9909443725743856
76772,"/** 
 * DIV Appearance style
 * @return
 */
protected String __handleDivAppearance(){
  String style=""String_Node_Str"";
  if (viewer.getPosition() != null)   style+=""String_Node_Str"" + viewer.getPosition() + ""String_Node_Str"";
  if (viewer.getBorder() > 0)   style+=""String_Node_Str"" + viewer.getBorder() + ""String_Node_Str"";
  if (viewer.getHeight() >= 0)   style+=""String_Node_Str"" + viewer.getHeight() + ""String_Node_Str"";
  if (viewer.getWidth() >= 0)   style+=""String_Node_Str"" + viewer.getWidth() + ""String_Node_Str"";
  if (viewer.getTop() >= 0)   style+=""String_Node_Str"" + viewer.getTop() + ""String_Node_Str"";
  if (viewer.getLeft() >= 0)   style=style + ""String_Node_Str"" + viewer.getLeft()+ ""String_Node_Str"";
  if (SCROLLING_YES.equalsIgnoreCase(viewer.getScrolling())) {
    style=style + ""String_Node_Str"";
  }
 else   if (SCROLLING_AUTO.equalsIgnoreCase(viewer.getScrolling())) {
    style=style + ""String_Node_Str"";
  }
  if (viewer.getStyle() != null)   style+=viewer.getStyle() + ""String_Node_Str"";
  style+=""String_Node_Str"";
  return style;
}","/** 
 * DIV Appearance style
 * @return
 */
protected String __handleDivAppearance(){
  String style=""String_Node_Str"";
  if (viewer.getPosition() != null)   style+=""String_Node_Str"" + viewer.getPosition() + ""String_Node_Str"";
  if (viewer.getHeight() >= 0)   style+=""String_Node_Str"" + viewer.getHeight() + ""String_Node_Str"";
  if (viewer.getWidth() >= 0)   style+=""String_Node_Str"" + viewer.getWidth() + ""String_Node_Str"";
  if (viewer.getTop() >= 0)   style+=""String_Node_Str"" + viewer.getTop() + ""String_Node_Str"";
  if (viewer.getLeft() >= 0)   style=style + ""String_Node_Str"" + viewer.getLeft()+ ""String_Node_Str"";
  if (SCROLLING_YES.equalsIgnoreCase(viewer.getScrolling())) {
    style=style + ""String_Node_Str"";
  }
 else   if (SCROLLING_AUTO.equalsIgnoreCase(viewer.getScrolling())) {
    style=style + ""String_Node_Str"";
  }
  if (viewer.getStyle() != null)   style+=viewer.getStyle() + ""String_Node_Str"";
  style+=""String_Node_Str"";
  return style;
}",0.9510627780523976
76773,"/** 
 * Handle use IFrame to show parameter page.
 * @throws Exception
 */
protected void __handleIFrame() throws Exception {
  JspWriter writer=pageContext.getOut();
  String iframe=""String_Node_Str"";
  if (viewer.getId() != null)   iframe+=""String_Node_Str"" + viewer.getId() + ""String_Node_Str"";
  if (viewer.getName() != null)   iframe+=""String_Node_Str"" + viewer.getName() + ""String_Node_Str"";
  String src=viewer.createURI(IBirtConstants.VIEWER_PARAMETER) + ""String_Node_Str"" + ParameterAccessor.PARAM_NOCACHE_PARAMETER;
  iframe+=""String_Node_Str"" + src + ""String_Node_Str"";
  iframe+=""String_Node_Str"" + viewer.getBorder() + ""String_Node_Str"";
  if (viewer.getScrolling() != null)   iframe+=""String_Node_Str"" + viewer.getScrolling() + ""String_Node_Str"";
  iframe+=__handleAppearance() + ""String_Node_Str"";
  writer.write(iframe);
}","/** 
 * Handle use IFrame to show parameter page.
 * @throws Exception
 */
protected void __handleIFrame() throws Exception {
  JspWriter writer=pageContext.getOut();
  String iframe=""String_Node_Str"";
  if (viewer.getId() != null)   iframe+=""String_Node_Str"" + viewer.getId() + ""String_Node_Str"";
  if (viewer.getName() != null)   iframe+=""String_Node_Str"" + viewer.getName() + ""String_Node_Str"";
  String src=viewer.createURI(IBirtConstants.VIEWER_PARAMETER) + ""String_Node_Str"" + ParameterAccessor.PARAM_NOCACHE_PARAMETER;
  iframe+=""String_Node_Str"" + src + ""String_Node_Str"";
  iframe+=""String_Node_Str"" + viewer.getFrameborder() + ""String_Node_Str"";
  if (viewer.getScrolling() != null)   iframe+=""String_Node_Str"" + viewer.getScrolling() + ""String_Node_Str"";
  iframe+=__handleAppearance() + ""String_Node_Str"";
  writer.write(iframe);
}",0.9958358120166568
76774,"/** 
 * DIV Appearance style
 * @return
 */
protected String __handleDivAppearance(){
  String style=""String_Node_Str"";
  if (viewer.getPosition() != null)   style+=""String_Node_Str"" + viewer.getPosition() + ""String_Node_Str"";
  if (viewer.getBorder() > 0)   style+=""String_Node_Str"" + viewer.getBorder() + ""String_Node_Str"";
  if (viewer.getHeight() >= 0)   style+=""String_Node_Str"" + viewer.getHeight() + ""String_Node_Str"";
  if (viewer.getWidth() >= 0)   style+=""String_Node_Str"" + viewer.getWidth() + ""String_Node_Str"";
  if (viewer.getTop() >= 0)   style+=""String_Node_Str"" + viewer.getTop() + ""String_Node_Str"";
  if (viewer.getLeft() >= 0)   style=style + ""String_Node_Str"" + viewer.getLeft()+ ""String_Node_Str"";
  if (viewer.getScrolling() != null && SCROLLING_YES.equalsIgnoreCase(viewer.getScrolling())) {
    style=style + ""String_Node_Str"";
  }
 else {
    style=style + ""String_Node_Str"";
  }
  if (viewer.getStyle() != null)   style+=viewer.getStyle() + ""String_Node_Str"";
  style+=""String_Node_Str"";
  return style;
}","/** 
 * DIV Appearance style
 * @return
 */
protected String __handleDivAppearance(){
  String style=""String_Node_Str"";
  if (viewer.getPosition() != null)   style+=""String_Node_Str"" + viewer.getPosition() + ""String_Node_Str"";
  if (viewer.getHeight() >= 0)   style+=""String_Node_Str"" + viewer.getHeight() + ""String_Node_Str"";
  if (viewer.getWidth() >= 0)   style+=""String_Node_Str"" + viewer.getWidth() + ""String_Node_Str"";
  if (viewer.getTop() >= 0)   style+=""String_Node_Str"" + viewer.getTop() + ""String_Node_Str"";
  if (viewer.getLeft() >= 0)   style=style + ""String_Node_Str"" + viewer.getLeft()+ ""String_Node_Str"";
  if (viewer.getScrolling() != null && SCROLLING_YES.equalsIgnoreCase(viewer.getScrolling())) {
    style=style + ""String_Node_Str"";
  }
 else {
    style=style + ""String_Node_Str"";
  }
  if (viewer.getStyle() != null)   style+=viewer.getStyle() + ""String_Node_Str"";
  style+=""String_Node_Str"";
  return style;
}",0.9496183206106872
76775,"/** 
 * Adds input and output parameter hints to odaStatement
 */
private void addParameterDefns() throws DataException {
  if (this.parameterHints == null)   return;
  Iterator it=this.parameterHints.iterator();
  while (it.hasNext()) {
    ParameterHint parameterHint=(ParameterHint)it.next();
    odaStatement.addParameterHint(parameterHint);
    if (parameterHint.isInputMode() && parameterHint.getDefaultInputValue() != null) {
      Class paramHintDataType=parameterHint.getDataType();
      if (paramHintDataType == Date.class)       paramHintDataType=parameterHint.getEffectiveDataType(dataSource.getDriverName(),queryType);
      Object inputValue=convertToValue(parameterHint.getDefaultInputValue(),paramHintDataType);
      if (isParameterPositionValid(parameterHint.getPosition()))       this.setInputParamValue(parameterHint.getPosition(),inputValue);
 else       this.setInputParamValue(parameterHint.getName(),inputValue);
    }
  }
  this.setInputParameterBinding();
}","/** 
 * Adds input and output parameter hints to odaStatement
 */
private void addParameterDefns() throws DataException {
  if (this.parameterHints == null)   return;
  Iterator it=this.parameterHints.iterator();
  while (it.hasNext()) {
    ParameterHint parameterHint=(ParameterHint)it.next();
    odaStatement.addParameterHint(parameterHint);
    if (parameterHint.isInputMode() && parameterHint.getDefaultInputValue() != null) {
      Class paramHintDataType=parameterHint.getDataType();
      if (paramHintDataType == Date.class)       paramHintDataType=parameterHint.getEffectiveDataType(dataSource.getDriverName(),queryType);
      Object inputValue=parameterHint.getDefaultInputValue();
      if (paramHintDataType != IBlob.class && paramHintDataType != IClob.class)       inputValue=convertToValue(parameterHint.getDefaultInputValue(),paramHintDataType);
      if (isParameterPositionValid(parameterHint.getPosition()))       this.setInputParamValue(parameterHint.getPosition(),inputValue);
 else       this.setInputParamValue(parameterHint.getName(),inputValue);
    }
  }
  this.setInputParameterBinding();
}",0.8930099857346647
76776,"public void close(){
  if (this.resultSetPopulator == null || this.resultSetPopulator.getCache() == null)   return;
  this.resultSetPopulator.getCache().close();
  resultSetPopulator=null;
}","public void close(){
  if (this.resultSetPopulator == null || this.resultSetPopulator.getCache() == null)   return;
  this.resultSetPopulator.getCache().close();
  resultSetPopulator=null;
  try {
    if (resultSet != null)     resultSet.close();
  }
 catch (  DataException e) {
    logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.6884057971014492
76777,"/** 
 * Tested cases: <ul> <li>The getProperty() algorithm. If the structure member has no local value, uses values of the referred style. <li>The back reference must be right for undo/redo. <li>The back reference must be right if the style member is set to a new value. <li>Circular references must throw exceptions. </ul>
 * @throws Exception
 */
public void testStyle() throws Exception {
  openDesign(inputFile);
  StyleHandle style2=designHandle.findStyle(""String_Node_Str"");
  StyleHandle style3=designHandle.findStyle(""String_Node_Str"");
  Iterator highlightRules=style2.highlightRulesIterator();
  assert(highlightRules.hasNext());
  HighlightRuleHandle style2Highlight=(HighlightRuleHandle)highlightRules.next();
  assertEquals(DesignChoiceConstants.TEXT_ALIGN_RIGHT,style2Highlight.getTextAlign());
  assertEquals(ColorPropertyType.RED,style2Highlight.getColor().getStringValue());
  assertNull(style2Highlight.getProperty(IStyleModel.HIGHLIGHT_RULES_PROP));
  StyleHandle style1=designHandle.findStyle(""String_Node_Str"");
  List refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(1,refs.size());
  BackRef ref1=(BackRef)refs.get(0);
  assertEquals(""String_Node_Str"",ref1.getElement().getName());
  assertEquals(""String_Node_Str"",ref1.getPropertyName());
  style2Highlight.drop();
  refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(0,refs.size());
  designHandle.getCommandStack().undo();
  refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(1,refs.size());
  designHandle.getCommandStack().redo();
  refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(0,refs.size());
  designHandle.getCommandStack().undo();
  style2Highlight.setStyle(style3);
  refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(0,refs.size());
  refs=((ReferenceableElement)style3.getElement()).getClientList();
  assertEquals(1,refs.size());
  assertEquals(""String_Node_Str"",ref1.getElement().getName());
  assertEquals(""String_Node_Str"",ref1.getPropertyName());
  try {
    style2Highlight.setStyle(style2);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(SemanticError.DESIGN_EXCEPTION_CIRCULAR_ELEMENT_REFERNECE,e.getErrorCode());
  }
  Iterator style3HighlightRules=style3.highlightRulesIterator();
  assertTrue(style3HighlightRules.hasNext());
  HighlightRuleHandle style3Highlight=(HighlightRuleHandle)style3HighlightRules.next();
  try {
    style3Highlight.setStyleName(""String_Node_Str"");
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(SemanticError.DESIGN_EXCEPTION_CIRCULAR_ELEMENT_REFERNECE,e.getErrorCode());
  }
  HighlightRule newRule1=StructureFactory.createHighlightRule();
  newRule1.setProperty(HighlightRule.STYLE_MEMBER,""String_Node_Str"");
  try {
    style3.getPropertyHandle(StyleHandle.HIGHLIGHT_RULES_PROP).addItem(newRule1);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(SemanticError.DESIGN_EXCEPTION_CIRCULAR_ELEMENT_REFERNECE,e.getErrorCode());
  }
}","/** 
 * Tested cases: <ul> <li>The getProperty() algorithm. If the structure member has no local value, uses values of the referred style. <li>The back reference must be right for undo/redo. <li>The back reference must be right if the style member is set to a new value. <li>Circular references must throw exceptions. </ul>
 * @throws Exception
 */
public void testStyle() throws Exception {
  openDesign(inputFile);
  StyleHandle style2=designHandle.findStyle(""String_Node_Str"");
  StyleHandle style3=designHandle.findStyle(""String_Node_Str"");
  Iterator highlightRules=style2.highlightRulesIterator();
  assert(highlightRules.hasNext());
  HighlightRuleHandle style2Highlight=(HighlightRuleHandle)highlightRules.next();
  assertEquals(DesignChoiceConstants.TEXT_ALIGN_RIGHT,style2Highlight.getTextAlign());
  assertEquals(ColorPropertyType.RED,style2Highlight.getColor().getStringValue());
  assertNull(style2Highlight.getProperty(IStyleModel.HIGHLIGHT_RULES_PROP));
  StyleHandle style1=designHandle.findStyle(""String_Node_Str"");
  List refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(1,refs.size());
  BackRef ref1=(BackRef)refs.get(0);
  assertEquals(""String_Node_Str"",ref1.getElement().getName());
  assertEquals(""String_Node_Str"",ref1.getPropertyName());
  style2Highlight.drop();
  refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(0,refs.size());
  designHandle.getCommandStack().undo();
  refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(1,refs.size());
  designHandle.getCommandStack().redo();
  refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(0,refs.size());
  designHandle.getCommandStack().undo();
  style2Highlight.setStyle(style3);
  assertEquals(style3,style2Highlight.getStyle());
  refs=((ReferenceableElement)style1.getElement()).getClientList();
  assertEquals(0,refs.size());
  refs=((ReferenceableElement)style3.getElement()).getClientList();
  assertEquals(1,refs.size());
  assertEquals(""String_Node_Str"",ref1.getElement().getName());
  assertEquals(""String_Node_Str"",ref1.getPropertyName());
  try {
    style2Highlight.setStyle(style2);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(SemanticError.DESIGN_EXCEPTION_CIRCULAR_ELEMENT_REFERNECE,e.getErrorCode());
  }
  Iterator style3HighlightRules=style3.highlightRulesIterator();
  assertTrue(style3HighlightRules.hasNext());
  HighlightRuleHandle style3Highlight=(HighlightRuleHandle)style3HighlightRules.next();
  try {
    style3Highlight.setStyleName(""String_Node_Str"");
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(SemanticError.DESIGN_EXCEPTION_CIRCULAR_ELEMENT_REFERNECE,e.getErrorCode());
  }
  HighlightRule newRule1=StructureFactory.createHighlightRule();
  newRule1.setProperty(HighlightRule.STYLE_MEMBER,""String_Node_Str"");
  try {
    style3.getPropertyHandle(StyleHandle.HIGHLIGHT_RULES_PROP).addItem(newRule1);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(SemanticError.DESIGN_EXCEPTION_CIRCULAR_ELEMENT_REFERNECE,e.getErrorCode());
  }
}",0.9917595734367426
76778,"/** 
 * Returns the style that the highlight rule links with.
 * @return the style
 */
public StyleHandle getStyle(){
  Object value=structRef.getValue(getModule(),getElement());
  if (value instanceof ElementRefValue) {
    ElementRefValue refValue=(ElementRefValue)value;
    if (refValue.isResolved()) {
      Style style=(Style)refValue.getElement();
      return (StyleHandle)style.getHandle(style.getRoot());
    }
  }
  return null;
}","/** 
 * Returns the style that the highlight rule links with.
 * @return the style
 */
public StyleHandle getStyle(){
  Object value=((Structure)getStructure()).getLocalProperty(getModule(),HighlightRule.STYLE_MEMBER);
  if (value instanceof ElementRefValue) {
    ElementRefValue refValue=(ElementRefValue)value;
    if (refValue.isResolved()) {
      Style style=(Style)refValue.getElement();
      return (StyleHandle)style.getHandle(style.getRoot());
    }
  }
  return null;
}",0.3947939262472885
76779,"/** 
 * Create the final URI string to preview report
 * @param iPattern
 * @return
 */
public String createURI(String iPattern){
  String uri=iPattern;
  if (uri == null)   uri=this.pattern;
  if (uri == null) {
    uri=IBirtConstants.VIEWER_FRAMESET;
    if ((reportDocument != null && reportletId != null) || !allowPageBreak) {
      uri=IBirtConstants.VIEWER_RUN;
    }
  }
  if (contextRoot != null)   uri=""String_Node_Str"" + contextRoot + ""String_Node_Str""+ uri;
  if (format != null) {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ format;
  }
 else {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ ParameterAccessor.PARAM_FORMAT_HTML;
  }
  if (reportDesign != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT + ""String_Node_Str""+ reportDesign;
  if (reportDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT_DOCUMENT + ""String_Node_Str""+ reportDocument;
  if (reportletId != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_INSTANCEID + ""String_Node_Str""+ reportletId;
  if (allowPageBreak && id != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_ID + ""String_Node_Str""+ id;
  if (allowPageBreak && title != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TITLE + ""String_Node_Str""+ title;
  if (allowPageBreak && showTitle != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SHOW_TITLE + ""String_Node_Str""+ showTitle;
  if (bookmark != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_BOOKMARK + ""String_Node_Str""+ bookmark;
  if (!isCustom && pattern != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SERVLET_PATTERN + ""String_Node_Str""+ pattern;
  if (!isCustom && target != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TARGET + ""String_Node_Str""+ target;
  if (locale != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_LOCALE + ""String_Node_Str""+ locale;
  if (svg != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SVG + ""String_Node_Str""+ svg;
  if (rtl != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RTL + ""String_Node_Str""+ rtl;
  if (allowMasterPage != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MASTERPAGE + ""String_Node_Str""+ allowMasterPage;
  if (resourceFolder != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RESOURCE_FOLDER + ""String_Node_Str""+ resourceFolder;
  if (maxRowsOfRecords >= 0)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MAXROWS + ""String_Node_Str""+ maxRowsOfRecords;
  if (forceOverwriteDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_OVERWRITE + ""String_Node_Str""+ forceOverwriteDocument;
  if (forceParameterPrompting != null)   uri+=""String_Node_Str"" + ""String_Node_Str"" + forceParameterPrompting;
  if (showToolBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TOOLBAR + ""String_Node_Str""+ showToolBar;
  if (showNavigationBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_NAVIGATIONBAR + ""String_Node_Str""+ showNavigationBar;
  return uri;
}","/** 
 * Create the final URI string to preview report
 * @param iPattern
 * @return
 */
public String createURI(String iPattern){
  String uri=iPattern;
  if (uri == null)   uri=this.pattern;
  if (uri == null) {
    uri=IBirtConstants.VIEWER_FRAMESET;
    if ((reportDocument != null && reportletId != null) || !allowPageBreak) {
      uri=IBirtConstants.VIEWER_RUN;
    }
  }
  if (contextRoot != null)   uri=""String_Node_Str"" + contextRoot + ""String_Node_Str""+ uri;
  if (format != null) {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ urlParamValueEncode(format);
  }
 else {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ ParameterAccessor.PARAM_FORMAT_HTML;
  }
  if (reportDesign != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT + ""String_Node_Str""+ urlParamValueEncode(reportDesign);
  if (reportDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT_DOCUMENT + ""String_Node_Str""+ urlParamValueEncode(reportDocument);
  if (reportletId != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_INSTANCEID + ""String_Node_Str""+ urlParamValueEncode(reportletId);
  if (allowPageBreak && id != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_ID + ""String_Node_Str""+ urlParamValueEncode(id);
  if (allowPageBreak && title != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TITLE + ""String_Node_Str""+ urlParamValueEncode(title);
  if (allowPageBreak && showTitle != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SHOW_TITLE + ""String_Node_Str""+ urlParamValueEncode(showTitle);
  if (bookmark != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_BOOKMARK + ""String_Node_Str""+ urlParamValueEncode(bookmark);
  if (!isCustom && pattern != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SERVLET_PATTERN + ""String_Node_Str""+ urlParamValueEncode(pattern);
  if (!isCustom && target != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TARGET + ""String_Node_Str""+ urlParamValueEncode(target);
  if (locale != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_LOCALE + ""String_Node_Str""+ urlParamValueEncode(locale);
  if (svg != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SVG + ""String_Node_Str""+ urlParamValueEncode(svg);
  if (rtl != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RTL + ""String_Node_Str""+ urlParamValueEncode(rtl);
  if (allowMasterPage != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MASTERPAGE + ""String_Node_Str""+ urlParamValueEncode(allowMasterPage);
  if (resourceFolder != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RESOURCE_FOLDER + ""String_Node_Str""+ urlParamValueEncode(resourceFolder);
  if (maxRowsOfRecords >= 0)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MAXROWS + ""String_Node_Str""+ maxRowsOfRecords;
  if (forceOverwriteDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_OVERWRITE + ""String_Node_Str""+ urlParamValueEncode(forceOverwriteDocument);
  if (forceParameterPrompting != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PARAMETER_PROMPTING + urlParamValueEncode(forceParameterPrompting);
  if (showToolBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TOOLBAR + ""String_Node_Str""+ urlParamValueEncode(showToolBar);
  if (showNavigationBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_NAVIGATIONBAR + ""String_Node_Str""+ urlParamValueEncode(showNavigationBar);
  return uri;
}",0.9224440042663417
76780,"/** 
 * URL encoding based on incoming encoding format.
 * @param s string to be encoded.
 * @param format encoding format.
 * @return
 */
protected static String urlEncode(String s,String format){
}","/** 
 * URL encoding based on incoming encoding format.
 * @param s string to be encoded.
 * @param format encoding format.
 * @return
 */
public static String urlEncode(String s,String format){
  String encodedString=s;
  if (s != null) {
    try {
      encodedString=URLEncoder.encode(s,format);
    }
 catch (    UnsupportedEncodingException e) {
      encodedString=s;
    }
  }
  return encodedString;
}",0.6282894736842105
76781,"/** 
 * Convers Scale unit type to ICU Calendar constant.
 * @param unitType Scale unit type
 * @return Calendar constant or -1 if not found
 */
public static int convertUnitTypeToCalendarConstant(ScaleUnitType unitType){
switch (unitType.getValue()) {
case ScaleUnitType.DAYS:
    return Calendar.DATE;
case ScaleUnitType.HOURS:
  return Calendar.HOUR_OF_DAY;
case ScaleUnitType.MINUTES:
return Calendar.MINUTE;
case ScaleUnitType.MONTHS:
return Calendar.MONTH;
case ScaleUnitType.SECONDS:
return Calendar.SECOND;
case ScaleUnitType.WEEKS:
return Calendar.WEEK_OF_MONTH;
case ScaleUnitType.YEARS:
return Calendar.YEAR;
}
return -1;
}","/** 
 * Convers Scale unit type to ICU Calendar constant.
 * @param unitType Scale unit type
 * @return Calendar constant or -1 if not found
 */
public static int convertUnitTypeToCalendarConstant(ScaleUnitType unitType){
switch (unitType.getValue()) {
case ScaleUnitType.DAYS:
    return Calendar.DATE;
case ScaleUnitType.HOURS:
  return Calendar.HOUR_OF_DAY;
case ScaleUnitType.MINUTES:
return Calendar.MINUTE;
case ScaleUnitType.MONTHS:
return Calendar.MONTH;
case ScaleUnitType.SECONDS:
return Calendar.SECOND;
case ScaleUnitType.WEEKS:
return Calendar.WEEK_OF_YEAR;
case ScaleUnitType.YEARS:
return Calendar.YEAR;
}
return -1;
}",0.9313338595106552
76782,"public boolean next() throws BirtException {
  checkStarted();
  boolean hasNext=false;
  if (state == BEFORE_FIRST_ROW) {
    state=ON_ROW;
    hasNext=odiResult.getCurrentResult() != null;
  }
 else {
    hasNext=hasNextRow();
  }
  if (hasNext)   this.prepareCurrentRow();
  if (!hasNext)   state=AFTER_LAST_ROW;
  return hasNext;
}","public boolean next() throws BirtException {
  if (this.isFromDummyQuery) {
    this.isFromDummyQuery=false;
    return true;
  }
  checkStarted();
  boolean hasNext=false;
  if (state == BEFORE_FIRST_ROW) {
    state=ON_ROW;
    hasNext=odiResult.getCurrentResult() != null;
  }
 else {
    hasNext=hasNextRow();
  }
  if (hasNext)   this.prepareCurrentRow();
  if (!hasNext)   state=AFTER_LAST_ROW;
  return hasNext;
}",0.8874172185430463
76783,"/** 
 * @return
 * @throws DataException
 */
private IRDSave getRdSave() throws DataException {
  if (this.rdSave == null)   this.rdSave=RDUtil.newSave(this.context,this.queryDefn,odiResult.getRowCount(),new QueryResultInfo(this.idInfo.getQueryResultID(),this.idInfo.getsubQueryName(),this.idInfo.getsubQueryIndex()));
  return this.rdSave;
}","/** 
 * @return
 * @throws DataException
 */
private IRDSave getRdSave() throws DataException {
  if (this.rdSave == null)   this.rdSave=RDUtil.newSave(this.context,this.queryDefn,isDummyQuery(this.queryDefn,this.odiResult) ? 1 : odiResult.getRowCount(),new QueryResultInfo(this.idInfo.getQueryResultID(),this.idInfo.getsubQueryName(),this.idInfo.getsubQueryIndex()));
  return this.rdSave;
}",0.9318801089918256
76784,"public boolean addArea(IArea area,boolean keepWithPrevious,boolean keepWithNext){
  if (area == null) {
    return true;
  }
  keepWith=keepWithNext || pageBreakAvoid;
  if (!keepWith && !keepWithPrevious) {
    clearCache();
  }
  AbstractArea aArea=(AbstractArea)area;
  if (keepWithCache.getHeight() + aArea.getAllocatedHeight() + getCurrentBP() > getMaxAvaHeight()) {
    context.setAutoPageBreak(true);
    return false;
  }
 else {
    if (keepWithPrevious || keepWith) {
      keepWithCache.add(area);
    }
 else {
      addToRoot(aArea);
    }
  }
  return true;
}","public boolean addArea(IArea area,boolean keepWithPrevious,boolean keepWithNext){
  if (area == null) {
    return true;
  }
  keepWith=keepWith || keepWithNext || pageBreakAvoid;
  if (!keepWith && !keepWithPrevious) {
    clearCache();
  }
  AbstractArea aArea=(AbstractArea)area;
  if (keepWithCache.getHeight() + aArea.getAllocatedHeight() + getCurrentBP() > getMaxAvaHeight()) {
    context.setAutoPageBreak(true);
    return false;
  }
 else {
    if (keepWithPrevious || keepWith) {
      keepWithCache.add(area);
    }
 else {
      addToRoot(aArea);
    }
  }
  return true;
}",0.9827288428324698
76785,"protected boolean layoutLines(){
  Iterator iter=lines.iterator();
  while (iter.hasNext()) {
    boolean keepWithNext=false;
    IArea area=(IArea)iter.next();
    if (current < widows - 1 || current > size - orphans - 1) {
      keepWithNext=true;
    }
    if (!super.addArea(area,false,keepWithNext)) {
      return true;
    }
 else {
      iter.remove();
      current++;
    }
  }
  return false;
}","protected boolean layoutLines(){
  Iterator iter=lines.iterator();
  while (iter.hasNext()) {
    boolean keepWithNext=false;
    IArea area=(IArea)iter.next();
    if (current < orphans - 1 || current > size - widows - 1) {
      keepWithNext=true;
    }
    if (!super.addArea(area,false,keepWithNext)) {
      return true;
    }
 else {
      iter.remove();
      current++;
    }
  }
  return false;
}",0.9728395061728397
76786,"protected int getWidows(){
  IStyle style=content.getStyle();
  String widows=style.getWidows();
  if (widows != null) {
    try {
      return Integer.parseInt(widows);
    }
 catch (    NumberFormatException e) {
      logger.log(Level.WARNING,""String_Node_Str"",widows);
    }
  }
  return 2;
}","protected int getWidows(){
  IStyle style=content.getStyle();
  String widows=style.getWidows();
  if (widows != null) {
    try {
      return Integer.parseInt(widows);
    }
 catch (    NumberFormatException e) {
      logger.log(Level.WARNING,""String_Node_Str"",widows);
    }
  }
  return 0;
}",0.9864864864864864
76787,"protected int getOrphans(){
  IStyle style=content.getStyle();
  String orphans=style.getOrphans();
  if (orphans != null) {
    try {
      return Integer.parseInt(orphans);
    }
 catch (    NumberFormatException e) {
      logger.log(Level.WARNING,""String_Node_Str"",orphans);
    }
  }
  return 2;
}","protected int getOrphans(){
  IStyle style=content.getStyle();
  String orphans=style.getOrphans();
  if (orphans != null) {
    try {
      return Integer.parseInt(orphans);
    }
 catch (    NumberFormatException e) {
      logger.log(Level.WARNING,""String_Node_Str"",orphans);
    }
  }
  return 0;
}",0.9966887417218544
76788,"/** 
 * @param s
 * @return
 */
private static String cleanDate(String s){
  s=s.trim();
  if (s.indexOf('T') < 12) {
    s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  int zoneIndex=s.indexOf(""String_Node_Str"");
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex);
  }
  zoneIndex=s.indexOf('Z');
  if (zoneIndex == s.length() - 1) {
    return s.substring(0,zoneIndex);
  }
  zoneIndex=s.indexOf('+');
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex);
  }
  return s;
}","/** 
 * @param s
 * @return
 */
private static String cleanDate(String s){
  s=s.trim();
  if (s.indexOf('T') < 12) {
    s=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  int zoneIndex=s.indexOf(""String_Node_Str"");
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex).trim();
  }
  zoneIndex=s.indexOf('Z');
  if (zoneIndex == s.length() - 1) {
    return s.substring(0,zoneIndex).trim();
  }
  zoneIndex=s.indexOf('+');
  if (zoneIndex > 0) {
    return s.substring(0,zoneIndex).trim();
  }
  return s;
}",0.9795121951219512
76789,"private String getInputDisplayName(){
  String displayName=null;
  if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(selectedParameter.getControlType())) {
    if (selectedParameter.isMustMatch()) {
      displayName=DISPLAY_NAME_CONTROL_COMBO;
    }
 else {
      displayName=DISPLAY_NAME_CONTROL_LIST;
    }
  }
  return displayName;
}","private String getInputDisplayName(){
  String displayName=null;
  if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(selectedParameter.getControlType())) {
    if (selectedParameter.isMustMatch()) {
      displayName=DISPLAY_NAME_CONTROL_LIST;
    }
 else {
      displayName=DISPLAY_NAME_CONTROL_COMBO;
    }
  }
  return displayName;
}",0.9737609329446064
76790,"private void createPropertiesPart(Composite parent){
  propertiesGroup=new Group(parent,SWT.NULL);
  propertiesGroup.setText(LABEL_GROUP_PROPERTIES);
  propertiesGroup.setLayout(new GridLayout(2,false));
  propertiesGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesGroup,LABEL_PARAM_NAME,maxStrLengthProperty);
  paramNameEditor=new Text(propertiesGroup,SWT.BORDER);
  paramNameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  paramNameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      valueTable.refresh(selectedParameter);
    }
  }
);
  createLabel(propertiesGroup,LABEL_PARAMTER_PROMPT_TEXT,maxStrLengthProperty);
  promptText=new Text(propertiesGroup,SWT.BORDER);
  promptText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesGroup,LABEL_DATA_TYPE,maxStrLengthProperty);
  dataTypeChooser=new Combo(propertiesGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  dataTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataTypeChooser.setItems(ChoiceSetFactory.getDisplayNamefromChoiceSet(DATA_TYPE_CHOICE_SET));
  dataTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        changeDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
        try {
          selectedParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
  createLabel(propertiesGroup,LABEL_DISPLAY_TYPE,maxStrLengthProperty);
  displayTypeChooser=new Combo(propertiesGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  displayTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  displayTypeChooser.setItems(new String[]{DISPLAY_NAME_CONTROL_LIST,DISPLAY_NAME_CONTROL_COMBO});
  displayTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        try {
          String newControlType=getSelectedDisplayType();
          if (PARAM_CONTROL_COMBO.equals(newControlType)) {
            newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
            selectedParameter.setMustMatch(true);
          }
 else           if (PARAM_CONTROL_LIST.equals(newControlType)) {
            newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
            selectedParameter.setMustMatch(false);
          }
 else {
            selectedParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
          }
          selectedParameter.setControlType(newControlType);
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
  createLabel(propertiesGroup,LABEL_DEFAULT_VALUE,maxStrLengthProperty);
  defaultValueEditor=new Text(propertiesGroup,SWT.BORDER);
  defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","private void createPropertiesPart(Composite parent){
  propertiesGroup=new Group(parent,SWT.NULL);
  propertiesGroup.setText(LABEL_GROUP_PROPERTIES);
  propertiesGroup.setLayout(new GridLayout(2,false));
  propertiesGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesGroup,LABEL_PARAM_NAME,maxStrLengthProperty);
  paramNameEditor=new Text(propertiesGroup,SWT.BORDER);
  paramNameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  paramNameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      valueTable.refresh(selectedParameter);
    }
  }
);
  createLabel(propertiesGroup,LABEL_PARAMTER_PROMPT_TEXT,maxStrLengthProperty);
  promptText=new Text(propertiesGroup,SWT.BORDER);
  promptText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesGroup,LABEL_DATA_TYPE,maxStrLengthProperty);
  dataTypeChooser=new Combo(propertiesGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  dataTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataTypeChooser.setItems(ChoiceSetFactory.getDisplayNamefromChoiceSet(DATA_TYPE_CHOICE_SET));
  dataTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        changeDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
        try {
          selectedParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
  createLabel(propertiesGroup,LABEL_DISPLAY_TYPE,maxStrLengthProperty);
  displayTypeChooser=new Combo(propertiesGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  displayTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  displayTypeChooser.setItems(new String[]{DISPLAY_NAME_CONTROL_LIST,DISPLAY_NAME_CONTROL_COMBO});
  displayTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        try {
          String newControlType=getSelectedDisplayType();
          if (PARAM_CONTROL_COMBO.equals(newControlType)) {
            newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
            selectedParameter.setMustMatch(false);
          }
 else           if (PARAM_CONTROL_LIST.equals(newControlType)) {
            newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
            selectedParameter.setMustMatch(true);
          }
 else {
            selectedParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
          }
          selectedParameter.setControlType(newControlType);
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
  createLabel(propertiesGroup,LABEL_DEFAULT_VALUE,maxStrLengthProperty);
  defaultValueEditor=new Text(propertiesGroup,SWT.BORDER);
  defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9978097622027534
76791,"/** 
 * @param absPos the vertical position relative to its containing box
 * @param containerBaseAbsPos the absolute position of the container's top
 * @param containerSize container height
 * @param ImageSize the height of template which image lies in
 * @return a triple(the vertical position of template's left-bottom origin,template height, and image's vertical translation relative to the template )
 */
private tplValueTriple computeTplVerticalValTriple(float absPos,float containerBaseAbsPos,float containerSize,float ImageSize){
  float tplOrigin=0.0f, tplSize=0.0f, translation=0.0f;
  if (absPos <= 0) {
    if (ImageSize + absPos > 0 && ImageSize + absPos <= containerSize) {
      tplOrigin=containerBaseAbsPos - ImageSize - absPos;
      tplSize=ImageSize + absPos;
    }
 else     if (ImageSize + absPos > containerSize) {
      tplOrigin=containerBaseAbsPos - containerSize;
      tplSize=containerSize;
    }
 else {
    }
    translation=0;
  }
 else   if (absPos >= containerSize) {
  }
 else {
    if (ImageSize + absPos <= containerSize) {
      tplOrigin=containerBaseAbsPos - ImageSize - absPos;
      tplSize=ImageSize;
      translation=0.0f;
    }
 else {
      tplOrigin=containerBaseAbsPos - containerSize;
      tplSize=containerSize - absPos;
      translation=containerSize - absPos - ImageSize;
    }
  }
  return new tplValueTriple(tplOrigin,tplSize,translation);
}","/** 
 * @param absPos the vertical position relative to its containing box
 * @param containerBaseAbsPos the absolute position of the container's top
 * @param containerSize container height
 * @param ImageSize the height of template which image lies in
 * @return a triple(the vertical position of template's left-bottom origin,template height, and image's vertical translation relative to the template )
 */
private tplValueTriple computeTplVerticalValTriple(float absPos,float containerBaseAbsPos,float containerSize,float ImageSize){
  float tplOrigin=0.0f, tplSize=0.0f, translation=0.0f;
  if (absPos <= 0) {
    if (ImageSize + absPos > 0 && ImageSize + absPos <= containerSize) {
      tplOrigin=containerBaseAbsPos - ImageSize - absPos;
      tplSize=ImageSize + absPos;
    }
 else     if (ImageSize + absPos > containerSize) {
      tplOrigin=containerBaseAbsPos - containerSize;
      tplSize=containerSize;
      translation=containerSize - ImageSize;
    }
 else {
    }
  }
 else   if (absPos >= containerSize) {
  }
 else {
    if (ImageSize + absPos <= containerSize) {
      tplOrigin=containerBaseAbsPos - ImageSize - absPos;
      tplSize=ImageSize;
      translation=0.0f;
    }
 else {
      tplOrigin=containerBaseAbsPos - containerSize;
      tplSize=containerSize - absPos;
      translation=containerSize - absPos - ImageSize;
    }
  }
  return new tplValueTriple(tplOrigin,tplSize,translation);
}",0.9773210489014884
76792,"private void createDrillthroughSelectFormat(Composite container){
  Group group=new Group(container,SWT.NONE);
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  ReportEngine engine=new ReportEngine(new EngineConfig());
  supportedFormats=engine.getSupportedFormats();
  formatCheckBtns=new HashMap();
  for (int i=0; i < supportedFormats.length; i++) {
    Button btn=new Button(group,SWT.RADIO);
    btn.setText(supportedFormats[i]);
    formatCheckBtns.put(supportedFormats[i],btn);
    btn.addSelectionListener(new SelectionListener(){
      public void widgetSelected(      SelectionEvent e){
        if (tocButton.getSelection()) {
          initAnchorChooser(targetReportHandle,true);
        }
 else         if (targetBookmarkButton.getSelection()) {
          initAnchorChooser(targetReportHandle,false);
        }
      }
      public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
  }
}","private void createDrillthroughSelectFormat(Composite container){
  Group group=new Group(container,SWT.NONE);
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  ReportEngine engine=new ReportEngine(new EngineConfig());
  supportedFormats=engine.getSupportedFormats();
  formatCheckBtns=new HashMap();
  for (int i=0; i < supportedFormats.length; i++) {
    Button btn=new Button(group,SWT.RADIO);
    btn.setText(supportedFormats[i]);
    formatCheckBtns.put(supportedFormats[i],btn);
    btn.addSelectionListener(new SelectionListener(){
      public void widgetSelected(      SelectionEvent e){
        if (tocButton.getSelection() && targetReportHandle instanceof IReportDocument) {
          initAnchorChooser(targetReportHandle,true);
        }
      }
      public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
  }
}",0.9135927235977768
76793,"/** 
 * @param computedColumns
 * @param rsPopulator
 * @param dataSetRuntime
 * @throws DataException
 */
public void evaluateMultiPassExprOnCmp(IComputedColumnsState iccState,boolean useResultSetMeta) throws DataException {
  assert(iccState != null);
  Context context=Context.enter();
  try {
    int exprType=COMPUTED_COLUMN_EXPR;
    int currentGroupLevel=0;
    ExpressionInfo exprInfo;
    MultiPassExpressionCompiler helper=this.getMultiPassCompilerHelper();
    helper.setDataSetMode(isDataSetMode);
    for (int i=0; i < iccState.getCount(); i++) {
      if (iccState.isValueAvailable(i)) {
        helper.addAvailableCmpColumn(iccState.getName(i));
      }
    }
    for (int i=0; i < iccState.getCount(); i++) {
      if (!iccState.isValueAvailable(i)) {
        IBaseExpression baseExpression=iccState.getExpression(i);
        String name=iccState.getName(i);
        if (useResultSetMeta && name.matches(""String_Node_Str"")) {
          exprType=GROUP_COLUMN_EXPR;
          currentGroupLevel=getCurrentGroupLevel(name,currentGroupLevel,rsPopulator.getQuery());
          iccState.setValueAvailable(i);
        }
        if (baseExpression instanceof IScriptExpression) {
          exprInfo=new ExpressionInfo((IScriptExpression)baseExpression,exprType,currentGroupLevel,useResultSetMeta);
          baseExpression.setHandle(helper.compileExpression(exprInfo,context));
        }
 else         if (baseExpression instanceof IConditionalExpression) {
          compileConditionalExpression((IConditionalExpression)baseExpression,helper,rsPopulator,exprType,currentGroupLevel,context);
        }
        if (exprType == GROUP_COLUMN_EXPR) {
          return;
        }
        if (helper.getExpressionPassLevel() <= 1) {
          iccState.setValueAvailable(i);
        }
      }
    }
    calculate(helper);
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param computedColumns
 * @param rsPopulator
 * @param dataSetRuntime
 * @throws DataException
 */
public void evaluateMultiPassExprOnCmp(IComputedColumnsState iccState,boolean useResultSetMeta) throws DataException {
  assert(iccState != null);
  Context context=Context.enter();
  try {
    int exprType=COMPUTED_COLUMN_EXPR;
    int currentGroupLevel=0;
    ExpressionInfo exprInfo;
    MultiPassExpressionCompiler helper=this.getMultiPassCompilerHelper();
    helper.setDataSetMode(isDataSetMode);
    for (int i=0; i < iccState.getCount(); i++) {
      if (iccState.isValueAvailable(i)) {
        helper.addAvailableCmpColumn(iccState.getName(i));
      }
    }
    for (int i=0; i < iccState.getCount(); i++) {
      if (!iccState.isValueAvailable(i)) {
        IBaseExpression baseExpression=iccState.getExpression(i);
        String name=iccState.getName(i);
        if (useResultSetMeta && name.matches(""String_Node_Str"")) {
          exprType=GROUP_COLUMN_EXPR;
          currentGroupLevel=getCurrentGroupLevel(name,currentGroupLevel,rsPopulator.getQuery());
          iccState.setValueAvailable(i);
        }
        if (baseExpression instanceof IScriptExpression) {
          exprInfo=new ExpressionInfo((IScriptExpression)baseExpression,exprType,currentGroupLevel,useResultSetMeta);
          baseExpression.setHandle(helper.compileExpression(exprInfo,context));
        }
 else         if (baseExpression instanceof IConditionalExpression) {
          compileConditionalExpression((IConditionalExpression)baseExpression,helper,rsPopulator,exprType,currentGroupLevel,context);
        }
        if (exprType == GROUP_COLUMN_EXPR) {
          return;
        }
        if (helper.getExpressionPassLevel() <= 1) {
          iccState.setValueAvailable(i);
        }
 else {
          break;
        }
      }
    }
    calculate(helper);
  }
  finally {
    Context.exit();
  }
}",0.9906939643711778
76794,"/** 
 * Return expression string value as expression required format. For example number type: Integer value 1 to String value ""1"" Boolean type: Boolean value true to String value ""true"" other types: String value ""abc"" to String value ""\""abc\"""" Date value ""2000-10-10"" to String value ""\""2000-10-10\""""
 * @return expression value
 */
public String getSelectedExprValue(){
  String exprValue=null;
  if (selectedIndices != null && selectedIndices.length > 0) {
    int firstIndex=selectedIndices[0];
    Object modelValue=modelValueList.get(firstIndex);
    String viewerValue=(String)viewerValueList.get(firstIndex);
    if (modelValue instanceof Boolean || modelValue instanceof Integer || modelValue instanceof Double|| modelValue instanceof BigDecimal) {
      exprValue=viewerValue;
    }
 else {
      exprValue=""String_Node_Str"" + viewerValue + ""String_Node_Str"";
    }
  }
  return exprValue;
}","/** 
 * Return expression string value as expression required format. For example number type: Integer value 1 to String value ""1"" Boolean type: Boolean value true to String value ""true"" other types: String value ""abc"" to String value ""\""abc\"""" Date value ""2000-10-10"" to String value ""\""2000-10-10\""""
 * @return expression value
 */
public String getSelectedExprValue(){
  String exprValue=null;
  if (selectedIndices != null && selectedIndices.length > 0) {
    int firstIndex=selectedIndices[0];
    Object modelValue=modelValueList.get(firstIndex);
    String viewerValue=(String)viewerValueList.get(firstIndex);
    if (modelValue instanceof Boolean || modelValue instanceof Integer || modelValue instanceof Double|| modelValue instanceof BigDecimal) {
      exprValue=viewerValue;
    }
 else {
      exprValue=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(viewerValue) + ""String_Node_Str"";
    }
  }
  return exprValue;
}",0.9766937669376694
76795,"/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container			the containerArea whose border and background need to be drawed
 */
protected void drawContainer(IContainerArea container){
  IStyle style=container.getStyle();
  if (null == style) {
    return;
  }
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  if (container.getContent() != null) {
    int layoutX=curPos.x + container.getX();
    int layoutY=curPos.y + container.getY();
    float startX=layoutPointX2PDF(layoutX);
    float startY=layoutPointY2PDF(layoutY);
    float width=pdfMeasure(container.getWidth());
    float height=pdfMeasure(container.getHeight());
    Color bc=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
    drawBackgroundColor(bc,startX,startY,width,height);
    drawBackgroundImage(style,startX,startY,width,height);
    int borderTopWidth=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH));
    if (borderTopWidth > 0) {
      Color borderTopColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_TOP_COLOR));
      drawBorder(new BorderInfo(layoutX,layoutY + borderTopWidth / 2,layoutX + container.getWidth(),layoutY + borderTopWidth / 2,borderTopWidth,borderTopColor,style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),BorderInfo.TOP_BORDER));
    }
    int borderLeftWidth=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH));
    if (borderLeftWidth > 0) {
      Color borderLeftColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_COLOR));
      drawBorder(new BorderInfo(layoutX + borderLeftWidth / 2,layoutY,layoutX + borderLeftWidth / 2,layoutY + container.getHeight(),borderLeftWidth,borderLeftColor,style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),BorderInfo.LEFT_BORDER));
    }
    int borderBottomWidth=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
    if (borderBottomWidth > 0) {
      Color borderBottomColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_COLOR));
      drawBorder(new BorderInfo(layoutX,layoutY + container.getHeight() - borderBottomWidth / 2,layoutX + container.getWidth(),layoutY + container.getHeight() - borderBottomWidth / 2,borderBottomWidth,borderBottomColor,style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),BorderInfo.BOTTOM_BORDER));
    }
    int borderRightWidth=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
    if (borderRightWidth > 0) {
      Color borderRightColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_COLOR));
      drawBorder(new BorderInfo(layoutX + container.getWidth() - borderRightWidth / 2,layoutY,layoutX + container.getWidth() - borderRightWidth / 2,layoutY + container.getHeight(),borderRightWidth,borderRightColor,style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),BorderInfo.RIGHT_BORDER));
    }
    makeBookmark(container,curPos);
    handleHyperlinkAction(container,curPos);
  }
}","/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container			the containerArea whose border and background need to be drawed
 */
protected void drawContainer(IContainerArea container){
  IStyle style=container.getStyle();
  if (null == style) {
    return;
  }
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  if (container.getContent() != null) {
    int layoutX=curPos.x + container.getX();
    int layoutY=curPos.y + container.getY();
    float startX=layoutPointX2PDF(layoutX);
    float startY=layoutPointY2PDF(layoutY);
    float width=pdfMeasure(container.getWidth());
    float height=pdfMeasure(container.getHeight());
    Color bc=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
    drawBackgroundColor(bc,startX,startY,width,height);
    drawBackgroundImage(style,startX,startY,width,height);
    int borderTopWidth=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH));
    int borderLeftWidth=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH));
    int borderBottomWidth=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
    int borderRightWidth=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
    if (borderTopWidth > 0 || borderLeftWidth > 0 || borderBottomWidth > 0 || borderRightWidth > 0) {
      Color borderTopColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_TOP_COLOR));
      Color borderRightColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_COLOR));
      Color borderBottomColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_COLOR));
      Color borderLeftColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_COLOR));
      BorderInfo[] borders=new BorderInfo[4];
      borders[BorderInfo.TOP_BORDER]=new BorderInfo(layoutX,layoutY + borderTopWidth / 2,layoutX + container.getWidth(),layoutY + borderTopWidth / 2,borderTopWidth,borderTopColor,style.getProperty(StyleConstants.STYLE_BORDER_TOP_STYLE),BorderInfo.TOP_BORDER);
      borders[BorderInfo.RIGHT_BORDER]=new BorderInfo(layoutX + container.getWidth() - borderRightWidth / 2,layoutY,layoutX + container.getWidth() - borderRightWidth / 2,layoutY + container.getHeight(),borderRightWidth,borderRightColor,style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_STYLE),BorderInfo.RIGHT_BORDER);
      borders[BorderInfo.BOTTOM_BORDER]=new BorderInfo(layoutX,layoutY + container.getHeight() - borderBottomWidth / 2,layoutX + container.getWidth(),layoutY + container.getHeight() - borderBottomWidth / 2,borderBottomWidth,borderBottomColor,style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_STYLE),BorderInfo.BOTTOM_BORDER);
      borders[BorderInfo.LEFT_BORDER]=new BorderInfo(layoutX + borderLeftWidth / 2,layoutY,layoutX + borderLeftWidth / 2,layoutY + container.getHeight(),borderLeftWidth,borderLeftColor,style.getProperty(StyleConstants.STYLE_BORDER_LEFT_STYLE),BorderInfo.LEFT_BORDER);
      drawBorder(borders);
    }
    makeBookmark(container,curPos);
    handleHyperlinkAction(container,curPos);
  }
}",0.5311114508484941
76796,"/** 
 * Draws the borders of a container.
 * @param borders		the border info
 */
private void drawBorder(BorderInfo border){
  if (IStyle.SOLID_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOTTED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DASHED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOUBLE_VALUE.equals(border.borderStyle)) {
    int outerBorderWidth=border.borderWidth / 3;
    int innerBorderWidth=border.borderWidth / 3;
switch (border.borderType) {
case BorderInfo.TOP_BORDER:
      drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY - border.borderWidth / 2 + outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
    drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY + border.borderWidth / 2 - innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
  return;
case BorderInfo.RIGHT_BORDER:
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.BOTTOM_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY + border.borderWidth / 2 - outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY - border.borderWidth / 2 + innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.LEFT_BORDER:
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}
}
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}","/** 
 * Draws the borders of a container.
 * @param borders		the border info
 */
private void drawBorder(BorderInfo border){
  if (IStyle.SOLID_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOTTED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DASHED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOUBLE_VALUE.equals(border.borderStyle)) {
    int outerBorderWidth=border.borderWidth / 3;
    int innerBorderWidth=border.borderWidth / 3;
switch (border.borderType) {
case BorderInfo.TOP_BORDER:
      drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY - innerBorderWidth),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
    drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY + border.borderWidth / 2 - innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
  return;
case BorderInfo.RIGHT_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.BOTTOM_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY + border.borderWidth / 2 - outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY - border.borderWidth / 2 + innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.LEFT_BORDER:
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}
}
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}",0.9601671994098844
76797,"/** 
 * @param computedColumns
 * @param rsPopulator
 * @param dataSetRuntime
 * @throws DataException
 */
public void evaluateMultiPassExprOnCmp(IComputedColumnsState iccState,boolean useResultSetMeta) throws DataException {
  assert(iccState != null);
  Context context=Context.enter();
  try {
    int exprType=COMPUTED_COLUMN_EXPR;
    int currentGroupLevel=0;
    ExpressionInfo exprInfo;
    MultiPassExpressionCompiler helper=this.getMultiPassCompilerHelper();
    helper.setDataSetMode(isDataSetMode);
    for (int i=0; i < iccState.getCount(); i++) {
      if (iccState.isValueAvailable(i)) {
        helper.addAvailableCmpColumn(iccState.getName(i));
      }
    }
    for (int i=0; i < iccState.getCount(); i++) {
      if (!iccState.isValueAvailable(i)) {
        IBaseExpression baseExpression=iccState.getExpression(i);
        String name=iccState.getName(i);
        if (useResultSetMeta && name.matches(""String_Node_Str"")) {
          exprType=GROUP_COLUMN_EXPR;
          currentGroupLevel=getCurrentGroupLevel(name,currentGroupLevel,rsPopulator.getQuery());
          iccState.setValueAvailable(i);
        }
        if (baseExpression instanceof IScriptExpression) {
          exprInfo=new ExpressionInfo((IScriptExpression)baseExpression,exprType,currentGroupLevel,useResultSetMeta);
          baseExpression.setHandle(helper.compileExpression(exprInfo,context));
        }
 else         if (baseExpression instanceof IConditionalExpression) {
          compileConditionalExpression((IConditionalExpression)baseExpression,helper,rsPopulator,exprType,currentGroupLevel,context);
        }
        if (exprType == GROUP_COLUMN_EXPR) {
          return;
        }
        if (helper.getExpressionPassLevel() <= 1) {
          iccState.setValueAvailable(i);
        }
 else {
          break;
        }
      }
    }
    calculate(helper);
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param computedColumns
 * @param rsPopulator
 * @param dataSetRuntime
 * @throws DataException
 */
public void evaluateMultiPassExprOnCmp(IComputedColumnsState iccState,boolean useResultSetMeta) throws DataException {
  assert(iccState != null);
  Context context=Context.enter();
  try {
    int exprType=COMPUTED_COLUMN_EXPR;
    int currentGroupLevel=0;
    ExpressionInfo exprInfo;
    MultiPassExpressionCompiler helper=this.getMultiPassCompilerHelper();
    helper.setDataSetMode(isDataSetMode);
    for (int i=0; i < iccState.getCount(); i++) {
      if (iccState.isValueAvailable(i)) {
        helper.addAvailableCmpColumn(iccState.getName(i));
      }
    }
    for (int i=0; i < iccState.getCount(); i++) {
      if (!iccState.isValueAvailable(i)) {
        IBaseExpression baseExpression=iccState.getExpression(i);
        String name=iccState.getName(i);
        if (useResultSetMeta && name.matches(""String_Node_Str"")) {
          exprType=GROUP_COLUMN_EXPR;
          currentGroupLevel=getCurrentGroupLevel(name,currentGroupLevel,rsPopulator.getQuery());
          iccState.setValueAvailable(i);
        }
        if (baseExpression instanceof IScriptExpression) {
          exprInfo=new ExpressionInfo((IScriptExpression)baseExpression,exprType,currentGroupLevel,useResultSetMeta);
          baseExpression.setHandle(helper.compileExpression(exprInfo,context));
        }
 else         if (baseExpression instanceof IConditionalExpression) {
          compileConditionalExpression((IConditionalExpression)baseExpression,helper,rsPopulator,exprType,currentGroupLevel,context);
        }
        if (exprType == GROUP_COLUMN_EXPR) {
          return;
        }
        if (helper.getExpressionPassLevel() <= 1) {
          iccState.setValueAvailable(i);
        }
        helper.reSetPassLevelFlag();
      }
    }
    calculate(helper);
  }
  finally {
    Context.exit();
  }
}",0.94681411269089
76798,"/** 
 * set total pass level. the total pass level must be the max of passLevel
 * @param passLevel
 */
private void setTotalPassLevel(int passLevel){
  if (this.totalPassLevel < passLevel)   this.totalPassLevel=passLevel;
 else   this.totalPassLevel=0;
}","/** 
 * set total pass level. the total pass level must be the max of passLevel
 * @param passLevel
 */
private void setTotalPassLevel(int passLevel){
  if (this.totalPassLevel < passLevel)   this.totalPassLevel=passLevel;
}",0.9352818371607516
76799,"/** 
 * reset the helper status
 * @param availableAggrObj
 */
void setCompilerStatus(List availableAggrObj){
  this.hasAggregate=false;
  this.hasNesetedAggregate=false;
  this.caculatedAggregateList=availableAggrObj;
  this.aggrObjList=new ArrayList();
}","/** 
 * reset the helper status
 * @param availableAggrObj
 */
void setCompilerStatus(List availableAggrObj){
  this.hasAggregate=false;
  this.hasNesetedAggregate=false;
  this.caculatedAggregateList=availableAggrObj;
  this.aggrObjList=new ArrayList();
  this.passLevel=0;
  this.totalPassLevel=0;
}",0.919210053859964
76800,"/** 
 * @param PRE_add_filter
 * @param PRE_add_sort
 * @param PRE_use_oldbinding
 * @return
 */
private QueryDefinition newPreIVReportQuery(){
  QueryDefinition qd=new QueryDefinition();
  if (GEN_add_filter == true) {
    qd.addFilter(GEN_filterDefn);
  }
  if (PRE_add_filter == true) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (PRE_add_sort) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (PRE_add_group == true) {
    String columnBindingNameGroup=""String_Node_Str"";
    IBaseExpression columnBindingExprGroup=new ScriptExpression(""String_Node_Str"");
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addResultSetExpression(columnBindingNameGroup,columnBindingExprGroup);
    qd.addGroup(gd);
  }
  for (int i=0; i < rowExprName.length; i++) {
    if (PRE_use_oldbinding) {
      qd.addResultSetExpression(this.rowExprName[i],this.rowBeArray[i]);
    }
 else {
      qd.addResultSetExpression(this.rowExprName[i],new ScriptExpression(""String_Node_Str"" + this.rowExprName[i] + ""String_Node_Str""));
    }
  }
  for (int i=0; i < totalExprName.length; i++) {
    if (PRE_use_oldbinding) {
      qd.addResultSetExpression(this.totalExprName[i],this.totalBeArray[i]);
    }
 else {
      qd.addResultSetExpression(this.totalExprName[i],new ScriptExpression(""String_Node_Str"" + this.totalExprName[i] + ""String_Node_Str""));
    }
  }
  return qd;
}","/** 
 * @param PRE_add_filter
 * @param PRE_add_sort
 * @param PRE_use_oldbinding
 * @return
 */
private QueryDefinition newPreIVReportQuery(){
  QueryDefinition qd=new QueryDefinition();
  if (GEN_add_filter == true) {
    qd.addFilter(GEN_filterDefn);
  }
  if (PRE_add_filter == true) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (PRE_add_sort) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (PRE_add_group == true) {
    String columnBindingNameGroup=""String_Node_Str"";
    IBaseExpression columnBindingExprGroup=new ScriptExpression(""String_Node_Str"");
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addResultSetExpression(columnBindingNameGroup,columnBindingExprGroup);
    qd.addGroup(gd);
  }
  for (int i=0; i < rowExprName.length; i++) {
    if (PRE_change_oldbinding && i == rowExprName.length - 1) {
      qd.addResultSetExpression(this.rowExprName[i],new ScriptExpression(""String_Node_Str""));
    }
 else {
      qd.addResultSetExpression(this.rowExprName[i],this.rowBeArray[i]);
    }
  }
  for (int i=0; i < totalExprName.length; i++) {
    qd.addResultSetExpression(this.totalExprName[i],this.totalBeArray[i]);
  }
  return qd;
}",0.7993464052287582
76801,"/** 
 * With group and filter
 * @throws BirtException
 */
public void testBasicIVSubQuery() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=true;
  this.GEN_subquery_on_group=true;
  this._genBasicIVWithSubQuery();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this.PRE_use_oldbinding=true;
  this._preBasicIVWithSubQuery();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * With group and filter
 * @throws BirtException
 */
public void testBasicIVSubQuery() throws Exception {
  this.GEN_add_filter=false;
  this.GEN_add_group=true;
  this.GEN_subquery_on_group=true;
  this._genBasicIVWithSubQuery();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this._preBasicIVWithSubQuery();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9732441471571908
76802,"public void setUp() throws Exception {
  super.setUp();
  expectedValue=new ArrayList();
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_subquery_on_group=false;
  this.PRE_add_filter=false;
  this.PRE_add_sort=false;
  this.PRE_use_oldbinding=false;
  this.PRE_add_group=false;
}","public void setUp() throws Exception {
  super.setUp();
  expectedValue=new ArrayList();
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_subquery_on_group=false;
  this.PRE_add_filter=false;
  this.PRE_add_sort=false;
  this.PRE_change_oldbinding=false;
  this.PRE_add_group=false;
}",0.988391376451078
76803,"/** 
 * @throws Exception
 */
public void testBasicIV5() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_use_oldbinding=true;
  this.PRE_add_group=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * @throws Exception
 */
public void testBasicIV5() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_add_group=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.PRE_add_filter=true;
  this.PRE_add_sort=true;
  this.PRE_add_group=true;
  this.preBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.968
76804,"/** 
 * Test <code>IHideRule</code>
 * @throws SemanticException
 * @throws ScriptException
 */
public void testHideRule() throws SemanticException, ScriptException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  HideRule hide=StructureFactory.createHideRule();
  hide.setFormat(""String_Node_Str"");
  HideRuleHandle hideHandle=(HideRuleHandle)tableHandle.getPropertyHandle(""String_Node_Str"").addItem(hide);
  HideRule hide2=StructureFactory.createHideRule();
  hide2.setExpression(""String_Node_Str"");
  hide2.setFormat(""String_Node_Str"");
  tableHandle.getPropertyHandle(""String_Node_Str"").addItem(hide2);
  IReportItem item=new ReportItem(tableHandle);
  String[] rules=item.getHideRuleExpression(""String_Node_Str"");
  assertEquals(2,rules.length);
  assertEquals(""String_Node_Str"",rules[0]);
  assertEquals(""String_Node_Str"",rules[1]);
  IHideRule iHide=new HideRuleImpl(hideHandle);
  assertEquals(""String_Node_Str"",iHide.getFormat());
  iHide.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iHide.getValueExpr());
  item.removeHideRule(""String_Node_Str"");
  rules=item.getHideRuleExpression(""String_Node_Str"");
  assertEquals(0,rules.length);
}","/** 
 * Test <code>IHideRule</code>
 * @throws SemanticException
 * @throws ScriptException
 */
public void testHideRule() throws SemanticException, ScriptException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  HideRule hide=StructureFactory.createHideRule();
  hide.setFormat(""String_Node_Str"");
  HideRuleHandle hideHandle=(HideRuleHandle)tableHandle.getPropertyHandle(""String_Node_Str"").addItem(hide);
  HideRule hide2=StructureFactory.createHideRule();
  hide2.setExpression(""String_Node_Str"");
  hide2.setFormat(""String_Node_Str"");
  tableHandle.getPropertyHandle(""String_Node_Str"").addItem(hide2);
  IReportItem item=new ReportItem(tableHandle);
  IHideRule[] rules=item.getHideRules();
  assertEquals(2,rules.length);
  IHideRule iHide=new HideRuleImpl(hideHandle);
  assertEquals(""String_Node_Str"",iHide.getFormat());
  iHide.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iHide.getValueExpr());
  item.removeHideRule(iHide);
  rules=item.getHideRules();
  assertEquals(1,rules.length);
}",0.7115135834411385
76805,"public void testCell() throws ScriptException {
  CellHandle cellHandle=factory.newCell();
  ICell cell=new Cell(cellHandle);
  cell.setColumn(2);
  assertEquals(2,cell.getColumn());
  cell.setColumnSpan(3);
  assertEquals(3,cell.getColumnSpan());
  cell.setDrop(DesignChoiceConstants.DROP_TYPE_ALL);
  assertEquals(DesignChoiceConstants.DROP_TYPE_ALL,cell.getDrop());
  cell.setRowSpan(4);
  assertEquals(4,cell.getRowSpan());
}","public void testCell() throws ScriptException {
  CellHandle cellHandle=factory.newCell();
  ICell cell=new Cell(cellHandle);
  cell.setColumn(2);
  assertEquals(2,cell.getColumn());
  assertEquals(1,cell.getColumnSpan());
  cell.setDrop(DesignChoiceConstants.DROP_TYPE_ALL);
  assertEquals(DesignChoiceConstants.DROP_TYPE_ALL,cell.getDrop());
  assertEquals(1,cell.getRowSpan());
}",0.8877928483353884
76806,"/** 
 * Tests addColumnBinding , addHighLightRule , addHideRule , addFilterCondition , addSortCondition.
 * @throws SemanticException
 * @throws ScriptException
 */
public void testAddFunction() throws SemanticException, ScriptException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  IDataBinding binding=StructureScriptAPIFactory.createComputedColumn();
  binding.setExpression(""String_Node_Str"");
  binding.setName(""String_Node_Str"");
  IListing item=new Listing(tableHandle);
  item.addColumnBinding(binding);
  IDataBinding binding2=StructureScriptAPIFactory.createComputedColumn();
  try {
    item.addColumnBinding(binding2);
    fail();
  }
 catch (  ScriptException e) {
  }
  RowHandle rowHandle=(RowHandle)tableHandle.getFooter().getContents().get(0);
  IRow row=new Row(rowHandle);
  IHighLightRule highlight=StructureScriptAPIFactory.createHighLightRule();
  row.addHighLightRule(highlight);
  IHideRule hideRule=StructureScriptAPIFactory.createHideRule();
  item.addHideRule(hideRule);
  IFilterCondition filter=StructureScriptAPIFactory.createFilterCondition();
  try {
    item.addFilterCondition(filter);
    fail();
  }
 catch (  ScriptException e) {
  }
  filter.setExpr(""String_Node_Str"");
  item.addFilterCondition(filter);
  ISortCondition sort=StructureScriptAPIFactory.createSortKey();
  try {
    item.addSortCondition(sort);
    fail();
  }
 catch (  ScriptException e) {
  }
  sort.setKey(""String_Node_Str"");
  item.addSortCondition(sort);
}","/** 
 * Tests addColumnBinding , addHighLightRule , addHideRule , addFilterCondition , addSortCondition.
 * @throws SemanticException
 * @throws ScriptException
 */
public void testAddFunction() throws SemanticException, ScriptException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  IDataBinding binding=StructureScriptAPIFactory.createDataBinding();
  binding.setExpression(""String_Node_Str"");
  binding.setName(""String_Node_Str"");
  IListing item=new Listing(tableHandle);
  item.addDataBinding(binding);
  IDataBinding binding2=StructureScriptAPIFactory.createDataBinding();
  try {
    item.addDataBinding(binding2);
    fail();
  }
 catch (  ScriptException e) {
  }
  RowHandle rowHandle=(RowHandle)tableHandle.getFooter().getContents().get(0);
  IRow row=new Row(rowHandle);
  IHighlightRule highlight=StructureScriptAPIFactory.createHighLightRule();
  row.addHighlightRule(highlight);
  IHideRule hideRule=StructureScriptAPIFactory.createHideRule();
  item.addHideRule(hideRule);
  IFilterCondition filter=StructureScriptAPIFactory.createFilterCondition();
  try {
    item.addFilterCondition(filter);
    fail();
  }
 catch (  ScriptException e) {
  }
  filter.setExpr(""String_Node_Str"");
  item.addFilterCondition(filter);
  ISortCondition sort=StructureScriptAPIFactory.createSortCondition();
  try {
    item.addSortCondition(sort);
    fail();
  }
 catch (  ScriptException e) {
  }
  sort.setKey(""String_Node_Str"");
  item.addSortCondition(sort);
}",0.9569752281616688
76807,"/** 
 * Test <code>IHighLightRule</code>
 * @throws SemanticException
 * @throws ScriptException
 */
public void testHighLightRule() throws SemanticException, ScriptException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  HighlightRule rule=StructureFactory.createHighlightRule();
  SharedStyleHandle style=factory.newStyle(""String_Node_Str"");
  style.getPropertyHandle(""String_Node_Str"").addItem(rule);
  designHandle.getStyles().add(style);
  tableHandle.setStyle(style);
  RowHandle rowHandle=(RowHandle)tableHandle.getHeader().get(0);
  IRow item=new Row(rowHandle);
  IHighLightRule iRule=new HighLightRuleImpl(rule);
  item.addHighLightRule(iRule);
  IHighLightRule[] rules=item.getHighLightRule();
  assertEquals(1,rules.length);
  iRule=rules[0];
  iRule.setColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getColor());
  iRule.setDateTimeFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getDateTimeFormat());
  iRule.setFontStyle(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getFontStyle());
  iRule.setFontWeight(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getFontWeight());
  iRule.setStringFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getStringFormat());
  iRule.setTestExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getTestExpression());
  iRule.setColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getColor());
  iRule.setOperator(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getOperator());
  iRule.setValue1(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getValue1());
  iRule.setValue2(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getValue2());
  iRule.setBackGroudnColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getBackGroudnColor());
  item.removeHighLightRules();
  rules=item.getHighLightRule();
  assertEquals(0,rules.length);
}","/** 
 * Test <code>IHighLightRule</code>
 * @throws SemanticException
 * @throws ScriptException
 */
public void testHighLightRule() throws SemanticException, ScriptException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  HighlightRule rule=StructureFactory.createHighlightRule();
  SharedStyleHandle style=factory.newStyle(""String_Node_Str"");
  style.getPropertyHandle(""String_Node_Str"").addItem(rule);
  designHandle.getStyles().add(style);
  tableHandle.setStyle(style);
  RowHandle rowHandle=(RowHandle)tableHandle.getHeader().get(0);
  IRow item=new Row(rowHandle);
  IHighlightRule iRule=new HighlightRuleImpl(rule);
  item.addHighlightRule(iRule);
  IHighlightRule[] rules=item.getHighlightRules();
  assertEquals(1,rules.length);
  iRule=rules[0];
  iRule.setColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getColor());
  iRule.setDateTimeFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getDateTimeFormat());
  iRule.setFontStyle(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getFontStyle());
  iRule.setFontWeight(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getFontWeight());
  iRule.setStringFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getStringFormat());
  iRule.setTestExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getTestExpression());
  iRule.setColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getColor());
  iRule.setOperator(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getOperator());
  iRule.setValue1(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getValue1());
  iRule.setValue2(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getValue2());
  iRule.setBackGroudnColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getBackGroudnColor());
  item.removeHighlightRules();
  rules=item.getHighlightRules();
  assertEquals(0,rules.length);
}",0.9879939969984992
76808,"/** 
 * Test <code>IDataBinding</code> method.
 * @throws ScriptException
 * @throws SemanticException
 */
public void testDataBinding() throws ScriptException, SemanticException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,""String_Node_Str"");
  column.setExpression(""String_Node_Str"");
  tableHandle.addColumnBinding(column,true);
  ComputedColumn column2=StructureFactory.newComputedColumn(tableHandle,""String_Node_Str"");
  column2.setExpression(""String_Node_Str"");
  tableHandle.addColumnBinding(column2,true);
  IReportItem item=new ReportItem(tableHandle);
  IDataBinding[] bindings=item.getColumnBindings();
  assertEquals(2,bindings.length);
  IDataBinding binding=bindings[0];
  IDataBinding binding2=bindings[1];
  assertEquals(""String_Node_Str"",binding.getName());
  assertEquals(""String_Node_Str"",binding2.getName());
  binding.setAggregateOn(""String_Node_Str"");
  assertEquals(""String_Node_Str"",binding.getAggregateOn());
  binding.setDataType(""String_Node_Str"");
  assertEquals(""String_Node_Str"",binding.getDataType());
  binding.setExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",binding.getExpression());
  assertEquals(""String_Node_Str"",binding.getName());
  assertEquals(""String_Node_Str"",item.getColumnBinding(""String_Node_Str""));
  item.removeColumnBinding(""String_Node_Str"");
  assertNull(item.getColumnBinding(""String_Node_Str""));
}","/** 
 * Test <code>IDataBinding</code> method.
 * @throws ScriptException
 * @throws SemanticException
 */
public void testDataBinding() throws ScriptException, SemanticException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,""String_Node_Str"");
  column.setExpression(""String_Node_Str"");
  tableHandle.addColumnBinding(column,true);
  ComputedColumn column2=StructureFactory.newComputedColumn(tableHandle,""String_Node_Str"");
  column2.setExpression(""String_Node_Str"");
  tableHandle.addColumnBinding(column2,true);
  IReportItem item=new ReportItem(tableHandle);
  IDataBinding[] bindings=item.getDataBindings();
  assertEquals(2,bindings.length);
  IDataBinding binding=bindings[0];
  IDataBinding binding2=bindings[1];
  assertEquals(""String_Node_Str"",binding.getName());
  assertEquals(""String_Node_Str"",binding2.getName());
  binding.setAggregateOn(""String_Node_Str"");
  assertEquals(""String_Node_Str"",binding.getAggregateOn());
  binding.setDataType(""String_Node_Str"");
  assertEquals(""String_Node_Str"",binding.getDataType());
  binding.setExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",binding.getExpression());
  assertEquals(""String_Node_Str"",binding.getName());
  assertEquals(""String_Node_Str"",item.getDataBinding(""String_Node_Str""));
}",0.9577464788732394
76809,"/** 
 * Removes Hide Rule through format type.
 */
public void removeHideRule(IHideRule rule) throws ScriptException {
  PropertyHandle propHandle=handle.getPropertyHandle(IReportItemModel.VISIBILITY_PROP);
  try {
    propHandle.removeItem(rule);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}","/** 
 * Removes Hide Rule through format type.
 */
public void removeHideRule(IHideRule rule) throws ScriptException {
  PropertyHandle propHandle=handle.getPropertyHandle(IReportItemModel.VISIBILITY_PROP);
  try {
    propHandle.removeItem(rule.getStructure());
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}",0.9787835926449788
76810,"private void createDrillthroughSelectFormat(Composite container){
  Group group=new Group(container,SWT.NONE);
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  ReportEngine engine=new ReportEngine(new EngineConfig());
  supportedFormats=engine.getSupportedFormats();
  formatCheckBtns=new HashMap();
  for (int i=0; i < supportedFormats.length; i++) {
    Button btn=new Button(group,SWT.RADIO);
    btn.setText(supportedFormats[i]);
    formatCheckBtns.put(supportedFormats[i],btn);
    btn.addSelectionListener(new SelectionListener(){
      public void widgetSelected(      SelectionEvent e){
        initAnchorChooser(targetReportHandle,true);
      }
      public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
  }
}","private void createDrillthroughSelectFormat(Composite container){
  Group group=new Group(container,SWT.NONE);
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  ReportEngine engine=new ReportEngine(new EngineConfig());
  supportedFormats=engine.getSupportedFormats();
  formatCheckBtns=new HashMap();
  for (int i=0; i < supportedFormats.length; i++) {
    Button btn=new Button(group,SWT.RADIO);
    btn.setText(supportedFormats[i]);
    formatCheckBtns.put(supportedFormats[i],btn);
    btn.addSelectionListener(new SelectionListener(){
      public void widgetSelected(      SelectionEvent e){
        if (tocButton.getSelection()) {
          initAnchorChooser(targetReportHandle,true);
        }
 else         if (targetBookmarkButton.getSelection()) {
          initAnchorChooser(targetReportHandle,false);
        }
      }
      public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
  }
}",0.9073482428115016
76811,"/** 
 * Most objects should already be formatted to the same type by method formatToComparable at this point if neither of them is null. This method will therefore be terminated pretty soon except for calling from method between with weird parameters like obj:String, op1:Double and op2:Date.
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws DataException
 */
public static int compare(Object obj1,Object obj2) throws DataException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  try {
    if (MiscUtil.isSameType(obj1,obj2)) {
      if (obj1 instanceof Boolean) {
        if (obj1.equals(obj2))         return 0;
        Boolean bool=(Boolean)obj1;
        if (bool.equals(Boolean.TRUE))         return 1;
 else         return -1;
      }
 else       if (obj1 instanceof Comparable) {
        if (obj1 instanceof String) {
          return myCollator.compare(obj1,obj2);
        }
 else {
          return ((Comparable)obj1).compareTo(obj2);
        }
      }
 else {
        return myCollator.compare(obj1.toString(),obj2.toString());
      }
    }
 else     if (MiscUtil.isNumericOrString(obj1) && MiscUtil.isNumericOrString(obj2)) {
      return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
    }
 else     if (MiscUtil.isDateOrString(obj1) && MiscUtil.isDateOrString(obj2)) {
      return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
    }
 else     throw new DataException(ResourceConstants.INVALID_TYPE_IN_EXPR);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}","/** 
 * Most objects should already be formatted to the same type by method formatToComparable at this point if neither of them is null. This method will therefore be terminated pretty soon except for calling from method between with weird parameters like obj:String, op1:Double and op2:Date.
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws DataException
 */
public static int compare(Object obj1,Object obj2) throws DataException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  try {
    if (MiscUtil.isSameType(obj1,obj2)) {
      if (obj1 instanceof Boolean) {
        if (obj1.equals(obj2))         return 0;
        Boolean bool=(Boolean)obj1;
        if (bool.equals(Boolean.TRUE))         return 1;
 else         return -1;
      }
 else       if (obj1 instanceof Comparable) {
        return ((Comparable)obj1).compareTo(obj2);
      }
 else {
        return obj1.toString().compareTo(obj2.toString());
      }
    }
 else     if (MiscUtil.isNumericOrString(obj1) && MiscUtil.isNumericOrString(obj2)) {
      return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
    }
 else     if (MiscUtil.isDateOrString(obj1) && MiscUtil.isDateOrString(obj2)) {
      return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
    }
 else     throw new DataException(ResourceConstants.INVALID_TYPE_IN_EXPR);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}",0.9142687629783448
76812,"private void updateCheckBoxArea(){
  if ((DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType()) || PARAM_CONTROL_LIST.equals(getSelectedControlType())) && DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
    allowBlank.setEnabled(true);
  }
 else {
    allowBlank.setEnabled(false);
  }
  if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) {
    doNotEcho.setEnabled(true);
  }
 else {
    doNotEcho.setEnabled(false);
  }
  if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(getSelectedControlType())) {
    needSort.setEnabled(false);
  }
 else {
    needSort.setEnabled(true);
  }
}","private void updateCheckBoxArea(){
  if ((DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType()) || PARAM_CONTROL_LIST.equals(getSelectedControlType()) || PARAM_CONTROL_COMBO.equals(getSelectedControlType())) && DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
    allowBlank.setEnabled(true);
  }
 else {
    allowBlank.setEnabled(false);
  }
  if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) {
    doNotEcho.setEnabled(true);
  }
 else {
    doNotEcho.setEnabled(false);
  }
  if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(getSelectedControlType())) {
    needSort.setEnabled(false);
  }
 else {
    needSort.setEnabled(true);
  }
}",0.964102564102564
76813,"/** 
 * Process BIRT deployment configuration. <p> Save user-defined settings into web.xml file.
 * @param monitor
 * @throws CoreException
 */
protected void processConfiguration(IProgressMonitor monitor,Shell shell) throws CoreException {
  WebArtifactOverwriteQuery query=new WebArtifactOverwriteQuery(shell);
  WebArtifactUtil.configureContextParam((Map)properties.get(EXT_CONTEXT_PARAM),project,query,monitor);
  WebArtifactUtil.configureListener((Map)properties.get(EXT_LISTENER),project,query,monitor);
  WebArtifactUtil.configureServlet((Map)properties.get(EXT_SERVLET),project,query,monitor);
  WebArtifactUtil.configureServletMapping((Map)properties.get(EXT_SERVLET_MAPPING),project,query,monitor);
  WebArtifactUtil.configureTaglib((Map)properties.get(EXT_TAGLIB),project,query,monitor);
}","/** 
 * Process BIRT deployment configuration. <p> Save user-defined settings into web.xml file.
 * @param monitor
 * @throws CoreException
 */
protected void processConfiguration(IProgressMonitor monitor,Shell shell) throws CoreException {
  SimpleImportOverwriteQuery query=new SimpleImportOverwriteQuery();
  WebArtifactUtil.configureContextParam((Map)properties.get(EXT_CONTEXT_PARAM),project,query,monitor);
  WebArtifactUtil.configureListener((Map)properties.get(EXT_LISTENER),project,query,monitor);
  WebArtifactUtil.configureServlet((Map)properties.get(EXT_SERVLET),project,query,monitor);
  WebArtifactUtil.configureServletMapping((Map)properties.get(EXT_SERVLET_MAPPING),project,query,monitor);
  WebArtifactUtil.configureTaglib((Map)properties.get(EXT_TAGLIB),project,query,monitor);
}",0.9705698184095178
76814,"public void dispose(){
  super.dispose();
  chartModel=null;
  if (previewPainter != null) {
    previewPainter.dispose();
  }
  previewPainter=null;
  sSubType=null;
  sType=null;
  sDimension=null;
  vSubTypeNames=null;
  orientation=Orientation.VERTICAL_LITERAL;
}","public void dispose(){
  super.dispose();
  chartModel=null;
  if (previewPainter != null) {
    previewPainter.dispose();
  }
  previewPainter=null;
  sSubType=null;
  sType=null;
  sDimension=null;
  vSubTypeNames=null;
  orientation=null;
}",0.9372549019607844
76815,"/** 
 * This method populates the subtype panel (creating its components if necessary). It gets called when the type selection changes or when the dimension selection changes (since not all sub types are supported for all dimension selections).
 * @param sSelectedType Type from Type List
 */
private void createAndDisplayTypesSheet(String sSelectedType){
  IChartType chartType=(IChartType)htTypes.get(sSelectedType);
  lblOrientation.setEnabled(chartType.supportsTransposition() && !is3D());
  cbOrientation.setEnabled(chartType.supportsTransposition() && !is3D());
  updateDimensionCombo(sSelectedType);
  Vector vSubTypes=null;
  if (this.sDimension != null && this.orientation != null) {
    vSubTypes=new Vector(chartType.getChartSubtypes(sDimension,orientation));
  }
  if (vSubTypes == null || vSubTypes.size() == 0) {
    vSubTypes=new Vector(chartType.getChartSubtypes(chartType.getDefaultDimension(),chartType.getDefaultOrientation()));
    this.sDimension=chartType.getDefaultDimension();
    this.orientation=chartType.getDefaultOrientation();
  }
  if (!cbOrientation.isEnabled()) {
    this.orientation=chartType.getDefaultOrientation();
  }
  ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
  createGroups(vSubTypes);
  if (this.orientation == Orientation.HORIZONTAL_LITERAL) {
    this.cbOrientation.setSelection(true);
  }
 else {
    this.cbOrientation.setSelection(false);
  }
  cmpType.layout();
}","/** 
 * This method populates the subtype panel (creating its components if necessary). It gets called when the type selection changes or when the dimension selection changes (since not all sub types are supported for all dimension selections).
 * @param sSelectedType Type from Type List
 */
private void createAndDisplayTypesSheet(String sSelectedType){
  IChartType chartType=(IChartType)htTypes.get(sSelectedType);
  lblOrientation.setEnabled(chartType.supportsTransposition() && !is3D());
  cbOrientation.setEnabled(chartType.supportsTransposition() && !is3D());
  updateDimensionCombo(sSelectedType);
  if (this.sDimension == null) {
    this.sDimension=chartType.getDefaultDimension();
  }
  if (this.orientation == null) {
    this.orientation=chartType.getDefaultOrientation();
  }
  Vector vSubTypes=new Vector(chartType.getChartSubtypes(sDimension,orientation));
  if (vSubTypes.size() == 0) {
    vSubTypes=new Vector(chartType.getChartSubtypes(chartType.getDefaultDimension(),chartType.getDefaultOrientation()));
    this.sDimension=chartType.getDefaultDimension();
    this.orientation=chartType.getDefaultOrientation();
  }
  if (!cbOrientation.isEnabled()) {
    this.orientation=chartType.getDefaultOrientation();
  }
  ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
  createGroups(vSubTypes);
  if (this.orientation == Orientation.HORIZONTAL_LITERAL) {
    this.cbOrientation.setSelection(true);
  }
 else {
    this.cbOrientation.setSelection(false);
  }
  cmpType.layout();
}",0.8606224627875507
76816,"private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableAreaComposite=new Composite(valueArea,SWT.NONE);
  tableAreaComposite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableAreaComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableArea tableArea=new TableArea(tableAreaComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER,tableAreaModifier);
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=tableArea.getTable();
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  String[] columns;
  int[] columnWidth;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=tableArea.getTableViewer();
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  tableArea.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableAreaComposite,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      List choices=new ArrayList();
      for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
        SelectionChoice choice=(SelectionChoice)iter.next();
        choices.add(choice.getValue());
      }
      ImportValueDialog dialog=new ImportValueDialog(type,choices);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        choiceList.clear();
        for (int i=0; i < importValues.length; i++) {
          SelectionChoice choice=StructureFactory.createSelectionChoice();
          choice.setValue(importValues[i]);
          choiceList.add(choice);
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        changeDefaultValue(null);
      }
 else {
        changeDefaultValue(choice.getValue());
      }
      refreshValueTable();
      changeDefault.getParent().layout();
    }
  }
);
  createPromptLine(tableAreaComposite);
  updateTableButtons();
}","private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableAreaComposite=new Composite(valueArea,SWT.NONE);
  tableAreaComposite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableAreaComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableArea tableArea=new TableArea(tableAreaComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER,tableAreaModifier);
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=tableArea.getTable();
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  String[] columns;
  int[] columnWidth;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=tableArea.getTableViewer();
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  tableArea.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableAreaComposite,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      boolean defaultValueRemoved=true;
      String type=getSelectedDataType();
      List choices=new ArrayList();
      for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
        SelectionChoice choice=(SelectionChoice)iter.next();
        choices.add(choice.getValue());
      }
      ImportValueDialog dialog=new ImportValueDialog(type,choices);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        choiceList.clear();
        for (int i=0; i < importValues.length; i++) {
          SelectionChoice choice=StructureFactory.createSelectionChoice();
          choice.setValue(importValues[i]);
          choiceList.add(choice);
          if (defaultValue != null && defaultValue.equals(importValues[i])) {
            defaultValueRemoved=false;
          }
        }
        refreshValueTable();
        if (defaultValue != null && defaultValueRemoved) {
          changeDefaultValue(null);
        }
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        changeDefaultValue(null);
      }
 else {
        changeDefaultValue(choice.getValue());
      }
      refreshValueTable();
      changeDefault.getParent().layout();
    }
  }
);
  createPromptLine(tableAreaComposite);
  updateTableButtons();
}",0.9587225067791504
76817,"/** 
 * Test the nested totals.Company with aggregateOn values.
 * @throws Exception 
 * @throws IOException 
 */
public void testNestedTotal4() throws IOException, Exception {
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  try {
    createAndRunQuery(null,null,null,null,null,null,bindingNameRow,bindingExprRow,null,groupDefn,null,null);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
    assertTrue(true);
  }
}","/** 
 * Test the nested totals.Company with aggregateOn values.
 * @throws Exception 
 * @throws IOException 
 */
public void testNestedTotal4() throws IOException, Exception {
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[6];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  try {
    createAndRunQuery(null,null,null,null,null,null,bindingNameRow,bindingExprRow,null,groupDefn,null,null);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}",0.9663608562691132
76818,"/** 
 */
public JdbcSQLContentAssistProcessor(DataSetDesign ds){
  super();
  handle=(DataSetDesign)ds;
  DataSourceDesign dataSourceDesign=handle.getDataSourceDesign();
  setDataSourceHandle(dataSourceDesign);
}","/** 
 */
public JdbcSQLContentAssistProcessor(){
  super();
}",0.4468864468864469
76819,"/** 
 * Creates the textual query editor 
 * @param parent
 */
private void createTextualQueryComposite(Composite parent){
  Composite composite=new Composite(parent,SWT.FILL | SWT.LEFT_TO_RIGHT);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  CompositeRuler ruler=new CompositeRuler();
  LineNumberRulerColumn lineNumbers=new LineNumberRulerColumn();
  ruler.addDecorator(0,lineNumbers);
  viewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  sourceViewerConfiguration=new JdbcSQLSourceViewerConfiguration(this.getDataSetDesign());
  viewer.configure(sourceViewerConfiguration);
  doc=new Document(getQueryText());
  FastPartitioner partitioner=new FastPartitioner(new SQLPartitionScanner(),new String[]{SQLPartitionScanner.SINGLE_LINE_COMMENT1,SQLPartitionScanner.SINGLE_LINE_COMMENT2,SQLPartitionScanner.MULTI_LINE_COMMENT,IDocument.DEFAULT_CONTENT_TYPE});
  partitioner.connect(doc);
  doc.setDocumentPartitioner(partitioner);
  viewer.setDocument(doc);
  viewer.getTextWidget().setFont(JFaceResources.getTextFont());
  viewer.getTextWidget().addBidiSegmentListener(new BidiSegmentListener(){
    public void lineGetSegments(    BidiSegmentEvent event){
      event.segments=SQLUtility.getBidiLineSegments(event.lineText);
    }
  }
);
  attachMenus(viewer);
  GridData data=new GridData(GridData.FILL_BOTH);
  viewer.getControl().setLayoutData(data);
  addDropSupportToViewer();
  viewer.getTextWidget().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}","/** 
 * Creates the textual query editor 
 * @param parent
 */
private void createTextualQueryComposite(Composite parent){
  Composite composite=new Composite(parent,SWT.FILL | SWT.LEFT_TO_RIGHT);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  CompositeRuler ruler=new CompositeRuler();
  LineNumberRulerColumn lineNumbers=new LineNumberRulerColumn();
  ruler.addDecorator(0,lineNumbers);
  viewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  sourceViewerConfiguration=new JdbcSQLSourceViewerConfiguration();
  viewer.configure(sourceViewerConfiguration);
  doc=new Document(getQueryText());
  FastPartitioner partitioner=new FastPartitioner(new SQLPartitionScanner(),new String[]{SQLPartitionScanner.SINGLE_LINE_COMMENT1,SQLPartitionScanner.SINGLE_LINE_COMMENT2,SQLPartitionScanner.MULTI_LINE_COMMENT,IDocument.DEFAULT_CONTENT_TYPE});
  partitioner.connect(doc);
  doc.setDocumentPartitioner(partitioner);
  viewer.setDocument(doc);
  viewer.getTextWidget().setFont(JFaceResources.getTextFont());
  viewer.getTextWidget().addBidiSegmentListener(new BidiSegmentListener(){
    public void lineGetSegments(    BidiSegmentEvent event){
      event.segments=SQLUtility.getBidiLineSegments(event.lineText);
    }
  }
);
  attachMenus(viewer);
  GridData data=new GridData(GridData.FILL_BOTH);
  viewer.getControl().setLayoutData(data);
  addDropSupportToViewer();
  viewer.getTextWidget().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}",0.994535519125683
76820,"/** 
 * Constructs a new instance of the dialog
 */
public ImportValueDialog(String style){
  super(DLG_TITLE);
  Assert.isTrue(DATA_TYPE_CHOICE_SET.contains(style));
  this.style=style;
}","/** 
 * Constructs a new instance of the dialog
 */
public ImportValueDialog(String style,java.util.List choices){
  super(DLG_TITLE);
  Assert.isTrue(DATA_TYPE_CHOICE_SET.contains(style));
  this.style=style;
  this.choiceList=choices;
}",0.8826291079812206
76821,"protected boolean initDialog(){
  try {
    engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  dataSetChooser.setItems(ChoiceSetFactory.getDataSets());
  dataSetChooser.select(0);
  currentDataSetName=dataSetChooser.getText();
  refreshColumns();
  return true;
}","protected boolean initDialog(){
  try {
    engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  dataSetChooser.setItems(ChoiceSetFactory.getDataSets());
  dataSetChooser.select(0);
  currentDataSetName=dataSetChooser.getText();
  selectedList.removeAll();
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    selectedList.add((String)iter.next());
  }
  refreshColumns();
  return true;
}",0.8536335721596725
76822,"private boolean containValue(SelectionChoice selectedChoice,String newValue,String property){
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    SelectionChoice choice=(SelectionChoice)iter.next();
    if (choice != selectedChoice) {
      String value=null;
      if (COLUMN_VALUE.equals(property)) {
        value=choice.getValue();
        if (isEqual(value,newValue)) {
          return true;
        }
      }
 else       if (COLUMN_DISPLAY_TEXT.equals(property)) {
        value=choice.getLabel();
        if (value == null) {
          value=choice.getValue();
        }
        if (value == null) {
          value=LABEL_NULL;
        }
        if (value.equals(newValue)) {
          return true;
        }
      }
    }
  }
  return false;
}","private boolean containValue(SelectionChoice selectedChoice,String newValue,String property){
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    SelectionChoice choice=(SelectionChoice)iter.next();
    if (choice != selectedChoice) {
      String value=null;
      if (COLUMN_DISPLAY_TEXT.equals(property)) {
        value=choice.getLabel();
        if (value == null) {
          value=choice.getValue();
        }
        if (value == null) {
          value=LABEL_NULL;
        }
        if (value.equals(newValue)) {
          return true;
        }
      }
    }
  }
  return false;
}",0.8820960698689956
76823,"private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableAreaComposite=new Composite(valueArea,SWT.NONE);
  tableAreaComposite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableAreaComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableArea tableArea=new TableArea(tableAreaComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER,tableAreaModifier);
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=tableArea.getTable();
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  String[] columns;
  int[] columnWidth;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=tableArea.getTableViewer();
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  tableArea.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableAreaComposite,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      ImportValueDialog dialog=new ImportValueDialog(type);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        ArrayList valueToAddList=new ArrayList(importValues.length);
        for (int i=0; i < importValues.length; i++) {
          if (!containValue(null,importValues[i],COLUMN_VALUE)) {
            valueToAddList.add(importValues[i]);
          }
        }
        for (Iterator iter=valueToAddList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=StructureFactory.createSelectionChoice();
          choice.setValue((String)iter.next());
          choiceList.add(choice);
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        changeDefaultValue(null);
      }
 else {
        changeDefaultValue(choice.getValue());
      }
      refreshValueTable();
      changeDefault.getParent().layout();
    }
  }
);
  createPromptLine(tableAreaComposite);
  updateTableButtons();
}","private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableAreaComposite=new Composite(valueArea,SWT.NONE);
  tableAreaComposite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableAreaComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableArea tableArea=new TableArea(tableAreaComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER,tableAreaModifier);
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=tableArea.getTable();
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  String[] columns;
  int[] columnWidth;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=tableArea.getTableViewer();
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  tableArea.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableAreaComposite,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      List choices=new ArrayList();
      for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
        SelectionChoice choice=(SelectionChoice)iter.next();
        choices.add(choice.getValue());
      }
      ImportValueDialog dialog=new ImportValueDialog(type,choices);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        choiceList.clear();
        for (int i=0; i < importValues.length; i++) {
          SelectionChoice choice=StructureFactory.createSelectionChoice();
          choice.setValue(importValues[i]);
          choiceList.add(choice);
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        changeDefaultValue(null);
      }
 else {
        changeDefaultValue(choice.getValue());
      }
      refreshValueTable();
      changeDefault.getParent().layout();
    }
  }
);
  createPromptLine(tableAreaComposite);
  updateTableButtons();
}",0.8923269260822003
76824,"/** 
 * Creates standard data filter page.
 * @param parent Parent composite.
 * @return Page object.
 */
public static IPropertyTabUI buildFilterPage(Composite parent,Object input){
  GridLayout gl=new GridLayout();
  parent.setLayout(gl);
  FormPage page=new FormPage(FormPropertyDescriptor.NORMAL_FUNCTION,new FilterHandleProvider(),false,true);
  page.setInput(input);
  page.buildUI(parent);
  return page;
}","/** 
 * Creates standard data filter page.
 * @param parent Parent composite.
 * @return Page object.
 */
public static IPropertyTabUI buildFilterPage(Composite parent,Object input){
  GridLayout gl=new GridLayout();
  parent.setLayout(gl);
  FormPage page=new FormPage(FormPropertyDescriptor.FULL_FUNCTION,new FilterHandleProvider(),false,true);
  page.setInput(input);
  page.buildUI(parent);
  return page;
}",0.9902912621359224
76825,"public void startup(PlatformConfig config) throws BirtException {
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(PluginId,""String_Node_Str"" + root,root);
  }
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",platformDirectory.getAbsolutePath());
  File configurationDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!configurationDirectory.exists()) {
    configurationDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",configurationDirectory.getAbsolutePath());
  File workspaceDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!workspaceDirectory.exists()) {
    workspaceDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",workspaceDirectory.getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  final String framework=new File(path).getAbsolutePath();
  String[] args=config.getOSGiArguments();
  if (args == null) {
    args=new String[]{""String_Node_Str""};
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    URL frameworkUrl=new File(framework).toURL();
    System.setProperty(""String_Node_Str"",frameworkUrl.toExternalForm());
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{frameworkUrl},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{args,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}","public void startup(PlatformConfig config) throws BirtException {
  IPlatformContext context=config.getPlatformContext();
  HashMap properties=new HashMap();
  Properties systemProperties=System.getProperties();
  if (systemProperties != null) {
    for (Iterator it=systemProperties.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry entry=(Map.Entry)it.next();
      String key=(String)entry.getKey();
      Object value=entry.getValue();
      if (!key.startsWith(""String_Node_Str"") && !key.startsWith(""String_Node_Str"") && !key.startsWith(""String_Node_Str"")) {
        properties.put(key,value);
      }
 else {
        properties.put(key,null);
      }
    }
  }
  Map osgiConfig=config.getOSGiConfig();
  if (osgiConfig != null) {
    Iterator iter=osgiConfig.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      Object key=(String)entry.getKey();
      Object value=(String)entry.getValue();
      if (key instanceof String && value instanceof String) {
        properties.put(key,value);
      }
    }
  }
  if (context == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(PluginId,""String_Node_Str"" + root,root);
  }
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  String parentClassLoader=getProperty(properties,""String_Node_Str"");
  if (parentClassLoader == null) {
    properties.put(""String_Node_Str"",""String_Node_Str"");
  }
  properties.put(""String_Node_Str"",platformDirectory.getAbsolutePath());
  String configArea=getProperty(properties,""String_Node_Str"");
  if (configArea == null) {
    File configurationDirectory=new File(platformDirectory,""String_Node_Str"");
    if (!configurationDirectory.exists()) {
      configurationDirectory.mkdirs();
    }
    properties.put(""String_Node_Str"",configurationDirectory.getAbsolutePath());
  }
  String instanceArea=getProperty(properties,""String_Node_Str"");
  if (instanceArea == null) {
    File workspaceDirectory=new File(platformDirectory,""String_Node_Str"");
    if (!workspaceDirectory.exists()) {
      workspaceDirectory.mkdirs();
    }
    properties.put(""String_Node_Str"",workspaceDirectory.getAbsolutePath());
  }
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",""String_Node_Str"");
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  final String framework=new File(path).getAbsolutePath();
  String[] args=config.getOSGiArguments();
  if (args == null) {
    args=new String[]{""String_Node_Str""};
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    URL frameworkUrl=new File(framework).toURL();
    properties.put(""String_Node_Str"",frameworkUrl.toExternalForm());
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{frameworkUrl},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    Method initPropertiesMethod=clazz.getMethod(""String_Node_Str"",new Class[]{Map.class});
    if (initPropertiesMethod != null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      initPropertiesMethod.invoke(null,new Object[]{properties});
    }
 else {
      Iterator iter=properties.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String key=(String)entry.getKey();
        String value=(String)entry.getValue();
        System.setProperty(key,value);
      }
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{args,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}",0.6818493620524078
76826,"/** 
 * Get svg flag from incoming soap message.
 * @param params
 * @return
 * @throws RemoteException
 */
protected boolean getSVGFlag(Oprand[] params){
  boolean flag=false;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_SVG.equalsIgnoreCase(params[i].getName())) {
        flag=""String_Node_Str"".equalsIgnoreCase(params[i].getValue());
        break;
      }
    }
  }
  return flag;
}","/** 
 * Get svg flag from incoming soap message or URL.
 * @param params
 * @return
 * @throws RemoteException
 */
protected boolean getSVGFlag(Oprand[] params){
  boolean flag=false;
  HttpServletRequest request=context.getRequest();
  if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_SVG)) {
    return ParameterAccessor.getSVGFlag(request);
  }
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_SVG.equalsIgnoreCase(params[i].getName())) {
        flag=""String_Node_Str"".equalsIgnoreCase(params[i].getValue());
        break;
      }
    }
  }
  return flag;
}",0.8231111111111111
76827,"/** 
 * Converts a parameter value to a String expected by ParameterHint
 */
private String getParameterValueString(Class paramType,Object paramValue) throws DataException {
  if (paramValue instanceof String)   return (String)paramValue;
  try {
    paramValue=DataTypeUtil.convert(paramValue,paramType);
    return DataTypeUtil.toString(paramValue);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}","/** 
 * Converts a parameter value to a String expected by ParameterHint
 */
private String getParameterValueString(Class paramType,Object paramValue) throws DataException {
  if (paramValue instanceof String)   return (String)paramValue;
  try {
    paramValue=DataTypeUtil.convert(paramValue,paramType);
    if (paramValue instanceof Date) {
      SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      return sdf.format((Date)paramValue);
    }
    return DataTypeUtil.toString(paramValue);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}",0.8555452003727866
76828,"/** 
 * @see ViewerDropAdapter#performDrop(Object)
 */
public boolean performDrop(Object data){
  if (data instanceof Object[] && ((Object[])data)[0] instanceof ThemeHandle) {
    if (getCurrentTarget() instanceof ModuleHandle) {
      if (Policy.TRACING_DND_DRAG) {
        System.out.println(""String_Node_Str"" + getCurrentTarget());
      }
      return ApplyTheme((ThemeHandle)((Object[])data)[0],(ModuleHandle)getCurrentTarget());
    }
 else {
      return false;
    }
  }
  if (getCurrentOperation() == DND.DROP_MOVE) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return moveData(data,getCurrentTarget());
  }
 else   if (getCurrentOperation() == DND.DROP_COPY) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return copyData(data,getCurrentTarget());
  }
  return false;
}","/** 
 * @see ViewerDropAdapter#performDrop(Object)
 */
public boolean performDrop(Object data){
  if (data instanceof Object[] && ((Object[])data)[0] instanceof ThemeHandle) {
    if (getCurrentTarget() instanceof ModuleHandle) {
      if (Policy.TRACING_DND_DRAG) {
        System.out.println(""String_Node_Str"" + getCurrentTarget());
      }
      return ApplyTheme((ThemeHandle)((Object[])data)[0],(ModuleHandle)getCurrentTarget());
    }
 else {
      return false;
    }
  }
  if (getCurrentOperation() == DND.DROP_MOVE) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return moveData(data,getCurrentTarget());
  }
 else   if (getCurrentOperation() == DND.DROP_COPY || getCurrentOperation() == DND.DROP_LINK) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return copyData(data,getCurrentTarget());
  }
  return false;
}",0.977491961414791
76829,"/** 
 * @see ViewerDropAdapter#validateDrop(Object,int,TransferData)
 */
public boolean validateDrop(Object target,int op,TransferData type){
  if (target != null) {
    Object adapter=ElementAdapterManager.getAdatper(target,IElementDropAdapter.class);
    if (adapter != null) {
      IElementDropAdapter dropAdapter=(IElementDropAdapter)adapter;
      return dropAdapter.validateDrop(target,getCurrentOperation(),getCurrentLocation(),null,type);
    }
  }
  return TemplateTransfer.getInstance().isSupportedType(type);
}","/** 
 * @see ViewerDropAdapter#validateDrop(Object,int,TransferData)
 */
public boolean validateDrop(Object target,int op,TransferData type){
  return TemplateTransfer.getInstance().isSupportedType(type);
}",0.510989010989011
76830,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  documentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=getRealPath(context,""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  if (documentFolder == null || documentFolder.trim().length() <= 0)   documentFolder=workingFolder;
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isDocumentFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  birtResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  String s_overwrite=context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT);
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  clearDocuments();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  documentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=getRealPath(context,""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  if (documentFolder == null || documentFolder.trim().length() <= 0)   documentFolder=workingFolder;
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isDocumentFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  birtResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  String s_overwrite=context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT);
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  clearDocuments();
  isInitContext=true;
}",0.9848675914249684
76831,"public boolean layout(){
  boolean childBreak=super.layout();
  if (childBreak) {
    IPDFTableLayoutManager itsTableLM=getTableLayoutManager();
    if (itsTableLM != null) {
      if (!isFinished() && needPageBreakBefore(null)) {
        itsTableLM.setTableCloseStateAsForced();
      }
 else       if (isFinished() && needPageBreakAfter(null)) {
        itsTableLM.setTableCloseStateAsForced();
      }
    }
  }
  return childBreak;
}","public boolean layout(){
  boolean childBreak=super.layout();
  if (childBreak) {
    IPDFTableLayoutManager itsTableLM=getTableLayoutManager();
    if (itsTableLM != null) {
      IStyle cStyle=content.getStyle();
      if (!isFinished() && needPageBreakBefore(cStyle.getPageBreakBefore())) {
        itsTableLM.setTableCloseStateAsForced();
      }
 else       if (isFinished() && needPageBreakAfter(cStyle.getPageBreakAfter())) {
        itsTableLM.setTableCloseStateAsForced();
      }
    }
  }
  return childBreak;
}",0.894681960375391
76832,"/** 
 * @see ViewerDropAdapter#performDrop(Object)
 */
public boolean performDrop(Object data){
  Object adapter=ElementAdapterManager.getAdatper(getCurrentTarget(),IElementDropAdapter.class);
  if (adapter != null) {
    IElementDropAdapter dropAdapter=(IElementDropAdapter)adapter;
    return dropAdapter.handleDrop(getCurrentTarget(),getCurrentOperation(),getCurrentLocation(),data);
  }
  return false;
}","/** 
 * @see ViewerDropAdapter#performDrop(Object)
 */
public boolean performDrop(Object data){
  if (data instanceof Object[] && ((Object[])data)[0] instanceof ThemeHandle) {
    if (getCurrentTarget() instanceof ModuleHandle) {
      if (Policy.TRACING_DND_DRAG) {
        System.out.println(""String_Node_Str"" + getCurrentTarget());
      }
      return ApplyTheme((ThemeHandle)((Object[])data)[0],(ModuleHandle)getCurrentTarget());
    }
 else {
      return false;
    }
  }
  if (getCurrentOperation() == DND.DROP_MOVE) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return moveData(data,getCurrentTarget());
  }
 else   if (getCurrentOperation() == DND.DROP_COPY) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return copyData(data,getCurrentTarget());
  }
  return false;
}",0.1803030303030303
76833,"/** 
 * Closes the document.
 * @param rc 					the report content.
 */
public void end(IReportContent rc){
  TOCHandler tocHandler=new TOCHandler(rc.getTOCTree(""String_Node_Str"",ULocale.getDefault()).getRoot());
  TOCNode tocRoot=tocHandler.getTOCRoot();
  if (tocRoot == null || tocRoot.getChildren().isEmpty()) {
    writer.setViewerPreferences(PdfWriter.PageModeUseNone);
  }
 else {
    writer.setViewerPreferences(PdfWriter.PageModeUseOutlines);
    PdfOutline root=cb.getRootOutline();
    tocHandler.createTOC(tocRoot,root);
  }
  if (doc.isOpen()) {
    doc.close();
  }
}","/** 
 * Closes the document.
 * @param rc 					the report content.
 */
public void end(IReportContent rc){
  ULocale ulocale=null;
  Locale locale=context.getLocale();
  if (locale == null) {
    ulocale=ULocale.getDefault();
  }
 else {
    ulocale=ULocale.forLocale(locale);
  }
  TOCHandler tocHandler=new TOCHandler(rc.getTOCTree(""String_Node_Str"",ulocale).getRoot());
  TOCNode tocRoot=tocHandler.getTOCRoot();
  if (tocRoot == null || tocRoot.getChildren().isEmpty()) {
    writer.setViewerPreferences(PdfWriter.PageModeUseNone);
  }
 else {
    writer.setViewerPreferences(PdfWriter.PageModeUseOutlines);
    PdfOutline root=cb.getRootOutline();
    tocHandler.createTOC(tocRoot,root);
  }
  if (doc.isOpen()) {
    doc.close();
  }
}",0.8478425435276306
76834,"public void handleSelectionChanged(ISelection selection){
  if (getSourceViewer() == null || !getSourceViewer().getTextWidget().isVisible()) {
    return;
  }
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    settingText=true;
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1 && sel[0] instanceof DesignElementHandle) {
      editObject=sel[0];
      palettePage.getSupport().setCurrentEditObject(editObject);
      if (editObject instanceof ExtendedItemHandle) {
        disableEditor();
        cmbExpList.removeAll();
        cmbItemLastSelected=null;
        getSourceViewer().getTextWidget().setEnabled(true);
        setEditorText(((ExtendedItemHandle)editObject).getExternalScript());
        context.setVariable(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        setComboViewerInput(editObject);
        cmbItemLastSelected=null;
        setEditorText(""String_Node_Str"");
        if (cmbExpList.getItemCount() > 0) {
          enableEditor();
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
 else {
          disableEditor();
        }
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    updateAnnotationLabel(sel.length > 0 ? sel[0] : null);
    settingText=false;
  }
}","public void handleSelectionChanged(ISelection selection){
  if (getSourceViewer() == null || !getSourceViewer().getTextWidget().isVisible()) {
    return;
  }
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    settingText=true;
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1 && sel[0] instanceof DesignElementHandle) {
      editObject=sel[0];
      palettePage.getSupport().setCurrentEditObject(editObject);
      if (editObject instanceof ExtendedItemHandle) {
        disableEditor();
        cmbExpList.removeAll();
        cmbItemLastSelected=null;
        getSourceViewer().getTextWidget().setEnabled(true);
        setEditorText(((ExtendedItemHandle)editObject).getExternalScript());
        context.setVariable(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        setComboViewerInput(editObject);
        cmbItemLastSelected=null;
        setEditorText(""String_Node_Str"");
        if (cmbExpList.getItemCount() > 0) {
          enableEditor();
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
 else {
          disableEditor();
        }
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
    settingText=false;
  }
}",0.9794156706507304
76835,"/** 
 * Date -> Time String -> Time
 * @param source
 * @return
 * @throws BirtException
 */
public static Time toTime(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Date) {
    return new Time(((Date)source).getTime());
  }
 else   if (source instanceof String) {
    try {
      return Time.valueOf((String)source);
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
  }
  throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}","/** 
 * Date -> Time String -> Time
 * @param source
 * @return
 * @throws BirtException
 */
public static Time toTime(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Date) {
    return new Time(((Date)source).getTime());
  }
 else   if (source instanceof String) {
    try {
      return new Time(toDate((String)source).getTime());
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
  }
  throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}",0.9424083769633508
76836,"/** 
 * Handle style content
 * @param content
 * @return
 */
protected String __handleStyle(String content){
  String style=BLANK_STRING;
  if (content == null)   return style;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(content);
  while (m.find()) {
    int start=m.end();
    int end=content.toLowerCase().indexOf(""String_Node_Str"",start);
    style=style + content.substring(start + 1,end) + ""String_Node_Str"";
  }
  return style;
}","/** 
 * Handle style content
 * @param content
 * @param Exception
 * @return
 */
protected String __handleStyle(String content) throws Exception {
  String style=BLANK_STRING;
  if (content == null)   return style;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(content);
  while (m.find()) {
    int start=m.end();
    int end=content.toLowerCase().indexOf(""String_Node_Str"",start);
    style=style + content.substring(start + 1,end) + ""String_Node_Str"";
  }
  style=style.replaceAll(""String_Node_Str"",""String_Node_Str"" + viewer.getId());
  style=""String_Node_Str"" + style + ""String_Node_Str"";
  return style;
}",0.8494342906875544
76837,"/** 
 * process tag function
 * @see org.eclipse.birt.report.taglib.AbstractBaseTag#__process()
 */
public void __process() throws Exception {
  outputFormat=BirtTagUtil.getFormat(viewer.getFormat());
  if (!outputFormat.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_HTML) || BirtTagUtil.convertToBoolean(viewer.getForceParameterPrompting())) {
    __handleIFrame(viewer.createURI(IBirtConstants.VIEWER_PREVIEW),viewer.getId());
    return;
  }
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,(HttpServletRequest)pageContext.getRequest());
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,Boolean.valueOf(viewer.getAllowMasterPage()));
  options.setOption(InputOptions.OPT_SVG_FLAG,Boolean.valueOf(viewer.getSvg()));
  options.setOption(InputOptions.OPT_FORMAT,outputFormat);
  options.setOption(InputOptions.OPT_IS_DESIGNER,new Boolean(false));
  options.setOption(InputOptions.OPT_SERVLET_PATH,IBirtConstants.SERVLET_PATH_PREVIEW);
  BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),this.options);
  reportDesignHandle=getDesignHandle();
  Collection parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (BirtUtility.validateParameters(parameterDefList,getParameterMap())) {
    __handleIFrame(viewer.createURI(IBirtConstants.VIEWER_PREVIEW),viewer.getId());
  }
 else {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    __handleOutputReport(out);
    String content=out.toString();
    JspWriter writer=pageContext.getOut();
    if (viewer.isHostPage()) {
      writer.write(content);
    }
 else {
      writer.write(__handleScript(content));
      writer.write(""String_Node_Str"" + viewer.getName() + ""String_Node_Str""+ __handleDivAppearance()+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + __handleBodyStyle(content) + ""String_Node_Str"");
      writer.write(__handleBody(content) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
  }
}","/** 
 * process tag function
 * @see org.eclipse.birt.report.taglib.AbstractBaseTag#__process()
 */
public void __process() throws Exception {
  outputFormat=BirtTagUtil.getFormat(viewer.getFormat());
  if (!outputFormat.equalsIgnoreCase(ParameterAccessor.PARAM_FORMAT_HTML) || BirtTagUtil.convertToBoolean(viewer.getForceParameterPrompting())) {
    __handleIFrame(viewer.createURI(IBirtConstants.VIEWER_PREVIEW),viewer.getId());
    return;
  }
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,(HttpServletRequest)pageContext.getRequest());
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,Boolean.valueOf(viewer.getAllowMasterPage()));
  options.setOption(InputOptions.OPT_SVG_FLAG,Boolean.valueOf(viewer.getSvg()));
  options.setOption(InputOptions.OPT_FORMAT,outputFormat);
  options.setOption(InputOptions.OPT_IS_DESIGNER,new Boolean(false));
  options.setOption(InputOptions.OPT_SERVLET_PATH,IBirtConstants.SERVLET_PATH_PREVIEW);
  BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),this.options);
  reportDesignHandle=getDesignHandle();
  Collection parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (BirtUtility.validateParameters(parameterDefList,getParameterMap())) {
    __handleIFrame(viewer.createURI(IBirtConstants.VIEWER_PREVIEW),viewer.getId());
  }
 else {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    __handleOutputReport(out);
    String content=out.toString();
    JspWriter writer=pageContext.getOut();
    if (viewer.isHostPage()) {
      writer.write(content);
    }
 else {
      writer.write(__handleStyle(content));
      writer.write(__handleScript(content));
      writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str""+ __handleDivAppearance()+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + __handleBodyStyle(content) + viewer.getId()+ ""String_Node_Str"");
      writer.write(__handleBody(content) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
  }
}",0.9851351351351352
76838,"/** 
 * Returns body style content
 * @param content
 * @return
 */
protected String __handleBodyStyle(String content){
  String style=BLANK_STRING;
  if (content == null)   return style;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(content);
  String bodyStyleId=""String_Node_Str"";
  if (m.find()) {
    for (int i=1; i < m.groupCount() + 1; i++) {
      String group=m.group(i);
      if (group == null)       continue;
      Pattern pl=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher ml=pl.matcher(group.trim());
      if (ml.find()) {
        bodyStyleId=ml.group(1).trim();
        break;
      }
    }
  }
  p=Pattern.compile(""String_Node_Str"" + bodyStyleId + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  m=p.matcher(content);
  if (m.find())   style=m.group(1).trim();
  return style;
}","/** 
 * Returns body style content
 * @param content
 * @return
 */
protected String __handleBodyStyle(String content){
  String bodyStyleId=BLANK_STRING;
  if (content == null)   return bodyStyleId;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(content);
  if (m.find()) {
    for (int i=1; i < m.groupCount() + 1; i++) {
      String group=m.group(i);
      if (group == null)       continue;
      Pattern pl=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      Matcher ml=pl.matcher(group.trim());
      if (ml.find()) {
        bodyStyleId=ml.group(1).trim();
        break;
      }
    }
  }
  bodyStyleId=bodyStyleId.replaceAll(""String_Node_Str"",""String_Node_Str"" + viewer.getId());
  return bodyStyleId;
}",0.816747572815534
76839,"/** 
 * Handle body content
 * @param content
 * @return
 */
protected String __handleBody(String content){
  String body=content;
  if (content == null)   return BLANK_STRING;
  try {
    Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher m=p.matcher(content);
    if (m.find()) {
      int start=m.end();
      int end=content.toLowerCase().indexOf(""String_Node_Str"");
      body=content.substring(start + 1,end);
    }
  }
 catch (  Exception e) {
    body=content;
  }
  return body;
}","/** 
 * Handle body content
 * @param content
 * @return
 */
protected String __handleBody(String content){
  String body=content;
  if (content == null)   return BLANK_STRING;
  try {
    Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher m=p.matcher(content);
    if (m.find()) {
      int start=m.end();
      int end=content.toLowerCase().indexOf(""String_Node_Str"");
      body=content.substring(start + 1,end);
    }
  }
 catch (  Exception e) {
    body=content;
  }
  body=body.replaceAll(""String_Node_Str"",""String_Node_Str"" + viewer.getId());
  return body;
}",0.9303571428571428
76840,"/** 
 * Checks all labels for any overlap for a given axis' scale
 * @param la
 * @param iLabelLocation
 * @return
 */
public final boolean checkFit(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  if (iType == TEXT || bCategoryScale) {
    return true;
  }
  final double dAngleInDegrees=la.getCaption().getFont().getRotation();
  double x=0, y=0;
  int iPointToCheck=0;
  if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
    if (iScaleDirection == BACKWARD) {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 1 : 2;
    }
 else {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 3 : 0;
    }
  }
 else   if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
    if (iScaleDirection == FORWARD) {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 0 : 1;
    }
 else {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 2 : 3;
    }
  }
  double[] da=daTickCoordinates;
  RotatedRectangle rrPrev=null, rrPrev2=null, rr;
  if ((iType & (NUMERICAL | LINEAR)) == (NUMERICAL | LINEAR)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    DecimalFormat df=null;
    if (fs == null) {
      df=new DecimalFormat(getNumericPattern());
    }
    final NumberDataElement nde=NumberDataElementImpl.create(0);
    for (int i=0; i < da.length; i++) {
      nde.setValue(dAxisValue);
      try {
        sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i] * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i] * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev))) {
          return false;
        }
        rrPrev=rr;
      }
      dAxisValue+=dAxisStep;
    }
  }
 else   if ((iType & (NUMERICAL | LOGARITHMIC)) == (NUMERICAL | LOGARITHMIC)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    NumberDataElement nde=NumberDataElementImpl.create(0);
    DecimalFormat df=null;
    for (int i=0; i < da.length; i++) {
      nde.setValue(dAxisValue);
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern(dAxisValue));
      }
      try {
        sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i] * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i] * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
          return false;
        }
        rrPrev=rr;
      }
      dAxisValue*=dAxisStep;
    }
  }
 else   if (iType == DATE_TIME) {
    CDateTime cdt, cdtAxisValue=asDateTime(oMinimum);
    final int iUnit=asInteger(oUnit);
    final int iStep=asInteger(oStep);
    final IDateFormatWrapper sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,rtc.getULocale());
    String sText;
    cdt=cdtAxisValue;
    for (int i=0; i < da.length; i++) {
      sText=ValueFormatter.format(cdt,fs,rtc.getULocale(),sdf);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i] * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i] * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
          return false;
        }
        rrPrev=rr;
      }
      cdt=cdtAxisValue.forward(iUnit,iStep * (i + 1));
    }
  }
  return true;
}","/** 
 * Checks all labels for any overlap for a given axis' scale
 * @param la
 * @param iLabelLocation
 * @return
 */
public final boolean checkFit(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  if (iType == TEXT || bCategoryScale) {
    return true;
  }
  final double dAngleInDegrees=la.getCaption().getFont().getRotation();
  double x=0, y=0;
  int iPointToCheck=0;
  if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
    if (iScaleDirection == BACKWARD) {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 1 : 2;
    }
 else {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 3 : 0;
    }
  }
 else   if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
    if (iScaleDirection == FORWARD) {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 0 : 1;
    }
 else {
      iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 2 : 3;
    }
  }
  double[] da=daTickCoordinates;
  RotatedRectangle rrPrev=null, rrPrev2=null, rr;
  if ((iType & (NUMERICAL | LINEAR)) == (NUMERICAL | LINEAR)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    DecimalFormat df=null;
    if (fs == null) {
      df=new DecimalFormat(getNumericPattern());
    }
    final NumberDataElement nde=NumberDataElementImpl.create(0);
    for (int i=0; i < da.length - 1; i++) {
      nde.setValue(dAxisValue);
      try {
        sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i] * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i] * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev))) {
          return false;
        }
        rrPrev=rr;
      }
      dAxisValue+=dAxisStep;
    }
  }
 else   if ((iType & (NUMERICAL | LOGARITHMIC)) == (NUMERICAL | LOGARITHMIC)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    NumberDataElement nde=NumberDataElementImpl.create(0);
    DecimalFormat df=null;
    for (int i=0; i < da.length - 1; i++) {
      nde.setValue(dAxisValue);
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern(dAxisValue));
      }
      try {
        sText=ValueFormatter.format(nde,fs,rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i] * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i] * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
          return false;
        }
        rrPrev=rr;
      }
      dAxisValue*=dAxisStep;
    }
  }
 else   if (iType == DATE_TIME) {
    CDateTime cdt, cdtAxisValue=asDateTime(oMinimum);
    final int iUnit=asInteger(oUnit);
    final int iStep=asInteger(oStep);
    final IDateFormatWrapper sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,rtc.getULocale());
    String sText;
    cdt=cdtAxisValue;
    for (int i=0; i < da.length - 1; i++) {
      sText=ValueFormatter.format(cdt,fs,rtc.getULocale(),sdf);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i] * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i] * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      IllegalArgumentException uiex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
        if (rrPrev2 != null && (rrPrev2.contains(p) || rrPrev2.getPoint(iPointToCheck).equals(p) || ChartUtil.intersects(rr,rrPrev2))) {
          return false;
        }
        rrPrev2=rr;
      }
 else {
        if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
          return false;
        }
        rrPrev=rr;
      }
      cdt=cdtAxisValue.forward(iUnit,iStep * (i + 1));
    }
  }
  return true;
}",0.9989541572250306
76841,"/** 
 * Evaluate a BIRT expression
 * @param expr the expression to be evaluated
 * @param name the file name
 * @param lineNo the line number
 * @return the result if no error exists, otherwise null.
 */
public Object evaluate(String expr,String name,int lineNo){
  if (expr != null) {
    try {
      return scriptContext.eval(expr,name,lineNo);
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,e.getMessage(),e);
      addException(new EngineException(MessageConstants.SCRIPT_EVALUATION_ERROR,expr,e));
    }
  }
  return null;
}","/** 
 * Evaluate a BIRT expression
 * @param expr the expression to be evaluated
 * @param name the file name
 * @param lineNo the line number
 * @return the result if no error exists, otherwise null.
 */
public Object evaluate(String expr,String name,int lineNo){
  if (expr != null) {
    try {
      return scriptContext.eval(expr,name,lineNo);
    }
 catch (    Throwable e) {
      log.log(Level.SEVERE,e.getMessage(),e);
      addException(new EngineException(MessageConstants.SCRIPT_EVALUATION_ERROR,expr,e));
    }
  }
  return null;
}",0.9834254143646408
76842,"/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @throws DataException
 */
private void initialize(RAInputStream rowExprsIs,RAInputStream rowLenIs,int rowCount) throws DataException {
  try {
    IOUtil.readInt(rowExprsIs);
    int exprCount=IOUtil.readInt(rowExprsIs);
    this.exprKeys=new ArrayList();
    this.rowExprsDis=new DataInputStream(rowExprsIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    this.metaOffset=IOUtil.INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + IOUtil.INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsIs=rowExprsIs;
  this.rowLenIs=rowLenIs;
  this.currRowIndex=-1;
  this.lastRowIndex=-1;
  this.currRowLenReadIndex=-1;
  this.rowCount=rowCount;
  this.rowIDMap=new BasicCachedArray(rowCount);
}","/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @throws DataException
 */
private void initialize(RAInputStream rowExprsIs,RAInputStream rowLenIs,int rowCount) throws DataException {
  try {
    IOUtil.readInt(rowExprsIs);
    int exprCount=IOUtil.readInt(rowExprsIs);
    this.exprKeys=new ArrayList();
    this.rowExprsDis=new DataInputStream(rowExprsIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    this.metaOffset=IOUtil.INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + IOUtil.INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsIs=rowExprsIs;
  this.rowLenIs=rowLenIs;
  this.currRowIndex=-1;
  this.lastRowIndex=-1;
  this.currRowLenReadIndex=0;
  this.rowCount=rowCount;
  this.rowIDMap=new BasicCachedArray(rowCount);
}",0.9983079526226736
76843,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.resultSetHintsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}",0.990531682447196
76844,"/** 
 */
private void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter=null;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(newColumnDefn((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}","/** 
 */
private void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter=null;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(newColumnDefn((ResultSetColumnHandle)modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.resultSetHintsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}",0.9901140684410646
76845,"protected void writeSimpleMasterPage(DataOutputStream out,SimpleMasterPageDesign design) throws IOException {
  writeMasterPage(out,design);
  boolean showHeaderOnFirst=design.isShowHeaderOnFirst();
  if (showHeaderOnFirst) {
    IOUtil.writeShort(out,FIELD_SHOW_HEADER_ON_FIRST);
    IOUtil.writeBool(out,showHeaderOnFirst);
  }
  boolean showFooterOnLast=design.isShowFooterOnLast();
  if (showFooterOnLast) {
    IOUtil.writeShort(out,FIELD_SHOW_FOOTER_ON_LAST);
    IOUtil.writeBool(out,showFooterOnLast);
  }
  boolean floatingFooter=design.isFloatingFooter();
  if (floatingFooter) {
    IOUtil.writeShort(out,FIELD_FLOATING_FOOTER);
    IOUtil.writeBool(out,floatingFooter);
  }
  DimensionType headerHeight=design.getHeaderHeight();
  if (headerHeight != null) {
    IOUtil.writeShort(out,FEILD_HEADER_HEIGHT);
    writeDimension(out,headerHeight);
  }
  DimensionType footerHeigh=design.getFooterHeight();
  if (footerHeigh != null) {
    IOUtil.writeShort(out,FEILD_FOOTER_HEIGHT);
    writeDimension(out,footerHeigh);
  }
}","protected void writeSimpleMasterPage(DataOutputStream out,SimpleMasterPageDesign design) throws IOException {
  writeMasterPage(out,design);
  boolean showHeaderOnFirst=design.isShowHeaderOnFirst();
  if (!showHeaderOnFirst) {
    IOUtil.writeShort(out,FIELD_SHOW_HEADER_ON_FIRST);
    IOUtil.writeBool(out,showHeaderOnFirst);
  }
  boolean showFooterOnLast=design.isShowFooterOnLast();
  if (!showFooterOnLast) {
    IOUtil.writeShort(out,FIELD_SHOW_FOOTER_ON_LAST);
    IOUtil.writeBool(out,showFooterOnLast);
  }
  boolean floatingFooter=design.isFloatingFooter();
  if (floatingFooter) {
    IOUtil.writeShort(out,FIELD_FLOATING_FOOTER);
    IOUtil.writeBool(out,floatingFooter);
  }
  DimensionType headerHeight=design.getHeaderHeight();
  if (headerHeight != null) {
    IOUtil.writeShort(out,FEILD_HEADER_HEIGHT);
    writeDimension(out,headerHeight);
  }
  DimensionType footerHeigh=design.getFooterHeight();
  if (footerHeigh != null) {
    IOUtil.writeShort(out,FEILD_FOOTER_HEIGHT);
    writeDimension(out,footerHeigh);
  }
}",0.9990338164251208
76846,"static void archive(String folderName,IStreamSorter streamSorter,RandomAccessFile compoundFile) throws IOException {
  compoundFile.setLength(0);
  compoundFile.seek(0);
  compoundFile.writeLong(0);
  compoundFile.writeLong(0);
  ArrayList fileList=new ArrayList();
  getAllFiles(new File(folderName),fileList);
  if (streamSorter != null) {
    ArrayList streamNameList=new ArrayList();
    for (int i=0; i < fileList.size(); i++) {
      File file=(File)fileList.get(i);
      streamNameList.add(ArchiveUtil.generateRelativePath(folderName,file.getAbsolutePath()));
    }
    ArrayList sortedNameList=streamSorter.sortStream(streamNameList);
    if (sortedNameList != null) {
      fileList.clear();
      for (int i=0; i < sortedNameList.size(); i++) {
        String fileName=ArchiveUtil.generateFullPath(folderName,(String)sortedNameList.get(i));
        fileList.add(new File(fileName));
      }
    }
  }
  long streamRelativePosition=0;
  long entryNum=0;
  for (int i=0; i < fileList.size(); i++) {
    File file=(File)fileList.get(i);
    String relativePath=ArchiveUtil.generateRelativePath(folderName,file.getAbsolutePath());
    if (!needSkip(relativePath)) {
      compoundFile.writeUTF(relativePath);
      compoundFile.writeLong(streamRelativePosition);
      compoundFile.writeLong(file.length());
      streamRelativePosition+=file.length();
      entryNum++;
    }
  }
  long streamSectionPos=compoundFile.getFilePointer();
  for (int i=0; i < fileList.size(); i++) {
    File file=(File)fileList.get(i);
    String relativePath=ArchiveUtil.generateRelativePath(folderName,file.getAbsolutePath());
    if (!needSkip(relativePath)) {
      copyFileIntoTheArchive(file,compoundFile);
    }
  }
  compoundFile.seek(0);
  compoundFile.writeLong(streamSectionPos);
  compoundFile.writeLong(entryNum);
}","static void archive(String folderName,IStreamSorter streamSorter,RandomAccessFile compoundFile) throws IOException {
  compoundFile.setLength(0);
  compoundFile.seek(0);
  compoundFile.writeLong(0);
  compoundFile.writeLong(0);
  ArrayList fileList=new ArrayList();
  folderName=new File(folderName).getCanonicalPath();
  getAllFiles(new File(folderName),fileList);
  if (streamSorter != null) {
    ArrayList streamNameList=new ArrayList();
    for (int i=0; i < fileList.size(); i++) {
      File file=(File)fileList.get(i);
      streamNameList.add(ArchiveUtil.generateRelativePath(folderName,file.getAbsolutePath()));
    }
    ArrayList sortedNameList=streamSorter.sortStream(streamNameList);
    if (sortedNameList != null) {
      fileList.clear();
      for (int i=0; i < sortedNameList.size(); i++) {
        String fileName=ArchiveUtil.generateFullPath(folderName,(String)sortedNameList.get(i));
        fileList.add(new File(fileName));
      }
    }
  }
  long streamRelativePosition=0;
  long entryNum=0;
  for (int i=0; i < fileList.size(); i++) {
    File file=(File)fileList.get(i);
    String relativePath=ArchiveUtil.generateRelativePath(folderName,file.getAbsolutePath());
    if (!needSkip(relativePath)) {
      compoundFile.writeUTF(relativePath);
      compoundFile.writeLong(streamRelativePosition);
      compoundFile.writeLong(file.length());
      streamRelativePosition+=file.length();
      entryNum++;
    }
  }
  long streamSectionPos=compoundFile.getFilePointer();
  for (int i=0; i < fileList.size(); i++) {
    File file=(File)fileList.get(i);
    String relativePath=ArchiveUtil.generateRelativePath(folderName,file.getAbsolutePath());
    if (!needSkip(relativePath)) {
      copyFileIntoTheArchive(file,compoundFile);
    }
  }
  compoundFile.seek(0);
  compoundFile.writeLong(streamSectionPos);
  compoundFile.writeLong(entryNum);
}",0.98534997287032
76847,"/** 
 * Reusable 'strokes' for rendering lines may be obtained from here
 * @param ls
 * @return
 */
public final Stroke getCachedStroke(LineAttributes lia){
  if (lia == null)   return null;
  Stroke s=(Stroke)_htLineStyles.get(lia);
  if (s == null) {
    BasicStroke bs=null;
    if (lia.getStyle().getValue() == LineStyle.DASHED) {
      float[] faStyle=new float[]{6.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DOTTED) {
      float[] faStyle=new float[]{1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DASH_DOTTED) {
      float[] faStyle=new float[]{6.0f,4.0f,1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.SOLID) {
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND);
    }
    if (bs != null) {
      _htLineStyles.put(lia,bs);
    }
    return bs;
  }
  return s;
}","/** 
 * Reusable 'strokes' for rendering lines may be obtained from here
 * @param ls
 * @return
 */
public final Stroke getCachedStroke(LineAttributes lia){
  if (lia == null)   return null;
  Stroke s=(Stroke)_htLineStyles.get(lia);
  if (s == null) {
    BasicStroke bs=null;
    if (lia.getStyle().getValue() == LineStyle.DASHED) {
      float[] faStyle=new float[]{6.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DOTTED) {
      float[] faStyle=new float[]{1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DASH_DOTTED) {
      float[] faStyle=new float[]{6.0f,4.0f,1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.SOLID) {
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER);
    }
    if (bs != null) {
      _htLineStyles.put(lia,bs);
    }
    return bs;
  }
  return s;
}",0.9928840519045624
76848,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if ((!modelColumn.getColumnName().equals(modelColumn.getNativeName())) || modelColumn.getNativeDataType() == null)         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}",0.9840255591054312
76849,"/** 
 */
private void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter=null;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if ((!modelColumn.getColumnName().equals(modelColumn.getNativeName())) || modelColumn.getNativeDataType() == null)         dteDataSet.addResultSetHint(newColumnDefn((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}","/** 
 */
private void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter=null;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(newColumnDefn((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}",0.9833395038874492
76850,"protected boolean traverseChildren(){
  if (lines.isEmpty()) {
    traverseSingleChild();
  }
  if (!layoutLines()) {
    clearCache();
    return false;
  }
  return true;
}","protected boolean traverseChildren(){
  if (!finished) {
    if (!traverseSingleChild()) {
      finished=true;
    }
 else {
      return true;
    }
  }
  if (!layoutLines()) {
    clearCache();
    return false;
  }
  return true;
}",0.2298288508557457
76851,"/** 
 * @param meta
 * @throws BirtException
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}","/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}",0.99949924887331
76852,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    if (dataSetHandle == null) {
      throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
    }
    rsMeta=this.retrieveMetaDataByQueryExecution(dataSetHandle);
    if (!(dataSetHandle instanceof ScriptDataSetHandle))     clearUnusedData(dataSetHandle,rsMeta);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}",0.8828436706565107
76853,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=retrieveMetaDataByQueryExecution(dataSetHandle);
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    addResultSetColumn(dataSetHandle,metaData);
    if (MetaDataPopulator.needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}",0.6241660489251297
76854,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if ((!modelColumn.getColumnName().equals(modelColumn.getNativeName())) || modelColumn.getNativeDataType() == null)         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}",0.9840255591054312
76855,"/** 
 */
private void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter=null;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(newColumnDefn((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}","/** 
 */
private void mergeHints(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  Iterator elmtIter=null;
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if ((!modelColumn.getColumnName().equals(modelColumn.getNativeName())) || modelColumn.getNativeDataType() == null)         dteDataSet.addResultSetHint(newColumnDefn((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}",0.9833395038874492
76856,"/** 
 * Update column cache with clean the resultset property
 * @param dataSetHandle
 * @throws SemanticException
 */
public static void updateColumnCacheAfterCleanRs(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle instanceof OdaDataSetHandle)   dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).clearValue();
  updateColumnCache(dataSetHandle);
}","/** 
 * Update column cache with clean the resultset property
 * @param dataSetHandle
 * @throws SemanticException
 */
public static void updateColumnCacheAfterCleanRs(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle instanceof OdaDataSetHandle) {
    Object obj=dataSetHandle.getElement().getLocalProperty(dataSetHandle.getModule(),OdaDataSetHandle.RESULT_SET_PROP);
    if (obj != null)     dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).setValue(new ArrayList());
  }
  updateColumnCache(dataSetHandle);
}",0.7970401691331924
76857,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    resultSetList=(List)dataSetHandle.getProperty(OdaDataSetHandle.RESULT_SET_PROP);
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    resultSetList=dataSetHandle.getListProperty(DataSetHandle.RESULT_SET_HINTS_PROP);
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(ModelAdapter.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(ModelAdapter.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    resultSetList=(List)dataSetHandle.getProperty(OdaDataSetHandle.RESULT_SET_PROP);
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    resultSetList=dataSetHandle.getListProperty(DataSetHandle.RESULT_SET_HINTS_PROP);
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && resultSetList.size() > 0) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(ModelAdapter.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(ModelAdapter.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.9962894248608536
76858,"public Object[] next(){
  lRow++;
  if (lRow > lEndRow) {
    return null;
  }
  if (listMode) {
    oaTuple[0]=it.next();
  }
 else {
    final Object[] oaResultSet=(Object[])it.next();
    for (int i=0; i < iColumnCount; i++) {
      oaTuple[i]=oaResultSet[iaColumnIndexes[i]];
    }
  }
  return oaTuple;
}","public Object[] next(){
  lRow++;
  if (lRow > lEndRow) {
    return null;
  }
  if (listMode) {
    oaTuple[0]=it.next();
  }
 else {
    final Object[] oaResultSet=(Object[])it.next();
    for (int i=0; i < iColumnCount; i++) {
      if (iaColumnIndexes[i] != -1) {
        oaTuple[i]=oaResultSet[iaColumnIndexes[i]];
      }
    }
  }
  return oaTuple;
}",0.927927927927928
76859,"/** 
 * Updates a strucutre list with the corresponding property handle.
 * @param propHandle the property handle
 * @param structList the structure list
 * @throws SemanticException if any strucutre has invalid value.
 */
private void updateROMResultSets(OdaDataSetHandle setHandle,List structList) throws SemanticException {
  List columns=new ArrayList();
  List hints=new ArrayList();
  ResultSetColumnInfo.updateResultSetColumnList(structList,columns,hints);
  PropertyHandle propHandle=setHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
  propHandle.setValue(null);
  if (!columns.isEmpty()) {
    for (int i=0; i < columns.size(); i++)     propHandle.addItem(columns.get(i));
  }
  propHandle=setHandle.getPropertyHandle(OdaDataSetHandle.COLUMN_HINTS_PROP);
  if (!hints.isEmpty()) {
    for (int i=0; i < hints.size(); i++) {
      ColumnHint hint=(ColumnHint)hints.get(i);
      ColumnHintHandle oldHint=ResultSetsAdapter.findColumnHint((String)hint.getProperty(null,ColumnHint.COLUMN_NAME_MEMBER),setHandle.columnHintsIterator());
      if (oldHint == null)       propHandle.addItem(hints.get(i));
 else {
        oldHint.setDisplayName((String)hint.getProperty(null,ColumnHint.DISPLAY_NAME_MEMBER));
        oldHint.setHelpText((String)hint.getProperty(null,ColumnHint.HELP_TEXT_MEMBER));
        oldHint.setFormat((String)hint.getProperty(null,ColumnHint.FORMAT_MEMBER));
      }
    }
  }
}","/** 
 * Updates a strucutre list with the corresponding property handle.
 * @param propHandle the property handle
 * @param structList the structure list
 * @throws SemanticException if any strucutre has invalid value.
 */
private void updateROMResultSets(OdaDataSetHandle setHandle,List structList) throws SemanticException {
  List columns=new ArrayList();
  List hints=new ArrayList();
  ResultSetColumnInfo.updateResultSetColumnList(structList,columns,hints);
  PropertyHandle propHandle=setHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
  propHandle.setValue(new ArrayList());
  if (!columns.isEmpty()) {
    for (int i=0; i < columns.size(); i++)     propHandle.addItem(columns.get(i));
  }
  propHandle=setHandle.getPropertyHandle(OdaDataSetHandle.COLUMN_HINTS_PROP);
  propHandle.setValue(new ArrayList());
  if (!hints.isEmpty()) {
    for (int i=0; i < hints.size(); i++) {
      ColumnHint hint=(ColumnHint)hints.get(i);
      ColumnHintHandle oldHint=ResultSetsAdapter.findColumnHint((String)hint.getProperty(null,ColumnHint.COLUMN_NAME_MEMBER),setHandle.columnHintsIterator());
      if (oldHint == null)       propHandle.addItem(hints.get(i));
 else {
        oldHint.setDisplayName((String)hint.getProperty(null,ColumnHint.DISPLAY_NAME_MEMBER));
        oldHint.setHelpText((String)hint.getProperty(null,ColumnHint.HELP_TEXT_MEMBER));
        oldHint.setFormat((String)hint.getProperty(null,ColumnHint.FORMAT_MEMBER));
      }
    }
  }
}",0.9802152030544948
76860,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode();
if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
final DataPointHints dph=(DataPointHints)src.getSource();
callbackFunction+=""String_Node_Str"";
callbackFunction=ScriptUtil.script(callbackFunction,dph);
}
callbackFunction+=""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
}
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,urlValue.getBaseUrl());
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode();
if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
final DataPointHints dph=(DataPointHints)src.getSource();
callbackFunction+=""String_Node_Str"";
callbackFunction=ScriptUtil.script(callbackFunction,dph);
}
callbackFunction+=""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
}
}",0.9753460777851022
76861,"/** 
 * Draws the borders of a container.
 * @param borders		the border info
 */
private void drawBorder(BorderInfo border){
  if (IStyle.SOLID_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOTTED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DASHED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOUBLE_VALUE.equals(border.borderStyle)) {
    int outerBorderWidth=border.borderWidth / 3;
    int innerBorderWidth=border.borderWidth / 3;
switch (border.borderType) {
case BorderInfo.TOP_BORDER:
      drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY - border.borderWidth / 2 + outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
    drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY + border.borderWidth / 2 - innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
  return;
case BorderInfo.RIGHT_BORDER:
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.BOTTOM_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY + border.borderWidth / 2 - outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY - border.borderWidth / 2 + innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.LEFT_BORDER:
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}
}
}","/** 
 * Draws the borders of a container.
 * @param borders		the border info
 */
private void drawBorder(BorderInfo border){
  if (IStyle.SOLID_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOTTED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DASHED_VALUE.equals(border.borderStyle)) {
    drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
    return;
  }
  if (IStyle.DOUBLE_VALUE.equals(border.borderStyle)) {
    int outerBorderWidth=border.borderWidth / 3;
    int innerBorderWidth=border.borderWidth / 3;
switch (border.borderType) {
case BorderInfo.TOP_BORDER:
      drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY - border.borderWidth / 2 + outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
    drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY + border.borderWidth / 2 - innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
  return;
case BorderInfo.RIGHT_BORDER:
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.BOTTOM_BORDER:
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY + border.borderWidth / 2 - outerBorderWidth / 2),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY + border.borderWidth / 2 - outerBorderWidth / 2),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + 2 * border.borderWidth / 3),layoutPointY2PDF(border.startY - border.borderWidth / 2 + innerBorderWidth / 2),layoutPointX2PDF(border.endX - 2 * border.borderWidth / 3),layoutPointY2PDF(border.endY - border.borderWidth / 2 + innerBorderWidth / 2),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
case BorderInfo.LEFT_BORDER:
drawLine(layoutPointX2PDF(border.startX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX - border.borderWidth / 2 + outerBorderWidth / 2),layoutPointY2PDF(border.endY),pdfMeasure(outerBorderWidth),border.borderColor,""String_Node_Str"",cb);
drawLine(layoutPointX2PDF(border.startX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.startY + 2 * border.borderWidth / 3),layoutPointX2PDF(border.endX + border.borderWidth / 2 - innerBorderWidth / 2),layoutPointY2PDF(border.endY - 2 * border.borderWidth / 3),pdfMeasure(innerBorderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}
}
drawLine(layoutPointX2PDF(border.startX),layoutPointY2PDF(border.startY),layoutPointX2PDF(border.endX),layoutPointY2PDF(border.endY),pdfMeasure(border.borderWidth),border.borderColor,""String_Node_Str"",cb);
return;
}",0.9736388272973638
76862,"public boolean layout(){
  boolean childBreak=super.layout();
  if (childBreak) {
    IPDFTableLayoutManager itsTableLM=getTableLayoutManager();
    if (itsTableLM != null) {
      if (!isFinished() && needPageBreakBefore(null)) {
        itsTableLM.setTableCloseStateAsForced();
      }
 else       if (isFinished() && needPageBreakAfter(null)) {
        itsTableLM.setTableCloseStateAsForced();
      }
    }
  }
  return childBreak;
}","public boolean layout(){
  boolean childBreak=super.layout();
  if (childBreak) {
    IPDFTableLayoutManager itsTableLM=getTableLayoutManager();
    if (itsTableLM != null) {
      IStyle cStyle=content.getStyle();
      if (!isFinished() && needPageBreakBefore(cStyle.getPageBreakBefore())) {
        itsTableLM.setTableCloseStateAsForced();
      }
 else       if (isFinished() && needPageBreakAfter(cStyle.getPageBreakAfter())) {
        itsTableLM.setTableCloseStateAsForced();
      }
    }
  }
  return childBreak;
}",0.894681960375391
76863,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    addResultSetColumn(dataSetHandle,metaData);
    if (MetaDataPopulator.needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=retrieveMetaDataByQueryExecution(dataSetHandle);
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}",0.4551519644180875
76864,"/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}","/** 
 * @param meta
 * @throws BirtException
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}",0.99949924887331
76865,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    if (dataSetHandle == null) {
      throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
    }
    rsMeta=this.retrieveMetaDataByQueryExecution(dataSetHandle);
    if (!(dataSetHandle instanceof ScriptDataSetHandle))     clearUnusedData(dataSetHandle,rsMeta);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}",0.8893725063474791
76866,"/** 
 * @return
 */
public String getNamespace(){
  return object.getNamespace();
}","/** 
 * @return
 */
public String getNamespace(){
  return object.getContributor().getName();
}",0.8764044943820225
76867,"/** 
 * @return
 */
public String getNamespace(){
  return object.getNamespace();
}","/** 
 * @return
 */
public String getNamespace(){
  return object.getContributor().getName();
}",0.8764044943820225
76868,"public int[] resolve(int specifiedWidth,int maxWidth){
  assert(specifiedWidth <= maxWidth);
  int columnNumber=table.getColumnCount();
  int[] columns=new int[columnNumber];
  int columnWithWidth=0;
  int colSum=0;
  for (int j=0; j < table.getColumnCount(); j++) {
    IColumn column=(IColumn)table.getColumn(j);
    int columnWidth=getDimensionValue(column.getWidth(),tableWidth);
    if (columnWidth > 0) {
      columns[j]=columnWidth;
      colSum+=columnWidth;
      columnWithWidth++;
    }
 else {
      columns[j]=-1;
    }
  }
  if (columnWithWidth == columnNumber) {
    if (colSum <= maxWidth) {
      return columns;
    }
 else {
      float delta=colSum - maxWidth;
      for (int i=0; i < columnNumber; i++) {
        columns[i]-=(int)(delta * columns[i] / colSum);
      }
      return columns;
    }
  }
 else {
    if (specifiedWidth == 0) {
      if (colSum < maxWidth) {
        distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
      }
 else {
        redistributeWidth(columns,colSum - maxWidth + (columnNumber - columnWithWidth) * maxWidth / columnNumber,maxWidth,colSum);
      }
    }
 else {
      if (colSum < specifiedWidth) {
        distributeLeftWidth(columns,(specifiedWidth - colSum) / columnNumber - columnWithWidth);
      }
 else {
        if (colSum < maxWidth) {
          distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
        }
 else {
          redistributeWidth(columns,colSum - specifiedWidth + (columnNumber - columnWithWidth) * specifiedWidth / columnNumber,specifiedWidth,colSum);
        }
      }
    }
  }
  return columns;
}","public int[] resolve(int specifiedWidth,int maxWidth){
  assert(specifiedWidth <= maxWidth);
  int columnNumber=table.getColumnCount();
  int[] columns=new int[columnNumber];
  int columnWithWidth=0;
  int colSum=0;
  for (int j=0; j < table.getColumnCount(); j++) {
    IColumn column=(IColumn)table.getColumn(j);
    int columnWidth=getDimensionValue(column.getWidth(),tableWidth);
    if (columnWidth > 0) {
      columns[j]=columnWidth;
      colSum+=columnWidth;
      columnWithWidth++;
    }
 else {
      columns[j]=-1;
    }
  }
  if (columnWithWidth == columnNumber) {
    if (colSum <= maxWidth) {
      return columns;
    }
 else {
      float delta=colSum - maxWidth;
      for (int i=0; i < columnNumber; i++) {
        columns[i]-=(int)(delta * columns[i] / colSum);
      }
      return columns;
    }
  }
 else {
    if (specifiedWidth == 0) {
      if (colSum < maxWidth) {
        distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
      }
 else {
        redistributeWidth(columns,colSum - maxWidth + (columnNumber - columnWithWidth) * maxWidth / columnNumber,maxWidth,colSum);
      }
    }
 else {
      if (colSum < specifiedWidth) {
        distributeLeftWidth(columns,(specifiedWidth - colSum) / (columnNumber - columnWithWidth));
      }
 else {
        if (colSum < maxWidth) {
          distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
        }
 else {
          redistributeWidth(columns,colSum - specifiedWidth + (columnNumber - columnWithWidth) * specifiedWidth / columnNumber,specifiedWidth,colSum);
        }
      }
    }
  }
  return columns;
}",0.9993939393939394
76869,"public String format(Date date){
  StringBuffer str=new StringBuffer();
  FieldPosition pos=new FieldPosition(DateFormat.DATE_FIELD);
  DateFormat df=DateFormat.getDateInstance(DateFormat.LONG,locale);
  df.format(date,str,pos);
  int endIndex=pos.getEndIndex() + (str.charAt(pos.getEndIndex()) == ',' ? 2 : 1);
  if (endIndex >= str.length()) {
    return str.substring(0,pos.getBeginIndex());
  }
  return str.substring(0,pos.getBeginIndex()) + str.substring(endIndex);
}","public String format(Date date){
  StringBuffer str=new StringBuffer();
  FieldPosition pos=new FieldPosition(DateFormat.DATE_FIELD);
  DateFormat df=DateFormat.getDateInstance(DateFormat.LONG,locale);
  df.format(date,str,pos);
  int endIndex;
  if (pos.getEndIndex() >= str.length()) {
    endIndex=pos.getEndIndex();
  }
 else {
    endIndex=pos.getEndIndex() + (str.charAt(pos.getEndIndex()) == ',' ? 2 : 1);
  }
  if (endIndex >= str.length()) {
    return str.substring(0,pos.getBeginIndex()).trim();
  }
  return str.substring(0,pos.getBeginIndex()) + str.substring(endIndex);
}",0.8941398865784499
76870,"protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ALLOW_NULL)) {
      inputParameter.setAllowNull(getProperty(CHECKBOX_ALLOW_NULL));
    }
    if (allowBlank.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_ALLOW_BLANK)) {
        inputParameter.setAllowBlank(getProperty(CHECKBOX_ALLOW_BLANK));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.ALLOW_BLANK_PROP,null);
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (needSort.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_SORT)) {
        inputParameter.setFixedOrder(!getProperty(CHECKBOX_SORT));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(""String_Node_Str"")) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ALLOW_NULL)) {
      inputParameter.setAllowNull(getProperty(CHECKBOX_ALLOW_NULL));
    }
    if (allowBlank.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_ALLOW_BLANK)) {
        inputParameter.setAllowBlank(getProperty(CHECKBOX_ALLOW_BLANK));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.ALLOW_BLANK_PROP,null);
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (needSort.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_SORT)) {
        inputParameter.setFixedOrder(!getProperty(CHECKBOX_SORT));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}",0.9786266484765804
76871,"protected void align(){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
      }
 else       if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
      }
    }
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle != null) {
      int spacing=height - child.getAllocatedHeight();
      assert(spacing >= 0);
      if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign) || CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else {
      }
    }
  }
}","protected void align(){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
      }
 else       if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
      }
    }
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle != null) {
      int spacing=height - child.getAllocatedHeight();
      assert(spacing >= 0);
      if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing / 2 + child.getY());
      }
 else {
        int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
        if (lineHeight > 0) {
          child.setPosition(child.getX(),spacing / 2 + child.getY());
        }
      }
    }
  }
}",0.9236569274269556
76872,"public String getAttributeAsIs(String name){
  return object.getAttributeAsIs(name);
}","/** 
 * @deprecated The method is equivalent to the {@link #getAttribute(String)}. Contrary to its description, this method returns a translated value. Use the   {@link #getAttribute(String)} method instead.
 */
public String getAttributeAsIs(String name){
  return object.getAttributeAsIs(name);
}",0.4479166666666667
76873,"public String getValueAsIs(){
  return object.getValueAsIs();
}","/** 
 * @deprecated The method is equivalent to the {@link #getValue()}. Contrary to its description, this method returns a translated value. Use the   {@link #getValue()} method instead.
 */
public String getValueAsIs(){
  return object.getValueAsIs();
}",0.3962264150943396
76874,"public URL asLocalURL(URL url) throws IOException {
  return Platform.asLocalURL(url);
}","public URL asLocalURL(URL url) throws IOException {
  return FileLocator.toFileURL(url);
}",0.8764044943820225
76875,"public URL find(IBundle bundle,IPlatformPath path){
  if ((bundle instanceof EclipseBundle) && (path instanceof EclipsePath)) {
    return Platform.find(((EclipseBundle)bundle).bundle,((EclipsePath)path).path);
  }
  return null;
}","public URL find(IBundle bundle,IPlatformPath path){
  if ((bundle instanceof EclipseBundle) && (path instanceof EclipsePath)) {
    return FileLocator.find(((EclipseBundle)bundle).bundle,((EclipsePath)path).path,null);
  }
  return null;
}",0.948936170212766
76876,"public Token getNextToken(){
  int kind;
  Token specialToken=null;
  Token matchedToken;
  int curPos=0;
  EOFLoop:   for (; ; ) {
    try {
      curChar=input_stream.BeginToken();
    }
 catch (    java.io.IOException e) {
      jjmatchedKind=0;
      matchedToken=jjFillToken();
      return matchedToken;
    }
switch (curLexState) {
case 0:
      jjmatchedKind=0x7fffffff;
    jjmatchedPos=0;
  curPos=jjMoveStringLiteralDfa0_0();
break;
case 1:
jjmatchedKind=0x7fffffff;
jjmatchedPos=0;
curPos=jjMoveStringLiteralDfa0_1();
break;
case 2:
jjmatchedKind=0x7fffffff;
jjmatchedPos=0;
curPos=jjMoveStringLiteralDfa0_2();
break;
case 3:
jjmatchedKind=0x7fffffff;
jjmatchedPos=0;
curPos=jjMoveStringLiteralDfa0_3();
break;
}
if (jjmatchedKind != 0x7fffffff) {
if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
matchedToken=jjFillToken();
if (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];
return matchedToken;
}
 else {
if (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];
continue EOFLoop;
}
}
int error_line=input_stream.getEndLine();
int error_column=input_stream.getEndColumn();
String error_after=null;
boolean EOFSeen=false;
try {
input_stream.readChar();
input_stream.backup(1);
}
 catch (java.io.IOException e1) {
EOFSeen=true;
error_after=curPos <= 1 ? ""String_Node_Str"" : input_stream.GetImage();
if (curChar == '\n' || curChar == '\r') {
error_line++;
error_column=0;
}
 else error_column++;
}
if (!EOFSeen) {
input_stream.backup(1);
error_after=curPos <= 1 ? ""String_Node_Str"" : input_stream.GetImage();
}
throw new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);
}
}","public Token getNextToken(){
  Token matchedToken;
  int curPos=0;
  EOFLoop:   for (; ; ) {
    try {
      curChar=input_stream.BeginToken();
    }
 catch (    java.io.IOException e) {
      jjmatchedKind=0;
      matchedToken=jjFillToken();
      return matchedToken;
    }
switch (curLexState) {
case 0:
      jjmatchedKind=0x7fffffff;
    jjmatchedPos=0;
  curPos=jjMoveStringLiteralDfa0_0();
break;
case 1:
jjmatchedKind=0x7fffffff;
jjmatchedPos=0;
curPos=jjMoveStringLiteralDfa0_1();
break;
case 2:
jjmatchedKind=0x7fffffff;
jjmatchedPos=0;
curPos=jjMoveStringLiteralDfa0_2();
break;
case 3:
jjmatchedKind=0x7fffffff;
jjmatchedPos=0;
curPos=jjMoveStringLiteralDfa0_3();
break;
}
if (jjmatchedKind != 0x7fffffff) {
if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
matchedToken=jjFillToken();
if (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];
return matchedToken;
}
 else {
if (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];
continue EOFLoop;
}
}
int error_line=input_stream.getEndLine();
int error_column=input_stream.getEndColumn();
String error_after=null;
boolean EOFSeen=false;
try {
input_stream.readChar();
input_stream.backup(1);
}
 catch (java.io.IOException e1) {
EOFSeen=true;
error_after=curPos <= 1 ? ""String_Node_Str"" : input_stream.GetImage();
if (curChar == '\n' || curChar == '\r') {
error_line++;
error_column=0;
}
 else error_column++;
}
if (!EOFSeen) {
input_stream.backup(1);
error_after=curPos <= 1 ? ""String_Node_Str"" : input_stream.GetImage();
}
throw new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);
}
}",0.9890786894427332
76877,"private final int jjMoveNfa_3(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=3;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 1:
          if ((0xffffdfffffffffffL & l) != 0L) {
            if (kind > 18)             kind=18;
            jjCheckNAdd(0);
          }
 else           if (curChar == 45)           jjCheckNAdd(2);
        break;
case 0:
      if ((0xffffdfffffffffffL & l) == 0L)       break;
    if (kind > 18)     kind=18;
  jjCheckNAdd(0);
break;
case 2:
if ((0xffffdfffffffffffL & l) == 0L) break;
if (kind > 19) kind=19;
jjCheckNAdd(2);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 1:
case 0:
if (kind > 18) kind=18;
jjCheckNAdd(0);
break;
case 2:
if (kind > 19) kind=19;
jjstateSet[jjnewStateCnt++]=2;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 1:
case 0:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 18) kind=18;
jjCheckNAdd(0);
break;
case 2:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 19) kind=19;
jjstateSet[jjnewStateCnt++]=2;
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=3 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_3(int startState,int curPos){
  int startsAt=0;
  jjnewStateCnt=3;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 1:
          if ((0xffffdfffffffffffL & l) != 0L) {
            if (kind > 18)             kind=18;
            jjCheckNAdd(0);
          }
 else           if (curChar == 45)           jjCheckNAdd(2);
        break;
case 0:
      if ((0xffffdfffffffffffL & l) == 0L)       break;
    if (kind > 18)     kind=18;
  jjCheckNAdd(0);
break;
case 2:
if ((0xffffdfffffffffffL & l) == 0L) break;
if (kind > 19) kind=19;
jjCheckNAdd(2);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
do {
switch (jjstateSet[--i]) {
case 1:
case 0:
if (kind > 18) kind=18;
jjCheckNAdd(0);
break;
case 2:
if (kind > 19) kind=19;
jjstateSet[jjnewStateCnt++]=2;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 1:
case 0:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 18) kind=18;
jjCheckNAdd(0);
break;
case 2:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 19) kind=19;
jjstateSet[jjnewStateCnt++]=2;
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=3 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}",0.9746136865342164
76878,"private final int jjMoveNfa_1(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=3;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x100002600L & l) != 0L) {
            if (kind > 8)             kind=8;
          }
 else           if ((0x600000000000L & l) != 0L) {
            if (kind > 16)             kind=16;
            jjCheckNAdd(2);
          }
        break;
case 1:
      if ((0x600000000000L & l) == 0L)       break;
    if (kind > 16)     kind=16;
  jjCheckNAdd(2);
break;
case 2:
if ((0x3ff600000000000L & l) == 0L) break;
if (kind > 16) kind=16;
jjCheckNAdd(2);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
case 2:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 16) kind=16;
jjCheckNAdd(2);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=3 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_1(int startState,int curPos){
  int startsAt=0;
  jjnewStateCnt=3;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x100002600L & l) != 0L) {
            if (kind > 8)             kind=8;
          }
 else           if ((0x600000000000L & l) != 0L) {
            if (kind > 16)             kind=16;
            jjCheckNAdd(2);
          }
        break;
case 1:
      if ((0x600000000000L & l) == 0L)       break;
    if (kind > 16)     kind=16;
  jjCheckNAdd(2);
break;
case 2:
if ((0x3ff600000000000L & l) == 0L) break;
if (kind > 16) kind=16;
jjCheckNAdd(2);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
case 2:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 16) kind=16;
jjCheckNAdd(2);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
do {
switch (jjstateSet[--i]) {
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=3 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}",0.933506325008109
76879,"private final int jjMoveNfa_2(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=7;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0xbfffff7affffd9ffL & l) != 0L) {
            if (kind > 17)             kind=17;
            jjCheckNAdd(6);
          }
 else           if (curChar == 34)           jjCheckNAddTwoStates(4,5);
 else           if (curChar == 39)           jjCheckNAddTwoStates(1,2);
        break;
case 1:
      if ((0xffffff7fffffffffL & l) != 0L)       jjCheckNAddTwoStates(1,2);
    break;
case 2:
  if (curChar == 39 && kind > 17)   kind=17;
break;
case 3:
if (curChar == 34) jjCheckNAddTwoStates(4,5);
break;
case 4:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddTwoStates(4,5);
break;
case 5:
if (curChar == 34 && kind > 17) kind=17;
break;
case 6:
if ((0xbfffff7affffd9ffL & l) == 0L) break;
if (kind > 17) kind=17;
jjCheckNAdd(6);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
case 6:
if (kind > 17) kind=17;
jjCheckNAdd(6);
break;
case 1:
jjAddStates(2,3);
break;
case 4:
jjAddStates(4,5);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
case 6:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 17) kind=17;
jjCheckNAdd(6);
break;
case 1:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(2,3);
break;
case 4:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(4,5);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=7 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_2(int startState,int curPos){
  int startsAt=0;
  jjnewStateCnt=7;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 0:
          if ((0xbfffff7affffd9ffL & l) != 0L) {
            if (kind > 17)             kind=17;
            jjCheckNAdd(6);
          }
 else           if (curChar == 34)           jjCheckNAddTwoStates(4,5);
 else           if (curChar == 39)           jjCheckNAddTwoStates(1,2);
        break;
case 1:
      if ((0xffffff7fffffffffL & l) != 0L)       jjCheckNAddTwoStates(1,2);
    break;
case 2:
  if (curChar == 39 && kind > 17)   kind=17;
break;
case 3:
if (curChar == 34) jjCheckNAddTwoStates(4,5);
break;
case 4:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddTwoStates(4,5);
break;
case 5:
if (curChar == 34 && kind > 17) kind=17;
break;
case 6:
if ((0xbfffff7affffd9ffL & l) == 0L) break;
if (kind > 17) kind=17;
jjCheckNAdd(6);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
do {
switch (jjstateSet[--i]) {
case 0:
case 6:
if (kind > 17) kind=17;
jjCheckNAdd(6);
break;
case 1:
jjAddStates(2,3);
break;
case 4:
jjAddStates(4,5);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
case 6:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 17) kind=17;
jjCheckNAdd(6);
break;
case 1:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(2,3);
break;
case 4:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(4,5);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=7 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}",0.97856477166822
76880,"private final int jjMoveNfa_0(int startState,int curPos){
  int strKind=jjmatchedKind;
  int strPos=jjmatchedPos;
  int seenUpto;
  input_stream.backup(seenUpto=curPos + 1);
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    throw new Error(""String_Node_Str"");
  }
  curPos=0;
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=7;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 4:
          if ((0xefffffffffffffffL & l) != 0L) {
            if (kind > 7)             kind=7;
            jjCheckNAdd(5);
          }
 else           if (curChar == 60) {
            if (kind > 7)             kind=7;
          }
        if ((0x100002600L & l) != 0L) {
          if (kind > 1)           kind=1;
          jjCheckNAdd(0);
        }
 else         if (curChar == 60)         jjstateSet[jjnewStateCnt++]=1;
      break;
case 0:
    if ((0x100002600L & l) == 0L)     break;
  if (kind > 1)   kind=1;
jjCheckNAdd(0);
break;
case 1:
if (curChar == 33) jjCheckNAddTwoStates(2,3);
break;
case 2:
if ((0xbfffffffffffffffL & l) != 0L) jjCheckNAddTwoStates(2,3);
break;
case 3:
if (curChar == 62 && kind > 2) kind=2;
break;
case 5:
if ((0xefffffffffffffffL & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAdd(5);
break;
case 6:
if (curChar == 60 && kind > 7) kind=7;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 4:
case 5:
if (kind > 7) kind=7;
jjCheckNAdd(5);
break;
case 2:
jjAddStates(0,1);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 4:
case 5:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAdd(5);
break;
case 2:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(0,1);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=7 - (jjnewStateCnt=startsAt))) break;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
break;
}
}
if (jjmatchedPos > strPos) return curPos;
int toRet=Math.max(curPos,seenUpto);
if (curPos < toRet) for (i=toRet - Math.min(curPos,seenUpto); i-- > 0; ) try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
throw new Error(""String_Node_Str"");
}
if (jjmatchedPos < strPos) {
jjmatchedKind=strKind;
jjmatchedPos=strPos;
}
 else if (jjmatchedPos == strPos && jjmatchedKind > strKind) jjmatchedKind=strKind;
return toRet;
}","private final int jjMoveNfa_0(int startState,int curPos){
  int strKind=jjmatchedKind;
  int strPos=jjmatchedPos;
  int seenUpto;
  input_stream.backup(seenUpto=curPos + 1);
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    throw new Error(""String_Node_Str"");
  }
  curPos=0;
  int startsAt=0;
  jjnewStateCnt=7;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 4:
          if ((0xefffffffffffffffL & l) != 0L) {
            if (kind > 7)             kind=7;
            jjCheckNAdd(5);
          }
 else           if (curChar == 60) {
            if (kind > 7)             kind=7;
          }
        if ((0x100002600L & l) != 0L) {
          if (kind > 1)           kind=1;
          jjCheckNAdd(0);
        }
 else         if (curChar == 60)         jjstateSet[jjnewStateCnt++]=1;
      break;
case 0:
    if ((0x100002600L & l) == 0L)     break;
  if (kind > 1)   kind=1;
jjCheckNAdd(0);
break;
case 1:
if (curChar == 33) jjCheckNAddTwoStates(2,3);
break;
case 2:
if ((0xbfffffffffffffffL & l) != 0L) jjCheckNAddTwoStates(2,3);
break;
case 3:
if (curChar == 62 && kind > 2) kind=2;
break;
case 5:
if ((0xefffffffffffffffL & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAdd(5);
break;
case 6:
if (curChar == 60 && kind > 7) kind=7;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
do {
switch (jjstateSet[--i]) {
case 4:
case 5:
if (kind > 7) kind=7;
jjCheckNAdd(5);
break;
case 2:
jjAddStates(0,1);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 4:
case 5:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
jjCheckNAdd(5);
break;
case 2:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(0,1);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=7 - (jjnewStateCnt=startsAt))) break;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
break;
}
}
if (jjmatchedPos > strPos) return curPos;
int toRet=Math.max(curPos,seenUpto);
if (curPos < toRet) for (i=toRet - Math.min(curPos,seenUpto); i-- > 0; ) try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
throw new Error(""String_Node_Str"");
}
if (jjmatchedPos < strPos) {
jjmatchedKind=strKind;
jjmatchedPos=strPos;
}
 else if (jjmatchedPos == strPos && jjmatchedKind > strKind) jjmatchedKind=strKind;
return toRet;
}",0.983859649122807
76881,"/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue))     continue;
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}","/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue))     exprValue=null;
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}",0.9745370370370372
76882,"public CellInstance(ICellContent cell,ExecutionContext context,boolean fromGrid){
  super(cell,context);
  this.cell=cell;
  this.fromGrid=fromGrid;
}","public CellInstance(ICellContent cell,ExecutionContext context,boolean fromGrid){
  super(cell,context);
  this.cell=cell;
}",0.9051094890510948
76883,"/** 
 * initial dataset control
 */
private void initializeControl(){
  DEFAULT_MESSAGE=JdbcPlugin.getResourceString(""String_Node_Str"");
  setMessage(DEFAULT_MESSAGE,IMessageProvider.NONE);
  refreshPage();
  prepareUI();
}","/** 
 * initial dataset control
 */
private void initializeControl(){
  isPageInitialization=true;
  initializeSchemaPrefetchConfig();
  DEFAULT_MESSAGE=JdbcPlugin.getResourceString(""String_Node_Str"");
  setMessage(DEFAULT_MESSAGE,IMessageProvider.NONE);
  refreshPage();
  prepareUI();
}",0.87279843444227
76884,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      populateEventData(e);
      insertText((String)e.data);
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setupIdentifierQuoteStringCheckBox(selectTableGroup);
  setRootElement();
  addDragSupportToTree();
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      populateEventData(e);
      insertText((String)e.data);
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,(JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setupIdentifierQuoteStringCheckBox(selectTableGroup);
  setRootElement();
  addDragSupportToTree();
}",0.980837667670408
76885,"/** 
 * populate shema list if the schema is supported
 */
protected void populateSchemaList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  getAvailableSchema();
  if (schemaCombo.getItemCount() < 1) {
    schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo.select(0);
    if (schemaList != null) {
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
  }
  ArrayList schemaObjectList=new ArrayList();
  if (schemaList != null) {
    int numberOfSchema=0;
    Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
    if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA)) {
      numberOfSchema=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA);
    }
 else {
      numberOfSchema=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_SCHEMA;
      preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA,numberOfSchema);
    }
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() == 0) {
      for (int i=0, count=0; i < schemaList.size() && count < numberOfSchema; i++) {
        String schemaName=(String)schemaList.get(i);
        if (containsTableInSchema(schemaName)) {
          DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
          schemaObjectList.add(schemaObj);
          count++;
        }
      }
    }
 else {
      String schemaName=schemaCombo.getItem(schemaCombo.getSelectionIndex());
      DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
      schemaObjectList.add(schemaObj);
    }
    TreeItem[] items=Utility.createTreeItems(rootNode,schemaObjectList,SWT.NONE,schemaImage);
    if (items != null && items.length > 0) {
      availableDbObjectsTree.showItem(items[0]);
    }
  }
}","/** 
 * populate shema list if the schema is supported
 */
protected void populateSchemaList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  if (JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) {
    getAvailableSchema();
  }
 else {
    getSpecificSchema(schemaCombo.getText().trim());
  }
  if (schemaCombo.getItemCount() < 1) {
    schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo.select(0);
    if (schemaList != null) {
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
  }
  ArrayList schemaObjectList=new ArrayList();
  if (schemaList != null) {
    int numberOfSchema=0;
    Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
    if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA)) {
      numberOfSchema=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA);
    }
 else {
      numberOfSchema=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_SCHEMA;
      preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA,numberOfSchema);
    }
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() < 0) {
      String schemaName=schemaCombo.getText().trim();
      if (schemaName.length() != 0) {
        DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
        schemaObjectList.add(schemaObj);
      }
 else       schemaCombo.select(0);
    }
    if (schemaCombo.getSelectionIndex() == 0) {
      for (int i=0, count=0; i < schemaList.size() && count < numberOfSchema; i++) {
        String schemaName=(String)schemaList.get(i);
        if (containsTableInSchema(schemaName)) {
          DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
          schemaObjectList.add(schemaObj);
          count++;
        }
      }
    }
 else     if (schemaCombo.getSelectionIndex() > 0) {
      String schemaName=schemaCombo.getItem(schemaCombo.getSelectionIndex());
      DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
      schemaObjectList.add(schemaObj);
    }
  }
  TreeItem[] items=Utility.createTreeItems(rootNode,schemaObjectList,SWT.NONE,schemaImage);
  if (items != null && items.length > 0) {
    availableDbObjectsTree.showItem(items[0]);
  }
}",0.7355846542614289
76886,"/** 
 * @throws DataException
 */
private void doSave(Map valueMap,boolean finish) throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator(this.odiResult,this.idInfo.getGroupLevel(),this.idInfo.getSubQueryInfo());
  }
  if (finish == false)   this.rdSave.saveExprValue(odiResult.getCurrentResultIndex(),valueMap);
 else   this.rdSave.saveFinish(odiResult.getCurrentResultIndex());
}","/** 
 * @throws DataException
 */
private void doSave(Map valueMap,boolean finish) throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator(this.odiResult,this.idInfo.getGroupLevel(),this.idInfo.getSubQueryInfo());
  }
  if (finish == false)   this.rdSave.saveExprValue(odiResult.getCurrentResultIndex(),valueMap);
 else {
    this.rdSave.saveFinish(odiResult.getRowCount() - 1);
  }
}",0.9589322381930184
76887,"/** 
 * Test access to ""params's value"" with report handle
 */
public void testParamsWithItAttr() throws Exception {
  scope=new DataAdapterTopLevelScope(cx,design);
  Object r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertTrue(r.toString().length() > 0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertTrue(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertFalse(((Boolean)r).booleanValue());
}","/** 
 * Test access to ""params's value"" with report handle
 */
public void testParamsWithItAttr() throws Exception {
  scope=new DataAdapterTopLevelScope(cx,design);
  Object r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertTrue(r.toString().length() > 0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertNull(r);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Date.class);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Double.class);
  assertEquals(((Double)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),1234);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),BigDecimal.class);
  assertEquals(((BigDecimal)r).intValue(),0);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertTrue(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),Boolean.class);
  assertFalse(((Boolean)r).booleanValue());
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r,null);
  r=evaluateScript(""String_Node_Str"");
  assertEquals(r.getClass(),String.class);
  assertEquals(r,""String_Node_Str"");
}",0.8825503355704698
76888,"public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    CascadingParameterGroupHandle group=getCascadingGroup(parameter);
    if (DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(group.getDataSetMode())) {
      return getCascadingParameterList(parameter);
    }
 else     if (parameter.getDataSetName() != null) {
      return getChoicesFromParameterQuery(parameter);
    }
 else     if (isCascadingParameter(parameter)) {
      return getCascadingParameterList(parameter);
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label == null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(true,parameter.getPattern(),ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}","public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    CascadingParameterGroupHandle group=null;
    if (isCascadingParameter(parameter)) {
      group=getCascadingGroup(parameter);
    }
    if (group != null && DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(group.getDataSetMode())) {
      return getCascadingParameterList(parameter);
    }
 else     if (parameter.getDataSetName() != null) {
      return getChoicesFromParameterQuery(parameter);
    }
 else     if (group != null) {
      return getCascadingParameterList(parameter);
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label == null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(true,parameter.getPattern(),ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}",0.9625949736995908
76889,"public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  try {
    if (!maxRowsUpToDate) {
      try {
        assertNotNull(callStat);
        callStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    registerOutputParameter();
    this.callStat.execute();
    if (this.callStat.getResultSet() != null)     return new ResultSet(this.callStat.getResultSet());
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}","public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  try {
    if (!maxRowsUpToDate) {
      try {
        assertNotNull(callStat);
        callStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    registerOutputParameter();
    this.callStat.execute();
    if (this.callStat.getResultSet() != null)     return new ResultSet(this.callStat.getResultSet());
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    return resultSet != null ? new ResultSet(resultSet) : new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}",0.910457963089542
76890,"/** 
 * get paremeter metadata for callableStatement, if metadata is null or data mode is unknown or SQLException is thrown, register output parameter on DatabaseMetadata, else register output paremeter on statement's metadata.
 * @throws OdaException
 */
private void registerOutputParameter() throws OdaException {
  if (parameterDefn != null) {
    for (int i=0; i < parameterDefn.getParameterCount(); i++) {
      if (parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeOut || parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeInOut) {
        registerOutParameter(i + 1,parameterDefn.getParameterType(i));
      }
    }
  }
}","/** 
 * get paremeter metadata for callableStatement, if metadata is null or data mode is unknown or SQLException is thrown, register output parameter on DatabaseMetadata, else register output paremeter on statement's metadata.
 * @throws OdaException
 */
private void registerOutputParameter() throws OdaException {
  if (parameterDefn != null) {
    for (int i=0; i < parameterDefn.getParameterCount(); i++) {
      if (parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeOut || parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeInOut) {
        registerOutParameter(i + 1,getParameterType(i));
      }
    }
  }
}",0.9893778452200304
76891,"/** 
 * temporary solution for driver specific problem: Oracle
 * @param parameterDefn
 */
private void correctParamType(ParameterDefn parameterDefn){
  String parameterName=parameterDefn.getParamTypeName().toUpperCase();
  if (parameterName.equals(""String_Node_Str""))   parameterDefn.setParamType(Types.FLOAT);
 else   if (parameterName.equals(""String_Node_Str"") || parameterName.equals(""String_Node_Str""))   parameterDefn.setParamType(Types.VARCHAR);
 else   parameterDefn.setParamType(Types.VARCHAR);
}","private void correctParamType(ParameterDefn parameterDefn){
  String parameterName=parameterDefn.getParamTypeName().toUpperCase();
  if (parameterName.equals(ORACLE_FLOAT_NAME))   parameterDefn.setParamType(Types.FLOAT);
 else   if (parameterName.equals(ORACLE_CURSOR_NAME))   parameterDefn.setParamType(ORACLE_CURSOR_TYPE);
 else   parameterDefn.setParamType(Types.VARCHAR);
}",0.6530612244897959
76892,"private String getInputControlType(){
  String type=null;
  if (inputParameter.getControlType() == null) {
    type=DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX;
  }
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(inputParameter.getControlType())) {
    if (inputParameter.isMustMatch()) {
      type=PARAM_CONTROL_COMBO;
    }
 else {
      type=PARAM_CONTROL_LIST;
    }
  }
 else {
    type=inputParameter.getControlType();
  }
  return type;
}","private String getInputControlType(){
  String type=null;
  if (inputParameter.getControlType() == null) {
    type=DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX;
  }
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(inputParameter.getControlType())) {
    if (inputParameter.isMustMatch()) {
      type=PARAM_CONTROL_LIST;
    }
 else {
      type=PARAM_CONTROL_COMBO;
    }
  }
 else {
    type=inputParameter.getControlType();
  }
  return type;
}",0.9006479481641468
76893,"protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ALLOW_NULL)) {
      inputParameter.setAllowNull(getProperty(CHECKBOX_ALLOW_NULL));
    }
    if (allowBlank.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_ALLOW_BLANK)) {
        inputParameter.setAllowBlank(getProperty(CHECKBOX_ALLOW_BLANK));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.ALLOW_BLANK_PROP,null);
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (needSort.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_SORT)) {
        inputParameter.setFixedOrder(!getProperty(CHECKBOX_SORT));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ALLOW_NULL)) {
      inputParameter.setAllowNull(getProperty(CHECKBOX_ALLOW_NULL));
    }
    if (allowBlank.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_ALLOW_BLANK)) {
        inputParameter.setAllowBlank(getProperty(CHECKBOX_ALLOW_BLANK));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.ALLOW_BLANK_PROP,null);
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (needSort.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_SORT)) {
        inputParameter.setFixedOrder(!getProperty(CHECKBOX_SORT));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}",0.998380754105945
76894,"public void setAppContext(Object context) throws OdaException {
  if (!(context instanceof Map))   throw new OdaException(Messages.getString(""String_Node_Str""));
  Map appContext=(Map)context;
  if (appContext.get(Constants.APPCONTEXT_INPUTSTREAM) != null) {
    appContext.put(org.eclipse.datatools.enablement.oda.xml.Constants.APPCONTEXT_INPUTSTREAM,appContext.get(Constants.APPCONTEXT_INPUTSTREAM));
  }
  if (appContext.get(Constants.APPCONTEXT_CLOSEINPUTSTREAM) != null) {
    appContext.put(org.eclipse.datatools.enablement.oda.xml.Constants.APPCONTEXT_CLOSEINPUTSTREAM,appContext.get(Constants.APPCONTEXT_CLOSEINPUTSTREAM));
  }
  super.setAppContext((Map)context);
}","public void setAppContext(Object context) throws OdaException {
  if (!(context instanceof Map))   throw new OdaException(Messages.getString(""String_Node_Str""));
  Map appContext=(Map)context;
  if (appContext.get(""String_Node_Str"") != null) {
    appContext.put(org.eclipse.datatools.enablement.oda.xml.Constants.APPCONTEXT_INPUTSTREAM,appContext.get(""String_Node_Str""));
  }
  if (appContext.get(""String_Node_Str"") != null) {
    appContext.put(org.eclipse.datatools.enablement.oda.xml.Constants.APPCONTEXT_CLOSEINPUTSTREAM,appContext.get(""String_Node_Str""));
  }
  super.setAppContext((Map)context);
}",0.7762128325508607
76895,"public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  try {
    if (!maxRowsUpToDate) {
      try {
        assertNotNull(callStat);
        callStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    registerOutputParameter();
    this.callStat.execute();
    if (this.callStat.getResultSet() != null)     return new ResultSet(this.callStat.getResultSet());
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    return resultSet != null ? new ResultSet(resultSet) : new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}","public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  try {
    if (!maxRowsUpToDate) {
      try {
        assertNotNull(callStat);
        callStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    registerOutputParameter();
    this.callStat.execute();
    if (this.callStat.getResultSet() != null)     return new ResultSet(this.callStat.getResultSet());
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}",0.9401386263390044
76896,"/** 
 * Checks if the text is a data content in table header/footer or table group header/footer and uses the query of the table.
 * @param text the text content.
 */
private boolean isAggregatable(ITextContent text){
  Object generateBy=text.getGenerateBy();
  DataItemDesign data=(DataItemDesign)generateBy;
  if (data.getQuery() != null) {
    return false;
  }
  IElement parent=text.getParent();
  while (parent != null) {
    if (parent instanceof IContent) {
      IContent content=(IContent)parent;
      ReportItemDesign design=(ReportItemDesign)content.getGenerateBy();
      if (design.getQuery() != null) {
        return false;
      }
    }
    if (parent instanceof IBandContent) {
      IBandContent bandContent=(IBandContent)parent;
      BandDesign bandDesing=(BandDesign)bandContent.getGenerateBy();
      if (bandDesing.getBandType() == BandDesign.BAND_HEADER || bandDesing.getBandType() == BandDesign.BAND_FOOTER || bandDesing.getBandType() == BandDesign.GROUP_HEADER || bandDesing.getBandType() == BandDesign.GROUP_FOOTER) {
        IElement bandParent=bandContent.getParent();
        while (bandParent instanceof IGroupContent) {
          bandParent=bandParent.getParent();
        }
        if (bandParent instanceof ITableContent) {
          return true;
        }
      }
    }
    parent=parent.getParent();
  }
  return false;
}","/** 
 * Checks if the text is a data content in table header/footer or table group header/footer and uses the query of the table.
 * @param text the text content.
 */
private boolean isAggregatable(ITextContent text){
  Object generateBy=text.getGenerateBy();
  DataItemDesign data=(DataItemDesign)generateBy;
  if (data.getQuery() != null) {
    return false;
  }
  IElement parent=text.getParent();
  while (parent != null) {
    if (parent instanceof IContent) {
      IContent content=(IContent)parent;
      ReportItemDesign design=(ReportItemDesign)content.getGenerateBy();
      if (design != null && design.getQuery() != null) {
        return false;
      }
    }
    if (parent instanceof IBandContent) {
      IBandContent bandContent=(IBandContent)parent;
      BandDesign bandDesing=(BandDesign)bandContent.getGenerateBy();
      if (bandDesing.getBandType() == BandDesign.BAND_HEADER || bandDesing.getBandType() == BandDesign.BAND_FOOTER || bandDesing.getBandType() == BandDesign.GROUP_HEADER || bandDesing.getBandType() == BandDesign.GROUP_FOOTER) {
        IElement bandParent=bandContent.getParent();
        while (bandParent instanceof IGroupContent) {
          bandParent=bandParent.getParent();
        }
        if (bandParent instanceof ITableContent) {
          return true;
        }
      }
    }
    parent=parent.getParent();
  }
  return false;
}",0.993421052631579
76897,"public void testAllowNewValues(){
  scalarParam=(IScalarParameterDefn)gpdTask.getParameterDefn(""String_Node_Str"");
  assertTrue(scalarParam.allowNewValues());
  scalarParam=(IScalarParameterDefn)gpdTask.getParameterDefn(""String_Node_Str"");
  assertFalse(scalarParam.allowNewValues());
}","public void testAllowNewValues(){
  scalarParam=(IScalarParameterDefn)gpdTask.getParameterDefn(""String_Node_Str"");
  assertFalse(scalarParam.allowNewValues());
  scalarParam=(IScalarParameterDefn)gpdTask.getParameterDefn(""String_Node_Str"");
  assertTrue(scalarParam.allowNewValues());
}",0.5594405594405595
76898,"protected void writeFields(DataOutputStream out) throws IOException {
  if (type != -1) {
    IOUtil.writeInt(out,FIELD_TYPE);
    IOUtil.writeInt(out,type);
  }
  if (isDrillThrough()) {
    if (drillThrough.getBookmark() != null) {
      IOUtil.writeInt(out,FIELD_BOOKMARK);
      IOUtil.writeString(out,drillThrough.getBookmark());
    }
  }
 else   if (bookmark != null) {
    IOUtil.writeInt(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  if (isDrillThrough()) {
    if (isBookmark) {
      IOUtil.writeInt(out,FIELD_ISBOOKMARK);
      IOUtil.writeBool(out,drillThrough.isBookmark());
    }
  }
 else   if (isBookmark) {
    IOUtil.writeInt(out,FIELD_ISBOOKMARK);
    IOUtil.writeBool(out,isBookmark);
  }
  if (hyperlink != null) {
    IOUtil.writeInt(out,FIELD_HYPERLINK);
    IOUtil.writeString(out,hyperlink);
  }
  if (isDrillThrough() && drillThrough.getReportName() != null) {
    IOUtil.writeInt(out,FIELD_REPORTNAME);
    IOUtil.writeString(out,drillThrough.getReportName());
  }
  if (isDrillThrough() && drillThrough.getParameterBindings() != null) {
    IOUtil.writeInt(out,FIELD_PARAMETERBINDINGS);
    IOUtil.writeMap(out,drillThrough.getParameterBindings());
  }
  if (isDrillThrough() && drillThrough.getSearchCriteria() != null) {
    IOUtil.writeInt(out,FIELD_SEARCHCRITERIA);
    IOUtil.writeMap(out,drillThrough.getSearchCriteria());
  }
  if (isDrillThrough() && drillThrough.getTargetWindow() != null) {
    IOUtil.writeInt(out,FIELD_TARGET);
    IOUtil.writeString(out,drillThrough.getTargetWindow());
  }
 else   if (target != null) {
    IOUtil.writeInt(out,FIELD_TARGET);
    IOUtil.writeString(out,target);
  }
  if (isDrillThrough() && drillThrough.getFormat() != null) {
    IOUtil.writeInt(out,FIELD_FORMAT);
    IOUtil.writeString(out,drillThrough.getFormat());
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  if (type != -1) {
    IOUtil.writeInt(out,FIELD_TYPE);
    IOUtil.writeInt(out,type);
  }
  if (isDrillThrough()) {
    if (drillThrough.getBookmark() != null) {
      IOUtil.writeInt(out,FIELD_BOOKMARK);
      IOUtil.writeString(out,drillThrough.getBookmark());
    }
  }
 else   if (bookmark != null) {
    IOUtil.writeInt(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  if (isDrillThrough()) {
    if (drillThrough.isBookmark()) {
      IOUtil.writeInt(out,FIELD_ISBOOKMARK);
      IOUtil.writeBool(out,drillThrough.isBookmark());
    }
  }
 else   if (isBookmark) {
    IOUtil.writeInt(out,FIELD_ISBOOKMARK);
    IOUtil.writeBool(out,isBookmark);
  }
  if (hyperlink != null) {
    IOUtil.writeInt(out,FIELD_HYPERLINK);
    IOUtil.writeString(out,hyperlink);
  }
  if (isDrillThrough() && drillThrough.getReportName() != null) {
    IOUtil.writeInt(out,FIELD_REPORTNAME);
    IOUtil.writeString(out,drillThrough.getReportName());
  }
  if (isDrillThrough() && drillThrough.getParameterBindings() != null) {
    IOUtil.writeInt(out,FIELD_PARAMETERBINDINGS);
    IOUtil.writeMap(out,drillThrough.getParameterBindings());
  }
  if (isDrillThrough() && drillThrough.getSearchCriteria() != null) {
    IOUtil.writeInt(out,FIELD_SEARCHCRITERIA);
    IOUtil.writeMap(out,drillThrough.getSearchCriteria());
  }
  if (isDrillThrough() && drillThrough.getTargetWindow() != null) {
    IOUtil.writeInt(out,FIELD_TARGET);
    IOUtil.writeString(out,drillThrough.getTargetWindow());
  }
 else   if (target != null) {
    IOUtil.writeInt(out,FIELD_TARGET);
    IOUtil.writeString(out,target);
  }
  if (isDrillThrough() && drillThrough.getFormat() != null) {
    IOUtil.writeInt(out,FIELD_FORMAT);
    IOUtil.writeString(out,drillThrough.getFormat());
  }
}",0.995898277276456
76899,"/** 
 * save the dataset design's metadata info
 * @param design
 */
public static void saveDataSetDesign(DataSetDesign design){
  IConnection conn=null;
  try {
    IDriver jdbcDriver=new OdaJdbcDriver();
    conn=jdbcDriver.getConnection(null);
    java.util.Properties prop=new java.util.Properties();
    DataSourceDesign dataSourceDesign=design.getDataSourceDesign();
    if (dataSourceDesign != null) {
      prop.put(Constants.ODADriverClass,dataSourceDesign.getPublicProperties().getProperty(Constants.ODADriverClass) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODADriverClass));
      prop.put(Constants.ODAURL,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAURL) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAURL));
      prop.put(Constants.ODAUser,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAUser) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAUser));
      prop.put(Constants.ODAPassword,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAPassword) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAPassword));
    }
    conn.open(prop);
    IQuery query=conn.newQuery(design.getOdaExtensionDataSetId());
    query.setMaxRows(1);
    query.prepare(design.getQueryText());
    setParameterMetaData(design,query);
    IResultSetMetaData metadata=query.getMetaData();
    setResultSetMetaData(design,metadata);
  }
 catch (  OdaException e) {
    design.setResultSets(null);
  }
 finally {
    if (conn != null)     try {
      conn.close();
    }
 catch (    OdaException e) {
      e.printStackTrace();
    }
    ;
  }
}","/** 
 * save the dataset design's metadata info
 * @param design
 */
public static void saveDataSetDesign(DataSetDesign design){
  IConnection conn=null;
  try {
    IDriver jdbcDriver=new OdaJdbcDriver();
    conn=jdbcDriver.getConnection(null);
    java.util.Properties prop=new java.util.Properties();
    DataSourceDesign dataSourceDesign=design.getDataSourceDesign();
    if (dataSourceDesign != null) {
      prop.put(Constants.ODADriverClass,dataSourceDesign.getPublicProperties().getProperty(Constants.ODADriverClass) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODADriverClass));
      prop.put(Constants.ODAURL,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAURL) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAURL));
      prop.put(Constants.ODAUser,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAUser) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAUser));
      prop.put(Constants.ODAPassword,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAPassword) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAPassword));
    }
    conn.open(prop);
    IQuery query=conn.newQuery(design.getOdaExtensionDataSetId());
    query.prepare(design.getQueryText());
    setParameterMetaData(design,query);
    IResultSetMetaData metadata=query.getMetaData();
    setResultSetMetaData(design,metadata);
  }
 catch (  OdaException e) {
    design.setResultSets(null);
  }
 finally {
    if (conn != null)     try {
      conn.close();
    }
 catch (    OdaException e) {
      e.printStackTrace();
    }
    ;
  }
}",0.9928754630948988
76900,"/** 
 * Set parameter metadata in dataset design
 * @param design
 * @param query
 */
private static void setParameterMetaData(DataSetDesign dataSetDesign,IQuery query){
  try {
    IParameterMetaData paramMetaData=query.getParameterMetaData();
    mergeParameterMetaData(dataSetDesign,paramMetaData);
  }
 catch (  OdaException e) {
    dataSetDesign.setParameters(null);
  }
}","/** 
 * Set parameter metadata in dataset design
 * @param design
 * @param query
 */
private static void setParameterMetaData(DataSetDesign dataSetDesign,IQuery query){
  try {
    IParameterMetaData paramMetaData=query.getParameterMetaData();
    mergeParameterMetaData(dataSetDesign,paramMetaData);
  }
 catch (  OdaException e) {
  }
}",0.9456066945606696
76901,"protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  initializePagination(format,extManager);
  if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    emitter=new HTMLTableLayoutNestEmitter(emitter);
  }
  return emitter;
}","protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format);
  }
  initializePagination(format,extManager);
  if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    emitter=new HTMLTableLayoutNestEmitter(emitter);
  }
  return emitter;
}",0.9947800149142432
76902,"protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  initializePagination(format,extManager);
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  return emitter;
}","protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  initializePagination(format,extManager);
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format);
  }
  return emitter;
}",0.9942669942669944
76903,"/** 
 * Updates values of <code>DataSetHandle</code> with the given <code>sourceDesign</code>.
 * @param setDesign the ODA data source design
 * @param setHandle the Model handle
 * @param isSourceChanged <code>true</code> if the data set of the given design has been changed. Otherwise <code>false</code>.
 * @throws SemanticException if any of <code>sourceDesign</code> property values is not valid.
 */
public void updateDataSetHandle(DataSetDesign setDesign,OdaDataSetHandle setHandle,boolean isSourceChanged) throws SemanticException {
  if (setDesign == null || setHandle == null)   return;
  DesignUtil.validateObject(setDesign);
  CommandStack stack=setHandle.getModuleHandle().getCommandStack();
  stack.startTrans(null);
  try {
    setHandle.getElement().setProperty(OdaDataSourceHandle.EXTENSION_ID_PROP,setDesign.getOdaExtensionDataSetId());
    setHandle.setName(setDesign.getName());
    setHandle.setDisplayName(setDesign.getDisplayName());
    Properties props=setDesign.getPublicProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        setHandle.setProperty(prop.getName(),prop.getValue());
      }
    }
    props=setDesign.getPrivateProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        setHandle.setPrivateDriverProperty(prop.getName(),prop.getValue());
      }
    }
    DesignValues designerValues=null;
    try {
      designerValues=SerializerImpl.instance().read(setHandle.getDesignerValues());
    }
 catch (    IOException e) {
    }
    ResultSets cachedResultSets=designerValues == null ? null : designerValues.getResultSets();
    ResultSetDefinition cachedResultDefn=null;
    if (cachedResultSets != null && !cachedResultSets.getResultSetDefinitions().isEmpty())     cachedResultDefn=(ResultSetDefinition)cachedResultSets.getResultSetDefinitions().get(0);
    updateROMResultSets(setHandle,new ResultSetsAdapter().newROMResultSets(setDesign,setHandle,cachedResultDefn));
    setHandle.setResultSetName(setDesign.getPrimaryResultSetName());
    setHandle.setQueryText(setDesign.getQueryText());
    List userDefinedList=new DataSetParameterAdapter().getUserDefinedParameter(designerValues,setDesign,setHandle);
    updateROMDataSetParams(setDesign,setHandle,designerValues == null ? null : designerValues.getDataSetParameters(),userDefinedList);
    DataSourceDesign sourceDesign=setDesign.getDataSourceDesign();
    if (sourceDesign != null) {
      OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)setHandle.getDataSource();
      if (isSourceChanged && sourceHandle != null && !sourceHandle.getModuleHandle().isReadOnly()) {
        setHandle.setDataSource(sourceDesign.getName());
        updateDataSourceHandle(sourceDesign,sourceHandle);
      }
      if (!isSourceChanged && sourceHandle != null && !sourceHandle.getModuleHandle().isReadOnly() && !(new EcoreUtil.EqualityHelper().equals(createDataSourceDesign(sourceHandle),sourceDesign))) {
        updateDataSourceHandle(sourceDesign,sourceHandle);
      }
    }
 else     setHandle.setDataSource(null);
    updateDesignerValue(setDesign,setHandle,designerValues,userDefinedList);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Updates values of <code>DataSetHandle</code> with the given <code>sourceDesign</code>.
 * @param setDesign the ODA data source design
 * @param setHandle the Model handle
 * @param isSourceChanged <code>true</code> if the data set of the given design has been changed. Otherwise <code>false</code>.
 * @throws SemanticException if any of <code>sourceDesign</code> property values is not valid.
 */
public void updateDataSetHandle(DataSetDesign setDesign,OdaDataSetHandle setHandle,boolean isSourceChanged) throws SemanticException {
  if (setDesign == null || setHandle == null)   return;
  DesignUtil.validateObject(setDesign);
  CommandStack stack=setHandle.getModuleHandle().getCommandStack();
  stack.startTrans(null);
  try {
    setHandle.getElement().setProperty(OdaDataSourceHandle.EXTENSION_ID_PROP,setDesign.getOdaExtensionDataSetId());
    setHandle.setName(setDesign.getName());
    setHandle.setDisplayName(setDesign.getDisplayName());
    Properties props=setDesign.getPublicProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        setHandle.setProperty(prop.getName(),prop.getValue());
      }
    }
    props=setDesign.getPrivateProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        setHandle.setPrivateDriverProperty(prop.getName(),prop.getValue());
      }
    }
    DesignValues designerValues=null;
    try {
      designerValues=SerializerImpl.instance().read(setHandle.getDesignerValues());
    }
 catch (    IOException e) {
    }
    ResultSets cachedResultSets=designerValues == null ? null : designerValues.getResultSets();
    ResultSetDefinition cachedResultDefn=null;
    if (cachedResultSets != null && !cachedResultSets.getResultSetDefinitions().isEmpty())     cachedResultDefn=(ResultSetDefinition)cachedResultSets.getResultSetDefinitions().get(0);
    updateROMResultSets(setHandle,new ResultSetsAdapter().newROMResultSets(setDesign,setHandle,cachedResultDefn));
    setHandle.setResultSetName(setDesign.getPrimaryResultSetName());
    setHandle.setQueryText(setDesign.getQueryText());
    List userDefinedList=new DataSetParameterAdapter().getUserDefinedParameter(designerValues,setDesign,setHandle);
    updateROMDataSetParams(setDesign,setHandle,designerValues == null ? null : designerValues.getDataSetParameters(),userDefinedList);
    DataSourceDesign sourceDesign=setDesign.getDataSourceDesign();
    if (sourceDesign != null) {
      OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)setHandle.getDataSource();
      if (isSourceChanged && sourceHandle != null && !sourceHandle.getModuleHandle().isReadOnly()) {
        setHandle.setDataSource(sourceDesign.getName());
        updateDataSourceHandle(sourceDesign,sourceHandle);
      }
      if (!isSourceChanged && sourceHandle != null && !sourceHandle.getModuleHandle().isReadOnly() && !(this.isEqualDataSourceDesign(createDataSourceDesign(sourceHandle),sourceDesign))) {
        updateDataSourceHandle(sourceDesign,sourceHandle);
      }
    }
 else     setHandle.setDataSource(null);
    updateDesignerValue(setDesign,setHandle,designerValues,userDefinedList);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.9919883466860888
76904,"/** 
 * Draws image at the contentByte
 * @param image		the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  Image img=null;
  TranscoderInput ti=null;
  cb.saveState();
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int imageX=curPos.x + image.getX();
  int imageY=curPos.y + image.getY();
  IImageContent imageContent=((IImageContent)image.getContent());
  try {
    boolean isSvg=false;
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
      if (null == imageContent.getURI())       return;
    if (imageContent.getURI().endsWith(""String_Node_Str"")) {
      isSvg=true;
      ti=new TranscoderInput(new FileInputStream(imageContent.getURI()));
    }
 else {
      img=Image.getInstance(imageContent.getURI());
    }
  break;
case IImageContent.IMAGE_URL:
if (null == imageContent.getURI()) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
ti=new TranscoderInput(imageContent.getURI());
}
 else {
img=Image.getInstance(imageContent.getURI());
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
if (null == imageContent.getData()) return;
isSvg=((imageContent.getMIMEType() != null) && imageContent.getMIMEType().equalsIgnoreCase(""String_Node_Str"")) || ((imageContent.getURI() != null) && imageContent.getURI().toLowerCase().endsWith(""String_Node_Str"")) || ((imageContent.getExtension() != null) && imageContent.getExtension().toLowerCase().endsWith(""String_Node_Str""));
if (isSvg) {
ti=new TranscoderInput(new ByteArrayInputStream(imageContent.getData()));
}
 else {
img=Image.getInstance(imageContent.getData());
}
}
if (!isSvg) {
cb.addImage(img,pdfMeasure(image.getWidth()),0f,0f,pdfMeasure(image.getHeight()),layoutAreaX2PDF(imageX),layoutAreaY2PDF(imageY,image.getHeight()));
}
 else {
try {
if (ti != null) {
double width=pdfMeasure(image.getWidth());
double height=pdfMeasure(image.getHeight());
double x=layoutAreaX2PDF(imageX);
double y=layoutAreaY2PDF(imageY,image.getHeight());
PdfTemplate template=cb.createTemplate(new Float(width).floatValue(),new Float(height).floatValue());
Graphics2D g2=template.createGraphics(new Float(width).floatValue(),new Float(height).floatValue());
PrintTranscoder prm=new PrintTranscoder();
prm.addTranscodingHint(PrintTranscoder.KEY_SCALE_TO_PAGE,new Boolean(true));
prm.transcode(ti,null);
PageFormat pg=new PageFormat();
Paper pp=new Paper();
pp.setSize(width,height);
pp.setImageableArea(0,0,width,height);
pg.setPaper(pp);
prm.print(g2,pg,0);
g2.dispose();
cb.addTemplate(template,new Float(x).floatValue(),new Float(y).floatValue());
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
 catch (BadElementException bee) {
logger.log(Level.WARNING,bee.getMessage(),bee);
}
catch (IOException ioe) {
logger.log(Level.WARNING,ioe.getMessage(),ioe);
}
catch (DocumentException de) {
logger.log(Level.WARNING,de.getMessage(),de);
}
catch (Throwable t) {
logger.log(Level.WARNING,t.getMessage(),t);
}
cb.restoreState();
makeBookmark(image,curPos);
handleHyperlinkAction(image,curPos);
}","/** 
 * Draws image at the contentByte
 * @param image		the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  Image img=null;
  TranscoderInput ti=null;
  cb.saveState();
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int imageX=curPos.x + image.getX();
  int imageY=curPos.y + image.getY();
  IImageContent imageContent=((IImageContent)image.getContent());
  try {
    boolean isSvg=false;
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
      if (null == imageContent.getURI())       return;
    if (imageContent.getURI().endsWith(""String_Node_Str"")) {
      isSvg=true;
      ti=new TranscoderInput(new FileInputStream(imageContent.getURI()));
    }
 else {
      URL url=new URL(imageContent.getURI());
      InputStream in=url.openStream();
      try {
        byte[] buffer=new byte[in.available()];
        in.read(buffer);
        img=Image.getInstance(buffer);
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,ex.getMessage(),ex);
      }
 finally {
        in.close();
      }
    }
  break;
case IImageContent.IMAGE_URL:
if (null == imageContent.getURI()) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
ti=new TranscoderInput(imageContent.getURI());
}
 else {
img=Image.getInstance(imageContent.getURI());
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
if (null == imageContent.getData()) return;
isSvg=((imageContent.getMIMEType() != null) && imageContent.getMIMEType().equalsIgnoreCase(""String_Node_Str"")) || ((imageContent.getURI() != null) && imageContent.getURI().toLowerCase().endsWith(""String_Node_Str"")) || ((imageContent.getExtension() != null) && imageContent.getExtension().toLowerCase().endsWith(""String_Node_Str""));
if (isSvg) {
ti=new TranscoderInput(new ByteArrayInputStream(imageContent.getData()));
}
 else {
img=Image.getInstance(imageContent.getData());
}
}
if (!isSvg) {
cb.addImage(img,pdfMeasure(image.getWidth()),0f,0f,pdfMeasure(image.getHeight()),layoutAreaX2PDF(imageX),layoutAreaY2PDF(imageY,image.getHeight()));
}
 else {
try {
if (ti != null) {
double width=pdfMeasure(image.getWidth());
double height=pdfMeasure(image.getHeight());
double x=layoutAreaX2PDF(imageX);
double y=layoutAreaY2PDF(imageY,image.getHeight());
PdfTemplate template=cb.createTemplate(new Float(width).floatValue(),new Float(height).floatValue());
Graphics2D g2=template.createGraphics(new Float(width).floatValue(),new Float(height).floatValue());
PrintTranscoder prm=new PrintTranscoder();
prm.addTranscodingHint(PrintTranscoder.KEY_SCALE_TO_PAGE,new Boolean(true));
prm.transcode(ti,null);
PageFormat pg=new PageFormat();
Paper pp=new Paper();
pp.setSize(width,height);
pp.setImageableArea(0,0,width,height);
pg.setPaper(pp);
prm.print(g2,pg,0);
g2.dispose();
cb.addTemplate(template,new Float(x).floatValue(),new Float(y).floatValue());
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
 catch (BadElementException bee) {
logger.log(Level.WARNING,bee.getMessage(),bee);
}
catch (IOException ioe) {
logger.log(Level.WARNING,ioe.getMessage(),ioe);
}
catch (DocumentException de) {
logger.log(Level.WARNING,de.getMessage(),de);
}
catch (Throwable t) {
logger.log(Level.WARNING,t.getMessage(),t);
}
cb.restoreState();
makeBookmark(image,curPos);
handleHyperlinkAction(image,curPos);
}",0.9422087745839636
76905,"protected void handleFileImage(String imageFile,IImageContent imageContent){
  ReportDesignHandle reportDesign=context.getDesign();
  if (reportDesign != null) {
    URL url=reportDesign.findResource(imageFile,IResourceLocator.IMAGE);
    if (url != null) {
      String fileName=url.getFile();
      if (fileName != null) {
        imageFile=fileName;
      }
    }
  }
  imageContent.setURI(imageFile);
  imageContent.setImageSource(IImageContent.IMAGE_FILE);
  imageContent.setExtension(FileUtil.getExtFromFileName(imageFile));
  if (imageFile == null) {
    logger.log(Level.SEVERE,""String_Node_Str"");
    context.addException(design.getHandle(),new EngineException(MessageConstants.MISSING_IMAGE_FILE_ERROR));
  }
}","protected void handleFileImage(String imageFile,IImageContent imageContent){
  ReportDesignHandle reportDesign=context.getDesign();
  if (reportDesign != null) {
    URL url=reportDesign.findResource(imageFile,IResourceLocator.IMAGE);
    if (url != null) {
      imageFile=url.toString();
    }
  }
  imageContent.setURI(imageFile);
  imageContent.setImageSource(IImageContent.IMAGE_FILE);
  imageContent.setExtension(FileUtil.getExtFromFileName(imageFile));
  if (imageFile == null) {
    logger.log(Level.SEVERE,""String_Node_Str"");
    context.addException(design.getHandle(),new EngineException(MessageConstants.MISSING_IMAGE_FILE_ERROR));
  }
}",0.9203798392987582
76906,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    image=Image.getInstance(content.getURI());
  break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
image=Image.getInstance(content.getData());
break;
case IImageContent.IMAGE_URL:
image=Image.getInstance(new URL(content.getURI()));
break;
default :
assert(false);
}
if (image != null) {
Object design=content.getGenerateBy();
int resolution=96;
if (design instanceof ExtendedItemDesign) {
resolution=192;
}
return new Dimension((int)(image.plainWidth() * 1000 / resolution * 72),(int)(image.plainHeight() * 1000 / resolution * 72));
}
return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    URL url=new URL(content.getURI());
  InputStream in=url.openStream();
try {
  byte[] buffer=new byte[in.available()];
  in.read(buffer);
  image=Image.getInstance(buffer);
}
 catch (Exception ex) {
  logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
  in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
image=Image.getInstance(content.getData());
break;
case IImageContent.IMAGE_URL:
image=Image.getInstance(new URL(content.getURI()));
break;
default :
assert(false);
}
if (image != null) {
Object design=content.getGenerateBy();
int resolution=96;
if (design instanceof ExtendedItemDesign) {
resolution=192;
}
return new Dimension((int)(image.plainWidth() * 1000 / resolution * 72),(int)(image.plainHeight() * 1000 / resolution * 72));
}
return null;
}",0.8576576576576577
76907,"/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  mergeHints(modelDataSet,dteDataSet);
}","/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}",0.9674418604651164
76908,"void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  mergeHints(modelDataSet,dteDataSet);
}","void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}",0.9675456389452332
76909,"/** 
 * @return the test
 */
public static Test suite(){
  TestSuite test=new TestSuite();
  test.addTestSuite(DesignLoadLibraryTest.class);
  test.addTestSuite(LibraryChangeChartDataSetTest.class);
  test.addTestSuite(LibraryCommandTest.class);
  test.addTestSuite(LibraryCompoundElementTest.class);
  test.addTestSuite(LibraryHandleTest.class);
  test.addTestSuite(LibraryJointDataSetTest.class);
  test.addTestSuite(LibraryParseTest.class);
  test.addTestSuite(LibraryStructureTest.class);
  test.addTestSuite(LibraryThemeTest.class);
  test.addTestSuite(LibraryWithPropertyBinding.class);
  test.addTestSuite(LibraryWithTableTest.class);
  test.addTestSuite(ReferenceValueUtilTest.class);
  return test;
}","/** 
 * @return the test
 */
public static Test suite(){
  TestSuite test=new TestSuite();
  test.addTestSuite(DesignLoadLibraryTest.class);
  test.addTestSuite(LibraryChangeChartDataSetTest.class);
  test.addTestSuite(LibraryCommandTest.class);
  test.addTestSuite(LibraryCompoundElementTest.class);
  test.addTestSuite(LibraryHandleTest.class);
  test.addTestSuite(LibraryJointDataSetTest.class);
  test.addTestSuite(LibraryParseTest.class);
  test.addTestSuite(LibraryStructureTest.class);
  test.addTestSuite(LibraryThemeTest.class);
  test.addTestSuite(LibraryWithPropertyBinding.class);
  test.addTestSuite(LibraryWithTableTest.class);
  test.addTestSuite(ReferenceValueUtilTest.class);
  test.addTestSuite(ReloadLibraryTest.class);
  return test;
}",0.9685792349726776
76910,"/** 
 * Reloads the library with exceptions.
 * @throws Exception
 */
public void testReloadLibraryWithException() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  try {
    designHandle.reloadLibrary(libraryHandle);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND,e.getErrorCode());
  }
  recoverOriginalLibrary(""String_Node_Str"",""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  File f=new File(getClassFolder() + INPUT_FOLDER + ""String_Node_Str"");
  if (f.exists())   f.delete();
  designHandle.reloadLibrary(libraryHandle);
  assertNull(designHandle.findElement(""String_Node_Str"").getExtends());
  assertNotNull(designHandle.findElement(""String_Node_Str"").getStringProperty(DesignElementHandle.EXTENDS_PROP));
  File f1=new File(getClassFolder() + INPUT_FOLDER + ""String_Node_Str"");
  FileInputStream fis=new FileInputStream(f1);
  FileOutputStream fos=new FileOutputStream(f);
  byte[] data=new byte[10000];
  fis.read(data);
  fos.write(data);
  fis.close();
  fos.close();
  try {
    designHandle.reloadLibrary(libraryHandle);
    fail();
  }
 catch (  LibraryException e) {
    save();
  }
  recoverOriginalLibrary(""String_Node_Str"",""String_Node_Str"");
  compareTextFile(""String_Node_Str"");
}","/** 
 * Reloads the library with exceptions.
 * @throws Exception
 */
public void testReloadLibraryWithException() throws Exception {
  List fileNames=new ArrayList();
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  List filePaths=dumpDesignAndLibrariesToFile(fileNames);
  String designFilePath=(String)filePaths.get(0);
  openDesign(designFilePath,false);
  String lib1FilePath=(String)filePaths.get(2);
  openLibrary(lib1FilePath,false);
  try {
    designHandle.reloadLibrary(libraryHandle);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND,e.getErrorCode());
  }
  String libFilePath=(String)filePaths.get(1);
  openLibrary(libFilePath,false);
  File f=new File(libFilePath);
  if (f.exists())   f.delete();
  designHandle.reloadLibrary(libraryHandle);
  assertNull(designHandle.findElement(""String_Node_Str"").getExtends());
  assertNotNull(designHandle.findElement(""String_Node_Str"").getStringProperty(DesignElementHandle.EXTENDS_PROP));
  InputStream fis=getResourceAStream(INPUT_FOLDER + ""String_Node_Str"");
  FileOutputStream fos=new FileOutputStream(f);
  byte[] data=new byte[10000];
  fis.read(data);
  fos.write(data);
  fis.close();
  fos.close();
  try {
    designHandle.reloadLibrary(libraryHandle);
    fail();
  }
 catch (  LibraryException e) {
    save();
  }
  compareTextFile(""String_Node_Str"");
}",0.5
76911,"/** 
 * Tests needSave method. Only change happens directly on report design, isDirty mark of report design is true. So when library changed, isDirty mark of report design should be false. <ul> <li>reload error library and throw out exception</li> <li>isDirty not changed</li> </ul>
 * @throws Exception
 */
public void testErrorLibraryNeedsSave() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  LabelHandle labelHandle=designHandle.getElementFactory().newLabel(""String_Node_Str"");
  designHandle.getBody().add(labelHandle);
  assertTrue(designHandle.needsSave());
  assertTrue(designHandle.getCommandStack().canUndo());
  assertFalse(designHandle.getCommandStack().canRedo());
  ActivityStack stack=(ActivityStack)designHandle.getCommandStack();
  File f=new File(getClassFolder() + INPUT_FOLDER + ""String_Node_Str"");
  RandomAccessFile raf=new RandomAccessFile(f,""String_Node_Str"");
  raf.seek(906);
  raf.writeBytes(""String_Node_Str"");
  raf.close();
  try {
    designHandle.reloadLibrary(libraryHandle);
    fail();
  }
 catch (  DesignFileException e) {
  }
  assertTrue(stack.canUndo());
  assertFalse(stack.canRedo());
  assertEquals(1,stack.getCurrentTransNo());
  assertTrue(designHandle.needsSave());
  libraryHandle.close();
  recoverOriginalLibrary(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Tests needSave method. Only change happens directly on report design, isDirty mark of report design is true. So when library changed, isDirty mark of report design should be false. <ul> <li>reload error library and throw out exception</li> <li>isDirty not changed</li> </ul>
 * @throws Exception
 */
public void testErrorLibraryNeedsSave() throws Exception {
  List fileNames=new ArrayList();
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  List filePaths=dumpDesignAndLibrariesToFile(fileNames);
  String designFilePath=(String)filePaths.get(0);
  openDesign(designFilePath,false);
  String libFilePath=(String)filePaths.get(1);
  openLibrary(libFilePath,false);
  LabelHandle labelHandle=designHandle.getElementFactory().newLabel(""String_Node_Str"");
  designHandle.getBody().add(labelHandle);
  assertTrue(designHandle.needsSave());
  assertTrue(designHandle.getCommandStack().canUndo());
  assertFalse(designHandle.getCommandStack().canRedo());
  ActivityStack stack=(ActivityStack)designHandle.getCommandStack();
  File f=new File(libFilePath);
  RandomAccessFile raf=new RandomAccessFile(f,""String_Node_Str"");
  raf.seek(906);
  raf.writeBytes(""String_Node_Str"");
  raf.close();
  try {
    designHandle.reloadLibrary(libraryHandle);
    fail();
  }
 catch (  DesignFileException e) {
  }
  assertTrue(stack.canUndo());
  assertFalse(stack.canRedo());
  assertEquals(1,stack.getCurrentTransNo());
  assertTrue(designHandle.needsSave());
  libraryHandle.close();
  libraryHandle=null;
}",0.5740932642487047
76912,"/** 
 * Test reloading a library. <p> 1) If library is reloaded, its element references are updated. <p> <strong>Case1:</strong> <p> Design.table1 -> lib1.libTable1 <p> The structure is synchronized with table in library. Local values of virtual elements are kept. <p> <strong>Case2:</strong> <p> lib1.theme1.style1 <p> If style is removed, the design can only find the style name, not style instance. <p> <strong>Case3:</strong> <p> name space <p> If the libTable1 drops 2 rows, Designl.table1 will not see these rows any more. And names of report elements in these rows are removed from the namespace. <p>
 * @throws Exception
 */
public void testReloadLibrary() throws Exception {
  openDesign(""String_Node_Str"");
  NameSpace ns=designHandle.getModule().getNameSpace(ReportDesign.ELEMENT_NAME_SPACE);
  assertEquals(7,ns.getCount());
  TableHandle table1=(TableHandle)designHandle.findElement(""String_Node_Str"");
  LabelHandle label1=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(ColorPropertyType.RED,table1.getStringProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.RED,label1.getStringProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.RED,label1.getStringProperty(Style.COLOR_PROP));
  TableHandle parent=(TableHandle)table1.getExtends();
  assertNotNull(parent);
  RowHandle rowHandle=(RowHandle)table1.getHeader().get(0);
  CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
  assertEquals(cellHandle.getStringProperty(StyleHandle.COLOR_PROP),ColorPropertyType.BLUE);
  TableHandle table2=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(table2.getExtends());
  assertEquals(table2.getStringProperty(StyleHandle.COLOR_PROP),ColorPropertyType.LIME);
  openLibrary(""String_Node_Str"");
  TableHandle libTable1=(TableHandle)libraryHandle.findElement(""String_Node_Str"");
  ((ThemeHandle)libraryHandle.getThemes().get(0)).getStyles().drop(0);
  libTable1.getDetail().drop(0);
  libTable1.getDetail().drop(0);
  assertEquals(0,libTable1.getDetail().getCount());
  TableHandle libTable2=(TableHandle)libraryHandle.findElement(""String_Node_Str"");
  libTable2.drop();
  libraryHandle.save();
  MyLibraryListener libraryListener=new MyLibraryListener();
  designHandle.addListener(libraryListener);
  designHandle.reloadLibrary(libraryHandle);
  assertEquals(1,libraryListener.events.size());
  assertTrue(libraryListener.events.get(0) instanceof LibraryReloadedEvent);
  assertEquals(3,ns.getCount());
  assertEquals(ColorPropertyType.BLACK,table1.getStringProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.BLACK,label1.getStringProperty(Style.COLOR_PROP));
  assertNull(label1.getStyle());
  assertEquals(""String_Node_Str"",label1.getStringProperty(StyledElement.STYLE_PROP));
  assertEquals(0,table1.getDetail().getCount());
  assertEquals(1,table1.getHeader().getCount());
  assertFalse(designHandle.getCommandStack().canRedo());
  assertFalse(designHandle.getCommandStack().canUndo());
  recoverOriginalLibrary(""String_Node_Str"",""String_Node_Str"");
  save();
  compareTextFile(""String_Node_Str"");
}","/** 
 * Test reloading a library. <p> 1) If library is reloaded, its element references are updated. <p> <strong>Case1:</strong> <p> Design.table1 -> lib1.libTable1 <p> The structure is synchronized with table in library. Local values of virtual elements are kept. <p> <strong>Case2:</strong> <p> lib1.theme1.style1 <p> If style is removed, the design can only find the style name, not style instance. <p> <strong>Case3:</strong> <p> name space <p> If the libTable1 drops 2 rows, Designl.table1 will not see these rows any more. And names of report elements in these rows are removed from the namespace. <p>
 * @throws Exception
 */
public void testReloadLibrary() throws Exception {
  List fileNames=new ArrayList();
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  List filePaths=dumpDesignAndLibrariesToFile(fileNames);
  String designFilePath=(String)filePaths.get(0);
  openDesign(designFilePath,false);
  NameSpace ns=designHandle.getModule().getNameSpace(ReportDesign.ELEMENT_NAME_SPACE);
  assertEquals(7,ns.getCount());
  TableHandle table1=(TableHandle)designHandle.findElement(""String_Node_Str"");
  LabelHandle label1=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(ColorPropertyType.RED,table1.getStringProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.RED,label1.getStringProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.RED,label1.getStringProperty(Style.COLOR_PROP));
  TableHandle parent=(TableHandle)table1.getExtends();
  assertNotNull(parent);
  RowHandle rowHandle=(RowHandle)table1.getHeader().get(0);
  CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
  assertEquals(cellHandle.getStringProperty(StyleHandle.COLOR_PROP),ColorPropertyType.BLUE);
  TableHandle table2=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(table2.getExtends());
  assertEquals(table2.getStringProperty(StyleHandle.COLOR_PROP),ColorPropertyType.LIME);
  String libFilePath=(String)filePaths.get(1);
  openLibrary(libFilePath,false);
  TableHandle libTable1=(TableHandle)libraryHandle.findElement(""String_Node_Str"");
  ((ThemeHandle)libraryHandle.getThemes().get(0)).getStyles().drop(0);
  libTable1.getDetail().drop(0);
  libTable1.getDetail().drop(0);
  assertEquals(0,libTable1.getDetail().getCount());
  TableHandle libTable2=(TableHandle)libraryHandle.findElement(""String_Node_Str"");
  libTable2.drop();
  libraryHandle.save();
  MyLibraryListener libraryListener=new MyLibraryListener();
  designHandle.addListener(libraryListener);
  designHandle.reloadLibrary(libraryHandle);
  assertEquals(1,libraryListener.events.size());
  assertTrue(libraryListener.events.get(0) instanceof LibraryReloadedEvent);
  assertEquals(3,ns.getCount());
  assertEquals(ColorPropertyType.BLACK,table1.getStringProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.BLACK,label1.getStringProperty(Style.COLOR_PROP));
  assertNull(label1.getStyle());
  assertEquals(""String_Node_Str"",label1.getStringProperty(StyledElement.STYLE_PROP));
  assertEquals(0,table1.getDetail().getCount());
  assertEquals(1,table1.getHeader().getCount());
  assertFalse(designHandle.getCommandStack().canRedo());
  assertFalse(designHandle.getCommandStack().canUndo());
  save();
  compareTextFile(""String_Node_Str"");
}",0.9251827655934048
76913,"/** 
 * Test cases: <ul> <li>remove the table lib1.libTable1 from the library and add a grid lib1.libTable1. Design.table1 can not be resolved to gri lib1.libTable1. </ul>
 * @throws Exception
 */
public void testReloadLibraryWithInvalidExtends() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  libraryHandle.findElement(""String_Node_Str"").drop();
  GridHandle grid=libraryHandle.getElementFactory().newGridItem(""String_Node_Str"",2,2);
  libraryHandle.getComponents().add(grid);
  libraryHandle.save();
  designHandle.reloadLibrary(libraryHandle);
  TableHandle table2=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertNull(table2.getExtends());
  assertEquals(""String_Node_Str"",table2.getElement().getExtendsName());
  recoverOriginalLibrary(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test cases: <ul> <li>remove the table lib1.libTable1 from the library and add a grid lib1.libTable1. Design.table1 can not be resolved to gri lib1.libTable1. </ul>
 * @throws Exception
 */
public void testReloadLibraryWithInvalidExtends() throws Exception {
  List fileNames=new ArrayList();
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  List filePaths=dumpDesignAndLibrariesToFile(fileNames);
  String designFilePath=(String)filePaths.get(0);
  openDesign(designFilePath,false);
  String libFilePath=(String)filePaths.get(1);
  openLibrary(libFilePath,false);
  libraryHandle.findElement(""String_Node_Str"").drop();
  GridHandle grid=libraryHandle.getElementFactory().newGridItem(""String_Node_Str"",2,2);
  libraryHandle.getComponents().add(grid);
  libraryHandle.save();
  designHandle.reloadLibrary(libraryHandle);
  TableHandle table2=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertNull(table2.getExtends());
  assertEquals(""String_Node_Str"",table2.getElement().getExtendsName());
}",0.7729417933927635
76914,"/** 
 * Test reloading a library, in which there is only a label. <p> <strong>Case1:</strong> <p> both resource path and report folder has the library file. <p> Changed resource path to null. And try to reload(). No exception. And the library location becomes library in the report folder. <p>
 * @throws Exception
 */
public void testReloadLibrary2() throws Exception {
  String fileName=getClassFolder() + INPUT_FOLDER;
  sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle(null);
  assertNotNull(sessionHandle);
  sessionHandle.setResourceFolder(getClassFolder() + ""String_Node_Str"" + INPUT_FOLDER);
  designHandle=sessionHandle.openDesign(fileName + ""String_Node_Str"");
  design=(ReportDesign)designHandle.getModule();
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  assertNotNull(libraryHandle);
  String location1=libraryHandle.getModule().getLocation();
  sessionHandle.setResourceFolder(null);
  designHandle.reloadLibrary(libraryHandle);
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  assertNotNull(libraryHandle);
  String location2=libraryHandle.getModule().getLocation();
  assertFalse(location1.equalsIgnoreCase(location2));
}","/** 
 * Test reloading a library, in which there is only a label. <p> <strong>Case1:</strong> <p> both resource path and report folder has the library file. <p> Changed resource path to null. And try to reload(). No exception. And the library location becomes library in the report folder. <p>
 * @throws Exception
 */
public void testReloadLibrary2() throws Exception {
  List fileNames=new ArrayList();
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(""String_Node_Str"" + INPUT_FOLDER + ""String_Node_Str"");
  sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle(null);
  assertNotNull(sessionHandle);
  List filePaths=dumpDesignAndLibrariesToFile(fileNames);
  String apiFilePath=(String)filePaths.get(2);
  int lastSlash=apiFilePath.lastIndexOf(""String_Node_Str"");
  String apiFileDir=""String_Node_Str"";
  if (lastSlash != -1) {
    apiFileDir=apiFilePath.substring(0,lastSlash + 1);
  }
  sessionHandle.setResourceFolder(apiFileDir);
  String designFilePath=(String)filePaths.get(0);
  designHandle=sessionHandle.openDesign(designFilePath);
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  assertNotNull(libraryHandle);
  String location1=libraryHandle.getModule().getLocation();
  sessionHandle.setResourceFolder(null);
  designHandle.reloadLibrary(libraryHandle);
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  assertNotNull(libraryHandle);
  String location2=libraryHandle.getModule().getLocation();
  assertFalse(location1.equalsIgnoreCase(location2));
}",0.6417693981145758
76915,"/** 
 * Test reloading a library, in which there is only a label. <p> <strong>Case1:</strong> <p> lib1.label1 <p> if change the color and text of the label, after the loading, it should show the effect. <p>
 * @throws Exception
 */
public void testReloadLibrary1() throws Exception {
  openDesign(""String_Node_Str"");
  LabelHandle label1=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",label1.getText());
  openLibrary(""String_Node_Str"");
  LabelHandle libLabel1=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  libLabel1.setText(""String_Node_Str"");
  libLabel1=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  libLabel1.setText(""String_Node_Str"");
  libraryHandle.save();
  designHandle.reloadLibrary(libraryHandle);
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  libLabel1=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",libLabel1.getText());
  assertEquals(""String_Node_Str"",label1.getText());
  SimpleMasterPageHandle page=(SimpleMasterPageHandle)designHandle.findMasterPage(""String_Node_Str"");
  assertEquals(1,page.getPageHeader().getCount());
  libLabel1=(LabelHandle)page.getPageHeader().get(0);
  assertEquals(""String_Node_Str"",libLabel1.getText());
  recoverOriginalLibrary(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test reloading a library, in which there is only a label. <p> <strong>Case1:</strong> <p> lib1.label1 <p> if change the color and text of the label, after the loading, it should show the effect. <p>
 * @throws Exception
 */
public void testReloadLibrary1() throws Exception {
  List fileNames=new ArrayList();
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  List filePaths=dumpDesignAndLibrariesToFile(fileNames);
  String designFilePath=(String)filePaths.get(0);
  openDesign(designFilePath,false);
  LabelHandle label1=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",label1.getText());
  String libFilePath=(String)filePaths.get(1);
  openLibrary(libFilePath,false);
  LabelHandle libLabel1=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  libLabel1.setText(""String_Node_Str"");
  libLabel1=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  libLabel1.setText(""String_Node_Str"");
  libraryHandle.save();
  designHandle.reloadLibrary(libraryHandle);
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  libLabel1=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",libLabel1.getText());
  assertEquals(""String_Node_Str"",label1.getText());
  SimpleMasterPageHandle page=(SimpleMasterPageHandle)designHandle.findMasterPage(""String_Node_Str"");
  assertEquals(1,page.getPageHeader().getCount());
  libLabel1=(LabelHandle)page.getPageHeader().get(0);
  assertEquals(""String_Node_Str"",libLabel1.getText());
}",0.8521679754182315
76916,"/** 
 * Converts ODA data set parameters to ROM data set parameters. <ul> <li>no the latest design session reponse, update ROM values. Default value is not copied to data set parameter since it has linked report parameter. <li>if the latest design session reponse changed, update ROM values. <li>if the latest design session reponse didn't change and ROM values changed, don't update ROM values. <li>update native type and default value on data set parameter <li>update the data set handle in the reportParameter.dataSet value </ul>
 * @throws Exception
 */
public void testToROMDataSetParamWithReportParam() throws Exception {
  openDesign(""String_Node_Str"");
  OdaDataSetHandle setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  DataSetDesign setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  DataSetParameters params=setDesign.getParameters();
  ParameterDefinition param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition1(param);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  saveAs(""String_Node_Str"");
  compareTextFile(""String_Node_Str"",""String_Node_Str"");
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  params=setDesign.getParameters();
  param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition1(param);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  saveAs(""String_Node_Str"");
  compareTextFile(""String_Node_Str"",""String_Node_Str"");
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  params=setDesign.getParameters();
  param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition2(param);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  saveAs(""String_Node_Str"");
  compareTextFile(""String_Node_Str"",""String_Node_Str"");
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  Iterator paramHandles=setHandle.parametersIterator();
  OdaDataSetParameterHandle paramHandle=(OdaDataSetParameterHandle)paramHandles.next();
  paramHandle.setIsOutput(true);
  paramHandle.setIsInput(false);
  paramHandle.setDefaultValue(""String_Node_Str"");
  String reportParamName=paramHandle.getParamName();
  ScalarParameterHandle reportParam=(ScalarParameterHandle)designHandle.findParameter(reportParamName);
  reportParam.setPromptText(""String_Node_Str"");
  reportParam.setDefaultValue(""String_Node_Str"");
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  saveAs(""String_Node_Str"");
  compareTextFile(""String_Node_Str"",""String_Node_Str"");
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  params=setDesign.getParameters();
  param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition3(param);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  checkUpdateParameterDefinition3(param);
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  params=setDesign.getParameters();
  param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition3(param);
  DataSetHandle dataSetToDelete=designHandle.findDataSet(""String_Node_Str"");
  dataSetToDelete.drop();
  dataSetToDelete=designHandle.findDataSet(""String_Node_Str"");
  assertNull(dataSetToDelete);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  checkUpdateParameterDefinition3(param);
  dataSetToDelete=designHandle.findDataSet(""String_Node_Str"");
  assertNotNull(dataSetToDelete);
}","/** 
 * Converts ODA data set parameters to ROM data set parameters. <ul> <li>no the latest design session reponse, update ROM values. Default value is not copied to data set parameter since it has linked report parameter. <li>if the latest design session reponse changed, update ROM values. <li>if the latest design session reponse didn't change and ROM values changed, don't update ROM values. <li>update native type and default value on data set parameter <li>update the data set handle in the reportParameter.dataSet value </ul>
 * @throws Exception
 */
public void testToROMDataSetParamWithReportParam() throws Exception {
  openDesign(""String_Node_Str"");
  OdaDataSetHandle setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  DataSetDesign setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  DataSetParameters params=setDesign.getParameters();
  ParameterDefinition param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition1(param);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  saveAs(""String_Node_Str"");
  compareTextFile(""String_Node_Str"",""String_Node_Str"");
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  DesignUtil.validateObject(setDesign);
  params=setDesign.getParameters();
  param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition1(param);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  saveAs(""String_Node_Str"");
  compareTextFile(""String_Node_Str"",""String_Node_Str"");
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  params=setDesign.getParameters();
  param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition2(param);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  saveAs(""String_Node_Str"");
  compareTextFile(""String_Node_Str"",""String_Node_Str"");
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  Iterator paramHandles=setHandle.parametersIterator();
  OdaDataSetParameterHandle paramHandle=(OdaDataSetParameterHandle)paramHandles.next();
  paramHandle.setIsOutput(true);
  paramHandle.setIsInput(false);
  paramHandle.setDefaultValue(""String_Node_Str"");
  String reportParamName=paramHandle.getParamName();
  ScalarParameterHandle reportParam=(ScalarParameterHandle)designHandle.findParameter(reportParamName);
  reportParam.setPromptText(""String_Node_Str"");
  reportParam.setDefaultValue(""String_Node_Str"");
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  saveAs(""String_Node_Str"");
  compareTextFile(""String_Node_Str"",""String_Node_Str"");
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  params=setDesign.getParameters();
  param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition3(param);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  checkUpdateParameterDefinition3(param);
  openDesign(""String_Node_Str"");
  setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  params=setDesign.getParameters();
  param=(ParameterDefinition)params.getParameterDefinitions().get(0);
  updateParameterDefinition3(param);
  DataSetHandle dataSetToDelete=designHandle.findDataSet(""String_Node_Str"");
  dataSetToDelete.drop();
  dataSetToDelete=designHandle.findDataSet(""String_Node_Str"");
  assertNull(dataSetToDelete);
  new ModelOdaAdapter().updateDataSetHandle(setDesign,setHandle,false);
  checkUpdateParameterDefinition3(param);
  dataSetToDelete=designHandle.findDataSet(""String_Node_Str"");
  assertNotNull(dataSetToDelete);
}",0.9951714147754708
76917,"public void testPropertiesOfDynamicParameter() throws Exception {
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle=(ScalarParameterHandle)params.get(0);
  SlotHandle dataset=designHandle.getDataSets();
  DataSetHandle ds=(DataSetHandle)dataset.get(0);
  assertEquals(""String_Node_Str"",ds.getName());
  assertEquals(""String_Node_Str"",dataset.get(1).getName());
  assertEquals(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC,handle.getValueType());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATETIME,handle.getDataType());
  handle.setPromptText(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPromptText());
  handle.setDataSetName(""String_Node_Str"");
  handle.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  handle.setControlType(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX);
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX,handle.getControlType());
  handle.setDefaultValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getDefaultValue());
  handle.setCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE);
  assertEquals(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE,handle.getCategory());
  handle.setListlimit(20);
  assertEquals(20,handle.getListlimit());
  assertTrue(handle.isMustMatch());
  assertTrue(handle.isFixedOrder());
  handle=(ScalarParameterHandle)params.get(1);
  assertEquals(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC,handle.getValueType());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_FLOAT,handle.getDataType());
  handle.setDataSetName(""String_Node_Str"");
  handle.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX,handle.getControlType());
  assertFalse(handle.isHidden());
  assertEquals(""String_Node_Str"",handle.getHelpText());
  assertFalse(handle.isConcealValue());
  assertFalse(handle.allowBlank());
  assertTrue(handle.allowNull());
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT,handle.getAlignment());
  assertEquals(""String_Node_Str"",handle.getPattern());
  assertEquals(5,handle.getListlimit());
  try {
    openDesign(""String_Node_Str"");
  }
 catch (  DesignFileException e) {
  }
  super.saveAs(OUTPUT_FILE_NAME);
  assertTrue(compareTextFile(GOLDEN_FILE_NAME,OUTPUT_FILE_NAME));
}","public void testPropertiesOfDynamicParameter() throws Exception {
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle=(ScalarParameterHandle)params.get(0);
  SlotHandle dataset=designHandle.getDataSets();
  DataSetHandle ds=(DataSetHandle)dataset.get(0);
  assertEquals(""String_Node_Str"",ds.getName());
  assertEquals(""String_Node_Str"",dataset.get(1).getName());
  assertEquals(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC,handle.getValueType());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATETIME,handle.getDataType());
  handle.setPromptText(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPromptText());
  handle.setDataSetName(""String_Node_Str"");
  handle.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  handle.setControlType(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX);
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX,handle.getControlType());
  handle.setDefaultValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getDefaultValue());
  handle.setCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE);
  assertEquals(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE,handle.getCategory());
  handle.setListlimit(20);
  assertEquals(20,handle.getListlimit());
  assertFalse(handle.isMustMatch());
  assertTrue(handle.isFixedOrder());
  handle=(ScalarParameterHandle)params.get(1);
  assertEquals(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC,handle.getValueType());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_FLOAT,handle.getDataType());
  handle.setDataSetName(""String_Node_Str"");
  handle.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX,handle.getControlType());
  assertFalse(handle.isHidden());
  assertEquals(""String_Node_Str"",handle.getHelpText());
  assertFalse(handle.isConcealValue());
  assertFalse(handle.allowBlank());
  assertTrue(handle.allowNull());
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT,handle.getAlignment());
  assertEquals(""String_Node_Str"",handle.getPattern());
  assertEquals(5,handle.getListlimit());
  try {
    openDesign(""String_Node_Str"");
  }
 catch (  DesignFileException e) {
  }
  super.saveAs(OUTPUT_FILE_NAME);
  assertTrue(compareTextFile(GOLDEN_FILE_NAME,OUTPUT_FILE_NAME));
}",0.9985297206469228
76918,"/** 
 * Returns if the property need to be hiden under some cases.
 * @param propName the property name to check
 * @return true if the property need to be hiden under some cases, falseotherwise.
 */
private boolean needHide(String propName){
  if (!(IReportItemModel.BOOKMARK_PROP.equals(propName) || IReportItemModel.TOC_PROP.equals(propName) || IStyleModel.PAGE_BREAK_AFTER_PROP.equals(propName)|| IStyleModel.PAGE_BREAK_BEFORE_PROP.equals(propName)|| ICellModel.DROP_PROP.equals(propName)))   return false;
  for (int i=0; i < elements.size(); i++) {
    DesignElementHandle current=((DesignElementHandle)elements.get(i));
    DesignElementHandle container=current.getContainer();
    if (ICellModel.DROP_PROP.equals(propName)) {
      if (current instanceof CellHandle) {
        if (container == null) {
          continue;
        }
        if (!(container.getContainer() instanceof GroupHandle))         return true;
      }
    }
 else {
      while (container != null) {
        if (container instanceof MasterPageHandle)         return true;
        container=container.getContainer();
      }
    }
  }
  return false;
}","/** 
 * Returns if the property need to be hiden under some cases.
 * @param propName the property name to check
 * @return true if the property need to be hiden under some cases, falseotherwise.
 */
private boolean needHide(String propName){
  if (!(IReportItemModel.BOOKMARK_PROP.equals(propName) || IReportItemModel.TOC_PROP.equals(propName) || IStyleModel.PAGE_BREAK_AFTER_PROP.equals(propName)|| IStyleModel.PAGE_BREAK_BEFORE_PROP.equals(propName)|| IStyleModel.PAGE_BREAK_INSIDE_PROP.equals(propName)|| ICellModel.DROP_PROP.equals(propName)))   return false;
  for (int i=0; i < elements.size(); i++) {
    DesignElementHandle current=((DesignElementHandle)elements.get(i));
    DesignElementHandle container=current.getContainer();
    if (ICellModel.DROP_PROP.equals(propName)) {
      if (current instanceof CellHandle) {
        if (container == null) {
          continue;
        }
        if (!(container.getContainer() instanceof GroupHandle))         return true;
      }
    }
 else {
      while (container != null) {
        if (container instanceof MasterPageHandle)         return true;
        container=container.getContainer();
      }
    }
  }
  return false;
}",0.9767040552200172
76919,"/** 
 * Sets the page break inside property for block-level elements. The input value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @param value the new page break inside property
 * @throws SemanticException if the value is not one of the above.
 * @deprecated
 */
public void setPageBreakInside(String value) throws SemanticException {
  setStringProperty(Style.PAGE_BREAK_INSIDE_PROP,value);
}","/** 
 * Sets the page break inside property for block-level elements. The input value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @param value the new page break inside property
 * @throws SemanticException if the value is not one of the above.
 */
public void setPageBreakInside(String value) throws SemanticException {
  setStringProperty(Style.PAGE_BREAK_INSIDE_PROP,value);
}",0.9862258953168044
76920,"/** 
 * Returns the page break inside property for block-level elements. The return value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @return the page break inside property
 * @deprecated
 */
public String getPageBreakInside(){
  return getStringProperty(Style.PAGE_BREAK_INSIDE_PROP);
}","/** 
 * Returns the page break inside property for block-level elements. The return value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @return the page break inside property
 */
public String getPageBreakInside(){
  return getStringProperty(Style.PAGE_BREAK_INSIDE_PROP);
}",0.9828571428571428
76921,"public void visitGroup(GroupElement obj){
  writer.attribute(DesignSchemaConstants.ID_ATTRIB,new Long(obj.getID()).toString());
  attribute(obj,DesignSchemaConstants.VIEW_ACTION_ATTRIB,DesignElement.VIEW_ACTION_PROP);
  super.visitGroup(obj);
  property(obj,GroupElement.GROUP_NAME_PROP);
  property(obj,GroupElement.INTERVAL_BASE_PROP);
  property(obj,GroupElement.INTERVAL_PROP);
  property(obj,GroupElement.INTERVAL_RANGE_PROP);
  property(obj,GroupElement.SORT_DIRECTION_PROP);
  property(obj,GroupElement.SORT_TYPE_PROP);
  property(obj,GroupElement.KEY_EXPR_PROP);
  property(obj,GroupElement.TOC_PROP);
  property(obj,GroupElement.EVENT_HANDLER_CLASS_PROP);
  property(obj,GroupElement.ON_PREPARE_METHOD);
  property(obj,GroupElement.ON_PAGE_BREAK_METHOD);
  property(obj,GroupElement.REPEAT_HEADER_PROP);
  property(obj,GroupElement.HIDE_DETAIL_PROP);
  property(obj,Style.PAGE_BREAK_AFTER_PROP);
  property(obj,Style.PAGE_BREAK_BEFORE_PROP);
  writeUserPropertyDefns(obj);
  writeUserPropertyValues(obj);
  writeStructureList(obj,GroupElement.SORT_PROP);
  writeStructureList(obj,GroupElement.FILTER_PROP);
}","public void visitGroup(GroupElement obj){
  writer.attribute(DesignSchemaConstants.ID_ATTRIB,new Long(obj.getID()).toString());
  attribute(obj,DesignSchemaConstants.VIEW_ACTION_ATTRIB,DesignElement.VIEW_ACTION_PROP);
  super.visitGroup(obj);
  property(obj,GroupElement.GROUP_NAME_PROP);
  property(obj,GroupElement.INTERVAL_BASE_PROP);
  property(obj,GroupElement.INTERVAL_PROP);
  property(obj,GroupElement.INTERVAL_RANGE_PROP);
  property(obj,GroupElement.SORT_DIRECTION_PROP);
  property(obj,GroupElement.SORT_TYPE_PROP);
  property(obj,GroupElement.KEY_EXPR_PROP);
  property(obj,GroupElement.TOC_PROP);
  property(obj,GroupElement.EVENT_HANDLER_CLASS_PROP);
  property(obj,GroupElement.ON_PREPARE_METHOD);
  property(obj,GroupElement.ON_PAGE_BREAK_METHOD);
  property(obj,GroupElement.REPEAT_HEADER_PROP);
  property(obj,GroupElement.HIDE_DETAIL_PROP);
  property(obj,Style.PAGE_BREAK_AFTER_PROP);
  property(obj,Style.PAGE_BREAK_BEFORE_PROP);
  property(obj,Style.PAGE_BREAK_INSIDE_PROP);
  writeUserPropertyDefns(obj);
  writeUserPropertyValues(obj);
  writeStructureList(obj,GroupElement.SORT_PROP);
  writeStructureList(obj,GroupElement.FILTER_PROP);
}",0.9798245614035088
76922,"private void placeComponents(){
  GridLayout glContent=new GridLayout(4,false);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  grpAccLine=new Group(this,SWT.NONE);
  GridData gdGRPAccLine=new GridData(GridData.FILL_BOTH);
  gdGRPAccLine.horizontalSpan=1;
  GridLayout glGRPAccline=new GridLayout(2,false);
  grpAccLine.setLayout(glGRPAccline);
  grpAccLine.setLayoutData(gdGRPAccLine);
  grpAccLine.setText(Messages.getString(""String_Node_Str""));
  liacAccLine=new LineAttributesComposite(grpAccLine,SWT.NONE,context,((BubbleSeries)series).getAccLineAttributes(),true,true,true);
  GridData gdLIACAccLine=new GridData(GridData.FILL_BOTH);
  gdLIACAccLine.horizontalSpan=2;
  liacAccLine.setLayoutData(gdLIACAccLine);
  liacAccLine.addListener(this);
  lblOrientation=new Label(grpAccLine,SWT.NONE);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Combo(grpAccLine,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.addSelectionListener(this);
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
  gdGRPLine.horizontalSpan=1;
  grpLine.setLayout(new FillLayout());
  grpLine.setLayoutData(gdGRPLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  liacLine=new LineAttributesComposite(grpLine,SWT.NONE,context,((BubbleSeries)series).getLineAttributes(),true,true,true);
  liacLine.addListener(this);
  Composite cmp=new Composite(this,SWT.NONE);
  cmp.setLayout(new GridLayout());
  cmp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite cmpShadow=new Composite(cmp,SWT.NONE);
  cmpShadow.setLayout(new GridLayout(2,false));
  cmpShadow.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lblShadow=new Label(cmpShadow,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpShadow,SWT.NONE,context,((BubbleSeries)series).getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCShadow.widthHint=100;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((BubbleSeries)series).isPaletteLineColor());
    GridData gdBTNPalette=new GridData(GridData.FILL_HORIZONTAL);
    gdBTNPalette.horizontalSpan=2;
    btnPalette.setLayoutData(gdBTNPalette);
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((BubbleSeries)series).isCurve());
    GridData gdBTNCurve=new GridData(GridData.FILL_HORIZONTAL);
    gdBTNCurve.horizontalSpan=2;
    btnPalette.setLayoutData(gdBTNCurve);
    btnCurve.addSelectionListener(this);
  }
  enableLineSettings(((BubbleSeries)series).getLineAttributes().isVisible());
  enableAccLineSettings(((BubbleSeries)series).getAccLineAttributes().isVisible());
  populateLists();
}","private void placeComponents(){
  GridLayout glContent=new GridLayout(4,false);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  grpAccLine=new Group(this,SWT.NONE);
  GridData gdGRPAccLine=new GridData(GridData.FILL_BOTH);
  gdGRPAccLine.horizontalSpan=1;
  GridLayout glGRPAccline=new GridLayout(2,false);
  grpAccLine.setLayout(glGRPAccline);
  grpAccLine.setLayoutData(gdGRPAccLine);
  grpAccLine.setText(Messages.getString(""String_Node_Str""));
  liacAccLine=new LineAttributesComposite(grpAccLine,SWT.NONE,context,((BubbleSeries)series).getAccLineAttributes(),true,true,true);
  GridData gdLIACAccLine=new GridData(GridData.FILL_BOTH);
  gdLIACAccLine.horizontalSpan=2;
  liacAccLine.setLayoutData(gdLIACAccLine);
  liacAccLine.addListener(this);
  lblOrientation=new Label(grpAccLine,SWT.NONE);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Combo(grpAccLine,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.addSelectionListener(this);
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
  gdGRPLine.horizontalSpan=1;
  grpLine.setLayout(new FillLayout());
  grpLine.setLayoutData(gdGRPLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  liacLine=new LineAttributesComposite(grpLine,SWT.NONE,context,((BubbleSeries)series).getLineAttributes(),true,true,true);
  liacLine.addListener(this);
  Composite cmp=new Composite(this,SWT.NONE);
  cmp.setLayout(new GridLayout());
  cmp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite cmpShadow=new Composite(cmp,SWT.NONE);
  cmpShadow.setLayout(new GridLayout(2,false));
  cmpShadow.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  lblShadow=new Label(cmpShadow,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpShadow,SWT.NONE,context,((BubbleSeries)series).getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCShadow.widthHint=100;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((BubbleSeries)series).isPaletteLineColor());
    GridData gdBTNPalette=new GridData(GridData.FILL_HORIZONTAL);
    gdBTNPalette.horizontalSpan=2;
    btnPalette.setLayoutData(gdBTNPalette);
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((BubbleSeries)series).isCurve());
    GridData gdBTNCurve=new GridData(GridData.FILL_HORIZONTAL);
    gdBTNCurve.horizontalSpan=2;
    btnPalette.setLayoutData(gdBTNCurve);
    btnCurve.addSelectionListener(this);
  }
  enableLineSettings(((BubbleSeries)series).getLineAttributes().isVisible());
  enableAccLineSettings(((BubbleSeries)series).getAccLineAttributes().isVisible());
  populateLists();
}",0.999067454149829
76923,"private void enableLineSettings(boolean isEnabled){
  if (fccShadow != null) {
    fccShadow.setEnabled(isEnabled);
  }
  if (btnPalette != null) {
    btnPalette.setEnabled(isEnabled);
  }
  btnCurve.setEnabled(isEnabled);
}","private void enableLineSettings(boolean isEnabled){
  if (lblShadow != null) {
    lblShadow.setEnabled(isEnabled);
  }
  if (fccShadow != null) {
    fccShadow.setEnabled(isEnabled);
  }
  if (btnPalette != null) {
    btnPalette.setEnabled(isEnabled);
  }
  btnCurve.setEnabled(isEnabled);
}",0.6525096525096525
76924,"/** 
 * layout the content and its children. It can be called in three status: <ol>  <li> start, the first time it is called. In this status,  it first check if it need page-break-before, <li> inprogress, the second or more time it is called. In this status, it tries to layout the content and its children to the current page. <li> end, the last time it is called. In this status, it means all the content has been layout, it is the time to handle the page-break-after. </ol>
 */
public boolean layout(){
  boolean hasNextPage=false;
switch (status) {
case STATUS_START:
    if (handleVisibility()) {
      status=STATUS_END;
      return false;
    }
  if (isPageBreakBefore() || checkAvailableSpace()) {
    status=STATUS_INPROGRESS;
    return true;
  }
status=STATUS_INPROGRESS;
case STATUS_INPROGRESS:
hasNextPage=layoutChildren();
if (hasNextPage) {
return true;
}
closeExecutor();
status=STATUS_END;
if (isPageBreakAfter()) {
return true;
}
case STATUS_END:
return false;
}
return hasNextPage;
}","/** 
 * layout the content and its children. It can be called in three status: <ol>  <li> start, the first time it is called. In this status,  it first check if it need page-break-before, <li> inprogress, the second or more time it is called. In this status, it tries to layout the content and its children to the current page. <li> end, the last time it is called. In this status, it means all the content has been layout, it is the time to handle the page-break-after. </ol>
 */
public boolean layout(){
  boolean hasNextPage=false;
switch (status) {
case STATUS_START:
    if (handleVisibility()) {
      status=STATUS_END;
      return false;
    }
  if (isPageBreakBefore() || checkAvailableSpace()) {
    status=STATUS_INPROGRESS;
    return true;
  }
status=STATUS_INPROGRESS;
case STATUS_INPROGRESS:
hasNextPage=layoutChildren();
if (hasNextPage) {
if (!hasNextChild()) {
closeExecutor();
status=STATUS_END;
}
return true;
}
closeExecutor();
status=STATUS_END;
if (isPageBreakAfter()) {
return true;
}
case STATUS_END:
return false;
}
return hasNextPage;
}",0.9569424286405418
76925,"public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  if (this.cachedResultMetaData != null)   return this.cachedResultMetaData;
  java.sql.ResultSetMetaData resultmd=null;
  try {
    resultmd=preStat.getMetaData();
  }
 catch (  Throwable e) {
    resultmd=null;
  }
  if (resultmd != null) {
    try {
      resultmd.getColumnCount();
      if (resultmd.getColumnCount() == 0) {
        resultmd=null;
      }
    }
 catch (    SQLException e) {
      resultmd=null;
    }
    if (resultmd != null) {
      cachedResultMetaData=new ResultSetMetaData(resultmd);
    }
  }
  if (cachedResultMetaData == null) {
    this.cachedResultSet=executeQuery();
    if (this.cachedResultSet != null)     cachedResultMetaData=this.cachedResultSet.getMetaData();
  }
  return cachedResultMetaData;
}","public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  if (this.cachedResultMetaData != null)   return this.cachedResultMetaData;
  java.sql.ResultSetMetaData resultmd=null;
  try {
    resultmd=preStat.getMetaData();
  }
 catch (  Throwable e) {
    resultmd=null;
  }
  if (resultmd != null) {
    try {
      resultmd.getColumnCount();
      if (resultmd.getColumnCount() <= 0) {
        resultmd=null;
      }
    }
 catch (    SQLException e) {
      resultmd=null;
    }
    if (resultmd != null) {
      cachedResultMetaData=new ResultSetMetaData(resultmd);
    }
  }
  if (cachedResultMetaData == null) {
    this.cachedResultSet=executeQuery();
    if (this.cachedResultSet != null)     cachedResultMetaData=this.cachedResultSet.getMetaData();
  }
  return cachedResultMetaData;
}",0.9989258861439312
76926,"public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  if (this.cachedResultMetaData != null)   return this.cachedResultMetaData;
  java.sql.ResultSetMetaData resultmd=null;
  try {
    resultmd=preStat.getMetaData();
  }
 catch (  Throwable e) {
    resultmd=null;
  }
  if (resultmd != null) {
    try {
      resultmd.getColumnCount();
    }
 catch (    SQLException e) {
      resultmd=null;
    }
    if (resultmd != null) {
      cachedResultMetaData=new ResultSetMetaData(resultmd);
    }
  }
  if (cachedResultMetaData == null) {
    this.cachedResultSet=executeQuery();
    if (this.cachedResultSet != null)     cachedResultMetaData=this.cachedResultSet.getMetaData();
  }
  return cachedResultMetaData;
}","public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  if (this.cachedResultMetaData != null)   return this.cachedResultMetaData;
  java.sql.ResultSetMetaData resultmd=null;
  try {
    resultmd=preStat.getMetaData();
  }
 catch (  Throwable e) {
    resultmd=null;
  }
  if (resultmd != null) {
    try {
      resultmd.getColumnCount();
      if (resultmd.getColumnCount() == 0) {
        resultmd=null;
      }
    }
 catch (    SQLException e) {
      resultmd=null;
    }
    if (resultmd != null) {
      cachedResultMetaData=new ResultSetMetaData(resultmd);
    }
  }
  if (cachedResultMetaData == null) {
    this.cachedResultSet=executeQuery();
    if (this.cachedResultSet != null)     cachedResultMetaData=this.cachedResultSet.getMetaData();
  }
  return cachedResultMetaData;
}",0.9580302182428652
76927,"public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterDefns();
  addCustomFields(odaStatement);
  addColumnHints(odaStatement);
  odaStatement.setColumnsProjection(this.projectedFields);
  try {
    resultMetadata=odaStatement.getMetaData();
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterDefns();
  addCustomFields(odaStatement);
  addColumnHints(odaStatement);
  odaStatement.setColumnsProjection(this.projectedFields);
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    resultMetadata=odaStatement.getMetaData();
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.9518518518518518
76928,"protected org.eclipse.birt.data.engine.odi.IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  if (doesLoadFromCache() == true) {
    DataSourceQuery dsQuery=new DataSourceQuery(dataEngine.getSession());
    JointDataSetQuery jointQuery=(JointDataSetQuery)odiQuery;
    dsQuery.setExprProcessor(jointQuery.getExprProcessor());
    List fetchEvents=jointQuery.getFetchEvents();
    if (fetchEvents != null)     for (int i=0; i < fetchEvents.size(); i++)     dsQuery.addOnFetchEvent((IResultObjectEvent)fetchEvents.get(i));
    dsQuery.setMaxRows(jointQuery.getMaxRows());
    dsQuery.setOrdering(toList(jointQuery.getOrdering()));
    dsQuery.setGrouping(toList(jointQuery.getGrouping()));
    return dsQuery.execute(eventHandler);
  }
  initialize(dataEngine,appContext);
  JointResultMetadata jrm=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
  resultClass=jrm.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),jrm,matcher,joinType,dataEngine.getSession());
  if (doesSaveToCache() == false)   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,populator,eventHandler,dataEngine.getSession());
 else   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,new DataSetResultCache(populator,resultClass,dataEngine.getSession()),eventHandler,dataEngine.getSession());
}","protected org.eclipse.birt.data.engine.odi.IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  if (doesLoadFromCache() == true) {
    DataSourceQuery dsQuery=new DataSourceQuery(dataEngine.getSession());
    JointDataSetQuery jointQuery=(JointDataSetQuery)odiQuery;
    dsQuery.setExprProcessor(jointQuery.getExprProcessor());
    List fetchEvents=jointQuery.getFetchEvents();
    if (fetchEvents != null)     for (int i=0; i < fetchEvents.size(); i++)     dsQuery.addOnFetchEvent((IResultObjectEvent)fetchEvents.get(i));
    dsQuery.setMaxRows(jointQuery.getMaxRows());
    dsQuery.setOrdering(toList(jointQuery.getOrdering()));
    dsQuery.setGrouping(toList(jointQuery.getGrouping()));
    return dsQuery.execute(eventHandler);
  }
  initialize(dataEngine,appContext);
  JointResultMetadata jrm=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
  resultClass=jrm.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),jrm,matcher,joinType,dataEngine.getSession(),dataSetDesign.getRowFetchLimit());
  if (doesSaveToCache() == false)   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,populator,eventHandler,dataEngine.getSession());
 else   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,new DataSetResultCache(populator,resultClass,dataEngine.getSession()),eventHandler,dataEngine.getSession());
}",0.9886167644015178
76929,"/** 
 * Executes the fetch script; returns the result 
 */
public boolean fetch() throws DataException {
  if (scriptEventHandler != null) {
    try {
      return scriptEventHandler.handleFetch(this,this.getDataRow());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
  return false;
}","/** 
 * Executes the fetch script; returns the result 
 */
public boolean fetch() throws DataException {
  if (this.getDesign().getRowFetchLimit() <= 0 || this.rowIndex < this.getDesign().getRowFetchLimit()) {
    if (scriptEventHandler != null) {
      try {
        this.rowIndex++;
        return scriptEventHandler.handleFetch(this,this.getDataRow());
      }
 catch (      BirtException e) {
        throw DataException.wrap(e);
      }
    }
  }
  return false;
}",0.8096446700507615
76930,"/** 
 * @return
 */
public static IQuery newOdiQuery(){
  return new IQuery(){
    public void setOrdering(    List sortSpecs) throws DataException {
    }
    public void setGrouping(    List groupSpecs) throws DataException {
    }
    public void setMaxRows(    int maxRows){
    }
    public void addOnFetchEvent(    IResultObjectEvent event){
    }
    public void close(){
    }
    public void setExprProcessor(    IExpressionProcessor exprProcessor){
    }
    public void setDistinctValueFlag(    boolean distinctValueFlag){
    }
  }
;
}","/** 
 * @return
 */
public static IQuery newOdiQuery(){
  return new IQuery(){
    public void setOrdering(    List sortSpecs) throws DataException {
    }
    public void setGrouping(    List groupSpecs) throws DataException {
    }
    public void setMaxRows(    int maxRows){
    }
    public void addOnFetchEvent(    IResultObjectEvent event){
    }
    public void close(){
    }
    public void setExprProcessor(    IExpressionProcessor exprProcessor){
    }
    public void setDistinctValueFlag(    boolean distinctValueFlag){
    }
    public void setRowFetchLimit(    int limit){
    }
  }
;
}",0.9521322889469104
76931,"public IResultObject next() throws DataException {
  if (!beInitialized) {
    initialize();
    beInitialized=true;
  }
  if (curComparedResult == 0) {
    return equalNext();
  }
  if (curComparedResult < 0) {
    return lessNext();
  }
  if (curComparedResult > 0) {
    return greaterNext();
  }
  return null;
}","public IResultObject next() throws DataException {
  if (this.rowFetchLimit <= 0 || this.rowCount < this.rowFetchLimit) {
    IResultObject result=doNext();
    if (result != null)     this.rowCount++;
    return result;
  }
  return null;
}",0.2441651705565529
76932,"/** 
 * Constructor.
 * @param left
 * @param right
 * @param meta
 * @param jcm
 * @param joinType
 * @param seeker
 * @throws DataException
 */
public BaseJointDataSetPopulator(IResultIterator left,IResultIterator right,JointResultMetadata meta,IJoinConditionMatcher jcm,int joinType,IMatchResultObjectSeeker seeker,DataEngineSession session) throws DataException {
  this.meta=meta;
  this.joinType=joinType;
  this.jcm=jcm;
  this.session=session;
  if (isPrimaryLeft()) {
    this.primaryIterator=left;
    this.secondaryIterator=right;
  }
 else {
    this.primaryIterator=right;
    this.secondaryIterator=left;
  }
  beInitialized=false;
}","/** 
 * Constructor.
 * @param left
 * @param right
 * @param meta
 * @param jcm
 * @param joinType
 * @param seeker
 * @throws DataException
 */
public BaseJointDataSetPopulator(IResultIterator left,IResultIterator right,JointResultMetadata meta,IJoinConditionMatcher jcm,int joinType,IMatchResultObjectSeeker seeker,DataEngineSession session,int rowFetchLimit) throws DataException {
  this.meta=meta;
  this.joinType=joinType;
  this.jcm=jcm;
  this.session=session;
  if (isPrimaryLeft()) {
    this.primaryIterator=left;
    this.secondaryIterator=right;
  }
 else {
    this.primaryIterator=right;
    this.secondaryIterator=left;
  }
  beInitialized=false;
  this.rowFetchLimit=rowFetchLimit;
  this.rowCount=0;
}",0.94659839063643
76933,"/** 
 * Return the IResultObject instance of a data set when curComparedResult is less than 0;
 * @return
 * @throws DataException
 */
private IResultObject lessNext() throws DataException {
  if (curPrimaryMatchValues == null) {
    return null;
  }
  if (joinType == IJointDataSetDesign.INNER_JOIN && curSecondaryMatchValues == null) {
    return null;
  }
  IResultObject resultObject=null;
  if (joinType != IJointDataSetDesign.INNER_JOIN)   resultObject=createResultObject(curPrimaryResultObject,null);
  fetchPrimaryObject();
  curComparedResult=getCompartorResult();
  if (joinType != IJointDataSetDesign.INNER_JOIN) {
    return resultObject;
  }
 else {
    return next();
  }
}","/** 
 * Return the IResultObject instance of a data set when curComparedResult is less than 0;
 * @return
 * @throws DataException
 */
private IResultObject lessNext() throws DataException {
  if (curPrimaryMatchValues == null) {
    return null;
  }
  if (joinType == IJointDataSetDesign.INNER_JOIN && curSecondaryMatchValues == null) {
    return null;
  }
  IResultObject resultObject=null;
  if (joinType != IJointDataSetDesign.INNER_JOIN)   resultObject=createResultObject(curPrimaryResultObject,null);
  fetchPrimaryObject();
  curComparedResult=getCompartorResult();
  if (joinType != IJointDataSetDesign.INNER_JOIN) {
    return resultObject;
  }
 else {
    return doNext();
  }
}",0.997093023255814
76934,"/** 
 * Return the IResultObject instance of a data set when curComparedResult is greater than 0;
 * @return
 * @throws DataException
 */
private IResultObject greaterNext() throws DataException {
  if (curPrimaryMatchValues == null && joinType != IJointDataSetDesign.FULL_OUTER_JOIN) {
    return null;
  }
  if (joinType == IJointDataSetDesign.FULL_OUTER_JOIN && curSecondaryResultObjects.next() && !beSecondaryUsed) {
    return createResultObject(null,curSecondaryResultObjects.getCurrentResult());
  }
  fetchSecondaryObjects();
  curComparedResult=getCompartorResult();
  return next();
}","/** 
 * Return the IResultObject instance of a data set when curComparedResult is greater than 0;
 * @return
 * @throws DataException
 */
private IResultObject greaterNext() throws DataException {
  if (curPrimaryMatchValues == null && joinType != IJointDataSetDesign.FULL_OUTER_JOIN) {
    return null;
  }
  if (joinType == IJointDataSetDesign.FULL_OUTER_JOIN && curSecondaryResultObjects.next() && !beSecondaryUsed) {
    return createResultObject(null,curSecondaryResultObjects.getCurrentResult());
  }
  fetchSecondaryObjects();
  curComparedResult=getCompartorResult();
  return doNext();
}",0.9966386554621848
76935,"/** 
 * Return the IResultObject instance of a data set when curComparedResult is equal to 0;
 * @return
 * @throws DataException
 */
private IResultObject equalNext() throws DataException {
  if (curSecondaryResultObjects.next()) {
    beSecondaryUsed=true;
    return createResultObject(curPrimaryResultObject,(IResultObject)(curSecondaryResultObjects.getCurrentResult()));
  }
 else {
    fetchPrimaryObject();
    curComparedResult=getCompartorResult();
    return next();
  }
}","/** 
 * Return the IResultObject instance of a data set when curComparedResult is equal to 0;
 * @return
 * @throws DataException
 */
private IResultObject equalNext() throws DataException {
  if (curSecondaryResultObjects.next()) {
    beSecondaryUsed=true;
    return createResultObject(curPrimaryResultObject,(IResultObject)(curSecondaryResultObjects.getCurrentResult()));
  }
 else {
    fetchPrimaryObject();
    curComparedResult=getCompartorResult();
    return doNext();
  }
}",0.9958592132505176
76936,"/** 
 * Return instance of IJointDataSetPopulator which is used for oridinary left, right, and inner join.
 * @param left
 * @param right
 * @param meta
 * @param jcm
 * @param joinType
 * @return
 * @throws DataException
 */
public static IDataSetPopulator getBinaryTreeDataSetPopulator(IResultIterator left,IResultIterator right,JointResultMetadata meta,IJoinConditionMatcher jcm,int joinType,DataEngineSession session) throws DataException {
  return new BaseJointDataSetPopulator(left,right,meta,jcm,joinType,null,session);
}","/** 
 * Return instance of IJointDataSetPopulator which is used for oridinary left, right, and inner join.
 * @param left
 * @param right
 * @param meta
 * @param jcm
 * @param joinType
 * @return
 * @throws DataException
 */
public static IDataSetPopulator getBinaryTreeDataSetPopulator(IResultIterator left,IResultIterator right,JointResultMetadata meta,IJoinConditionMatcher jcm,int joinType,DataEngineSession session,int rowFetchLimit) throws DataException {
  return new BaseJointDataSetPopulator(left,right,meta,jcm,joinType,null,session,rowFetchLimit);
}",0.9706422018348624
76937,"/** 
 * Return instance of IJointDataSetPopulator which is used for Cartesian join.
 * @param left
 * @param right
 * @param meta
 * @param jcm
 * @param joinType
 * @return
 * @throws DataException
 */
public static IDataSetPopulator getCartesianJointDataSetPopulator(IResultIterator left,IResultIterator right,JointResultMetadata meta,IJoinConditionMatcher jcm,int joinType,DataEngineSession session) throws DataException {
  IMatchResultObjectSeeker seeker=new CartesianResultObjectSeeker(jcm);
  return new BaseJointDataSetPopulator(left,right,meta,jcm,joinType,seeker,session);
}","/** 
 * Return instance of IJointDataSetPopulator which is used for Cartesian join.
 * @param left
 * @param right
 * @param meta
 * @param jcm
 * @param joinType
 * @return
 * @throws DataException
 */
public static IDataSetPopulator getCartesianJointDataSetPopulator(IResultIterator left,IResultIterator right,JointResultMetadata meta,IJoinConditionMatcher jcm,int joinType,DataEngineSession session,int rowFetchLimit) throws DataException {
  IMatchResultObjectSeeker seeker=new CartesianResultObjectSeeker(jcm);
  return new BaseJointDataSetPopulator(left,right,meta,jcm,joinType,seeker,session,rowFetchLimit);
}",0.9733333333333334
76938,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str""))       resetInterval();
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Text(intervalRangeArea,SWT.SINGLE | SWT.BORDER);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent event){
      if (event.text.length() <= 0) {
        return;
      }
      int beginIndex=Math.min(event.start,event.end);
      int endIndex=Math.max(event.start,event.end);
      String inputtedText=intervalRange.getText();
      String newString=inputtedText.substring(0,beginIndex);
      newString+=event.text;
      newString+=inputtedText.substring(endIndex);
      event.doit=false;
      try {
        double value=Double.parseDouble(newString);
        if (value >= 0) {
          event.doit=true;
        }
      }
 catch (      NumberFormatException e) {
        return;
      }
    }
  }
);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str"")) {
        resetInterval();
        tocEditor.setText(getKeyExpression());
      }
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
        tocEditor.setText(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Text(intervalRangeArea,SWT.SINGLE | SWT.BORDER);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent event){
      if (event.text.length() <= 0) {
        return;
      }
      int beginIndex=Math.min(event.start,event.end);
      int endIndex=Math.max(event.start,event.end);
      String inputtedText=intervalRange.getText();
      String newString=inputtedText.substring(0,beginIndex);
      newString+=event.text;
      newString+=inputtedText.substring(endIndex);
      event.doit=false;
      try {
        double value=Double.parseDouble(newString);
        if (value >= 0) {
          event.doit=true;
        }
      }
 catch (      NumberFormatException e) {
        return;
      }
    }
  }
);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}",0.987026574597196
76939,"/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getText());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != null && !newToc.equals(inputGroup.getTocExpression())) {
      inputGroup.setTocExpression(newToc);
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getText());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.9536112742219612
76940,"public void modifyText(ModifyEvent e){
  if (!keyChooser.getText().trim().equals(""String_Node_Str""))   resetInterval();
}","public void modifyText(ModifyEvent e){
  if (!keyChooser.getText().trim().equals(""String_Node_Str"")) {
    resetInterval();
    tocEditor.setText(getKeyExpression());
  }
}",0.825938566552901
76941,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      if (!reportDocumentInstance.isComplete() && ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT))       this.isDocumentProcessing=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=null;
          URL url=null;
          try {
            String reportPath=this.reportDesignName;
            if (!reportPath.startsWith(""String_Node_Str""))             reportPath=""String_Node_Str"" + reportPath;
            url=request.getSession().getServletContext().getResource(reportPath);
            if (url != null)             is=url.openStream();
            if (is != null)             reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,this.getModuleOptions(request));
          }
 catch (          Exception e) {
          }
        }
        if (reportRunnable == null) {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || this.documentInUrl) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (!reportDocumentInstance.isComplete() && ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT))       this.isDocumentProcessing=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=null;
          URL url=null;
          try {
            String reportPath=this.reportDesignName;
            if (!reportPath.startsWith(""String_Node_Str""))             reportPath=""String_Node_Str"" + reportPath;
            url=request.getSession().getServletContext().getResource(reportPath);
            if (url != null)             is=url.openStream();
            if (is != null)             reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,this.getModuleOptions(request));
          }
 catch (          Exception e) {
          }
        }
        if (reportRunnable == null) {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9572856710087853
76942,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    return ""String_Node_Str"" + bookmark + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    return ""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}",0.9945513984743916
76943,"/** 
 * get parsed parameters as string.
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsString(Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    String paramValue=getParamValueAsString(request,parameter);
    if (paramName != null)     params.put(paramName,paramValue);
  }
  return params;
}","/** 
 * get parsed parameters as string.
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsString(Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValue=getParamValueAsString(request,parameter);
    if (paramName != null)     params.put(paramName,paramValue);
  }
  return params;
}",0.8796821793416572
76944,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          String paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName(paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam);
            if (paramName != null) {
              if (this.displayTexts == null)               this.displayTexts=new HashMap();
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=parameter.getDataType();
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType)) {
              continue;
            }
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType) && !DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
                String pattern=parameter.getPattern();
                Object paramValueObj=ParameterValidationUtil.validate(dataType,pattern,paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(dataType,pattern,paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          Object paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName((String)paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam);
            if (paramName != null) {
              if (this.displayTexts == null)               this.displayTexts=new HashMap();
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=parameter.getDataType();
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType)) {
              continue;
            }
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType)) {
                String pattern=parameter.getPattern();
                Object paramValueObj=ParameterValidationUtil.validate(dataType,pattern,(String)paramValue,ULocale.US);
                if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType))                 paramValue=paramValueObj;
 else                 paramValue=ParameterValidationUtil.getDisplayValue(dataType,pattern,paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}",0.9294903110242632
76945,"/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      if (paramValueObj instanceof Date) {
        params.put(paramName,paramValueObj);
        continue;
      }
      try {
        String format=ParameterAccessor.getFormat(request,paramName);
        if (format == null || format.length() <= 0) {
          format=parameter.getPattern();
        }
        paramValueObj=DataUtil.validate(parameter.getDataType(),format,paramValueObj.toString(),locale);
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}","/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      if (paramValueObj instanceof Date) {
        params.put(paramName,paramValueObj);
        continue;
      }
      try {
        String format=ParameterAccessor.getFormat(request,paramName);
        if (format == null || format.length() <= 0) {
          format=parameter.getPattern();
        }
        paramValueObj=DataUtil.validate(parameter.getDataType(),format,paramValueObj.toString(),locale);
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}",0.893848009650181
76946,"/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
    return paramValue;
  }
  Object paramValueObj=null;
  if (this.isDesigner && (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}","/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected Object getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
    return paramValue;
  }
  Object paramValueObj=null;
  if (this.isDesigner && (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
  }
  if (paramValueObj == null)   return paramValue;
  if (paramValueObj instanceof Date)   return paramValueObj;
 else   return paramValueObj.toString();
}",0.8971377459749553
76947,"public boolean canLeaveThePage(){
  if (isDirty()) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.INFORMATION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    int ret=prefDialog.open();
switch (ret) {
case 0:
      doSave(null);
    break;
case 1:
  if (getEditorInput() != null) {
    this.setInput(getEditorInput());
  }
break;
case 2:
return false;
}
}
int errorLine=getErrorLIine();
if (errorLine > -1) {
MessageDialog.openError(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
setFocus();
setHighlightLine(errorLine);
return false;
}
return true;
}","public boolean canLeaveThePage(){
  if (isDirty()) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.INFORMATION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    int ret=prefDialog.open();
switch (ret) {
case 0:
      doSave(null);
    break;
case 1:
  if (getEditorInput() != null) {
    this.setInput(getEditorInput());
  }
break;
case 2:
if (getEditorInput() != null) {
this.setInput(getEditorInput());
}
return false;
}
}
int errorLine=getErrorLIine();
if (errorLine > -1) {
MessageDialog.openError(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
setFocus();
setHighlightLine(errorLine);
return false;
}
return true;
}",0.9611594202898552
76948,"/** 
 * Build the border string. <li>ignore all the border styles is style is null <li>CSS default border-color is the font-color, while BIRT is black <li>border-color is not inheritable.
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The proerty name.
 * @param width The border-width value.
 * @param style The border-style value.
 * @param color The border-color value
 */
private static void buildBorder(StringBuffer content,String name,String width,String style,String color){
  if (style == null || style.length() <= 0) {
    return;
  }
  addPropName(content,name);
  addPropValue(content,width);
  addPropValue(content,style);
  addPropValue(content,color == null ? ""String_Node_Str"" : color);
  content.append(';');
}","/** 
 * Build the border string. <li>ignore all the border styles is style is null <li>CSS default border-color is the font-color, while BIRT is black <li>border-color is not inheritable.
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The proerty name.
 * @param width The border-width value.
 * @param style The border-style value.
 * @param color The border-color value
 */
static void buildBorder(StringBuffer content,String name,String width,String style,String color){
  if (style == null || style.length() <= 0) {
    return;
  }
  addPropName(content,name);
  addPropValue(content,width);
  addPropValue(content,style);
  addPropValue(content,color == null ? ""String_Node_Str"" : color);
  content.append(';');
}",0.9947984395318596
76949,"public void startup(PlatformConfig config) throws BirtException {
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(""String_Node_Str"" + root,root);
  }
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",platformDirectory.getAbsolutePath());
  File configurationDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!configurationDirectory.exists()) {
    configurationDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",configurationDirectory.getAbsolutePath());
  File workspaceDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!workspaceDirectory.exists()) {
    workspaceDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",workspaceDirectory.getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  final String framework=new File(path).getAbsolutePath();
  String[] args=config.getOSGiArguments();
  if (args == null) {
    args=new String[]{""String_Node_Str""};
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    URL frameworkUrl=new File(framework).toURL();
    System.setProperty(""String_Node_Str"",frameworkUrl.toExternalForm());
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{frameworkUrl},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{args,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}","public void startup(PlatformConfig config) throws BirtException {
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(PluginId,""String_Node_Str"" + root,root);
  }
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",platformDirectory.getAbsolutePath());
  File configurationDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!configurationDirectory.exists()) {
    configurationDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",configurationDirectory.getAbsolutePath());
  File workspaceDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!workspaceDirectory.exists()) {
    workspaceDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",workspaceDirectory.getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(PluginId,""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  final String framework=new File(path).getAbsolutePath();
  String[] args=config.getOSGiArguments();
  if (args == null) {
    args=new String[]{""String_Node_Str""};
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    URL frameworkUrl=new File(framework).toURL();
    System.setProperty(""String_Node_Str"",frameworkUrl.toExternalForm());
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{frameworkUrl},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{args,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}",0.995004625346901
76950,"/** 
 * Convert report parameter value object into string.
 * @param reportParameterObj report parameter value object.
 * @return parameter value in string.
 */
public String format(Object reportParameterObj){
  String reportParameterValue=null;
  if (reportParameterObj != null && locale != null) {
    if (reportParameterObj instanceof String) {
      StringFormatter sf=new StringFormatter(locale);
      if (format != null) {
        sf.applyPattern(format);
      }
      reportParameterValue=sf.format((String)reportParameterObj);
    }
 else     if (reportParameterObj instanceof Date) {
      DateFormatter df=new DateFormatter(locale);
      if (format != null) {
        df.applyPattern(format);
      }
      reportParameterValue=df.format((Date)reportParameterObj);
    }
 else     if (reportParameterObj instanceof Double) {
      NumberFormatter nf=new NumberFormatter(locale);
      if (format != null) {
        nf.applyPattern(format);
      }
      reportParameterValue=nf.format(((Double)reportParameterObj).doubleValue());
    }
 else     if (reportParameterObj instanceof BigDecimal) {
      NumberFormatter nf=new NumberFormatter(locale);
      if (format != null) {
        nf.applyPattern(format);
      }
      reportParameterValue=nf.format((BigDecimal)reportParameterObj);
    }
 else     if (reportParameterObj instanceof Boolean) {
      reportParameterValue=((Boolean)reportParameterObj).toString();
    }
 else     if (reportParameterObj instanceof Number) {
      NumberFormatter nf=new NumberFormatter(locale);
      if (format != null) {
        nf.applyPattern(format);
      }
      reportParameterValue=nf.format(((Number)reportParameterObj));
    }
 else {
      reportParameterValue=(reportParameterObj.toString());
    }
  }
  return reportParameterValue;
}","/** 
 * Convert report parameter value object into string.
 * @param reportParameterObj report parameter value object.
 * @return parameter value in string.
 */
public String format(Object reportParameterObj){
  String reportParameterValue=null;
  if (reportParameterObj != null && locale != null) {
    if (reportParameterObj instanceof String) {
      StringFormatter sf=new StringFormatter(ULocale.forLocale(locale));
      if (format != null) {
        sf.applyPattern(format);
      }
      reportParameterValue=sf.format((String)reportParameterObj);
    }
 else     if (reportParameterObj instanceof Date) {
      DateFormatter df=new DateFormatter(ULocale.forLocale(locale));
      if (format != null) {
        df.applyPattern(format);
      }
      reportParameterValue=df.format((Date)reportParameterObj);
    }
 else     if (reportParameterObj instanceof Double) {
      NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
      if (format != null) {
        nf.applyPattern(format);
      }
      reportParameterValue=nf.format(((Double)reportParameterObj).doubleValue());
    }
 else     if (reportParameterObj instanceof BigDecimal) {
      NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
      if (format != null) {
        nf.applyPattern(format);
      }
      reportParameterValue=nf.format((BigDecimal)reportParameterObj);
    }
 else     if (reportParameterObj instanceof Boolean) {
      reportParameterValue=((Boolean)reportParameterObj).toString();
    }
 else     if (reportParameterObj instanceof Number) {
      NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
      if (format != null) {
        nf.applyPattern(format);
      }
      reportParameterValue=nf.format(((Number)reportParameterObj));
    }
 else {
      reportParameterValue=(reportParameterObj.toString());
    }
  }
  return reportParameterValue;
}",0.957983193277311
76951,"/** 
 * Convert report parameter from string into object. Need to be pointed out is it return a Double object when the value type is Float.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(locale);
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(locale);
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(locale);
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.toString());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.toString());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(locale);
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.toString());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new BigDecimal(num.toString());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(locale);
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
  parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
  Number num=nf.parse(reportParameterValue);
  if (num != null) {
    parameterValueObj=new Integer(num.intValue());
  }
}
 catch (ParseException pex) {
  try {
    parameterValueObj=new Integer(reportParameterValue);
  }
 catch (  NumberFormatException nfe) {
    parameterValueObj=null;
  }
}
}
}
}
}
return parameterValueObj;
}","/** 
 * Convert report parameter from string into object. Need to be pointed out is it return a Double object when the value type is Float.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(ULocale.forLocale(locale));
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(ULocale.forLocale(locale));
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.toString());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.toString());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.toString());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new BigDecimal(num.toString());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(ULocale.forLocale(locale));
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
  parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
  Number num=nf.parse(reportParameterValue);
  if (num != null) {
    parameterValueObj=new Integer(num.intValue());
  }
}
 catch (ParseException pex) {
  try {
    parameterValueObj=new Integer(reportParameterValue);
  }
 catch (  NumberFormatException nfe) {
    parameterValueObj=null;
  }
}
}
}
}
}
return parameterValueObj;
}",0.9786236381188802
76952,"/** 
 * Sets all the attributes to the node.
 * @param attributes
 */
public void setAttributes(Map attributes){
  attributes.putAll(attributes);
}","/** 
 * Sets all the attributes to the node.
 * @param attributes
 */
public void setAttributes(Map attributes){
  this.attributes.putAll(attributes);
}",0.9832775919732442
76953,"/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData() throws EngineException {
  DataInputStream dis=null;
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    dis=new DataInputStream(reader.getStream(ReportDocumentConstants.DATA_META_STREAM));
    HashMap queryCounts=new HashMap();
    while (true) {
      IOUtil.readString(dis);
      IOUtil.readLong(dis);
      String queryId=IOUtil.readString(dis);
      String rsetId=IOUtil.readString(dis);
      IQueryDefinition query=getQuery(queryId);
      if (!isMasterQuery(query)) {
        continue;
      }
      rsetId2queryIdMapping.put(rsetId,queryId);
      int count=-1;
      Integer countObj=(Integer)queryCounts.get(queryId);
      if (countObj != null) {
        count=countObj.intValue();
      }
      count++;
      String rsetName=getQueryName(queryId);
      if (count > 0) {
        rsetName=rsetName + ""String_Node_Str"" + count;
      }
      queryCounts.put(queryId,new Integer(count));
      rsetName2IdMapping.put(rsetName,rsetId);
      if (null != query2ResultMetaData) {
        ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
        if (metaData.getColumnCount() > 0) {
          IResultSetItem resultItem=new ResultSetItem(rsetName,metaData);
          resultMetaList.add(resultItem);
        }
      }
    }
  }
 catch (  EOFException eofe) {
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
 finally {
    if (dis != null) {
      try {
        dis.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}","/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData() throws EngineException {
  DataInputStream dis=null;
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    dis=new DataInputStream(reader.getStream(ReportDocumentConstants.DATA_META_STREAM));
    HashMap queryCounts=new HashMap();
    while (true) {
      IOUtil.readString(dis);
      IOUtil.readLong(dis);
      String queryId=IOUtil.readString(dis);
      String rsetId=IOUtil.readString(dis);
      IQueryDefinition query=getQuery(queryId);
      rsetId2queryIdMapping.put(rsetId,queryId);
      if (!isMasterQuery(query)) {
        continue;
      }
      int count=-1;
      Integer countObj=(Integer)queryCounts.get(queryId);
      if (countObj != null) {
        count=countObj.intValue();
      }
      count++;
      String rsetName=getQueryName(queryId);
      if (count > 0) {
        rsetName=rsetName + ""String_Node_Str"" + count;
      }
      queryCounts.put(queryId,new Integer(count));
      rsetName2IdMapping.put(rsetName,rsetId);
      if (null != query2ResultMetaData) {
        ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
        if (metaData.getColumnCount() > 0) {
          IResultSetItem resultItem=new ResultSetItem(rsetName,metaData);
          resultMetaList.add(resultItem);
        }
      }
    }
  }
 catch (  EOFException eofe) {
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
 finally {
    if (dis != null) {
      try {
        dis.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}",0.9640117994100296
76954,"/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      try {
        String format=ParameterAccessor.getFormat(request,paramName);
        if (format == null || format.length() <= 0) {
          format=parameter.getPattern();
        }
        paramValueObj=DataUtil.validate(parameter.getDataType(),format,paramValueObj.toString(),locale);
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}","/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      if (paramValueObj instanceof Date) {
        params.put(paramName,paramValueObj);
        continue;
      }
      try {
        String format=ParameterAccessor.getFormat(request,paramName);
        if (format == null || format.length() <= 0) {
          format=parameter.getPattern();
        }
        paramValueObj=DataUtil.validate(parameter.getDataType(),format,paramValueObj.toString(),locale);
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}",0.9643527204502814
76955,"/** 
 * Parse report object and get the parameter default values
 * @param design IViewerReportDesignHandle
 * @param paramName String
 * @param options InputOptionsF
 * @return String
 */
protected String getParameterDefaultValues(IViewerReportDesignHandle design,String paramName,InputOptions options) throws ReportServiceException {
  if (design == null)   return null;
  String defalutValue=null;
  Object defaultValueObj=null;
  try {
    defaultValueObj=this.getReportService().getParameterDefaultValue(design,paramName,options);
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
  ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
  if (defaultValueObj != null && parameter != null) {
    String dataType=parameter.getDataType();
    String pattern=parameter.getPattern();
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
      defalutValue=ParameterValidationUtil.getDisplayValue(defaultValueObj);
    }
 else {
      if (DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType)) {
        pattern=null;
      }
      defalutValue=ParameterValidationUtil.getDisplayValue(null,pattern,defaultValueObj,locale);
    }
  }
  if (defalutValue == null && parameter != null) {
    defalutValue=parameter.getDefaultValue();
  }
  return defalutValue;
}","/** 
 * Parse report object and get the parameter default values
 * @param design IViewerReportDesignHandle
 * @param paramName String
 * @param options InputOptionsF
 * @return Object
 */
protected Object getParameterDefaultValues(IViewerReportDesignHandle design,String paramName,InputOptions options) throws ReportServiceException {
  if (design == null)   return null;
  String defalutValue=null;
  Object defaultValueObj=null;
  try {
    defaultValueObj=this.getReportService().getParameterDefaultValue(design,paramName,options);
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
  ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
  if (defaultValueObj != null && parameter != null) {
    String dataType=parameter.getDataType();
    String pattern=parameter.getPattern();
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
      return defaultValueObj;
    }
    if (DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType)) {
      pattern=null;
    }
    defalutValue=ParameterValidationUtil.getDisplayValue(null,pattern,defaultValueObj,locale);
  }
  if (defalutValue == null && parameter != null) {
    defalutValue=parameter.getDefaultValue();
  }
  return defalutValue;
}",0.9591758870660052
76956,"/** 
 * Deletes all files created for the Derby database
 */
private void removeDatabase(){
  logger.info(""String_Node_Str"" + dbDir);
  if (!removeDirectory(new File(dbDir))) {
    logger.warning(""String_Node_Str"" + dbDir);
  }
}","/** 
 * Deletes all files created for the Derby database
 */
private void removeDatabase(){
}",0.577639751552795
76957,"private void updateButtons(){
  boolean okEnable=false;
  if (!canSelect || selectedColumnName != null) {
    okEnable=true;
  }
  getOkButton().setEnabled(okEnable);
  int min=0;
  int max=bindingTable.getTable().getItemCount() - 1;
  if ((min <= selectIndex) && (selectIndex <= max)) {
    btnDel.setEnabled(true);
    if (btnEdit != null)     btnEdit.setEnabled(true);
  }
 else {
    btnDel.setEnabled(false);
    if (btnEdit != null)     btnEdit.setEnabled(false);
  }
  bindingTable.getTable().select(selectIndex);
}","private void updateButtons(){
  boolean okEnable=false;
  if (!canSelect || (selectedColumnName != null && getDataSetName() != null)) {
    okEnable=true;
  }
  getOkButton().setEnabled(okEnable);
  int min=0;
  int max=bindingTable.getTable().getItemCount() - 1;
  if ((min <= selectIndex) && (selectIndex <= max)) {
    btnDel.setEnabled(true);
    if (btnEdit != null)     btnEdit.setEnabled(true);
  }
 else {
    btnDel.setEnabled(false);
    if (btnEdit != null)     btnEdit.setEnabled(false);
  }
  bindingTable.getTable().select(selectIndex);
}",0.9720670391061452
76958,"/** 
 * @param rs
 * @param rinfo
 * @param is
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,XMLDataInputStream is,String tName) throws OdaException {
  super(rs,rinfo,is,tName);
}","/** 
 * @param rs
 * @param rinfo
 * @param is
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,XMLDataInputStream is,String tName) throws OdaException {
  super(rinfo,is,tName);
}",0.9937629937629938
76959,"protected void addDragAndDropListener(){
  int ops=DND.DROP_MOVE | DND.DROP_COPY;
  Transfer[] transfers=new Transfer[]{TemplateTransfer.getInstance()};
  getTreeViewer().addDragSupport(ops,transfers,new DesignerDragListener(getTreeViewer()));
  transfers=new Transfer[]{TemplateTransfer.getInstance()};
  DesignerDropListener dropListener=new LibraryDropListener(getTreeViewer());
  dropListener.addDropConstraint(CascadingParameterGroupHandle.class,new IDropConstraint(){
    public int validate(    Object transfer,    Object target){
      return RESULT_NO;
    }
  }
);
  dropListener.addDropConstraint(ScalarParameterHandle.class,new IDropConstraint(){
    public int validate(    Object transfer,    Object target){
      if (target instanceof ScalarParameterHandle) {
        ScalarParameterHandle targetParameter=(ScalarParameterHandle)target;
        if (targetParameter.getContainer() instanceof CascadingParameterGroupHandle)         return RESULT_NO;
      }
      return RESULT_UNKNOW;
    }
  }
);
  IDropConstraint cascadingParameterGroupChildrenConstraint=new IDropConstraint(){
    public int validate(    Object transfer,    Object target){
      if (transfer instanceof Object[] && ((Object[])transfer).length > 0 && ((Object[])transfer)[0] instanceof ScalarParameterHandle) {
        ScalarParameterHandle transferParameter=(ScalarParameterHandle)((Object[])transfer)[0];
        if (transferParameter.getContainer() instanceof CascadingParameterGroupHandle)         return RESULT_NO;
      }
      return RESULT_UNKNOW;
    }
  }
;
  dropListener.addDropConstraint(ScalarParameterHandle.class,cascadingParameterGroupChildrenConstraint);
  dropListener.addDropConstraint(ParameterGroupHandle.class,cascadingParameterGroupChildrenConstraint);
  dropListener.addDropConstraint(ReportElementModel.class,cascadingParameterGroupChildrenConstraint);
  getTreeViewer().addDropSupport(ops,transfers,dropListener);
}","protected void addDragAndDropListener(){
  int ops=DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;
  Transfer[] transfers=new Transfer[]{TemplateTransfer.getInstance()};
  getTreeViewer().addDragSupport(ops,transfers,new DesignerDragListener(getTreeViewer()));
  transfers=new Transfer[]{TemplateTransfer.getInstance()};
  DesignerDropListener dropListener=new LibraryDropListener(getTreeViewer());
  dropListener.addDropConstraint(CascadingParameterGroupHandle.class,new IDropConstraint(){
    public int validate(    Object transfer,    Object target){
      return RESULT_NO;
    }
  }
);
  dropListener.addDropConstraint(ScalarParameterHandle.class,new IDropConstraint(){
    public int validate(    Object transfer,    Object target){
      if (target instanceof ScalarParameterHandle) {
        ScalarParameterHandle targetParameter=(ScalarParameterHandle)target;
        if (targetParameter.getContainer() instanceof CascadingParameterGroupHandle)         return RESULT_NO;
      }
      return RESULT_UNKNOW;
    }
  }
);
  IDropConstraint cascadingParameterGroupChildrenConstraint=new IDropConstraint(){
    public int validate(    Object transfer,    Object target){
      if (transfer instanceof Object[] && ((Object[])transfer).length > 0 && ((Object[])transfer)[0] instanceof ScalarParameterHandle) {
        ScalarParameterHandle transferParameter=(ScalarParameterHandle)((Object[])transfer)[0];
        if (transferParameter.getContainer() instanceof CascadingParameterGroupHandle)         return RESULT_NO;
      }
      return RESULT_UNKNOW;
    }
  }
;
  dropListener.addDropConstraint(ScalarParameterHandle.class,cascadingParameterGroupChildrenConstraint);
  dropListener.addDropConstraint(ParameterGroupHandle.class,cascadingParameterGroupChildrenConstraint);
  dropListener.addDropConstraint(ReportElementModel.class,cascadingParameterGroupChildrenConstraint);
  getTreeViewer().addDropSupport(ops,transfers,dropListener);
}",0.9958677685950412
76960,"/** 
 * Returns data set handles that are visible to this modules.
 * @return data set handles that are visible to this modules.
 */
public List getVisibleDataSets(){
  IModuleNameScope namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameScope.NATIVE_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns data set handles that are visible to this modules.
 * @return data set handles that are visible to this modules.
 */
public List getVisibleDataSets(){
  IModuleNameScope namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameScope.NATIVE_LEVEL);
  return generateHandleList(sortVisibleElements(elementList,IModuleNameScope.NATIVE_LEVEL));
}",0.9070063694267516
76961,"/** 
 * Returns data source handles that are visible to this modules.
 * @return data source handles that are visible to this modules.
 */
public List getVisibleDataSources(){
  IModuleNameScope namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameScope.NATIVE_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns data source handles that are visible to this modules.
 * @return data source handles that are visible to this modules.
 */
public List getVisibleDataSources(){
  IModuleNameScope namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameScope.NATIVE_LEVEL);
  return generateHandleList(sortVisibleElements(elementList,IModuleNameScope.NATIVE_LEVEL));
}",0.9097651421508036
76962,"/** 
 * Returns theme handles according the input level.
 * @param level an <code>int</code> value, which should be the one defined in <code>IVisibleLevelControl</code>.
 * @return theme handles according the input level
 */
public List getVisibleThemes(int level){
  List elementList=module.getModuleNameSpace(Module.THEME_NAME_SPACE).getElements(level);
  return generateHandleList(elementList);
}","/** 
 * Returns theme handles according the input level.
 * @param level an <code>int</code> value, which should be the one defined in <code>IVisibleLevelControl</code>.
 * @return theme handles according the input level
 */
public List getVisibleThemes(int level){
  List elementList=module.getModuleNameSpace(Module.THEME_NAME_SPACE).getElements(level);
  return generateHandleList(sortVisibleElements(elementList,level));
}",0.9406060606060606
76963,"/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSetExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  if (handler.versionNumber <= VersionUtil.VERSION_3_2_7) {
    if (OBSOLETE_XML_FILE_ID.equalsIgnoreCase(extensionID)) {
      extensionID=NEW_XML_FILE_ID;
    }
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSet)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
 else {
    String newExtensionID=provider.convertDataSetExtensionID(extensionID);
    if (!extensionID.equals(newExtensionID)) {
      setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,newExtensionID);
    }
  }
}","/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSetExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSet)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
 else {
    String newExtensionID=provider.convertDataSetExtensionID(extensionID);
    if (!extensionID.equals(newExtensionID)) {
      setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,newExtensionID);
    }
  }
}",0.9441284710605554
76964,"/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSourceExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  if (handler.versionNumber <= VersionUtil.VERSION_3_2_7) {
    if (OBSOLETE_XML_FILE_ID.equalsIgnoreCase(extensionID)) {
      extensionID=NEW_XML_FILE_ID;
    }
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSource)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
 else {
    String newExtensionID=provider.convertDataSourceExtensionID(extensionID);
    if (!extensionID.equals(newExtensionID)) {
      setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,newExtensionID);
    }
  }
}","/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSourceExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSource)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
 else {
    String newExtensionID=provider.convertDataSourceExtensionID(extensionID);
    if (!extensionID.equals(newExtensionID)) {
      setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,newExtensionID);
    }
  }
}",0.9444629198536748
76965,"/** 
 * Configures the tree viewer.
 */
protected void configTreeViewer(){
  ViewsTreeProvider provider=new LibraryExplorerProvider();
  treeViewer.setContentProvider(provider);
  treeViewer.setLabelProvider(provider);
  int ops=DND.DROP_COPY;
  Transfer[] transfers=new Transfer[]{TemplateTransfer.getInstance()};
  treeViewer.addDragSupport(ops,transfers,new LibraryDragListener(treeViewer));
  treeViewer.getControl().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.F5) {
        treeViewer.refresh();
      }
    }
  }
);
  treeViewer.getTree().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      Object input=treeViewer.getInput();
      if (input instanceof Object[]) {
        Object[] array=(Object[])input;
        for (int i=0; i < array.length; i++) {
          if (array[i] instanceof ResourceEntry)           ((ResourceEntry)array[i]).dispose();
        }
      }
    }
  }
);
}","/** 
 * Configures the tree viewer.
 */
protected void configTreeViewer(){
  ViewsTreeProvider provider=new LibraryExplorerProvider();
  treeViewer.setContentProvider(provider);
  treeViewer.setLabelProvider(provider);
  int ops=DND.DROP_COPY | DND.DROP_LINK;
  Transfer[] transfers=new Transfer[]{TemplateTransfer.getInstance()};
  treeViewer.addDragSupport(ops,transfers,new LibraryDragListener(treeViewer));
  treeViewer.getControl().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.F5) {
        treeViewer.refresh();
      }
    }
  }
);
  treeViewer.getTree().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      Object input=treeViewer.getInput();
      if (input instanceof Object[]) {
        Object[] array=(Object[])input;
        for (int i=0; i < array.length; i++) {
          if (array[i] instanceof ResourceEntry)           ((ResourceEntry)array[i]).dispose();
        }
      }
    }
  }
);
}",0.9924170616113744
76966,"/** 
 * Constructor.
 * @param servletConfig
 * @param config
 */
private ReportEngineService(ServletConfig servletConfig){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletConfig == null) {
    return;
  }
  config=new EngineConfig();
  HTMLEmitterConfig emitterConfig=new HTMLEmitterConfig();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (imageDirectory == null || imageDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(imageDirectory)) {
    imageDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (logDirectory == null || logDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(logDirectory)) {
    logDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  String logLevel=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  Level level=Level.OFF;
  if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.SEVERE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.WARNING;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.INFO;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.CONFIG;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINEST;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.OFF;
  }
  config.setLogConfig(logDirectory,level);
  String scriptLibDir=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (scriptLibDir == null || scriptLibDir.trim().length() <= 0 || ParameterAccessor.isRelativePath(scriptLibDir)) {
    scriptLibDir=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param servletConfig
 * @param config
 */
private ReportEngineService(ServletConfig servletConfig){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletConfig == null) {
    return;
  }
  config=new EngineConfig();
  HTMLEmitterConfig emitterConfig=new HTMLEmitterConfig();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (imageDirectory == null || imageDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(imageDirectory)) {
    imageDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (logDirectory == null || logDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(logDirectory)) {
    logDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  String logLevel=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(logDirectory,level);
  String scriptLibDir=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (scriptLibDir == null || scriptLibDir.trim().length() <= 0 || ParameterAccessor.isRelativePath(scriptLibDir)) {
    scriptLibDir=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}",0.8651146259107872
76967,"/** 
 * Refresh the border data as per the current border setting and existing border setting, using the CSS2.0 border collision algorithm: if the style is none, always lose; then compare the width, greater win; if width is equal, compare the style, less win; or keep the original. This is the part 1 of the algorithm.
 */
public static void refreshBorderData(int[] data,int style,int width,int color,int rowIndex,int colIndex){
  assert(data.length > 4);
  if (style != 0) {
    if (width > data[1] || data[0] == 0) {
      data[0]=style;
      data[1]=width;
      data[2]=color;
      data[3]=rowIndex;
      data[4]=colIndex;
    }
 else     if (width == data[1] && style < data[0]) {
      data[0]=style;
      data[2]=color;
      data[3]=rowIndex;
      data[4]=colIndex;
    }
  }
 else   if (data[0] == 0) {
    data[1]=1;
  }
}","/** 
 * Refresh the border data as per the current border setting and existing border setting, using the CSS2.0 border collision algorithm: if the style is none, always lose; then compare the width, greater win; if width is equal, compare the style, less win; or keep the original. This is the part 1 of the algorithm.
 */
public static void refreshBorderData(int[] data,int style,int width,int color,int rowIndex,int colIndex,int type){
  assert(data.length > 5);
  if (style != 0) {
    if (data[0] == 0) {
      data[0]=style;
      data[1]=width;
      data[2]=color;
      data[3]=rowIndex;
      data[4]=colIndex;
      data[5]=type;
      return;
    }
    if (type > data[5]) {
      data[0]=style;
      data[1]=width;
      data[2]=color;
      data[3]=rowIndex;
      data[4]=colIndex;
      data[5]=type;
    }
 else     if (type < data[5]) {
      return;
    }
    if (width > data[1] || data[0] == 0) {
      data[0]=style;
      data[1]=width;
      data[2]=color;
      data[3]=rowIndex;
      data[4]=colIndex;
      data[5]=type;
    }
 else     if (width == data[1] && style < data[0]) {
      data[0]=style;
      data[2]=color;
      data[3]=rowIndex;
      data[4]=colIndex;
      data[5]=type;
    }
  }
 else   if (data[0] == 0) {
    data[1]=1;
  }
}",0.791292001893043
76968,"/** 
 * Initialize the helper.
 */
private void initialize(){
  int rowCount=owner.getRowCount();
  int colCount=owner.getColumnCount();
  heights=new int[colCount][rowCount + 1];
  widths=new int[rowCount][colCount + 1];
  borderData=new int[2 * colCount * rowCount + colCount + rowCount][5];
  for (int i=0; i < rowCount; i++) {
    for (int j=0; j < colCount; j++) {
      borderData[i * (2 * colCount + 1) + j][3]=-1;
      borderData[i * (2 * colCount + 1) + j][4]=-1;
      borderData[(i + 1) * (2 * colCount + 1) + j][3]=-1;
      borderData[(i + 1) * (2 * colCount + 1) + j][4]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j][3]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j][4]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j + 1][3]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j + 1][4]=-1;
    }
  }
  TableBorder tableBorder=(TableBorder)owner.getFigure().getBorder();
  Insets tableBorderInsets=tableBorder.getTrueBorderInsets();
  for (int i=0; i < colCount; i++) {
    heights[i][0]=tableBorderInsets.top;
    heights[i][rowCount]=tableBorderInsets.bottom;
  }
  for (int i=0; i < rowCount; i++) {
    widths[i][0]=tableBorderInsets.left;
    widths[i][colCount]=tableBorderInsets.right;
  }
  for (Iterator itr=owner.getChildren().iterator(); itr.hasNext(); ) {
    TableCellEditPart cellPart=(TableCellEditPart)itr.next();
    int rowIndex=cellPart.getRowNumber();
    int colIndex=cellPart.getColumnNumber();
    int rowSpan=cellPart.getRowSpan();
    int colSpan=cellPart.getColSpan();
    CellBorder border=(CellBorder)cellPart.getFigure().getBorder();
    Insets ins=border.getTrueBorderInsets();
    int topStyle=border.getTopBorderStyle();
    int topWidth=border.getTopBorderWidth();
    int topColor=border.getTopBorderColor();
    int bottomStyle=border.getBottomBorderStyle();
    int bottomWidth=border.getBottomBorderWidth();
    int bottomColor=border.getBottomBorderColor();
    int leftStyle=border.getLeftBorderStyle();
    int leftWidth=border.getLeftBorderWidth();
    int leftColor=border.getLeftBorderColor();
    int rightStyle=border.getRightBorderStyle();
    int rightWidth=border.getRightBorderWidth();
    int rightColor=border.getRightBorderColor();
    for (int i=0; i < colSpan; i++) {
      TableBorderCollisionArbiter.refreshBorderData(borderData[(rowIndex - 1) * (2 * colCount + 1) + colIndex - 1 + i],topStyle,topWidth,topColor,rowIndex - 1,colIndex - 1 + i);
      TableBorderCollisionArbiter.refreshBorderData(borderData[(rowIndex + rowSpan - 1) * (2 * colCount + 1) + colIndex - 1 + i],bottomStyle,bottomWidth,bottomColor,rowIndex - 1 + rowSpan - 1,colIndex - 1 + i);
      heights[colIndex - 1 + i][rowIndex - 1]=Math.max(heights[colIndex - 1 + i][rowIndex - 1],ins.top);
      heights[colIndex - 1 + i][rowIndex + rowSpan - 1]=Math.max(heights[colIndex - 1 + i][rowIndex + rowSpan - 1],ins.bottom);
    }
    for (int i=0; i < rowSpan; i++) {
      TableBorderCollisionArbiter.refreshBorderData(borderData[(rowIndex - 1 + i) * (2 * colCount + 1) + colCount + colIndex - 1],leftStyle,leftWidth,leftColor,rowIndex - 1 + i,colIndex - 1);
      TableBorderCollisionArbiter.refreshBorderData(borderData[(rowIndex - 1 + i) * (2 * colCount + 1) + colCount + colIndex + colSpan - 1],rightStyle,rightWidth,rightColor,rowIndex - 1 + i,colIndex - 1 + colSpan - 1);
      widths[rowIndex - 1 + i][colIndex - 1]=Math.max(widths[rowIndex - 1 + i][colIndex - 1],ins.left);
      widths[rowIndex - 1 + i][colIndex + colSpan - 1]=Math.max(widths[rowIndex - 1 + i][colIndex + colSpan - 1],ins.right);
    }
  }
  int tableTopStyle=tableBorder.getTopBorderStyle();
  int tableTopWidth=tableBorder.getTopBorderWidth();
  if (tableTopStyle != 0 && tableTopWidth > 0) {
    int tableTopColor=tableBorder.getTopBorderColor();
    for (int i=0; i < colCount; i++) {
      borderData[i][0]=tableTopStyle;
      borderData[i][1]=tableTopWidth;
      borderData[i][2]=tableTopColor;
      borderData[i][3]=-2;
      borderData[i][4]=-2;
    }
  }
  int tableBottomStyle=tableBorder.getBottomBorderStyle();
  int tableBottomWidth=tableBorder.getBottomBorderWidth();
  if (tableBottomStyle != 0 && tableBottomWidth > 0) {
    int tableBottomColor=tableBorder.getBottomBorderColor();
    for (int i=0; i < colCount; i++) {
      borderData[2 * colCount * rowCount + rowCount + i][0]=tableBottomStyle;
      borderData[2 * colCount * rowCount + rowCount + i][1]=tableBottomWidth;
      borderData[2 * colCount * rowCount + rowCount + i][2]=tableBottomColor;
      borderData[2 * colCount * rowCount + rowCount + i][3]=-2;
      borderData[2 * colCount * rowCount + rowCount + i][4]=-2;
    }
  }
  int tableLeftStyle=tableBorder.getLeftBorderStyle();
  int tableLeftWidth=tableBorder.getLeftBorderWidth();
  if (tableLeftStyle != 0 && tableLeftWidth > 0) {
    int tableLeftColor=tableBorder.getLeftBorderColor();
    for (int i=0; i < rowCount; i++) {
      borderData[(2 * colCount + 1) * i + colCount][0]=tableLeftStyle;
      borderData[(2 * colCount + 1) * i + colCount][1]=tableLeftWidth;
      borderData[(2 * colCount + 1) * i + colCount][2]=tableLeftColor;
      borderData[(2 * colCount + 1) * i + colCount][3]=-2;
      borderData[(2 * colCount + 1) * i + colCount][4]=-2;
    }
  }
  int tableRightStyle=tableBorder.getRightBorderStyle();
  int tableRightWidth=tableBorder.getRightBorderWidth();
  if (tableRightStyle != 0 && tableRightWidth > 0) {
    int tableRightColor=tableBorder.getRightBorderColor();
    for (int i=0; i < rowCount; i++) {
      borderData[(2 * colCount + 1) * i + 2 * colCount][0]=tableRightStyle;
      borderData[(2 * colCount + 1) * i + 2 * colCount][1]=tableRightWidth;
      borderData[(2 * colCount + 1) * i + 2 * colCount][2]=tableRightColor;
      borderData[(2 * colCount + 1) * i + 2 * colCount][3]=-2;
      borderData[(2 * colCount + 1) * i + 2 * colCount][4]=-2;
    }
  }
}","/** 
 * Initialize the helper.
 */
private void initialize(){
  int rowCount=owner.getRowCount();
  int colCount=owner.getColumnCount();
  heights=new int[colCount][rowCount + 1];
  widths=new int[rowCount][colCount + 1];
  borderData=new int[2 * colCount * rowCount + colCount + rowCount][6];
  for (int i=0; i < rowCount; i++) {
    for (int j=0; j < colCount; j++) {
      borderData[i * (2 * colCount + 1) + j][3]=-1;
      borderData[i * (2 * colCount + 1) + j][4]=-1;
      borderData[i * (2 * colCount + 1) + j][5]=-1;
      borderData[(i + 1) * (2 * colCount + 1) + j][3]=-1;
      borderData[(i + 1) * (2 * colCount + 1) + j][4]=-1;
      borderData[(i + 1) * (2 * colCount + 1) + j][5]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j][3]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j][4]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j][5]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j + 1][3]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j + 1][4]=-1;
      borderData[i * (2 * colCount + 1) + colCount + j + 1][5]=-1;
    }
  }
  TableBorder tableBorder=(TableBorder)owner.getFigure().getBorder();
  Insets tableBorderInsets=tableBorder.getTrueBorderInsets();
  for (int i=0; i < colCount; i++) {
    heights[i][0]=tableBorderInsets.top;
    heights[i][rowCount]=tableBorderInsets.bottom;
  }
  for (int i=0; i < rowCount; i++) {
    widths[i][0]=tableBorderInsets.left;
    widths[i][colCount]=tableBorderInsets.right;
  }
  for (Iterator itr=owner.getChildren().iterator(); itr.hasNext(); ) {
    TableCellEditPart cellPart=(TableCellEditPart)itr.next();
    int rowIndex=cellPart.getRowNumber();
    int colIndex=cellPart.getColumnNumber();
    int rowSpan=cellPart.getRowSpan();
    int colSpan=cellPart.getColSpan();
    CellBorder border=(CellBorder)cellPart.getFigure().getBorder();
    Insets ins=border.getTrueBorderInsets();
    int topStyle=border.getTopBorderStyle();
    int topWidth=border.getTopBorderWidth();
    int topColor=border.getTopBorderColor();
    int topFrom=border.getTopFrom();
    int bottomStyle=border.getBottomBorderStyle();
    int bottomWidth=border.getBottomBorderWidth();
    int bottomColor=border.getBottomBorderColor();
    int bottomFrom=border.getBottomFrom();
    int leftStyle=border.getLeftBorderStyle();
    int leftWidth=border.getLeftBorderWidth();
    int leftColor=border.getLeftBorderColor();
    int rightStyle=border.getRightBorderStyle();
    int rightWidth=border.getRightBorderWidth();
    int rightColor=border.getRightBorderColor();
    for (int i=0; i < colSpan; i++) {
      TableBorderCollisionArbiter.refreshBorderData(borderData[(rowIndex - 1) * (2 * colCount + 1) + colIndex - 1 + i],topStyle,topWidth,topColor,rowIndex - 1,colIndex - 1 + i,topFrom);
      TableBorderCollisionArbiter.refreshBorderData(borderData[(rowIndex + rowSpan - 1) * (2 * colCount + 1) + colIndex - 1 + i],bottomStyle,bottomWidth,bottomColor,rowIndex - 1 + rowSpan - 1,colIndex - 1 + i,bottomFrom);
      heights[colIndex - 1 + i][rowIndex - 1]=Math.max(heights[colIndex - 1 + i][rowIndex - 1],ins.top);
      heights[colIndex - 1 + i][rowIndex + rowSpan - 1]=Math.max(heights[colIndex - 1 + i][rowIndex + rowSpan - 1],ins.bottom);
    }
    for (int i=0; i < rowSpan; i++) {
      TableBorderCollisionArbiter.refreshBorderData(borderData[(rowIndex - 1 + i) * (2 * colCount + 1) + colCount + colIndex - 1],leftStyle,leftWidth,leftColor,rowIndex - 1 + i,colIndex - 1);
      TableBorderCollisionArbiter.refreshBorderData(borderData[(rowIndex - 1 + i) * (2 * colCount + 1) + colCount + colIndex + colSpan - 1],rightStyle,rightWidth,rightColor,rowIndex - 1 + i,colIndex - 1 + colSpan - 1);
      widths[rowIndex - 1 + i][colIndex - 1]=Math.max(widths[rowIndex - 1 + i][colIndex - 1],ins.left);
      widths[rowIndex - 1 + i][colIndex + colSpan - 1]=Math.max(widths[rowIndex - 1 + i][colIndex + colSpan - 1],ins.right);
    }
  }
  int tableTopStyle=tableBorder.getTopBorderStyle();
  int tableTopWidth=tableBorder.getTopBorderWidth();
  if (tableTopStyle != 0 && tableTopWidth > 0) {
    int tableTopColor=tableBorder.getTopBorderColor();
    for (int i=0; i < colCount; i++) {
      borderData[i][0]=tableTopStyle;
      borderData[i][1]=tableTopWidth;
      borderData[i][2]=tableTopColor;
      borderData[i][3]=-2;
      borderData[i][4]=-2;
    }
  }
  int tableBottomStyle=tableBorder.getBottomBorderStyle();
  int tableBottomWidth=tableBorder.getBottomBorderWidth();
  if (tableBottomStyle != 0 && tableBottomWidth > 0) {
    int tableBottomColor=tableBorder.getBottomBorderColor();
    for (int i=0; i < colCount; i++) {
      borderData[2 * colCount * rowCount + rowCount + i][0]=tableBottomStyle;
      borderData[2 * colCount * rowCount + rowCount + i][1]=tableBottomWidth;
      borderData[2 * colCount * rowCount + rowCount + i][2]=tableBottomColor;
      borderData[2 * colCount * rowCount + rowCount + i][3]=-2;
      borderData[2 * colCount * rowCount + rowCount + i][4]=-2;
    }
  }
  int tableLeftStyle=tableBorder.getLeftBorderStyle();
  int tableLeftWidth=tableBorder.getLeftBorderWidth();
  if (tableLeftStyle != 0 && tableLeftWidth > 0) {
    int tableLeftColor=tableBorder.getLeftBorderColor();
    for (int i=0; i < rowCount; i++) {
      borderData[(2 * colCount + 1) * i + colCount][0]=tableLeftStyle;
      borderData[(2 * colCount + 1) * i + colCount][1]=tableLeftWidth;
      borderData[(2 * colCount + 1) * i + colCount][2]=tableLeftColor;
      borderData[(2 * colCount + 1) * i + colCount][3]=-2;
      borderData[(2 * colCount + 1) * i + colCount][4]=-2;
    }
  }
  int tableRightStyle=tableBorder.getRightBorderStyle();
  int tableRightWidth=tableBorder.getRightBorderWidth();
  if (tableRightStyle != 0 && tableRightWidth > 0) {
    int tableRightColor=tableBorder.getRightBorderColor();
    for (int i=0; i < rowCount; i++) {
      borderData[(2 * colCount + 1) * i + 2 * colCount][0]=tableRightStyle;
      borderData[(2 * colCount + 1) * i + 2 * colCount][1]=tableRightWidth;
      borderData[(2 * colCount + 1) * i + 2 * colCount][2]=tableRightColor;
      borderData[(2 * colCount + 1) * i + 2 * colCount][3]=-2;
      borderData[(2 * colCount + 1) * i + 2 * colCount][4]=-2;
    }
  }
}",0.9250803593505316
76969,"protected void updateBaseBorder(DesignElementHandle handle,BaseBorder border){
  border.bottomColor=handle.getPropertyHandle(StyleHandle.BORDER_BOTTOM_COLOR_PROP).getIntValue();
  border.bottomStyle=handle.getPropertyHandle(StyleHandle.BORDER_BOTTOM_STYLE_PROP).getStringValue();
  border.bottomWidth=handle.getPropertyHandle(StyleHandle.BORDER_BOTTOM_WIDTH_PROP).getStringValue();
  border.topColor=handle.getPropertyHandle(StyleHandle.BORDER_TOP_COLOR_PROP).getIntValue();
  border.topStyle=handle.getPropertyHandle(StyleHandle.BORDER_TOP_STYLE_PROP).getStringValue();
  border.topWidth=handle.getPropertyHandle(StyleHandle.BORDER_TOP_WIDTH_PROP).getStringValue();
  border.leftColor=handle.getPropertyHandle(StyleHandle.BORDER_LEFT_COLOR_PROP).getIntValue();
  border.leftStyle=handle.getPropertyHandle(StyleHandle.BORDER_LEFT_STYLE_PROP).getStringValue();
  border.leftWidth=handle.getPropertyHandle(StyleHandle.BORDER_LEFT_WIDTH_PROP).getStringValue();
  border.rightColor=handle.getPropertyHandle(StyleHandle.BORDER_RIGHT_COLOR_PROP).getIntValue();
  border.rightStyle=handle.getPropertyHandle(StyleHandle.BORDER_RIGHT_STYLE_PROP).getStringValue();
  border.rightWidth=handle.getPropertyHandle(StyleHandle.BORDER_RIGHT_WIDTH_PROP).getStringValue();
}","protected void updateBaseBorder(DesignElementHandle handle,BaseBorder border){
  updateBottomBorder(handle,border);
  updateTopBorder(handle,border);
  updateLeftBorder(handle,border);
  updateRightBorder(handle,border);
}",0.128552097428958
76970,"/** 
 * @see ViewerDropAdapter#performDrop(Object)
 */
public boolean performDrop(Object data){
  if (data instanceof Object[] && ((Object[])data)[0] instanceof ThemeHandle) {
    if (getCurrentTarget() instanceof ModuleHandle) {
      if (Policy.TRACING_DND_DRAG) {
        System.out.println(""String_Node_Str"" + getCurrentTarget());
      }
      return ApplyTheme((ThemeHandle)((Object[])data)[0],(ModuleHandle)getCurrentTarget());
    }
 else {
      return false;
    }
  }
  if (getCurrentOperation() == DND.DROP_MOVE) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return moveData(data,getCurrentTarget());
  }
 else   if (getCurrentOperation() == DND.DROP_COPY) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return copyData(data,getCurrentTarget());
  }
  return false;
}","/** 
 * @see ViewerDropAdapter#performDrop(Object)
 */
public boolean performDrop(Object data){
  if (data instanceof Object[] && ((Object[])data)[0] instanceof ThemeHandle) {
    if (getCurrentTarget() instanceof ModuleHandle) {
      if (Policy.TRACING_DND_DRAG) {
        System.out.println(""String_Node_Str"" + getCurrentTarget());
      }
      return ApplyTheme((ThemeHandle)((Object[])data)[0],(ModuleHandle)getCurrentTarget());
    }
 else {
      return false;
    }
  }
  if (getCurrentOperation() == DND.DROP_MOVE) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return moveData(data,getCurrentTarget());
  }
 else   if (getCurrentOperation() == DND.DROP_COPY || getCurrentOperation() == DND.DROP_LINK) {
    if (Policy.TRACING_DND_DRAG) {
      System.out.println(""String_Node_Str"" + getCurrentTarget());
    }
    return copyData(data,getCurrentTarget());
  }
  return false;
}",0.977491961414791
76971,"public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(getSelectedObjects().getFirstElement()));
  }
  doRename();
}","public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(getSelectedObjects().getFirstElement()));
  }
  if (selectedItem != null) {
    doRename();
  }
}",0.9081632653061223
76972,"private void initAnchorChooser(Object handle,boolean isToc){
  anchorChooser.removeAll();
  if (handle instanceof ReportDesignHandle) {
    if (isToc) {
      anchorChooser.setItems((String[])((ReportDesignHandle)handle).getAllTocs().toArray(new String[0]));
    }
 else {
      anchorChooser.setItems((String[])((ReportDesignHandle)handle).getAllBookmarks().toArray(new String[0]));
    }
  }
 else   if (handle instanceof IReportDocument) {
    if (isToc) {
      String format=""String_Node_Str"";
      for (int i=0; i < supportedFormats.length; i++) {
        if (((Button)formatCheckBtns.get(supportedFormats[i])).getSelection()) {
          format=supportedFormats[i];
          break;
        }
      }
      ITOCTree tocTree=((IReportDocument)handle).getTOCTree(format,SessionHandleAdapter.getInstance().getSessionHandle().getULocale());
      TOCNode rootTocNode=tocTree.getRoot();
      anchorChooser.setItems((String[])getAllTocDisplayString(rootTocNode).toArray(new String[0]));
    }
 else {
      anchorChooser.setItems(getDocumentBookmarks((IReportDocument)handle));
    }
  }
  bookmarkEditor.setText(""String_Node_Str"");
  String bookmark=inputHandle.getTargetBookmark();
  String[] chooserValues=anchorChooser.getItems();
  if (bookmark != null && chooserValues != null) {
    for (int i=0; i < chooserValues.length; i++) {
      if (bookmark.equals(chooserValues[i])) {
        anchorChooser.select(i);
        bookmarkEditor.setText(anchorChooser.getText());
      }
    }
  }
  anchorChooser.setEnabled(anchorChooser.getItemCount() > 0);
}","private void initAnchorChooser(Object handle,boolean isToc){
  anchorChooser.removeAll();
  if (handle instanceof ReportDesignHandle) {
    if (isToc) {
      List chooserItems=((ReportDesignHandle)handle).getAllTocs();
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      List chooserItems=((ReportDesignHandle)handle).getAllBookmarks();
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
  }
 else   if (handle instanceof IReportDocument) {
    if (isToc) {
      String format=""String_Node_Str"";
      for (int i=0; i < supportedFormats.length; i++) {
        if (((Button)formatCheckBtns.get(supportedFormats[i])).getSelection()) {
          format=supportedFormats[i];
          break;
        }
      }
      ITOCTree tocTree=((IReportDocument)handle).getTOCTree(format,SessionHandleAdapter.getInstance().getSessionHandle().getULocale());
      TOCNode rootTocNode=tocTree.getRoot();
      List chooserItems=getAllTocDisplayString(rootTocNode);
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      List chooserItems=getDocumentBookmarks((IReportDocument)handle);
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
  }
  bookmarkEditor.setText(""String_Node_Str"");
  String bookmark=inputHandle.getTargetBookmark();
  String[] chooserValues=anchorChooser.getItems();
  if (bookmark != null && chooserValues != null) {
    for (int i=0; i < chooserValues.length; i++) {
      if (bookmark.equals(chooserValues[i])) {
        anchorChooser.select(i);
        bookmarkEditor.setText(anchorChooser.getText());
        break;
      }
    }
  }
  anchorChooser.setEnabled(anchorChooser.getItemCount() > 0);
}",0.7785234899328859
76973,"private void initDisplayArea(){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
    if (inputHandle.getURI() != null) {
      locationEditor.setText(inputHandle.getURI());
    }
    if (inputHandle.getTargetWindow() != null) {
      targetChooser.setText(ChoiceSetFactory.getDisplayNameFromChoiceSet(inputHandle.getTargetWindow(),CHOICESET_TARGET));
    }
 else {
      targetChooser.select(0);
    }
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType)) {
    if (inputHandle.getTargetBookmark() != null) {
      bookmarkEditor.setText(inputHandle.getTargetBookmark());
    }
    initBookmarkList(SessionHandleAdapter.getInstance().getReportDesignHandle());
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
    if (DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT.equals(inputHandle.getTargetFileType())) {
      reportDocumentButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        documentEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDocumentButton);
    }
 else {
      reportDesignButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        locationEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDesignButton);
    }
    if (inputHandle.getReportName() != null) {
      initTargetReport(inputHandle.getReportName());
    }
    if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(inputHandle.getTargetBookmarkType())) {
      targetBookmarkButton.setSelection(true);
      initAnchorChooser(targetReportHandle,false);
    }
 else     if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC.equals(inputHandle.getTargetBookmarkType())) {
      tocButton.setSelection(true);
      initAnchorChooser(targetReportHandle,true);
    }
    if (inputHandle.getTargetBookmark() != null) {
      bookmarkEditor.setText(inputHandle.getTargetBookmark());
    }
    if (DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK.equals(inputHandle.getTargetWindow())) {
      newWindowButton.setSelection(true);
    }
 else {
      sameWindowButton.setSelection(true);
    }
    if (inputHandle.getFormatType() != null) {
      ((Button)formatCheckBtns.get(inputHandle.getFormatType())).setSelection(true);
    }
 else {
      ((Button)formatCheckBtns.get(""String_Node_Str"")).setSelection(true);
    }
  }
  updateButtons();
}","private void initDisplayArea(){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
    if (inputHandle.getURI() != null) {
      locationEditor.setText(inputHandle.getURI());
    }
    if (inputHandle.getTargetWindow() != null) {
      targetChooser.setText(ChoiceSetFactory.getDisplayNameFromChoiceSet(inputHandle.getTargetWindow(),CHOICESET_TARGET));
    }
 else {
      targetChooser.select(0);
    }
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType)) {
    if (inputHandle.getTargetBookmark() != null) {
      bookmarkEditor.setText(inputHandle.getTargetBookmark());
    }
    initBookmarkList(SessionHandleAdapter.getInstance().getReportDesignHandle());
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
    if (DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT.equals(inputHandle.getTargetFileType())) {
      reportDocumentButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        documentEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDocumentButton);
    }
 else {
      reportDesignButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        locationEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDesignButton);
    }
    if (inputHandle.getReportName() != null) {
      initTargetReport(inputHandle.getReportName());
    }
    if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(inputHandle.getTargetBookmarkType())) {
      targetBookmarkButton.setSelection(true);
      initAnchorChooser(targetReportHandle,false);
    }
 else     if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC.equals(inputHandle.getTargetBookmarkType())) {
      tocButton.setSelection(true);
      initAnchorChooser(targetReportHandle,true);
    }
    if (inputHandle.getTargetBookmark() != null) {
      bookmarkEditor.setText(inputHandle.getTargetBookmark());
    }
 else {
      bookmarkEditor.setText(""String_Node_Str"");
    }
    if (DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK.equals(inputHandle.getTargetWindow())) {
      newWindowButton.setSelection(true);
    }
 else {
      sameWindowButton.setSelection(true);
    }
    if (inputHandle.getFormatType() != null) {
      ((Button)formatCheckBtns.get(inputHandle.getFormatType())).setSelection(true);
    }
 else {
      ((Button)formatCheckBtns.get(""String_Node_Str"")).setSelection(true);
    }
  }
  updateButtons();
}",0.9874226392493513
76974,"protected void okPressed(){
  try {
    inputHandle.setURI(null);
    inputHandle.setTargetBookmark(null);
    inputHandle.setTargetWindow(null);
    inputHandle.setReportName(null);
    inputHandle.setFormatType(null);
    inputHandle.getMember(Action.PARAM_BINDINGS_MEMBER).setValue(null);
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
      inputHandle.setURI(locationEditor.getText().trim());
      inputHandle.setTargetWindow(ChoiceSetFactory.getValueFromChoiceSet(targetChooser.getText(),CHOICESET_TARGET));
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType)) {
      inputHandle.setTargetBookmark(bookmarkEditor.getText().trim());
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
      if (reportDesignButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DESIGN);
        inputHandle.setReportName(locationEditor.getText().trim());
        for (Iterator iter=bindingList.iterator(); iter.hasNext(); ) {
          inputHandle.addParamBinding((ParamBinding)iter.next());
        }
      }
 else       if (reportDocumentButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT);
        inputHandle.setReportName(documentEditor.getText().trim());
      }
      if (!StringUtil.isBlank(bookmarkEditor.getText())) {
        inputHandle.setTargetBookmark(bookmarkEditor.getText().trim());
      }
      if (targetBookmarkButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK);
      }
 else       if (tocButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC);
      }
      if (sameWindowButton.getSelection()) {
        inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_SELF);
      }
 else {
        inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK);
      }
      for (int i=0; i < supportedFormats.length; i++) {
        if (((Button)formatCheckBtns.get(supportedFormats[i])).getSelection()) {
          inputHandle.setFormatType(supportedFormats[i]);
        }
      }
    }
    inputHandle.setLinkType(selectedType);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  setResult(inputHandle);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputHandle.setURI(null);
    inputHandle.setTargetBookmark(null);
    inputHandle.setTargetWindow(null);
    inputHandle.setReportName(null);
    inputHandle.setFormatType(null);
    inputHandle.getMember(Action.PARAM_BINDINGS_MEMBER).setValue(null);
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
      inputHandle.setURI(locationEditor.getText().trim());
      inputHandle.setTargetWindow(ChoiceSetFactory.getValueFromChoiceSet(targetChooser.getText(),CHOICESET_TARGET));
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType)) {
      inputHandle.setTargetBookmark(bookmarkEditor.getText().trim());
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
      if (reportDesignButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DESIGN);
        inputHandle.setReportName(locationEditor.getText().trim());
        for (Iterator iter=bindingList.iterator(); iter.hasNext(); ) {
          inputHandle.addParamBinding((ParamBinding)iter.next());
        }
      }
 else       if (reportDocumentButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT);
        inputHandle.setReportName(documentEditor.getText().trim());
      }
      if (!StringUtil.isBlank(bookmarkEditor.getText()) && !bookmarkEditor.getText().equals(""String_Node_Str"")) {
        inputHandle.setTargetBookmark(bookmarkEditor.getText().trim());
      }
      if (targetBookmarkButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK);
      }
 else       if (tocButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC);
      }
      if (sameWindowButton.getSelection()) {
        inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_SELF);
      }
 else {
        inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK);
      }
      for (int i=0; i < supportedFormats.length; i++) {
        if (((Button)formatCheckBtns.get(supportedFormats[i])).getSelection()) {
          inputHandle.setFormatType(supportedFormats[i]);
        }
      }
    }
    inputHandle.setLinkType(selectedType);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  setResult(inputHandle);
  super.okPressed();
}",0.988988988988989
76975,"private String[] getDocumentBookmarks(IReportDocument rdoc){
  List bookmarks=rdoc.getBookmarks();
  String[] bookmarkArray=new String[bookmarks.size()];
  int i=0;
  for (Iterator iter=bookmarks.iterator(); iter.hasNext(); ) {
    bookmarkArray[i]=""String_Node_Str"" + iter.next() + ""String_Node_Str"";
    i++;
  }
  return bookmarkArray;
}","private List getDocumentBookmarks(IReportDocument rdoc){
  List bookmarks=rdoc.getBookmarks();
  return bookmarks;
}",0.4912280701754385
76976,"/** 
 * Service provided by the fragment. This is the entry point of engine framgent. It generally includes a JSP page to render a certain part of web viewer.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException, BirtException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  if (attrBean != null && !attrBean.isMissingParameter() && !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(attrBean.getFormat())) {
    this.doPreService(request,response);
    this.doService(request,response);
    this.doPostService(request,response);
  }
 else {
    super.doPreService(request,response);
    super.doService(request,response);
    String target=super.doPostService(request,response);
    if (target != null && target.length() > 0) {
      RequestDispatcher rd=request.getRequestDispatcher(target);
      rd.include(request,response);
    }
  }
}","/** 
 * Service provided by the fragment. This is the entry point of engine framgent. It generally includes a JSP page to render a certain part of web viewer.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException, BirtException {
  BaseAttributeBean attrBean=(BaseAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  if (attrBean != null && !attrBean.isMissingParameter() && !this.__checkHTMLFormat(request)) {
    this.doPreService(request,response);
    this.doService(request,response);
    this.doPostService(request,response);
  }
 else {
    super.doPreService(request,response);
    super.doService(request,response);
    String target=super.doPostService(request,response);
    if (target != null && target.length() > 0) {
      RequestDispatcher rd=request.getRequestDispatcher(target);
      rd.include(request,response);
    }
  }
}",0.9641693811074918
76977,"/** 
 * Constructor.
 * @param servletConfig
 * @param config
 */
private ReportEngineService(ServletConfig servletConfig){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletConfig == null) {
    return;
  }
  config=new EngineConfig();
  HTMLEmitterConfig emitterConfig=new HTMLEmitterConfig();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (imageDirectory == null || imageDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(imageDirectory)) {
    imageDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  imageBaseUrl=""String_Node_Str"";
  String logDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (logDirectory == null || logDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(logDirectory)) {
    logDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  String logLevel=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  Level level=Level.OFF;
  if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.SEVERE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.WARNING;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.INFO;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.CONFIG;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINEST;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.OFF;
  }
  config.setLogConfig(logDirectory,level);
  String scriptLibDir=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (scriptLibDir == null || scriptLibDir.trim().length() <= 0 || ParameterAccessor.isRelativePath(scriptLibDir)) {
    scriptLibDir=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param servletConfig
 * @param config
 */
private ReportEngineService(ServletConfig servletConfig){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletConfig == null) {
    return;
  }
  config=new EngineConfig();
  HTMLEmitterConfig emitterConfig=new HTMLEmitterConfig();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (imageDirectory == null || imageDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(imageDirectory)) {
    imageDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"";
  String logDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (logDirectory == null || logDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(logDirectory)) {
    logDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  String logLevel=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  Level level=Level.OFF;
  if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.SEVERE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.WARNING;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.INFO;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.CONFIG;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINEST;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.OFF;
  }
  config.setLogConfig(logDirectory,level);
  String scriptLibDir=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (scriptLibDir == null || scriptLibDir.trim().length() <= 0 || ParameterAccessor.isRelativePath(scriptLibDir)) {
    scriptLibDir=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}",0.993882807469414
76978,"protected boolean layoutChildren(){
  repeatHeader();
  boolean hasNext=super.layoutChildren();
  tableEmitter.resolveAll();
  tableEmitter.flush();
  return hasNext;
}","protected boolean layoutChildren(){
  repeatHeader();
  boolean hasNext=super.layoutChildren();
  if (!isOutput) {
    startContent();
  }
  tableEmitter.resolveAll();
  tableEmitter.flush();
  return hasNext;
}",0.8865435356200527
76979,"public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(getSelectedObjects().getFirstElement()));
  }
  if (tool != null) {
    tool.doRename();
  }
}","public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(getSelectedObjects().getFirstElement()));
  }
  doRename();
}",0.9151670951156812
76980,"/** 
 * Create a new rename action under the specific viewer with the given text
 * @param sourceViewer the source viewer
 * @param text the text of the action
 */
public RenameAction(TreeViewer sourceViewer,String text){
  super(sourceViewer,text);
  setAccelerator(SWT.F2);
  if (isEnabled()) {
    tool=new RenameInlineTool(getSelectedItems()[0]);
  }
}","/** 
 * Create a new rename action under the specific viewer with the given text
 * @param sourceViewer the source viewer
 * @param text the text of the action
 */
public RenameAction(TreeViewer sourceViewer,String text){
  super(sourceViewer,text);
  setAccelerator(SWT.F2);
  if (isEnabled()) {
    selectedItem=getSelectedItems()[0];
  }
}",0.9455587392550144
76981,"/** 
 * Change default value format from design file. <p> <ul> <li>if data type is <code>PARAM_TYPE_DATETIME</code>, then convert old ISO8601 datetime format to standard format.</li> </li> </ul>
 * @param dataType the parameter data type
 * @param defaultValue the default value from design file
 * @return
 */
public static String getDefaultValue(String dataType,String defaultValue){
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
    Date obj=null;
    try {
      obj=DateFormatISO8601.parse(defaultValue);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return getDisplayValue(obj);
  }
  return defaultValue;
}","/** 
 * Change default value format from design file. <p> <ul> <li>if data type is <code>PARAM_TYPE_DATETIME</code>, then convert old ISO8601 datetime format to standard format.</li> </li> </ul>
 * @param dataType the parameter data type
 * @param defaultValue the default value from design file
 * @return
 */
public static String getDefaultValue(String dataType,String defaultValue){
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
    Date obj=null;
    try {
      obj=DateFormatISO8601.parse(defaultValue);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return getDisplayValue(obj);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equalsIgnoreCase(dataType)) {
    return getDisplayValue(Boolean.valueOf(defaultValue));
  }
  return defaultValue;
}",0.8814016172506739
76982,"private void initAnchorChooser(Object handle,boolean isToc){
  anchorChooser.removeAll();
  if (handle instanceof ReportDesignHandle) {
    if (isToc) {
      List chooserItems=((ReportDesignHandle)handle).getAllTocs();
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      List chooserItems=((ReportDesignHandle)handle).getAllBookmarks();
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
  }
 else   if (handle instanceof IReportDocument) {
    if (isToc) {
      String format=""String_Node_Str"";
      for (int i=0; i < supportedFormats.length; i++) {
        if (((Button)formatCheckBtns.get(supportedFormats[i])).getSelection()) {
          format=supportedFormats[i];
          break;
        }
      }
      ITOCTree tocTree=((IReportDocument)handle).getTOCTree(format,SessionHandleAdapter.getInstance().getSessionHandle().getULocale());
      TOCNode rootTocNode=tocTree.getRoot();
      List chooserItems=getAllTocDisplayString(rootTocNode);
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      List chooserItems=getDocumentBookmarks((IReportDocument)handle);
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
  }
  bookmarkEditor.setText(""String_Node_Str"");
  String bookmark=inputHandle.getTargetBookmark();
  String[] chooserValues=anchorChooser.getItems();
  if (bookmark != null && chooserValues != null) {
    for (int i=0; i < chooserValues.length; i++) {
      if (bookmark.equals(chooserValues[i])) {
        anchorChooser.select(i);
        bookmarkEditor.setText(anchorChooser.getText());
        break;
      }
    }
  }
  anchorChooser.setEnabled(anchorChooser.getItemCount() > 0);
}","private void initAnchorChooser(Object handle,boolean isToc){
  anchorChooser.removeAll();
  if (handle instanceof ReportDesignHandle) {
    if (isToc) {
      List chooserItems=((ReportDesignHandle)handle).getAllTocs();
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      List chooserItems=((ReportDesignHandle)handle).getAllBookmarks();
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
  }
 else   if (handle instanceof IReportDocument) {
    if (isToc) {
      String format=""String_Node_Str"";
      for (int i=0; i < supportedFormats.length; i++) {
        if (((Button)formatCheckBtns.get(supportedFormats[i])).getSelection()) {
          format=supportedFormats[i];
          break;
        }
      }
      ITOCTree tocTree=((IReportDocument)handle).getTOCTree(format,SessionHandleAdapter.getInstance().getSessionHandle().getULocale());
      TOCNode rootTocNode=tocTree.getRoot();
      List chooserItems=getAllTocDisplayString(rootTocNode);
      chooserItems.add(0,(Object)new String(""String_Node_Str""));
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      anchorChooser.setItems(getDocumentBookmarks((IReportDocument)handle));
    }
  }
  bookmarkEditor.setText(""String_Node_Str"");
  String bookmark=inputHandle.getTargetBookmark();
  String[] chooserValues=anchorChooser.getItems();
  if (bookmark != null && chooserValues != null) {
    for (int i=0; i < chooserValues.length; i++) {
      if (bookmark.equals(chooserValues[i])) {
        anchorChooser.select(i);
        bookmarkEditor.setText(anchorChooser.getText());
        break;
      }
    }
  }
  anchorChooser.setEnabled(anchorChooser.getItemCount() > 0);
}",0.7317948717948718
76983,"private List getDocumentBookmarks(IReportDocument rdoc){
  List bookmarks=rdoc.getBookmarks();
  return bookmarks;
}","private String[] getDocumentBookmarks(IReportDocument rdoc){
  List bookmarks=rdoc.getBookmarks();
  String[] bookmarkArray=new String[bookmarks.size() + 1];
  bookmarkArray[0]=""String_Node_Str"";
  int i=1;
  for (Iterator iter=bookmarks.iterator(); iter.hasNext(); ) {
    bookmarkArray[i]=""String_Node_Str"" + iter.next() + ""String_Node_Str"";
    i++;
  }
  return bookmarkArray;
}",0.4457831325301205
76984,"/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSetExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSet)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
 else   if (provider instanceof OdaExtensibilityProvider) {
    if (extensionID != null) {
      String newExtensionID=((OdaExtensibilityProvider)provider).convertDataSetExtensionID(extensionID);
      if (!extensionID.equals(newExtensionID)) {
        setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,newExtensionID);
      }
    }
  }
}","/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSetExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSet)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
 else {
    String newExtensionID=provider.convertDataSetExtensionID(extensionID);
    if (!extensionID.equals(newExtensionID)) {
      setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,newExtensionID);
    }
  }
}",0.9385816084153376
76985,"/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSourceExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSource)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
 else   if (provider instanceof OdaExtensibilityProvider) {
    if (extensionID != null) {
      String newExtensionID=((OdaExtensibilityProvider)provider).convertDataSourceExtensionID(extensionID);
      if (!extensionID.equals(newExtensionID)) {
        setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,newExtensionID);
      }
    }
  }
}","/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSourceExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSource)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
 else {
    String newExtensionID=provider.convertDataSourceExtensionID(extensionID);
    if (!extensionID.equals(newExtensionID)) {
      setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,newExtensionID);
    }
  }
}",0.9389544688026982
76986,"/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
static List compileColumnExpression(String expression,boolean rowMode) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  if (rowMode)   ROW_INDICATOR=ROW_COLUMN_INDICATOR;
 else   ROW_INDICATOR=DATASETROW_INDICATOR;
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=instance.parse(expression,context);
    instance.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(instance.pluginId,ResourceConstants.INVALID_EXPRESSION,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}","/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
static List compileColumnExpression(ExpressionParserUtility util,String expression,boolean rowMode) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  if (rowMode)   util.ROW_INDICATOR=ROW_COLUMN_INDICATOR;
 else   util.ROW_INDICATOR=DATASETROW_INDICATOR;
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=util.parse(expression,context);
    util.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(util.pluginId,ResourceConstants.INVALID_EXPRESSION,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}",0.955595026642984
76987,"static boolean isDirectColumnRef(String expression,boolean mode) throws BirtException {
  isDirectColumnRef=false;
  compileColumnExpression(expression,mode);
  return isDirectColumnRef;
}","static boolean isDirectColumnRef(String expression,boolean mode) throws BirtException {
  ExpressionParserUtility util=new ExpressionParserUtility();
  util.isDirectColumnRef=false;
  compileColumnExpression(util,expression,mode);
  return util.isDirectColumnRef;
}",0.7858719646799117
76988,"/** 
 * @return
 * @throws BirtException 
 */
static boolean hasAggregation(String expression,boolean mode) throws BirtException {
  hasAggregation=false;
  compileColumnExpression(expression,mode);
  return hasAggregation;
}","/** 
 * @return
 * @throws BirtException 
 */
static boolean hasAggregation(String expression,boolean mode) throws BirtException {
  ExpressionParserUtility util=new ExpressionParserUtility();
  util.hasAggregation=false;
  compileColumnExpression(util,expression,mode);
  return util.hasAggregation;
}",0.8538899430740038
76989,"/** 
 * Extract all column expression info
 * @param oldExpression
 * @param mode if true, it means to compile the ""row"" expression.else extract ""dataSetRow"" expression
 * @return
 * @throws BirtException
 */
public static List extractColumnExpressions(String oldExpression,boolean mode) throws BirtException {
  if (oldExpression == null || oldExpression.trim().length() == 0)   return new ArrayList();
  return ExpressionParserUtility.compileColumnExpression(oldExpression,mode);
}","/** 
 * Extract all column expression info
 * @param oldExpression
 * @param mode if true, it means to compile the ""row"" expression.else extract ""dataSetRow"" expression
 * @return
 * @throws BirtException
 */
public static List extractColumnExpressions(String oldExpression,boolean mode) throws BirtException {
  if (oldExpression == null || oldExpression.trim().length() == 0)   return new ArrayList();
  return ExpressionParserUtility.compileColumnExpression(new ExpressionParserUtility(),oldExpression,mode);
}",0.9437751004016064
76990,"/** 
 * @return temp root dir directory
 */
private void createTempRootDir(){
  if (tempRootDirStr != null && new File(tempRootDirStr).exists() == true)   return;
  File tempDtEDir=null;
synchronized (cacheCounter1) {
    String tempDirStr=DataEngineContextExt.getInstance().getTmpdir();
    tempDtEDir=new File(tempDirStr,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1);
    cacheCounter1=new Integer(cacheCounter1.intValue() + 1);
    int x=0;
    while (tempDtEDir.exists()) {
      x++;
      tempDtEDir=new File(tempDirStr,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1+ ""String_Node_Str""+ x);
    }
    tempDtEDir.mkdir();
    tempDtEDir.deleteOnExit();
  }
  try {
    tempRootDirStr=tempDtEDir.getCanonicalPath();
  }
 catch (  IOException e) {
  }
}","/** 
 * @return temp root dir directory
 */
private void createTempRootDir(){
  if (tempRootDirStr != null && new File(tempRootDirStr).exists() == true)   return;
  File tempDtEDir=null;
synchronized (cacheCounter1) {
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1);
    cacheCounter1=new Integer(cacheCounter1.intValue() + 1);
    int x=0;
    while (tempDtEDir.exists()) {
      x++;
      tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1+ ""String_Node_Str""+ x);
    }
    tempDtEDir.mkdir();
    tempDtEDir.deleteOnExit();
  }
  try {
    tempRootDirStr=tempDtEDir.getCanonicalPath();
  }
 catch (  IOException e) {
  }
}",0.949468085106383
76991,"/** 
 * construction
 */
CacheMapManager(){
  this.cacheMap=new HashMap();
  this.folderUtil=new FolderUtil();
}","/** 
 * construction
 */
CacheMapManager(String tempDir){
  this.cacheMap=new HashMap();
  this.folderUtil=new FolderUtil();
  this.tempDir=tempDir;
}",0.8549618320610687
76992,"/** 
 * @return session temp dir
 */
private String createSessionTempDir(){
  this.createTempRootDir();
  String sessionTempDirStr;
  final String prefix=""String_Node_Str"";
  String[] filesName=new File(tempRootDirStr).list();
  Arrays.sort(filesName,new Comparator(){
    public int compare(    Object o1,    Object o2){
      String f1=(String)o1;
      String f2=(String)o2;
      int index1=f1.indexOf(prefix);
      int index2=f2.indexOf(prefix);
      if (index1 < 0 || index2 < 0)       return 0;
      Integer i1=Integer.valueOf(f1.substring(index1 + prefix.length()));
      Integer i2=Integer.valueOf(f2.substring(index2 + prefix.length()));
      return i1.compareTo(i2);
    }
  }
);
  int maxIndex=-1;
  for (int i=filesName.length - 1; i >= 0; i--) {
    int index=filesName[i].indexOf(prefix);
    if (index == 0) {
      maxIndex=Integer.valueOf(filesName[i].substring(index + prefix.length())).intValue();
      break;
    }
  }
  maxIndex++;
  sessionTempDirStr=tempRootDirStr + File.separator + prefix+ maxIndex;
  File file=new File(sessionTempDirStr);
  file.mkdir();
  return sessionTempDirStr;
}","/** 
 * @return session temp dir
 */
private String createSessionTempDir(){
  this.createTempRootDir();
  final String prefix=""String_Node_Str"";
synchronized (cacheCounter2) {
    String sessionTempDir=tempRootDirStr + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2;
    cacheCounter2=new Integer(cacheCounter2.intValue() + 1);
    File sessionDirFile=new File(sessionTempDir);
    int x=0;
    while (sessionDirFile.exists()) {
      x++;
      sessionTempDir=tempRootDirStr + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2+ ""String_Node_Str""+ x;
      sessionDirFile=new File(sessionTempDir);
    }
    sessionDirFile.mkdir();
    sessionDirFile.deleteOnExit();
    return sessionTempDir;
  }
}",0.2114347357065803
76993,"public IResultIterator execute(IEventHandler eventHandler) throws DataException {
  if (customDataSet == null) {
    return new CachedResultSet(this,resultMetadata,resultObjsIterator,groupingLevel,eventHandler);
  }
 else {
    if (DataSetCacheManager.getInstance().doesSaveToCache() == false)     return new CachedResultSet(this,customDataSet,eventHandler);
 else     return new CachedResultSet(this,resultMetadata,new DataSetResultCache(customDataSet,resultMetadata),eventHandler);
  }
}","public IResultIterator execute(IEventHandler eventHandler) throws DataException {
  if (customDataSet == null) {
    return new CachedResultSet(this,resultMetadata,resultObjsIterator,groupingLevel,eventHandler,session);
  }
 else {
    if (this.session.getDataSetCacheManager().doesSaveToCache() == false)     return new CachedResultSet(this,customDataSet,eventHandler,session);
 else     return new CachedResultSet(this,resultMetadata,new DataSetResultCache(customDataSet,resultMetadata,session),eventHandler,session);
  }
}",0.9112426035502958
76994,"/** 
 * Construction
 */
private DataSetCacheManager(){
  dataSourceDesign=null;
  dataSetDesign=null;
  cacheOption=DEFAULT;
  alwaysCacheRowCount=0;
  cacheMapManager=new CacheMapManager();
}","/** 
 * Construction
 */
public DataSetCacheManager(String tempDir){
  dataSourceDesign=null;
  dataSetDesign=null;
  cacheOption=DEFAULT;
  alwaysCacheRowCount=0;
  cacheMapManager=new CacheMapManager(tempDir);
}",0.9211822660098522
76995,"public ICandidateQuery newCandidateQuery(){
  return new CandidateQuery();
}","public ICandidateQuery newCandidateQuery(){
  return new CandidateQuery(this.session);
}",0.926829268292683
76996,"/** 
 * @param driverName
 * @param connProperties
 */
DataSource(String driverName,Map connProperties){
  this.driverName=driverName;
  if (connProperties != null)   this.connectionProps.putAll(connProperties);
}","/** 
 * @param driverName
 * @param connProperties
 */
DataSource(String driverName,Map connProperties,DataEngineSession session){
  this.driverName=driverName;
  if (connProperties != null)   this.connectionProps.putAll(connProperties);
  this.session=session;
}",0.8949579831932774
76997,"public IDataSourceQuery newQuery(String queryType,String queryText) throws DataException {
  return new DataSourceQuery(this,queryType,queryText);
}","public IDataSourceQuery newQuery(String queryType,String queryText) throws DataException {
  return new DataSourceQuery(this,queryType,queryText,this.session);
}",0.9579288025889968
76998,"public Collection getSelectionListForCascadingGroup(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,options);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(options);
      if (bean != null)       task.setParameterValues(bean.getParameters());
      task.evaluateQuery(groupName);
      Collection selectionList=task.getSelectionListForCascadingGroup(groupName,groupKeys);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}","public Collection getSelectionListForCascadingGroup(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,options);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(options);
      if (bean != null)       task.setParameterValues(bean.getParameters());
      HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
      BirtUtility.addTask(request,task);
      task.evaluateQuery(groupName);
      Collection selectionList=task.getSelectionListForCascadingGroup(groupName,groupKeys);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}",0.911408540471638
76999,"public Collection getParameterSelectionList(IViewerReportDesignHandle design,InputOptions runOptions,String paramName) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,runOptions);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(runOptions);
      if (bean != null)       task.setParameterValues(bean.getParameters());
      Collection selectionList=task.getSelectionList(paramName);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}","public Collection getParameterSelectionList(IViewerReportDesignHandle design,InputOptions runOptions,String paramName) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,runOptions);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(runOptions);
      if (bean != null)       task.setParameterValues(bean.getParameters());
      HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
      BirtUtility.addTask(request,task);
      Collection selectionList=task.getSelectionList(paramName);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}",0.8991477272727273
77000,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.998434074538052
